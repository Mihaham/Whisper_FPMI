[00:00.000 --> 00:08.800]  В прошлый раз мы долго-долго говорили о том, как он строится
[00:08.800 --> 00:11.720]  за линию, а главное почему, и даже не успели толком
[00:11.720 --> 00:15.600]  поговорить на тему того, а что с ним вообще еще можно
[00:15.600 --> 00:16.600]  делать.
[00:16.600 --> 00:19.400]  Ну то есть, есть, конечно, очевидный момент.
[00:19.400 --> 00:23.100]  Очевидный момент то, что задача о том, что найти под
[00:23.100 --> 00:25.960]  строку в строке, теперь в суфистном автомате очень
[00:25.960 --> 00:26.960]  просто.
[00:26.960 --> 00:32.560]  Каким образом это сделать?
[00:32.560 --> 00:33.560]  Каким образом это сделать?
[00:33.560 --> 00:38.840]  Да, задача, дадан текст С и, возможно, его суфистный
[00:38.840 --> 00:39.840]  автомат.
[00:39.840 --> 00:44.960]  Да, дадан запрос П, входит ли строка П в текст С.
[00:44.960 --> 00:51.000]  Ну сколько раз от следующего, хотя для начала давайте
[00:51.000 --> 00:54.000]  так первый вопрос, там хотя бы входит ли она вообще
[00:54.000 --> 00:55.000]  туда, да или нет.
[00:56.000 --> 00:57.000]  Давайте как это сделать?
[01:02.000 --> 01:05.440]  Ну можно сделать все терминальные, а можно сказать проще.
[01:05.440 --> 01:08.280]  Можно сказать, давайте просто попробуем пройтись в автомате
[01:08.280 --> 01:10.720]  из стартовой вершины по строке П, если полностью
[01:10.720 --> 01:14.000]  прям по всем символам прожили, значит она входит.
[01:14.000 --> 01:16.320]  Более того, да, если мы дошли еще и в конце до терминальной
[01:16.320 --> 01:19.080]  вершины, значит это еще и суфикс, ну а если нет, то
[01:19.080 --> 01:20.080]  нет.
[01:20.080 --> 01:23.800]  А вот следующий вопрос, а если я хочу узнать сколько
[01:23.800 --> 01:27.720]  раз эта строка входит в строку С как подстрока.
[01:27.720 --> 01:32.800]  Ну вот пока я стираю.
[01:32.800 --> 01:44.800]  Сейчас сколько терминальных вершин достижены за крышей?
[01:44.800 --> 01:45.800]  Чего?
[01:45.800 --> 01:48.080]  Вау, это тут причем.
[01:48.080 --> 01:51.440]  Это будет означать, сколько префиксов этой подстроки
[01:51.440 --> 01:53.720]  являются суфиксами строки.
[01:54.720 --> 01:55.720]  Ничего не понятно.
[01:55.720 --> 01:58.720]  Не, ну может надо типа пройтись и попрыгать по каким-то
[01:58.720 --> 01:59.720]  суфиксам.
[01:59.720 --> 02:00.720]  И чем это поможет?
[02:00.720 --> 02:01.720]  Чем поможет?
[02:01.720 --> 02:04.720]  Я сейчас об чем проблема, я не очень понимаю.
[02:04.720 --> 02:05.720]  Так, ну в ту...
[02:05.720 --> 02:06.720]  Мы нашли подстроку.
[02:06.720 --> 02:07.720]  Так, нашли.
[02:11.720 --> 02:13.720]  Дописываем в нее что-то дальше.
[02:17.720 --> 02:21.720]  Мы в конце концов от каждого правления дойдем до терминала.
[02:23.720 --> 02:25.720]  Ну если в тупую идти, да.
[02:25.720 --> 02:28.720]  Если рандомно, то тоже да.
[02:28.720 --> 02:31.720]  Нам нужно сколько различных терминальных вершин.
[02:31.720 --> 02:32.720]  Ну по сути, да.
[02:32.720 --> 02:35.720]  Вопрос, только вопрос по правочке, не сколько различных
[02:35.720 --> 02:37.720]  терминальных вершин, может быть тут важное уточнение,
[02:37.720 --> 02:40.720]  а с какими способами мы из этой вершины можем прийти
[02:40.720 --> 02:41.720]  в терминал.
[02:41.720 --> 02:44.720]  Это важно, потому что два разных способа прихода
[02:44.720 --> 02:46.720]  в терминал дают вам две разные строки.
[02:46.720 --> 02:54.720]  Да, кстати, это вот важный момент, знаете, потому что
[02:54.720 --> 02:56.720]  смотрите, найти с какими способами дойти до терминала
[02:56.720 --> 02:58.720]  это можно сделать простой динамикой.
[02:58.720 --> 02:59.720]  А дойти...
[02:59.720 --> 03:01.720]  А сколько терминальных вершин вы можете попасть?
[03:01.720 --> 03:04.720]  Я, честно говоря, за адекватно симпатику не умею решать
[03:04.720 --> 03:05.720]  эту задачу.
[03:05.720 --> 03:07.720]  Ну да, скорее всего никто не умеет, хотя...
[03:07.720 --> 03:10.720]  Нет, может кто-то и умеет, я не знаю.
[03:10.720 --> 03:13.720]  Ну вот, да, я не знаю, я пока тоже так и не придумал.
[03:13.720 --> 03:17.720]  Вот, но правда фишка в том, что это решение слишком
[03:17.720 --> 03:18.720]  сложное.
[03:20.720 --> 03:21.720]  Вот.
[03:21.720 --> 03:22.720]  Чего?
[03:22.720 --> 03:23.720]  Вот так.
[03:23.720 --> 03:26.720]  Да, написать динамику для каждой вершины, сколько
[03:26.720 --> 03:28.720]  способов дойти до терминала в фоциклическом графе, это
[03:28.720 --> 03:32.720]  очень сложное решение для этой задачи.
[03:32.720 --> 03:34.720]  Есть существенно более простое.
[03:34.720 --> 03:35.720]  Топ-сорт.
[03:35.720 --> 03:37.720]  Не, причем топ-сорт.
[03:37.720 --> 03:38.720]  Ну решение топ-сорт.
[03:38.720 --> 03:39.720]  Еще тупее.
[03:40.720 --> 03:41.720]  Вот.
[03:41.720 --> 03:44.720]  Если вы, конечно, понимаете, как у нас устроен суффиксный
[03:44.720 --> 03:45.720]  автомат.
[03:48.720 --> 03:49.720]  Ну окей.
[03:49.720 --> 03:50.720]  Мы попробовали префикс отсудиться.
[03:50.720 --> 03:53.720]  Теперь вам попробовать префикс отсудиться.
[03:53.720 --> 03:54.720]  Да, это ничем это поможет.
[04:03.720 --> 04:04.720]  Не.
[04:04.720 --> 04:05.720]  Все гораздо проще.
[04:06.720 --> 04:09.720]  То есть нет начала, конечно, то же самое.
[04:09.720 --> 04:13.720]  Вы берете строку P и проходите в автомате по этой строке.
[04:13.720 --> 04:17.720]  И вот вы пришли в какое-то мистическое состояние.
[04:17.720 --> 04:18.720]  Ну назовем его Q.
[04:21.720 --> 04:29.720]  Тогда количество вхождений строки P в текст S равно.
[04:29.720 --> 04:34.720]  Можно по количеству идти по суффиксным ссылкам.
[04:34.720 --> 04:36.720]  Так идти по суффиксным ссылкам.
[04:36.720 --> 04:37.720]  В детей.
[04:37.720 --> 04:38.720]  В детей.
[04:38.720 --> 04:40.720]  А что нам дадут дети?
[04:40.720 --> 04:41.720]  Сейчас.
[04:41.720 --> 04:45.720]  Ну суффиксная ссылка, она же как бы уменьшает строку.
[04:45.720 --> 04:47.720]  Ну вот так, уменьшает, да.
[04:47.720 --> 04:48.720]  Но нам же не надо уменьшать.
[04:48.720 --> 04:49.720]  Нам же надо...
[04:49.720 --> 04:53.720]  А поэтому я хотел проходить не по суффиксным, а по развернутым
[04:53.720 --> 04:56.720]  суффиксным ссылкам.
[04:56.720 --> 04:58.720]  По развернутым.
[04:58.720 --> 05:02.720]  Да, ну типа, когда мы проходим по развернутым, то мы выписываем
[05:02.720 --> 05:04.720]  что-то вначале.
[05:07.720 --> 05:08.720]  Нет, хотя нет.
[05:08.720 --> 05:09.720]  А, а может я и наврал.
[05:09.720 --> 05:11.720]  Может это решение оптимальное, да?
[05:11.720 --> 05:13.720]  Так с чем-то я это перепутал.
[05:13.720 --> 05:16.720]  Сейчас я подумал, я подумал про то, сколько у вас можно дойти,
[05:16.720 --> 05:18.720]  но это очевидно не правда.
[05:20.720 --> 05:21.720]  Нет, почему?
[05:21.720 --> 05:22.720]  Сколько дойти до терминала, это правда.
[05:22.720 --> 05:23.720]  Сейчас, ну там.
[05:25.720 --> 05:26.720]  А, ну впрочем, нет.
[05:26.720 --> 05:27.720]  Да, это неправда.
[05:29.720 --> 05:30.720]  Ладно.
[05:30.720 --> 05:33.720]  Да, правда было бы, если бы я сказал, да.
[05:34.720 --> 05:35.720]  Да.
[05:35.720 --> 05:38.720]  Если бы я вас попросил найти, кстати, вообще, каков размер
[05:38.720 --> 05:40.720]  класса эквивалентности строки P?
[05:42.720 --> 05:43.720]  Строки P?
[05:43.720 --> 05:44.720]  Угу.
[05:47.720 --> 05:49.720]  Класса эквивалентности...
[05:50.720 --> 05:55.720]  Ну, сейчас, это просто размера длина P, минус длина...
[05:55.720 --> 05:58.720]  Ну, длина, да, длина Q, на этот раз вот, да.
[05:59.720 --> 06:00.720]  Да, да, да.
[06:00.720 --> 06:02.720]  Ой, а в предыдущий раз это я наврал, да.
[06:06.720 --> 06:07.720]  Ой, ну да.
[06:07.720 --> 06:09.720]  То есть это вот раз размер класса эквивалентности.
[06:09.720 --> 06:11.720]  Но если вам интересно количество вхождений,
[06:11.720 --> 06:13.720]  то действительно, видимо, самое оптимальное
[06:13.720 --> 06:16.720]  это просто на этом автомате потом еще динамичку написать.
[06:18.720 --> 06:19.720]  Не знаю.
[06:19.720 --> 06:20.720]  Ну, бывает такая задача.
[06:20.720 --> 06:21.720]  Что такое длина Q?
[06:21.720 --> 06:22.720]  Чего?
[06:22.720 --> 06:23.720]  Что такое длина Q?
[06:23.720 --> 06:24.720]  Длина Q?
[06:25.720 --> 06:27.720]  Ну, смотрите, это длина максимальной строки
[06:27.720 --> 06:30.720]  в класса эквивалентности в соответствующем вершине строки.
[06:30.720 --> 06:33.720]  То есть мы как бы напомним, что когда мы строили
[06:33.720 --> 06:36.720]  суффиксный автомат, мы этот лен в явном виде поддерживаемый,
[06:36.720 --> 06:38.720]  он нам очень сильно помогает.
[06:38.720 --> 06:39.720]  Сейчас тут вопрос.
[06:40.720 --> 06:43.720]  А что такое в терминах задачи может быть класса эквивалентности?
[06:44.720 --> 06:45.720]  Ой, там бы...
[06:45.720 --> 06:47.720]  А вот прям честно и говорим.
[06:48.720 --> 06:50.720]  На плане можно написать размер класса эквивалентности,
[06:50.720 --> 06:51.720]  но это как-то тупо.
[06:51.720 --> 06:53.720]  Нет, ну там были задачи, что говорим,
[06:53.720 --> 06:54.720]  что у каждого...
[06:55.720 --> 06:57.720]  Нет, там говорится обычно так, что
[06:57.720 --> 06:59.720]  у каждой подстроки есть позиции,
[06:59.720 --> 07:01.720]  где ее вхождение заканчивается.
[07:01.720 --> 07:03.720]  Будем говорить, что...
[07:03.720 --> 07:04.720]  Да, ну там...
[07:04.720 --> 07:08.720]  То есть, короче, он никак адекватно не определяется?
[07:08.720 --> 07:10.720]  Чем-то вот, да.
[07:10.720 --> 07:11.720]  Нет, ну это вот да.
[07:11.720 --> 07:15.720]  Ну, то есть как-то там, может, задачи чуть-чуть переформулировали,
[07:15.720 --> 07:16.720]  но не более.
[07:16.720 --> 07:18.720]  То есть там просили задачи, которые, по большому счету,
[07:18.720 --> 07:19.720]  те же суффиксы автомата.
[07:19.720 --> 07:21.720]  Да, найдите размер класса эквивалентности,
[07:21.720 --> 07:24.720]  вы видите их в возрастающем порядке.
[07:24.720 --> 07:26.720]  Это типа проверка, что вы написали за автомат.
[07:26.720 --> 07:28.720]  Ну да, оно такое, да, просто...
[07:28.720 --> 07:30.720]  Простое, да, простое упражнение.
[07:30.720 --> 07:32.720]  То есть самое главное в этой задаче не тупануть,
[07:32.720 --> 07:34.720]  потому что можно было тоже сказать,
[07:34.720 --> 07:36.720]  что, допустим, у вас есть суффиксный автомат,
[07:36.720 --> 07:37.720]  как черный ящик, да?
[07:37.720 --> 07:40.720]  Тогда, как бы, какое количество строчек у нас...
[07:40.720 --> 07:42.720]  Тогда у нас две строки эквивалентны,
[07:42.720 --> 07:44.720]  тогда и только тогда, когда они приходят в одну и ту же вершину.
[07:44.720 --> 07:46.720]  Давайте найдем это количество динамикой.
[07:48.720 --> 07:50.720]  Вот, в принципе, так тоже, кстати, это та же...
[07:51.720 --> 07:52.720]  Да.
[07:53.720 --> 07:55.720]  Ну, собственно, да, мы можем и такую динамику,
[07:55.720 --> 07:57.720]  при желании, написать.
[07:57.720 --> 08:00.720]  Но это как бы в задаче на статик РСК
[08:00.720 --> 08:02.720]  написать дерево отрезков.
[08:02.720 --> 08:04.720]  То есть, да, вы его быстро напишете,
[08:04.720 --> 08:06.720]  да, скорее всего, получите там мгновенный accepted,
[08:06.720 --> 08:10.720]  но просто, скажем так, кто-то сделал то же самое
[08:10.720 --> 08:12.720]  на 10 минут быстрее вас.
[08:12.720 --> 08:14.720]  Вот, ну или там, за какое время
[08:14.720 --> 08:16.720]  вы там пишете дерево отрезков.
[08:17.720 --> 08:18.720]  Вот.
[08:18.720 --> 08:19.720]  Ну, хорошо.
[08:21.720 --> 08:22.720]  Вот.
[08:22.720 --> 08:23.720]  Вот.
[08:23.720 --> 08:24.720]  Ну да, в этом смысле да.
[08:24.720 --> 08:27.720]  То есть более того, в принципе, там...
[08:27.720 --> 08:29.720]  Господи, какие там разные задачи
[08:29.720 --> 08:31.720]  на суффиксный автомат бывают, там смешные.
[08:31.720 --> 08:33.720]  Вот у меня вообще вспомнилась такая веселая.
[08:34.720 --> 08:36.720]  Там даже Алиса и Боб играют на строке в игру.
[08:38.720 --> 08:39.720]  Значит, игра такая.
[08:43.720 --> 08:45.720]  Да-да, строка С там...
[08:46.720 --> 08:48.720]  Да, на строка С, допустим, да,
[08:48.720 --> 08:51.720]  и дается ее исходно какая-то под строка П.
[08:52.720 --> 08:54.720]  Алиса и Боб играют, значит, в такую игру.
[08:54.720 --> 08:55.720]  Каждый...
[08:55.720 --> 08:57.720]  Каждый из игроков по очереди приписывает
[08:57.720 --> 08:59.720]  к строке П какой-то символ.
[08:59.720 --> 09:01.720]  Так, по очереди, по очереди, по очереди.
[09:01.720 --> 09:03.720]  Ну, выбирают сами какой, естественно.
[09:03.720 --> 09:07.720]  Ну а единственное условие приписывать надо таким образом,
[09:07.720 --> 09:10.720]  чтобы, соответственно, строка П
[09:10.720 --> 09:12.720]  все еще оставалась под строкой строки С.
[09:13.720 --> 09:15.720]  Проигрывает, естественно, тот, кто не может сделать ход.
[09:17.720 --> 09:18.720]  Так.
[09:19.720 --> 09:21.720]  Ну вот, давайте допустим, до нас строка П,
[09:21.720 --> 09:22.720]  кто выиграет при правильной игре.
[09:22.720 --> 09:23.720]  Давайте для разминочки.
[09:33.720 --> 09:34.720]  Ну, по сути, да.
[09:34.720 --> 09:37.720]  Правда, ретроанализм в классическом виде даже не нужен,
[09:37.720 --> 09:38.720]  потому что граф ациклический.
[09:39.720 --> 09:41.720]  Да, то есть там все-таки помним, да,
[09:41.720 --> 09:43.720]  что на ациклическом графе можно и простую динамичку написать.
[09:43.720 --> 09:44.720]  Да.
[09:44.720 --> 09:46.720]  То есть, по сути, игра идет даже не столько на подстроках,
[09:46.720 --> 09:48.720]  сколько на автомате.
[09:48.720 --> 09:50.720]  И мы там ходим по вершинам.
[09:50.720 --> 09:51.720]  Это да.
[09:51.720 --> 09:54.720]  Более того, обычно задача дается даже в более продвинутом виде.
[09:56.720 --> 09:58.720]  Значит, Али, там, допустим, Боб,
[09:58.720 --> 10:01.720]  значит, исходную строку выбирает Боб,
[10:01.720 --> 10:03.720]  он очень добрый, он хочет выбирать такую строку,
[10:03.720 --> 10:05.720]  чтобы Алиса могла выиграть.
[10:06.720 --> 10:07.720]  Так вот, задача.
[10:07.720 --> 10:08.720]  Так вот.
[10:09.720 --> 10:10.720]  Но почему?
[10:10.720 --> 10:11.720]  Нет, это называется джентльмен.
[10:11.720 --> 10:12.720]  Почему глупый-то сразу?
[10:13.720 --> 10:15.720]  Если поддаваться человеку,
[10:15.720 --> 10:17.720]  это высказывать ему неуважение.
[10:19.720 --> 10:21.720]  Поэтому это нифига не джентльмен.
[10:21.720 --> 10:22.720]  Ну, как сказать?
[10:26.720 --> 10:28.720]  Если человек не знает о том, что ты ему поддаешься.
[10:29.720 --> 10:31.720]  Но ты все еще высказываешь ему неуважение.
[10:32.720 --> 10:33.720]  То есть ты заведомо выбираешь такую строку,
[10:33.720 --> 10:34.720]  что ты всегда побеждаешь?
[10:34.720 --> 10:36.720]  Нет, ну скажем так, если бы там было не...
[10:37.720 --> 10:40.720]  Нет, понимаешь, если бы там он и жрал вместо Алисы с Андреем,
[10:40.720 --> 10:41.720]  то в принципе да.
[10:42.720 --> 10:44.720]  Но когда речь идет о девушке,
[10:44.720 --> 10:45.720]  которую ты хочешь порадовать,
[10:45.720 --> 10:47.720]  знаешь, можно в принципе и поддаться.
[10:48.720 --> 10:50.720]  Миша свою сестру ты тоже уничтожает, да?
[10:50.720 --> 10:51.720]  Да.
[10:52.720 --> 10:54.720]  Мы всегда на прессе играем, я выигрываю всегда.
[10:55.720 --> 10:56.720]  Ей, наверное, очень интересно.
[10:57.720 --> 10:58.720]  Ну, не знаю.
[10:59.720 --> 11:00.720]  Ой, кошмар.
[11:01.720 --> 11:03.720]  Я еще выигрываю за нее против меня.
[11:05.720 --> 11:07.720]  А потом делаю так, чтобы она ошиблась, да?
[11:08.720 --> 11:09.720]  Логично, да.
[11:09.720 --> 11:10.720]  Сначала я делаю так, чтобы она его...
[11:11.720 --> 11:12.720]  Она ошиблась и я обманываю,
[11:12.720 --> 11:14.720]  а потом показываю, как она могла меня выиграть.
[11:14.720 --> 11:16.720]  Да, все понятно, понятно, понятно.
[11:16.720 --> 11:17.720]  Ну ладно.
[11:17.720 --> 11:18.720]  Она радуется.
[11:19.720 --> 11:20.720]  Да-да-да-да-да.
[11:23.720 --> 11:24.720]  Ну вот.
[11:25.720 --> 11:27.720]  Так вот, но там задача еще более крутая.
[11:28.720 --> 11:31.720]  То есть, чтобы совсем Алиса оценила, тут был интерес такой.
[11:31.720 --> 11:33.720]  Вот у нее в общем-то запрос такой.
[11:33.720 --> 11:36.720]  Как бы понятно, что ему хочется выбирать какие-то разнообразные строчки,
[11:36.720 --> 11:38.720]  чтобы не было очевидно, что он там все время и поддается.
[11:38.720 --> 11:39.720]  Поэтому вопрос.
[11:39.720 --> 11:43.720]  Какую каты в электрографическом порядке под строку может Боб подсудить?
[11:45.720 --> 11:48.720]  Сейчас, но это все еще мы выписываем просто все.
[11:53.720 --> 11:54.720]  Сейчас, стоп, что?
[11:54.720 --> 11:55.720]  Какие все?
[11:56.720 --> 11:59.720]  Ну все мы не выпишем, очевидно, их там может быть все.
[11:59.720 --> 12:00.720]  Выписываем все классы эквалитости.
[12:01.720 --> 12:02.720]  Так.
[12:02.720 --> 12:03.720]  Ну внутри.
[12:03.720 --> 12:04.720]  А там?
[12:04.720 --> 12:05.720]  Ну там...
[12:05.720 --> 12:07.720]  Не, ну в классах эквалитости тоже есть моменты.
[12:07.720 --> 12:08.720]  Плохо.
[12:08.720 --> 12:10.720]  Да, классы эквалитости это да, но вот...
[12:12.720 --> 12:13.720]  Так, ну-ка давайте-ка.
[12:14.720 --> 12:16.720]  Нам же нужно просто каты по...
[12:19.720 --> 12:20.720]  А ка маленькая?
[12:21.720 --> 12:22.720]  Произвольная.
[12:22.720 --> 12:24.720]  Я беру для ка не больше, чем 10 в пятый.
[12:25.720 --> 12:26.720]  Да, каким же образом?
[12:27.720 --> 12:33.720]  Мы берем все классы эквалитости и засовываем просто все их начала в кучу,
[12:33.720 --> 12:36.720]  потом достаем из кучи минимальный, а из то...
[12:36.720 --> 12:37.720]  Минимальное сопротивление.
[12:37.720 --> 12:40.720]  А как ты определишь какое состояние меньше другого?
[12:44.720 --> 12:45.720]  Ну...
[12:47.720 --> 12:50.720]  Нельзя просто по автомату идти в эксекривическом порядке?
[12:51.720 --> 12:52.720]  И без юзина.
[12:53.720 --> 12:56.720]  Потому что в одну и ту же вершину можно попасть несколькими способами,
[12:56.720 --> 12:58.720]  а несколькими принципиально разными путями.
[13:00.720 --> 13:01.720]  Ну суммарно путей...
[13:03.720 --> 13:04.720]  Квадрат?
[13:05.720 --> 13:06.720]  Ну если вершина...
[13:06.720 --> 13:07.720]  По числу подстрок.
[13:07.720 --> 13:10.720]  Тогда нам не возвращаться, наверное, нет смысла?
[13:10.720 --> 13:11.720]  Есть, но...
[13:11.720 --> 13:12.720]  Но вообще...
[13:12.720 --> 13:13.720]  Хотя...
[13:13.720 --> 13:14.720]  Мы знаем все концы.
[13:14.720 --> 13:15.720]  Хотя нет, наверное, нет.
[13:17.720 --> 13:22.720]  Хотя нет, вершина возвращаться есть смысл, потому что это означает, что там просто...
[13:23.720 --> 13:27.720]  То есть в одну и ту же вершину, если она выигрышная, входит несколько подстрочек.
[13:27.720 --> 13:30.720]  Но как бы одна может быть в эксекривическом порядке маленькая, другая большая.
[13:31.720 --> 13:34.720]  И каждый из них может нам пригодиться.
[13:35.720 --> 13:36.720]  А какая задача?
[13:38.720 --> 13:39.720]  Да, самый важный вопрос.
[13:39.720 --> 13:40.720]  Значит, задача еще раз.
[13:40.720 --> 13:42.720]  Значит, у нас вот есть игра.
[13:42.720 --> 13:46.720]  Надо найти каты в лексиграфическом порядке под строку строк.es,
[13:46.720 --> 13:48.720]  стартуя из которой выигрывает Алиса.
[13:49.720 --> 13:50.720]  Хочется сделать следующее.
[13:50.720 --> 13:53.720]  У нас все подстройки софиксов друг друга.
[13:54.720 --> 13:57.720]  Хочется как-нибудь развернуть строку, чтобы они были префиксами,
[13:57.720 --> 13:59.720]  а префиксы на лексиграфические...
[14:00.720 --> 14:04.720]  Ну, тогда ты будешь приписывать символы в начало, правда, по этому.
[14:07.720 --> 14:10.720]  Нет, ну, построить можно для ребежных отдельно.
[14:11.720 --> 14:12.720]  И к чему-то нам помочь?
[14:12.720 --> 14:15.720]  У нас, если мы построим субтамарные ребежные строки,
[14:16.720 --> 14:20.720]  то у нас все классы валентности будут строки с суббиксами друг друга,
[14:21.720 --> 14:23.720]  а в исходной строке это получится префиксы друг друга.
[14:23.720 --> 14:27.720]  А префиксы очень хорошо сравниваются на лексиграфическую минимальную.
[14:32.720 --> 14:34.720]  Сейчас мне как-то странно все-таки что-то.
[14:36.720 --> 14:40.720]  Ты предположишь развернуть строку и сказать, что там, где решаем ту же задачу,
[14:40.720 --> 14:42.720]  только символы в начало дописывали?
[14:42.720 --> 14:44.720]  Нет, я хочу развернуть строку,
[14:44.720 --> 14:46.720]  построить просто субтамар.
[14:46.720 --> 14:47.720]  И что это тебе даст?
[14:47.720 --> 14:50.720]  После этого у нас валентности в нем,
[14:50.720 --> 14:53.720]  это какой-то набор суббиксов друг друга.
[14:54.720 --> 14:57.720]  То есть каждый класс в валентности это набор строк,
[14:57.720 --> 14:59.720]  каждый суббикс предыдущий.
[15:01.720 --> 15:02.720]  Ну и что?
[15:02.720 --> 15:05.720]  Ну правда, класса валентности вообще по-другому устроена, да?
[15:05.720 --> 15:06.720]  И что?
[15:07.720 --> 15:11.720]  Ну хорошо, да, в исходной строке им соответствовали какие-то префиксы друг другу,
[15:11.720 --> 15:12.720]  и что это даст?
[15:13.720 --> 15:15.720]  Ну и видимо строку тоже можно свернуть.
[15:15.720 --> 15:17.720]  Ага, и приписывайте символы в начало.
[15:21.720 --> 15:23.720]  Я предлагаю посчитать для каждой вершины,
[15:23.720 --> 15:26.720]  с какими способами из нее достижемы проигрышные.
[15:28.720 --> 15:29.720]  Так.
[15:30.720 --> 15:31.720]  Или выигрышные.
[15:31.720 --> 15:32.720]  А, ну да, проигрышные.
[15:33.720 --> 15:34.720]  А хотя нет выигрышных.
[15:36.720 --> 15:37.720]  Ну по сути так,
[15:37.720 --> 15:40.720]  каждой выигрышной строке соответствует пути стартовой статистики.
[15:41.720 --> 15:42.720]  Ну по сути так,
[15:42.720 --> 15:46.720]  каждой выигрышной строке соответствует пути стартовой вершины до выигрышной.
[15:49.720 --> 15:52.720]  Нет, ну мы говорим, начинает у нас Алиса, напоминаю.
[15:53.720 --> 15:54.720]  Поэтому с выигрышной.
[15:56.720 --> 15:57.720]  Ну да.
[16:07.720 --> 16:08.720]  Ну поэтому к первому символу, да.
[16:10.720 --> 16:12.720]  Делаем то же самое, если,
[16:12.720 --> 16:14.720]  ну если к больше, то есть если,
[16:15.720 --> 16:17.720]  тогда мы просто отнимаем это к количеству.
[16:18.720 --> 16:22.720]  Ну короче говоря, как в поиске всяких там катых правильных срочных последовательностей.
[16:24.720 --> 16:25.720]  Нет, ну идея простая.
[16:25.720 --> 16:26.720]  Нам нужно, скажем так,
[16:26.720 --> 16:30.720]  нас интересуют пути стартовой вершины до выигрышных вершин, правда?
[16:30.720 --> 16:31.720]  Да.
[16:31.720 --> 16:34.720]  Каждой верши пути соответствует строка, мы из этих путей хотим найти каты.
[16:34.720 --> 16:35.720]  Да.
[16:35.720 --> 16:36.720]  Так вот, вот какая это идея?
[16:36.720 --> 16:38.720]  Давайте с помощью динамики для каждой вершины посчитаем
[16:38.720 --> 16:43.720]  количество способов дойти из этой вершины до выигрышной.
[16:44.720 --> 16:45.720]  Хорошо.
[16:45.720 --> 16:46.720]  Да, именно не путайте,
[16:46.720 --> 16:49.720]  именно не количество, не до скольки выигрышных вершин можно дойти,
[16:49.720 --> 16:51.720]  а сколькими способами можно дойти.
[16:51.720 --> 16:53.720]  Да, это такая тупая линейная динамика, да.
[16:54.720 --> 16:55.720]  Ну вот.
[16:55.720 --> 16:57.720]  Ну тогда у нас есть какая-то идея, что давайте думать,
[16:58.720 --> 16:59.720]  то есть у нас есть стартовые вершины,
[16:59.720 --> 17:00.720]  по какому символу пойти?
[17:00.720 --> 17:03.720]  Там из нее там тактят буквы А, Б, С, там и так далее.
[17:04.720 --> 17:06.720]  Но как бы вот мы пытаемся пройти по символу А
[17:06.720 --> 17:10.720]  и знаем, получается, сколько хороших строчек начинается символ А.
[17:11.720 --> 17:12.720]  Вот.
[17:12.720 --> 17:13.720]  Ну да.
[17:13.720 --> 17:14.720]  То есть дальше такая.
[17:14.720 --> 17:15.720]  Так понятно, да?
[17:17.720 --> 17:18.720]  Да, Димка.
[17:19.720 --> 17:20.720]  Вот.
[17:20.720 --> 17:21.720]  То есть вот такая вот красивая нот.
[17:21.720 --> 17:23.720]  То есть такая красивая задача.
[17:23.720 --> 17:24.720]  Да, конечно, обязательно надо учесть,
[17:24.720 --> 17:25.720]  что когда вы находитесь в вершине,
[17:25.720 --> 17:26.720]  она может быть сама по себе выигрышная,
[17:26.720 --> 17:28.720]  поэтому пустую строчку тоже надо учитывать.
[17:30.720 --> 17:31.720]  Ну суть такая.
[17:32.720 --> 17:33.720]  Ну хорошо.
[17:33.720 --> 17:35.720]  Слушайте, сейчас я вам тогда повеселее дам.
[17:37.720 --> 17:42.720]  Эта задача может нас начнет приводить немножко в другую сторону.
[17:43.720 --> 17:44.720]  А теперь представим себе.
[17:45.720 --> 17:47.720]  Теперь, смотрите, абсолютно та же самая,
[17:47.720 --> 17:51.720]  то есть в контесте дают две задачи с абсолютно идентичным условием.
[17:52.720 --> 17:54.720]  Только поменяли одно слово.
[17:54.720 --> 17:55.720]  У нас их нет.
[17:55.720 --> 17:56.720]  Нет.
[17:56.720 --> 17:57.720]  Чего?
[17:57.720 --> 17:58.720]  У нас их нет.
[17:58.720 --> 17:59.720]  Ну у нас их, к сожалению, нету.
[17:59.720 --> 18:00.720]  Хотя...
[18:01.720 --> 18:02.720]  Можно, в принципе, и добавить.
[18:02.720 --> 18:04.720]  У нас так мало задач, как раз.
[18:04.720 --> 18:05.720]  Ну...
[18:05.720 --> 18:07.720]  Не хватает, если честно.
[18:07.720 --> 18:08.720]  Не хватает.
[18:09.720 --> 18:10.720]  Слушайте, осторожно.
[18:10.720 --> 18:13.720]  Я не всегда на слух, как бы, понимаю, уровень сарказма в голосе.
[18:13.720 --> 18:17.720]  Поэтому, как бы, я могу это принять за чистую монету и добавить.
[18:17.720 --> 18:19.720]  Все задачи так настроены работать?
[18:19.720 --> 18:20.720]  Хотя, с другой стороны, да.
[18:20.720 --> 18:21.720]  У вас там такой хороший, да.
[18:21.720 --> 18:24.720]  Хотя ладно, у вас там в этом году это CPC бонус еще.
[18:24.720 --> 18:25.720]  Так что, да.
[18:25.720 --> 18:26.720]  Ладно.
[18:26.720 --> 18:27.720]  Так вот.
[18:27.720 --> 18:28.720]  Ну там так вот.
[18:28.720 --> 18:29.720]  Задачи там отвечаются одним словом.
[18:30.720 --> 18:34.720]  Слово «конец» заменяется словом «начало».
[18:34.720 --> 18:37.720]  То есть символы теперь добавляются в «начало».
[18:37.720 --> 18:40.720]  Ну, тут уже кажется, что можно все развернуть, нет?
[18:44.720 --> 18:45.720]  Только проблема...
[18:45.720 --> 18:46.720]  Ну, как сказать, с точки зрения...
[18:46.720 --> 18:49.720]  Если задача была бы просто выигрышная или проигрышная, то да.
[18:50.720 --> 18:55.720]  Только теперь у тебя все еще задача — найти каты в несекретическом порядке, выигрышную строчку.
[18:55.720 --> 18:57.720]  Да, но это тогда будет каты с суффикса.
[18:57.720 --> 18:58.720]  Чего?
[18:59.720 --> 19:00.720]  Так вот.
[19:00.720 --> 19:01.720]  Нет.
[19:01.720 --> 19:02.720]  А, да, нет.
[19:02.720 --> 19:03.720]  Нет, да.
[19:03.720 --> 19:04.720]  Чего?
[19:04.720 --> 19:06.720]  Какая еще раз задача?
[19:06.720 --> 19:07.720]  Значит, задача.
[19:07.720 --> 19:09.720]  Играют два игрока.
[19:09.720 --> 19:12.720]  Начинают они со строки P, которая является подстрокой строки S.
[19:12.720 --> 19:16.720]  Они по очереди приписывают к строке P в начало на этот раз.
[19:16.720 --> 19:18.720]  По одному символу.
[19:18.720 --> 19:21.720]  Причем приписывают так, чтобы строка оставалась под строкой строки S.
[19:21.720 --> 19:24.720]  Проигрывает тот, кто не может сделать ход.
[19:25.720 --> 19:28.720]  Кто выиграет при правильной игре?
[19:28.720 --> 19:30.720]  Это была бы простая задача.
[19:30.720 --> 19:31.720]  А теперь вопрос.
[19:31.720 --> 19:37.720]  Найдите кату в лексикографическом порядке под строку строки S, исходя из которой выигрывает первый игрок.
[19:37.720 --> 19:40.720]  А вот здесь нас, очевидно, интересует только лонгест строки.
[19:40.720 --> 19:44.720]  Думаю, что к остальным приписывание однозначно определяется.
[19:45.720 --> 19:47.720]  Да, ну к остальным оно...
[19:47.720 --> 19:51.720]  Да, то есть действительно, оказывается, если строчка не является лонгестом в своем классе эквивалентности,
[19:51.720 --> 19:56.720]  то приписать к ней можно только один символ, и за пределы этого же состояния мы не выходим.
[19:56.720 --> 20:00.720]  Правда, есть маленькая оговоречка, что в зависимости отчетности количества строк,
[20:00.720 --> 20:04.720]  вопрос, кто в этот лонгест попадет и будет из него выходить.
[20:04.720 --> 20:07.720]  Ну понятно, но мы можем выбрать как бы сжатое дерево на лонгест под строку,
[20:07.720 --> 20:11.720]  считая длину вот этого вот ребра.
[20:11.720 --> 20:13.720]  Это просто разность вот этих вот.
[20:14.720 --> 20:16.720]  И, естественно, таким образом...
[20:16.720 --> 20:19.720]  А этих лонгест под строку у нас уже вот M.
[20:22.720 --> 20:24.720]  Это как-нибудь поможет?
[20:25.720 --> 20:27.720]  Это как-нибудь поможет?
[20:27.720 --> 20:29.720]  Ну надо только...
[20:29.720 --> 20:34.720]  Так, нет, что на сжатое дерево на лонгест, там еще вопрос, какой переход.
[20:34.720 --> 20:36.720]  Ну, переход...
[20:36.720 --> 20:39.720]  Потому что можно попытаться подумать, хотя бы действительно над задачей,
[20:39.720 --> 20:44.720]  что давайте для каждого лонгеста каждой вершины определим выигрыш на этой строке или проигрыш на этой строке.
[20:44.720 --> 20:46.720]  Хотя бы для начала.
[20:46.720 --> 20:48.720]  Спрашивается, как же?
[20:48.720 --> 20:51.720]  Мы для всего класса определили выигрыш.
[20:51.720 --> 20:52.720]  Да!
[20:52.720 --> 20:55.720]  Мы ж только что обсудили, что на этот раз это уже неправда.
[20:55.720 --> 21:00.720]  Потому что если лонгест выигрышный, то лонгест без одного символа это проигрышная ситуация.
[21:02.720 --> 21:04.720]  Так что там как бы...
[21:04.720 --> 21:08.720]  Сейчас, если мы развернем, то мы сможем понять, что они...
[21:08.720 --> 21:10.720]  Что выигрыш, что они проигрышные?
[21:10.720 --> 21:12.720]  Смочь, что мы сможем, но...
[21:12.720 --> 21:14.720]  Но раз развернем, у нас никакой связи не будет.
[21:14.720 --> 21:18.720]  Но там просто вот с катой в лексографическом порядке будут проблемы, да.
[21:22.720 --> 21:24.720]  Поэтому нет.
[21:24.720 --> 21:26.720]  Давайте сразу скажу.
[21:26.720 --> 21:30.720]  В данном случае лучше не разворачивать.
[21:51.720 --> 21:54.720]  Бум, бум, бум...
[22:21.720 --> 22:24.720]  Бум, бум, бум...
[22:51.720 --> 22:53.720]  Бум, бум, бум...
[23:22.720 --> 23:27.720]  Стоп, а если Боб добрый, то он не будет Алисе поддаваться во время игры?
[23:27.720 --> 23:28.720]  Не-не-не-не.
[23:28.720 --> 23:31.720]  Играть-то они будут нормально.
[23:31.720 --> 23:37.720]  А, тогда лучше было, чтобы Боб выбирает стропы, на которые играют Алиса и Вася.
[23:37.720 --> 23:39.720]  Господи...
[23:39.720 --> 23:41.720]  И Боб и парень Алиса, а Вася...
[23:41.720 --> 23:43.720]  Так, погоди, погоди.
[23:43.720 --> 23:45.720]  Нет, тут как бы, знаешь, тогда уже не путать.
[23:45.720 --> 23:48.720]  Просто если уж Алиса и Боб, то тогда там Клара должна возникать.
[23:48.720 --> 23:50.720]  Ну или там я тебе Карл еще можно.
[23:51.720 --> 23:53.720]  Чего?
[23:53.720 --> 23:55.720]  Ну почему Алиса и Боб?
[23:55.720 --> 23:58.720]  Потому что A и B.
[23:58.720 --> 24:00.720]  Следующий должен быть C.
[24:00.720 --> 24:03.720]  Так, ну тогда извините.
[24:03.720 --> 24:06.720]  Ну тогда извините, давайте тогда...
[24:06.720 --> 24:08.720]  Тогда уже как положено.
[24:08.720 --> 24:10.720]  Лиса-Алиса, Кот-Базилио и Лось-Валера.
[24:10.720 --> 24:11.720]  Ну логики.
[24:11.720 --> 24:13.720]  Тогда хоть как бы все.
[24:13.720 --> 24:15.720]  Анастасия и Борис.
[24:15.720 --> 24:16.720]  Ой, нет.
[24:16.720 --> 24:18.720]  Лиса-Алиса и Кот-Базилио.
[24:18.720 --> 24:19.720]  Нет.
[24:19.720 --> 24:21.720]  Лиса-Алиса и Кот-Базилио.
[24:21.720 --> 24:22.720]  Я настаиваю.
[24:22.720 --> 24:23.720]  Так.
[24:24.720 --> 24:25.720]  Вот.
[24:25.720 --> 24:26.720]  Вот точно.
[24:26.720 --> 24:28.720]  Может вам в контест эту задачу добавить?
[24:29.720 --> 24:30.720]  Ну а чего бы нет?
[24:30.720 --> 24:31.720]  Там простая задача на питончике.
[24:31.720 --> 24:32.720]  Быстро пишется.
[24:34.720 --> 24:35.720]  Ну да.
[24:35.720 --> 24:36.720]  Ну там так.
[24:36.720 --> 24:38.720]  Диафантовое уравнение на десять сотый.
[24:39.720 --> 24:42.720]  Как раз в тему нашего семиастров.
[24:42.720 --> 24:43.720]  Ага.
[24:43.720 --> 24:45.720]  Нет, там главная задача.
[24:45.720 --> 24:47.720]  Так сама по себе вроде не самая убойная, но...
[24:48.720 --> 24:49.720]  Ой, скажем так.
[24:49.720 --> 24:54.720]  Когда я переводил ее с английского, собственно, я получил огромное удовольствие.
[24:54.720 --> 24:55.720]  Вот так.
[24:57.720 --> 24:58.720]  Ну ладно.
[24:58.720 --> 25:00.720]  Давайте хоть с этой задачей разберемся.
[25:00.720 --> 25:02.720]  Тут я еще могу вам тоже рассказать.
[25:18.720 --> 25:19.720]  Вот.
[25:19.720 --> 25:20.720]  Вот.
[25:20.720 --> 25:21.720]  Вот.
[25:21.720 --> 25:22.720]  Вот.
[25:22.720 --> 25:23.720]  Вот.
[25:23.720 --> 25:24.720]  Вот.
[25:24.720 --> 25:25.720]  Вот.
[25:25.720 --> 25:26.720]  Вот.
[25:26.720 --> 25:27.720]  Вот.
[25:27.720 --> 25:28.720]  Вот.
[25:28.720 --> 25:29.720]  Вот.
[25:29.720 --> 25:30.720]  Вот.
[25:30.720 --> 25:31.720]  Вот.
[25:31.720 --> 25:32.720]  Вот.
[25:32.720 --> 25:33.720]  Вот.
[25:33.720 --> 25:34.720]  Вот.
[25:34.720 --> 25:35.720]  Вот.
[25:35.720 --> 25:36.720]  Вот.
[25:36.720 --> 25:37.720]  Вот.
[25:37.720 --> 25:38.720]  Вот.
[25:38.720 --> 25:39.720]  Вот.
[25:39.720 --> 25:40.720]  Вот.
[25:40.720 --> 25:41.720]  Вот.
[25:41.720 --> 25:42.720]  Вот.
[25:42.720 --> 25:43.720]  Вот.
[25:43.720 --> 25:44.720]  Вот.
[25:44.720 --> 25:45.720]  Вот.
[25:45.720 --> 25:46.720]  Вот.
[25:46.720 --> 25:47.720]  Вот.
[25:47.720 --> 25:48.720]  Вот.
[25:48.720 --> 25:49.720]  Вот.
[25:49.720 --> 25:50.720]  Вот.
[25:50.720 --> 25:51.720]  Вот.
[25:51.720 --> 25:52.720]  Вот.
[25:52.720 --> 25:53.720]  Вот.
[25:53.720 --> 25:54.720]  Вот.
[25:54.720 --> 25:55.720]  Вот.
[25:55.720 --> 25:56.720]  Вот.
[25:56.720 --> 25:57.720]  Вот.
[26:56.720 --> 27:26.440]  У нас же эта задача эквивалентна предыдущей.
[27:26.440 --> 27:30.440]  Только если мы лексикографически справа-налево сравниваем.
[27:30.440 --> 27:31.440]  Да.
[27:31.440 --> 27:32.440]  Ну вот.
[27:32.440 --> 27:39.440]  Предыдущей задачей мы строили, ну начинали искать со стартового
[27:39.440 --> 27:40.440]  состояния.
[27:40.440 --> 27:41.440]  И что?
[27:41.440 --> 27:48.440]  Может, можно как-то начать искать, типа начать строить
[27:48.440 --> 27:51.440]  путь с конца, а не сначала.
[27:51.440 --> 27:54.680]  Ну там, там проблема в том, что в каждую вершину входит
[27:54.680 --> 27:57.680]  несколько стрелочек по одной и той же букве.
[27:57.680 --> 27:58.680]  Да просто самих вершин несколько.
[27:58.680 --> 27:59.680]  Каждый из них может продолжаться.
[27:59.680 --> 28:00.680]  Не, ну за квадрат все еще можно.
[28:00.680 --> 28:01.680]  Не, ну за квадрат, да.
[28:01.680 --> 28:02.680]  Хотя нет, стоп.
[28:02.680 --> 28:03.680]  Не, ну за квадрат все еще можно.
[28:03.680 --> 28:04.680]  Не, ну за квадрат, да.
[28:04.680 --> 28:05.680]  Не, ну за квадрат, да.
[28:05.680 --> 28:06.680]  Не, ну за квадрат, да.
[28:06.680 --> 28:07.680]  Не, ну за квадрат, да.
[28:07.680 --> 28:08.680]  Не, ну за квадрат, да.
[28:08.680 --> 28:09.680]  Не, ну за квадрат, да.
[28:09.680 --> 28:10.680]  Не, ну за квадрат, да.
[28:10.680 --> 28:11.680]  Не, ну за квадрат, да.
[28:11.680 --> 28:12.680]  Не, ну за квадрат, да.
[28:12.680 --> 28:13.680]  Не, ну за квадрат, да.
[28:13.680 --> 28:14.680]  Не, ну за квадрат, да.
[28:15.680 --> 28:18.680]  Не, ну за квадрат все еще можно.
[28:18.680 --> 28:21.680]  Не, ну за квадрат, да.
[28:21.680 --> 28:22.680]  Хотя нет, стоп.
[28:22.680 --> 28:25.680]  Все пути можно просто перебрать.
[28:25.680 --> 28:27.680]  Нет, ну перебрать-то да.
[28:27.680 --> 28:30.680]  Для каждого пути бы еще определять, выигрышный
[28:30.680 --> 28:31.680]  он или проигрышный.
[28:31.680 --> 28:35.680]  Хотя, конечно, да, если бы у нас была возможность
[28:35.680 --> 28:38.680]  хотя бы выписать все подстройки, скорее всего,
[28:38.680 --> 28:41.680]  даже без всякого суффиксного автомата задача бы решалась.
[28:41.680 --> 28:43.680]  Ну или там такие, он нужен, чтобы там как-то адекватно
[28:43.680 --> 28:45.680]  описывать строчки в автомате, разве что.
[28:45.680 --> 28:48.680]  То есть это еще все-таки подстройки в строке.
[28:50.680 --> 28:53.680]  Нет, тут, ну хотелось бы, конечно, чуть-чуть побыстрее,
[28:53.680 --> 28:54.680]  очень сильно.
[28:57.680 --> 29:00.680]  Знаете, но не говорите, или не знаете и думаете.
[29:03.680 --> 29:06.680]  Да, правильно.
[29:06.680 --> 29:07.680]  Думаю, что знаю.
[29:07.680 --> 29:08.680]  Да, именно.
[29:08.680 --> 29:10.680]  Ну то есть так, я оставляю себе мизерную вероятность
[29:10.680 --> 29:12.680]  того, что мое решение не верну.
[29:14.680 --> 29:15.680]  Но на этот раз...
[29:18.680 --> 29:20.680]  Не-не-не, знаете, возможно, мы сегодня в конце, если
[29:20.680 --> 29:23.680]  останется время, мы рассмотрим задачу решения, которые
[29:23.680 --> 29:24.680]  я не знаю.
[29:24.680 --> 29:26.680]  Но у меня ощущение, что оно какое-то вот достаточно
[29:26.680 --> 29:28.680]  простое, поэтому, конечно, тут собесными усилиями должны
[29:28.680 --> 29:29.680]  осиить.
[29:31.680 --> 29:32.680]  Вот, но это не она.
[29:32.680 --> 29:33.680]  Вот, ну это не она.
[30:02.680 --> 30:03.680]  Поехали.
[30:33.680 --> 30:34.680]  Ну давайте так, подсказочка.
[30:34.680 --> 30:37.680]  Так, ну давайте хотя бы действительно, как хотя бы
[30:37.680 --> 30:40.680]  понять для каждой, то есть действительно для каждой
[30:40.680 --> 30:43.680]  вершины, лонгест ее выигрышный или проигрышный?
[30:45.680 --> 30:46.680]  Понять для каждой вершины?
[30:47.680 --> 30:50.680]  Ну да, давайте хотя бы для, хотя бы с этого начнем.
[30:52.680 --> 30:53.680]  Ну так, сейчас.
[30:58.680 --> 30:59.680]  Ну начнем с простого вопроса.
[30:59.680 --> 31:00.680]  С простого вопроса.
[31:00.680 --> 31:05.680]  Допустим, вы находитесь в состоянии Q, в какой-то
[31:05.680 --> 31:10.680]  строке X, которая равна лонгест от Q.
[31:10.680 --> 31:12.680]  Ну там, с индексом S, конечно.
[31:13.680 --> 31:15.680]  И вы решили приписать к ней символ A.
[31:16.680 --> 31:17.680]  Понимание, вопрос.
[31:17.680 --> 31:20.680]  В какое состояние вы перейдете?
[31:30.680 --> 31:33.680]  А это не будут прыжки после ссылок, пока у нас нет
[31:33.680 --> 31:34.680]  входящего символа?
[31:35.680 --> 31:36.680]  Сейчас.
[31:37.680 --> 31:38.680]  Не-не-не.
[31:38.680 --> 31:42.680]  Переход по символу A был бы, если бы мы в конец приписывали.
[31:42.680 --> 31:43.680]  Мы же сначала приписываем.
[31:48.680 --> 31:50.680]  То есть это как бы наоборот, на самом деле.
[31:50.680 --> 31:54.680]  Смотрите, должна быть какая-то вот мистическая вершина,
[31:54.680 --> 31:58.680]  в которой лежит строка AX и возможно еще какие-то.
[31:58.680 --> 32:02.680]  То есть из нее суффиксная ссылка наоборот в это Q ведет.
[32:05.680 --> 32:07.680]  Вы находитесь в лонгесте Q.
[32:07.680 --> 32:09.680]  И вы решили к строке X приписать символ A.
[32:09.680 --> 32:11.680]  Получается, у вас должна быть какая-то строка AX.
[32:11.680 --> 32:14.680]  Но заметим, что по определению суффиксной ссылки получается,
[32:14.680 --> 32:17.680]  что состояние, где лежит этот AX, должна вести суффиксная
[32:17.680 --> 32:18.680]  ссылка в Q.
[32:24.680 --> 32:27.680]  То есть более того, мы с вами даже уже это обсуждали,
[32:27.680 --> 32:30.680]  когда доказывали линейность этого счастья.
[32:30.680 --> 32:33.680]  Мы обнаружили, что как устроены суффиксные ссылки.
[32:33.680 --> 32:35.680]  Суффиксные ссылки устроены так, что есть какие-то вот
[32:35.680 --> 32:39.680]  строки типа там BX, там допустим DX.
[32:39.680 --> 32:41.680]  Ну и там какие, в общем, на какие символы X можно
[32:41.680 --> 32:42.680]  продлить влево.
[32:43.680 --> 32:46.680]  И каждому из них, и вести в нас будет ровно столько
[32:46.680 --> 32:49.680]  суффиксных ссылок, сколько различных символов у нас
[32:49.680 --> 32:50.680]  можно слева приписать.
[32:52.680 --> 32:55.680]  Более того, да, у нас получалось дерево с суффиксными ссылками.
[32:56.680 --> 32:59.680]  Просто из этих заображений даже выводили там сколько
[32:59.680 --> 33:00.680]  там вообще состояний.
[33:00.680 --> 33:02.680]  Я не уверен, что мы это обсуждали.
[33:02.680 --> 33:03.680]  Нет, мы это обсуждали.
[33:03.680 --> 33:05.680]  Мы же как-нибудь...
[33:05.680 --> 33:09.680]  Мы теперь ходим не по ребрамам, а по суффиксным ссылкам.
[33:09.680 --> 33:11.680]  На каждой суффиксной ссылке.
[33:11.680 --> 33:14.680]  В общем, даже хуже не по суффиксным ссылкам, а по обратным
[33:14.680 --> 33:15.680]  суффиксным ссылкам.
[33:16.680 --> 33:18.680]  Да, то есть придется провести дополнительную работу,
[33:18.680 --> 33:21.680]  то есть для каждого состояния сохранить вот по каждой
[33:21.680 --> 33:23.680]  буковке свою типа обратную суффиксность.
[33:23.680 --> 33:24.680]  Почему плохо?
[33:24.680 --> 33:27.680]  Потому что у нас стартовое состояние не одно.
[33:32.680 --> 33:34.680]  А столько сколько хороших машин.
[33:37.680 --> 33:40.680]  Поэтому у нас переход будет сразу из всех этих машин.
[33:41.680 --> 33:42.680]  Но на самом деле не угадал.
[33:42.680 --> 33:45.680]  Стартовое состояние у вас как раз одно.
[33:47.680 --> 33:51.680]  Потому что по обратным суффиксным ссылкам.
[33:51.680 --> 33:53.680]  То есть на самом деле это я просто обманчиво нарисовал.
[33:53.680 --> 33:56.680]  На самом деле суффиксные ссылки скорее справа-налево идут.
[33:56.680 --> 33:58.680]  Но если у нас автомат весь идет слева-направо, все
[33:58.680 --> 34:01.680]  стрелки туда, то суффиксные ссылки наоборот справа-налево.
[34:01.680 --> 34:04.680]  То есть на самом деле правильная картинка, конечно, выглядит
[34:04.680 --> 34:05.680]  скорее так.
[34:16.680 --> 34:19.680]  Тут вот допустим АХ, БХ, ДХ.
[34:20.680 --> 34:22.680]  И тогда оказывается, что как раз мы идем в ту сторону,
[34:22.680 --> 34:24.680]  все равно по обратным ссылкам.
[34:24.680 --> 34:27.680]  То получается стартовое состояние как раз одно.
[34:27.680 --> 34:28.680]  И это стартовая вершина.
[34:29.680 --> 34:30.680]  Так что тут так как раз.
[34:33.680 --> 34:36.680]  Ну такие даже это может сказать не стартовое состояние,
[34:36.680 --> 34:37.680]  а так может быть.
[34:38.680 --> 34:39.680]  Чего?
[34:39.680 --> 34:40.680]  Не может быть.
[34:40.680 --> 34:41.680]  Что не так?
[34:44.680 --> 34:46.680]  Что тебе не нравится?
[34:53.680 --> 34:56.680]  Мы считаем количество строк.
[34:57.680 --> 35:00.680]  То есть короче говоря, если мы хотим определить,
[35:00.680 --> 35:03.680]  является ли П выигрышный, мы просто проходим все это
[35:03.680 --> 35:05.680]  П и потом найдем из него?
[35:05.680 --> 35:07.680]  Ну не совсем так.
[35:07.680 --> 35:10.680]  Мы проходим все должны пройтись по П, прийти в ее
[35:10.680 --> 35:13.680]  состояние, посмотреть как П по длине отличается от
[35:13.680 --> 35:16.680]  лонгеста, посмотреть результат от лонгеста и там возможно
[35:16.680 --> 35:18.680]  его инвертировать, если расстояние до него ничего.
[35:18.680 --> 35:21.680]  А для лонгеста вот так вот пройтись по обратным ссылкам.
[35:21.680 --> 35:23.680]  Но для лонгестов тоже аккуратно, потому что когда
[35:25.680 --> 35:26.680]  Ну не совсем.
[35:26.680 --> 35:27.680]  Ну почему?
[35:27.680 --> 35:30.680]  Во-первых та же динамика, но единственное только маленькое
[35:30.680 --> 35:32.680]  оговоречко, что вот этот вот АХ он лонгестом быть
[35:32.680 --> 35:33.680]  не обязан.
[35:34.680 --> 35:35.680]  Будь здоров.
[35:35.680 --> 35:36.680]  Поэтому оговоречко-то.
[35:37.680 --> 35:38.680]  Поэтому оговоречко та же самое.
[35:39.680 --> 35:40.680]  Да.
[35:43.680 --> 35:44.680]  То есть да.
[35:44.680 --> 35:45.680]  Ну вот.
[35:48.680 --> 35:49.680]  И то есть мы начинаем сначала.
[35:52.680 --> 35:53.680]  Вот.
[35:54.680 --> 35:55.680]  Так то есть смотрите.
[35:55.680 --> 35:56.680]  То есть мы научились.
[35:56.680 --> 35:57.680]  Мы еще не решили задачу.
[35:59.680 --> 36:00.680]  Мы еще не совсем решили задачу.
[36:01.680 --> 36:04.680]  Мы научились для каждой вершины определять является
[36:04.680 --> 36:06.680]  ли выигрышным ее лонгест.
[36:09.680 --> 36:12.680]  А точнее лонгест, ну и все остальные соответственно
[36:12.680 --> 36:13.680]  символы тоже.
[36:13.680 --> 36:14.680]  Все остальные строчки тоже.
[36:15.680 --> 36:16.680]  Как мы это сделали?
[36:17.680 --> 36:18.680]  Ну вот.
[36:18.680 --> 36:20.680]  Давайте сейчас я проговорю, как мы это сделаем.
[36:21.680 --> 36:22.680]  На всякий случай, чтобы было всем понятно.
[36:23.680 --> 36:24.680]  То есть как мы это определяем?
[36:24.680 --> 36:25.680]  Очень просто.
[36:25.680 --> 36:26.680]  Определяем это справа налево.
[36:27.680 --> 36:31.680]  Ну потому что ход из лонгеста это ход по обратным суффиксным
[36:31.680 --> 36:34.680]  ссылкам, приписывая какой-то символ, который заранее
[36:34.680 --> 36:35.680]  предподсчитывается.
[36:36.680 --> 36:39.680]  Ну понятно, что если у вершины нету детей в дереве суффиксных
[36:39.680 --> 36:42.680]  ссылок, значит получается из нее пойти нельзя.
[36:43.680 --> 36:44.680]  Вот.
[36:44.680 --> 36:45.680]  Соответственно.
[36:45.680 --> 36:46.680]  Но.
[36:46.680 --> 36:47.680]  Вот.
[36:47.680 --> 36:51.680]  Но если ходы есть, то мы, во-первых, тогда пытаемся
[36:51.680 --> 36:55.680]  делать эти ходы, но для каждого хода, но каждый из этих ходов
[36:55.680 --> 36:58.680]  теперь может, но для этого каждого хода теперь нужно
[36:58.680 --> 37:00.680]  аккуратно определить, является ли он выигрышным или прорешным.
[37:00.680 --> 37:01.680]  Как определить?
[37:01.680 --> 37:04.680]  Ну заметим, что если АХ является лонгестом, то
[37:04.680 --> 37:07.680]  мы уже заранее предподсчитали, этот ход будет, эта строка
[37:07.680 --> 37:08.680]  выигрышная или прорешная.
[37:08.680 --> 37:12.680]  Но если АХ не лонгест, то надо посчитать длину АХ.
[37:12.680 --> 37:14.680]  Ну это длина Х плюс один.
[37:14.680 --> 37:17.680]  Мы посчитаем длину, длину лонгеста того состояния.
[37:17.680 --> 37:21.680]  И если у них разница четная, тогда значит надо скопипастить,
[37:21.680 --> 37:24.680]  скопировать тут результат у АХ, потому что через
[37:24.680 --> 37:26.680]  четное число ходов как бы мы достигнем лонгеста.
[37:26.680 --> 37:29.680]  А если расстояние нечетное, то оно поменяется.
[37:29.680 --> 37:30.680]  Почему?
[37:30.680 --> 37:33.680]  Потому что там до этого лонгеста ходы будут форсированы.
[37:33.680 --> 37:35.680]  Так это понятно, что я говорю, да?
[37:35.680 --> 37:36.680]  Да?
[37:36.680 --> 37:37.680]  Все.
[37:37.680 --> 37:38.680]  Вот.
[37:38.680 --> 37:39.680]  Вот.
[37:39.680 --> 37:43.680]  То есть поэтому для каждой, поэтому теперь так.
[37:43.680 --> 37:46.680]  Итак, для каждой конкретной строки, то есть для каждой
[37:46.680 --> 37:49.680]  конкретной строки П мы теперь не разворачивая автомата
[37:49.680 --> 37:53.680]  умеем определять выигрышная строка или прорешная.
[37:53.680 --> 37:57.680]  Ну понятно, для этого просто надо прийти по строке П
[37:57.680 --> 38:02.680]  в нужное состояние и проверить там внутри этого состояния
[38:02.680 --> 38:08.680]  разность длин у лонгеста и у этой строки П.
[38:08.680 --> 38:09.680]  Вот.
[38:09.680 --> 38:12.680]  Ну теперь возникает такой интересный вопрос.
[38:12.680 --> 38:20.680]  Как же нам найти теперь кату в легчеграфическом порядке выигрышную строчку?
[38:34.680 --> 38:35.680]  Нет.
[38:35.680 --> 38:36.680]  Ну не совсем так.
[38:36.680 --> 38:37.680]  Ну как сказать?
[38:37.680 --> 38:40.680]  У нас тоже ребра на них тоже написаны в буквы.
[38:40.680 --> 38:44.680]  Ну, как сказать?
[38:49.680 --> 38:52.680]  Что мы словно собираем типа за другой стороны?
[38:54.680 --> 38:55.680]  Ну да.
[38:55.680 --> 38:57.680]  То есть там то, что в карта.
[38:57.680 --> 39:01.680]  Потому что нам бы как бы уметь желательно тоже определять,
[39:01.680 --> 39:04.680]  допустим, сколько выигрышных слов начинаются за одного префикса.
[39:04.680 --> 39:05.680]  Так о чем проблема?
[39:05.680 --> 39:07.680]  Мы не научились этого делать.
[39:10.680 --> 39:11.680]  Пуше у нас там, да.
[39:11.680 --> 39:12.680]  Сейчас.
[39:21.680 --> 39:23.680]  А в чем проблема?
[39:23.680 --> 39:26.680]  В том, что эта фраза не рождает решения.
[39:26.680 --> 39:29.680]  Ну в плане опять делаем динамику.
[39:29.680 --> 39:31.680]  Сначала мы насчитали выигрышную.
[39:31.680 --> 39:33.680]  Ну выигрышная, стойте извини, лонгеста.
[39:33.680 --> 39:36.680]  Потом, допустим, еще раз делаем динамику.
[39:36.680 --> 39:39.680]  И теперь уже считаем количество доступных выигрышных.
[39:39.680 --> 39:41.680]  И нужно опять аккуратно пересчитывать.
[39:41.680 --> 39:43.680]  Погаи, что значит доступных выигрышных?
[39:43.680 --> 39:44.680]  Как бы если вы пришли в выигрышную вершину,
[39:44.680 --> 39:46.680]  это не значит, что вы пришли в нее по строке,
[39:46.680 --> 39:47.680]  которая является выигрышной.
[39:48.680 --> 39:50.680]  Ну, в плане...
[39:54.680 --> 39:57.680]  Количество доступных выигрышных можно считать не только из выигрышных.
[40:00.680 --> 40:02.680]  Нет, ну не путать понятия.
[40:02.680 --> 40:04.680]  Потому что у нас как бы понятия...
[40:04.680 --> 40:07.680]  Лучше сейчас не употреблять словосочетание выигрышная вершина.
[40:09.680 --> 40:11.680]  Что будет сегодня на лекции?
[40:12.680 --> 40:14.680]  Ну, как минимум, вот это.
[40:16.680 --> 40:19.680]  Ну, как дальше сувдерева с укранином будет?
[40:20.680 --> 40:21.680]  А что?
[40:21.680 --> 40:22.680]  Просто люди спрашивают.
[40:22.680 --> 40:24.680]  Видимо, пытаются понять, нужно ехать или нет.
[40:24.680 --> 40:26.680]  Ну дальше сувдерева с укранином,
[40:26.680 --> 40:29.680]  потом попробуем, собственно, закончить галилосейфераса
[40:29.680 --> 40:31.680]  и, возможно, еще задачи решить.
[40:31.680 --> 40:33.680]  Не подсказывай, что они неприятны.
[40:34.680 --> 40:35.680]  Ну, пожалуйста.
[40:39.680 --> 40:41.680]  Хотя забавно, через 45 минут после начала
[40:41.680 --> 40:44.680]  загадить и спрашивать, а имеет ли смысл ехать.
[40:46.680 --> 40:47.680]  Ну окей.
[40:48.680 --> 40:49.680]  Не, ну мы осуждаем такие.
[40:49.680 --> 40:50.680]  Да.
[40:51.680 --> 40:52.680]  Да.
[40:54.680 --> 40:56.680]  Если это не нагибин с Мустафиным, конечно, да.
[40:56.680 --> 40:57.680]  Ну почему не суть?
[40:58.680 --> 40:59.680]  Так.
[40:59.680 --> 41:00.680]  Сейчас.
[41:00.680 --> 41:01.680]  Ну, короче.
[41:10.680 --> 41:11.680]  Так, что нам вообще нужно?
[41:12.680 --> 41:16.680]  Нам нужно для строки.
[41:17.680 --> 41:19.680]  Например, для лангеста.
[41:22.680 --> 41:24.680]  Вы считаете, что это будет?
[41:25.680 --> 41:28.680]  Вы считаете количество чериков,
[41:28.680 --> 41:30.680]  в которых количество способов?
[41:31.680 --> 41:32.680]  Сейчас.
[41:36.680 --> 41:38.680]  Что такое вообще выигрышные?
[41:38.680 --> 41:39.680]  Вот тот и прикол.
[41:39.680 --> 41:41.680]  У нас выигрышная прорывочная строка под строка теперь,
[41:41.680 --> 41:42.680]  а не в вершину.
[41:42.680 --> 41:44.680]  Это понятно, но это не особо мешает.
[41:44.680 --> 41:46.680]  Ну, пока сильно мешает.
[41:46.680 --> 41:48.680]  Потому что как бы...
[41:48.680 --> 41:50.680]  Потому что вы не можете просто потому, что скажешь,
[41:50.680 --> 41:52.680]  что вы под строки по подстроке пришли в вершину,
[41:52.680 --> 41:54.680]  вы просто так теперь не можете сказать,
[41:54.680 --> 41:57.680]  что это строка теперь выигрышная или прорывочная.
[41:57.680 --> 42:00.680]  Ну, кажется, мы все можем насчитывать для лангеста.
[42:00.680 --> 42:02.680]  Да, для лангестов мы научились начать.
[42:03.680 --> 42:04.680]  Так.
[42:04.680 --> 42:07.680]  А потом мы можем насчитывать не только выигрышные,
[42:07.680 --> 42:08.680]  но и прорывочные.
[42:09.680 --> 42:11.680]  Когда мы будем не выигрышные приходить,
[42:11.680 --> 42:12.680]  то они могут сфокусировать.
[42:14.680 --> 42:15.680]  Ну, может.
[42:15.680 --> 42:17.680]  Но только надо вот точнее что-то сказать.
[42:18.680 --> 42:20.680]  Приходить-то мы можем куда угодно.
[42:20.680 --> 42:22.680]  Ходить туда-сюда мы можем как угодно, но...
[42:28.680 --> 42:29.680]  А, то есть мы, короче,
[42:29.680 --> 42:34.680]  две строки хотим понять количество способов выигрывать.
[42:34.680 --> 42:35.680]  Да.
[42:35.680 --> 42:36.680]  Первым ходом...
[42:36.680 --> 42:37.680]  Нет, сейчас.
[42:38.680 --> 42:39.680]  Количество...
[42:39.680 --> 42:40.680]  Количество выигрышей,
[42:40.680 --> 42:42.680]  которые можно получить на строке, или что?
[42:42.680 --> 42:46.680]  Ну, в идеале хочется понять количество как бы путей,
[42:46.680 --> 42:49.680]  количество как бы таких вот выигрышных под строк П,
[42:49.680 --> 42:52.680]  желательно, начиная сейчас с какого-то префикса.
[42:54.680 --> 42:55.680]  Только тут вот.
[43:03.680 --> 43:04.680]  Ну, вот.
[43:04.680 --> 43:05.680]  Ну, вот.
[43:05.680 --> 43:06.680]  Ну, вот.
[43:06.680 --> 43:07.680]  Ну, вот.
[43:07.680 --> 43:08.680]  Ну, вот.
[43:08.680 --> 43:09.680]  Ну, вот.
[43:09.680 --> 43:10.680]  Ну, вот.
[43:11.680 --> 43:14.680]  Нет, ну если просто внимательно посмотреть,
[43:14.700 --> 43:15.700]  как устроены выигрыши.
[43:15.700 --> 43:17.700]  То есть, как мы уже поняли,
[43:17.700 --> 43:22.700]  не все строки, соответствующие одному и тому же состоянию,
[43:22.700 --> 43:25.700]  являются выигрышными или проигрышными.
[43:26.700 --> 43:27.700]  То есть кто-то является выигрышными,
[43:27.700 --> 43:28.700]  кто-то является проигрышными.
[43:28.700 --> 43:30.700]  Но надо очень четко осознать,
[43:30.700 --> 43:33.700]  какие подстроки являются выигрышными в одном состоянии,
[43:33.700 --> 43:34.700]  а какие проигрышны.
[43:37.700 --> 43:39.700]  ... в одном состоянии они чередуются.
[43:39.700 --> 43:44.420]  чередуются другие месла но та вот как бы это и по-другому сформулировать
[43:44.420 --> 43:56.020]  только какая проблема ну вот скажем так если по-другому сформулировать решение станет
[43:56.020 --> 44:03.580]  очевидным если формулировать так решение непонятно вот так скажем если я скажу точнее
[44:03.580 --> 44:19.340]  что я имею ввиду я пропалю решение пока это еще нет решения мы пока только для
[44:19.340 --> 44:23.900]  лонгеста научились понимать как для каждого именно лонгеста является ли он выигрышным
[44:24.900 --> 44:30.340]  мы это делаем следующим образом мы говорим что вот допустим вершина отвечает лонгесту
[44:30.340 --> 44:40.100]  да мы пытаемся дать ну да пытаемся потом переходим смотрим все ссылки которые у него
[44:40.100 --> 44:46.740]  торчат и в зависимости отчетности ну короче вот это пересчитываю да но
[44:46.980 --> 44:54.140]  в зависимости отчетности и выигрышности лонгестов этих вершин да вот вот а потом
[44:54.140 --> 44:59.340]  мы хотим для вершин уметь понимать
[44:59.340 --> 45:06.620]  сколькими способами но не знаю сколько из него вообще
[45:06.620 --> 45:21.940]  очевидно все не выигрышные ну что не опасная формулировка можно понять десятью способами
[45:21.940 --> 45:28.260]  причем будет каждому собеседу будет очевидно что ты имел в виду именно то что он думает
[45:28.260 --> 45:34.340]  если к ней может быть когда-нибудь лет через 5 он поймет что ты имел в виду другое но
[45:34.340 --> 45:36.900]  но в этот момент он очень сильно удивится
[45:36.900 --> 45:51.060]  нет ну ладно не будем зависать формулировка лежит так нам чтобы понять про подстроку выигрышная
[45:51.620 --> 45:58.940]  надо знать две вещи первое является ли выигрышным состояние лонгестов которые мы пришли и второе
[45:58.940 --> 46:10.460]  счетность длины строки п но на самом деле заметим следующее что в каждом состоянии есть есть
[46:10.460 --> 46:17.260]  строки длины четной длины и строки нечетной длины и заметим что какие-то строки одной
[46:17.900 --> 46:24.940]  всегда выигрышными в этом состоянии а строки другой чётности являются проигрышными логично
[46:24.940 --> 46:33.020]  да вот то есть поэтому по большому счету то есть идея возникает на самом деле такая то есть то
[46:33.020 --> 46:40.060]  есть по большому счету то есть теперь то есть на самом деле можно просто раздвоить состояние то
[46:40.060 --> 46:51.660]  то есть раздвоить состояние, и сказать, что мысленно динамику,
[46:51.660 --> 46:54.860]  то есть мы будем считать, естественно, ту же самую динамику, да, то есть там,
[46:55.860 --> 46:58.960]  ну вот как раньше, раньше мы считали динамику,
[46:58.960 --> 47:02.560]  что для каждой вершины мы говорим, с какими способами можно прийти в выигрышное состояние, да?
[47:04.360 --> 47:05.960]  Ну, в предыдущей задаче было такое.
[47:05.960 --> 47:07.460]  Ну, это за один шаг, видимо.
[47:07.860 --> 47:08.860]  Почему за один шаг?
[47:08.860 --> 47:12.860]  Просто дано состояние, с какими, с какими, сколько существует путей,
[47:12.860 --> 47:14.860]  по которым мы можем прийти из него в выигрышное состояние.
[47:18.860 --> 47:21.360]  Видимо, не путей, а способов игры.
[47:21.360 --> 47:25.360]  Нет, путей, буквально путей, потому что мы же стартовые подстроки искали,
[47:25.360 --> 47:28.360]  в каждой, в каждой подстроке соответствуют пути стартовой вершины.
[47:30.360 --> 47:32.860]  Сейчас, ну, мы можем вообще вершину раздвоить.
[47:32.860 --> 47:33.860]  А, все.
[47:33.860 --> 47:37.360]  Все, ну можно раздвоить, ну, не, да, но можно раздвоить, по сути, для динамики.
[47:38.260 --> 47:39.760]  По которому туда-сюда прыгали.
[47:40.760 --> 47:42.760]  Ну, типа, ну...
[47:42.760 --> 47:45.760]  Короче, и сделать все, как в изначальном графе.
[47:45.760 --> 47:50.760]  Ну, в смысле, ну, и для такого графа уже спокойно сделать,
[47:50.760 --> 47:54.260]  считая, что это у нас какой-то абстрактный граф с абстрактной игрой.
[47:54.260 --> 47:59.260]  Ну, такое, ну, ну, где-то, ну, где-то так, но тут, ну, можно,
[47:59.260 --> 48:02.260]  но можно, наверное, где-то и так мыслить тут уже, как угодно.
[48:03.260 --> 48:06.260]  Да, то есть я бы мыслил по-другому, то есть я уже там, то есть я бы там динамичку
[48:07.160 --> 48:11.160]  насчитывал, что, действительно, что у нас только, только у нас теперь
[48:11.160 --> 48:14.160]  состояние в динамике это не, это не состояние в автомате.
[48:14.160 --> 48:17.160]  То есть состояние в динамике это пара из состояния в автомате
[48:17.160 --> 48:20.160]  и четность длинных строки, в которые мы пришли.
[48:23.160 --> 48:24.160]  Вот.
[48:24.160 --> 48:27.160]  Потому что вот такая пара уже, действительно, можно считать,
[48:27.160 --> 48:31.160]  что является выигрышной и проигрышной, тогда можно запускать предыдущие решения.
[48:32.060 --> 48:35.060]  Сейчас, ну, можно вопрос?
[48:43.060 --> 48:46.060]  Сейчас, чего?
[48:53.060 --> 48:56.060]  Зачем нам нужна четность строки, конечно?
[48:56.960 --> 49:00.960]  Ну, потому что внутри одного состояния, смотри, вот, лонгест,
[49:00.960 --> 49:03.960]  например, допустим, лонгест выигрышная строка.
[49:03.960 --> 49:06.960]  Тогда лонгест без первых символов это проигрышная строка.
[49:07.960 --> 49:10.960]  А лонгест без двух первых символов выигрышная строка.
[49:13.960 --> 49:14.960]  Сейчас.
[49:14.960 --> 49:21.960]  Мы хотим, мы стоим, мы хотим посчитать количество, значит,
[49:22.860 --> 49:25.860]  если мы считаем из вершины.
[49:29.860 --> 49:35.860]  Мы хотим написать для вершины, сколько строк мы можем приписать
[49:35.860 --> 49:38.860]  к данной, которые будут выигрышными.
[49:38.860 --> 49:41.860]  Да, но при этом мы должны знать ее счетность.
[49:41.860 --> 49:44.860]  Ну, если мы для лонгеста считаем.
[49:44.860 --> 49:47.860]  Да, мы на разных языках говорим, по-моему.
[49:47.860 --> 49:50.860]  Если мы говорим, что вершина это лонгест.
[49:52.860 --> 49:53.860]  Но вершина это не лонгест.
[49:53.860 --> 49:56.860]  Вершина это несколько строк, каждый из которых, в общем,
[49:56.860 --> 49:58.860]  некоторые из которых выигрышные, некоторые проигрышные.
[49:58.860 --> 50:01.860]  Поэтому лучше так не мыслить.
[50:01.860 --> 50:03.860]  Почему?
[50:03.860 --> 50:05.860]  Вот именно потому, чтобы не путать понятие вершины
[50:05.860 --> 50:06.860]  и понятие строка.
[50:06.860 --> 50:09.860]  Потому что как бы это не одно и то же в данном случае.
[50:09.860 --> 50:12.860]  То есть нельзя с одной и той же меркой подходить
[50:12.860 --> 50:15.860]  к нескольким строчкам, приходящим в одну вершину.
[50:15.860 --> 50:18.860]  Ну, хорошо, представитель.
[50:18.860 --> 50:21.860]  Лонгест это представитель вершины.
[50:22.760 --> 50:25.760]  Если что, да.
[50:25.760 --> 50:28.760]  Мы считаем, вот...
[50:34.760 --> 50:37.760]  Если мы стоим, значит, наша динамика,
[50:37.760 --> 50:40.760]  которая считает количество
[50:40.760 --> 50:43.760]  путей до хороших вершин,
[50:43.760 --> 50:45.760]  это количество строк, которые можно приписать
[50:45.760 --> 50:47.760]  к вершине,
[50:47.760 --> 50:50.760]  чтобы получить вершину строку.
[50:51.660 --> 50:54.660]  Ну да.
[50:56.660 --> 50:59.660]  Соответственно,
[50:59.660 --> 51:02.660]  если...
[51:02.660 --> 51:04.660]  А что происходит, если мы от представителя
[51:04.660 --> 51:07.660]  добавляем один символ начала?
[51:14.660 --> 51:16.660]  Если вы это делаете и не выходите
[51:16.660 --> 51:18.660]  за пределы состояния Q,
[51:19.560 --> 51:20.560]  у вашей текущей строки,
[51:20.560 --> 51:23.560]  вы, как минимум, выигрышность меняется на проигрышность.
[51:25.560 --> 51:28.560]  Только как минимум, просто потому что заметим, что...
[51:30.560 --> 51:33.560]  Ну, как сказать?
[51:34.560 --> 51:37.560]  Ну, на самом деле да.
[51:40.560 --> 51:43.560]  Эээ... Нет.
[51:43.560 --> 51:48.960]  То есть остается те, что нет, это неправда.
[51:48.960 --> 51:53.560]  То есть то, что вы приписывали раньше для выигрышности,
[51:53.560 --> 51:55.560]  когда вы в этой строке слева приписали символ,
[51:55.560 --> 51:57.280]  они резко стали проигрышными наоборот.
[51:57.280 --> 52:10.080]  Нет, я хочу не приписывать выигрышную строку, а чтобы
[52:10.080 --> 52:12.560]  после приписывания строка стала выигрышной.
[52:13.560 --> 52:15.560]  Допустим, жила-была какая-нибудь строка игр,
[52:15.560 --> 52:17.560]  которая не является лонгестом.
[52:17.560 --> 52:20.560]  Ты к ней нашел, что приписать справа, чтобы получилась выигрышная.
[52:20.560 --> 52:23.560]  Да, заметим, что это приписывание сначала...
[52:23.560 --> 52:27.560]  Приписывание слева к игроку единственного символа, который ты можешь приписать, а он единственный.
[52:27.560 --> 52:32.560]  Так вот, оно у тех всех подстрок выигрышность меняет на проигрышность резко.
[52:32.560 --> 52:33.560]  Нет.
[52:33.560 --> 52:34.560]  Да.
[52:35.560 --> 52:37.560]  Потому что...
[52:37.560 --> 52:39.560]  Я имею в виду...
[52:39.560 --> 52:40.560]  Сейчас.
[52:40.560 --> 52:42.560]  У нас действительно разные понятия.
[52:42.560 --> 52:47.560]  Я имею в виду, что если мы к текущей строке допишем что-то справа,
[52:47.560 --> 52:51.560]  получим выигрышную, это ту из которой мы начнем и выиграем.
[52:56.560 --> 52:57.560]  Набор слов.
[52:57.560 --> 52:58.560]  И...
[53:01.560 --> 53:06.560]  Ну, то есть, количество строк, которые...
[53:06.560 --> 53:12.560]  Значит, количество строк, которые, во-первых, выигрышны, если мы из них начнем.
[53:12.560 --> 53:13.560]  И...
[53:13.560 --> 53:22.560]  И, во-вторых, получается, из нашего представителя добисывание слева какого-то количества силы.
[53:22.560 --> 53:24.560]  Ну, допустим, у тебя такое есть.
[53:24.560 --> 53:34.560]  Когда количество таких строк совпадает для всех строк из класса эквалидности?
[53:34.560 --> 53:35.560]  Нет.
[53:37.560 --> 53:41.560]  У меня свойство не зависит от того, к чему я приписываю.
[53:42.560 --> 53:48.560]  Ну, значит, мы говорим на разных языках, потому что, как я понимаю слова, которые ты сказал, нет, это неправда.
[53:48.560 --> 53:50.560]  Как минимум, потому что может так быть, что...
[53:50.560 --> 53:56.560]  Как минимум, потому что, как бы, игроку, может быть, к игроку ты захочешь приписать эпсилон, но он окажется выигрышным.
[53:57.560 --> 53:58.560]  Может такое случиться.
[53:59.560 --> 54:03.560]  Но Джилл был игрок, который не является лонгестом в своем классе эквалидности.
[54:03.560 --> 54:04.560]  И он, допустим, был...
[54:04.560 --> 54:07.560]  И у него там, ему выигрышно оказалось приписать строку эпсилон.
[54:10.560 --> 54:12.560]  Ну, типа, сам игрок выигрышным оказался.
[54:13.560 --> 54:15.560]  Так вот, утверждение.
[54:15.560 --> 54:23.560]  Если ты припишешь к игроку слева символ А, то тогда строка А, как к строке А игрок, нельзя будет приписать эпсилон так, чтобы он стал выигрышным.
[54:25.560 --> 54:27.560]  Окей, то есть у нас плюс один может происходить.
[54:28.560 --> 54:30.560]  Ну, не может происходить, а всегда будет.
[54:31.560 --> 54:37.560]  То есть когда вы ходишь в одном состоянии, то есть у тебя ход форсирован, поэтому как бы выигрышность-проигрышность строго меняется.
[54:37.560 --> 54:39.560]  Ага, ну то есть короче говоря, это...
[54:40.560 --> 54:48.560]  То есть у нас единственное, что происходит, когда мы начинаем от представителя переходить к более мелким строкам, это у нас происходит...
[54:49.560 --> 54:50.560]  К более мелким, чего?
[54:51.560 --> 54:52.560]  Более...
[54:52.560 --> 54:53.560]  Более мелким, да.
[54:53.560 --> 54:56.560]  Да ладно, мы к более крупным всегда переходим, мы же символы приписываем.
[54:57.560 --> 54:58.560]  Представителя...
[54:58.560 --> 54:59.560]  Слово представителя даже...
[55:00.560 --> 55:01.560]  Это лонгест.
[55:01.560 --> 55:02.560]  Не обязательно.
[55:02.560 --> 55:06.560]  Я не знаю, в моем понимании представителем дельшины может быть кто угодно.
[55:07.560 --> 55:09.560]  То есть вы считаете динамику для лонгестов?
[55:10.560 --> 55:14.560]  Ну скажи так, да, мне удобно считать, ну удобно считать для лонгестов, да, потому что у них...
[55:15.560 --> 55:17.560]  Потому что переход из лонгеста ведет в другое состояние.
[55:18.560 --> 55:19.560]  С левой вообще ничего не припишешь.
[55:20.560 --> 55:21.560]  Почему на оба?
[55:22.560 --> 55:23.560]  Да.
[55:24.560 --> 55:26.560]  То есть приписать, правда, возможно скорее всего несколько...
[55:27.560 --> 55:34.560]  То есть короче, когда мы уменьшаем длину строки, вот от этого лонгеста, у нас добавляются выигрышные сами эти строки, если они выигрышные были.
[55:34.560 --> 55:36.560]  Больше ничего не измен dx3
[55:36.560 --> 55:45.560]  Но нет-нет-нет, неправда, я опять же сказал, если лонгест был проигрышный, то значит лонгест без одного символа, если он лежит в этом состоянии, он заведомо выигрышный.
[55:46.560 --> 55:48.560]  Это если на строках которая добавится выигрышная.
[55:49.560 --> 55:50.560]  Нет.
[55:50.560 --> 55:55.560]  Если в этом состоянии еще там лежит строка лонгест без 3 символов, то это тоже выигрышная строка.
[55:56.560 --> 55:59.560]  Да, но я имею в виду то что лонгест без 3 символов из лонгеста без одного мы не получим.
[56:01.560 --> 56:02.560]  Что на хит без?
[56:02.560 --> 56:11.560]  Ну в плане из строки лонгест без одного символа, мы можем получить, какие выиграешь настояние. Возможно он сам?
[56:11.560 --> 56:16.560]  Нет, из состояния лонгест без одного символа можно получить только лонгест.
[56:16.560 --> 56:20.560]  Ну еще возможно самого лонгеста без одного символа.
[56:20.560 --> 56:25.560]  Нет, ну в смысле ход ты можешь сделать из лонгеста без одного символа, ты можешь сделать только один ход. Сам лонгест. Все.
[56:25.560 --> 56:28.560]  Возможно мне не нужно делать ход, я уже выиграю с ним.
[56:29.560 --> 56:31.560]  Вы же сами так все говорили.
[56:34.560 --> 56:38.560]  А, ну нет, с точки зрения, ну игра как бы, нет.
[56:38.560 --> 56:39.560]  Ну не с точки зрения игры.
[56:39.560 --> 56:41.560]  Я говорю выигрышность или проигрышность.
[56:41.560 --> 56:43.560]  Мы же это вроде бы ищем.
[56:43.560 --> 56:46.560]  Нет, мы не ищем количества выигрышных вершин.
[56:46.560 --> 56:48.560]  Ну не вершина, а строк.
[56:48.560 --> 56:52.560]  Ну нам, ну количество выигрышных строк у нас тоже так. Не особо, не особо.
[56:52.560 --> 56:54.560]  А что мы ищем?
[56:54.560 --> 56:58.560]  Ну то есть количество выигрышных строк начинается за одного префикса.
[56:58.560 --> 56:59.560]  Вообще-то мы ищем.
[56:59.560 --> 57:01.560]  Чтобы динамику считать.
[57:01.560 --> 57:03.560]  Количество, ну да, да, да, да.
[57:03.560 --> 57:05.560]  Ну вот, там решено.
[57:05.560 --> 57:08.560]  И это количество для внутри класса экварианности
[57:08.560 --> 57:13.560]  отличается только на те строки внутри самого класса экварианности,
[57:13.560 --> 57:18.560]  которые являются выигрышными, мы их не учили в лонгесте.
[57:20.560 --> 57:22.560]  Чего?
[57:22.560 --> 57:24.560]  Ну то есть...
[57:26.560 --> 57:28.560]  Кажется, если мы возьмем...
[57:30.560 --> 57:32.560]  Сейчас, вот у нас была вершина, да?
[57:32.560 --> 57:34.560]  Это лонгест.
[57:35.560 --> 57:39.560]  Мы знаем, что вот тут можно что-то дописать, вот тут что-то дописать, вот здесь что-то дописать.
[57:39.560 --> 57:41.560]  И это все будут выигрышные вершины.
[57:41.560 --> 57:44.560]  Допустим. Ну если лонгест проигрышный, то да.
[57:44.560 --> 57:46.560]  Вот пусть лонгест выглядит как-то так.
[57:46.560 --> 57:48.560]  Так.
[57:50.560 --> 57:52.560]  Тогда если мы возьмем строку...
[57:52.560 --> 57:54.560]  Для лонгеста мы насчитали количество таких дописываний, да?
[57:54.560 --> 57:56.560]  Да.
[57:56.560 --> 57:58.560]  Теперь возьмем строку BAX.
[58:00.560 --> 58:02.560]  Теперь, у нас есть два варианта.
[58:02.560 --> 58:04.560]  Либо она самовыигрышная.
[58:06.560 --> 58:08.560]  Да?
[58:08.560 --> 58:10.560]  Ну, и что?
[58:10.560 --> 58:12.560]  Тогда у нас будет плюс один количество выигрышных.
[58:12.560 --> 58:14.560]  Строк, очевидно.
[58:14.560 --> 58:16.560]  Это первый вариант.
[58:16.560 --> 58:20.560]  Второй вариант, что мы допишем что-то слева, а слева мы можем дописать только А.
[58:20.560 --> 58:22.560]  Только букву А.
[58:22.560 --> 58:24.560]  И это будут все варианты отсюда.
[58:28.560 --> 58:32.560]  Только это обычно к решению задачи не будет иметь никакого отношения.
[58:32.560 --> 58:38.560]  То есть, короче, для строки BAX у нас количество выигрышных вершин.
[58:38.560 --> 58:40.560]  О боже, не-не-не.
[58:40.560 --> 58:44.560]  Я извиняюсь, но ты считаешь только...
[58:44.560 --> 58:50.560]  Нет, ты извиняешь, для каждой строки считаешь количество выигрышных строк суффиксом которых она является.
[58:50.560 --> 58:52.560]  А нам, простите, нужен.
[58:52.560 --> 58:54.560]  А нам префикс нужен.
[58:54.560 --> 58:56.560]  Нам динамику надо считать.
[58:56.560 --> 58:58.560]  Чтобы вот как раньше было.
[58:58.560 --> 59:02.560]  Дописываем слева, но когда в лексикрафическом порядке выигрышную мы ищем, напоминаю.
[59:10.560 --> 59:12.560]  Можно еще раз висеть алгоритмом?
[59:12.560 --> 59:14.560]  Ой, ой, ой, ой. Слушай.
[59:18.560 --> 59:20.560]  Ну, не знаю. Ну попробуем, хотя, конечно.
[59:20.560 --> 59:22.560]  Хотя, такими темпами уже не вижу смысла, если честно.
[59:24.560 --> 59:26.560]  Но алгоритм такой.
[59:26.560 --> 59:32.560]  Сначала для каждой вершины мы определяем, является ли выигрышным просто ее лонгез, да или нет.
[59:32.560 --> 59:34.560]  Да.
[59:34.560 --> 59:36.560]  Вот, описанном алгоритм повторять не буду.
[59:36.560 --> 59:44.560]  После этого мы говорим о том, что в каждой вершине в классикваленции лежат какие-то подстроки.
[59:44.560 --> 59:48.560]  Они бывают четные длины и нечетные длины.
[59:48.560 --> 59:54.560]  И строки одной четности являются выигрышным местом, а строки другой четности нет.
[59:54.560 --> 59:56.560]  Это мы тоже знаем.
[59:56.560 --> 01:00:00.560]  Более того, для каждого стене еще и считаем, какой четности какие.
[01:00:00.560 --> 01:00:06.560]  Ну, потому что, соответственно, кто совпадает с лонгезом, у того тоже самое, что с лонгезом.
[01:00:06.560 --> 01:00:08.560]  Иначе нет.
[01:00:08.560 --> 01:00:14.560]  То есть дальше у нас решение должно быть по идее таким.
[01:00:14.560 --> 01:00:16.560]  Вот мы ищем кату выигрышную строку.
[01:00:16.560 --> 01:00:18.560]  Вот мы стартуем с тартовой вершины.
[01:00:18.560 --> 01:00:24.560]  Там говорим, что допустим, проверяем, пустая строка вообще является выигрышной или проигрышной какой-нибудь.
[01:00:24.560 --> 01:00:26.560]  Ну, если является, вычитаем один.
[01:00:26.560 --> 01:00:28.560]  Так вот, дальше берем переход по символу А.
[01:00:28.560 --> 01:00:32.560]  Переходим вот в это состояние, помни о том, что у нас строка длины 1.
[01:00:32.560 --> 01:00:34.560]  Вот.
[01:00:34.560 --> 01:00:36.560]  Внимание, вопрос.
[01:00:36.560 --> 01:00:42.560]  С какими способами из вот этого состояния с нечетной строкой можно попасть в выигрышное?
[01:00:42.560 --> 01:00:44.560]  То есть можно попасть в выигрышное.
[01:00:44.560 --> 01:00:48.560]  То есть продлите их только в право, а не в лево.
[01:00:48.560 --> 01:00:54.560]  Вот мы каким-то образом вот это число мы должны с небес по факсу откуда-то достать.
[01:00:54.560 --> 01:00:56.560]  Продлите их вправо, а не в лево.
[01:00:56.560 --> 01:00:58.560]  Продлите их вправо, а не в лево.
[01:01:06.560 --> 01:01:10.560]  Сейчас мы проверяем те строки, которые начинаются с А.
[01:01:10.560 --> 01:01:14.560]  Так, ладно, более простая задача.
[01:01:14.560 --> 01:01:18.560]  Видимо даже она не оказалась очевидной, я на это рассчитывал.
[01:01:18.560 --> 01:01:22.560]  Хорошо, дана строка С. Найдите катую в диктикографическом порядке ее под строку.
[01:01:22.560 --> 01:01:24.560]  Просто.
[01:01:24.560 --> 01:01:28.560]  Так, мы переходим по этому.
[01:01:28.560 --> 01:01:30.560]  Ну мы смотрим начало.
[01:01:30.560 --> 01:01:36.560]  Смотрим все ведущие из него символы.
[01:01:36.560 --> 01:01:38.560]  И переходим.
[01:01:38.560 --> 01:01:42.560]  Ну понятно, если проверяем количество.
[01:01:42.560 --> 01:01:44.560]  То есть нам нужно найти...
[01:01:44.560 --> 01:01:48.560]  А, нам нужно для каждой вершины...
[01:01:48.560 --> 01:01:52.560]  Найти количество...
[01:01:52.560 --> 01:01:56.560]  Ну то есть то, что мы уже считали.
[01:01:56.560 --> 01:01:58.560]  Ну почти.
[01:01:58.560 --> 01:02:04.560]  В данном случае было бы просто из этой вершины найти количество путей из нее куда-нибудь.
[01:02:04.560 --> 01:02:08.560]  Это считается простой динамикой.
[01:02:08.560 --> 01:02:10.560]  То есть это нот.
[01:02:10.560 --> 01:02:18.560]  То есть тогда мы считаем, если это число больше, значит мы идем по этому символу, если меньше, то вычитаем и пытаемся идти по символу В.
[01:02:18.560 --> 01:02:20.560]  Ну вот так.
[01:02:20.560 --> 01:02:22.560]  Ну тут, надеюсь, понятно?
[01:02:22.560 --> 01:02:26.560]  Вот, так вот, по идее мы хотим применить ровно ту же технологию.
[01:02:26.560 --> 01:02:28.560]  Да, хотим.
[01:02:28.560 --> 01:02:30.560]  Вот, только теперь из этого состояния вопрос.
[01:02:30.560 --> 01:02:32.560]  То есть мы находимся в этом...
[01:02:32.560 --> 01:02:34.560]  Только состоянием теперь у нас является еще...
[01:02:34.560 --> 01:02:42.560]  То есть не только то, что мы находимся вот здесь, а еще тот факт, что мы пришли сюда по строительнике четной длины пока.
[01:02:42.560 --> 01:02:44.560]  Да, ну мы спрашиваем все строки, которые начинаются...
[01:02:44.560 --> 01:02:48.560]  Мы по сути ищем количество строк В, которые начинаются с символа.
[01:02:48.560 --> 01:02:50.560]  Да.
[01:02:50.560 --> 01:02:52.560]  Что нам для этого надо?
[01:02:52.560 --> 01:02:54.560]  Ну нам по идее получается так.
[01:02:54.560 --> 01:02:56.560]  То есть мы говорим, мы хотим...
[01:02:56.560 --> 01:02:58.560]  Мы пришли...
[01:02:58.560 --> 01:03:00.560]  То есть в общем случае это будет звучать так.
[01:03:00.560 --> 01:03:04.560]  Мы пришли по какой-то строке П вот в это состояние с заданной четностью.
[01:03:04.560 --> 01:03:06.560]  С заданной четностью длины строки П.
[01:03:06.560 --> 01:03:12.560]  С какими способами мы из этой пары можем попасть в какую-то выигрышную пару.
[01:03:12.560 --> 01:03:14.560]  Мы путаем понятие состояния автомата и состояния динамики.
[01:03:14.560 --> 01:03:18.560]  Потому что состояние динамики это пара из состояния автомата и четности строки.
[01:03:18.560 --> 01:03:20.560]  Вот.
[01:03:20.560 --> 01:03:22.560]  То есть тут уже динамику мы считать можно.
[01:03:24.560 --> 01:03:26.560]  Вот.
[01:03:26.560 --> 01:03:28.560]  То есть как она нот?
[01:03:28.560 --> 01:03:30.560]  То есть там она нот.
[01:03:30.560 --> 01:03:32.560]  То есть...
[01:03:32.560 --> 01:03:34.560]  Да, потом она нот.
[01:03:34.560 --> 01:03:36.560]  Потому что...
[01:03:36.560 --> 01:03:38.560]  Действительно, про каждую такую пару мы знаем.
[01:03:38.560 --> 01:03:40.560]  У нас пара теперь является такая выигрышной или проигрышной.
[01:03:40.560 --> 01:03:44.560]  И соответственно, когда мы к этой паре там приписываем какой-то символ А,
[01:03:44.560 --> 01:03:46.560]  то четность меняется, состояние тоже меняется.
[01:03:46.560 --> 01:03:48.560]  И мы там уже смотрим, меняется на что.
[01:03:48.560 --> 01:03:50.560]  На там...
[01:03:50.560 --> 01:03:52.560]  Ну там, четность меняется, состояние меняется.
[01:03:52.560 --> 01:03:56.560]  И мы там, собственно, прибавляем к ответу то, что мы там насчитали там.
[01:03:56.560 --> 01:03:58.560]  То есть вот такая, по идее, технология.
[01:04:04.560 --> 01:04:06.560]  Вот.
[01:04:06.560 --> 01:04:08.560]  То есть поэтому вот такую динамику можно посчитать и потом после этого тут ходить.
[01:04:08.560 --> 01:04:10.560]  Вот, помня, что здесь нечетная, потом когда мы по следующей буквы пойдем,
[01:04:10.560 --> 01:04:12.560]  там для нас таки будет четная и так далее.
[01:04:20.560 --> 01:04:22.560]  Ну похоже.
[01:04:22.560 --> 01:04:24.560]  Ну вот да. Кошмарь.
[01:04:26.560 --> 01:04:28.560]  Вот.
[01:04:28.560 --> 01:04:30.560]  Ладно.
[01:04:30.560 --> 01:04:32.560]  Ой.
[01:04:32.560 --> 01:04:34.560]  Хотя да.
[01:04:34.560 --> 01:04:36.560]  Ну вот.
[01:04:36.560 --> 01:04:38.560]  Ну ладно.
[01:04:38.560 --> 01:04:40.560]  Давайте уже переходить в существенному дереву.
[01:04:40.560 --> 01:04:42.560]  А то что-то уже...
[01:04:42.560 --> 01:04:44.560]  А то как-то да.
[01:04:44.560 --> 01:04:46.560]  Задача, конечно, может не самая простая, но и не настолько сложная.
[01:04:56.560 --> 01:04:58.560]  О, спасибо.
[01:05:04.560 --> 01:05:06.560]  Ну вот.
[01:05:06.560 --> 01:05:08.560]  Ладно.
[01:05:08.560 --> 01:05:10.560]  Значит, будем сейчас строить другую структуру данных.
[01:05:10.560 --> 01:05:12.560]  Ну, собственно, третью из суффиксной триады.
[01:05:16.560 --> 01:05:18.560]  А, мы еще суфмассы не построили.
[01:05:18.560 --> 01:05:20.560]  Ой, точно.
[01:05:20.560 --> 01:05:22.560]  Кошмар какой.
[01:05:22.560 --> 01:05:24.560]  Это значит, надо еще и суффиксные массивы.
[01:05:24.560 --> 01:05:26.560]  Суффиксные массивы.
[01:05:26.560 --> 01:05:28.560]  Суффиксные массивы.
[01:05:28.560 --> 01:05:30.560]  Суффиксные массивы.
[01:05:30.560 --> 01:05:32.560]  Суффиксные массивы.
[01:05:32.560 --> 01:05:34.560]  Это значит, надо еще и суффиксные массивы строить.
[01:05:34.560 --> 01:05:36.560]  Ой, ой, ой, ой, ой.
[01:05:36.560 --> 01:05:38.560]  Ну ладно. Оставим насладенько.
[01:05:38.560 --> 01:05:40.560]  Вот.
[01:05:40.560 --> 01:05:42.560]  Да.
[01:05:42.560 --> 01:05:44.560]  Что тогда? Чтите, не привычно, что мы обсудили суффиксные автоматы
[01:05:44.560 --> 01:05:46.560]  и не обсудили суффиксные массивы.
[01:05:46.560 --> 01:05:48.560]  Как-то так.
[01:05:48.560 --> 01:05:50.560]  Это так еще никогда не было, на самом деле.
[01:05:50.560 --> 01:05:52.560]  Ну, логично, потому что суффиксные автоматы обычно проще.
[01:05:54.560 --> 01:05:56.560]  А, ну нет.
[01:05:56.560 --> 01:05:58.560]  Дерево полиндромов это не суффиксные триады.
[01:05:58.560 --> 01:06:00.560]  Ну, то есть как бы дерево полиндромов,
[01:06:00.560 --> 01:06:02.560]  оно все-таки решало конкретную задачу про полиндромы.
[01:06:02.560 --> 01:06:04.560]  Вот.
[01:06:04.560 --> 01:06:06.560]  Ладно. Мы сейчас попробуем решить...
[01:06:06.560 --> 01:06:08.560]  Значит, так откатываемся.
[01:06:08.560 --> 01:06:10.560]  Мы снова пытаемся решить задачу вида дан
[01:06:10.560 --> 01:06:12.560]  какой-то текст, какая-то строка С.
[01:06:12.560 --> 01:06:14.560]  И мы хотим искать быстро в ней подстроки.
[01:06:14.560 --> 01:06:16.560]  Ну, хотя бы понимать там,
[01:06:16.560 --> 01:06:18.560]  дана строка П, и желательно О от П понять,
[01:06:18.560 --> 01:06:22.560]  является ли у нас это П подстрокой строки С.
[01:06:24.560 --> 01:06:26.560]  Значит, сейчас мы пойдем другим путем.
[01:06:26.560 --> 01:06:28.560]  Немножко.
[01:06:28.560 --> 01:06:30.560]  Хотя начало такое же.
[01:06:30.560 --> 01:06:32.560]  Вот, допустим, у нас там есть опять наша любимая строка Аббатсаба.
[01:06:36.560 --> 01:06:38.560]  Вот, возникает вопрос.
[01:06:38.560 --> 01:06:40.560]  Предположим, что мы говорим,
[01:06:40.560 --> 01:06:42.560]  что на предподсчет можем потратить сколько угодно времени.
[01:06:42.560 --> 01:06:44.560]  Вот.
[01:06:44.560 --> 01:06:46.560]  Но зато потом мы хотим, чтобы для каждой строки П
[01:06:46.560 --> 01:06:48.560]  мы отвечали на запрос быстро.
[01:06:48.560 --> 01:06:50.560]  Тогда, как бы, если забыть о всех этих автоматах,
[01:06:52.560 --> 01:06:54.560]  то какой самый тупой способ это сделать?
[01:06:54.560 --> 01:06:56.560]  Просто построить БОР из всех подстрок, правда?
[01:06:58.560 --> 01:07:00.560]  Вот.
[01:07:00.560 --> 01:07:02.560]  Вот просто самый тупой способ.
[01:07:02.560 --> 01:07:04.560]  Ну, потому что, да,
[01:07:04.560 --> 01:07:06.560]  у нас же есть у нас есть структура данных
[01:07:08.560 --> 01:07:10.560]  какой-нибудь
[01:07:12.560 --> 01:07:14.560]  то есть какая-нибудь структура данных сет строчек,
[01:07:14.560 --> 01:07:16.560]  то она обычно реализуется через БОР.
[01:07:18.560 --> 01:07:20.560]  Вот.
[01:07:20.560 --> 01:07:22.560]  Аббатсаба.
[01:07:22.560 --> 01:07:24.560]  Вот.
[01:07:24.560 --> 01:07:26.560]  Ну, можно тут даже...
[01:07:30.560 --> 01:07:32.560]  Вот.
[01:07:32.560 --> 01:07:34.560]  И, по идее, вот БОР будет выглядеть вот примерно
[01:07:34.560 --> 01:07:36.560]  вот таким образом.
[01:07:36.560 --> 01:07:38.560]  А, ну вот внезапно и все,
[01:07:38.560 --> 01:07:40.560]  только я должен пару крестиков еще нарисовать.
[01:07:42.560 --> 01:07:44.560]  Хотя можно крестики и нарисовать.
[01:07:44.560 --> 01:07:46.560]  Да, предпределена задача
[01:07:46.560 --> 01:07:48.560]  только подстройки в строке искать,
[01:07:48.560 --> 01:07:50.560]  в общем-то крестики не обязательно.
[01:07:50.560 --> 01:07:52.560]  Вот.
[01:07:52.560 --> 01:07:54.560]  За какой всем точку можем построить такой БОР?
[01:07:54.560 --> 01:07:56.560]  Ну, очевидно, за квадрат.
[01:07:56.560 --> 01:07:58.560]  Да.
[01:07:58.560 --> 01:08:00.560]  Вот, буквально за квадрат,
[01:08:00.560 --> 01:08:02.560]  и получается квадрат предподсчета,
[01:08:02.560 --> 01:08:04.560]  и после этого ответ на каждую строку П от П.
[01:08:04.560 --> 01:08:06.560]  Но квадрат, конечно, нас
[01:08:06.560 --> 01:08:08.560]  ни по памяти, ни по времени не устраивает.
[01:08:10.560 --> 01:08:12.560]  Но, уже глядя на эту картинку,
[01:08:12.560 --> 01:08:14.560]  понимаю, что вообще, на самом деле,
[01:08:14.560 --> 01:08:16.560]  вот эту штуку можно немножко
[01:08:16.560 --> 01:08:18.560]  экономнее хранить.
[01:08:18.560 --> 01:08:20.560]  Потому что, смотрите, какая ситуация.
[01:08:20.560 --> 01:08:22.560]  Заметим, что у нас что-то в этом графе
[01:08:22.560 --> 01:08:24.560]  подозрительно мало развилок.
[01:08:24.560 --> 01:08:26.560]  Видно, да?
[01:08:26.560 --> 01:08:28.560]  Но, с другой стороны,
[01:08:28.560 --> 01:08:30.560]  заметим, что между развилками
[01:08:30.560 --> 01:08:32.560]  путь идет однозначно,
[01:08:32.560 --> 01:08:34.560]  и этот путь обязательно соответствует какой-то
[01:08:34.560 --> 01:08:36.560]  подстроке стратеез, правда?
[01:08:36.560 --> 01:08:38.560]  Да, ну, не обязательно суффиксу.
[01:08:38.560 --> 01:08:40.560]  Ну, правда, если идет в лист, то это, конечно, суффикс,
[01:08:40.560 --> 01:08:42.560]  но, в принципе, тут может быть и вот
[01:08:42.560 --> 01:08:44.560]  до развилки и не обязательно суффикс.
[01:08:44.560 --> 01:08:46.560]  Хотя...
[01:08:46.560 --> 01:08:48.560]  Тогда возникает следующая идея, да?
[01:08:48.560 --> 01:08:50.560]  То есть, как бы, чтобы мы же
[01:08:50.560 --> 01:08:52.560]  тогда давайте мысленно иметь в виду,
[01:08:52.560 --> 01:08:54.560]  что у нас эти состояния имеют
[01:08:54.560 --> 01:08:56.560]  место быть,
[01:08:56.560 --> 01:08:58.560]  но в реальности мы их хранить не будем.
[01:08:58.560 --> 01:09:00.560]  Вместо этого
[01:09:00.560 --> 01:09:02.560]  мы будем
[01:09:02.560 --> 01:09:04.560]  делать так.
[01:09:06.560 --> 01:09:08.560]  Мы, значит, каждый такой
[01:09:08.560 --> 01:09:10.560]  путь сожмем в единое ребро,
[01:09:10.560 --> 01:09:12.560]  на котором
[01:09:12.560 --> 01:09:14.560]  мы будем писать,
[01:09:14.560 --> 01:09:16.560]  что на самом деле оно соответствует
[01:09:16.560 --> 01:09:18.560]  цепочке из каких-то
[01:09:18.560 --> 01:09:20.560]  состояний.
[01:09:20.560 --> 01:09:22.560]  Ну вот, по ним можно переходить
[01:09:22.560 --> 01:09:24.560]  по каким-то буквам, и эти буквы образуют
[01:09:24.560 --> 01:09:26.560]  подстроку стратеез.
[01:09:26.560 --> 01:09:28.560]  Ну вот, и мы будем записывать,
[01:09:28.560 --> 01:09:30.560]  какую конкретно, кстати, очень удобно
[01:09:30.560 --> 01:09:32.560]  оказывается записывать в виде полуинтервалов.
[01:09:34.560 --> 01:09:36.560]  Вот.
[01:09:36.560 --> 01:09:38.560]  Вот.
[01:09:38.560 --> 01:09:40.560]  Вот так пишу.
[01:09:40.560 --> 01:09:42.560]  Вот.
[01:09:42.560 --> 01:09:44.560]  Получается вот такая штука.
[01:09:44.560 --> 01:09:46.560]  Ну, если вы хотите хранить крестик, то там...
[01:09:46.560 --> 01:09:48.560]  Ну ладно, давайте,
[01:09:48.560 --> 01:09:50.560]  если вот, чтобы совсем
[01:09:50.560 --> 01:09:52.560]  убедительнее было, если не хранить крестик,
[01:09:52.560 --> 01:09:54.560]  то получается вот так.
[01:10:00.560 --> 01:10:02.560]  Вот такая красота.
[01:10:02.560 --> 01:10:04.560]  То есть, видите, количество...
[01:10:04.560 --> 01:10:06.560]  То есть, видите, вместо квадрата
[01:10:06.560 --> 01:10:08.560]  что-то размер какой-то стал минималистичен.
[01:10:08.560 --> 01:10:10.560]  Вот, конкретно для аббатсабы количество
[01:10:10.560 --> 01:10:12.560]  ребер оказалось даже меньше, чем
[01:10:12.560 --> 01:10:14.560]  длина самой строки.
[01:10:16.560 --> 01:10:18.560]  Вот. Но это, конечно, не обязательно.
[01:10:20.560 --> 01:10:22.560]  Теперь у тебя есть какой-то вопрос.
[01:10:22.560 --> 01:10:24.560]  А насколько много
[01:10:24.560 --> 01:10:26.560]  может быть... Вот эта штука называется
[01:10:26.560 --> 01:10:28.560]  прям вот официальное определение
[01:10:28.560 --> 01:10:30.560]  сжатый суффиксный бор.
[01:10:34.560 --> 01:10:36.560]  Или суффиксное дерево.
[01:10:38.560 --> 01:10:40.560]  Вот.
[01:10:40.560 --> 01:10:42.560]  Ну, а это просто называется
[01:10:42.560 --> 01:10:44.560]  суффиксный бор.
[01:10:44.560 --> 01:10:46.560]  То есть, просто определение суффиксное дерево
[01:10:46.560 --> 01:10:48.560]  это сжатый суффиксный бор.
[01:10:48.560 --> 01:10:50.560]  Вот, а дальше уже начинается.
[01:10:50.560 --> 01:10:52.560]  Сжатый суффиксный бор это суффиксный бор,
[01:10:52.560 --> 01:10:54.560]  который сжали.
[01:10:54.560 --> 01:10:56.560]  Сжали это...
[01:10:56.560 --> 01:10:58.560]  Ну, вы поняли.
[01:10:58.560 --> 01:11:00.560]  Вот.
[01:11:02.560 --> 01:11:04.560]  Теперь у нас есть какой-то вопрос.
[01:11:04.560 --> 01:11:06.560]  Вот сколько может быть
[01:11:06.560 --> 01:11:08.560]  вершины ребер в таком суффиксном дереве?
[01:11:14.560 --> 01:11:16.560]  Вот когда мы видим, что
[01:11:16.560 --> 01:11:18.560]  вершины возникают только вот тогда,
[01:11:18.560 --> 01:11:20.560]  когда нужна реальная развилка.
[01:11:20.560 --> 01:11:22.560]  А почему?
[01:11:22.560 --> 01:11:24.560]  Ну, у нас развилок не больше,
[01:11:24.560 --> 01:11:26.560]  чем суффикс.
[01:11:26.560 --> 01:11:28.560]  Ну, по сути, да.
[01:11:28.560 --> 01:11:30.560]  Можно и так сказать.
[01:11:30.560 --> 01:11:32.560]  Да, более точно звучит так.
[01:11:32.560 --> 01:11:34.560]  То есть, на самом деле, давайте
[01:11:34.560 --> 01:11:36.560]  построим это суффиксное дерево
[01:11:36.560 --> 01:11:38.560]  но немножко по-другому.
[01:11:38.560 --> 01:11:40.560]  Я сейчас буду просто
[01:11:40.560 --> 01:11:42.560]  заведу просто коинь
[01:11:42.560 --> 01:11:44.560]  и буду добавлять суффиксы по очереди.
[01:11:44.560 --> 01:11:46.560]  Делать я это буду так.
[01:11:46.560 --> 01:11:48.560]  Добавлю суффикс аббацаба.
[01:11:48.560 --> 01:11:50.560]  У меня тут появится переход
[01:11:50.560 --> 01:11:52.560]  по букве А и ноль С.
[01:11:52.560 --> 01:11:54.560]  Вот.
[01:11:54.560 --> 01:11:56.560]  Сейчас я буду тут черненьким
[01:11:56.560 --> 01:11:58.560]  писать.
[01:11:58.560 --> 01:12:00.560]  Сейчас я...
[01:12:00.560 --> 01:12:02.560]  Ну, на самом деле, то есть, это ребро
[01:12:02.560 --> 01:12:04.560]  соответствует, то есть, только первая
[01:12:04.560 --> 01:12:06.560]  буква, буква А, а на самом деле тут целая
[01:12:06.560 --> 01:12:08.560]  цепочка.
[01:12:08.560 --> 01:12:10.560]  Вот. Но как бы понятно, что
[01:12:10.560 --> 01:12:12.560]  корневая вершина по-любому
[01:12:12.560 --> 01:12:14.560]  является типа развилкой, да, поэтому
[01:12:14.560 --> 01:12:16.560]  без вариантов. Вот.
[01:12:18.560 --> 01:12:20.560]  Теперь, но я вот здесь
[01:12:20.560 --> 01:12:22.560]  написал черным то, что мы в явном виде
[01:12:22.560 --> 01:12:24.560]  не храним, но подразумевается,
[01:12:24.560 --> 01:12:26.560]  что оно на этом есть.
[01:12:26.560 --> 01:12:28.560]  Теперь давайте добавим строчку
[01:12:28.560 --> 01:12:30.560]  аббацаба.
[01:12:30.560 --> 01:12:32.560]  Ну, здесь все просто.
[01:12:32.560 --> 01:12:34.560]  Как бы здесь заметим,
[01:12:34.560 --> 01:12:36.560]  что мы уже из корня должны идти куда-то
[01:12:36.560 --> 01:12:38.560]  в другую сторону, поэтому вот
[01:12:38.560 --> 01:12:40.560]  берем В, там пишем
[01:12:40.560 --> 01:12:42.560]  тут соответственно от сколько там?
[01:12:42.560 --> 01:12:44.560]  От 1,7 на этот раз.
[01:12:46.560 --> 01:12:48.560]  И здесь
[01:12:48.560 --> 01:12:50.560]  пишем аббацаба.
[01:12:52.560 --> 01:12:54.560]  Вот.
[01:12:56.560 --> 01:12:58.560]  Дальше происходит интересная вещь.
[01:12:58.560 --> 01:13:00.560]  Мы добавляем суффикс аббацаба.
[01:13:00.560 --> 01:13:02.560]  Но если бы мы его добавляли в обычный
[01:13:02.560 --> 01:13:04.560]  борт, то мы бы должны были пройти
[01:13:04.560 --> 01:13:06.560]  по букве А,
[01:13:06.560 --> 01:13:08.560]  а потом идти куда-то.
[01:13:08.560 --> 01:13:10.560]  Для того, чтобы это сделать, нам
[01:13:10.560 --> 01:13:12.560]  пришло время провести
[01:13:12.560 --> 01:13:14.560]  операцию распилить
[01:13:14.560 --> 01:13:16.560]  ребро.
[01:13:18.560 --> 01:13:20.560]  В общем, действительно, да, английский
[01:13:20.560 --> 01:13:22.560]  язык, он как бы беднее
[01:13:22.560 --> 01:13:24.560]  русского языка. Потому что как будет
[01:13:24.560 --> 01:13:26.560]  по-английски распилить ребро?
[01:13:26.560 --> 01:13:28.560]  Ну, скорее
[01:13:28.560 --> 01:13:30.560]  сплит.
[01:13:30.560 --> 01:13:32.560]  Нет, кат это ребро отрезать.
[01:13:32.560 --> 01:13:34.560]  Кстати, вот и да,
[01:13:34.560 --> 01:13:36.560]  проголила сейфер со смешной вопрос.
[01:13:36.560 --> 01:13:38.560]  У нас была задача распилить строчку
[01:13:38.560 --> 01:13:40.560]  на W1, W2.
[01:13:40.560 --> 01:13:42.560]  Так вот, как вы думаете?
[01:13:42.560 --> 01:13:44.560]  Как в английской,
[01:13:44.560 --> 01:13:46.560]  какое слово в английской статье в этом месте
[01:13:46.560 --> 01:13:48.560]  возникало?
[01:13:48.560 --> 01:13:50.560]  Нет.
[01:13:50.560 --> 01:13:52.560]  Нет.
[01:13:52.560 --> 01:13:54.560]  Там какое-то странное,
[01:13:54.560 --> 01:13:56.560]  редкое слово, которое используется.
[01:13:56.560 --> 01:13:58.560]  Да нет, нет, вы это слово
[01:13:58.560 --> 01:14:00.560]  почти наверное знаете, но
[01:14:00.560 --> 01:14:02.560]  возможно не ожидаете, что оно будет использовано здесь.
[01:14:02.560 --> 01:14:04.560]  Break, separate.
[01:14:04.560 --> 01:14:06.560]  О, не, не, не.
[01:14:06.560 --> 01:14:08.560]  Не.
[01:14:08.560 --> 01:14:10.560]  Да, вы упадете.
[01:14:10.560 --> 01:14:12.560]  Внезапно, да?
[01:14:12.560 --> 01:14:14.560]  Да, то есть там
[01:14:14.560 --> 01:14:16.560]  Лемма там формирует
[01:14:16.560 --> 01:14:18.560]  There is a path W equal to
[01:14:18.560 --> 01:14:20.560]  this.
[01:14:20.560 --> 01:14:22.560]  Нормально.
[01:14:22.560 --> 01:14:24.560]  Ну вот.
[01:14:24.560 --> 01:14:26.560]  Вот.
[01:14:26.560 --> 01:14:28.560]  Ну это так такое
[01:14:28.560 --> 01:14:30.560]  лирическое отступление, это которое мы может быть дойдем еще.
[01:14:30.560 --> 01:14:32.560]  Ой, господи.
[01:14:32.560 --> 01:14:34.560]  Ну ладно.
[01:14:34.560 --> 01:14:36.560]  Я, в принципе, не знаю,
[01:14:36.560 --> 01:14:38.560]  что это такое.
[01:14:38.560 --> 01:14:40.560]  Ну ладно.
[01:14:40.560 --> 01:14:42.560]  Ну можем, кстати, дойти,
[01:14:42.560 --> 01:14:44.560]  потому что как вы выяснили, что скорее всего
[01:14:44.560 --> 01:14:46.560]  видимо в следующий раз все равно придется строчки обсуждать.
[01:14:46.560 --> 01:14:48.560]  А то я уже думал, что
[01:14:48.560 --> 01:14:50.560]  ой, в следующий раз придется геометрию уже
[01:14:50.560 --> 01:14:52.560]  говорить.
[01:14:52.560 --> 01:14:54.560]  Вы, наверное, ничего про меня не хотели же сказать, кроме
[01:14:54.560 --> 01:14:56.560]  сувиксовать дерево?
[01:14:56.560 --> 01:14:58.560]  Ну смотрите, нет, логика такая.
[01:14:58.560 --> 01:15:00.560]  По идее, я вам должен
[01:15:00.560 --> 01:15:02.560]  рисовать сувиксное дерево и суфмасс, ну куда без этого, да?
[01:15:02.560 --> 01:15:04.560]  Значит, также хочется
[01:15:04.560 --> 01:15:06.560]  рисовать галилосейфереса, дальше
[01:15:06.560 --> 01:15:08.560]  у меня все-таки мечта рассказать вам
[01:15:08.560 --> 01:15:10.560]  дерево тандемных повторов все-таки.
[01:15:10.560 --> 01:15:12.560]  Да, пока это,
[01:15:12.560 --> 01:15:14.560]  честно скажу, пока это мечта.
[01:15:14.560 --> 01:15:16.560]  Потому что я тоже скажу так,
[01:15:16.560 --> 01:15:18.560]  пока я только начал вот это стучать.
[01:15:18.560 --> 01:15:20.560]  Каждый год
[01:15:20.560 --> 01:15:22.560]  есть что-то новое?
[01:15:22.560 --> 01:15:24.560]  Ну конечно, ну.
[01:15:24.560 --> 01:15:26.560]  Ну как? Ну не могу сказать,
[01:15:26.560 --> 01:15:28.560]  что я эту фишку позаимствовал у Райгора, если честно.
[01:15:30.560 --> 01:15:32.560]  Ну как бы.
[01:15:32.560 --> 01:15:34.560]  Но если Райгор так же делает,
[01:15:34.560 --> 01:15:36.560]  то значит хорошо.
[01:15:36.560 --> 01:15:38.560]  Ну хорошо.
[01:15:38.560 --> 01:15:40.560]  Вот.
[01:15:40.560 --> 01:15:42.560]  Ну а что делать?
[01:15:42.560 --> 01:15:44.560]  А то как-то это.
[01:15:44.560 --> 01:15:46.560]  А то знаете, если я буду
[01:15:46.560 --> 01:15:48.560]  из года в рот рассказывать буквально одно и то же,
[01:15:48.560 --> 01:15:50.560]  ко мне в какой-то момент все на паре перестанут ходить.
[01:15:50.560 --> 01:15:52.560]  Почему? Потому что на самом деле
[01:15:52.560 --> 01:15:54.560]  в видео на ютубе это все уже есть.
[01:15:54.560 --> 01:15:56.560]  И я даже
[01:15:56.560 --> 01:15:58.560]  больше скажу, скорее всего там люди могут
[01:15:58.560 --> 01:16:00.560]  быть там, то есть
[01:16:00.560 --> 01:16:02.560]  скажем так, как выясняется, некоторые в школе
[01:16:02.560 --> 01:16:04.560]  начинают эти лекции слушать.
[01:16:04.560 --> 01:16:06.560]  То есть знаете, мне было очень приятно, когда
[01:16:06.560 --> 01:16:08.560]  пришел мой 11 классик, но я рассказывал эту историю.
[01:16:08.560 --> 01:16:10.560]  Там говорил
[01:16:10.560 --> 01:16:12.560]  знаете, ну вот у вас там ошибка.
[01:16:12.560 --> 01:16:14.560]  Почему? Знаете, я вот Волкаша
[01:16:14.560 --> 01:16:16.560]  мне попросили рассказать лекцию про Гомариху.
[01:16:16.560 --> 01:16:18.560]  Ну вот.
[01:16:18.560 --> 01:16:20.560]  Я готовился по лекции, используя ваше видео.
[01:16:20.560 --> 01:16:22.560]  Так вот у вас там ошибка.
[01:16:24.560 --> 01:16:26.560]  Так что осторожно.
[01:16:26.560 --> 01:16:28.560]  Там может быть ошибка.
[01:16:28.560 --> 01:16:30.560]  Вот.
[01:16:30.560 --> 01:16:32.560]  Нет, ну мы там разбрались какая, то есть там
[01:16:32.560 --> 01:16:34.560]  были ошибка уровня, что кое-что недостаточно
[01:16:34.560 --> 01:16:36.560]  четко там проговорили доказательства.
[01:16:36.560 --> 01:16:38.560]  Там где-то в конце, но не важно.
[01:16:38.560 --> 01:16:40.560]  Давай.
[01:16:40.560 --> 01:16:42.560]  Так вот, ладно.
[01:16:42.560 --> 01:16:44.560]  Значит, тут мы что делаем?
[01:16:44.560 --> 01:16:46.560]  Значит, в данном случае посплитили
[01:16:46.560 --> 01:16:48.560]  репрошены, посплитили. Это означает, что
[01:16:48.560 --> 01:16:50.560]  тут у нас теперь 1,7, тут 0,1.
[01:16:50.560 --> 01:16:52.560]  Тут
[01:16:52.560 --> 01:16:54.560]  переход по букве A, тут переход по букве
[01:16:54.560 --> 01:16:56.560]  B, а тут переход по букве C.
[01:16:56.560 --> 01:16:58.560]  И тут под строка
[01:16:58.560 --> 01:17:00.560]  3,7.
[01:17:00.560 --> 01:17:02.560]  И дальше пишем
[01:17:02.560 --> 01:17:04.560]  цаба.
[01:17:04.560 --> 01:17:06.560]  Так, теперь добавляем собственно
[01:17:06.560 --> 01:17:08.560]  цабу, ну здесь все гораздо
[01:17:08.560 --> 01:17:10.560]  проще.
[01:17:10.560 --> 01:17:12.560]  3,7, имею в виду
[01:17:12.560 --> 01:17:14.560]  цабу.
[01:17:18.560 --> 01:17:20.560]  А это, ну это зависит от того, надо вам это делать
[01:17:20.560 --> 01:17:22.560]  или нет. Часто этого, кстати,
[01:17:22.560 --> 01:17:24.560]  в большинстве задач этого, кстати, даже не надо делать.
[01:17:24.560 --> 01:17:26.560]  Хотя, нет, если есть
[01:17:26.560 --> 01:17:28.560]  то есть так, обычно этого специально
[01:17:28.560 --> 01:17:30.560]  не делают. Ну, во-первых, это
[01:17:30.560 --> 01:17:32.560]  будет как бы немножко портить
[01:17:32.560 --> 01:17:34.560]  алгоритм, который мы в будущем
[01:17:34.560 --> 01:17:36.560]  будем построим. А во-вторых,
[01:17:36.560 --> 01:17:38.560]  если вам очень хочется это сделать,
[01:17:38.560 --> 01:17:40.560]  то есть мистический
[01:17:40.560 --> 01:17:42.560]  да, то метод
[01:17:42.560 --> 01:17:44.560]  называется метод диезика.
[01:17:44.560 --> 01:17:46.560]  То есть допишем просто какой-нибудь диезик,
[01:17:46.560 --> 01:17:48.560]  который там заведомо не встречается
[01:17:48.560 --> 01:17:50.560]  в этой строке, желательно чтобы он был еще и меньше.
[01:17:50.560 --> 01:17:52.560]  Там по некоторым причинам.
[01:17:52.560 --> 01:17:54.560]  И тогда у вас собственно
[01:17:54.560 --> 01:17:56.560]  все суффиксы будут заканчиваться в листах.
[01:17:56.560 --> 01:17:58.560]  Так что само по себе
[01:17:58.560 --> 01:18:00.560]  это не принципиально.
[01:18:00.560 --> 01:18:02.560]  Вот, да, диезик.
[01:18:02.560 --> 01:18:04.560]  Ну, как бы.
[01:18:04.560 --> 01:18:06.560]  Если вы больше, да, ну можно, а вы сейчас
[01:18:06.560 --> 01:18:08.560]  еще кто-то приписывает доллар, но я диезик люблю
[01:18:08.560 --> 01:18:10.560]  больше. Вот.
[01:18:12.560 --> 01:18:14.560]  Лучший диезик, да.
[01:18:14.560 --> 01:18:16.560]  Нет, хотя по-разному. У кого-то диезик, конечно,
[01:18:16.560 --> 01:18:18.560]  с решетки ассоциируется, но это уже...
[01:18:20.560 --> 01:18:22.560]  Ну, как сказать, что
[01:18:22.560 --> 01:18:24.560]  как лучше звучит решетка или диезик?
[01:18:26.560 --> 01:18:28.560]  А то просто решетка
[01:18:28.560 --> 01:18:30.560]  это что-то про тюрьму, а диезик это что-то про музыку.
[01:18:30.560 --> 01:18:32.560]  В смысле, про тюрьму и решетка это
[01:18:32.560 --> 01:18:34.560]  типа про бумы всякие.
[01:18:34.560 --> 01:18:36.560]  Ах, ах, да.
[01:18:36.560 --> 01:18:38.560]  А, ну если у вас такие ассоциации, ну тогда...
[01:18:38.560 --> 01:18:40.560]  Прямо сейчас какая-то чья ассоциация?
[01:18:40.560 --> 01:18:42.560]  А, ну да, да, да, вот, правильно, все, да.
[01:18:42.560 --> 01:18:44.560]  Как-то, а вы о чем подумали, да, да, да, понятно.
[01:18:44.560 --> 01:18:46.560]  Ладно.
[01:18:46.560 --> 01:18:48.560]  Суть, в общем-то, одна.
[01:18:48.560 --> 01:18:50.560]  То есть обычно, если тут, ну можно
[01:18:50.560 --> 01:18:52.560]  финальные вершины поставить и сделать тут еще пару сплитов?
[01:18:52.560 --> 01:18:54.560]  Можно не делать.
[01:18:54.560 --> 01:18:56.560]  Но обычно этого...
[01:18:56.560 --> 01:18:58.560]  Обычно не делают.
[01:18:58.560 --> 01:19:00.560]  Но что я тут хотел этим показать?
[01:19:00.560 --> 01:19:02.560]  Я этим хотел показать следующее, что
[01:19:02.560 --> 01:19:04.560]  добавление каждого нового суффикса
[01:19:04.560 --> 01:19:06.560]  добавляет вам максимум
[01:19:06.560 --> 01:19:08.560]  один лист, потому что если повезет, не добавит
[01:19:08.560 --> 01:19:10.560]  ничего, если у вас
[01:19:10.560 --> 01:19:12.560]  уровень среднего везения добавит
[01:19:12.560 --> 01:19:14.560]  только одно ребро и один лист,
[01:19:14.560 --> 01:19:16.560]  ну там, ответвление от корня,
[01:19:16.560 --> 01:19:18.560]  ну или могло быть еще, например, что
[01:19:18.560 --> 01:19:20.560]  прямо отсюда ответвление произошло
[01:19:20.560 --> 01:19:22.560]  от уже существующей вершины.
[01:19:22.560 --> 01:19:24.560]  Или если вам совсем-совсем не повезло,
[01:19:24.560 --> 01:19:26.560]  то вы тут подсплитили
[01:19:26.560 --> 01:19:28.560]  ребро, значит, на нем появилась новая вершина,
[01:19:28.560 --> 01:19:30.560]  от которой появилось новое ребро и лист.
[01:19:30.560 --> 01:19:32.560]  То есть, в переводе говоря,
[01:19:32.560 --> 01:19:34.560]  на каждом шаге появляется не более
[01:19:34.560 --> 01:19:36.560]  чем две новые вершины.
[01:19:36.560 --> 01:19:38.560]  Кстати, если у нас
[01:19:38.560 --> 01:19:40.560]  окажется...
[01:19:42.560 --> 01:19:44.560]  Ну вот. То есть, в принципе, уже
[01:19:44.560 --> 01:19:46.560]  вывод, на самом деле, простой.
[01:19:46.560 --> 01:19:48.560]  Количество вершин в суффиксном
[01:19:48.560 --> 01:19:50.560]  дереве не более чем 2n.
[01:19:52.560 --> 01:19:54.560]  Ну не совсем 2n, формально 2n
[01:19:54.560 --> 01:19:56.560]  плюс один, конечно.
[01:19:56.560 --> 01:19:58.560]  Потому что у вас для пустой строти одна вершина.
[01:19:58.560 --> 01:20:00.560]  Да, но заметим, что
[01:20:00.560 --> 01:20:02.560]  после добавления одной буквы у вас будет две вершины
[01:20:02.560 --> 01:20:04.560]  и одно ребро по-любому.
[01:20:04.560 --> 01:20:06.560]  Вот.
[01:20:06.560 --> 01:20:08.560]  Да, вот. Поэтому получается
[01:20:08.560 --> 01:20:10.560]  2n,
[01:20:10.560 --> 01:20:12.560]  2 вершины и 2n минус одно
[01:20:12.560 --> 01:20:14.560]  ребро. Ну правда,
[01:20:14.560 --> 01:20:16.560]  в данном случае достаточно просто привести пример,
[01:20:16.560 --> 01:20:18.560]  когда эта оценка
[01:20:18.560 --> 01:20:20.560]  будет достигнута.
[01:20:22.560 --> 01:20:24.560]  Ну, кстати, да. Причем практически в любую
[01:20:24.560 --> 01:20:26.560]  строчку, да.
[01:20:26.560 --> 01:20:28.560]  Да, то есть, в принципе,
[01:20:28.560 --> 01:20:30.560]  можно сюда дописать... Да. Вот, кстати,
[01:20:30.560 --> 01:20:32.560]  даже давайте внимательно посмотрим, что
[01:20:32.560 --> 01:20:34.560]  происходит.
[01:20:34.560 --> 01:20:36.560]  Чего?
[01:20:38.560 --> 01:20:40.560]  Ну, давайте так.
[01:20:40.560 --> 01:20:42.560]  Нет, смотрите, просто
[01:20:42.560 --> 01:20:44.560]  идея такая. Давайте предположим, что у нас тут был диезик.
[01:20:44.560 --> 01:20:46.560]  Чтоб поменялось.
[01:20:46.560 --> 01:20:48.560]  Ну, кроме того, что мы тут храним,
[01:20:48.560 --> 01:20:50.560]  должны хранить не 7, а 8.
[01:20:50.560 --> 01:20:52.560]  Вот.
[01:20:52.560 --> 01:20:54.560]  Так, вот тут... Ну, давайте
[01:20:54.560 --> 01:20:56.560]  я вот сейчас сразу дорисую. То есть,
[01:20:56.560 --> 01:20:58.560]  если мы добавляли
[01:20:58.560 --> 01:21:00.560]  все суффиксы
[01:21:00.560 --> 01:21:02.560]  датсабы включительно, да,
[01:21:02.560 --> 01:21:04.560]  то мы можем заметить, что получится
[01:21:04.560 --> 01:21:06.560]  что-то подобного рода, правда?
[01:21:06.560 --> 01:21:08.560]  Такой, только тут не восьмерчик, а конечно же
[01:21:08.560 --> 01:21:10.560]  единичка.
[01:21:10.560 --> 01:21:12.560]  Вот.
[01:21:12.560 --> 01:21:14.560]  Теперь мы хотим добавить...
[01:21:14.560 --> 01:21:16.560]  То есть, раньше мы говорили, что мы хотим
[01:21:16.560 --> 01:21:18.560]  добавить АБУ, но она уже есть, поэтому не
[01:21:18.560 --> 01:21:20.560]  заморачиваемся. Но теперь
[01:21:40.560 --> 01:21:42.560]  тут получается
[01:21:42.560 --> 01:21:44.560]  строка 3,8.
[01:21:44.560 --> 01:21:46.560]  А тут 7,8.
[01:21:46.560 --> 01:21:48.560]  Вот.
[01:21:48.560 --> 01:21:50.560]  Это мой АБА диезик.
[01:21:50.560 --> 01:21:52.560]  Так, значит, такой же
[01:21:52.560 --> 01:21:54.560]  сплит нас ждет, когда мы будем добавлять
[01:21:54.560 --> 01:21:56.560]  БА диезик.
[01:21:56.560 --> 01:21:58.560]  Вот. Тут тоже переход
[01:21:58.560 --> 01:22:00.560]  по диезику.
[01:22:00.560 --> 01:22:02.560]  Вот.
[01:22:02.560 --> 01:22:04.560]  Вот.
[01:22:04.560 --> 01:22:06.560]  Вот.
[01:22:06.560 --> 01:22:08.560]  Вот.
[01:22:08.560 --> 01:22:10.560]  Вот. Тут тоже переход по диезику.
[01:22:10.560 --> 01:22:12.560]  И 7,8.
[01:22:12.560 --> 01:22:14.560]  Значит, тут под строка
[01:22:14.560 --> 01:22:16.560]  тоже 3,8. Тут становится
[01:22:16.560 --> 01:22:18.560]  1,3. И тут переход по символу
[01:22:18.560 --> 01:22:20.560]  Ц, кстати, я тут забыл тоже написать.
[01:22:20.560 --> 01:22:22.560]  Вот.
[01:22:22.560 --> 01:22:24.560]  Ну и так, что мы еще делаем?
[01:22:24.560 --> 01:22:26.560]  А, ну конкретно здесь, кстати, нам повезло
[01:22:26.560 --> 01:22:28.560]  новой вершины мы и создадим, потому что здесь
[01:22:28.560 --> 01:22:30.560]  просто у этой вершины появилось третье ребро.
[01:22:30.560 --> 01:22:32.560]  Да, да, да.
[01:22:32.560 --> 01:22:34.560]  Да.
[01:22:34.560 --> 01:22:36.560]  Да.
[01:22:36.560 --> 01:22:38.560]  Да.
[01:22:38.560 --> 01:22:40.560]  Ну, ладно.
[01:22:40.560 --> 01:22:42.560]  Не могу с Лютой, если честно, гарантировать.
[01:22:42.560 --> 01:22:44.560]  Мне кажется, что нам...
[01:22:44.560 --> 01:22:46.560]  Хотя...
[01:22:46.560 --> 01:22:48.560]  В тот момент, когда мы дойдем до другого символа,
[01:22:48.560 --> 01:22:50.560]  отличного ТА, у нас просто из корня
[01:22:50.560 --> 01:22:52.560]  выведется еще одно ребро.
[01:22:52.560 --> 01:22:54.560]  Ну,
[01:22:54.560 --> 01:22:56.560]  здесь это тоже происходит.
[01:22:56.560 --> 01:22:58.560]  Ну, в плане, когда у нас вывелось одно ребро,
[01:22:58.560 --> 01:23:00.560]  у нас добавилась одна вершина Льви.
[01:23:00.560 --> 01:23:02.560]  Ну, это да.
[01:23:02.560 --> 01:23:04.560]  Ну, допустим. Хорошо.
[01:23:04.560 --> 01:23:06.560]  Ладно.
[01:23:06.560 --> 01:23:08.560]  Да, можно утверждать...
[01:23:08.560 --> 01:23:10.560]  Ну да. Хорошо, ладно, действительно.
[01:23:10.560 --> 01:23:12.560]  Да, как выяснилось, у нас тут
[01:23:12.560 --> 01:23:14.560]  два вершин, у нас будет только если строка
[01:23:14.560 --> 01:23:16.560]  состоит из одного и того же символа.
[01:23:16.560 --> 01:23:18.560]  Ну, плюс в конце другой.
[01:23:18.560 --> 01:23:20.560]  Так, ладно. Слушайте, а есть кто живой
[01:23:20.560 --> 01:23:22.560]  вообще?
[01:23:22.560 --> 01:23:24.560]  Нет, мы тут просто активно общаемся с Мишей,
[01:23:24.560 --> 01:23:26.560]  а все как-то мрачно сидят.
[01:23:26.560 --> 01:23:28.560]  Это называется... Мы обсуждаем вещи, которые
[01:23:28.560 --> 01:23:30.560]  там называют всем, кроме нас, Мишей
[01:23:30.560 --> 01:23:32.560]  очевидны. Вот, я не знаю.
[01:23:32.560 --> 01:23:34.560]  Или...
[01:23:34.560 --> 01:23:36.560]  Или на самом деле все выпали уже там на третьей минуте
[01:23:36.560 --> 01:23:38.560]  обсуждения.
[01:23:38.560 --> 01:23:40.560]  Нет, просто непонятно с какой целью.
[01:23:42.560 --> 01:23:44.560]  Нет, ну пока мы... Ну, цель
[01:23:44.560 --> 01:23:46.560]  очень проста. Может быть, пока
[01:23:46.560 --> 01:23:48.560]  чуть-чуть поиграться с деревом и понять, как оно
[01:23:48.560 --> 01:23:50.560]  устроено.
[01:23:52.560 --> 01:23:54.560]  Вот.
[01:23:54.560 --> 01:23:56.560]  То есть да, скорее не цель,
[01:23:56.560 --> 01:23:58.560]  скорее путь, да. То есть может быть даже
[01:23:58.560 --> 01:24:00.560]  скорее путь. То есть у нас нет какой-то цели доказать
[01:24:00.560 --> 01:24:02.560]  фактического утверждения.
[01:24:02.560 --> 01:24:04.560]  Но тут больше речь идет, да,
[01:24:04.560 --> 01:24:06.560]  скорее о пути.
[01:24:06.560 --> 01:24:08.560]  Это да.
[01:24:08.560 --> 01:24:10.560]  Вот.
[01:24:12.560 --> 01:24:14.560]  Так вот.
[01:24:14.560 --> 01:24:16.560]  Ну, значит, так мы объяли, что в принципе
[01:24:16.560 --> 01:24:18.560]  сжатый суффиксный борт вполне себе линейная структура данных
[01:24:18.560 --> 01:24:20.560]  и очень-очень-очень-очень
[01:24:20.560 --> 01:24:22.560]  бы хотелось научиться его
[01:24:22.560 --> 01:24:24.560]  строить за линейное время.
[01:24:24.560 --> 01:24:26.560]  И...
[01:24:28.560 --> 01:24:30.560]  Как это сделать?
[01:24:30.560 --> 01:24:32.560]  Да, любители халява скажут, ну что, давайте
[01:24:32.560 --> 01:24:34.560]  построим суффиксный автомат и по нему DFS запустим.
[01:24:40.560 --> 01:24:42.560]  Вот.
[01:24:44.560 --> 01:24:46.560]  Но это будет такой нот.
[01:24:46.560 --> 01:24:48.560]  Но будет одна маленькая проблема. У этого решения
[01:24:48.560 --> 01:24:50.560]  сразу скажу. Потому что в принципе
[01:24:50.560 --> 01:24:52.560]  такое решение может иметь место, более
[01:24:52.560 --> 01:24:54.560]  скажем так. По идее есть практически mia
[01:24:54.560 --> 01:24:56.560]  хорошие решения построить по
[01:24:56.560 --> 01:24:58.560]  суффиксному автомату суффиксное дерево.
[01:24:58.560 --> 01:25:00.560]  Есть тоже решения построить по суффиксному
[01:25:00.560 --> 01:25:02.560]  массиву и массиву LCC.
[01:25:02.560 --> 01:25:04.560]  Да.
[01:25:04.560 --> 01:25:06.560]  Оба chang guardiola раз.
[01:25:06.560 --> 01:25:08.560]  Но, эти решения будут для нас иметь один маленький
[01:25:08.560 --> 01:25:10.560]  недостаток.
[01:25:10.560 --> 01:25:12.560]  Недостаток будет называться...
[01:25:12.560 --> 01:25:14.560]  То есть для этого вам нужна дана фиксированная
[01:25:14.560 --> 01:25:16.560]  строка, вы построили фиксированный структуру данных,
[01:25:16.560 --> 01:25:18.560]  а потом по ней построили фиксированный
[01:25:18.560 --> 01:25:20.560]  суффиксное дерево.
[01:25:20.560 --> 01:25:39.560]  не онлайн. Да, вот не совсем онлайн. У нас у суффиксного автомата было, а до него и у дерева полиндромов, был такой прикол, что мы добавляли в строку s по одному символу и модифицировали текущую структуру данных, но в каждый момент времени по модулю каких-то допущений это была уже корректная структура данных, правда?
[01:25:39.560 --> 01:25:49.560]  Ну а по суфф автомату он не будет так устроен?
[01:26:09.560 --> 01:26:11.560]  Что с суффиксным автоматом?
[01:26:39.560 --> 01:26:51.560]  Так что сейчас мы просто придумаем достаточно простой алгоритм. Да, он простой, алгоритм Украина простой, считается.
[01:26:51.560 --> 01:27:05.560]  Знаете, на самом деле так, если знать все секреты, то фокус действительно не очень сложный. То есть код тоже действительно не самый страшный.
[01:27:05.560 --> 01:27:21.560]  То есть в него просто, может быть, один раз надо въехать, но там все нормально. Вот такая код. Нет, он просто считается, потому что на самом деле, честно скажем, что алгоритмов построения суффиксного дерева напрямую много, на самом деле, линейных.
[01:27:21.560 --> 01:27:35.560]  То есть алгоритм Украина, по-моему, алгоритм едва ли не 94-го года, далеко не самый первый. То есть до него там были алгоритм Вайнера, алгоритм МакРейта, может быть, какой-то из них в каких-нибудь ЛКШ вам даже рассказывали.
[01:27:35.560 --> 01:27:46.560]  Нет, он нам просто Капилевич пытался рассказывать когда-то там в далеком 2008-м, но у него не получилось. Ну, точнее так, у него там может и получилось, но этого никто не понял.
[01:27:46.560 --> 01:28:02.560]  Вот потом пришел Станкевич, рассказал Уконина и количество акцептов увеличилось на 10. Вот. А, ну я это уже рассказывал. Уконин считается в этом смысле одним из самых простых.
[01:28:02.560 --> 01:28:15.560]  То есть так, глобально он, конечно, да, может быть, будет немножко там каким-то взрывомозговым немножко алгоритмом, но тем не менее разобраться можно, потому что давайте внимательно будем смотреть.
[01:28:15.560 --> 01:28:18.560]  А суффик там отчитается с лёгкими алгоритмами?
[01:28:18.560 --> 01:28:24.560]  Да. Нет, он, конечно, существенно проще будет суффиксного дерева, хотя делать они будут очень похуже.
[01:28:24.560 --> 01:28:25.560]  Это без шансов.
[01:28:25.560 --> 01:28:31.560]  Ну, нет, как сказать, сам по себе алгоритм на уровне кода, в общем-то, простой.
[01:28:31.560 --> 01:28:36.560]  В плане, чтобы въехать в алгоритм в устроение суффик-томата нужно умереть?
[01:28:36.560 --> 01:28:45.560]  Нет. Нет. Ну, как сказать, если бы я поставил себе цель просто рассказать заклинание, которое там делается, то я бы его рассказал быстро, вы бы его поняли.
[01:28:46.560 --> 01:28:51.560]  Ну потому что там заклинание звучит так. Мы в каждой вершине храним лены, храним суффиксную ссылку.
[01:28:51.560 --> 01:28:54.560]  Даже я примерно могу описать, что оно значит.
[01:28:54.560 --> 01:28:59.560]  А дальше так, скачем по суффиксной ссылке, дорисовываем ребра, которые ребро нашли, говорим PQ.
[01:28:59.560 --> 01:29:04.560]  Если тут лен от P плюс 1 равно лен от Q, то значит просто замыкаем суффиксную ссылку и не паримся.
[01:29:04.560 --> 01:29:08.560]  В противном случае делаем клона и там перевешиваем суффиксные ссылки.
[01:29:08.560 --> 01:29:14.560]  Там всё. То есть более того, для этого заклинания даже легко доказать, что оно работает за линию.
[01:29:14.560 --> 01:29:18.560]  Но сильно более нелегко доказать, что это вообще работает.
[01:29:18.560 --> 01:29:25.560]  То есть в суффиксном автомате будет гораздо сложнее понять доказательства алгоритма.
[01:29:25.560 --> 01:29:28.560]  Здесь доказательство будет сильно проще.
[01:29:28.560 --> 01:29:31.560]  А тут магии на самом деле не будет.
[01:29:31.560 --> 01:29:35.560]  То есть там такой может быть сложный по написанию алгоритм, но выжить можно.
[01:29:35.560 --> 01:29:38.560]  Ну если бы геома, то любая геома.
[01:29:38.560 --> 01:29:41.560]  Нууууу, по-разному, да.
[01:29:41.560 --> 01:29:43.560]  Ну там разные геомы случаются, конечно.
[01:29:43.560 --> 01:29:45.560]  Вот, ну ладно, смотрите.
[01:29:45.560 --> 01:29:47.560]  А то доживём мы с вами такой диаграммы Воронова.
[01:29:47.560 --> 01:29:49.560]  Ну посмотрим, что там будет, да.
[01:29:49.560 --> 01:29:51.560]  Вот, значит, смотрите.
[01:29:51.560 --> 01:29:53.560]  Внимание.
[01:29:53.560 --> 01:29:56.560]  Значит, смотрите, так, как я уже сказал.
[01:29:56.560 --> 01:30:00.560]  Так, кстати, не пришло ли нам время перерыва-то вообще?
[01:30:00.560 --> 01:30:02.560]  Ой, а Миша, почему пришло?
[01:30:02.560 --> 01:30:04.560]  Смотрите, значит, как мы хотим строить суффиксное дерево.
[01:30:04.560 --> 01:30:06.560]  Как я уже сказал.
[01:30:06.560 --> 01:30:11.560]  Мы хотим хранить строчку и в некотором смысле хранить нот.
[01:30:11.560 --> 01:30:13.560]  И суффиксное дерево.
[01:30:13.560 --> 01:30:15.560]  В каком-то виде.
[01:30:17.560 --> 01:30:20.560]  Ой, ребят, лучше вылезайте с телефончиков.
[01:30:20.560 --> 01:30:24.560]  Тут сублимация суперега начнёт, чтобы было достаточно быстро.
[01:30:28.560 --> 01:30:30.560]  О господи.
[01:30:30.560 --> 01:30:32.560]  Не надо ругаться такими словами.
[01:30:32.560 --> 01:30:34.560]  Короче, у нас свои есть.
[01:30:34.560 --> 01:30:36.560]  Вот, значит, смотрите.
[01:30:36.560 --> 01:30:40.560]  Итак, мы хотим брать строчку и приписывать к ней по одному символу.
[01:30:40.560 --> 01:30:42.560]  Да?
[01:30:42.560 --> 01:30:45.560]  То есть мы хотим приписывать по одному символу.
[01:30:45.560 --> 01:30:49.560]  Вот, допустим, будет у меня там какая-нибудь строка обаца-баба.
[01:30:51.560 --> 01:30:56.560]  Вот, я хочу приписывать по одному символу и смотреть, как меняется суффиксное дерево.
[01:30:56.560 --> 01:31:03.560]  Потому что алгоритм у меня в перспективе будет, что для каждой строки я храню суффиксную ссылку по модулю некоторых допущений.
[01:31:05.560 --> 01:31:08.560]  Но давайте сейчас я буду делать это в тупую.
[01:31:08.560 --> 01:31:10.560]  Вот, мечта строка такая.
[01:31:10.560 --> 01:31:12.560]  Пока строка пустая.
[01:31:12.560 --> 01:31:14.560]  Как она будет выглядеть?
[01:31:15.560 --> 01:31:17.560]  Да, тупо, вершина.
[01:31:17.560 --> 01:31:19.560]  И ещё я буду для удобства...
[01:31:19.560 --> 01:31:22.560]  Так, а есть ли у меня тут красный маркер?
[01:31:22.560 --> 01:31:24.560]  О, у меня есть красный маркер.
[01:31:24.560 --> 01:31:26.560]  Во, ура, у меня есть красный маркер.
[01:31:26.560 --> 01:31:28.560]  Ура.
[01:31:28.560 --> 01:31:30.560]  А, стоп, погодите.
[01:31:34.560 --> 01:31:36.560]  Так, у меня же...
[01:31:36.560 --> 01:31:38.560]  Погодите, я же...
[01:31:48.560 --> 01:31:50.560]  У меня же есть рыжий маркер.
[01:31:50.560 --> 01:31:52.560]  Вот.
[01:31:54.560 --> 01:31:56.560]  Ну, посмотрим, поможет ли он нам.
[01:31:56.560 --> 01:31:59.560]  Но я просто люблю эту штуку рыжим маркером рисовать, как-то привычнее.
[01:31:59.560 --> 01:32:01.560]  Значит, смотрите.
[01:32:01.560 --> 01:32:03.560]  Я буду сюда вот...
[01:32:03.560 --> 01:32:05.560]  Пишем вот рыжий маркер,
[01:32:05.560 --> 01:32:08.560]  который говорит нам в том, что суффикс номер ноль заканчивается здесь.
[01:32:08.560 --> 01:32:10.560]  Это нам в некотором смысле будет удобно хранить.
[01:32:12.560 --> 01:32:14.560]  Ну, как бы понятно, суффикс номер ноль,
[01:32:14.560 --> 01:32:17.560]  это как бы суффикс, который начинается символу номер ноль.
[01:32:17.560 --> 01:32:19.560]  Напоминаю в нашей терминологии.
[01:32:19.560 --> 01:32:21.560]  Вот, такая договорённость у нас поет.
[01:32:21.560 --> 01:32:23.560]  Итак.
[01:32:23.560 --> 01:32:25.560]  Приписываем символ А.
[01:32:27.560 --> 01:32:31.560]  По идее, что должно произойти в обычном суффиксном боре?
[01:32:31.560 --> 01:32:33.560]  Вот, не вжатом.
[01:32:33.560 --> 01:32:35.560]  Я, по идее, из каждого суффикса
[01:32:35.560 --> 01:32:37.560]  должен добавить переход по букве А, правда?
[01:32:37.560 --> 01:32:39.560]  Или пройти по нему, если он есть?
[01:32:39.560 --> 01:32:41.560]  В нашем случае получится следующее.
[01:32:43.560 --> 01:32:45.560]  То есть я добавлю переход по букве А,
[01:32:45.560 --> 01:32:47.560]  скажу, что здесь вон
[01:32:47.560 --> 01:32:49.560]  ребрышка по 0,1
[01:32:49.560 --> 01:32:51.560]  и тут у меня будет возникать
[01:32:51.560 --> 01:32:53.560]  такая буква А.
[01:32:53.560 --> 01:32:55.560]  Вот.
[01:32:55.560 --> 01:32:57.560]  И теперь я скажу.
[01:32:57.560 --> 01:32:59.560]  Давайте возьмём тряпочку.
[01:32:59.560 --> 01:33:01.560]  О, Сева пришёл.
[01:33:01.560 --> 01:33:03.560]  Вот.
[01:33:03.560 --> 01:33:05.560]  Сева саму коня? Да ладно.
[01:33:05.560 --> 01:33:07.560]  Ой.
[01:33:07.560 --> 01:33:09.560]  Ну да, да, да.
[01:33:09.560 --> 01:33:11.560]  Как говорится, других сокоманников
[01:33:11.560 --> 01:33:13.560]  звали, видимо, Фурье и Тарьян.
[01:33:13.560 --> 01:33:15.560]  Да, да, да.
[01:33:15.560 --> 01:33:17.560]  Интересно, да.
[01:33:17.560 --> 01:33:19.560]  Собрались как-то
[01:33:19.560 --> 01:33:21.560]  Фурье, Уканин
[01:33:21.560 --> 01:33:23.560]  и Тарьян и образовали команду
[01:33:23.560 --> 01:33:25.560]  СПС. Интересно, да. Какое они место будут
[01:33:25.560 --> 01:33:27.560]  в опенкапах занимать?
[01:33:27.560 --> 01:33:29.560]  А, ну ладно, потом выяснилось, что Фурье
[01:33:29.560 --> 01:33:31.560]  умер, поэтому они...
[01:33:31.560 --> 01:33:33.560]  Поэтому
[01:33:33.560 --> 01:33:35.560]  Тарьян позвал
[01:33:35.560 --> 01:33:37.560]  своего старого друга. Нет.
[01:33:37.560 --> 01:33:39.560]  Называется Дэнила Слейтера.
[01:33:39.560 --> 01:33:41.560]  Но они с ним хорошо структуры данных
[01:33:41.560 --> 01:33:43.560]  обсуждают.
[01:33:43.560 --> 01:33:45.560]  Прикольно.
[01:33:45.560 --> 01:33:47.560]  Ну да, да, да.
[01:33:47.560 --> 01:33:49.560]  Против них вышли четыре русских, да.
[01:33:49.560 --> 01:33:51.560]  Да, они заявили,
[01:33:51.560 --> 01:33:53.560]  что, знаете, в старом СПС в команде было
[01:33:53.560 --> 01:33:55.560]  четыре человека, так что идите лесом, да.
[01:33:55.560 --> 01:33:57.560]  А у китайцев недобор?
[01:33:57.560 --> 01:33:59.560]  У китайцев? Ну почему? Пришли ли
[01:33:59.560 --> 01:34:01.560]  Чао там со своими структурами?
[01:34:01.560 --> 01:34:03.560]  А, это Гомориху ещё пришли
[01:34:03.560 --> 01:34:05.560]  там эти все. То есть там, ой, там такой
[01:34:05.560 --> 01:34:07.560]  чемпионат начнётся.
[01:34:07.560 --> 01:34:09.560]  Два.
[01:34:09.560 --> 01:34:11.560]  Гомори и... Ну вы поняли.
[01:34:11.560 --> 01:34:13.560]  Вот.
[01:34:13.560 --> 01:34:15.560]  Ладно, так вот.
[01:34:15.560 --> 01:34:17.560]  Дописываем букву Б.
[01:34:17.560 --> 01:34:19.560]  Дописываем букву Б.
[01:34:19.560 --> 01:34:21.560]  Тогда, значит,
[01:34:21.560 --> 01:34:23.560]  вот отсюда мы должны перейти по букве
[01:34:23.560 --> 01:34:25.560]  Б. Но как мы это сделаем? Так как мы находимся
[01:34:25.560 --> 01:34:27.560]  в листе, то самое тупое,
[01:34:27.560 --> 01:34:29.560]  что мы можем сделать,
[01:34:29.560 --> 01:34:31.560]  это вместо вот этой единички написать
[01:34:31.560 --> 01:34:33.560]  двоечку. И мысленно,
[01:34:33.560 --> 01:34:35.560]  уже на этот раз мысленно
[01:34:35.560 --> 01:34:37.560]  написать здесь символ Б.
[01:34:37.560 --> 01:34:39.560]  Так, ну
[01:34:39.560 --> 01:34:41.560]  ещё, конечно же, нам надо отсюда
[01:34:41.560 --> 01:34:43.560]  вход по букве Б забабахать. Давайте его забабахаем.
[01:34:43.560 --> 01:34:45.560]  Будет буква...
[01:34:45.560 --> 01:34:47.560]  Чего? Почему ё-моё? Пока
[01:34:47.560 --> 01:34:49.560]  вроде всё адекватненько.
[01:34:49.560 --> 01:34:51.560]  Вот.
[01:34:51.560 --> 01:34:53.560]  То есть как бы мы делаем
[01:34:53.560 --> 01:34:55.560]  много технических действий, но
[01:34:55.560 --> 01:34:57.560]  сами по себе они не страшны.
[01:34:57.560 --> 01:34:59.560]  То есть вот.
[01:35:03.560 --> 01:35:05.560]  Чего?
[01:35:07.560 --> 01:35:09.560]  Вот. А пока... А мы не будем общать,
[01:35:09.560 --> 01:35:11.560]  мы будем оптимизировать вот это.
[01:35:13.560 --> 01:35:15.560]  То есть видите, я пока храню, так делаю
[01:35:15.560 --> 01:35:17.560]  очень тупой алгоритм.
[01:35:17.560 --> 01:35:19.560]  То есть я просто храню текущие суффиксные
[01:35:19.560 --> 01:35:21.560]  дерева прям в том виде, в котором оно должно быть.
[01:35:21.560 --> 01:35:23.560]  Ну единственное, только я там
[01:35:23.560 --> 01:35:25.560]  лишних вот этих вот терминальных
[01:35:25.560 --> 01:35:27.560]  вершин не храню. Ну понятно, что
[01:35:27.560 --> 01:35:29.560]  если мне придёт приказ, что строка закончится,
[01:35:29.560 --> 01:35:31.560]  я вот в тех местах, куда эти стрелочки
[01:35:31.560 --> 01:35:33.560]  указывают, я поставлю вершинки.
[01:35:33.560 --> 01:35:35.560]  Кстати, вот о чём я говорю,
[01:35:35.560 --> 01:35:37.560]  сейчас мы увидим на примере буквы А.
[01:35:37.560 --> 01:35:39.560]  Так, ну начнём с того, что, смотрите,
[01:35:39.560 --> 01:35:41.560]  если у вас вот стрелочка показывает
[01:35:41.560 --> 01:35:43.560]  в лист, то заметим, что она всегда будет
[01:35:43.560 --> 01:35:45.560]  теперь указывать в этот лист, правда?
[01:35:45.560 --> 01:35:47.560]  То есть может быть вот это ребро будет подпиливаться,
[01:35:47.560 --> 01:35:49.560]  конечно, но по большому счёту, чтобы
[01:35:49.560 --> 01:35:51.560]  там добавить эту букву, нам просто тут
[01:35:51.560 --> 01:35:53.560]  вместо двоечки
[01:35:53.560 --> 01:35:55.560]  на указывающем ребре,
[01:35:55.560 --> 01:35:57.560]  сюда придётся написать троечку.
[01:35:57.560 --> 01:35:59.560]  Я буду это делать.
[01:36:01.560 --> 01:36:03.560]  Вот.
[01:36:03.560 --> 01:36:05.560]  Вот, значит тут я пишу А,
[01:36:05.560 --> 01:36:07.560]  тут я пишу А. А вот с двоечкой
[01:36:07.560 --> 01:36:09.560]  интереснее, потому что на этот раз переход
[01:36:09.560 --> 01:36:11.560]  по символу А уже есть.
[01:36:11.560 --> 01:36:13.560]  И смотрите, как мы это будем делать.
[01:36:13.560 --> 01:36:15.560]  То есть смотрите, мы будем подразумевать,
[01:36:15.560 --> 01:36:17.560]  что, по идее, суффикс может заканчиваться
[01:36:17.560 --> 01:36:19.560]  даже не просто не в листе, но и не в вершине.
[01:36:19.560 --> 01:36:21.560]  Вот. То есть видите,
[01:36:21.560 --> 01:36:23.560]  я пока здесь ничего не создаю.
[01:36:23.560 --> 01:36:25.560]  То есть, боже упаси.
[01:36:25.560 --> 01:36:27.560]  То есть просто двое нот.
[01:36:27.560 --> 01:36:29.560]  То есть у меня будет такое понятие, забирая
[01:36:29.560 --> 01:36:31.560]  вперёд ноты, что у нас всё будет реализоваться.
[01:36:31.560 --> 01:36:33.560]  Тетчет хет.
[01:36:33.560 --> 01:36:35.560]  Чао?
[01:36:35.560 --> 01:36:37.560]  Вас издас.
[01:36:37.560 --> 01:36:39.560]  Ну типа, у детей, если там
[01:36:39.560 --> 01:36:41.560]  конит не в конец
[01:36:41.560 --> 01:36:43.560]  поставить, а просто
[01:36:43.560 --> 01:36:45.560]  в смысле хет поставить на рандомный
[01:36:45.560 --> 01:36:47.560]  комит, то
[01:36:47.560 --> 01:36:49.560]  не набраешь.
[01:36:49.560 --> 01:36:51.560]  Нет, ну пойх... Ой, ну
[01:36:51.560 --> 01:36:53.560]  это сложно для меня.
[01:36:53.560 --> 01:36:55.560]  Нет, я понимаю,
[01:36:55.560 --> 01:36:57.560]  у вас да, но у нас, знаете, я учился в далёком
[01:36:57.560 --> 01:36:59.560]  2009, у нас даже у КТЧ не было.
[01:36:59.560 --> 01:37:01.560]  Так что, как бы, поедете.
[01:37:01.560 --> 01:37:03.560]  Так что, как бы, мои знания по сравнению с вашими,
[01:37:03.560 --> 01:37:05.560]  как бы, знаете, там вот,
[01:37:05.560 --> 01:37:07.560]  слушайте, знаете, вот у Вазика
[01:37:07.560 --> 01:37:09.560]  Азимова вот рассказ такой есть, знаете.
[01:37:09.560 --> 01:37:11.560]  Когда-то, то есть
[01:37:11.560 --> 01:37:13.560]  то есть утверждаете, что когда-то в будущем
[01:37:13.560 --> 01:37:15.560]  возможно люди перестанут ходить в школы.
[01:37:15.560 --> 01:37:17.560]  Потому что когда им просто исполнится
[01:37:17.560 --> 01:37:19.560]  восемнадцать, они просто соответственно
[01:37:19.560 --> 01:37:21.560]  будут приходить, им просто будут
[01:37:21.560 --> 01:37:23.560]  там автомат, там какой-то компьютер будет
[01:37:23.560 --> 01:37:25.560]  просто определять их лучшие способности
[01:37:25.560 --> 01:37:27.560]  и просто вкладывать им в голову лучше
[01:37:27.560 --> 01:37:29.560]  знания.
[01:37:29.560 --> 01:37:31.560]  Не помню, как называется, но вот
[01:37:31.560 --> 01:37:33.560]  не сталкивались с таким рассказом?
[01:37:33.560 --> 01:37:35.560]  Нет. А вот есть там шикарный
[01:37:35.560 --> 01:37:37.560]  рассказ. А что они будут делать до восемнадцати?
[01:37:37.560 --> 01:37:39.560]  Нет, ну не помню,
[01:37:39.560 --> 01:37:41.560]  ну там что-то будут
[01:37:41.560 --> 01:37:43.560]  делать. Можешь какие-то моральные вещи
[01:37:43.560 --> 01:37:45.560]  обсуждать или что-то ещё.
[01:37:45.560 --> 01:37:47.560]  Ну вот, а профессию, нет, а профессию
[01:37:47.560 --> 01:37:49.560]  прям вот... Ну вот.
[01:37:49.560 --> 01:37:51.560]  Нет, профессии, да.
[01:37:51.560 --> 01:37:53.560]  Нет, ну там, правда, там такое, там
[01:37:53.560 --> 01:37:55.560]  там прикол в том, что профессию
[01:37:55.560 --> 01:37:57.560]  вам сразу дадут, все они мечтают.
[01:37:57.560 --> 01:37:59.560]  Правда, потом выяснили, что
[01:37:59.560 --> 01:38:01.560]  следующему поколению профессию дадут
[01:38:01.560 --> 01:38:03.560]  лучше, потому что профессия
[01:38:03.560 --> 01:38:05.560]  всё-таки развивается. Но там, собственно, история
[01:38:05.560 --> 01:38:07.560]  парня, которого вместо того, чтобы дать ему
[01:38:07.560 --> 01:38:09.560]  крутую профессию, отправили в какой-то
[01:38:09.560 --> 01:38:11.560]  специнтернат.
[01:38:13.560 --> 01:38:15.560]  Нет, ну там, я не помню, как конкретно,
[01:38:15.560 --> 01:38:17.560]  он там что-то,
[01:38:17.560 --> 01:38:19.560]  он сбунтовался против системы,
[01:38:19.560 --> 01:38:21.560]  он куда-то там сбежал, потом
[01:38:21.560 --> 01:38:23.560]  его поймали, сказали, ой, молодец, ты прошёл
[01:38:23.560 --> 01:38:25.560]  испытание. А в чём прикол?
[01:38:25.560 --> 01:38:27.560]  А прикол в следующем, понимаешь, мы, конечно, можем вложить знания,
[01:38:27.560 --> 01:38:29.560]  но кто-то их должен продвигать.
[01:38:29.560 --> 01:38:31.560]  Так вот, на самом деле, там только где-то максимум
[01:38:31.560 --> 01:38:33.560]  1% вообще населения Земли может
[01:38:33.560 --> 01:38:35.560]  реально что-то придумывать новое.
[01:38:35.560 --> 01:38:37.560]  Так вот, поздравляю, ты один из этих процентов.
[01:38:37.560 --> 01:38:39.560]  Но маленькая проблема, что вот тебе
[01:38:39.560 --> 01:38:41.560]  придётся учиться по старинке.
[01:38:43.560 --> 01:38:45.560]  Нет, нет,
[01:38:45.560 --> 01:38:47.560]  нет, на этом рассказ уже заканчивается.
[01:38:47.560 --> 01:38:49.560]  Нет, есть книга про рог
[01:38:49.560 --> 01:38:51.560]  из Жвалиевского по странах.
[01:38:53.560 --> 01:38:55.560]  Там очень прикольный концепция,
[01:38:55.560 --> 01:38:57.560]  но там есть часть того,
[01:38:57.560 --> 01:38:59.560]  что ты делаешь.
[01:38:59.560 --> 01:39:01.560]  Вот, так что там,
[01:39:01.560 --> 01:39:03.560]  вот, так вот, значит,
[01:39:03.560 --> 01:39:05.560]  тут у нас пока хреним, так?
[01:39:05.560 --> 01:39:07.560]  А теперь буква С.
[01:39:09.560 --> 01:39:11.560]  Да, ну да, да, да.
[01:39:11.560 --> 01:39:13.560]  Значит, что мы делаем с буквой С?
[01:39:13.560 --> 01:39:15.560]  Ой, хотя это страшно, да.
[01:39:15.560 --> 01:39:17.560]  Как это говорят, обратно, да, как-то
[01:39:17.560 --> 01:39:19.560]  тёмная сторона, поле чудес обратное, да.
[01:39:19.560 --> 01:39:21.560]  Где-то в подвале, значит,
[01:39:21.560 --> 01:39:23.560]  как говорится, там
[01:39:23.560 --> 01:39:25.560]  два телохрани, там два телохрани,
[01:39:25.560 --> 01:39:27.560]  то есть два бандита там привязали
[01:39:27.560 --> 01:39:29.560]  какого-то там игрока.
[01:39:29.560 --> 01:39:31.560]  Ну, а там приходит такой Якубович,
[01:39:31.560 --> 01:39:33.560]  значит, и так начинает ему бить руками
[01:39:33.560 --> 01:39:35.560]  просто огурцом, крича
[01:39:35.560 --> 01:39:37.560]  «Кто тебе подсказал
[01:39:37.560 --> 01:39:39.560]  букву С!»
[01:39:39.560 --> 01:39:41.560]  Очень страшно
[01:39:41.560 --> 01:39:43.560]  выглядело.
[01:39:43.560 --> 01:39:45.560]  Там никто не подсказывал, я сам догадался,
[01:39:45.560 --> 01:39:47.560]  кто тебе подсказал.
[01:39:47.560 --> 01:39:49.560]  Вот так.
[01:39:49.560 --> 01:39:51.560]  Вот, значит, так.
[01:39:51.560 --> 01:39:53.560]  Теперь, смотрите, пришло время
[01:39:53.560 --> 01:39:55.560]  прийти по букве С,
[01:39:55.560 --> 01:39:57.560]  здесь нельзя.
[01:39:57.560 --> 01:39:59.560]  Вот, поэтому мы тут создаём
[01:39:59.560 --> 01:40:01.560]  новое ребро, вот на этот раз
[01:40:01.560 --> 01:40:03.560]  пилим вершину,
[01:40:03.560 --> 01:40:05.560]  то есть пилим мы ребро,
[01:40:05.560 --> 01:40:07.560]  вершину-то мы не пилим.
[01:40:07.560 --> 01:40:09.560]  Вот, значит, тут мы
[01:40:09.560 --> 01:40:11.560]  пишем, что тут переход по букве Б,
[01:40:11.560 --> 01:40:13.560]  тут переход по букве С,
[01:40:13.560 --> 01:40:15.560]  тут буква С,
[01:40:15.560 --> 01:40:17.560]  тут, соответственно, сами понимаете,
[01:40:17.560 --> 01:40:19.560]  что?
[01:40:19.560 --> 01:40:21.560]  Там три-четыре получается,
[01:40:21.560 --> 01:40:23.560]  вот, и двоечка
[01:40:23.560 --> 01:40:25.560]  так жественно отправляется
[01:40:25.560 --> 01:40:27.560]  в лист.
[01:40:31.560 --> 01:40:33.560]  Нет, вот, смотри, ну вот.
[01:40:33.560 --> 01:40:35.560]  Так, теперь троечка.
[01:40:35.560 --> 01:40:37.560]  Ну, троечка,
[01:40:37.560 --> 01:40:39.560]  для троечки мы тут создаём новое ребро,
[01:40:39.560 --> 01:40:41.560]  три-четыре,
[01:40:41.560 --> 01:40:43.560]  вот, и троечка тоже отправляется
[01:40:43.560 --> 01:40:45.560]  вот сюда.
[01:40:45.560 --> 01:40:47.560]  Ну, вот, ну, а здесь
[01:40:47.560 --> 01:40:49.560]  образуется новое четвертик.
[01:40:51.560 --> 01:40:53.560]  Вот.
[01:40:53.560 --> 01:40:55.560]  Так,
[01:40:55.560 --> 01:40:57.560]  тут что? То есть, видите, смотрите,
[01:40:57.560 --> 01:40:59.560]  что мы на каждом шаге делаем?
[01:40:59.560 --> 01:41:01.560]  Мы делаем следующее, что,
[01:41:01.560 --> 01:41:03.560]  то есть, видите, мы, получается, у нас есть несколько
[01:41:03.560 --> 01:41:05.560]  рыжих указателей,
[01:41:05.560 --> 01:41:07.560]  и мы эти рыжие указатели куда-то
[01:41:07.560 --> 01:41:09.560]  продвигаем по очередному символу,
[01:41:09.560 --> 01:41:11.560]  или если они находятся в листе,
[01:41:11.560 --> 01:41:13.560]  то просто дописываем,
[01:41:13.560 --> 01:41:15.560]  то есть, увеличиваем на единичку,
[01:41:15.560 --> 01:41:17.560]  под строку соответствующего концу ребра.
[01:41:17.560 --> 01:41:19.560]  Видите, да?
[01:41:19.560 --> 01:41:21.560]  Видно, да?
[01:41:21.560 --> 01:41:23.560]  Так вот, давайте объявляю первую оптимизацию,
[01:41:23.560 --> 01:41:25.560]  которая может пока показаться
[01:41:25.560 --> 01:41:27.560]  неосимпатической, но в будущем она сырает.
[01:41:31.560 --> 01:41:33.560]  Ну, пока всё делаем так.
[01:41:35.560 --> 01:41:37.560]  Да.
[01:41:37.560 --> 01:41:39.560]  Ну, теперь, смотрите, давайте первую оптимизацию, которую мы сделаем,
[01:41:39.560 --> 01:41:41.560]  просто вот, пока неосимпатическая.
[01:41:41.560 --> 01:41:43.560]  А давайте вот эту вот чиселку,
[01:41:43.560 --> 01:41:45.560]  вот эту вот четверку,
[01:41:45.560 --> 01:41:47.560]  переписывать никогда не будем.
[01:41:47.560 --> 01:41:49.560]  Значит, первая оптимизация говорит,
[01:41:49.560 --> 01:41:51.560]  кстати,
[01:41:51.560 --> 01:41:53.560]  да, кстати, на тему скорости обсуждения.
[01:41:53.560 --> 01:41:55.560]  А кто вообще когда-нибудь писал Уканина вообще?
[01:41:57.560 --> 01:41:59.560]  Да ладно.
[01:41:59.560 --> 01:42:01.560]  А нафиг он нужен?
[01:42:01.560 --> 01:42:03.560]  Ну, мало ли.
[01:42:03.560 --> 01:42:05.560]  Ну, как-то, знаете,
[01:42:05.560 --> 01:42:07.560]  такие продвинутые люди, как вы, как-то обычно
[01:42:07.560 --> 01:42:09.560]  где-нибудь Уканина дописали когда-нибудь.
[01:42:11.560 --> 01:42:13.560]  Ну, мне вот
[01:42:13.560 --> 01:42:15.560]  после сессии в первом
[01:42:15.560 --> 01:42:17.560]  смеси стало скучно, и я начал писать
[01:42:17.560 --> 01:42:19.560]  Белонет. Ну, точнее Бронова.
[01:42:19.560 --> 01:42:21.560]  Короче, алгоритм форчена.
[01:42:21.560 --> 01:42:23.560]  Вот.
[01:42:23.560 --> 01:42:25.560]  Так, ну вот, официальное
[01:42:25.560 --> 01:42:27.560]  объявление такое.
[01:42:27.560 --> 01:42:29.560]  Я знаю, что когда у меня ребро
[01:42:29.560 --> 01:42:31.560]  ведёт в лист, там по-любому будет в конце стоять число,
[01:42:31.560 --> 01:42:33.560]  равное длине строки.
[01:42:33.560 --> 01:42:35.560]  Так вот у меня сразу
[01:42:35.560 --> 01:42:37.560]  идея на будущее. Я буду обозначать
[01:42:37.560 --> 01:42:39.560]  это символом бесконечность.
[01:42:39.560 --> 01:42:41.560]  То есть обозначать, что в каждый момент времени это просто
[01:42:41.560 --> 01:42:43.560]  текущая длина строки С.
[01:42:45.560 --> 01:42:47.560]  Что это мне даёт?
[01:42:47.560 --> 01:42:49.560]  Это мне даёт возможность
[01:42:49.560 --> 01:42:51.560]  на самом деле лишние символы
[01:42:51.560 --> 01:42:53.560]  не перебирать.
[01:42:53.560 --> 01:42:55.560]  Видите, да?
[01:42:55.560 --> 01:42:57.560]  То есть на самом деле обратите внимание,
[01:42:57.560 --> 01:42:59.560]  потому что, как вы уже могли заметить,
[01:42:59.560 --> 01:43:01.560]  если у меня какой-то суффикс
[01:43:01.560 --> 01:43:03.560]  стал заканчиваться в листе,
[01:43:03.560 --> 01:43:05.560]  то он в этом листе будет заканчиваться
[01:43:05.560 --> 01:43:07.560]  теперь всегда.
[01:43:07.560 --> 01:43:09.560]  То есть, да, путь до него будет
[01:43:09.560 --> 01:43:11.560]  всё время удлиняться, да, тут будет куча
[01:43:11.560 --> 01:43:13.560]  ответвлений появляться со временем,
[01:43:13.560 --> 01:43:15.560]  но сама вершина не изменится.
[01:43:15.560 --> 01:43:17.560]  Вот.
[01:43:17.560 --> 01:43:19.560]  Но можно заметить
[01:43:19.560 --> 01:43:21.560]  ещё маленькое приятное
[01:43:21.560 --> 01:43:23.560]  свойство,
[01:43:23.560 --> 01:43:25.560]  которое в будущем тоже
[01:43:25.560 --> 01:43:27.560]  сыграет.
[01:43:27.560 --> 01:43:29.560]  Смотрите, вот случайно,
[01:43:29.560 --> 01:43:31.560]  вот у нас сейчас есть суффикс от 0 до 4.
[01:43:31.560 --> 01:43:33.560]  Смотрите, заканчиваются в листах
[01:43:33.560 --> 01:43:35.560]  0, 1, 2 и 3,
[01:43:35.560 --> 01:43:37.560]  а 4 не заканчивается.
[01:43:37.560 --> 01:43:39.560]  Да?
[01:43:39.560 --> 01:43:41.560]  Ну ладно, пока ещё не самое показательное свойство.
[01:43:41.560 --> 01:43:43.560]  Но давайте добавим
[01:43:43.560 --> 01:43:45.560]  ещё пару символов.
[01:43:45.560 --> 01:43:47.560]  Сейчас я добавлю букву А.
[01:43:47.560 --> 01:43:49.560]  Смотрите,
[01:43:49.560 --> 01:43:51.560]  то есть, заметим, что
[01:43:51.560 --> 01:43:53.560]  суффиксы с 0 по 3 я в принципе уже не трогаю.
[01:43:53.560 --> 01:43:55.560]  Всё, они мне не интересны, я уже начинаю
[01:43:55.560 --> 01:43:57.560]  перебор с 4.
[01:43:57.560 --> 01:43:59.560]  И 4
[01:43:59.560 --> 01:44:01.560]  действительно,
[01:44:01.560 --> 01:44:03.560]  то есть, 4 теперь просто отправляется сюда,
[01:44:03.560 --> 01:44:05.560]  а здесь у меня появляется 5.
[01:44:05.560 --> 01:44:07.560]  Но обратите внимание, ничего не поменялось.
[01:44:07.560 --> 01:44:09.560]  То есть, дерево само по себе
[01:44:09.560 --> 01:44:11.560]  не поменялось. Видите, да?
[01:44:13.560 --> 01:44:15.560]  Вот.
[01:44:15.560 --> 01:44:17.560]  Что дальше?
[01:44:17.560 --> 01:44:19.560]  B.
[01:44:19.560 --> 01:44:21.560]  Где у вас тут будет D?
[01:44:21.560 --> 01:44:23.560]  Буква B.
[01:44:25.560 --> 01:44:27.560]  Буква B говорит там, что у нас
[01:44:27.560 --> 01:44:29.560]  значит тут вот 4
[01:44:29.560 --> 01:44:31.560]  отправляется сюда,
[01:44:31.560 --> 01:44:33.560]  5 отправляется
[01:44:33.560 --> 01:44:35.560]  вот сюда,
[01:44:35.560 --> 01:44:37.560]  и 6
[01:44:37.560 --> 01:44:39.560]  появляется здесь.
[01:44:39.560 --> 01:44:41.560]  Дальше.
[01:44:41.560 --> 01:44:43.560]  Буква A.
[01:44:47.560 --> 01:44:49.560]  Вот. Ну и здесь
[01:44:49.560 --> 01:44:51.560]  4 я даже перерисовывать не буду,
[01:44:51.560 --> 01:44:53.560]  я по стрелочку вот сюда направлю.
[01:44:53.560 --> 01:44:55.560]  4 направляется сюда,
[01:44:55.560 --> 01:44:57.560]  здесь тоже всё просто,
[01:44:57.560 --> 01:44:59.560]  вот сюда, значит
[01:44:59.560 --> 01:45:01.560]  6 теперь отправляется вот сюда,
[01:45:01.560 --> 01:45:03.560]  и 7 вот здесь.
[01:45:09.560 --> 01:45:11.560]  Теперь буква
[01:45:11.560 --> 01:45:13.560]  B.
[01:45:13.560 --> 01:45:15.560]  Теперь.
[01:45:15.560 --> 01:45:17.560]  Так. Ура!
[01:45:17.560 --> 01:45:19.560]  Из 4 перехода по букве B нет,
[01:45:19.560 --> 01:45:21.560]  придётся делать сплит в этом месте.
[01:45:21.560 --> 01:45:23.560]  Сплит получается делим так.
[01:45:23.560 --> 01:45:25.560]  Отсплитчиваем тут 2 символа,
[01:45:25.560 --> 01:45:27.560]  поэтому тут получается 1, 3,
[01:45:27.560 --> 01:45:29.560]  тут 3 бесконечности.
[01:45:29.560 --> 01:45:31.560]  И сюда
[01:45:31.560 --> 01:45:33.560]  отправляется переход по букве B.
[01:45:33.560 --> 01:45:35.560]  То есть так пишем
[01:45:35.560 --> 01:45:37.560]  сразу от семёрки до бесконечности.
[01:45:37.560 --> 01:45:39.560]  И тут у нас буква
[01:45:39.560 --> 01:45:41.560]  B.
[01:45:43.560 --> 01:45:45.560]  Здесь она типа подразумевается.
[01:45:45.560 --> 01:45:47.560]  Ой, а я тут везде забыл писать,
[01:45:47.560 --> 01:45:49.560]  потому что тут-то везде уже давно
[01:45:49.560 --> 01:45:51.560]  подразумевается A, B, A, B.
[01:45:51.560 --> 01:45:53.560]  И тут
[01:45:53.560 --> 01:45:55.560]  A, B.
[01:45:55.560 --> 01:45:57.560]  И тут C, A, B, A, B.
[01:45:57.560 --> 01:45:59.560]  Вот.
[01:45:59.560 --> 01:46:01.560]  Да, на самом деле.
[01:46:01.560 --> 01:46:03.560]  То есть так чёрные, видите,
[01:46:03.560 --> 01:46:05.560]  чёрные это удлиняются, но синие
[01:46:05.560 --> 01:46:07.560]  от этого не трогаются.
[01:46:07.560 --> 01:46:09.560]  И куча рыжих тоже.
[01:46:09.560 --> 01:46:11.560]  Значит, 7 бесконечность,
[01:46:11.560 --> 01:46:13.560]  и 4 находят
[01:46:13.560 --> 01:46:15.560]  своё вечное пристанище.
[01:46:15.560 --> 01:46:17.560]  Такой
[01:46:17.560 --> 01:46:19.560]  свой вечный
[01:46:19.560 --> 01:46:21.560]  причал.
[01:46:23.560 --> 01:46:25.560]  Вот.
[01:46:25.560 --> 01:46:27.560]  Так, далее что у нас?
[01:46:27.560 --> 01:46:29.560]  Дальше у нас
[01:46:29.560 --> 01:46:31.560]  отправляемся
[01:46:31.560 --> 01:46:33.560]  в пятый суффикс.
[01:46:33.560 --> 01:46:35.560]  Видим, что тут тоже приходится
[01:46:35.560 --> 01:46:37.560]  чуть-чуть попилить.
[01:46:39.560 --> 01:46:41.560]  Тут буква B, тут буква C.
[01:46:41.560 --> 01:46:43.560]  Тут буква B, тут тоже буква C.
[01:46:43.560 --> 01:46:45.560]  Так, здесь у нас тоже
[01:46:45.560 --> 01:46:47.560]  7 плюс бесконечность.
[01:46:47.560 --> 01:46:49.560]  И, значит, соответственно,
[01:46:49.560 --> 01:46:51.560]  да, вот этого ребра.
[01:46:51.560 --> 01:46:53.560]  Значит, 1 бесконечность больше нет.
[01:46:53.560 --> 01:46:55.560]  Есть теперь 2 ребра. 1, 3.
[01:46:57.560 --> 01:46:59.560]  3 бесконечности. В общем, такая
[01:46:59.560 --> 01:47:01.560]  равность.
[01:47:03.560 --> 01:47:05.560]  И пятачок тоже
[01:47:05.560 --> 01:47:07.560]  отправляется в свой домик.
[01:47:07.560 --> 01:47:09.560]  Вот.
[01:47:09.560 --> 01:47:11.560]  А вот шестёрочка
[01:47:11.560 --> 01:47:13.560]  и отправляется, потому что тут переход
[01:47:13.560 --> 01:47:15.560]  по букве B внезапно есть.
[01:47:15.560 --> 01:47:17.560]  Вот.
[01:47:21.560 --> 01:47:23.560]  И семёрчика есть.
[01:47:25.560 --> 01:47:27.560]  Ну, и восьмёрчика.
[01:47:31.560 --> 01:47:33.560]  Ну, давайте уж,
[01:47:33.560 --> 01:47:35.560]  чтобы закончить работу, давайте
[01:47:35.560 --> 01:47:37.560]  по букве A сделаем, но тут по букве A
[01:47:37.560 --> 01:47:39.560]  ничего не поменяется, потому что
[01:47:39.560 --> 01:47:41.560]  отправляется в эту вершину.
[01:47:41.560 --> 01:47:43.560]  Там шестёрочка, кстати, тоже
[01:47:43.560 --> 01:47:45.560]  в вершину отправляется. Восьмёрчика
[01:47:45.560 --> 01:47:47.560]  отправляется в вершину.
[01:47:47.560 --> 01:47:49.560]  И девяточка.
[01:47:49.560 --> 01:47:51.560]  Но смотрите,
[01:47:51.560 --> 01:47:53.560]  как интересно получается.
[01:47:53.560 --> 01:47:55.560]  По мистическим причинам,
[01:47:55.560 --> 01:47:57.560]  смотрите, вот обнаруживается, что
[01:47:57.560 --> 01:47:59.560]  суффиксы с нуля, с нулевого
[01:47:59.560 --> 01:48:01.560]  по пятого заканчиваются в листах,
[01:48:01.560 --> 01:48:03.560]  а все остальные заканчиваются не в листах.
[01:48:03.560 --> 01:48:05.560]  И вообще
[01:48:05.560 --> 01:48:07.560]  всегда у нас так было, что если смотреть
[01:48:07.560 --> 01:48:09.560]  суффиксы с нулевого по n, то
[01:48:09.560 --> 01:48:11.560]  до какого-то момента они начинаются
[01:48:11.560 --> 01:48:13.560]  в листах, а потом находится первый
[01:48:13.560 --> 01:48:15.560]  суффикс, который начинается не в листе,
[01:48:15.560 --> 01:48:17.560]  и начиная с этого момента, все
[01:48:17.560 --> 01:48:19.560]  суффиксы почему-то заканчиваются
[01:48:19.560 --> 01:48:21.560]  не в листе.
[01:48:25.560 --> 01:48:27.560]  Внимание, вопрос. Это мы...
[01:48:27.560 --> 01:48:29.560]  Это я такую удачную строку взял?
[01:48:29.560 --> 01:48:31.560]  Да.
[01:48:31.560 --> 01:48:33.560]  Или так будет всегда?
[01:48:33.560 --> 01:48:35.560]  Еще раз как?
[01:48:35.560 --> 01:48:37.560]  Утвержение такое,
[01:48:37.560 --> 01:48:39.560]  я хочу понять,
[01:48:39.560 --> 01:48:41.560]  я вот задумываюсь,
[01:48:41.560 --> 01:48:43.560]  у меня есть набор суффиксов
[01:48:43.560 --> 01:48:45.560]  с нулевого до n,
[01:48:45.560 --> 01:48:47.560]  мне хочется брать, какие из них
[01:48:47.560 --> 01:48:49.560]  заканчиваются в листе, какие не в листе.
[01:48:49.560 --> 01:48:51.560]  Так вот, утверждение.
[01:48:51.560 --> 01:48:53.560]  Почему-то так всегда получается, что
[01:48:53.560 --> 01:48:55.560]  в этом списке сначала идут
[01:48:55.560 --> 01:48:57.560]  суффиксы, которые
[01:48:57.560 --> 01:48:59.560]  заканчиваются не в листе,
[01:48:59.560 --> 01:49:01.560]  вот в нашем случае до пятого,
[01:49:01.560 --> 01:49:02.560]  и там является вот шестой
[01:49:02.560 --> 01:49:03.560]  суффикс, который заканчивается не в листе,
[01:49:03.560 --> 01:49:05.560]  и все последующие, почему-то
[01:49:05.560 --> 01:49:07.560]  тоже заканчиваются не в листе.
[01:49:07.560 --> 01:49:09.560]  Э false??
[01:49:17.560 --> 01:49:19.560]  На самом деле, да.
[01:49:19.560 --> 01:49:21.560]  Во-первых, маленькое утверждение.
[01:49:21.560 --> 01:49:23.560]  Под строка в суффиксном дереве
[01:49:23.560 --> 01:49:25.560]  заканчиваются в листе,
[01:49:25.560 --> 01:49:27.560]  когда и только тогда, когда она
[01:49:27.560 --> 01:49:29.560]  а), является суффиксом
[01:49:29.560 --> 01:49:33.000]  В других вхождений, кроме суффикса, у нее нету.
[01:49:41.000 --> 01:49:46.760]  Вроде мысль логичная, да, мысль предельно логичная.
[01:49:48.920 --> 01:49:54.040]  Но тогда заметим следующее, что подстрока не заканчивается в листе тогда и только тогда,
[01:49:54.040 --> 01:49:57.800]  когда у нее есть вхождение в строку, которая не является суффиксом.
[01:49:59.960 --> 01:50:01.000]  Понятно, да?
[01:50:01.000 --> 01:50:02.600]  Ну, потому что мы можем дальше продлить.
[01:50:02.600 --> 01:50:03.560]  Ну, типа да.
[01:50:06.840 --> 01:50:09.000]  Так, вот это сейчас вот понятная идея или...
[01:50:10.120 --> 01:50:12.120]  Надо подумать, потому что это, в принципе, если вы сейчас этого не поняли,
[01:50:12.120 --> 01:50:15.080]  то как бы дальше будет там сублимация супер эго.
[01:50:17.800 --> 01:50:19.800]  Вот. Ну, вроде понятно.
[01:50:19.800 --> 01:50:24.360]  Ну, то есть, короче, как мы это доказываем, если она раньше входила,
[01:50:24.360 --> 01:50:29.000]  то мы продлим просто собиус, в котором она входила до конца
[01:50:29.080 --> 01:50:33.560]  и у нас это будет не лист, потому что из нас будет идти что-то еще.
[01:50:33.560 --> 01:50:34.200]  Ну, да.
[01:50:34.200 --> 01:50:41.080]  Вот. А если она раньше не входила, то очевидно это суффикс?
[01:50:41.080 --> 01:50:44.840]  Нет, ну тут даже не раньше больше, а просто пока вот тут усиление.
[01:50:44.840 --> 01:50:47.720]  Допустим, у нас в строке N есть подстрока P.
[01:50:47.720 --> 01:50:51.160]  Утверждается, она не заканчивается в листе тогда и только тогда,
[01:50:51.160 --> 01:50:54.600]  когда у нее есть вхождение, которое лежит не в конце строки S.
[01:50:55.800 --> 01:50:56.920]  Доказательства.
[01:50:57.000 --> 01:50:59.680]  Любая подстрока – это префикс суффикса.
[01:50:59.680 --> 01:51:00.760]  Да.
[01:51:00.760 --> 01:51:02.520]  Да, такое мистическое правило всегда есть, да?
[01:51:02.520 --> 01:51:03.720]  Префикс суффикса.
[01:51:03.800 --> 01:51:05.880]  Но тогда заметим, что...
[01:51:05.880 --> 01:51:10.040]  Ну, вот, то есть, если подстрока, что означает, что она имеет вхождение,
[01:51:10.040 --> 01:51:11.640]  которое не лежит в конце строки?
[01:51:11.640 --> 01:51:14.280]  Это означает, что она является префиксом какого-то суффикса,
[01:51:14.280 --> 01:51:15.960]  который по длине больше.
[01:51:15.960 --> 01:51:17.000]  Да.
[01:51:17.000 --> 01:51:19.480]  То есть, это означает, что если мы в суффиксном дереве идем по этому суффиксу,
[01:51:19.480 --> 01:51:26.280]  то тогда это означает, что мы должны начать с этой строки P,
[01:51:26.280 --> 01:51:27.880]  а потом еще куда-то дальше идти,
[01:51:27.880 --> 01:51:31.080]  но, следовательно, из самой строки P дальше есть куда пойти,
[01:51:31.080 --> 01:51:32.680]  следовательно, это не лист.
[01:51:32.680 --> 01:51:34.280]  Логично, да?
[01:51:34.280 --> 01:51:38.680]  Но и с другой стороны, в чем мы заметим, что этот суффикс,
[01:51:38.680 --> 01:51:41.480]  даже если он суффикс, он сам по себе тоже не обязан идти в лист,
[01:51:41.480 --> 01:51:46.080]  потому что может оказаться, что у этого суффикса есть еще другое вхождение,
[01:51:46.880 --> 01:51:49.680]  с более длинным суффиксом, и тогда оказывается, что это тоже не лист.
[01:51:49.680 --> 01:51:53.280]  Это, как в нашем случае, суффикс ABBA, который, видите,
[01:51:53.280 --> 01:51:57.680]  он сам по себе суффикс, но он заканчивается не в листе,
[01:51:57.680 --> 01:51:59.280]  потому что его есть куда продлить.
[01:51:59.280 --> 01:52:03.680]  Вот есть еще суффикс ABBA, например, или ABBA, ABBA, ABBA, ABBA.
[01:52:08.280 --> 01:52:11.280]  Но теперь маленькая фишечка.
[01:52:11.280 --> 01:52:15.080]  Если какой-то суффикс заканчивается не в листе,
[01:52:16.080 --> 01:52:18.880]  то суффикс можно продлить до большего суффикса,
[01:52:18.880 --> 01:52:22.920]  то все меньшие суффиксы тоже можно продлить до какого-то большего суффикса.
[01:52:30.920 --> 01:52:34.320]  Ну, если какой-то суффикс заканчивается не в листе,
[01:52:34.360 --> 01:52:36.920]  то есть его можно продлить до большего суффикс.
[01:52:36.920 --> 01:52:44.920]  То все меньше его суффиксы тоже можно продлить до больших суффикс.
[01:52:45.080 --> 01:52:55.160]  То есть как бы вот если АБАБА продляется до АБАБА, то и БА продляется как минимум до того же БАБА.
[01:52:55.160 --> 01:53:10.580]  Ну можно и картинку. Ну типа да. Ну просто вот. Ну то есть ситуация такая, давайте действительно
[01:53:10.580 --> 01:53:17.720]  нарисуем в общем случае. Жила была строка С. Допустим у нее был какой-то вот суффикс, у которого было
[01:53:17.720 --> 01:53:24.020]  вхождение где-то еще. То есть его можно было продлить на самом деле вот на вот этот суффикс.
[01:53:24.020 --> 01:53:29.300]  Но тогда рассмотрим, вот у этого суффикса рассмотрим суффикс на единичку меньше. Тогда
[01:53:29.300 --> 01:53:33.460]  заметим, что у него тоже есть как минимум вот это вхождение, которое можно продлить еще вот на это.
[01:53:33.460 --> 01:53:38.860]  То есть это означает, что после того как мы прошли по этому суффиксу, мы еще можем как минимум по этой
[01:53:38.860 --> 01:53:47.100]  строке вниз идти. А может там еще куда-то если повезет, может там еще развилки есть. Вот. То есть вот в
[01:53:47.100 --> 01:53:54.620]  чем идея. То есть отсюда означает, что действительно имеет место утверждение о том, что существует такое
[01:53:54.620 --> 01:54:12.620]  понятие как вот мы его будем называть First Not Leave. First Not Leave. То есть первый не лист.
[01:54:12.620 --> 01:54:21.900]  Это официальное название? Нет, это мое название. А какое официальное? Не знаю. Честно скажу, статью не читал.
[01:54:21.900 --> 01:54:36.140]  Вот. То есть First Not Leave это позиция. Напоминаю, у нас в этом дереве нет вершин. Есть позиции.
[01:54:36.140 --> 01:54:41.060]  Ну такие вершины тоже есть. Но вообще говоря, когда мы проходимся по строке, мы попадаем не в
[01:54:41.060 --> 01:54:46.860]  вершину. Мы попадаем в позицию. То есть мы знаем на каком ребре мы находимся и где конкретно.
[01:54:46.860 --> 01:54:53.420]  То есть если мы попали в вершину, то мы говорим, что мы находимся на ведущем в нею ребре,
[01:54:53.420 --> 01:55:00.900]  просто в самом конце. То есть помните, если вы пройдете сейчас по строке обоца,
[01:55:00.900 --> 01:55:12.140]  вы попадете куда-то вот сюда. Это позиция. Вот. Понятно? Вот. Значит это был First Not Leave. Ну как
[01:55:12.140 --> 01:55:19.940]  был? Он у нас был, есть и будет. Потому что First Not Leave сейчас будет играть у нас ключевую роль в этом вот.
[01:55:19.940 --> 01:55:30.500]  Все. Кстати, если понятно, что это такое, скажите, пожалуйста, к чему сейчас равен First Not Leave?
[01:55:30.500 --> 01:55:44.660]  Ну правильно. 6. Конкретно в данном случае он равен, конечно же, 6. Как мы доказали, что отрезок
[01:55:44.660 --> 01:55:55.300]  вот этих позиций в листах, а потом не в листах? Доказали мы так, что если какой-то суфик заканчивается
[01:55:55.300 --> 01:56:04.820]  не в листе, то и все меньше заканчиваются не в листе. Нет, мы именно так сказали. Что если кто-то
[01:56:04.820 --> 01:56:10.140]  заканчивается не в листе, то отпилив от него несколько символов, мы тоже получим суфикс,
[01:56:10.140 --> 01:56:17.380]  заканчивающийся не в листе. Но тогда и получается, что вообразим себе ситуацию. Ну там нулевой суфикс,
[01:56:17.380 --> 01:56:22.240]  видимо, всегда будет заканчиваться в листе, тут без вариантов. Вот. Идем, идем, идем, и вот
[01:56:22.240 --> 01:56:30.520]  натыкаемся на первый суфикс, который заканчивается не в листе. Чего? Может статьи, да. Вот, кстати,
[01:56:30.520 --> 01:56:38.680]  после строки аббатс, кстати, так и было. Вот. Но тогда, как мы только что доказали, все последующие
[01:56:38.680 --> 01:56:47.840]  тоже будут заканчиваться не в листе. Да. Потому что все последующие суфиксы являются суфиксами
[01:56:47.840 --> 01:56:53.360]  этого суфикса. Да. Все последующие суфиксы являются суфиксами этого суфикса. Ну да,
[01:56:53.360 --> 01:57:09.840]  на скороголовку не тянет, конечно. Вот. Вот. Итак. Так вот. Так вот, у нас только что был алгоритм,
[01:57:09.840 --> 01:57:16.160]  который работает за квадрат. Так вот, сейчас я предложу вам. Так вот, мы, во-первых, делаем
[01:57:16.160 --> 01:57:21.000]  бесконечности, а, во-вторых, сейчас на основе фестнот лифа я сделаю другой алгоритм, который
[01:57:21.000 --> 01:57:26.720]  тоже будет работать за квадрат. Нет, нет, это не тот алгоритм. Вот другой алгоритм. Сейчас. Чего? Ну,
[01:57:26.720 --> 01:57:32.560]  сейчас будет. Ладно, будет так. Так что теперь следующая версия, другую версию, которая будет
[01:57:32.560 --> 01:57:40.200]  приближаться. Теперь у меня следующая идея. Да, оптимизация с бесконечностями остается. Но теперь
[01:57:40.200 --> 01:57:46.840]  у меня идея, что я, ну, не хочу. Вот не хочу я хранить прям все вот эти штуки. Прям, если я буду
[01:57:46.840 --> 01:57:52.840]  хранить в явном виде все эти указатели, то будет больно. Более того, слёту даже кажется, что, если я
[01:57:52.840 --> 01:57:57.840]  даже скажу, что да, я теперь знаю, что я могу хранить фестнот лиф, который у меня только
[01:57:57.840 --> 01:58:04.000]  увеличивается, естественно, да. Ну вот. И могу перебирать только от него до, до n. Но это всё равно
[01:58:04.000 --> 01:58:14.640]  в перспективе квадратненько будет, правда? Поэтому я пойду другим путём. Значит, я, ну вот, то есть я
[01:58:14.640 --> 01:58:25.120]  пойду другим путём. Сейчас я попробую сделать абсолютно то же самое. То есть, ну, по крайней мере,
[01:58:25.120 --> 01:58:33.680]  дерево будет изменяться также, но рыжий указатель я буду хранить только один, на фестнот лиф. Вот.
[01:58:33.680 --> 01:58:39.080]  Сейчас вот всё на ваш, сейчас мы это всё, сейчас будет это чудо на ваших глазах.
[01:58:39.080 --> 01:58:52.520]  Ну да. Наверное. Хотя, как это приду вулуконен, я не знаю. Если честно. Так, это мало ли. Тем более
[01:58:52.520 --> 01:58:56.520]  я вот утверждал, что я буду рассказывать, как рассказывал мне ещё Гольштейн. Но, по-моему,
[01:58:56.520 --> 01:59:02.800]  Гольштейн рассказывал не так. Вот. Но я не помню, как конкретно. То есть, я помню, что он как-то так
[01:59:02.800 --> 01:59:08.400]  рассказал так, что я, по крайней мере, там после часовой лекции я там просто понял всё. То есть,
[01:59:08.400 --> 01:59:13.120]  после этого выяснилось, что я даже могу сесть и на джави это ещё и написать. Да, это неплохо,
[01:59:13.120 --> 01:59:16.800]  учитывая, что я, по-моему, это, по-моему, единственный хоть насколько-то сложный алгоритм,
[01:59:16.800 --> 01:59:22.320]  который я в своей жизни написал на джави. А нет. А нет, не единственный. Я потом ещё писал какие-то
[01:59:22.320 --> 01:59:27.400]  решения. А, потом я ещё писал решения на джави, когда мы там готовили тот контест Петра Заводского.
[01:59:27.400 --> 01:59:38.240]  Вот. Так вот. Ну что, поехали. Итак, first not leave. Начнём с первой буквы. Давайте сразу напишем
[01:59:38.240 --> 01:59:45.880]  вот эту первую букву. Буква А. Тут у нас подстрока от нуля до бесконечности. Тут имеется пока,
[01:59:45.880 --> 01:59:53.120]  ну вот, пока имеется в виду А, потому что у нас пока вот сейчас С равно А сейчас. И, значит,
[01:59:53.120 --> 02:00:05.680]  first not leave у нас сейчас равно 1. И он указывает вот сюда. Видим, да? Вот. Значит,
[02:00:05.680 --> 02:00:13.400]  первая у меня идея такая. Добавляем букву Б. Да, тут мысленно прерисовывается, как всегда,
[02:00:13.400 --> 02:00:42.920]  буква Б. Так, мне не нравится этот маркер. Так. Вот. Вот. Итак, смотрите. Значит,
[02:00:42.920 --> 02:00:47.600]  тут-то приписали, но это неинтересно, потому что что может поменяться с точки зрения этой
[02:00:47.600 --> 02:00:52.640]  штуки? Поменяться может следующее. То есть, это указатель первый, который находится не в листе,
[02:00:52.640 --> 02:00:57.880]  который может что-то поменять. Давайте припишем к нему букву Б. Так, перехода по букве Б нет,
[02:00:57.880 --> 02:01:04.520]  поэтому автоматически здесь у нас объявляется переход по букве Б там 1 плюс бесконечность.
[02:01:04.520 --> 02:01:13.000]  Значит, первый указатель торжественно отправляется сюда. И поэтому в этом месте
[02:01:13.000 --> 02:01:22.760]  first not leave увеличивается на двоечку. Итак, смотрим двоечку. Ну, двоечка это у нас сейчас вот просто
[02:01:22.760 --> 02:01:26.720]  это пустой суффикс, поэтому он просто указывает сюда, пока ничего криминального не происходит.
[02:01:26.960 --> 02:01:38.320]  Теперь приходит буква А. Значит, буква А. Так, а теперь смотрите какая интересная ситуация. На
[02:01:38.320 --> 02:01:49.160]  этот раз переход из first not leave по букве А происходит. И происходит вот сюда. Так вот,
[02:01:49.160 --> 02:01:58.760]  я утверждаю, что дальнейшие суффиксы перебирать не надо. Нет, он-то не в листе,
[02:01:58.760 --> 02:02:05.360]  но фишка в другом. Теперь давайте подумаем, а может ли так, вот хорошо, мы конкретно вот в
[02:02:05.360 --> 02:02:10.360]  этом суффиксе перешли по букве А, то есть переход состоялся, ничего создавать не надо было.
[02:02:10.360 --> 02:02:25.760]  В будущем дереве, конечно, все остальные ребра должны тоже заканчиваться не в листе,
[02:02:25.760 --> 02:02:34.640]  но я хочу доказать немножко другое. Я хочу доказать, что следующие переходы по следующим
[02:02:34.640 --> 02:02:46.760]  ребрам тоже ничего нового не создадут. То есть в плане у нас мог быть рыжий указатель,
[02:02:46.760 --> 02:02:55.240]  который с номером больше, но который ниже, чем он. Но не ниже, а вдруг там выяснилось,
[02:02:55.240 --> 02:03:03.960]  что там перехода в букве А в следующих указателях нету. Почему? Страшно, потому что это означает,
[02:03:04.640 --> 02:03:09.120]  я хочу доказать, что если этот указатель сдвинулся, то дальше ничего перебирать не надо.
[02:03:09.120 --> 02:03:19.040]  Да, это для нас будет потенциально очень круто, потому что это потенциальная линия уже. Но на самом
[02:03:19.040 --> 02:03:24.320]  деле можно показать, что дальше переходы по букве А тоже будут существовать, потому что
[02:03:24.320 --> 02:03:30.200]  доказательство очень простое. Если перехода по букве А в каком-то из следующих указателей нету,
[02:03:30.200 --> 02:03:39.600]  то значит, что следующий указатель перейдет в лист. А такого быть не может. То есть можно
[02:03:39.600 --> 02:03:48.120]  это увидеть и так. Просто это из цикла, когда я делал алгоритм, у меня так получилось. Правда,
[02:03:48.120 --> 02:03:56.240]  выясняется, нельзя ли это увидеть с точки зрения устройства строки. И на самом деле это можно
[02:03:56.240 --> 02:04:05.120]  увидеть. Потому что давайте я нарисую ту же картинку, но в общем виде. В общем виде жила
[02:04:05.120 --> 02:04:10.040]  была у тебя глобальное дерево. Страшное, страшное, страшное, страшное, страшное, страшное, страшное,
[02:04:10.040 --> 02:04:25.000]  страшное. Жил был у тебя какой-то суффикс, который жил может быть здесь, может быть даже на вершине.
[02:04:25.000 --> 02:04:33.080]  Ты попытался, ты добавил к строке букву А, и он возьми и сделай тупо переход. Потому что тут
[02:04:33.720 --> 02:04:40.400]  только с буквы А случайно и была. Или вот из этой вершины переход по букве А тоже и был. Вот.
[02:04:40.400 --> 02:04:47.080]  Тогда я утверждаю следующее, что когда ты будешь брать указатели соответствующим меньшим суффиксам,
[02:04:47.080 --> 02:04:52.520]  там тоже магическим образом переход по букве А всегда будет, и ничего нового ты не создашь.
[02:04:52.520 --> 02:05:11.360]  То есть если у нас был суффикс, из которого есть переход по А. Ну да. По большому счету да,
[02:05:11.360 --> 02:05:19.680]  это означает, что допустим этому указателю соответствовал суффикс П. То есть это означает,
[02:05:19.680 --> 02:05:32.920]  что у нас была строка С, у которой был суффикс П. И тут выяснилось неожиданно, что если приписать к
[02:05:32.920 --> 02:05:39.280]  строке А, то выяснилось, что переход был. Что это вообще означает? Это означает маленькую простую
[02:05:39.280 --> 02:05:46.560]  вещь. Это означает, что буква П уже встречалась ранее, и более того, после какого-то из ее
[02:05:46.560 --> 02:05:56.720]  вхождения шел символ А. То есть строка ПА уже была под строкой строки С. Ну да. Вот. Но если строка
[02:05:56.720 --> 02:06:03.480]  П обладала таким свойством, то если я возьму какой-нибудь суффикс П штрих строки П, то он тоже
[02:06:03.480 --> 02:06:08.400]  будет обладать таким свойством. Правда? Следовательно там из всех меньших суффиксов переходы по строке А
[02:06:08.400 --> 02:06:21.440]  тоже уже будут существовать. То есть получается мистика такая, что если у вас FirstNotLeaf сделал
[02:06:21.440 --> 02:06:27.520]  честный переход и ничего нового не потребовалось создавать, то на этом алгоритм может остановиться.
[02:06:27.520 --> 02:06:34.880]  Более того, даже верно так. То есть может у FirstNotLeaf быть, конечно, более сложная ситуация,
[02:06:34.880 --> 02:06:40.880]  как мы в будущем увидим. Он сделает переход, увеличится. Сделает переход, увеличится. То есть
[02:06:40.880 --> 02:06:45.080]  там что-то создаст новое, увеличится. Создаст новое, увеличится. А потом обнаружит, что где-нибудь там
[02:06:45.080 --> 02:06:51.560]  на пятерочке переход делать уже можно сделать переход без создания чего-то нового. Тогда в этом
[02:06:51.560 --> 02:07:01.440]  месте он тупо сделает этот переход и остановится. Вот. Ну вот. И тогда, слушайте, тогда это уже начинает
[02:07:01.440 --> 02:07:09.600]  напоминать линию. Потому что каждое нетривиальное действие FirstNotLeaf увеличивает его на единичку. А
[02:07:09.600 --> 02:07:20.400]  суммарно он больше чем N стать не может. Правда? Да. Да. Итак, значит, смотрите, пока у нас FirstNotLeaf
[02:07:20.400 --> 02:07:25.160]  равно 2, давайте еще чуть-чуть поэмулируем для понива, просто для ощущения того, что происходит.
[02:07:25.160 --> 02:07:34.860]  Да, тут, конечно, мысленно мы говорим, что тут ABA, тут BA. Вот. Дальше. Буква С. Вот тут показательный
[02:07:34.860 --> 02:07:43.160]  пример. Что происходит? Значит, буква С, значит FirstNotLeaf находится здесь. Он соответствует суффиксу
[02:07:43.160 --> 02:07:48.960]  А, который теперь превратился в суффикс АС. И нам придется его попилить. Попилили. 0,1, 1
[02:07:48.960 --> 02:07:56.280]  бесконечность, без проблем. И отправили букву С сюда. Да, кстати, давайте тут тоже припишем. Тут С,
[02:07:56.280 --> 02:08:07.160]  тут С, тут С, тут 3 на бесконечность. Вот. Красота. Итак, FirstNotLeaf, правда, теперь торжественно
[02:08:07.160 --> 02:08:16.440]  превращается во что? В тройбан. Ну, как всегда, у нас двоечка превращается в тройбан. Классическая
[02:08:16.440 --> 02:08:27.600]  ситуация на фистике. Вот. Вот. Значит, тройбан находится здесь. Находился, по крайней мере, да. И
[02:08:27.600 --> 02:08:33.040]  теперь из него надо перейти по букве С. Из этой вершины нет перехода по букве С. Наша фирма это
[02:08:33.040 --> 02:08:42.240]  учла. Значит, мы его сейчас заведем. Вот. Ну, это уже там, на 1-этажную Америку, да. То есть,
[02:08:42.720 --> 02:08:47.120]  вы поставили будильник, будильник сработал, вы проснулись, и теперь можете приступать к утренней
[02:08:47.120 --> 02:08:52.800]  гимнастике. Люди не любят делать утреннюю гимнастику. Наша фирма это учла. Наш электрический
[02:08:54.000 --> 02:08:57.920]  пояс будет массировать вас самым добросовестным образом. Вам даже ничего не нужно делать. Пять
[02:08:57.920 --> 02:09:03.360]  минут, а у вас уже есть физическая нагрузка. Ну, или какая-то там такая реклама в 30-х годах имела
[02:09:03.360 --> 02:09:12.280]  место. Вот. Итак, буква С. Тройбан отправился сюда, поэтому еще более классическая ситуация на
[02:09:12.280 --> 02:09:27.360]  фистехе. Тройбан превращается в четверку. А у нас все хорошо. А у нас оценка не уменьшается. Как
[02:09:27.360 --> 02:09:42.080]  это часто бывает. Ну, потому что четверка может быть перемещена в пятерку. Нет, у нас, правда,
[02:09:42.080 --> 02:09:45.960]  четверка может быть перемещена в пятерку, но это пока. Пока и сейчас четверка уже тупо в корне,
[02:09:45.960 --> 02:09:51.880]  потому что четверка у нас это уже пустой суффикс. Поэтому мы сейчас по этому остановились. Ну,
[02:09:51.880 --> 02:09:59.800]  что теперь будет? Теперь будет буква А. Так, есть переход по букве А? О, чудо, есть. Так, кстати,
[02:09:59.800 --> 02:10:06.800]  я тут, да, С. Ну, тут все вот эти буквы А я должен нарисовать. Вот. И тогда я вижу, что лежит товарищ,
[02:10:06.800 --> 02:10:22.200]  да, ешкин, перемещается вот сюда. Ой. Хорошо, говорим, мэм. Вот. Да. Ну, понятно, пятый суффикс
[02:10:22.200 --> 02:10:28.920]  тоже был. Но замечаем дальше, что пока это фестнослив делает переходы, больше вообще суффиксное
[02:10:28.920 --> 02:10:34.640]  дерево не меняется. То есть мы просто идем, идем, идем, идем, идем, идем. То есть, вот, давайте я
[02:10:34.640 --> 02:10:39.680]  сразу два шара пропущу. Вот мы идем БА, и мы обнаружим, что рыжий указатель идет сначала сюда,
[02:10:39.680 --> 02:10:50.560]  потом сюда. И, в общем-то, больше пока ничего не поменяется. Ну, вот. Ну, то есть мысленно,
[02:10:50.560 --> 02:10:54.720]  конечно, поменяется. То есть на всех ребрах с бесконечностями мысленно появятся вот эти БА,
[02:10:54.720 --> 02:11:08.000]  но я напоминаю это все мысленно. Вот. И вот наконец появилась буква Б. Буква Б появляется.
[02:11:08.000 --> 02:11:19.120]  Вот. Ну, значит, тут перехода по букве Б, Б нет, поэтому мы тут рисуем 7 плюс бесконечность,
[02:11:19.120 --> 02:11:27.280]  там Б, С. Там тут мы, соответственно, один уже вместо единицы тут пишем 3, тут пишем 1, 3. Вот. А
[02:11:27.280 --> 02:11:34.080]  рыженький указатель куда-то девается, потому что он теперь превращается в пятерку. И вот теперь
[02:11:34.080 --> 02:11:39.920]  самое мистическое. Четверка соответствовала строке АБА. Теперь она должна соответствовать
[02:11:39.920 --> 02:11:46.560]  строке БА. Вот единственное, что мы здесь пока не делаем за линию, это не ищем, где находится БА.
[02:11:46.560 --> 02:11:54.000]  Вот. Ну, допустим, пока предположим, что с небес по факсу нам присылают, где она находится. Вот она.
[02:11:54.000 --> 02:12:06.120]  Ну, замечаем, что перехода по букве Б тут тоже нет. Значит, как всегда, пилим, отправляем. Значит,
[02:12:06.120 --> 02:12:19.800]  пишем тройбан. Вот. То есть тут рисуем еще. А, у меня тут черненьким что-то недорисовано. Да,
[02:12:19.800 --> 02:12:28.280]  потому что тут как бы ЦАБа, а тут просто теперь Б. И тут Б. А, ну тут везде еще Б, конечно. Вот. Так.
[02:12:28.280 --> 02:12:39.560]  И фест тот лифт становится шестеркой. Шестерка соответствует суффиксу А. Где же он находится?
[02:12:39.560 --> 02:12:50.760]  Что? Где? Да. Ну, пока можно просто в тупую пройти по этому символу, найти, что он находится здесь. Но
[02:12:50.760 --> 02:12:58.200]  здесь переход по букве Б внезапно есть. Поэтому мы торжественно идем вот сюда и на этом останавливаемся.
[02:12:58.200 --> 02:13:04.520]  Потому что тут идея такая, что раз из этого суффикса мы перешли, то из всех остальных мы тоже перейдем.
[02:13:04.520 --> 02:13:10.760]  Там ничего нового не создастся. Ничего больше делать не надо. Ну и завершающий штрих в нашем случае,
[02:13:10.760 --> 02:13:17.760]  добавляем букву А. Рыжий указатель торжественно справляется вот сюда. Ну и все. Больше ничего не
[02:13:17.760 --> 02:13:24.600]  происходит. То есть вот такой алгоритм. Обратите внимание, по модулю черного ящика, который нам
[02:13:24.600 --> 02:13:32.560]  сообщает, где находится следующий фест тот лифт, алгоритм уже работает за линию. При этом черный
[02:13:32.560 --> 02:13:38.000]  ящик очевидно реализовывается на квадратах. Да, у черного ящика есть, конечно, напрашивающая
[02:13:38.000 --> 02:13:43.360]  реализация, потому что по фест тот лифт мы можем догадаться, какой суффикс имеется в виду и в тупую
[02:13:43.360 --> 02:13:53.120]  по этому суффиксу пройти. Правда? Понимаете логику, да? А какие у нас тут общие оценки? Кроме этого все
[02:13:53.120 --> 02:14:01.920]  работает за линию. Да. То есть у нас все работает за О от Н плюс за какое время мы делаем переход по
[02:14:01.920 --> 02:14:08.720]  рыжему указателю. Ну потому что, точнее, вот рыжий указатель, ну потому что мы говорим, что вот фест тот лифт,
[02:14:08.720 --> 02:14:15.280]  он там и увеличить фест тот лифт на один. Но когда вы увеличите этот фест тот лифт на один,
[02:14:15.280 --> 02:14:20.920]  вам нужно знать, где соответствующий суффикс в дереве заканчивался. Да.
[02:14:23.120 --> 02:14:31.480]  Ну не совсем так. Потому что, надо аккуратно говорить, что добавление каждой буквы может
[02:14:31.480 --> 02:14:36.880]  делать таких скачков больше, чем один. Ну потому что может у вас в этом фест тот лифт шестой,
[02:14:36.880 --> 02:14:42.080]  значит добавили ребро, фест тот лифт семь. Нужно тоже новое добавить ребро. И перешли. То есть
[02:14:42.080 --> 02:14:51.680]  добавление каждой буквы фест тот лифт может увеличиваться несколько раз, а не один. Вот имейте
[02:14:51.680 --> 02:14:57.080]  в виду эта говорочка. Но, конечно же, очевидно, что суммарно фест тот лифт, конечно, добавит не
[02:14:57.080 --> 02:15:04.480]  более чем N новых вершинный ревер. Ну, то есть добавит он больше, потому что он, конечно,
[02:15:04.480 --> 02:15:09.600]  часто еще распил и делает, но соответственно. Кстати, это тоже еще одно доказательство того,
[02:15:09.600 --> 02:15:17.440]  что в, ну хотя ладно, это уже не является там новым доказательством относительно предыдущего. Вот. То
[02:15:17.440 --> 02:15:22.360]  есть это там уточнение, это может быть сказать уточнение, как конкретно это происходит, то,
[02:15:22.360 --> 02:15:29.640]  что мы в том доказательстве говорили. Вот. То есть единственное, что нам теперь надо, что нам
[02:15:29.640 --> 02:15:36.280]  теперь надо научиться, это по суффиксу, по суффиксу предыдущей строки из без символа находить
[02:15:36.280 --> 02:15:46.800]  следующий суффикс, желательно как-то за быстро относительно. Понимаете, да? Как же это сделать?
[02:15:46.800 --> 02:16:03.680]  Ну, на самом деле, это делать очень легко. Что? Это точно корневуха.
[02:16:16.800 --> 02:16:23.120]  Почти, наверное, там какая-то подлянка будет, конечно, где-то, что там надо ходить и так далее,
[02:16:23.120 --> 02:16:33.000]  но мы пойдем другим путем. Значит, мы заменим черный ящик на другой черный ящик. Черный
[02:16:33.000 --> 02:16:42.320]  ящик будет называться суффиксная ссылка. Ну, логично, да? Нет, ну да. Могло показаться,
[02:16:42.320 --> 02:16:45.880]  сочетание может показаться неожиданным для тех, кто не изучал ни дерева полиндромов,
[02:16:45.880 --> 02:16:51.800]  ни ахакарасик, ни суффиксный автомат. Но после них как-то уезжающая суффиксная ссылка тут нигде не
[02:16:51.800 --> 02:16:57.320]  возникнет. Как-то сложно. Единственная проблема, что придется теперь конкретно здесь уточнить,
[02:16:57.320 --> 02:17:06.360]  а что такое суффиксная ссылка? А вот что это такое. Потому что, смотрите, давайте,
[02:17:06.360 --> 02:17:11.960]  потому что для каждой вершины можно вводить такие позиции. Вот я, смотрите,
[02:17:11.960 --> 02:17:23.840]  я вот черным введу понятие PES от POS. Что такое PES от POS? Что, где-то это уже было, да? PES от POS?
[02:17:23.840 --> 02:17:33.360]  А, там типа рифма какая-то, да? А PES от POS там, да? Ну ладно. Ладно, мне сложно сказать, какие тут…
[02:17:33.360 --> 02:17:41.800]  А, а, КОС, о господи. Нет, знаете, это как из цикла, да, знаете, там бывает, что там на интеллектуальной
[02:17:41.800 --> 02:17:45.920]  игре так, значит, так, вопрос давайте. Принцип действия гранитовой палочки. Там два игрока
[02:17:45.920 --> 02:17:53.000]  покатились со смеху. Там просто так жутко. Что вас больше всего насмешило, эбоитово или палочки?
[02:17:53.080 --> 02:18:02.320]  Там, давайте еще раз. Принцип действия гранитовой палочки. Парень, это принцип. А ты принцип,
[02:18:02.320 --> 02:18:09.640]  нет, ты принцип. Вот. Как это называется? Отрывок из номера самой там, съемки программы самой умной в
[02:18:09.640 --> 02:18:18.040]  Казахстане. Ну, я не знаю, почему казахи посчитали, что там будет именно так, но было смешно. Да, вот.
[02:18:18.040 --> 02:18:25.640]  Да, именно там считают, что это. Зови прямые, которые не пересекаются. Рельсы. Черт с тобой,
[02:18:25.640 --> 02:18:32.440]  я засчитываю этот ответ, потому что мы иначе так никогда не закончим. Да, 1-0. Красавчик, братуха.
[02:18:32.440 --> 02:18:42.600]  Вот. Ладно, такой. П-сет-пост, это что такое? Это строчка, по которой мы в эту позицию придем.
[02:18:42.600 --> 02:18:54.240]  Понятно, да? Ну, пост – это позиция в дереве. Она может находиться как в вершине, так и внутри
[02:18:54.240 --> 02:19:05.640]  вебра. Понятно, да? То есть как бы вот есть у нас позиция. Так вот, в принципе, я аналогичным
[02:19:05.640 --> 02:19:16.920]  образом могу ввести позицию п-с от в. Вот, то же самое, только уже на этот раз от вершины. То есть
[02:19:16.920 --> 02:19:27.760]  это частый случай п-с от поза. Так вот, а теперь определение. Нет, на этот раз пришло время
[02:19:27.760 --> 02:19:38.240]  использовать зеленый маркер. Значит, сув от в. Можно ввести сув от поз, но он не вводится.
[02:19:38.240 --> 02:20:04.320]  Значит, смотрите, сув от в. Это такая позиция, что п-с от поз. Суфикс. П-с от в. Ну и, как вы уже
[02:20:04.320 --> 02:20:24.160]  догадались, длина п-с от поза – это в точности п-с от в минус 1. Вот. То есть я это нарисовал
[02:20:24.160 --> 02:20:29.880]  зеленым и черным. Знак следующий, что черное мы, как и раньше, в дереве в явном виде не храним,
[02:20:29.880 --> 02:20:42.360]  а вот суфиксную ссылку мы в каждой вершине в явном виде хранить будем. Правда, да, то есть
[02:20:42.360 --> 02:20:49.200]  особенная мистика будет заключаться в том, что а как конкретно ее находить. Вот вы только что
[02:20:49.200 --> 02:20:55.760]  создали вершину, надо ее найти. Ну, во-первых, как ее кодировать, надо еще сказать. Ну, подождите,
[02:20:55.760 --> 02:21:01.360]  ну как ее кодировать? Ну вот. Ну давайте задумать. Тут, конечно, вопрос, потому что вопросы могут
[02:21:01.360 --> 02:21:06.800]  быть такие, что на самом деле она как бы помолча, а не суфиксная ссылка от вершины может вести куда-нибудь
[02:21:06.800 --> 02:21:12.840]  в середину ребра, и более того, в перспективе это ребро может сильно меняться. Оно может обрезаться
[02:21:12.840 --> 02:21:18.440]  сзади, оно может обрезаться спереди, а еще оно может просто превращаться в вершину в какой-то
[02:21:18.440 --> 02:21:28.920]  момент, правда? Нет, вот эта позиция. То есть условно говоря, у вас есть такая пустыня, там где-то
[02:21:28.920 --> 02:21:35.680]  это такой путь между Ластвересом и Солтейксити, но я не знаю, я не разбираюсь, называется в географии
[02:21:35.680 --> 02:21:44.600]  Англии, соответственно. Да, настолько. И там, значит, какая-то пыльная дорога стоит,
[02:21:44.600 --> 02:21:53.080]  и около какого-то кактуса стоит ваш режеуказатель. Но фишка в том, что это сейчас как бы там
[02:21:53.080 --> 02:21:57.680]  бесконечность, впереди бесконечность, позади бесконечность, потому что, как мы помним,
[02:21:57.680 --> 02:22:02.800]  ребро может расплититься на два, то есть посередине там построили какой-нибудь город с казино. Вот,
[02:22:02.800 --> 02:22:08.520]  чтобы из Ластвереса было быстрее ездить. Потом могли еще сзади построить, потом пристали, слушайте,
[02:22:08.520 --> 02:22:13.600]  хороший кактус, давайте вокруг этого кактуса город построим. Но там, я не знаю, так появляется
[02:22:13.600 --> 02:22:19.320]  там какой-нибудь город, его как-нибудь там назовут, как назвать простой провинциально-американский
[02:22:19.320 --> 02:22:25.000]  город? Ну, естественно, Санкт-Петербург. Ну, Том Сойер предупреждал. Вот, соответственно,
[02:22:25.000 --> 02:22:28.560]  и так далее. И вот у вас тут город появился. Вот тут примерно то же самое могло быть,
[02:22:28.560 --> 02:22:36.640]  казалось бы, но на уровне идеи. Но на самом деле есть мистическое утверждение.
[02:22:37.120 --> 02:23:01.560]  Значит, если В не лист, то суфот В – это вершина. Вот прям усерда. Ну, по крайней мере, сформируем
[02:23:01.560 --> 02:23:06.280]  так аккуратно. Когда у нас дерево фиксировано, то есть вот у нас есть строка, есть корректное
[02:23:06.280 --> 02:23:10.920]  дерево. Так вот, для любой не листовой вершины, кстати, забирая вперед, для листов мы суфиксную
[02:23:10.920 --> 02:23:17.560]  ссылку даже насчитывать не будем, просто потому что она нам не нужна. Так вот, значит, так вот,
[02:23:17.560 --> 02:23:25.000]  для любой, если вершина В – это не лист, то есть вершина В – это внутренняя вершина, то суфот В – это
[02:23:25.000 --> 02:23:33.120]  точно вершина. То есть не середина какого-то ребра, а прямо сейчас эта вершина. Нет, если мы верим в
[02:23:33.120 --> 02:23:41.200]  это утверждение, то это нам дает надежность, потому что понятно, что эта вершина меняться не будет. То
[02:23:41.200 --> 02:23:45.320]  есть если в этом месте находится вершина, она там будет находиться всегда. Да, могут меняться дороги,
[02:23:45.320 --> 02:23:51.240]  ведущие в нее и из нее, но город от этого никуда не денется. То есть мы там никогда не будем
[02:23:51.240 --> 02:23:55.700]  понимать. То есть мы можем построить на трассе новый город, но понимать решение, что Детроид
[02:23:55.700 --> 02:24:02.400]  переносится там на пару километров вправо, потому что, ну я не знаю, потому что я так хочу. Вот,
[02:24:02.400 --> 02:24:16.880]  мы так не будем. Вот, понятно, и почему же это? Ну, у нас типа есть путь до нашей вершины,
[02:24:16.880 --> 02:24:24.320]  и потом развилка до двух разных суффиксов. Когда мы отпилим от него первый символ,
[02:24:24.320 --> 02:24:31.520]  у нас наши два суффикса все еще останутся суффиксами. Соответственно, после отпиления
[02:24:31.520 --> 02:24:37.640]  мы пройдем по тому же самому пути, у нас снова будет развилка до этих двух суффиксов. Поняли
[02:24:37.640 --> 02:24:45.640]  идею? Значит, идея такая – жила-была вершина В. Что же это за подстрока такая, которая ведет
[02:24:45.640 --> 02:24:54.120]  вершину В? То есть пусть это какая-нибудь подстрока на этот раз Q. Что означает,
[02:24:54.120 --> 02:24:59.080]  что она попала во внутреннюю вершину? Это значит, что так как у нас сжатое дерево,
[02:24:59.080 --> 02:25:05.920]  то у нас из вершины идет хотя бы два ребра. Эти ребра идут по каким-то буквам. Они идут,
[02:25:05.920 --> 02:25:12.400]  да, даже правильно, вот так. То есть они идут тут по какой-то букве А и тут по какой-то букве
[02:25:12.400 --> 02:25:22.480]  В. Но тогда мы вынуждены заключить, что QA и QB – это подстроки строки С. А теперь отпилим от Q
[02:25:22.480 --> 02:25:31.440]  один символ в начале. Получится Q'. Но тогда мы замечаем, что строки Q', допустим, A и QB – это
[02:25:31.440 --> 02:25:39.720]  тоже подстроки строки С. Следовательно, когда мы пройдем по Q', тоже в этом месте обязана быть
[02:25:39.720 --> 02:25:51.920]  развилка. Значит, Q' приводит вершину У. То есть вот, оказывается, такая неожиданно простая идея.
[02:25:51.920 --> 02:26:03.640]  Итак, значит, суффиксная ссылка всегда показывает вершину.
[02:26:21.920 --> 02:26:37.640]  Ну раз есть QA и QB, то есть Q' и QB. Совершенно верно. Пока, в общем-то, не сильно сложно. Ну и все,
[02:26:37.640 --> 02:26:46.960]  в общем-то. Ну как все. Я сейчас проделаю тот же самый алгоритм, но буду предполагать,
[02:26:46.960 --> 02:26:54.280]  что нам откуда-то с небес по факсу присылают суффиксные ссылки. Модификация будет, конечно,
[02:26:54.280 --> 02:27:17.560]  незначительная, но тем не менее. Вот, поехали.
[02:27:25.280 --> 02:27:32.200]  Значит, поехали. Давайте, как всегда, С равно пустая строка. Значит, когда добавляем символ А,
[02:27:32.200 --> 02:27:38.000]  ну и здесь ничего не происходит. Просто добавляем переход по букве А, пишем тут от нуля до
[02:27:38.000 --> 02:27:43.960]  бесконечности и говорим, что first not leave, ну давайте я сейчас не буду его прописать,
[02:27:43.960 --> 02:27:49.200]  писать для экономии времени. Хотя нет, буду лучше писать. Он указывает сюда, и он равен единице.
[02:27:49.200 --> 02:28:04.600]  Так, что у нас происходит дальше? Буква B. Мы пытаемся из этого указателя перейти по букве B,
[02:28:04.600 --> 02:28:13.120]  у нас не получается. Поэтому мы создаем новое ребро на один бесконечность, пишем, как всегда,
[02:28:13.120 --> 02:28:19.480]  тут переход по букве B, тут переход по букве B. Тут пока в этом ничего не меняется. Так, но first
[02:28:19.480 --> 02:28:26.440]  not leave торжественно превращается в двойку. Но почему? Но как мы это на уровне алгоритма теперь
[02:28:26.440 --> 02:28:32.200]  узнаем? Мы говорим, что если мы только что создали ребро из корня, то из этого мы делаем вывод,
[02:28:32.200 --> 02:28:36.600]  что следующий указатель просто в этом корне придет и он должен там остаться, потому что тут был
[02:28:36.600 --> 02:28:46.400]  суффикс длины 1, останется суффикс длины 0. Понятно, да? Тут разные лайфхаки есть, в принципе,
[02:28:46.400 --> 02:28:54.800]  в реализации часто тут создают какую-нибудь фиктивную вершину, в которую сюда ведет
[02:28:54.800 --> 02:29:01.080]  переход по буквам A, B и так далее, всему алфавиту короче, а нота сюда из корня ведет
[02:29:01.080 --> 02:29:13.440]  суффиксная ссылка, чтобы было удобнее прыгать. Мы создали ребро, скакнули по суффиксной ссылке,
[02:29:13.440 --> 02:29:20.640]  сказали, что переход по букве B есть, перешли по нему, вот мы здесь. Вот часто так делают. Я так,
[02:29:20.640 --> 02:29:29.880]  кстати, обычно не делаю. Не знаю, это и циклоновкус, и цвет. Кстати, в вахкарасике такое тоже любят.
[02:29:29.880 --> 02:29:45.440]  Вот, ну и в дереве пелендромов соответственно тоже. Вот, так вот, буква А. Так, ну тут понятно,
[02:29:45.440 --> 02:29:51.160]  что к этим ребрам мы мысленно приписываем там букву А. Так, теперь смотрим. Так, рыжий указатель
[02:29:51.160 --> 02:30:01.560]  говорит, есть ли переход по букве А. Есть? Есть. И мы переходим. Все, в чем переходим,
[02:30:01.560 --> 02:30:10.760]  говорим, что больше ничего не делаем. Теперь буква С. Да, где-то опять притаился Якубович с
[02:30:10.760 --> 02:30:20.640]  огурцом. Да, но вот. Есть ли переход по букве С? Нету. Значит, что мы делаем? Пилим, значит,
[02:30:20.640 --> 02:30:25.880]  прямо сейчас на этой трассе создаем новое ребро. Ну понятно, тут пишем 0,1, тут пишем 1
[02:30:25.880 --> 02:30:38.160]  бесконечность. Тут пишем новое ребро по букве С. Тут пишем там 3 бесконечности. Вот, но этот указатель
[02:30:38.160 --> 02:30:42.120]  даже туда не приходит, а теперь мы из этого указателя должны перейти по суффиксной ссылке.
[02:30:42.120 --> 02:30:48.200]  Прям вот отсюда. Значит, но мы как мы сказали, предположим, что суффиксную ссылку нам присылают
[02:30:48.200 --> 02:30:54.600]  с небес по факсу. Да, но с небес по факсу нам неожиданно сказали, что суффиксная ссылка
[02:30:54.600 --> 02:31:07.560]  из-за ведет, ну куда она ведет. Да, но мы об этом поговорим позже, потому что у нас в этой ситуации
[02:31:07.560 --> 02:31:14.920]  возникнет. Да, но идея правильная, спасибо. Но мы пока чуть позже. Пока суффиксная ссылка говорит,
[02:31:14.920 --> 02:31:21.640]  что мы тупо идем теперь в корень. Из этого в корне мы говорим, что перехода по букве С нету. То есть,
[02:31:21.640 --> 02:31:26.520]  смотрите, мы сейчас находимся вот здесь. Кстати, это соответствовало того, что вот реже указатель
[02:31:26.520 --> 02:31:31.080]  превратился в 3. Вот, теперь мы переходим по символу С.
[02:31:56.520 --> 02:32:03.920]  Ну вот. И теперь отсюда мы переходим по суффиксной ссылке. Переходим в том условно сюда, возвращаемся.
[02:32:03.920 --> 02:32:10.920]  В общем, короче говоря, реже указатель сидит здесь и больше никого не трогает. Так, ну ладно,
[02:32:10.920 --> 02:32:18.600]  тут указатель придется видимо подлиннее сделать. Потому что, что у нас происходит дальше? Так,
[02:32:18.600 --> 02:32:25.440]  ну дальше давайте сократим себе немножко жизнь. Вот. И переговорим, потому что тут АВА, вон тут
[02:32:25.440 --> 02:32:37.640]  переходы есть, поэтому реже указатель идет сюда. Видно, да? А вот теперь появляется буква Б. И вот тут
[02:32:37.640 --> 02:32:45.600]  неожиданная идея. Смотрите. Да, мы тут как бы, раз понятно, мы тут пилим, тут получается 1, 3,
[02:32:45.600 --> 02:32:54.920]  3 бесконечности. Это понятно. Вот. Тут переход по букве С. Да, тут соответственно этот там АВА,
[02:32:54.920 --> 02:32:59.360]  естественно, тут дописывается. Давайте сразу его тут допишем, чтобы больше об этом не думать. И
[02:32:59.360 --> 02:33:11.200]  тут АВА какой-то. Вот. Да, тут мы создаем ребро. И так, значит, тут переход по букве Б в ситуацию 7
[02:33:11.200 --> 02:33:22.560]  плюс бесконечность Б. И что получается? И теперь мы идем по суффиксной ссылке. С небес по факсу
[02:33:22.560 --> 02:33:27.600]  суффиксная ссылка говорит нам о том, что у строки АВА суффиксная ссылка должна вести в то место,
[02:33:27.600 --> 02:33:42.440]  где заканчивается БА, правда? Вот здесь. Ой, а вершины-то нету. А ведь мы же говорили,
[02:33:42.440 --> 02:33:50.440]  что вершины, суффиксная ссылка обязана ввести вершину. А у нас ее нету. Как так получилось? Да,
[02:33:50.440 --> 02:33:56.720]  да. Да, я вас где-то обманул. Но не в этом, значит, не голил сейфер, а тут я вас как бы вряд ли обманул
[02:33:56.720 --> 02:34:13.400]  где-то. Кого добавить? Вот. Нет, добавить только Б надо, добавить там. Нет, БА у нас уже есть,
[02:34:13.400 --> 02:34:20.320]  целиком БА добавлять не надо. Да. Вот. Но идея другая. Идея такая, что утверждение было верно,
[02:34:20.320 --> 02:34:26.200]  оно как бы было верно для строки АВА целиком, его правильного суффиксного дерева, и суффиксного
[02:34:26.200 --> 02:34:31.520]  дерева для этой строки целиком. Но тут фишка в том, что мы как бы в промежуточном состоянии. Мы
[02:34:31.520 --> 02:34:36.480]  построили новую вершину, но еще не сказали, что не надо строить других вершин. И в принципе вот
[02:34:36.480 --> 02:34:41.880]  эта ситуация говорит нам маленькую простую вещь. Если тут вершину нет, значит, можете ее прямо
[02:34:41.880 --> 02:34:47.000]  сейчас тут создать, потому что все равно новый переход из нее потребуется по той самой букве Б.
[02:34:47.000 --> 02:35:00.320]  Понятно, да? То есть просто прямо сейчас на этом месте создаем новую вершину. Вот. То есть как бы
[02:35:00.320 --> 02:35:05.120]  черный ящик сказал, слушай, город должен быть там, а его нет. Слушай, ну ты же Петр Первый,
[02:35:05.120 --> 02:35:13.920]  ну с построй, господи. Ну там болото, и че? Так че, не империя, вы шо, не империя шо или шо? Вот.
[02:35:13.920 --> 02:35:21.680]  Вот. Ладно, по географитам, это конечно явно не какой-то там город на море, конечно, находится.
[02:35:21.680 --> 02:35:32.720]  Значит окей. Значит, рыжий указатель перескакивает сюда, неожиданно для себя обнаруживает, да,
[02:35:32.720 --> 02:35:38.400]  для себя неожиданно, но не для остального мира. Шоакаса перехода по букве Б тут нету, и он
[02:35:38.400 --> 02:35:46.320]  теперь торжественно его строит. Вот пишем 7 бесконечность, там тут был переход по букве С,
[02:35:46.320 --> 02:35:56.480]  тут был переход по букве Б, и получится радость. Значит, да, тут буква Б. Ну и теперь, соответственно,
[02:35:56.480 --> 02:36:14.800]  вопрос. Сейчас, а почему там обязательно, вот, возможно там не было вершины. Ну. Ну короче,
[02:36:14.800 --> 02:36:21.560]  почему там следующая буква, которая внутри этого ребра не может быть просто Б? А идея очень
[02:36:21.560 --> 02:36:29.720]  простая. Ну вот. Ну убедиться в этом можно так. Вот, допустим, тут строка П была, да? Тут была
[02:36:29.720 --> 02:36:38.240]  какая-то более длинная П, условно говоря, там ДП. Ну Д маленькая, П большой, да? Вот. Мы уже знаем,
[02:36:38.240 --> 02:36:46.680]  что в строке ДП здесь развилка есть. То есть, ну как бы развилка в будущей строке точно будет.
[02:36:46.680 --> 02:36:59.680]  Я бы даже сказал, она только что появилась. Ну да. Чего? Ну нет, может быть, она тут даже есть,
[02:36:59.680 --> 02:37:03.240]  но мы просто, если тут и развилки нет, то мы и суффиксную ссылку тут считать не будем.
[02:37:03.240 --> 02:37:10.400]  Смотри, если развилки до добавления символа не было, значит тут в принципе был один символ,
[02:37:10.400 --> 02:37:16.280]  но в принципе так и происходит. То есть был один символ, и он не тот, который нам надо. Тогда,
[02:37:16.280 --> 02:37:20.080]  когда ты тут суффиксной ссылки попадешь в середину ребра, значит там был тот же символ,
[02:37:20.080 --> 02:37:25.880]  что был раньше. Ну можно и рассказать, что типа если бы там не было вершины, то значит бы там
[02:37:25.880 --> 02:37:31.840]  точно не было развилки, а у нас она была. Ну да, значит и тут раньше тоже развилки не было, да. То
[02:37:31.840 --> 02:37:36.560]  есть может она только что появилась, значит и там она сейчас появится. Вот, да, десятью способами
[02:37:36.560 --> 02:37:45.320]  можно убедиться. Там, нет, как бы могут начаться более какие-то крутые вопросы. Ну да. Но если у
[02:37:45.320 --> 02:37:49.800]  нас не было вершины, то ее уже точно еще нет. Нет, да, на самом деле там могут еще попредираться,
[02:37:49.800 --> 02:37:54.600]  потому что скажут, слушайте, а вы только что добавили ребро, и может быть вот эта вот строчка новая
[02:37:54.600 --> 02:38:02.160]  баба, она уже появилась вот здесь. Вдруг такое произошло? У меня длина. Да, на самом деле, то есть
[02:38:02.160 --> 02:38:06.520]  мы замечаем, что да, тут все в порядке, потому что мы тут скачем по уменьшению длин, поэтому то,
[02:38:06.520 --> 02:38:12.200]  что мы тут делаем на самом деле на существование развилки для более коротких строк не влияет
[02:38:12.200 --> 02:38:20.360]  никак. Да, но просто это надо выточить. Если мы скакнули куда-то, где нет вершины,
[02:38:20.360 --> 02:38:31.200]  вопрос про то, создавать ли вершину. Ну по большому счету да. Если мы скакнули туда, куда нет вершины, значит там точно нет развилки, а у нас уже точно есть развилки. Ну да, значит и тут она развилкой сейчас появится.
[02:38:31.200 --> 02:38:38.200]  Вот, так, ну поехали. Теперь придется из этой вершины скакнуть. Ой, а у нас пока нет суффиксной ссылки.
[02:38:38.200 --> 02:38:49.200]  О, великий черный ящик, скажи нам, где суффиксная ссылка? Он говорит, здесь. Ну вот вы видите, а, ну да, мог бы догадаться.
[02:38:49.200 --> 02:39:00.200]  Вот, ну хорошо, есть ли тут переход по символу B? Неожиданно выясняется, что да, мы переходим и радуемся жизни. Все, на этом останавливаемся.
[02:39:01.200 --> 02:39:09.200]  Так, ну все, что нам остается теперь добавить букву A и сказать, что вот тут переход по букве A есть, мы по нему переходим и ничего не меняется.
[02:39:09.200 --> 02:39:20.200]  То есть вот так выглядит алгоритм по модулю появления суффиксных ссылок. Вот, понятно, да? Вот, кайфец.
[02:39:20.200 --> 02:39:27.200]  Ну а дальше понятно. А что дальше понятно? У нас насчитана суффиксная ссылка для ближайшей сверху разбилки. Да.
[02:39:27.200 --> 02:39:35.200]  И мы просто берем ее и двигаемся вниз по стоку, насколько мы сами знаем. Ну да, то есть в принципе это тупой алгоритм поиска суффиксной ссылки, который работает за квадрат.
[02:39:35.200 --> 02:39:41.200]  Почему за квадрат? Скажем так, верное утверждение, что это работает за квадрат. А, окей.
[02:39:41.200 --> 02:39:50.200]  Давайте. То есть надо еще, давайте сейчас просто сформулируем, потому что да, вот. То есть действительно тупой вариант, как за квадрат найти суффиксную ссылку для вот свежеобразованной развилочки.
[02:39:50.200 --> 02:40:00.200]  То есть идея такая. Чего? Я даже не понимаю, ну в плане, это правда, это действительно O от N квадрат, но я не понимаю, откуда тут N квадрат действие могло взяться.
[02:40:00.200 --> 02:40:12.200]  А вот откуда, смотрите. Мы поднимаемся, потому что как мы ищем суффиксную ссылку? Идея такая. Мы поднимаемся в родителя, в свежеобразованного родителя этой вершины.
[02:40:12.200 --> 02:40:19.200]  Да, кстати, редкий случай. Был у нас родитель, был у нас ребенок, ребенок резко стал внуком и родитель сказал, вот так, теперь вот он этот родитель.
[02:40:19.200 --> 02:40:25.200]  Мы позицию храним без привязки к родителю, что? Нет, в смысле почему? Ну в смысле без привязки, не понял.
[02:40:25.200 --> 02:40:35.200]  Ну мы сам этот указатель храним, как вершину и сдвиг, видимо. У нас уже хранится родитель.
[02:40:35.200 --> 02:40:44.200]  Нет, я о другом. Я фишка говорю, что был родитель, был ребенок. А теперь ребенку сказали, поздравляю, у тебя теперь новый родитель.
[02:40:44.200 --> 02:40:50.200]  Я себе тут придумал нового ребенка, он настолько крутой, что он теперь твой родитель.
[02:40:50.200 --> 02:40:56.200]  Да, дико звучит, но если заменю понятие ребенка-родитель на начальник-подчиненный, то это нормальная ситуация.
[02:40:56.200 --> 02:41:04.200]  То есть в каком-нибудь стартапе это в принципе нормально. То есть создатель стартапа сначала руководил непосредственно всеми, а потом, когда стало слишком много, нанял там дополнительно менеджеров.
[02:41:04.200 --> 02:41:09.200]  В принципе нормальная ситуация.
[02:41:09.200 --> 02:41:15.200]  Идея такая. Мы поднимаемся в родителя, поднимаемся по строке P.
[02:41:15.200 --> 02:41:22.200]  Теперь на самом деле возможны два случая. Более популярный случай говорит, что эта вершина не оказалась корнем.
[02:41:25.200 --> 02:41:29.200]  То есть до строки P мы тут еще шли до какой-то строки Q.
[02:41:29.200 --> 02:41:36.200]  Но тогда идея такая. Надо просто пройти по уже существующей суффиксной ссылке вот у этой вершины.
[02:41:36.200 --> 02:41:42.200]  Вот. Ну и сюда мы приходим по строке Q'.
[02:41:42.200 --> 02:41:47.200]  Что такое Q'? Это как бы та же строка Q, но без первого символа.
[02:41:47.200 --> 02:41:52.200]  И теперь надо просто из этой вершины спуститься по строке P.
[02:41:52.200 --> 02:41:55.200]  Абсолютно то же самое.
[02:41:55.200 --> 02:41:58.200]  Вот. Это самый популярный случай.
[02:41:58.200 --> 02:42:03.200]  Хотя ладно, вопрос. Потому что есть, конечно, второй случай, когда оказалось, что эта вершина корень.
[02:42:04.200 --> 02:42:09.200]  Тогда из корня надо спуститься по строке P меньше.
[02:42:09.200 --> 02:42:11.200]  Понимаете, да?
[02:42:11.200 --> 02:42:15.200]  Ну вот вопрос. За какое время вы тут сделаете этот спуск?
[02:42:15.200 --> 02:42:18.200]  К вопросу о квадрате.
[02:42:46.200 --> 02:42:49.200]  Наверное, там могли быть лишние развилки, да?
[02:42:49.200 --> 02:42:50.200]  Ну вот.
[02:42:50.200 --> 02:42:54.200]  Так, ну начнем с простого. Самое тупое, что можно сделать, это спуститься по самой строке P.
[02:42:54.200 --> 02:42:56.200]  Прямо по одному символу.
[02:42:56.200 --> 02:43:00.200]  Но это будет то от P, это тогда будет заведомый квадрат.
[02:43:00.200 --> 02:43:03.200]  Теперь мы можем воспользоваться тем маленьким приятным свойством.
[02:43:03.200 --> 02:43:06.200]  Мы знаем, что мы точно можем спуститься.
[02:43:06.200 --> 02:43:11.200]  То есть там не получится так, что мы пытаемся прийти по какому-то символу, а он возьми и не пройти.
[02:43:11.200 --> 02:43:20.200]  Это означает, что пока у нас нет развилок, мы можем просто втопить педаль газа и ехать до ближайшей вершины, либо пока у нас длина не закончится.
[02:43:20.200 --> 02:43:25.200]  То есть мы знаем, что мы в следующую букву отправлялись вот в это ребро.
[02:43:25.200 --> 02:43:29.200]  Сколько нам надо пройти? 179. Какова длина ребра? 57.
[02:43:29.200 --> 02:43:33.200]  Давайте телепортируемся в конец и оттуда проходим еще 122.
[02:43:33.200 --> 02:43:38.200]  То есть мы точно знаем, что эти 57 букв совпадут с тем, чем нам надо.
[02:43:38.200 --> 02:43:40.200]  Логично, да?
[02:43:40.200 --> 02:43:49.200]  То есть по факту мы будем работать здесь за то, сколько у нас тут лишних промежуточных вершин на пути образуется.
[02:43:51.200 --> 02:43:56.200]  Это уже лучше, чем за у от п, но пока от квадрата нас не спасает.
[02:43:57.200 --> 02:43:59.200]  Не правда ли?
[02:44:01.200 --> 02:44:08.200]  Потому что вы идете не за количество символов в строке п, а за количество вершин, которые вы на этом пути встретите.
[02:44:08.200 --> 02:44:14.200]  У нас эти промежуточные вершины, когда они образовались, они плохо исчезают обратно.
[02:44:14.200 --> 02:44:18.200]  Как плохо? Вершины вообще не исчезают, я тебе больше скажу.
[02:44:20.200 --> 02:44:27.200]  Но в плане кажется, что прибавляться может много, а вычитаться вроде мало.
[02:44:28.200 --> 02:44:30.200]  Ну тут дело не в этом.
[02:44:30.200 --> 02:44:32.200]  В нашем случае ситуация будет...
[02:44:32.200 --> 02:44:39.200]  Нет, понятно, что мы знаем, что суммарно вершин будет создана мало, не более чем n внутренних вершин будет создана.
[02:44:39.200 --> 02:44:41.200]  Даже от минус один я бы сказал.
[02:44:41.200 --> 02:44:43.200]  Вот это мы уже знаем.
[02:44:45.200 --> 02:44:47.200]  Но фишка в другом.
[02:44:47.200 --> 02:44:56.200]  Я скорее про то, что если мы будем считать суммарное число вершин на пути от корня до нашей вершины, то оно плохо убывает.
[02:44:58.200 --> 02:45:00.200]  Ну да, и ведь действительно.
[02:45:00.200 --> 02:45:06.200]  А давайте посмотрим на промежуточные вершины на этом пути q от корня.
[02:45:06.200 --> 02:45:10.200]  Теперь заметим, что у каждой из этих вершин есть суффиксные ссылки.
[02:45:10.200 --> 02:45:18.200]  И они все, кроме может быть одной этой вот, ведут ровно на этот путь.
[02:45:18.200 --> 02:45:43.200]  То есть получается, на самом деле, до вот этой вот вершины, то есть когда мы от этого вот скачка, получается количество промежуточных вершин, может оно не менее чем сколько их было тут минус один.
[02:45:48.200 --> 02:45:54.200]  Так то же самое, потому что им всем соответствуют строчки, которые являются префиксом вот этой строки q.
[02:45:54.200 --> 02:45:58.200]  И тогда, если они предъявляют один символ, то они все станут префиксами q'
[02:45:58.200 --> 02:46:00.200]  То есть важно, что они в разные еще переходят?
[02:46:00.200 --> 02:46:02.200]  Ну конечно. Ну да, в разные длины.
[02:46:02.200 --> 02:46:07.200]  То есть максимум, что может произойти, это одна из этих строчек могла превратиться в пустую строчку.
[02:46:07.200 --> 02:46:10.200]  И тогда она как бы не промежуточная, а просто корень.
[02:46:10.200 --> 02:46:14.200]  Поэтому тут количество вершин промежуточных могло уменьшиться на одну.
[02:46:14.200 --> 02:46:22.200]  Но не более. То есть оно могло уменьшиться на одну, могло не уменьшиться, могло даже увеличиться.
[02:46:22.200 --> 02:46:34.200]  То есть получается, от этого скачка, смотрите, от этого скачка у вас глубина, глубина, если мерить ее именно в количестве вершин, то есть в дереве, она уменьшилась не более чем на один.
[02:46:34.200 --> 02:46:39.200]  А с каждым таким скачком вперед, эта глубина увеличивается на один.
[02:46:39.200 --> 02:46:44.200]  То есть у нас прикольная ситуация, что сувикс на ссылку может идти в большую глубину, чем мы.
[02:46:44.200 --> 02:46:48.200]  Да, по вершинам в глубину, да, совершенно верно.
[02:46:48.200 --> 02:46:53.200]  То есть конечно по длине пэса это конечно не так, но по глубине вершин так.
[02:46:53.200 --> 02:47:05.200]  То есть получается, смотрите, у нас этот рыжий указатель, можно внимательно смотреть на глубину этого рыжего указателя, но измеренную не в длине пэс, а в вершинах.
[02:47:05.200 --> 02:47:09.200]  Получается, то есть как-то глубина работает.
[02:47:09.200 --> 02:47:14.200]  Когда мы создаем новую вершину и идем в родителя, глубина по факту не поменялась.
[02:47:14.200 --> 02:47:19.200]  Ну, как хотите, можете считать, что она поменялась, можете считать, что она там изменилась на один, это неважно.
[02:47:19.200 --> 02:47:30.200]  То есть изменилась на один, потом она скакнула по сувиксной ссылке и стала не менее чем такая, как была минус один, а потом сделала несколько скачков и каждый раз увеличилась.
[02:47:31.200 --> 02:47:36.200]  Получается, смотрите, такая не совсем стандартный амортизационный анализ, но тем не менее.
[02:47:36.200 --> 02:47:44.200]  Изначально у вас у рыжего указателя глубина очевидно ноль, да, и теперь на каждой итерации у нас происходит следующее.
[02:47:44.200 --> 02:47:54.200]  Мы не более чем два раза уменьшаем глубину на один, а потом делаем сколько-то скачков, каждый из которых увеличивает глубину на один.
[02:47:54.200 --> 02:47:59.200]  При этом более чем n глубина никогда не станет.
[02:47:59.200 --> 02:48:07.200]  Но кажется, из этого следует, что суммарное число вот этих скачков вниз у вас больше чем 3n не будет.
[02:48:18.200 --> 02:48:19.200]  Вот, понятно?
[02:48:20.200 --> 02:48:21.200]  Вот.
[02:48:21.200 --> 02:48:29.200]  То есть можно свести как-то методу потенциала в том виде, в котором он у нас был.
[02:48:29.200 --> 02:48:38.200]  Сказать, что потенциал равен, скажем, текущей длиной строки минус глубина этой вершины.
[02:48:40.200 --> 02:48:42.200]  Ну, чтобы он изначально был ноль, никогда не.
[02:48:42.200 --> 02:48:50.200]  Просто кажется гораздо удобнее вводить чуть-чуть более обобщенный потенциал, у которого начальное значение f0 может быть каким угодно,
[02:48:50.200 --> 02:48:54.200]  и просто говорить, что у нас оценка это типа f0 плюс...
[02:48:54.200 --> 02:48:56.200]  Ну да, можно и так.
[02:48:56.200 --> 02:48:59.200]  Ну а можно уже и не вводить.
[02:48:59.200 --> 02:49:00.200]  Вот.
[02:49:00.200 --> 02:49:02.200]  Ну можно не вводить, а можно просто, да.
[02:49:02.200 --> 02:49:04.200]  Так его и...
[02:49:04.200 --> 02:49:08.200]  Ну, во-первых, глубина, у нас нет понятия высоты обычно в дереве.
[02:49:08.200 --> 02:49:13.200]  Ну нет, если оно и есть, то это как бы расстояние от вершины до листьев.
[02:49:13.200 --> 02:49:18.200]  Но тут как бы еще раз подчеркнем, что здесь мы рассматриваем две разные глубины.
[02:49:18.200 --> 02:49:24.200]  Потому что глубину в суффиксном дереве можно верить как длину пессо, то есть насколько длинной строке можно прийти,
[02:49:24.200 --> 02:49:28.200]  а можно мерить по количеству вершин, промежуточных вершин на пути.
[02:49:28.200 --> 02:49:35.200]  Это две разные глубины, потому что, как оказалось, что суффиксные ссылки всегда уменьшают глубину в смысле пессо, естественно, ровно на 1,
[02:49:35.200 --> 02:49:40.200]  но в смысле количество вершин на пути, глубина может увеличиться вполне.
[02:49:42.200 --> 02:49:43.200]  Вот.
[02:49:43.200 --> 02:49:46.200]  Так что вот так мы ищем суффиксные ссылки.
[02:49:46.200 --> 02:49:52.200]  И выясняется, что эти суффиксные ссылки, оказывается, амортизированы тоже еще-то за линию.
[02:49:52.200 --> 02:49:58.200]  А мы больше ничего, в общем-то, нелинейного, кроме поиска суффиксных ссылок и не делали.
[02:49:58.200 --> 02:49:59.200]  А ну все, победно.
[02:49:59.200 --> 02:50:00.200]  Да.
[02:50:03.200 --> 02:50:04.200]  Как всегда.
[02:50:04.200 --> 02:50:07.200]  В общем, не сильно-то и сложно, если знать все секреты.
[02:50:07.200 --> 02:50:08.200]  Да нет.
[02:50:08.200 --> 02:50:10.200]  Это несложный алгоритм.
[02:50:11.200 --> 02:50:12.200]  Это несложный алгоритм.
[02:50:12.200 --> 02:50:13.200]  Ну да.
[02:50:14.200 --> 02:50:15.200]  Вот.
[02:50:15.200 --> 02:50:16.200]  То есть, единственная проблема, что...
[02:50:16.200 --> 02:50:18.200]  Сколько бы ни было легко писать.
[02:50:18.200 --> 02:50:19.200]  Да.
[02:50:19.200 --> 02:50:20.200]  А тут вот наоборот.
[02:50:20.200 --> 02:50:25.200]  По крайней мере, тут, кажется, может оказаться не сильно тривиально, как это вообще, собственно, воплотить в программу.
[02:50:27.200 --> 02:50:28.200]  Да, неважно.
[02:50:28.200 --> 02:50:29.200]  Ну, как хотите.
[02:50:29.200 --> 02:50:30.200]  Честно скажу.
[02:50:30.200 --> 02:50:31.200]  Скажем так.
[02:50:31.200 --> 02:50:35.200]  Обычно у меня, на самом деле, в программе, подразумевается, что дальше я там просто
[02:50:35.200 --> 02:50:38.200]  либо пишу код на доске, либо открываю компьютер и пишу код там.
[02:50:39.200 --> 02:50:40.200]  Не, ладно.
[02:50:40.200 --> 02:50:41.200]  Если без шуток, то важно.
[02:50:41.200 --> 02:50:42.200]  Давайте.
[02:50:42.200 --> 02:50:43.200]  Ну вот.
[02:50:43.200 --> 02:50:44.200]  Зачем тебе это?
[02:50:44.200 --> 02:50:45.200]  Вот.
[02:50:45.200 --> 02:50:46.200]  То есть, нет.
[02:50:46.200 --> 02:50:47.200]  В принципе, да.
[02:50:47.200 --> 02:50:48.200]  То есть, я могу показать, действительно, как это, как, по крайней мере, по моему мнению,
[02:50:48.200 --> 02:50:49.200]  можно написать.
[02:50:49.200 --> 02:50:50.200]  С такими вопросами можно.
[02:50:50.200 --> 02:50:51.200]  Вот.
[02:50:51.200 --> 02:50:55.200]  Но вы же не будете иногда меня спрашивать, как писать этот код?
[02:50:55.200 --> 02:50:56.200]  Ну, нет.
[02:50:56.200 --> 02:50:57.200]  Ну, могу и попросить, в принципе.
[02:50:57.200 --> 02:50:58.200]  Нет.
[02:50:59.200 --> 02:51:00.200]  Ого.
[02:51:00.200 --> 02:51:01.200]  Отпад.
[02:51:01.200 --> 02:51:02.200]  Комиссия.
[02:51:02.200 --> 02:51:03.200]  Как писать УКО?
[02:51:03.200 --> 02:51:04.200]  Не знаешь?
[02:51:04.200 --> 02:51:05.200]  Вылетай.
[02:51:05.200 --> 02:51:09.200]  Костя писал на комиссии код, а на экзамене, вроде бы, ничего не писали.
[02:51:09.200 --> 02:51:10.200]  Костя писал на комиссии.
[02:51:10.200 --> 02:51:11.200]  Там, правда, передача была.
[02:51:11.200 --> 02:51:12.200]  Комиссия.
[02:51:12.200 --> 02:51:13.200]  Чего, Костя?
[02:51:13.200 --> 02:51:14.200]  Какой Костя?
[02:51:14.200 --> 02:51:15.200]  И в коллеге.
[02:51:15.200 --> 02:51:16.200]  Писал код на комиссии.
[02:51:16.200 --> 02:51:18.200]  Он писал с кем-нибудь ретроанализ.
[02:51:18.200 --> 02:51:20.200]  А, ну, ретроанализ, да.
[02:51:20.200 --> 02:51:23.200]  Но ретроанализ и вот это.
[02:51:23.200 --> 02:51:24.200]  Ну, сравните, ребят.
[02:51:24.200 --> 02:51:27.200]  Я думаю, я вам не открою страшные тайны и скажу, что вот это вот вопрос.
[02:51:27.200 --> 02:51:29.200]  Вот вопросом на три точно не будет.
[02:51:29.200 --> 02:51:32.200]  Вот на хоре или на отел, я еще подумаю.
[02:51:32.200 --> 02:51:35.200]  Ну, идейно тут ничего на отел нет.
[02:51:35.200 --> 02:51:38.200]  Ну, скажем так.
[02:51:38.200 --> 02:51:41.200]  Ну, в смысле, это чистый вопрос на флору, если не просить писать.
[02:51:41.200 --> 02:51:42.200]  Ну, надо смотреть.
[02:51:42.200 --> 02:51:44.200]  Это же зависит от того, как бы, да, потому что там в какой-то момент...
[02:51:44.200 --> 02:51:47.200]  Сделайте сул автомат на отел, пожалуйста, а дальше что-то будет.
[02:51:47.200 --> 02:51:49.200]  Да, совсем доказательствам.
[02:51:49.200 --> 02:51:50.200]  Ага.
[02:51:50.200 --> 02:51:52.200]  Нет, ну, надо смотреть, что там будет.
[02:51:52.200 --> 02:51:53.200]  Да.
[02:51:53.200 --> 02:51:56.200]  Хотя надо смотреть, что там было на самом деле на отел.
[02:51:56.200 --> 02:51:58.200]  А, ну да, сул автомат.
[02:51:58.200 --> 02:52:01.200]  Ну, Галил Сейперас в двух ипостасях.
[02:52:01.200 --> 02:52:02.200]  Да.
[02:52:02.200 --> 02:52:04.200]  Деланы?
[02:52:04.200 --> 02:52:05.200]  Индусы?
[02:52:05.200 --> 02:52:06.200]  Индусы нет.
[02:52:06.200 --> 02:52:07.200]  Нет?
[02:52:07.200 --> 02:52:09.200]  Нет, индусов даже и в экзамене обычно нет.
[02:52:09.200 --> 02:52:14.200]  Нет, индусов обычно нет в экзамене, потому что они всегда были в качестве теоретической задачи в ДЗ, на самом деле.
[02:52:14.200 --> 02:52:15.200]  Да.
[02:52:15.200 --> 02:52:16.200]  Вот.
[02:52:16.200 --> 02:52:18.200]  Ну, сейчас ее там нету, но...
[02:52:18.200 --> 02:52:21.200]  Ну, алхо тракумагнический варьер, вот это все.
[02:52:21.200 --> 02:52:23.200]  Но там, в общем, тоже не самый...
[02:52:23.200 --> 02:52:25.200]  Но это, очевидно, не самый убойный алгоритм в вашей жизни.
[02:52:25.200 --> 02:52:27.200]  Там, собственно, в потоках и посложнее были.
[02:52:27.200 --> 02:52:28.200]  Да.
[02:52:28.200 --> 02:52:29.200]  Так.
[02:52:29.200 --> 02:52:30.200]  Что там еще?
[02:52:30.200 --> 02:52:31.200]  Деланы?
[02:52:31.200 --> 02:52:32.200]  Нет.
[02:52:32.200 --> 02:52:34.200]  Теорема Карзанова это на хор.
[02:52:34.200 --> 02:52:35.200]  Так, естественно.
[02:52:35.200 --> 02:52:36.200]  Так.
[02:52:36.200 --> 02:52:39.200]  А вот всякие вот Деланы и Вороной, вот это да.
[02:52:39.200 --> 02:52:40.200]  Это, скорее, конечно, на отел.
[02:52:40.200 --> 02:52:41.200]  Да.
[02:52:41.200 --> 02:52:44.200]  Ну, там, точнее так, до какого-то момента там, наверное, на хор.
[02:52:44.200 --> 02:52:46.200]  Ну, тут тоже, на самом деле, будет вопрос наут.
[02:52:46.200 --> 02:52:49.200]  Что такое суффиксное дерево вообще в принципе?
[02:52:49.200 --> 02:52:51.200]  Построение закладов.
[02:52:51.200 --> 02:52:52.200]  Ну, естественно, да.
[02:52:52.200 --> 02:52:54.200]  А вот сам алгоритм Уканина, да, он может оказаться есть.
[02:52:54.200 --> 02:52:55.200]  Так, а который час вообще?
[02:52:55.200 --> 02:52:56.200]  Что?
[02:52:56.200 --> 02:52:57.200]  Который час?
[02:52:57.200 --> 02:52:58.200]  12-14.
[02:52:58.200 --> 02:53:00.200]  А, то есть пришло время еще одного перерыва, да?
[02:53:00.200 --> 02:53:01.200]  Да.
[02:53:01.200 --> 02:53:02.200]  Да.
[02:53:02.200 --> 02:53:03.200]  Вот.
[02:53:03.200 --> 02:53:04.200]  Так нормально?
[02:53:04.200 --> 02:53:05.200]  Да, так нормально.
[02:53:05.200 --> 02:53:06.200]  Так.
[02:53:06.200 --> 02:53:07.200]  Ну, поехали.
[02:53:07.200 --> 02:53:08.200]  Значит, как же у нас будет...
[02:53:08.200 --> 02:53:09.200]  Значит, поехали.
[02:53:09.200 --> 02:53:10.200]  Класс.
[02:53:10.200 --> 02:53:11.200]  Саффикс 3.
[02:53:11.200 --> 02:53:15.200]  Ну, такое самое простое, что можно сделать.
[02:53:15.200 --> 02:53:16.200]  Так.
[02:53:16.200 --> 02:53:18.200]  Ну, а первое, давайте заведем...
[02:53:18.200 --> 02:53:20.200]  Придется завести структурку ноде.
[02:53:21.200 --> 02:53:23.200]  Как завести структурку ноде?
[02:53:23.200 --> 02:53:25.200]  Что у нас будет в вершине?
[02:53:28.200 --> 02:53:29.200]  Так.
[02:53:29.200 --> 02:53:30.200]  Ну, давайте поймем.
[02:53:30.200 --> 02:53:31.200]  Давайте соберем у нас кучку.
[02:53:31.200 --> 02:53:33.200]  Что мы хотим в вершине вообще хранить?
[02:53:33.200 --> 02:53:34.200]  В позиции.
[02:53:34.200 --> 02:53:36.200]  Э, какую позицию?
[02:53:36.200 --> 02:53:37.200]  Какую позицию?
[02:53:41.200 --> 02:53:42.200]  В сдвигах.
[02:53:42.200 --> 02:53:43.200]  Угу.
[02:53:44.200 --> 02:53:45.200]  Какого сдвига?
[02:53:45.200 --> 02:53:47.200]  В вершине, а не в позиции.
[02:53:47.200 --> 02:53:48.200]  В вершине, а не в позиции.
[02:53:51.200 --> 02:53:53.200]  Ну, возможно, на разветвление.
[02:53:53.200 --> 02:53:55.200]  Так, наверное, переходы.
[02:53:55.200 --> 02:53:57.200]  Ну, тут-то, не имеет смысла, на самом деле, сразу договориться.
[02:53:57.200 --> 02:53:59.200]  А как мы будем хранить позицию?
[02:53:59.200 --> 02:54:00.200]  Так.
[02:54:00.200 --> 02:54:04.200]  Ну, то есть понятно, что у нас, конечно, вершины мы и в явном виде дерева не будем хранить по указателям.
[02:54:04.200 --> 02:54:07.200]  Конечно, мы будем все-таки вершинке хранить в каком-то векторе.
[02:54:07.200 --> 02:54:13.200]  То есть я вот сразу вам заранее скажу, что у меня тут будет вектор ноди-нодис.
[02:54:15.200 --> 02:54:16.200]  Вот.
[02:54:18.200 --> 02:54:21.200]  А вы прям очень хотите, да?
[02:54:21.200 --> 02:54:25.200]  Нет, ну просто вы так сказали, как будто это само собой разумеющееся.
[02:54:28.200 --> 02:54:29.200]  Ну, потому что...
[02:54:29.200 --> 02:54:32.200]  Ну, на самом деле, да, не то, чтобы прямо само собой разумеется, конечно.
[02:54:33.200 --> 02:54:36.200]  Я не уверен, что много проблем по памяти.
[02:54:36.200 --> 02:54:38.200]  Нет, проблем по памяти не будет.
[02:54:38.200 --> 02:54:39.200]  Может быть там...
[02:54:39.200 --> 02:54:41.200]  Нет, ну как хотите.
[02:54:41.200 --> 02:54:42.200]  Хотите, можем и на указателях написать.
[02:54:42.200 --> 02:54:43.200]  Не проблема.
[02:54:43.200 --> 02:54:45.200]  Да нет, нет, просто чисто.
[02:54:45.200 --> 02:54:46.200]  Вот.
[02:54:52.200 --> 02:54:53.200]  Ну, на самом деле, смотрите.
[02:54:53.200 --> 02:54:55.200]  Ну, обычно как задавать позицию?
[02:54:56.200 --> 02:55:00.200]  Ну, обычно позиция, скажем так, классический вариант задается очень просто.
[02:55:00.200 --> 02:55:03.200]  Она задается, куда мы идем.
[02:55:03.200 --> 02:55:11.200]  То есть, так сказать, vertex2 и расстояние до.
[02:55:11.200 --> 02:55:14.200]  То есть удобно для позиции просто говорить, что мы идем вот в эту вершину.
[02:55:14.200 --> 02:55:18.200]  Ну, в вершину у нас всегда идет одно ребро, поэтому достаточно хранить расстояние.
[02:55:19.200 --> 02:55:21.200]  А вот информация о самом ребре.
[02:55:22.200 --> 02:55:24.200]  Что там, кто-то еще там собирается прийти?
[02:55:26.200 --> 02:55:27.200]  Уже нет?
[02:55:28.200 --> 02:55:30.200]  Не, просто ты там активно так переписываешься.
[02:55:30.200 --> 02:55:35.200]  Может там кто-то еще сейчас на эту финалочку сейчас решил ломануться из долгопробного, не знаю.
[02:55:36.200 --> 02:55:37.200]  Быстрее едет.
[02:55:38.200 --> 02:55:39.200]  Да, да, да.
[02:55:39.200 --> 02:55:41.200]  Электричка толкает.
[02:55:42.200 --> 02:55:43.200]  Да, да, да.
[02:55:44.200 --> 02:55:50.200]  Прямо быстренько это добежал до лобни, там разбудил в депо, собственно вынул электричку, понесся.
[02:55:54.200 --> 02:55:57.200]  Так вот, но в вершине нам придется много чего хранить.
[02:55:58.200 --> 02:56:01.200]  Но начнем с того, что нам придется хранить, конечно, детей.
[02:56:03.200 --> 02:56:04.200]  А теперь внимание, вопрос.
[02:56:05.200 --> 02:56:08.200]  Хорошо, переходы из мапчика, пусть будет мапчик для простоты.
[02:56:09.200 --> 02:56:10.200]  У нас будет из чаров.
[02:56:10.200 --> 02:56:11.200]  Из чаров?
[02:56:13.200 --> 02:56:14.200]  Куда?
[02:56:19.200 --> 02:56:21.200]  Ну, там нужно хранить длину ребра.
[02:56:22.200 --> 02:56:23.200]  Нам хуже.
[02:56:24.200 --> 02:56:28.200]  Нам нужно хранить не длину ребра, нам нужно хранить его под строку этого ребра.
[02:56:34.200 --> 02:56:36.200]  Не, ну пару, например.
[02:56:36.200 --> 02:56:37.200]  Ну вот.
[02:56:38.200 --> 02:56:40.200]  Но на самом деле, ну пару.
[02:56:41.200 --> 02:56:45.200]  Какую пару? Нет, ну пару можно хранить, нет, ну пару тут, как бы, какую пару?
[02:56:46.200 --> 02:56:52.200]  Как минимум, куда переходить, в какую вершину мы приходим хранить, переходить придется так или иначе, правда?
[02:56:55.200 --> 02:56:56.200]  Какую структуру?
[02:56:56.200 --> 02:56:57.200]  Ну, transition.
[02:56:58.200 --> 02:56:59.200]  Типа переход.
[02:57:00.200 --> 02:57:01.200]  Transition очень долго писать.
[02:57:02.200 --> 02:57:03.200]  Заведи структуру tr.
[02:57:04.200 --> 02:57:06.200]  Ну, можно. Ну, смотри, знаете, что-то у меня редкий случай.
[02:57:07.200 --> 02:57:11.200]  Обычно я, конечно, я часто, честно говоря, вот вообще пишу, когда у меня прям здесь прям позиционы находятся.
[02:57:12.200 --> 02:57:14.200]  Почему находится позицион?
[02:57:15.200 --> 02:57:19.200]  Так, ну во-первых, да, кстати, да, естественно, как вы понимаете, саму строчку я буду здесь хранить.
[02:57:20.200 --> 02:57:21.200]  Вот.
[02:57:22.200 --> 02:57:24.200]  А также еще в самой ноде.
[02:57:25.200 --> 02:57:26.200]  Вот давайте.
[02:57:27.200 --> 02:57:30.200]  Еще мне придется хранить саму подстрочку, по которой я вхожу в себя.
[02:57:31.200 --> 02:57:33.200]  Мне это по-любому придется откуда-то знать.
[02:57:34.200 --> 02:57:36.200]  То есть lr.
[02:57:39.200 --> 02:57:40.200]  Ну вот.
[02:57:41.200 --> 02:57:43.200]  А еще придется хранить, видимо, родителя.
[02:57:44.200 --> 02:57:46.200]  Потому что как-то без родителя все-таки никуда.
[02:57:47.200 --> 02:57:51.200]  Ну, когда мы будем распиливать ребро, родителя нам узнать придется.
[02:57:51.200 --> 02:57:58.200]  Потому что, как вы уже догадываетесь, у нас там ферст нод сув, то есть там ферст нод лиф, мы будем хранить все-таки в позиционе.
[02:58:00.200 --> 02:58:01.200]  Что не так?
[02:58:03.200 --> 02:58:04.200]  Нод это вершина.
[02:58:05.200 --> 02:58:06.200]  Да.
[02:58:07.200 --> 02:58:09.200]  А где мы храним номер этой вершины?
[02:58:10.200 --> 02:58:11.200]  В смысле?
[02:58:13.200 --> 02:58:17.200]  Ну вообще, в позиционе мы храним вот вертекс ту, это номер вершины.
[02:58:18.200 --> 02:58:19.200]  Номер вот в этом векторе.
[02:58:20.200 --> 02:58:21.200]  Это понятно.
[02:58:22.200 --> 02:58:23.200]  Ну, а вопрос тогда в чем?
[02:58:28.200 --> 02:58:29.200]  Ну вот.
[02:58:30.200 --> 02:58:31.200]  Сейчас-то я вот пишу позицион.
[02:58:32.200 --> 02:58:39.200]  На самом деле, что-то у меня сейчас возникает ощущение, что в принципе достаточно хранить, собственно, знаете, я даже так буду писать.
[02:58:40.200 --> 02:58:41.200]  T vertex.
[02:58:42.200 --> 02:58:43.200]  Ладно.
[02:58:44.200 --> 02:58:45.200]  Или в нашем случае T ноде.
[02:58:46.200 --> 02:58:48.200]  А то у нас что-то синонимия какая-то пошла.
[02:58:50.200 --> 02:58:51.200]  Вот давайте избавляться.
[02:58:53.200 --> 02:58:54.200]  Вот.
[02:58:55.200 --> 02:58:56.200]  Поэтому тут int lr.
[02:58:57.200 --> 02:58:58.200]  Тут T ноде.
[02:59:02.200 --> 02:59:04.200]  Ну, T, хотя нет, что-то тоже плохо, да?
[02:59:05.200 --> 02:59:08.200]  А то как-то ноде это стракта, T ноде это какой-то int потенциально.
[02:59:15.200 --> 02:59:16.200]  Ну даже на.
[02:59:17.200 --> 02:59:18.200]  Вот.
[02:59:18.200 --> 02:59:19.200]  Как-то да, путается какая-то немножко.
[02:59:20.200 --> 02:59:21.200]  Ну ладно.
[02:59:23.200 --> 02:59:26.200]  Значит да, int там lr у меня пусть будет просто индексами.
[02:59:27.200 --> 02:59:34.200]  То есть это под строка, но имеется в виду, как бы под строка, вида именно от l включительно до r не включительно.
[02:59:36.200 --> 02:59:37.200]  Вот.
[02:59:38.200 --> 02:59:39.200]  Так lr parent.
[02:59:40.200 --> 02:59:41.200]  Так.
[02:59:42.200 --> 02:59:43.200]  А что-то еще нужно?
[02:59:46.200 --> 02:59:47.200]  А!
[02:59:47.200 --> 02:59:48.200]  Немная ссылка.
[02:59:52.200 --> 02:59:53.200]  Вот.
[02:59:54.200 --> 02:59:55.200]  Суфта.
[02:59:56.200 --> 02:59:57.200]  Вот.
[02:59:58.200 --> 02:59:59.200]  Значит, смотрите.
[03:00:00.200 --> 03:00:02.200]  Как у нас теперь нодис будет работать?
[03:00:03.200 --> 03:00:06.200]  Значит, что нам вообще нужно в каждом m3?
[03:00:07.200 --> 03:00:10.200]  Нам нужно хранить строку, нам нужно хранить сами нодис, то есть сами вершинки.
[03:00:11.200 --> 03:00:12.200]  И, конечно же, его величество.
[03:00:13.200 --> 03:00:14.200]  Сейчас.
[03:00:15.200 --> 03:00:20.200]  А lr это какая под строка подробитель от у нас?
[03:00:21.200 --> 03:00:22.200]  Да.
[03:00:26.200 --> 03:00:27.200]  Вот.
[03:00:28.200 --> 03:00:29.200]  Все?
[03:00:30.200 --> 03:00:31.200]  Да.
[03:00:31.200 --> 03:00:32.200]  Ой, да.
[03:00:32.200 --> 03:00:33.200]  Вот.
[03:00:34.200 --> 03:00:39.200]  Так, вроде, кстати, как мы уже выяснили, а больше нам, в общем-то, ничего и не надо.
[03:00:40.200 --> 03:00:41.200]  Вроде.
[03:00:42.200 --> 03:00:43.200]  Я надеюсь.
[03:00:44.200 --> 03:00:46.200]  Но для консистентности вроде больше ничего не надо.
[03:00:47.200 --> 03:00:49.200]  Но давайте теперь думать.
[03:00:50.200 --> 03:00:52.200]  Что нам вообще потребуется?
[03:00:56.200 --> 03:00:57.200]  Так.
[03:00:57.200 --> 03:00:58.200]  Ну, а первое.
[03:00:58.200 --> 03:01:01.200]  Давайте реализуем, как всегда, все с конца.
[03:01:02.200 --> 03:01:07.200]  То есть, ну, во-первых, у нас будет void pushback, так сказать.
[03:01:12.200 --> 03:01:13.200]  Вот.
[03:01:14.200 --> 03:01:15.200]  Ну, точнее.
[03:01:21.200 --> 03:01:22.200]  Ну, можно так.
[03:01:23.200 --> 03:01:24.200]  Вот так.
[03:01:24.200 --> 03:01:29.200]  А есть какие-то аспекты, в которых это лучше, чем суффиксные автоматы?
[03:01:32.200 --> 03:01:33.200]  Скажем так.
[03:01:33.200 --> 03:01:34.200]  Ну, скажем так.
[03:01:34.200 --> 03:01:38.200]  Могут встретиться задачи, которые с суффиксным деревом решаются, а с суффиксным автоматом нет.
[03:01:39.200 --> 03:01:41.200]  А такие есть в контакте?
[03:01:43.200 --> 03:01:44.200]  Дай бог памяти.
[03:01:45.200 --> 03:01:47.200]  Но если там есть задача 3 substring, то да.
[03:01:48.200 --> 03:01:49.200]  Ну, да.
[03:01:50.200 --> 03:01:51.200]  Дай бог памяти.
[03:01:52.200 --> 03:01:54.200]  Но если там есть задача 3 substring, то да.
[03:01:55.200 --> 03:01:59.200]  Другой вопрос, что вы можете суффиксное дерево построить не вот так, а через суффиксный автомат.
[03:02:00.200 --> 03:02:02.200]  Если у нас сегодня останется время, мы даже сегодня обсудим.
[03:02:03.200 --> 03:02:04.200]  Вот.
[03:02:05.200 --> 03:02:06.200]  Так вот.
[03:02:06.200 --> 03:02:07.200]  Значит.
[03:02:07.200 --> 03:02:09.200]  Итак, как мы будем делать pushback символа?
[03:02:12.200 --> 03:02:13.200]  Так.
[03:02:13.200 --> 03:02:16.200]  Ну, во-первых, давайте сразу скажем int равно s length.
[03:02:19.200 --> 03:02:21.200]  И, соответственно, что мы теперь скажем?
[03:02:22.200 --> 03:02:24.200]  s.pushback.
[03:02:26.200 --> 03:02:27.200]  Значит, shard.
[03:02:29.200 --> 03:02:30.200]  Вот.
[03:02:32.200 --> 03:02:33.200]  Ну, типа того.
[03:02:38.200 --> 03:02:39.200]  Значит, ну, теперь.
[03:02:40.200 --> 03:02:41.200]  Теперь мы будем говорить.
[03:02:49.200 --> 03:02:51.200]  Ну, дальше у нас будет устроено.
[03:02:52.200 --> 03:02:53.200]  Так.
[03:02:54.200 --> 03:02:55.200]  А теперь давайте думать.
[03:02:55.200 --> 03:02:56.200]  Как вы думаете?
[03:02:57.200 --> 03:02:58.200]  А теперь вот выбирайте.
[03:02:58.200 --> 03:03:03.200]  Будем ли мы хранить эту лишнюю вершину, в которую идет суффиксная ссылка из корни, или не будем?
[03:03:14.200 --> 03:03:15.200]  Нет.
[03:03:16.200 --> 03:03:17.200]  Нет?
[03:03:19.200 --> 03:03:20.200]  Есть другие пожелания?
[03:03:22.200 --> 03:03:23.200]  Всем да.
[03:03:23.200 --> 03:03:24.200]  Ой.
[03:03:24.200 --> 03:03:25.200]  Понятно.
[03:03:25.200 --> 03:03:26.200]  Да.
[03:03:26.200 --> 03:03:27.200]  Всем.
[03:03:27.200 --> 03:03:28.200]  Ладно.
[03:03:28.200 --> 03:03:29.200]  Нет.
[03:03:29.200 --> 03:03:30.200]  Убал я как-то.
[03:03:30.200 --> 03:03:31.200]  Нет.
[03:03:31.200 --> 03:03:32.200]  Сейчас вопрос в том, будем ли мы применять этот лайфхак?
[03:03:32.200 --> 03:03:33.200]  Ну, давайте применим.
[03:03:33.200 --> 03:03:34.200]  Нет.
[03:03:34.200 --> 03:03:35.200]  Вот для этого.
[03:03:35.200 --> 03:03:36.200]  Это надо просто сейчас вот, смотрите.
[03:03:36.200 --> 03:03:37.200]  Дело в том, что начнем мы вот с чего.
[03:03:37.200 --> 03:03:42.200]  Видимо, придется начать с инициализации.
[03:03:42.200 --> 03:03:43.200]  Просто вот пустое.
[03:03:43.200 --> 03:03:44.200]  Да.
[03:03:44.200 --> 03:03:47.200]  То есть даже не инициализация, а такой конструктор.
[03:03:49.200 --> 03:03:50.200]  И пишем.
[03:03:50.200 --> 03:03:51.200]  С у нас пустое.
[03:03:53.200 --> 03:03:55.200]  А вот, а вот что такое нодис?
[03:03:55.200 --> 03:03:56.200]  Вопрос.
[03:03:58.200 --> 03:03:59.200]  То есть у нас два варианта.
[03:03:59.200 --> 03:04:02.200]  Либо мы создадем только один коринг, либо мы эту фиктивную вершину сразу создаем.
[03:04:08.200 --> 03:04:09.200]  Вот.
[03:04:09.200 --> 03:04:10.200]  Ну ладно.
[03:04:10.200 --> 03:04:13.200]  Значит, если мы не хотим, то тогда, значит, создаем только одну вершину.
[03:04:15.200 --> 03:04:16.200]  Ну вот.
[03:04:16.200 --> 03:04:17.200]  Ну я это люблю писать вот так.
[03:04:18.200 --> 03:04:20.200]  Значит, в ноде мы пишем.
[03:04:20.200 --> 03:04:21.200]  Значит, корень это что такое?
[03:04:21.200 --> 03:04:23.200]  Значит, мапчик из него, естественно, пустой.
[03:04:24.200 --> 03:04:26.200]  LR пусть будет 00.
[03:04:27.200 --> 03:04:28.200]  Parent нет.
[03:04:28.200 --> 03:04:30.200]  Суффиксной ссылки нет.
[03:04:33.200 --> 03:04:34.200]  Вот.
[03:04:34.200 --> 03:04:35.200]  Все.
[03:04:37.200 --> 03:04:40.200]  И как вы думаете, к чему равен first not leave?
[03:04:43.200 --> 03:04:44.200]  Да.
[03:04:44.200 --> 03:04:45.200]  Ну да.
[03:04:45.200 --> 03:04:46.200]  0 и 0.
[03:04:46.200 --> 03:04:47.200]  Ну да, логично.
[03:04:49.200 --> 03:04:51.200]  Да, поэтому мы всегда считаем, что мы не корень.
[03:04:54.200 --> 03:04:55.200]  Да.
[03:04:55.200 --> 03:04:56.200]  Корень.
[03:04:57.200 --> 03:04:58.200]  Корень не лист.
[03:05:00.200 --> 03:05:01.200]  Вот.
[03:05:01.200 --> 03:05:02.200]  Ну а теперь пишем.
[03:05:06.200 --> 03:05:07.200]  Значит, теперь дальше работаем так.
[03:05:07.200 --> 03:05:10.200]  Ну как у нас устроен этот поход по символчару?
[03:05:10.200 --> 03:05:13.200]  Пока не, вот такие функции лучше сразу прописывать.
[03:05:13.200 --> 03:05:18.200]  Пока не can go из позиции first not leave.
[03:05:19.200 --> 03:05:20.200]  Вот.
[03:05:21.200 --> 03:05:26.200]  Ну мы в будущем просто будем знать, что мы как бы по позиции символа можем понять, можем ли мы по нему пройти.
[03:05:26.200 --> 03:05:28.200]  И более того, даже пройти мы эту отдельную функцию напишем.
[03:05:30.200 --> 03:05:31.200]  Вот.
[03:05:31.200 --> 03:05:32.200]  Вот.
[03:05:32.200 --> 03:05:34.200]  Напишем while can go.
[03:05:37.200 --> 03:05:38.200]  Вот.
[03:05:39.200 --> 03:05:41.200]  Значит, дальше у нас будет работать так.
[03:05:42.200 --> 03:05:43.200]  Int way.
[03:05:43.200 --> 03:05:44.200]  Ну вот.
[03:05:44.200 --> 03:05:45.200]  Значит, смотрите.
[03:05:45.200 --> 03:05:50.200]  Значит, в этой позиции теперь, раз мы ничего не можем сделать, значит, надо сделать переход из нее по символу q, правда?
[03:05:51.200 --> 03:05:52.200]  Здравствуй.
[03:05:54.200 --> 03:05:55.200]  Как мы это будем делать?
[03:05:55.200 --> 03:06:04.200]  Ну во-первых, начнем с того, что вершина v у нас, скажем, что это build nodi if need at first not leave.
[03:06:08.200 --> 03:06:09.200]  Вот.
[03:06:11.200 --> 03:06:13.200]  То есть она будет говорить так.
[03:06:13.200 --> 03:06:15.200]  Я хочу, чтобы у меня в этой позиции была вершина.
[03:06:15.200 --> 03:06:21.200]  То есть, если она и так там есть, то мы возвращаем ее в номер, а если нет, то мы строим новую вершину и ее там создаем.
[03:06:23.200 --> 03:06:24.200]  Ну вот.
[03:06:24.200 --> 03:06:25.200]  Yeah.
[03:06:26.200 --> 03:06:27.200]  Вот.
[03:06:28.200 --> 03:06:29.200]  So what's next?
[03:06:29.200 --> 03:06:31.200]  Значит, создали эту вершину v.
[03:06:32.200 --> 03:06:35.200]  Теперь из вершины v добавляем новое ребро.
[03:06:36.200 --> 03:06:42.200]  То есть, прям тут честно, nodis от v точка children.
[03:06:47.200 --> 03:06:50.200]  То есть children от q равно чему?
[03:06:50.200 --> 03:06:52.200]  И какой номер этой новой вершины будет?
[03:06:53.200 --> 03:06:54.200]  Not size.
[03:06:54.200 --> 03:06:55.200]  Совершенно верно.
[03:06:56.200 --> 03:06:59.200]  Так, вообще этой вершины пока нету.
[03:07:01.200 --> 03:07:02.200]  Ну понятно.
[03:07:02.200 --> 03:07:03.200]  Но мы ее сейчас заведем.
[03:07:05.200 --> 03:07:06.200]  Pushback.
[03:07:06.200 --> 03:07:07.200]  Pushback.
[03:07:07.200 --> 03:07:08.200]  Пушбек.
[03:07:08.200 --> 03:07:09.200]  Пушбек.
[03:07:09.200 --> 03:07:10.200]  Пушбек.
[03:07:10.200 --> 03:07:11.200]  Пушбек.
[03:07:11.200 --> 03:07:12.200]  Пушбек.
[03:07:12.200 --> 03:07:13.200]  Пушбек.
[03:07:13.200 --> 03:07:14.200]  Пушбек.
[03:07:14.200 --> 03:07:15.200]  Пушбек.
[03:07:15.200 --> 03:07:16.200]  Пушбек.
[03:07:16.200 --> 03:07:17.200]  Пушбек.
[03:07:17.200 --> 03:07:18.200]  Пушбек.
[03:07:18.200 --> 03:07:19.200]  Пушбек.
[03:07:19.200 --> 03:07:20.200]  Пушбек.
[03:07:23.200 --> 03:07:24.200]  Пожалуйста.
[03:07:25.200 --> 03:07:27.200]  Значит, ну мапчик там пустой.
[03:07:27.200 --> 03:07:29.200]  А что там вообще должно быть, давайте вспомним.
[03:07:30.200 --> 03:07:33.200]  Так, должен быть children, должны быть ele.
[03:07:33.200 --> 03:07:34.200]  Чему равны ele?
[03:07:36.200 --> 03:07:37.200]  Ну, ка ваши ставочки?
[03:07:41.200 --> 03:07:43.200]  Под строка, в которую мы входим в эту вершину.
[03:07:43.200 --> 03:07:52.200]  какая была
[03:07:52.200 --> 03:08:07.440]  но n мы сохранили вот я люблю что это это наценный символ я вот специально ровно в этом и ровно так
[03:08:07.440 --> 03:08:18.480]  это сохранил да так и скажем инфинити ну может там констану вот так что у нас там дальше
[03:08:18.480 --> 03:08:29.160]  parent и суф так кто не у родитель мы это кто в и тут конечно минус один по суфиксной ссылке
[03:08:30.160 --> 03:08:36.000]  так вот здесь есть кстати сразу предупреждаю будет у нас маленькая подлянчика
[03:08:36.000 --> 03:08:51.520]  built но да и в нит не будет строить суфиксную ссылку вот такой чит неожиданный вот и дальше
[03:08:52.000 --> 03:09:07.840]  вот ну вот так вот так а дальше теперь мы из этой вершины вы должны скакнуть чего не будет
[03:09:07.840 --> 03:09:15.160]  потому что возможно нам придется рекурсивно эту суфиксную ссылку очень долго строить
[03:09:15.160 --> 03:09:26.400]  ну может в принципе можно но знаете почему-то хоть потому что может так случиться что тебе
[03:09:26.400 --> 03:09:31.160]  надо как бы у этой решения построить суфиксную ссылку там она находится на середине ребра поэтому
[03:09:31.160 --> 03:09:36.160]  ты там создаешь новую вершину значит тебе оттуда придется построить суфикс нет ну точно так
[03:09:36.160 --> 03:09:42.560]  перспективе то есть тебе все равно придется делать так тоже можно сделать но я честно я почему-то
[03:09:42.560 --> 03:09:50.480]  интуитивно я хочу это вы избегать поэтому я сделаю это линьева теперь то есть по идее я
[03:09:50.480 --> 03:09:59.800]  дальше должен был написать что-нибудь вроде фест нот лиф равно просто позицион от значит
[03:09:59.800 --> 03:10:08.920]  вот так я напишу суф вот так я напишу даже чтобы было понятно что это метод гет суф значит от
[03:10:08.920 --> 03:10:18.480]  в запятая 0 просто вот эту вершину суфиксной ссылки перейти то есть у меня это будет функция
[03:10:18.480 --> 03:10:23.040]  которая будет то есть дайте вообще в принципе удобно бывает такие функции сделать потому что
[03:10:23.040 --> 03:10:29.120]  чтобы функция сама полезла им салон одеса отве точка суф вот это все не тур вот давайте
[03:10:29.120 --> 03:10:35.120]  слушать вот или дано соответственно то есть она внутри себя скажу если она минус один значит
[03:10:35.120 --> 03:10:42.360]  там построить эту суфиксную ссылку если нет то нет это мы сделаем в будущем вот но это но на
[03:10:42.360 --> 03:10:49.800]  самом деле такое присваивание сделать недостаточно почему потому что может так случиться что как бы
[03:10:49.800 --> 03:10:55.400]  суфиксной ссылки не существует по идейным причинам идейная причина называется а вдруг в корень
[03:10:55.400 --> 03:11:07.800]  вот поэтому так и напишем если вы у нас равно root вот я тут специально пишу константа потому
[03:11:07.800 --> 03:11:15.680]  что если вы неожиданно вот то есть если она root то как бы то тогда идея такая first not
[03:11:16.280 --> 03:11:26.280]  тогда в явном виде пропишем хотя она и так она равна явно этому и после этого мы делаем
[03:11:26.280 --> 03:11:33.320]  ретурн вот в противном случае мы переходим по суфиксной ссылке while продолжается почему я
[03:11:33.320 --> 03:11:49.960]  это делаю я хочу после while сделать first not leaf равно go от first not leaf вот то есть как бы то
[03:11:49.960 --> 03:11:55.560]  есть видите то есть как бы и вот то есть в принципе я мог бы тут этого ретурна не делать витя то есть
[03:11:56.120 --> 03:12:03.480]  очень важно что если я тут напишу бряк это будет ошибка понимаете да то есть бряк я
[03:12:03.480 --> 03:12:08.040]  здесь право не имею писать потому что я как бы сделаю тут ретурн чтобы избежать вот этого вот
[03:12:08.040 --> 03:12:16.040]  вот вот в принципе в общем-то основные идеи алгоритма то есть так идеи алгоритма
[03:12:16.040 --> 03:12:25.560]  скелетик я уже написал теперь пошли писать всякие технические вещи так что нам надо
[03:12:25.560 --> 03:12:40.120]  написать ну давайте начнем с функции can go а я тут забыл приват паблик радость чего
[03:12:40.120 --> 03:12:46.720]  на хит поехали внимание внимание смотрите сейчас будет ну вот и так
[03:12:46.720 --> 03:13:03.400]  bull can go от из вершины из какой-то там position пост charge вот значит смотреть
[03:13:03.400 --> 03:13:17.040]  значит смотрите ну тут два у меня два случая если пост точка дист не равен нулю то ретурн
[03:13:17.040 --> 03:13:28.960]  ретурн get символ от пост равно что ну допустим есть функция get символ которая по позиции
[03:13:28.960 --> 03:13:37.000]  внимание позиции на ребре который не совпадает с вершиной дает этот единственный символ вот
[03:13:37.000 --> 03:13:41.480]  но в противном случае что нам надо сделать ретурн
[03:13:41.480 --> 03:14:07.760]  чего где багов каких багов нет пока да правда выяснилось что я тут еще породил какие-то
[03:14:07.760 --> 03:14:13.200]  функции на это просто пишу такой код более понятный то есть может быть там такой таком
[03:14:13.200 --> 03:14:26.640]  контесте конечно можно написать коты и попроще дети вершины потому что в этом случае позиции
[03:14:26.640 --> 03:14:30.240]  позиция находится в вершине значит я должен палить детей сказать есть у меня ребенок в
[03:14:30.240 --> 03:14:37.440]  который идет переход по символу чи нет просто знаете вот бывает очень удобно сделать вот как
[03:14:37.440 --> 03:14:46.800]  мап от цитрица такой чар инт ссылочка то с этим надо очень аккуратно пользоваться но этим прям
[03:14:46.800 --> 03:15:05.560]  хочется взять вот children int v вот ретурн нодис от в точка children более того дайте часто бывает
[03:15:05.560 --> 03:15:12.960]  вообще сейчас я вот я даже заранее создам чтобы было удобно то есть еще им вот такой
[03:15:13.040 --> 03:15:23.960]  еще можно написать то есть для чего я это делаю чтобы мне потом было удобно переприсваивать
[03:15:23.960 --> 03:15:34.240]  вот то есть можно здесь parent вот ну и как вы уже догадываетесь если это скопи пащу и сделаю
[03:15:34.240 --> 03:15:38.560]  из этого сув потому что суфта мне придется переприсваивать я просто не хочу везде писать
[03:15:38.560 --> 03:15:47.360]  но десат бла бла бла точка суфт равно там вот это все безобразие вот т.е. children
[03:15:47.360 --> 03:15:51.600]  нод а ну и children в общем-то у меня отправляется в эту шкопилочку
[03:15:59.600 --> 03:16:05.320]  так теперь у меня отправляется еще есть функция get символ давайте сразу ее закроем до чар
[03:16:05.320 --> 03:16:21.160]  get символ от позицион позицион я сказал поз так ну а первых давайте для безопасности
[03:16:21.160 --> 03:16:26.640]  скажем ассерт пост точка дист ту больше либо там больше нуля
[03:16:26.640 --> 03:16:42.600]  вот ну и надо ретурн теперь с от чего а вот скажите как мне теперь выкопать этот символ по позиции
[03:16:42.600 --> 03:17:07.360]  ну а именно взять конец и сдвинуться на поз точка дист да да да здесь я даже вон там
[03:17:07.920 --> 03:17:15.360]  функцию на эре конечно заводить не буду хотя в принципе морга вот то есть видите как хорошо
[03:17:15.360 --> 03:17:21.320]  вот это преимущество полу интервалы здесь я не должен плюс-минус единичками мучиться вот
[03:17:21.320 --> 03:17:36.040]  так что получается кен го реализовали понятно да ну вот теперь давайте реализуем функцию го
[03:17:36.040 --> 03:17:52.280]  так здесь выгодно наоборот здесь выгодно закончить сказок что как бы если позиция у вас не нулевая то
[03:17:52.280 --> 03:18:01.200]  надо просто просто вычесть из диста единицу шагу это будет такая небезопасная функция в том
[03:18:01.200 --> 03:18:07.600]  плане что она будет подозревать что пройти по этому символу точно можно мы это знаем
[03:18:07.600 --> 03:18:17.760]  понимаете да вот но теперь возникает проблема что если позиции была на ребре то есть расстояние
[03:18:17.760 --> 03:18:22.680]  до вершины у нее адекват какой-то больше нуля то надо просто вычислить единицу и не париться но
[03:18:22.680 --> 03:18:28.520]  если мы находимся в вершине то надо выйти на то надо выйти на какую-то новую дорогу и на этой
[03:18:28.520 --> 03:18:42.200]  дороге сделать один шаг правда значит поехали значит если оказалось пост точка дисту равно
[03:18:42.200 --> 03:18:52.680]  нулю но за что нам тут остается им тв равно пост давайте так скажем пост точка нодя ту мы
[03:18:52.680 --> 03:19:03.600]  находимся в вершине в хотим теперь смотреть куда int nv равно нодя сотве ну короче говоря вот
[03:19:03.600 --> 03:19:20.400]  shielding от в логично да ну и пост равно теперь это новая теперь позиция которая смотрит вершину
[03:19:20.840 --> 03:19:25.120]  до которой теперь нужно пройти расстояние которое равно как вы думаете к чему
[03:19:25.120 --> 03:19:39.200]  нет пока нет ну пока не на один меньше на один меньше видите мы в конце вычтем хотя можете
[03:19:39.200 --> 03:19:43.520]  на можно и на один меньше потому что для экономии можно просто написать он elza
[03:19:44.320 --> 03:19:50.440]  да вы правы
[03:19:56.440 --> 03:19:59.240]  так что же здесь тоже написать интрига
[03:20:14.520 --> 03:20:23.480]  ага ну что конкретно вот какие буквы я тут должен печатать
[03:20:23.480 --> 03:20:45.760]  ну да а как их посмотреть
[03:20:45.760 --> 03:20:57.440]  да да да прям так и пишем здесь здесь нет смысла можно было писать эротенуэ и
[03:20:57.440 --> 03:21:04.040]  минус элитом но данном случае пишем все-таки минус один раз так заказывали да или убираем
[03:21:04.040 --> 03:21:08.720]  это тэлс или тут пишем минус один на ваше усмотрение ну может быть так даже вот так
[03:21:08.720 --> 03:21:11.920]  красивее на самом деле потому что мы рассмотрели два независимых не связанных друг с другом
[03:21:11.920 --> 03:21:21.720]  случае тут тут как мысли тут как угодно так но вот мы реализовали техническую функцию
[03:21:29.400 --> 03:21:34.640]  вот попереча но давайте вернемся что нам теперь еще надо реализовать
[03:21:34.640 --> 03:21:53.160]  о следующий наш идет вообще функция build node if need так build node if need так int build node
[03:21:53.160 --> 03:22:14.360]  if need так только не м2 opposition post а чем не скомпилируется какие например почему
[03:22:14.360 --> 03:22:15.360]  ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау ау а
[03:22:44.360 --> 03:22:54.000]  не capitulate
[03:22:59.060 --> 03:23:02.720]  да это уже написалiff ruining
[03:23:07.040 --> 03:23:12.200]  ну там нет там да ну там так и д lending то есть на самом деле ты понял алгоритм
[03:23:12.200 --> 03:23:29.000]  если ты можешь его написать хоть как-нибудь, чтобы надо, хотя тут, хотя тут кого как, у кого-то
[03:23:29.000 --> 03:23:33.920]  иногда бывает, кто-то вообще бывает, что бывает, я понимаю алгоритм, но я не понимаю, как это написать,
[03:23:33.920 --> 03:23:39.520]  я сам этого никогда не понимал, у меня как-то вот обычно был такой, что если я понимаю алгоритм,
[03:23:39.520 --> 03:23:46.920]  значит я сажусь и его пишу, но да, нет, может быть еще бывает, что чисто теоретически я не понимаю,
[03:23:46.920 --> 03:23:52.640]  как это, но возможно человек может идейно понимать алгоритм, но как бы обладать еще
[03:23:52.640 --> 03:24:05.600]  все-таки не очень продвинутыми скиллами собственно кодинга, не, ну что, не, что там,
[03:24:05.600 --> 03:24:16.280]  сортировка событий, как сортировка событий, ну события такие хранятся, ну это да, мы вообще да,
[03:24:16.280 --> 03:24:20.400]  как-то останется у нас время, можно вообще там потратить отдельные четыре с половиной часа,
[03:24:20.400 --> 03:24:28.120]  чтобы это написать, может даже меньше будет, нет, не, не волнуйся, мы сейчас не собираемся четыре с
[03:24:28.120 --> 03:24:33.360]  половиной часа это писать сразу, тем более, что алгоритм, вот сейчас нам еще знаешь, сколько геометрии еще дожить надо,
[03:24:33.360 --> 03:24:44.120]  нет, к сожалению, это слишком классическая вещь, чтобы до нее не дожили, нет, ну как-то знаете,
[03:24:44.120 --> 03:24:48.400]  все-таки классика, классика есть классика, в любом уважающейся курсе алгоритмов как-то диаграмма
[03:24:48.400 --> 03:24:57.480]  Воронова в том или ином виде есть, то там просто как всегда, это как геометрия, технические детали
[03:24:57.480 --> 03:25:02.880]  возникнут, потому что геометрия это о том, что вы понимаете алгоритм, пишете его, получаете во 38,
[03:25:02.880 --> 03:25:10.920]  потому что вы там пару случаев не учли, вот так вот, билд, но дыхнет, итак, мы находимся, итак, мы находимся на шоссе
[03:25:10.920 --> 03:25:17.220]  из Лас-Вереса до Лос-Анджелеса, и нам нужно построить новый город, ну и теоретически, потому что в
[03:25:17.220 --> 03:25:29.360]  реальности можно сразу начать, если пост.dis2 оказался нулем, то мы просто возвращаем, то есть
[03:25:29.360 --> 03:25:35.720]  просто возвращаем в какой вершине мы находимся и не паримся, просто вот сразу, в противном же
[03:25:35.720 --> 03:25:48.760]  случае нам придется создать новую вершину, так, как же мы ее создадим, а вот здесь нам придется рисовать,
[03:25:48.760 --> 03:26:18.760]  так поехали, так, не понял, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой
[03:26:18.760 --> 03:26:48.760]  ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой
[03:26:48.760 --> 03:26:50.760]  указывает куда-то вот сюда
[03:26:51.360 --> 03:26:53.360]  даже не так
[03:26:55.440 --> 03:27:01.040]  позиция поз указывает вот рыженькая позиция поз указывает куда-то вот сюда и
[03:27:04.240 --> 03:27:06.520]  нам надо это ребро посплитить
[03:27:08.880 --> 03:27:12.760]  как мы это сделаем? нам просто надо очень аккуратно ввести обозначение
[03:27:13.320 --> 03:27:17.600]  допустим вот эту вершину мы обозначим за В, а ее родителя
[03:27:19.080 --> 03:27:21.080]  обозначим за ПВ
[03:27:23.920 --> 03:27:25.920]  вот пойдет
[03:27:26.920 --> 03:27:28.920]  вот видно
[03:27:30.440 --> 03:27:34.340]  или может как-то или чтобы было понятие может как-то по-другому это обозначить
[03:27:38.640 --> 03:27:44.040]  нормально хорошо еще мы знаем что как бы понятно что у нас тут под строка идет с LPR
[03:27:44.040 --> 03:27:46.040]  а
[03:27:46.280 --> 03:27:50.160]  должно вот то есть а что должно произойти должно произойти следующее
[03:27:51.600 --> 03:27:54.120]  нет я пока только ребро сплитчу
[03:27:56.040 --> 03:28:00.440]  нет суфтный слух погоди доживем еще до суфтной ссылки ой доживем вот
[03:28:01.160 --> 03:28:03.760]  смотрим должна появиться вершина N, V
[03:28:04.800 --> 03:28:07.640]  которая тут соответствует ребра от L до
[03:28:08.760 --> 03:28:11.520]  чего-то а тут от чего-то до R
[03:28:12.520 --> 03:28:17.360]  чего-то это R-Post.Dist
[03:28:19.720 --> 03:28:22.360]  ну и тут соответственно R-Post.Dist
[03:28:23.600 --> 03:28:27.060]  ну короче говоря чтобы не заморачиваться это будет называться mid
[03:28:28.720 --> 03:28:33.120]  ну когда мы L отрезок делим на две части у нас в середине появляется mid обычно да
[03:28:34.360 --> 03:28:36.360]  как пафосно звучит
[03:28:36.600 --> 03:28:37.880]  да
[03:28:37.920 --> 03:28:41.840]  как говорится где-то на Смоленской площади сотрудники гордо расправили плечи
[03:28:46.000 --> 03:28:48.000]  сложный прикол да вот
[03:28:53.080 --> 03:28:56.480]  да который в Москве находится на Смоленской площади вот
[03:28:57.200 --> 03:29:00.840]  но это Сталинка такая наверное на ГЗ МГУ похожая вот
[03:29:01.480 --> 03:29:04.440]  ну в принципе побывайте там красиво на самом деле вот
[03:29:05.240 --> 03:29:06.520]  ну вот
[03:29:06.560 --> 03:29:13.560]  ну и в МГУ да ну просто смотри там просто идея такая просто как как попасть в МИД очень просто выходишь на Арбат проходишь его там прям до конца
[03:29:14.920 --> 03:29:21.200]  значит вы там выходишь на Садовое кольцо поворачиваешь там голову налево собственно видишь израменную высоточку это МИД
[03:29:24.320 --> 03:29:29.000]  да но они не в конце но они не в конце Арбата находятся да
[03:29:29.000 --> 03:29:34.200]  а уровень сарказма как всегда остается недомысливание да в прочем
[03:29:36.440 --> 03:29:38.440]  хотя нет зависит от контекста
[03:29:40.440 --> 03:29:42.440]  потому что как бы
[03:29:42.440 --> 03:29:49.560]  на уровне стереотипов как бы не будет судите там правда это или нет и там считается что допустим там на уровне там там программирование там не очень сильно например
[03:29:50.280 --> 03:29:52.280]  но в этом как минимум
[03:29:52.280 --> 03:29:54.280]  в МГУ
[03:29:55.000 --> 03:29:57.000]  в МГУ
[03:29:57.000 --> 03:30:02.520]  ну вот ну а математики там наоборот как раз достаточно сильные ну то есть математика у нас тоже
[03:30:08.040 --> 03:30:10.800]  ну ну матфак какой-нибудь да
[03:30:13.720 --> 03:30:16.080]  я думаю там люди могут пересекаться в принципе
[03:30:17.040 --> 03:30:20.240]  не кстати это надо смотреть у нас сейчас все андрей Городский у нас в случае там
[03:30:20.840 --> 03:30:26.960]  продолжает то есть он там несколько лет назад он продолжал являться там заведующий кафедр математической статистики в угодной мехматии МГУ
[03:30:36.480 --> 03:30:42.800]  господи спокойно да не берем они куда господи все мы успеем значит смотрите не волнуйся
[03:30:42.800 --> 03:30:44.800]  ой
[03:30:45.880 --> 03:30:52.520]  ладно значит хорошо хорошо в равно пост точка нодя ту нет я просто пока вводим обозначение
[03:30:53.360 --> 03:30:55.600]  int p в равно
[03:30:56.560 --> 03:30:58.560]  ну parent короче от вы
[03:31:00.840 --> 03:31:02.840]  там l равно
[03:31:02.840 --> 03:31:04.840]  но
[03:31:11.080 --> 03:31:13.080]  господи
[03:31:18.840 --> 03:31:20.840]  вот
[03:31:25.280 --> 03:31:28.560]  но вот ну короче вот то что мы обсуждали то я и написал ладно
[03:31:29.360 --> 03:31:34.840]  чисто теоретически есть крыша лайфхак потому что на самом деле вот это вот нодис от вы тут вызывается очень много раз
[03:31:36.440 --> 03:31:43.880]  поэтому в принципе может быть оптимальнее формально звучит так но где нодя в равно нодис от вы
[03:31:45.880 --> 03:31:47.880]  вот
[03:31:49.040 --> 03:31:52.520]  поэтому тут вот и пи и вот так вот переменные после этого мы сохраняем
[03:31:53.960 --> 03:31:56.360]  прям-то так и написать но девая точка
[03:31:57.320 --> 03:31:59.320]  значит parent
[03:31:59.960 --> 03:32:05.760]  но вот но видите для чего я это делаю это я делаю для того чтобы меня нодис от вы несколько раз не вычислялась
[03:32:06.200 --> 03:32:12.720]  потому что там ну то есть скорее всего компилятор это крыша там как-то оптимизирует но есть подозрение что может нам и не повести
[03:32:14.120 --> 03:32:17.480]  вот хотя конечно тут надо этим пользоваться аккуратно
[03:32:18.320 --> 03:32:22.800]  потому что дело в том что мы тут как сейчас же как вы догадываетесь мы собираемся сделать pushback и
[03:32:23.320 --> 03:32:28.200]  будьте внимательны когда мы сделаем pushback вот эта вот вершина торжественно инвалидируется
[03:32:30.240 --> 03:32:32.320]  вот это вот ссылка в случае понимаете да
[03:32:34.800 --> 03:32:36.440]  поэтому как бы да
[03:32:36.440 --> 03:32:43.640]  поэтому конечно с точки зрения с многих точек зрения правильно так не делать я должен показать что как бы так теоретически можно оптимизировать но
[03:32:43.680 --> 03:32:45.680]  делать так не будем
[03:32:46.080 --> 03:32:48.080]  поэтому давайте вот так сделаем
[03:32:49.080 --> 03:32:51.080]  вот
[03:32:51.800 --> 03:32:56.120]  вот но вообще но так вот им всякий вот элер мы так на всякий случай сохраняем
[03:32:57.720 --> 03:32:59.000]  вот
[03:32:59.000 --> 03:33:04.260]  теперь вот видите вот именно вот по parent way видите то есть мы не по ссылке обращаемся специально сохраняем так вот
[03:33:04.720 --> 03:33:06.720]  что нам теперь надо
[03:33:06.720 --> 03:33:08.720]  теперь надо во-первых
[03:33:09.360 --> 03:33:11.360]  создать новую вершину
[03:33:12.840 --> 03:33:17.880]  то есть int nv равно ну давайте nv очевидно равно нодис точка size
[03:33:19.080 --> 03:33:21.080]  да вот это мы все создали
[03:33:24.000 --> 03:33:26.000]  так но давайте что
[03:33:28.320 --> 03:33:34.360]  но да но вот но давайте соответственно pushback не но pushback у нас в общем-то тут классический вот я тут могу просто
[03:33:34.640 --> 03:33:37.320]  где-то у меня этот pushback уже был я его просто скрипи пащу
[03:33:42.960 --> 03:33:44.960]  вот
[03:33:45.960 --> 03:33:46.960]  вот
[03:33:46.960 --> 03:33:50.920]  то есть ну принципе понятно ему как всегда будет соответствует по строка тен инфинити
[03:33:51.160 --> 03:33:55.120]  но правда родитель у нас будет теперь да тут тот же сам не в а nv
[03:33:55.640 --> 03:33:57.760]  и суть с этой ссылки нету потому что это лист
[03:34:02.400 --> 03:34:07.040]  да вы спокойно переписывайте даже возможно не подозреваешь что я вам наглую наврал
[03:34:09.080 --> 03:34:11.080]  потому что это не совсем то
[03:34:11.960 --> 03:34:18.960]  потому что лист нам создавать пока нет но потому что под строка то потому что это не лист мы создаем
[03:34:19.640 --> 03:34:21.640]  мы создаем
[03:34:22.360 --> 03:34:24.360]  что мы создаем мы создаем
[03:34:25.720 --> 03:34:30.480]  мы создаем вершинку которая вот лежит на середине вот это вот nv и она не лист
[03:34:31.600 --> 03:34:37.640]  и как бы подстрока ей соответствует вполне себе от эля да мидо на самом деле а родителем у нее является
[03:34:38.280 --> 03:34:41.360]  пв и суть с этой ссылки у нее пока нет и
[03:34:42.480 --> 03:34:46.280]  вообще желательно чтобы кстати переход из нее тоже должен быть
[03:34:47.920 --> 03:34:53.080]  кстати вот внимание вопроса можно вот в этот мапчик на уровне инициализации прописать переходик не знаете
[03:34:54.320 --> 03:34:59.960]  вот я тут могу написать какую-нибудь там вот там то есть вот я тут пару не могу написать какой-нибудь там
[03:34:59.960 --> 03:35:04.960]  надо будет еще перед ней написать что это надо будет перед ней написать пэйер в угловых скобочках
[03:35:09.400 --> 03:35:11.400]  хорошо
[03:35:13.040 --> 03:35:15.040]  ладно children от nv
[03:35:16.720 --> 03:35:21.040]  с мид очевидно теперь равно в атаке
[03:35:23.960 --> 03:35:27.160]  но это я просто написал что из нее вот есть ребро по символу с мид
[03:35:27.160 --> 03:35:36.720]  ну и конечно же я теперь должен обновить переход из пв по символу сл и он у меня равен чему
[03:35:36.720 --> 03:35:45.320]  чему он равен да конечно вот
[03:35:45.320 --> 03:35:50.720]  так что я забыл поправить
[03:35:50.720 --> 03:36:00.200]  нет новое не заметил новое ребро добавлять это не это мы должны не в этой функции делать
[03:36:00.200 --> 03:36:09.520]  чего ну да но заметим что в самой вершине в сведения а под строки родители резко
[03:36:09.520 --> 03:36:18.560]  поменялись правда поэтому придется написать так parent от в теперь у меня равен nv
[03:36:18.560 --> 03:36:27.120]  ну и придется написать нодис от в точка эр точнее это не поменялся а вот эль теперь равен мид
[03:36:27.120 --> 03:36:34.080]  а что не так да вот
[03:36:37.360 --> 03:36:46.800]  да только parent от в вот так вот так что такая штука у меня теперь получилось так что нам
[03:36:46.800 --> 03:36:53.920]  теперь осталось но естественно нам осталось реализовать поиск суффиксной ссылки правда
[03:36:53.920 --> 03:37:03.560]  вроде все что нам осталось значит поиск суффиксной ссылки ну суф тут все просто
[03:37:03.560 --> 03:37:15.680]  хотя суф а ну вот он мы его даже уже написали это как бы в идеале бы хотели это да так но как
[03:37:15.680 --> 03:37:23.320]  бы суфом там мы будем пользоваться немножко другим где мы им пользовались да мы написали
[03:37:23.320 --> 03:37:32.800]  фунду должны цепь функцию getсуф но давайте посмотрим int getсуф от вершины вы ну и говорим
[03:37:32.800 --> 03:37:39.760]  ну во первых сразу говорим что если вы равно root если вы это корень
[03:37:45.680 --> 03:37:54.040]  ну вот или ну если она корень то сразу возвращаем минус 1 ну ладно минус 1 формально
[03:37:54.040 --> 03:38:03.800]  ну ладно минус один так минус один ладно тут понятно вот возвращаем минус 1 если суф от
[03:38:03.800 --> 03:38:15.760]  в не равно минус 1 то возвращаем просто суф от в логично да в противном случае мы тоже
[03:38:15.760 --> 03:38:29.920]  возвращаем в противном случае тут очень аккуратно надо писать так int св равно calculate то есть
[03:38:29.920 --> 03:38:41.920]  вычислить суф от в значит тут вот после этого написать равно св и ретурн св да вот казалось бы
[03:38:41.920 --> 03:38:48.800]  почему я не могу написать тут ретурн суф от в равно calculate суф но это была одна из моих самых
[03:38:48.800 --> 03:38:53.600]  но я по моему рассказывал уже про это одно из моих самых эпических багов в моей жизни то есть
[03:38:53.600 --> 03:39:19.040]  если бы я если бы я тут написал как напрашивается нет нет вот так писать прям красиво нету можно
[03:39:19.040 --> 03:39:34.480]  вообще написать хорошо я можно написать вот так хорошо но бага останется да с большим удивлением
[03:39:34.480 --> 03:39:39.800]  узнаете что вы лезете в вектор находите там суф возвращайте на него ссылку то есть компилятор
[03:39:39.800 --> 03:39:45.040]  вычисляет эту ссылку а потом запускает вот эту функцию в процессе которой вектор может
[03:39:45.040 --> 03:39:51.640]  инвалидироваться и тогда вот на этот момент выяснится что у вас проблемы
[03:39:51.640 --> 03:40:01.880]  точнее вот таки он вычислят присвоить ссылка инвалидировалась он возопил или по крайней
[03:40:01.880 --> 03:40:07.080]  мере в лучшем случае просто присвоил куда-то не туда а в худшем просто возопил что у вас
[03:40:07.080 --> 03:40:17.120]  все плохо ну для кого как вот но вот да поэтому да в чем боль того когда вы в дебаге в панике
[03:40:17.120 --> 03:40:24.280]  пишите вот что-нибудь вот подобные тесве этом цер там блаблаблайство то внезапно бага исчезает
[03:40:24.280 --> 03:40:36.240]  вот да то есть вы тратите полдня для того чтобы это понять вот поэтому тут над этим аккуратно
[03:40:36.240 --> 03:40:40.640]  пользоваться ну или в худшем нет ну как для импят можно вообще конечно эти вершины в статическом
[03:40:40.640 --> 03:40:47.760]  массиве хранить тогда вас никаких проблем не будет вот так то что все что нам осталось это
[03:40:47.760 --> 03:40:54.480]  посчитать суфиксную ссылку правда это по-моему единственная функция которую мы не реализовали
[03:40:54.480 --> 03:41:09.240]  ну давайте как ищет но вот калькулейт суф от инт в так ну давайте так нам нужно определить
[03:41:09.240 --> 03:41:16.800]  по какой строке мы спускаемся интер равно нодис от в точка р и это надо было написать
[03:41:16.920 --> 03:41:31.120]  равно нодис от в точка л вот по такой строке мы спускаемся правда так спускаемся мы откуда
[03:41:31.120 --> 03:41:41.720]  конечно же из вершины какой-то но давайте так позицион поз мы идем из по позиции поз
[03:41:41.720 --> 03:41:52.040]  так ну то два варианта если в в у нас бывает равно руту или не равно если оно не равно руту
[03:41:52.040 --> 03:42:06.440]  то что-то нод то тогда у нас позицион поз будет равно к чему но к чему-то и нулю где что-то
[03:42:06.440 --> 03:42:22.400]  это суф от пера от родителя суф от перонт от в вот а тут даже вот так тут кстати часто пишут вот так
[03:42:22.400 --> 03:42:29.040]  противном же случае к чему делаем
[03:42:29.040 --> 03:42:41.080]  не так но в противно вот хотя нет так не пойдет все-таки мы не будем тут баловаться
[03:42:41.080 --> 03:42:49.560]  стандартными операторами лучше через выфы потому что если не равно рут то как бы поз равно вот
[03:42:49.560 --> 03:43:03.840]  этому в противном же случае что мы будем делать в противном же случае идея такая идем мы по тому
[03:43:03.840 --> 03:43:17.120]  же корню точнее так то есть условно то есть поз равно позицион от себя же и нуля только маленькая
[03:43:17.120 --> 03:43:29.960]  проблема и елю мы прибавим то есть суть теперь заключается в том что мы должны спуститься в
[03:43:29.960 --> 03:43:38.960]  дереве по подстроке lr из заданной позиции понятно да знаете обычно если вы там попадете в
[03:43:38.960 --> 03:43:42.600]  какой-нибудь шат вам восточно в этом смысле на ревью будут пить больно по рукам и требовать
[03:43:42.600 --> 03:43:56.400]  этот этот спуск вынести в отдельную функцию вот написано это будет вот примерно так то есть
[03:43:56.400 --> 03:44:01.760]  функция будет подразумевать то есть вот это функция гол он говорит что мы находимся позиции
[03:44:01.760 --> 03:44:09.480]  поз хотим спуститься по подстроке или гарантируем что это можно сделать понятно да а чем даже
[03:44:09.480 --> 03:44:14.720]  неправильно она будет еще и спускаться по позиции то есть допустим пишем поз равно
[03:44:14.720 --> 03:44:32.040]  гол он и ретурн билд ноде и в нит от этой позиции понятно логика да вот да да да святое дело
[03:44:32.040 --> 03:44:48.360]  да ну и теперь пришло время гоу и лонга значит позицион go alone позицион позицион чем более того
[03:44:48.360 --> 03:44:54.400]  кстати в принципе в будущем когда-нибудь вам может это и пригодится и интерь спускаемся по
[03:44:54.400 --> 03:45:07.400]  подстроке или значит ну тут все очевидно ваил значит работаем ваил л меньше у вас r то значит
[03:45:07.400 --> 03:45:17.920]  вам нужно куда-то пойти но во первых если у вас поз точка дисту не равен нулю то надо просто
[03:45:17.920 --> 03:45:25.200]  пройти то как бы надо пройти на расстояние д которое равно очевидно минимумы из того что там
[03:45:25.200 --> 03:45:37.560]  на этой дороге осталось и r минус л и плюс равно д ну и соответственно пост точка дисту минус
[03:45:37.560 --> 03:45:44.280]  равно д может в принципе на этом мы и закончим в противном же случае нам придется выйти на
[03:45:44.280 --> 03:45:55.120]  большую дорогу но вот в этом месте или меняться не будет а просто скажем что пост равно позицион
[03:45:55.120 --> 03:46:09.520]  от чего пост точка но диту точнее нет пост но диту а children от пост но диту соответственно
[03:46:09.520 --> 03:46:25.920]  с этого придется на эту дорогу выйти точнее так int nv точнее тут неправильно придется написать так
[03:46:25.920 --> 03:46:33.440]  то есть куда мы идем мы значит записываем вот таким вот образом а поз от этой вершины равен
[03:46:33.440 --> 03:46:47.840]  nv и соответственно нодис от нв точке минус нодис от нв точка л то есть типа вот вышли по хорошему
[03:46:47.840 --> 03:46:53.680]  надо было видимо эту функцию тоже написать потому что мы это где-то уже где-то мы уже об этом думали
[03:46:53.680 --> 03:47:07.480]  вот ну и в конце конечно просто ретурн поз ну вот в общем-то мы это и написали
[03:47:13.120 --> 03:47:20.040]  красивенько вроде да но если вот так вот жать то получается вот такой объем кода
[03:47:20.040 --> 03:47:28.040]  но правда обратим внимание я тут конечно может написал сильно там больше символов чем нужно
[03:47:28.040 --> 03:47:32.640]  для каких-нибудь олимпиад потому что как бы я писал просто надежно аккурат после я как бы писал
[03:47:32.640 --> 03:47:38.840]  просто мы надежно аккуратно максимально разделяя на функции половине случаев это в общем-то и не надо
[03:47:38.840 --> 03:47:48.520]  ну когда как нет ну тут как привычно потому что давайте вам потому что ну-ка давайте прям
[03:47:48.520 --> 03:47:53.200]  мне уже даже самому интерес сравнить обычно прям настолько так никогда не писал вероятно у меня
[03:47:53.200 --> 03:48:02.320]  тут где-то хранится вот и попроще такой боже ванн мд босс у меня где-то было и ну-ка давайте-ка
[03:48:02.320 --> 03:48:22.360]  господи так вот версия которой я писал четыре года назад но include суфик стрита было значит есть
[03:48:22.360 --> 03:48:26.440]  надежно ну-ка опен так
[03:48:26.440 --> 03:48:41.720]  нет это я показывал да видимо как положено то сейчас я как бы сейчас я уже как бы в детали
[03:48:41.720 --> 03:48:46.840]  c++ не влезаю потому что как бы прозвать уж возле этого есть другой курс точнее вас уже был
[03:48:46.840 --> 03:48:56.640]  ну давайте ну ну объем подопали полупом получился сильно меньше
[03:48:56.640 --> 03:49:15.720]  да уверен да но до 23 так нет смотри тут 112 строчек тут 143 что там по моему был где где-то
[03:49:15.720 --> 03:49:26.520]  я там 30 строчек сэкономил давайте думать где это еще в один год а ну вот где потому что вот
[03:49:26.520 --> 03:49:33.400]  это вот вот это вот с плечи не ребра видимо я тут выписал прямо вот сюда видите да
[03:49:33.400 --> 03:49:44.360]  во-первых я там вот этот лайфхак кстати с дополнительной вершины таки имел место это
[03:49:44.360 --> 03:49:51.760]  была вершина номер один корень у меня был нулем так ну здесь по классике правда без
[03:49:51.760 --> 03:50:02.920]  лзов правда но по классике вот так а ну я еще этих вот ведь лишних функций вот этих вот типа
[03:50:02.920 --> 03:50:16.120]  одет вот это что-то там не писал давай сейчас раз у компьютера попробую быстренько и поправить
[03:50:32.920 --> 03:50:51.320]  ой так хорошо на чуть позже так ну вот то есть принципе да тут альтернатива то есть получается
[03:50:51.320 --> 03:50:59.440]  конечно да реализация в сумме конечно получается гадостная немножко но в принципе выжить можно тут
[03:50:59.440 --> 03:51:04.760]  вот такая у нас получилось помочь чуть более красивая на самом деле но в том плане что у нас
[03:51:04.760 --> 03:51:09.280]  просто все как-то так на функции просто поделено и в каждой понятно там более-менее понятно что
[03:51:09.280 --> 03:51:10.280]  делается
[03:51:10.280 --> 03:51:32.840]  так что вот такой вот так что вот такой вот не сильно сложный как выяснилось алгоритм
[03:51:32.840 --> 03:51:46.400]  есть ли тут какие-то вопросы а у вас
[03:51:46.400 --> 03:51:55.320]  да да да ну правильно да когда разминка в круэне да вопрос у меня простой вопрос почему и не
[03:51:55.320 --> 03:52:02.040]  матрос да как говорится можно конечно надо кто-то быстренько пытался выскочить у меня простой
[03:52:02.040 --> 03:52:09.160]  ответ потому что ты студент но вот но потом пришел суровый осетин и так она просто у меня
[03:52:09.160 --> 03:52:21.000]  простой вопрос почему я не матрос вы матросов нет вопросов нет нет у матросов нет вопросов
[03:52:21.000 --> 03:52:27.720]  презвестная фраза но в данном случае она просто тут ну честно говоря не знаю не вот ну не знаю
[03:52:27.720 --> 03:52:31.520]  возможно просто так в народе пошла крейтариф может может про чем там была какая-то красивая
[03:52:31.520 --> 03:52:41.680]  история когда она появилась может у матросов нет вопросов у матросов есть идея так то ладно
[03:52:41.680 --> 03:52:48.320]  если нет вопросов ладно тогда я включаю интернет и мы сейчас попробуем тогда давайте до пилить
[03:52:48.320 --> 03:52:56.200]  веселую задачку нет нет нет нет нет если вопросов по украину нет то с этим мы закончили дальше
[03:52:56.200 --> 03:53:00.360]  дальше все что мы будем так что дальше в принципе могу же это микрофончик забирать там камеру можете
[03:53:00.360 --> 03:53:04.920]  сворачивать а мы тут просто займемся техническими вещами ну вот ты вот сейчас спрашиваешь
