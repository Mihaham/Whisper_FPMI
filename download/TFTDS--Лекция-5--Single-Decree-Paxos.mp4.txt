[00:00.000 --> 00:09.000]  Мы начинаем. И как обычно, мы начинаем с повторения того, что мы успели сделать за последние месяцы.
[00:09.000 --> 00:18.000]  Чего же мы добились? Напомню, что первую задачу, которую мы решали, это была задача репликации ячейки памяти.
[00:18.000 --> 00:22.000]  И мы придумали для нее алгоритм с хворовым, с фазовым, который вы сейчас уже...
[00:22.000 --> 00:25.000]  Кто-то из вас уже написал, кто-то напишет в ближайшие дни.
[00:25.000 --> 00:31.000]  И потом мы довольно быстро выяснили, что этот алгоритм плохо обобщается на более сложной операции,
[00:31.000 --> 00:33.000]  потому что в нем есть два несогласованных порядка.
[00:33.000 --> 00:36.000]  Порядок доставки команд на каждую реплику и логический порядок на временных метках,
[00:36.000 --> 00:38.000]  которые этот алгоритм сам выстраивает.
[00:38.000 --> 00:42.000]  И чтобы эту проблему побороть, мы придумали примитив, который назывался Atomic Broadcast.
[00:42.000 --> 00:47.000]  Atomic Broadcast позволял узлам отправлять свои сообщения сразу всем,
[00:47.000 --> 00:50.000]  и этот примитив гарантировал, что это будет неправильно.
[00:50.000 --> 00:54.000]  И мы этот примитив использовали для того, чтобы реплицировать произвольный автомат.
[00:54.000 --> 00:56.000]  Мы сказали, что пусть у нас есть некоторые черные ящики,
[00:56.000 --> 01:00.000]  пусть он умеет принимать и применять к себе какие-то команды,
[01:00.000 --> 01:03.000]  мы поставим этот черный ящик, когда стоит машина, на каждой реплике.
[01:03.000 --> 01:08.000]  И когда клиент будет приходить нам с операцией, мы его операцией,
[01:08.000 --> 01:10.000]  его операцией мы будем использовать.
[01:10.000 --> 01:13.000]  То есть мы будем использовать этот примитив для того,
[01:13.000 --> 01:15.000]  чтобы у нас не было никаких проблем.
[01:15.000 --> 01:17.000]  И когда клиент будет приходить нам с операцией,
[01:17.000 --> 01:22.000]  мы его операцию будем Broadcast через этот самый Atomic Broadcast
[01:22.000 --> 01:26.000]  и применять на каждой реплике эти команды в порядке их доставки,
[01:26.000 --> 01:29.000]  в порядке вызова обработчиков Atomic Broadcast.
[01:31.000 --> 01:37.000]  То есть первое достижение наше – это сведение задачи репликации автомата
[01:37.000 --> 01:41.000]  к задаче построения Atomic Broadcast.
[01:45.000 --> 01:53.000]  То есть после этого перехода мы уже про линейризацию
[01:53.000 --> 01:55.000]  непосредственно не говорим.
[01:55.000 --> 01:58.000]  Если мы умеем строить Atomic Broadcast,
[01:58.000 --> 02:02.000]  то мы умеем линейризуемо реплицировать произвольное состояние,
[02:02.000 --> 02:04.000]  которое умещается, конечно, в одну машину.
[02:04.000 --> 02:06.000]  Да, мы там упустили какие-то детали, да, мы сказали,
[02:06.000 --> 02:08.000]  что нам нужна семантика экзеклюанса для клиента,
[02:08.000 --> 02:12.000]  то есть сам клиент должен участвовать в реализации нашей стрит-машины.
[02:12.000 --> 02:15.000]  Кроме того, нам нужно подумать о транзакциях,
[02:15.000 --> 02:17.000]  потому что может быть состояние у нас большое
[02:17.000 --> 02:19.000]  и в одну машину не помещается.
[02:19.000 --> 02:23.000]  Это все отдельные нюансы, которые мы обсудим в будущем,
[02:23.000 --> 02:25.000]  или которые вы сами придумаете, как делать.
[02:25.000 --> 02:28.000]  А пока мы фокусируем свое усилие на Atomic Broadcast.
[02:28.000 --> 02:32.000]  Ну и в позапрошлый раз мы даже на этом не остановились.
[02:32.000 --> 02:34.000]  Мы сказали, что задача все еще слишком сложная,
[02:34.000 --> 02:37.000]  и можно свести ее, в свою очередь, к задаче Consensus.
[02:38.000 --> 02:44.000]  Задача, где узлы должны договориться об общем выборе.
[02:44.000 --> 02:48.000]  В отличие от Atomic Broadcast, эта задача более удобная для решения,
[02:48.000 --> 02:51.000]  потому что здесь какие-то сообщения бесконечно отправляются и доставляются,
[02:51.000 --> 02:54.000]  а здесь мы должны всего лишь один раз выбрать общее значение,
[02:54.000 --> 02:56.000]  алгоритм завершается, вот и все.
[02:56.000 --> 03:01.000]  Ну и в прошлый раз мы обсудили то, что эти задачи на самом деле
[03:01.000 --> 03:03.000]  эквивалентные по сложности,
[03:03.000 --> 03:06.000]  и вот решая Broadcast, мы вынуждены решать Consensus,
[03:06.000 --> 03:08.000]  поэтому в прошлый раз мы обсуждали,
[03:08.000 --> 03:10.000]  какие же ограничения задачи Consensus заложены,
[03:10.000 --> 03:13.000]  потому что они влияют на эти сведения выше.
[03:13.000 --> 03:15.000]  Мы выяснили два ограничения.
[03:15.000 --> 03:18.000]  Во-первых, более-менее очевидное ограничение,
[03:18.000 --> 03:23.000]  что никакой алгоритм Consensus не может переживать слишком большое количество сбоев.
[03:26.000 --> 03:29.000]  Ну вот такая оценка у нас уже была для алгоритма репликации регистра
[03:29.000 --> 03:32.000]  на второй лекции, и такая же оценка будет справедлива
[03:32.000 --> 03:34.000]  для любого решения задачи Consensus.
[03:34.000 --> 03:37.000]  Напомню чуть точнее, это означало, что если алгоритм Consensus
[03:37.000 --> 03:41.000]  хочет гарантировать agreement, то есть safety свойства,
[03:41.000 --> 03:44.000]  что он всегда, если выбирает значение, то выбирает общее значение,
[03:44.000 --> 03:46.000]  выбирает одно и то же значение на всех узлах,
[03:46.000 --> 03:53.000]  то алгоритм обязан не завершаться, когда сбоев слишком много.
[03:53.000 --> 03:55.000]  Ну или в случае partition в меньшей части.
[03:55.000 --> 03:59.000]  То есть в любом разбиении множества узлов в меньшей части partition
[03:59.000 --> 04:01.000]  алгоритм должен зависать.
[04:01.000 --> 04:04.000]  Иначе он нарушит agreement в случае этого самого partition,
[04:04.000 --> 04:08.000]  а в свою очередь так по каскаду на уровне broadcast мы нарушим total order,
[04:08.000 --> 04:11.000]  а на уровне RSM у нас разойдутся реплики.
[04:11.000 --> 04:13.000]  Так что у нас есть такое ограничение на termination.
[04:13.000 --> 04:15.000]  Первое ограничение на termination, которое у нас было,
[04:15.000 --> 04:18.000]  когда сбоев слишком много, алгоритм блокируется.
[04:18.000 --> 04:23.000]  Второе ограничение было более замысловатым,
[04:23.000 --> 04:26.000]  и у него было имя FLP-ти аремы.
[04:26.000 --> 04:30.000]  Напомню было о том, что в асинхронной системе с отказами узлов
[04:30.000 --> 04:33.000]  и с детерминированным алгоритмом мы не можем гарантировать
[04:33.000 --> 04:36.000]  завершение алгоритма consensus в любом исполнении.
[04:36.000 --> 04:40.000]  То есть существует исполнение, в котором алгоритм не завершается,
[04:40.000 --> 04:43.000]  ну или иначе существует lifelog.
[04:43.000 --> 04:49.000]  И этот lifelog мотивировал для нас переход к более сложной модели,
[04:49.000 --> 04:52.000]  в смысле переход от асинхронной модели к частичной синхронной,
[04:52.000 --> 04:55.000]  потому что в асинхронной мы можем гарантировать только safety свойства,
[04:55.000 --> 04:58.000]  то есть agreement, но нам необходимо предположение о времени,
[04:58.000 --> 05:03.000]  чтобы гарантировать liveness свойства consensus, то есть termination.
[05:03.000 --> 05:08.000]  И на этом мы в прошлый раз разговор о consensus закончили.
[05:08.000 --> 05:11.000]  Мы выяснили, что задача не очень хорошо решается,
[05:11.000 --> 05:14.000]  но, как я уже вам показывал во время одной лекции, нам все-таки
[05:14.000 --> 05:18.000]  необходимо consensus решать, потому что мы собираемся строить RSM,
[05:18.000 --> 05:22.000]  но и люди уже строят свои промышленные системы с помощью этих RSM.
[05:22.000 --> 05:25.000]  Я говорил вам про Yandex DB, где все RSM буквально,
[05:25.000 --> 05:28.000]  ну или приводил пример, кажется, систему ZooKeeper,
[05:28.000 --> 05:31.000]  которая является таким изолированным RSM,
[05:31.000 --> 05:34.000]  с помощью которого вы можете строить другие распределенные системы.
[05:34.000 --> 05:38.000]  В другом курсе мы еще про ZooKeeper подробно поговорим,
[05:38.000 --> 05:43.000]  пока достаточно такого вот поверхностного приближения.
[05:43.000 --> 05:48.000]  Так что consensus мы решать, конечно же, будем, несмотря на есть ограничения,
[05:48.000 --> 05:52.000]  но нам по пути решения нужно учитывать, как вот и эта теорема,
[05:52.000 --> 05:55.000]  как они себя проявят в нашем алгоритме.
[05:55.000 --> 05:58.000]  В прошлый раз мы вроде бы уже это немного обсудили,
[05:58.000 --> 06:03.000]  мы сказали, что вот достичь, учесть вот такую теорему довольно легко.
[06:03.000 --> 06:06.000]  Если алгоритм должен блокироваться в меньшей части partition,
[06:06.000 --> 06:09.000]  то он, видимо, просто кворумы собирает и блокируется,
[06:09.000 --> 06:12.000]  когда сбоев слишком много или когда большинство узлов недостижимы.
[06:12.000 --> 06:15.000]  А с FLP, ну видимо, мы должны в каждом алгоритме consensus,
[06:15.000 --> 06:18.000]  который у нас будет, искать LifeLog.
[06:18.000 --> 06:22.000]  Вот если он найдется, то значит мы не нарушаем FLP теорему,
[06:22.000 --> 06:25.000]  что довольно разумно.
[06:25.000 --> 06:29.000]  Наша задача на сегодня решить задачу consensus.
[06:29.000 --> 06:33.000]  Не то чтобы мы ее решим, в смысле не мы ее решим,
[06:33.000 --> 06:39.000]  ее уже решили другие люди, и решение это не очень простое, не очень очевидное,
[06:39.000 --> 06:43.000]  и наша задача сегодня с ним разобраться.
[06:43.000 --> 06:48.000]  Мы рассмотрим, наверное, как сказать,
[06:48.000 --> 06:52.000]  я не уверен, что это вот именно первое на свете решение задачи consensus,
[06:52.000 --> 06:59.000]  но это кажется первым алгоритмом, который ее вот так в изоляции решает во синхронной модели.
[06:59.000 --> 07:08.000]  И у этого алгоритма есть собственно имя, разумеется, это имя Paxos.
[07:13.000 --> 07:19.000]  Так мы его включим сейчас в проектор.
[07:19.000 --> 07:21.000]  Сейчас ты все увидишь.
[07:21.000 --> 07:24.000]  Наша задача сегодня разобраться с алгоритмом Paxos,
[07:24.000 --> 07:30.000]  но прежде чем переходить к алгоритму, к его изложению и к доказательству его корректности,
[07:30.000 --> 07:34.000]  мы обсудим историю его появления, потому что это настолько странная, удивительная история,
[07:34.000 --> 07:38.000]  что невозможно ее обойти стороной.
[07:38.000 --> 07:46.000]  И вот тут мы очень быстро включим проектор, смотри, просто увеличив яркость, это же волшебство.
[07:46.000 --> 07:52.000]  Но чтобы нам это не мешало, нужно стереть.
[07:52.000 --> 08:02.000]  На самом деле алгоритм Paxos решает не задачу consensus, он решает сразу atomic broadcast.
[08:02.000 --> 08:09.000]  И берет он начало в 1990 году, когда Лэмпорт, Лэстли Лэмпорт,
[08:09.000 --> 08:17.000]  человек с аватарки нашего чата, написал статью под названием part-time parliament.
[08:17.000 --> 08:24.000]  Тут написано правда 98-й, но мы сейчас раскроем эти детали.
[08:24.000 --> 08:32.000]  Итак, вообще не так уж много статей с такой затейливой, любопытной судьбой на свете есть.
[08:32.000 --> 08:38.000]  У нас будет в конце семестра, где-то ближе к декабрю блокчейны, и статья про биткоин,
[08:38.000 --> 08:49.000]  и вот она тоже довольно особенно, довольно странная, не вписывается в контекст всех остальных академических статей.
[08:49.000 --> 08:54.000]  Но Лэстли Лэмпорта ей далеко, скажем прямо.
[08:54.000 --> 08:59.000]  Лэстли Лэмпорт пишет статью про парламент, про греческий парламент.
[08:59.000 --> 09:09.000]  Он пишет, что вот недавно археологи обнаружили на руинах острого пакса следы древней цивилизации,
[09:09.000 --> 09:15.000]  и вот Лэмпорт как археолог изучает жизнь этих самых древних греков.
[09:15.000 --> 09:22.000]  Лэстли Лэмпорт пишет, что когда-то давно островом Паксос управлял Совет священников,
[09:22.000 --> 09:27.000]  но со временем Паксос превратился в крупный центр торговли,
[09:27.000 --> 09:33.000]  и в связи с этим потребовалась какая-то организация политической формы управления,
[09:33.000 --> 09:41.000]  и вот этот теократический режим сменился парламентом, которому посвящена вся статья.
[09:41.000 --> 09:46.000]  Парламент регулировал торговые отношения между жителями острова.
[09:46.000 --> 09:52.000]  Парламент должен был принимать законы, то есть его функция была в том, чтобы составлять свод законов.
[09:52.000 --> 09:59.000]  Законы были такие, например, что устанавливался налог на оливки.
[09:59.000 --> 10:07.000]  Или были какие-то более сложные законы, например, закон, который запрещал продавать чёрных козлов.
[10:07.000 --> 10:11.000]  В общем, странные были законы, ну или разрешал продавать коричневых.
[10:11.000 --> 10:17.000]  Парламент этого греческого острова занимался тем, что принимал такие вот законы.
[10:17.000 --> 10:22.000]  И ясно, что если вы меняете цену на оливки или налоги на оливки,
[10:22.000 --> 10:27.000]  или то запрещаете, то разрешаете продавать каких-то козлов, то вам нужно эти законы
[10:27.000 --> 10:32.000]  применить в некотором порядке, чтобы понять, в каком состоянии книг законов сейчас.
[10:32.000 --> 10:37.000]  Что можно было бы сделать? Можно было бы нанять секретаря,
[10:37.000 --> 10:40.000]  который занимался бы тем, что фиксировал порядок этих законов,
[10:40.000 --> 10:44.000]  принять этих законов, но здесь они называются указами, decrease.
[10:44.000 --> 10:50.000]  Но беда была в том, что все жители острова были очень заняты своей основной деятельностью,
[10:50.000 --> 10:57.000]  а именно торговлей, и никто не хотел избираться секретарём и посвящать всю свою жизнь парламенту.
[10:57.000 --> 11:05.000]  Поэтому и без секретаря, который бы выписывал все законы в некотором порядке,
[11:05.000 --> 11:08.000]  работу парламента довольно сложно организовать.
[11:08.000 --> 11:12.000]  Поэтому каждый участник этого парламента, они назывались выборщики,
[11:12.000 --> 11:19.000]  должен был вести свои собственные записи, в каком порядке все эти указы, законы принимаются.
[11:19.000 --> 11:27.000]  Вот тут приводится выдержка из записей какого-то выборщика вот с таким вот именем.
[11:27.000 --> 11:33.000]  То есть 155-й закон, который был принят, вот выглядел таким образом.
[11:33.000 --> 11:38.000]  Но, конечно, жизни выборщиков была непроста. Во-первых, они могли уходить и приходить,
[11:38.000 --> 11:42.000]  поэтому парламент вот так и назывался, статья так и назывался.
[11:42.000 --> 11:48.000]  Во-вторых, тут уже очень странные обстоятельства вмешиваются.
[11:48.000 --> 11:54.000]  Лэм пишет, что сама комната, вот зал для заседаний парламента был довольно плохо устроен,
[11:54.000 --> 11:58.000]  там была плохая акустика, поэтому выборщики не могли общаться друг с другом,
[11:58.000 --> 12:02.000]  точнее они не могли общаться сразу со всеми другими выборщиками,
[12:02.000 --> 12:05.000]  не могли забраться на какой-то трибун и там выступать.
[12:05.000 --> 12:08.000]  Вместо этого у них были гонцы.
[12:08.000 --> 12:13.000]  Вот можно было найти гонца, дать ему какое-то сообщение, и он его понёс другому выборщику.
[12:13.000 --> 12:16.000]  Но, правда, Лэм пишет, что вот выборщик мог покинуть зал заседаний,
[12:16.000 --> 12:20.000]  и уехать куда-то на 6 месяцев, потом вернуться.
[12:20.000 --> 12:27.000]  Или он никогда не вернулся, потому что мало ли что в древности могло произойти с ним.
[12:27.000 --> 12:36.000]  Да, конечно же, выборщик мог покидать парламент в любое время, но он там оставлял все свои записи.
[12:36.000 --> 12:40.000]  Если он возвращался, то его записи оставались на месте.
[12:40.000 --> 12:46.000]  У каждого выборщика были собственные песочные часы, с помощью которого он мог отслеживать хоть времени.
[12:46.000 --> 12:50.000]  Ну, в общем, наверное, понятно, что в чему.
[12:50.000 --> 12:55.000]  Да и сам Лэм не скрывает, он говорит, что задача функционирования этого парламента
[12:55.000 --> 12:59.000]  имеет удивительное сходство с техными задачами, которые возникают
[12:59.000 --> 13:05.000]  в области отказоустойчивых распределённых систем, что неудивительно.
[13:05.000 --> 13:09.000]  Легко здесь всё сопоставить. Что такое книга законов?
[13:09.000 --> 13:14.000]  Книга законов – это то состояние, которое мы хотим надёжно поддерживать.
[13:14.000 --> 13:17.000]  Что такое свод законов?
[13:17.000 --> 13:24.000]  Порядок записей принимаемых указов, пронумерованный вот такими числами.
[13:24.000 --> 13:29.000]  Это буквально порядок, который выстраивает Atomic Broadcast между репликами.
[13:29.000 --> 13:34.000]  Кто такие выборщики? Ну, это, видимо, сами реплики, которые должны в этом порядке договориться.
[13:34.000 --> 13:38.000]  У каждого выборщика есть свой жёсткий диск, то есть вот эта табличка, на которой он делает записи,
[13:38.000 --> 13:43.000]  есть собственные часы, ну и выборщики между собой не могут общаться напрямую,
[13:43.000 --> 13:47.000]  они могут только посылать вот такие вот странные сообщения через гонцов.
[13:47.000 --> 13:53.000]  Но то, что гонец может уехать на 6 месяцев, это означает то, что, видимо,
[13:53.000 --> 13:56.000]  модель, в которой мы работаем, асинхронная, то есть мы не делаем предположение
[13:56.000 --> 14:00.000]  о скорости доставки сообщений.
[14:00.000 --> 14:07.000]  Можно подумать, как вообще так получилось, что такая статья была написана?
[14:07.000 --> 14:11.000]  Довольно странно, не характерно для статей академических.
[14:11.000 --> 14:14.000]  Дело в том, что Лэмпард вот так уже делал.
[14:14.000 --> 14:19.000]  Он вот эту статью написал в 90-м году, а в, кажется, начале или середине 80-х
[14:19.000 --> 14:23.000]  написал статью, которая называлась «Задача византийских генералов».
[14:23.000 --> 14:27.000]  И там тоже была какая-то квазисторическая история, такой сеттинг.
[14:27.000 --> 14:30.000]  Была византийская армия, она осаждала вражеский город,
[14:30.000 --> 14:33.000]  и эта армия была поделена на какие-то подразделения.
[14:33.000 --> 14:36.000]  И каждым подразделением руководил собственный генерал.
[14:36.000 --> 14:42.000]  И вот генералы должны были договориться друг с другом об атаке или об отступлении.
[14:42.000 --> 14:48.000]  И должны были договориться об одном действии, потому что если атакуют не все,
[14:48.000 --> 14:51.000]  то наступление провалится, и армия погибнет.
[14:51.000 --> 14:56.000]  Беда была в том, что среди генералов были предатели, которые могли саботировать протокол
[14:56.000 --> 14:58.000]  и действовать независимо от остальных.
[14:58.000 --> 15:02.000]  И задача состояла в том, чтобы все честные генералы договорились либо об атаке,
[15:02.000 --> 15:05.000]  либо об отступлении, независимо от того, что делают предатели.
[15:05.000 --> 15:10.000]  Легко понять, что это задача бинарного консенсуса, про который мы говорили в прошлый раз,
[15:10.000 --> 15:16.000]  и это задача про византийскую модель отказов, когда у нас узлы могут протокол нарушать.
[15:16.000 --> 15:18.000]  Но почему византийская модель отказов?
[15:18.000 --> 15:21.000]  Потому что Лэмпорт написал статью про византийских генералов.
[15:21.000 --> 15:27.000]  Термин прижился, и мы им пользуемся до сих пор, как можно заметить.
[15:27.000 --> 15:30.000]  Что же было с греками?
[15:30.000 --> 15:32.000]  С греками получилось чуть интереснее.
[15:32.000 --> 15:39.000]  И удивительным образом, вся эта история описана самим Лэмпортом,
[15:39.000 --> 15:43.000]  потому что у Лэмпорта есть сайт, и в нем каждой статьей есть еще и заметки самого Лэмпорта
[15:43.000 --> 15:45.000]  про то, как он эти статьи писал.
[15:45.000 --> 15:48.000]  В общем, тоже не каждый так делает, наверное.
[15:48.000 --> 15:53.000]  Так вот, Лэмпорт написал эту статью и в 90-м году отправил ее на конференцию TOX.
[15:53.000 --> 15:56.000]  Это такая очень крупная конференция по теоретическому компьютеру science.
[15:56.000 --> 15:59.000]  На что ему там ответили?
[15:59.000 --> 16:05.000]  Что статья умеренно интересная, но кажется, она не очень полезна.
[16:05.000 --> 16:09.000]  А греков оттуда вообще лучше убрать.
[16:09.000 --> 16:11.000]  Ну, тут смотрите, какая история.
[16:11.000 --> 16:14.000]  Убрать греков, кажется, для Лэмпорта был вообще один вариант.
[16:14.000 --> 16:19.000]  Он написал, что он был раздражен, что никто не оценил его чувство юмора
[16:19.000 --> 16:23.000]  и отказался что-либо в статье переделывать.
[16:23.000 --> 16:28.000]  Тут нужен некоторый экскурс в Wesley Lamport, потому что человек совершенно неординарный
[16:28.000 --> 16:30.000]  со своим особенным чувством юмора.
[16:30.000 --> 16:35.000]  Например, это лекция Wesley Lamport про язык TLA, про который мы будем еще говорить.
[16:35.000 --> 16:39.000]  Вот он там рассказывает о том, кто он такой.
[16:39.000 --> 16:41.000]  Ну и тут видео интересное.
[16:41.000 --> 16:47.000]  Он то в одном образе, то в другом образе.
[16:47.000 --> 16:53.000]  Вот есть такой образ.
[16:53.000 --> 16:58.000]  В общем, греков изъятия статьи было совершенно невозможно.
[16:58.000 --> 17:02.000]  Кроме того, Лэмпорта не просто про греков написал.
[17:02.000 --> 17:04.000]  Он сделал чуть интереснее.
[17:04.000 --> 17:12.000]  Во-первых, он в свою статью встроил еще некоторые имена.
[17:12.000 --> 17:14.000]  Вот это некоторые имя некоторого выборщика.
[17:14.000 --> 17:16.000]  Но имена здесь есть интересные.
[17:16.000 --> 17:18.000]  Давайте я покажу какое-нибудь из них.
[17:23.000 --> 17:25.000]  Можно найти.
[17:25.000 --> 17:27.000]  Вот так.
[17:27.000 --> 17:33.000]  Смотрите, имя некоторого сырного инспектора.
[17:33.000 --> 17:37.000]  Что-то напоминает.
[17:37.000 --> 17:41.000]  Кто-то не поленился и на stack exchange, посвященном теорическому компьютеру science,
[17:41.000 --> 17:43.000]  создал вопрос, а кто все эти люди?
[17:43.000 --> 17:47.000]  Вот явно, что в статье есть какие-то имена, и нужно разобраться.
[17:47.000 --> 17:51.000]  И кто-то не поленился, выписал все имена и нашел всех этих людей.
[17:51.000 --> 17:53.000]  Это оказались коллеги Лэмпорта.
[17:53.000 --> 17:57.000]  Тут есть ту, которая статью про фейл-детектора написала.
[17:57.000 --> 18:00.000]  Нэнси Рич, это одна из авторов FLP.
[18:00.000 --> 18:05.000]  Ну в общем, да экстра, понятно.
[18:05.000 --> 18:10.000]  В общем, там были эти странные греки.
[18:10.000 --> 18:13.000]  Ну и даже это еще не все.
[18:13.000 --> 18:16.000]  Сейчас я найду.
[18:16.000 --> 18:20.000]  Статья изобилует определенными мемами.
[18:23.000 --> 18:27.000]  Сейчас мне нужно аккуратно найти еще один.
[18:35.000 --> 18:38.000]  Ох, секундочку.
[18:41.000 --> 18:43.000]  Ну вот, смотрите.
[18:43.000 --> 18:45.000]  Тут в статье есть разные термины.
[18:45.000 --> 18:48.000]  Вот есть греческие термины.
[18:48.000 --> 18:49.000]  Ну как они...
[18:49.000 --> 18:51.000]  Что значит греческие термины?
[18:51.000 --> 18:53.000]  Это термины, написанные греческими буквами.
[18:53.000 --> 18:55.000]  Я не уверен, что это греческое слово.
[18:55.000 --> 18:57.000]  Я очень уверен, что это как бы нет.
[18:57.000 --> 18:59.000]  Ну вот, возьмите мю-эм.
[18:59.000 --> 19:01.000]  Вот это что за буква?
[19:01.000 --> 19:03.000]  Вот это ма уже получалось.
[19:03.000 --> 19:06.000]  Ну вот, и так можно продолжить.
[19:09.000 --> 19:11.000]  Вот это ма.
[19:11.000 --> 19:13.000]  А вот это ма.
[19:13.000 --> 19:15.000]  Ну вот, это ма.
[19:15.000 --> 19:17.000]  Это ма.
[19:17.000 --> 19:19.000]  Ну, это ма.
[19:19.000 --> 19:21.000]  Ну вот, это ма.
[19:21.000 --> 19:23.000]  Это ма.
[19:23.000 --> 19:25.000]  Ну вот, и так можно продолжить.
[19:31.000 --> 19:33.000]  Ну вот это что за буква?
[19:36.000 --> 19:38.000]  О, отлично. У нас есть О.
[19:40.000 --> 19:42.000]  Ну короче, вот нужно это слово прочесть.
[19:45.000 --> 19:47.000]  Да, это majority set.
[19:48.000 --> 19:50.000]  Ну и дальше лэмпорт.
[19:50.000 --> 19:52.000]  Он описывает протокол, который был у древних греков.
[19:52.000 --> 19:54.000]  Поэтому там и термины, соответственно,
[19:54.000 --> 19:56.000]  довольно раритетные.
[19:56.000 --> 19:58.000]  Короче,
[19:58.000 --> 20:00.000]  лэмпорт совершенно точно был
[20:00.000 --> 20:02.000]  ненаверен стать что-то исправлять.
[20:02.000 --> 20:04.000]  Эти грек.
[20:04.000 --> 20:06.000]  Вот, по поводу того, что алгоритм кажется
[20:06.000 --> 20:08.000]  не очень важен.
[20:08.000 --> 20:10.000]  Я вам рассказывал про систему Google Spanner.
[20:10.000 --> 20:12.000]  Мы про нее говорили в контексте
[20:12.000 --> 20:14.000]  True Time.
[20:14.000 --> 20:16.000]  Ну и я говорил, что это просто такая большая
[20:16.000 --> 20:18.000]  геораспределенная база данных.
[20:18.000 --> 20:20.000]  Кажется, задачи вполне полезные.
[20:20.000 --> 20:22.000]  Вот, и это, наверное, самая большая база данных,
[20:22.000 --> 20:24.000]  которая в мире существует.
[20:24.000 --> 20:26.000]  И если вы там поищете слово Paxos,
[20:26.000 --> 20:28.000]  то окажется, что алгоритм использует Paxos
[20:28.000 --> 20:30.000]  для репликации внутри каждого шарда.
[20:30.000 --> 20:32.000]  То есть это такой кирпичик,
[20:32.000 --> 20:34.000]  на котором все системы держатся.
[20:34.000 --> 20:36.000]  Вот, поэтому
[20:36.000 --> 20:38.000]  можно сказать, что ревьюры в 90-м году
[20:38.000 --> 20:40.000]  были не совсем правы.
[20:40.000 --> 20:42.000]  Ну и
[20:42.000 --> 20:44.000]  отдельно порекомендую.
[20:44.000 --> 20:46.000]  Есть книжка, которую написал тоже Google,
[20:46.000 --> 20:48.000]  сайт Real Business Engineering. И там есть целая глава,
[20:48.000 --> 20:50.000]  посвященная тому,
[20:50.000 --> 20:52.000]  как управлять системами,
[20:52.000 --> 20:54.000]  строить системы, которые основаны
[20:54.000 --> 20:56.000]  на консенсусе. Мы про это поговорим еще.
[20:56.000 --> 20:58.000]  Вот там как раз тоже используется Paxos
[20:58.000 --> 21:00.000]  как основной пример алгоритма консенсуса.
[21:04.000 --> 21:06.000]  Ну что ж.
[21:06.000 --> 21:08.000]  На конференции
[21:08.000 --> 21:10.000]  Лэмпорта не оценили.
[21:10.000 --> 21:12.000]  Лэмпорта горчился, но он еще и
[21:12.000 --> 21:14.000]  коллегам свою статью показывал.
[21:14.000 --> 21:16.000]  Отправил,
[21:16.000 --> 21:18.000]  в частности, Нэнти Лич другим своим товарищам.
[21:20.000 --> 21:22.000]  Им статья понравилась, конечно же.
[21:22.000 --> 21:24.000]  А потом он их отдельно спросил, а вот понимаете ли
[21:24.000 --> 21:26.000]  вы, коллеги, как написать базу данных,
[21:26.000 --> 21:28.000]  которая бы не теряла
[21:28.000 --> 21:30.000]  согласованности при любом количестве отказов
[21:30.000 --> 21:32.000]  и при этом бы функционировала,
[21:32.000 --> 21:34.000]  обслуживала пользователей, когда отказов меньше
[21:34.000 --> 21:36.000]  половины.
[21:36.000 --> 21:38.000]  И, к сожалению, он пишет, что никто
[21:38.000 --> 21:40.000]  из моих коллег не увидел никакой связи между моим вопросом
[21:40.000 --> 21:42.000]  и статьей про Paxos,
[21:42.000 --> 21:44.000]  что тоже Лэмпорта горчила.
[21:44.000 --> 21:46.000]  Ну, как горчила.
[21:46.000 --> 21:48.000]  Но он уперся и не стал ничего
[21:48.000 --> 21:50.000]  менять. И статью не опубликовали в 1990 году.
[21:52.000 --> 21:54.000]  Хотя Лэмпорта пишет, что
[21:54.000 --> 21:56.000]  какие-то коллеги все-таки понимали ее ценность,
[21:56.000 --> 21:58.000]  понимали о чем она на самом деле.
[21:58.000 --> 22:00.000]  Но так вот продвинулась история
[22:00.000 --> 22:02.000]  до 1998 года.
[22:02.000 --> 22:04.000]  И все-таки в 1998
[22:04.000 --> 22:06.000]  году статья все-таки попала.
[22:06.000 --> 22:08.000]  Конференцию
[22:08.000 --> 22:10.000]  была опубликована
[22:10.000 --> 22:12.000]  спустя 8 лет.
[22:12.000 --> 22:14.000]  И Лэмпорт попросил
[22:14.000 --> 22:16.000]  по этому поводу вставить в статью
[22:16.000 --> 22:18.000]  вот такое небольшое замечание, что
[22:18.000 --> 22:20.000]  эта статья
[22:20.000 --> 22:22.000]  была найдена где-то в пыльном углу
[22:22.000 --> 22:24.000]  кабинета
[22:24.000 --> 22:26.000]  редакторов этой конференции.
[22:26.000 --> 22:28.000]  И наконец-то ее
[22:28.000 --> 22:30.000]  сочли достойно
[22:30.000 --> 22:32.000]  до републикации.
[22:32.000 --> 22:34.000]  Но, к сожалению, автор сейчас находится
[22:34.000 --> 22:36.000]  где-то на раскопках
[22:36.000 --> 22:38.000]  Древней Греции и сейчас не доступен,
[22:38.000 --> 22:40.000]  поэтому мы опубликуем статью с его согласия.
[22:40.000 --> 22:42.000]  Статью все-таки опубликовали
[22:42.000 --> 22:44.000]  к счастью до Лэмпорта, но
[22:44.000 --> 22:46.000]  это ничего сильно не поменяло,
[22:46.000 --> 22:48.000]  потому что сам Лэмпорт пишет,
[22:48.000 --> 22:50.000]  что никто особо не обратил
[22:50.000 --> 22:52.000]  на нее внимания.
[22:52.000 --> 22:54.000]  И он жалуется, что люди
[22:54.000 --> 22:56.000]  запоминали больше частью Древних Греков
[22:56.000 --> 22:58.000]  и то, как он выступает на конференциях
[22:58.000 --> 23:00.000]  в костюме Индиана Джонса, а почему-то не алгоритмом
[23:00.000 --> 23:02.000]  Факса, который там был изложен.
[23:02.000 --> 23:04.000]  Вот Лэмпорт огорчался,
[23:04.000 --> 23:06.000]  и он
[23:06.000 --> 23:08.000]  пишет, что
[23:08.000 --> 23:10.000]  ему было
[23:10.000 --> 23:12.000]  обидно,
[23:12.000 --> 23:14.000]  потому что алгоритм очень простой.
[23:14.000 --> 23:16.000]  И в какой-то момент он
[23:16.000 --> 23:18.000]  пишет, что он был на какой-то конференции
[23:18.000 --> 23:20.000]  и объяснил кому-то из своих коллег
[23:20.000 --> 23:22.000]  усно этот алгоритм
[23:22.000 --> 23:24.000]  без этой статьи.
[23:24.000 --> 23:26.000]  И в конце концов не выдержал, пришел домой
[23:26.000 --> 23:28.000]  и за вечер написал такое
[23:28.000 --> 23:30.000]  маленькое короткое изложение,
[23:30.000 --> 23:32.000]  уже не всего протокола Атомик Бродкаста,
[23:32.000 --> 23:34.000]  который был в статье про Греков,
[23:34.000 --> 23:36.000]  а вот решение задачи консенсов
[23:36.000 --> 23:38.000]  в изоляции.
[23:38.000 --> 23:40.000]  И получилась статья на 13 страниц,
[23:40.000 --> 23:42.000]  в которой, как он пишет, не было формулы
[23:42.000 --> 23:44.000]  сложнее, чем N1 и больше, чем N2.
[23:44.000 --> 23:46.000]  В общем, абсолютно справедливое
[23:46.000 --> 23:48.000]  замечание. И эта статья
[23:48.000 --> 23:50.000]  называется Paxus, my simple,
[23:50.000 --> 23:52.000]  Paxus с простыми словами.
[23:52.000 --> 23:54.000]  У нее тоже довольно интересный
[23:54.000 --> 23:56.000]  абстракт. Тут написано, что
[23:56.000 --> 23:58.000]  алгоритм Paxus, если он изложен на английском,
[23:58.000 --> 24:00.000]  очень прост, на самом деле.
[24:00.000 --> 24:02.000]  И Лэмпорт пишет, что
[24:02.000 --> 24:04.000]  статья первая оказалась
[24:04.000 --> 24:06.000]  слишком греческой
[24:06.000 --> 24:08.000]  для многих читателей, поэтому
[24:08.000 --> 24:10.000]  он переписал на английском.
[24:10.000 --> 24:12.000]  И он пишет алгоритм очень прост, и практически
[24:12.000 --> 24:14.000]  неизбежно следует из каких-то свойств
[24:14.000 --> 24:16.000]  самой задачи консенсов.
[24:16.000 --> 24:18.000]  То есть ничего проще быть не может на свете.
[24:24.000 --> 24:26.000]  Но вот не все с ним согласны.
[24:28.000 --> 24:30.000]  Чуть позже у нас будет другой алгоритм консенсуса,
[24:30.000 --> 24:32.000]  вернее, другой алгоритм, который занимается
[24:32.000 --> 24:34.000]  Atomic Broadcast, ну или
[24:34.000 --> 24:36.000]  чуть точнее реплицирует
[24:36.000 --> 24:38.000]  LogCommand для RSM.
[24:38.000 --> 24:40.000]  Он называется
[24:40.000 --> 24:42.000]  Raft. И статья, посвященная алгоритму
[24:42.000 --> 24:44.000]  Raft, у нее тоже любопытное название, называется
[24:44.000 --> 24:46.000]  В поисках понятного алгоритма консенсуса.
[24:46.000 --> 24:48.000]  Это такая шпилька в сторону
[24:48.000 --> 24:50.000]  Paxus, потому что авторы пишут, что
[24:50.000 --> 24:52.000]  то, что они придумали,
[24:52.000 --> 24:54.000]  это результат, который
[24:54.000 --> 24:56.000]  не делает ничего нового. Мы получили
[24:56.000 --> 24:58.000]  результат эквивалентный
[24:58.000 --> 25:00.000]  алгоритму Paxus.
[25:00.000 --> 25:02.000]  Вот не каждый так статьи начинают.
[25:02.000 --> 25:04.000]  Но
[25:04.000 --> 25:06.000]  почему эта статья была написана?
[25:06.000 --> 25:08.000]  Потому что,
[25:08.000 --> 25:10.000]  как пишут авторы этой статьи,
[25:10.000 --> 25:12.000]  алгоритм Paxus довольно труден для понимания,
[25:12.000 --> 25:14.000]  несмотря на многие попытки все-таки сделать его
[25:14.000 --> 25:16.000]  доступным.
[25:16.000 --> 25:18.000]  И после того, как
[25:18.000 --> 25:20.000]  авторы этого алгоритма Raft
[25:20.000 --> 25:22.000]  испытали трудности с Paxus
[25:22.000 --> 25:24.000]  сами, они написали свою статью.
[25:26.000 --> 25:28.000]  Правы они или нет, мы узнаем чуть
[25:28.000 --> 25:30.000]  позже. У вас будет возможность
[25:30.000 --> 25:32.000]  самостоятельно оценить утверждение,
[25:32.000 --> 25:34.000]  потому что мы и то, и другое напишем.
[25:36.000 --> 25:38.000]  Но вообще-то алгоритм Paxus занимает
[25:38.000 --> 25:40.000]  вот столько места. Это его псевдокод.
[25:42.000 --> 25:44.000]  Вот 20 строчек.
[25:44.000 --> 25:46.000]  Не то чтобы он сложен,
[25:46.000 --> 25:48.000]  понять его несложно.
[25:48.000 --> 25:50.000]  Что именно
[25:50.000 --> 25:52.000]  имеют в виду авторы Raft?
[25:54.000 --> 25:56.000]  Видимо, немного другое. Они говорят о том, что
[25:56.000 --> 25:58.000]  Paxus, наверное, не интуитивен.
[25:58.000 --> 26:00.000]  И вот сегодня, я надеюсь, вам это
[26:00.000 --> 26:02.000]  предемонстрирую.
[26:02.000 --> 26:04.000]  Его, к сожалению, трудно объяснить актоинкрементально,
[26:04.000 --> 26:06.000]  как мы делали с регистром. Мы там брали
[26:06.000 --> 26:08.000]  три реплики, давайте напишем на все,
[26:08.000 --> 26:10.000]  соберем кворум, прочитаем со всех,
[26:10.000 --> 26:12.000]  соберем кворум, пересеклось, здорово.
[26:12.000 --> 26:14.000]  Потом ошибка нашлась, поправим.
[26:14.000 --> 26:16.000]  Другая проблема, и поправим.
[26:16.000 --> 26:18.000]  Актоинкрементально можно выстроить, делая простые шаги.
[26:18.000 --> 26:20.000]  С Paxus такого не получится.
[26:22.000 --> 26:24.000]  Почему не получится, мы сегодня, наверное,
[26:24.000 --> 26:26.000]  увидим, ну или в следующий раз точно
[26:26.000 --> 26:28.000]  увидим. А вот Raft претендует
[26:28.000 --> 26:30.000]  на то, чтобы...
[26:30.000 --> 26:32.000]  Raft претендует на понятность,
[26:32.000 --> 26:34.000]  на то, что он интуитивен.
[26:34.000 --> 26:36.000]  Там есть какая-то декомпозиция,
[26:36.000 --> 26:38.000]  где части,
[26:38.000 --> 26:40.000]  по утверждению авторов
[26:40.000 --> 26:42.000]  Raft независимы друг от друга.
[26:44.000 --> 26:46.000]  Я попытаюсь вас убедить, что это не так,
[26:46.000 --> 26:48.000]  но это потребует некоторое время.
[26:48.000 --> 26:50.000]  С одной стороны, есть такая сложность
[26:50.000 --> 26:52.000]  Paxus, то есть
[26:52.000 --> 26:54.000]  в нем нет какой-то простой интуиции.
[26:54.000 --> 26:56.000]  А другая сложность, она действительно
[26:56.000 --> 26:58.000]  в статье про Paxus,
[26:58.000 --> 27:00.000]  потому что она наполовину про греков,
[27:00.000 --> 27:02.000]  а вторая половина
[27:02.000 --> 27:04.000]  сложности этой статьи в том,
[27:04.000 --> 27:06.000]  что там, где
[27:06.000 --> 27:08.000]  Лэмпард пишет не по-гречески, а по-английски,
[27:08.000 --> 27:10.000]  он почему-то начинает
[27:10.000 --> 27:12.000]  суперформально рассуждать.
[27:12.000 --> 27:14.000]  То есть он пишет...
[27:14.000 --> 27:16.000]  Он доказывает простые вещи, очень фантастические.
[27:16.000 --> 27:18.000]  Он доказывает простые вещи, очень формально.
[27:18.000 --> 27:20.000]  И читать это...
[27:20.000 --> 27:22.000]  Ты застреваешь, когда читаешь.
[27:22.000 --> 27:24.000]  Почему он так делал?
[27:24.000 --> 27:26.000]  Потому что
[27:26.000 --> 27:28.000]  у него был свой собственный интерес,
[27:28.000 --> 27:30.000]  он занимался формальной спецификацией, верификацией
[27:30.000 --> 27:32.000]  и разрабатывал язык, который называется
[27:32.000 --> 27:34.000]  телеплюс для того, чтобы формально описывать
[27:34.000 --> 27:36.000]  как работают алгоритмы.
[27:36.000 --> 27:38.000]  Мы про это тоже поговорим.
[27:38.000 --> 27:40.000]  В общем, Лэмпард, с одной стороны, был суперформально,
[27:40.000 --> 27:42.000]  с другой стороны, писал какие-то мемы про греков.
[27:42.000 --> 27:44.000]  И из-за этого
[27:44.000 --> 27:46.000]  статью читать трудно, конечно же.
[27:46.000 --> 27:48.000]  Но это такая сложность преодолимая.
[27:48.000 --> 27:50.000]  И...
[27:50.000 --> 27:52.000]  Что я могу порекомендовать?
[27:52.000 --> 27:54.000]  На самом деле я вам статью рекомендую, но не сразу.
[27:54.000 --> 27:56.000]  Если вы изучаете распределенные системы
[27:56.000 --> 27:58.000]  и вы хотите погрузиться в задачу консенсуса,
[27:58.000 --> 28:00.000]  то начинать статьи, конечно,
[28:00.000 --> 28:02.000]  не стоит.
[28:02.000 --> 28:04.000]  Стоит начинать с RAFTA.
[28:04.000 --> 28:06.000]  Есть статья на 18 страниц
[28:06.000 --> 28:08.000]  про RAFTA, относительно
[28:08.000 --> 28:10.000]  небольшая.
[28:10.000 --> 28:12.000]  И кроме того, в RAFTA
[28:12.000 --> 28:14.000]  вместе с этой статьей написано PHD.
[28:14.000 --> 28:16.000]  PHD
[28:16.000 --> 28:18.000]  она уже занимает 250 страниц,
[28:18.000 --> 28:20.000]  260 почти что.
[28:20.000 --> 28:22.000]  И в ней, помимо изложения алгоритма,
[28:22.000 --> 28:24.000]  есть буквально все детали
[28:24.000 --> 28:26.000]  устройства RSM в продакшене.
[28:26.000 --> 28:28.000]  Буквально учебник.
[28:28.000 --> 28:30.000]  И там есть отдельная глава, скажем,
[28:30.000 --> 28:32.000]  про...
[28:32.000 --> 28:34.000]  Почему я не могу перейти?
[28:34.000 --> 28:36.000]  Про протокол клиента. То есть как сделать
[28:36.000 --> 28:38.000]  exactly once в RSM.
[28:38.000 --> 28:40.000]  Про переконфигурация.
[28:40.000 --> 28:42.000]  Мы говорим про задачах,
[28:42.000 --> 28:44.000]  где зафиксированы 5 узлов
[28:44.000 --> 28:46.000]  или 3 узла. И их состав не меняется,
[28:46.000 --> 28:48.000]  даже если они умирают.
[28:48.000 --> 28:50.000]  В реальности, конечно, нужно
[28:50.000 --> 28:52.000]  заменять сбоенные узлы на новые.
[28:52.000 --> 28:54.000]  Нужно как-то переконфигурировать состав кластера.
[28:54.000 --> 28:56.000]  Это меняет кворумы.
[28:56.000 --> 28:58.000]  И нужно делать это аккуратно.
[28:58.000 --> 29:00.000]  В PHD описывается и эта проблема,
[29:00.000 --> 29:02.000]  и многие другие.
[29:02.000 --> 29:04.000]  Так вот,
[29:04.000 --> 29:06.000]  если вы прочтете статью про RAFTA
[29:06.000 --> 29:08.000]  и посмотрите на это PHD,
[29:08.000 --> 29:10.000]  а потом вернетесь в 90-й год
[29:12.000 --> 29:14.000]  и будете читать статью Лэмпорта,
[29:14.000 --> 29:16.000]  то окажется, что
[29:16.000 --> 29:18.000]  Лэмпорт многие вещи там
[29:18.000 --> 29:20.000]  описал.
[29:20.000 --> 29:22.000]  Опять как-то совершенно шутливо через каких-то сынных инспекторов
[29:22.000 --> 29:24.000]  и солнечные часы.
[29:24.000 --> 29:26.000]  То есть он тогда все это понимал,
[29:26.000 --> 29:28.000]  но оценить из того времени
[29:28.000 --> 29:30.000]  это было невозможно.
[29:30.000 --> 29:32.000]  И Лэмпорт особо не стремился
[29:32.000 --> 29:34.000]  к тому, чтобы его оценили.
[29:34.000 --> 29:36.000]  Ну вот.
[29:36.000 --> 29:38.000]  Короче,
[29:38.000 --> 29:40.000]  сложная история.
[29:40.000 --> 29:42.000]  Да, еще две забавные детали.
[29:42.000 --> 29:44.000]  С одной стороны,
[29:44.000 --> 29:46.000]  это статья формальная,
[29:46.000 --> 29:48.000]  а статья про UPAXUS Made Simple
[29:48.000 --> 29:50.000]  она, наоборот,
[29:50.000 --> 29:52.000]  очень простая и написана
[29:52.000 --> 29:54.000]  буквально по-английски,
[29:54.000 --> 29:56.000]  бытовым языком.
[29:56.000 --> 29:58.000]  Чем это обернулось?
[29:58.000 --> 30:00.000]  Довольно странная история, в свою очередь.
[30:00.000 --> 30:02.000]  Лэмпорт пишет, что в 2015 году,
[30:02.000 --> 30:04.000]  ну вот, короче, проще показать.
[30:04.000 --> 30:06.000]  На статике overflow появился вопрос.
[30:06.000 --> 30:08.000]  Человек читает статью Лэмпорта
[30:08.000 --> 30:10.000]  про UPAXUS Made Simple и говорит, там есть какая-то ошибка вроде.
[30:10.000 --> 30:12.000]  Ну и приходит другой человек,
[30:12.000 --> 30:14.000]  который разбирается в этом инженере Amazon
[30:14.000 --> 30:16.000]  и помогает
[30:16.000 --> 30:18.000]  автор вопроса разобраться,
[30:18.000 --> 30:20.000]  что на самом деле просто в статье Лэмпорта
[30:20.000 --> 30:22.000]  UPAXUS Made Simple есть
[30:22.000 --> 30:24.000]  предложение, написанное на английском языке,
[30:24.000 --> 30:26.000]  которое можно интерпретировать
[30:26.000 --> 30:28.000]  неоднозначно.
[30:28.000 --> 30:30.000]  И вот в одной интерпретации мы получаем, что алгоритм
[30:30.000 --> 30:32.000]  не правильный, а другой правильный.
[30:32.000 --> 30:34.000]  Ну, разумеется, ошибки у Лэмпорта нет,
[30:34.000 --> 30:36.000]  просто вот такое,
[30:36.000 --> 30:38.000]  два способа прочесть одно и то же.
[30:38.000 --> 30:40.000]  Поэтому что про это говорит Лэмпорт?
[30:44.000 --> 30:46.000]  Во-первых, я не собираюсь эту ошибку исправлять в статье,
[30:46.000 --> 30:48.000]  ну кто знает почему.
[30:48.000 --> 30:50.000]  Нет, понятно почему. Он говорит, что вот просто
[30:50.000 --> 30:52.000]  не читайте эту статью.
[30:52.000 --> 30:54.000]  Вот ровно поэтому я ошибку там исправлять не буду.
[30:54.000 --> 30:56.000]  Вот читайте статью про парламент, там все четко,
[30:56.000 --> 30:58.000]  там ошибки нет, там неоднозначности нет.
[31:00.000 --> 31:02.000]  В общем, статья со сложной судьбой,
[31:02.000 --> 31:04.000]  вряд ли кто-то ее сможет повторить когда-либо.
[31:04.000 --> 31:06.000]  Но мы
[31:06.000 --> 31:08.000]  сегодня хотим
[31:08.000 --> 31:10.000]  с этой статьей разобраться. Ну, вернее,
[31:10.000 --> 31:12.000]  в статье описывается протокол работы парламента.
[31:14.000 --> 31:16.000]  Протокол работы парламента
[31:16.000 --> 31:18.000]  из следующей лекции наша.
[31:18.000 --> 31:20.000]  Сегодня мы хотим разобраться в протоколе,
[31:20.000 --> 31:22.000]  именно
[31:22.000 --> 31:24.000]  которую описывает Лэмпорт в этой статье,
[31:24.000 --> 31:26.000]  которая решает задачу консенсуса
[31:26.000 --> 31:28.000]  в изоляции.
[31:28.000 --> 31:30.000]  Это протокол, который называется Single Decree Paxos,
[31:30.000 --> 31:32.000]  то есть Paxos одного указа.
[31:32.000 --> 31:34.000]  То есть задача о том, чтобы договориться
[31:34.000 --> 31:36.000]  о очередном указе, решить задачу консенсуса.
[31:38.000 --> 31:40.000]  Ну и можно наконец
[31:40.000 --> 31:42.000]  переходить
[31:42.000 --> 31:44.000]  к нашему основному содержанию.
[31:44.000 --> 31:46.000]  Ой, забыл еще одну шутку.
[31:46.000 --> 31:48.000]  Ну как же так? Там
[31:48.000 --> 31:50.000]  слишком много всего. В общем,
[31:50.000 --> 31:52.000]  статья называется Paxos Made Simple,
[31:52.000 --> 31:54.000]  и это положило
[31:54.000 --> 31:56.000]  в целую очередь мемов, потому что статьи
[31:56.000 --> 31:58.000]  стали называть так и дальше.
[31:58.000 --> 32:00.000]  То есть у нас будет
[32:00.000 --> 32:02.000]  лекция по статье, которая называется Paxos
[32:02.000 --> 32:04.000]  Made Live.
[32:08.000 --> 32:10.000]  И
[32:10.000 --> 32:12.000]  была статья, которая называется
[32:12.000 --> 32:14.000]  Paxos Made Moderately Complex.
[32:14.000 --> 32:16.000]  Ну,
[32:24.000 --> 32:26.000]  в общем, целая история
[32:26.000 --> 32:28.000]  с этим Paxos.
[32:30.000 --> 32:32.000]  Но, возможно,
[32:32.000 --> 32:34.000]  это не самая полезная вещь для нас.
[32:34.000 --> 32:36.000]  Мы хотим все-таки строить
[32:36.000 --> 32:38.000]  алгоритмы. Мы хотим решать задачу консенсуса.
[32:38.000 --> 32:40.000]  Напомню, что
[32:40.000 --> 32:42.000]  задача консенсуса состоит в следующем.
[32:44.000 --> 32:46.000]  У нас есть
[32:46.000 --> 32:48.000]  n узлов, у каждого узла есть
[32:48.000 --> 32:50.000]  свой собственный вход,
[32:50.000 --> 32:52.000]  и каждый узел должен реализовать
[32:52.000 --> 32:54.000]  процедуру
[32:56.000 --> 32:58.000]  Propose,
[32:58.000 --> 33:00.000]  который подается на вход этот input,
[33:00.000 --> 33:02.000]  и который
[33:02.000 --> 33:04.000]  выбирает некоторое общее значение.
[33:04.000 --> 33:06.000]  Мы хотим свойства
[33:06.000 --> 33:08.000]  валидить, то есть выбирается одно из
[33:08.000 --> 33:10.000]  предложенных значений, выдумывать их
[33:10.000 --> 33:12.000]  нельзя.
[33:12.000 --> 33:14.000]  Если два узла делают выбор,
[33:14.000 --> 33:16.000]  то они делают одинаковый выбор,
[33:16.000 --> 33:18.000]  и алгоритм,
[33:18.000 --> 33:20.000]  по возможности, должен завершаться.
[33:20.000 --> 33:22.000]  Мы выяснили эту задачу.
[33:22.000 --> 33:24.000]  Эта свойство не всегда достигается.
[33:26.000 --> 33:28.000]  Мы сегодня говорим про
[33:28.000 --> 33:30.000]  конкретный алгоритм, который решает эту задачу.
[33:30.000 --> 33:32.000]  Он называется Single Decree Paxos.
[33:42.000 --> 33:44.000]  И не так-то просто его рассказать.
[33:44.000 --> 33:46.000]  Я уже говорил, что у него нет
[33:46.000 --> 33:48.000]  начала и конца, его можно рассказать только
[33:48.000 --> 33:50.000]  целиком.
[33:50.000 --> 33:52.000]  Вот я сейчас это собираюсь сделать,
[33:52.000 --> 33:54.000]  а потом мы будем его изучать.
[33:54.000 --> 33:56.000]  Но прежде, чем я
[33:56.000 --> 33:58.000]  нарисую картинки, как он работает,
[33:58.000 --> 34:00.000]  как он устроен, нужна какая-то интуиция
[34:00.000 --> 34:02.000]  все же.
[34:02.000 --> 34:04.000]  В задаче консенсуса у нас есть
[34:04.000 --> 34:06.000]  отдельные узлы, у них есть значение.
[34:06.000 --> 34:08.000]  В алгоритме Single Decree Paxos
[34:08.000 --> 34:10.000]  на этих узлах выделяются роли.
[34:16.000 --> 34:18.000]  Именно две роли.
[34:18.000 --> 34:20.000]  Роль Proposer
[34:20.000 --> 34:22.000]  и роль Acceptor.
[34:26.000 --> 34:28.000]  Каждый узел в алгоритме Paxos
[34:28.000 --> 34:30.000]  является и пропозером, и аксептором.
[34:30.000 --> 34:32.000]  Proposer предлагает значение,
[34:32.000 --> 34:34.000]  а в Paxos есть и пропозер,
[34:34.000 --> 34:36.000]  и аксептор.
[34:36.000 --> 34:38.000]  Proposer предлагает значение.
[34:38.000 --> 34:40.000]  То есть это активная часть алгоритма,
[34:40.000 --> 34:42.000]  именно пропозер выполняет процедуру
[34:42.000 --> 34:44.000]  Propose, у него есть входное значение.
[34:46.000 --> 34:48.000]  Аксептор голосует
[34:48.000 --> 34:50.000]  за значение
[34:50.000 --> 34:52.000]  или чуть точнее за предложение,
[34:52.000 --> 34:54.000]  которое выдвигают пропозер.
[34:56.000 --> 34:58.000]  Аксептор
[34:58.000 --> 35:00.000]  может голосовать за одно
[35:00.000 --> 35:02.000]  предложение,
[35:02.000 --> 35:04.000]  он не обязан сохранять
[35:04.000 --> 35:06.000]  свою выбранную вещь,
[35:06.000 --> 35:08.000]  он может его поменять.
[35:08.000 --> 35:10.000]  Сами предложения это не просто значение,
[35:10.000 --> 35:12.000]  это пары.
[35:18.000 --> 35:20.000]  То есть если пропозер предлагает какое-то
[35:20.000 --> 35:22.000]  предложение, то он берет значение
[35:22.000 --> 35:24.000]  и добавляет к нему
[35:24.000 --> 35:26.000]  то, что называется Proposal
[35:26.000 --> 35:28.000]  или Bellet Number.
[35:34.000 --> 35:36.000]  Пропозеры выбирают для своих
[35:36.000 --> 35:38.000]  предложений разные n,
[35:38.000 --> 35:40.000]  глобально разные.
[35:40.000 --> 35:42.000]  Эти n должны быть упорядочены,
[35:42.000 --> 35:44.000]  но они не обязаны
[35:44.000 --> 35:46.000]  выбираться монотонно.
[35:46.000 --> 35:48.000]  Каждый пропозер будет выбирать их
[35:48.000 --> 35:50.000]  монотонно, то есть каждый пропозер
[35:50.000 --> 35:52.000]  будет набирать свои предложения
[35:52.000 --> 35:54.000]  растущими n.
[35:54.000 --> 35:56.000]  Но некую монотонность
[35:56.000 --> 35:58.000]  не глобально не требует.
[35:58.000 --> 36:00.000]  Если пропозер
[36:00.000 --> 36:02.000]  выбирает н,
[36:02.000 --> 36:04.000]  но некой монотонности глобально не требуется.
[36:04.000 --> 36:06.000]  Главное, чтобы
[36:06.000 --> 36:08.000]  для разных пропозеров, для разных
[36:08.000 --> 36:10.000]  предложений эти n были уникальными.
[36:10.000 --> 36:12.000]  Ну и
[36:12.000 --> 36:14.000]  можно, наверное, сразу считать, что вот эти
[36:14.000 --> 36:16.000]  n будут выглядеть так.
[36:16.000 --> 36:18.000]  Это некоторое число k
[36:18.000 --> 36:20.000]  и ID
[36:20.000 --> 36:22.000]  данного пропозера,
[36:22.000 --> 36:24.000]  чтобы они могли различаться.
[36:24.000 --> 36:26.000]  Вообще говоря, алгоритм, который мы строим,
[36:26.000 --> 36:28.000]  не требует, чтобы
[36:28.000 --> 36:30.000]  пропозеры и аксепторы были
[36:30.000 --> 36:32.000]  разными и теми же узлами.
[36:32.000 --> 36:34.000]  Вот в нашем алгоритме пропозеров
[36:34.000 --> 36:36.000]  может быть сколько угодно, значение может быть
[36:36.000 --> 36:38.000]  сколько угодно, а аксептора будет
[36:38.000 --> 36:40.000]  зафиксированное число. 3, 5 и так далее.
[36:40.000 --> 36:42.000]  Вот именно от аксептора
[36:42.000 --> 36:44.000]  будет зависеть отказа устойчивости.
[36:44.000 --> 36:46.000]  В задаче консенсуса,
[36:46.000 --> 36:48.000]  если мы смотрим на нее в изоляции,
[36:48.000 --> 36:50.000]  пропозер и аксептор это просто каждый отдельный узел,
[36:50.000 --> 36:52.000]  но если мы переносимся на уровень
[36:52.000 --> 36:54.000]  выше, на уровень Atomic Broadcast,
[36:54.000 --> 36:56.000]  на уровень RSM, а там уже это разделение может быть
[36:56.000 --> 36:58.000]  полезным по
[36:58.000 --> 37:00.000]  всем причинам.
[37:00.000 --> 37:02.000]  И как
[37:02.000 --> 37:04.000]  коммуникация между этими
[37:04.000 --> 37:06.000]  ролями устроена?
[37:06.000 --> 37:08.000]  Во-первых, пропозеры
[37:08.000 --> 37:10.000]  общаются только с аксепторами.
[37:10.000 --> 37:12.000]  Они не общаются друг с другом, и аксепторы вообще ни с кем
[37:12.000 --> 37:14.000]  с ними не общаются, они пассивные.
[37:14.000 --> 37:16.000]  Они только отвечают на команды пропозеров.
[37:18.000 --> 37:20.000]  Что могли бы делать пропозеры?
[37:20.000 --> 37:22.000]  Пропозеры предлагают свои значения,
[37:22.000 --> 37:24.000]  делают предложения такие аксепторам.
[37:24.000 --> 37:26.000]  Но пропозеров несколько,
[37:26.000 --> 37:28.000]  они конкурируют друг с другом.
[37:28.000 --> 37:30.000]  Так что вот
[37:30.000 --> 37:32.000]  непонятно, как же аксепторам
[37:32.000 --> 37:34.000]  скоординироваться, как им сделать общий выбор,
[37:34.000 --> 37:36.000]  как им проголосовать за одно и то же предложение.
[37:36.000 --> 37:38.000]  Для этого
[37:38.000 --> 37:40.000]  пропозер,
[37:40.000 --> 37:42.000]  это очень такое неформальное
[37:42.000 --> 37:44.000]  объяснение, но все же я им
[37:44.000 --> 37:46.000]  воспользуюсь, пропозер как будто
[37:46.000 --> 37:48.000]  бы берет на аксепторы блокировки.
[37:48.000 --> 37:50.000]  Вот если он хочет предложить
[37:50.000 --> 37:52.000]  что-то всем, то он сначала
[37:52.000 --> 37:54.000]  лочит каждого аксептора
[37:54.000 --> 37:56.000]  так условно очень,
[37:56.000 --> 37:58.000]  и когда он собирает локи
[37:58.000 --> 38:00.000]  с них, то после этого он говорит
[38:00.000 --> 38:02.000]  вот принимайте мое предложение.
[38:04.000 --> 38:06.000]  Но что может случиться?
[38:06.000 --> 38:08.000]  Понятно, что только один аксептор
[38:08.000 --> 38:10.000]  может собрать слишком много локов,
[38:10.000 --> 38:12.000]  кворум из локов, так что вот
[38:12.000 --> 38:14.000]  два аксептора не смогут так сделать вместе.
[38:14.000 --> 38:16.000]  Но с другой стороны, даже если мы примем
[38:16.000 --> 38:18.000]  такую интуицию, то уже непонятно, что такое
[38:18.000 --> 38:20.000]  распределенная блокировка, потому что
[38:20.000 --> 38:22.000]  что такое мьютекс локальный мы понимаем,
[38:22.000 --> 38:24.000]  а что такое мьютекс, у которого может умереть
[38:24.000 --> 38:26.000]  владелец пропозера, мы уже не понимаем.
[38:26.000 --> 38:28.000]  Ну, точнее, должны не понимать.
[38:28.000 --> 38:30.000]  Это некоторая проблема.
[38:30.000 --> 38:32.000]  Поэтому это конечно
[38:32.000 --> 38:34.000]  не буквально блокировки, это такие
[38:34.000 --> 38:36.000]  блокировки, которые можно отбирать
[38:36.000 --> 38:38.000]  у других.
[38:38.000 --> 38:40.000]  Вот чуть позже мы увидим,
[38:40.000 --> 38:42.000]  что в распределенных
[38:42.000 --> 38:44.000]  системах не локи используются,
[38:44.000 --> 38:46.000]  а используется понятие
[38:46.000 --> 38:48.000]  лизы.
[38:48.000 --> 38:50.000]  Если вы читали статью про GFS, там это слово было,
[38:50.000 --> 38:52.000]  и мы спустя некоторое время
[38:52.000 --> 38:54.000]  про это подробно поговорим.
[38:54.000 --> 38:56.000]  Ну, а пока можно считать, что мы берем такие,
[38:56.000 --> 38:58.000]  что пропозеры берут некоторые блокировки,
[38:58.000 --> 39:00.000]  но если пропозер умирает,
[39:00.000 --> 39:02.000]  или даже если не умирает, другой пропозер
[39:02.000 --> 39:04.000]  может эту блокировку перехватить у него.
[39:08.000 --> 39:10.000]  Ничего это не объясняет, но
[39:10.000 --> 39:12.000]  по крайней мере это поможет мне сейчас
[39:12.000 --> 39:14.000]  картинку рисовать.
[39:14.000 --> 39:16.000]  Я сейчас
[39:16.000 --> 39:18.000]  нарисую одного пропозера
[39:22.000 --> 39:24.000]  и
[39:24.000 --> 39:26.000]  пусть трех аксепторов.
[39:36.000 --> 39:38.000]  И опишу, как коммуникация между ними устроена.
[39:42.000 --> 39:44.000]  Вот буквально я сейчас нарисую
[39:44.000 --> 39:46.000]  алгоритм пропоуз.
[39:46.000 --> 39:48.000]  Вот его.
[39:50.000 --> 39:52.000]  То есть пропозер
[39:52.000 --> 39:54.000]  реализует свой пропоуз
[39:54.000 --> 39:56.000]  со значением v.
[39:56.000 --> 39:58.000]  Как он устроен?
[39:58.000 --> 40:00.000]  Он устроен в две фазы. Сначала нужно
[40:00.000 --> 40:02.000]  захватить внимание аксептора,
[40:02.000 --> 40:04.000]  взять на них блокировку условную,
[40:04.000 --> 40:06.000]  а потом сделать предложение.
[40:06.000 --> 40:08.000]  Первым делом
[40:08.000 --> 40:10.000]  пропозер выбирает
[40:10.000 --> 40:12.000]  некоторое n,
[40:12.000 --> 40:14.000]  а затем пропор.
[40:14.000 --> 40:16.000]  Вот выбрал.
[40:16.000 --> 40:18.000]  После чего
[40:18.000 --> 40:20.000]  начинает свою первую фазу.
[40:28.000 --> 40:30.000]  Отправляет на аксепторы
[40:30.000 --> 40:32.000]  специальное сообщение, которое называется prepare.
[40:36.000 --> 40:38.000]  С единственным аргументом вот эта самая n.
[40:42.000 --> 40:44.000]  Вот эти сообщения реагируют аксепторы.
[40:46.000 --> 40:48.000]  У каждого аксептора есть состояние.
[40:52.000 --> 40:54.000]  Во-первых, каждый аксептор хранит
[40:54.000 --> 40:56.000]  значение np.
[40:58.000 --> 41:00.000]  np — это максимальный n,
[41:00.000 --> 41:02.000]  который этот аксептор
[41:02.000 --> 41:04.000]  получал от пропозеров.
[41:04.000 --> 41:06.000]  Просто максимальный n, который он видел.
[41:08.000 --> 41:10.000]  И если аксептор
[41:10.000 --> 41:12.000]  получает prepare с n
[41:12.000 --> 41:14.000]  меньше, чем np,
[41:14.000 --> 41:16.000]  который у него уже есть,
[41:16.000 --> 41:18.000]  то аксептор говорит, что
[41:18.000 --> 41:20.000]  prepare отвергается, потому что
[41:20.000 --> 41:22.000]  n слишком маленький.
[41:22.000 --> 41:24.000]  Он может ответить явно,
[41:24.000 --> 41:26.000]  может вообще ничего не отвечать.
[41:26.000 --> 41:28.000]  Но лучше ответить явно, что отказываем.
[41:28.000 --> 41:30.000]  Если же
[41:30.000 --> 41:32.000]  аксептор видит, что этот n
[41:32.000 --> 41:34.000]  больше, чем его np,
[41:36.000 --> 41:38.000]  то аксептор
[41:38.000 --> 41:40.000]  обновляет свое np
[41:44.000 --> 41:46.000]  и отвечает
[41:46.000 --> 41:48.000]  пропозеру
[41:48.000 --> 41:50.000]  сообщением
[41:50.000 --> 41:52.000]  promise.
[41:58.000 --> 42:00.000]  Почему promise, во-первых?
[42:00.000 --> 42:02.000]  Потому что мы, обновляя np,
[42:02.000 --> 42:04.000]  обещаем, что мы
[42:04.000 --> 42:06.000]  аксептор, обещаем пропозеру,
[42:06.000 --> 42:08.000]  потому что мы больше не будем принимать
[42:08.000 --> 42:10.000]  сообщения от команды
[42:10.000 --> 42:12.000]  от других пропозеров
[42:12.000 --> 42:14.000]  с номерами меньше, чем этот n.
[42:14.000 --> 42:16.000]  Поэтому promise.
[42:16.000 --> 42:18.000]  А, во-вторых, мы к этому
[42:18.000 --> 42:20.000]  promise прикладываем
[42:20.000 --> 42:22.000]  пару nava.
[42:22.000 --> 42:24.000]  Это вторая часть состояния аксептора.
[42:26.000 --> 42:28.000]  Это текущий,
[42:28.000 --> 42:30.000]  отданный аксептором голос.
[42:30.000 --> 42:32.000]  Его vote.
[42:32.000 --> 42:34.000]  У каждого аксептора
[42:36.000 --> 42:38.000]  есть какой-то голос,
[42:38.000 --> 42:40.000]  есть предложение,
[42:40.000 --> 42:42.000]  за которое он уже проголосовал.
[42:42.000 --> 42:44.000]  Аксептор может поменять свой выбор в будущем,
[42:44.000 --> 42:46.000]  но пока он такой.
[42:46.000 --> 42:48.000]  Голос аксептора
[42:48.000 --> 42:50.000]  сам по себе пока ничего не означает.
[42:50.000 --> 42:52.000]  Это просто такое-то локальное решение.
[42:52.000 --> 42:54.000]  И мы отправляем этот голос
[42:54.000 --> 42:56.000]  отданный.
[42:56.000 --> 42:58.000]  Мы, а первый,
[42:58.000 --> 43:00.000]  отправляем пропозеру
[43:00.000 --> 43:02.000]  наш текущий голос.
[43:02.000 --> 43:04.000]  Что делает пропозер
[43:04.000 --> 43:06.000]  с этими голосами, с этими ответами?
[43:06.000 --> 43:08.000]  Он дожидается, пока соберет кворум.
[43:08.000 --> 43:10.000]  Это фаза 1.
[43:10.000 --> 43:12.000]  Фаза prepare.
[43:20.000 --> 43:22.000]  Когда набрался кворум,
[43:22.000 --> 43:24.000]  пропозер смотрит на значение, которое он получил
[43:24.000 --> 43:26.000]  в промесах, на вот эти голоса.
[43:26.000 --> 43:28.000]  Задача пропозера
[43:28.000 --> 43:30.000]  сейчас выбрать значение,
[43:30.000 --> 43:32.000]  которое он
[43:32.000 --> 43:34.000]  будет предлагать аксепторам.
[43:34.000 --> 43:36.000]  Вот на этой фазе
[43:36.000 --> 43:38.000]  никаких значений, никаких v,
[43:38.000 --> 43:40.000]  пропозер никак не использовал свое собственное v.
[43:40.000 --> 43:42.000]  Он собрал
[43:42.000 --> 43:44.000]  кворум preparов, он как будто бы
[43:44.000 --> 43:46.000]  взял блокировку на большинстве аксепторов
[43:46.000 --> 43:48.000]  и теперь выбирает v,
[43:48.000 --> 43:50.000]  который он предложит.
[43:50.000 --> 43:52.000]  Если пропозер получил
[43:52.000 --> 43:54.000]  хотя бы от одного аксептора
[43:54.000 --> 43:56.000]  не пустой голос,
[43:56.000 --> 43:58.000]  то есть голос, у которого уже есть
[43:58.000 --> 44:00.000]  какой-то nav,
[44:00.000 --> 44:02.000]  то в качестве
[44:02.000 --> 44:04.000]  значения, которое будет предлагаться,
[44:04.000 --> 44:06.000]  давайте его v со звездочкой обозначим,
[44:06.000 --> 44:08.000]  будет
[44:08.000 --> 44:10.000]  выбрано va с максимальным
[44:10.000 --> 44:12.000]  na.
[44:12.000 --> 44:14.000]  Если же пропозер
[44:14.000 --> 44:16.000]  получил промесы
[44:16.000 --> 44:18.000]  и во всех этих промесах
[44:18.000 --> 44:20.000]  пустой голос,
[44:20.000 --> 44:22.000]  то есть аксепторы, которые ему ответили,
[44:22.000 --> 44:24.000]  то пропозер выберет
[44:24.000 --> 44:26.000]  в качестве этого v со звездочкой
[44:26.000 --> 44:28.000]  свое собственное v.
[44:32.000 --> 44:34.000]  Ну а дальше, выбрав
[44:34.000 --> 44:36.000]  это самое v,
[44:36.000 --> 44:38.000]  мы предлагаем его аксепторам.
[44:46.000 --> 44:48.000]  Мы отправляем команду,
[44:48.000 --> 44:50.000]  которая называется,
[44:50.000 --> 44:52.000]  ну можно по-разному ее называть,
[44:52.000 --> 44:54.000]  можно сказать, что она называется
[44:54.000 --> 44:56.000]  propose
[44:56.000 --> 44:58.000]  n
[44:58.000 --> 45:00.000]  v со звездочкой.
[45:00.000 --> 45:02.000]  Ну или иногда ее называют
[45:02.000 --> 45:04.000]  accept v со звездочкой.
[45:04.000 --> 45:06.000]  Где бы это написать теперь?
[45:06.000 --> 45:08.000]  Ну мы собираем
[45:08.000 --> 45:10.000]  quorum promis.
[45:10.000 --> 45:12.000]  Мы собираем quorum promis.
[45:14.000 --> 45:16.000]  Вот это был ответ.
[45:20.000 --> 45:22.000]  Ну что,
[45:22.000 --> 45:24.000]  мы собираем
[45:24.000 --> 45:26.000]  quorum promis.
[45:26.000 --> 45:28.000]  Ну что,
[45:28.000 --> 45:30.000]  мы собираем
[45:30.000 --> 45:32.000]  quorum promis.
[45:32.000 --> 45:34.000]  Ну что,
[45:34.000 --> 45:36.000]  мы собираем
[45:36.000 --> 45:38.000]  quorum promis.
[45:38.000 --> 45:40.000]  Еще раз, аксептор отправляет
[45:40.000 --> 45:42.000]  аксептор, смотрит на полученное n.
[45:42.000 --> 45:44.000]  Если это n меньше, чем np,
[45:44.000 --> 45:46.000]  то promis не отправляет.
[45:46.000 --> 45:48.000]  Если n больше, чем np,
[45:48.000 --> 45:50.000]  то отправляет
[45:50.000 --> 45:52.000]  пропозеру сообщение promis
[45:52.000 --> 45:54.000]  и к нему
[45:54.000 --> 45:56.000]  прикладывает свой голос.
[45:56.000 --> 45:58.000]  А пропозер дожидается
[45:58.000 --> 46:00.000]  на фазе 1, когда он соберет
[46:00.000 --> 46:02.000]  quorum promis.
[46:02.000 --> 46:04.000]  То есть каждый аксептор
[46:04.000 --> 46:06.000]  может либо
[46:06.000 --> 46:08.000]  умереть и вообще не ответить,
[46:08.000 --> 46:10.000]  может ответить, что отказывает
[46:10.000 --> 46:12.000]  этому prepare.
[46:12.000 --> 46:14.000]  Это все в quorum не учитывается,
[46:14.000 --> 46:16.000]  разумеется.
[46:16.000 --> 46:18.000]  Мы выбрали значение,
[46:18.000 --> 46:20.000]  которое мы будем предлагать,
[46:20.000 --> 46:22.000]  и предлагаем его. Посылаем команду propose
[46:22.000 --> 46:24.000]  или accept.
[46:24.000 --> 46:26.000]  Я буду называть это так-то так.
[46:28.000 --> 46:30.000]  И что делает аксептор?
[46:30.000 --> 46:32.000]  Точно так же. Он получает этот propose
[46:32.000 --> 46:34.000]  nv со звездочкой,
[46:34.000 --> 46:36.000]  смотрит на n
[46:36.000 --> 46:38.000]  и на свое np.
[46:38.000 --> 46:40.000]  И если его
[46:40.000 --> 46:42.000]  np не меньше,
[46:42.000 --> 46:44.000]  чем n,
[46:44.000 --> 46:46.000]  то аксептор обновляет свой голос.
[46:46.000 --> 46:48.000]  То есть вот здесь
[46:50.000 --> 46:52.000]  он говорит, что
[46:52.000 --> 46:54.000]  na va
[46:54.000 --> 46:56.000]  теперь
[46:56.000 --> 46:58.000]  nv со звездочкой.
[46:58.000 --> 47:00.000]  Ну и обновляет
[47:00.000 --> 47:02.000]  на самом деле np тоже,
[47:02.000 --> 47:04.000]  если он видел, что n больше,
[47:04.000 --> 47:06.000]  чем его nt.
[47:06.000 --> 47:08.000]  И отвечает
[47:08.000 --> 47:10.000]  proposору
[47:10.000 --> 47:12.000]  сообщением
[47:12.000 --> 47:14.000]  accepted.
[47:16.000 --> 47:18.000]  Это вторая фаза.
[47:18.000 --> 47:20.000]  Вот мы предлагаем
[47:20.000 --> 47:22.000]  аксептору
[47:22.000 --> 47:24.000]  наше предложение,
[47:24.000 --> 47:26.000]  он за него голосует,
[47:26.000 --> 47:28.000]  если наше n его устраивает.
[47:28.000 --> 47:30.000]  Если наше n
[47:30.000 --> 47:32.000]  больше того,
[47:32.000 --> 47:34.000]  что он уже видел.
[47:38.000 --> 47:40.000]  Что?
[47:40.000 --> 47:42.000]  Ну это разные значения.
[47:42.000 --> 47:44.000]  Это разные значения.
[47:44.000 --> 47:46.000]  Ну na va
[47:46.000 --> 47:48.000]  это голос,
[47:48.000 --> 47:50.000]  это предложение,
[47:50.000 --> 47:52.000]  за которое мы проголосовали.
[47:52.000 --> 47:54.000]  У аксептора есть
[47:54.000 --> 47:56.000]  две переменные,
[47:56.000 --> 47:58.000]  np это максимальное значение,
[47:58.000 --> 48:00.000]  которое он получал
[48:00.000 --> 48:02.000]  в любом сообщении,
[48:02.000 --> 48:04.000]  что в prepare, что в propose.
[48:04.000 --> 48:06.000]  Na va это голос,
[48:06.000 --> 48:08.000]  который он отдал.
[48:08.000 --> 48:10.000]  Вот на второй фазе
[48:10.000 --> 48:12.000]  алгоритма Pax.
[48:14.000 --> 48:16.000]  Ну конечно же может,
[48:16.000 --> 48:18.000]  чего же не может.
[48:18.000 --> 48:20.000]  Мы можем
[48:20.000 --> 48:22.000]  не собрать quorum как здесь,
[48:22.000 --> 48:24.000]  так и здесь, по одним и тем же причинам.
[48:24.000 --> 48:26.000]  Либо у нас слишком много отказов
[48:26.000 --> 48:28.000]  quorum не собирается,
[48:28.000 --> 48:30.000]  ну это понятно, мы просто блокируемся, ждем.
[48:30.000 --> 48:32.000]  Либо
[48:32.000 --> 48:34.000]  нам прислали слишком много отказов.
[48:34.000 --> 48:36.000]  И мы понимаем, что quorum собраться
[48:36.000 --> 48:38.000]  уже не может никак.
[48:38.000 --> 48:40.000]  В этом случае мы,
[48:40.000 --> 48:42.000]  вне зависимости от того, какая фаза
[48:42.000 --> 48:44.000]  то есть первая или вторая,
[48:44.000 --> 48:46.000]  ретраемся и выбираем себе новое значение n побольше,
[48:46.000 --> 48:48.000]  чем было раньше, потому что
[48:48.000 --> 48:50.000]  видимо то, что было раньше оказалось слишком маленьким.
[48:56.000 --> 48:58.000]  Ну можно
[48:58.000 --> 49:00.000]  для начала считать, что так.
[49:00.000 --> 49:02.000]  Совсем случайно делать не нужно.
[49:04.000 --> 49:06.000]  Но начать можно со случайного.
[49:08.000 --> 49:10.000]  Наверное легко догадаться, что если
[49:10.000 --> 49:12.000]  ты acceptor, ты отвечаешь отказом,
[49:12.000 --> 49:14.000]  ты мог бы предложить свое np,
[49:14.000 --> 49:16.000]  которое больше чем n.
[49:16.000 --> 49:18.000]  И proposer явно не должен
[49:18.000 --> 49:20.000]  выбирать свое новое n меньше, чем
[49:20.000 --> 49:22.000]  np, которое уже есть в acceptor.
[49:22.000 --> 49:24.000]  Это было бы бесполезно.
[49:26.000 --> 49:28.000]  Ну что, таков
[49:28.000 --> 49:30.000]  алгоритм.
[49:30.000 --> 49:32.000]  Я пока совершенно не объяснил, что это значит,
[49:32.000 --> 49:34.000]  в чем здесь смысл,
[49:34.000 --> 49:36.000]  но по крайней мере процедура должна быть ясна.
[49:36.000 --> 49:38.000]  Вот алгоритм propos написан, нарисован.
[49:40.000 --> 49:42.000]  Остаются ли в нем какие-то сомнения?
[49:42.000 --> 49:44.000]  Ну за последний раз сомнения
[49:44.000 --> 49:46.000]  наверное масса.
[49:46.000 --> 49:48.000]  Понятно ли, как он работает?
[49:48.000 --> 49:50.000]  Что он делает на каждом шаге?
[49:50.000 --> 49:52.000]  Да, n уникальные.
[49:56.000 --> 49:58.000]  Ну достичь этого несложно, еще раз.
[49:58.000 --> 50:00.000]  У тебя n это кортеж
[50:00.000 --> 50:02.000]  из некоторого числа и
[50:02.000 --> 50:04.000]  твоего уникального идентификатора.
[50:04.000 --> 50:06.000]  Ну просто выбирая
[50:06.000 --> 50:08.000]  число монотонно, каждый раз увеличивая n.
[50:08.000 --> 50:10.000]  Уникальный идентификатор даст тебе
[50:10.000 --> 50:12.000]  глобальную уникальность,
[50:12.000 --> 50:14.000]  ну и все эти кортежи, они упорядочены просто
[50:14.000 --> 50:16.000]  лексикографически.
[50:24.000 --> 50:26.000]  Ну мы на каждой итерации,
[50:26.000 --> 50:28.000]  у нас же алгоритм с итерациями, у нас фаза может
[50:28.000 --> 50:30.000]  провалиться, и мы элитровируемся.
[50:30.000 --> 50:32.000]  Ну вот мы на каждой итерации вот этих двух фаз
[50:32.000 --> 50:34.000]  выбираем себе значение n
[50:34.000 --> 50:36.000]  и с ним входим к acceptor.
[50:38.000 --> 50:40.000]  А вы говорили,
[50:40.000 --> 50:42.000]  как выбирает acceptor,
[50:42.000 --> 50:44.000]  как он голосует,
[50:44.000 --> 50:46.000]  за что он голосует?
[50:46.000 --> 50:48.000]  Да, вы говорили.
[50:48.000 --> 50:50.000]  Ну еще раз, acceptor
[50:50.000 --> 50:52.000]  получает пропоз, смотрит на n,
[50:52.000 --> 50:54.000]  сравнивает его с np. Если np
[50:54.000 --> 50:56.000]  больше, чем n, мы отказываем этому
[50:56.000 --> 50:58.000]  пропозу. Если n больше, чем
[50:58.000 --> 51:00.000]  np, то мы обновляем
[51:00.000 --> 51:02.000]  свою пару n в a, отдаем голос за эту пропозу.
[51:04.000 --> 51:06.000]  Ну мы меняем свое решение,
[51:06.000 --> 51:08.000]  потому что вот n у этого
[51:08.000 --> 51:10.000]  пропозла побольше,
[51:10.000 --> 51:12.000]  чем мы видели.
[51:20.000 --> 51:22.000]  Обращаю внимание, вот этот
[51:22.000 --> 51:24.000]  отданный здесь голос, он в смысле
[51:24.000 --> 51:26.000]  консенсуса ничего не значит пока.
[51:26.000 --> 51:28.000]  Это просто какой-то acceptor
[51:28.000 --> 51:30.000]  проголосовал, это не выбор
[51:30.000 --> 51:32.000]  термин консенсуса, это не значит, что узел,
[51:32.000 --> 51:34.000]  на котором живет acceptor, сделал какой-то выбор
[51:34.000 --> 51:36.000]  в смысле пропозы, нет.
[51:38.000 --> 51:40.000]  Да, ну и если,
[51:40.000 --> 51:42.000]  конец, нужно завершить
[51:42.000 --> 51:44.000]  это все, если пропозер
[51:44.000 --> 51:46.000]  прошел успешно через первую фазу и
[51:46.000 --> 51:48.000]  через вторую, собрал оба кворума,
[51:48.000 --> 51:50.000]  то он свой пропоз завершает
[51:50.000 --> 51:52.000]  и выбирает вот это самое его со звездочкой.
[51:56.000 --> 51:58.000]  Ну что, таков алгоритм?
[52:00.000 --> 52:02.000]  Допускаю, что
[52:02.000 --> 52:04.000]  он, возможно, пока не интуитивен,
[52:04.000 --> 52:06.000]  но если
[52:06.000 --> 52:08.000]  его нарисовать, в смысле как
[52:08.000 --> 52:10.000]  он работает, то все станет очень просто.
[52:10.000 --> 52:12.000]  Поэтому давайте
[52:12.000 --> 52:14.000]  рисовать.
[52:22.000 --> 52:24.000]  Как я буду рисовать?
[52:24.000 --> 52:26.000]  Ну я рисую картинки
[52:26.000 --> 52:28.000]  обычно вот так вот,
[52:28.000 --> 52:30.000]  таймлайны и стрелочки между ними,
[52:30.000 --> 52:32.000]  сейчас будет иначе.
[52:32.000 --> 52:34.000]  Пропозеров я вообще
[52:34.000 --> 52:36.000]  рисовать не буду, они лишние, я буду
[52:36.000 --> 52:38.000]  рисовать только acceptor.
[52:38.000 --> 52:40.000]  Вот будет acceptor, и у него будет
[52:40.000 --> 52:42.000]  вот такой вот таймлайн, и на нем
[52:42.000 --> 52:44.000]  будут два события, два типа событий.
[52:44.000 --> 52:46.000]  Во-первых, acceptor может получить
[52:46.000 --> 52:48.000]  от пропозера,
[52:48.000 --> 52:50.000]  они будут разноцветными,
[52:50.000 --> 52:52.000]  вот цвет это будет пропозер,
[52:52.000 --> 52:54.000]  синий пропозер, красный пропозер, зеленый пропозер,
[52:54.000 --> 52:56.000]  других не будет.
[52:56.000 --> 52:58.000]  Он может получить
[52:58.000 --> 53:00.000]  сообщение prepare, это выглядит так,
[53:00.000 --> 53:02.000]  prepare 3.
[53:04.000 --> 53:06.000]  Это означает, что
[53:06.000 --> 53:08.000]  жил был acceptor A,
[53:10.000 --> 53:12.000]  и вот ему
[53:12.000 --> 53:14.000]  пришел prepare,
[53:18.000 --> 53:20.000]  с номером n
[53:20.000 --> 53:22.000]  с n равным 3.
[53:22.000 --> 53:24.000]  Я сказал, что n это на самом деле не просто
[53:24.000 --> 53:26.000]  числа, это какие-то пары, ну или
[53:26.000 --> 53:28.000]  элементы какого-то
[53:28.000 --> 53:30.000]  порядочного множества,
[53:30.000 --> 53:32.000]  но я могу их на носке выбирать глобально
[53:32.000 --> 53:34.000]  уникальными, поэтому буду просто числа рисовать.
[53:34.000 --> 53:36.000]  Вот prepare 3,
[53:36.000 --> 53:38.000]  и acceptor
[53:38.000 --> 53:40.000]  ответил на него
[53:40.000 --> 53:42.000]  промессом.
[53:42.000 --> 53:44.000]  А если n оказалось маленьким, то я буду
[53:44.000 --> 53:46.000]  этот p зачеркивать,
[53:46.000 --> 53:48.000]  acceptor его отверг.
[53:50.000 --> 53:52.000]  Ну, помимо prepare,
[53:52.000 --> 53:54.000]  acceptor может получать
[53:54.000 --> 53:56.000]  и команды propose
[53:56.000 --> 53:58.000]  или accept.
[53:58.000 --> 54:00.000]  Ну вот propose это больше по смыслу подходит,
[54:00.000 --> 54:02.000]  а accept такая директива,
[54:02.000 --> 54:04.000]  прими значения.
[54:04.000 --> 54:06.000]  Вот я буду рисовать здесь буквы a, потому что
[54:06.000 --> 54:08.000]  p склеиваются.
[54:08.000 --> 54:10.000]  Accept
[54:10.000 --> 54:12.000]  7 значения
[54:12.000 --> 54:14.000]  x.
[54:14.000 --> 54:16.000]  Это что означает?
[54:16.000 --> 54:18.000]  Что этому acceptor
[54:18.000 --> 54:20.000]  чуть позже,
[54:20.000 --> 54:22.000]  вот где-то здесь
[54:22.000 --> 54:24.000]  прилетела команда
[54:26.000 --> 54:28.000]  accept
[54:28.000 --> 54:30.000]  с n7 и с значением
[54:30.000 --> 54:32.000]  x. Ну и она тоже была принята.
[54:32.000 --> 54:34.000]  Если не
[54:34.000 --> 54:36.000]  была почему-то, то я тоже буду зачеркивать.
[54:36.000 --> 54:38.000]  Ну вот такой способ
[54:38.000 --> 54:40.000]  просто рисовать исполнение.
[54:40.000 --> 54:42.000]  Ну а теперь
[54:42.000 --> 54:44.000]  рисуем исполнение.
[54:44.000 --> 54:46.000]  Чтобы понять,
[54:46.000 --> 54:48.000]  как он работает.
[54:50.000 --> 54:52.000]  Случай 1.
[54:52.000 --> 54:54.000]  У нас 3 acceptor.
[54:56.000 --> 54:58.000]  У нас всегда будет 3.
[54:58.000 --> 55:00.000]  И что
[55:00.000 --> 55:02.000]  происходит? Сначала появляется
[55:02.000 --> 55:04.000]  синий proposer.
[55:06.000 --> 55:08.000]  Он выбирает
[55:08.000 --> 55:10.000]  себе n равное n единица
[55:10.000 --> 55:12.000]  и посылает
[55:12.000 --> 55:14.000]  prepare вот сюда
[55:14.000 --> 55:16.000]  и вот сюда.
[55:16.000 --> 55:18.000]  Собрал quorum.
[55:18.000 --> 55:20.000]  Получил отец промессы.
[55:20.000 --> 55:22.000]  После этого он
[55:22.000 --> 55:24.000]  прошел
[55:24.000 --> 55:26.000]  через первую фазу своего алгоритма
[55:26.000 --> 55:28.000]  и
[55:28.000 --> 55:30.000]  видимо от этих acceptor получил
[55:30.000 --> 55:32.000]  пустые голоса, потому что они еще не успели
[55:32.000 --> 55:34.000]  ни за что проголосовать.
[55:34.000 --> 55:36.000]  И предлагает теперь свое значение.
[55:36.000 --> 55:38.000]  Допустим, вот этот самый x, который здесь был.
[55:40.000 --> 55:42.000]  accept 1x
[55:42.000 --> 55:44.000]  accept 1x
[55:44.000 --> 55:46.000]  Accept 1x
[55:48.000 --> 55:50.000]  Оба acceptor проголосовали
[55:50.000 --> 55:52.000]  за принято x, он их устраивает.
[55:52.000 --> 55:54.000]  И
[55:54.000 --> 55:56.000]  для синего proposer
[55:56.000 --> 55:58.000]  завершается.
[56:00.000 --> 56:02.000]  Нет, не обязательно.
[56:02.000 --> 56:04.000]  Вот тут, видишь, нарисовано даже, что не обязательно.
[56:08.000 --> 56:10.000]  Accept
[56:10.000 --> 56:12.000]  Цвета это proposer сейчас.
[56:14.000 --> 56:16.000]  Вот синий proposer, красный proposer.
[56:22.000 --> 56:24.000]  Проголосовать за пустой
[56:24.000 --> 56:26.000]  невозможно, просто по построению алгоритма.
[56:26.000 --> 56:28.000]  Мы голосуем, когда мы получаем nv.
[56:28.000 --> 56:30.000]  Вот мы получили nv,
[56:30.000 --> 56:32.000]  смотрим на это n, если оно больше, чем np,
[56:32.000 --> 56:34.000]  то мы обновляем свой голос.
[56:34.000 --> 56:36.000]  Мы acceptor.
[56:38.000 --> 56:40.000]  Что?
[56:40.000 --> 56:42.000]  Равно?
[56:42.000 --> 56:44.000]  У нас устраивает.
[56:46.000 --> 56:48.000]  У нас не устраивает, когда оно меньше.
[56:50.000 --> 56:52.000]  Вот, что происходит дальше?
[56:52.000 --> 56:54.000]  Дальше появляется красный proposer,
[56:54.000 --> 56:56.000]  он говорит p2, p2.
[56:58.000 --> 57:00.000]  Какой-то вопрос, наверное, есть, можно его задать.
[57:04.000 --> 57:06.000]  Acceptor хранит, во-первых,
[57:06.000 --> 57:08.000]  максимально n, который он видел,
[57:08.000 --> 57:10.000]  это называется np.
[57:10.000 --> 57:12.000]  Да, я соболезную, что я говорю np и nava,
[57:12.000 --> 57:14.000]  но у этого еще есть понятие
[57:14.000 --> 57:16.000]  голос, это какой-то
[57:16.000 --> 57:18.000]  номер бюллетенера.
[57:18.000 --> 57:20.000]  Вот в следующий раз
[57:20.000 --> 57:22.000]  за этими странными обозначениями
[57:22.000 --> 57:24.000]  будет очень конкретная интуиция.
[57:24.000 --> 57:26.000]  Мы просто должны к ней сами прийти.
[57:26.000 --> 57:28.000]  Вот в этом алгоритме никакой интуиции
[57:28.000 --> 57:30.000]  нет пока.
[57:30.000 --> 57:32.000]  Никакого физического смысла
[57:32.000 --> 57:34.000]  в этих понятиях не наблюдается.
[57:34.000 --> 57:36.000]  Ну вот, а nava
[57:36.000 --> 57:38.000]  это просто голос,
[57:38.000 --> 57:40.000]  который Acceptor успел
[57:40.000 --> 57:42.000]  отдать кому-то на второй фазе.
[57:42.000 --> 57:44.000]  Если его устроила n,
[57:44.000 --> 57:46.000]  которая прилетела в этот proposer,
[57:46.000 --> 57:48.000]  то мы за него голосуем.
[57:58.000 --> 58:00.000]  У нас это устраивает,
[58:00.000 --> 58:02.000]  но здесь же на картинке я так специально
[58:02.000 --> 58:04.000]  сказал, мы от третьего Acceptor
[58:04.000 --> 58:06.000]  получили Accept,
[58:06.000 --> 58:08.000]  но еще не видели ни одного препарата.
[58:08.000 --> 58:10.000]  Нас это устраивает, потому что np
[58:10.000 --> 58:12.000]  меньше, чем вот это n
[58:12.000 --> 58:14.000]  в Accept.
[58:20.000 --> 58:22.000]  Еще раз,
[58:22.000 --> 58:24.000]  алгоритм устроен так,
[58:24.000 --> 58:26.000]  получаем Accept, сравниваем n и np,
[58:26.000 --> 58:28.000]  если n не меньше, чем np,
[58:28.000 --> 58:30.000]  нас устраивает. Все, никаких дополнительных правил.
[58:32.000 --> 58:34.000]  Так что не нужно сначала
[58:34.000 --> 58:36.000]  на те же реплики доставлять обязательно в том же...
[58:36.000 --> 58:38.000]  Нет, не требуется ничего такого.
[58:38.000 --> 58:40.000]  Вот, кстати,
[58:40.000 --> 58:42.000]  то, что этот вопрос вызывает некоторые
[58:42.000 --> 58:44.000]  трудности, это нормально, потому что
[58:44.000 --> 58:46.000]  проблема у лэмпорта была, в смысле,
[58:46.000 --> 58:48.000]  проблема у людей, кто читает статью Paxos Made Simple,
[58:48.000 --> 58:50.000]  была ровно в этом.
[58:50.000 --> 58:52.000]  То есть, действительно, Accept мог
[58:52.000 --> 58:54.000]  прийти на реплик, на Acceptor,
[58:54.000 --> 58:56.000]  который не видел до этого препара,
[58:56.000 --> 58:58.000]  и ошибка была в том, чтобы
[58:58.000 --> 59:00.000]  не обновлять здесь np.
[59:00.000 --> 59:02.000]  Это всегда.
[59:02.000 --> 59:04.000]  Что на этой фазе, что на этой фазе.
[59:04.000 --> 59:06.000]  Если мы увидели n
[59:06.000 --> 59:08.000]  в Accept или n в Prepay,
[59:08.000 --> 59:10.000]  или больше, чем наш np, мы его всегда обновляем.
[59:12.000 --> 59:14.000]  Ну вот, значит, что происходит здесь?
[59:14.000 --> 59:16.000]  Здесь
[59:16.000 --> 59:18.000]  этот P2
[59:18.000 --> 59:20.000]  приводит конкретный промисс,
[59:20.000 --> 59:22.000]  который возвращает что?
[59:22.000 --> 59:24.000]  Ну, видимо,
[59:24.000 --> 59:26.000]  ноль ничего,
[59:26.000 --> 59:28.000]  то есть,
[59:28.000 --> 59:30.000]  третий Acceptor ни за что не голосовал.
[59:30.000 --> 59:32.000]  А второй Acceptor
[59:32.000 --> 59:34.000]  вернет значение пару
[59:34.000 --> 59:36.000]  1x.
[59:36.000 --> 59:38.000]  Ну, то есть,
[59:38.000 --> 59:40.000]  он...
[59:40.000 --> 59:42.000]  Этот Acceptor
[59:42.000 --> 59:44.000]  принял уже эту пару,
[59:44.000 --> 59:46.000]  1x, и эта пара,
[59:46.000 --> 59:48.000]  и
[59:48.000 --> 59:50.000]  красный пропозер узнает
[59:50.000 --> 59:52.000]  про этот голос,
[59:52.000 --> 59:54.000]  получив промисс от второго Acceptor.
[59:56.000 --> 59:58.000]  Ну, а дальше,
[59:58.000 --> 01:00:00.000]  красный пропозер собрал
[01:00:00.000 --> 01:00:02.000]  quorum на первой фазе.
[01:00:02.000 --> 01:00:04.000]  Он смотрит, получил ли он хотя бы
[01:00:04.000 --> 01:00:06.000]  одно непустое значение v.
[01:00:06.000 --> 01:00:08.000]  Получил.
[01:00:08.000 --> 01:00:10.000]  А значит, он в качестве своего предложения
[01:00:10.000 --> 01:00:12.000]  выбирает v с максимальным na.
[01:00:12.000 --> 01:00:14.000]  Это x
[01:00:14.000 --> 01:00:16.000]  и предлагает теперь
[01:00:16.000 --> 01:00:18.000]  a2x, a2x.
[01:00:18.000 --> 01:00:20.000]  И Acceptor
[01:00:20.000 --> 01:00:22.000]  снова голосует уже за 2.
[01:00:22.000 --> 01:00:24.000]  Уже за предложение 2x.
[01:00:24.000 --> 01:00:26.000]  Ну, то есть, здесь второй Acceptor
[01:00:26.000 --> 01:00:28.000]  проголосовал два.
[01:00:28.000 --> 01:00:30.000]  Он сначала проголосовал за 1x, потом за 2x.
[01:00:32.000 --> 01:00:34.000]  Ну, и то, что здесь произошло,
[01:00:34.000 --> 01:00:36.000]  очень естественно.
[01:00:36.000 --> 01:00:38.000]  Вот здесь, вот в этот момент,
[01:00:38.000 --> 01:00:40.000]  синий пропозер уже завершился.
[01:00:40.000 --> 01:00:42.000]  Он выбрал значение x.
[01:00:42.000 --> 01:00:44.000]  По правилам консенсуса,
[01:00:44.000 --> 01:00:46.000]  если кто-то один выбрал что-то, то другие должны
[01:00:46.000 --> 01:00:48.000]  выбрать то же самое.
[01:00:48.000 --> 01:00:50.000]  И вот в промесе с помощью
[01:00:50.000 --> 01:00:52.000]  вот этого ответа,
[01:00:52.000 --> 01:00:54.000]  то есть, когда мы прикладываем
[01:00:54.000 --> 01:00:56.000]  свой отданный голос к ответу,
[01:00:56.000 --> 01:00:58.000]  с помощью этой информации
[01:00:58.000 --> 01:01:00.000]  красный пропозер смог понять,
[01:01:00.000 --> 01:01:02.000]  что есть уже значение x
[01:01:02.000 --> 01:01:04.000]  и повторно его
[01:01:04.000 --> 01:01:06.000]  предложить.
[01:01:06.000 --> 01:01:08.000]  И таким образом он выберет тот же самый x.
[01:01:08.000 --> 01:01:10.000]  То есть, здесь, в этом случае
[01:01:10.000 --> 01:01:12.000]  промес
[01:01:12.000 --> 01:01:14.000]  помогал красному пропозеру,
[01:01:14.000 --> 01:01:16.000]  потому что в промесе был
[01:01:16.000 --> 01:01:18.000]  отданный этим
[01:01:18.000 --> 01:01:20.000]  аксептором голос.
[01:01:20.000 --> 01:01:22.000]  И через него мы узнавали о том, что какое значение
[01:01:22.000 --> 01:01:24.000]  уже выбрано.
[01:01:24.000 --> 01:01:26.000]  Мы, конечно, не понимали, что оно выбрано, но
[01:01:26.000 --> 01:01:28.000]  за счет этого мы не предлагали
[01:01:28.000 --> 01:01:30.000]  чего-то другого.
[01:01:30.000 --> 01:01:32.000]  Ну, может
[01:01:32.000 --> 01:01:34.000]  получиться, конечно, иначе.
[01:01:34.000 --> 01:01:36.000]  Скажем, может быть, этот аксептор,
[01:01:36.000 --> 01:01:38.000]  синий пропозер не успеет
[01:01:38.000 --> 01:01:40.000]  сделать свой выбор.
[01:01:40.000 --> 01:01:42.000]  А когда сможет
[01:01:42.000 --> 01:01:44.000]  это сделать, когда будет это делать,
[01:01:44.000 --> 01:01:46.000]  это уже будет слишком поздно.
[01:01:48.000 --> 01:01:50.000]  Нет, все правильно.
[01:01:52.000 --> 01:01:54.000]  И вот это
[01:01:54.000 --> 01:01:56.000]  предложение будет отвергнуто.
[01:01:56.000 --> 01:01:58.000]  Такое может быть.
[01:01:58.000 --> 01:02:00.000]  Ну, то есть,
[01:02:00.000 --> 01:02:02.000]  вот здесь вот второй красный пропозер
[01:02:02.000 --> 01:02:04.000]  узнает про x
[01:02:04.000 --> 01:02:06.000]  через второго аксептора.
[01:02:06.000 --> 01:02:08.000]  Но он в случае
[01:02:08.000 --> 01:02:10.000]  вот этот один и один штрих
[01:02:10.000 --> 01:02:12.000]  не различает между собой.
[01:02:12.000 --> 01:02:14.000]  То есть,
[01:02:14.000 --> 01:02:16.000]  красный пропозер не понимает, выбран
[01:02:16.000 --> 01:02:18.000]  x глобально или не выбран.
[01:02:18.000 --> 01:02:20.000]  Правда ли,
[01:02:20.000 --> 01:02:22.000]  что у нас
[01:02:22.000 --> 01:02:24.000]  те пропозеры,
[01:02:24.000 --> 01:02:26.000]  которые...
[01:02:26.000 --> 01:02:28.000]  То есть, у нас зашел пропоз,
[01:02:28.000 --> 01:02:30.000]  правда ли,
[01:02:30.000 --> 01:02:32.000]  что у нас могут быть другие
[01:02:32.000 --> 01:02:34.000]  аксепторы,
[01:02:34.000 --> 01:02:36.000]  на которые пришел как раз
[01:02:36.000 --> 01:02:38.000]  аксепт?
[01:02:38.000 --> 01:02:40.000]  Сейчас, не нужно в одном предложении
[01:02:40.000 --> 01:02:42.000]  говорить и пропоз, и аксепт.
[01:02:42.000 --> 01:02:44.000]  Потому что это синоним, и нужно как-то
[01:02:44.000 --> 01:02:46.000]  согласованно.
[01:02:46.000 --> 01:02:48.000]  Пропоуз, аксепт — это синоним.
[01:02:48.000 --> 01:02:50.000]  Я бы хотел говорить пропоуз.
[01:02:50.000 --> 01:02:52.000]  Но если я буду рисовать здесь P и здесь P,
[01:02:52.000 --> 01:02:54.000]  меня не поймут.
[01:02:54.000 --> 01:02:56.000]  Давай это заново,
[01:02:56.000 --> 01:02:58.000]  потому что я ничего не понял.
[01:02:58.000 --> 01:03:00.000]  Вот у нас prepare на первом случае.
[01:03:00.000 --> 01:03:02.000]  Он у нас на первый и второй аксептор.
[01:03:02.000 --> 01:03:04.000]  Пошел prepare.
[01:03:04.000 --> 01:03:06.000]  Дальше у нас аксептор.
[01:03:06.000 --> 01:03:08.000]  Дальше у нас аксептор.
[01:03:08.000 --> 01:03:10.000]  Правда ли, что она может
[01:03:10.000 --> 01:03:12.000]  пойти на второй и третий аксептор?
[01:03:12.000 --> 01:03:14.000]  А ты думаешь,
[01:03:14.000 --> 01:03:16.000]  я рисую просто
[01:03:16.000 --> 01:03:18.000]  произвольные картинки,
[01:03:18.000 --> 01:03:20.000]  да, не думаю об этом никак.
[01:03:20.000 --> 01:03:22.000]  Для этого и нарисовано,
[01:03:22.000 --> 01:03:24.000]  чтобы исключить твой вопрос.
[01:03:24.000 --> 01:03:26.000]  Но не получилось.
[01:03:26.000 --> 01:03:28.000]  Мой план провалился.
[01:03:28.000 --> 01:03:30.000]  Может.
[01:03:30.000 --> 01:03:32.000]  Может как угодно быть.
[01:03:32.000 --> 01:03:34.000]  И еще раз.
[01:03:34.000 --> 01:03:36.000]  Аксептор, когда он получает prepare,
[01:03:36.000 --> 01:03:38.000]  когда он получает accept,
[01:03:38.000 --> 01:03:40.000]  он не думает про то, что с ним было раньше.
[01:03:40.000 --> 01:03:42.000]  Он просто смотрит на NP
[01:03:42.000 --> 01:03:44.000]  и сравнивает его с N.
[01:03:44.000 --> 01:03:46.000]  Если не меньше, то хорошо.
[01:03:46.000 --> 01:03:48.000]  Если меньше, то плохо. Отказываем.
[01:03:48.000 --> 01:03:50.000]  Это все, что он делает. Очень простой алгоритм.
[01:03:52.000 --> 01:03:54.000]  То есть здесь
[01:03:54.000 --> 01:03:56.000]  в исполнении штрих
[01:03:56.000 --> 01:03:58.000]  P2 перенял это значение X
[01:03:58.000 --> 01:04:00.000]  и свое не предлагает.
[01:04:00.000 --> 01:04:02.000]  Но
[01:04:02.000 --> 01:04:04.000]  этот красный пропозер
[01:04:04.000 --> 01:04:06.000]  эти два сценария не отличает друг от друга.
[01:04:06.000 --> 01:04:08.000]  Правда ничего страшного не случится,
[01:04:08.000 --> 01:04:10.000]  потому что аксептор,
[01:04:10.000 --> 01:04:12.000]  пропозер синего цвета,
[01:04:12.000 --> 01:04:14.000]  он хоть свою вторую фазу и провалил,
[01:04:14.000 --> 01:04:16.000]  но он притрается,
[01:04:16.000 --> 01:04:18.000]  снова соберет
[01:04:18.000 --> 01:04:20.000]  с P3 P3
[01:04:20.000 --> 01:04:22.000]  снова получит ответы
[01:04:22.000 --> 01:04:24.000]  от аксепторов.
[01:04:24.000 --> 01:04:26.000]  Этот X увидит свой же, который
[01:04:26.000 --> 01:04:28.000]  записал красный,
[01:04:28.000 --> 01:04:30.000]  ну и еще раз его предложит.
[01:04:30.000 --> 01:04:32.000]  Так что здесь ничего страшного не произойдет.
[01:04:32.000 --> 01:04:34.000]  В любой,
[01:04:34.000 --> 01:04:36.000]  где не собрался кворум.
[01:04:36.000 --> 01:04:38.000]  То есть если ты вот здесь
[01:04:38.000 --> 01:04:40.000]  получил, например, два отказа из трех,
[01:04:40.000 --> 01:04:42.000]  ты понимаешь, что ничего уже не светит тебе
[01:04:42.000 --> 01:04:44.000]  и нужно пробовать заново с большим N.
[01:04:44.000 --> 01:04:46.000]  Ну либо здесь.
[01:04:48.000 --> 01:04:50.000]  Это первый случай,
[01:04:50.000 --> 01:04:52.000]  который демонстрирует нам
[01:04:52.000 --> 01:04:54.000]  одно назначение
[01:04:54.000 --> 01:04:56.000]  сообщения promise.
[01:04:58.000 --> 01:05:00.000]  И есть другой случай.
[01:05:02.000 --> 01:05:04.000]  Итак,
[01:05:04.000 --> 01:05:06.000]  все начинается
[01:05:06.000 --> 01:05:08.000]  так же. У нас есть синий пропозер,
[01:05:08.000 --> 01:05:10.000]  у него есть, допустим, значение X
[01:05:10.000 --> 01:05:12.000]  и он говорит
[01:05:12.000 --> 01:05:14.000]  prepare 1, prepare 1
[01:05:14.000 --> 01:05:16.000]  на первых двух аксепторах.
[01:05:16.000 --> 01:05:18.000]  И он успевает записать
[01:05:18.000 --> 01:05:20.000]  свое значение
[01:05:20.000 --> 01:05:22.000]  X
[01:05:22.000 --> 01:05:24.000]  под вот этим
[01:05:24.000 --> 01:05:26.000]  ballot number
[01:05:26.000 --> 01:05:28.000]  на первого аксептора.
[01:05:28.000 --> 01:05:30.000]  Но тут
[01:05:30.000 --> 01:05:32.000]  приходит красный пропозер со значением Y
[01:05:32.000 --> 01:05:34.000]  и говорит P2P2.
[01:05:40.000 --> 01:05:42.000]  После этого, когда вот этот
[01:05:42.000 --> 01:05:44.000]  accept от синего пропозера
[01:05:44.000 --> 01:05:46.000]  долетает до второго аксептора,
[01:05:46.000 --> 01:05:48.000]  он этим
[01:05:48.000 --> 01:05:50.000]  аксептором
[01:05:50.000 --> 01:05:52.000]  отвергается, потому что
[01:05:52.000 --> 01:05:54.000]  она слишком маленькая.
[01:05:54.000 --> 01:05:56.000]  Ну а что получил
[01:05:56.000 --> 01:05:58.000]  здесь красный пропозер в ответ
[01:05:58.000 --> 01:06:00.000]  на свои prepare?
[01:06:00.000 --> 01:06:02.000]  Он получил ничего и ничего, поэтому
[01:06:02.000 --> 01:06:04.000]  он предлагает свое значение,
[01:06:04.000 --> 01:06:06.000]  а у него это было Y.
[01:06:06.000 --> 01:06:08.000]  И он говорит A2Y,
[01:06:08.000 --> 01:06:10.000]  A2Y
[01:06:12.000 --> 01:06:14.000]  и выбирает значение Y.
[01:06:16.000 --> 01:06:18.000]  Но у него был.
[01:06:18.000 --> 01:06:20.000]  Задача консенс.
[01:06:20.000 --> 01:06:22.000]  У каждого есть свое значение.
[01:06:22.000 --> 01:06:24.000]  Ну ничего плохого не произошло.
[01:06:24.000 --> 01:06:26.000]  Так я к чему эти рисунки
[01:06:26.000 --> 01:06:28.000]  тарисую? Не просто так, а для того,
[01:06:28.000 --> 01:06:30.000]  чтобы объяснить, в чем смысл
[01:06:30.000 --> 01:06:32.000]  фазы prepare,
[01:06:32.000 --> 01:06:34.000]  в чем интуиция, вернее.
[01:06:34.000 --> 01:06:36.000]  Вот здесь сработал другой момент.
[01:06:36.000 --> 01:06:38.000]  Смотрите, что могло
[01:06:38.000 --> 01:06:40.000]  пойти не так.
[01:06:40.000 --> 01:06:42.000]  То есть почему нельзя, скажем,
[01:06:42.000 --> 01:06:44.000]  оставить этот алгоритм в вторую фазу?
[01:06:44.000 --> 01:06:46.000]  Это, конечно, странное вам предложение.
[01:06:46.000 --> 01:06:48.000]  Но все же.
[01:06:48.000 --> 01:06:50.000]  Вот у нас здесь есть два конкурента.
[01:06:50.000 --> 01:06:52.000]  Есть синий и красный.
[01:06:52.000 --> 01:06:54.000]  У одного X, у другого Y.
[01:06:54.000 --> 01:06:56.000]  И они пишут его на аксепторы.
[01:06:56.000 --> 01:06:58.000]  И вот будет скверно,
[01:06:58.000 --> 01:07:00.000]  если сначала большинство аксепторов
[01:07:00.000 --> 01:07:02.000]  проголосуют, ну интуитивно,
[01:07:02.000 --> 01:07:04.000]  большинство аксепторов проголосуют за X,
[01:07:04.000 --> 01:07:06.000]  а потом они проголосуют за Y.
[01:07:06.000 --> 01:07:08.000]  Поэтому здесь
[01:07:08.000 --> 01:07:10.000]  вмешивается второй механизм
[01:07:10.000 --> 01:07:12.000]  алгоритма Paxos, а именно,
[01:07:12.000 --> 01:07:14.000]  что мы обновляем NP
[01:07:14.000 --> 01:07:16.000]  и обещаем, собственно,
[01:07:16.000 --> 01:07:18.000]  отвергать старые предложения.
[01:07:20.000 --> 01:07:22.000]  Смотрите,
[01:07:22.000 --> 01:07:24.000]  вот есть...
[01:07:24.000 --> 01:07:26.000]  Я понимаю, что у меня цвета
[01:07:26.000 --> 01:07:28.000]  разные, значит.
[01:07:28.000 --> 01:07:30.000]  Здесь они означают разных пропозеров,
[01:07:30.000 --> 01:07:32.000]  а здесь разные фазы.
[01:07:34.000 --> 01:07:36.000]  Пусть у нас
[01:07:36.000 --> 01:07:38.000]  есть красный пропозер,
[01:07:38.000 --> 01:07:40.000]  и он на большинство
[01:07:40.000 --> 01:07:42.000]  пришел с припэром 2
[01:07:44.000 --> 01:07:46.000]  и получил подтверждение.
[01:07:46.000 --> 01:07:48.000]  Путверждение Promise,
[01:07:48.000 --> 01:07:50.000]  то есть аксеп,
[01:07:50.000 --> 01:07:52.000]  большинство аксепторов пообещало ему
[01:07:52.000 --> 01:07:54.000]  старые пропозалы игнорировать.
[01:07:54.000 --> 01:07:56.000]  Вот за счет обновления
[01:07:56.000 --> 01:07:58.000]  этого NP и правила,
[01:07:58.000 --> 01:08:00.000]  что N должно быть больше NP,
[01:08:00.000 --> 01:08:02.000]  это мешает синему
[01:08:02.000 --> 01:08:04.000]  пропозеру прийти
[01:08:04.000 --> 01:08:06.000]  и записать на quorum свои аксепты,
[01:08:06.000 --> 01:08:08.000]  свои предложения.
[01:08:08.000 --> 01:08:10.000]  Но потому что мы пересечемся, и в пересечении будет хотя бы один узел,
[01:08:10.000 --> 01:08:12.000]  который уже точно
[01:08:12.000 --> 01:08:14.000]  предложение отвергнет.
[01:08:14.000 --> 01:08:16.000]  То есть мы здесь
[01:08:16.000 --> 01:08:18.000]  не можем собрать у синего аксептора
[01:08:18.000 --> 01:08:20.000]  quorum
[01:08:20.000 --> 01:08:22.000]  с его 1x.
[01:08:22.000 --> 01:08:24.000]  Вот этот узел в пересечении
[01:08:24.000 --> 01:08:26.000]  скажет нет,
[01:08:26.000 --> 01:08:28.000]  отказано.
[01:08:34.000 --> 01:08:36.000]  Так что аксептор
[01:08:36.000 --> 01:08:38.000]  в фазе припэр выполняет
[01:08:38.000 --> 01:08:40.000]  как бы он две задачи
[01:08:40.000 --> 01:08:42.000]  решает. С одной стороны,
[01:08:42.000 --> 01:08:44.000]  замечая своим голосом,
[01:08:44.000 --> 01:08:46.000]  он помогает другому аксептору
[01:08:46.000 --> 01:08:48.000]  понять, что значение уже
[01:08:48.000 --> 01:08:50.000]  выбрано, как было в примере 1 без
[01:08:50.000 --> 01:08:52.000]  штриха.
[01:08:52.000 --> 01:08:54.000]  А с другой стороны, он помогает
[01:08:54.000 --> 01:08:56.000]  заблокировать конкурирующего пропозора
[01:08:56.000 --> 01:08:58.000]  со старым N,
[01:08:58.000 --> 01:09:00.000]  если значение еще не выбрано.
[01:09:00.000 --> 01:09:02.000]  То есть если значение выбрано,
[01:09:02.000 --> 01:09:04.000]  то работает вот эта
[01:09:04.000 --> 01:09:06.000]  пара.
[01:09:06.000 --> 01:09:08.000]  А если значение не выбрано, то работает
[01:09:08.000 --> 01:09:10.000]  правило, что N меньше, N
[01:09:10.000 --> 01:09:12.000]  больше чем NP, не меньше чем NP.
[01:09:12.000 --> 01:09:14.000]  Каждый аксептор
[01:09:14.000 --> 01:09:16.000]  не понимает, какой сценарий
[01:09:16.000 --> 01:09:18.000]  сейчас реализуется, поэтому он делает
[01:09:18.000 --> 01:09:20.000]  сразу две эти вещи.
[01:09:20.000 --> 01:09:22.000]  Вот такая
[01:09:22.000 --> 01:09:24.000]  грубая интуиция.
[01:09:24.000 --> 01:09:26.000]  Она все еще ничего не объясняет,
[01:09:26.000 --> 01:09:28.000]  никакого строгого смысла в ней нет,
[01:09:28.000 --> 01:09:30.000]  строгого содержания, но
[01:09:30.000 --> 01:09:32.000]  хотя бы интуитивно почувствовать, зачем
[01:09:32.000 --> 01:09:34.000]  она нужна можно.
[01:09:34.000 --> 01:09:36.000]  Через неделю все сложится,
[01:09:36.000 --> 01:09:38.000]  если вы будете внимательны,
[01:09:38.000 --> 01:09:40.000]  все встанет на свои места, и почему
[01:09:40.000 --> 01:09:42.000]  пропозор и аксептор это разные люди,
[01:09:42.000 --> 01:09:44.000]  и что значит эти N, V и так далее.
[01:09:46.000 --> 01:09:48.000]  Но пока
[01:09:48.000 --> 01:09:50.000]  не имеем дело с тем, что есть.
[01:09:50.000 --> 01:09:52.000]  Ну что,
[01:09:52.000 --> 01:09:54.000]  сценарий понятно, да?
[01:09:56.000 --> 01:09:58.000]  Тогда следующий вопрос.
[01:09:58.000 --> 01:10:00.000]  А что значит
[01:10:00.000 --> 01:10:02.000]  в этом алгоритме понятие выбора?
[01:10:04.000 --> 01:10:06.000]  Я, конечно, сказал, что
[01:10:06.000 --> 01:10:08.000]  каждый пропозор, проходя через две фазы,
[01:10:08.000 --> 01:10:10.000]  выбор совершает, то есть пропозор у него завершается.
[01:10:10.000 --> 01:10:12.000]  Но вот можем ли мы каким-то образом,
[01:10:12.000 --> 01:10:14.000]  в конце концов каждый пропозор может
[01:10:14.000 --> 01:10:16.000]  умереть?
[01:10:16.000 --> 01:10:18.000]  Так вот,
[01:10:18.000 --> 01:10:20.000]  и он не сможет
[01:10:20.000 --> 01:10:22.000]  понять, что он прошел через две фазы.
[01:10:22.000 --> 01:10:24.000]  Можем ли мы
[01:10:24.000 --> 01:10:26.000]  по глобальному
[01:10:26.000 --> 01:10:28.000]  состоянию мира понять, что значение
[01:10:28.000 --> 01:10:30.000]  выбрано? По состоянию аксепторов
[01:10:30.000 --> 01:10:32.000]  или по действиям аксепторов?
[01:10:32.000 --> 01:10:34.000]  Каждый пропозор понимает,
[01:10:34.000 --> 01:10:36.000]  было он значение или нет.
[01:10:36.000 --> 01:10:38.000]  А вот можем ли мы,
[01:10:38.000 --> 01:10:40.000]  смотря на такие картинки,
[01:10:40.000 --> 01:10:42.000]  это понимать, не думая про отдельных пропозоров,
[01:10:42.000 --> 01:10:44.000]  думая про то, что делают аксепторы?
[01:10:46.000 --> 01:10:48.000]  То есть, что такое
[01:10:48.000 --> 01:10:50.000]  выбор? Вот я могу сказать двумя способами.
[01:10:50.000 --> 01:10:52.000]  Я могу сказать, что вот выбор,
[01:10:52.000 --> 01:10:54.000]  алгоритм консенсуса сделал,
[01:10:54.000 --> 01:10:56.000]  консенсус сделал выбор,
[01:10:56.000 --> 01:10:58.000]  вообще, помните, в прошлый раз у нас было состояние,
[01:10:58.000 --> 01:11:00.000]  была Эфела Питиарема,
[01:11:00.000 --> 01:11:02.000]  и там были конфигурации.
[01:11:02.000 --> 01:11:04.000]  И мы их делили на два типа,
[01:11:04.000 --> 01:11:06.000]  бивалентные и унивалентные.
[01:11:06.000 --> 01:11:08.000]  И унивалентность означала, что выбор зафиксирован уже,
[01:11:08.000 --> 01:11:10.000]  что как бы дело дальше не пошло,
[01:11:10.000 --> 01:11:12.000]  все равно все выберут одно и то же.
[01:11:12.000 --> 01:11:14.000]  Вот могу ли я сказать, что если,
[01:11:14.000 --> 01:11:16.000]  скажем, на большинстве аксепторов
[01:11:16.000 --> 01:11:18.000]  сейчас в VA лежит одно и то же
[01:11:18.000 --> 01:11:20.000]  значение,
[01:11:20.000 --> 01:11:22.000]  то алгоритм консенсуса,
[01:11:22.000 --> 01:11:24.000]  это VA непременно,
[01:11:24.000 --> 01:11:26.000]  то выбрано может быть только самое VA.
[01:11:26.000 --> 01:11:28.000]  Ну это довольно естественно,
[01:11:28.000 --> 01:11:30.000]  что вот на большинстве лежит,
[01:11:30.000 --> 01:11:32.000]  вот если это на большинстве лежит,
[01:11:32.000 --> 01:11:34.000]  значит уж точно выбрано Х.
[01:11:34.000 --> 01:11:36.000]  Нет, ну на одном лежит один Х,
[01:11:36.000 --> 01:11:38.000]  а выбрано Y
[01:11:38.000 --> 01:11:40.000]  в этом исполнении.
[01:11:40.000 --> 01:11:42.000]  Но я говорю не на одном,
[01:11:42.000 --> 01:11:44.000]  а на большинстве.
[01:11:44.000 --> 01:11:46.000]  Вот если на каком-то кворуме лежит Х
[01:11:46.000 --> 01:11:48.000]  или лежит Y,
[01:11:48.000 --> 01:11:50.000]  то можно ли считать,
[01:11:50.000 --> 01:11:52.000]  что ничего другого,
[01:11:52.000 --> 01:11:54.000]  кроме этого Х или этого Y,
[01:11:54.000 --> 01:11:56.000]  проползы вернуть не могут?
[01:11:56.000 --> 01:11:58.000]  Вот такой вот вопрос.
[01:12:24.000 --> 01:12:30.000]  Да нет.
[01:12:30.000 --> 01:12:32.000]  Ну вот у меня здесь
[01:12:32.000 --> 01:12:34.000]  лежит где-то один Х.
[01:12:34.000 --> 01:12:36.000]  На одном аксепторе лежит
[01:12:36.000 --> 01:12:38.000]  голос один, запятая Х.
[01:12:38.000 --> 01:12:40.000]  Я прихожу с
[01:12:40.000 --> 01:12:42.000]  prepare2, prepare2, прихожу,
[01:12:42.000 --> 01:12:44.000]  но вот на первую реплику вижу Х.
[01:12:44.000 --> 01:12:46.000]  Значит ли это, что Х обязательно
[01:12:46.000 --> 01:12:48.000]  уже будет выбран? Ну нет, не значит.
[01:12:48.000 --> 01:12:50.000]  Он лежит только на одном узле.
[01:12:50.000 --> 01:12:52.000]  Этот узел, не знаю, умереть может.
[01:12:52.000 --> 01:12:54.000]  Но я спрашиваю уже
[01:12:54.000 --> 01:12:56.000]  не про один узел,
[01:12:56.000 --> 01:12:58.000]  ты пытаешься сделать
[01:12:58.000 --> 01:13:00.000]  какое-то более сильное утверждение.
[01:13:00.000 --> 01:13:02.000]  А я говорю, что мне
[01:13:02.000 --> 01:13:04.000]  достаточно, конечно, одного узла,
[01:13:04.000 --> 01:13:06.000]  мне необходим целый кворум.
[01:13:06.000 --> 01:13:08.000]  Еще раз вопрос.
[01:13:08.000 --> 01:13:10.000]  Верно ли, что если
[01:13:10.000 --> 01:13:12.000]  одно и то же значение
[01:13:12.000 --> 01:13:14.000]  в виде va лежит на большинстве
[01:13:14.000 --> 01:13:16.000]  аксепторов, то никакой прополз
[01:13:16.000 --> 01:13:18.000]  не может вернуть ничего другому, кроме va?
[01:13:18.000 --> 01:13:20.000]  Ответ нет.
[01:13:20.000 --> 01:13:22.000]  И рисуем контрпример.
[01:13:26.000 --> 01:13:28.000]  А понятно ли, почему...
[01:13:28.000 --> 01:13:30.000]  Нет, если интуиция вас обманывает,
[01:13:30.000 --> 01:13:32.000]  то непонятно, конечно, почему.
[01:13:32.000 --> 01:13:34.000]  Но если вы знаете ответ, что нет,
[01:13:34.000 --> 01:13:36.000]  то в чем проблема?
[01:13:38.000 --> 01:13:40.000]  Итак,
[01:13:40.000 --> 01:13:42.000]  у нас будут 4, кажется,
[01:13:42.000 --> 01:13:44.000]  аксептора.
[01:13:44.000 --> 01:13:46.000]  Сначала появляется синий.
[01:13:46.000 --> 01:13:48.000]  Говорит
[01:13:48.000 --> 01:13:50.000]  p1, p1,
[01:13:50.000 --> 01:13:52.000]  prepare1, prepare1.
[01:13:52.000 --> 01:13:54.000]  Получает промежность с пустыми ответами,
[01:13:54.000 --> 01:13:56.000]  с пустыми голосами.
[01:13:56.000 --> 01:13:58.000]  Предлагает свой x.
[01:13:58.000 --> 01:14:00.000]  a1x.
[01:14:04.000 --> 01:14:06.000]  Тут появляется красный пропозер.
[01:14:06.000 --> 01:14:08.000]  Говорит prepare2,
[01:14:08.000 --> 01:14:10.000]  prepare2.
[01:14:12.000 --> 01:14:14.000]  После этого,
[01:14:14.000 --> 01:14:16.000]  здесь, понятно, отвергается
[01:14:16.000 --> 01:14:18.000]  p1x.
[01:14:24.000 --> 01:14:26.000]  Кворум у нас 3 аксептора,
[01:14:26.000 --> 01:14:28.000]  и кворум это 2 из 3.
[01:14:30.000 --> 01:14:32.000]  У нас по-прежнему 3 аксептора.
[01:14:32.000 --> 01:14:34.000]  Ну как-то не знаю,
[01:14:34.000 --> 01:14:36.000]  как с конкарнсия.
[01:14:36.000 --> 01:14:38.000]  Для того, чтобы построить контрпример,
[01:14:38.000 --> 01:14:40.000]  обычно достаточно 3.
[01:14:40.000 --> 01:14:42.000]  Поэтому 3 всегда и рисуем.
[01:14:42.000 --> 01:14:44.000]  В продакшене не достаточно.
[01:14:44.000 --> 01:14:52.000]  достаточно. То есть, если вы используете зукипер, то его, скажем, диплоит на 5 машин или на 7 машин.
[01:14:52.000 --> 01:14:58.000]  Но если эти машины далеко, то, наверное, все-таки 3 ставят, физически далеко.
[01:14:58.000 --> 01:15:06.000]  Ладно, у нас нечетная и 3. Вот пришел P2, он перебил синего пропозора
[01:15:07.000 --> 01:15:13.000]  и предложил свое собственное значение. У него это был Y.
[01:15:18.000 --> 01:15:23.000]  Вообще понятно, к чему я клоню, а то я сейчас нарисую контрпример и вы все увидите.
[01:15:23.000 --> 01:15:26.000]  А вот пока интуиция есть, к чему я хочу прийти?
[01:15:26.000 --> 01:15:36.000]  Зациклить алгоритм нужно. Флп говорит, что лайфлог есть.
[01:15:36.000 --> 01:15:44.000]  Но мы же не про лайфлог сейчас говорим. Мы сейчас говорим про то, что понятие выбора определено пока нами неправильно.
[01:15:44.000 --> 01:15:49.000]  Что просто иметь одно и то же значение на кворуме недостаточно для выбора.
[01:15:49.000 --> 01:15:55.000]  Видимо, я хочу иметь одно и то же значение на кворуме, но, видимо, хочу я его иметь с разными болот-наборами.
[01:15:55.000 --> 01:16:01.000]  И это каким-то образом алгоритм собьет с толку.
[01:16:01.000 --> 01:16:06.000]  Точнее нас собьет с толку, алгоритм переживет все что угодно.
[01:16:06.000 --> 01:16:11.000]  Итак, А2 и что происходит дальше?
[01:16:11.000 --> 01:16:22.000]  Он близок к тому, чтобы записать Y с 2 и выбрать, но приходит P3 P3.
[01:16:25.000 --> 01:16:35.000]  Что P3 получает от аксепторов?
[01:16:35.000 --> 01:16:41.000]  Он с одной стороны здесь получает X, а здесь получает ничего.
[01:16:41.000 --> 01:16:49.000]  Так что зеленый выбирает в качестве его значения X и говорит А3X.
[01:16:49.000 --> 01:16:58.000]  Я не буду уже красного рисовать, как у него отвергаются аксепты, это и так понятно.
[01:16:58.000 --> 01:17:01.000]  А что происходит в конце концов?
[01:17:01.000 --> 01:17:06.000]  Смотрите, я уже получил то, что хотел.
[01:17:06.000 --> 01:17:16.000]  Момент времени и сейчас на первом возле лежит X, на третьем аксепторе тоже лежит X.
[01:17:16.000 --> 01:17:21.000]  Момент времени состоит в том, что кроме X выбрано уже быть ничего не может.
[01:17:21.000 --> 01:17:27.000]  Но очевидно может. Что для этого нужно сделать?
[01:17:27.000 --> 01:17:39.000]  Нужно прийти prepare99 сюда и prepare99 сюда.
[01:17:39.000 --> 01:17:45.000]  И тогда этот prepare что увидит? 1X, да?
[01:17:45.000 --> 01:17:54.000]  А этот prepare 2Y увидит.
[01:17:54.000 --> 01:18:00.000]  И мы в качестве V со звездочкой выберем Vat с максимальным n-атом.
[01:18:00.000 --> 01:18:06.000]  То есть мы выберем Y и запишем его.
[01:18:06.000 --> 01:18:14.000]  A99Y, A99Y.
[01:18:14.000 --> 01:18:19.000]  Ну и все, вот здесь пропауз уже, это первый пропауз, который завершился успешно, и он выбрал Y.
[01:18:19.000 --> 01:18:26.000]  Хотя на большинстве лежало X.
[01:18:26.000 --> 01:18:33.000]  Так что такого условия недостаточно для того, чтобы считать, что выбор сделан.
[01:18:33.000 --> 01:18:43.000]  Это неинтересный ответ.
[01:18:43.000 --> 01:18:49.000]  Я же говорю про то, если пропауз еще не завершился, понять, что выбор уже предрешен.
[01:18:49.000 --> 01:18:59.000]  А если пропауз завершился, а выбор еще может поменяться, то это просто неправильно к этому консенсу, его нужно выкинуть.
[01:18:59.000 --> 01:19:03.000]  Так как же мне сказать, когда выбор сделан?
[01:19:03.000 --> 01:19:10.000]  Как же правильно сказать, что выбор сделан?
[01:19:10.000 --> 01:19:16.000]  Сказать, что значение лежит на большинстве аксепторов недостаточно.
[01:19:16.000 --> 01:19:24.000]  Я хочу сказать, что значение... На самом деле понятие выбрано, Lamport это называется словом chosen.
[01:19:24.000 --> 01:19:30.000]  Выбрано может быть не значение, а предложение N, V.
[01:19:30.000 --> 01:19:37.000]  И оно выбрано не то, чтобы когда оно лежит на большинстве аксепторов, я даже этого не требую.
[01:19:37.000 --> 01:19:49.000]  Я скажу, что значение предложения выбрано, когда большинству аксепторов ответили на такое предложение accepted.
[01:19:49.000 --> 01:19:55.000]  Я вот не требую, чтобы в один момент времени все эти предложения лежали на кворуме даже.
[01:19:55.000 --> 01:20:02.000]  Просто чтобы все ответили. Ну, чтобы кворум ответил.
[01:20:02.000 --> 01:20:05.000]  Ну и это уже нужно доказывать.
[01:20:05.000 --> 01:20:11.000]  Мы сейчас доказываем свойство agreement у задачи в алгоритме single-dequip access.
[01:20:11.000 --> 01:20:13.000]  Свойство validity является очевидным.
[01:20:13.000 --> 01:20:17.000]  Алгоритм очевидно выбирает только то, что было кем-то предложено, как он иначе может сделать.
[01:20:17.000 --> 01:20:19.000]  Мы доказываем сейчас agreement.
[01:20:19.000 --> 01:20:31.000]  Мы говорим, пусть предложение N, V выбрано в некотором раунде N.
[01:20:31.000 --> 01:20:38.000]  Раундом я называю все сообщения с одним N.
[01:20:38.000 --> 01:20:45.000]  И пусть у меня есть N штрих не меньше, чем N.
[01:20:45.000 --> 01:20:56.000]  Я хочу показать, что тогда, если в раунде N штрих вообще появляется в сети сообщения...
[01:20:56.000 --> 01:20:59.000]  Давайте я буду прополз рисовать.
[01:20:59.000 --> 01:21:04.000]  Propose N штрих V штрих.
[01:21:04.000 --> 01:21:09.000]  То из этого следует, что V штрих равно V.
[01:21:09.000 --> 01:21:13.000]  Вот это я хочу доказать.
[01:21:13.000 --> 01:21:15.000]  Ясно?
[01:21:20.000 --> 01:21:23.000]  Совсем недавно обсудили.
[01:21:23.000 --> 01:21:25.000]  Chosen означает...
[01:21:25.000 --> 01:21:34.000]  Мы определили, что для понятия выбора недостаточно сказать, что X лежит на большинстве аксепторов.
[01:21:34.000 --> 01:21:42.000]  Предложение выбрано, когда большинство аксепторов за него проголосовали.
[01:22:05.000 --> 01:22:08.000]  Утверждение понятно?
[01:22:08.000 --> 01:22:22.000]  Оно звучит так, как будто бы, что если предложение N, V выбрано, то для всех будущих предложений V может быть только таким же.
[01:22:22.000 --> 01:22:29.000]  На самом деле это не про время утверждения, потому что... Смотрите, как может быть.
[01:22:29.000 --> 01:22:31.000]  Снова три аксептора.
[01:22:31.000 --> 01:22:36.000]  И мы говорим P1 P1.
[01:22:39.000 --> 01:22:46.000]  Потом мы говорим A1X.
[01:22:49.000 --> 01:22:52.000]  Потом мы говорим P2 P2.
[01:22:54.000 --> 01:22:57.000]  A2X A2X.
[01:22:58.000 --> 01:23:05.000]  А потом мы говорим A1X.
[01:23:05.000 --> 01:23:13.000]  И если смачить эту картинку, это исполнение с теоремой, то о чем она говорит?
[01:23:14.000 --> 01:23:30.000]  Что если в раунде 1 предложение 1X было выбрано, то в любом раунде не меньше чем 1, например в раунде 2, может быть предложено только то же самое значение X.
[01:23:30.000 --> 01:23:33.000]  Хотя хронологически тут немного в другом порядке все произошло.
[01:23:34.000 --> 01:23:42.000]  Да, и здесь видите, предложение 1X является выбранным, но нет момента времени, когда оно лежит на большинстве аксепторов.
[01:23:42.000 --> 01:23:44.000]  Этого не требуется.
[01:23:47.000 --> 01:23:50.000]  Что тоже интуиция алгоритма не добавляет, конечно.
[01:24:03.000 --> 01:24:05.000]  Почитай статью.
[01:24:23.000 --> 01:24:29.000]  Итак, база-то очевидна, правда? Мы индукцию хотим сейчас устроить.
[01:24:30.000 --> 01:24:33.000]  База N равно N штрих.
[01:24:34.000 --> 01:24:36.000]  Что значит Nv chosen?
[01:24:36.000 --> 01:24:41.000]  Это значит, что алгоритм-пропозер с этим предложением прошел через две фазы.
[01:24:41.000 --> 01:24:46.000]  В частности, через вторую фазу, и там он говорил пропоз явно с этим самым V.
[01:24:46.000 --> 01:24:54.000]  Так что нас интересует уже шаг индукции, и мы смотрим на ситуацию, когда у нас есть N штрих больше, чем N.
[01:24:54.000 --> 01:24:59.000]  И с одной стороны Nv chosen, с другой стороны есть пропоз N штрих V штрих.
[01:24:59.000 --> 01:25:01.000]  Давайте это нарисуем.
[01:25:01.000 --> 01:25:06.000]  Что значит, что Nv chosen в раунде N?
[01:25:06.000 --> 01:25:12.000]  Это означает, что пропозер, который предлагал это предложение, прошел через вторую фазу.
[01:25:12.000 --> 01:25:18.000]  То есть он отправил команду Propose на узлы, на аксептора и собрал quorum.
[01:25:18.000 --> 01:25:21.000]  Вот можно его нарисовать, этот quorum.
[01:25:24.000 --> 01:25:40.000]  Что означает, что какой-то пропозер в раунде N штрих предлагает пару N штрих V штрих?
[01:25:40.000 --> 01:25:49.000]  Видимо, для этого он должен был собрать quorum promise с фазы prepare.
[01:25:54.000 --> 01:26:16.000]  Ну а теперь посмотрим на узел, который находился в пересечении.
[01:26:16.000 --> 01:26:24.000]  Он такой обязательно должен быть, какой-нибудь особенный A.
[01:26:24.000 --> 01:26:31.000]  Вот нарисуем его таймлайн.
[01:26:31.000 --> 01:26:50.000]  Он с одной стороны получил сообщение prepare N штрих, и ответил на него promise.
[01:26:50.000 --> 01:26:57.000]  А с другой он получил Propose Nv и принял это предложение.
[01:26:57.000 --> 01:27:03.000]  Вот где он получил Propose на этом таймлайне?
[01:27:03.000 --> 01:27:12.000]  Мог ли он получить его где-то вот здесь, правее этого момента?
[01:27:12.000 --> 01:27:14.000]  Довольно простой вопрос.
[01:27:14.000 --> 01:27:19.000]  Кажется, не мог, потому что каждый аксептор обновляет свое N monotone,
[01:27:19.000 --> 01:27:24.000]  и здесь у него Np равно, по крайней мере, N штрих дальше.
[01:27:24.000 --> 01:27:29.000]  Если он получил бы Propose позже, то мы знаем, что N штрих больше, чем N,
[01:27:29.000 --> 01:27:33.000]  а его Np теперь не меньше, чем N штрих, поэтому это сообщный отверг.
[01:27:33.000 --> 01:27:49.000]  Поэтому Propose Nv он мог получить только до.
[01:27:49.000 --> 01:27:56.000]  Ну а теперь думаем.
[01:27:56.000 --> 01:28:00.000]  Что нам интересно узнать?
[01:28:00.000 --> 01:28:11.000]  Какова наша цель? Узнать, что в раунде N штрих предложит вот этот штрихованный пропозор.
[01:28:11.000 --> 01:28:15.000]  Чему будет равно v штрих? Мы хотим показать, что оно будет равно v.
[01:28:15.000 --> 01:28:18.000]  Ну вот, смотрим на эту картинку.
[01:28:18.000 --> 01:28:29.000]  Вот здесь, раз аксептор получает Propose Nv и принимает предложение, то, видимо, это N его устраивает.
[01:28:29.000 --> 01:28:43.000]  То есть мы знаем, что теперь после этого шага уж точно Np не меньше, чем N.
[01:28:43.000 --> 01:28:48.000]  Вот на всем суффиксе этого таймлайна.
[01:28:48.000 --> 01:28:54.000]  И мы знаем, что prepare N штрих был успешен.
[01:28:54.000 --> 01:28:58.000]  Что мы можем из этого заключить?
[01:28:58.000 --> 01:29:06.000]  Ну что, во-первых, N штрих был не меньше, чем Np к этому моменту.
[01:29:06.000 --> 01:29:17.000]  Ну а с этим promise, какое значение аксептор A со звездочкой отправил штрихованному пропозору?
[01:29:17.000 --> 01:29:20.000]  Почему это так получается?
[01:29:20.000 --> 01:29:26.000]  Чему было равно Na? Каково было Na у этого ответа?
[01:29:26.000 --> 01:29:29.000]  Она была не меньше, чем N.
[01:29:29.000 --> 01:29:32.000]  Да?
[01:29:32.000 --> 01:29:46.000]  Ну а теперь по предположению индукции мы знаем, что раз нам ответили, что Np было даже меньше, чем N штрих и не меньше, чем N.
[01:29:46.000 --> 01:29:55.000]  По предположению индукции все пропозы, которые в этом интервале выдвигались, имели v штрих равных v.
[01:29:55.000 --> 01:30:08.000]  Поэтому мы знаем про ответ, про отданный аксепторам голос, что здесь вот Na оно не меньше, чем N, и что va это v.
[01:30:08.000 --> 01:30:11.000]  В этом мы уверены.
[01:30:11.000 --> 01:30:17.000]  Ну а теперь штрихованный пропозор, получая такие promise, смотрит на Na и выбирает из них максимальное.
[01:30:17.000 --> 01:30:23.000]  Ну раз какое-то va уже не меньше, чем N, то и максимальное не меньше, чем N.
[01:30:23.000 --> 01:30:33.000]  Ну а для всех таких Na, если они не меньше, чем N, то у них по предположению индукции va равно v.
[01:30:33.000 --> 01:30:47.000]  Так что штрихованный пропозор, собрав такой quorum, обязан в качестве своего v со звездочкой выбрать вот это самое v, но его он и предложит.
[01:30:47.000 --> 01:30:52.000]  Это все.
[01:30:52.000 --> 01:30:57.000]  Пара несложных шангов.
[01:30:57.000 --> 01:31:01.000]  Правда, абсолютно ничего сложного не произошло.
[01:31:01.000 --> 01:31:10.000]  Но Лэмпард не врет, тут сложнее Na больше, чем N, ничего нет во всем алгоритме и в теореме.
[01:31:10.000 --> 01:31:13.000]  Еще раз понятно, что мы сделали.
[01:31:13.000 --> 01:31:29.000]  Мы нашли акцептора, через который каждый пропозор с большим N узнает про ранее выбранное значение.
[01:31:29.000 --> 01:31:31.000]  То есть все очень простое.
[01:31:31.000 --> 01:31:36.000]  Ну и все, мы показали, что алгоритм single decreed access не нарушает агримент.
[01:31:36.000 --> 01:31:40.000]  Алгоритм single decreed access обеспечивает safety свойства.
[01:31:40.000 --> 01:31:43.000]  Если значение выбрано, то оно уже не поменяется.
[01:31:43.000 --> 01:31:49.000]  Ничего плохого не произойдет.
[01:31:49.000 --> 01:31:57.000]  С другой стороны, эта теорема не обещает, что значение вообще в принципе будет выбрано когда-либо.
[01:31:57.000 --> 01:32:01.000]  Она обещает только, что оно не изменится, если оно выбрано.
[01:32:01.000 --> 01:32:04.000]  А вот гарантировать, что оно будет выбрано, в принципе невозможно.
[01:32:04.000 --> 01:32:09.000]  Потому что, как мы помним, у нас есть FLP-теорема, и она говорит, что в любом алгоритме консенсуса есть LifeLog.
[01:32:09.000 --> 01:32:14.000]  То есть любого алгоритма консенсуса может бесконечно долгое значение не выбирать.
[01:32:14.000 --> 01:32:19.000]  Ну и давайте подумаем, а где же в нашем алгоритме есть LifeLog?
[01:32:19.000 --> 01:32:22.000]  Если его нет, то нужно волноваться.
[01:32:22.000 --> 01:32:26.000]  Но вроде бы мы доказали, что он корректен, что он обеспечивает safety свойства.
[01:32:26.000 --> 01:32:31.000]  LifeLog обязан быть.
[01:32:31.000 --> 01:32:34.000]  У LifeLog есть специальные названия.
[01:32:34.000 --> 01:32:39.000]  Не у каждого LifeLogа есть названия, вот у этого есть.
[01:32:39.000 --> 01:32:44.000]  LifeLog называется дуэль пропозеров.
[01:32:55.000 --> 01:32:59.000]  Ну и давайте нарисуем LifeLog. Вроде несложно.
[01:32:59.000 --> 01:33:04.000]  Я начинаю одинаковое.
[01:33:04.000 --> 01:33:09.000]  Что происходит дальше?
[01:33:09.000 --> 01:33:14.000]  Ну и синий приходит сюда, сюда и проигрывает.
[01:33:14.000 --> 01:33:18.000]  Получает большинство отказов, и, видимо, он ретравится.
[01:33:18.000 --> 01:33:23.000]  И что он делает дальше?
[01:33:23.000 --> 01:33:28.000]  Ну, в общем-то, он проигрывает.
[01:33:28.000 --> 01:33:33.000]  Ну, в общем-то, он проигрывает.
[01:33:33.000 --> 01:33:38.000]  Ну, в общем-то, он проигрывает.
[01:33:38.000 --> 01:33:43.000]  Он себе новое n выбирает.
[01:33:50.000 --> 01:33:53.000]  Да зачем?
[01:33:53.000 --> 01:33:56.000]  Это нам не помогает LifeLog строить.
[01:33:56.000 --> 01:34:01.000]  До accept'ра можно вообще не рисовать, они все равно провалятся все.
[01:34:01.000 --> 01:34:06.000]  Смотрите, вот здесь accept, синий пропозер пытается сюда записать значение,
[01:34:06.000 --> 01:34:11.000]  получается сюда и сюда, не получается.
[01:34:11.000 --> 01:34:16.000]  Ретравится, выбирает себе новое n, например, равным 3, и пишет p3, p3.
[01:34:16.000 --> 01:34:21.000]  Ну и он получается перебил красного, который пытается сюда и сюда сделать accept'ы свои.
[01:34:21.000 --> 01:34:26.000]  Допустим, сюда получается, сюда не получается.
[01:34:26.000 --> 01:34:31.000]  Вот так что он ретравится и говорит p4, p4.
[01:34:31.000 --> 01:34:38.000]  Вот, но они так друг другу мешают пройти через вторую фазу.
[01:34:45.000 --> 01:34:49.000]  Что? За счет алгоритма.
[01:34:49.000 --> 01:34:54.000]  То есть алгоритм так написан.
[01:34:54.000 --> 01:34:57.000]  Я спрашивал, все ли понятно, смотрел на себя специально, не знаю почему.
[01:34:57.000 --> 01:34:59.000]  Видимо, предчувствовал что-то.
[01:34:59.000 --> 01:35:03.000]  Я говорил, что алгоритм может не собрать quorum, либо здесь, либо здесь.
[01:35:03.000 --> 01:35:06.000]  Ну в смысле не то, что не собрать quorum, не дождаться, а в смысле получить слишком много отказов,
[01:35:06.000 --> 01:35:09.000]  чтобы quorum гарантированно не мог собраться.
[01:35:09.000 --> 01:35:10.000]  В этом случае что нам делать?
[01:35:10.000 --> 01:35:12.000]  Нам нужно ретравиться.
[01:35:12.000 --> 01:35:17.000]  Выбираем себе новое n, пробуем все заново.
[01:35:17.000 --> 01:35:20.000]  Ну и ретравия у нас обязаны быть, потому что есть FLP-тиарема,
[01:35:20.000 --> 01:35:25.000]  и FLP-тиарема говорит, что алгоритм должен иметь возможность не завершиться.
[01:35:25.000 --> 01:35:29.000]  Вот в вашем алгоритме репликации регистра такой возможности нет не завершиться.
[01:35:29.000 --> 01:35:32.000]  Если достаточно узлов живые, то просто вы делаете первую фазу, потом вторую фазу.
[01:35:32.000 --> 01:35:34.000]  Циклов нет.
[01:35:34.000 --> 01:35:47.000]  Вот здесь цикл обязан быть, и вот этот цикл нас с ретравиями в лайфлоге и приводит.
[01:35:47.000 --> 01:35:50.000]  Но что здесь важно?
[01:35:50.000 --> 01:35:58.000]  Почему мне лично более близок Paxos, нежели Raft?
[01:35:58.000 --> 01:36:01.000]  Хотя Raft утверждает, что он проще.
[01:36:01.000 --> 01:36:03.000]  Мне кажется, что Paxos проще.
[01:36:03.000 --> 01:36:09.000]  Потому что Paxos идеально изолирует друг от друга safety, то есть свойство agreement,
[01:36:09.000 --> 01:36:12.000]  и liveness, то есть завершение алгоритма.
[01:36:12.000 --> 01:36:15.000]  Я в прошлый раз говорил, что решая задачу консенсуса можно...
[01:36:15.000 --> 01:36:18.000]  Задача консенсуса не решается во синхронной модели,
[01:36:18.000 --> 01:36:20.000]  дальше можно в модель добавлять время,
[01:36:20.000 --> 01:36:23.000]  давайте в наш алгоритм встраивать какие-то таймауты.
[01:36:23.000 --> 01:36:26.000]  А можно не встраивать в задачу консенсуса таймауты,
[01:36:26.000 --> 01:36:28.000]  можно построить детектор сбоев
[01:36:28.000 --> 01:36:30.000]  и в него встраивать таймауты,
[01:36:30.000 --> 01:36:33.000]  а алгоритм консенсуса это строить поверха такого детектора сбоев,
[01:36:33.000 --> 01:36:35.000]  опираясь на какие-то его свойства.
[01:36:35.000 --> 01:36:40.000]  И дальше уже сам алгоритм консенсуса про время не думает.
[01:36:40.000 --> 01:36:44.000]  Вот Paxos не думает про время.
[01:36:44.000 --> 01:36:56.000]  Ваша задача из этого лайфлока выйти в разумной реализации, эту симметрию нарушить каким-то образом.
[01:36:56.000 --> 01:37:05.000]  Но делайте, что хотите, говорит нам лэмпард, потому что если вы не нарушаете этот алгоритм,
[01:37:05.000 --> 01:37:09.000]  то вы сейфти консенсуса нарушить не можете никак.
[01:37:10.000 --> 01:37:20.000]  То есть пока вы не меняете вот эту структуру, вам ничего не угрожает, вы можете использовать время как угодно.
[01:37:20.000 --> 01:37:25.000]  Но как вы его можете использовать? Разными способами.
[01:37:25.000 --> 01:37:34.000]  Например, вы можете, собственно, поэтому у вас есть первая задача, где есть ссылка про ритрай.
[01:37:35.000 --> 01:37:43.000]  У вас есть два пропоузера, они ритрайятся, но они делают это синхронно абсолютно, и поэтому друг другу постоянно мешают.
[01:37:43.000 --> 01:37:49.000]  Вот можно эту синхронность нарушить, ритраясь аккуратно, а именно используя экспонент шелбыков.
[01:37:57.000 --> 01:38:02.000]  Напомню, в чем смысл. Во-первых, когда вы ритраетесь, вы увеличиваете экспоненциальное время,
[01:38:02.000 --> 01:38:07.000]  паузу между попытками своими, а во-вторых, вы эту паузу еще рандомизируете.
[01:38:07.000 --> 01:38:11.000]  Зачем вы экспоненциально наращиваете паузу?
[01:38:11.000 --> 01:38:16.000]  Затем, что вы не знаете, сколько потребуется вашему соседу, чтобы свой алгоритм завершить.
[01:38:16.000 --> 01:38:21.000]  Но вообще, статья по экспонент шелбыков была просто про распределенную систему и клиентов.
[01:38:21.000 --> 01:38:25.000]  И смысл там был такой, что если у вас система загружена и вдруг ей становится плохо,
[01:38:25.000 --> 01:38:30.000]  то если все клиенты уйдут и потом разом притраются в одно и то же время,
[01:38:30.000 --> 01:38:34.000]  то будет такая огромная нагрузка волнообразная, она снова все убьет.
[01:38:34.000 --> 01:38:38.000]  Поэтому нужно клиентов во времени размазать.
[01:38:38.000 --> 01:38:43.000]  Но при этом желательно, чтобы они принимали локальные решения, а глобально все было распределено.
[01:38:43.000 --> 01:38:48.000]  Но вот это достигалось рандомизации и растущими делами.
[01:38:48.000 --> 01:38:54.000]  Зачем в обоих случаях, что здесь, что в такой абстрактной системе с клиентами,
[01:38:54.000 --> 01:38:57.000]  увеличивать экспоненциально время ритрая?
[01:38:57.000 --> 01:39:03.000]  Потому что мы не знаем, какое время займет у нашего соседа, у нашего конкурента завершить свои две фазы,
[01:39:03.000 --> 01:39:09.000]  и мы не знаем, сколько времени потребуется системе, чтобы восстановиться.
[01:39:09.000 --> 01:39:13.000]  Мы увеличиваем и увеличиваем паузы между ритраями, чтобы этого было достаточно.
[01:39:13.000 --> 01:39:15.000]  Рано или поздно этого будет достаточно.
[01:39:15.000 --> 01:39:19.000]  В данном случае мы экспоненциально увеличиваем время ожидания для того,
[01:39:19.000 --> 01:39:23.000]  чтобы наш конкурент за это время все-таки успел сделать обе свои фазы,
[01:39:23.000 --> 01:39:26.000]  и мы с ним перестали бы толкаться.
[01:39:26.000 --> 01:39:30.000]  А рандомизируем мы для того, чтобы, если вдруг это происходит совсем синхронно,
[01:39:30.000 --> 01:39:35.000]  чтобы все-таки эта симметрия нарушилась.
[01:39:35.000 --> 01:39:44.000]  Но пока мы не делаем ничего, что ломает нам вот эти рассуждения, мы в безопасности.
[01:39:44.000 --> 01:39:52.000]  Мы можем использовать время, и пакс устроен так, что его сломать очень трудно этими предположениями о времени.
[01:39:52.000 --> 01:39:56.000]  Ну а если вспомнить совсем аккуратно то, что я в прошлый раз рассказывал,
[01:39:56.000 --> 01:40:00.000]  то я говорил, что если мы сводим задачу к консенсусу к построению детектора сбоев,
[01:40:00.000 --> 01:40:07.000]  и в нем уже используем часы, то можно доказать, что есть самый слабый детектор сбоев — это выбор лидера.
[01:40:07.000 --> 01:40:14.000]  То есть детектор, который всем узлам, каждому узлу системы говорит, что вот сейчас есть некоторый лидер.
[01:40:14.000 --> 01:40:18.000]  Этот детектор может ошибаться, этот детектор может говорить разные ответы разным узлам,
[01:40:18.000 --> 01:40:23.000]  может направлять их в мертвые узлы. Но если он eventually будет говорить правду,
[01:40:23.000 --> 01:40:27.000]  если eventually все узлы сойдутся в предположении, кто сейчас лидер,
[01:40:27.000 --> 01:40:31.000]  то этого будет достаточно для решения задачи консенсуса.
[01:40:31.000 --> 01:40:36.000]  Ну и вот понятно, что достаточно. Если эти пропозоры между собой определятся,
[01:40:36.000 --> 01:40:42.000]  кто из них главный и кто сейчас проходит через две фазы, то алгоритм сможет завершиться.
[01:40:42.000 --> 01:40:52.000]  Ну это пока не нужно воспринимать это так, что нужно так на практике и делать,
[01:40:52.000 --> 01:40:55.000]  потому что на практике вы не решаете изолированную задачу консенсуса,
[01:40:55.000 --> 01:41:03.000]  на практике вы строите Atomic Broadcast. Но в следующий раз мы увидим, что такие рассуждения полезны,
[01:41:03.000 --> 01:41:09.000]  и начнем мы более-менее с того, что скажем, что вот действительно возьмем просто серию консенсусов,
[01:41:09.000 --> 01:41:14.000]  и они будут нам строить total order. А потом увидим, что вот есть какие-то общие элементы.
[01:41:14.000 --> 01:41:26.000]  Так что пока для нас важно, что алгоритм Paxos safety обеспечивает абсолютно надежно,
[01:41:26.000 --> 01:41:32.000]  и предположения времени его сломать, кажется, нигде не могут, пока он проходит через две эти фазы.
[01:41:32.000 --> 01:41:40.000]  Ну еще пара маленьких замечаний. Во-первых, рестарты. Что нужно делать с рестартами? Как их переживать?
[01:41:40.000 --> 01:41:48.000]  Ну подумайте в домашней работе, это совершенно тривиальный вопрос.
[01:41:48.000 --> 01:41:59.000]  Еще один маленький вопрос. Вы приходите в систему, где есть аксепторы,
[01:41:59.000 --> 01:42:08.000]  как вам узнать, какое значение сейчас выбрано? Вопрос довольно праздный, кажется, но на самом деле,
[01:42:08.000 --> 01:42:14.000]  если вы пишете multi-Paxos, реплицируете RSM с помощью Paxos и делаете в нем отказы устойчивость,
[01:42:14.000 --> 01:42:18.000]  переживаете смерть узлов, то такая задача там очень естественным образом возникает.
[01:42:18.000 --> 01:42:24.000]  Как понять, что значение уже выбрано? Можете ли вы просто прочесть значение с хлорома
[01:42:24.000 --> 01:42:34.000]  и понять, что вот выбрано оно?
[01:42:34.000 --> 01:42:42.000]  Сейчас, ну подожди, я говорю про чтение. Можем ли мы просто опросить аксепторов и узнать, что значение уже выбрано?
[01:42:42.000 --> 01:42:50.000]  Теорема про проползы. Она про algorithm Paxos. Я не спрашиваю про algorithm Paxos, я спрашиваю,
[01:42:50.000 --> 01:42:57.000]  можем ли мы прочесть с аксепторов их голоса и узнать, что какое-то значение сейчас выбрано?
[01:42:57.000 --> 01:43:00.000]  Просто глядя на любое большинство.
[01:43:20.000 --> 01:43:29.000]  Если мы соберем ответы с большинства аксепторов и они окажутся одинаковыми,
[01:43:29.000 --> 01:43:33.000]  в смысле одна и та же пара nv, то, безусловно, мы знаем, что значение выбрано.
[01:43:33.000 --> 01:43:39.000]  А вот в общем случае мы не знаем, что значение выбрано, потому что можно получить разные n.
[01:43:39.000 --> 01:43:45.000]  К чему я клонюсь? Если вы хотите узнать, что значение выбрано, то это всегда можно сделать,
[01:43:45.000 --> 01:43:50.000]  предложив что-то самому. Это самый простой способ прочесть значение из аксепторов.
[01:43:50.000 --> 01:43:59.000]  Совсем тупое замечание, algorithm Paxos, очевидно, собирает хорумы из большинства узлов,
[01:43:59.000 --> 01:44:03.000]  поэтому не переживает сбои половины или более, тоже все сходится с прошлой теоремой.
[01:44:03.000 --> 01:44:12.000]  Правда, можно поступать чуть более свободным образом. В нашей теореме мы использовали только тот факт,
[01:44:12.000 --> 01:44:17.000]  что пересекается вторая фаза и первая фаза. Так что, вообще говоря, хорумы можно выбирать разные.
[01:44:17.000 --> 01:44:22.000]  Где-то больше, где-то меньше. В чем смысл пока непонятен, но здесь он и не будет понятен.
[01:44:22.000 --> 01:44:32.000]  Может быть, в следующий раз поговорим об этом.
[01:44:32.000 --> 01:44:39.000]  Понятно ли, почему он говорит не понятен? В смысле не интуитивен.
[01:44:39.000 --> 01:44:44.000]  Что мешает ему быть интуитивным?
[01:44:44.000 --> 01:44:54.000]  Но мешает ему то, что, по-честному, у фазы 1 и фазы 2 нет самостоятельного смысла.
[01:44:54.000 --> 01:45:00.000]  Они друг с друга, друг без друга не живут.
[01:45:00.000 --> 01:45:04.000]  Вот нет самостоятельного смысла у фазы prepare. То есть, да, он говорит, что блокировки,
[01:45:04.000 --> 01:45:11.000]  блокировки нужны для того, чтобы сделать фазу propose. А фаза propose работает только вместе с фазой prepare.
[01:45:11.000 --> 01:45:18.000]  И только поэтому корректность достигается. То есть, фаза prepare, блокировки виртуальные защищают нас
[01:45:18.000 --> 01:45:23.000]  от сценария, когда два пропозера конкурируют и старый хочет записать еще старое значение,
[01:45:23.000 --> 01:45:30.000]  а новый уже взял блокировки, то есть выполнил prepare к хоруме и перехватил инициативу.
[01:45:30.000 --> 01:45:35.000]  То есть, смысл этих фаз рождается в конкуренции между ними, и поэтому очень сложно друг о друга
[01:45:35.000 --> 01:45:40.000]  оторвать и что-то инкрементальное сделать. Поэтому конструкция непонятна.
[01:45:40.000 --> 01:45:47.000]  Но в следующий раз мы это починим, потому что мы увидим, выстраивая эти паксосы в серию,
[01:45:47.000 --> 01:45:56.000]  что если их так выстроить и немножко подумать, то все эти NA, VA и NP можно будет заменить
[01:45:56.000 --> 01:46:01.000]  на какие-то понятные уже человеческие слова, и в них будет уже физический смысл.
[01:46:01.000 --> 01:46:05.000]  Ну а об этом мы поговорим через неделю. На сегодня все.
