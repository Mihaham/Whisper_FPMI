[00:00.000 --> 00:11.000]  Так, ну хорошо. Насколько я понял, в некоторых группах уже раньше разговоры про НПП-полноту, про конкретные задачи.
[00:12.000 --> 00:25.000]  Ну, тем не менее, я про это тоже расскажу на лекции. Дайте я вкратце напомню, что мы успели изучить в предыдущие два раза.
[00:25.000 --> 00:50.000]  Значит, НП-полная задача. Ну, определение, напомню, такое, что В, НП-полная, значит, если, во-первых, В лежит в НП,
[00:50.000 --> 00:58.000]  и во-вторых, для любого А из НП верно, что А сводится к В.
[00:58.000 --> 01:04.000]  Значит, и мы доказали термку Кукулевина.
[01:04.000 --> 01:32.000]  Теорема Кукулевина заключается в том, что задача о выполнимости 3-кНФ, то есть множество таких ФИ, что ФИ имеет вид 3-кНФ,
[01:32.000 --> 01:50.000]  и при этом ФИ выполнимо, то есть существует такой Х, что ФИ от Х равно 1, значит, такая задача НП-полная.
[01:50.000 --> 02:13.000]  Ну и дальше, значит, дальше мы будем пользоваться таким утверждением, значит, утверждение, что если, значит, В, НП-полная,
[02:13.000 --> 02:32.000]  значит, В выполняет свойство к С, и С лежит в НП, то тогда, соответственно, С тоже НП-полная.
[02:32.000 --> 02:41.000]  Ну и вот это утверждение, это ключевая лемма, которая позволяет получать новые НП-полные задачи.
[02:41.000 --> 02:51.000]  Ну и, соответственно, как правило, в качестве отправной точки выступает именно вот эта вот задача, выполнимость 3-кНФ,
[02:51.000 --> 02:55.000]  ну, может быть, через каких-то посредников.
[02:55.000 --> 03:08.000]  Ну и, в общем, за прошедшие 50 лет, даже 51 уже, ну, не, наверное, еще не 51, 50 с половиной,
[03:08.000 --> 03:15.000]  значит, за прошедшие полвека очень про многие задачи была получена НП-полнота.
[03:15.000 --> 03:22.000]  Значит, как правило, вот эта вот вторая часть, что цель лежит в НП, это достаточно очевидная вещь,
[03:22.000 --> 03:26.000]  а что-то содержательное происходит вот здесь, вот, в сводимости.
[03:26.000 --> 03:35.000]  Но бывает и не так. Бывает, что и вот эта часть содержательная, и даже, наоборот, вот это очевидно, вот это нужно доказывать.
[03:35.000 --> 03:38.000]  Да, в общем, бывает по-всякому.
[03:38.000 --> 03:48.000]  Ну, то есть можно смотреть на вот эти вот НП-полные задачи как на переформулировке одной и той же задачи.
[03:48.000 --> 03:53.000]  Ну, можно считать вот этой задачей, можно какой-нибудь другой.
[03:53.000 --> 03:56.000]  То есть переформулировки, перекодировки.
[03:56.000 --> 04:03.000]  Значит, так что мы перекодируем так, что если решение было, то и в новой задаче будет решение,
[04:03.000 --> 04:08.000]  если решения не было, то его и в новой задаче тоже не будет.
[04:09.000 --> 04:12.000]  Вот.
[04:15.000 --> 04:18.000]  Хорошо.
[04:21.000 --> 04:25.000]  Ну, теперь давайте поговорим про несколько разных групп задач.
[04:25.000 --> 04:30.000]  Значит, вообще НП-полные задачи, они в самых разных областях, где средства математики встречаются,
[04:31.000 --> 04:42.000]  может быть там в алгебре, может быть в комминаторике, может быть в логике, как вот эта, собственно, задача.
[04:42.000 --> 04:50.000]  Могут просто какие-то отдельные задачи, связанные там с головоломками там или с чем-нибудь.
[04:50.000 --> 04:57.000]  Потому что вообще любая НП-задача, она имеет такой характер головоломки,
[04:57.000 --> 05:01.000]  что вот есть Х, это как бы исходная позиция.
[05:01.000 --> 05:06.000]  Нужно найти Y, которая подходит, которая является решением.
[05:06.000 --> 05:16.000]  Ну, точнее, в НП-задаче вопрос есть ли решение в принципе, но, может быть, это похожие вещи.
[05:16.000 --> 05:19.000]  То есть мы немножко поговорим в конце про задача поиска.
[05:19.000 --> 05:25.000]  Один вопрос – это есть решение или нет, а другой вопрос – это прям-таки его найти.
[05:25.000 --> 05:31.000]  Вот, хорошо.
[05:31.000 --> 05:36.000]  Значит, первая группа связана с теорией графов.
[05:36.000 --> 05:43.000]  Значит, рассмотрим вот такие вот связанные друг с другом задачи.
[05:43.000 --> 05:53.000]  Значит, клика, независимое множество и вершинное покрытие.
[05:53.000 --> 06:20.000]  Значит, клика, напомню, что это множество пар из графа и числа таких, что в графе G есть полный подграф из K-вершин.
[06:20.000 --> 06:25.000]  То есть есть K-вершин, которые все друг с другом соединены.
[06:25.000 --> 06:29.000]  Значит, такой полный подграф и называется кликой.
[06:29.000 --> 06:38.000]  Соответственно, независимое множество тут, например, то же самое, только наоборот.
[06:38.000 --> 07:00.000]  Значит, в графе G есть независимое множество из K-вершин.
[07:00.000 --> 07:05.000]  Соответственно, должно быть K-вершин, которые все друг с другом по парно не соединены.
[07:05.000 --> 07:12.000]  Ну и самое интересное, это вершинное покрытие.
[07:12.000 --> 07:19.000]  Ну, самое интересное в смысле, что немножко сложнее формировка.
[07:19.000 --> 07:23.000]  Здесь тоже пары из G и K.
[07:23.000 --> 07:32.000]  Значит, здесь в графе G есть K-вершин.
[07:32.000 --> 07:47.000]  Значит, такие, что любое ребро, ну это называется инцидентно,
[07:47.000 --> 07:53.000]  то есть, можно сказать, содержит или касается хотя бы одной из вершин.
[07:53.000 --> 07:59.000]  Ну или можно еще сказать так, что в любом ребре из двух концов хотя бы один лежит в этом множестве.
[07:59.000 --> 08:13.000]  Значит, любое ребро на тем, что касается хотя бы одной из этих вершин.
[08:13.000 --> 08:23.000]  Хотя бы одной из этих вершин.
[08:23.000 --> 08:36.000]  Ну, можно себе представить такую задачу, которая к этой формализации приводит,
[08:36.000 --> 08:42.000]  что пусть у нас есть сети аэропортов, какая-то авиакомпания как-то между ними летает,
[08:42.000 --> 08:48.000]  какие-то маршруты у этой авиакомпании есть, и авиакомпания хочет,
[08:48.000 --> 08:55.000]  чтобы как можно в меньшем числе аэропортов создать представительство,
[08:55.000 --> 09:00.000]  но так, чтобы на любом маршруте хотя бы в одном городе представительство было.
[09:00.000 --> 09:03.000]  Но вот это вот и есть задача вершинопокрытия.
[09:03.000 --> 09:08.000]  То есть, здесь вершины это аэропорты, ребра это маршруты.
[09:08.000 --> 09:15.000]  Соответственно, нужно, чтобы на каждом ребре хотя бы на одном его конце был представитель.
[09:15.000 --> 09:21.000]  Вот.
[09:21.000 --> 09:27.000]  И вот эти три задачи на самом деле друг на друга очень похожи.
[09:27.000 --> 09:31.000]  То есть, проще всего показать, что они сводятся друг к другу.
[09:31.000 --> 09:38.000]  А потом, соответственно, что к одной из них сводятся, ну, вот, например, три KNF.
[09:38.000 --> 09:41.000]  Ну, давайте обсудим.
[09:41.000 --> 09:57.000]  Значит, проще всего сказать, почему клика равна сильно независимому множеству.
[09:57.000 --> 10:00.000]  Ну, просто можно взять дополнение к графу.
[10:00.000 --> 10:05.000]  То есть, все ребра, которые были, удалить, а всех, которые не было, наоборот добавить.
[10:05.000 --> 10:11.000]  Ну, и тогда, соответственно, если был полный под граф, то он станет пустым под графом.
[10:11.000 --> 10:13.000]  То есть, как раз независимым множеством.
[10:13.000 --> 10:16.000]  Но и наоборот. То есть, это сводится с обеих сторон.
[10:16.000 --> 10:23.000]  Значит, если было независимым множеством, то в дополнении будет полный под граф на тех же самых вершинах.
[10:23.000 --> 10:38.000]  Ну, то есть, формально можно сказать так, что gk превращается в дополнение g и то же самое число k.
[10:38.000 --> 10:47.000]  Значит, такая вот сводимость работает и в ту, и в другую сторону.
[10:47.000 --> 10:53.000]  Да, и клику к независимому множеству сводит, и наоборот.
[10:53.000 --> 11:07.000]  Ну, я думаю, это понятно. Дальше чуть-чуть сложнее, но все равно довольно просто.
[11:07.000 --> 11:22.000]  Значит, независимое множество равносильно вершинному покрытию.
[11:22.000 --> 11:32.000]  А здесь идея такая же. На самом деле, дополнение e к независимому множеству в том же самом графе будет вершинным покрытием.
[11:32.000 --> 11:37.000]  И наоборот, дополнение e к вершинному покрытию будет независимым множеством.
[11:37.000 --> 11:44.000]  Так, это почему? Ну, потому что, смотрите, вот пусть у нас есть независимое множество, есть все остальное.
[11:44.000 --> 11:47.000]  Но смотрите, внутри независимого множества ребер нет.
[11:47.000 --> 11:55.000]  Значит, любое ребро, оно либо целиком снаружи, либо соединяет независимое множество с дополнением, со всем остальным.
[11:55.000 --> 11:59.000]  В любом случае, каждое ребро имеет хотя бы одну вершину снаружи.
[11:59.000 --> 12:10.000]  Ну и наоборот, если у нас есть вершинное покрытие, мы каким-то множеством все ребра покрыли, то если придем к дополнению, то там ни одного ребра уже быть не может.
[12:10.000 --> 12:13.000]  Иначе там будет непокрытое ребро.
[12:13.000 --> 12:18.000]  Поэтому здесь получается свадимость такая.
[12:18.000 --> 12:26.000]  Значит, g и k превращается в g и n-k.
[12:26.000 --> 12:38.000]  Почему нам тут даже не нужно уточнять?
[12:38.000 --> 12:45.000]  Потому что здесь я говорю, что просто имеет размера дополнения, где начало вершин.
[12:45.000 --> 12:57.000]  Ну, потому что если есть независимое множество, еще антиклик это называется, независимое множество,
[12:57.000 --> 13:04.000]  значит, если есть антиклик размера k, то тогда ее дополнение это вершины покрытия размера n-k.
[13:04.000 --> 13:07.000]  То есть если есть такое, то есть такое.
[13:07.000 --> 13:16.000]  Ну и наоборот, если нет клики размера k, нет антиклики, значит, если нет антиклики размера k, то нет и вершинного покрытия размера n-k.
[13:16.000 --> 13:22.000]  Потому что если бы было вершины покрытия такого размера, то его дополнение было бы независимо множеством размера k.
[13:22.000 --> 13:28.000]  Поэтому это действительно свадимость.
[13:28.000 --> 13:32.000]  И, конечно, это очень простые операции, они все полиномиальные.
[13:32.000 --> 13:37.000]  Поэтому все эти три множества равносильны друг к другу.
[13:37.000 --> 13:59.000]  Ну и, соответственно, нужно, можно сказать теорему, что, соответственно, все эти множества, значит, все эти множества или языки или задачи по-разному говорят,
[13:59.000 --> 14:05.000]  все эти задачи n-k полные.
[14:05.000 --> 14:14.000]  Ну, поскольку они уже все свойства друг к другу, достаточно какой-нибудь одной из них свести что-то, что у нас уже есть, например, трясат.
[14:14.000 --> 14:18.000]  Так, ну давайте...
[14:18.000 --> 14:23.000]  Так, а у кого-нибудь на семинаре к чему-нибудь из этого сводилось?
[14:23.000 --> 14:26.000]  Клики сводилось, да?
[14:26.000 --> 14:35.000]  Ну давайте для разнообразия к вершинному покрытию я сведу.
[14:35.000 --> 14:47.000]  Значит, сведу выполнимость рек НФ, значит, к вершинному покрытию.
[14:47.000 --> 14:53.000]  Значит, вообще есть некоторая общая диалогия, значит, как вообще такие свадимости должны быть устроены.
[14:53.000 --> 14:58.000]  Смотрите, у нас изначально есть формула вида 3kNF.
[14:58.000 --> 15:06.000]  Значит, в этой формуле есть какие-то переменные и какие-то скобки с переменными.
[15:06.000 --> 15:14.000]  Соответственно, им всем должны соответствовать какие-то структуры в том, что мы строим в данном случае в графе.
[15:14.000 --> 15:21.000]  Соответственно, должны быть какие-то структуры, которые соответствуют вершинам, которые соответствуют переменам,
[15:21.000 --> 15:27.000]  и какие-то структуры, которые соответствуют скобочкам.
[15:27.000 --> 15:33.000]  Такие структуры принято назвать гаджетами.
[15:33.000 --> 15:42.000]  Ну и, значит, как правило, это не универсальное правило, но там в 90% случаев строятся какие-то гаджеты для переменных,
[15:42.000 --> 15:48.000]  гаджеты для скобок, ну и каким-то образом они друг с другом связываются, чтобы это отражало устройство формулы.
[15:48.000 --> 15:57.000]  Ну и дальше доказывать, что если форма выполнима, то тогда вот в этой структуре, которую мы построили, будет решение.
[15:57.000 --> 16:00.000]  А если не выполним, то не будет.
[16:00.000 --> 16:04.000]  Соответственно, в данном случае нам нужно, на самом деле, построить две вещи.
[16:04.000 --> 16:10.000]  Нам нужно построить граф и нужно определить число, размер вершинного покрытия.
[16:10.000 --> 16:13.000]  Давайте я сейчас это и покажу.
[16:13.000 --> 16:25.000]  Так, значит, смотрите, пусть у нас ФИ, это 3kNF, значит, 3kNF с m-переменными и m-скобками.
[16:31.000 --> 16:33.000]  Значит, тогда мы делаем следующее.
[16:33.000 --> 16:37.000]  Каждой переменной сопоставляем ребро.
[16:37.000 --> 16:45.000]  Вот, а каждой скобке треугольник, ну треугольник совершенно отдельный.
[16:45.000 --> 16:47.000]  От всех переменных.
[16:47.000 --> 16:51.000]  Давайте я покажу на каком-нибудь примере.
[16:51.000 --> 17:10.000]  Вот, а каждый скобке треугольник, ну треугольник совершенно отдельный от всех переменных.
[17:11.000 --> 17:15.000]  Вот, давайте я покажу на каком-нибудь примере.
[17:15.000 --> 17:21.000]  Например, P или не Q или R.
[17:21.000 --> 17:28.000]  И не P или Q или S.
[17:28.000 --> 17:35.000]  И, например, не Q или не R или не S.
[17:35.000 --> 17:38.000]  Например, вот так вот.
[17:38.000 --> 17:49.000]  Вот, значит, тогда вот этому вершины ребра, которые мы сопоставляли переменным, пометим как раз с переменной и ее отрицанием.
[17:49.000 --> 17:57.000]  То есть у нас тут получается P соединено с не P.
[17:57.000 --> 18:03.000]  Дальше Q соединено с не Q.
[18:03.000 --> 18:08.000]  Значит, R соединено с не R.
[18:08.000 --> 18:14.000]  И S соединено с не S.
[18:14.000 --> 18:19.000]  Вот, а треугольники пометим прям так, как какие тут стоят литералы.
[18:19.000 --> 18:26.000]  То есть каждой скобке сопоставляем треугольник, у которого вершина прям вот этим вот и помечена.
[18:26.000 --> 18:36.000]  Да, то есть тут получается P, не Q и R.
[18:36.000 --> 18:40.000]  Значит, треугольник вот так вот.
[18:40.000 --> 18:45.000]  Так, дальше.
[18:45.000 --> 18:54.000]  Тут не P, Q и S.
[18:54.000 --> 19:09.000]  Так, значит, и, соответственно, не Q, не R, не S.
[19:09.000 --> 19:14.000]  Так, ну и как они соединяются?
[19:14.000 --> 19:21.000]  А просто одноименная, значит, одноименная вершина из левой части и справой мы соединим друг с другом.
[19:21.000 --> 19:26.000]  Да, то есть получается, что P вот так вот соединено.
[19:26.000 --> 19:30.000]  Значит, здесь не Q вот сюда вот.
[19:30.000 --> 19:32.000]  Значит, R вот сюда вот.
[19:32.000 --> 19:36.000]  Соответственно, не P вот сюда вот.
[19:36.000 --> 19:42.000]  Так, ну в общем, тут сейчас немножко будет запутано.
[19:42.000 --> 19:45.000]  Наверное, здесь принцип понятен.
[19:45.000 --> 19:55.000]  Так, и осталось вот так вот, вот так вот, и вот так вот.
[19:55.000 --> 20:02.000]  В общем, просто одноименная, значит, одноименная вершина мы соединяем друг с другом.
[20:02.000 --> 20:07.000]  Ну и осталось сказать, чему равняется K.
[20:07.000 --> 20:12.000]  Значит, K у нас будет равно N плюс 2M.
[20:12.000 --> 20:18.000]  Где N как раз? N число переменных, M число скобок.
[20:18.000 --> 20:24.000]  Так, почему N плюс 2M?
[20:24.000 --> 20:32.000]  Ну вообще идея, вот какая, смотрите, вот эти вот ребра, значит, изначально добавленные для переменных,
[20:32.000 --> 20:36.000]  они друг с другом не пересекаются, то есть, а их нужно покрыть.
[20:36.000 --> 20:43.000]  Соответственно, нужно хотя бы один конец, хотя бы один конец из них взять.
[20:43.000 --> 20:50.000]  А чтобы покрыть отдельный треугольник, нужно хотя бы две вершины из него взять.
[20:50.000 --> 20:54.000]  Но как раз, поскольку N плюс 2M, N это число Робер вот здесь,
[20:54.000 --> 20:57.000]  а 2M это угольное число треугольников вот здесь.
[20:57.000 --> 21:01.000]  То есть, получается, что как раз, вообще, если такое покрытие есть,
[21:01.000 --> 21:07.000]  то нам должно иметь вид, что из каждого ребра вот этого взята ровно одна вершина,
[21:07.000 --> 21:10.000]  значит, либо левая, либо правая.
[21:10.000 --> 21:14.000]  Из каждого треугольника взят ровно две вершины.
[21:14.000 --> 21:20.000]  А еще есть вот эти вот серебра, которые соединяют, соответственно, одну часть и другую.
[21:20.000 --> 21:25.000]  Ну и, соответственно, дальше нужно доказать, что вот их можно покрыть
[21:25.000 --> 21:30.000]  только когда это будет выполняющий набор.
[21:30.000 --> 21:34.000]  Так, хорошо.
[21:34.000 --> 21:40.000]  Так, ну давайте обсудим, почему это будет верно.
[21:40.000 --> 21:45.000]  Ну давайте выберем какой-нибудь выполняющий набор вот здесь вот.
[21:45.000 --> 21:48.000]  Ну, например, значит, это вообще нужно в две стороны доказывать,
[21:48.000 --> 21:51.000]  что если есть выполняющий набор, то есть покрытие вот здесь вот.
[21:51.000 --> 21:55.000]  И наоборот, если есть покрытие вот здесь, то есть выполняющий набор.
[21:55.000 --> 22:00.000]  Так, ну смотрите, пусть, например, там вот такой выполняющий набор возьмем.
[22:00.000 --> 22:05.000]  p равно единица, q равно единица, ну а r равно нулю.
[22:05.000 --> 22:10.000]  Ну а s даже не важно, ничему равно, ну пусть тоже единица.
[22:10.000 --> 22:15.000]  Значит, p равно единица, q равно единица, s равно единица, а r равно нулю.
[22:15.000 --> 22:24.000]  Соответственно, мы берем, да, значит, вот что равно единице, то мы и берем.
[22:24.000 --> 22:32.000]  Значит, тут вершину p, тут вершину q, тут вершину ea r и тут вершину s.
[22:35.000 --> 22:43.000]  Так, а дальше смотрите, вот в этих вот уже треугольниках,
[22:43.000 --> 22:50.000]  идея такая, что вот наоборот, то, что мы покрыли в левой части,
[22:50.000 --> 22:54.000]  в правой части, мы, по возможности, не покрываем, ну хотя бы одну из них.
[22:54.000 --> 23:00.000]  То есть, например, ну вот здесь прямо вот p не покрываем,
[23:00.000 --> 23:04.000]  а тут, соответственно, не q покрываем, а r покрываем.
[23:04.000 --> 23:09.000]  Да, вот здесь у нас и q, и s соединено.
[23:09.000 --> 23:15.000]  Ну, например, q не покрываем, покрываем вот это вот и вот это вот.
[23:15.000 --> 23:20.000]  И здесь у нас, да, здесь у нас не r.
[23:20.000 --> 23:24.000]  Соответственно, покрываем вот это вот и вот это вот.
[23:27.000 --> 23:32.000]  Ну вот в треугольниках, ну можно вот сюда смотреть, например,
[23:32.000 --> 23:36.000]  первую подчеркнутую не покрываем, а остальные покрываем.
[23:39.000 --> 23:42.000]  Вот, значит, почему это работает?
[23:42.000 --> 23:46.000]  Так, ну смотрите, во-первых, поскольку у нас вот из этих двух
[23:46.000 --> 23:50.000]  выбрано по одной, а здесь в каждом треугольнике выбрано две,
[23:50.000 --> 23:55.000]  то покрыты все ребра вот эти вот и внутри треугольников.
[23:57.000 --> 24:03.000]  А также почему покрыты все ребра между треугольниками и вот этими ребрами.
[24:04.000 --> 24:08.000]  Ну, смотрите, вот у нас, например, вот здесь вот есть у нас три вершины,
[24:08.000 --> 24:10.000]  из каждой из них идет ребро.
[24:10.000 --> 24:15.000]  Соответственно, там где мы покрыли, вот здесь мы покрыли и вот эти вот ребра тоже.
[24:16.000 --> 24:20.000]  А вот это вот у нас здесь не покрыто, но у нас оно соединяется с покрытым,
[24:20.000 --> 24:24.000]  мы специально так делали, чтобы не покрыто с slightly покрытым,
[24:24.000 --> 24:28.000]  поэтому вот это вот ребро покрыто за счет левой части.
[24:28.000 --> 24:33.000]  Ну и так же у остальных, то есть вот это ребро покрыто за счет левой части,
[24:33.000 --> 24:37.000]  вот эти два за счет правой, а есть даже за счет обеих.
[24:37.000 --> 24:41.580]  Да, и здесь тоже вот это покрыто за счет левой части, а вот это и вот это за счет правой
[24:41.580 --> 24:47.860]  части. Ну вот, поэтому, если это действительно выполняющий набор, то можно
[24:47.860 --> 24:59.260]  устроить вот такое вот покрытие. Так, ну ничего, понятно. Значит, еще раз, это пока в одну сторону,
[24:59.260 --> 25:05.500]  что если есть выполняющий набор, тогда есть покрытие. Значит, у нас нужно покрыть n
[25:05.500 --> 25:10.560]  плюс 2m вершин. n вершин получается за счет левой части, где мы в каждом из n рёбер
[25:10.560 --> 25:15.760]  покрываем либо левые, либо правые, в зависимости от того, чему равна перемена
[25:15.760 --> 25:20.560]  в выполняющем наборе. То есть, если перемена равна 1, то мы покрываем левую вершину,
[25:20.560 --> 25:26.560]  если она равна 0, то мы покрываем правую вершину. Вот, а 2m, это получается по две вершины на
[25:26.560 --> 25:34.420]  каждый треугольник. И дальше, смотрите, поскольку есть, поскольку набор выполняющий, то здесь в каждой
[25:34.420 --> 25:39.760]  скобке есть истинный литерал. А вершина, которая соответствует этому истинному литералу,
[25:39.760 --> 25:48.120]  соединена с покрытой вершиной из левой части. Поэтому вот это вот ребро уже покрыто. И покрывая,
[25:48.120 --> 25:53.640]  да, значит, беря в покрытие две другие вершины, мы, во-первых, покрываем все ребра треугольника,
[25:53.640 --> 25:57.680]  во-вторых, покрываем те ребра, которые идут, соответственно, из этих оставшихся вершин
[25:57.680 --> 26:04.900]  в левой части. И так с каждым треугольником. То есть в каждом треугольнике одно ребро покрыто
[26:04.900 --> 26:10.260]  за счет левой части, а два других за счет того, что мы выбираем оставшиеся вершины в этом треугольнике.
[26:10.260 --> 26:17.420]  Вот, вот такое вот рассуждение. Это в одну сторону, еще нужно в другую, что если есть покрытие,
[26:17.420 --> 26:26.920]  то есть и выполняющий набор. Значит, это рассуждение так делается. Смотрите, во-первых,
[26:26.920 --> 26:35.160]  у нас должно быть в каждом из этих ребра хотя бы одна вершина покрыта, и соответственно, то есть
[26:35.160 --> 26:40.920]  больше либо равно один вот в этих n штуках, и в каждом треугольнике больше либо равно двух тоже в m
[26:40.920 --> 26:48.860]  штуках. То есть вообще любое покрытие обязан иметь размер больше либо равно, чем вот столько. Но если
[26:48.860 --> 26:55.720]  равно, а мы суммировали неравенство, значит во всех неравенствах равенство. То есть в каждом из этих
[26:55.720 --> 27:03.220]  покрыта ровно одна вершина, в каждом треугольнике покрыта ровно две вершины. Ну а тогда получается,
[27:03.220 --> 27:10.860]  что раз здесь ровно одна покрыта, то этому соответственно какой-то набор. Ну, пока еще не
[27:10.860 --> 27:15.460]  выполняющий, а просто какой-то, да, что если левая вершина взята, тогда перимена равна единице,
[27:15.460 --> 27:23.680]  если правая, то она равна нулю. Но дальше нужно доказать, что он выполняющий. Почему? Ну, потому что,
[27:23.680 --> 27:29.980]  в каждом треугольнике покрыто две, значит, третья не покрыта. Значит, соответственно,
[27:29.980 --> 27:35.540]  ребро, который из нее выходит, покрыто в левой части. Но раз покрыто, значит,
[27:35.540 --> 27:40.540]  этот литерал истинный, а значит, соответственно, вот эта вот скобка получается тоже истинной.
[27:40.540 --> 27:47.940]  Итак, мы получаем, что действительно в каждом треугольнике, в каждом треугольнике непокрытая
[27:47.940 --> 27:52.820]  вершина соответствует истинному литералу в скобке. Значит, все скобки истинны, значит,
[27:52.820 --> 28:03.780]  это действительно выполняющий набор. Вот, значит, ну, опять же, тут самое главное,
[28:03.780 --> 28:08.380]  это не технические детали, а сам принцип, что нужно обязательно в две стороны доказывать,
[28:08.380 --> 28:15.980]  что если был набор выполняющий, то в графе есть покрытие, и наоборот, если в графе есть покрытие,
[28:15.980 --> 28:37.940]  то можно построить выполняющий набор. Так, хорошо, киньте вопросы. Так, ну ладно,
[28:37.940 --> 28:47.380]  давайте двинемся дальше. Так, а три раскраска была на семинарах у кого-нибудь? Нет, ни у кого не было.
[28:47.380 --> 29:09.540]  Три раскраски была, а Гамильтонов путь? А Гамильтонов и Цикл, да, и неориентированные тоже.
[29:09.540 --> 29:25.660]  Так, сейчас, а все-таки три раскраска много где было? Много у кого? Видимо, не очень много, да. Хорошо,
[29:25.660 --> 29:31.100]  тогда давайте Гамильтонов и Цикл оставим в любом случае для семинаров. Так, а три раскраску давайте я
[29:31.100 --> 29:54.580]  расскажу, да, потому что это то, с чего мы начинали. Так. Значит, три раскраска. Значит, да, электрикол, но,
[29:54.780 --> 30:07.700]  графов G, что, соответственно, вершины G можно правильно раскрасить три цвета.
[30:07.700 --> 30:27.740]  Три цвета. Значит, тут у этих цветов будет некоторый смысл. Да, значит, именно эти цвета будут истинным,
[30:27.740 --> 30:45.260]  ложным и вспомогательным. Ну, и так, давайте я прям сразу начну показывать, как это выглядит, граф. Во-первых,
[30:45.260 --> 31:15.260]  у него есть первая часть, которая называется палитра. Значит, палитра и, ну, вообще ясно, что если у нас есть какая-то раскраска в три цвета, то их, на самом деле, минимум шесть, потому что можно поменять местами цвета, да, перекрасить, и любая перестановка цветов задаст другую раскраску, которая тоже будет правильной. Вот. А с другой стороны, если у нас есть треугольник, то он обязан быть покрашен
[31:15.260 --> 31:33.140]  в три разных цвета. Вот. Поэтому мы просто зафиксируем, да, значит, зафиксируем три вершины и скажем, что вот эта вот вершина истинная, эта ложная, эта вспомогательная. Да, просто будем называть, значит, будем назвать тот цвет, который покрашен вот этой вершиной истинным,
[31:33.140 --> 31:37.300]  в которой вот это ложным, а в которой вот это всплогательным.
[31:37.300 --> 31:41.140]  После этого уже так нельзя спокойно все менять, уже
[31:41.140 --> 31:42.140]  что-то зафиксировано.
[31:42.140 --> 31:53.060]  Дальше для каждой переменной я снова буду заводить как
[31:53.060 --> 31:59.380]  бы вот такое вот ребро, да, ну и можно сказать, что
[31:59.380 --> 32:02.140]  там есть П и не П.
[32:02.140 --> 32:07.380]  Вот, и смотрите, это получается еще один треугольник,
[32:07.380 --> 32:09.420]  у которого вот одна вершина точно всплогательная.
[32:09.420 --> 32:12.900]  Соответственно, тут остается два варианта, либо истинная
[32:12.900 --> 32:13.900]  ложь, либо ложь истина.
[32:13.900 --> 32:17.100]  Ну и, соответственно, истинная ложь будет как бы соответственно
[32:17.100 --> 32:23.220]  тому, что П истина, а ложь истина тому, что П ложная.
[32:24.060 --> 32:36.340]  Так, значит, соответственно, здесь будет Q и не Q, здесь
[32:36.340 --> 32:47.060]  будет R и не R, ну и тут, соответственно, S и не S.
[32:47.060 --> 32:50.260]  Вот, вот как бы такой веер.
[32:50.300 --> 32:54.300]  Значит, палитра, палитра, потом веер.
[32:54.300 --> 32:58.140]  Так, а вот дальше нужны специальные гаджеты.
[32:58.140 --> 33:01.140]  Так, давайте, наверное, сейчас перерыв сделаем, да, там
[33:01.140 --> 33:03.180]  звонок, извините, звонок, а потом я расскажу, что
[33:03.180 --> 33:07.660]  дальше делать, что дальше, дальше нужно как-то скобки
[33:07.660 --> 33:08.660]  моделировать.
[33:08.660 --> 33:18.940]  Значит, смотрите, нам нужно придумать какой-то гаджет,
[33:19.620 --> 33:23.620]  который будет соответствовать дизюнкту.
[33:23.620 --> 33:29.620]  Да, значит, смотрите, прям напрямую, прям вычисляя дизюнкцию
[33:29.620 --> 33:34.620]  не получится, но можно сделать как-то такой гаджет, который
[33:34.620 --> 33:39.620]  раскрашивается, если, соответственно, дизюнкция верна.
[33:39.620 --> 33:43.620]  Так, давайте я вот здесь оставлю место, да, значит,
[33:43.620 --> 33:46.620]  я здесь отдельно нарисую гаджет сначала для двух.
[33:47.300 --> 33:50.300]  Значит, для двух он выглядит вот так вот.
[33:58.300 --> 34:03.300]  Так, давайте я его в двух экземплярах нарисую, чтобы
[34:03.300 --> 34:06.300]  показать два варианта раскраски.
[34:10.300 --> 34:15.300]  Ну, значит, смотрите, если тут ложный цвет и тут ложный
[34:15.980 --> 34:17.780]  то, вот раз смотрите, что получается.
[34:17.780 --> 34:20.780]  Ну, вот этот, непонятно, какой, либо истинный, либо
[34:20.780 --> 34:24.780]  вспомогательный, но если вот этот истинный то этот
[34:24.780 --> 34:26.780]  обязательно вспомогательный и наоборот.
[34:26.780 --> 34:31.780]  Ну а тогда этот, опять же, соединен и с истинным
[34:31.780 --> 34:34.780]  и вспомогательным то есть стser обязательно ложный.
[34:34.780 --> 34:40.340]  Да, получается, что если тут две ложные вершины то
[34:40.340 --> 34:43.340]  вот это тоже получается ложное и, в этом смысле,
[34:43.340 --> 34:44.340]  это дизюнкция.
[34:44.340 --> 34:50.540]  соответственно если тут две истинные, то все симметрично, значит если тут две истинные, тут тоже будет истина.
[34:50.540 --> 34:59.940]  А вот если будет истинная ложь, тогда тут вообще-то есть несколько вариантов раскраски, но нам важно, что вот есть такой, чтобы здесь была истина.
[34:59.940 --> 35:01.940]  то есть здесь вмогательность, здесь ложь.
[35:01.940 --> 35:03.940]  Ой, не, наоборот.
[35:03.940 --> 35:05.940]  Тут уже никак угодно.
[35:05.940 --> 35:07.940]  Наоборот, здесь вмогательность, здесь ложь.
[35:11.940 --> 35:13.940]  Вот.
[35:13.940 --> 35:15.940]  Соответственно, можно так раскрасить,
[35:15.940 --> 35:17.940]  можно так раскрасить, чтобы здесь была истина.
[35:19.940 --> 35:21.940]  Вот.
[35:23.940 --> 35:25.940]  Ну и вот в этом смысле этого члена дизюнкция,
[35:25.940 --> 35:27.940]  то есть вот в правой вершине
[35:27.940 --> 35:29.940]  может быть истина,
[35:29.940 --> 35:31.940]  тогда и только тогда,
[35:31.940 --> 35:33.940]  когда среди исходных
[35:33.940 --> 35:35.940]  есть хотя бы одна истина.
[35:35.940 --> 35:37.940]  Вот.
[35:37.940 --> 35:39.940]  Но дальше можно соединить два таких гаджета
[35:39.940 --> 35:41.940]  и получить то же самое для трёх.
[35:41.940 --> 35:43.940]  Для трёх
[35:43.940 --> 35:45.940]  получается вот такая вот
[35:45.940 --> 35:47.940]  красивая штука.
[35:57.940 --> 35:59.940]  Вот.
[36:03.940 --> 36:05.940]  Ну тут видно, что
[36:05.940 --> 36:07.940]  в общем,
[36:07.940 --> 36:09.940]  это так красивно рисовано в виде квадратика.
[36:09.940 --> 36:11.940]  А так-то видно, что тут две
[36:11.940 --> 36:13.940]  таких же штуки, значит одна вот такая вот,
[36:13.940 --> 36:15.940]  а дальше выход вот этого
[36:15.940 --> 36:17.940]  будет входом к другой такой же штуке.
[36:17.940 --> 36:19.940]  Ну и раз это как дизюнкция,
[36:19.940 --> 36:21.940]  то дизюнкция одного
[36:21.940 --> 36:23.940]  и дизюнкция двух
[36:23.940 --> 36:25.940]  это дизюнкция два.
[36:25.940 --> 36:27.940]  Одного и дизюнкция двух,
[36:27.940 --> 36:29.940]  это дизюнкция трёх получается.
[36:29.940 --> 36:31.940]  Вот.
[36:31.940 --> 36:33.940]  Ну и дальше, значит такие гаджеты,
[36:33.940 --> 36:35.940]  значит такие гаджеты подсоединяются
[36:35.940 --> 36:37.940]  к соответствующим
[36:37.940 --> 36:39.940]  вершинам вот весь.
[36:39.940 --> 36:41.940]  Да, я это в самом начале не сказал,
[36:41.940 --> 36:43.940]  например, меня спрашивали, да,
[36:43.940 --> 36:45.940]  мы тут строим свадимость
[36:45.940 --> 36:47.940]  из выполнимости 3KNF
[36:47.940 --> 36:49.940]  к три раскрашиваемости.
[36:49.940 --> 36:51.940]  То есть у нас тоже изначально
[36:51.940 --> 36:53.940]  есть переменные,
[36:53.940 --> 36:55.940]  есть скобки, значит
[36:55.940 --> 36:57.940]  для всех переменных мы нарисовали
[36:57.940 --> 36:59.940]  вот такую штуку.
[36:59.940 --> 37:01.940]  Так, ну и для одной скобки
[37:01.940 --> 37:03.940]  я нарисую, значит P,
[37:03.940 --> 37:05.940]  P не Q и R.
[37:05.940 --> 37:07.940]  Да, то есть вот есть P,
[37:07.940 --> 37:09.940]  есть не Q.
[37:11.940 --> 37:13.940]  Да, значит я соединяю
[37:13.940 --> 37:15.940]  вот так вот.
[37:17.940 --> 37:19.940]  И ещё R.
[37:19.940 --> 37:21.940]  Да, значит соответственно
[37:23.940 --> 37:25.940]  получается
[37:25.940 --> 37:27.940]  вот так вот.
[37:29.940 --> 37:31.940]  Да, и вот так вот.
[37:33.940 --> 37:35.940]  Так, ну тут я не такой красивый
[37:35.940 --> 37:37.940]  нарисовал,
[37:37.940 --> 37:39.940]  не такой красивый гаджет,
[37:39.940 --> 37:41.940]  но, в общем, важна нам
[37:41.940 --> 37:43.940]  вот эта вот, значит
[37:43.940 --> 37:45.940]  эта вот вершина нам важна
[37:45.940 --> 37:47.940]  и нам нужно, чтобы она была
[37:47.940 --> 37:49.940]  истинна.
[37:49.940 --> 37:51.940]  А как этого добиться?
[37:51.940 --> 37:53.940]  Ну во-первых, можно считать, что это
[37:53.940 --> 37:55.940]  просто, вот для всех гаджетов
[37:55.940 --> 37:57.940]  это одна и та же вершина
[37:57.940 --> 37:59.940]  и она же вот эта вершина.
[38:01.940 --> 38:03.940]  А мы её просто так
[38:03.940 --> 38:05.940]  нарисовали,
[38:05.940 --> 38:07.940]  так чтобы удобно было
[38:07.940 --> 38:09.940]  смотреть. А так для всех гаджетов
[38:09.940 --> 38:11.940]  одна и та же вершина вот эта вот.
[38:11.940 --> 38:13.940]  Но если вам это не нравится, можно просто считать,
[38:13.940 --> 38:15.940]  что она там соединена
[38:15.940 --> 38:17.940]  вот сюда вот
[38:17.940 --> 38:19.940]  и вот сюда вот.
[38:19.940 --> 38:23.940]  И тогда тоже она обязана быть истинной.
[38:27.940 --> 38:33.940]  Вот. Ну вот утверждает, что такая схема работает.
[38:33.940 --> 38:36.940]  Так, значит, почему она работает?
[38:36.940 --> 38:40.940]  Ну, во-первых, пусть форма выполнима.
[38:40.940 --> 38:43.940]  Тогда есть выполняющий набор, ну, например, такой же, как там,
[38:43.940 --> 38:48.940]  p равно едице, q равно едице, s равно едице, r равно нулю.
[38:48.940 --> 38:53.940]  Ну, тогда, соответственно, p равно едице, значит, что тут истинна ложь.
[38:53.940 --> 38:58.940]  Значит, q равно едице, значит, тоже истинна ложь.
[38:58.940 --> 39:05.940]  r равно нулю, получается, истинна ложь.
[39:05.940 --> 39:10.940]  И s равно едице, получается, истинна ложь.
[39:10.940 --> 39:14.940]  Да, вот видите, здесь r равно нулю, поэтому она в ложный цвет покрашена.
[39:14.940 --> 39:18.940]  Да, все остальные единицы, поэтому в истинный цвет.
[39:18.940 --> 39:22.940]  Ну и дальше тут вот из этих трех есть одна истина,
[39:22.940 --> 39:28.940]  поэтому можно тогда раскрасить, значит, вершина ложь истина,
[39:28.940 --> 39:34.940]  смогательная ложь истина, и здесь смогательная ложь истина.
[39:34.940 --> 39:36.940]  Значит, вот так мы раскрасим.
[39:36.940 --> 39:39.940]  И так будет со всеми остальными.
[39:39.940 --> 39:43.940]  Да, значит, для всех остальных скобок мы тоже такие раскрасим.
[39:43.940 --> 39:48.940]  Значит, такие гаджеты сделаем, и они все раскрасятся.
[39:48.940 --> 39:53.940]  Вот, значит, это в одну сторону.
[39:53.940 --> 39:56.940]  Это в одну сторону, что если форма выполнима,
[39:56.940 --> 40:00.940]  то тогда, соответственно, граф раскрашиваемый.
[40:00.940 --> 40:06.940]  Вот, в другую сторону, в другую сторону, что если граф раскрашиваемый.
[40:06.940 --> 40:15.940]  Ну, тогда, смотрите, тогда получается, что вот в этом веере
[40:15.940 --> 40:22.940]  каждая пара должна быть раскрашена в истинные и ложные цвета в каком-то из двух порядках.
[40:22.940 --> 40:25.940]  Соответственно, если истина ложь, то значит, перемена равна единице,
[40:25.940 --> 40:29.940]  если ложь истина, то перемена равна нулю.
[40:29.940 --> 40:32.940]  Вот, и дальше, поскольку этот гаджет раскрасился,
[40:32.940 --> 40:38.940]  то получается, что из этих трех вершин хотя бы одна истинная.
[40:38.940 --> 40:42.940]  Ну, а это значит, что в скобке есть истинный литерал.
[40:42.940 --> 40:46.940]  Раз все гаджеты раскрасились, значит, во всех скобках есть истинный литерал,
[40:46.940 --> 40:49.940]  значит, форма выполнима.
[40:49.940 --> 40:57.940]  То есть, то, что получается из раскраски, это будет выполняющий набор.
[40:57.940 --> 40:59.940]  Вот так вот.
[41:04.940 --> 41:07.940]  Политра, чтобы потребовать, чтобы вот это вот было.
[41:07.940 --> 41:14.940]  Ну, как бы вот эти вершины во всех гаджет должны быть одинаково раскрашены.
[41:14.940 --> 41:19.940]  И этого можно добиться либо тем, что это одна и та же вершина из политры,
[41:19.940 --> 41:23.940]  либо то, что они все соединены вот с теми двумя.
[41:28.940 --> 41:31.940]  Раскраска вот этой части...
[41:31.940 --> 41:36.940]  Нет, значит, смотрите, вот раскраска веера соответствовала значениям переменных.
[41:36.940 --> 41:39.940]  А вот это просто, значит, если тут хотя бы одна истина есть,
[41:39.940 --> 41:43.940]  тогда можно раскрасить так, что тут будет истина.
[41:43.940 --> 41:45.940]  Ну, вот так вот.
[41:45.940 --> 41:49.940]  Если там три ложных, то тогда нельзя раскрасить.
[41:49.940 --> 41:52.940]  Так что тут была истина.
[41:53.940 --> 41:59.940]  То есть, то, что вот здесь есть, гарантирует, что из вот этих трех хотя бы одна истина.
[42:01.940 --> 42:03.940]  Вот.
[42:05.940 --> 42:08.940]  Так, вот такое вот рассуждение.
[42:22.940 --> 42:24.940]  Вот.
[42:52.940 --> 42:54.940]  Так.
[43:22.940 --> 43:27.940]  А вот такая задача у вас была.
[43:27.940 --> 43:32.940]  На e-sat это not all equal.
[43:32.940 --> 43:35.940]  Not all equal sat.
[43:35.940 --> 43:37.940]  Это из логики задача.
[43:37.940 --> 43:40.940]  Значит, не из графов дати я расскажу.
[43:42.940 --> 43:46.940]  Значит, тут тоже дана 3kNF, но другое задание.
[43:46.940 --> 43:49.940]  Значит, дана 3kNF.
[43:50.940 --> 43:52.940]  Значит, вопрос.
[43:55.940 --> 43:57.940]  Есть ли такой набор...
[44:00.940 --> 44:02.940]  Есть ли такой набор,
[44:06.940 --> 44:08.940]  что в каждой
[44:08.940 --> 44:10.940]  в каждой скобке
[44:14.940 --> 44:16.940]  есть и ноль,
[44:18.940 --> 44:20.940]  и единица?
[44:23.940 --> 44:27.940]  Да, но not all equal, значит, не все нули, не все единицы.
[44:29.940 --> 44:31.940]  Вот. Ну, то есть,
[44:31.940 --> 44:33.940]  можно еще сказать, что в каждой скобке
[44:33.940 --> 44:35.940]  либо один литерал истин, либо два.
[44:35.940 --> 44:37.940]  Но не все сразу.
[44:39.940 --> 44:41.940]  Вот.
[44:41.940 --> 44:43.940]  Значит, тут смотрите, понятно, что если
[44:43.940 --> 44:47.940]  если вот это верно, то тогда формула выполнима,
[44:47.940 --> 44:49.940]  но неверно обратная.
[44:49.940 --> 44:52.940]  Значит, может быть, выполнимая формула,
[44:52.940 --> 44:54.940]  в которой такой литерал,
[44:54.940 --> 44:56.940]  в которой такой литерал,
[44:56.940 --> 44:58.940]  в которой такой литерал,
[44:58.940 --> 45:00.940]  может быть, выполнимая формула,
[45:00.940 --> 45:02.940]  в которой такой штуки нет.
[45:14.940 --> 45:16.940]  Вот. Ну, например...
[45:22.940 --> 45:24.940]  Нет, например, можно взять просто все,
[45:24.940 --> 45:26.940]  например,
[45:26.940 --> 45:28.940]  скажем,
[45:28.940 --> 45:30.940]  трехэлементное подмножество
[45:30.940 --> 45:32.940]  из пяти переменных,
[45:34.940 --> 45:36.940]  и взять все возможные дизюнкты из них.
[45:36.940 --> 45:38.940]  Вот. И тогда из трех значений,
[45:38.940 --> 45:40.940]  хотя,
[45:40.940 --> 45:42.940]  то есть, из пяти значений будут три одинаковых,
[45:42.940 --> 45:44.940]  то есть, я имею в виду, там будет
[45:44.940 --> 45:46.940]  там P или Q или R,
[45:46.940 --> 45:48.940]  и P или Q или S.
[45:50.940 --> 45:52.940]  Дайте я, пожалуйста, что значит
[45:52.940 --> 45:54.940]  P или Q или R,
[45:56.940 --> 45:58.940]  P или Q или S,
[46:00.940 --> 46:02.940]  P или Q или T,
[46:02.940 --> 46:04.940]  и так далее,
[46:04.940 --> 46:06.940]  и вплоть до последней,
[46:06.940 --> 46:08.940]  последней будет R или S или T.
[46:14.940 --> 46:16.940]  Значит, их там...
[46:22.940 --> 46:24.940]  Десять.
[46:24.940 --> 46:26.940]  Десять, видимо, штук будет.
[46:26.940 --> 46:28.940]  Вот. Ну и дальше, смотрите, тут,
[46:28.940 --> 46:30.940]  что вы не делаете, у вас либо
[46:30.940 --> 46:32.940]  в какой-то скобке будет три единицы,
[46:32.940 --> 46:34.940]  либо в какой-то скобке три нуля.
[46:34.940 --> 46:36.940]  Вот. Поэтому это выполнимое,
[46:36.940 --> 46:38.940]  но не наевыполнимое.
[46:38.940 --> 46:40.940]  Да, то есть, вот эта вот штука
[46:40.940 --> 46:42.940]  принадлежит
[46:42.940 --> 46:44.940]  три сад,
[46:44.940 --> 46:46.940]  но не принадлежит ная сад.
[46:48.940 --> 46:50.940]  Вот. Поэтому это явно другая задача.
[46:52.940 --> 46:54.940]  Вот.
[46:54.940 --> 46:56.940]  Хорошо.
[46:56.940 --> 46:58.940]  Тем не менее, как же к ней
[46:58.940 --> 47:00.940]  сводить?
[47:00.940 --> 47:02.940]  Значит, идея здесь следующая.
[47:04.940 --> 47:06.940]  Значит, смотрите, пусть у нас есть
[47:06.940 --> 47:08.940]  значит, какая-то
[47:08.940 --> 47:10.940]  скобка, там
[47:10.940 --> 47:12.940]  альфаите или бетаите
[47:12.940 --> 47:14.940]  или гаммите.
[47:16.940 --> 47:18.940]  И я ее превращу
[47:18.940 --> 47:20.940]  в такие две скобки.
[47:20.940 --> 47:22.940]  Посмотрите, альфаите
[47:22.940 --> 47:24.940]  или бетаите
[47:24.940 --> 47:26.940]  или
[47:26.940 --> 47:28.940]  хите
[47:28.940 --> 47:30.940]  и
[47:30.940 --> 47:32.940]  нехите
[47:32.940 --> 47:34.940]  или гаммите
[47:34.940 --> 47:36.940]  или
[47:36.940 --> 47:38.940]  зет.
[47:38.940 --> 47:40.940]  Где хите свое
[47:40.940 --> 47:42.940]  для каждой скобки, а зет
[47:42.940 --> 47:44.940]  единая для всех.
[47:46.940 --> 47:48.940]  Значит, хите свое
[47:50.940 --> 47:54.940]  для каждой скобки
[48:02.940 --> 48:04.940]  сейчас назовет ите
[48:06.940 --> 48:08.940]  одно для всех.
[48:10.940 --> 48:12.940]  Да, значит, я опять же
[48:12.940 --> 48:14.940]  я свожу
[48:14.940 --> 48:16.940]  три сад, выполнимость, вот
[48:16.940 --> 48:18.940]  к такой выполнимости.
[48:18.940 --> 48:20.940]  То есть, вот это вот
[48:22.940 --> 48:24.940]  три сад
[48:24.940 --> 48:26.940]  сводится
[48:26.940 --> 48:28.940]  к
[48:28.940 --> 48:30.940]  на е сад
[48:30.940 --> 48:32.940]  таким вот методом.
[48:32.940 --> 48:34.940]  Таким образом каждую скобку
[48:34.940 --> 48:36.940]  мы модифицируем
[48:36.940 --> 48:38.940]  ну и объединяем их все.
[48:42.940 --> 48:44.940]  Вот, тогда идея
[48:44.940 --> 48:46.940]  такая.
[48:46.940 --> 48:48.940]  Значит, опять же нам нужно в две стороны
[48:48.940 --> 48:50.940]  в две стороны свести.
[48:56.940 --> 48:58.940]  Ну и дальше идея такая,
[48:58.940 --> 49:00.940]  что на самом деле
[49:00.940 --> 49:02.940]  можно взять
[49:02.940 --> 49:04.940]  z равное нулю.
[49:16.940 --> 49:18.940]  Значит,
[49:18.940 --> 49:20.940]  мы берем просто вот
[49:20.940 --> 49:22.940]  z равное нулю.
[49:22.940 --> 49:24.940]  И тогда, ну, например,
[49:24.940 --> 49:26.940]  если они все единицы, значит,
[49:26.940 --> 49:28.940]  если они все единицы, то мы берем
[49:28.940 --> 49:30.940]  вот так вот.
[49:30.940 --> 49:32.940]  Да, тут один.
[49:34.940 --> 49:36.940]  Вот.
[49:36.940 --> 49:38.940]  Ну, тут даже не важно, какая гамма.
[49:38.940 --> 49:40.940]  Да, значит, если
[49:40.940 --> 49:42.940]  альфа и бета единицы, то будет вот так вот.
[49:42.940 --> 49:44.940]  Если, например,
[49:44.940 --> 49:46.940]  альфа равна
[49:46.940 --> 49:48.940]  единице, бета равна нулю,
[49:48.940 --> 49:50.940]  тогда можно в рот
[49:50.940 --> 49:52.940]  икс равно взять единицы.
[49:52.940 --> 49:54.940]  Да, тут будет
[49:54.940 --> 49:56.940]  ноль.
[49:56.940 --> 49:58.940]  В смысле, тут
[49:58.940 --> 50:00.940]  будет один.
[50:00.940 --> 50:02.940]  Сейчас, нет, подождите.
[50:04.940 --> 50:06.940]  Если гамма будет не единица,
[50:06.940 --> 50:08.940]  если гамма будет ноль,
[50:08.940 --> 50:10.940]  то тогда будет вот так вот.
[50:10.940 --> 50:12.940]  Если гамма будет ноль, то обязательно либо альфа, либо бета
[50:12.940 --> 50:14.940]  равна единице, и поэтому
[50:14.940 --> 50:16.940]  можно брать х равную нулю.
[50:16.940 --> 50:18.940]  Если альфа и бета равны нулю, а гамма равна единице,
[50:18.940 --> 50:20.940]  тогда берут х равную единице, а тут будет ноль.
[50:20.940 --> 50:22.940]  В общем, тут такой небольшой перебор.
[50:22.940 --> 50:24.940]  Да, там, в принципе, семь вариантов,
[50:24.940 --> 50:26.940]  когда среди альфы, бета и гаммы
[50:26.940 --> 50:28.940]  есть единица.
[50:28.940 --> 50:30.940]  И для каждого из этих вариантов
[50:30.940 --> 50:32.940]  можно придумать такое значение
[50:32.940 --> 50:34.940]  икса,
[50:34.940 --> 50:36.940]  что, соответственно, и в этой скобке будет
[50:36.940 --> 50:38.940]  и ноль, и один, и вот в этой тоже и ноль, и один.
[50:42.940 --> 50:44.940]  Так.
[50:48.940 --> 50:50.940]  Ну, даже там,
[50:50.940 --> 50:52.940]  дайте я аккуратно скажу,
[50:52.940 --> 50:54.940]  что, смотрите, вот z равно нулю,
[50:54.940 --> 50:56.940]  если гамма равно единице,
[50:56.940 --> 50:58.940]  тогда в этой скобке уже
[50:58.940 --> 51:00.940]  все нормально,
[51:00.940 --> 51:02.940]  а в этой скобке
[51:02.940 --> 51:04.940]  не важно, чем равны альфа и бета,
[51:04.940 --> 51:06.940]  и х мы можем выбрать, даже если они одинаково,
[51:06.940 --> 51:08.940]  мы х выбираем другим,
[51:08.940 --> 51:10.940]  и в этой скобке тоже все нормально.
[51:10.940 --> 51:12.940]  Если гамма равно нулю,
[51:12.940 --> 51:14.940]  тогда среди вот этих есть единица,
[51:14.940 --> 51:16.940]  и тогда мы берем икс равно нулю,
[51:16.940 --> 51:18.940]  и тут будет единица и ноль, и тут будет тоже единица и ноль.
[51:24.940 --> 51:26.940]  Ну вот, и так будет с каждой скобкой.
[51:28.940 --> 51:30.940]  Более того, если z равно нулю,
[51:30.940 --> 51:32.940]  то на самом деле верное рассуждение в обратную сторону.
[51:34.940 --> 51:36.940]  Смотрите, если z равно нулю,
[51:36.940 --> 51:38.940]  если гамма равно нулю,
[51:38.940 --> 51:40.940]  ну точнее народ, если это равно единице
[51:40.940 --> 51:42.940]  при этом,
[51:42.940 --> 51:44.940]  то тогда все уже в исходной скобке единица есть,
[51:44.940 --> 51:46.940]  а если гамма равно нулю,
[51:46.940 --> 51:48.940]  тогда вот эта должна
[51:48.940 --> 51:50.940]  быть ровно единицей,
[51:50.940 --> 51:52.940]  вот эта должна быть равно нулю,
[51:52.940 --> 51:54.940]  а среди этих
[51:54.940 --> 51:56.940]  должна быть единица,
[51:56.940 --> 51:58.940]  и тогда вот здесь тоже есть единица.
[52:00.940 --> 52:02.940]  То есть получается, что если
[52:02.940 --> 52:04.940]  z равно нулю,
[52:04.940 --> 52:13.820]  нулю, то тогда форму, исходная форма, получается выполнена. Вот. Дальше вопрос, а что делать,
[52:13.820 --> 52:23.220]  если в том наборе, где у нас есть 0 и 1, z равно 1. Да, может поменять вообще все, наоборот.
[52:23.220 --> 52:34.060]  Да, что смотрите, если есть какой-то наe-набор, то тогда обращенный он тоже, тоже будет наe. Да,
[52:34.060 --> 52:54.940]  то есть тут получается, что если существует наe-набор, то тогда его отрицание тоже наe,
[52:54.940 --> 53:07.740]  и поэтому считать, что z равно 0. Так, коротко напишу, что z равно 0. А если z равно 0, то такой
[53:07.740 --> 53:19.380]  же перебор говорит, что среди альфы, бета и гамма есть единица. Так, ну что, понятно?
[53:24.940 --> 53:26.780]  Так.
[53:54.940 --> 54:23.220]  Так, давайте я расскажу еще про одну важную задачу. Значит, я там как раз... Эта задача как
[54:23.220 --> 54:29.420]  раз исключение, потому что там довольно легко доказать NP-трудность, да, но не очень легко
[54:29.420 --> 54:35.940]  доказать принадлежности NP, и, соответственно, это доказать я пропущу, да, просто там объясню
[54:35.940 --> 54:42.820]  в целом, что нужно доказывать. Вот. Но сама по себе задача очень важная. Это называется CLP.
[54:42.820 --> 55:01.900]  Значит, CLP – это целочисленное линейное программирование. Ну, вообще есть просто задача
[55:01.900 --> 55:07.980]  линейного программирования, не обязательно целочисленного. Это задача оптимизация линейных
[55:07.980 --> 55:15.740]  функций на многогранниках. Значит, это очень важное понятие. В общем, даже Конторович за это
[55:15.740 --> 55:23.020]  изобретение получил номерскую премию по экономике. Вот. И это очень много людей используется в самых
[55:23.020 --> 55:27.860]  разных задачах. Я не знаю, у вас этого не было пока? Какой-нибудь SimplexMethod, там что-нибудь? Да, ну,
[55:27.860 --> 55:42.300]  наверное, будет. А, вам прямо про CLP рассказывали? Ага. Ну, хорошо, да. Вот. Но, соответственно,
[55:42.300 --> 55:48.220]  обычное линейное программирование хорошо, когда у вас есть какие-то ресурсы, такие делимые. Да,
[55:48.220 --> 55:58.900]  то есть у вас есть, я не знаю, нефть, зерно, еще чего-нибудь в таком роде, металл какие-нибудь. Ну,
[55:58.900 --> 56:06.700]  какие бывают задачи, что, например, у вас есть разные ресурсы, разные товары с линейной
[56:06.700 --> 56:12.620]  технологией. То есть, чтобы получить такой-то товар, нужно столько-то нефти, столько-то зерна,
[56:12.740 --> 56:21.900]  столько-то золота и так далее. Ну, что-то похоже на какую-то компьютерную игру с ресурсами. Вот. И вы,
[56:21.900 --> 56:26.380]  соответственно, думаете, в какой пропорции это разделить, чтобы, например, наибольшая прибыль
[56:26.380 --> 56:34.940]  была или какая-нибудь еще целевая функция. Вот. Бывает еще такая задача о диете, что, например,
[56:34.940 --> 56:41.060]  вам нужно сделать сблансированное питание, в котором будет достаточное число различных питательных
[56:41.060 --> 56:47.220]  веществ, витаминов и так далее, но при этом, например, чтобы корзина была бы как можно дешевле или
[56:47.220 --> 56:52.340]  какое-нибудь еще другое задание. Вот. Значит, вот это вот нет-солочистственное, где можно
[56:52.340 --> 56:59.340]  сколько угодно мелко делить все эти ресурсы, обычные линейные программирования. И с ним довольно
[56:59.340 --> 57:06.780]  интересная ситуация, что, с одной стороны, теоретически эта задача полинамиальная. Значит,
[57:06.780 --> 57:14.980]  там есть несколько методов, метод эллипсоидов, метод внутренней точки, которые теоретически
[57:14.980 --> 57:21.260]  работают полинамиальное время, но также есть симплекс-метод, который теоретически работает
[57:21.260 --> 57:26.900]  экспоненциальное время в худшем случае. Но на практике он как раз обгоняет вот эти вот
[57:26.900 --> 57:32.100]  полинамиальные алгоритмы и на практике обычно используется. То есть, в каких-то очень редких
[57:32.100 --> 57:36.300]  специально сконструированных случаях он работает очень долго, но в тех случаях,
[57:36.300 --> 57:41.340]  которые возникают на практике, он работает быстро. Вот. Это довольно интересная ситуация сама по себе.
[57:41.340 --> 57:49.100]  Вот. Ну вот. А вот есть CLP, значит, Солочистственное линейное программирование, где нужно найти
[57:49.100 --> 57:58.460]  солочистственную точку в многограннике, на которой будет максимальное значение линейной функции. Но
[57:58.460 --> 58:05.100]  можно на самом деле формулировать так. Да, потому что вообще как мы переводим задачи оптимизации
[58:05.100 --> 58:12.260]  в задачи NP, например, мы не ищем максимальную клику. Мы спрашиваем, есть ли клик размера больше
[58:12.260 --> 58:19.380]  либо равно, чем k. Да, потому что если есть размеры k, то есть, ну, точнее, если есть размеры больше k,
[58:19.380 --> 58:26.500]  то есть и размеры k. Вот. Поэтому можно спрашивать, есть ли клик размера больше либо равно, чем k. Вот.
[58:26.500 --> 58:30.300]  Но также из оптимизации, вместо того, чтобы спросить, сколько линей больше значения, можно
[58:30.300 --> 58:34.700]  спрашивать, есть ли солочистственная точка, у которой значение больше либо равно, чем столько,
[58:34.700 --> 58:42.180]  и тогда получается просто система неравенств. Да, да, да. Многогранник выпуклый. Ну, это просто
[58:42.180 --> 58:50.780]  система линейных неравенств. Да, то есть, можно сформулировать так. Значит, есть ли, есть ли
[58:50.780 --> 59:12.180]  солочистственная точка, есть ли солочистственная точка, удовлетворяющая данной системе, данной
[59:12.180 --> 59:38.500]  системе линейных неравенств. Вот. Но и анпотрудность тут делается достаточно легко. Значит,
[59:38.500 --> 59:46.860]  анпотрудность говорит следующее, что вот пусть у нас, ну так, я уже стер, давайте я снова напишу
[59:46.860 --> 01:00:02.860]  формулу. Да, опять же, 3kNF. 3kNF сводим в вот какая-то задача. П или N, К или R. Не П или Н, Р или С.
[01:00:02.860 --> 01:00:15.460]  И тут какой-нибудь не К, или Р, или не С. Вот. И тогда можно написать такую систему неравенств.
[01:00:15.460 --> 01:00:22.220]  Да, мне нужно написать, что ноль меньше либо равно П, меньше либо равно единица. И это
[01:00:22.820 --> 01:00:34.140]  либо ноль, либо единица. Да, точно также с Q, R и S мы напишем. Вот. А также мы напишем, например,
[01:00:34.140 --> 01:00:47.180]  что P плюс 1 минус Q плюс R должно быть больше либо равно единица. Да, потому что вот 1 минус Q
[01:00:47.180 --> 01:00:53.580]  это то же самое, что отрицание на нулях и единицах. И, соответственно, есть такая штука, больше либо равно единица.
[01:00:53.580 --> 01:01:00.700]  Это означает, что из этого, этого и этого есть хотя бы одна единица. Ну и также для остального. Да, там 1
[01:01:00.700 --> 01:01:11.580]  минус П, 1 минус П плюс 1 минус R плюс S больше либо равно единица. И там, соответственно, 1 минус Q
[01:01:11.580 --> 01:01:23.860]  плюс R и плюс 1 минус S больше либо равно единица. Вот. Соответственно, фактически я просто переписываю
[01:01:24.460 --> 01:01:35.380]  то, что вот эта дезюнкция верна просто в терминах вот таких вот линейных неравенств. Вот. Ну это более
[01:01:35.380 --> 01:01:40.340]  или менее очевидно, что если здесь есть выполняющий набор, то просто ровно мы возьмем те же самые значения
[01:01:40.340 --> 01:01:46.820]  нуля и единицы, и все эти неравенства будут выполнены. Ну и наоборот, если вот это все выполнено,
[01:01:46.820 --> 01:01:51.380]  то мы возьмем вот эти самые значения как логически, и вот эти неравенства означают,
[01:01:51.380 --> 01:02:04.980]  что дезюнкция выполнена. Нет, а это у нас такой вопрос ставится. У нас вообще вопрос
[01:02:04.980 --> 01:02:17.740]  ставится, есть лицо-численное решение, вот такая система. Ну да-да-да. Вот. Соответственно,
[01:02:17.740 --> 01:02:25.820]  получается, что вот сводимость получилась, что решение есть, да, если выполняющий набор,
[01:02:25.820 --> 01:02:36.060]  тогда и только тогда, когда тут есть решение. Вот. Но загвоздка с тем, почему это, значит,
[01:02:36.060 --> 01:02:45.140]  почему принадлежит НПА. Вот. Вот тут мне нужно отдельно техническое рассуждение, я его приводить
[01:02:45.140 --> 01:02:53.660]  не буду, но лемма тут такая, значит, лемма такая, что если вообще есть хоть какое-то
[01:02:53.660 --> 01:03:09.820]  целочисленное решение, значит, если есть целочисленное решение, то есть не слишком большое,
[01:03:09.820 --> 01:03:25.940]  да, то есть и решение с экспедиционными значениями, с экспедиционными значениями,
[01:03:25.940 --> 01:03:32.620]  но раз это экспедиционные значения, то они требуют полиномерничество битов. Значит,
[01:03:32.620 --> 01:03:49.180]  то есть занимающими, значит, то есть занимающими полиномерное число битов.
[01:03:49.180 --> 01:04:04.060]  Не-не-не, смотрите, принадлежит НПА или это уже не про эту систему, а вообще про любую систему. Да,
[01:04:04.060 --> 01:04:12.700]  да-да. Да, вообще в любой системе CLP, почему вообще, значит, CLP лежит в НП? Значит, потому что,
[01:04:12.700 --> 01:04:17.820]  ну, хочется сказать просто потому, что если есть решение, то мы проверим, что оно решение. Да,
[01:04:17.820 --> 01:04:22.980]  посчитаем и проверим. Но чтобы это можно было посчитать и проверить, нужно, чтобы там значения
[01:04:22.980 --> 01:04:29.540]  были не слишком большими. Вот, и вот лемма как раз говорит, что это есть. Ну, то есть экспедиционнее
[01:04:29.540 --> 01:04:36.980]  от чего? Ну, у нас есть параметры, это там число переменных, число уравнений, и третье параметры,
[01:04:36.980 --> 01:04:46.060]  на самом деле, число битов, которые использованы для записи коэффициентов. Да, то есть, ну, у нас
[01:04:46.060 --> 01:04:50.140]  линейное неравенство, да, это констант умножить на переменную, плюс другая константа на другую
[01:04:50.140 --> 01:04:57.460]  переменную, плюс и так далее. Больше всего, но там какой-то еще константа. Вот, соответственно,
[01:04:57.460 --> 01:05:02.860]  вот эти все константы, они сколько-то битов требуют для своей записи. Ну, и вот получается
[01:05:02.860 --> 01:05:11.500]  экспедиционное число от этого, ну, от всего вот этого, ну, от какого-нибудь там максимального
[01:05:11.500 --> 01:05:20.420]  размера из этих констант. Вот, ну, вот это нужно отдельно доказывать. Там разного рода технические
[01:05:20.420 --> 01:05:29.860]  рассуждения есть, почему это верно. Не-не-не, само значение экспедиционное, а число битов
[01:05:29.860 --> 01:05:43.460]  полинамиальное. Да, всегда длина записи это логарифм от самого значения. Так, хорошо,
[01:05:43.460 --> 01:05:49.980]  ну, у меня 5 минут остается. Я, наверное, чуть-чуть скажу про задачу поиска.
[01:05:59.860 --> 01:06:09.780]  Значит, задача поиска. Значит, на примере Кликия.
[01:06:09.780 --> 01:06:32.180]  Значит, пусть у нас есть граф и число, и мы хотим не просто узнать, есть ли Клика такого размера,
[01:06:32.180 --> 01:06:41.980]  а прямо-таки ее найти, то как это можно сделать? Ну, вот на самом деле, если есть любой черный ящик,
[01:06:41.980 --> 01:06:51.340]  который позволяет проверять, есть ли Клика, то можно на основе этого черного ящика составить
[01:06:51.340 --> 01:07:00.180]  процедуру, которая будет искать эту Клику. Значит, каким образом? Ну, смотрите, пусть у нас есть какая-то,
[01:07:00.180 --> 01:07:06.740]  берем какую-то вершину в графе, и ее просто выкидываем. Выкидываем вершину и все ребра, которые в нее вели.
[01:07:06.740 --> 01:07:12.380]  И дайте спрашиваю, вот если эту вершину выкидать, то останется Клика искать вершину?
[01:07:12.380 --> 01:07:40.300]  Значит, тут же без вершины и размера К. Спрашиваем, выкидываем вершину и спрашиваем, есть ли в этом новом, уменьшенном графе Клика искать вершину.
[01:07:40.700 --> 01:07:50.700]  Если есть, то есть у нее точно так же рекурсивно. А если нет? Ну, а как это вообще выглядит? Вот есть какой-то там граф,
[01:07:50.700 --> 01:08:01.900]  значит, это граф G, вот есть вершина В. Значит, если, соответственно, если нет Клики без этой вершины,
[01:08:01.900 --> 01:08:08.420]  значит, любая Клика эту вершину содержит. Но дальше это означает, что в любой Клике, то есть вершины,
[01:08:08.420 --> 01:08:18.340]  которые не соединены с этой В, точно в Клике не лежит. То есть после этого можно оставить только ту часть, которая соединена.
[01:08:18.340 --> 01:08:29.420]  И искать только, вот N это слово neighbor, значит, искать только среди соседей. Вот, соответственно,
[01:08:29.420 --> 01:08:50.020]  тут получается N от V и K минус 1. Ну вот, получается, что у нас есть, ну, с самого начала можно сказать так,
[01:08:50.020 --> 01:08:59.220]  что мы спрашиваем, есть ли вообще в графе Клика искать вершину. Если ее нету, то мы искать не будем, скажем, что ее нету.
[01:09:00.020 --> 01:09:08.020]  Если она есть, то мы ее будем постепенно искать. Рекурсивно. Дальше вот здесь и здесь рекурсивно продолжается то же самое.
[01:09:08.020 --> 01:09:16.020]  Спрашиваем, вот если мы вершину В удалим, то она еще останется. Если останется, то и забудем про эту вершину В, будем дальше искать.
[01:09:16.020 --> 01:09:24.020]  То есть дальше какую-нибудь следующую будем удалять. Если нет, не осталось, то тогда мы, наоборот, удалим.
[01:09:24.820 --> 01:09:33.820]  Ну, мы удалим, да, то есть тут имеется в виду вот так вот, что мы и В удалим, и всех ее соседей тоже удалим.
[01:09:33.820 --> 01:09:43.820]  И, наоборот, всех ее не соседей тоже удалим. Оставим только соседей, и среди них будем искать вершину Клика размера K минус 1.
[01:09:44.620 --> 01:09:48.620]  То есть когда мы найдем, то мы к ней еще добавим В и получим клику размера K.
[01:09:51.620 --> 01:09:57.620]  Вот. Ну, вот такая рекурсия закончится, потому что у нас каждый раз вершин становятся меньше в графе.
[01:09:57.620 --> 01:10:01.620]  Соответственно, число шагов тут будет не больше, чем число вершин в графе.
[01:10:01.620 --> 01:10:08.620]  Вот. Ну, если, да, значит, если клика есть, то мы ее найдем.
[01:10:09.420 --> 01:10:18.420]  Вот. Ну, и получается, что вообще то, что вот здесь вот я изложил, называется свадимость по Куку.
[01:10:18.420 --> 01:10:26.420]  Да, то есть мы несколько раз используем проверку, есть ли Клика как черный ящик.
[01:10:26.420 --> 01:10:30.420]  Ну, тут уж неважно, может быть, P равно NP, поэтому можем полимерально запускать.
[01:10:30.420 --> 01:10:34.420]  Да, значит, может быть, это просто какой-то оракул.
[01:10:35.220 --> 01:10:43.220]  Вот. Главное, главный вывод такой, что задача поиска, по крайней мере для задачи о Клике,
[01:10:43.220 --> 01:10:47.220]  не более сложна, чем задача распознавания есть и Клика.
[01:10:47.220 --> 01:10:51.220]  Ну, и на самом деле такой же эффект будет для всех NP-полных задач.
[01:10:53.220 --> 01:10:57.220]  Значит, я думаю про это, может быть, на семинарах разговора тоже будет.
[01:10:59.220 --> 01:11:01.220]  Так. Ну, все. Спасибо за внимание.
