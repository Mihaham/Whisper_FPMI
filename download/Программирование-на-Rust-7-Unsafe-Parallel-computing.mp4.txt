[00:00.000 --> 00:10.000]  Я, кстати, забыл вас поздравить. На прошлой лекции мы узнали всё о сейфрасте.
[00:10.000 --> 00:17.000]  Вообще всё. Поэтому нам сейчас останется только посмотреть нонсейфрасте, а после этого мы будем параллелиться.
[00:17.000 --> 00:30.000]  Сейчас мы посмотрим нонсейф и посмотрим параллельность.
[00:30.000 --> 00:34.000]  Мы увидим, как пишет нормальный код нормальные люди.
[00:34.000 --> 00:37.000]  Параллельность будет скучная, потому что я такой скажу, но вы всё знаете.
[00:37.000 --> 00:43.000]  Параллельность в целом, я именно про нсейф, чтобы как нормальный код люди пишут, а не нсейф.
[00:43.000 --> 00:45.000]  Потому что в некоторых местах сейф бесит.
[00:45.000 --> 00:51.000]  Ну, блин, не знаю. Там, честно говоря, сильно нечего вам будет рассказывать про нсейф.
[00:51.000 --> 00:56.000]  Потому что, ну, как бы, ну, что я вам расскажу про указатель, вы всё знаете.
[00:56.000 --> 00:58.000]  Что там, третья мая?
[00:58.000 --> 01:03.000]  Давайте тогда поменяем. Десятая. Сделаем.
[01:04.000 --> 01:07.000]  Такс. Контрол, опшен, блин, опшенер, по-моему.
[01:07.000 --> 01:10.000]  Блин, опять не угадал. А, оконрассент это...
[01:10.000 --> 01:12.000]  Командер. Вот так вот.
[01:12.000 --> 01:16.000]  Вот. И сейчас корректируем дату.
[01:16.000 --> 01:18.000]  Это фигня.
[01:23.000 --> 01:28.000]  Ну, честно говоря, это похоже на правду, потому что сейчас...
[01:28.000 --> 01:31.000]  Уж по-другому не получается.
[01:32.000 --> 01:36.000]  Такс. Ну всё, теперь всё правильно.
[01:46.000 --> 01:47.000]  Ну что, начинаем?
[01:47.000 --> 01:48.000]  Да.
[01:48.000 --> 01:51.000]  Так, у нас седьмая лекция про нсейф и про параллельность.
[01:51.000 --> 01:54.000]  На этот раз она будет очень простой, в сравнению с прошлой.
[01:54.000 --> 01:56.000]  И вообще, наверное, это будет для вас самая простая лекция,
[01:56.000 --> 01:58.000]  потому что до этого вам приходилось что-то новое изучать.
[01:58.000 --> 01:59.000]  Сейчас ничего нового не будет.
[01:59.000 --> 02:04.000]  Сейчас будет погружение в плюсы и параллельность,
[02:04.000 --> 02:05.000]  которую вы прекрасно знаете.
[02:05.000 --> 02:09.000]  Так что просто посмотрим, что есть разница по этому поводу.
[02:09.000 --> 02:12.000]  Вот. У нас вот такой вот план.
[02:12.000 --> 02:15.000]  Будем смотреть на нсейф и что он на себе представляет.
[02:15.000 --> 02:17.000]  Какая идея за нсейфом.
[02:17.000 --> 02:20.000]  Посмотрим чуть-чуть на указатели, на неинциализированную память.
[02:20.000 --> 02:23.000]  На то, когда писать нужно нсейф.
[02:23.000 --> 02:25.000]  Ну и чуть-чуть про параллельный компьютер будет.
[02:25.000 --> 02:28.000]  Ну и еще парочка крейтов самых популярных в Расте.
[02:28.000 --> 02:30.000]  Кроссбим и район.
[02:30.000 --> 02:33.000]  Которые вам наверняка очень понравятся.
[02:33.000 --> 02:36.000]  Так что давайте начнем.
[02:36.000 --> 02:39.000]  Нсейф и его контракт.
[02:39.000 --> 02:42.000]  Почти весь Курс, когда мы говорили о сейф Расте,
[02:42.000 --> 02:45.000]  мы говорили о подножестве языка,
[02:45.000 --> 02:47.000]  в котором нельзя сделать никакие ошибки
[02:47.000 --> 02:49.000]  связанных с memory-safety и undefied-behavior.
[02:49.000 --> 02:53.000]  Нон-сейф Раст это такое надо множество языка,
[02:53.000 --> 02:57.000]  в котором вы уже можете совершить такие ошибки.
[02:57.000 --> 03:00.000]  Ну прямо как в всяких языках типа плюсов.
[03:00.000 --> 03:04.000]  Например взять и просто невалидный указатель разоменовать.
[03:04.000 --> 03:07.000]  В Расте в онсейф это уже возможно.
[03:10.000 --> 03:13.000]  Ну и более того, оказывается, что в сейф Расте
[03:13.000 --> 03:15.000]  мы даже не можем написать вообще весь код,
[03:15.000 --> 03:18.000]  который мы бы хотели написать.
[03:18.000 --> 03:20.000]  Да, мы можем с помощью тех сейф-абстракций,
[03:20.000 --> 03:22.000]  которые у нас уже есть, имплементировать все что угодно,
[03:22.000 --> 03:25.000]  но порой мы хотим какие-то оптимизации, например.
[03:25.000 --> 03:28.000]  Мы хотим написать на указателях BST, чтобы...
[03:28.000 --> 03:32.000]  Ну ладно, BST будет работать так же официально как в плюсах,
[03:32.000 --> 03:35.000]  но вот линкет-лист мы хотим, например, на указателях написать.
[03:35.000 --> 03:38.000]  Потому что нам не хочется RC, нам не хочется overhead.
[03:38.000 --> 03:41.000]  Для этого нам нужен онсейф, потому что Раст, к сожалению,
[03:41.000 --> 03:45.000]  не может проверить в compile-time все нужные контракты,
[03:45.000 --> 03:47.000]  что мы выполняем.
[03:47.000 --> 03:49.000]  Ну вот давайте примерчики посмотрим.
[03:49.000 --> 03:52.000]  Например, мы не можем написать просто так vector.
[03:52.000 --> 03:54.000]  Как ни странно.
[03:54.000 --> 03:57.000]  Потому что там есть достаточно такой непростой вариант.
[03:57.000 --> 03:59.000]  У нас первая половина нашего...
[03:59.000 --> 04:01.000]  Наша локация на чем-то инициализирована,
[04:01.000 --> 04:04.000]  первая часть, а вторая не инициализирована.
[04:04.000 --> 04:07.000]  То есть получается, что мы в любой момент можем выйти
[04:07.000 --> 04:09.000]  за границы инициализированной локации,
[04:09.000 --> 04:12.000]  пока мы пытаемся заменеджить vector.
[04:13.000 --> 04:15.000]  Мы не можем сделать всякие оптимизации,
[04:15.000 --> 04:18.000]  например, линкет-лист на указателях, как я сказал,
[04:18.000 --> 04:21.000]  или, например, сохранить какие-то байты на локациях,
[04:21.000 --> 04:23.000]  если очень хочется.
[04:23.000 --> 04:25.000]  Или, например, делать различные другие оптимизации,
[04:25.000 --> 04:27.000]  говорить компилятору, например,
[04:27.000 --> 04:30.000]  вот этого значения скорее всего будет таким.
[04:30.000 --> 04:33.000]  И он, исходя из этого, оптимизирует нашу программу.
[04:35.000 --> 04:38.000]  Еще, например, видели ли вы функцию?
[04:39.000 --> 04:41.000]  Если у меня большой vector был,
[04:41.000 --> 04:43.000]  а потом я сделал много попов,
[04:43.000 --> 04:45.000]  то он уменьшит будет или нет?
[04:45.000 --> 04:47.000]  Нет, не будет.
[04:47.000 --> 04:49.000]  Да, если вы хотите, там, по-моему,
[04:49.000 --> 04:51.000]  шринг должен быть меток где-то.
[04:52.000 --> 04:54.000]  Знаете ли вы функцию сприда от нет?
[04:54.000 --> 04:56.000]  Возможно, видели.
[04:58.000 --> 05:00.000]  Это функция такая slice,
[05:00.000 --> 05:02.000]  которая принимает на вход мутабельную ссылку на slice
[05:02.000 --> 05:04.000]  и возвращает две мутабельные ссылки на slice.
[05:04.000 --> 05:06.000]  Но как это работает?
[05:06.000 --> 05:08.000]  Вы создаете индекс,
[05:08.000 --> 05:10.000]  и он делит пополам.
[05:10.000 --> 05:12.000]  То есть до индекса не включительный,
[05:12.000 --> 05:14.000]  с индекса и дальше включительный.
[05:14.000 --> 05:16.000]  Естественно, это небезопасно.
[05:16.000 --> 05:18.000]  Вы создаете две мутабельные ссылки.
[05:18.000 --> 05:20.000]  Раз это не может проверить в своем сейф под множестве,
[05:20.000 --> 05:22.000]  поэтому вам нужно спуститься до unsafe,
[05:22.000 --> 05:24.000]  чтобы создать две эти мутабельные ссылки
[05:24.000 --> 05:26.000]  и поддержать все варианты.
[05:26.000 --> 05:28.000]  Мы еще посмотрим на сприт от mute.
[05:30.000 --> 05:32.000]  Еще мы, возможно, хотим напрямую
[05:32.000 --> 05:34.000]  с железом взаимодействия,
[05:34.000 --> 05:36.000]  с экспорционными системами
[05:36.000 --> 05:38.000]  или даже с FFI с другими языками.
[05:40.000 --> 05:42.000]  Unsafe для этого уже
[05:42.000 --> 05:44.000]  нужен.
[05:44.000 --> 05:46.000]  В сейф Rust мы уже не можем проверить всех вариантов,
[05:46.000 --> 05:48.000]  опять же, только в runtime,
[05:48.000 --> 05:50.000]  и приходится пользоваться unsafe.
[05:52.000 --> 05:54.000]  На самом деле unsafe Rust имеет очень мало что.
[05:54.000 --> 05:56.000]  Смотрите, всего это мы умеем
[05:56.000 --> 05:58.000]  roll pointer
[05:58.000 --> 06:00.000]  dereferencing.
[06:00.000 --> 06:02.000]  То есть мы создаем какой-то сырый указатель
[06:02.000 --> 06:04.000]  и получаем значение.
[06:04.000 --> 06:06.000]  Точно так же, как в плюсах.
[06:06.000 --> 06:08.000]  И в сейф Rust вы вообще не можете это сделать.
[06:08.000 --> 06:10.000]  Вам нужно обязательно ставить unsafe,
[06:10.000 --> 06:12.000]  чтобы сказать Расту о том, что вы выполняете
[06:12.000 --> 06:14.000]  условия на то, что этот указатель валиден.
[06:14.000 --> 06:16.000]  Корректный участок памяти,
[06:16.000 --> 06:18.000]  который принадлежит вам.
[06:18.000 --> 06:20.000]  Вызывайте всякие unsafe функции.
[06:20.000 --> 06:22.000]  Например, это интристики,
[06:22.000 --> 06:24.000]  про которые я говорил для компилятора.
[06:24.000 --> 06:26.000]  Аллокатор, который вам будет напрямую
[06:26.000 --> 06:28.000]  возвращать какой-то кусок памяти,
[06:28.000 --> 06:30.000]  который вы аллоцируете.
[06:30.000 --> 06:32.000]  Это функция C.
[06:34.000 --> 06:36.000]  Можно имплементировать unsafe trading,
[06:36.000 --> 06:38.000]  который мы сейчас посмотрим тоже.
[06:38.000 --> 06:40.000]  Или мутировать статики.
[06:40.000 --> 06:42.000]  Почему небезопасно мутировать статики?
[06:42.000 --> 06:44.000]  Вы наверное видели уже
[06:44.000 --> 06:46.000]  предупреждение от компилятора.
[06:50.000 --> 06:52.000]  Ну, потому что можно мутировать
[06:52.000 --> 06:54.000]  из нескольких трудов, конечно.
[06:54.000 --> 06:56.000]  Это небезопасно, это датарейс.
[06:56.000 --> 06:58.000]  Поэтому Rust просто так мутировать статики не дает.
[06:58.000 --> 07:00.000]  Это будет на этапе компиляции
[07:00.000 --> 07:02.000]  просто обрезать.
[07:02.000 --> 07:04.000]  Ну, блин, мы еще про трейды только
[07:04.000 --> 07:06.000]  не знаем, как Rust к ним относится.
[07:06.000 --> 07:08.000]  То есть, есть предложение, что в Rust вообще
[07:08.000 --> 07:10.000]  трейды создавать нельзя, потому что
[07:10.000 --> 07:12.000]  не может быть правильной компиляции.
[07:12.000 --> 07:14.000]  Ну, конечно, можно создавать.
[07:14.000 --> 07:16.000]  В общем, для статиков основная причина
[07:16.000 --> 07:18.000]  это то, что из нескольких трейдов
[07:18.000 --> 07:20.000]  можно мутировать.
[07:20.000 --> 07:22.000]  Про трейды мы пока что не знаем,
[07:22.000 --> 07:24.000]  но понимаем, что такая проблема может быть.
[07:24.000 --> 07:26.000]  И ее можно сделать в плюсах тоже.
[07:26.000 --> 07:28.000]  И еще у нас в Rust есть unions.
[07:28.000 --> 07:30.000]  Мы про них не будем
[07:30.000 --> 07:32.000]  подробно говорить.
[07:32.000 --> 07:34.000]  Ну, в общем-то, unions прям как
[07:34.000 --> 07:36.000]  FC в каком-нибудь, в котором вы можете
[07:36.000 --> 07:38.000]  взять и одну и ту же структуру
[07:38.000 --> 07:40.000]  несколькими...
[07:40.000 --> 07:42.000]  за несколько, скажем так,
[07:42.000 --> 07:44.000]  смотреть.
[07:44.000 --> 07:46.000]  Например, превратить float
[07:46.000 --> 07:48.000]  в union32t
[07:48.000 --> 07:50.000]  с помощью unions. Наверное, на курсе
[07:50.000 --> 07:52.000]  окоса. Задачка, конечно, такая была.
[07:52.000 --> 07:54.000]  Приходилось смотреть
[07:54.000 --> 07:56.000]  что из себя представляет float
[07:56.000 --> 07:58.000]  внутри.
[07:58.000 --> 08:00.000]  Это все
[08:00.000 --> 08:02.000]  на самом деле приходит...
[08:02.000 --> 08:04.000]  вся эта сила приходит с огромной ответственности
[08:04.000 --> 08:06.000]  одновременно. До этого у нас программа всегда
[08:06.000 --> 08:08.000]  стабильно работала, а здесь мы можем баться
[08:08.000 --> 08:10.000]  просто произвольной
[08:10.000 --> 08:12.000]  ошибку,
[08:12.000 --> 08:14.000]  если мы вдруг пишем
[08:14.000 --> 08:16.000]  неправильно unsafe код.
[08:16.000 --> 08:18.000]  Давайте посмотрим на первый примерчик.
[08:18.000 --> 08:20.000]  Самое простое, что можно представить себе,
[08:20.000 --> 08:22.000]  это getUncheckedVector. Вектор у нас
[08:22.000 --> 08:24.000]  не проверяет, правильно ли мы
[08:24.000 --> 08:26.000]  индекс мы дали.
[08:26.000 --> 08:28.000]  Обратите внимание,
[08:28.000 --> 08:30.000]  что здесь у нас
[08:30.000 --> 08:32.000]  индекс getUnchecked,
[08:32.000 --> 08:34.000]  здесь не очень, наверное, понятно,
[08:34.000 --> 08:36.000]  просто берем
[08:36.000 --> 08:38.000]  у вектора
[08:38.000 --> 08:40.000]  не проверяя абсолютно ничего,
[08:40.000 --> 08:42.000]  элемент по индексу.
[08:42.000 --> 08:44.000]  Мы избавляемся от проверки, но тем не менее
[08:44.000 --> 08:46.000]  теперь мы можем получить убей, если у нас индекс неправильный.
[08:52.000 --> 08:54.000]  У нас были ассоциированные с ним функции,
[08:54.000 --> 08:56.000]  а с этим мы берем индекс
[08:56.000 --> 08:58.000]  и вызываем ассоциированный с ним.
[08:58.000 --> 09:00.000]  Не, вообще, это функция ассоциированная вектора.
[09:00.000 --> 09:02.000]  Ну, индекс это
[09:02.000 --> 09:04.000]  какой-то sliceIndex,
[09:04.000 --> 09:06.000]  в общем, там дальше есть...
[09:08.000 --> 09:10.000]  Есть еще, скажем так, дальше
[09:10.000 --> 09:12.000]  функции, и getUnchecked
[09:12.000 --> 09:14.000]  делает то же самое, но на slice.
[09:14.000 --> 09:16.000]  Просто как sliceVector
[09:16.000 --> 09:18.000]  представляем, по сути.
[09:18.000 --> 09:20.000]  Вот.
[09:20.000 --> 09:22.000]  В общем, такой вывод.
[09:22.000 --> 09:24.000]  У каждой unsaved функции есть какой-то контракт,
[09:24.000 --> 09:26.000]  который она с вами поддерживает.
[09:26.000 --> 09:28.000]  Вот на первой лекции у нас был minCopy,
[09:28.000 --> 09:30.000]  где мы должны были гарантировать то, что у нас
[09:30.000 --> 09:32.000]  не пересекаются участки памяти.
[09:32.000 --> 09:34.000]  Здесь мы должны гарантировать то, что мы правильный индекс засунули.
[09:34.000 --> 09:36.000]  То есть такой элемент вектора действительно
[09:36.000 --> 09:38.000]  существует, он не ходит за границы.
[09:38.000 --> 09:40.000]  Иначе мы получим убе.
[09:42.000 --> 09:44.000]  Ну, для этого нужно читать документацию, конечно.
[09:46.000 --> 09:48.000]  Это то, как мы могли бы
[09:48.000 --> 09:50.000]  воспользоваться unsaved в нашем коде.
[09:50.000 --> 09:52.000]  Вот у нас есть getUnchecked.
[09:52.000 --> 09:54.000]  Мы воспользовались через unsavedBlock.
[09:54.000 --> 09:56.000]  Нужно явно пометить раз,
[09:56.000 --> 09:58.000]  что мы хотим воспользоваться unsaved функцией.
[09:58.000 --> 10:00.000]  Это в каком-то смысле
[10:00.000 --> 10:02.000]  удобно, потому что мы можем просто взять
[10:02.000 --> 10:04.000]  поиск и покодовать unsaved
[10:04.000 --> 10:06.000]  и вы смотрите,
[10:06.000 --> 10:08.000]  видите все точки, в которые воспользуется unsaved.
[10:08.000 --> 10:10.000]  Если у вас получилась убе, то могло
[10:10.000 --> 10:12.000]  получиться только потому, что у вас unsaved где-то
[10:12.000 --> 10:14.000]  есть блок,
[10:14.000 --> 10:16.000]  который неправильно отработан.
[10:16.000 --> 10:18.000]  Сейчас у нас
[10:18.000 --> 10:20.000]  ваинциализировано
[10:20.000 --> 10:22.000]  или нет?
[10:22.000 --> 10:24.000]  Ваинциализировано. Вон вектор.
[10:24.000 --> 10:26.000]  Вектор, что там получается?
[10:26.000 --> 10:28.000]  Единичка.
[10:28.000 --> 10:30.000]  Да, вектор из единички просто.
[10:30.000 --> 10:32.000]  Это же через запятую.
[10:34.000 --> 10:36.000]  Вот.
[10:38.000 --> 10:40.000]  Так.
[10:40.000 --> 10:42.000]  Ну, кстати говоря, я еще забыл сказать,
[10:42.000 --> 10:44.000]  вот эти unsaved блоки вы можете писать в любых имплах.
[10:44.000 --> 10:46.000]  В любых функциях, по сути.
[10:46.000 --> 10:48.000]  Unsaved блок – это выражение?
[10:48.000 --> 10:50.000]  Это просто scope.
[10:50.000 --> 10:52.000]  Ну, даже не так.
[10:52.000 --> 10:54.000]  Это
[10:54.000 --> 10:56.000]  просто scope, который поменчан
[10:56.000 --> 10:58.000]  unsaved.
[10:58.000 --> 11:00.000]  Это выражение, в котором
[11:00.000 --> 11:02.000]  ты можешь вернуть что-то.
[11:04.000 --> 11:06.000]  Так.
[11:06.000 --> 11:08.000]  Вот это вот важное замечание. Вообще по историческим
[11:08.000 --> 11:10.000]  причинам так сложилось, что у нас
[11:10.000 --> 11:12.000]  каждая unsaved функция
[11:12.000 --> 11:14.000]  внутри имеет неявно большой unsaved блок.
[11:16.000 --> 11:18.000]  В итоге поняли, что это плохое решение,
[11:18.000 --> 11:20.000]  потому что если вы пишете unsaved
[11:20.000 --> 11:22.000]  внутри unsaved функции, то вы
[11:22.000 --> 11:24.000]  даже не видите, что у вас unsaved используется.
[11:24.000 --> 11:26.000]  Хочется как-то это явно прописывать.
[11:26.000 --> 11:28.000]  В общем, мы решили, что это плохое какое-то
[11:28.000 --> 11:30.000]  решение, и в будущих editions
[11:30.000 --> 11:32.000]  раста могут это убрать.
[11:32.000 --> 11:34.000]  То есть вас заставить
[11:34.000 --> 11:36.000]  прописать явно unsaved блок.
[11:36.000 --> 11:38.000]  В данный момент, конечно...
[11:38.000 --> 11:40.000]  Сейчас клипы бросают warning на эту тему?
[11:40.000 --> 11:42.000]  Вроде не бросают.
[11:42.000 --> 11:44.000]  Ничего плохо не делают.
[11:44.000 --> 11:46.000]  Но потом должен появиться линт.
[11:46.000 --> 11:50.000]  Даже RFC 2585, в котором все это описано.
[11:52.000 --> 11:54.000]  И в будущем может появиться вот такой вот линт,
[11:54.000 --> 11:56.000]  который будет
[11:56.000 --> 11:58.000]  для того, чтобы уменьшить
[11:58.000 --> 12:00.000]  footgun radius
[12:02.000 --> 12:04.000]  внутри каждой функции unsaved
[12:04.000 --> 12:06.000]  нужно будет явно написать unsaved блок.
[12:06.000 --> 12:08.000]  И в будущем это может стать
[12:08.000 --> 12:10.000]  hard error в компиляторе.
[12:10.000 --> 12:12.000]  То есть если вы напишете unsaved
[12:12.000 --> 12:14.000]  внутри, то у вас не скомпилируется просто программа.
[12:14.000 --> 12:16.000]  Это такая вот...
[12:16.000 --> 12:18.000]  Придется признать, это была ошибка
[12:18.000 --> 12:20.000]  в данный момент.
[12:20.000 --> 12:22.000]  Приходится тебе исправлять.
[12:22.000 --> 12:24.000]  Вот еще есть unsaved keyboard.
[12:24.000 --> 12:26.000]  Который...
[12:26.000 --> 12:28.000]  Ну, unsaved можно использовать для
[12:28.000 --> 12:30.000]  trade.
[12:30.000 --> 12:32.000]  Что значит unsaved trade?
[12:32.000 --> 12:34.000]  Примерно написано
[12:34.000 --> 12:36.000]  на слайде, понимаете ли вы, что это значит?
[12:38.000 --> 12:40.000]  Например,
[12:40.000 --> 12:42.000]  конкретно данный trade.
[12:50.000 --> 12:52.000]  Может так произойти,
[12:52.000 --> 12:54.000]  что у нас имплементация ORDA
[12:54.000 --> 12:56.000]  будет некорректной.
[12:56.000 --> 12:58.000]  В вполне нормальной ситуации, если
[12:58.000 --> 13:00.000]  user берет, пишет для своей структурки ORD
[13:00.000 --> 13:02.000]  и там для этой структурки ORD написано некорректно.
[13:02.000 --> 13:04.000]  Вам придется это учитывать.
[13:04.000 --> 13:06.000]  Если вы пишете свой код
[13:06.000 --> 13:08.000]  не в save, а в unsaved,
[13:08.000 --> 13:10.000]  тогда вы можете просто положиться на то,
[13:10.000 --> 13:12.000]  что user написал ORD
[13:12.000 --> 13:14.000]  корректно, но при этом он написал его некорректно
[13:14.000 --> 13:16.000]  и получите UB в своем коде.
[13:16.000 --> 13:18.000]  Это вам нужно учитывать то, что ORD user может
[13:18.000 --> 13:20.000]  написать неправильно.
[13:20.000 --> 13:22.000]  А если вы хотите довериться
[13:22.000 --> 13:24.000]  этому, то в таком случае есть
[13:24.000 --> 13:26.000]  можно объявить такой trade
[13:26.000 --> 13:28.000]  trusted ORD.
[13:28.000 --> 13:30.000]  Если user его имплементирует,
[13:30.000 --> 13:32.000]  в таком случае он вам уже говорит, я точно уверен
[13:32.000 --> 13:34.000]  в том, что эта имплементация корректна.
[13:34.000 --> 13:36.000]  Unsaved trade это те trade, которые
[13:36.000 --> 13:38.000]  небезопасно имплементировать.
[13:38.000 --> 13:40.000]  Ими можно безопасно пользоваться.
[13:40.000 --> 13:42.000]  Если там были бы какие-то функции,
[13:42.000 --> 13:44.000]  ими можно было бы всеми безопасно пользоваться в save.
[13:44.000 --> 13:46.000]  Вы небезопасно имплементировать.
[13:46.000 --> 13:48.000]  То есть вы должны какие-то
[13:48.000 --> 13:50.000]  контракты, которые этот
[13:50.000 --> 13:52.000]  trade вам дает соблюдать.
[13:52.000 --> 13:54.000]  В данном случае контракт
[13:54.000 --> 13:56.000]  это то, что у вас ORD должен быть
[13:56.000 --> 13:58.000]  имплементирован корректно.
[13:58.000 --> 14:00.000]  Обязательно, представляйте себя
[14:00.000 --> 14:02.000]  в полный порядок.
[14:04.000 --> 14:06.000]  Например, есть такая история,
[14:06.000 --> 14:08.000]  что
[14:08.000 --> 14:10.000]  бет дерева
[14:10.000 --> 14:12.000]  она же пользуется ORD.
[14:12.000 --> 14:14.000]  А что будет, если ORD некорректный?
[14:16.000 --> 14:18.000]  Просто там не полный порядок,
[14:18.000 --> 14:20.000]  просто рандомный ORD возвращает.
[14:20.000 --> 14:22.000]  Что произойдет в таком случае?
[14:22.000 --> 14:24.000]  Ну, в общем-то, да.
[14:24.000 --> 14:26.000]  У нас может произойти рандомная фигня,
[14:26.000 --> 14:28.000]  но только не memory and safety
[14:28.000 --> 14:30.000]  и не undefined behavior.
[14:30.000 --> 14:32.000]  Потому что там написано бы дерево таким образом,
[14:32.000 --> 14:34.000]  что если вы напишете некорректным образом ORD,
[14:34.000 --> 14:36.000]  то все будет хорошо.
[14:36.000 --> 14:38.000]  Но при этом
[14:38.000 --> 14:40.000]  в общем,
[14:40.000 --> 14:42.000]  все будет хорошо.
[14:42.000 --> 14:44.000]  В общем, все будет хорошо.
[14:44.000 --> 14:46.000]  В общем, все будет хорошо.
[14:46.000 --> 14:48.000]  В общем, все будет хорошо.
[14:48.000 --> 14:50.000]  В общем, все будет хорошо.
[14:50.000 --> 14:52.000]  В общем, все будет хорошо
[14:52.000 --> 14:54.000]  в таком ситуации.
[14:54.000 --> 14:56.000]  Но вам приходится это учитывать в своей имплементации.
[15:00.000 --> 15:02.000]  Когда можно было довериться юзеру,
[15:02.000 --> 15:04.000]  не пришлось бы делать
[15:04.000 --> 15:06.000]  дополнительных проверок никаких.
[15:10.000 --> 15:12.000]  Когда решали, что сделать с ORD,
[15:12.000 --> 15:14.000]  потому что юзер может написать же неправильно ORD,
[15:14.000 --> 15:16.000]  делали ли ORD unsafe trait?
[15:16.000 --> 15:18.000]  В общем, решили, что нет, как-то
[15:18.000 --> 15:20.000]  это unsafe everywhere тогда будет,
[15:20.000 --> 15:22.000]  и не нужно так делать.
[15:22.000 --> 15:24.000]  Вместо этого мы скажем, что давайте это будет safe,
[15:24.000 --> 15:26.000]  а всем юзерам скажем, что
[15:26.000 --> 15:28.000]  в общем-то вы должны проверять
[15:28.000 --> 15:30.000]  на то, что ORD действительно
[15:30.000 --> 15:32.000]  корректно имплементирован.
[15:34.000 --> 15:36.000]  К сожалению, это такой вот trade-off
[15:36.000 --> 15:38.000]  в данной ситуации.
[15:44.000 --> 15:46.000]  Таким образом, приходим к тому, что unsafe
[15:46.000 --> 15:48.000]  это такая штука, которая объявляет контракт
[15:48.000 --> 15:50.000]  между вами и между пользователем.
[15:50.000 --> 15:52.000]  Вы что-то пишете,
[15:52.000 --> 15:54.000]  с unsafe мы теперь пользователи
[15:54.000 --> 15:56.000]  должны выполнять ваш контракт, который вы сказали.
[16:00.000 --> 16:02.000]  Вы уже слышали
[16:02.000 --> 16:04.000]  на первой лекции такие слова как
[16:04.000 --> 16:06.000]  soundness и unsoundness.
[16:06.000 --> 16:08.000]  Soundness это
[16:08.000 --> 16:10.000]  код sound, это тогда, когда
[16:10.000 --> 16:12.000]  вы его используете как хотите,
[16:12.000 --> 16:14.000]  можете использовать внешний код,
[16:14.000 --> 16:16.000]  код, например, из этой структуры,
[16:16.000 --> 16:18.000]  если у вас функция unsaved
[16:18.000 --> 16:20.000]  внутри структуры.
[16:20.000 --> 16:22.000]  Как угодно
[16:22.000 --> 16:24.000]  пользуйтесь кодом вокруг и тем, который у вас есть
[16:24.000 --> 16:26.000]  с unsaved, но при этом у вас
[16:26.000 --> 16:28.000]  не будет undefined behavior
[16:28.000 --> 16:30.000]  и memory unsafety.
[16:30.000 --> 16:32.000]  Ваша пин называется
[16:32.000 --> 16:34.000]  sound, если ни при каких условиях
[16:34.000 --> 16:36.000]  она не вызывает memory unsafety
[16:36.000 --> 16:38.000]  и undefined behavior.
[16:38.000 --> 16:40.000]  И unsound в противном случае.
[16:40.000 --> 16:42.000]  По умолчанию,
[16:42.000 --> 16:44.000]  когда вы пишете на Rust,
[16:44.000 --> 16:46.000]  весь ваш save код
[16:46.000 --> 16:48.000]  он sound,
[16:48.000 --> 16:50.000]  потому что у вас все абстракции они sound,
[16:50.000 --> 16:52.000]  соответственно то, что вы написали,
[16:52.000 --> 16:54.000]  с memory unsafety
[16:54.000 --> 16:56.000]  и undefined behavior.
[16:56.000 --> 16:58.000]  Если вы начнете писать unsaved,
[16:58.000 --> 17:00.000]  то тогда нужно проверять, что у вас действительно
[17:00.000 --> 17:02.000]  та обертка, которую пишете вокруг unsaved,
[17:02.000 --> 17:04.000]  она будет безопасна.
[17:04.000 --> 17:06.000]  Убеждаться в этом.
[17:10.000 --> 17:12.000]  И обычно,
[17:12.000 --> 17:14.000]  когда мы пишем unsaved код,
[17:14.000 --> 17:16.000]  мы оборачиваем его в какую-то
[17:16.000 --> 17:18.000]  врэпим в какую-нибудь
[17:18.000 --> 17:20.000]  абстракцию.
[17:20.000 --> 17:22.000]  Например, если у нас есть unsaved api,
[17:22.000 --> 17:24.000]  мы обычно делаем вокруг safe api,
[17:24.000 --> 17:26.000]  который делает дополнительные проверки,
[17:26.000 --> 17:28.000]  что юзер действительно не идиот и все получается.
[17:30.000 --> 17:32.000]  Давайте перейдем
[17:32.000 --> 17:34.000]  к split от mute.
[17:34.000 --> 17:36.000]  Это такая silent функция, как можете обратить внимание.
[17:36.000 --> 17:38.000]  Она понимает на вход
[17:38.000 --> 17:40.000]  mute self,
[17:40.000 --> 17:42.000]  это у нас просто какой-то slice.
[17:42.000 --> 17:44.000]  И принимает какой-то индекс.
[17:44.000 --> 17:46.000]  То, что она делает,
[17:46.000 --> 17:48.000]  она просто проверяет, что у нас действительно
[17:48.000 --> 17:50.000]  mid меньше либо равен лэм.
[17:50.000 --> 17:52.000]  Если так, то все хорошо.
[17:52.000 --> 17:54.000]  Если равен, тогда у нас получится
[17:54.000 --> 17:56.000]  правый slice пустой,
[17:56.000 --> 17:58.000]  а левый slice состоит
[17:58.000 --> 18:00.000]  из всего массива.
[18:02.000 --> 18:04.000]  В противном случае мы получим два
[18:04.000 --> 18:06.000]  неперечекающихся slice,
[18:06.000 --> 18:08.000]  то все безопасно.
[18:08.000 --> 18:10.000]  Обратите внимание, что вот это вот я скопировал
[18:10.000 --> 18:12.000]  просто в стандартной библиотеке,
[18:12.000 --> 18:14.000]  и тут есть такой комментарий safety.
[18:14.000 --> 18:16.000]  Очень любят перед unsaved блоками
[18:16.000 --> 18:18.000]  это писать, даже
[18:18.000 --> 18:20.000]  в каком-то плане необходимость,
[18:20.000 --> 18:22.000]  потому что
[18:22.000 --> 18:24.000]  это то, что объясняет,
[18:24.000 --> 18:26.000]  как вы написали unsaved,
[18:26.000 --> 18:28.000]  здесь безопасно.
[18:28.000 --> 18:30.000]  Почему написано unsaved безопасно?
[18:30.000 --> 18:32.000]  Здесь мы написали,
[18:32.000 --> 18:34.000]  что мы выполнили контракт
[18:34.000 --> 18:36.000]  split от mute unchecked,
[18:36.000 --> 18:38.000]  который ничего не проверяет,
[18:38.000 --> 18:40.000]  и просто делает split.
[18:40.000 --> 18:42.000]  Ну, выглядит он примерно вот так вот,
[18:42.000 --> 18:44.000]  unchecked, это unsaved функция,
[18:44.000 --> 18:46.000]  которая, здесь такая же написана safety,
[18:46.000 --> 18:48.000]  говорит, что тот, кто вызывает
[18:48.000 --> 18:50.000]  эту функцию, должен проверить то-то,
[18:50.000 --> 18:52.000]  ну и просто
[18:52.000 --> 18:54.000]  делает два slice-а,
[18:54.000 --> 18:56.000]  из указателя и из числа элементов.
[18:56.000 --> 18:58.000]  Ну и все.
[19:00.000 --> 19:02.000]  Вот так вот примерно выглядит unsaved код,
[19:02.000 --> 19:04.000]  какой-то контракт,
[19:04.000 --> 19:06.000]  и вы его выполняете,
[19:06.000 --> 19:08.000]  когда используете unsaved код.
[19:10.000 --> 19:12.000]  Вот, кажется, все, что я хотел сказать про unsaved.
[19:12.000 --> 19:14.000]  Unsaved это про контракта.
[19:14.000 --> 19:16.000]  Это так.
[19:16.000 --> 19:18.000]  Ну ладно, наконец-то контракт
[19:18.000 --> 19:20.000]  ты хоть куда-то больше не прислал.
[19:22.000 --> 19:24.000]  Так.
[19:24.000 --> 19:26.000]  Можно еще поговорить про указатели.
[19:26.000 --> 19:28.000]  Указатели это тоже очень важная вещь,
[19:28.000 --> 19:30.000]  когда вы пишете unsaved код.
[19:30.000 --> 19:32.000]  Я их показывал вам на первой лекции,
[19:32.000 --> 19:34.000]  но тем не менее, мы их там
[19:34.000 --> 19:36.000]  активно не пользовались.
[19:36.000 --> 19:38.000]  Я просто сказал, что это достаточно
[19:38.000 --> 19:40.000]  бесполезная ерунда, когда вы не пользуетесь unsaved.
[19:40.000 --> 19:42.000]  Ну, здесь
[19:42.000 --> 19:44.000]  я создаю просто какой-то null-пойнтер,
[19:44.000 --> 19:46.000]  проверяю его на null,
[19:46.000 --> 19:48.000]  создаю еще один указатель.
[19:48.000 --> 19:50.000]  Ну, mute означает то, что я могу мутировать
[19:50.000 --> 19:52.000]  по этому указателю, а const
[19:52.000 --> 19:54.000]  это когда я могу просто читать.
[19:54.000 --> 19:56.000]  Все просто.
[19:56.000 --> 19:58.000]  Здесь я создаю
[19:58.000 --> 20:00.000]  mute указатель
[20:00.000 --> 20:02.000]  на строчку.
[20:02.000 --> 20:04.000]  Получается на строковый слайс.
[20:04.000 --> 20:06.000]  Box не OBC.
[20:06.000 --> 20:08.000]  Ну и с помощью
[20:08.000 --> 20:10.000]  Into raw я делаю так, что
[20:10.000 --> 20:12.000]  у меня Box превращается в указатель.
[20:12.000 --> 20:14.000]  Это безопасно, а в обратную сторону уже
[20:14.000 --> 20:16.000]  не будет безопасно, потому что тогда нужно будет
[20:16.000 --> 20:18.000]  проверить, что указатель действительно показывает
[20:18.000 --> 20:20.000]  навалидный участок памяти.
[20:24.000 --> 20:26.000]  Ну смотрите, я тут пользуюсь unsaved,
[20:26.000 --> 20:28.000]  потому что мне нужно разыменовать указатель.
[20:28.000 --> 20:30.000]  Я хочу просто вывести
[20:30.000 --> 20:32.000]  содержимое Box, первое
[20:32.000 --> 20:34.000]  символ.
[20:34.000 --> 20:36.000]  Понимаете ли вы, что значит
[20:36.000 --> 20:38.000]  указатель и ссылочка одновременно?
[20:38.000 --> 20:40.000]  Ну, вообще, как так получилось,
[20:40.000 --> 20:42.000]  что мне так нужно написать?
[20:44.000 --> 20:46.000]  Сейчас вы разыменовали указатель
[20:46.000 --> 20:48.000]  и получили
[20:48.000 --> 20:50.000]  ссылку на слайс.
[20:50.000 --> 20:52.000]  Потом взяли
[20:52.000 --> 20:54.000]  вот слайс
[20:54.000 --> 20:56.000]  с слайсом 0.
[20:56.000 --> 20:58.000]  Это просто
[20:58.000 --> 21:00.000]  синтаксис создания слайса.
[21:00.000 --> 21:02.000]  То есть когда я разыменовал, здесь у меня получился
[21:02.000 --> 21:04.000]  слайс t, и после этого я сделал
[21:04.000 --> 21:06.000]  слайс 0 еще, и слайс.
[21:06.000 --> 21:08.000]  То есть кроме
[21:08.000 --> 21:10.000]  вот этого вот, все остальное вам уже знакомо.
[21:10.000 --> 21:12.000]  А в звездочке
[21:12.000 --> 21:14.000]  const i 32
[21:14.000 --> 21:16.000]  это указатель на const i 32
[21:16.000 --> 21:18.000]  или константный указатель?
[21:18.000 --> 21:20.000]  Нет, мы читаем слева направо.
[21:20.000 --> 21:22.000]  Указатель на константный i 32.
[21:22.000 --> 21:24.000]  Это не плюсы, чтобы справа налево читать.
[21:24.000 --> 21:26.000]  Мы читаем слева направо.
[21:30.000 --> 21:32.000]  Так.
[21:32.000 --> 21:34.000]  Как раз спросил.
[21:34.000 --> 21:36.000]  Хотя нет, в данном случае это
[21:36.000 --> 21:38.000]  да, это
[21:38.000 --> 21:40.000]  чуть-чуть другое.
[21:40.000 --> 21:42.000]  Оператор срывания мута.
[21:46.000 --> 21:48.000]  В общем, да. Оператор срывания мута, получается.
[21:48.000 --> 21:50.000]  Мы делаем str из этой ерунды.
[21:50.000 --> 21:52.000]  По сути, это на самом деле не один
[21:52.000 --> 21:54.000]  оператор,
[21:54.000 --> 21:56.000]  а это два оператора. Мы разыминовываем,
[21:56.000 --> 21:58.000]  потом берем ссылку на содержимое указателя.
[22:00.000 --> 22:02.000]  Ну и все.
[22:02.000 --> 22:04.000]  То есть конкретный тип получается
[22:04.000 --> 22:06.000]  ссылкой на ссылку str.
[22:08.000 --> 22:10.000]  Так, очень важно
[22:10.000 --> 22:12.000]  еще заметить, что
[22:12.000 --> 22:14.000]  вы можете так свободно делать,
[22:14.000 --> 22:16.000]  но если вы будете
[22:16.000 --> 22:18.000]  создавать, например, мьют ссылку, вы должны убедиться в том,
[22:18.000 --> 22:20.000]  что такая мьют-ссылка только одна
[22:20.000 --> 22:22.000]  ульбоминг, например.
[22:22.000 --> 22:24.000]  Если вы создаете мьют-ссылку
[22:24.000 --> 22:26.000]  и вот просто так получилось, что где-то есть вторая
[22:26.000 --> 22:28.000]  ссылка, то это уже instant to back.
[22:28.000 --> 22:30.000]  Потому что это нарушает гарантии
[22:30.000 --> 22:32.000]  раз-то, а раз может полагаться на это
[22:32.000 --> 22:34.000]  при оптимизации, например.
[22:34.000 --> 22:36.000]  Просто может разломать вам код, из-за того,
[22:36.000 --> 22:38.000]  что вы создали вторую мьют-ссылку.
[22:38.000 --> 22:40.000]  Так что
[22:40.000 --> 22:42.000]  очень аккуратно относитесь к XM,
[22:42.000 --> 22:44.000]  когда вы так вот создаете ссылочки.
[22:44.000 --> 22:46.000]  Так, еще есть
[22:46.000 --> 22:48.000]  некоторое различие между указателями
[22:48.000 --> 22:50.000]  и ссылками.
[22:50.000 --> 22:52.000]  Вот ваш однокурсник
[22:52.000 --> 22:54.000]  комментировал первую лекцию
[22:54.000 --> 22:56.000]  и говорил, что
[22:56.000 --> 22:58.000]  ссылки в Rast больше напоминают указатели,
[22:58.000 --> 23:00.000]  а указатели можно класть в вектор.
[23:00.000 --> 23:02.000]  На самом деле это, конечно, не так.
[23:02.000 --> 23:04.000]  Потому что на самом деле ссылки
[23:04.000 --> 23:06.000]  в Rast это то же самое, что ссылки в плюсах,
[23:06.000 --> 23:08.000]  ну, в кавычках.
[23:08.000 --> 23:10.000]  Ссылки в плюсах это не first class object.
[23:10.000 --> 23:12.000]  Они больше похожи на ссылки все-таки плюсовые.
[23:12.000 --> 23:14.000]  Указатели это указатели.
[23:14.000 --> 23:16.000]  Зачем указатели
[23:16.000 --> 23:18.000]  от ссылок отличаются
[23:18.000 --> 23:20.000]  в самом Rast?
[23:20.000 --> 23:22.000]  Это тем, что у ссылок
[23:22.000 --> 23:24.000]  есть lifetime, а указателей его нет.
[23:24.000 --> 23:26.000]  Самое ключевое.
[23:26.000 --> 23:28.000]  Соответственно, раз у нас есть lifetime,
[23:28.000 --> 23:30.000]  то мы в безопасности, раз у нас все проверяет,
[23:30.000 --> 23:32.000]  а когда его нет, уже все,
[23:32.000 --> 23:34.000]  приходится проверять самостоятельно.
[23:34.000 --> 23:36.000]  То, что вы не переживаете объект.
[23:38.000 --> 23:40.000]  Так.
[23:40.000 --> 23:42.000]  О, самое, кажется,
[23:42.000 --> 23:44.000]  сейчас тут будут катерсисы.
[23:44.000 --> 23:46.000]  Смотрите, pointer arithmetic.
[23:46.000 --> 23:48.000]  У нас есть возможность
[23:48.000 --> 23:50.000]  добавлять к указателям
[23:50.000 --> 23:52.000]  и влево-вправо их сдвигать
[23:52.000 --> 23:54.000]  с помощью add и sub.
[23:54.000 --> 23:56.000]  Здесь я делаю add,
[23:56.000 --> 23:58.000]  возвращаю первый элемент, возвращаю второй элемент.
[24:00.000 --> 24:02.000]  Знаете, в чем здесь прикол?
[24:02.000 --> 24:04.000]  В том, что на самом деле мне unsafe пришлось
[24:04.000 --> 24:06.000]  написать не только потому, что я разаменовываю
[24:06.000 --> 24:08.000]  здесь указатель,
[24:08.000 --> 24:10.000]  но и потому, что у меня add это unsafe функция.
[24:10.000 --> 24:12.000]  А почему так?
[24:12.000 --> 24:14.000]  Я же просто добавляю что-то к указателю.
[24:22.000 --> 24:24.000]  Ну объясни, как в плюсах.
[24:24.000 --> 24:26.000]  Ну,
[24:26.000 --> 24:28.000]  если мы
[24:28.000 --> 24:30.000]  сдать arithmetic и указать,
[24:30.000 --> 24:32.000]  получаем указатель, который выходит
[24:32.000 --> 24:34.000]  из границы массива, из которого он был порожден,
[24:34.000 --> 24:36.000]  мы получаем b.
[24:36.000 --> 24:38.000]  Да, мы сейчас даже посмотрим
[24:38.000 --> 24:40.000]  конкретный пример, почему так.
[24:40.000 --> 24:42.000]  Это действительно может привести к b,
[24:42.000 --> 24:44.000]  именно поэтому это unsafe функция.
[24:44.000 --> 24:46.000]  Давайте посмотрим более конкретно.
[24:46.000 --> 24:48.000]  Когда я здесь написал add и sub,
[24:48.000 --> 24:50.000]  я сказал, что у нас
[24:50.000 --> 24:52.000]  указатель, который должен получиться,
[24:52.000 --> 24:54.000]  он должен быть в пределах той же локации.
[24:54.000 --> 24:56.000]  И что значит пределах той же локации?
[24:56.000 --> 24:58.000]  Почему это вообще нас беспокоит?
[25:00.000 --> 25:02.000]  Потому что такие указатели
[25:02.000 --> 25:04.000]  просто неволидны.
[25:04.000 --> 25:06.000]  И любое их использование, вообще любое,
[25:06.000 --> 25:08.000]  не только разаменование, а просто их
[25:08.000 --> 25:10.000]  арифметика,
[25:10.000 --> 25:12.000]  это undefined behavior.
[25:12.000 --> 25:14.000]  Сейчас мы увидим даже конкретный пример.
[25:14.000 --> 25:16.000]  Проблема может быть в том,
[25:16.000 --> 25:18.000]  что компилятор просто решит
[25:18.000 --> 25:20.000]  часть вашего кода удалить
[25:20.000 --> 25:22.000]  на основе того, что у вас указатель
[25:22.000 --> 25:24.000]  вышел за пределы локации.
[25:28.000 --> 25:30.000]  И получается, что мы напишем такой
[25:30.000 --> 25:32.000]  простенький код и отстреливаем себе ногу.
[25:32.000 --> 25:34.000]  В сейф Rasty вы можете
[25:34.000 --> 25:36.000]  чувствовать себя в безопасности,
[25:36.000 --> 25:38.000]  а в AntSafe Rasty уже так не получится.
[25:38.000 --> 25:40.000]  Вам приходится учитывать даже такую штуку.
[25:40.000 --> 25:42.000]  Давайте для примера,
[25:42.000 --> 25:44.000]  чтобы понять, а почему это так,
[25:44.000 --> 25:46.000]  посмотрим на один CI-шный код,
[25:46.000 --> 25:48.000]  в котором компилятор
[25:48.000 --> 25:50.000]  делает три оптимизации и полностью
[25:50.000 --> 25:52.000]  он ломает код.
[25:54.000 --> 25:56.000]  Смотрите,
[25:56.000 --> 25:58.000]  вот у нас есть такой код, и компилятор
[25:58.000 --> 26:00.000]  его хочет прооптимизировать.
[26:06.000 --> 26:08.000]  Что вы о нем думаете?
[26:10.000 --> 26:12.000]  Это просто указатель на uint.
[26:12.000 --> 26:14.000]  Указатель на uint.
[26:42.000 --> 26:45.000]  что-либо, и если вы правильно это определение
[26:45.000 --> 26:47.000]  припоминаете, то тогда вот эта проверка
[26:47.000 --> 26:49.000]  в эфире всегда ложна.
[26:49.000 --> 26:51.000]  То есть проверка в эфире всегда ложна?
[26:51.000 --> 26:53.000]  Да, потому что такой стандарт.
[26:53.000 --> 26:57.000]  Ну, там даже дело чуть-чуть в другом, наверное.
[26:57.000 --> 27:01.000]  Ну да, да, мы сейчас это обсудим.
[27:01.000 --> 27:04.000]  Ну, вообще, сам по себе, если вы не оптимизировать
[27:04.000 --> 27:06.000]  код, вот как он есть, его запустить, дает какой-нибудь
[27:06.000 --> 27:08.000]  УБ или мой вариант СФТ?
[27:09.000 --> 27:12.000]  Ну есть тут УБ, просто скажите мне.
[27:12.000 --> 27:15.000]  Я не оптимизирую, потому что он ноль написал,
[27:15.000 --> 27:17.000]  компилятор скомпилировал ровно то, что увидел,
[27:17.000 --> 27:19.000]  без оптимизации.
[27:22.000 --> 27:24.000]  Мне ку-ноль не нравится.
[27:24.000 --> 27:26.000]  Ку-ноль не нравится?
[27:26.000 --> 27:28.000]  А почему не нравится ку-ноль?
[27:28.000 --> 27:30.000]  Тогда все равно.
[27:30.000 --> 27:32.000]  Наверное.
[27:32.000 --> 27:34.000]  Что такое принц?
[27:34.000 --> 27:36.000]  Принт это просто что-то, что выводит.
[27:37.000 --> 27:40.000]  Ну, если они не равны, то УБ не случилось.
[27:40.000 --> 27:42.000]  И все хорошо.
[27:42.000 --> 27:45.000]  А если они все-таки равны, то...
[27:45.000 --> 27:48.000]  Не, а что, типа, мы вроде даже Алясинга
[27:48.000 --> 27:51.000]  мы не переиспользуем указатели.
[27:51.000 --> 27:54.000]  То есть мы пишем через указатель на ку и читаем
[27:54.000 --> 27:57.000]  через указатель, ну, через ку.
[27:57.000 --> 28:00.000]  Так что, вроде как УБ даже ни в каком сценарии нет.
[28:00.000 --> 28:02.000]  Просто непонятно, что с припроверкой.
[28:02.000 --> 28:05.000]  Да, получается, что с виду УБ никакого нет.
[28:05.000 --> 28:07.000]  Но создали указатель плюс один.
[28:07.000 --> 28:09.000]  Ну, там сравнились.
[28:09.000 --> 28:11.000]  Ну, какая разница?
[28:11.000 --> 28:13.000]  Ну, если равны, ну, код правильный.
[28:13.000 --> 28:15.000]  Если не равны, ну, какая разница?
[28:15.000 --> 28:17.000]  Не зашутим.
[28:17.000 --> 28:20.000]  Да, вообще, такой корректный, прикольный код.
[28:20.000 --> 28:22.000]  Что там?
[28:22.000 --> 28:24.000]  Давайте попробуем оптимизировать.
[28:24.000 --> 28:26.000]  Компилятор такой берет и говорит,
[28:26.000 --> 28:28.000]  раз уж у нас икуровняется ип,
[28:28.000 --> 28:30.000]  когда мы заходим внутрь,
[28:30.000 --> 28:32.000]  в таком случае мы можем
[28:32.000 --> 28:34.000]  заменить ику на ип.
[28:34.000 --> 28:36.000]  И тут все умерло.
[28:37.000 --> 28:39.000]  Ну, почему же они равны?
[28:39.000 --> 28:41.000]  Вот мы, получается, сейчас показываем на ку.
[28:41.000 --> 28:43.000]  Ну, все ж правильно, да?
[28:43.000 --> 28:45.000]  Ну, да.
[28:45.000 --> 28:47.000]  Вот с такой же икой все корректно,
[28:47.000 --> 28:50.000]  и теперь у нас по программе не корректно.
[28:50.000 --> 28:53.000]  Теперь можно стереть эту строчку.
[28:53.000 --> 28:55.000]  Можно стереть...
[28:55.000 --> 28:57.000]  Смотри, мы взяли вместо ику,
[28:57.000 --> 28:59.000]  ну, ику равняется 10,
[28:59.000 --> 29:02.000]  написали, ну, просто ику заменили на ип.
[29:02.000 --> 29:04.000]  Потому что они равны все равно.
[29:04.000 --> 29:06.000]  Ну вот, присвоили 10.
[29:06.000 --> 29:08.000]  Почему?
[29:08.000 --> 29:10.000]  Ну, потому что...
[29:10.000 --> 29:12.000]  Подождите, подождите.
[29:12.000 --> 29:14.000]  У нас еще две оптимизации впереди.
[29:14.000 --> 29:16.000]  Компилятор еще не все сломал.
[29:16.000 --> 29:18.000]  Одна из оптимизаций будет как следствие того,
[29:18.000 --> 29:20.000]  что если этот код оставить как есть,
[29:20.000 --> 29:22.000]  то если программа будет успешной,
[29:22.000 --> 29:24.000]  то это уб.
[29:24.000 --> 29:26.000]  Ну, вообще утверждается, что конкретно вот этот вот код,
[29:26.000 --> 29:28.000]  если опять его запустить без оптимизации,
[29:28.000 --> 29:30.000]  то все опять будет норм.
[29:30.000 --> 29:32.000]  Вот уже не...
[29:32.000 --> 29:34.000]  Еще раз, вы понимаете, что теперь,
[29:34.000 --> 29:36.000]  если программа будет успешной...
[29:36.000 --> 29:38.000]  Ладно, блин, очень плохо, конечно,
[29:38.000 --> 29:40.000]  что Андрей так хорошо шарит.
[29:40.000 --> 29:42.000]  То есть запутать у него не получается.
[29:42.000 --> 29:44.000]  Да, я понимаю, что ты шаришь стандарт.
[29:44.000 --> 29:46.000]  Хорошо, давайте без Андрея.
[29:46.000 --> 29:48.000]  Все остальное я понимаю.
[29:50.000 --> 29:52.000]  Он просто сразу же видит УБ, а так скучно.
[29:52.000 --> 29:54.000]  Ну, потому что я привык так...
[29:56.000 --> 29:58.000]  В общем, кажется, что вроде бы все нормально.
[29:58.000 --> 30:00.000]  П плюс один, оно же указывает
[30:00.000 --> 30:02.000]  у нас на ку сейчас, да?
[30:02.000 --> 30:04.000]  Вроде бы там равно 10, но все хорошо,
[30:04.000 --> 30:06.000]  но вывели 10, все это же точно так же.
[30:06.000 --> 30:08.000]  Потом говорим, после второй оптимизации,
[30:08.000 --> 30:10.000]  ну, у нас тут раунд триб, да?
[30:10.000 --> 30:12.000]  Зачем нам наш УИН ПТР,
[30:12.000 --> 30:14.000]  ну, в общем,
[30:14.000 --> 30:16.000]  вот это вот убрать, да?
[30:16.000 --> 30:18.000]  Зачем надо это убрать?
[30:18.000 --> 30:20.000]  Просто взяли, убрали такие, ну, получается.
[30:20.000 --> 30:22.000]  Просто П плюс один равняется 10.
[30:22.000 --> 30:24.000]  А потом самое веселое.
[30:24.000 --> 30:26.000]  Третья оптимизация.
[30:26.000 --> 30:28.000]  Как говорится, у нас же П и ку
[30:28.000 --> 30:30.000]  это две разные переменные.
[30:30.000 --> 30:32.000]  Получается, ку у нас никак не модифицируется,
[30:32.000 --> 30:34.000]  давайте я просто зафигачу туда ноль.
[30:34.000 --> 30:36.000]  Он же всегда нулем уйти.
[30:36.000 --> 30:38.000]  Он просто не понимает, что П плюс один
[30:38.000 --> 30:40.000]  сейчас на ку указывает.
[30:40.000 --> 30:42.000]  А лессинг не прошел, да?
[30:42.000 --> 30:44.000]  И все, и такой вернул ноль.
[30:44.000 --> 30:46.000]  И получается, что у нас программа, которая
[30:46.000 --> 30:48.000]  никогда не возвращает то же самое,
[30:48.000 --> 30:50.000]  что было исходно.
[30:50.000 --> 30:52.000]  Вот убой-то такое, да.
[30:52.000 --> 30:54.000]  Ну, как-то так,
[30:54.000 --> 30:56.000]  я соптимизировался, то все.
[30:56.000 --> 30:58.000]  Вот когда мы начинаем,
[30:58.000 --> 31:00.000]  вот какая из этих оптимизаций некорректна?
[31:02.000 --> 31:04.000]  У нас же исходный ку вроде бы работал,
[31:04.000 --> 31:06.000]  чисто в теории.
[31:06.000 --> 31:08.000]  Все корректно.
[31:08.000 --> 31:10.000]  Все оптимизация корректна.
[31:10.000 --> 31:12.000]  Ладно, вы все очень умные, говорите, все оптимизация корректна.
[31:12.000 --> 31:14.000]  Это действительно правда, компилятор бесконечно прав.
[31:16.000 --> 31:18.000]  Это неправ программист.
[31:18.000 --> 31:20.000]  Давайте дойдем до этого.
[31:20.000 --> 31:22.000]  Могли бы подумать о последней оптимизации, да?
[31:22.000 --> 31:24.000]  Ну, последней оптимизации типа ноль вставили,
[31:24.000 --> 31:26.000]  и вот у нас все окончательно поломалось.
[31:26.000 --> 31:28.000]  Ну, так и лессинг тоже.
[31:28.000 --> 31:30.000]  Ну, все потому что вот лессинг, компилятор
[31:30.000 --> 31:32.000]  думает, что у нас
[31:32.000 --> 31:34.000]  ку и п это разные вещи.
[31:34.000 --> 31:36.000]  Ну, оказывается, что это ошибка
[31:36.000 --> 31:38.000]  программиста, потому что он зараза сделал
[31:38.000 --> 31:40.000]  и П плюс один указатель сделал, и еще сравнился
[31:40.000 --> 31:42.000]  у него с Катином.
[31:42.000 --> 31:44.000]  Как стандарт мог?
[31:44.000 --> 31:46.000]  Ну, компилятор просто взял и
[31:46.000 --> 31:48.000]  все по стандарту.
[31:52.000 --> 31:54.000]  Ну, то есть у нас есть П плюс один,
[31:54.000 --> 31:56.000]  он не верит в том, что у нас
[31:56.000 --> 31:58.000]  П плюс один может вызвать
[31:58.000 --> 32:00.000]  и лессинг, и все.
[32:00.000 --> 32:02.000]  Да, это реально кейс, ты можешь компилировать код.
[32:02.000 --> 32:04.000]  По-моему, там С можно указывать
[32:04.000 --> 32:06.000]  на один элемент
[32:06.000 --> 32:08.000]  после массива. И в С в местах можно,
[32:08.000 --> 32:10.000]  но, во-первых, это нельзя разуменовывать, во-вторых...
[32:10.000 --> 32:12.000]  Мышка
[32:12.000 --> 32:14.000]  IP указывается, поэтому я не разуменовал
[32:14.000 --> 32:16.000]  П плюс один.
[32:16.000 --> 32:18.000]  Ну, мы указали
[32:18.000 --> 32:20.000]  на элемент за массив.
[32:20.000 --> 32:22.000]  Да, это мы не разуменовываем.
[32:22.000 --> 32:24.000]  Это еще хорошо.
[32:24.000 --> 32:26.000]  Но при этом у нас...
[32:28.000 --> 32:30.000]  В этом такове все было правильно.
[32:30.000 --> 32:32.000]  Он был корректен до оптимизации.
[32:34.000 --> 32:36.000]  Понимаешь, он просто по стандарту
[32:36.000 --> 32:38.000]  не понимает, что П плюс один
[32:38.000 --> 32:40.000]  указывает на один больше, он думает, что
[32:40.000 --> 32:42.000]  алиасинга нет, что ты не модифицируешь.
[32:42.000 --> 32:44.000]  Некорректно разуменовывать,
[32:44.000 --> 32:46.000]  а он просто берет, и за счет
[32:46.000 --> 32:48.000]  того, что здесь есть странность, то думает, что это
[32:48.000 --> 32:50.000]  корректно заменить икона IP.
[32:50.000 --> 32:52.000]  Если у нас в ходе нет УБ,
[32:52.000 --> 32:54.000]  у нас есть гарантия, что оптимизатор
[32:54.000 --> 32:56.000]  ничего не сломает.
[32:56.000 --> 32:58.000]  И вот, значит, если оптимизатор сломал...
[32:58.000 --> 33:00.000]  У нас есть УБ, мы взяли ИП, создали.
[33:00.000 --> 33:02.000]  Смотри, мы создали, во-первых, УП,
[33:02.000 --> 33:04.000]  а потом сравнились с ним.
[33:04.000 --> 33:06.000]  С другим куском памяти.
[33:06.000 --> 33:08.000]  Это два разных куска памяти,
[33:08.000 --> 33:10.000]  которые не алисицы, и мы взяли
[33:10.000 --> 33:12.000]  УБ, получим.
[33:12.000 --> 33:14.000]  Ну вот там действительно...
[33:14.000 --> 33:16.000]  Ну да, вот на самом деле...
[33:16.000 --> 33:18.000]  Сейчас, а у Бэли это прям...
[33:18.000 --> 33:20.000]  Вопрос веселый, просто потому,
[33:20.000 --> 33:22.000]  что когда-то сравнить-то,
[33:22.000 --> 33:24.000]  типа, можно?
[33:24.000 --> 33:26.000]  Нет, там нельзя сравнить. Там, типа, можно
[33:26.000 --> 33:28.000]  сравнить исключение в пределах
[33:28.000 --> 33:30.000]  адрилотации.
[33:30.000 --> 33:32.000]  Давайте не посадить.
[33:34.000 --> 33:36.000]  Как вариант.
[33:36.000 --> 33:38.000]  Там не только иксминский страдает, там и сравнение еще на фиге.
[33:38.000 --> 33:40.000]  Тут не только П плюс один,
[33:40.000 --> 33:42.000]  тут как бы создать
[33:42.000 --> 33:44.000]  этот указатель, который выходит
[33:44.000 --> 33:46.000]  на один байт, ну то есть
[33:46.000 --> 33:48.000]  в пределах той же аллокации
[33:48.000 --> 33:50.000]  и плюс один байт можно, но тут
[33:50.000 --> 33:52.000]  проблема в том, что мы сравнились
[33:52.000 --> 33:54.000]  с чем-то, что является другой аллокацией.
[33:54.000 --> 33:56.000]  Сью уже такое все дальше
[33:56.000 --> 33:58.000]  по стандарту сделал, и все.
[33:58.000 --> 34:00.000]  И все сломал.
[34:02.000 --> 34:04.000]  У нас нет еще проблем
[34:04.000 --> 34:06.000]  с неравняемым или...
[34:06.000 --> 34:08.000]  Мы уже там
[34:08.000 --> 34:10.000]  П издвигали на один байт.
[34:10.000 --> 34:12.000]  Формально.
[34:12.000 --> 34:14.000]  Ну, на один байт, да.
[34:14.000 --> 34:16.000]  А в чем проблема?
[34:16.000 --> 34:18.000]  Ну, чара как бы
[34:18.000 --> 34:20.000]  по одному байту.
[34:20.000 --> 34:22.000]  Чара почти, наверное, выравнивает не один,
[34:22.000 --> 34:24.000]  хотя кажется, он так даже...
[34:24.000 --> 34:26.000]  Чар, по-моему, даже один четко говорит.
[34:26.000 --> 34:28.000]  Указатель на
[34:28.000 --> 34:30.000]  инсайн-интеллект.
[34:30.000 --> 34:32.000]  Нет, Uint-ptr — это именно Uint,
[34:32.000 --> 34:34.000]  в который можно записать
[34:34.000 --> 34:36.000]  А, все, окей.
[34:36.000 --> 34:38.000]  Это чуть-чуть другое.
[34:38.000 --> 34:40.000]  Ну, вот
[34:40.000 --> 34:42.000]  возможно это пригодится
[34:42.000 --> 34:44.000]  на конкуренцию.
[34:48.000 --> 34:50.000]  Наверное, вас это сильно испугало.
[34:50.000 --> 34:52.000]  Взяли такие, сделали чуть-чуть что-то не так
[34:52.000 --> 34:54.000]  и нога отстрелилась.
[34:54.000 --> 34:56.000]  Наверное, нам очень страшно
[34:56.000 --> 34:58.000]  теперь писать сейф-код после этого.
[34:58.000 --> 35:00.000]  Ну, давайте еще посмотрим
[35:00.000 --> 35:02.000]  на MemTransmute.
[35:02.000 --> 35:04.000]  MemTransmute — это такая
[35:04.000 --> 35:06.000]  штука, которая берет
[35:06.000 --> 35:08.000]  произвольные типы,
[35:08.000 --> 35:10.000]  просто
[35:10.000 --> 35:12.000]  произвольные данные
[35:12.000 --> 35:14.000]  произвольного типа
[35:14.000 --> 35:16.000]  и перевозит их в другой тип.
[35:16.000 --> 35:18.000]  Например, в данном примере я беру указатель,
[35:18.000 --> 35:20.000]  который был на просто какой-то
[35:20.000 --> 35:22.000]  юнион, то есть
[35:22.000 --> 35:24.000]  указатель на константный юнион,
[35:24.000 --> 35:26.000]  поменял его на указатель на функцию
[35:26.000 --> 35:28.000]  и успешно вызвал. То есть Transmute — это
[35:28.000 --> 35:30.000]  Reinterpret
[35:30.000 --> 35:32.000]  Reinterpret
[35:32.000 --> 35:34.000]  Reinterpret the cast, вот так
[35:34.000 --> 35:36.000]  в писах.
[35:38.000 --> 35:40.000]  Блин, так, конечно, формально получается указатель
[35:40.000 --> 35:42.000]  на констант-воид.
[35:42.000 --> 35:44.000]  Реально поприсовывался.
[35:44.000 --> 35:46.000]  Ну, короче, это все
[35:46.000 --> 35:48.000]  бесконечная, небезопасная
[35:48.000 --> 35:50.000]  вещь. Ну, Transmute —
[35:50.000 --> 35:52.000]  наверное, самое небезопасное, что вы можете делать,
[35:52.000 --> 35:54.000]  потому что если
[35:54.000 --> 35:56.000]  вы Transmute делаете некорректно,
[35:56.000 --> 35:58.000]  то есть, например, во время Transmute
[35:58.000 --> 36:00.000]  у вас получается объект,
[36:00.000 --> 36:02.000]  у которого
[36:02.000 --> 36:04.000]  некорректное состояние. Ну, например,
[36:04.000 --> 36:06.000]  вы перевели U8
[36:06.000 --> 36:08.000]  в bool, и при этом U8
[36:08.000 --> 36:10.000]  имел значение
[36:10.000 --> 36:12.000]  ни 0, ни 1, а, допустим, 2.
[36:12.000 --> 36:14.000]  А bool не может иметь 2. И, соответственно,
[36:14.000 --> 36:16.000]  в этот момент вы получили instantUb просто.
[36:18.000 --> 36:20.000]  Что уже очень плохо.
[36:20.000 --> 36:22.000]  Поэтому
[36:22.000 --> 36:24.000]  Transmute'ом нужно быть аккуратным
[36:24.000 --> 36:26.000]  и проверять все инварианты,
[36:26.000 --> 36:28.000]  когда вы его делаете.
[36:28.000 --> 36:30.000]  Единственная верификация,
[36:30.000 --> 36:32.000]  которую он делает сам по себе, Transmute,
[36:32.000 --> 36:34.000]  это проверяет то, что у ТИУ
[36:34.000 --> 36:36.000]  одинаковый размер. Но если не одинаковый, значит,
[36:36.000 --> 36:38.000]  уже по умолчанию все плохо
[36:38.000 --> 36:40.000]  и что-то делать не так.
[36:42.000 --> 36:44.000]  Ну, вот то, что я сказал.
[36:46.000 --> 36:48.000]  Три, которые у 8, типа,
[36:48.000 --> 36:50.000]  нельзя в bool переносить, даже если вы ничего
[36:50.000 --> 36:52.000]  не делаете с bool'ом.
[36:52.000 --> 36:54.000]  А Transmute выключает значение?
[36:54.000 --> 36:56.000]  Да, Transmute
[36:56.000 --> 36:58.000]  просто пожирает твой pointer,
[36:58.000 --> 37:00.000]  делает новый pointer в данном случае.
[37:04.000 --> 37:06.000]  Мне нравится
[37:06.000 --> 37:08.000]  намекон здесь,
[37:08.000 --> 37:10.000]  в этом месте.
[37:10.000 --> 37:12.000]  Вы не можете это сделать.
[37:12.000 --> 37:14.000]  Нет, вы точно не можете это сделать. Нет, вы не особенные.
[37:14.000 --> 37:16.000]  Три раза подряд.
[37:20.000 --> 37:22.000]  Вместо i32, i64?
[37:24.000 --> 37:26.000]  Вместо i32, i64?
[37:32.000 --> 37:34.000]  Во-первых, если i32, i64
[37:34.000 --> 37:36.000]  приводить, то у тебя разный размер у них.
[37:36.000 --> 37:38.000]  Transmute не скомпилируется.
[37:40.000 --> 37:42.000]  А, сейчас, подожди.
[37:44.000 --> 37:46.000]  Третья строчка снизу,
[37:46.000 --> 37:48.000]  вместо i32, i64.
[37:48.000 --> 37:50.000]  Нет, это ни на что не повлияет.
[37:50.000 --> 37:52.000]  Это просто указатель
[37:52.000 --> 37:54.000]  на функцию, где-то на какой-то кусок byte.
[37:56.000 --> 37:58.000]  Только ее уже вызывать, кажется,
[37:58.000 --> 38:00.000]  это уб, потому что
[38:00.000 --> 38:02.000]  функции с таким типом-то у нас нет.
[38:04.000 --> 38:06.000]  А, то есть в плане fn.
[38:06.000 --> 38:08.000]  А, я понял, что здесь поменять, а вот здесь не менять.
[38:08.000 --> 38:10.000]  Ну, тогда это уб.
[38:12.000 --> 38:14.000]  Потому что, когда ты будешь вызывать,
[38:14.000 --> 38:16.000]  в таком случае будешь думать,
[38:16.000 --> 38:18.000]  что получается 42,
[38:18.000 --> 38:20.000]  которая i64,
[38:20.000 --> 38:22.000]  я оказал, что это i32.
[38:22.000 --> 38:24.000]  У тебя просто type mismatch с разными размерами,
[38:24.000 --> 38:26.000]  и это убы.
[38:26.000 --> 38:28.000]  На уровне куда гено?
[38:28.000 --> 38:30.000]  Ты этот регистр прочитал?
[38:30.000 --> 38:32.000]  Регистр большой.
[38:32.000 --> 38:34.000]  Ну, ты вместо ex и rax прочитал,
[38:34.000 --> 38:36.000]  а там, короче, organic.
[38:36.000 --> 38:38.000]  Ну, вот так, блин.
[38:38.000 --> 38:40.000]  Я почти выяснил.
[38:40.000 --> 38:42.000]  Регистр очень большой.
[38:42.000 --> 38:44.000]  Я думаю,
[38:44.000 --> 38:46.000]  что активизатор LVM
[38:46.000 --> 38:48.000]  может тысячу и одним способом объяснить,
[38:48.000 --> 38:50.000]  почему он этого не делает.
[38:50.000 --> 38:52.000]  Не, вообще, если так сделать,
[38:52.000 --> 38:54.000]  я думаю, комператор найдет тысячу и один способ
[38:54.000 --> 38:56.000]  это сломать.
[38:58.000 --> 39:00.000]  Еще, например,
[39:00.000 --> 39:02.000]  если вы ссылку в mute-ссылку,
[39:02.000 --> 39:04.000]  всегда это уб. Даже если у вас mute-ссылки не было,
[39:04.000 --> 39:06.000]  если вы это сделали, то это сразу уб.
[39:06.000 --> 39:08.000]  Instantly.
[39:08.000 --> 39:10.000]  Почему уб?
[39:10.000 --> 39:12.000]  Подожди, это мастер,
[39:12.000 --> 39:14.000]  если мастер 32
[39:14.000 --> 39:16.000]  у int и
[39:16.000 --> 39:18.000]  у int 32,
[39:18.000 --> 39:20.000]  а он скрипилируется или нет?
[39:20.000 --> 39:22.000]  Он скрипилируется.
[39:22.000 --> 39:24.000]  У int и 32 сравнить в ассерте?
[39:24.000 --> 39:26.000]  В всей фрасте?
[39:26.000 --> 39:28.000]  Это безопасно.
[39:28.000 --> 39:30.000]  Он просто, правда, может сказать,
[39:30.000 --> 39:32.000]  что разные типы.
[39:32.000 --> 39:34.000]  И я не хочу это компилировать.
[39:34.000 --> 39:36.000]  Если он скрипилируется, то в идее
[39:36.000 --> 39:38.000]  тот ход даже скрипилируется.
[39:38.000 --> 39:40.000]  Ну, это в большом случае, да.
[39:40.000 --> 39:42.000]  Вот эту штуку разве нельзя проверить?
[39:44.000 --> 39:46.000]  Ссылку в ссылку на mute?
[39:48.000 --> 39:50.000]  Наверное, можно,
[39:50.000 --> 39:52.000]  но наверняка есть какие-то хитрые
[39:52.000 --> 39:54.000]  ситуации.
[39:54.000 --> 39:56.000]  Наверное, нет, потому что ты держишь одну шейф-ссылку
[39:56.000 --> 39:58.000]  и все, что ты знаешь,
[39:58.000 --> 40:00.000]  это то, что могут быть
[40:00.000 --> 40:02.000]  другие шейф-ссылки непонятно где.
[40:02.000 --> 40:04.000]  У тебя появляется mute-ссылка.
[40:06.000 --> 40:08.000]  Ты разломал просто
[40:08.000 --> 40:10.000]  то, что система типов получается.
[40:10.000 --> 40:12.000]  Чисто в теории компилятор
[40:12.000 --> 40:14.000]  мог бы, наверное, как-то с этим поработать,
[40:14.000 --> 40:16.000]  но...
[40:16.000 --> 40:18.000]  Это сложное что-то.
[40:18.000 --> 40:20.000]  Наверное, нет смысла
[40:20.000 --> 40:22.000]  никакого просто это делать.
[40:26.000 --> 40:28.000]  Будучи более конкретно,
[40:28.000 --> 40:30.000]  если вы
[40:30.000 --> 40:32.000]  создаете тип T, который у вас
[40:32.000 --> 40:34.000]  невалиден, то в том случае это UB,
[40:34.000 --> 40:36.000]  потому что, раз, всегда надеется на то,
[40:36.000 --> 40:38.000]  что у вас тип T, который получается
[40:38.000 --> 40:40.000]  в любом ментремене, он корректный.
[40:40.000 --> 40:42.000]  Даже в unsafe-коде.
[40:42.000 --> 40:44.000]  Да, но это, конечно, для mem-take,
[40:44.000 --> 40:46.000]  который не может просто взять
[40:46.000 --> 40:48.000]  и оставить не теоризированно.
[40:48.000 --> 40:50.000]  Неприятно.
[40:50.000 --> 40:52.000]  Ну, mem-take, ну да-да, нужно чем-то заменить.
[40:52.000 --> 40:54.000]  Получается.
[40:54.000 --> 40:56.000]  Еще есть Transpute-копия.
[40:56.000 --> 40:58.000]  Но это как Transpute,
[40:58.000 --> 41:00.000]  но только на этот раз он еще более небезопасен
[41:00.000 --> 41:02.000]  и говорит, я не буду даже проверять,
[41:02.000 --> 41:04.000]  что у ET одинаковых размеров.
[41:04.000 --> 41:06.000]  Вместо этого возьмет тогда
[41:06.000 --> 41:08.000]  ваш T,
[41:08.000 --> 41:10.000]  создаст
[41:10.000 --> 41:12.000]  побольше
[41:12.000 --> 41:14.000]  копию, выделит какое-то
[41:14.000 --> 41:16.000]  число байтов побольше под U
[41:16.000 --> 41:18.000]  или поменьше, и переведет
[41:18.000 --> 41:20.000]  T в U.
[41:20.000 --> 41:22.000]  Ну и, естественно, проблемка будет, если
[41:22.000 --> 41:24.000]  U было больше, чем T.
[41:24.000 --> 41:26.000]  Ну, в плюсах взяли
[41:26.000 --> 41:28.000]  лучше. Они взяли проверку
[41:28.000 --> 41:30.000]  размера по Transpute, взяли копирование
[41:30.000 --> 41:32.000]  Transpute-копии и получили биткаст.
[41:34.000 --> 41:36.000]  Приходим обратно в плюсы, короче.
[41:36.000 --> 41:38.000]  Да, это, конечно, очень полезно делать
[41:38.000 --> 41:40.000]  касты такие.
[41:40.000 --> 41:42.000]  Не, мне кажется, что
[41:42.000 --> 41:44.000]  такой код целом не нужно писать.
[41:44.000 --> 41:46.000]  Не нужно Transpute'ом пользоваться.
[41:46.000 --> 41:48.000]  Не, касты в какой-то смысл есть, потому что вот этот
[41:48.000 --> 41:50.000]  трюк с юнионом, который был
[41:50.000 --> 41:52.000]  на аквасе, он в плюсах, в общем-то, работает.
[41:52.000 --> 41:54.000]  Ну, это UBA, и нужно использовать
[41:54.000 --> 41:56.000]  либо mem-cp, либо биткаст
[41:56.000 --> 41:58.000]  более цивильно.
[41:58.000 --> 42:00.000]  А иначе...
[42:00.000 --> 42:02.000]  Вообще, Transpute нужно пользоваться только тогда, когда
[42:02.000 --> 42:04.000]  вы хотите структурки
[42:04.000 --> 42:06.000]  приводить одну в другую
[42:06.000 --> 42:08.000]  просто с нулевой
[42:08.000 --> 42:10.000]  стоимости, так сказать, zero cost.
[42:12.000 --> 42:14.000]  Ну, он же все-таки что-то копирует,
[42:14.000 --> 42:16.000]  представляет местами, так что
[42:16.000 --> 42:18.000]  может создавать все равно новый объект.
[42:18.000 --> 42:20.000]  А Transpute это про то,
[42:20.000 --> 42:22.000]  чтобы просто битки по-другому
[42:22.000 --> 42:24.000]  переинтерпретировать.
[42:26.000 --> 42:28.000]  Как так?
[42:28.000 --> 42:30.000]  У нас есть еще неинциализированная память.
[42:30.000 --> 42:32.000]  Это же очень небезопасная вещь, Растя.
[42:32.000 --> 42:34.000]  Получишь все понятно
[42:34.000 --> 42:36.000]  по прошлому баллу.
[42:38.000 --> 42:40.000]  Сейчас Transpute.
[42:40.000 --> 42:42.000]  У нас же вроде нет гарантий
[42:42.000 --> 42:44.000]  о порядке полей в структурах.
[42:44.000 --> 42:46.000]  То есть мы о них ничего не знаем.
[42:46.000 --> 42:48.000]  В чем смысл делать Transpute в мире?
[42:48.000 --> 42:50.000]  Если мы не понимаем, что будет происходить.
[42:50.000 --> 42:52.000]  Это действительно тактика.
[42:52.000 --> 42:54.000]  Это правда в том, что если у тебя есть две структурки
[42:54.000 --> 42:56.000]  репораст, то есть
[42:56.000 --> 42:58.000]  по умолчанию, в таком случае Transpute одно в другое,
[42:58.000 --> 43:00.000]  а Transpute ты вообще не знаешь, что произойдет.
[43:00.000 --> 43:02.000]  Конечно, в итоге.
[43:02.000 --> 43:04.000]  Большая суть есть в этом,
[43:04.000 --> 43:06.000]  если ты репорси используешь.
[43:06.000 --> 43:08.000]  Тогда ты точно знаешь, что они будут в порядке
[43:08.000 --> 43:10.000]  в том, в котором ты их объявил,
[43:10.000 --> 43:12.000]  какой у них будет паддинг между собой.
[43:12.000 --> 43:14.000]  Подключевое словарие.
[43:14.000 --> 43:16.000]  Да, там просто пишешь решетку RapporC
[43:16.000 --> 43:18.000]  сверху.
[43:18.000 --> 43:20.000]  Я хотел, кстати, об этом рассказать,
[43:20.000 --> 43:22.000]  но там было как-то очень мало,
[43:22.000 --> 43:24.000]  и это бы заняло все равно пару минут.
[43:24.000 --> 43:26.000]  Примерно.
[43:28.000 --> 43:30.000]  Так.
[43:30.000 --> 43:32.000]  Да, вам хочется
[43:32.000 --> 43:34.000]  сохранять значение, которое невалидно
[43:34.000 --> 43:36.000]  для текущего типа.
[43:36.000 --> 43:38.000]  Да, например, вектор.
[43:38.000 --> 43:40.000]  Огромный, неинциализированный кусок памяти.
[43:40.000 --> 43:42.000]  Просто.
[43:44.000 --> 43:46.000]  Ну, например, один из примеров
[43:46.000 --> 43:48.000]  это когда вы хотите под какой-то
[43:48.000 --> 43:50.000]  T лоцировать огромный чанк памяти
[43:50.000 --> 43:52.000]  и после этого прочитать
[43:52.000 --> 43:54.000]  байты на, например, сети в него.
[43:54.000 --> 43:56.000]  То есть вам не нужно там
[43:56.000 --> 43:58.000]  внулять, например, этот кусок памяти
[43:58.000 --> 44:00.000]  или что-нибудь в этом духе.
[44:00.000 --> 44:02.000]  Вы хотите просто инициализированный кусок памяти
[44:02.000 --> 44:04.000]  и постепенно его инициализировать.
[44:06.000 --> 44:08.000]  Обычно мы используем
[44:08.000 --> 44:10.000]  для этого Maybe I'm in it в Rast.
[44:10.000 --> 44:12.000]  Даже необычно я использую Maybe I'm in it.
[44:12.000 --> 44:14.000]  Это такая структурка,
[44:14.000 --> 44:16.000]  которая из себя просто представляет
[44:16.000 --> 44:18.000]  внутри находящийся T.
[44:18.000 --> 44:20.000]  То, что она делает,
[44:20.000 --> 44:22.000]  она в точности T внутри себя содержит,
[44:22.000 --> 44:24.000]  но при этом Rast
[44:24.000 --> 44:26.000]  никаких предположений о том,
[44:26.000 --> 44:28.000]  в каком именно состоянии внутри
[44:28.000 --> 44:30.000]  находится T, не делает.
[44:30.000 --> 44:32.000]  Например, если у вас будет Maybe I'm in it Bool,
[44:32.000 --> 44:34.000]  в таком случае Rast не будет делать предположений,
[44:34.000 --> 44:36.000]  что внутри обязательно 0 и обязательно 1.
[44:36.000 --> 44:38.000]  У вас там может быть
[44:38.000 --> 44:40.000]  150, например, значение
[44:40.000 --> 44:42.000]  и оно будет корректно
[44:42.000 --> 44:44.000]  для Maybe I'm in it.
[44:46.000 --> 44:48.000]  Вот есть такие вот три основные методы,
[44:48.000 --> 44:50.000]  которые там есть.
[44:50.000 --> 44:52.000]  Aninit это создает новый
[44:52.000 --> 44:54.000]  Maybe I'm in it, в котором не обязательно
[44:54.000 --> 44:56.000]  какие-то байты определенным образом заполнены.
[44:58.000 --> 45:00.000]  В общем, вы не можете внутри полагаться
[45:00.000 --> 45:02.000]  на содержание.
[45:02.000 --> 45:04.000]  New это Maybe I'm in it, в котором
[45:04.000 --> 45:06.000]  есть конкретное значение типа T уже.
[45:06.000 --> 45:08.000]  А еще есть Assume I'm in it,
[45:08.000 --> 45:10.000]  это когда вы уже
[45:10.000 --> 45:12.000]  Maybe I'm in it привозите конкретный T.
[45:12.000 --> 45:14.000]  То есть когда вы уже уверены в том,
[45:14.000 --> 45:16.000]  что он инициализирован
[45:16.000 --> 45:18.000]  и можете его перевести дальше.
[45:18.000 --> 45:20.000]  Давайте посмотрим чисто например,
[45:20.000 --> 45:22.000]  чтобы разобраться, о чем я говорю.
[45:24.000 --> 45:26.000]  Попробуем создать массивчик
[45:26.000 --> 45:28.000]  и постепенно его заполнить.
[45:28.000 --> 45:30.000]  Ну вот у нас есть какой-то MyType.
[45:30.000 --> 45:32.000]  MyType не важно какой, ну какая-то структурка.
[45:34.000 --> 45:36.000]  Во-первых, до начала понимаете ли вы вот эту вот
[45:36.000 --> 45:38.000]  строщу, самую первую?
[45:38.000 --> 45:40.000]  Как она работает?
[45:46.000 --> 45:48.000]  Что еще раз?
[45:50.000 --> 45:52.000]  Она говорит о том, что мы предполагаем,
[45:52.000 --> 45:54.000]  что значение bern, которое Maybe I'm in it
[45:54.000 --> 45:56.000]  хранится.
[45:56.000 --> 45:58.000]  Ну вот конкретно вот так вот я могу
[45:58.000 --> 46:00.000]  написать, потому что у нас очень умный
[46:00.000 --> 46:02.000]  Type Inference, он смотрит, что в конце после
[46:02.000 --> 46:04.000]  того, как я сделаю Assume I'm in it,
[46:04.000 --> 46:06.000]  мне должен получиться вот такой вот массивчик
[46:06.000 --> 46:08.000]  из Maybe I'm in it типа.
[46:08.000 --> 46:10.000]  Соответственно, то, что должно быть
[46:10.000 --> 46:12.000]  вот на этом вот этапе, это
[46:12.000 --> 46:14.000]  Maybe I'm in it от вот этого вот массива.
[46:14.000 --> 46:16.000]  Он это выведет и
[46:16.000 --> 46:18.000]  соответственно у нас будет
[46:18.000 --> 46:20.000]  такой вот тип,
[46:20.000 --> 46:22.000]  как бы его рассахали сверху.
[46:26.000 --> 46:28.000]  Ну и у него пишется Assume I'm in it,
[46:28.000 --> 46:30.000]  и получается соответственно такой вот массив.
[46:30.000 --> 46:32.000]  Из Maybe I'm in it типа.
[46:32.000 --> 46:34.000]  Неинтересированный массив, абсолютно.
[46:34.000 --> 46:36.000]  Потом мы интервируемся по этому массивчику,
[46:36.000 --> 46:38.000]  ну и каждому элементу присваиваем
[46:38.000 --> 46:40.000]  Maybe I'm in it new,
[46:40.000 --> 46:42.000]  он создает какое-то новое значение,
[46:42.000 --> 46:44.000]  корректное уже,
[46:44.000 --> 46:46.000]  и записывает его в элементы.
[46:46.000 --> 46:48.000]  И смотрите, в конце мне нужно
[46:48.000 --> 46:50.000]  использовать MinTranspute.
[46:50.000 --> 46:52.000]  Я перевожу свой
[46:52.000 --> 46:54.000]  текущий массивчик,
[46:54.000 --> 46:56.000]  я вот здесь этот тип конкретно не прописал,
[46:56.000 --> 46:58.000]  просто сделал так, чтобы Растов вывел за меня,
[46:58.000 --> 47:00.000]  и сказал, что хочу его привести в массив
[47:00.000 --> 47:02.000]  из MyType 256.
[47:04.000 --> 47:06.000]  Понятно ли, что тут
[47:06.000 --> 47:08.000]  происходит?
[47:08.000 --> 47:10.000]  Maybe I'm in it, это грубо говоря,
[47:10.000 --> 47:12.000]  такой контейнер, в котором
[47:12.000 --> 47:14.000]  не обязательно
[47:14.000 --> 47:16.000]  битики устроены правильным образом для t.
[47:22.000 --> 47:24.000]  Нет, в этом коде его нет.
[47:26.000 --> 47:28.000]  Ну, вообще, потенциально сейчас
[47:28.000 --> 47:30.000]  обсудим, потенциально здесь есть memory leak,
[47:30.000 --> 47:32.000]  если MyType
[47:32.000 --> 47:34.000]  это какой-то тип, который что-то
[47:34.000 --> 47:36.000]  алоцирует на стеке, например, Tabox.
[47:36.000 --> 47:38.000]  Просто может быть такое,
[47:38.000 --> 47:40.000]  что в процессе Calculate,
[47:40.000 --> 47:42.000]  там, допустим,
[47:42.000 --> 47:44.000]  на 10-м элементе у нас паника выкидывается,
[47:44.000 --> 47:46.000]  а Maybe I'm in it
[47:46.000 --> 47:48.000]  он на самом деле не дропает
[47:48.000 --> 47:50.000]  свое содержимое, потому что он не знает ничего
[47:50.000 --> 47:52.000]  о содержимом, он не знает корректно,
[47:52.000 --> 47:54.000]  все, что он может сделать, просто уйти.
[47:54.000 --> 47:56.000]  Ничего он делать не может этим.
[47:56.000 --> 47:58.000]  Соответственно, у нас первые 10 элементов
[47:58.000 --> 48:00.000]  не будут никак
[48:00.000 --> 48:02.000]  проницилизированы,
[48:02.000 --> 48:04.000]  не будут дропнуты, и у нас будет
[48:04.000 --> 48:06.000]  memory leak. Поэтому нужно
[48:06.000 --> 48:08.000]  аккуратненько это учитывать.
[48:12.000 --> 48:14.000]  Так.
[48:14.000 --> 48:16.000]  Вот есть у нас
[48:16.000 --> 48:18.000]  вот такая вот
[48:18.000 --> 48:20.000]  особенность.
[48:20.000 --> 48:22.000]  Можем создать Maybe I'm in it box
[48:24.000 --> 48:26.000]  и после этого, смотрите, я создаю
[48:26.000 --> 48:28.000]  as.mute.ptr, который возвращает
[48:28.000 --> 48:30.000]  mute.t
[48:30.000 --> 48:32.000]  и пытаюсь по нему записать box.
[48:32.000 --> 48:34.000]  Понимаете ли вы проблему,
[48:34.000 --> 48:36.000]  которая здесь возникает?
[48:42.000 --> 48:44.000]  Наверное, все-таки не понимаете, потому что
[48:44.000 --> 48:46.000]  я вам бы этого не сказал, но
[48:46.000 --> 48:48.000]  когда вы записываете что-то по указателю,
[48:48.000 --> 48:50.000]  мы же берем указатель, разыминовываем, записываем
[48:50.000 --> 48:52.000]  в него box. Казалось бы, все хорошо.
[48:52.000 --> 48:54.000]  А что делать со старым значением?
[48:54.000 --> 48:56.000]  Да, что делать со старым значением?
[48:56.000 --> 48:58.000]  Указатель по умолчанию считает, что если его разыминовали,
[48:58.000 --> 49:00.000]  что-то от него записали, значит на объекте, который был
[49:00.000 --> 49:02.000]  до этого на старом значении, нужно вызвать drop.
[49:02.000 --> 49:04.000]  А у нас же
[49:04.000 --> 49:06.000]  Maybe I'm in it, он не знает ни о чем.
[49:06.000 --> 49:08.000]  И получается, что мы получили
[49:08.000 --> 49:10.000]  уб просто так. Мы представимся прямо сейчас
[49:10.000 --> 49:12.000]  на неинциализированной памяти
[49:12.000 --> 49:14.000]  вызвать drop.
[49:20.000 --> 49:22.000]  Поэтому если вы хотите от этого
[49:22.000 --> 49:24.000]  избавиться, то в таком случае вам нужно использовать
[49:24.000 --> 49:26.000]  STDPTR модуль.
[49:26.000 --> 49:28.000]  Он вам позволяет, например, STDPTR
[49:28.000 --> 49:30.000]  write использовать.
[49:30.000 --> 49:32.000]  То есть записать просто сырые байтики
[49:32.000 --> 49:34.000]  по указателю, никаких drop не вызвать.
[49:36.000 --> 49:38.000]  Ну, например,
[49:38.000 --> 49:40.000]  есть прям
[49:40.000 --> 49:42.000]  пример.
[49:48.000 --> 49:50.000]  Разыминовал и разломался.
[49:50.000 --> 49:52.000]  Получило бы.
[49:54.000 --> 49:56.000]  Большую часть времени вам все-таки хочется,
[49:56.000 --> 49:58.000]  когда вы разыминовываете указатель, drop
[49:58.000 --> 50:00.000]  то, что там есть по содержимому.
[50:00.000 --> 50:02.000]  Иногда, когда вы пользуетесь неинциализированной памяти,
[50:02.000 --> 50:04.000]  то у вас там оказывается неинциализированная память,
[50:04.000 --> 50:06.000]  и это нужно получать.
[50:06.000 --> 50:08.000]  Вот.
[50:08.000 --> 50:10.000]  Ну, есть STDPTR write, есть STDPTR copy,
[50:10.000 --> 50:12.000]  который аналогичен
[50:12.000 --> 50:14.000]  MemMove. То есть просто
[50:14.000 --> 50:16.000]  копирует SRC, WDST,
[50:16.000 --> 50:18.000]  все, что есть.
[50:18.000 --> 50:20.000]  То есть берет указатель.
[50:20.000 --> 50:22.000]  Куда мы хотим скопировать? Что мы хотим скопировать
[50:22.000 --> 50:24.000]  и сколько байтов?
[50:26.000 --> 50:28.000]  Здесь есть предположение,
[50:28.000 --> 50:30.000]  что у нас не пересекаются
[50:30.000 --> 50:32.000]  участки памяти.
[50:32.000 --> 50:34.000]  То есть копий не делал никаких предположений,
[50:34.000 --> 50:36.000]  а вот copy non-overlapping
[50:36.000 --> 50:38.000]  уже таких предположений
[50:38.000 --> 50:40.000]  делал предположения,
[50:40.000 --> 50:42.000]  что у нас не пересекается память.
[50:42.000 --> 50:44.000]  И это уже MemCopy получается.
[50:46.000 --> 50:48.000]  Это как-то более понятно,
[50:48.000 --> 50:50.000]  чем MemMove и MemCopy.
[50:50.000 --> 50:52.000]  То, что одно
[50:52.000 --> 50:54.000]  не делал никаких предположений, а второе
[50:54.000 --> 50:56.000]  предполагается, что все-таки у нас
[50:56.000 --> 50:58.000]  не пересекается геометрия памяти.
[50:58.000 --> 51:00.000]  Еще одна ремарка.
[51:00.000 --> 51:02.000]  Невалидно создавать указатель
[51:02.000 --> 51:04.000]  на неинтересированную память.
[51:04.000 --> 51:06.000]  Потому что указатели...
[51:06.000 --> 51:08.000]  референсис, точнее.
[51:08.000 --> 51:10.000]  Ссылки предполагают
[51:10.000 --> 51:12.000]  то, что
[51:12.000 --> 51:14.000]  находится...
[51:14.000 --> 51:16.000]  то, на что они указывают,
[51:16.000 --> 51:18.000]  оно сейчас валидно и проинтересированно.
[51:18.000 --> 51:20.000]  Предполагается, что вы будете использовать
[51:20.000 --> 51:22.000]  указатели.
[51:22.000 --> 51:24.000]  Но что если мы хотим взять указатель
[51:24.000 --> 51:26.000]  на какой-то полис,
[51:26.000 --> 51:28.000]  указатель на какое-то поле структуры?
[51:28.000 --> 51:30.000]  У нас есть структура,
[51:30.000 --> 51:32.000]  допустим, из десяти полей,
[51:32.000 --> 51:34.000]  мы хотим одной из полей, которая не
[51:34.000 --> 51:36.000]  инициализирована, записать что-то.
[51:36.000 --> 51:38.000]  Что же нам делать?
[51:50.000 --> 51:52.000]  Может все-таки взять ссылку
[51:52.000 --> 51:54.000]  про интерпретеру другого указателя
[51:54.000 --> 51:56.000]  Ну, хочется
[51:56.000 --> 51:58.000]  да, что-то такое сделать.
[51:58.000 --> 52:00.000]  Как-то так сделать,
[52:00.000 --> 52:02.000]  просто взять ссылочку.
[52:02.000 --> 52:04.000]  Дело в том, что мы же сейчас получаем
[52:04.000 --> 52:06.000]  УБР, да.
[52:06.000 --> 52:08.000]  У нас неинциализированное поле.
[52:08.000 --> 52:10.000]  Взяли ссылку на неинциализированное данное.
[52:10.000 --> 52:12.000]  Даже несмотря на то,
[52:12.000 --> 52:14.000]  что мы ее проинтерпретировали потом
[52:14.000 --> 52:16.000]  к указателю сразу.
[52:16.000 --> 52:18.000]  Как-то указывали
[52:18.000 --> 52:20.000]  предвидение использования
[52:20.000 --> 52:22.000]  в этой ссылке нет.
[52:22.000 --> 52:24.000]  Да, вот на самом деле нет.
[52:28.000 --> 52:30.000]  Проблема в том, что мы
[52:30.000 --> 52:32.000]  не только в том, что мы создаем указатель
[52:32.000 --> 52:34.000]  на ссылочку, которая у нас не создана,
[52:34.000 --> 52:36.000]  но и в том, что у нас еще может реперпакет быть.
[52:36.000 --> 52:38.000]  У нас не выровненный указатель
[52:38.000 --> 52:40.000]  получится.
[52:40.000 --> 52:42.000]  Как мы по нему будем что-то писать?
[52:46.000 --> 52:48.000]  Скажи пограмче.
[52:50.000 --> 52:52.000]  Представь, что у тебя
[52:52.000 --> 52:54.000]  стоит реперпакет.
[52:54.000 --> 52:56.000]  Не помнишь сакоса?
[53:02.000 --> 53:04.000]  Представь себе структурку,
[53:04.000 --> 53:06.000]  в которой ты сначала написал
[53:06.000 --> 53:08.000]  лонг-лонг, а потом написал чар.
[53:08.000 --> 53:10.000]  И наоборот, написал сначала чар,
[53:10.000 --> 53:12.000]  а потом лонг-лонг.
[53:12.000 --> 53:14.000]  Потом ты написал пэкт.
[53:14.000 --> 53:16.000]  Ты в этой структурке не хочешь
[53:16.000 --> 53:18.000]  никак выравнивать объекты.
[53:18.000 --> 53:20.000]  Так бы у тебя был 1 байт, потом 7 байт пустых,
[53:20.000 --> 53:22.000]  потом 8 байт.
[53:22.000 --> 53:24.000]  А если ты пишешь пэкт, то в таком случае он выровняет
[53:24.000 --> 53:26.000]  и у тебя будет просто 9 байт подряд.
[53:26.000 --> 53:28.000]  Но дело в том, что когда ты пишешь
[53:28.000 --> 53:30.000]  что-то 8-байтное,
[53:30.000 --> 53:32.000]  то в таком случае ты хочешь 8-байтное
[53:32.000 --> 53:34.000]  выравнивание.
[53:34.000 --> 53:36.000]  Просто процессор даже не сможет записать
[53:36.000 --> 53:38.000]  по такой памяти, он хочет выровнять.
[53:38.000 --> 53:40.000]  А вообще тогда ссылку
[53:40.000 --> 53:42.000]  на поле можно брать?
[53:42.000 --> 53:43.040]  Можно.
[53:43.040 --> 53:46.000]  SafeRust гарантирует, что так можно делать.
[53:46.000 --> 53:48.000]  Он тебя гарантирует,
[53:48.000 --> 53:50.000]  все будет просто работать.
[53:50.000 --> 53:52.000]  Ты возьмешь ссылку на структурку, все будет просто работать.
[53:52.000 --> 53:54.000]  И ты хочешь сказать
[53:54.000 --> 53:56.000]  что из-за этого
[53:56.000 --> 53:58.000]  он туда написать не может?
[53:58.000 --> 54:00.000]  Потому что не нужно по колдователю.
[54:00.000 --> 54:02.000]  Да, нужно по колдователю, если ты будешь указателем
[54:02.000 --> 54:04.000]  пользоваться, то есть как бы ссылка
[54:04.000 --> 54:06.000]  Rust гарантирует все будет хорошо работать,
[54:06.000 --> 54:08.000]  а вот если ты будешь брать указатель, то все.
[54:08.000 --> 54:10.000]  Здесь проблема в том, что ты берешь
[54:10.000 --> 54:12.000]  скинициализированный память
[54:12.000 --> 54:14.000]  как-то так
[54:14.000 --> 54:16.000]  ну не знаю
[54:16.000 --> 54:18.000]  если просто проблема скинициализированной памяти
[54:18.000 --> 54:20.000]  ну просто один раз
[54:20.000 --> 54:22.000]  вводим эту ссылку
[54:22.000 --> 54:24.000]  смотри
[54:24.000 --> 54:26.000]  предполагается что вы будете использовать
[54:26.000 --> 54:28.000]  макросы AdrOf и AdrOfMute
[54:28.000 --> 54:30.000]  такие макросы
[54:30.000 --> 54:32.000]  которые берут поле и просто
[54:32.000 --> 54:34.000]  возвращают у него
[54:34.000 --> 54:36.000]  какой-то сырой указатель
[54:36.000 --> 54:38.000]  по которому уже писать можно
[54:38.000 --> 54:40.000]  такие особенные по ним можно
[54:44.000 --> 54:46.000]  интересно как бы вы это сделали в плюсах если Pact
[54:46.000 --> 54:48.000]  нужно было бы руками наверное делать
[54:48.000 --> 54:50.000]  или там есть что-то
[54:50.000 --> 54:52.000]  кстати это интересный вопрос
[54:52.000 --> 54:54.000]  тут видимо там ну зависит от того
[54:54.000 --> 54:56.000]  насколько компилятор кто пей
[54:56.000 --> 54:58.000]  потому что это все-таки не стандартный атрибут
[54:58.000 --> 55:00.000]  так что если компилятор
[55:00.000 --> 55:02.000]  и баг
[55:02.000 --> 55:04.000]  поменим
[55:04.000 --> 55:06.000]  ну короче вот раз
[55:06.000 --> 55:08.000]  это приходится с учетом его сейфти
[55:08.000 --> 55:10.000]  учитывать
[55:10.000 --> 55:12.000]  есть такой вот макрос который возвращает
[55:12.000 --> 55:14.000]  указатель которому уже можно писать даже если у Aspect
[55:14.000 --> 55:16.000]  никаких промежуточных ссылок
[55:16.000 --> 55:18.000]  он не создает все хорошо он безопасен
[55:18.000 --> 55:20.000]  ну в плане вызывать его
[55:20.000 --> 55:22.000]  безопасно
[55:22.000 --> 55:24.000]  а вот писать по нему уже не вот
[55:24.000 --> 55:26.000]  да не безопасно на самом деле
[55:26.000 --> 55:28.000]  даже вызывать
[55:30.000 --> 55:32.000]  ну вот мы и пишем по указателю
[55:32.000 --> 55:34.000]  тут что-то вот такое
[55:34.000 --> 55:36.000]  у нас есть demo где есть field
[55:36.000 --> 55:38.000]  и мы записали туда true
[55:38.000 --> 55:40.000]  создали соответственно init
[55:40.000 --> 55:42.000]  который представляет из себя
[55:42.000 --> 55:44.000]  уже не demo
[55:44.000 --> 55:46.000]  в таком примерчике
[55:48.000 --> 55:50.000]  еще вы можете помнить такую звуку
[55:50.000 --> 55:52.000]  я говорил на первой лекции
[55:52.000 --> 55:54.000]  что когда вы пишете например option box t
[55:54.000 --> 55:56.000]  то на самом деле вы получаете просто unique pointer
[55:56.000 --> 55:58.000]  без каких-либо оверхедов
[55:58.000 --> 56:00.000]  у вас box t себя представляет
[56:00.000 --> 56:02.000]  просто указателем какой-то интеллизированной памяти
[56:02.000 --> 56:04.000]  а
[56:04.000 --> 56:06.000]  nullptr там не используется
[56:06.000 --> 56:08.000]  когда вы накидываете option
[56:08.000 --> 56:10.000]  то option понимает что там внутри
[56:10.000 --> 56:12.000]  невозможно воспользоваться
[56:12.000 --> 56:14.000]  ну невозможен nullptr
[56:14.000 --> 56:16.000]  соответственно nullptr используется для того чтобы
[56:16.000 --> 56:18.000]  null
[56:18.000 --> 56:20.000]  эта штука называется niche optimization
[56:22.000 --> 56:24.000]  но когда у нас t это
[56:24.000 --> 56:26.000]  may be and need
[56:26.000 --> 56:28.000]  то в таком случае мы не можем делать никаких предположений о том
[56:28.000 --> 56:30.000]  какое у нас снизу значение
[56:30.000 --> 56:32.000]  соответственно option от may be and need
[56:32.000 --> 56:34.000]  любого типа t
[56:34.000 --> 56:36.000]  это честный bool и честный
[56:36.000 --> 56:38.000]  тип t рядышком
[56:38.000 --> 56:40.000]  потому что у нас там произвольная байта в t
[56:40.000 --> 56:42.000]  это
[56:42.000 --> 56:44.000]  другим контейнером
[56:44.000 --> 56:46.000]  относится например вы могли видеть non-zero
[56:46.000 --> 56:48.000]  non-zero просто означает
[56:48.000 --> 56:50.000]  то что что-то не нулевое
[56:50.000 --> 56:52.000]  запрещает 0 использовать
[56:52.000 --> 56:54.000]  и option от
[56:54.000 --> 56:56.000]  non-zero это в общем-то
[56:56.000 --> 56:58.000]  просто non-zero
[56:58.000 --> 57:00.000]  который использует 0 в качестве non-zero
[57:02.000 --> 57:04.000]  кстати тоже
[57:18.000 --> 57:20.000]  а как-то
[57:20.000 --> 57:22.000]  niche optimization на этапе компиляции работает
[57:22.000 --> 57:24.000]  ну когда ты создаешь любой
[57:24.000 --> 57:26.000]  non-zero option на самом деле в этом смысле
[57:26.000 --> 57:28.000]  не особый
[57:28.000 --> 57:30.000]  ты можешь любой создать абсолютно янам
[57:30.000 --> 57:32.000]  и он будет просто прятать
[57:32.000 --> 57:34.000]  битики дискриминанта где-то
[57:34.000 --> 57:36.000]  в неиспользованных значениях
[57:36.000 --> 57:38.000]  например
[57:38.000 --> 57:40.000]  если у тебя bool то в таком случае он знает
[57:40.000 --> 57:42.000]  что 1 и 2 это гарантировано
[57:42.000 --> 57:44.000]  какие-то значения корректные була он не может их использовать
[57:44.000 --> 57:46.000]  а вот 3 и 4 и так далее
[57:46.000 --> 57:48.000]  он уже может использовать в качестве значений
[57:48.000 --> 57:50.000]  дискриминанта
[57:50.000 --> 57:52.000]  нау означать
[57:56.000 --> 57:58.000]  а там рекурсивно
[57:58.000 --> 58:00.000]  он знает у каждого значения
[58:00.000 --> 58:02.000]  какие значения для него
[58:02.000 --> 58:04.000]  корректны а какие нет
[58:04.000 --> 58:06.000]  вот у бокса он понимает просто
[58:06.000 --> 58:08.000]  что за счет того что там внутри используется кажется
[58:08.000 --> 58:10.000]  non-nu указатель
[58:10.000 --> 58:12.000]  он просто понимает что бокс это корректно
[58:12.000 --> 58:14.000]  все кроме всех нулей
[58:14.000 --> 58:16.000]  то есть там какой-то есть
[58:16.000 --> 58:18.000]  да-да-да
[58:18.000 --> 58:20.000]  он как-то их там пересекает
[58:20.000 --> 58:22.000]  и какие-то забавные
[58:22.000 --> 58:24.000]  штуки делает но в итоге он
[58:24.000 --> 58:26.000]  оптимизирует использование памяти
[58:30.000 --> 58:32.000]  интересно вот я все это на первой лекции
[58:32.000 --> 58:34.000]  рассказывал там со ссылочками на godbolt
[58:34.000 --> 58:36.000]  и никто ничего не помнит
[58:40.000 --> 58:42.000]  я про них и не рассказывал про то что
[58:42.000 --> 58:44.000]  option оптимизирует я помню я помню 2
[58:44.000 --> 58:46.000]  була там было их
[58:48.000 --> 58:50.000]  ну нужно наверное это перенести
[58:50.000 --> 58:52.000]  ближе вот к этим лекциям
[58:52.000 --> 58:54.000]  такую новость
[58:54.000 --> 58:56.000]  вот теперь мы
[58:56.000 --> 58:58.000]  дошли до момента когда у нас mytype
[58:58.000 --> 59:00.000]  оказывается что в нем есть
[59:00.000 --> 59:02.000]  дроп
[59:02.000 --> 59:04.000]  я вам рассказал уже об этой проблеме
[59:04.000 --> 59:06.000]  что если мы где-то посередине вычислений
[59:06.000 --> 59:08.000]  элементов запаникуем
[59:08.000 --> 59:10.000]  в таком случае мы не будем вызывать на мейбене нет дроп
[59:10.000 --> 59:12.000]  вообще паника сама по себе когда она
[59:12.000 --> 59:14.000]  анролится то тогда она дропа вызывает
[59:14.000 --> 59:16.000]  на всех элементах
[59:16.000 --> 59:18.000]  ну в принципе да
[59:18.000 --> 59:20.000]  что-то такое
[59:20.000 --> 59:22.000]  только
[59:22.000 --> 59:24.000]  в общем
[59:24.000 --> 59:26.000]  их можно ловить
[59:26.000 --> 59:28.000]  а панику нельзя ловить
[59:28.000 --> 59:30.000]  панику можно ловить только в трамплине
[59:30.000 --> 59:32.000]  а если у тебя трэд 1
[59:32.000 --> 59:34.000]  то есть они многопоточны ловить негде
[59:36.000 --> 59:38.000]  в общем вы должны это учитывать
[59:38.000 --> 59:40.000]  если вы запаникуете это в таком случае
[59:40.000 --> 59:42.000]  нужно написать какой-то свой дроп
[59:42.000 --> 59:44.000]  например если бы вы можете
[59:44.000 --> 59:46.000]  в намеконе как написан вектор
[59:46.000 --> 59:48.000]  какая-то простая
[59:48.000 --> 59:50.000]  имплементация вектора
[59:50.000 --> 59:52.000]  и там вот как раз будут такие штуки
[59:52.000 --> 59:54.000]  учитываться
[59:54.000 --> 59:56.000]  в имплементации
[59:58.000 --> 01:00:00.000]  так понятно ли
[01:00:00.000 --> 01:00:02.000]  не инцелизированная память
[01:00:04.000 --> 01:00:06.000]  теперь нам нужно поговорить о том
[01:00:06.000 --> 01:00:08.000]  когда нам хочется использовать ансейв
[01:00:08.000 --> 01:00:10.000]  ну ансейв
[01:00:10.000 --> 01:00:12.000]  такая штука
[01:00:12.000 --> 01:00:14.000]  которая может нарушить вообще все гарантии
[01:00:14.000 --> 01:00:16.000]  расто
[01:00:16.000 --> 01:00:18.000]  и частенько говорят люди
[01:00:18.000 --> 01:00:20.000]  что вся безопасность расто
[01:00:20.000 --> 01:00:22.000]  это всего лишь шарада
[01:00:22.000 --> 01:00:24.000]  это все на самом деле чисто виртуально
[01:00:24.000 --> 01:00:26.000]  например вы могли найти
[01:00:26.000 --> 01:00:28.000]  есть статья на хабре от Антона Полухина
[01:00:28.000 --> 01:00:30.000]  который говорил
[01:00:30.000 --> 01:00:32.000]  что расто на самом деле
[01:00:32.000 --> 01:00:34.000]  пока что не такой быстрый
[01:00:34.000 --> 01:00:36.000]  далеко не такой безопасный
[01:00:36.000 --> 01:00:38.000]  который о себе говорит
[01:00:38.000 --> 01:00:40.000]  на самом деле это конечно не так
[01:00:40.000 --> 01:00:42.000]  расто это абсолютно безопасная вещь
[01:00:42.000 --> 01:00:44.000]  но вам нужно уметь
[01:00:44.000 --> 01:00:46.000]  как бы пользоваться ансейв кодом
[01:00:46.000 --> 01:00:48.000]  если вы пишете
[01:00:48.000 --> 01:00:50.000]  на самом деле
[01:00:50.000 --> 01:00:52.000]  большинство безопасных языков
[01:00:52.000 --> 01:00:54.000]  даже вот я знаю сешард
[01:00:54.000 --> 01:00:56.000]  давайте я вам скажу про сешард
[01:00:56.000 --> 01:00:58.000]  сешард тоже есть ансейв
[01:00:58.000 --> 01:01:00.000]  например так же работает
[01:01:00.000 --> 01:01:02.000]  вы лепите на функцию ансейв там можете пользоваться указателями
[01:01:02.000 --> 01:01:04.000]  у всех языков
[01:01:04.000 --> 01:01:06.000]  а вот еще в Питоне
[01:01:06.000 --> 01:01:08.000]  в Питоне есть и расширение
[01:01:08.000 --> 01:01:10.000]  это тоже потенциальный источник УБ
[01:01:12.000 --> 01:01:14.000]  вообщем у всех безопасных языков
[01:01:14.000 --> 01:01:16.000]  потенциально есть какой-то
[01:01:16.000 --> 01:01:18.000]  ансейв под множество
[01:01:18.000 --> 01:01:20.000]  иначе вы не сможете написать на этом языке
[01:01:20.000 --> 01:01:22.000]  какие-то производительные программы
[01:01:26.000 --> 01:01:28.000]  не Андрей
[01:01:28.000 --> 01:01:30.000]  ансейв нужен в очень малом числе мест
[01:01:30.000 --> 01:01:32.000]  а ты хочешь все остальное
[01:01:32.000 --> 01:01:34.000]  ну как бы отстрелить себе ногу
[01:01:34.000 --> 01:01:36.000]  в просто на ровном месте
[01:01:36.000 --> 01:01:38.000]  в любом из 95% кода
[01:01:38.000 --> 01:01:40.000]  как-то будет смешно
[01:01:40.000 --> 01:01:42.000]  поэтому хочется чтобы большая часть языка была безопасной
[01:01:42.000 --> 01:01:44.000]  только в каких-то определенных местах
[01:01:44.000 --> 01:01:46.000]  ты уже где-то спустился
[01:01:46.000 --> 01:01:48.000]  чуть-чуть там аккуратненько написал ансейв и все получилось
[01:01:48.000 --> 01:01:50.000]  поэтому сейв это гораздо лучше
[01:01:58.000 --> 01:02:00.000]  вообщем-то вам все-таки нужен ансейв код
[01:02:00.000 --> 01:02:02.000]  когда вы пишете что-то низкоуровневое
[01:02:06.000 --> 01:02:08.000]  тем не менее, если вам стало страшно
[01:02:08.000 --> 01:02:10.000]  писать ансейв код, вы не бойтесь
[01:02:10.000 --> 01:02:12.000]  если вы писали на плюсах, вы как-то выжили
[01:02:12.000 --> 01:02:14.000]  поэтому наверное у вас получится
[01:02:14.000 --> 01:02:16.000]  писать ансейв код в Расте абсолютно точно так же
[01:02:16.000 --> 01:02:18.000]  да, ансейв код в Расте
[01:02:18.000 --> 01:02:20.000]  капельку сложнее писать
[01:02:20.000 --> 01:02:22.000]  потому что если вы будете писать какие-то структуры
[01:02:22.000 --> 01:02:24.000]  то вам нужно будет учитывать variants
[01:02:24.000 --> 01:02:26.000]  по которым говорили на прошлой лекции
[01:02:26.000 --> 01:02:28.000]  но это достаточно редкая ситуация
[01:02:30.000 --> 01:02:32.000]  там нужно быть по-честному вывести
[01:02:32.000 --> 01:02:34.000]  какой у вас должен быть variants
[01:02:34.000 --> 01:02:36.000]  для типа, как-то его поддержать
[01:02:36.000 --> 01:02:38.000]  и все такое
[01:02:42.000 --> 01:02:44.000]  самое важное в написании ансейв кода
[01:02:44.000 --> 01:02:46.000]  это читать и писать документацию
[01:02:46.000 --> 01:02:48.000]  в принципе
[01:02:48.000 --> 01:02:50.000]  это верно и для плюсов
[01:02:50.000 --> 01:02:52.000]  когда вы пишете какую-то функцию, вы в любой момент времени
[01:02:52.000 --> 01:02:54.000]  не можете быть уверены, что вы пользуете сейв правильно
[01:02:54.000 --> 01:02:56.000]  лучше все-таки почитать документацию
[01:02:56.000 --> 01:02:58.000]  в Расте вы бы могли пользоваться
[01:02:58.000 --> 01:03:00.000]  вы можете пользоваться свободно всем сейв кодом
[01:03:00.000 --> 01:03:02.000]  когда вы пишете ансейв
[01:03:02.000 --> 01:03:04.000]  или пользуетеся ансейв
[01:03:04.000 --> 01:03:06.000]  тогда лучше почитать документацию
[01:03:06.000 --> 01:03:08.000]  потому что вы можете сделать ошибку
[01:03:08.000 --> 01:03:10.000]  и получить UB
[01:03:10.000 --> 01:03:12.000]  просто не выполнив какой-то инвариант
[01:03:14.000 --> 01:03:16.000]  давайте писать ансейв кода как можно меньше
[01:03:16.000 --> 01:03:18.000]  минимизируйте его количество
[01:03:20.000 --> 01:03:22.000]  и еще очень важно
[01:03:22.000 --> 01:03:24.000]  преиспользуйте существующие крейки
[01:03:24.000 --> 01:03:26.000]  в Расте их очень много
[01:03:26.000 --> 01:03:28.000]  это вещь, которую вам в Расте
[01:03:28.000 --> 01:03:30.000]  понравится
[01:03:30.000 --> 01:03:32.000]  которую вы в Расте полюбите
[01:03:32.000 --> 01:03:34.000]  то, что есть такие сильные крейты
[01:03:34.000 --> 01:03:36.000]  достаточно написать одну строчку
[01:03:36.000 --> 01:03:38.000]  у вас там подключено огромное множество возможностей
[01:03:38.000 --> 01:03:40.000]  как мы говорим про кросс бим и район
[01:03:40.000 --> 01:03:42.000]  вы там сможете написать
[01:03:42.000 --> 01:03:44.000]  ворк стиленка
[01:03:44.000 --> 01:03:46.000]  просто потому что
[01:03:46.000 --> 01:03:48.000]  у вас есть уже готовые
[01:03:48.000 --> 01:03:50.000]  в общем
[01:03:50.000 --> 01:03:52.000]  готовые примитивы для этого
[01:03:52.000 --> 01:03:54.000]  никакого ансейв не нужно
[01:03:54.000 --> 01:03:56.000]  более того
[01:03:56.000 --> 01:03:58.000]  всякие сейфти
[01:03:58.000 --> 01:04:00.000]  баги, которые связаны с сейфти
[01:04:00.000 --> 01:04:02.000]  это баги, которые в Раст комьюнити
[01:04:02.000 --> 01:04:04.000]  наиболее
[01:04:04.000 --> 01:04:06.000]  панишибл
[01:04:06.000 --> 01:04:08.000]  я вам расскажу одну историю
[01:04:08.000 --> 01:04:10.000]  наверное вы слышали про актикс
[01:04:12.000 --> 01:04:14.000]  такая история была с ним
[01:04:14.000 --> 01:04:16.000]  что актикс это вообще такой
[01:04:16.000 --> 01:04:18.000]  актор системы
[01:04:18.000 --> 01:04:20.000]  для веб программирования
[01:04:20.000 --> 01:04:22.000]  она предназначалась
[01:04:22.000 --> 01:04:24.000]  она самая быстрая в бетчмарках
[01:04:24.000 --> 01:04:26.000]  она не предполагала, что кто-то ее быстро
[01:04:26.000 --> 01:04:28.000]  спложить против
[01:04:28.000 --> 01:04:30.000]  пришли Растасия
[01:04:30.000 --> 01:04:32.000]  набежали в его репозиторий
[01:04:32.000 --> 01:04:34.000]  посмотрели на его весь код
[01:04:34.000 --> 01:04:36.000]  посмотрели на ансейв и сказали
[01:04:36.000 --> 01:04:38.000]  тут у тебя сейфти баги
[01:04:38.000 --> 01:04:40.000]  ансамбль
[01:04:40.000 --> 01:04:42.000]  давай ты это починишь
[01:04:42.000 --> 01:04:44.000]  просто иши написали
[01:04:44.000 --> 01:04:46.000]  пока что все нормально
[01:04:46.000 --> 01:04:48.000]  потом пришел тот, кто
[01:04:48.000 --> 01:04:50.000]  это все пишет
[01:04:50.000 --> 01:04:52.000]  я не хочу ничего чинить
[01:04:52.000 --> 01:04:54.000]  мне все устраивает
[01:04:54.000 --> 01:04:56.000]  я пишу это для бетчмарков
[01:04:56.000 --> 01:04:58.000]  с одной стороны
[01:04:58.000 --> 01:05:00.000]  он как бы прав
[01:05:00.000 --> 01:05:02.000]  это же его код
[01:05:02.000 --> 01:05:04.000]  с другой стороны набежали Растасия
[01:05:04.000 --> 01:05:06.000]  они же хотят чтобы актикс
[01:05:06.000 --> 01:05:08.000]  был популярным фреймворком
[01:05:08.000 --> 01:05:10.000]  даже в проде
[01:05:10.000 --> 01:05:12.000]  набежали люди
[01:05:12.000 --> 01:05:14.000]  и сказали давай ты нормально напишешь
[01:05:14.000 --> 01:05:16.000]  в общем там разгорелся скандал
[01:05:16.000 --> 01:05:18.000]  в итоге репозиторий актикса
[01:05:18.000 --> 01:05:20.000]  удалялся, добавлялся
[01:05:20.000 --> 01:05:22.000]  передавались права
[01:05:22.000 --> 01:05:24.000]  такая вот история
[01:05:24.000 --> 01:05:26.000]  с одной стороны это хорошо характеризует комьюнити
[01:05:26.000 --> 01:05:28.000]  потому что они следят за всякими
[01:05:28.000 --> 01:05:30.000]  багами, вы можете быть уверены в том
[01:05:30.000 --> 01:05:32.000]  что кредит, которым вы пользуетесь без сейфти багов
[01:05:32.000 --> 01:05:34.000]  то есть вы пишете
[01:05:34.000 --> 01:05:36.000]  почти всегда только сейф Раст
[01:05:36.000 --> 01:05:38.000]  у нас в домашней
[01:05:38.000 --> 01:05:40.000]  с другой стороны
[01:05:40.000 --> 01:05:42.000]  когда к вам придет человек и скажет поправить сейфти баг
[01:05:42.000 --> 01:05:44.000]  возможно вам будет не очень приятно
[01:05:44.000 --> 01:05:46.000]  потому что вам придется это делать
[01:05:46.000 --> 01:05:48.000]  о чем история кончилась?
[01:05:48.000 --> 01:05:50.000]  ну кажется там
[01:05:50.000 --> 01:05:52.000]  какой-то форк произошел
[01:05:52.000 --> 01:05:54.000]  не помню что там было
[01:05:54.000 --> 01:05:56.000]  вроде бы сейчас не он владеет репозиторием
[01:05:56.000 --> 01:05:58.000]  либо он
[01:05:58.000 --> 01:06:00.000]  вроде бы то ли он владеет репозиторием
[01:06:00.000 --> 01:06:02.000]  но форкнулись
[01:06:02.000 --> 01:06:04.000]  ну кажется это такая история
[01:06:04.000 --> 01:06:06.000]  у вас может скулачивание в аниме светлоуто
[01:06:06.000 --> 01:06:08.000]  вы еще ничего не сделали
[01:06:14.000 --> 01:06:16.000]  ну короче доверяйте
[01:06:16.000 --> 01:06:18.000]  кредитам которые
[01:06:18.000 --> 01:06:20.000]  вы пользуетесь
[01:06:20.000 --> 01:06:22.000]  это правда не действительно все безопасно
[01:06:22.000 --> 01:06:24.000]  сейф Раст он действительно сейф
[01:06:24.000 --> 01:06:26.000]  верьте в это, он сейф код не нужен
[01:06:26.000 --> 01:06:28.000]  практически никогда, кто пишет вот я
[01:06:28.000 --> 01:06:30.000]  сам себе Буратин и пользуетесь тем что они сделали
[01:06:30.000 --> 01:06:32.000]  вот, не мучайтесь сами
[01:06:34.000 --> 01:06:36.000]  ну и более того
[01:06:36.000 --> 01:06:38.000]  если вы все-таки пишете ансейв код, то тестируйте свою работу
[01:06:38.000 --> 01:06:40.000]  но, к сожалению, на лекциях
[01:06:40.000 --> 01:06:42.000]  подробного обсуждения в мире не будет
[01:06:42.000 --> 01:06:44.000]  это такой инструмент для того чтобы находить
[01:06:44.000 --> 01:06:46.000]  в ансейв Расте
[01:06:46.000 --> 01:06:48.000]  ошибки связанные с memory safety
[01:06:48.000 --> 01:06:50.000]  но в домашке он у нас тем не менее будет
[01:06:50.000 --> 01:06:52.000]  надеюсь завтра выложу
[01:06:52.000 --> 01:06:54.000]  у нас будет одна домашка где нужно будет написать
[01:06:54.000 --> 01:06:56.000]  небольшую ансейв абстракцию
[01:06:56.000 --> 01:06:58.000]  небольшой вектор такой
[01:06:58.000 --> 01:07:00.000]  который будет на стеке
[01:07:00.000 --> 01:07:02.000]  ограниченного размера
[01:07:02.000 --> 01:07:04.000]  и прейд смол век
[01:07:08.000 --> 01:07:10.000]  я вас поздравляю, вы только что узнали
[01:07:10.000 --> 01:07:12.000]  теперь и про однопоточный Раст
[01:07:12.000 --> 01:07:14.000]  все, то есть и про
[01:07:14.000 --> 01:07:16.000]  сейф под множество Раст
[01:07:16.000 --> 01:07:18.000]  и про ансейв под множество Раст
[01:07:18.000 --> 01:07:20.000]  какие-то мелочи остались за кадром
[01:07:20.000 --> 01:07:22.000]  но в целом мы уже знаем про язык все
[01:07:22.000 --> 01:07:24.000]  если вы все поняли, вы большие молодец
[01:07:24.000 --> 01:07:26.000]  и теперь вы уже
[01:07:26.000 --> 01:07:28.000]  готовы к тому, чтобы приходить писать про 2 код на росте
[01:07:28.000 --> 01:07:30.000]  осталось
[01:07:30.000 --> 01:07:32.000]  расшириться на
[01:07:32.000 --> 01:07:34.000]  параллельность
[01:07:34.000 --> 01:07:36.000]  и еще асинхронность
[01:07:36.000 --> 01:07:38.000]  на следующей лекции
[01:07:38.000 --> 01:07:40.000]  можно чуть-чуть отдохнуть
[01:07:40.000 --> 01:07:42.000]  перед параллельностью
[01:07:42.000 --> 01:07:44.000]  давайте 10 минут отдохнем
[01:07:44.000 --> 01:07:46.000]  ну что, погнали
[01:07:48.000 --> 01:07:50.000]  parallel computing, переходим на много трудов
[01:07:52.000 --> 01:07:54.000]  перед тем, как пригодить на много трудов
[01:07:54.000 --> 01:07:56.000]  нужно научиться создавать труды
[01:07:58.000 --> 01:08:00.000]  так
[01:08:00.000 --> 01:08:02.000]  ну у нас в первую очередь здесь такая вот функция
[01:08:02.000 --> 01:08:04.000]  вы на нее смотрите, что вы видите
[01:08:06.000 --> 01:08:08.000]  ну почти
[01:08:10.000 --> 01:08:12.000]  ну под низом он
[01:08:12.000 --> 01:08:14.000]  но вообще петроэто тоже только линксовская
[01:08:14.000 --> 01:08:16.000]  точнее миксовская фигня
[01:08:16.000 --> 01:08:18.000]  хотя по этому
[01:08:18.000 --> 01:08:20.000]  порту был, поэтому
[01:08:20.000 --> 01:08:22.000]  да, мы как раз в этом поговорим
[01:08:22.000 --> 01:08:24.000]  про платонических IDFC
[01:08:24.000 --> 01:08:26.000]  отлично
[01:08:26.000 --> 01:08:28.000]  так, окей
[01:08:30.000 --> 01:08:32.000]  так
[01:08:32.000 --> 01:08:34.000]  это как минимум, еще тут видно
[01:08:34.000 --> 01:08:36.000]  какой-то статик
[01:08:36.000 --> 01:08:38.000]  ну есть подаваление, что без сэнда мы не
[01:08:38.000 --> 01:08:40.000]  поймем, что это за статик
[01:08:40.000 --> 01:08:42.000]  не, наоборот, мы пойдем, что такое
[01:08:42.000 --> 01:08:44.000]  статик
[01:08:44.000 --> 01:08:46.000]  ну давайте так
[01:08:46.000 --> 01:08:48.000]  создаем труды
[01:08:48.000 --> 01:08:50.000]  создаем какое-то число трудов 8
[01:08:52.000 --> 01:08:54.000]  то, что я делаю, это создаю рейндж, потом мэп
[01:08:54.000 --> 01:08:56.000]  запускаю какую-то функцию simulate
[01:09:00.000 --> 01:09:02.000]  move, кстати, можно убрать
[01:09:02.000 --> 01:09:04.000]  ну, я даже
[01:09:04.000 --> 01:09:06.000]  это вот написал посредством того, чтобы убрать
[01:09:06.000 --> 01:09:08.000]  здесь move, каким-то его здесь нет
[01:09:08.000 --> 01:09:10.000]  пока что, чтобы не пугаться
[01:09:10.000 --> 01:09:12.000]  в общем, у нас было, мы даже обсуждали
[01:09:12.000 --> 01:09:14.000]  просто они говорили, что это нужно
[01:09:14.000 --> 01:09:16.000]  иногда
[01:09:16.000 --> 01:09:18.000]  ну здесь конкретно в данном случае
[01:09:18.000 --> 01:09:20.000]  move не нужен
[01:09:20.000 --> 01:09:22.000]  вот
[01:09:22.000 --> 01:09:24.000]  вот сначала мы спускаем 3d, потом
[01:09:24.000 --> 01:09:26.000]  handle join делаем и collect
[01:09:26.000 --> 01:09:28.000]  что-то такое
[01:09:34.000 --> 01:09:36.000]  вот
[01:09:36.000 --> 01:09:38.000]  вопрос, почему нам нужен здесь
[01:09:38.000 --> 01:09:40.000]  expect, мы написали expect и
[01:09:40.000 --> 01:09:42.000]  thread payment
[01:09:42.000 --> 01:09:44.000]  надо значит выключить
[01:09:44.000 --> 01:09:46.000]  join
[01:09:46.000 --> 01:09:48.000]  да, дело в том, что у нас thread может
[01:09:48.000 --> 01:09:50.000]  запаниковать
[01:09:50.000 --> 01:09:52.000]  до этого у нас были однопоточные программы
[01:09:52.000 --> 01:09:54.000]  и паника сразу же ломалась программой
[01:09:54.000 --> 01:09:56.000]  с backtrace, а здесь у нас
[01:09:56.000 --> 01:09:58.000]  ломается конкретный thread
[01:09:58.000 --> 01:10:00.000]  мы можем посмотреть
[01:10:00.000 --> 01:10:02.000]  чем thread закончился
[01:10:02.000 --> 01:10:04.000]  вот
[01:10:04.000 --> 01:10:06.000]  ну и в общем-то join handle, когда мы
[01:10:06.000 --> 01:10:08.000]  делаем join, он возвращает нам result
[01:10:08.000 --> 01:10:10.000]  который из себя представляет
[01:10:10.000 --> 01:10:12.000]  либо значение, с которым у нас закончилось
[01:10:12.000 --> 01:10:14.000]  исполнение, либо
[01:10:14.000 --> 01:10:16.000]  значение
[01:10:16.000 --> 01:10:18.000]  ну, значение ошибки
[01:10:18.000 --> 01:10:20.000]  в данном случае это будет thread panic
[01:10:24.000 --> 01:10:26.000]  давайте посмотрим вот такую
[01:10:26.000 --> 01:10:28.000]  штуку еще
[01:10:28.000 --> 01:10:30.000]  у нас есть вектор, то мы запускаем
[01:10:30.000 --> 01:10:32.000]  thread spawn
[01:10:32.000 --> 01:10:34.000]  здесь внутри итерируемся
[01:10:34.000 --> 01:10:36.000]  выводим ишки какие-то
[01:10:36.000 --> 01:10:38.000]  joinимся, то есть во втором 3d
[01:10:38.000 --> 01:10:40.000]  просто выводим содержимое вектора
[01:10:40.000 --> 01:10:42.000]  тут все хорошо?
[01:10:48.000 --> 01:10:50.000]  по-хорошему кажется
[01:10:50.000 --> 01:10:52.000]  что вектор доживает
[01:10:52.000 --> 01:10:54.000]  до join
[01:10:56.000 --> 01:10:58.000]  ну, знаешь в чем дело?
[01:10:58.000 --> 01:11:00.000]  в том, что раз не знает что такое join
[01:11:00.000 --> 01:11:02.000]  вот смотри
[01:11:02.000 --> 01:11:04.000]  у нас есть
[01:11:04.000 --> 01:11:06.000]  во-первых thread spawn
[01:11:06.000 --> 01:11:08.000]  он у нас требует статик
[01:11:08.000 --> 01:11:10.000]  как вы можете помнить
[01:11:10.000 --> 01:11:12.000]  а статик он требует
[01:11:12.000 --> 01:11:14.000]  по какой причине?
[01:11:14.000 --> 01:11:16.000]  по той, что у нас вектор, который мы создаем
[01:11:16.000 --> 01:11:18.000]  он же может
[01:11:18.000 --> 01:11:20.000]  в общем-то
[01:11:20.000 --> 01:11:22.000]  он не переживает наш thread
[01:11:22.000 --> 01:11:24.000]  если бы у нас не было join вообще
[01:11:24.000 --> 01:11:26.000]  мы же можем просто его взять и forget сделать
[01:11:28.000 --> 01:11:30.000]  соответственно мы не будем join-иться
[01:11:30.000 --> 01:11:32.000]  соответственно, когда мы выйдем
[01:11:32.000 --> 01:11:34.000]  из нашей функции
[01:11:34.000 --> 01:11:36.000]  мы могли бы другую создать
[01:11:36.000 --> 01:11:38.000]  вектор бы наш очистился, но при этом
[01:11:38.000 --> 01:11:40.000]  thread бы еще мог к нему получить доступ
[01:11:40.000 --> 01:11:42.000]  поэтому мы
[01:11:42.000 --> 01:11:44.000]  затребовали статик, чтобы у нас не было никаких lifetime зависимости
[01:11:44.000 --> 01:11:46.000]  на тех объектах, с которыми мы взаимодействуем
[01:11:48.000 --> 01:11:50.000]  кэмплятор нам тут предлагает
[01:11:50.000 --> 01:11:52.000]  воспользуйтесь ко move
[01:11:52.000 --> 01:11:54.000]  ну move, насколько мы помним
[01:11:54.000 --> 01:11:56.000]  move-ит внутри closure
[01:11:56.000 --> 01:11:58.000]  то есть берет не по ссылке, а именно move-ит
[01:12:00.000 --> 01:12:02.000]  вот
[01:12:02.000 --> 01:12:04.000]  идея в том, что раз не знает ничего
[01:12:04.000 --> 01:12:06.000]  о join-е, даже если бы он знал
[01:12:06.000 --> 01:12:08.000]  то в таком случае даже между join-ом и thread-ом
[01:12:08.000 --> 01:12:10.000]  мог бы быть произвольный код, который
[01:12:10.000 --> 01:12:12.000]  в любое время не может запаниковать
[01:12:14.000 --> 01:12:16.000]  и в таком случае, если мы
[01:12:16.000 --> 01:12:18.000]  паникуем
[01:12:18.000 --> 01:12:20.000]  то join не выполняется
[01:12:20.000 --> 01:12:22.000]  ну и самая смешная вещь
[01:12:22.000 --> 01:12:24.000]  в том, что ничто не мешает нам
[01:12:24.000 --> 01:12:26.000]  просто лик сделать
[01:12:26.000 --> 01:12:28.000]  на join-хэнду
[01:12:28.000 --> 01:12:30.000]  поэтому получается, что
[01:12:30.000 --> 01:12:32.000]  мы вынуждены поставить статик в тредспон
[01:12:36.000 --> 01:12:38.000]  да, это безопасно
[01:12:38.000 --> 01:12:40.000]  в целом, это в цели безопасности сделано
[01:12:40.000 --> 01:12:42.000]  раньше в стандартном билетике Rust
[01:12:42.000 --> 01:12:44.000]  у Rust вместо статика был произвольный
[01:12:44.000 --> 01:12:46.000]  lifetime-a
[01:12:46.000 --> 01:12:48.000]  но это было в те времена, когда в Rust не понимали
[01:12:48.000 --> 01:12:50.000]  что делать с моими реликами
[01:12:50.000 --> 01:12:52.000]  там даже с tdmem-foget был unsafe
[01:12:52.000 --> 01:12:54.000]  ну то есть все, что было связано
[01:12:54.000 --> 01:12:56.000]  с моими реликами было unsafe
[01:12:56.000 --> 01:12:58.000]  ну и потом в процессе
[01:12:58.000 --> 01:13:00.000]  изучения всего этого выяснилось, что
[01:13:00.000 --> 01:13:02.000]  оказывается для ликов даже нельзя нормальную
[01:13:02.000 --> 01:13:04.000]  мат-модель написать, ну то есть уже можете
[01:13:04.000 --> 01:13:06.000]  много ресурсов
[01:13:06.000 --> 01:13:08.000]  на хипе создать
[01:13:08.000 --> 01:13:10.000]  потом зайти
[01:13:10.000 --> 01:13:12.000]  в бесконечный цикл
[01:13:12.000 --> 01:13:14.000]  мы же не знаем
[01:13:14.000 --> 01:13:16.000]  мы не вернемся из-за того цикла
[01:13:16.000 --> 01:13:18.000]  но при этом ресурсы у нас все еще
[01:13:20.000 --> 01:13:22.000]  все еще мы владеем этими ресурсами
[01:13:22.000 --> 01:13:24.000]  и они никуда не очищаются
[01:13:24.000 --> 01:13:26.000]  получается
[01:13:26.000 --> 01:13:28.000]  непонятно владеем ли мы этими данными
[01:13:30.000 --> 01:13:32.000]  ну даже и так не владеем этими данными
[01:13:32.000 --> 01:13:34.000]  а лик ли это? мы не знаем
[01:13:34.000 --> 01:13:36.000]  вроде бы и владеем, вроде бы есть ссылка
[01:13:36.000 --> 01:13:38.000]  но при этом в бесконечном цикле и данными
[01:13:38.000 --> 01:13:45.000]  с учетом того, что вообще-то memory leak нам не дает никакого unsafety, мы его разрешаем.
[01:13:45.000 --> 01:13:55.000]  Использовать память, которую мы не владеем, это одно, а другое дело, когда мы не используем память, которую просто выкинули.
[01:13:55.000 --> 01:13:58.000]  Ну какая разница? Это безопасно. Плохо, но безопасно.
[01:13:58.000 --> 01:14:08.000]  Да, и для FFI тоже хорошо. Ну там ансейв в любом случае был, поэтому не то чтобы открыл дорогу, просто наверное сделал жизнь чуть-чуть удобнее.
[01:14:08.000 --> 01:14:12.000]  Наверное, там это как раз позволит сделать чуть-чуть меньше ансейвов.
[01:14:12.000 --> 01:14:14.000]  Ну да-да, я про это.
[01:14:14.000 --> 01:14:28.000]  Давайте сделаем так, как комплятор нас просит, просто допишем move. На самом деле здесь можно было написать просто Intuiter еще, тогда бы раз сам выяснил, ага, мне вектор сюда нужно замовить, тогда бы move нам не нужен был.
[01:14:28.000 --> 01:14:30.000]  Это просто изляция проклона, вы помните.
[01:14:30.000 --> 01:14:38.000]  Поэтому перед Red Spawn вы почти всегда пишете move, потому что вы хотите именно замовить объекты, которые вы пользуете.
[01:14:38.000 --> 01:14:44.000]  Даже если вы там пользуете имя нового имена по ссылке просто.
[01:14:44.000 --> 01:14:50.000]  Ну и те же самые рассуждения применяются к тому, почему UT, который мы возвращаем, должен быть статически lifetime.
[01:14:50.000 --> 01:14:58.000]  Потому что мы не знаем, к какой момент закончится наш thread, и нам приходится говорить, ну мы должны иметь возможность вернуться в любой момент.
[01:14:58.000 --> 01:15:00.000]  И у нас UT статик lifetime тоже.
[01:15:00.000 --> 01:15:04.000]  Теперь давайте на такую программу посмотрим.
[01:15:04.000 --> 01:15:08.000]  Что с ней не так?
[01:15:08.000 --> 01:15:12.000]  Ну, что с ней не так?
[01:15:12.000 --> 01:15:16.000]  Ну, что с ней не так?
[01:15:16.000 --> 01:15:20.000]  Ну, что с ней не так?
[01:15:20.000 --> 01:15:24.000]  Ну, что с ней не так?
[01:15:24.000 --> 01:15:28.000]  Ну, что с ней не так?
[01:15:46.000 --> 01:15:52.000]  Ну, когда ты пишешь data matches, то конечно да, но Borrowed data по ссылке.
[01:15:52.000 --> 01:15:56.000]  Да, статика у нас не хватает.
[01:15:56.000 --> 01:16:00.000]  Та же самая проблема, что и была до этого.
[01:16:00.000 --> 01:16:02.000]  Ну, мы получаем такую-то ошибку.
[01:16:02.000 --> 01:16:06.000]  Он требует, чтобы у нас был lifetime статик.
[01:16:06.000 --> 01:16:10.000]  Иначе мы можем пережить дейта.
[01:16:10.000 --> 01:16:14.000]  Давайте добавим RC.
[01:16:14.000 --> 01:16:18.000]  RC же статик, она никаких lifetime и зависимости не имеет.
[01:16:22.000 --> 01:16:26.000]  Есть ли проблемы в этом коде?
[01:16:40.000 --> 01:16:44.000]  Сколько RC?
[01:16:44.000 --> 01:16:48.000]  Так, это хорошее рассуждение.
[01:16:48.000 --> 01:16:52.000]  У него уже дроб конкурент.
[01:16:52.000 --> 01:16:56.000]  Да, у нас RC это штука, в которой у нас нет никакого томика внутри.
[01:16:56.000 --> 01:17:00.000]  У нас там просто какое-то число, которое мы просто меняем.
[01:17:00.000 --> 01:17:06.000]  И за счет этого получается, что у нас здесь data race на счетчике внутри.
[01:17:06.000 --> 01:17:10.000]  Нам, конечно, раз скажет не совсем об этом.
[01:17:10.000 --> 01:17:14.000]  Он скажет, смотрите-ка, TradeSend для RC не выполнен.
[01:17:14.000 --> 01:17:20.000]  Получается, мы встретились с TradeSend, попробовав попользоваться.
[01:17:20.000 --> 01:17:26.000]  Ну, окей, по примечению становится понятно, в чем суть этого гениального трейта.
[01:17:26.000 --> 01:17:30.000]  Так, давай, в чем суть? Попробуй угадать.
[01:17:30.000 --> 01:17:34.000]  Насколько я помню, он все-таки в модуле Market лежит.
[01:17:34.000 --> 01:17:40.000]  Это означает, что можно передавать объект безопасно в другой поток.
[01:17:40.000 --> 01:17:44.000]  Да, это означает то, что можно передавать объект безопасно в другой поток.
[01:17:44.000 --> 01:17:48.000]  Небезопасность RC в том, что мы его можем склонировать, передать в другой поток.
[01:17:48.000 --> 01:17:54.000]  Одна из ситуаций, это два трыда просто умирают, меняют на время на счетчик в RC.
[01:17:54.000 --> 01:17:56.000]  Получается, что у нас data race.
[01:17:56.000 --> 01:17:58.000]  А мы не хотим data race.
[01:17:58.000 --> 01:18:00.000]  Мы хотим свободный стройгон.
[01:18:00.000 --> 01:18:06.000]  Вот у нас там неатомарный счетчик и data race.
[01:18:06.000 --> 01:18:08.000]  Как раз все это говорит.
[01:18:08.000 --> 01:18:12.000]  Давайте теперь вспомним, что такое data race.
[01:18:12.000 --> 01:18:16.000]  Все concurrency знаем, все очень умеют.
[01:18:16.000 --> 01:18:22.000]  Ну, давайте, Андрей, самое простое определение, которое от Рома Липовски говорит,
[01:18:22.000 --> 01:18:26.000]  подойти к школьнику на улице и сказать ему, что такое data race.
[01:18:26.000 --> 01:18:30.000]  Неупорядоченная синхронизация и неатомарное обращение к чей-то памяти.
[01:18:30.000 --> 01:18:32.000]  Все равно как-то зовут.
[01:18:32.000 --> 01:18:34.000]  Не, у нас несколько потоков.
[01:18:34.000 --> 01:18:42.000]  Хотя бы один пишет, а другой с чей-то памяти работает.
[01:18:42.000 --> 01:18:44.000]  У нас есть несколько взаимодействий с чей-то памяти.
[01:18:44.000 --> 01:18:50.000]  Один из них читает, другой пишет, и, по крайней мере, один из них не синхронизируется.
[01:18:50.000 --> 01:18:54.000]  Это то, как Рома Липовски говорит, школьнику подойти на улицу,
[01:18:54.000 --> 01:18:58.000]  схватить его за руку, сказать ему третью постулату, и вот вы объяснили data race.
[01:18:58.000 --> 01:19:00.000]  Ну, кажется, что такое было.
[01:19:00.000 --> 01:19:06.000]  Да, тут, конечно, в идеале нужны memory models, happens before и все такое,
[01:19:06.000 --> 01:19:08.000]  но мы обойдемся и таким определением.
[01:19:08.000 --> 01:19:10.000]  Все-таки с concurrency прошли, можно себе позвольте прощения.
[01:19:10.000 --> 01:19:12.000]  С конкуренцией.
[01:19:12.000 --> 01:19:16.000]  Да, мы сейчас дойдем до этого.
[01:19:16.000 --> 01:19:22.000]  В тот момент, когда Rust был на его early stages разработки,
[01:19:22.000 --> 01:19:30.000]  в тот момент люди верили в то, что memory safety и data race safety — это две разные вещи.
[01:19:30.000 --> 01:19:36.000]  То есть что их нужно как-то по-разному абсолютно репатчить, скажем так, языке.
[01:19:36.000 --> 01:19:40.000]  Но оказалось, в конечном итоге, что из одного выходит другое.
[01:19:40.000 --> 01:19:46.000]  То есть это что из memory safety в одноопоточном случае можно чуть-чуть добавить трейты,
[01:19:46.000 --> 01:19:50.000]  как мы сейчас видим с send-desync, и получается свободность от рейса вообще.
[01:19:50.000 --> 01:19:58.000]  Data race — это вещь, которая абсолютно спокойно превратится в систему типа фраз.
[01:19:58.000 --> 01:20:04.000]  Как вы понимаете, у нас мутировать мы из нескольких потоков не умеем,
[01:20:04.000 --> 01:20:06.000]  потому что мы не можем иметь несколько мутабельных ссылок.
[01:20:06.000 --> 01:20:08.000]  Соответственно, мы не можем data race получить.
[01:20:08.000 --> 01:20:10.000]  Но есть одна сложность.
[01:20:10.000 --> 01:20:12.000]  Дело в том, что у нас есть interior mutability.
[01:20:12.000 --> 01:20:18.000]  Мы же иногда хотим все-таки ref cell, например, всякие такие вещи иметь, чтобы мутировать, имея несколько ссылок.
[01:20:18.000 --> 01:20:22.000]  Собственно, это причина, почему у нас есть send-desync.
[01:20:22.000 --> 01:20:27.000]  То есть если бы у нас не было interior mutability, а он нам в принципе нужен,
[01:20:27.000 --> 01:20:32.000]  то в таком случае система wnrship rasta решала бы нам все проблемы уже и так,
[01:20:32.000 --> 01:20:36.000]  на уровне еще компиляции за трейсами.
[01:20:36.000 --> 01:20:38.000]  К сожалению, нам нужен send-desync.
[01:20:38.000 --> 01:20:44.000]  Send-desync — это небезопасные маркерные трейты с таким вот значением.
[01:20:44.000 --> 01:20:46.000]  Сейчас нам нужно разобраться.
[01:20:46.000 --> 01:20:50.000]  Tip send — тогда, когда вы можете его безопасно посылать в другой трейд.
[01:20:50.000 --> 01:20:56.000]  RC был небезопасен, потому что иметь несколько instances of RC — это потенциально, даже не пользуясь SIM,
[01:20:56.000 --> 01:21:00.000]  это у data race на счетчике внутри.
[01:21:01.000 --> 01:21:04.000]  Send-desync — это просто передать помутение?
[01:21:04.000 --> 01:21:08.000]  Да, то есть в плане посылать его в другой трейд небезопасно.
[01:21:08.000 --> 01:21:12.000]  Например, вектор безопасно посылать, но послали и все.
[01:21:14.000 --> 01:21:17.000]  Какой-то есть, скажем так.
[01:21:17.000 --> 01:21:19.000]  А вот теперь с синком немножко сложнее.
[01:21:19.000 --> 01:21:24.000]  Это если его безопасно share-ить между трейдами.
[01:21:24.000 --> 01:21:27.000]  Share-ить — это означает иметь ссылку.
[01:21:27.000 --> 01:21:34.000]  Если у вас есть ссылка на несколько объектов из нескольких трейдов, то в таком случае вы его share-ите.
[01:21:34.000 --> 01:21:41.000]  Синка означает, что данный тип безопасно можно, имея ссылку, share-ить между трейдами.
[01:21:43.000 --> 01:21:49.000]  T — это sync только тогда, когда обычно не бьют ссылка, а обычно ссылка — это send.
[01:21:49.000 --> 01:21:51.000]  То есть вы можете посылать ссылку на тип.
[01:21:52.000 --> 01:21:59.000]  Например, если у вас есть какой-то статик И32, то его можно безопасно расширить между трейдами,
[01:21:59.000 --> 01:22:01.000]  потому что вы будете его только читать по этой ссылке.
[01:22:01.000 --> 01:22:03.000]  Ну это же безопасно, да?
[01:22:05.000 --> 01:22:09.000]  Ну и соответственно, например, send-безопасен вектор И32,
[01:22:09.000 --> 01:22:14.000]  потому что никаких у нас проблем не возникнет с тем, что он пошли вектор.
[01:22:14.000 --> 01:22:20.000]  Утверждается, что этих двух трейдов достаточно для того, чтобы получить data-race-safety.
[01:22:26.000 --> 01:22:32.000]  Давайте небольшой квиз за комприте, чтобы понять, какие типы sync и send.
[01:22:32.000 --> 01:22:34.000]  Давайте И32. Он sync?
[01:22:34.000 --> 01:22:42.000]  Сейчас. Да и кажется, что это sync, потому что мы его заширили, ссылку на него можем.
[01:22:42.000 --> 01:22:44.000]  Она не вотазильная, кажется.
[01:22:46.000 --> 01:22:50.000]  Да, send-а-sync. Посылать можем, но это просто и нет.
[01:22:50.000 --> 01:22:54.000]  Так что мы можем посылать, потому что мы его заширили, ссылку на него можем.
[01:22:54.000 --> 01:22:56.000]  Так что мы можем посылать, потому что мы его заширили, ссылку на него можем.
[01:22:56.000 --> 01:22:58.000]  Так что мы можем посылать, потому что мы его заширили, ссылку на него можем.
[01:22:58.000 --> 01:23:00.000]  Так что мы можем посылать, потому что мы его заширили, ссылку на него можем.
[01:23:00.000 --> 01:23:02.000]  Да, send-а-sync.
[01:23:02.000 --> 01:23:04.000]  Посылать можем, но это просто и нет.
[01:23:08.000 --> 01:23:10.000]  Ну типа, если вы ссылку можете заширить, то все.
[01:23:10.000 --> 01:23:12.000]  Такое упрощенное определение, достаточно простое.
[01:23:12.000 --> 01:23:14.000]  На вектор.
[01:23:14.000 --> 01:23:16.000]  Send-а-sync?
[01:23:16.000 --> 01:23:18.000]  Или только send-а?
[01:23:22.000 --> 01:23:24.000]  Ну да. И sync.
[01:23:24.000 --> 01:23:26.000]  А ссылка у нас вторая.
[01:23:26.000 --> 01:23:28.000]  Так.
[01:23:28.000 --> 01:23:30.000]  Сейчас, погоди.
[01:23:30.000 --> 01:23:32.000]  Это ссылка, но она не владеет.
[01:23:32.000 --> 01:23:34.000]  Send-а-sync точно, да?
[01:23:38.000 --> 01:23:40.000]  Или нет, обязательно send-а-sync нельзя?
[01:23:44.000 --> 01:23:46.000]  Ну если что, давайте я скажу, что это статикстр.
[01:23:46.000 --> 01:23:48.000]  Иначе вы просто не пошлете от друга по итогу.
[01:23:48.000 --> 01:23:50.000]  А, ну конечно.
[01:23:50.000 --> 01:23:52.000]  Ну, уточнено.
[01:23:52.000 --> 01:23:54.000]  А если у вас здесь не статик, тогда бэнсейпом пользуйтесь и мучайтесь.
[01:23:54.000 --> 01:23:56.000]  Ну да.
[01:23:56.000 --> 01:23:58.000]  Это вроде и все.
[01:23:58.000 --> 01:24:00.000]  Тогда send-а-sync и send-а-sync.
[01:24:00.000 --> 01:24:02.000]  Да, send-а-sync.
[01:24:02.000 --> 01:24:04.000]  Если бы оно было не статик, тогда бы там есть
[01:24:04.000 --> 01:24:06.000]  spawn unchecked.
[01:24:06.000 --> 01:24:08.000]  Он просто перестает
[01:24:08.000 --> 01:24:10.000]  требовать что-либо от объектов
[01:24:10.000 --> 01:24:12.000]  в плане лайфтайна.
[01:24:12.000 --> 01:24:14.000]  И должны вы будете сами проверить, что вы заранее заканчиваете работу.
[01:24:14.000 --> 01:24:16.000]  И только в объекте лайфтайна закончится.
[01:24:20.000 --> 01:24:22.000]  Это unsafe, естественно.
[01:24:22.000 --> 01:24:24.000]  Так, rc.
[01:24:28.000 --> 01:24:30.000]  Он же send у нас
[01:24:30.000 --> 01:24:32.000]  это именно move-нуть
[01:24:32.000 --> 01:24:34.000]  или скопировать, если это код.
[01:24:34.000 --> 01:24:36.000]  Что вообще значит send?
[01:24:36.000 --> 01:24:38.000]  Send безопасно
[01:24:38.000 --> 01:24:40.000]  можно взять instance rc-t
[01:24:40.000 --> 01:24:42.000]  move-нуть в другой thread.
[01:24:42.000 --> 01:24:44.000]  Он не send на третьем сик?
[01:24:44.000 --> 01:24:46.000]  Я помню, он все-таки send.
[01:24:46.000 --> 01:24:48.000]  Нет, ты можешь взять rc-шку
[01:24:48.000 --> 01:24:50.000]  в одном thread.
[01:24:50.000 --> 01:24:52.000]  И склонировать тебя там.
[01:24:52.000 --> 01:24:54.000]  Создать thread, в который ты move-нешь одну из этих rc-шек
[01:24:54.000 --> 01:24:56.000]  и у тебя датарейс на дропе.
[01:25:02.000 --> 01:25:04.000]  А вот он на самом деле не синг тоже.
[01:25:04.000 --> 01:25:06.000]  Потому что если вы возьмете
[01:25:06.000 --> 01:25:08.000]  ссылку на rc-t, то вам ничего не мешает
[01:25:08.000 --> 01:25:10.000]  его склонировать.
[01:25:10.000 --> 01:25:12.000]  Если может склонировать, ну что, тогда вам мешает
[01:25:12.000 --> 01:25:14.000]  получить просто rc.
[01:25:14.000 --> 01:25:16.000]  Сел t.
[01:25:24.000 --> 01:25:26.000]  Представь, что t у нас
[01:25:26.000 --> 01:25:28.000]  send и синг.
[01:25:28.000 --> 01:25:30.000]  То есть по барабану там
[01:25:30.000 --> 01:25:32.000]  32, например.
[01:25:32.000 --> 01:25:34.000]  Просто сел сам по себе.
[01:25:34.000 --> 01:25:36.000]  Сейчас, сел у нас
[01:25:36.000 --> 01:25:38.000]  в runtime.
[01:25:42.000 --> 01:25:44.000]  Ну хорошо, смотри.
[01:25:44.000 --> 01:25:46.000]  Если я хочу через сел что-то помодифицировать,
[01:25:46.000 --> 01:25:48.000]  какую это ссылку требует?
[01:25:48.000 --> 01:25:50.000]  А, нет, стоп.
[01:25:50.000 --> 01:25:52.000]  Вот на сел вспоминать тогда.
[01:25:52.000 --> 01:25:54.000]  Сложно.
[01:25:54.000 --> 01:25:56.000]  Нет, ну это же interimitability.
[01:25:56.000 --> 01:25:58.000]  Interimitability – это менять через обычную ссылку
[01:25:58.000 --> 01:26:00.000]  с какими-то проверками пусть в runtime.
[01:26:00.000 --> 01:26:02.000]  Это не синг
[01:26:02.000 --> 01:26:04.000]  или нет, хоть стоп, оно же
[01:26:04.000 --> 01:26:06.000]  поникнет, так что
[01:26:06.000 --> 01:26:08.000]  сейчас, или там нет
[01:26:08.000 --> 01:26:10.000]  автоматного счетчика?
[01:26:10.000 --> 01:26:12.000]  Там нет автоматного счетчика.
[01:26:12.000 --> 01:26:14.000]  Тогда это не синг, потому что
[01:26:14.000 --> 01:26:16.000]  он мне не мог выиграть.
[01:26:16.000 --> 01:26:18.000]  Ну это только send. Вы можете
[01:26:18.000 --> 01:26:20.000]  послать сел, потому что он в одном
[01:26:20.000 --> 01:26:22.000]  экземпляре у вас только существует,
[01:26:22.000 --> 01:26:24.000]  но
[01:26:24.000 --> 01:26:26.000]  вы не смогли бы его синг
[01:26:26.000 --> 01:26:28.000]  сделать, потому что за счет того,
[01:26:28.000 --> 01:26:30.000]  что у вас имеется ссылка на сел, вы могли
[01:26:30.000 --> 01:26:32.000]  дезинфицировать из нескольких потоков то, что
[01:26:32.000 --> 01:26:34.000]  под ним лежит и получить датарейс.
[01:26:34.000 --> 01:26:36.000]  Там на счетчике уже датарейс,
[01:26:36.000 --> 01:26:38.000]  походу.
[01:26:38.000 --> 01:26:40.000]  Он же проникнет?
[01:26:40.000 --> 01:26:42.000]  Ну, вторую мутабельную?
[01:26:42.000 --> 01:26:44.000]  Нет, ты же мутабельную ссылку в принципе
[01:26:44.000 --> 01:26:46.000]  не сделаешь.
[01:26:46.000 --> 01:26:48.000]  Ну, имеется в виду, что
[01:26:48.000 --> 01:26:50.000]  у него уже дрон какой-то
[01:26:50.000 --> 01:26:52.000]  BorelMute.
[01:26:52.000 --> 01:26:54.000]  Ну ладно, у него BorelMute уже
[01:26:54.000 --> 01:26:56.000]  получается рейс
[01:26:56.000 --> 01:26:58.000]  на флаге счетчика
[01:26:58.000 --> 01:27:00.000]  для его забора
[01:27:00.000 --> 01:27:02.000]  или мутабеля.
[01:27:02.000 --> 01:27:04.000]  Не, так тебе же не обязательно...
[01:27:04.000 --> 01:27:06.000]  Не, подожди, BorelMute, он берет не мют ссылку
[01:27:06.000 --> 01:27:08.000]  на сел, а просто ссылку на сел.
[01:27:08.000 --> 01:27:10.000]  И сел конкретно отличается от refSell
[01:27:10.000 --> 01:27:12.000]  тем, что там нет никаких счетчиков,
[01:27:12.000 --> 01:27:14.000]  он просто записывает. Но проблема в том, что
[01:27:14.000 --> 01:27:16.000]  записывать это все равно датарейс.
[01:27:16.000 --> 01:27:18.000]  От refSell уже он будет
[01:27:18.000 --> 01:27:20.000]  проверять счетчики.
[01:27:22.000 --> 01:27:24.000]  Так, MuteXGuard.
[01:27:24.000 --> 01:27:26.000]  Что это такое?
[01:27:26.000 --> 01:27:28.000]  Это, смотри,
[01:27:28.000 --> 01:27:30.000]  MuteXGuard, когда блокируешь, получаешь guard.
[01:27:30.000 --> 01:27:32.000]  LogGuard.
[01:27:32.000 --> 01:27:34.000]  А, ну короче, то, что мы на
[01:27:34.000 --> 01:27:36.000]  Guard написали, действительно...
[01:27:36.000 --> 01:27:38.000]  Ну, вы писали там в Guard задачу.
[01:27:38.000 --> 01:27:40.000]  Ну, вот, да.
[01:27:40.000 --> 01:27:42.000]  Вот, брать, если что, MuteXGuard точно
[01:27:42.000 --> 01:27:44.000]  так же, как тот Guard.
[01:27:44.000 --> 01:27:46.000]  Там он защищает типы.
[01:27:46.000 --> 01:27:48.000]  А может же тогда, что...
[01:27:48.000 --> 01:27:50.000]  На самом деле, это немножко необычная ситуация.
[01:27:50.000 --> 01:27:52.000]  Это только синг.
[01:27:52.000 --> 01:27:54.000]  Это очень редкая ситуация. Обычно у вас тип
[01:27:54.000 --> 01:27:56.000]  либо ничего, либо только send, либо send и синг.
[01:27:56.000 --> 01:27:58.000]  Иногда бывает такое, что он only синг.
[01:27:58.000 --> 01:28:00.000]  И это как раз про MuteXGuard.
[01:28:00.000 --> 01:28:02.000]  Ну, было бы плохо, если бы вы могли в одном
[01:28:02.000 --> 01:28:04.000]  3D залочиться, залочить MuteX, а потом
[01:28:04.000 --> 01:28:06.000]  другому передать свой MuteX.
[01:28:06.000 --> 01:28:08.000]  Если бы он был send.
[01:28:08.000 --> 01:28:10.000]  Ну, тогда бы можно было разлочиться в другом
[01:28:10.000 --> 01:28:12.000]  3D уже. Ну, как-то.
[01:28:12.000 --> 01:28:14.000]  Ну, как-то.
[01:28:14.000 --> 01:28:16.000]  Вот, non-sink.
[01:28:16.000 --> 01:28:18.000]  Синг, потому что иметь ссылку безопасно.
[01:28:18.000 --> 01:28:20.000]  Потому что все равно для того, чтобы разлочить
[01:28:20.000 --> 01:28:22.000]  MuteX, вам нужно уничтожить, то есть иметь кладение.
[01:28:22.000 --> 01:28:24.000]  Вам ничего не дает ссылка
[01:28:24.000 --> 01:28:26.000]  на MuteXGuard.
[01:28:26.000 --> 01:28:28.000]  Mute, да.
[01:28:34.000 --> 01:28:36.000]  Ну, вот.
[01:28:36.000 --> 01:28:38.000]  Ну, вот.
[01:28:38.000 --> 01:28:40.000]  Ну, вот.
[01:28:40.000 --> 01:28:42.000]  Ну, вот.
[01:28:42.000 --> 01:28:44.000]  Ну, короче, что он send.
[01:28:44.000 --> 01:28:46.000]  Ну, он не дает ничего плохого.
[01:28:46.000 --> 01:28:48.000]  Ну, типа он only синг.
[01:28:48.000 --> 01:28:50.000]  Кстати, еще про он only синг
[01:28:50.000 --> 01:28:52.000]  типы, это в основном возникает вроде бы
[01:28:52.000 --> 01:28:54.000]  в логфрии алгоритмах,
[01:28:54.000 --> 01:28:56.000]  когда типа только он only синг.
[01:28:56.000 --> 01:28:58.000]  Короче, да, это очень редкая ситуация,
[01:28:58.000 --> 01:29:00.000]  чтобы типа он only синг.
[01:29:00.000 --> 01:29:02.000]  Ну, вам разлочиться.
[01:29:02.000 --> 01:29:04.000]  Ну, вот.
[01:29:04.000 --> 01:29:06.000]  Ну, вот.
[01:29:06.000 --> 01:29:08.000]  Ну, вот.
[01:29:08.000 --> 01:29:10.000]  Ну, вот.
[01:29:10.000 --> 01:29:12.000]  Еще.
[01:29:12.000 --> 01:29:14.000]  Он send.
[01:29:16.000 --> 01:29:18.000]  Вообще как-то все же.
[01:29:18.000 --> 01:29:20.000]  Вообще давайте не буду вас томить,
[01:29:20.000 --> 01:29:22.000]  это на самом деле тоже типы исключения,
[01:29:22.000 --> 01:29:24.000]  которые не синг и не send.
[01:29:24.000 --> 01:29:26.000]  Так как он
[01:29:26.000 --> 01:29:28.000]  не гарантирует никакой вообще
[01:29:28.000 --> 01:29:30.000]  безопасности указатель.
[01:29:30.000 --> 01:29:32.000]  Он unsafe.
[01:29:32.000 --> 01:29:34.000]  Он unsafe, вы просто за счет этого
[01:29:34.000 --> 01:29:36.000]  вам сказали, не нужно это не посылать
[01:29:36.000 --> 01:29:38.000]  и не синхронизировать, вообще ничего не нужно.
[01:29:38.000 --> 01:29:40.000]  Сами себе через unsafe
[01:29:40.000 --> 01:29:42.000]  с указателями работаете.
[01:29:48.000 --> 01:29:50.000]  В смысле, это уже и так unsafe trade.
[01:29:50.000 --> 01:29:52.000]  Ты их как бы имприментировать может только
[01:29:52.000 --> 01:29:54.000]  с unsafe.
[01:29:54.000 --> 01:29:56.000]  То есть ты должен гарантировать то, что тип
[01:29:56.000 --> 01:29:58.000]  действительно можно посылать.
[01:30:02.000 --> 01:30:04.000]  Можешь.
[01:30:04.000 --> 01:30:06.000]  Можешь написать просто
[01:30:06.000 --> 01:30:08.000]  unsafe.impl
[01:30:08.000 --> 01:30:10.000]  для
[01:30:10.000 --> 01:30:12.000]  сента.
[01:30:12.000 --> 01:30:14.000]  Для pointer
[01:30:14.000 --> 01:30:16.000]  видимо нельзя, потому что
[01:30:16.000 --> 01:30:18.000]  библиотечный тип.
[01:30:18.000 --> 01:30:20.000]  Ну, чисто для его указателей нельзя.
[01:30:20.000 --> 01:30:22.000]  Если уже хочется так, то тогда
[01:30:22.000 --> 01:30:24.000]  можно, например, обернуть его и сказать,
[01:30:24.000 --> 01:30:26.000]  что вот эта обертка умеет send и sync.
[01:30:26.000 --> 01:30:28.000]  Ну, тогда вы уже должны, ну, типа вы делаете
[01:30:28.000 --> 01:30:30.000]  unsafe trade, вы сами себя виноваты,
[01:30:30.000 --> 01:30:32.000]  раз вам показывают, типа вот вы unsafe
[01:30:32.000 --> 01:30:34.000]  написали, с этого момента я
[01:30:34.000 --> 01:30:36.000]  откроюсь от вас, вы сами
[01:30:36.000 --> 01:30:38.000]  проверяете все контракты.
[01:30:42.000 --> 01:30:44.000]  Вот. Большая часть типов send и sync
[01:30:44.000 --> 01:30:46.000]  ну, бывают такие вот исключения редкие.
[01:30:50.000 --> 01:30:52.000]  Также еще send и sync это авто,
[01:30:52.000 --> 01:30:54.000]  trade. Здесь, к сожалению, ключевое слово
[01:30:54.000 --> 01:30:56.000]  авто в моем техе не подсвечивается,
[01:30:56.000 --> 01:30:58.000]  но вообще это ключевое слово.
[01:30:58.000 --> 01:31:00.000]  Они имплементируются автоматически для всех
[01:31:00.000 --> 01:31:02.000]  типов, у которых все генерики,
[01:31:02.000 --> 01:31:04.000]  все, соответственно, типы, которые
[01:31:04.000 --> 01:31:06.000]  вы написали в самой структурке, они
[01:31:06.000 --> 01:31:08.000]  send и sync.
[01:31:14.000 --> 01:31:16.000]  Нет.
[01:31:16.000 --> 01:31:18.000]  В версии не все
[01:31:18.000 --> 01:31:20.000]  send и sync.
[01:31:20.000 --> 01:31:22.000]  Плюс это вообще
[01:31:22.000 --> 01:31:24.000]  land item, то есть там
[01:31:24.000 --> 01:31:26.000]  наверно стоит просто пометка,
[01:31:26.000 --> 01:31:28.000]  что это land item
[01:31:28.000 --> 01:31:30.000]  ref cell, и поэтому у него там
[01:31:30.000 --> 01:31:32.000]  какие-то есть свойства дефолтные, которые
[01:31:32.000 --> 01:31:34.000]  знает компилятор и язык.
[01:31:34.000 --> 01:31:36.000]  Почти все такие вещи
[01:31:36.000 --> 01:31:38.000]  в стандартной библиотеке как-то помечены.
[01:31:40.000 --> 01:31:42.000]  Это не кастели, это просто какие-то очень
[01:31:42.000 --> 01:31:44.000]  базовые вещи, и в стандартной библиотеке находятся
[01:31:44.000 --> 01:31:46.000]  практически только стандартные вещи,
[01:31:46.000 --> 01:31:48.000]  очень базовые. Поэтому получается
[01:31:48.000 --> 01:31:50.000]  так, что почти везде такие
[01:31:50.000 --> 01:31:52.000]  написанные штуки. Вот.
[01:31:52.000 --> 01:31:54.000]  Авто означает
[01:31:54.000 --> 01:31:56.000]  то, что, как я уже сказал,
[01:31:56.000 --> 01:31:58.000]  он имплементируется автоматически.
[01:31:58.000 --> 01:32:00.000]  Вы даже не видите, имплементация происходит
[01:32:00.000 --> 01:32:02.000]  в большую часть времени.
[01:32:02.000 --> 01:32:04.000]  То есть это еще круче, чем
[01:32:04.000 --> 01:32:06.000]  Drive Microsoft?
[01:32:06.000 --> 01:32:08.000]  Ну да, авто, он имплементируется
[01:32:08.000 --> 01:32:10.000]  прям вообще без вашего
[01:32:10.000 --> 01:32:12.000]  как бы без вашего
[01:32:12.000 --> 01:32:14.000]  ведома.
[01:32:14.000 --> 01:32:16.000]  Ну это, естественно,
[01:32:16.000 --> 01:32:18.000]  сильнее, чем Blank implementation,
[01:32:18.000 --> 01:32:20.000]  потому что он проверяет именно, что у вас там
[01:32:20.000 --> 01:32:22.000]  внутри, у всех типов что-то выполняется.
[01:32:22.000 --> 01:32:24.000]  Вы могли, кстати,
[01:32:24.000 --> 01:32:26.000]  в своем коде еще авто использовать, но пока
[01:32:26.000 --> 01:32:28.000]  что это только nightly feature.
[01:32:28.000 --> 01:32:30.000]  Я посмотрел
[01:32:30.000 --> 01:32:32.000]  буквально в
[01:32:32.000 --> 01:32:34.000]  tracking issue
[01:32:34.000 --> 01:32:36.000]  по этой фигне, и там буквально
[01:32:36.000 --> 01:32:38.000]  один пункт только не выполнен, поэтому
[01:32:38.000 --> 01:32:40.000]  скорее всего, ну там с 20, наверное,
[01:32:40.000 --> 01:32:42.000]  где-то, поэтому скорее всего появится уже
[01:32:42.000 --> 01:32:44.000]  авто трейд и в user space в какой-то момент.
[01:32:44.000 --> 01:32:46.000]  Пока что это только
[01:32:46.000 --> 01:32:48.000]  языковая штука.
[01:32:48.000 --> 01:32:50.000]  Бывают такие
[01:32:50.000 --> 01:32:52.000]  очень редкие случаи, когда
[01:32:52.000 --> 01:32:54.000]  send async неправильно.
[01:32:54.000 --> 01:32:56.000]  Ну, в общем,
[01:32:56.000 --> 01:32:58.000]  вдиравится. В таком случае вам нужно
[01:32:58.000 --> 01:33:00.000]  руками их убрать.
[01:33:00.000 --> 01:33:02.000]  То есть это нужно учитывать.
[01:33:02.000 --> 01:33:04.000]  Вот. Смотрите,
[01:33:04.000 --> 01:33:06.000]  здесь я использую, если вы решали
[01:33:06.000 --> 01:33:08.000]  try, вы видели вот фича, и там
[01:33:08.000 --> 01:33:10.000]  было что-то написано. Здесь я
[01:33:10.000 --> 01:33:12.000]  использую фичу negative impulse для того, чтобы
[01:33:12.000 --> 01:33:14.000]  как бы от имплз
[01:33:14.000 --> 01:33:16.000]  сделать, да?
[01:33:16.000 --> 01:33:18.000]  Сенда и синка для какой-то структурки.
[01:33:18.000 --> 01:33:20.000]  Обратите внимание, что фичи
[01:33:20.000 --> 01:33:22.000]  это только возможность
[01:33:22.000 --> 01:33:24.000]  узнать для компилятора.
[01:33:24.000 --> 01:33:26.000]  Stable компилятор Rast такие вещи не умеет.
[01:33:26.000 --> 01:33:28.000]  Negative impulse достаточно
[01:33:28.000 --> 01:33:30.000]  скоро должен появиться в ближайшем
[01:33:30.000 --> 01:33:32.000]  будущем,
[01:33:32.000 --> 01:33:34.000]  но
[01:33:34.000 --> 01:33:36.000]  пока что их нет. Если вы хотите
[01:33:36.000 --> 01:33:38.000]  Stable Rast, если что-то заэнэмплиментить,
[01:33:38.000 --> 01:33:40.000]  то в таком случае нужно чуть-чуть, ну,
[01:33:40.000 --> 01:33:42.000]  по частному признаюсь, покастылить.
[01:33:42.000 --> 01:33:44.000]  Смотрите, у вас есть disabled send,
[01:33:44.000 --> 01:33:46.000]  у вас meetXGuard это какая-то вещь,
[01:33:46.000 --> 01:33:48.000]  которая умеет в синг, но не умеет
[01:33:48.000 --> 01:33:50.000]  send. Соответственно, если у вас появляется
[01:33:50.000 --> 01:33:52.000]  send в структурке, ну, disabled send,
[01:33:52.000 --> 01:33:54.000]  то оно становится не send.
[01:33:54.000 --> 01:33:56.000]  И, соответственно,
[01:33:56.000 --> 01:33:58.000]  disabled sync тоже самое.
[01:33:58.000 --> 01:34:00.000]  Вы просто ставите такие поля,
[01:34:00.000 --> 01:34:02.000]  и, соответственно, у вас тест, теперь не send,
[01:34:02.000 --> 01:34:04.000]  и не sync. Кастыль немножко,
[01:34:04.000 --> 01:34:06.000]  но работает.
[01:34:06.000 --> 01:34:08.000]  Я, кстати, не карантирую,
[01:34:08.000 --> 01:34:10.000]  что это лучший способ решения
[01:34:10.000 --> 01:34:12.000]  этой проблемы. Это то, что я сам
[01:34:12.000 --> 01:34:14.000]  придумал.
[01:34:14.000 --> 01:34:16.000]  Пойнтер одновременно
[01:34:16.000 --> 01:34:18.000]  и send и sync отключат.
[01:34:18.000 --> 01:34:20.000]  Плюс phantomData это то,
[01:34:20.000 --> 01:34:22.000]  что это же за эстетики,
[01:34:22.000 --> 01:34:24.000]  соответственно, он никак не повлияет на твою структурку
[01:34:24.000 --> 01:34:26.000]  от того, что он тут есть.
[01:34:26.000 --> 01:34:28.000]  А pointer он будет занимать
[01:34:28.000 --> 01:34:30.000]  тебя честно памяти, требовать
[01:34:30.000 --> 01:34:32.000]  своих заполнений и так далее.
[01:34:32.000 --> 01:34:34.000]  Ну, берем phantomData указатель
[01:34:34.000 --> 01:34:36.000]  или pointer?
[01:34:36.000 --> 01:34:38.000]  Да, phantomData указатель.
[01:34:40.000 --> 01:34:42.000]  Просто чтоб сократить
[01:34:42.000 --> 01:34:44.000]  количество строк.
[01:34:44.000 --> 01:34:46.000]  В общем, phantomData,
[01:34:46.000 --> 01:34:48.000]  тут можно воспользоваться или написать какой-то тип,
[01:34:48.000 --> 01:34:50.000]  который во что-то не умеет.
[01:34:50.000 --> 01:34:52.000]  Вот, давайте вернемся к той
[01:34:52.000 --> 01:34:54.000]  проблемке, что у нас была. Здесь нам нужно
[01:34:54.000 --> 01:34:56.000]  воспользоваться arg. Просите внимание,
[01:34:56.000 --> 01:34:58.000]  название не просто с а начинается.
[01:34:58.000 --> 01:35:00.000]  AtomicReferencePointer, то есть это
[01:35:00.000 --> 01:35:02.000]  SharedPointer плюс solid.
[01:35:02.000 --> 01:35:04.000]  Он
[01:35:04.000 --> 01:35:06.000]  в общем там атомарный счетчик, соответственно
[01:35:06.000 --> 01:35:08.000]  он send и sync.
[01:35:08.000 --> 01:35:10.000]  Не спокойно пользуйтесь.
[01:35:12.000 --> 01:35:14.000]  Спокойно можете его посылать.
[01:35:14.000 --> 01:35:16.000]  Конечно, он дает немножко больше
[01:35:16.000 --> 01:35:18.000]  overhead, чем просто rc, потому что rc это просто
[01:35:18.000 --> 01:35:20.000]  число, а внутри arg именно
[01:35:20.000 --> 01:35:22.000]  atomic, который синхронизируется.
[01:35:26.000 --> 01:35:28.000]  В курсе конкарзии вы знаете, конечно же,
[01:35:28.000 --> 01:35:30.000]  что arg невозможно написать без атомиков,
[01:35:30.000 --> 01:35:32.000]  как мне странно, да?
[01:35:32.000 --> 01:35:34.000]  Более того, никакие приметивные синхронизации
[01:35:34.000 --> 01:35:36.000]  без атомиков невозможно, в принципе.
[01:35:36.000 --> 01:35:38.000]  У вас даже тогда 3D между собой
[01:35:38.000 --> 01:35:40.000]  не смогут синхронизироваться.
[01:35:40.000 --> 01:35:42.000]  Как жить тогда?
[01:35:42.000 --> 01:35:44.000]  Чтобы атомики работали, вам
[01:35:44.000 --> 01:35:46.000]  нужна модель памяти.
[01:35:46.000 --> 01:35:48.000]  Мы могли просто сказать, что нам хватает
[01:35:48.000 --> 01:35:50.000]  sequential consistency, но там вроде бы год, так
[01:35:50.000 --> 01:35:52.000]  сказано, да?
[01:35:54.000 --> 01:35:56.000]  Год там есть.
[01:35:56.000 --> 01:35:58.000]  На лекции про планировщик
[01:35:58.000 --> 01:36:00.000]  там показывается
[01:36:00.000 --> 01:36:02.000]  часть имплементации
[01:36:02.000 --> 01:36:04.000]  планировщика, и там попадаются слабые
[01:36:04.000 --> 01:36:06.000]  атомарные операции.
[01:36:06.000 --> 01:36:08.000]  А у батарейск просто упоротая,
[01:36:08.000 --> 01:36:10.000]  его почти нет.
[01:36:10.000 --> 01:36:12.000]  А есть ли это не UE,
[01:36:12.000 --> 01:36:14.000]  это какая-то ничья?
[01:36:14.000 --> 01:36:16.000]  Возможно, потому что там есть
[01:36:16.000 --> 01:36:18.000]  ГЦ и, соответственно, у датарейса пофигу.
[01:36:18.000 --> 01:36:20.000]  Непонятно.
[01:36:20.000 --> 01:36:22.000]  В общем,
[01:36:22.000 --> 01:36:24.000]  мы могли сказать, что нам хватает sequential
[01:36:24.000 --> 01:36:26.000]  consistency, но мы в растеже,
[01:36:26.000 --> 01:36:28.000]  мы хотим написать быстрее программу,
[01:36:28.000 --> 01:36:30.000]  чтобы синхронизация была минимальной,
[01:36:30.000 --> 01:36:32.000]  минимальной contention, так сказать.
[01:36:32.000 --> 01:36:34.000]  Поэтому
[01:36:34.000 --> 01:36:36.000]  то, что разделом сказал, давайте мы
[01:36:36.000 --> 01:36:38.000]  переиспользуем модель C++20
[01:36:38.000 --> 01:36:40.000]  модель памяти.
[01:36:40.000 --> 01:36:42.000]  Она не идеальна, вы об этом знаете.
[01:36:42.000 --> 01:36:44.000]  Возможно, не знаете, но слышали.
[01:36:46.000 --> 01:36:48.000]  Это не идеальная модель памяти,
[01:36:48.000 --> 01:36:50.000]  но, тем не менее, она очень хорошо изучена,
[01:36:50.000 --> 01:36:52.000]  под нее есть много инструментов, все такое.
[01:36:52.000 --> 01:36:54.000]  Именно поэтому RAST ее выбрал.
[01:36:54.000 --> 01:36:56.000]  Потому что среди существующих вариантов
[01:36:56.000 --> 01:36:58.000]  это и быстрая модель памяти,
[01:36:58.000 --> 01:37:00.000]  и хорошо изучена,
[01:37:00.000 --> 01:37:02.000]  и активно используется,
[01:37:02.000 --> 01:37:04.000]  поэтому
[01:37:04.000 --> 01:37:06.000]  выбрана была именно эта модель памяти.
[01:37:06.000 --> 01:37:08.000]  Но вообще считается официально,
[01:37:08.000 --> 01:37:10.000]  что в RAST нет определенной модели памяти,
[01:37:10.000 --> 01:37:12.000]  несмотря на то, что
[01:37:12.000 --> 01:37:14.000]  он пользуется модели памяти C++20.
[01:37:14.000 --> 01:37:16.000]  И считается, что
[01:37:16.000 --> 01:37:18.000]  если в Академии
[01:37:18.000 --> 01:37:20.000]  появится хорошая модель памяти,
[01:37:20.000 --> 01:37:22.000]  то в таком случае RAST сразу же заадоптит
[01:37:22.000 --> 01:37:24.000]  себя.
[01:37:24.000 --> 01:37:26.000]  Пока что мы пользуемся модели памяти
[01:37:26.000 --> 01:37:28.000]  C++20,
[01:37:28.000 --> 01:37:30.000]  и чуть попозже будем пользоваться чем-то поинтереснее.
[01:37:30.000 --> 01:37:32.000]  Может, с меньшим
[01:37:32.000 --> 01:37:34.000]  числом бага, быстрее, не знаю,
[01:37:34.000 --> 01:37:36.000]  что-нибудь.
[01:37:42.000 --> 01:37:44.000]  Давайте поговорим о модулях, которые есть,
[01:37:44.000 --> 01:37:46.000]  о модулях CDSync, которые есть
[01:37:46.000 --> 01:37:48.000]  в стандартной библиотеке.
[01:37:48.000 --> 01:37:50.000]  Кстати, я вам не сказал
[01:37:50.000 --> 01:37:52.000]  наверное про RASE,
[01:37:52.000 --> 01:37:54.000]  в общем случае. Давайте пока что
[01:37:54.000 --> 01:37:56.000]  посмотрим на SYNC.
[01:38:00.000 --> 01:38:02.000]  В общем, у нас есть для начала
[01:38:02.000 --> 01:38:04.000]  атомики,
[01:38:04.000 --> 01:38:06.000]  о чем мы и говорили.
[01:38:06.000 --> 01:38:08.000]  У нас здесь request handler какой-то,
[01:38:08.000 --> 01:38:10.000]  в котором мы содержим арк
[01:38:10.000 --> 01:38:12.000]  на число
[01:38:12.000 --> 01:38:14.000]  запросов. Почему нам тут
[01:38:14.000 --> 01:38:16.000]  нужен арк? Вроде бы у нас и арк
[01:38:16.000 --> 01:38:18.000]  одновременный какой-то атомик, как-то
[01:38:18.000 --> 01:38:20.000]  странно выглядит. Почему так?
[01:38:32.000 --> 01:38:34.000]  Сейчас, а что у нас тут по мутабельности
[01:38:34.000 --> 01:38:36.000]  вообще?
[01:38:38.000 --> 01:38:40.000]  Что происходит?
[01:38:40.000 --> 01:38:42.000]  Вы уверены, что получается атомик
[01:38:42.000 --> 01:38:44.000]  в боговем и мутабельный,
[01:38:44.000 --> 01:38:46.000]  а потом вызываем у него
[01:38:46.000 --> 01:38:48.000]  атомик? Ну, короче, тут Interim Intability
[01:38:48.000 --> 01:38:50.000]  внезапно.
[01:38:50.000 --> 01:38:52.000]  Да, Interim Intability, все, потому что
[01:38:52.000 --> 01:38:54.000]  атомик — это примитив Interim Intability.
[01:38:54.000 --> 01:38:56.000]  Какая гадость! И странно.
[01:38:56.000 --> 01:38:58.000]  Это не гадость, наоборот, прекрасно,
[01:38:58.000 --> 01:39:00.000]  потому что формальный модель RASE,
[01:39:00.000 --> 01:39:02.000]  модель Interim Intability,
[01:39:02.000 --> 01:39:04.000]  который оказался в одном поточном случае
[01:39:04.000 --> 01:39:06.000]  исключительно костылем,
[01:39:06.000 --> 01:39:08.000]  внезапно в многопоточном случае
[01:39:08.000 --> 01:39:10.000]  влазят атомики. И более того,
[01:39:10.000 --> 01:39:12.000]  атомик — это просто многопоточный
[01:39:12.000 --> 01:39:14.000]  analog cell.
[01:39:16.000 --> 01:39:18.000]  Не, сейчас, все-таки не очень понятно.
[01:39:18.000 --> 01:39:20.000]  Кажется, что если бы у нас не влажка,
[01:39:20.000 --> 01:39:22.000]  то мы все еще могли бы...
[01:39:22.000 --> 01:39:24.000]  Ну, смотри, ты просто не знаешь, когда
[01:39:24.000 --> 01:39:26.000]  умрут все хендлеры,
[01:39:26.000 --> 01:39:28.000]  у которых есть ссылка
[01:39:28.000 --> 01:39:30.000]  в внутренний каунтер.
[01:39:32.000 --> 01:39:34.000]  Из-за того, что ты не знаешь, какое время жизни,
[01:39:34.000 --> 01:39:36.000]  тебе нужно пользоваться ARC, либо делать статический пример.
[01:39:36.000 --> 01:39:38.000]  Пахнет плохо написанным кодом.
[01:39:38.000 --> 01:39:40.000]  Сказал Парам.
[01:39:40.000 --> 01:39:42.000]  Почему?
[01:39:42.000 --> 01:39:44.000]  Ну, странные вайфтаймы —
[01:39:44.000 --> 01:39:46.000]  это зло. Они приводят вот в каком-то
[01:39:46.000 --> 01:39:48.000]  оверхеду, какие-то сигнализации
[01:39:48.000 --> 01:39:50.000]  они нужны.
[01:39:50.000 --> 01:39:52.000]  Ты можешь просто сделать статический каунтер
[01:39:52.000 --> 01:39:54.000]  числа запроса. А если ты хочешь на статический,
[01:39:54.000 --> 01:39:56.000]  чтобы он умирал вместе с request-хендлерами,
[01:39:56.000 --> 01:39:58.000]  тогда тебе нужно
[01:39:58.000 --> 01:40:00.000]  шерить между ними эту штуку.
[01:40:00.000 --> 01:40:02.000]  Больше ничего не можешь сделать,
[01:40:02.000 --> 01:40:04.000]  к сожалению.
[01:40:06.000 --> 01:40:08.000]  Так. Могут ли некорректные
[01:40:08.000 --> 01:40:10.000]  mem-реордеры привести к mem-variant-safety?
[01:40:10.000 --> 01:40:12.000]  Мы же все еще можем написать
[01:40:12.000 --> 01:40:14.000]  какой-то некорректный ордеринг.
[01:40:14.000 --> 01:40:16.000]  И у нас получится, естественно,
[01:40:16.000 --> 01:40:18.000]  датарейс.
[01:40:18.000 --> 01:40:20.000]  Если мы, например, напишем везде
[01:40:20.000 --> 01:40:22.000]  relax, то будем как-то пытаться там
[01:40:22.000 --> 01:40:24.000]  синхронизироваться.
[01:40:24.000 --> 01:40:26.000]  Может ли быть такое?
[01:40:34.000 --> 01:40:36.000]  На самом деле нет.
[01:40:38.000 --> 01:40:40.000]  Если вы не пользуетесь тем кодом, который
[01:40:40.000 --> 01:40:42.000]  полагается на
[01:40:42.000 --> 01:40:44.000]  корректные модели памяти, в таком случае
[01:40:44.000 --> 01:40:46.000]  у вас никогда
[01:40:46.000 --> 01:40:48.000]  не будет mem-reant-safety.
[01:40:48.000 --> 01:40:50.000]  Более того, это правда для произвольных
[01:40:50.000 --> 01:40:52.000]  гонок.
[01:40:52.000 --> 01:40:54.000]  Но здесь сразу же вопрос-ответ,
[01:40:54.000 --> 01:40:56.000]  потому что вы вряд ли ответите.
[01:40:56.000 --> 01:40:58.000]  Что насчет общих
[01:40:58.000 --> 01:41:00.000]  датарейс-кондишенов?
[01:41:00.000 --> 01:41:02.000]  Датарейс – это лишь в частном случае гонка
[01:41:02.000 --> 01:41:04.000]  на каком-то конкретной очейке памяти.
[01:41:04.000 --> 01:41:06.000]  Рейс-кондишен – это уже
[01:41:06.000 --> 01:41:08.000]  произвольный и плохо синхронизированный код.
[01:41:08.000 --> 01:41:10.000]  Рейс-кондишены уже могут
[01:41:10.000 --> 01:41:12.000]  случаться в расе. Ваша программа может
[01:41:12.000 --> 01:41:14.000]  задедлочиться, она может
[01:41:14.000 --> 01:41:16.000]  разломать какие-то инварианты.
[01:41:16.000 --> 01:41:18.000]  Но тем не менее,
[01:41:18.000 --> 01:41:20.000]  это тоже не буду доказывать,
[01:41:20.000 --> 01:41:22.000]  что вообще рейс-кондишен не может нарушить
[01:41:22.000 --> 01:41:24.000]  memory-safety в расе.
[01:41:26.000 --> 01:41:28.000]  Такая вот прикольная штука.
[01:41:28.000 --> 01:41:30.000]  Поэтому получается, что
[01:41:30.000 --> 01:41:32.000]  вышло то, что называется
[01:41:32.000 --> 01:41:34.000]  fearless concurrency.
[01:41:34.000 --> 01:41:36.000]  Если пишем код
[01:41:36.000 --> 01:41:38.000]  в safe-raste, то в таком случае у вас
[01:41:38.000 --> 01:41:40.000]  не будет никаких датарейсов, mem-reant-safety,
[01:41:40.000 --> 01:41:42.000]  undefined-behavior.
[01:41:42.000 --> 01:41:44.000]  Никогда.
[01:41:44.000 --> 01:41:46.000]  А те
[01:41:46.000 --> 01:41:48.000]  рейс-кондишены, которые у вас вылезут,
[01:41:48.000 --> 01:41:50.000]  они не приведут к ми-reant-safety.
[01:41:50.000 --> 01:41:52.000]  Поэтому мы свободны от рейса.
[01:41:52.000 --> 01:41:54.000]  Прям полностью
[01:41:54.000 --> 01:41:56.000]  от них избавиться мы конечно же не можем,
[01:41:56.000 --> 01:41:58.000]  потому что такая система просто не имеет
[01:41:58.000 --> 01:42:00.000]  права на жизнь. У нас весь
[01:42:00.000 --> 01:42:02.000]  all the world is racy.
[01:42:06.000 --> 01:42:08.000]  Железо, на котором мы запускаемся, на os,
[01:42:08.000 --> 01:42:10.000]  на котором мы запускаемся, все с
[01:42:10.000 --> 01:42:12.000]  гонками, поэтому
[01:42:12.000 --> 01:42:14.000]  системы, в которые мы
[01:42:14.000 --> 01:42:16.000]  говорим, что мы
[01:42:16.000 --> 01:42:18.000]  избавились от рейс-кондишенов, она
[01:42:18.000 --> 01:42:20.000]  скорее всего просто не планирует.
[01:42:24.000 --> 01:42:26.000]  Вот.
[01:42:26.000 --> 01:42:28.000]  Смотрите, это просто пример такой
[01:42:28.000 --> 01:42:30.000]  просто. Я сделал
[01:42:30.000 --> 01:42:32.000]  трейдспол, но при этом не заджойдется.
[01:42:32.000 --> 01:42:34.000]  Я написал 10 здесь.
[01:42:34.000 --> 01:42:36.000]  Соответственно, я выйду за пределы
[01:42:36.000 --> 01:42:38.000]  вектора. Но тем не менее, вспоминайте,
[01:42:38.000 --> 01:42:40.000]  вектор, если я попробую так вот сделать, я получу
[01:42:40.000 --> 01:42:42.000]  панику, если у меня десятка кажется здесь.
[01:42:42.000 --> 01:42:44.000]  Поэтому я не нарушил mem-reant-safety.
[01:42:46.000 --> 01:42:48.000]  Как-то так.
[01:42:48.000 --> 01:42:50.000]  Вот если у вас будет
[01:42:50.000 --> 01:42:52.000]  unsafe-код, здесь вот,
[01:42:52.000 --> 01:42:54.000]  мы сделали get unchecked, вот таким вот глупым
[01:42:54.000 --> 01:42:56.000]  достаточно образом, то
[01:42:56.000 --> 01:42:58.000]  в таком случае вы уже можете получить mem-reant-safety
[01:42:58.000 --> 01:43:00.000]  и все потому, что у вас пользуется unsafe.
[01:43:00.000 --> 01:43:02.000]  Вы не выполнили
[01:43:02.000 --> 01:43:04.000]  какой-то контракт.
[01:43:08.000 --> 01:43:10.000]  Примерно понятно
[01:43:10.000 --> 01:43:12.000]  наша свобода от датарейса.
[01:43:12.000 --> 01:43:14.000]  Откуда растут у нее
[01:43:14.000 --> 01:43:16.000]  ноги.
[01:43:18.000 --> 01:43:20.000]  Где у нас рейс кондицион?
[01:43:20.000 --> 01:43:22.000]  Так.
[01:43:22.000 --> 01:43:24.000]  Ну и то,
[01:43:24.000 --> 01:43:26.000]  что я сказал, на самом деле Atomic
[01:43:26.000 --> 01:43:28.000]  это multi-threaded cell просто.
[01:43:30.000 --> 01:43:32.000]  Это такое вот число,
[01:43:32.000 --> 01:43:34.000]  в котором мы пишем.
[01:43:34.000 --> 01:43:36.000]  Много поточное.
[01:43:36.000 --> 01:43:38.000]  А что же такое
[01:43:38.000 --> 01:43:40.000]  multi-threaded ref cell?
[01:43:44.000 --> 01:43:46.000]  MutexGuard?
[01:43:48.000 --> 01:43:50.000]  Нет, просто Mutex.
[01:43:50.000 --> 01:43:52.000]  MutexGuard
[01:43:52.000 --> 01:43:54.000]  это именно вещь, которая получается
[01:43:54.000 --> 01:43:56.000]  в результате лока Mutex,
[01:43:56.000 --> 01:43:58.000]  а сам Mutex — это Mutex.
[01:44:00.000 --> 01:44:02.000]  В общем, Mutex — это
[01:44:02.000 --> 01:44:04.000]  такой примитив синхронизации,
[01:44:04.000 --> 01:44:06.000]  который нужен для защиты
[01:44:06.000 --> 01:44:08.000]  какого-то те.
[01:44:08.000 --> 01:44:10.000]  То есть в плюсах у вас Mutex был какой?
[01:44:10.000 --> 01:44:12.000]  Он у вас не защищал никакой те,
[01:44:12.000 --> 01:44:14.000]  он просто был примитивный,
[01:44:14.000 --> 01:44:16.000]  на котором можно было позвать лок,
[01:44:16.000 --> 01:44:18.000]  на котором можно было позвать онлок.
[01:44:18.000 --> 01:44:20.000]  Так что Mutex имеет
[01:44:20.000 --> 01:44:22.000]  темплейтный аргумент те,
[01:44:22.000 --> 01:44:24.000]  и когда вы делаете лок,
[01:44:24.000 --> 01:44:26.000]  то он возвращает ссылку на элемент,
[01:44:26.000 --> 01:44:28.000]  чтобы вы модифицировали.
[01:44:28.000 --> 01:44:30.000]  И говорит, никто больше этот элемент, кроме вас,
[01:44:30.000 --> 01:44:32.000]  сейчас не может модифицировать.
[01:44:32.000 --> 01:44:34.000]  Все остальные будут блокироваться
[01:44:34.000 --> 01:44:36.000]  при вводке за лочти.
[01:44:36.000 --> 01:44:38.000]  В общем-то это точно ref cell.
[01:44:38.000 --> 01:44:40.000]  Кстати,
[01:44:40.000 --> 01:44:42.000]  мне кажется, того, почему Mutex именно те.
[01:44:42.000 --> 01:44:44.000]  То есть это такой контейнер, который те имеет.
[01:44:44.000 --> 01:44:46.000]  На курсе Concurrency
[01:44:46.000 --> 01:44:48.000]  было ли такое, что вы писали просто Mutex
[01:44:48.000 --> 01:44:50.000]  с нижним подчеркиванием где-то,
[01:44:50.000 --> 01:44:52.000]  и в итоге вам ассистенты говорили — ай-ай-ай.
[01:44:52.000 --> 01:44:54.000]  И вот непонятно, что защищает этот Mutex.
[01:44:54.000 --> 01:44:56.000]  Наверное, же такое было.
[01:44:58.000 --> 01:45:00.000]  В крайней мере, если посмотрите
[01:45:00.000 --> 01:45:02.000]  на код Chromium,
[01:45:02.000 --> 01:45:04.000]  то там, если есть какой-то Mutex,
[01:45:04.000 --> 01:45:06.000]  там обязательно есть комментарий, что
[01:45:06.000 --> 01:45:08.000]  вот этот Mutex защищает вот это и вот это.
[01:45:10.000 --> 01:45:12.000]  Что это такое?
[01:45:12.000 --> 01:45:14.000]  То есть примерно так же, как и в Rust,
[01:45:14.000 --> 01:45:16.000]  защищается Ten, но на самом деле Mutex защищает
[01:45:16.000 --> 01:45:18.000]  какой-то SharedState конкретно.
[01:45:18.000 --> 01:45:20.000]  Поэтому на самом деле
[01:45:20.000 --> 01:45:22.000]  вот такое вот устройство Mutex, оно более
[01:45:22.000 --> 01:45:24.000]  правильное.
[01:45:24.000 --> 01:45:26.000]  Кроме того, в Rust
[01:45:26.000 --> 01:45:28.000]  есть еще
[01:45:28.000 --> 01:45:30.000]  несколько приемлемых синхронизаций
[01:45:30.000 --> 01:45:32.000]  в стандарт-бюллетеке.
[01:45:32.000 --> 01:45:34.000]  Barrier, Condvar.
[01:45:34.000 --> 01:45:36.000]  В общем, MPC — это
[01:45:36.000 --> 01:45:38.000]  ченел, который мультипродюсируется
[01:45:38.000 --> 01:45:40.000]  в тюнер, ревелок и once,
[01:45:40.000 --> 01:45:42.000]  который вы видите, наверное, в первый раз.
[01:45:42.000 --> 01:45:44.000]  Это такой сингл тон
[01:45:44.000 --> 01:45:46.000]  для того, чтобы глобальные переменные
[01:45:46.000 --> 01:45:48.000]  преимущественно нациализировать
[01:45:48.000 --> 01:45:50.000]  лишь один раз.
[01:45:50.000 --> 01:45:52.000]  И все остальное на время читать.
[01:45:56.000 --> 01:45:58.000]  Выглядится примерно вот так.
[01:45:58.000 --> 01:46:00.000]  Emit call once.
[01:46:00.000 --> 01:46:02.000]  У меня есть getCachedWall.
[01:46:02.000 --> 01:46:04.000]  Если значений
[01:46:04.000 --> 01:46:06.000]  еще нет, то в таком случае вызовется
[01:46:06.000 --> 01:46:08.000]  call once, иначе все те,
[01:46:08.000 --> 01:46:10.000]  кто придут,
[01:46:10.000 --> 01:46:12.000]  один сможет выставить, остальные заблокируются
[01:46:12.000 --> 01:46:14.000]  до тех пор, пока вот эта
[01:46:14.000 --> 01:46:16.000]  функция не пройдет. И потом они дойдут до вал.
[01:46:16.000 --> 01:46:18.000]  И все будут проходить сквозь.
[01:46:18.000 --> 01:46:20.000]  Примерно понятно?
[01:46:26.000 --> 01:46:28.000]  Так.
[01:46:28.000 --> 01:46:30.000]  Теперь представьте себе
[01:46:30.000 --> 01:46:32.000]  такую штуку.
[01:46:32.000 --> 01:46:34.000]  Наверное, плохо то, что я не показал
[01:46:34.000 --> 01:46:36.000]  с Mutex, я думал, что это будет достаточно
[01:46:36.000 --> 01:46:38.000]  просто, если честно.
[01:46:40.000 --> 01:46:42.000]  Но смотрите, когда мы делаем
[01:46:42.000 --> 01:46:44.000]  Mutex log, в таком случае нам
[01:46:44.000 --> 01:46:46.000]  возвращается ссылочка на те, которые внутри
[01:46:46.000 --> 01:46:48.000]  он сохранит.
[01:46:48.000 --> 01:46:50.000]  Ну, не просто ссылочка, там MutexGuard
[01:46:50.000 --> 01:46:52.000]  возвращается какой-то.
[01:46:52.000 --> 01:46:54.000]  Ну, представьте себе
[01:46:54.000 --> 01:46:56.000]  такую ситуацию, что пока вы
[01:46:56.000 --> 01:46:58.000]  холдили этот лог,
[01:46:58.000 --> 01:47:00.000]  у вас паника произошла
[01:47:00.000 --> 01:47:02.000]  в вашем тарде.
[01:47:02.000 --> 01:47:04.000]  Это не та вещь, которая вам может
[01:47:04.000 --> 01:47:06.000]  нарушить memory safety, но тем не менее
[01:47:06.000 --> 01:47:08.000]  она может сломать вам некоторые варианты в коде.
[01:47:08.000 --> 01:47:10.000]  То есть, это достаточно плохо,
[01:47:10.000 --> 01:47:12.000]  если вы модифицировали
[01:47:12.000 --> 01:47:14.000]  какие-то данные, посреди модификации
[01:47:14.000 --> 01:47:16.000]  у вас произошла паника.
[01:47:16.000 --> 01:47:18.000]  Это означает, что вы были где-то посередине модификации
[01:47:18.000 --> 01:47:20.000]  и, скорее всего, там какое-то неконсистентное
[01:47:20.000 --> 01:47:22.000]  состояние на данный момент.
[01:47:24.000 --> 01:47:26.000]  В общем, не так как
[01:47:26.000 --> 01:47:28.000]  C++, когда вы будете блокировать
[01:47:28.000 --> 01:47:30.000]  Mutex,
[01:47:30.000 --> 01:47:32.000]  вы будете получать
[01:47:32.000 --> 01:47:34.000]  logResult от MutexGuard,
[01:47:34.000 --> 01:47:36.000]  ну, от MutexGuard,
[01:47:36.000 --> 01:47:38.000]  который в свою очередь дает
[01:47:38.000 --> 01:47:40.000]  либо вам лог, либо PoisonError.
[01:47:40.000 --> 01:47:42.000]  То есть, logResult это просто
[01:47:42.000 --> 01:47:44.000]  алияс на result от
[01:47:44.000 --> 01:47:46.000]  MutexGuard и PoisonError.
[01:47:46.000 --> 01:47:48.000]  Ну, просто, знаете, у нас же
[01:47:48.000 --> 01:47:50.000]  result это двух template-ных
[01:47:50.000 --> 01:47:52.000]  аргументов штука, но вот это просто
[01:47:52.000 --> 01:47:54.000]  алияс.
[01:47:54.000 --> 01:47:56.000]  Вот, если у нас там
[01:47:56.000 --> 01:47:58.000]  PoisonError, то в таком случае Mutex
[01:47:58.000 --> 01:48:00.000]  Poison, то есть
[01:48:00.000 --> 01:48:02.000]  ядовитый, скажем так,
[01:48:02.000 --> 01:48:04.000]  если вы его попробуете заложить,
[01:48:04.000 --> 01:48:06.000]  то в таком случае вы
[01:48:06.000 --> 01:48:08.000]  это способ просто сообщить, что Thread,
[01:48:08.000 --> 01:48:10.000]  который модифицировал эти данные,
[01:48:10.000 --> 01:48:12.000]  запаниковал во время того, когда держал
[01:48:12.000 --> 01:48:14.000]  MutexGuard.
[01:48:16.000 --> 01:48:18.000]  Вот.
[01:48:18.000 --> 01:48:20.000]  Именно поэтому, когда
[01:48:20.000 --> 01:48:22.000]  вы будете пользоваться Mutex, вам придется
[01:48:22.000 --> 01:48:24.000]  написать Unwrap, скорее всего.
[01:48:24.000 --> 01:48:26.000]  Ну, либо поматчить и посмотреть
[01:48:26.000 --> 01:48:28.000]  Poison.
[01:48:28.000 --> 01:48:30.000]  Как-то так.
[01:48:30.000 --> 01:48:32.000]  Ну, и то же самое относится к Thread.
[01:48:32.000 --> 01:48:34.000]  Это Poisoning тоже, когда
[01:48:34.000 --> 01:48:36.000]  у вас возвращается значение,
[01:48:36.000 --> 01:48:38.000]  что у вас паника либо значение.
[01:48:38.000 --> 01:48:40.000]  И к MPSC
[01:48:40.000 --> 01:48:42.000]  очереди.
[01:48:42.000 --> 01:48:44.000]  Там тоже
[01:48:44.000 --> 01:48:46.000]  будет возвращаться result.
[01:48:48.000 --> 01:48:50.000]  Так, все.
[01:48:50.000 --> 01:48:52.000]  Мне кажется, про параллельно сильно
[01:48:52.000 --> 01:48:54.000]  нечего рассказывать после курса
[01:48:54.000 --> 01:48:56.000]  Поэтому мы можем перейти, наверное, к Raid.
[01:48:56.000 --> 01:48:58.000]  Если у вас вопросы какие-то
[01:48:58.000 --> 01:49:00.000]  по
[01:49:00.000 --> 01:49:02.000]  азам, параллельно
[01:49:02.000 --> 01:49:04.000]  страсти.
[01:49:06.000 --> 01:49:08.000]  Там все основные
[01:49:08.000 --> 01:49:10.000]  штуки.
[01:49:10.000 --> 01:49:12.000]  Да, там.
[01:49:12.000 --> 01:49:14.000]  Вот это вот, это не весь список.
[01:49:14.000 --> 01:49:16.000]  Мы же еще знаем Mutex есть.
[01:49:16.000 --> 01:49:18.000]  И статомики.
[01:49:18.000 --> 01:49:20.000]  Симфофоров нет.
[01:49:24.000 --> 01:49:26.000]  Ну, ты как минимум кажется
[01:49:26.000 --> 01:49:28.000]  можешь ограниченным каналом
[01:49:28.000 --> 01:49:30.000]  пользоваться.
[01:49:30.000 --> 01:49:32.000]  Да, вроде.
[01:49:32.000 --> 01:49:34.000]  Я могу это написать.
[01:49:34.000 --> 01:49:36.000]  Ну, это да, это
[01:49:36.000 --> 01:49:38.000]  сильно.
[01:49:38.000 --> 01:49:40.000]  Спит ноль.
[01:49:40.000 --> 01:49:42.000]  Ну, что ты сразу?
[01:49:42.000 --> 01:49:44.000]  У тебя еще целых полторы недели.
[01:49:44.000 --> 01:49:46.000]  Все еще целых полторы дни.
[01:49:48.000 --> 01:49:50.000]  Так.
[01:49:50.000 --> 01:49:52.000]  Crossbeam.
[01:49:52.000 --> 01:49:54.000]  Это такая штука, которая содержит
[01:49:54.000 --> 01:49:56.000]  в себе всякие инструменты для
[01:49:56.000 --> 01:49:58.000]  конкарн-компьютера.
[01:49:58.000 --> 01:50:00.000]  Ну, даже не конкарн, это параллельно.
[01:50:00.000 --> 01:50:02.000]  Да, и для конкурентного тоже.
[01:50:02.000 --> 01:50:04.000]  Даже
[01:50:04.000 --> 01:50:06.000]  для конкарн-компьютера.
[01:50:06.000 --> 01:50:08.000]  Для параллельного слабо подходит.
[01:50:08.000 --> 01:50:10.000]  Вот.
[01:50:10.000 --> 01:50:12.000]  Существует для того, чтобы дополнить
[01:50:12.000 --> 01:50:14.000]  функциональности Dsync или даже
[01:50:14.000 --> 01:50:16.000]  чем-то поменять его.
[01:50:16.000 --> 01:50:18.000]  Есть вероятность того, что
[01:50:18.000 --> 01:50:20.000]  части этого крейта перейдут когда-то
[01:50:20.000 --> 01:50:22.000]  просто такой достаточно популярный
[01:50:22.000 --> 01:50:24.000]  крейт с хорошими примитивами
[01:50:24.000 --> 01:50:26.000]  и раз, часто
[01:50:26.000 --> 01:50:28.000]  какие-то части из
[01:50:28.000 --> 01:50:30.000]  сторонних крейтов в свою
[01:50:30.000 --> 01:50:32.000]  библиотеку стандартную
[01:50:32.000 --> 01:50:34.000]  мувают, если там что-то хорошее.
[01:50:34.000 --> 01:50:36.000]  Там даже есть всякие
[01:50:36.000 --> 01:50:38.000]  конструкции для того, чтобы писать локфрия алгоритма.
[01:50:38.000 --> 01:50:40.000]  Прикольно.
[01:50:40.000 --> 01:50:42.000]  Сейчас посмотрим.
[01:50:42.000 --> 01:50:44.000]  До начала у нас есть Crossbeam Scope.
[01:50:44.000 --> 01:50:46.000]  Это такая
[01:50:46.000 --> 01:50:48.000]  штука, которая создает Scope Thread.
[01:50:48.000 --> 01:50:50.000]  Для этого я специально показал
[01:50:50.000 --> 01:50:52.000]  такое очень страшное объявление
[01:50:52.000 --> 01:50:54.000]  Scope Thread.
[01:50:54.000 --> 01:50:56.000]  Давайте мы посмотрим сразу же, например, того,
[01:50:56.000 --> 01:50:58.000]  как
[01:50:58.000 --> 01:51:00.000]  его использовать.
[01:51:00.000 --> 01:51:02.000]  Что значит Scope Thread?
[01:51:02.000 --> 01:51:04.000]  Вы хотите все-таки иногда что-то брать
[01:51:04.000 --> 01:51:06.000]  из своего
[01:51:06.000 --> 01:51:08.000]  Scope.
[01:51:08.000 --> 01:51:10.000]  Соответственно, вам нужно
[01:51:10.000 --> 01:51:12.000]  гарантировать то, что у вас Thread
[01:51:12.000 --> 01:51:14.000]  действительно заджойнится в конце этого Scope.
[01:51:14.000 --> 01:51:16.000]  В общем, то, что делает Scope Thread,
[01:51:16.000 --> 01:51:18.000]  это безопасно делать таким образом, чтобы вы могли
[01:51:18.000 --> 01:51:20.000]  быть уверены в том,
[01:51:20.000 --> 01:51:22.000]  что ваш Thread заджойнится и, соответственно,
[01:51:22.000 --> 01:51:24.000]  не выйдет мой вариант.
[01:51:24.000 --> 01:51:26.000]  Сдает Scope для всех
[01:51:26.000 --> 01:51:28.000]  Thread'ов, которые там внутри запускаются.
[01:51:28.000 --> 01:51:30.000]  Потом их джойнет
[01:51:30.000 --> 01:51:32.000]  все те, которые еще не завершились.
[01:51:34.000 --> 01:51:36.000]  Ну и разрешает
[01:51:36.000 --> 01:51:38.000]  даёт возможность
[01:51:38.000 --> 01:51:40.000]  Thread'ам всякие
[01:51:40.000 --> 01:51:42.000]  кэп через локальные перемены.
[01:51:42.000 --> 01:51:44.000]  Ну и во время паники
[01:51:44.000 --> 01:51:46.000]  возвращает ошибку. Давайте посмотрим.
[01:51:46.000 --> 01:51:48.000]  Вот я создал
[01:51:48.000 --> 01:51:50.000]  какой-то вектор People,
[01:51:50.000 --> 01:51:52.000]  в котором есть три имени.
[01:51:52.000 --> 01:51:54.000]  И после этого
[01:51:54.000 --> 01:51:56.000]  есть Thread Scope.
[01:51:56.000 --> 01:51:58.000]  Смотрите, вот здесь есть S. S это
[01:51:58.000 --> 01:52:00.000]  такой Scope, в котором я, собственно, создаю
[01:52:00.000 --> 01:52:02.000]  Thread'ы. То есть я когда пишу
[01:52:02.000 --> 01:52:04.000]  вот здесь S Spawn, то это означает то, что
[01:52:04.000 --> 01:52:06.000]  я создаю Thread, который
[01:52:06.000 --> 01:52:08.000]  будет заджойнен, когда я вот сюда
[01:52:08.000 --> 01:52:10.000]  вот выйду.
[01:52:10.000 --> 01:52:12.000]  Обязательно заджойнен.
[01:52:12.000 --> 01:52:14.000]  Где-где еще?
[01:52:16.000 --> 01:52:18.000]  Это то же самое, что это String.
[01:52:18.000 --> 01:52:20.000]  Абсолютно.
[01:52:20.000 --> 01:52:22.000]  Ну здесь
[01:52:22.000 --> 01:52:24.000]  как видите, я могу абсолютно спокойно
[01:52:24.000 --> 01:52:26.000]  обращаться к верхнему вектору
[01:52:26.000 --> 01:52:28.000]  несмотря на то, что
[01:52:28.000 --> 01:52:30.000]  я создаю новое Thread.
[01:52:30.000 --> 01:52:32.000]  Потому что мне гарантировали, здесь обязательно заджойнется
[01:52:32.000 --> 01:52:34.000]  все Thread. Это безопасно.
[01:52:38.000 --> 01:52:40.000]  Ну как-то так, просто достаточно.
[01:52:42.000 --> 01:52:44.000]  А, да.
[01:52:44.000 --> 01:52:46.000]  Это Result.
[01:52:46.000 --> 01:52:48.000]  Давай посмотрим здесь такую штуку.
[01:52:48.000 --> 01:52:50.000]  Дело в том, что
[01:52:50.000 --> 01:52:52.000]  эти все Thread'ы могут паниковать.
[01:52:52.000 --> 01:52:54.000]  Здесь я выложил какую-то фигню в каждом из Thread'ов,
[01:52:54.000 --> 01:52:56.000]  который создал, и после этого паникую.
[01:52:56.000 --> 01:52:58.000]  Если я сделаю MapR
[01:52:58.000 --> 01:53:00.000]  и после этого что-то попробую вывести,
[01:53:00.000 --> 01:53:02.000]  то получу вот такие вот две ошибки.
[01:53:06.000 --> 01:53:08.000]  Абъявление?
[01:53:08.000 --> 01:53:10.000]  Абъявление этого хитра.
[01:53:12.000 --> 01:53:14.000]  А,
[01:53:14.000 --> 01:53:16.000]  было бы очень похоже на типо ошибок.
[01:53:16.000 --> 01:53:18.000]  Сейчас хитра.
[01:53:18.000 --> 01:53:20.000]  Кстати, PrintLn
[01:53:20.000 --> 01:53:22.000]  многопоточный?
[01:53:22.000 --> 01:53:24.000]  Да. Внутри синхронизируется.
[01:53:24.000 --> 01:53:26.000]  Как синхронизируется?
[01:53:26.000 --> 01:53:28.000]  Это было бы не очень хорошо, если Print был
[01:53:28.000 --> 01:53:30.000]  не многопоточный.
[01:53:32.000 --> 01:53:34.000]  Вот. Часть CrossBeamChannel.
[01:53:34.000 --> 01:53:36.000]  Это такая штука, которая альтернатива
[01:53:36.000 --> 01:53:38.000]  к MPSC,
[01:53:38.000 --> 01:53:40.000]  но при этом это не SingleConsumer,
[01:53:40.000 --> 01:53:42.000]  а MultiConsumer.
[01:53:42.000 --> 01:53:44.000]  Канал?
[01:53:46.000 --> 01:53:48.000]  Канал этот может быть
[01:53:48.000 --> 01:53:50.000]  лимитирован или может быть не лимитирован.
[01:53:50.000 --> 01:53:52.000]  То есть, есть два варианта канала,
[01:53:52.000 --> 01:53:54.000]  bounded и unbounded.
[01:53:54.000 --> 01:53:56.000]  Примерно так выглядит. Вот я создаю
[01:53:56.000 --> 01:53:58.000]  какой-то конец,
[01:53:58.000 --> 01:54:00.000]  который я могу посылать и конец,
[01:54:00.000 --> 01:54:02.000]  который я могу брать. Вот я могу
[01:54:02.000 --> 01:54:04.000]  послать, и так, у пять элементов,
[01:54:04.000 --> 01:54:06.000]  и так как я создал канал размер
[01:54:06.000 --> 01:54:08.000]  опять, то в таком случае, если я еще раз попробую послать
[01:54:08.000 --> 01:54:10.000]  что-то, то мне заблокируется
[01:54:10.000 --> 01:54:12.000]  строчка код.
[01:54:12.000 --> 01:54:14.000]  Ну и второй пример.
[01:54:14.000 --> 01:54:16.000]  Если я создам unbounded channel,
[01:54:16.000 --> 01:54:18.000]  то я его буду просто спокойно посылать.
[01:54:18.000 --> 01:54:20.000]  Естественно, если я буду использовать
[01:54:20.000 --> 01:54:22.000]  recfn, то тогда я буду блокироваться,
[01:54:22.000 --> 01:54:24.000]  если у меня нет ничего в канале
[01:54:24.000 --> 01:54:26.000]  либо брать что-то из него.
[01:54:26.000 --> 01:54:28.000]  Ну, в общем, канал,
[01:54:28.000 --> 01:54:30.000]  каким вы его ожидаете, увидите.
[01:54:34.000 --> 01:54:36.000]  Они еще могут быть не только
[01:54:36.000 --> 01:54:38.000]  блокирующими и не блокирующими, они еще
[01:54:38.000 --> 01:54:40.000]  могут быть с тайм-аутом.
[01:54:40.000 --> 01:54:42.000]  То есть вы можете указать тайм-аут.
[01:54:42.000 --> 01:54:44.000]  В стандартной фабрики есть такая штука,
[01:54:44.000 --> 01:54:46.000]  называется duration, вы можете указать, сколько
[01:54:46.000 --> 01:54:48.000]  вы ожидаете.
[01:54:48.000 --> 01:54:50.000]  Ну, можете использовать, в общем, send
[01:54:50.000 --> 01:54:52.000]  тайм-аут. Еще можно не блокирующим,
[01:54:52.000 --> 01:54:54.000]  например, попробовать послать или попробовать
[01:54:54.000 --> 01:54:56.000]  взять что-то из канала. Если ничего
[01:54:56.000 --> 01:54:58.000]  нет, то вы сразу же закончите.
[01:55:02.000 --> 01:55:04.000]  Эти хендлеры могут быть распределены
[01:55:04.000 --> 01:55:06.000]  между трудами, ну, еще бы.
[01:55:06.000 --> 01:55:08.000]  Мы предназначены
[01:55:08.000 --> 01:55:10.000]  для многоточного программирования.
[01:55:10.000 --> 01:55:12.000]  При этом канал
[01:55:12.000 --> 01:55:14.000]  multi-producers, multi-consumer.
[01:55:16.000 --> 01:55:18.000]  Если у нас все
[01:55:18.000 --> 01:55:20.000]  хендлеры одного
[01:55:20.000 --> 01:55:22.000]  из концов были сдропнуты, в таком случае
[01:55:22.000 --> 01:55:24.000]  канал зайдет в
[01:55:24.000 --> 01:55:26.000]  состояние disconnected.
[01:55:26.000 --> 01:55:28.000]  Ну, disconnected это
[01:55:28.000 --> 01:55:30.000]  вы, наверное, в домашней помните,
[01:55:30.000 --> 01:55:32.000]  что означает?
[01:55:34.000 --> 01:55:36.000]  Так.
[01:55:36.000 --> 01:55:38.000]  Ну, в общем,
[01:55:38.000 --> 01:55:40.000]  сообщения могут быть посланы тогда,
[01:55:40.000 --> 01:55:42.000]  когда канал
[01:55:42.000 --> 01:55:44.000]  закрыт. Вы всегда можете
[01:55:44.000 --> 01:55:46.000]  читать уже посланные сообщения.
[01:55:50.000 --> 01:55:52.000]  Ну, и операции
[01:55:52.000 --> 01:55:54.000]  на тех
[01:55:54.000 --> 01:55:56.000]  каналах, которые уже disconnected
[01:55:56.000 --> 01:55:58.000]  не блокирующие, потому что вам
[01:55:58.000 --> 01:56:00.000]  уже нет смысла
[01:56:00.000 --> 01:56:02.000]  синхронизироваться.
[01:56:02.000 --> 01:56:04.000]  Еще
[01:56:04.000 --> 01:56:06.000]  канал, ну, естественно, это такая вещь,
[01:56:06.000 --> 01:56:08.000]  которая очень похожа на итератор.
[01:56:08.000 --> 01:56:10.000]  Мы можем использовать на нем итер.
[01:56:10.000 --> 01:56:12.000]  Это, кстати, очень прикольно,
[01:56:12.000 --> 01:56:14.000]  потому что мы еще на лекции про синхронность
[01:56:14.000 --> 01:56:16.000]  тоже будем говорить про всякие синхронные
[01:56:16.000 --> 01:56:18.000]  итераторы. На самом деле, если вы решали
[01:56:18.000 --> 01:56:20.000]  задачу try, то
[01:56:20.000 --> 01:56:22.000]  gat это
[01:56:22.000 --> 01:56:24.000]  gat стали, скажем так,
[01:56:24.000 --> 01:56:26.000]  путем для того,
[01:56:26.000 --> 01:56:28.000]  чтобы сделать синхронный итератор.
[01:56:28.000 --> 01:56:30.000]  То есть, на самом деле, появилось такое желание,
[01:56:30.000 --> 01:56:32.000]  сделать gat, именно потому, что
[01:56:32.000 --> 01:56:34.000]  в синхронности
[01:56:34.000 --> 01:56:36.000]  будут эти штуки.
[01:56:36.000 --> 01:56:38.000]  Это такой просто
[01:56:38.000 --> 01:56:40.000]  прикольный факт. В общем,
[01:56:40.000 --> 01:56:42.000]  можно итераторы на каналах
[01:56:42.000 --> 01:56:44.000]  воспользоваться. Делайте next,
[01:56:44.000 --> 01:56:46.000]  блокируйте, до тех пор пока не возьмете что-то из канала.
[01:56:48.000 --> 01:56:50.000]  Вот, например,
[01:56:50.000 --> 01:56:52.000]  можно воспользоваться select
[01:56:52.000 --> 01:56:54.000]  каналах.
[01:56:54.000 --> 01:56:56.000]  Разбемение тоже есть
[01:56:56.000 --> 01:56:58.000]  с select.
[01:56:58.000 --> 01:57:00.000]  Интересно,
[01:57:00.000 --> 01:57:02.000]  будет такое?
[01:57:02.000 --> 01:57:04.000]  Да, кажется, у меня
[01:57:04.000 --> 01:57:06.000]  есть примерчик,
[01:57:06.000 --> 01:57:08.000]  на то, во что он безсахарится.
[01:57:10.000 --> 01:57:12.000]  Тут понятно, что происходит.
[01:57:12.000 --> 01:57:14.000]  Если receive,
[01:57:14.000 --> 01:57:16.000]  делаем такое-то, если send такое-то.
[01:57:18.000 --> 01:57:20.000]  С курсом concurrency
[01:57:20.000 --> 01:57:22.000]  помните, что такое select?
[01:57:22.000 --> 01:57:24.000]  Я, правда, сам не
[01:57:24.000 --> 01:57:26.000]  решал эту задачу, поэтому
[01:57:26.000 --> 01:57:28.000]  она отличная.
[01:57:28.000 --> 01:57:30.000]  Тебе, значит, наверное, лучше знать,
[01:57:30.000 --> 01:57:32.000]  что из себя представляет select
[01:57:32.000 --> 01:57:34.000]  в курсе concurrency.
[01:57:38.000 --> 01:57:40.000]  А это то, как
[01:57:40.000 --> 01:57:42.000]  собственно имплементировано.
[01:57:42.000 --> 01:57:44.000]  Он безсахаривается примерно вот так.
[01:57:44.000 --> 01:57:46.000]  Тут не стоит
[01:57:46.000 --> 01:57:48.000]  вдаваться в подробности. Select
[01:57:48.000 --> 01:57:50.000]  это какая-то структурка, в которую мы кладем
[01:57:50.000 --> 01:57:52.000]  то, что ожидаем.
[01:57:52.000 --> 01:57:54.000]  Ну и дальше, мач. Если операция такая,
[01:57:54.000 --> 01:57:56.000]  делаем то-то.
[01:57:56.000 --> 01:57:58.000]  Как-то так.
[01:57:58.000 --> 01:58:00.000]  В смысле мы конструируем операцию,
[01:58:00.000 --> 01:58:02.000]  а потом применяем ли select?
[01:58:02.000 --> 01:58:04.000]  Да, select это просто
[01:58:04.000 --> 01:58:06.000]  macros для того, чтобы примерно такой
[01:58:06.000 --> 01:58:08.000]  откод сгенерировать.
[01:58:10.000 --> 01:58:12.000]  Так.
[01:58:12.000 --> 01:58:14.000]  Вот это вам должен понравиться.
[01:58:14.000 --> 01:58:16.000]  Тут есть утилитки всякие. Cache-padded.
[01:58:16.000 --> 01:58:18.000]  Помните про false sharing?
[01:58:20.000 --> 01:58:22.000]  Кто помнит, что такое false sharing?
[01:58:24.000 --> 01:58:26.000]  Да.
[01:58:32.000 --> 01:58:34.000]  И это некоторые особенности
[01:58:34.000 --> 01:58:36.000]  связанные с тем, что у нас есть
[01:58:36.000 --> 01:58:38.000]  каши.
[01:58:38.000 --> 01:58:40.000]  А в каши попадают все они по одному byte,
[01:58:40.000 --> 01:58:42.000]  а в плацовок все четыре.
[01:58:42.000 --> 01:58:44.000]  Сейчас ты нагребай до собой
[01:58:44.000 --> 01:58:46.000]  некоторые другие данные.
[01:58:46.000 --> 01:58:48.000]  Для этого мы сидим и перебрасываемся друг друга
[01:58:48.000 --> 01:58:50.000]  и применяем данные.
[01:58:50.000 --> 01:58:52.000]  Кажется, вроде бы в прошлом
[01:58:52.000 --> 01:58:54.000]  Рома на тикет-локе делал пример,
[01:58:54.000 --> 01:58:56.000]  потому что там два атомика внутри.
[01:58:58.000 --> 01:59:00.000]  На тикет-локе
[01:59:00.000 --> 01:59:02.000]  нам же нужно хранить, кто сейчас
[01:59:02.000 --> 01:59:04.000]  исполняется и просто счетчик
[01:59:04.000 --> 01:59:06.000]  номеров тех, кто пришел.
[01:59:06.000 --> 01:59:08.000]  Проблема в том, что если они лежат
[01:59:08.000 --> 01:59:10.000]  рядышком, то в таком случае у нас получается
[01:59:10.000 --> 01:59:12.000]  false sharing. У нас 3D,
[01:59:12.000 --> 01:59:14.000]  которая захватывает один атомик,
[01:59:14.000 --> 01:59:16.000]  захватывает и другой, потому что
[01:59:16.000 --> 01:59:18.000]  cache-линия больше, чем размер одного
[01:59:18.000 --> 01:59:20.000]  атомика. Захватом целую cache-линию.
[01:59:20.000 --> 01:59:22.000]  Теперь шпад предназначен для того,
[01:59:22.000 --> 01:59:24.000]  чтобы с этим бороться.
[01:59:24.000 --> 01:59:26.000]  Мы увеличиваем искусственный размер структуры,
[01:59:26.000 --> 01:59:28.000]  но при этом самой структурой пользуемся
[01:59:28.000 --> 01:59:30.000]  как ни в чем не бывало.
[01:59:30.000 --> 01:59:32.000]  Там есть заранее на этапе компиляции
[01:59:32.000 --> 01:59:34.000]  прописанные константы.
[01:59:34.000 --> 01:59:36.000]  Они используют все минимальные числа байтиков,
[01:59:36.000 --> 01:59:38.000]  которые, возможно, на данной архитектуре
[01:59:38.000 --> 01:59:40.000]  дописываются после структуры.
[01:59:44.000 --> 01:59:46.000]  Еще есть shard-лок.
[01:59:46.000 --> 01:59:48.000]  Это как RV-лок,
[01:59:48.000 --> 01:59:50.000]  но только шардированный.
[01:59:50.000 --> 01:59:52.000]  Например, если хэш-таблицу будете писать,
[01:59:52.000 --> 01:59:54.000]  шардированные всякие,
[01:59:54.000 --> 01:59:56.000]  тогда, наверное, это будет очень полезно.
[01:59:56.000 --> 01:59:58.000]  Идея в том, что
[01:59:58.000 --> 02:00:00.000]  RV-лок было бы плохо,
[02:00:00.000 --> 02:00:02.000]  если бы у нас был contention
[02:00:02.000 --> 02:00:04.000]  на любой части таблички.
[02:00:04.000 --> 02:00:06.000]  Поэтому мы хотим
[02:00:06.000 --> 02:00:08.000]  как-то поделить, например, хэш-табличку,
[02:00:08.000 --> 02:00:10.000]  которую делаем многопоточной,
[02:00:10.000 --> 02:00:12.000]  на части небольшие.
[02:00:12.000 --> 02:00:14.000]  Соответственно, получается,
[02:00:14.000 --> 02:00:16.000]  что если мы хотим взять
[02:00:16.000 --> 02:00:18.000]  и ты лок,
[02:00:18.000 --> 02:00:20.000]  то нам нужно заблокировать
[02:00:20.000 --> 02:00:22.000]  какой-то определенный шард,
[02:00:22.000 --> 02:00:24.000]  а не целый RV-лок.
[02:00:24.000 --> 02:00:26.000]  И в итоге получается, что у нас
[02:00:26.000 --> 02:00:28.000]  более маленький contention на риде,
[02:00:28.000 --> 02:00:30.000]  но большой на оврайте.
[02:00:30.000 --> 02:00:32.000]  Потому что нам нужно заблокировать
[02:00:32.000 --> 02:00:34.000]  вообще все RV-локи,
[02:00:34.000 --> 02:00:36.000]  чтобы на оврайт взять.
[02:00:36.000 --> 02:00:38.000]  Вот такая вот штука.
[02:00:38.000 --> 02:00:40.000]  И в некоторых случаях бывает полезно.
[02:00:40.000 --> 02:00:42.000]  Ибаков.
[02:00:42.000 --> 02:00:44.000]  Кто был на курсе
[02:00:44.000 --> 02:00:46.000]  распределенных систем литовского?
[02:00:46.000 --> 02:00:48.000]  Да, это я в конкуренции нужен.
[02:00:48.000 --> 02:00:50.000]  Да, это я в конкуренции нужен,
[02:00:50.000 --> 02:00:52.000]  но мне меньше нравится пример со спин-локом, по-честному.
[02:00:52.000 --> 02:00:54.000]  Мне нравится больше пример с консенсусом.
[02:00:54.000 --> 02:00:56.000]  Правда.
[02:00:58.000 --> 02:01:00.000]  Наверное, Никита помнит,
[02:01:00.000 --> 02:01:02.000]  что Ибаков нужен для того,
[02:01:02.000 --> 02:01:04.000]  чтобы trade-in было удобнее
[02:01:04.000 --> 02:01:06.000]  друг с другом конкурировать.
[02:01:08.000 --> 02:01:10.000]  Я потребую, чтобы он лидировался.
[02:01:10.000 --> 02:01:12.000]  Мне не нравится.
[02:01:16.000 --> 02:01:18.000]  Короче, Ибаков нам нужен для того,
[02:01:18.000 --> 02:01:20.000]  чтобы рандомизировать время ожиданий,
[02:01:20.000 --> 02:01:22.000]  и при этом делать все больше и больше,
[02:01:22.000 --> 02:01:24.000]  если у нас не получается.
[02:01:24.000 --> 02:01:26.000]  В кроссдивовском Ибакове
[02:01:26.000 --> 02:01:28.000]  рандомизации кажется нет.
[02:01:28.000 --> 02:01:30.000]  Главное, это экспоненциальное наращивание.
[02:01:30.000 --> 02:01:32.000]  Чтобы минимизировать contention.
[02:01:32.000 --> 02:01:34.000]  Да, наверное, если это на одном компьютере,
[02:01:34.000 --> 02:01:36.000]  то там нет смысла увеличивать ожидания.
[02:01:36.000 --> 02:01:38.000]  Если распределенную систему пишут,
[02:01:38.000 --> 02:01:40.000]  когда хочется рандомизировать ожидания...
[02:01:40.000 --> 02:01:42.000]  Но в кроссдивовском это чисто конкурент,
[02:01:42.000 --> 02:01:44.000]  и там рандомизация...
[02:01:44.000 --> 02:01:46.000]  Да-да.
[02:01:46.000 --> 02:01:48.000]  В общем, это про то,
[02:01:48.000 --> 02:01:50.000]  чтобы писать спин-локи.
[02:01:52.000 --> 02:01:54.000]  Кстати говоря, спин-локи лучше не пишите.
[02:01:54.000 --> 02:01:56.000]  Это плохая практика, не пишите спин-локи.
[02:01:56.000 --> 02:01:58.000]  Несмотря на то,
[02:01:58.000 --> 02:02:00.000]  что они какие-то прекрасные и красивые.
[02:02:04.000 --> 02:02:06.000]  Есть еще дек.
[02:02:06.000 --> 02:02:08.000]  Что-то прекрасно написано.
[02:02:08.000 --> 02:02:10.000]  Это конкурентный дек.
[02:02:10.000 --> 02:02:12.000]  Блин, дек...
[02:02:12.000 --> 02:02:14.000]  Что-то написал как-то нега странно.
[02:02:14.000 --> 02:02:16.000]  Как колодокарт дек.
[02:02:16.000 --> 02:02:18.000]  Ну ладно, представьте,
[02:02:18.000 --> 02:02:20.000]  что там написано нормальное пятибуквенное слово.
[02:02:20.000 --> 02:02:22.000]  Это колодокарт, он и про воркстиллинг, так сказать.
[02:02:26.000 --> 02:02:28.000]  Блин.
[02:02:28.000 --> 02:02:30.000]  В смысле?
[02:02:30.000 --> 02:02:32.000]  Так, ну в общем,
[02:02:32.000 --> 02:02:34.000]  это дек, который поддерживает воркстиллинг.
[02:02:34.000 --> 02:02:36.000]  Воркстиллинг.
[02:02:36.000 --> 02:02:38.000]  Вот там есть несколько...
[02:02:38.000 --> 02:02:40.000]  Получается...
[02:02:40.000 --> 02:02:42.000]  Ну, несколько очередей для каждого трыда.
[02:02:42.000 --> 02:02:44.000]  Для каждого трыда оно локально.
[02:02:44.000 --> 02:02:46.000]  То есть, это локальная очередь.
[02:02:46.000 --> 02:02:48.000]  И есть глобальная очередь для
[02:02:48.000 --> 02:02:50.000]  всех трыдов.
[02:02:50.000 --> 02:02:52.000]  Ну, есть...
[02:02:52.000 --> 02:02:54.000]  Там я уже не буду показывать подробности,
[02:02:54.000 --> 02:02:56.000]  но есть такая штука, называется стил,
[02:02:56.000 --> 02:02:58.000]  для того, чтобы красть задачи из других трыдов.
[02:02:58.000 --> 02:03:00.000]  Ну, естественно, будем их красть
[02:03:00.000 --> 02:03:02.000]  с конца очереди другого трыда.
[02:03:02.000 --> 02:03:04.000]  Примерно помните, как планировщик ГО написан?
[02:03:04.000 --> 02:03:06.000]  Расти, пожалуйста, у вас есть просто
[02:03:06.000 --> 02:03:08.000]  кроссбим дек и пишите планировщик ГО.
[02:03:08.000 --> 02:03:10.000]  Только так.
[02:03:12.000 --> 02:03:14.000]  Вот.
[02:03:14.000 --> 02:03:16.000]  Это я уже сказал, что
[02:03:16.000 --> 02:03:18.000]  сначала пытаемся есть глобальную очередь, а потом уже у кого-то украсть.
[02:03:20.000 --> 02:03:22.000]  Еще есть эпоха.
[02:03:22.000 --> 02:03:24.000]  Это гарбельдж коллектор для локарей алгоритмы.
[02:03:24.000 --> 02:03:26.000]  Проблему АБА, наверное,
[02:03:26.000 --> 02:03:28.000]  тоже помните. Примерно.
[02:03:28.000 --> 02:03:30.000]  Возникала проблема АБА,
[02:03:30.000 --> 02:03:32.000]  и в результате у нас получалось
[02:03:32.000 --> 02:03:34.000]  так, что у нас какие-то объекты
[02:03:34.000 --> 02:03:36.000]  просто не оставались...
[02:03:36.000 --> 02:03:38.000]  не очищались. У нас получался
[02:03:38.000 --> 02:03:40.000]  memory leak беспрерывный.
[02:03:40.000 --> 02:03:42.000]  Эпоха — это такая штука, которая
[02:03:42.000 --> 02:03:44.000]  решает эту проблему.
[02:03:44.000 --> 02:03:46.000]  Она себе представляет такой
[02:03:46.000 --> 02:03:48.000]  полу-гарбельдж коллектор, который
[02:03:48.000 --> 02:03:50.000]  тогда, когда мы пытаемся
[02:03:50.000 --> 02:03:52.000]  позаимодействовать
[02:03:52.000 --> 02:03:54.000]  с нашим локфри-алгоритмом,
[02:03:54.000 --> 02:03:56.000]  он пытается увеличить
[02:03:56.000 --> 02:03:58.000]  номер эпохи,
[02:03:58.000 --> 02:04:00.000]  а потом
[02:04:00.000 --> 02:04:02.000]  удалить две последние.
[02:04:02.000 --> 02:04:04.000]  Две последние на две назад.
[02:04:04.000 --> 02:04:06.000]  Удалить эпоху, которая была в две эпохи назад.
[02:04:10.000 --> 02:04:12.000]  Это, наверное, единственный нормальный
[02:04:12.000 --> 02:04:14.000]  способ писать некоторые локфри-алгоритмы.
[02:04:18.000 --> 02:04:20.000]  Просто у нас же нет ГЦ.
[02:04:20.000 --> 02:04:22.000]  К сожалению,
[02:04:22.000 --> 02:04:24.000]  локфри-алгоритмы некоторые не пишут
[02:04:24.000 --> 02:04:26.000]  в каком-то виде хотя бы.
[02:04:30.000 --> 02:04:32.000]  И потом
[02:04:32.000 --> 02:04:34.000]  только не последние две эпохи,
[02:04:34.000 --> 02:04:36.000]  а на две эпохи назад. Проходим
[02:04:36.000 --> 02:04:38.000]  и удаляем эпоху.
[02:04:40.000 --> 02:04:42.000]  Я без подробностей рассказываю,
[02:04:42.000 --> 02:04:44.000]  но в целом понятно, что у нас CRUISE BIM прекрасен
[02:04:44.000 --> 02:04:46.000]  и можно писать локфри-алгоритм.
[02:04:48.000 --> 02:04:50.000]  Мы дошли до последней части лекции
[02:04:50.000 --> 02:04:52.000]  для одной из прекрасных фичей
[02:04:52.000 --> 02:04:54.000]  расты, называется RAIN,
[02:04:54.000 --> 02:04:56.000]  предназначен для
[02:04:56.000 --> 02:04:58.000]  параллелизации данных.
[02:05:00.000 --> 02:05:02.000]  По CRUISE BIM понятно?
[02:05:04.000 --> 02:05:06.000]  Смотрите, RAIN это крейд,
[02:05:06.000 --> 02:05:08.000]  который предназначен для дайта параллелизма.
[02:05:08.000 --> 02:05:10.000]  Все ли помните, что такое
[02:05:10.000 --> 02:05:12.000]  OpenMP?
[02:05:16.000 --> 02:05:18.000]  Да, там третий курс, в прошлом химестре
[02:05:18.000 --> 02:05:20.000]  вы должны были писать на OpenMP.
[02:05:22.000 --> 02:05:24.000]  Ну, короче,
[02:05:24.000 --> 02:05:26.000]  это такой OpenMP,
[02:05:26.000 --> 02:05:28.000]  но взрослый и хороший.
[02:05:28.000 --> 02:05:30.000]  Современный.
[02:05:30.000 --> 02:05:32.000]  OpenMP,
[02:05:32.000 --> 02:05:34.000]  вот Никитин объяснил,
[02:05:34.000 --> 02:05:36.000]  ты не помнишь, наверное, да?
[02:05:38.000 --> 02:05:40.000]  Ну, представь, что у тебя есть
[02:05:40.000 --> 02:05:42.000]  цикли кфор. Ты в цикле кфор
[02:05:42.000 --> 02:05:44.000]  можешь делать какие-то вещи, которые друг от друга
[02:05:44.000 --> 02:05:46.000]  совершенно не зависят на каждой итерации.
[02:05:46.000 --> 02:05:48.000]  Хочешь сделать их параллельно, быстро.
[02:05:48.000 --> 02:05:50.000]  Здесь такая штука OpenMP называется.
[02:05:50.000 --> 02:05:52.000]  Сверху прагма,
[02:05:52.000 --> 02:05:54.000]  ОМП-фор,
[02:05:54.000 --> 02:05:56.000]  и поставить какие-то настройки,
[02:05:56.000 --> 02:05:58.000]  и у тебя то, что произойдет,
[02:05:58.000 --> 02:06:00.000]  компилятор за тебя сгенерирует какой-то код,
[02:06:00.000 --> 02:06:02.000]  который просто в каждом трейде это запустит как-то
[02:06:02.000 --> 02:06:04.000]  эффективно.
[02:06:04.000 --> 02:06:06.000]  Поделить на части и запустит.
[02:06:06.000 --> 02:06:08.000]  Это ты узнаешь, наверное.
[02:06:08.000 --> 02:06:10.000]  Если бы на моем курсе был,
[02:06:10.000 --> 02:06:12.000]  ты бы узнал через год.
[02:06:14.000 --> 02:06:16.000]  Видимо, что-то поменялось.
[02:06:20.000 --> 02:06:22.000]  Короче,
[02:06:22.000 --> 02:06:24.000]  у нас Рейн умеет
[02:06:24.000 --> 02:06:26.000]  вот так вот делать.
[02:06:26.000 --> 02:06:28.000]  Мы пишем пар итер и получаем какой-то параллельный
[02:06:28.000 --> 02:06:30.000]  итератор.
[02:06:30.000 --> 02:06:32.000]  У нас был обычный итер, и мы могли
[02:06:32.000 --> 02:06:34.000]  написать мэп сам, и все бы работало.
[02:06:34.000 --> 02:06:36.000]  Когда мы пишем пар итер, по сути, вообще ничего не меняется.
[02:06:36.000 --> 02:06:38.000]  Просто пар.
[02:06:38.000 --> 02:06:40.000]  И на самом деле, то, что только
[02:06:40.000 --> 02:06:42.000]  произошло, это мой код стал параллельным,
[02:06:42.000 --> 02:06:44.000]  а я ничего не поменял уже.
[02:06:46.000 --> 02:06:48.000]  В общем, Рейн оптимально
[02:06:48.000 --> 02:06:50.000]  разбивает задачи между трейдами
[02:06:50.000 --> 02:06:52.000]  и выполняет их.
[02:06:52.000 --> 02:06:54.000]  Он оптимизирован
[02:06:54.000 --> 02:06:56.000]  для всяких CPU-баунт-задач, естественно.
[02:06:56.000 --> 02:06:58.000]  Потому что предназначен для параллелизма.
[02:06:58.000 --> 02:07:00.000]  Предназначен, да.
[02:07:00.000 --> 02:07:02.000]  И там внутри ворка стилинк
[02:07:02.000 --> 02:07:04.000]  Threadpool еще.
[02:07:04.000 --> 02:07:06.000]  Еще, кстати, кроме пар итер,
[02:07:06.000 --> 02:07:08.000]  я, наверное, дальше в лекциях не показывал это,
[02:07:08.000 --> 02:07:10.000]  кроме пар итера есть еще пар бридж.
[02:07:10.000 --> 02:07:12.000]  Пар бридж он превращает из
[02:07:12.000 --> 02:07:14.000]  любого обычного итератора
[02:07:14.000 --> 02:07:16.000]  параллельный итератор. Но, естественно,
[02:07:16.000 --> 02:07:18.000]  если пар итер неэффективно, он просто будет
[02:07:18.000 --> 02:07:20.000]  по всем трейдам по одному элементу раскидывать.
[02:07:20.000 --> 02:07:22.000]  Что немножечко неэффективно.
[02:07:24.000 --> 02:07:26.000]  Ну, это зависит от того,
[02:07:26.000 --> 02:07:28.000]  какой итератор, конечно. Если элементы
[02:07:28.000 --> 02:07:30.000]  очень долго будут обрабатываться,
[02:07:30.000 --> 02:07:32.000]  то, в целом, пара бриджа вообще никакой оверхеда
[02:07:32.000 --> 02:07:34.000]  не будет снести за собой.
[02:07:34.000 --> 02:07:36.000]  Если там очень быстро
[02:07:36.000 --> 02:07:38.000]  обрадуются элементы, тогда нужно
[02:07:38.000 --> 02:07:40.000]  постараться всеми силами сделать так, чтобы можно было
[02:07:40.000 --> 02:07:42.000]  воспользоваться пар итер. Пар итер можно
[02:07:42.000 --> 02:07:44.000]  использовать на всякой коллекции стандартной бюллетеки
[02:07:44.000 --> 02:07:46.000]  вектор, слайс, даже на Б-дереве,
[02:07:46.000 --> 02:07:48.000]  кэштаблицов и так далее.
[02:07:52.000 --> 02:07:54.000]  И знаете, на самом деле это все, что
[02:07:54.000 --> 02:07:56.000]  можно сказать о районе.
[02:07:58.000 --> 02:08:00.000]  Пар итер, пар бридж, все прекрасно работает,
[02:08:00.000 --> 02:08:02.000]  точно такой же код пишется.
[02:08:02.000 --> 02:08:04.000]  Но давайте мы немножко пообсуждаемся.
[02:08:04.000 --> 02:08:06.000]  Во-первых, есть такая прекрасная
[02:08:06.000 --> 02:08:08.000]  статья, называется
[02:08:08.000 --> 02:08:10.000]  Improve Portability and Performance
[02:08:10.000 --> 02:08:12.000]  от автора Leba ImageQuant.
[02:08:12.000 --> 02:08:14.000]  Это такая штука,
[02:08:14.000 --> 02:08:16.000]  которая предназначена для работы с изображениями.
[02:08:16.000 --> 02:08:18.000]  Изначально эта штука
[02:08:18.000 --> 02:08:20.000]  была написана полностью на C.
[02:08:20.000 --> 02:08:22.000]  Абсолютно полностью.
[02:08:22.000 --> 02:08:24.000]  Но в какой-то момент
[02:08:24.000 --> 02:08:26.000]  выяснилось...
[02:08:26.000 --> 02:08:28.000]  А, ничего не выяснилось, просто автор
[02:08:28.000 --> 02:08:30.000]  решил приписать на Rost.
[02:08:32.000 --> 02:08:34.000]  В общем, что произошло.
[02:08:34.000 --> 02:08:36.000]  Там есть
[02:08:36.000 --> 02:08:38.000]  очень много статей моментов,
[02:08:38.000 --> 02:08:40.000]  что нравится автору в расте.
[02:08:40.000 --> 02:08:42.000]  Например, то, что он смог использовать
[02:08:42.000 --> 02:08:44.000]  State of the Art хэштаблицу,
[02:08:44.000 --> 02:08:46.000]  у него в сишке было написано хоть какая-нибудь,
[02:08:46.000 --> 02:08:48.000]  чтобы не мучиться, потому что там же
[02:08:48.000 --> 02:08:50.000]  нет никаких дженериков, очень сложное
[02:08:50.000 --> 02:08:52.000]  управление зависимостью и все такое.
[02:08:54.000 --> 02:08:56.000]  Ну и там про клипы были всякие...
[02:08:58.000 --> 02:09:00.000]  Как сказать правильно?
[02:09:00.000 --> 02:09:02.000]  Комплименты, в общем,
[02:09:02.000 --> 02:09:04.000]  расту, но самое главное для нас
[02:09:04.000 --> 02:09:06.000]  то, что он сказал про ray.
[02:09:06.000 --> 02:09:08.000]  Дело в том, что OpenMP это
[02:09:08.000 --> 02:09:10.000]  просто какая-то библиотечка, это расширение компилятора.
[02:09:12.000 --> 02:09:14.000]  Она поддерживается
[02:09:14.000 --> 02:09:16.000]  не всем компиляторами, не на всех платформах
[02:09:16.000 --> 02:09:18.000]  и так далее.
[02:09:18.000 --> 02:09:20.000]  Ну и, соответственно, получается, что
[02:09:20.000 --> 02:09:22.000]  если вы хотите написать что-то
[02:09:22.000 --> 02:09:24.000]  на OpenMP, то вы сразу же
[02:09:24.000 --> 02:09:26.000]  очень сильно обрезаете количество платформ
[02:09:26.000 --> 02:09:28.000]  на котором вы можете это сделать.
[02:09:28.000 --> 02:09:30.000]  Где-то автор этой библиотеки
[02:09:30.000 --> 02:09:32.000]  сказал, что в OpenMP
[02:09:32.000 --> 02:09:34.000]  можно было использовать где-то на 1.8, 1.16
[02:09:34.000 --> 02:09:36.000]  где-то.
[02:09:36.000 --> 02:09:38.000]  Из платформ, которые он хотел поддерживать.
[02:09:38.000 --> 02:09:40.000]  И компиляторов.
[02:09:44.000 --> 02:09:46.000]  Ну, короче, так я вот делал.
[02:09:50.000 --> 02:09:52.000]  Ну, что ему еще понравилось,
[02:09:52.000 --> 02:09:54.000]  это то, что ray
[02:09:54.000 --> 02:09:56.000]  увеличил... перфоманс
[02:09:56.000 --> 02:09:58.000]  это еще ладно.
[02:09:58.000 --> 02:10:00.000]  Хэштаблицу можно использовать крутую.
[02:10:00.000 --> 02:10:02.000]  Да, это удобно,
[02:10:02.000 --> 02:10:04.000]  но можно было точно такой же в Сишке написать.
[02:10:04.000 --> 02:10:06.000]  Ну вот ray
[02:10:06.000 --> 02:10:08.000]  действительно такая была вещь,
[02:10:08.000 --> 02:10:10.000]  которая геймчейнина.
[02:10:10.000 --> 02:10:12.000]  Она является библиотекой Rast.
[02:10:12.000 --> 02:10:14.000]  Она везде работает, где есть компилятор Rast.
[02:10:16.000 --> 02:10:18.000]  И Rast уж можно использовать...
[02:10:18.000 --> 02:10:20.000]  Ну, ray, раз уж он такой переносимый,
[02:10:24.000 --> 02:10:26.000]  приводит к тому, что
[02:10:28.000 --> 02:10:30.000]  в общем, мы начинаем компилироваться
[02:10:30.000 --> 02:10:32.000]  на тех платформах, на которых OpenMP
[02:10:32.000 --> 02:10:34.000]  не компилировался.
[02:10:34.000 --> 02:10:36.000]  Ну и после этого есть еще такая ремарка,
[02:10:36.000 --> 02:10:38.000]  что portability C...
[02:10:40.000 --> 02:10:42.000]  Ну, вы можете, конечно, написать аналог
[02:10:42.000 --> 02:10:44.000]  ray на C попробовать,
[02:10:44.000 --> 02:10:46.000]  но вы сразу же столкнулись с тем,
[02:10:46.000 --> 02:10:48.000]  что он даже 3D создать нужно как-то портабельно.
[02:10:50.000 --> 02:10:52.000]  И в итоге получается, что
[02:10:52.000 --> 02:10:54.000]  какая-то идея о портабельности C
[02:10:54.000 --> 02:10:56.000]  это платоническая идея
[02:10:56.000 --> 02:10:58.000]  в головах его создателей.
[02:10:58.000 --> 02:11:00.000]  Потому что по факту на данный момент это слишком сложно.
[02:11:00.000 --> 02:11:02.000]  В современном мире,
[02:11:02.000 --> 02:11:04.000]  с кросс-компиляцией, с множеством стандартов.
[02:11:04.000 --> 02:11:06.000]  Ну, не получится
[02:11:06.000 --> 02:11:08.000]  ругать конечно C, слишком старый язык
[02:11:08.000 --> 02:11:10.000]  в этом смысле, но
[02:11:10.000 --> 02:11:12.000]  все равно как-то
[02:11:12.000 --> 02:11:14.000]  в этот раз
[02:11:14.000 --> 02:11:16.000]  более современный язык советую его использовать.
[02:11:16.000 --> 02:11:18.000]  Я его советую
[02:11:18.000 --> 02:11:20.000]  и вам его подаю.
[02:11:22.000 --> 02:11:24.000]  Да, еще плюс ко всему,
[02:11:24.000 --> 02:11:26.000]  ray это такой крейд, у которого
[02:11:26.000 --> 02:11:28.000]  никогда не было никаких проблем с
[02:11:28.000 --> 02:11:30.000]  memory-safety, просто не было никогда.
[02:11:30.000 --> 02:11:32.000]  Соответственно, несмотря
[02:11:32.000 --> 02:11:34.000]  на то, что он использует NatriumSafe,
[02:11:34.000 --> 02:11:36.000]  вы можете быть уверены в том, что если вы программу
[02:11:36.000 --> 02:11:38.000]  компилируете, используя ray,
[02:11:38.000 --> 02:11:40.000]  то она абсолютно memory-safe
[02:11:40.000 --> 02:11:42.000]  и будет быстро работать, компилироваться под всеми системы
[02:11:42.000 --> 02:11:44.000]  и все классно.
[02:11:46.000 --> 02:11:48.000]  Давайте посмотрим на некоторые возможности,
[02:11:48.000 --> 02:11:50.000]  которые предлагает ray.
[02:11:50.000 --> 02:11:52.000]  Во-первых, у нас есть ray-join.
[02:11:52.000 --> 02:11:54.000]  Join, он берет текущий трет.
[02:11:54.000 --> 02:11:56.000]  Если мы запускаемся
[02:11:56.000 --> 02:11:58.000]  внутри thread.pula,
[02:11:58.000 --> 02:12:00.000]  то тогда текущий трет,
[02:12:00.000 --> 02:12:02.000]  который дошел до join, это трет
[02:12:02.000 --> 02:12:04.000]  из thread.pula, он идет
[02:12:04.000 --> 02:12:06.000]  выполнять одну клаузжу, а вторую
[02:12:06.000 --> 02:12:08.000]  дает thread-у.
[02:12:10.000 --> 02:12:12.000]  В общую очередь задача
[02:12:12.000 --> 02:12:14.000]  thread.pula управляет.
[02:12:14.000 --> 02:12:16.000]  И там они возможно параллельно
[02:12:16.000 --> 02:12:18.000]  выполняются, возможно как-то
[02:12:18.000 --> 02:12:20.000]  последовательно, если вдруг не повезет.
[02:12:20.000 --> 02:12:22.000]  Вы также можете использовать это
[02:12:22.000 --> 02:12:24.000]  вне thread.pula,
[02:12:24.000 --> 02:12:26.000]  то есть такая вещь,
[02:12:26.000 --> 02:12:28.000]  которая удобна тем, что можно даже
[02:12:28.000 --> 02:12:30.000]  абстрагироваться
[02:12:30.000 --> 02:12:32.000]  от наличия либо отсутствия рантайма,
[02:12:32.000 --> 02:12:34.000]  и у вас в таком случае
[02:12:34.000 --> 02:12:36.000]  текущий трет, который не из thread.pula,
[02:12:36.000 --> 02:12:38.000]  будет выполнять две клаузжи последовательно.
[02:12:46.000 --> 02:12:48.000]  Скорее всего, это работает так,
[02:12:48.000 --> 02:12:50.000]  вот и так, ты операцию B просто,
[02:12:50.000 --> 02:12:52.000]  скорее всего просто операцию B
[02:12:52.000 --> 02:12:54.000]  посылаешь в thread.pula текущий,
[02:12:54.000 --> 02:12:56.000]  берешь thread.pula, управляешь в нее задачу,
[02:12:56.000 --> 02:12:58.000]  а операцию A сам будешь выполнять.
[02:13:02.000 --> 02:13:04.000]  А если thread.pula наунта,
[02:13:04.000 --> 02:13:06.000]  возможно просто опера упор B и все.
[02:13:18.000 --> 02:13:20.000]  Если это закончит свою задачу вторым,
[02:13:20.000 --> 02:13:22.000]  то это начнет просто точка изображения.
[02:13:22.000 --> 02:13:24.000]  Просто к тому, что нельзя блокировать
[02:13:24.000 --> 02:13:26.000]  thread.pula, хорошо?
[02:13:26.000 --> 02:13:28.000]  Да-да-да.
[02:13:28.000 --> 02:13:30.000]  Вопрос интересный.
[02:13:30.000 --> 02:13:32.000]  Thread.pula нельзя блокировать,
[02:13:32.000 --> 02:13:34.000]  это все-таки параллельность,
[02:13:34.000 --> 02:13:36.000]  у нас пока синхронности нет.
[02:13:36.000 --> 02:13:38.000]  Да, и это как раз то, о чем я здесь писал,
[02:13:38.000 --> 02:13:40.000]  все задачи предполагают, что они CPU bound,
[02:13:40.000 --> 02:13:42.000]  что вы не идете пытаться читать что-то из сети,
[02:13:42.000 --> 02:13:44.000]  потому что если клоузжи заблочатся,
[02:13:44.000 --> 02:13:46.000]  в таком случае это вам помешает
[02:13:46.000 --> 02:13:48.000]  утилизировать ядра вашего процессора,
[02:13:48.000 --> 02:13:50.000]  приблизительно так эффективно.
[02:13:52.000 --> 02:13:54.000]  Ну, пример использования.
[02:13:54.000 --> 02:13:56.000]  Не пишите такой ксорт,
[02:13:56.000 --> 02:13:58.000]  там есть парсорт, если что, в рейн.
[02:14:00.000 --> 02:14:02.000]  Можно, например, как-то так написать,
[02:14:02.000 --> 02:14:04.000]  написать свой partition, который будет делить
[02:14:04.000 --> 02:14:06.000]  каким-то образом текущий слайс,
[02:14:06.000 --> 02:14:08.000]  и после этого просто делать splitted-mute,
[02:14:08.000 --> 02:14:10.000]  join, две сортировки, все.
[02:14:10.000 --> 02:14:12.000]  Вообще красота.
[02:14:16.000 --> 02:14:18.000]  Так, еще есть rain scope.
[02:14:18.000 --> 02:14:20.000]  Это, в принципе, очень-очень похожая вещь
[02:14:20.000 --> 02:14:22.000]  на то, что в crossbeam.
[02:14:22.000 --> 02:14:24.000]  Но дело в том, что crossbeam
[02:14:24.000 --> 02:14:26.000]  он же не имеет никакого threadpool,
[02:14:26.000 --> 02:14:28.000]  а район имеет.
[02:14:28.000 --> 02:14:30.000]  И поэтому, в то время как
[02:14:30.000 --> 02:14:32.000]  rain будет отправлять задачи в threadpool,
[02:14:32.000 --> 02:14:34.000]  crossbeam будет создавать новые труды.
[02:14:34.000 --> 02:14:36.000]  То есть ключевое различие между ними
[02:14:36.000 --> 02:14:38.000]  именно такое.
[02:14:38.000 --> 02:14:40.000]  Еще, кстати, важный момент.
[02:14:40.000 --> 02:14:42.000]  У нас есть еще один важный момент.
[02:14:42.000 --> 02:14:44.000]  У нас есть еще один важный момент.
[02:14:44.000 --> 02:14:46.000]  Еще, кстати, важный момент.
[02:14:46.000 --> 02:14:48.000]  В join, когда вы пользуете join,
[02:14:48.000 --> 02:14:50.000]  это все на стеке происходит.
[02:14:50.000 --> 02:14:52.000]  Когда вы будете пользоваться scope,
[02:14:52.000 --> 02:14:54.000]  то в таком случае вы будете делать allocation.
[02:14:54.000 --> 02:14:56.000]  Поэтому предпочитайте join scope.
[02:15:00.000 --> 02:15:02.000]  Ну, соответственно, scope
[02:15:02.000 --> 02:15:04.000]  ждает, когда все задачи закончатся,
[02:15:04.000 --> 02:15:06.000]  это блокирующая операция.
[02:15:06.000 --> 02:15:08.000]  Она более универсальная, чем join,
[02:15:08.000 --> 02:15:10.000]  но при этом использует кучу.
[02:15:14.000 --> 02:15:16.000]  Так что используйте join по возможности.
[02:15:16.000 --> 02:15:18.000]  Кажется, это все, да?
[02:15:18.000 --> 02:15:20.000]  У нас лекция закончилась.
[02:15:20.000 --> 02:15:22.000]  Больше нечего себе рассказывать.
[02:15:24.000 --> 02:15:26.000]  Да, одна лекция по синхронности.
[02:15:30.000 --> 02:15:32.000]  Ну что ж, вопросов нет?
[02:15:32.000 --> 02:15:34.000]  Вопрос, как ниже низкого уровня работает?
[02:15:34.000 --> 02:15:36.000]  Муф — это мем-копия.
[02:15:36.000 --> 02:15:38.000]  Просто мем-копия.
[02:15:38.000 --> 02:15:40.000]  Ну а если там есть
[02:15:40.000 --> 02:15:42.000]  показатели на полях?
[02:15:42.000 --> 02:15:44.000]  Если у меня поле,
[02:15:44.000 --> 02:15:46.000]  это указатель на другой.
[02:15:46.000 --> 02:15:48.000]  Ну, это называется
[02:15:48.000 --> 02:15:50.000]  self-referential struct.
[02:15:50.000 --> 02:15:52.000]  И такой раз тебе
[02:15:52.000 --> 02:15:54.000]  не позволяет писать safe в подножистве.
[02:15:54.000 --> 02:15:56.000]  OneSafe — это сам себе обратина,
[02:15:56.000 --> 02:15:58.000]  если такое молишь. Вообще есть там PIN.
[02:15:58.000 --> 02:16:00.000]  PIN — это тема следующей нашей лекции,
[02:16:00.000 --> 02:16:02.000]  потому что нам о синхронности нужно будет,
[02:16:02.000 --> 02:16:04.000]  чтобы структурки нельзя было молоть.
[02:16:04.000 --> 02:16:06.000]  И нам понадобится PIN.
[02:16:06.000 --> 02:16:08.000]  Мы об этом поговорим на следующей.
