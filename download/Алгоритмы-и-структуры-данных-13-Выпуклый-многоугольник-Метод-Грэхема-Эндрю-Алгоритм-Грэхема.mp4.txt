[00:00.000 --> 00:08.500]  Ну да, в общем-то да, мы подошли с вами, на самом деле, к заданию,
[00:08.500 --> 00:12.300]  к каким-то выпуклостям, хотя там по-разному, потому
[00:12.300 --> 00:14.740]  что следующая задача, которую у меня тут по списку мы
[00:14.740 --> 00:17.220]  должны с вами обсуждать, это конечно задача лежит
[00:17.220 --> 00:19.300]  ли точка в многоугольнике.
[00:19.300 --> 00:23.260]  Ну начнем с невыпуклого случая.
[00:23.260 --> 00:26.260]  Так, все, пишем, да?
[00:26.260 --> 00:27.260]  Пишем?
[00:27.260 --> 00:28.260]  Хорошо, отлично.
[00:28.520 --> 00:30.760]  Так, замечательно, пойдемте.
[00:30.760 --> 00:35.320]  Давайте начнем с экзотического невыпуклого случая, нарисуем
[00:35.320 --> 00:36.320]  тут какую-нибудь гадость.
[00:36.320 --> 00:45.880]  Да, это не, ну, я думаю, очевидно, да, не выпукло, это многоугольник
[00:45.880 --> 00:46.880]  я рисую.
[00:46.880 --> 00:56.520]  Да, да, да, да, да, если вот в этом месте угол будет
[00:56.580 --> 01:02.140]  не такой, да, сразу перездача, да, да, да, конечно, так,
[01:02.140 --> 01:13.380]  так, значит, вот, и вот задача, там, дана точка, скажите,
[01:13.380 --> 01:15.380]  пожалуйста, лежит ли точка в многоугольнике?
[01:15.380 --> 01:20.940]  А, то есть, у меня не пусто, хотя вы теперь, явно, что
[01:20.940 --> 01:23.380]  если еще чуть-чуть нарисовать, вам будет даже на картинке
[01:23.380 --> 01:24.380]  не очевидно.
[01:24.520 --> 01:27.520]  Вон туда, там, где у вас вот эти вот, да, да, они очевидны.
[01:27.520 --> 01:31.640]  Да, тогда вот где-то туда, вот, а, ну, да, в данном случае
[01:31.640 --> 01:35.320]  просто это канал выхода очевиден, да, да, да, да,
[01:35.320 --> 01:36.320]  ну, окей, хорошо.
[01:36.320 --> 01:39.120]  Ну, теперь давайте к этому проскакать, решать такую
[01:39.120 --> 01:40.120]  задачу.
[01:40.120 --> 01:44.120]  Берем, делаем граф, делаем все точки, делаем все точки,
[01:44.120 --> 01:49.120]  короче, очень маленькие, которые, вот, и по этой сеточке
[01:49.120 --> 01:52.120]  делаем DFS, соответственно, если DFS вышел, значит, лежит,
[01:52.860 --> 01:55.860]  если не вышел, значит, лежит.
[01:55.860 --> 01:57.860]  Ну, да, да, да, да, да, да, от создателя.
[01:57.860 --> 01:59.860]  Сколько, сколько мест в этом зале?
[01:59.860 --> 02:05.860]  847 тысяч на 10 минус 3, да, примерно, видимо, из этого
[02:05.860 --> 02:09.860]  же разряда ответ, конечно, да, вот, да, окей.
[02:09.860 --> 02:11.860]  Ну, конечно, классический метод, на самом деле, немножко
[02:11.860 --> 02:12.860]  другой.
[02:12.860 --> 02:15.860]  Классический метод называется, а давайте проведем куда-нибудь
[02:15.860 --> 02:19.860]  лучик и тупо посчитаем, сколько раз этот лучик пересекчет
[02:20.600 --> 02:22.600]  в многоугольник.
[02:22.600 --> 02:25.600]  Типа, нет, ну, на уровне идей как бы кайф, потому что
[02:25.600 --> 02:28.600]  если пересекчет не счетное число раз, значит, мы находимся
[02:28.600 --> 02:31.600]  в многоугольнике, если счетное, значит, мы вне многоугольника,
[02:31.600 --> 02:32.600]  все просто.
[02:32.600 --> 02:37.600]  По модулю одной гадости.
[02:37.600 --> 02:41.600]  Гадость называется, а что, если луч случайно пересекчет
[02:41.600 --> 02:43.600]  там попало, прошел через вершину?
[02:43.600 --> 02:46.600]  Ведь, действительно, у нас же бывают там всякие подлые
[02:47.340 --> 02:53.340]  или вот такие, или вот такие еще бывают.
[02:53.340 --> 02:57.340]  Или там вообще вот это вот безобразие все бывает.
[02:57.340 --> 03:01.340]  Вот, и теперь давайте вот немножко подумаем, как
[03:01.340 --> 03:02.340]  решать эту проблему.
[03:02.340 --> 03:04.340]  Просто очень много разных способов, на самом деле,
[03:04.340 --> 03:05.340]  есть.
[03:05.340 --> 03:06.340]  Потому что, ну, по-разному.
[03:06.340 --> 03:10.340]  Ну, как бы, если мы верим в добы, то можно, конечно,
[03:10.340 --> 03:12.340]  привести просто рандомный луч и сделать еще и надежное
[03:12.340 --> 03:14.840]  решение в духе, если луч случайно прошел через
[03:15.580 --> 03:17.580]  вершину, значит, генерируем еще один луч, и так пока
[03:17.580 --> 03:18.580]  нам не повезет.
[03:18.580 --> 03:20.580]  А, в общем-то, повезти нам должно с вероятностью
[03:20.580 --> 03:22.580]  один, на самом деле.
[03:22.580 --> 03:23.580]  Вот.
[03:23.580 --> 03:26.580]  Ну, как вы знаете, вероятность, да, повезет с вероятостью
[03:26.580 --> 03:28.580]  там, то есть нам не везет с вероятостью ноль.
[03:28.580 --> 03:30.580]  Это не значит, что нам не везет совсем.
[03:30.580 --> 03:31.580]  Да.
[03:31.580 --> 03:34.580]  Ну, вы уже там люди грамотные, собственно, это знаете.
[03:34.580 --> 03:35.580]  Вот.
[03:35.580 --> 03:38.580]  Ну, а единственная проблема, что это, конечно, в каких-то
[03:38.580 --> 03:40.580]  и, то есть это надо там в идеальных доблах с какой-то
[03:40.580 --> 03:41.580]  идеальной точностью.
[03:41.580 --> 03:44.580]  Хочется как-то решать задачу абсолютно точно.
[03:45.320 --> 03:46.320]  Что можно сделать?
[03:46.320 --> 03:50.320]  Можно, по идее, провести луч из 0,0 в бесконечность.
[03:50.320 --> 03:51.320]  Да.
[03:51.320 --> 03:52.320]  Да.
[03:52.320 --> 03:53.320]  Ну, действительно.
[03:53.320 --> 03:55.320]  Во-первых, классический метод, что если многоугольник
[03:55.320 --> 03:57.820]  целочисленный, то, на самом деле, если у вас тут точка
[03:57.820 --> 04:01.820]  x, y, то можно провести луч, ну ладно, раз я тут вниз провел,
[04:01.820 --> 04:08.820]  в точку, я не знаю там, бесконечность и y, ну скажем, минус 1.
[04:08.820 --> 04:13.160]  Чем приятен луч, тем, что между этими двумя точками
[04:13.160 --> 04:16.400]  целых точек нету, ну точно нету.
[04:16.400 --> 04:20.660]  То есть в олимпиадом программировании почти, наверное, вот такой
[04:20.660 --> 04:22.660]  метод просто будет работать.
[04:22.660 --> 04:25.660]  Бесконечность, видимо, должна быть простым числом.
[04:25.660 --> 04:28.660]  Ну, нет, зачем просты?
[04:28.660 --> 04:30.660]  Не, абсолютно не обязательно.
[04:30.660 --> 04:33.160]  Победа зачетается не в том, что это простое число,
[04:33.160 --> 04:35.660]  а в том, что у вас вот эта точка и эта точка лежат
[04:35.660 --> 04:37.660]  на соседних горизонталих целых.
[04:37.660 --> 04:38.660]  Вот.
[04:38.660 --> 04:40.660]  То есть поэтому тут по барабану.
[04:41.160 --> 04:45.160]  Надо, чтобы этот инф был как бы правее на самом деле
[04:45.160 --> 04:48.160]  всего многоугольника и правее вот этого x еще, кстати, важно.
[04:48.160 --> 04:54.160]  Проблема только, что нужно это проверять пересечение квадратно.
[04:54.160 --> 04:57.160]  Нет, ну мы уже с вами в прошлый раз обсуждали, как проверить,
[04:57.160 --> 04:59.160]  там пересекаются ли отрезок и отрезок.
[04:59.160 --> 05:01.160]  Ну если так, то да.
[05:01.160 --> 05:05.160]  Ну да, но обычно это...
[05:05.160 --> 05:09.160]  Но проверить, даны два отрезка, надо в целых числах
[05:09.160 --> 05:11.160]  проверить, пересекаются ли они да или нет.
[05:11.160 --> 05:13.160]  А это зачем нам?
[05:13.160 --> 05:15.160]  Ну нам же надо проверять.
[05:15.160 --> 05:17.160]  Ну метод-то не изменился.
[05:17.160 --> 05:20.160]  Да, метод не изменился, он все еще за линию работы.
[05:20.160 --> 05:22.160]  Что еще можно сделать?
[05:22.160 --> 05:24.660]  Ну еще есть, вот я в своей научной работе столкнулся,
[05:24.660 --> 05:27.160]  еще есть ситуация, что делать, если у вас тоже,
[05:27.160 --> 05:30.160]  то есть точки находятся, то есть точки не целочисленные,
[05:30.160 --> 05:33.160]  но все-таки они находятся в каком-то поле,
[05:33.160 --> 05:36.160]  которое абсолютно, там значение, которое абсолютно точно вычисляются,
[05:36.160 --> 05:38.660]  ну типа a плюс b корней из 2, a и b рациональные числа,
[05:38.660 --> 05:40.660]  там с произвольной длинкой.
[05:40.660 --> 05:43.660]  Да, и что в таком случае можно сделать?
[05:46.660 --> 05:49.660]  Вот как в этом случае бы решить задачу абсолютно точно?
[05:51.660 --> 05:53.660]  Ну здесь идея такая.
[05:53.660 --> 05:55.660]  Значит лично у меня такая идея.
[05:55.660 --> 05:58.660]  Значит проведем, так давайте я нормальный маркер возьму.
[05:58.660 --> 06:01.660]  Значит проведем горизонтальный луч вправо,
[06:03.660 --> 06:06.660]  но наша задача провести не горизонтальный луч вправо,
[06:06.660 --> 06:09.660]  а луч чуть-чуть-чуть-чуть выше.
[06:09.660 --> 06:11.660]  Что такое чуть выше?
[06:11.660 --> 06:13.660]  Я просто провожу тут все лучи во все вершины,
[06:13.660 --> 06:16.660]  которые тут выше, и выбираю из этих лучей самые низкие,
[06:16.660 --> 06:19.660]  то есть тот, у кого тут угол поменьше.
[06:19.660 --> 06:22.660]  Ну сравнивая их, естественно, не вычисляя в явном виде угол,
[06:22.660 --> 06:25.660]  вот подчеркиваю, боже упаси, да,
[06:25.660 --> 06:28.660]  то есть тут почти всегда, если вам требуется прямо в даблах вычислить угол,
[06:28.660 --> 06:32.660]  то значит ваше решение пошло куда-то не туда,
[06:32.660 --> 06:35.660]  потому что крайне редко это нужно, реально.
[06:36.660 --> 06:39.660]  Но самое главное, то есть проверяйте, кто из них там ближе,
[06:39.660 --> 06:42.660]  можно просто с помощью векторного произведения,
[06:42.660 --> 06:46.660]  который вычисляется в целых числах, ну или в том же поле.
[06:46.660 --> 06:48.660]  Это понятно, о чем я говорю, да?
[06:48.660 --> 06:50.660]  Так вот, выбираем самый низкий идущий луч,
[06:50.660 --> 06:53.660]  вот он идет в эту вершину, а мы идем тут в эту вершину,
[06:53.660 --> 06:58.660]  и теперь надо просто провести любой луч, который находится между ними.
[06:58.660 --> 07:00.660]  Ну можно, в принципе, даже бисектрису провести,
[07:00.660 --> 07:03.660]  но я не уверен, правда, что она прямо в том же поле уместится,
[07:03.660 --> 07:05.660]  но это нам и не нужно,
[07:05.660 --> 07:08.660]  потому что, на самом деле, если вы просто сложите вот эти два вектора,
[07:08.660 --> 07:11.660]  вот такой прелограммчик, то, в общем-то, диагонолог,
[07:11.660 --> 07:15.660]  то, в общем-то, вот вам и направляющий вектор для этого луча между ними.
[07:16.660 --> 07:19.660]  Вот, в принципе, еще вот таким вот образом можно,
[07:19.660 --> 07:22.660]  это тоже будет достаточно надежно работать.
[07:25.660 --> 07:27.660]  Так, что еще можно?
[07:27.660 --> 07:31.660]  Есть еще, конечно, такой экстраварантный метод.
[07:31.660 --> 07:34.660]  Есть еще такое, давайте проведем луч вниз.
[07:37.660 --> 07:40.660]  Но какие могут быть проблемы?
[07:40.660 --> 07:43.660]  Нам может не нравиться, что тут у нас могут быть точки,
[07:43.660 --> 07:47.660]  а давайте применим ко всей этой картинке афинное преобразование.
[07:49.660 --> 07:51.660]  Так, знаете, что это такое?
[07:54.660 --> 07:56.660]  Ну, идея такая.
[07:56.660 --> 07:58.660]  Значит, смотрите, каждую точку можно...
[07:58.660 --> 08:02.660]  Ну, смотрите, у нас на плоскости есть какой-то базис.
[08:03.660 --> 08:05.660]  Вот давайте я так на пальцах покажу,
[08:05.660 --> 08:09.660]  и каждая точка, на самом деле, имеет типа вот это умножить,
[08:09.660 --> 08:11.660]  то есть вот этот вектор умножить на х,
[08:11.660 --> 08:14.660]  и вот этот плюс вот этот вектор умножить на х, правильно?
[08:15.660 --> 08:17.660]  Так вот, давайте попробуем...
[08:17.660 --> 08:20.660]  Что значит применить афинное преобразование?
[08:20.660 --> 08:22.660]  В моей интерпретации это сделать так.
[08:22.660 --> 08:27.660]  Давайте нарисуем абсолютно те же точки, но вот этот базисный вектор,
[08:27.660 --> 08:30.660]  подменим на вот какой-нибудь вот такой.
[08:32.660 --> 08:35.660]  То есть по сути мы эту картинку вот так вот перекорежем.
[08:36.660 --> 08:38.660]  Но если мы сделаем этот вектор,
[08:38.660 --> 08:40.660]  он пойдет достаточно вправо,
[08:40.660 --> 08:43.660]  то у нас там никакие две точки, на самом деле,
[08:43.660 --> 08:45.660]  на одной вертикали уже не попадут.
[08:45.660 --> 08:49.660]  И тогда после этого можно уже спокойно в полученной картинке опускать луч.
[08:49.660 --> 08:52.660]  Да, но очевидно, что при таком афинном преобразовании
[08:52.660 --> 08:56.660]  то, что было внутри, останется внутри, там останется снаружи и так далее.
[08:56.660 --> 09:00.660]  Там есть много замечательных свойств всяких афинных преобразований.
[09:00.660 --> 09:02.660]  Нет, странно, что у вас не было.
[09:02.660 --> 09:04.660]  Где-то у вас должно было это быть.
[09:05.660 --> 09:06.660]  Странно.
[09:07.660 --> 09:08.660]  Ну ладно.
[09:09.660 --> 09:11.660]  Это немножко может быть экзотично.
[09:12.660 --> 09:15.660]  Но на самом деле есть, конечно, веселый практический способ,
[09:16.660 --> 09:17.660]  который говорит так.
[09:17.660 --> 09:22.660]  Вот смотрите, у нас была проблема, что вершины могут попадать на луч.
[09:22.660 --> 09:24.660]  И на самом деле, если у нас есть проблема,
[09:24.660 --> 09:27.660]  то есть два способа работы с ней.
[09:27.660 --> 09:29.660]  Первый способ, вот мы тут исследовали,
[09:29.660 --> 09:33.660]  это давайте пытаться этой проблемы всеми правдами и неправдами избегать.
[09:34.660 --> 09:36.660]  Ну мы, в принципе, три неправды придумали.
[09:38.660 --> 09:41.660]  Но на самом деле предлагается и другой подход.
[09:41.660 --> 09:44.660]  Давайте посмотрим в глаза этой проблеме и подумаем,
[09:44.660 --> 09:47.660]  а сильна ли вообще большая эта проблема?
[09:50.660 --> 09:52.660]  На самом деле, если вдуматься,
[09:52.660 --> 09:54.660]  может, на самом деле проблема не так страшна?
[09:56.660 --> 10:00.660]  И оказывается, действительно, что оказывается, есть очень красивая идея.
[10:03.660 --> 10:06.660]  Решение я тут не случайно нарисовал почти все возможные...
[10:07.660 --> 10:10.660]  Нарисовал тут все возможные случаи пересечения.
[10:10.660 --> 10:14.660]  Так вот, на самом деле, идея оказывается такая.
[10:14.660 --> 10:18.660]  То есть мы по-прежнему перебираем все отрезочки.
[10:18.660 --> 10:22.660]  Для каждого отрезочка проверяем, пересекает ли этот отрезок луч,
[10:22.660 --> 10:24.660]  то есть имеет ли одну общую точку.
[10:25.660 --> 10:26.660]  Но теперь идея такая.
[10:26.660 --> 10:30.660]  Если он пересекает, то его нужно учитывать не всегда.
[10:33.660 --> 10:34.660]  Учитывать как?
[10:34.660 --> 10:36.660]  Понятно, что мы считаем количество отрезков,
[10:36.660 --> 10:39.660]  которые у нас пересекли луч, и меряем четность.
[10:40.660 --> 10:43.660]  Так вот, идея в том, что надо учитывать не все отрезочки.
[10:44.660 --> 10:50.660]  А надо учитывать только такие отрезочки x1, y1, x2, y2.
[10:53.660 --> 10:57.660]  Такие что, внимание, я провел не просто прямую,
[10:57.660 --> 10:59.660]  а просто горизонтальную прямую.
[10:59.660 --> 11:00.660]  Это точка x, y.
[11:00.660 --> 11:04.660]  Я провел горизонтальную прямую, идущую, допустим, вправо.
[11:06.660 --> 11:10.660]  Так вот, надо учитывать те и только те отрезки, у которых...
[11:10.660 --> 11:13.660]  у которых, смотрите, например,
[11:13.660 --> 11:19.660]  минимум из y1, y2 меньше либо равен y,
[11:19.660 --> 11:24.660]  меньше, строго максимума из y1, y2.
[11:29.660 --> 11:31.660]  Не самая плохая формула, правда?
[11:32.660 --> 11:36.660]  То есть более того, этот метод на самом деле еще хорош тем,
[11:36.660 --> 11:39.660]  что, возможно, он будет неплох по константе.
[11:41.660 --> 11:42.660]  Вот.
[11:42.660 --> 11:45.660]  Ну, то есть, видимо, для кого это векторное произведение?
[11:45.660 --> 11:48.660]  То есть вам на самом деле проверить,
[11:48.660 --> 11:52.660]  если у вас есть задача, пересекает ли отрезок горизонтальный луч.
[11:53.660 --> 11:56.660]  Вам нужно проверить, во-первых, пересекает ли этот отрезок вот эту горизонталь,
[11:56.660 --> 11:59.660]  то есть выполняются ли какие-то вот такие условия.
[11:59.660 --> 12:02.660]  Ну, а если выполняется, то с помощью какого-нибудь одного
[12:02.660 --> 12:04.660]  видимо векторного произведения вы можете проверить,
[12:04.660 --> 12:06.660]  эта точка лежит с нужной стороны или нет.
[12:06.660 --> 12:10.660]  А учитывая, что мы там, когда у нас несколько отрезков проверяли
[12:10.660 --> 12:12.660]  на пересечение, у нас там возникали,
[12:12.660 --> 12:15.660]  как там, по-моему, то ли два, то ли даже четыре векторных произведений.
[12:16.660 --> 12:19.660]  Поэтому этот метод действительно хороший именно константой.
[12:23.660 --> 12:24.660]  Нет.
[12:24.660 --> 12:27.660]  Ну, чтобы просто проверить, вот данный отрезок, скажите, пожалуйста,
[12:27.660 --> 12:29.660]  пересекает ли этот отрезок луч.
[12:29.660 --> 12:32.660]  То есть он пересекает или он находится вот с этой стороны, например?
[12:32.660 --> 12:34.660]  Ну, в смысле, вот это мы умеем как-то делать.
[12:34.660 --> 12:37.660]  А почему нам нужно было какое-то произведение еще кроме?
[12:38.660 --> 12:40.660]  Ну, потому что раньше мы говорили так.
[12:40.660 --> 12:43.660]  То есть у нас была задача, даны два отрезка, пересекаются ли они.
[12:44.660 --> 12:48.660]  На прошлом занятии мы решали эту задачу с помощью четырех векторных произведений.
[12:51.660 --> 12:53.660]  Ну, если прям в общем ее решать.
[12:54.660 --> 12:56.660]  А здесь заметим, что у нас есть два отрезка,
[12:56.660 --> 12:58.660]  которые пересекаются с этой стороны.
[12:58.660 --> 13:00.660]  Ну, если прям в общем ее решать.
[13:01.660 --> 13:04.660]  А здесь заметим, что здесь вместо этих четырех
[13:05.660 --> 13:09.660]  можно убрать эти четыре и оставить только одно максимум.
[13:11.660 --> 13:13.660]  Потому что мы здесь пользуемся тем,
[13:13.660 --> 13:15.660]  что мы пересекаем отрезок не просто с рандомным отрезком,
[13:15.660 --> 13:17.660]  а с горизонталью.
[13:17.660 --> 13:19.660]  Игрок равно чего-то.
[13:20.660 --> 13:22.660]  Поэтому на самом деле что нам надо делать?
[13:22.660 --> 13:24.660]  Нам надо проверить, например, вот это условие.
[13:24.660 --> 13:26.660]  И если это условие выполнено,
[13:27.660 --> 13:31.660]  то тогда нам надо просто мысленно направить отрезок снизу вверх
[13:31.660 --> 13:34.660]  и после этого с помощью одного векторного произведения проверить.
[13:34.660 --> 13:37.660]  Верно ли, что Х игрок лежит слева от него?
[13:40.660 --> 13:43.660]  Вот. То есть получается вместо четырех векторных произведений одно.
[13:47.660 --> 13:48.660]  Вот.
[13:49.660 --> 13:52.660]  Но остается только маленькая проблемка.
[13:52.660 --> 13:55.660]  Надо, правда, убедиться, что это условие вообще работает.
[13:57.660 --> 13:59.660]  А то как-то читерство,
[13:59.660 --> 14:02.660]  потому что у нас тут куча случаев, их как-то надо разбирать,
[14:02.660 --> 14:05.660]  но утверждается, что все эти случаи,
[14:05.660 --> 14:08.660]  вот это условие прекрасно кушает вот ровно в этом виде.
[14:10.660 --> 14:12.660]  Ну да, давайте пройдемся по этой картинке.
[14:12.660 --> 14:14.660]  Ну, во-первых, самый простой случай,
[14:14.660 --> 14:16.660]  когда отрезок просто пересекает луч,
[14:16.660 --> 14:18.660]  я думаю, сомнения не вызывает.
[14:18.660 --> 14:20.660]  Так, дальше.
[14:20.660 --> 14:22.660]  Смотрите, вот этот случай.
[14:22.660 --> 14:24.660]  Смотрите, ну это вот один из самых сложных.
[14:24.660 --> 14:26.660]  Тогда смотрите.
[14:26.660 --> 14:28.660]  Этот отрезок мы учли,
[14:29.660 --> 14:31.660]  этот отрезок мы не учли,
[14:32.660 --> 14:34.660]  потому что здесь вот тут будет равенство.
[14:35.660 --> 14:37.660]  А этот отрезок учли.
[14:37.660 --> 14:39.660]  Получается суммарно,
[14:39.660 --> 14:42.660]  то есть этот заворот мы не учли и правильно сделали.
[14:44.660 --> 14:45.660]  Так.
[14:45.660 --> 14:47.660]  Ну, кстати, абсолютно аналогично,
[14:47.660 --> 14:49.660]  кстати, рассматривается и вот этот случай.
[14:49.660 --> 14:51.660]  А теперь давайте рассмотрим то же самое снизу.
[14:52.660 --> 14:54.660]  Снизу, да, этот мы случай не учли,
[14:54.660 --> 14:58.660]  но теперь легко заметить, что мы и эти два тоже не учли.
[15:00.660 --> 15:03.660]  То есть разница, то есть тут два учли, тут два не учли,
[15:03.660 --> 15:05.660]  но ссор одинаковый.
[15:06.660 --> 15:07.660]  Вот.
[15:07.660 --> 15:09.660]  Что у нас в этом углу?
[15:09.660 --> 15:11.660]  Ну, тоже ничего не учли.
[15:11.660 --> 15:13.660]  Да, красивый случай, конечно, вот такой.
[15:13.660 --> 15:16.660]  Здесь оказывается, что мы вот этот случай,
[15:16.660 --> 15:17.660]  вот такой.
[15:17.660 --> 15:19.660]  Здесь оказывается, что мы вот это учтем,
[15:19.660 --> 15:21.660]  а это нет.
[15:22.660 --> 15:24.660]  Видно, да?
[15:26.660 --> 15:28.660]  Так, ну и остается только вот эти случаи,
[15:28.660 --> 15:30.660]  но они по сути одинаковые,
[15:30.660 --> 15:32.660]  когда это не учитываем, это не учитываем, это учитываем.
[15:32.660 --> 15:34.660]  Кайф.
[15:35.660 --> 15:37.660]  То есть вот такой, на самом деле,
[15:37.660 --> 15:39.660]  здесь вот очень красивый метод.
[15:39.660 --> 15:41.660]  В принципе...
[15:41.660 --> 15:44.660]  На самом деле можно заметить, что это то же самое,
[15:44.660 --> 15:47.660]  если бы мы подняли нашу прямую на эпсилон вверх,
[15:48.660 --> 15:51.660]  и тогда бы это было прям честное условие.
[15:51.660 --> 15:55.660]  Да, да, абсолютно правильно.
[15:55.660 --> 15:57.660]  То есть на самом деле, да, это...
[15:57.660 --> 15:59.660]  То есть на самом деле просто идентично тому,
[15:59.660 --> 16:02.660]  что действительно мы бы могли поднять этот лучик интуитивно
[16:02.660 --> 16:04.660]  вот на, соответственно, вверх,
[16:04.660 --> 16:09.660]  на прям очень-очень-очень-очень-очень-очень-очень-очень маленький эпсилон.
[16:09.660 --> 16:10.660]  Да.
[16:10.660 --> 16:12.660]  Когда принадлежность не поменялась и...
[16:12.660 --> 16:14.660]  Ну, правда, практически не поменялась, да.
[16:16.660 --> 16:18.660]  Да, нет, то есть мы чуть-чуть лучик поднимем,
[16:18.660 --> 16:20.660]  если мы совсем чуть-чуть поднимем,
[16:20.660 --> 16:23.660]  то лучик не будет пересекать никакую вершину заведомо.
[16:23.660 --> 16:25.660]  Не будет пересекать вершину, и...
[16:25.660 --> 16:30.660]  Да, а пересекать отрезки будут ровно те, которые мы здесь будем учитывать.
[16:30.660 --> 16:33.660]  Ну да, и принадлежность той точки нашей не поменяется.
[16:33.660 --> 16:35.660]  Ну, типа да, да, да.
[16:35.660 --> 16:36.660]  Да.
[16:36.660 --> 16:39.660]  Тут важный момент, сейчас или неважный.
[16:39.660 --> 16:40.660]  Угу.
[16:42.660 --> 16:45.660]  Ну, смотри, если бы у меня точка лежала строго на стороне,
[16:45.660 --> 16:48.660]  то от поднятия чуть-чуть вверх она бы стала лежать внутри,
[16:48.660 --> 16:50.660]  от поднятия чуть-чуть вниз,
[16:50.660 --> 16:52.660]  стала бы лежать снаружи.
[16:53.660 --> 16:54.660]  Нет, вот тут просто...
[16:54.660 --> 16:56.660]  Потому что мы проверяем на принадлежность не точку x, y,
[16:56.660 --> 16:59.660]  а точку x, y плюс эпсилон, которую мы подняли.
[16:59.660 --> 17:00.660]  А, все.
[17:00.660 --> 17:02.660]  Не, ну нет, эту вот точку мы не поднимали, если что.
[17:03.660 --> 17:06.660]  В нашем способе проверки мы сейчас...
[17:06.660 --> 17:07.660]  Нет, мы подняли не ее,
[17:07.660 --> 17:09.660]  мы как бы провели горизонтальный луч,
[17:09.660 --> 17:11.660]  и этот горизонтальный луч чуть-чуть выше подняли.
[17:11.660 --> 17:13.660]  Да, на горизонтальный луч он проходит не через точку x, y,
[17:13.660 --> 17:15.660]  а через точку x, y, и эпсилон.
[17:15.660 --> 17:16.660]  Не, не, в смысле правый край.
[17:16.660 --> 17:17.660]  А, ты так мысляшь?
[17:17.660 --> 17:18.660]  Нет, я мыслял по-другому.
[17:18.660 --> 17:20.660]  Я мыслял, что точка x, y осталась,
[17:20.660 --> 17:22.660]  но мы просто луч чуть-чуть приподняли.
[17:22.660 --> 17:23.660]  А в плане угол?
[17:23.660 --> 17:24.660]  Да.
[17:24.660 --> 17:25.660]  А, ну где нет, я мыслял, что параллельно.
[17:25.660 --> 17:26.660]  А, ну да.
[17:26.660 --> 17:28.660]  А, ну хорошо, да, можно мыслить и так.
[17:28.660 --> 17:30.660]  Что-то давайте точку чуть-чуть приподнимем.
[17:30.660 --> 17:37.620]  предполагает, что она не лежит на границе. Да, но понятно, что тут можно чуть-чуть поднять так,
[17:37.620 --> 17:44.060]  чтобы ее принадлежность к многоугольнику не поменялась. Ну можно и так, пожалуйста. Так что вот
[17:44.060 --> 17:49.420]  такая вот красота. Идейное доказательство такое, но это приводит к очень красивой реализации,
[17:49.420 --> 17:55.760]  а константа, как выясняется, важна. Потому что, как выясняется, вон тут тарир. То есть, конечно,
[17:55.760 --> 18:01.960]  сложно было ожидать от пасковского четвертинала, чтобы подсунуть задачу, где решение с правильной
[18:01.960 --> 18:07.000]  сим-тотикой может работать от 5 до 20 секунд, конечно. Хотя рекорд, там, по-моему, Итмоз дала,
[18:07.000 --> 18:16.600]  там какая-то команда Итмоз дала эту задачу, кстати, с 1.7. Прога, конечно. Там подлая задача
[18:16.600 --> 18:21.360]  оказалась. Там была задача в том числе на то, чтобы ее правильно написать.
[18:21.360 --> 18:35.960]  Ну вот, что делать, подло. Ну что делать? Что делать тогда? Как бы в концерте у нас олимпиады не
[18:35.960 --> 18:45.520]  только по математике, но и по программированию. Ну да, ну да. На самом деле правильно. На прошлом
[18:45.520 --> 18:51.960]  полуфинале, а на позже вообще надо было Хишберга писать. Ну и правильно. Нет, ну на самом деле
[18:51.960 --> 19:02.880]  правильно. В общем-то, Хишберг вещь такая, которую полезно уже знать. Ну это уже другой вопрос. Ну вот,
[19:02.880 --> 19:12.320]  вот ребята ЦС дали. Это уже прошлое. Надеюсь, просто отмечаем, что есть такое красивое решение,
[19:12.320 --> 19:21.160]  с такой красивой константой. Вот, ну а теперь мы переходим к выпуклым многоугольникам. Да,
[19:21.160 --> 19:26.320]  ну вообще, я думаю, у нас вообще, по-моему, сегодня практически все занятие будет посвящено выпуклости.
[19:26.320 --> 19:33.800]  Там в самых разных ее проявлениях. Да, ну для этого просто, поэтому можно даже для фундаментальности
[19:33.800 --> 19:43.680]  даже просто задаться уже просто прямым вопросом. А что такое вообще выпуклость? Вот давайте так. Что
[19:43.680 --> 19:55.600]  такое вообще выпуклая фигура? Теорема, что относительно каждого отрезка. Ой, какого отрезка? А если фигуры
[19:55.600 --> 20:02.200]  не многоугольник? Вот просто, не, глобально. Вот если вы хотите доказать, что многоугольник выпуклый,
[20:02.200 --> 20:24.600]  тогда и только тогда, когда у него там что-то. Так, еще раз, полуплоскость. Так.
[20:33.200 --> 20:44.200]  Ну вроде, ну по моему определению, да. Вот, ну по определению маклога, короче, там ломается. Да. А что,
[20:44.200 --> 20:55.600]  а что вам говорили на маклоге? Можно отделить от друга прямой, не пересекающийся. Если я возьму такую же снизу
[20:55.600 --> 21:04.480]  и справа, только не включая точку. А фигура там не подразделала, что она замкнутая? Ну, в условии не было написано,
[21:04.480 --> 21:12.760]  когда мы вчера себя обсудили. Ну, короче, ну по этому примеру. Да-да-да. Тут возникает вопрос, каким
[21:12.760 --> 21:18.160]  определением выпуклости вы пользовались в маклоге? Нам не давали определение, нам дали задачу в билет,
[21:19.160 --> 21:24.520]  а нет, ну тогда, нет, просто непонятно, что такое выпуклая фигура. Нет, в нашем-то случае мы пойдем просто,
[21:24.520 --> 21:30.640]  то есть мы скажем, что фигура, даже не фигура, а просто множество, просто под множество точек на
[21:30.640 --> 21:37.520]  плоскости, хотя на самом деле и в пространстве там, и где угодно. Значит, выпукло, будем говорить,
[21:37.520 --> 21:55.560]  если для любой точки P1 и P2, лежащих, правда, не на R2, а в A, а в множестве A, верно, что отрезок
[21:55.560 --> 22:08.120]  P1-P2 лежит в A просто как под множество точек. То есть на самом деле вот таково официальное
[22:08.120 --> 22:13.120]  определение выпуклости, которое можно вводить практически там в любых адекватных пространствах,
[22:13.120 --> 22:16.760]  вправивается.
[22:43.120 --> 22:52.120]  Вот, ну значит, тогда, да, ну здесь автоматически, конечно, возникают маленькие приятные свойства.
[22:52.120 --> 23:08.680]  Какие? Например, ну например, мистическое утверждение, если там A1 и A2 выпуклы, то, конечно же,
[23:08.680 --> 23:19.680]  A1 пересеченное со 2 выпукло. Более того, на самом деле я могу пересечь, ну отсюда очевидно,
[23:19.680 --> 23:25.520]  что я могу пересечь 3-4 сколько угодно выпуклых множества, но фишка в том, что я могу на самом
[23:25.520 --> 23:33.640]  деле пересечь любое количество множество, даже несчетное. То есть там можно даже просто
[23:34.120 --> 23:51.560]  такую теорему, то есть пусть, там пусть ИТЬ, да, пусть ИТЬ это набор выпуклых множеств каких-то.
[23:51.560 --> 24:02.880]  Ну вот, тогда пересечение всех этих множеств, то есть пересечение всех А, которые лежат в ИТЬ,
[24:02.880 --> 24:11.000]  выпукло. Выпуклый множество, компактный класт, так? Ну, смотря что такое компактный.
[24:11.000 --> 24:17.920]  Типа, если пересечение, короче, пересечение пусто, только если какой-то префикс пересечения пусто.
[24:17.920 --> 24:23.760]  Ну, короче, если у нас есть последовательство выложенных множеств, и пересечение какого префикса не пусто, то есть...
[24:23.760 --> 24:29.840]  Ой, ну я так не готов комментировать, что я помню, что там 4 эквивалентных определения какие-то были,
[24:29.840 --> 24:37.280]  в разных пространствах. Ну, потом вас это все на фонконе еще ждет, на самом деле. Сразу предупреждаю,
[24:37.280 --> 24:45.360]  поэтому я тут лучше словам типа компактности отношусь очень аккуратно. Ну вот, ну не важно.
[24:45.360 --> 24:51.880]  Так вот, внимание, внимание. То есть да, ну как доказывать это утверждение? Ну, в общем-то из
[24:51.880 --> 24:56.480]  определения легко следует, что если какие-то две точки лежат в пересечении, то эти две точки лежат в
[24:56.480 --> 25:02.440]  каждом из этих ножет, значит, отрезок лежит в каждом из этих ножет, значит, отрезок лежит в пересечении, ура, пересечение выпукло.
[25:02.440 --> 25:14.880]  Так. Ну, прям на хор сразу. Не, ну на хор у нас посложнее чуть-чуть будет. Там конверт с халтриг какой-нибудь там, да.
[25:14.880 --> 25:25.920]  А вот вопрос, а что делать с объединением выпуклых ножет? Да, не поможет. Потому что оказывается,
[25:26.000 --> 25:34.720]  что если вы объедините вот такую параболку, ну можно, да. Ну скажем так, знаете, вот этот
[25:34.720 --> 25:38.520]  пример может быть чуть более показателен. То есть давайте вот такие две параболки объединим,
[25:38.520 --> 25:54.800]  и их объединение очевидно не выпукло. Что? Да. Ну оказывается, если шляпка гриба выпуклая множество,
[25:54.800 --> 26:02.680]  ножка гриба выпуклая множество, их объединение не очень. Да, вот так себе это можно вообразить.
[26:02.680 --> 26:13.400]  Ну как минимум, а, ну как минимум, потому что существуют вот эти вот две точки объединения.
[26:13.400 --> 26:21.560]  Пересечение выпукло, объединение нет. Это вот важный, это важный принцип. Вот, ну здесь действительно
[26:21.560 --> 26:28.920]  можно дальше много действительно вводить. Но давайте начнем такую разминку. Дан многоугольник,
[26:28.920 --> 26:42.720]  скажите, пожалуйста, выпуклый ли он? Да или нет? Ну, относительно каждого ребра. Может считать,
[26:42.720 --> 26:48.960]  что знаки все в определении одинаковые. Так, ну здесь, нет, ну здесь это может быть достаточно опасным,
[26:48.960 --> 26:54.960]  потому что в принципе, да, хочется сказать, что, потому что стандартное определение в школьной
[26:54.960 --> 27:01.400]  геометрии многоугольник выпуклый, если он, если там через каждую сторону можно провести там
[27:01.400 --> 27:14.360]  прямую и окажется, что многоугольник с одной стороны от нее лежит. Нет, это да, ну просто,
[27:14.360 --> 27:18.320]  нет, я просто опасаюсь, что просто проблема будет в том, что звать теперь сести вот из
[27:18.320 --> 27:30.520]  этого определения это доказать, что это верно вообще. Ага, как говорится, осталось только выяснить,
[27:30.520 --> 27:47.200]  каким образом. Да, где было год назад? Выправленно ли это доказывали? Тут? Да. А в этом нет,
[27:47.240 --> 27:54.760]  с предыдущей группой доказывали, это да. Нет, это конечно наглое читерство в своей стороны,
[27:54.760 --> 27:58.160]  да, все, что рассказывал предыдущая группа вы, очевидно, знаете, поэтому это все будет на
[27:58.160 --> 28:04.640]  экзамене, понятно, но мы с вами на этом на лекции время тратить не будем. Поэтому давайте переходим
[28:04.640 --> 28:12.080]  дальше. Итак, с чего начнем? Ну, давайте изучим, например, как строить миностов с помощью там софт
[28:12.080 --> 28:18.160]  хипа или там какие там еще красивые вещи. А, ну, конечно же, как искать кратчайшее расстояние в графизове
[28:18.160 --> 28:23.880]  плюс Е, там, естественно, там продвинутые, там современные алгоритмы поиска потока, там,
[28:23.880 --> 28:32.600]  да, давайте, вот это вот все, а эти все мелочи, в общем-то, это, да, да, да, да, мечта, мечта,
[28:32.600 --> 28:39.680]  а что? Нет, ну, вариант, конечно, да. Да, действительно, все время, действительно, в последнее время ко мне
[28:39.680 --> 29:09.680]  приходят все более и более продвинутые студенты. Нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет, нет,
[29:09.680 --> 29:11.680]  нет, нет, нет, нет, нет, нет.
[29:39.680 --> 29:53.680]  А как же это показать? А на самом деле вот как. Так, давайте ориентируем многоугольник против часовой стрелки.
[29:53.680 --> 30:07.680]  Вот, а мы с вами уже в прошлый раз, кстати, научились это делать. Вот, как ориентируем? Ну вот, то есть просто вычислим площадь и, соответственно, ориентируем так, чтобы она была положительная.
[30:08.680 --> 30:17.680]  Да, ну, про площадь мы в прошлый раз подробно говорили. Вот, и так пусть у нас площадь положительная, то есть обходим многоугольник против часовой стрелки.
[30:17.680 --> 30:24.680]  Итак, вот у нас мы находимся на каком-то ребре. Ну, давайте три точки на одной прямой мы будем ориентировать, идущие подряд.
[30:24.680 --> 30:36.680]  Итак, вот предположим, что у нас обнаружилось следующее, то есть следующее ребро. Утверждение. Ну, как бы мы идем против часовой стрелки, то есть как бы многоугольник остается от нас типа слева.
[30:36.680 --> 30:49.680]  И теперь маленькое утверждение. Тогда утверждается, что следующее ребро обязано поворачиваться строго влево. Почему? А вот почему.
[30:49.680 --> 31:04.680]  Потому что если оно повернется строго вправо, вот как-то так, то тогда можно вот в эпсилонокрестности этой точки, то есть в вершинке, взять тут точку, тут точку и провести между ними отрезочек, которые целиком, кроме концов, в многоугольнике не лежит.
[31:04.680 --> 31:14.680]  Опять пользуемся леммой с прошлого занятия. Какой леммой? Что мы можем найти ушко, в котором нет других. Да, здесь почему я делаю это именно в эпсилонокрестности?
[31:14.680 --> 31:23.680]  Ну, здесь даже не лемма, а просто возьмем такой эпсилонокрестность, в которой никакие другие вершины и отрезки не попадают.
[31:23.680 --> 31:29.680]  Ну, потому что тут же могут там вот многоугольники стеретически куда-то сюда зайти.
[31:29.680 --> 31:32.680]  Но почему такие есть?
[31:32.680 --> 31:37.680]  Потому что у тебя конечные числа отрезков, и для каждого из них расстояние не нулевое.
[31:37.680 --> 31:43.680]  Поэтому давайте возьмем минимальное расстояние, поделим его пополам и скажем, что это эпсилон.
[31:43.680 --> 31:55.680]  Вот. Таким образом получается, что если мы ориентируем многоугольник против часовой стрелки, то необходимым условием является то, что все у нас,
[31:55.680 --> 32:08.680]  что действительно у нас все, то есть каждое следующее ребро относительно предыдущего поворачивается именно влево. Это необходимо.
[32:08.680 --> 32:13.680]  А теперь внимание, вопрос. Достаточно ли?
[32:13.680 --> 32:16.680]  Почему?
[32:16.680 --> 32:21.680]  Вот. А это на самом деле интеллектуальная задача.
[32:21.680 --> 32:24.680]  Ну, давайте все-таки немножко подумаем.
[32:24.680 --> 32:33.680]  Вот, допустим, мы взяли многоугольник, взяли против часовой стрелки, и неожиданно выяснилось, что это вот условие прям для него замкнуто выполняется.
[32:33.680 --> 32:39.680]  Ну, хорошо. Давайте возьмем отрезок две точки и отрезок, который не выполнен.
[32:39.680 --> 32:49.680]  Так, давайте. Вот давайте. Допустим, выяснилось неожиданно, что у нас тут есть две точки на многоугольнике.
[32:49.680 --> 32:57.680]  Ну, вот такие что, если их соединить, то окажется, что этот отрезок не целиком лежит внутри многоугольника.
[32:57.680 --> 33:00.680]  Можно, в принципе, даже так, давай я сразу уточню.
[33:00.680 --> 33:09.680]  Можно взять супремум, просто взять две точки, которые обе лежат на границе, может быть даже в вершине, а все остальные точки этого отрезка в ауте.
[33:09.680 --> 33:12.680]  Логично, да?
[33:12.680 --> 33:17.680]  Нет, вот эти точки могут быть вершинами, могут быть не вершинами, могут на сторонах лежать.
[33:17.680 --> 33:19.680]  Понятно, да?
[33:19.680 --> 33:21.680]  Да, но после этого, кажется, их можно перегнать в вершины.
[33:21.680 --> 33:23.680]  Так, ну да.
[33:23.680 --> 33:25.680]  Просто идя по ребрам вверх.
[33:25.680 --> 33:26.680]  Да.
[33:26.680 --> 33:27.680]  Да, да.
[33:27.680 --> 33:28.680]  Да, совершенно верно.
[33:28.680 --> 33:30.680]  Во-первых, да, стандартный прием в геометрии.
[33:30.680 --> 33:34.680]  Давайте просто эту, например, давайте попробуем пошевелить этот отрезочек.
[33:34.680 --> 33:43.680]  То есть если обе эти точки лежат на ребре, то есть на ребрах, то давайте в какой-нибудь из сторон просто эту точку, это двигать, двигать, двигать.
[33:43.680 --> 33:49.680]  Рано или поздно, то есть рано или поздно произойдет там сенсацион, там одно из сенсационных событий.
[33:49.680 --> 33:55.680]  Либо мы у одного из этих отрезков придем в вершину, либо мы тут еще где-то наткнемся на вершину.
[33:55.680 --> 33:57.680]  Предмет другого рукавича.
[33:58.680 --> 33:59.680]  Ух ты.
[33:59.680 --> 34:00.680]  Не уверен.
[34:00.680 --> 34:01.680]  Думаешь нет?
[34:01.680 --> 34:05.680]  Это прям, это каноничнейшая геометрия.
[34:05.680 --> 34:10.680]  Нет, ну нет, ну нет, ну нет, ну нет, ну нет, ну нет.
[34:10.680 --> 34:15.680]  Нет, ну я действительно уверен, что действительно в топологии, просто действительно без этой логики никуда, естественно.
[34:15.680 --> 34:17.680]  Это правда.
[34:17.680 --> 34:18.680]  Так что да.
[34:18.680 --> 34:23.680]  Но таким образом, значит, мы сначала достигли того, что у нас есть какая-то вершинка.
[34:23.680 --> 34:31.680]  Нет, то есть у нас, то есть теперь получается отрезок у нас соединяет вершинку с чем-то еще.
[34:31.680 --> 34:36.680]  Но это что-то еще вполне может быть и отрезочек.
[34:36.680 --> 34:43.680]  Так, ну теперь идея, что, ну в принципе при желании этот отрезочек можно теперь тоже шевелить, то есть там двигать эту точку вдоль ребра.
[34:43.680 --> 34:46.680]  Правда надо еще правильно выбрать в какую сторону двигать.
[34:46.680 --> 34:48.680]  Не факт.
[34:48.680 --> 34:50.680]  Знаете какая подлянка может быть?
[34:53.680 --> 34:55.680]  Нет.
[34:55.680 --> 35:01.680]  А впрочем, действительно, смотрите какой чит.
[35:01.680 --> 35:06.680]  Да, то есть действительно смотрите какой чит.
[35:06.680 --> 35:07.680]  Самое тупое решение.
[35:07.680 --> 35:11.680]  Продолжаем этот отрезок, обрезанный отрезок, продолжаем вот так вот двигать.
[35:11.680 --> 35:15.680]  Да, ну в общем случае тут конечно что-то посложнее будет.
[35:15.680 --> 35:17.680]  Ну по-моему нет.
[35:17.680 --> 35:19.680]  Вот только одну точку из этих двух.
[35:19.680 --> 35:21.680]  Вот вторую, которая еще не в вершине.
[35:21.680 --> 35:23.680]  А, просто.
[35:23.680 --> 35:24.680]  А, понятно.
[35:24.680 --> 35:26.680]  Так, ну хорошо.
[35:26.680 --> 35:27.680]  Давайте сделаем так.
[35:27.680 --> 35:29.680]  Будем ее, давай, хорошо.
[35:29.680 --> 35:31.680]  Как нам Миша сказал, так делайте.
[35:31.680 --> 35:32.680]  И чего мы достигнем?
[35:32.680 --> 35:33.680]  Вот мы достигнем.
[35:33.680 --> 35:36.680]  За концов мы опять либо точку на стороне встретим.
[35:36.680 --> 35:37.680]  Так.
[35:37.680 --> 35:38.680]  Так.
[35:38.680 --> 35:40.680]  Либо вот туда придем.
[35:40.680 --> 35:42.680]  Вот.
[35:42.680 --> 35:46.680]  Ну да, я согласен, что это, наверное, не супер много дает.
[35:46.680 --> 35:48.680]  Нет, ну на самом деле тут по-разному можно делать.
[35:48.680 --> 35:50.680]  Ну ладно, да, лучше двигать вверх переносом.
[35:50.680 --> 35:52.680]  Да, ну хорошо.
[35:52.680 --> 35:53.680]  Да, тут по-разному можно.
[35:53.680 --> 35:55.680]  Ладно, давайте двигать переносом.
[35:55.680 --> 35:58.680]  То есть параллелизировать мы все в ауте, в ауте, в ауте, в ауте.
[35:58.680 --> 36:03.680]  Если мы случайно в какой-то момент натыкаемся на какую-то третью вершину,
[36:03.680 --> 36:07.680]  то опять же какой-то отрезок отсекаем.
[36:07.680 --> 36:08.680]  Вот.
[36:08.680 --> 36:12.680]  Но заметим, что это будет происходить в конечное число раз.
[36:12.680 --> 36:14.680]  Вот.
[36:14.680 --> 36:16.680]  Ну вот.
[36:16.680 --> 36:19.680]  Но действительно, что может произойти?
[36:19.680 --> 36:24.680]  Ну в идеале, конечно, очень хочется сказать, что кончится это тем,
[36:24.680 --> 36:28.680]  что этот отрезок просто схлопнется в одну вершину.
[36:28.680 --> 36:31.680]  Еще мы действительно заметим, что если схлопнется в вершину,
[36:31.680 --> 36:36.680]  то легко видеть, что в этой вершине условие поворота нарушилось.
[36:39.680 --> 36:41.680]  Нет, даже не наверное, а точно.
[36:41.680 --> 36:47.680]  Потому что относительно этих ребер это все должно происходить справа.
[36:47.680 --> 36:49.680]  Мы же отрезок у нас в ауте находится.
[36:52.680 --> 36:55.680]  То есть это означает, что отрезок устроен как-то вот так и так.
[37:00.680 --> 37:01.680]  Что?
[37:01.680 --> 37:04.680]  Да, совершенно верно.
[37:04.680 --> 37:08.680]  Если мы уперлись действительно в одну вершинку, то конечно,
[37:08.680 --> 37:10.680]  действительно налицо проблемы.
[37:10.680 --> 37:15.680]  Но может возникнуть ситуация теоретическая, что почему не выяснилось,
[37:15.680 --> 37:18.680]  что в какой-то момент этот отрезок просто уйдет на бесконечность.
[37:18.680 --> 37:25.680]  Может действительно выясниться, что они как-то шли, шли, шли, тут шли.
[37:25.680 --> 37:31.680]  И в какой-то момент неожиданно тут оказалось, что мы наткнулись на вершинку.
[37:31.680 --> 37:34.680]  И тут многоугольник дальше идет куда-то вниз.
[37:34.680 --> 37:38.680]  И начиная с этого момента у нас этот лучик торжественно уходит на бесконечность.
[37:38.680 --> 37:40.680]  Когда вниз можно?
[37:40.680 --> 37:42.680]  Перевернем и поменяем порядок.
[37:42.680 --> 37:45.680]  Нет, зачем переворачивать?
[37:45.680 --> 37:46.680]  Все гораздо проще.
[37:46.680 --> 37:50.680]  Мы этот отрезок просто теперь поведем вниз ровно тем же методом.
[37:50.680 --> 37:55.680]  Просто если и там мы уйдем в аут, то тогда у нас получится такая красивая речка,
[37:55.680 --> 37:59.680]  которая разделила многоугольник.
[37:59.680 --> 38:01.680]  Строгость.
[38:01.680 --> 38:03.680]  Вот.
[38:03.680 --> 38:06.680]  Идем в понятие речка.
[38:06.680 --> 38:08.680]  Сформулируем так.
[38:08.680 --> 38:10.680]  Строгость я скажу так.
[38:10.680 --> 38:13.680]  Рассмотрим на каждом отрезке серединку.
[38:13.680 --> 38:16.680]  Эта серединка явно движется относительно непрерывно.
[38:16.680 --> 38:20.680]  Ладно, кроме вот этих точек, где эту проблему мы как-то решим.
[38:20.680 --> 38:25.680]  И тогда у нас, если это правильно рисовать, то получится просто такая линия,
[38:25.680 --> 38:31.680]  просто делящая плоскость на две части, в каждую из которых находятся части многоугольника.
[38:31.680 --> 38:33.680]  Точек, где мы эту проблему как-то решим.
[38:33.680 --> 38:34.680]  Да, да, да.
[38:34.680 --> 38:36.680]  Нет, я не хочу сейчас прям совсем...
[38:36.680 --> 38:39.680]  Если на яйцах они не будут с обеих сторон спрашивать.
[38:39.680 --> 38:41.680]  Нет, ну скажем так.
[38:41.680 --> 38:44.680]  Я могу вас, может быть, попросить какие-то из этих моментов додумать,
[38:44.680 --> 38:49.680]  но думаю, что запиливать прям предельное идеальное доказательство я не буду.
[38:49.680 --> 38:51.680]  Давайте Скопенкова позовем.
[38:51.680 --> 38:53.680]  Ой, если мы будем Скопенкову...
[38:53.680 --> 38:56.680]  Слушайте, я боюсь, я не сдам Скопенкову.
[38:56.680 --> 39:00.680]  Я бы не взялся сдавать это Скопенкову.
[39:00.680 --> 39:06.680]  Потому что, знаете, скажем так, есть одна лаквусовая бумажка, действительно.
[39:06.680 --> 39:07.680]  Просто в одном месте.
[39:07.680 --> 39:09.680]  Чем отличаюсь я от Скопенкова?
[39:09.680 --> 39:10.680]  Вы знаете меры?
[39:10.680 --> 39:12.680]  Нет.
[39:12.680 --> 39:15.680]  Нет, меры я как раз не знаю.
[39:15.680 --> 39:17.680]  Да, меры я как раз не знаю.
[39:17.680 --> 39:19.680]  У меня такого предмета не было.
[39:19.680 --> 39:20.680]  Просто смотрите.
[39:20.680 --> 39:31.680]  На самом деле, терема у любого простого n-угольника сумма углов равна pi умножить на...
[39:31.680 --> 39:32.680]  Сколько там?
[39:32.680 --> 39:34.680]  На n-2.
[39:34.680 --> 39:37.680]  Ну, известная терема, да?
[39:37.680 --> 39:40.680]  Или что то же самое, 180 градусов на n-2.
[39:40.680 --> 39:43.680]  То есть у треугольника 180 градусов сумма углов,
[39:43.680 --> 39:45.680]  у четырехугольника 360 и так далее.
[39:45.680 --> 39:47.680]  Но фишка в другом.
[39:47.680 --> 39:51.680]  Нет, фишка в том, как я люблю это доказывать.
[39:51.680 --> 39:54.680]  Сейчас я расскажу доказательства, которые лично я засчитываю.
[39:54.680 --> 39:56.680]  Скопенков почти, наверное, и нет.
[39:56.680 --> 39:57.680]  От перебушка?
[39:57.680 --> 39:59.680]  Да, еще круче.
[39:59.680 --> 40:02.680]  Значит, рассмотрим многоугольник.
[40:02.680 --> 40:03.680]  Смотрите.
[40:03.680 --> 40:05.680]  Давайте пройдемся по многоугольнику.
[40:05.680 --> 40:09.680]  Ну, например, против часовой стрелки.
[40:09.680 --> 40:12.680]  И при этом меня жутко интересует.
[40:12.680 --> 40:13.680]  Я вот буду...
[40:13.680 --> 40:14.680]  Когда я иду, я иду, иду, иду, иду.
[40:14.680 --> 40:15.680]  Потом прихожу в вершину.
[40:15.680 --> 40:18.680]  Я как бы поворачиваюсь вот на этот вот угол.
[40:18.680 --> 40:21.680]  Там бета 1 я его назову.
[40:21.680 --> 40:24.680]  И иду вот сюда.
[40:24.680 --> 40:28.680]  Потом поворачиваюсь на вот такой угол бета 2 и иду сюда.
[40:28.680 --> 40:30.680]  Понимаете, да?
[40:30.680 --> 40:32.680]  Теперь заметим следующее.
[40:32.680 --> 40:38.680]  Этот угол бывает как положительный, так и отрицательный, что важно.
[40:38.680 --> 40:41.680]  Но если многоугольник не выпукл, этот угол будет отрицательным.
[40:41.680 --> 40:43.680]  Мне это важно.
[40:43.680 --> 40:44.680]  Так вот.
[40:44.680 --> 40:48.680]  Чему равна сумма углов на самом деле многоугольника?
[40:48.680 --> 40:52.680]  Заметим, что каждый угол вот этот альфа 1 обладает таким приятным свойством,
[40:52.680 --> 40:55.680]  что альфа 1 плюс бета 1 равно π.
[40:55.680 --> 40:59.680]  Причем даже если бета бывает отрицательным, но это просто означает,
[40:59.680 --> 41:02.680]  что там вот какая-нибудь вот такая безобразие произошла.
[41:02.680 --> 41:06.680]  Но обратите внимание, здесь тоже тогда получится просто, что...
[41:06.680 --> 41:11.680]  То есть как бы бета 1 оказывается вот таким вот отрицательным на самом деле.
[41:11.680 --> 41:15.680]  И вот альфа 1 вот такой, но сумма их 108 градусов.
[41:15.680 --> 41:18.680]  Видно, да?
[41:18.680 --> 41:20.680]  И тогда смотрите.
[41:20.680 --> 41:25.680]  И тогда получается, что сумма всех углов многоугольника
[41:25.680 --> 41:32.680]  она равна, получается, π на n минус сумма углов бейтого.
[41:32.680 --> 41:34.680]  А теперь визитическое утверждение.
[41:34.680 --> 41:36.680]  Что такое сумма углов бейтого?
[41:37.680 --> 41:41.680]  Насколько я суммарно повернулся, пройдя по всему многоугольнику?
[41:41.680 --> 41:43.680]  Вот насколько я повернулся?
[41:43.680 --> 41:48.680]  Вот просто шел я тут шел, поворачивался, поворачивался, поворачивался, поворачивался там.
[41:48.680 --> 41:50.680]  Вот шел, шел, шел, шел.
[41:50.680 --> 41:52.680]  Шел шел шел, шел шел.
[41:52.680 --> 41:54.680]  Тут еще поворачивался, там вот поворачивался.
[41:54.680 --> 41:57.680]  Спиралька у меня тут была какая-то.
[41:57.680 --> 42:00.680]  Но в итоге пришел я в ту же точку и смотрю туда же.
[42:00.680 --> 42:03.680]  Какой вывод из этого я могу сделать?
[42:03.680 --> 42:10.720]  вывод что сумма бетах ну как минимум делится на 2p правда вот но остается только действительно
[42:10.720 --> 42:16.200]  сделать чуть более аккуратное рассуждение и убедиться в том что на самом деле это сумма
[42:16.200 --> 42:20.440]  углов не просто делится на 2p а если мы шли против часовой стрелки то просто равна 2p
[42:20.440 --> 42:29.520]  а моя но а если подчасовой то минус 2p ну доказательства может быть такое заметим
[42:29.520 --> 42:34.800]  что если мы чуть-чуть пошевелим вершинки многоугольника то очевидно этот угол суммы этих
[42:34.800 --> 42:38.320]  углов никак не поменять она будет как во-первых она будет меняться непрерывно
[42:38.320 --> 42:48.380]  верится даже это меняется непрерывно да а во-вторых ну вот а в тэф так как этот сумма углов
[42:48.380 --> 42:53.160]  очевидно делится на 2p значит она получается меняться не будет позже как бы непрерывности
[42:53.160 --> 42:59.400]  таких квантовых скачков не бывает но после этого остается только любой многоугольник на самом деле
[42:59.400 --> 43:08.120]  довести просто аккуратно до ну иногда просто до состояния треугольника ну можно ну там надуть
[43:08.120 --> 43:14.200]  это там аккуратная такая операция вот нет ну на самом деле там ну там по разному можно делать то
[43:14.200 --> 43:18.880]  есть можно там можно как мы раньше там по индукции доказать там что-нибудь про сумму углов там я
[43:18.880 --> 43:23.640]  добавляю это либо добавляю эффективные ребра либо там отрезать эти уши на самом деле ну и так далее
[43:23.640 --> 43:31.360]  вот то есть на самом деле вот то есть вот примерно такое вот такое доказательство как бы я с
[43:31.360 --> 43:37.160]  удовольствием зачиту да очень удобно да ты вот то есть это вот то есть копенков почти
[43:37.160 --> 43:44.240]  наверное нет конечно такой не зачтет ну как ну знаете ну как бы там уже то есть как-то
[43:44.240 --> 43:51.000]  слишком визуальный какой-то образ вот то есть там по хорошим видим надо там может быть действительно
[43:51.000 --> 43:57.920]  там а что то ли интегралы какие находить то ли что-то еще в этом роде то есть ну вот да вот
[43:57.920 --> 44:03.160]  он потребует что надо вводить какие-то индексы отходы прошу страшные слова сочетать вот ну то
[44:03.160 --> 44:07.600]  есть то есть как бы как по мне для ну то есть как бы как по мне так то есть с одной стороны я
[44:07.600 --> 44:11.640]  крыша сторонник того чтобы все решения надо доказывать но с другой стороны как по мне это
[44:11.640 --> 44:24.120]  доказательство мне кажется достаточно четко но тоже верно да нет согласен да может быть
[44:24.120 --> 44:30.440]  топологии действительно имеет смысл вводить за это бою там в этом в этом смысле больше строгость
[44:30.440 --> 44:40.800]  но впрочем тут я не берусь а причем тут никита андрусов и что
[44:42.000 --> 44:50.480]  понятно нормально вот так же от perceber да но поэтому как поBT prophet да да то есть на самом
[44:50.480 --> 44:55.680]  деле иногда вот такой полез так вот но сад и так и так ну мы тут действительно про вып spouse тоже
[44:55.680 --> 45:02.820]  доказали вроде как и вот то есть здесь так porta что выпукловому угольника действительно есть
[45:02.820 --> 45:11.940]  такое приятное свойство но более того на самом деле но вот ну что тут еще можно вывести хотя
[45:11.940 --> 45:17.940]  ладно это мы позже скажем пока же как бы для чего нам это надо еще допустим что еще можно делать с
[45:17.940 --> 45:25.340]  выпуклым многоугольником ну на самом деле можно заметить маленькую приятную вещь то есть можно
[45:25.340 --> 45:31.620]  ведь что если у нас есть задача там лежит ли точка выпуклым многоугольники то как бы есть у
[45:31.620 --> 45:36.300]  нас этот многоугольник просто лежит в порядке обхода против часовой стрелки то мы эту задачу
[45:36.300 --> 45:44.260]  можем решить уже даже не за линию а за логарифу вот да тут важно как потому что на самом деле
[45:44.260 --> 45:49.260]  часто было тут опять это еще одна задача извыкла все понимают что как-то можно потом когда дело
[45:49.260 --> 45:53.860]  дойдет до кода начинает сказать а ну там понятно надо вот эти вот горизонтальные прямые значит
[45:53.860 --> 45:58.180]  провести там какой-то день поиск за бабахой проверить ли точку лежит внутри трапеции и так
[45:58.180 --> 46:06.660]  далее да вот но тут опять это еще один когда вот как бы слушать когда тут лучше слушать
[46:06.660 --> 46:10.780]  внимательно потому что как бы как бы если вы можете написать так но как бы вы рискуете
[46:10.780 --> 46:27.360]  агрести ну бывает возможно не выпукло вы не смотрел какой-то случай которых выпукло не
[46:27.360 --> 46:35.860]  бывает но на самом деле можно тут найти за логарифом все гораздо проще значит ситуация такая рассмотрим
[46:35.860 --> 46:40.740]  первую попавшую вершину какую-то нулевую вот нулевая первая минус первая и во первых
[46:40.740 --> 46:48.740]  давайте за от единицы проверим лежит ли точка вообще в этом углу как вы это проверим кстати
[46:48.740 --> 47:09.460]  ну по сути да ну на самом деле вот если у нас многоугольник против часовой стрелки то надо
[47:09.460 --> 47:14.260]  просто проверить что вот это на это должно быть больше нуля с векторным произведением конечно и
[47:14.860 --> 47:21.340]  вот это на это должно быть больше нуля то есть легко убедить то是 любая иная комбинация это
[47:21.340 --> 47:28.780]  авт сразу но там бывает еще равенство нулей но как бы тогда можно сказать что здесь это на
[47:28.780 --> 47:35.860]  это должно быть больше либо равно нуля а это надо меньше и мы oli и так хорошо то есть но вот так
[47:35.860 --> 47:42.060]  хорошо вы убедили что то еще лежит в этом углу но это все не значит что она лежит вместе с
[47:42.060 --> 47:47.200]  в другоугольнике, а может так сказать за этой чертой.
[47:47.200 --> 47:52.400]  Тогда идея такая, проведем все вот такие лучи, очевидно
[47:52.400 --> 47:56.120]  точка, то есть как бы удобно, если мы стоим в этой точке,
[47:56.120 --> 47:59.040]  то перед нами получается вот такой вот веер из прямых.
[47:59.040 --> 48:07.160]  Вот, и нам жутко интересно, между какими двумя этими
[48:07.160 --> 48:09.240]  лучами лежит наша точка.
[48:09.240 --> 48:15.020]  Это очень легко найти просто бинарным поиском по ответу.
[48:15.020 --> 48:20.440]  Ну просто там берем очередной луч и говорим так, если у нас
[48:20.440 --> 48:24.020]  векторное произведение это на это меньше нуля, значит двигаем правую границу,
[48:24.020 --> 48:29.020]  а если там оказалось, что это на это больше нуля, значит двигаем левую. Понимаете, да?
[48:29.020 --> 48:34.180]  То есть получается в бинпоиске, то есть в бинпоиске мы там каждую проверку делаем
[48:34.180 --> 48:36.820]  с помощью одного векторного произведения.
[48:36.820 --> 48:44.180]  Итак, в результате мы нашли, между какими двумя лучами лежит наша точка.
[48:44.180 --> 48:49.260]  То есть тогда получается, что у нас между этими двумя лучами есть вот эта вот ребрышка и точка.
[48:49.260 --> 48:52.300]  Теперь остается только проверить, лежит ли точка в треугольнике.
[48:52.300 --> 48:56.860]  Но здесь мы видим, что не надо проверять, прям лежит ли точка полностью,
[48:56.860 --> 49:01.540]  прям полный треугольник проверять, а вместо этого достаточно проверить только одно.
[49:01.780 --> 49:06.260]  Надо проверить, с какой стороны от этого отрезочка, от ориентированного против часовой стрелки,
[49:06.260 --> 49:10.860]  лежит точка справа или слева. То есть опять же векторное произведение вот это на это.
[49:10.860 --> 49:15.780]  Если получится меньше нуля, значит out, если это на это больше нуля, значит in.
[49:15.780 --> 49:22.060]  А если ноль, значит эта точка на этом отрезке просто и лежит, кстати.
[49:22.060 --> 49:25.260]  Можно и даже дополнительно не проверять.
[49:25.260 --> 49:31.340]  Ну вот, в общем-то, получился такой достаточно очень простой метод.
[49:31.340 --> 49:35.420]  Боже вас упаси, тут какие-то горизонтальные прямые рисовать и поиски искать.
[49:35.420 --> 49:39.340]  Надеюсь, этим никто не занимается. Вот, не занимается?
[49:39.340 --> 49:43.580]  Все, кто не пришли будут такие. Ну да.
[49:43.580 --> 49:47.420]  Нет, вот это было страшно, на самом деле, когда на финале,
[49:47.420 --> 49:54.900]  потом на пробном туре дали задачу, пересеките многоугольник и полукруг, найдите площадь.
[49:54.900 --> 49:59.020]  Как бы они из курса знали, что там как-то за линию делается, но выяснилось,
[49:59.020 --> 50:01.700]  что они искренне думали, что надо просто там как бы, ну понятно,
[50:01.700 --> 50:05.340]  напроводим там вот этих прямых и как-нибудь пересечем там круг и трапецию.
[50:05.340 --> 50:11.220]  Вы про кого? Ну, про последних финалистов.
[50:11.220 --> 50:25.300]  Линкет? Вот так, вот, ну вот, так, ну, кстати, об этом, нет, о пересечении.
[50:25.300 --> 50:27.660]  Вот мы с вами в прошлый раз площади всякие искали, да?
[50:27.700 --> 50:30.940]  Так вот, да, вот мы не успели с вами обсудить такую важную задачу.
[50:30.940 --> 50:34.780]  Давайте отвлекемся немного от выпуклости. Вот задача.
[50:34.780 --> 50:41.900]  Дан круг, дан многоугольник. Найдите площадь пересечения.
[50:41.900 --> 50:50.820]  Да, на самом деле абсолютно любой там ограничение там,
[50:50.820 --> 50:54.500]  я не знаю, что угодно, там сто тысяч, может даже миллион на самом деле.
[50:54.540 --> 50:56.780]  Найдите площадь пересечения.
[50:56.780 --> 51:11.740]  Как-нибудь найти точки пересечения. Нет, ну точки пересечения, конечно,
[51:11.740 --> 51:18.220]  круглый многоугольник найти легко. Вот, ну там очень много каких-то вариантов есть.
[51:24.700 --> 51:28.500]  Ой, хотя да, ой, это ж про, а это ж надо отдельно про круги еще говорить.
[51:28.500 --> 51:38.620]  А, ну вот. Ну хотя давайте для начала. А, кстати, действительно, давайте вот, да,
[51:38.620 --> 51:45.700]  для начала решим маленькую техническую задачу. Как пересечь хотя бы круг и прямую.
[51:45.700 --> 51:49.300]  Для начала.
[51:49.300 --> 51:58.660]  Найти точек пересечения. Ну их 0, 1 или 2. Вот давайте все и найдите.
[51:58.660 --> 52:13.860]  Ну, короче, это может быть не супер утимальный алгоритм, но по коду,
[52:13.860 --> 52:18.060]  учитывая все написанное нормально, я просто опускаю периметигуляры в центре напрямую.
[52:18.060 --> 52:27.580]  Так, понятно. Ну, в принципе, да, один из классических методов такой. Ну вот,
[52:27.580 --> 52:33.740]  но как можно, кажется, у меня другой. Значит, смотрите, какой. Как задается прямая?
[52:33.740 --> 52:45.100]  Прямая называется, как всегда. То есть прямая равно, как всегда, p плюс vt. То есть это, в принципе,
[52:45.100 --> 52:48.980]  множество, которое называется прямой, где p – это точка напрямая, v – направляющий вектор, правда?
[52:48.980 --> 52:56.460]  Так, окружность у нас задается как центр и r, правда? То есть, можно сказать, что уравнение,
[52:56.460 --> 53:07.180]  ну, то есть, на самом деле окружность – это у нас такое уравнение вида такие точки p, что, значит,
[53:07.180 --> 53:17.780]  скалярное произведение p – c на p – t, скалярное произведение равно r2. Так, ну, давайте вот это
[53:17.780 --> 53:29.540]  вот подставим сюда. То есть, получится уравнение вида p плюс vt на p плюс vt равно r2. Да,
[53:29.540 --> 53:38.500]  минус t, согласен. Минус t. Да, то есть, если раскрыть это по линейности, то получится
[53:38.500 --> 53:44.860]  квадратное произведение, там, просто квадратное уравнение вида там v на v на t квадрат. Вот это,
[53:44.860 --> 53:49.740]  кстати, заметим, что это, естественно, не ноль, потому что v – не нулевой вектор,
[53:49.740 --> 54:01.660]  да? Вот. Плюс 2 на скалярное произведение p – c и v на t плюс, соответственно, там,
[54:01.660 --> 54:07.660]  pc – pc минус r2 равно нулю. И все, остается только теперь решить квадратное уравнение,
[54:07.660 --> 54:13.020]  причем еще и с формулой половинного дискриминанта. Ну, вот это вот, ну, знаете эту классику, да,
[54:13.020 --> 54:24.500]  там, понятно, d на 4 равно вот это вот там, там, p – cv в квадрате минус там v на v. Ну, да. Нет,
[54:24.500 --> 54:28.540]  ну почему? Можно пользоваться, нет, можно пользоваться обычной формулой, просто тут
[54:28.540 --> 54:36.980]  четверки лишние будут. Ну, вот, но как бы нет. Вот. То есть, это вот вы пишете, а дальше пишем,
[54:36.980 --> 54:46.140]  что t1,2 на самом деле равно получается минус там p – cv плюс-минус корень из этого дискриминанта
[54:46.140 --> 55:08.540]  поделить на там vv. Ну, там. Нет, ну там, скажем так, тебе придется, ты там строишь
[55:08.540 --> 55:13.860]  перпетикулярий и пересекаешь прямые. Там, видимо, тебе все равно, в то ли какое-то уравнение придется
[55:13.860 --> 55:21.660]  решить. Да, но, правда, переченья прямых, да, по моей философии пишется ровно так же,
[55:21.660 --> 55:33.260]  как мы помним, да. Да, ну вот, ну, ну, тут да. Ну, не знаю, нет, а по мне наоборот, знаете,
[55:33.260 --> 55:38.060]  что просто в геометрии особая подлость бывает, что надо рассматривать случаи. Вот. А здесь, как бы,
[55:38.060 --> 55:42.100]  вот, когда вы пишете такое явное уравнение, то есть, вот этот метод хорош тем, что случаев
[55:42.100 --> 55:49.380]  никаких нет. Точнее, случаи, на самом деле, просто полностью описываются просто случаями в
[55:49.380 --> 55:56.260]  квадратном уравнении. То есть дискриминант меньше 0, значит, пересечения нет, дискриминант равно 0,
[55:56.260 --> 56:02.260]  значит, решение ровно 1, дискриминант больше 0, значит, решение 2, и вот они. Вот в пересечении
[56:02.260 --> 56:06.820]  прямых, кстати, тоже это было хорошо, потому что мы там на раз определяем, то есть, действительно,
[56:06.820 --> 56:12.060]  то есть, уравнение там, если коэффициент t равен 0, значит, прямые параллельные или совпадают.
[56:12.060 --> 56:17.340]  И это было прям вот в точности. То есть, не случайно мы там делим именно на векторное
[56:17.340 --> 56:24.500]  произведение направляющих векторов, прямых оказывалось. Ну, я боюсь без этого никак.
[56:24.500 --> 56:34.820]  Да, боюсь, да, без этого, без этого боюсь просто никак. Но решение по-любому, тут я боюсь просто
[56:34.820 --> 56:39.620]  решение не целочисленное и не рационально числами. То есть, без вариантов. То есть,
[56:39.620 --> 56:44.900]  где-то выплывет. То есть, там, конечно, есть всякие более приятные вещи. Оказывается,
[56:44.900 --> 56:50.860]  что отразить точку относительно прямой, кстати, оказывается, можно вполне себе в целых числах.
[56:50.860 --> 57:00.220]  Ладно, в рациональных. Вот, там, да, то есть, там, если аккуратно расписать формулу,
[57:00.220 --> 57:05.220]  то выяснится, что там, действительно, корнемодическим образом убиваются. Но не буду
[57:05.220 --> 57:10.300]  сейчас это делать, оставим в качестве упражнения. Вот. А чем еще, знаете, чем еще приятен этот
[57:10.300 --> 57:15.140]  способ? На самом деле, для нас он будет очень полезен в нашей задаче. Почему? Значит, еще
[57:15.140 --> 57:20.020]  неожиданное у него преимущество будет заключаться в том, что если вы обходите многоугольник, ну,
[57:20.020 --> 57:28.540]  скажем, против часовой стрелки, хотя по барабану, по какой там на самом деле, ну, как-нибудь вот так,
[57:28.540 --> 57:34.300]  да, то удобство окажется в том, что когда вы будете искать точки пересечения, вы их сможете найти и
[57:34.300 --> 57:39.820]  записывать ровно в том порядке, в котором они вам встретились. То есть, если вы вот идете, скажем,
[57:39.820 --> 57:44.460]  вот против часовой стрелки, то есть, в эту сторону, то вы, как бы, уже взяв сначала меньше корень,
[57:44.460 --> 57:50.060]  потом больше, как раз увидите сначала вот эту точку, а потом вот эту. Но вам еще, да, останется
[57:50.060 --> 57:54.460]  только проверить, что вы пересекаете не прямую, а отрезок, но это совсем легко, потому что тогда
[57:54.460 --> 58:01.220]  окажется, что т-шка, просто надо проверить, эта т должна лежать на отрезке от нуля до единицы. Вот,
[58:01.420 --> 58:06.340]  еще и такое дополнительное. То есть, дополнительное приятное удобство у такого метода есть.
[58:09.640 --> 58:15.220]  До единицы. Потому что, потому что в качестве П вы возьмете вот эту точку, а в качестве В
[58:15.220 --> 58:22.900]  вот весь вот этот вектор, поэтому получается. Поэтому получится прям до единицы. То есть,
[58:22.900 --> 58:29.660]  очень удобно. Вот. То есть, более того, то есть, в принципе, получается, давайте будем считать,
[58:29.660 --> 58:36.300]  что это тоже вершина многоугольника. То есть как бы это типа Маша Трейкурова. Так, кто такая Маша
[58:36.300 --> 58:41.340]  Гера Трейкурова? Это как внимательный зрителю, как внимательный читатель уже понял, это есть героиня
[58:41.340 --> 58:51.980]  нашей повести. И не надо мне рассказывать, что вы не читали Дубровского. Да ладно, это предшкольная
[58:51.980 --> 59:07.140]  программа. Это школьная программа шестого класса. Ну вот там вот. О господи. Да-да-да-да-да. А если
[59:07.140 --> 59:16.420]  Владимир Макбет, то только Мценского уезда. Так что ли. Нет, странно, Дубровский там достаточно
[59:16.420 --> 59:29.340]  трогательная история, как-то. Ну как по мнению, не знаю. Чего? Ну да, хотя давайте вспоминать, что
[59:29.340 --> 59:35.500]  да, что присредило в мире, когда вы были в шестом классе. Так сколько это было 8 лет назад? Питон 3.7,
[59:35.500 --> 59:44.340]  по-моему, еще не вышел. А, но да, зато отгрымел Олимпиадов в Сочи. Хотя ладно, в 2015 году вроде
[59:44.340 --> 59:51.460]  такого интересного уже ничего не было. Так вот, смотрите, какая у меня неожиданная идея возникает.
[59:51.460 --> 59:56.220]  Как мы ищем вообще площадь многоугольника? Ну площадь многоугольника мы ищем так. Мы
[59:56.220 --> 01:00:03.140]  становимся в какую-то точку, то есть как бы потом берем какую-нибудь козу, ставим ее на многоугольник,
[01:00:03.140 --> 01:00:08.780]  там привязываем ее, и коза начинает обходить многоугольник, а мы смотрим, какую площадь мы
[01:00:08.780 --> 01:00:14.500]  замощаем, правда? При этом, если мы поворачиваем, если коза нас поворачивает против всего стрелки,
[01:00:14.500 --> 01:00:23.580]  то заметаемую вот эту вот площадь мы считаем со знаком плюс, а так со знаком минус. Да,
[01:00:23.580 --> 01:00:32.460]  то есть площадь мы, напоминаю, по прошлому разу ищем ровно так. Так вот, как искать площадь
[01:00:32.460 --> 01:00:36.740]  переченья круга и многоугольника. Так вот, неожиданный чит. Делаем абсолютно то же самое,
[01:00:36.740 --> 01:00:46.900]  но мы становимся в центре круга и замощаем мы при этом именно, то есть когда мы тут проходим,
[01:00:46.900 --> 01:00:54.620]  то мы замощаем не весь треугольник, а пересечение этого треугольника и круга. И это, оказывается,
[01:00:54.620 --> 01:00:58.940]  несложно. Ну, во-первых, потому что заметим, что у нас любой отрезок, либо такой, теперь,
[01:00:58.940 --> 01:01:06.140]  когда мы добавили точки переченья, он либо целиком лежит внутри круга, либо целиком лежит вне.
[01:01:06.140 --> 01:01:13.180]  Удобно, да? Причем, кстати, очень легко проверять. Вообще, как проверить, кстати,
[01:01:13.180 --> 01:01:22.380]  этот отрезок лежит внутри или вовне? О боже. Ну, можно. Я проверял по-другому. Я просто брал
[01:01:22.380 --> 01:01:31.220]  середину отрезка и проверял расстояние до нее. Ну, расстояние до середины отрезка или
[01:01:31.220 --> 01:01:42.020]  расстояние до отрезка? Расстояние до отрезка это там что-то сложное какие-то. Нет. Да, так что
[01:01:42.020 --> 01:01:46.300]  немножко другое. Вот, то есть надо просто, ну, то есть, по сути, надо взять середину отрезка и
[01:01:46.300 --> 01:01:50.980]  проверить, лежит ли она внутри круга, да или нет. Так вот, но идея очень простая. Оказывается,
[01:01:50.980 --> 01:01:55.260]  что если отрезок лежит внутри, то надо к ответу прибавить просто то же, что и раньше, то есть
[01:01:55.260 --> 01:02:01.500]  векторные произведения вот этого на этого. Ну, там пополам, конечно. А можно и пополам. А что делать,
[01:02:01.500 --> 01:02:06.340]  если отрезок лежит вне? Ну, тогда надо просто в явном виде найти вот этот ориентированный угол
[01:02:06.340 --> 01:02:13.100]  с помощью функции атан-2 и прибавить к ответу не треугольник, а площадь вот этого сектора. А
[01:02:13.100 --> 01:02:35.020]  чего у нас равна площадь сектора круга с радиусом r углом альфа? Конечно, альфа пополам. Ну,
[01:02:35.020 --> 01:02:40.780]  потому что если бы альфа была, ну, потому что явно этот сектор явно пропорционален углу, а если
[01:02:40.780 --> 01:02:48.220]  угол 2 пи, то там площадь круга, как известно, пи r квадрат. Поэтому получается 1 2 альфа r квадрат.
[01:02:48.220 --> 01:03:06.060]  Вот пи r квадрат. Ну, потому что пи – это половина полного угла. Ой-ой-ой-ой. Слушай,
[01:03:06.060 --> 01:03:10.980]  ты это осторожно, потому что я сейчас расскажу еще одну веселую байку. Это называется, да,
[01:03:10.980 --> 01:03:21.260]  как получить за презентацию по-английскому чуть ниже баллов, чем могло бы быть. Вот. Нет,
[01:03:21.260 --> 01:03:26.620]  не-не-не, на самом деле там, нет, там просто в агире. Ну, нет, у меня просто было такое,
[01:03:26.620 --> 01:03:32.100]  что надо было сделать презентацию. Я, говорите, нашел в интернете, сделал доклад на одиозную тему,
[01:03:32.100 --> 01:03:43.340]  там называется Pi is wrong. По-английски пи. На полном серьезе существует такое полушуточное
[01:03:43.340 --> 01:03:48.660]  движение, можете потом погуглить, реально чистая правда, которое говорит о том, что пи введено
[01:03:48.660 --> 01:03:56.540]  неправильно. Ну, потому что давайте подумаем, что такое пи? Пи – это отношение, ну, по официальному
[01:03:56.540 --> 01:04:03.540]  определению, число пи – это отношение длины окружности к ее диаметру. Внимание, вопрос,
[01:04:03.540 --> 01:04:10.260]  какого, извините, а почему диаметра? У нас круг вообще чем задается, диаметром или радиусом?
[01:04:10.260 --> 01:04:17.180]  Наверное, естественно, задавать радиусом. Поэтому вместо пи надо вводить, логичнее было бы ввести
[01:04:17.180 --> 01:04:25.340]  константу tau, которая равно длина окружности делить на радиус. Нет, казалось бы, как, ну,
[01:04:25.340 --> 01:04:31.100]  понятно, идея на разнице никакой, то есть точность лишней двойки. Но дальше вычисляется,
[01:04:31.100 --> 01:04:36.660]  просто выдается огромное количество различных формул, в котором почему-то рядом с пи неизбежно
[01:04:36.660 --> 01:04:43.100]  есть двойка. То есть, скажем, формуле Сирлинга, например, там в корне 2 pi находится, или там полный
[01:04:43.100 --> 01:04:48.300]  угол у нас, например, 2 pi, а не вот какая-нибудь константа, или там еще, то есть там дальше прям
[01:04:48.300 --> 01:04:53.460]  целый список, и везде эти двойки. То есть, сколько вот этой вот краски от принтера можно было
[01:04:53.460 --> 01:05:01.300]  сэкономить. Да, там реально такое кубик приводится. Вот, почему заняться нечем. Нет, на самом деле,
[01:05:01.300 --> 01:05:10.540]  нет, тут просто... Нет, по-разному. То есть, более того, я, главное, аккуратно делал, то есть,
[01:05:10.540 --> 01:05:14.220]  как положено, презентация должна быть из трех частей. Так вот, в третьей части у меня
[01:05:14.220 --> 01:05:19.060]  рассматривается. Вот есть такая, казалось бы, единственное исключение, где 2 pi нет. Это как
[01:05:19.060 --> 01:05:28.420]  раз формула площади круга. 1 pi². Ну вот, там 1 pi². Но на самом деле, как я просто, да, вот это
[01:05:28.420 --> 01:05:33.780]  действительно, видимо, совсем добивает это, потому что я там в третьей части. А давайте докажем,
[01:05:33.780 --> 01:05:41.060]  почему там площадь круга 1 pi². Не, не волнуйтесь, ничего сложного не будет. Смотрите, рассмотрим круг.
[01:05:41.060 --> 01:05:53.180]  Ну, давайте так. Что такое вообще длина окружности? Ну, на самом деле, ее можно рассмотреть так. Давайте
[01:05:53.180 --> 01:06:00.020]  рассмотрим какие-нибудь описанные вокруг нее многоугольники и скажем что-то типа, что... Нет,
[01:06:00.020 --> 01:06:11.780]  ну понятно, строгость я понимаю, но тем не менее. Иногда бывает. Ну, смотрите, ну просто идея такая,
[01:06:11.780 --> 01:06:17.060]  видите, вот есть такой многоугольник. Но давайте подумать, чему равна, если у нас есть описанный
[01:06:17.060 --> 01:06:23.580]  вокруг окружности многоугольник, чему равна его площадь? Ну, заметим, что она равна сумме площадей
[01:06:23.580 --> 01:06:30.940]  вот этих треугольников и у каждого из этих многоугольников высота равна ровно радиус,
[01:06:30.940 --> 01:06:40.140]  правда? Поэтому площадь треугольника равна 1 2 периметр многоугольника на r. Логично, да?
[01:06:40.140 --> 01:06:50.340]  Чего? Какой периметр? Периметр вот этого многоугольника. Утверждение. Да, периметр,
[01:06:50.340 --> 01:06:58.140]  сумма длин сторон, да? Так вот, давайте, ну вот, то есть можно в принципе, то есть теперь давайте
[01:06:58.140 --> 01:07:04.660]  устремим количество сторон бесконечности, и тогда p будет стремиться к длине окружности. И тогда
[01:07:04.660 --> 01:07:12.540]  получится, что площадь окружности равна длину этой окружности, длина этой окружности у нас равна
[01:07:12.540 --> 01:07:23.460]  чему? Там в идеале tau на радиус. И r2. То есть по идее, на самом деле, вот тут 1 2 была бы осмыслена,
[01:07:23.460 --> 01:07:28.740]  и она бы символизировала, что окружность это такой предельный многоугольник, у которого площадь
[01:07:28.740 --> 01:07:38.500]  ровно такая была бы эта связь. А тут она упущена, на самом деле. То есть тут она как раз осмысленна,
[01:07:38.500 --> 01:07:43.300]  то есть на самом деле 1 2 tau в квадрат была бы формула более красивой и показательной, на самом
[01:07:43.300 --> 01:07:48.620]  деле. Особенно если учесть, что площадь треугольника отчасти из того, что у нас площадь треугольника 1 2.
[01:07:48.620 --> 01:08:04.940]  Так что вот такое. Единственная проблема, что такое решение может не уложиться в критерии. Я же напоминаю,
[01:08:04.940 --> 01:08:10.300]  я это в презентации по-английски рассказывал. То есть преподавательство честно сказал,
[01:08:10.300 --> 01:08:17.100]  что я ничего не поняла. По формальным критериям там какие-то 16 из 20 набралось,
[01:08:17.100 --> 01:08:20.860]  но как бы по содержательной части она просто там просто честно сказал, я это оценить не могу.
[01:08:20.860 --> 01:08:30.500]  Нет, ну я не знаю там как бы вопрос. Ну там сложно сказать, хотя нет, но я полагаю,
[01:08:30.500 --> 01:08:34.700]  что как бы ладно, если она допустим гуманитарий, но вместе там вроде тоже сидел еще 10 физтехов,
[01:08:34.700 --> 01:08:39.580]  которые по идее вроде там этот уровень школьной геометрии вроде тянуть должны. То есть заметьте,
[01:08:39.580 --> 01:08:43.100]  то есть я в принципе это мог там каким-нибудь там от школьников из 8 класса рассказать спокойно.
[01:08:43.100 --> 01:08:54.500]  Нет, ну просто понятно, что учитель английского вряд ли будет называться физтеховским образованием
[01:08:54.500 --> 01:09:00.340]  или техническим. Ну собственно ладно, это на самом деле не принципиально. То есть тут более
[01:09:00.340 --> 01:09:04.100]  интересно, что движение такое есть, то есть вы там если погуглите там Pi is wrong, то можно найти
[01:09:04.100 --> 01:09:10.140]  не просто презентацию, а даже просто целую лекцию. И там человек будет даже агитируется,
[01:09:10.140 --> 01:09:14.380]  что день Pi на самом деле 14 марта праздновать не надо, а на самом деле надо праздновать день
[01:09:14.380 --> 01:09:21.260]  Tao 28 июня. Соответственно, да, то есть послушайте, там очень интересная лекция, то есть там еще
[01:09:21.260 --> 01:09:28.140]  более подробно на самом деле это все расскажут, но понятно, что это конечно юмор, но в каждой шутке
[01:09:28.140 --> 01:09:35.460]  есть доля правды. То есть доля правды, которая здесь подается именно в том, что это о роли не совсем
[01:09:35.460 --> 01:09:41.500]  четко введенного определения. То есть да, понятно, что мы уже конечно из истории человечества уже
[01:09:41.500 --> 01:09:46.100]  число Pi не выпилим, конечно. То есть это конечно прям очень жесткое решение должно быть, чтобы
[01:09:46.100 --> 01:09:50.900]  там весь мир собрался и принял жесткое волевое решение, что забываем о Константе Pi и теперь
[01:09:50.900 --> 01:09:56.420]  разговариваем только на языке Tao. Да, это невозможно, то есть думается да невозможно, да и в общем-то не
[01:09:56.420 --> 01:10:01.460]  особо осмысленно, там просто может быть не рентабельно. Но на самом деле на будущее может и
[01:10:01.700 --> 01:10:07.580]  стоит задумываться, вообще как правильно вводить определение, чтобы было максимально красиво и
[01:10:07.580 --> 01:10:14.820]  показательно. То есть на самом деле тут вот такие решения. Ну вот, ну а если вы пересекаете там
[01:10:14.820 --> 01:10:19.420]  круг и многоугольник, то на самом деле есть вот такой простой метод и боже вас упаси делать это
[01:10:19.420 --> 01:10:22.140]  каким-то вертикальным сканлайдом и пересекать круг и трапецию.
[01:10:22.140 --> 01:10:40.020]  Так что вот такая красота очень прям рекомендую. Вот так что пересекайте круг и многоугольник,
[01:10:40.020 --> 01:10:46.140]  пожалуйста, просто быстренько пишите это и прям вот ждет вас очень быстрое счастье. Вот геометрия
[01:10:46.140 --> 01:10:49.820]  вещь такая, есть там куча вещей, которые если вы знаете как правильно делать, то вас ждет
[01:10:49.820 --> 01:10:55.420]  неожиданное счастье. Но геометрия в общем об этом. Тут как нигде в олимпиадном программире вещи
[01:10:55.420 --> 01:11:00.340]  о профессионализме, то есть о том, что многие вещи надо просто знать как правильно писать.
[01:11:00.340 --> 01:11:05.900]  Вот и чем больше вы таких вещей оптимально знаете, тем как бы больше у вас есть преимущество перед
[01:11:05.900 --> 01:11:11.180]  теми, кто их не знает и будет там в каждом из десяти мест программы там писать какой-то геморрой.
[01:11:11.180 --> 01:11:17.500]  Вот, значит это пересечение. Да, но если уж что-то об этом говорить, что еще можно сказать про
[01:11:17.500 --> 01:11:26.300]  окружности. Но надо, конечно, обсудить как пересекать две окружности. Ну нет, ну почему,
[01:11:26.300 --> 01:11:33.640]  блин. Ну правда, с таким методом, конечно, пересекать его не получится. Нет, хотя можно,
[01:11:33.640 --> 01:11:44.420]  конечно, попытаться. Радиальная ось это что? Что это такое?
[01:11:44.420 --> 01:11:54.060]  Это если соединить их в центры и в середину перпетикуляра. И что? И что с ним надо делать?
[01:11:54.060 --> 01:12:04.180]  Нет, это прямая, которая проходит через точки пересечения окружности. Только там не середина
[01:12:04.180 --> 01:12:13.860]  перпетикуляра. А, ну можно. Нет, ну давайте так. Ну да, можно, конечно, сказать, что нарисовать
[01:12:13.860 --> 01:12:21.540]  два уравнения вида там х-х0 в квадрате плюс игрок минус 0 в квадрате там равно r в квадрате.
[01:12:21.540 --> 01:12:24.740]  Если взять такие два уравнений, вычислить заново другой, то получится уравнение прямой. Мы
[01:12:24.740 --> 01:12:31.820]  свели задачу пересечения окружности прямой, правда заданной не двумя точками, а уравнением. Вот.
[01:12:31.820 --> 01:12:37.940]  Ну, честно скажу, да. Ну, на самом деле, а что будет, если мы применим вот этот метод? Ну,
[01:12:37.940 --> 01:12:45.460]  вторая окружность вот, допустим, записывается вот так. А как записывается первая? Ну, первая
[01:12:45.460 --> 01:12:52.980]  записывается каким-то, первая записывается каким-то мистическим уравнением в духе,
[01:12:52.980 --> 01:13:05.780]  да, она записывается просто уравнением вида там с0 плюс, значит, там, допустим,
[01:13:05.780 --> 01:13:15.860]  от альфа на v0, где альфа, значит, там, допустим, ну давайте просто r и что это? А что такое а от альфы?
[01:13:15.860 --> 01:13:20.980]  Это просто матрица поворота соответствующего вектора. Ладно, тут не v0, а тут, конечно,
[01:13:20.980 --> 01:13:35.420]  какой-нибудь вектор, вот этот вот, r0,0. Логично, да? Так, ну а теперь давайте думать. Подставим
[01:13:35.420 --> 01:13:45.220]  его вот сюда, да, то есть у нас получится, значит, с0 плюс а от альфа на, значит, r0,0,
[01:13:45.220 --> 01:13:58.140]  значит, минус c1, так сказать, в скалярном квадрате равно r1 квадрат. Так, ну что у нас получится?
[01:13:58.140 --> 01:14:07.420]  Так, ну, видимо, в силу там всех линейностей получится у нас что? Значит, там что-то типа
[01:14:07.420 --> 01:14:21.820]  а от альфы там в квадрате на r0,0, да, или нет? Так, давайте так. К чему равно а от альфы на r0,0,
[01:14:21.820 --> 01:14:27.420]  запятая а от альфы на r0,0? Так, чему это равно?
[01:14:27.420 --> 01:14:51.220]  Ну, внутри будет а на транспонировано. Ну, кажется, что это должно быть что-то очень такое. Конечно.
[01:14:51.220 --> 01:15:03.820]  Мы домножаем вектор на сам себя. И длина его не поменялась. Ну, это же как бы мы ж по определению
[01:15:03.820 --> 01:15:10.420]  говорим, что вот это вот, это вектор r0,0, повернутый на угол альфа. Вот. Так что тут получается,
[01:15:11.020 --> 01:15:23.460]  получается так. Значит, r0 квадрат плюс два скалярных произведения а от альфа на r0,0, запятая c0-c1
[01:15:23.460 --> 01:15:35.420]  плюс c0-c1 в квадрате минус r1 в квадрате равно нулю. Ух ты, уравнение даже похоже на линейное.
[01:15:35.420 --> 01:15:44.420]  Так. Осталось только выяснить действительно, как тут вот эту альфа по этому уравнению найти.
[01:15:44.420 --> 01:15:57.820]  Да, ну тут понятно, можно там где-то на r0 поделить. Так что соответственно, да.
[01:15:57.820 --> 01:16:08.540]  Вот. Поэтому слушайте другой метод. Вот мы говорим о том, что ладно, такой метод действительно вызывает
[01:16:08.540 --> 01:16:14.380]  какие-то проблемы. Хотя может быть, хотя может быть его довести можно. Но можно как бы свести
[01:16:14.380 --> 01:16:20.420]  задачу к пересечению окружности прямой, причем прямую задавать двумя точками. Как это сделать?
[01:16:20.420 --> 01:16:29.860]  Очевидно, надо применить инверсию. Да, что такое инверсия? Да, это такое мистическое
[01:16:29.860 --> 01:16:34.980]  прообразование плоскости, которое перероняет некоторые окружности не только в окружности,
[01:16:34.980 --> 01:16:48.660]  но и в прямые. Так, что такое инверсия, вы не знаете? Ну вот. Ну ладно, ну вот. Нет, ну там
[01:16:48.860 --> 01:16:53.700]  обычно инверсия это преобразование. Ну там инверсия, например, в точке 0,0 это преобразование
[01:16:53.700 --> 01:17:00.020]  вида, что какое-нибудь комплексное число z там переходит в какой-нибудь там, ну там,
[01:17:00.020 --> 01:17:07.220]  комплексный один делит на z. Да. Ну почему сопряженное? Ну идея в том, что если у тебя была
[01:17:07.220 --> 01:17:16.140]  тут точка на расстоянии r, то оно переходит в точку на расстоянии 1 делит на r. Это инверсия в
[01:17:16.140 --> 01:17:21.700]  точке 0,0. Так вот, у этой инверсии, не будем доказывать, есть мистическое свойство. Что если
[01:17:21.700 --> 01:17:26.820]  вы делаете инверсии с точкой 0,0, то оказывается следующее, что все окружности, проходящие через
[01:17:26.820 --> 01:17:34.900]  точку 0,0, превращаются в прямые. Ну вот. А все прямые, не проходящие через точку 0,0,
[01:17:34.900 --> 01:17:40.860]  превращаются наоборот в окружности, проходящие через 0,0. Да, вот такая магия,
[01:17:40.860 --> 01:17:49.980]  такая математическая магия есть. Вот. Ну а если окружности не проходят через точку или там нот,
[01:17:49.980 --> 01:17:54.100]  то они просто там в другие окружности превращаются. То есть там получается такая красивая идея,
[01:17:54.100 --> 01:18:02.180]  что прямая это такая предельная окружность. Вот. Ну просто этим можно воспользоваться там,
[01:18:02.180 --> 01:18:06.420]  то есть на самом деле просто применив инверсию, то есть в точке, в одной из точек,
[01:18:06.420 --> 01:18:10.980]  лежащих на окружности. Правда, желательно это сделать так, чтобы эта точка не лежала на
[01:18:10.980 --> 01:18:17.660]  второй окружности. Поэтому там какие-то случаи придется рассматривать. Но тут практически везде
[01:18:17.660 --> 01:18:21.460]  придется, к сожалению, в пересечении окружности, эта меркская задача, там придется в любом
[01:18:21.460 --> 01:18:27.220]  решении и случае рассматривать. Потому что, честно скажу, вот. То есть я говорю, какие-то такие идеи,
[01:18:27.220 --> 01:18:33.460]  потому что на самом деле я, естественно, не пишу не так-не так. Ну и, как ты сказал, я тоже не пишу.
[01:18:33.460 --> 01:19:01.860]  Саратом, это саратом, господа. Вот. Хотя странно, да. И так, значит, идея на самом деле очень
[01:19:01.860 --> 01:19:13.820]  простая. Если я возьму, допустим, у меня есть два центра, там C0, C1 и радиус R1, R0, R1, то что такое
[01:19:13.820 --> 01:19:19.180]  точка пересечения окружностей этих окружностей? Это, на самом деле, третья вершина вот такого
[01:19:19.180 --> 01:19:29.140]  треугольника со сторонами R0, R1 и вот этот C0, C1. Правда? То есть мы должны найти какую-то,
[01:19:29.140 --> 01:19:36.500]  что такое точка пересечения окружностей радиуса R0 с центром C0 и радиуса R1 с точкой C1? Это такая
[01:19:36.500 --> 01:19:42.820]  точка, у которой расстояние до C0, R0, расстояние до C1, R1. То есть они обнаружат вот такой треугольник,
[01:19:42.820 --> 01:19:58.420]  возможно, вырожденный. Вот. То есть, в принципе, можно, но вот. Вот. Ну, а первых, но вот здесь вот
[01:19:58.420 --> 01:20:01.860]  возникает вопрос. Действительно, существует ли такой треугольник? Ну, для того, чтобы проверить,
[01:20:01.860 --> 01:20:07.740]  существует ли такой треугольник, вам придется проверить, что R0, R1 больше хотя бы либо равно,
[01:20:07.740 --> 01:20:17.380]  чем расстояние C0, C1, а также R0 должно быть, R0 плюс модуль C0, C1 должно быть больше либо равно R1,
[01:20:17.380 --> 01:20:23.700]  и R1 должен быть плюс модуль C0, C1, то есть больше либо равно R1. И все эти условия надо проверить,
[01:20:23.700 --> 01:20:30.220]  потому что нарушению каждого из этих условий соответствует конкретная картинка. Вот,
[01:20:30.220 --> 01:20:34.740]  например, если вот это условие неверно, то это означает, что окружности просто лежат вне друг
[01:20:34.740 --> 01:20:40.700]  друга. А если вот неверно, скажем, вот это условие, это означает, что на самом деле окружность
[01:20:40.700 --> 01:20:50.780]  с радиусом R0 просто лежит целиком внутри R0. Да. Причем более того, когда в этих условиях возникает
[01:20:50.780 --> 01:20:56.140]  равенство, то на самом деле это означает, что у нас тут есть внутренние касания. Видите, у
[01:20:56.140 --> 01:21:00.540]  окружности касания бывают как внешние, так и внутренние. Но первое, что мы делаем, то есть,
[01:21:00.980 --> 01:21:05.580]  проверяем эти условия. То есть, если они строго, то есть, если какой из этих условий строго не
[01:21:05.580 --> 01:21:10.860]  выполняется, то значит, вы просто сразу будете, что точек пересечения нет, с вами были, подписывайтесь,
[01:21:10.860 --> 01:21:18.140]  до свидания. Ну или там, давайте другой тест, если задача мульти-тест. Вот. А в любом ином случае
[01:21:18.140 --> 01:21:24.140]  треугольник, хоть и вырожденный, но существует. А что это означает? Означает это следующее,
[01:21:24.140 --> 01:21:30.860]  что мы можем найти вот этот вот угол альфа. Ну таких треугольников, очевидно, два симметричных,
[01:21:30.860 --> 01:21:42.620]  но вот угол вот этот альфа можно найти. Каким образом? Можем найти его... Нет. Можем. Давайте,
[01:21:42.620 --> 01:21:46.620]  для этого надо просто вспомнить, что вы когда-то были восьмиклассниками. Да, в восьмом классе у
[01:21:46.620 --> 01:21:57.500]  нас есть такая штука, как Теремокосинусов. Да, у кого-то в восьмом была. Но нет, ребят,
[01:21:57.500 --> 01:22:02.340]  знаете, есть такая школа, Восковская средняя специальная музыкальная школа имени Гнесиных.
[01:22:02.340 --> 01:22:08.660]  В ней учат на профессиональных пианистов. Так вот, на экзамене в девятом классе по математике
[01:22:08.660 --> 01:22:18.580]  вопрос такой Теремокосинусов там был. А как вы думаете, сильная ли там математика? Нет, поверьте,
[01:22:22.580 --> 01:22:28.340]  там математика была достаточно слабая. Ну и там просто не особо была слабая. В чем специфика такой
[01:22:28.340 --> 01:22:32.580]  школы? Школа рассчитывает на то, что все дети учатся на профессиональных музыкантов. То есть это
[01:22:32.580 --> 01:22:36.500]  означает, что основная работа у них начнется после школы, когда они придут домой, пообедают,
[01:22:36.580 --> 01:22:42.940]  сядут за инструмент и, собственно, реально начнут работать. Поэтому в школе там особо не грузили.
[01:22:42.940 --> 01:22:47.780]  Ну и тем более понятно, что там не будут предполагать. Поэтому там многие из этих вещей,
[01:22:47.780 --> 01:22:56.060]  то есть там уже, на самом деле, для детей это будет просто очень сложно. То есть вас, возможно,
[01:22:56.060 --> 01:23:01.860]  будут держать в лучшем случае за гения, в худшем за умника, на самом деле, если для вас легким будет
[01:23:01.860 --> 01:23:14.580]  хоть что-то из этого. Ну вот, нет, ну по-разному, да. Ну вот, нет, ну как сказать, нет, это уже от вас
[01:23:14.580 --> 01:23:19.740]  зависит. Нет, ну в чем проблема? Нет, до какого-то момента я держался, я не знаю. Но правда,
[01:23:19.740 --> 01:23:25.180]  после девятого класса я в итоге, собственно, уже окончательно ушел в 57-ю, но это уже отдельная
[01:23:25.180 --> 01:23:31.220]  история. Но это я просто к тому, что терема косинусов уже точно в любой школе должна быть
[01:23:31.220 --> 01:23:40.900]  не старше, чем в восьмом классе. Да, но нет, что такое нет? Нет, ну как сказать, я седьмого
[01:23:40.900 --> 01:23:46.100]  класса на самом деле ходил влевослушителем там в один мат-класс. И что такое синусы косинус,
[01:23:46.100 --> 01:23:49.620]  хотя бы на уровне там катет гипотенузия. Это рассказывалось в седьмом классе.
[01:23:49.620 --> 01:23:55.100]  Мне рассказывали на физике в восьмом классе. Да, странно.
[01:23:55.100 --> 01:24:05.660]  Ну да, жалко, к сожалению, да. Вот может по этому геометрию надо в первый семестр
[01:24:05.660 --> 01:24:14.900]  приносить, пока все ходят. Ну по-разному, да. Но в данном случае, да, у нас есть терема косинуса,
[01:24:14.900 --> 01:24:20.500]  ладно, так или иначе, она у нас есть. Согласно ей мы честно пишем, что r1 в квадрате равно r0 в
[01:24:20.500 --> 01:24:29.180]  квадрате плюс там c0 c1 в квадрате минус 2r0 на c0 c1 на косинус альфа. Ну из чего там понятно,
[01:24:29.180 --> 01:24:35.900]  косинус альфа равно там бла-бла-бла, поделить на бла-бла-бла. Уж не буду расписывать шо на шо.
[01:24:35.900 --> 01:24:41.740]  Но косинус известен, но тогда просто идея очень простая. Смотрите, косинус известен,
[01:24:41.740 --> 01:24:48.460]  синус равен, естественно, корень из 1 минус косинус в квадрат. И тогда идея такая, смотрите,
[01:24:48.460 --> 01:24:54.580]  то есть что нужно, чтобы найти вот эту точку? Надо взять вот этот вектор, относить на точке c0,
[01:24:54.580 --> 01:25:01.500]  повернуть его на угол альфа, а мы с вами уже умеем делать, если мы знаем косинус и синус. То есть
[01:25:01.500 --> 01:25:06.220]  заметьте, нам сама альфа не надо знать, нам надо знать только косинус и синус. Вот теперь вот у вас
[01:25:06.220 --> 01:25:10.140]  вектор смотрит, но теперь надо просто домножить его на какую-то константу так, чтобы вот длина
[01:25:10.140 --> 01:25:20.300]  стала не вот какая она была, а r0. То есть есть такая операция нормирование вектора. То есть
[01:25:20.300 --> 01:25:25.180]  делаем так, чтобы вектор смотрел туда же, но его длина была 1. То есть это как бы у нас операция,
[01:25:25.180 --> 01:25:32.420]  то есть v превращается в v поделить на модуль v. То есть это называется нормирование вектора. То есть
[01:25:32.420 --> 01:25:38.620]  когда вы его поделите на свою длину, то он теперь смотрит в нужную сторону его длина 1, а теперь,
[01:25:38.620 --> 01:25:46.700]  если вы домножите на r0, то он тогда попадет в нужную вам точку. Вот здесь и вот здесь. Вот сейчас
[01:25:46.700 --> 01:25:52.820]  расскажу, лично я пользуюсь вот ровно таким методом. То есть вот эти случаи надо рассмотреть,
[01:25:52.820 --> 01:25:58.340]  но если точка существует, там точка пересечения, то соответственно угол находится, причем этот как
[01:25:58.340 --> 01:26:04.820]  бы это термокосинус прекрасно кушает случаи, когда альфа равно 0 или 180 градусов.
[01:26:04.820 --> 01:26:17.060]  Но это здесь. Ну да, но это уже отдельный случай, который надо рассмотреть, это не совпадают ли
[01:26:17.060 --> 01:26:22.940]  окружности просто в принципе. Да, это правда. То есть там, но это да. Ну почти многие из вас,
[01:26:22.940 --> 01:26:26.460]  наверное, рано или поздно в каких-нибудь лкашах или других школах сталкивались с задачей,
[01:26:26.460 --> 01:26:30.660]  найдите все точки пересечения окружности и напишите, что есть сара too many points,
[01:26:30.660 --> 01:26:38.340]  если их бесконечно много. Наверное, сталкивались, ее там везде дают. И это одна из самых болезненных
[01:26:38.340 --> 01:26:46.020]  задач на самом деле, потому что с непривычки можно столько ВАша грести. Ну вот, кажется,
[01:26:46.020 --> 01:26:50.820]  вот просто мой способ на самом деле достаточно надежен, потому что он там не придирается к тому,
[01:26:50.820 --> 01:26:55.100]  где эта точка находится, здесь, здесь или там здесь, то есть независимо там альфа острый,
[01:26:55.100 --> 01:27:00.220]  тупой, там r0 маленькое, большое, то есть на самом деле, то есть тут все в этом смысле достаточно
[01:27:00.220 --> 01:27:08.980]  надежно. То есть все одинаково. Вот так вот таким вот образом мы пересекаем окружности. Ну что
[01:27:08.980 --> 01:27:16.380]  еще надо знать про окружности? Ну, конечно же, надо уметь к окружностям искать касательные.
[01:27:16.380 --> 01:27:26.740]  Вот, да, касательные, конечно, сегодня тоже будут играть важную роль в нашей математике.
[01:27:26.740 --> 01:27:46.300]  Чего есть? Умеем, и что?
[01:27:46.300 --> 01:28:04.900]  А прям вот настолько нагло, да? Ну можно и степенью точки, конечно. Да, смотрите,
[01:28:04.900 --> 01:28:09.620]  какой оригинальный метод. Теперь дана точка вне окружности, дана окружность. Найдите касательную.
[01:28:09.620 --> 01:28:19.540]  Да, как найти? Ну, очень просто. Проведем касательную какую-нибудь и проведем прямую
[01:28:19.540 --> 01:28:28.740]  через центр. Вот, допустим, вот это расстояние до центра у меня оказалось l, а радиус r. И вот
[01:28:28.740 --> 01:28:35.140]  это вот расстояние, допустим, равно d. И тут Биша вспоминает еще одну школьную теорему.
[01:28:35.140 --> 01:28:45.700]  Вот она была на квале ACPC, я ее тоже применял. О, классно, да? А вы не применяли? Сразу скажу,
[01:28:45.700 --> 01:28:51.460]  не помню. К сожалению, нет. Да, и у нас есть теорема степени точки, которая говорит нам о том,
[01:28:51.460 --> 01:28:59.380]  что вот это на вот это равно вот это на вот это. Ну, равно на самом деле просто вот это на вот это.
[01:28:59.380 --> 01:29:06.900]  Балатская теорема, помните? Более того, то есть эту штуку можно назвать степенью точки, в чем эту
[01:29:06.900 --> 01:29:11.780]  степень точки можно ввести даже не только для точек вне окружности, но и для точек внутри
[01:29:11.780 --> 01:29:16.580]  окружности, потому что внутри это тоже правда. Ну, там доказывается с помощью каких-то там вписанных
[01:29:16.580 --> 01:29:28.820]  углов. Ну, потому что ноль, да. Хорошо. Так вот, но в данном случае эта теорема говорит нам о
[01:29:28.820 --> 01:29:34.940]  следующем. То есть можно просто вот это D теперь очень легко найти, потому что D квадрат равно там L
[01:29:34.940 --> 01:29:46.420]  минус R на L плюс R получается. Ну, то есть L квадрат минус R квадрат. Правда, заметим, что можно было
[01:29:46.420 --> 01:29:54.980]  не выпендриваться, а заметить, что вспомнить более простой школьный факт, что радиус, проведенный в
[01:29:54.980 --> 01:30:00.820]  точку касания перпендикулярно-касательный. И тогда вот это будет просто теорема Пифагора.
[01:30:00.820 --> 01:30:18.420]  Ну, хорошо, нет. Я согласен. Все, что нет, помните? Теорема степени точки. Ну, окей. Теорема степени точки
[01:30:18.420 --> 01:30:21.740]  дает замечательное знание, которое пользуется полезно. Вообще, в принципе, школьную геометрию
[01:30:22.420 --> 01:30:32.140]  как бы помнить полезно. Вот. Это всегда хорошо. Но так или иначе, короче, вы этот D нашли, альфу вот эту
[01:30:32.140 --> 01:30:39.820]  вы тоже нашли. Ну, потому что, скажем, cos альфа равен, очевидно, D делить на L, а sin альфа равен
[01:30:39.820 --> 01:30:46.020]  просто R делить на L. Ну и дальше решение абсолютно то же самое. То есть поворачиваем этот вектор и
[01:30:46.020 --> 01:30:54.140]  нормируем на длину D. Поворачиваем сюда, поворачиваем сюда, вот вам и две точки касания. Не очень сложно,
[01:30:54.140 --> 01:31:05.020]  правда? Ну, это повторение нашего алгоритма пересечения окружностей. Ну, по сути, да. Идейна
[01:31:05.020 --> 01:31:11.060]  тоже. Да, мы могли вылить воду из чайника и сказать, что теперь нам надо пересечь эту окружность
[01:31:11.060 --> 01:31:21.860]  вот окружностью с центром здесь и радиусом. Вот. Ну, как красиво, да. Ну, выливать воду из
[01:31:21.860 --> 01:31:36.020]  чайника выглядит не очень красиво. А вот, ты знаешь, вот тут баланс. Нет, с точки зрения
[01:31:36.020 --> 01:31:40.700]  CPC это не супер, потому что тебе эту библиотеку потом придется переписывать, и чем она у тебя более
[01:31:40.700 --> 01:31:46.060]  взаимозависимая, тем больше ты ее будешь переписывать. Вот. Это раз. Во-вторых, в реальной жизни на самом
[01:31:46.060 --> 01:31:51.580]  деле тоже надо еще внимательно думать, потому что, как бы, чем больше ты используешь эти примитивы,
[01:31:51.580 --> 01:31:57.700]  тем больше ты заинтересован в том, чтобы эти примитивы побыстрее работали. Вот. То есть, конечно,
[01:31:57.700 --> 01:32:01.740]  можно написать прям красиво, но если там один примитив будет использовать пять других примитивов,
[01:32:01.740 --> 01:32:05.900]  вместо того, чтобы напрямую использовать формулу, то он будет работать в 10 раз дольше, чем мог бы.
[01:32:05.900 --> 01:32:14.580]  И это тебе может там в каких-то приложениях просто критично навредить. Поэтому тут баланс. Вот. Так
[01:32:14.580 --> 01:32:23.660]  что, да, это тут вот. Так что, касательная тут такая. Вот. Так, что у нас еще? Так, ну, конечно,
[01:32:23.660 --> 01:32:30.740]  здесь нельзя не упомянуть о том, как построить общая касательная к двум кругам, но каждый из
[01:32:30.740 --> 01:32:39.700]  которых, естественно, расположен вне друг друга. Но тут, конечно, есть подлянка в том, что общих
[01:32:39.700 --> 01:32:52.460]  касательных тут, вообще говоря, четыре. Раз, два, три, четыре. И каждую из них надо искать. Но искать
[01:32:52.460 --> 01:33:02.980]  достаточно просто. Смотрите. Потому что, на самом деле, допустим, у нас есть R1 и R2. И, допустим,
[01:33:02.980 --> 01:33:10.660]  оказалось даже, что R1 меньше, чем R2. Ну, в случае чего свапнемся. Тогда внешние касательные можно
[01:33:10.660 --> 01:33:20.260]  найти так. Давайте построим здесь вот такой прямоугольник. Вот. На вот этих точках касания
[01:33:20.260 --> 01:33:28.460]  и центре меньшей окружности. То есть, заметьте, это прямоугольник. То есть, вот эти прямые параллельно.
[01:33:28.460 --> 01:33:37.460]  Вот. Тогда здесь образуется треугольник. То есть, это вот длина, вот эта длина этого перпендикуляра.
[01:33:37.460 --> 01:33:43.500]  Ну, то есть, так, вот это расстояние, это L, это мы знаем. Это R2-R1. Эту штуку мы теперь
[01:33:43.500 --> 01:33:48.660]  потерями Пифагора находим. Ну, а самое главное, находим вот этот угол. То есть,
[01:33:48.660 --> 01:33:55.740]  действительно, поворачиваем, нормируем. И еще надо просто перенести его в правильную сторону на перпендикуляр.
[01:33:55.740 --> 01:34:15.100]  Что? Я так? Сейчас. Откуда вы знаете, в каком направлении идет вообще касательный? Что значит в каком направлении?
[01:34:15.540 --> 01:34:22.140]  Откуда вы знаете направление вот этого вот? А очень просто. Смотрите, я поворачиваю на угол альфа против часовой стрелки, допустим.
[01:34:22.140 --> 01:34:36.140]  Откуда вы знаете? Ну, вот. Ну, я его синус знаю. Нет. Знаю. Ну, я... Как вам все еще нужно направление? Нет, нет.
[01:34:36.140 --> 01:34:43.140]  Нет, нет. Альфа я не в направленном смысле знаю. Потому что я, как бы понятно, я на тот же угол альфа поворачиваю в эту сторону и поворачиваю.
[01:34:43.180 --> 01:34:52.180]  И получаю тем же способом вот эту касательную. Ну, скажи так, я нахожу вот эту вот, то есть вот эту вот штуку.
[01:34:52.180 --> 01:34:59.180]  Как вы находитесь? Вы не знаете, какая... Прекрасно знаю. Я вот эту альфу поворачивал, делал поворот здесь на альфа против часовой стрелки.
[01:34:59.180 --> 01:35:07.180]  Потому что я захотел. Потому что я знаю, что если я поверну против часовой стрелки, я найду одну касательную.
[01:35:07.180 --> 01:35:10.180]  Если я сделаю по часовой стрелке, я найду другую.
[01:35:10.220 --> 01:35:17.220]  Вы не знаете радиус сам? В какую сторону он повернут? Откуда вы это знаете?
[01:35:17.220 --> 01:35:20.220]  Какой радиус? R1, R2 я знаю.
[01:35:20.220 --> 01:35:26.220]  Миша, ну ты же знаешь два катета. Ну, в смысле, такие потянувшие катеты.
[01:35:26.220 --> 01:35:29.220]  Ну, в смысле, да. Вот эту штуку я знаю. Это расстояние между центрами.
[01:35:29.220 --> 01:35:30.220]  Эту штуку знаю.
[01:35:30.220 --> 01:35:33.220]  Эту я знаю. Это просто разность между радиусами.
[01:35:33.220 --> 01:35:35.220]  Ну, а что мешает?
[01:35:35.260 --> 01:35:38.260]  Еще я знаю, что это треугольник прямоугольный.
[01:35:48.260 --> 01:35:49.260]  Ну, по сути, да.
[01:35:52.260 --> 01:35:54.260]  Можно и так сказать, да.
[01:35:54.260 --> 01:35:58.260]  То есть давайте я тут сдую обе окружности в R1 раз.
[01:35:59.260 --> 01:36:04.260]  И получится, что я тут по сути... Вот это вот все, что я делаю, это я ищу касательную.
[01:36:05.260 --> 01:36:06.260]  Сюда.
[01:36:07.260 --> 01:36:11.260]  Окей, а потом мы уже знаем направление, знаем укасательную.
[01:36:11.260 --> 01:36:18.260]  Ну да, то есть я должен повернуть вот этот вектор на 90 градусов тоже против часовой стрелки.
[01:36:18.260 --> 01:36:19.260]  Хорошо.
[01:36:20.260 --> 01:36:22.260]  А что происходит с внутренней касательной?
[01:36:22.260 --> 01:36:25.260]  А внутренней укасательной придется искать по-другому.
[01:36:29.260 --> 01:36:30.260]  Смотрите.
[01:36:30.300 --> 01:36:33.300]  Нет, здесь идея очень простая.
[01:36:33.300 --> 01:36:35.300]  Берем R1 меньше, R2 больше.
[01:36:36.300 --> 01:36:39.300]  Так вот, теперь я сделаю читерским способом.
[01:36:39.300 --> 01:36:42.300]  Так, вот у меня тут какая-то вот такая касательная.
[01:36:43.300 --> 01:36:45.300]  Вот какая-то вот такая.
[01:36:45.300 --> 01:36:46.300]  Так вот, у меня идея такая.
[01:36:47.300 --> 01:36:52.300]  Давайте я эту окружность сдую в точку, а эту наоборот.
[01:36:53.300 --> 01:36:56.300]  Там неожиданно раздую на радиус R1.
[01:36:56.300 --> 01:36:59.300]  То есть я хочу, чтобы вот это было R2 плюс R1.
[01:37:00.300 --> 01:37:08.300]  Тогда я утверждаю, что вот эта касательная просто превратится в касательную из этой точки.
[01:37:08.300 --> 01:37:09.300]  Ну тоже самое.
[01:37:10.300 --> 01:37:11.300]  Вот.
[01:37:11.300 --> 01:37:12.300]  И дальше, ну вот.
[01:37:14.300 --> 01:37:19.300]  Ну да, и дальше будет вот буквально опять тот же прямоугольник.
[01:37:19.300 --> 01:37:20.300]  Тут уже R1 будет.
[01:37:21.300 --> 01:37:23.300]  Ну вот, тут будет какая-то L.
[01:37:23.300 --> 01:37:26.300]  И в общем-то, ну короче, вы поняли.
[01:37:28.300 --> 01:37:29.300]  Вот.
[01:37:30.300 --> 01:37:33.300]  То есть общие касательные можно искать так.
[01:37:39.300 --> 01:37:40.300]  Ну вот, ну впрочем, да.
[01:37:41.300 --> 01:37:43.300]  Впрочем, это еще не самое веселое.
[01:37:44.300 --> 01:37:45.300]  Сейчас, видимо.
[01:37:45.340 --> 01:37:49.340]  Нет, понимаете, дальше просто начинается самая интересная задача в этом блоке.
[01:37:50.340 --> 01:37:54.340]  Задача будет называться построить касательную к выпуклому многоугольнику.
[01:37:54.340 --> 01:37:56.340]  Давайте уже раз анонсируем.
[01:37:57.340 --> 01:37:58.340]  Вот, да, она там.
[01:37:59.340 --> 01:38:03.340]  То есть ну как сказать, мозг повзрывать придется, но кажется, что после этого будет больше.
[01:38:03.340 --> 01:38:04.340]  Ну, конечно же, можно и будет.
[01:38:05.340 --> 01:38:06.340]  А вот, вот.
[01:38:06.340 --> 01:38:07.340]  И вот так.
[01:38:08.340 --> 01:38:09.340]  Ну да, и вот.
[01:38:10.340 --> 01:38:11.340]  И вот так.
[01:38:12.340 --> 01:38:13.340]  Вот так.
[01:38:13.340 --> 01:38:18.500]  повзрывать придется но кажется что после этого будет если если я тут ничего из этого блока не
[01:38:18.500 --> 01:38:23.500]  упустил можно будет такие тогда поговорить либо про торнарный поиск либо про выпуклые оболочки
[01:38:23.500 --> 01:38:29.300]  ну все зависит от порядка потому что сегодня хочется обсудить и то и то но у нас есть но я
[01:38:29.300 --> 01:38:33.660]  уже сказал сегодня у нас большое занятие выпуклости да торнарный поиск это важная
[01:38:33.660 --> 01:38:43.340]  часть занятия выпуклости кстати вот да нет у нас практически все сегодня выпуклости вот
[01:38:43.340 --> 01:38:48.620]  если успеем то может быть даже у нас сегодня конверт халтрик возникнет на самом деле а там
[01:38:48.620 --> 01:39:04.100]  мне там есть а там таки есть что обсуждать великий и могучий конверт халтрик ну постараемся но тут
[01:39:04.100 --> 01:39:09.820]  не ну совсем без отвлечений сложно потому что отвлечение помимо всего прочего это как бы способ
[01:39:09.820 --> 01:39:21.020]  немножко там выдыхать в процессе вот значит смотреть и так значит задача дан выпукло многоугольник
[01:39:21.020 --> 01:39:32.620]  и дана точка вне его надо найти касательное к многоугольнику кстати да здесь уже можно
[01:39:32.620 --> 01:39:40.580]  определить а что такое вообще касательное вот что такое вообще касательное к многоугольнику
[01:39:40.580 --> 01:39:55.660]  потому что тогда это это определение будет считать что вот это вот это не касатель
[01:39:55.660 --> 01:40:06.340]  вот да ну можно говорить через вершину да но на самом деле я бы обобщил немножко
[01:40:06.340 --> 01:40:13.420]  смотрите давайте я скажу так ну можно сказать так предположим что у нас есть замкнутое выпуклое
[01:40:13.420 --> 01:40:21.620]  множество ну давайте пусть будет ограниченное для удобства но чем оно не обязательно ведь оно
[01:40:21.620 --> 01:40:24.900]  не обязательно вот с этими углами потому что оно может быть и овалом каким-нибудь или
[01:40:24.900 --> 01:40:30.100]  круг кстати подходит тоже да так вот я люблю определять касательную и кстати это вот очень
[01:40:30.100 --> 01:40:35.580]  удобно действительно так определять мыслить именно в таких терминах следующим образом значит
[01:40:35.580 --> 01:40:44.380]  рассмотрим угол любой угол от нуля до 2 пи и для каждого из этих углов вот существует направленная
[01:40:44.380 --> 01:40:53.020]  прямая с направлением альфа вот такая так вот я хочу сделать вот что я хочу такую прямую
[01:40:53.020 --> 01:40:59.700]  где-нибудь далеко далеко далеко начать нарисовать от многоугольника и двигать ее относительно себя
[01:40:59.700 --> 01:41:10.900]  влево так чтобы фигура полностью оказывалась слева от этой прямой вот и результате у меня
[01:41:10.900 --> 01:41:16.140]  получится что касательное в направлении альфа это такая прямая которая проходит через хотя
[01:41:16.140 --> 01:41:20.900]  бы одну точку множество и при этом оставляет и при этом все это множество лежит в левой
[01:41:20.900 --> 01:41:27.300]  полуплоскости относительно этой прямой до прямая направленная то есть ну чтобы у нас за но то есть
[01:41:27.300 --> 01:41:34.540]  у нее есть напарник такой параллельный напарник угол пи плюс альфа а именно
[01:41:34.540 --> 01:41:42.300]  касательно через точку где мы изменяем угол да но не касательно который мы угол фиксируем но
[01:41:42.300 --> 01:41:49.020]  изменяем положение но нет ну не совсем так заметь я утверждаю что ну пока по каждому углу касательно
[01:41:49.020 --> 01:41:54.780]  ровно одна да для многоугольника заметим что через точку можно провести несколько касательных
[01:41:54.780 --> 01:42:01.900]  да я имею в виду что мы можем фиксировать угол и искать касательно вот таки да а можем
[01:42:01.900 --> 01:42:10.060]  фиксировать но в принципе да нет ну на самом деле нет но определение на самом деле более
[01:42:10.060 --> 01:42:16.700]  менее согласуется вот потому что часто нам имеет смысл воображать даже множество этих касательных
[01:42:16.700 --> 01:42:21.940]  в целом а на самом деле касательно можно еще воображать себе так смотрите давайте я возьму
[01:42:21.940 --> 01:42:27.700]  какую-нибудь прямую вот так вот прижму ее к многоугольнику да и дальше я хочу ее поворачивать
[01:42:27.700 --> 01:42:35.140]  влево постоянно прижимая к многоугольнику вот будем ее прижимать прижимать прижимать прижимать
[01:42:35.140 --> 01:42:41.140]  тогда она значит некоторое время будет вращаться вокруг вот этой точки и пока она не упрется на
[01:42:41.140 --> 01:42:46.340]  следующие ребра после этого она ночью мы начнем ее вращать уже вот здесь ну и таким образом на
[01:42:46.340 --> 01:42:50.980]  самом деле если у провернуть касательную на 360 градусов то она прям вот многоугольник обойдет и
[01:42:50.980 --> 01:42:56.100]  вернется в исходную точку но это просто такой образ который вот полезно иметь потому что на
[01:42:56.100 --> 01:42:59.900]  самом деле на этом образе будут базироваться решение нескольких задач которые мы будем
[01:42:59.900 --> 01:43:09.060]  рассматривать вот вот такая красота но нас интересует сейчас немножко другое нас среди
[01:43:09.060 --> 01:43:14.860]  этих касательных нас сейчас интересует конечно какая-то какие-то две касательные которые
[01:43:14.860 --> 01:43:23.460]  проходят через заданную точку какая-то вот такая касательная и какая-то вот такая
[01:43:38.340 --> 01:43:39.700]  вот как же это сделать
[01:43:39.700 --> 01:43:48.700]  вот ну здесь тоже вопрос в аккуратности потому что понятно что если вы там дать
[01:43:48.700 --> 01:43:51.820]  вам пять минут подумать то скорее всего это какие-нибудь бенпольский придумать
[01:43:51.820 --> 01:44:01.460]  просто нельзя просто ну посмотреть с каждой из точек с каждой из вершин
[01:44:01.460 --> 01:44:09.380]  можно но только вот и ну хорошо ты вот возьмешь первую попавшуюся вершину
[01:44:09.380 --> 01:44:18.380]  хочется залог вот то есть залог отдельная песня потому что но смотрите просто тут
[01:44:18.380 --> 01:44:22.980]  идея на самом деле оказывается давайте предположим что нас многоугольник идет против часовой стрелки
[01:44:22.980 --> 01:44:30.380]  что это означает это означает следующее что вот если мы стоим если мы опять пустим козу по
[01:44:30.380 --> 01:44:36.940]  многоугольнику а сами стоим в этой точке да то есть здесь коза топ на этих ребах коза будет
[01:44:36.940 --> 01:44:44.620]  идти как бы направо а вот на этих ребах коза будет идти как бы налево от нас требуем но касательно
[01:44:44.620 --> 01:44:54.260]  конечно мы к выпуклу многоугольников но если коза бегает по выпуклу но нет то есть там
[01:44:54.860 --> 01:44:59.300]  скорее всего вы просто тогда сводится касательно их выпукло оболочек да тогда
[01:44:59.300 --> 01:45:05.940]  за то что у нас у нас выпукло многоугольник да все нормально вот то есть в принципе нам на
[01:45:05.940 --> 01:45:09.620]  самом деле то есть у нас есть ребра которые смотрят налево есть ребра которые смотрят
[01:45:09.620 --> 01:45:19.780]  направо и надо просто найти две граничные точки по сути правда понимаете да ну да ну налево
[01:45:20.660 --> 01:45:27.540]  это значит что векторы произведения вот этого на этого больше нуля ну как бы смотрите вот
[01:45:27.540 --> 01:45:31.020]  то есть как бы вот здесь точка кого-то налево поверить когда тут идёт точка она вот как бы
[01:45:31.020 --> 01:45:40.380]  вот так идет вот то есть вот это вот да то есть проверки ну произведение вот то есть мы просто
[01:45:40.860 --> 01:45:50.460]  ну да но единственная проблема что как бы да если если мы знаем одну точку касания то вторую мы
[01:45:50.460 --> 01:45:56.780]  естественно бенпольском без труда найдем но проблема в том что мы заранее ничего не знаем но значит
[01:45:56.780 --> 01:46:01.180]  идея оказывается такая но единственное что мы знаем если мы возьмем первую попавшуюся точку то
[01:46:01.180 --> 01:46:07.860]  мы за от единицы легко поймем она лежит на вот этой дальней часть который идет налево или на
[01:46:07.860 --> 01:46:12.380]  ближней части который идет направо правда вот допустим выяснилось что она лежит на дальней
[01:46:12.380 --> 01:46:20.780]  части тогда смотрите какая у меня неожиданная идея вот давайте мы это вот вот возьмем пусть
[01:46:20.780 --> 01:46:27.580]  она лежит на дальней части тогда оказывается смотрите я давайте я сейчас этим ребрам присвою
[01:46:27.580 --> 01:46:35.260]  ципы вот это будут ребра до точки касания здесь будет ребра первого типа потом между точками
[01:46:35.360 --> 01:46:41.860]  касанье второго типа а после второй точки касания третьего типа надо найти границу между
[01:46:41.860 --> 01:46:47.860]  рубрами первого второго типа и ребрами второго третьего теперь внимание вопрос дано ребро как
[01:46:47.860 --> 01:46:58.600]  определить его тип ну и как так ну поверь PRESID мы легко определим она второго типа или какого-то
[01:46:58.600 --> 01:47:07.600]  А теперь у тебя вопрос, как отличить первый тип от третьего типа? А что значит до или после? Это нулевая точка, напоминаю.
[01:47:07.600 --> 01:47:17.600]  Да, потому что заметим, что ребра третьего типа лежат справа от этого луча, а это слева.
[01:47:17.600 --> 01:47:27.600]  То есть поэтому по любому ребру вы теперь легко определяете его тип, и получается теперь можно просто любым бинпоиском найти границу между первым тип и вторым.
[01:47:27.600 --> 01:47:36.600]  Минус решение в том, что тут приходится рассматривать случай, потому что мы предположили, что мы взяли первую попавшуюся точку, и она лежит на дальней части.
[01:47:36.600 --> 01:47:59.600]  А если она попадет на ближнюю часть, то тогда вам придется делать абсолютно то же самое, но типы тут будут немножко инвертированы.
[01:47:59.600 --> 01:48:10.600]  А элементарно вы рассмотрите два ребра, и как вы говорите, эти ребра идут вправо, вот здесь они идут вправо, а здесь они идут влево. Напоминаю, у нас многоугольник против часовой стрелки ориентирован.
[01:48:10.600 --> 01:48:14.600]  То есть нам вообще и важно такое ориентация?
[01:48:14.600 --> 01:48:26.600]  Ну да, это нам, к сожалению, принципиально. То есть можно, наверное, эти два случая реализовать единым образом без копипасты.
[01:48:26.600 --> 01:48:33.600]  А еще придется учесть случай, если мы случайно попали в точку касания сразу.
[01:48:33.600 --> 01:48:42.600]  Но тем не менее, это, кажется, одно из самых красивых и надежного, что тут можно написать.
[01:48:43.600 --> 01:48:44.600]  То есть вы это пишете?
[01:48:44.600 --> 01:48:45.600]  Ну да.
[01:48:52.600 --> 01:48:53.600]  Общий касатель.
[01:48:57.600 --> 01:48:59.600]  Так, вот это отдельная песня.
[01:49:00.600 --> 01:49:04.600]  Да, ну тут так, да, тут так, конечно, не получится. Хотя нет.
[01:49:04.600 --> 01:49:06.600]  Нет, слет у меня будет даже вопрос.
[01:49:10.600 --> 01:49:12.600]  Нет, ну смотрите, на самом деле...
[01:49:13.600 --> 01:49:16.600]  Но на самом деле, да, нет, хороший слет и вопрос, на самом деле, да.
[01:49:16.600 --> 01:49:21.600]  Задачи даны, не пересекайте выпрыгного угольника, найдите общие касательные к ним.
[01:49:22.600 --> 01:49:26.600]  Но на самом деле, здесь на самом деле вот эта вот цель.
[01:49:27.600 --> 01:49:28.600]  Что?
[01:49:29.600 --> 01:49:31.600]  Вращающийся сканлайн может вам неожиданно помочь.
[01:49:38.600 --> 01:49:39.600]  Так, нет, давайте подумаем.
[01:49:39.600 --> 01:49:40.600]  Хорошо, вот у нас...
[01:49:46.600 --> 01:49:47.600]  Так, да.
[01:49:48.600 --> 01:49:49.600]  Так, да.
[01:49:50.600 --> 01:49:52.600]  Так, нет, давайте подумаем.
[01:49:52.600 --> 01:49:53.600]  Хорошо, вот у нас...
[01:50:01.600 --> 01:50:02.600]  Вот.
[01:50:03.600 --> 01:50:06.600]  Действительно, что же делать, если у нас два выпрыгного угольника?
[01:50:08.600 --> 01:50:13.600]  Так, в принципе, да, у меня слету возникает такое вот решение.
[01:50:14.600 --> 01:50:16.600]  Значит, давайте будем вращать сканлайн.
[01:50:16.600 --> 01:50:22.600]  И давайте допустим мы начнем с какого-нибудь более левого многоугольника.
[01:50:24.600 --> 01:50:27.600]  Ну какого-то многоугольника, наверное, есть самая левая вершина, правда?
[01:50:27.600 --> 01:50:28.600]  Да.
[01:50:28.600 --> 01:50:30.600]  Вот. И начнем вот с этой касательной вертикальной.
[01:50:34.600 --> 01:50:35.600]  Вот.
[01:50:41.600 --> 01:50:42.600]  Вот.
[01:50:43.600 --> 01:50:44.600]  Так вот.
[01:50:44.600 --> 01:50:45.600]  Идея, на самом деле, такая.
[01:50:45.600 --> 01:50:49.600]  То есть, очевидно, что в этот момент времени у вас, наверное...
[01:50:50.600 --> 01:50:56.600]  То есть, второй многоугольник будет относительно этой касательной слева, правда?
[01:50:58.600 --> 01:50:59.600]  Согласны?
[01:51:00.600 --> 01:51:02.600]  Да. Нет, второй...
[01:51:02.600 --> 01:51:03.600]  А, если вот так, то слева.
[01:51:03.600 --> 01:51:04.600]  Вот.
[01:51:04.600 --> 01:51:06.600]  Тогда смотрите, какая идея возникает.
[01:51:06.600 --> 01:51:13.600]  Если я буду вращать эту касательную, то некоторое время у вас этот многоугольник все еще будет слева, да?
[01:51:13.600 --> 01:51:16.600]  То есть, мы тут будем рисовать вот так касательную, вот так касательную.
[01:51:16.600 --> 01:51:17.600]  Поворачиваем, поворачиваем.
[01:51:17.600 --> 01:51:22.600]  И вот, бах-бах, мы наткнулись на внешнее общее касание.
[01:51:23.600 --> 01:51:24.600]  Да?
[01:51:24.600 --> 01:51:25.600]  Ну как?
[01:51:25.600 --> 01:51:26.600]  Мы наткнулись на...
[01:51:27.600 --> 01:51:28.600]  Ну, не совсем на это.
[01:51:28.600 --> 01:51:29.600]  Вот.
[01:51:29.600 --> 01:51:30.600]  Нет.
[01:51:30.600 --> 01:51:31.600]  Ну, в какой-то момент...
[01:51:32.600 --> 01:51:35.600]  Нет, ну, в какой-то момент касательная нота...
[01:51:36.600 --> 01:51:37.600]  Вот.
[01:51:37.600 --> 01:51:38.600]  Ну, в какой-то момент...
[01:51:38.600 --> 01:51:39.600]  Ну, как бы да, смотрите.
[01:51:39.600 --> 01:51:42.600]  Вот у нас прямая как-то крутится, вот ее направление.
[01:51:42.600 --> 01:51:44.600]  Правда, иногда тут еще поворачивается, да?
[01:51:44.600 --> 01:51:46.600]  Но и как бы многоугольник оказывается у нас слева.
[01:51:47.600 --> 01:51:48.600]  Вот.
[01:51:49.600 --> 01:51:50.600]  Причем...
[01:51:50.600 --> 01:51:51.600]  Ну вот.
[01:51:51.600 --> 01:51:55.600]  Ну и в принципе утверждать, что в какой-то момент мы наткнемся на многоугольник.
[01:51:56.600 --> 01:52:00.600]  Причем более того, относительно точки касания на самом деле мы...
[01:52:00.600 --> 01:52:02.600]  То есть, этот многоугольник будет впереди.
[01:52:04.600 --> 01:52:05.600]  Вот.
[01:52:05.600 --> 01:52:09.600]  Ну, потому что, видите, мы тут как бы смотрим вниз, и тут пока угол такой.
[01:52:09.600 --> 01:52:10.600]  Вот.
[01:52:10.600 --> 01:52:11.600]  Мы наткнулись.
[01:52:11.600 --> 01:52:15.600]  После этого некоторое время прямая будет поворачиваться-поворачиваться,
[01:52:15.600 --> 01:52:18.600]  и она будет пересекать этот многоугольник.
[01:52:19.600 --> 01:52:23.600]  Потом наткнется вот эта какая-то вторая общая касательная,
[01:52:23.600 --> 01:52:29.600]  после которой мы заметим, что тогда у нас многоугольник неожиданно окажется справа.
[01:52:29.600 --> 01:52:31.600]  Ну, как бы, все ли на этом?
[01:52:31.600 --> 01:52:35.600]  Нет, потому что сейчас у нас теперь многоугольник полностью лежит справа от него.
[01:52:35.600 --> 01:52:37.600]  Потому что на самом деле будут еще два события.
[01:52:37.600 --> 01:52:41.600]  Будет еще вот событие, когда мы наткнулись опять на многоугольник, но уже задом.
[01:52:42.600 --> 01:52:45.600]  То есть, тут он был многоугольник спереди, а там был сзади.
[01:52:46.600 --> 01:52:47.600]  Вот.
[01:52:47.600 --> 01:52:50.600]  И тоже он там пробежится-пробежится, но хвостом мы его тоже заметем,
[01:52:50.600 --> 01:52:52.600]  и после этого мы вернемся сюда.
[01:52:52.600 --> 01:52:53.600]  Это же правда, что если мы можем...
[01:52:53.600 --> 01:52:55.600]  Вот тут мы взяли самую большую часть.
[01:52:55.600 --> 01:52:58.600]  А если мы возьмем теперь самую правую и также по ней на два пройдем, то это будут два других.
[01:52:58.600 --> 01:53:00.600]  Чего правую, какое правое?
[01:53:00.600 --> 01:53:06.600]  Ну, хочу взять самую правую, прямую, посмотрящую вверх, пройти по ней, тоже найти две касательные.
[01:53:06.600 --> 01:53:07.600]  Нет, ну тут аккуратненько.
[01:53:07.600 --> 01:53:08.600]  Там, знаете, там же...
[01:53:08.600 --> 01:53:12.600]  Нет, там дальше как начнутся всякие случаи вида пум-пум-пум-пум и пум-пум-пум-пум,
[01:53:12.600 --> 01:53:14.600]  так что поаккуратнее надо.
[01:53:14.600 --> 01:53:17.600]  Так что, честно скажу, лучше опираться на один многоугольник.
[01:53:17.600 --> 01:53:23.600]  Ну вот, то есть суть на самом деле в том, что у вас по сути есть четыре события,
[01:53:23.600 --> 01:53:29.600]  и как бы, ну вот, и надо просто, возможно, в каком-то бинпольске уметь аккуратненько
[01:53:29.600 --> 01:53:31.600]  отличать один случай от другого.
[01:53:31.600 --> 01:53:37.600]  Ещё там вопрос, когда она перепрыгнула, то есть если мы этоiera, то почему мы ее мылим Evans?
[01:53:37.600 --> 01:53:42.600]  То есть если мы мылим Ronin, то есть если мы мылим Ronin, то есть если мы мылим Ronin,
[01:53:42.600 --> 01:53:43.600]  то что мы мылим?
[01:53:43.600 --> 01:53:51.120]  Еще там вопрос, когда она перепрыгнула, то есть она была полностью слева, а потом стал не
[01:53:51.120 --> 01:53:56.280]  полностью слева, нам нужно понять на какой наклон проворнуться, чтобы именно попасть в многоугольник.
[01:53:56.280 --> 01:54:08.000]  Ну вот, на самом деле, смотрите, да, можно, но слету я не очень понимаю,
[01:54:08.000 --> 01:54:12.880]  можно ли как-то сделать за линию, если честно. Потому что слету я, например, понимаю,
[01:54:12.880 --> 01:54:19.640]  как это сделать за N лог N какой-нибудь. Ну, например, самое тупое, что можно сделать за N лог N,
[01:54:19.640 --> 01:54:26.760]  сделать просто, во-первых... Чего? Почему N лог N даже? Нет, смотрите, дело в том,
[01:54:26.760 --> 01:54:30.640]  что, то есть идея такая, во-первых, мне очень хочется, конечно, понимать вот для
[01:54:30.640 --> 01:54:34.120]  каждой касательной, которая идет вот так, просто вот этой касательной, проверять,
[01:54:34.120 --> 01:54:40.680]  какого она типа. Пересекает ли она многоугольника, если не пересекает, то она от него и проходит справа,
[01:54:40.680 --> 01:54:49.080]  слева или, а если пересекает, ну вот, ну или как. И тогда это сводит нас к другой задаче,
[01:54:49.080 --> 01:54:54.520]  вот вообще в принципе задача, кстати, тоже сама по себе интересная. Дан многоугольник дано
[01:54:54.520 --> 01:55:00.920]  направление, приведите к многоугольнику касательную за данным направлением. Ну,
[01:55:00.920 --> 01:55:05.400]  здесь достаточно просто, потому что если вы заранее для многоугольника предпочитаете самую нижнюю
[01:55:05.400 --> 01:55:11.560]  точку какую-нибудь, да, и самую верхнюю точку, да, то есть это вот точки касания горизонтальных
[01:55:11.560 --> 01:55:16.600]  касательных, да, то в принципе вам, когда, если вам дается, ладно, не такое направление,
[01:55:16.600 --> 01:55:21.640]  а какое-нибудь там вот такое, то вы на самом деле по вот этим ребрам просто запускаете бинпоиск,
[01:55:21.640 --> 01:55:26.760]  потому что по сути вот эти ребра отсортированы по полярному углу, и вам нужно просто вот эту
[01:55:26.760 --> 01:55:35.960]  касательную просто в них встать, по сути. Понимаете, да, то есть очень легко, тогда очень легко тут
[01:55:35.960 --> 01:55:42.760]  получается бинпоиск и векторное произведение в них. То есть типа вот если у вас векторное
[01:55:42.760 --> 01:55:46.680]  произведение вот это на это оказалось меньше нуля, значит вам там касательная где-то дальше,
[01:55:46.680 --> 01:55:53.560]  там если это на это оказалось меньше нуля, значит наоборот где-то ближе было. А что тебе не нравится?
[01:55:53.560 --> 01:56:07.760]  Сейчас, а у нас может быть картинка, что мы типа вот, то есть мы идем тут вверх, а там вниз.
[01:56:07.760 --> 01:56:26.800]  Ваня, почему именно верхняя и нижняя, то есть почему именно верхняя и нижняя точка?
[01:56:26.800 --> 01:56:35.640]  Ну просто для... Ну понятно, что подойдут любые... Ну просто чисто может для удобства,
[01:56:35.640 --> 01:56:39.720]  чтобы с векторным произведением было все адекватно. Потому что бинпоиск на полном
[01:56:39.720 --> 01:56:43.640]  многоугольнике не получится, там как бы со знаками векторного произведения проблемы будут.
[01:56:43.640 --> 01:56:52.200]  Вот что ломается, если мы взяли две соседние вершины? В смысле? Не верхняя и нижняя, а две соседние.
[01:56:52.200 --> 01:57:00.200]  Ну ломается то, что не обязательно... Ну просто утверждение такое, что как бы и с этой стороны,
[01:57:00.200 --> 01:57:04.000]  и с этой, верно следующее, что для любых двух касательных, проведенных к одной стороне,
[01:57:04.080 --> 01:57:09.280]  верно, что одна идет раньше другой тогда и только тогда, когда у них векторное произведение больше 0.
[01:57:09.280 --> 01:57:19.680]  Если ты возьмешь две соседние точки, возьмешь там только касательно вот эту и эту, то там вот на вот
[01:57:19.680 --> 01:57:25.360]  этой вот штуке на самом деле это уже не так. То есть касательная, то есть вот эта вот векторная
[01:57:25.360 --> 01:57:30.360]  умноженная на вот это может дать уже и меньше 0 вполне. То есть если тут поворот больше 180 градусов.
[01:57:30.360 --> 01:57:37.920]  А там утверждается, что никогда не будет поворота? Нет, а тут не будет. Смотри, я специально взял
[01:57:37.920 --> 01:57:42.480]  шлок, две горизонтальные касательные. Это две касательные, между которыми угол 180 градусов
[01:57:42.480 --> 01:57:47.760]  ровно, что в одну сторону, что в другую. То есть тут как бы все касательные вот в этой
[01:57:47.760 --> 01:57:56.800]  стороне, с этой стороны они смотрят вверх. Вот. То есть вот в чем идея на самом деле. Вот. То есть
[01:57:57.160 --> 01:58:02.200]  видим, что касательную в заданном направлении можно находить за логарифом. Ну и тогда получается,
[01:58:02.200 --> 01:58:06.760]  если ваша задача дан луч проверить, пересекает ли он многоугольник, а если нет, то он там проходит
[01:58:06.760 --> 01:58:11.240]  него справа или слева, то надо просто построить касательную в этом направлении и посмотреть,
[01:58:11.240 --> 01:58:16.240]  где она ниже этого луча или выше.
[01:58:16.240 --> 01:58:35.800]  Честно, за логарифом построю из этой вот вершины касательную. Потому что вот этот угол...
[01:58:35.800 --> 01:58:42.760]  Мы только что научились из точки касательной многоугольника за логарифом строить. Да,
[01:58:42.760 --> 01:58:49.160]  вот так вот как-то. Вот. Ну на самом, да. То есть, в принципе, поэтому за n лог n тем или иным
[01:58:49.160 --> 01:58:56.760]  способом можно. Более того, я вам даже больше скажу, на самом деле есть подозрение, что это
[01:58:56.760 --> 01:59:07.760]  можно за o от n методом параллельного вращения. Потому что что нас, в общем-то, сейчас интересует.
[01:59:07.760 --> 01:59:20.280]  Интересует вот что. Смотрите, как это сделать за лигию. Вот. Смотрите, то есть идея такая. Давайте
[01:59:20.280 --> 01:59:27.520]  нарисуем две вертикальные касательные и будем их параллельно вращать. Очевидно, то есть в какой-то...
[01:59:27.520 --> 01:59:34.400]  Сначала у нас, допустим, одна касательная находится правее другой. Но очевидно, нас, на самом деле,
[01:59:34.400 --> 01:59:41.480]  интересует случай, когда в какой-то момент эти касательные неожиданно совпали. Правда? То есть,
[01:59:41.480 --> 01:59:48.000]  пока мы вот до нее поворачиваться будем, у нас эта касательная будет правее. Правда? Вот. Идем,
[01:59:48.000 --> 01:59:55.360]  идем, идем. Ну вот они наткнули. Что будет происходить после этого? После этого эта касательная будет
[01:59:55.360 --> 02:00:05.080]  некоторое время левее. Вот как-то так это будет выглядеть. Вот. Видно, да? Но дальше произойдет
[02:00:05.080 --> 02:00:12.320]  следующее. В какой-то момент мы, то есть в какой-то момент, мы неожиданно обнаружим, что, то есть,
[02:00:12.320 --> 02:00:16.640]  ну, в этот момент, в общем-то, начиная с этого момента, вот эта левая касательная пересекает
[02:00:16.640 --> 02:00:23.920]  многоугольник. Правда? Видно, да? Значит, она идет, идет, идет. И вот в какой-то момент мы наткнулись на
[02:00:23.920 --> 02:00:33.400]  вот эту вот вторую общую касательную. Ну вот. В это, ну вот. То есть, после этого она пересекать
[02:00:33.400 --> 02:00:39.000]  перестала. Но заметим, что, кстати, вот эти вот аккуратные повороты и ситуации, когда они наложились,
[02:00:39.000 --> 02:00:43.720]  вот эти касательные, можно отслеживать прям за линию. Таким вот двумя, потому что мы тут повороты
[02:00:43.720 --> 02:00:53.000]  будем делать, естественно, двумя указателями. Вот. После того, как мы их повернули. Ну вот. То есть,
[02:00:53.000 --> 02:00:57.160]  в результате, ну вот. И, в общем-то, когда отследить, то есть, если вот эта вот касательная начала
[02:00:57.160 --> 02:01:01.720]  пересекать многоугольник, то, в общем, где она его пересекает, какие конкретно стороны пересекает,
[02:01:01.720 --> 02:01:07.720]  мы тоже можем там вот этими двумя указателями аккуратно отслеживать. В результате, в какой-то
[02:01:07.720 --> 02:01:12.280]  момент, в каком-то направлении у нас мы найдем вот эту вот левую касательную, такую вот
[02:01:12.280 --> 02:01:22.520]  аккуратненькую. Вот. И наткнулись это. Ну вот. Нет, ну просто это если одним превращением. Да,
[02:01:22.520 --> 02:01:27.320]  потому что можно сказать, что это, да, можно говорить о том, что давайте вращать не две с
[02:01:27.320 --> 02:01:33.040]  направленной касательно две разнонаправленные, а так пока это игнорировать. То есть, пока мы
[02:01:33.040 --> 02:01:36.880]  просто поворачиваем эти касательные, поворачиваем, поворачиваем, просто веришь, что в какой-то момент они
[02:01:36.880 --> 02:01:43.800]  опять наложатся друг на друга и таким образом мы найдем. Да. Да. Ну, то есть получается, да, что если
[02:01:43.800 --> 02:01:47.600]  ваша задача найти только две внешние касательные, то с этим заморачиваться не надо. То есть, просто
[02:01:47.600 --> 02:01:52.520]  поворачивайте, там ловите моменты, когда там касательные поменялись местами один раз, потом
[02:01:52.520 --> 02:01:57.640]  ловите момент, когда они наложились второй раз. То есть, обогнали друг друга второй раз. И вот вам и
[02:01:57.640 --> 02:02:05.200]  две касательные. И это, в принципе, уже делается за линию. Ну да. То есть, как бы, если вы хотите
[02:02:05.200 --> 02:02:10.880]  внутреннее, то, по сути, да, надо просто вращать, то есть вращать просто разнонаправленные, но
[02:02:10.880 --> 02:02:19.480]  разнонаправленные касательные. Так что вот такое красивое мясо у нас получилось. Не, ну,
[02:02:19.480 --> 02:02:34.600]  а что, хорошее мясо. Такое глобальное. Стоп, они же не параллельные. Почему? Ну, они почему?
[02:02:34.600 --> 02:02:42.040]  Параллельные, но просто с 80 градусов. Мы же их также можем поворачивать. Они же вот так будут двигаться. Нет,
[02:02:42.040 --> 02:02:47.160]  почему? Я же их обе буду против часовой стрелки вращать. То есть, они как-то вот так начнут
[02:02:47.160 --> 02:02:54.400]  двигаться. В чем проблема? И будут всегда внешние. Ну нет, почему? То есть, как бы, это касательная
[02:02:54.400 --> 02:02:58.600]  прижатка к этому нугольнику, это к этому, они там бу-бу-бу, и в какой-то момент они вот наложатся вот
[02:02:58.600 --> 02:03:20.440]  здесь вот в момент вот этой касательной общей. Так что вот. Так, то ладно, кажется, вроде все,
[02:03:20.440 --> 02:03:35.920]  это все, что хотелось. Давай еще, давай-давай. Ну да. Ну, когда они обгонят друг друга. Вот. То есть,
[02:03:35.920 --> 02:03:41.000]  ну просто в этих вершинах мы видим, что это касательная левее вот этой. Потом мы их там
[02:03:41.000 --> 02:03:45.720]  поворачиваем на угол, либо вот на этот, либо на этот, вопрос кто меньше. Кстати, тоже отдельное
[02:03:45.720 --> 02:03:50.280]  упражнение как с помощью векторного произведения. Там без всяких вычислений в явном виде углов,
[02:03:50.600 --> 02:03:56.920]  на кого надо поворачивать. Значит, повернули. Проверили. Верно ли, что это касательная все
[02:03:56.920 --> 02:04:01.920]  еще левее этой? Окей. Повернули еще, проверили, что это все еще левее. Поворачиваем в качестве
[02:04:01.920 --> 02:04:12.360]  в какой-то момент. Проверяем, лежит ли это касательная левее. Ой, не лежит. Упс. Ну, вот
[02:04:12.360 --> 02:04:18.720]  эта прямая лежит левее вот этой. Ну, то есть, если я встану на эту прямую и буду смотреть на нее,
[02:04:18.880 --> 02:04:25.360]  вот эта касательная будет лежать левее. Да, вот ровно в момент касательной. Мы,
[02:04:25.360 --> 02:04:29.800]  конечно, не знаем, когда наступит этот момент касательной, но мы знаем, что будет
[02:04:29.800 --> 02:04:34.440]  там перед этим какой-то момент, вот когда эта касательность, скажем,
[02:04:34.440 --> 02:04:39.000]  через эту прямую проходила, и тут касательная была левее, ноpartоом мы, допустим, повернулись вот до
[02:04:39.000 --> 02:04:43.160]  этого ребра, и тут вот эта касательность стала неожиданно правее, чем вот этой вот. И
[02:04:43.160 --> 02:04:47.160]  И тогда мы знаем, что где-то между ними есть общая касательная, и по сути,
[02:04:47.160 --> 02:04:52.160]  это, видимо, и будет означать, что эту касательную надо просто через вот эти две вершины провести.
[02:04:56.160 --> 02:05:02.160]  Вот у вас заступил момент, когда действительно у вас тут произошел обгон.
[02:05:02.160 --> 02:05:06.160]  Теперь вы просто на самом деле идете дальше и ждете следующего обгона,
[02:05:06.160 --> 02:05:09.160]  просто вы знаете, что там произойдет второй обгон.
[02:05:09.160 --> 02:05:13.160]  И этот второй обгон произойдет ровно, когда будет вот эта вот та самая общая,
[02:05:13.160 --> 02:05:16.160]  вторая общая касательная внешняя.
[02:05:17.160 --> 02:05:18.160]  Вот и все.
[02:05:18.160 --> 02:05:20.160]  В самом деле такая.
[02:05:20.160 --> 02:05:23.160]  Просто как вообще действительно можно решать такую задачу?
[02:05:25.160 --> 02:05:29.160]  Но здесь, конечно, рекомендуется просто метод...
[02:05:29.160 --> 02:05:31.160]  Нет, почему нормально?
[02:05:31.160 --> 02:05:33.160]  Ну, можно применить метод сканирующей...
[02:05:33.160 --> 02:05:35.160]  Можно же там афинное преобразование применить всегда.
[02:05:35.160 --> 02:05:38.160]  Значит, есть метод сканирующей прямой.
[02:05:39.160 --> 02:05:40.160]  То есть что он означает?
[02:05:40.160 --> 02:05:44.160]  Ну, то есть вот у нас есть какой-нибудь многоугольник, как всегда, экзотический, да?
[02:05:45.160 --> 02:05:49.160]  Там вот какого-нибудь такого там мерзопакостного года.
[02:05:55.160 --> 02:05:56.160]  Вот.
[02:05:56.160 --> 02:05:59.160]  Ну ладно, я остановлюсь на этом.
[02:06:00.160 --> 02:06:01.160]  Вот.
[02:06:02.160 --> 02:06:04.160]  Значит, будем идти с канлайном.
[02:06:05.160 --> 02:06:08.160]  В каждый момент времени у нас есть...
[02:06:09.160 --> 02:06:11.160]  Ну, точнее так, почти в каждый момент времени.
[02:06:13.160 --> 02:06:15.160]  Значит, наш вертикальный сканлайн种 небольшой,
[02:06:15.160 --> 02:06:19.160]  гело-гело-гело-гело-гело.
[02:06:20.160 --> 02:06:21.160]  Вот.
[02:06:21.160 --> 02:06:23.160]  Ну, в общем, вот это вот.
[02:06:23.160 --> 02:06:28.460]  значит, наш вертикальный сканлайн пересекает несколько
[02:06:28.460 --> 02:06:29.240]  отрезков.
[02:06:29.320 --> 02:06:36.160]  При этом мы видим следующее, что если идти сверху вниз,
[02:06:36.160 --> 02:06:38.300]  то некоторое время сканлайн идет вне многоугольника,
[02:06:38.300 --> 02:06:42.120]  потом идёт внутри многоугольника, потом вне, потом внутри,
[02:06:42.120 --> 02:06:44.540]  потом вне, потом внутри и потом вне, потом вне,
[02:06:44.540 --> 02:06:51.360]  внутри, вне, внутри, вне,展е, и дальше уже идет на бесконечность
[02:06:51.360 --> 02:06:52.640]  естественно вне.
[02:06:52.640 --> 02:07:03.220]  Более того, в принципе, если вот таким сканлайном
[02:07:03.220 --> 02:07:09.480]  идти, то мы замечаем, что эти отрезки у нас некоторое
[02:07:09.480 --> 02:07:12.320]  время фиксированы, но в какой-то момент там появляются
[02:07:12.320 --> 02:07:13.320]  новые.
[02:07:13.320 --> 02:07:15.480]  То есть когда-то появляется вершина, и это означает,
[02:07:15.480 --> 02:07:18.160]  что у нас тут мог появиться даже два новых отрезка,
[02:07:18.160 --> 02:07:19.400]  или исчезнуть два отрезка.
[02:07:20.400 --> 02:07:21.400]  Вот видно, да?
[02:07:21.400 --> 02:07:23.900]  Ну или мог один закончиться, а появится новый.
[02:07:25.900 --> 02:07:27.400]  Но идея тогда такая.
[02:07:27.400 --> 02:07:30.400]  Ну, по крайней мере, давайте просто сейчас обсудим идею,
[02:07:30.400 --> 02:07:32.400]  после этого будем обсуждать технические детали.
[02:07:32.400 --> 02:07:35.900]  Предположим, что в какой-то момент сканлайн наткнулся
[02:07:35.900 --> 02:07:37.400]  на точечку.
[02:07:37.400 --> 02:07:40.400]  То есть у нас обычно есть два типа событий, то есть
[02:07:40.400 --> 02:07:43.400]  какие-то события, типа отрезок начался, отрезок закончился,
[02:07:43.400 --> 02:07:44.900]  и мы наткнулись на точку.
[02:07:44.900 --> 02:07:49.900]  Ну вот, тогда идея такая.
[02:07:49.900 --> 02:07:53.900]  То есть давайте, допустим, мы эти отрезки храним в
[02:07:53.900 --> 02:07:56.900]  каком-нибудь, в чем-нибудь типа сета.
[02:07:56.900 --> 02:08:00.900]  Тогда если вы наткнулись на точку, вам надо проверить,
[02:08:00.900 --> 02:08:03.900]  сколько отрезков в этом сете находится ниже вашей
[02:08:03.900 --> 02:08:04.900]  точки.
[02:08:04.900 --> 02:08:07.900]  Если их оказалось четное количество, то точка вне,
[02:08:07.900 --> 02:08:10.900]  если нечетная, то она внутри.
[02:08:10.900 --> 02:08:13.900]  Ну или если в каком-то отрезке она там оказалась с помощью
[02:08:13.900 --> 02:08:18.900]  сета, его тоже находите, то тогда она просто на нем
[02:08:18.900 --> 02:08:20.900]  и лишит.
[02:08:20.900 --> 02:08:23.900]  Понятная идея, да?
[02:08:23.900 --> 02:08:26.900]  Да, нет, наверное.
[02:08:26.900 --> 02:08:32.900]  Вот, хорошо.
[02:08:32.900 --> 02:08:36.900]  На уровне идеи все красиво.
[02:08:36.900 --> 02:08:39.900]  Но дьявол, как всегда, кроется в белочах.
[02:08:39.900 --> 02:08:42.900]  Какие тут мелочи возникают?
[02:08:42.900 --> 02:08:45.900]  Ну, начнем с того, что сет не скажет вам.
[02:08:45.900 --> 02:08:47.900]  Ну, во-первых, да, вопрос.
[02:08:47.900 --> 02:08:51.900]  Какой компаратор сету скарбливать?
[02:08:51.900 --> 02:08:54.900]  Ну, если вы храните эти отрезки в сете, то сет же требует
[02:08:54.900 --> 02:08:56.900]  не просто отрезки, а еще и компаратор.
[02:08:56.900 --> 02:09:04.900]  Так вот, какой компаратор сету скарбливать?
[02:09:04.900 --> 02:09:06.900]  Ну, это еще полбеды, потому что скарбливать-то понятно,
[02:09:06.900 --> 02:09:09.900]  что для любых двух отрезков можно определить, какой
[02:09:09.900 --> 02:09:13.900]  отрезок находится ниже или выше.
[02:09:13.900 --> 02:09:16.900]  Нет, в общем, не обязательно динамически.
[02:09:16.900 --> 02:09:22.900]  Если данные два отрезка, у которых проекции по Х пересекаются,
[02:09:22.900 --> 02:09:28.900]  то вы можете просто определить, кто ниже, кто выше.
[02:09:28.900 --> 02:09:31.900]  То есть там, конечно, придется рассматривать такое,
[02:09:31.900 --> 02:09:34.900]  что, имейте в виду, что когда вы рассматриваете вот этот отрезок,
[02:09:34.900 --> 02:09:37.900]  вот этот отрезок, то этот вы должны рассматривать как более высокий.
[02:09:37.900 --> 02:09:40.900]  Вот там вот всякие такие подлянки начинаются.
[02:09:40.900 --> 02:09:42.900]  Вот.
[02:09:42.900 --> 02:09:45.900]  Но как бы допустим, это тем или иным способом
[02:09:45.900 --> 02:09:48.900]  завод единицы решается.
[02:09:48.900 --> 02:09:50.900]  Дальше что?
[02:09:50.900 --> 02:09:52.900]  Ну, дальше возникает проблема.
[02:09:52.900 --> 02:09:55.900]  Сет не скажет вам, сколько элементов находится меньше задного.
[02:09:55.900 --> 02:09:58.900]  И дело даже не в том, что эту точку надо еще оформить
[02:09:58.900 --> 02:10:01.900]  как отрезок и пихнуть в сет.
[02:10:01.900 --> 02:10:04.900]  Но как бы проблема в том, что сет умеет искать
[02:10:04.900 --> 02:10:06.900]  какой-нибудь лавербаунд и пербаунд.
[02:10:06.900 --> 02:10:09.900]  Но он не умеет сказать вам,
[02:10:09.900 --> 02:10:13.900]  сколько отрезков находится ниже или выше.
[02:10:18.900 --> 02:10:20.900]  Ну, тут разные варианты.
[02:10:20.900 --> 02:10:22.900]  В разной степени тупизны.
[02:10:22.900 --> 02:10:24.900]  Первый сет тупизны.
[02:10:24.900 --> 02:10:25.900]  А что?
[02:10:25.900 --> 02:10:27.900]  А что сет прямо стрелевский надо?
[02:10:27.900 --> 02:10:29.900]  Давайте-те картячку напишем.
[02:10:29.900 --> 02:10:31.900]  Все берем и пишем.
[02:10:31.900 --> 02:10:34.900]  Кстати, у такого метода есть преимущество,
[02:10:34.900 --> 02:10:37.900]  что если вы это поняли, что вам надо не это,
[02:10:37.900 --> 02:10:40.900]  чуть другое, то в дикартячку вы поправите быстро.
[02:10:40.900 --> 02:10:42.900]  Там у вас больше возможностей.
[02:10:42.900 --> 02:10:45.900]  Но минус в том, что придется писать дикартячку.
[02:10:47.900 --> 02:10:49.900]  Какой еще метод?
[02:10:49.900 --> 02:10:51.900]  Есть, конечно, знаменитый,
[02:10:51.900 --> 02:10:54.900]  есть, конечно, как всегда, его величество
[02:10:54.900 --> 02:10:58.900]  гну, что-то там, по БДС.
[02:11:00.900 --> 02:11:02.900]  Да, знаменитый, да.
[02:11:02.900 --> 02:11:04.900]  В широко известные в узких кругах
[02:11:04.900 --> 02:11:07.900]  изучавших не просто C++, а конкретные компиляторы.
[02:11:07.900 --> 02:11:09.900]  Потому что в стандарте этого нет.
[02:11:09.900 --> 02:11:11.900]  Стандарт про это не знает.
[02:11:11.900 --> 02:11:13.900]  Но в гнушных компиляторах
[02:11:13.900 --> 02:11:16.900]  есть специальные виды двоичных деревьев поиска,
[02:11:16.900 --> 02:11:19.900]  в которых можно делать что-то более умное.
[02:11:19.900 --> 02:11:22.900]  Например, как видим, самое простое применение
[02:11:22.900 --> 02:11:25.900]  на катую порядковую статистику в сетах находить.
[02:11:29.900 --> 02:11:31.900]  Да, можно так.
[02:11:33.900 --> 02:11:35.900]  Но есть, конечно, более наглотие.
[02:11:35.900 --> 02:11:39.900]  Я утверждаю, что на самом деле с сетом обойтись можно.
[02:11:42.900 --> 02:11:43.900]  Идея такая.
[02:11:43.900 --> 02:11:45.900]  А давайте заявим, что у вас многоугольник
[02:11:45.900 --> 02:11:47.900]  идет против часовой стрелки.
[02:11:49.900 --> 02:11:51.900]  Можем такое сказать?
[02:11:52.900 --> 02:11:53.900]  Тогда смотрите.
[02:11:53.900 --> 02:11:55.900]  Вот жила была точка.
[02:11:55.900 --> 02:11:57.900]  Допустим, вы там в сете нашли ребро,
[02:11:57.900 --> 02:11:59.900]  ну там как бы гловербаундом нашли
[02:11:59.900 --> 02:12:01.900]  первое ребро, которое не ниже.
[02:12:02.900 --> 02:12:04.900]  И быстренько за вот единицы поняли,
[02:12:04.900 --> 02:12:06.900]  не лежит ли точка на нем.
[02:12:07.900 --> 02:12:10.900]  Тогда как определить у вас точка внутри или вовне?
[02:12:11.900 --> 02:12:12.900]  Да очень просто.
[02:12:12.900 --> 02:12:14.900]  Вам нужно просто на этом ребре было бы
[02:12:14.900 --> 02:12:16.900]  хрорить какую-нибудь информацию на тему того,
[02:12:16.900 --> 02:12:18.900]  а при обходе против часовой стрелки
[02:12:18.900 --> 02:12:21.900]  оно идет туда или туда?
[02:12:23.900 --> 02:12:25.900]  Потому что если оно идет, скажем, туда,
[02:12:25.900 --> 02:12:27.900]  то вы легко понимаете, что это точка вне.
[02:12:27.900 --> 02:12:30.900]  А если в эту сторону, то, наоборот, внутри.
[02:12:30.900 --> 02:12:32.900]  То есть на самом деле,
[02:12:32.900 --> 02:12:34.900]  обычный STD-сет
[02:12:34.900 --> 02:12:36.900]  прекрасно решает.
[02:12:36.900 --> 02:12:38.900]  Прекрасно решает.
[02:12:40.900 --> 02:12:41.900]  Вот.
[02:12:43.900 --> 02:12:45.900]  Состик, кстати, неожиданно.
[02:12:45.900 --> 02:12:47.900]  Я про сколько лет это рассказываю,
[02:12:47.900 --> 02:12:49.900]  мне только сейчас в голову пришло.
[02:12:50.900 --> 02:12:51.900]  Вот.
[02:12:51.900 --> 02:12:53.900]  Миша, тебе это тоже пришло?
[02:12:53.900 --> 02:12:55.900]  Зачем? У меня есть ордер и цепь.
[02:12:57.900 --> 02:12:59.900]  Нет, ну да, потому что популярный метод
[02:12:59.900 --> 02:13:01.900]  ордер и цепь это как бы сейчас
[02:13:01.900 --> 02:13:03.900]  просто де-факто может быть стандарт.
[02:13:03.900 --> 02:13:05.900]  Но на самом деле, в ордер и цепь
[02:13:05.900 --> 02:13:07.900]  в ордер и цепь тут необходимости нет.
[02:13:07.900 --> 02:13:09.900]  Потому что надо. То есть если вот...
[02:13:11.900 --> 02:13:13.900]  Ордер и цепь это в принципе то,
[02:13:13.900 --> 02:13:15.900]  что у вас получится, когда вы возьмете...
[02:13:15.900 --> 02:13:17.900]  То есть это тот вот, это сет из ПБДСа,
[02:13:17.900 --> 02:13:19.900]  который умеет в какую порядку и статистику.
[02:13:19.900 --> 02:13:21.900]  Ты его можно назвать не ордер и цепь,
[02:13:21.900 --> 02:13:25.900]  а, например, different equation course.
[02:13:25.900 --> 02:13:27.900]  Там type-d.
[02:13:29.900 --> 02:13:30.900]  Вот.
[02:13:30.900 --> 02:13:32.900]  Ну, короче говоря, не надо этот ПДС,
[02:13:32.900 --> 02:13:34.900]  вот просто так делайте и все.
[02:13:36.900 --> 02:13:37.900]  Хорошо.
[02:13:37.900 --> 02:13:38.900]  Ладно.
[02:13:38.900 --> 02:13:40.900]  С эту задачку исправили.
[02:13:40.900 --> 02:13:42.900]  Но есть другая подляночка.
[02:13:43.900 --> 02:13:47.900]  Есть еще такая веселая подляночка.
[02:13:48.900 --> 02:13:50.900]  Такая веселая подляночка.
[02:13:50.900 --> 02:13:52.900]  Она заключается в том...
[02:13:54.900 --> 02:13:56.900]  Значит, она заключается в том, что
[02:13:57.900 --> 02:13:59.900]  есть вертикальные отрезки.
[02:14:02.900 --> 02:14:04.900]  Ну, повернуть сказали.
[02:14:04.900 --> 02:14:06.900]  Да нет, можно их предварить.
[02:14:06.900 --> 02:14:08.900]  Нет, тут как всегда два варианта.
[02:14:08.900 --> 02:14:11.900]  Можем сделать так, чтобы вертикальных отрезков не было.
[02:14:11.900 --> 02:14:13.900]  Для этого, если хотим целых числах,
[02:14:13.900 --> 02:14:15.900]  то у нас есть афинное преобразование какое-нибудь.
[02:14:17.900 --> 02:14:18.900]  Вот.
[02:14:18.900 --> 02:14:20.900]  Но это, я боюсь, может привести
[02:14:20.900 --> 02:14:22.900]  к каким-то проблемам с типами.
[02:14:23.900 --> 02:14:24.900]  Вот.
[02:14:24.900 --> 02:14:26.900]  Второй вариант отдельно проверить.
[02:14:26.900 --> 02:14:28.900]  Да, можно обнаглеть.
[02:14:28.900 --> 02:14:30.900]  Можно сказать так,
[02:14:30.900 --> 02:14:32.900]  что давайте считать, что у вас
[02:14:32.900 --> 02:14:34.900]  вертикальных отрезков нет вообще.
[02:14:36.900 --> 02:14:38.900]  Потому что в любом ином случае
[02:14:38.900 --> 02:14:40.900]  все, что вам нужно, будет это
[02:14:40.900 --> 02:14:42.900]  данный набор вертикальных...
[02:14:42.900 --> 02:14:43.900]  Под задача мелкая.
[02:14:43.900 --> 02:14:45.900]  Данный набор вертикальных отрезков.
[02:14:47.900 --> 02:14:49.900]  И данный набор точек.
[02:14:49.900 --> 02:14:51.900]  Для каждой точки скажите, пожалуйста,
[02:14:51.900 --> 02:14:53.900]  не лежит ли случайно эта точка
[02:14:53.900 --> 02:14:55.900]  в одном из этих вертикальных отрезков,
[02:14:55.900 --> 02:14:57.900]  да или нет.
[02:14:57.900 --> 02:14:59.900]  На самом деле плюс этого подхода в том,
[02:14:59.900 --> 02:15:01.900]  что мы также обрабатываем вершины,
[02:15:01.900 --> 02:15:03.900]  которые вертикальные отрезки длины 0.
[02:15:03.900 --> 02:15:05.900]  Потому что если точка попадает в окрестность вершины,
[02:15:05.900 --> 02:15:07.900]  там не особо приятно в самом сете происходить.
[02:15:07.900 --> 02:15:09.900]  Но если плюсепсию написать...
[02:15:09.900 --> 02:15:11.900]  На самом деле, я утверждаю,
[02:15:11.900 --> 02:15:13.900]  что если правильно написать...
[02:15:13.900 --> 02:15:15.900]  То есть если правильно написать,
[02:15:15.900 --> 02:15:17.900]  сортировать события при одинаковых х,
[02:15:17.900 --> 02:15:19.900]  то на самом деле этого всего не надо.
[02:15:19.900 --> 02:15:21.900]  Я верю, но я
[02:15:21.900 --> 02:15:23.900]  несколько раз пытался правильно сортировать,
[02:15:23.900 --> 02:15:25.900]  но до конца правильно так и не смог.
[02:15:25.900 --> 02:15:27.900]  Багу словил много, поэтому...
[02:15:27.900 --> 02:15:29.900]  Понятно, понятно.
[02:15:29.900 --> 02:15:31.900]  Теоретически такое есть.
[02:15:31.900 --> 02:15:33.900]  Была под задача.
[02:15:33.900 --> 02:15:35.900]  Куча вертикальных отрезков и куча точек.
[02:15:35.900 --> 02:15:37.900]  Для каждой точки, скажите, пожалуйста,
[02:15:37.900 --> 02:15:39.900]  лежит ли она хоть на каком-то из этих отрезков.
[02:15:39.900 --> 02:15:41.900]  Эта задача, понятно,
[02:15:41.900 --> 02:15:43.900]  тем или иным способом решается.
[02:15:43.900 --> 02:15:45.900]  Например, отсортируем все отрезки
[02:15:45.900 --> 02:15:47.900]  по х при равных х,
[02:15:47.900 --> 02:15:49.900]  естественно, по высоте.
[02:15:49.900 --> 02:15:51.900]  Для каждой точки вы просто бинпоиском найдете
[02:15:51.900 --> 02:15:53.900]  нужный отрезок, если он есть.
[02:15:55.900 --> 02:15:57.900]  Логично, да?
[02:15:57.900 --> 02:15:59.900]  Так что...
[02:15:59.900 --> 02:16:01.900]  Можно это отдельно написать.
[02:16:01.900 --> 02:16:03.900]  Для программистов вашего уровня
[02:16:03.900 --> 02:16:05.900]  это проблемы не будет.
[02:16:05.900 --> 02:16:07.900]  То есть для каких-нибудь
[02:16:07.900 --> 02:16:09.900]  восьмиклассников на регионе это могло быть
[02:16:09.900 --> 02:16:11.900]  полноценной едва ли не третья задача, конечно.
[02:16:11.900 --> 02:16:13.900]  Ну ладно, вторая.
[02:16:13.900 --> 02:16:15.900]  Хорошо, вторая.
[02:16:15.900 --> 02:16:17.900]  Хотя нет, вторую сейчас полегче дают.
[02:16:17.900 --> 02:16:19.900]  Все-таки скорее третья.
[02:16:19.900 --> 02:16:21.900]  В первый день, конечно.
[02:16:21.900 --> 02:16:23.900]  Вот.
[02:16:23.900 --> 02:16:25.900]  Ну во второй там уже...
[02:16:25.900 --> 02:16:27.900]  Нет, во второй что-то помощнее дадут.
[02:16:27.900 --> 02:16:29.900]  Там, причем, такой стандартный
[02:16:29.900 --> 02:16:31.900]  тоже геом, здесь тоже там.
[02:16:31.900 --> 02:16:33.900]  Потому что у нас будет, например,
[02:16:33.900 --> 02:16:35.900]  стандартная задача на сканлайн,
[02:16:35.900 --> 02:16:37.900]  это найдите какую-нибудь площадь объединения
[02:16:37.900 --> 02:16:39.900]  прямоугольников со сторонами параллельными
[02:16:39.900 --> 02:16:41.900]  А7-координат.
[02:16:41.900 --> 02:16:43.900]  То есть там, по-моему, на регионе
[02:16:43.900 --> 02:16:45.900]  была едва ли не такая задача.
[02:16:45.900 --> 02:16:47.900]  Вот. Ну окей, доживем.
[02:16:47.900 --> 02:16:49.900]  Значит, смотрите, это у нас вертикальные прямые.
[02:16:49.900 --> 02:16:51.900]  Ну, то есть можно их так делать.
[02:16:51.900 --> 02:16:53.900]  Но на самом деле я утверждаю, что если
[02:16:53.900 --> 02:16:55.900]  очень-очень-очень аккуратно сортировать
[02:16:55.900 --> 02:16:57.900]  события, то на самом деле проблем не будет.
[02:16:59.900 --> 02:17:01.900]  Потому что мне, например,
[02:17:01.900 --> 02:17:03.900]  хочется сделать вот как.
[02:17:07.900 --> 02:17:09.900]  Значит,
[02:17:09.900 --> 02:17:11.900]  события придется...
[02:17:11.900 --> 02:17:13.900]  Я предлагаю при равных х...
[02:17:15.900 --> 02:17:17.900]  Значит, при равных х...
[02:17:17.900 --> 02:17:19.900]  Я предлагаю так. Во-первых,
[02:17:19.900 --> 02:17:21.900]  я предлагаю при равных х
[02:17:21.900 --> 02:17:23.900]  все события сортировать, естественно,
[02:17:23.900 --> 02:17:25.900]  по игроку.
[02:17:25.900 --> 02:17:27.900]  Понятно, да?
[02:17:27.900 --> 02:17:29.900]  Далее.
[02:17:29.900 --> 02:17:31.900]  Еще я предлагаю,
[02:17:31.900 --> 02:17:33.900]  при равных х сортируем
[02:17:33.900 --> 02:17:35.900]  по игроку.
[02:17:39.900 --> 02:17:41.900]  А, ну да.
[02:17:41.900 --> 02:17:43.900]  Но тогда, в общем-то, остается
[02:17:43.900 --> 02:17:45.900]  только одно.
[02:17:45.900 --> 02:17:47.900]  Тогда нам
[02:17:47.900 --> 02:17:49.900]  еще останется...
[02:17:51.900 --> 02:17:53.900]  Что нам останется?
[02:17:53.900 --> 02:17:55.900]  Останется нам следующее.
[02:17:55.900 --> 02:17:57.900]  Останется только, надо понять, что делать,
[02:17:57.900 --> 02:17:59.900]  если у нас в точке
[02:17:59.900 --> 02:18:01.900]  сомкнулись два события. То есть у нас же в точке
[02:18:01.900 --> 02:18:03.900]  могли сомкнуться два события, если это вершина, правда?
[02:18:03.900 --> 02:18:05.900]  Что?
[02:18:05.900 --> 02:18:07.900]  Нет, ну два события
[02:18:07.900 --> 02:18:09.900]  с одинаковым х и одинаковым игроком.
[02:18:09.900 --> 02:18:11.900]  Ладно, могло быть три, ладно.
[02:18:11.900 --> 02:18:13.900]  Но два отрезка сомкнулись,
[02:18:13.900 --> 02:18:15.900]  и это еще и точка сверху.
[02:18:15.900 --> 02:18:17.900]  Ну, кстати, да, совсем в принципе, конечно,
[02:18:17.900 --> 02:18:19.900]  это можно решить сразу, точки закидаем в сет,
[02:18:19.900 --> 02:18:21.900]  и там для запросов всех выясним,
[02:18:21.900 --> 02:18:23.900]  не вершина ли это.
[02:18:23.900 --> 02:18:25.900]  Это как бы уже совсем...
[02:18:25.900 --> 02:18:27.900]  Можно эту мелочь написать.
[02:18:27.900 --> 02:18:29.900]  Можно в принципе попробовать и об этом.
[02:18:29.900 --> 02:18:31.900]  Можно говорить, что при равенстве
[02:18:31.900 --> 02:18:33.900]  игроков тогда сортируем
[02:18:33.900 --> 02:18:35.900]  по классическому порядку, что сначала
[02:18:35.900 --> 02:18:37.900]  событие, типа, отрезок начался,
[02:18:37.900 --> 02:18:39.900]  потом событие,
[02:18:39.900 --> 02:18:41.900]  значит, соответственно, точка из запроса,
[02:18:43.900 --> 02:18:45.900]  а потом событие,
[02:18:45.900 --> 02:18:47.900]  отрезок закончился.
[02:18:55.900 --> 02:18:57.900]  Но там, правда, в сете
[02:18:57.900 --> 02:18:59.900]  будет еще такая...
[02:19:01.900 --> 02:19:03.900]  Но там еще будет, конечно, маленькая техническая проблема,
[02:19:03.900 --> 02:19:05.900]  что два события вот
[02:19:05.900 --> 02:19:07.900]  такого вида, на самом деле, не понятно,
[02:19:07.900 --> 02:19:09.900]  как сортирать, потому что для этих двух отрезков не понятно,
[02:19:09.900 --> 02:19:11.900]  кто из их отрезков выше, а кто ниже.
[02:19:15.900 --> 02:19:17.900]  Хотя, видимо, любой адекватный компаратор
[02:19:17.900 --> 02:19:19.900]  в этом плане должен сказать, что боевая ничья.
[02:19:31.900 --> 02:19:33.900]  Да, проблема.
[02:19:33.900 --> 02:19:35.900]  Поэтому придется, да, что... Если произошла
[02:19:35.900 --> 02:19:37.900]  такая ситуация...
[02:19:37.900 --> 02:19:39.900]  Боевой ничью нужно разрешать каким-то любым
[02:19:39.900 --> 02:19:41.900]  детерминированным образом какую-то историю?
[02:19:41.900 --> 02:19:43.900]  Нет, ну да. Но хочется просто ее
[02:19:43.900 --> 02:19:45.900]  детермируй так, что сначала появится это событие,
[02:19:45.900 --> 02:19:47.900]  а потом исчезнет это. Ну, чтобы у вас не было
[02:19:47.900 --> 02:19:49.900]  ни в коем случае времени. Поэтому, видимо,
[02:19:49.900 --> 02:19:51.900]  придется для удобства считать,
[02:19:51.900 --> 02:19:53.900]  что конкретно...
[02:19:55.900 --> 02:19:57.900]  Хочется конкретно в этом случае считать, чтобы вот этот
[02:19:57.900 --> 02:19:59.900]  отрезок, конечно, был ниже
[02:19:59.900 --> 02:20:01.900]  вот этого. Конкретно в этом случае у вас
[02:20:01.900 --> 02:20:03.900]  это может быть... Если у вас еще точка
[02:20:03.900 --> 02:20:05.900]  запроса пришла в ту же вершину,
[02:20:05.900 --> 02:20:07.900]  то у вас может быть это
[02:20:07.900 --> 02:20:09.900]  угол внутри,
[02:20:09.900 --> 02:20:11.900]  а может быть и снаружи.
[02:20:11.900 --> 02:20:13.900]  В зависимости от этого вам нужно в разном
[02:20:13.900 --> 02:20:15.900]  порядке добавлять и удалять вот эти
[02:20:15.900 --> 02:20:17.900]  два отрезка. Ну вот поэтому я хочу, чтобы вот
[02:20:17.900 --> 02:20:19.900]  если... Ну да.
[02:20:19.900 --> 02:20:21.900]  Из-за этого либо нужно отдельно обработать
[02:20:21.900 --> 02:20:23.900]  запросы в вершину,
[02:20:23.900 --> 02:20:25.900]  что я и сделал, или
[02:20:25.900 --> 02:20:27.900]  что мы уже обсудили, либо там вообще
[02:20:27.900 --> 02:20:29.900]  не получится в нормальном порядке отсортировать.
[02:20:29.900 --> 02:20:31.900]  Нет, а зачем нам этот порядок?
[02:20:31.900 --> 02:20:33.900]  А, ну да.
[02:20:33.900 --> 02:20:35.900]  Ну просто нет, я отражаю так,
[02:20:35.900 --> 02:20:37.900]  что если зафиксировать так, что
[02:20:37.900 --> 02:20:39.900]  вот этот отрезок будет
[02:20:39.900 --> 02:20:41.900]  ниже вот этого, и при этом
[02:20:41.900 --> 02:20:43.900]  мы зафиксируем, что при равных
[02:20:43.900 --> 02:20:45.900]  иксах и равных игроках
[02:20:45.900 --> 02:20:47.900]  мы сортируем именно в этой ситуации,
[02:20:47.900 --> 02:20:49.900]  тогда у нас сначала добавится этот
[02:20:49.900 --> 02:20:51.900]  отрезок, потом мы проверим точку, убедимся,
[02:20:51.900 --> 02:20:53.900]  что он там где-то лежит,
[02:20:53.900 --> 02:20:55.900]  потому что мы лавербаундом найдем вот этот отрезок.
[02:20:55.900 --> 02:20:57.900]  Нет, у вас
[02:20:57.900 --> 02:20:59.900]  могло быть четное число отрезков,
[02:20:59.900 --> 02:21:01.900]  и что?
[02:21:01.900 --> 02:21:03.900]  Сейчас, ну короче,
[02:21:03.900 --> 02:21:05.900]  у вас четность
[02:21:05.900 --> 02:21:07.900]  может нарушиться.
[02:21:07.900 --> 02:21:09.900]  Да, но если вспомнить, что мы только что придумали метод,
[02:21:09.900 --> 02:21:11.900]  в котором нам на четность вообще
[02:21:11.900 --> 02:21:13.900]  начхать. Ну
[02:21:13.900 --> 02:21:15.900]  в этом методе четность.
[02:21:15.900 --> 02:21:17.900]  То есть обратите внимание,
[02:21:17.900 --> 02:21:19.900]  вот это у этого метода неожиданные преимущества,
[02:21:19.900 --> 02:21:21.900]  нам начхать на четность,
[02:21:21.900 --> 02:21:23.900]  то есть нам начхать на четность, там важно
[02:21:23.900 --> 02:21:25.900]  только направление.
[02:21:25.900 --> 02:21:27.900]  Ну короче про нюансы того не могу говорить, но если
[02:21:27.900 --> 02:21:41.300]  да я понимаю это да да проблема согласен вот да в этом плане согласен вот ну там
[02:21:41.300 --> 02:21:44.220]  когда чуть больше будет проблем если тут возникнут всякие вот эти вот
[02:21:44.220 --> 02:21:49.020]  вертикальные случаи в вертикальных случаях надо тоже делать аккуратно что я
[02:21:49.020 --> 02:21:53.420]  отрижаю что надо делать просто что типа сначала добавят то есть ну правда если
[02:21:53.420 --> 02:21:56.780]  мы будем соревновать сначала по иксу по игроку то мы просто в вертикальных
[02:21:56.780 --> 02:22:02.380]  отрезков будем считать что сначала у нас этот отрезок появляется и мы считаем
[02:22:02.380 --> 02:22:06.760]  что его высота ну типа здесь а потом он исчезает его высота типа
[02:22:06.760 --> 02:22:19.560]  здесь но это как если бы как бы чуть чуть повернули там на эп
[02:22:19.560 --> 02:22:21.840]  селом на эп closely вправо то как бы этот отрезок был бы
[02:22:21.840 --> 02:22:24.780]  чуть чуть вот так вот он и да и мы бы смотрели сначала здесь события 84
[02:22:24.780 --> 02:22:31.380]  надо немножко по-другому рассматривать вот то есть правда там согласно этому
[02:22:31.380 --> 02:22:36.540]  методу на самом хотя а нет если нет да у нас проблема чтобы ежа точка попадала
[02:22:36.540 --> 02:22:45.820]  сюда ну вот нет почему тут хочется как раз и убедиться но можно как бы нет
[02:22:45.820 --> 02:22:52.700]  но да но мы ну как смотрите мы с какой целью сейчас общаемся мы сообщаемся
[02:22:52.780 --> 02:22:57.340]  общие идеи это понятно но как бы мы говорим о диаметре хочется максимально приблизиться
[02:22:57.340 --> 02:23:02.700]  к тому чтобы все таки как бы идею доводить до максимально там простого и надежного кода
[02:23:02.700 --> 02:23:11.540]  поэтому поэтому смотрим вот ну то есть вот ну вот ну то есть есть конечно такая надежность что
[02:23:11.540 --> 02:23:16.480]  есть а нам хочется избирать событий происходящих в одной точке при равных x о self и гыках то
[02:23:16.480 --> 02:23:20.880]  это избегается так то есть просто давайте возьмем все лыжие точки для каждой из них проверим не
[02:23:20.880 --> 02:23:26.480]  является ли она вершиной, ну как мы это проверим, запихнем вершины в сет и все, правда?
[02:23:26.480 --> 02:23:30.160]  Как мы от нашего метода комбинируем с лотиками?
[02:23:30.160 --> 02:23:38.960]  Так никак, потому что он просто все, я утверждаю, что если у нас рыжая точка не попадает ни в какую вершину,
[02:23:38.960 --> 02:23:48.960]  то на самом деле там все обрабатывается автоматически. Ну там есть, конечно, пара дополнений,
[02:23:48.960 --> 02:23:57.440]  и звучат они так. Потому что, во-первых, если, например, рыжая точка лежит на вертикальном ребре,
[02:23:57.440 --> 02:24:02.720]  обработается это так. Сначала произойдет событие, которое добавит нам в сет это вертикальное ребро,
[02:24:02.720 --> 02:24:09.200]  потом появится рыжая точка, которой мы лавербаундом найдем это вертикальное
[02:24:09.200 --> 02:24:15.880]  ребро и выясним, что рыжая точка на нем лежит, а потом произойдет событие, по которому мы это
[02:24:15.880 --> 02:24:24.920]  вертикальное ребро тупо удали. Все. Получается, вот эта ситуация рыжей точки, лежащей на вертикальном
[02:24:24.920 --> 02:24:37.600]  ребре, она убилась сама собой. В этом случае мелочи на самом деле есть такая. Всякие мелочи
[02:24:37.600 --> 02:24:41.920]  возникают, если, наоборот, тут есть вертикальное ребро, есть какая-то рыжая точка.
[02:24:41.920 --> 02:24:52.840]  То есть, тут, конечно, вот определенные проблемы могут возникнуть. Но, с другой стороны,
[02:24:52.840 --> 02:24:58.920]  тут уже тогда, допустим, у нас тут сверху должно быть вертикальное ребро, но его у нас еще нет. И
[02:24:58.920 --> 02:25:04.000]  вообще у нас тут вообще ничего нет. Но тут тогда возникает вопрос, а куда многоугольник идет дальше?
[02:25:04.000 --> 02:25:09.720]  Потому что, если он идет вот так, то заметим, что этого всего на момент появления рыжей точки
[02:25:09.800 --> 02:25:16.160]  ничего нет, и мы идем просто до ближайшего ребра, которое находится сверху и идет слева от
[02:25:16.160 --> 02:25:25.280]  многоугольника, и по нему мы все понимаем. А если у нас оно пошло как-то вот так, то тогда,
[02:25:25.280 --> 02:25:29.440]  получается, вот это ребро будет, а эти ребра нет, поэтому с этим ребром мы блестяще разбираемся.
[02:25:29.440 --> 02:25:48.240]  Потому что мы его еще не успели удалить. Смотрите, надо максимально аккуратно обрабатывать
[02:25:48.240 --> 02:25:53.480]  ситуации, когда у нас все в одной точке. И знаете, я тут сейчас неожиданно придумал,
[02:25:53.480 --> 02:25:57.520]  чтобы не заморачиваться ни с ними, ни с компилятором. Знаете, что надо сделать?
[02:25:57.520 --> 02:26:03.560]  Надо, если у нас события одинаковые в одной точке, надо сначала выкинуть отрезки.
[02:26:03.560 --> 02:26:14.080]  Хотя нет, это не... Нет, это плохо. Там не работает. Ну да. Там может быть нечетно, а может быть нечетно.
[02:26:14.080 --> 02:26:21.640]  Нет, отчетность тут ни при чем. Тут другая проблема. Вот я бы хотел, что давайте сначала мы все
[02:26:21.720 --> 02:26:27.720]  события убьем, потом все события откроем, а потом вот так. Но тогда просто возникает вот этот вот
[02:26:27.720 --> 02:26:31.440]  случай, в котором мы рискуем не понять, что эта рыжая точка здесь находится.
[02:26:31.440 --> 02:26:37.120]  Короче, лучше не думайте обработать. Короче, если мы обработали, это единообразно не
[02:26:37.120 --> 02:26:42.480]  обработается. Но нет. Я верю, что какой-нибудь способ может быть. Нет, ну в принципе неплохо,
[02:26:42.480 --> 02:26:47.800]  что мы уже придумали в принципе такой сканлайн, который может некорректно обрабатывать только
[02:26:47.800 --> 02:26:54.440]  в ситуации, когда точка является вершиной многоугольника. Все это вообще, просто в отдельный
[02:26:54.440 --> 02:27:00.360]  сет закидываем и не паримся. Вот. Так что в принципе вот такую... То есть это уже можно сказать,
[02:27:00.360 --> 02:27:03.960]  и даже сканлайн оказывается не самый убойный, как выясняется, мы еще и с сетом справляемся.
[02:27:03.960 --> 02:27:15.480]  Окей. Но есть... Но у этой задачи есть еще экзотика. А что делать, если мы не хотим делать это сканлайном,
[02:27:15.480 --> 02:27:28.840]  а мы хотим делать это в онлайне? В контесте нет вообще. Невозможно. Да ладно. Ну на самом деле,
[02:27:28.840 --> 02:27:33.440]  самое интересное, что этот метод можно реализовать таким образом, чтобы точки у вас появлялись в
[02:27:33.440 --> 02:27:40.280]  качестве событий. Да. То есть на самом деле идея в том, что этот сет можно сделать персистентно.
[02:27:40.280 --> 02:27:45.360]  То есть просто прогоняемся сканлайн и храним все версии сета, которые в процессе хранятся.
[02:27:45.360 --> 02:27:52.040]  Тут уже придется дикардачи писать. Ну да. Тут придется. Тут вы ничего не поделаете.
[02:27:52.040 --> 02:28:03.600]  А есть способ без персистентного дикардачи? Мне неизвестен. Так. А так может и есть. Да,
[02:28:03.600 --> 02:28:08.480]  но мне неизвестен. А так в принципе да, да, да. А так в принципе... То есть конечно недостаток
[02:28:08.480 --> 02:28:14.200]  конечно в том, что этот сканлайд вам придется за n log n делать, конечно, не за n. Потому что
[02:28:14.200 --> 02:28:20.960]  каждое событие все-таки так или иначе за логарифом будет. Как вы хотите за n делать? Вот то то и оно,
[02:28:20.960 --> 02:28:28.760]  что никак, я не знаю. Даже не персистентно. Ну да, но у нас пока в принципе даже и в онлайне это
[02:28:28.760 --> 02:28:34.440]  в общем-то n log n очевидно. Нет, ну просто идеально, ну мне кажется, идеальным был бы здесь алгоритм как
[02:28:34.440 --> 02:28:40.480]  бы от n предподсчета и логарифом на запрос. Нет, я сейчас конечно не готов это обсуждать,
[02:28:40.480 --> 02:28:46.800]  но из каких-то идей, из каких-то пары умных книжек возникает ощущение, что может быть даже
[02:28:46.800 --> 02:28:56.520]  удастся доказать, что быстрее, чем за логарифом на запрос вы это не сделаете в принципе. А черт его знает.
[02:28:56.520 --> 02:29:04.720]  Нет, это мы сидим с сетом, может быть просто не надо делать сет. Может существует какой-нибудь
[02:29:04.720 --> 02:29:29.840]  там очередной метод четырех русских. Кто такой Никифор Кузнецов? Ну может я расскажу,
[02:29:29.840 --> 02:29:33.120]  я не знаю. Для этого мне надо, чтобы за ближайший год я как бы откуда-то понял,
[02:29:33.120 --> 02:29:42.120]  как это делать быстрее. Ну может, в конце концов да. А Никифор умеет делать это сканлайн за линию.
[02:29:42.120 --> 02:29:54.000]  Нет, ну все возможно, все возможно, я не знаю там. Нет, это вещь так. Папа, какой папа?
[02:29:54.000 --> 02:30:11.840]  О господи, приходит к нам папа римский. Понятно. Как говорится, бедным папа,
[02:30:11.840 --> 02:30:25.400]  почему только не приходится заниматься. Римский папа смотрится успокоее. Так,
[02:30:25.400 --> 02:30:33.480]  ладно, это был негугуль. Ну ладно, раз уж об этом зашла речь, что еще вообще можно делать сканлайном?
[02:30:33.480 --> 02:30:42.680]  Ну есть, конечно, вариант задачи попроще. Ну там, на самом деле, да, есть две задачи попроще.
[02:30:42.680 --> 02:30:50.120]  Но одна, конечно, абсолютно классическая задача, которую дали в прошлом году как шестую задачу
[02:30:50.120 --> 02:30:58.840]  региона. Или даже третью. Я сильно удивился, но там действительно задача ушла недалеко от каких-то
[02:30:58.840 --> 02:31:07.680]  абсолютно стандартных конструкций вида. То есть дано несколько прямоугольников,
[02:31:07.680 --> 02:31:18.600]  стороны которых параллельный осямкоординат. Ну, например, мне очень хочется найти точку,
[02:31:18.600 --> 02:31:26.040]  которая покрыта наибольшим количеством многоугольников. Ну, например. Или просто мне там
[02:31:26.040 --> 02:31:31.440]  дано куча запросов, и в каждой запрос эта точка, какая-нибудь рыжая точка, мне жутко интересно,
[02:31:31.440 --> 02:31:44.040]  каким количеством прямоугольников она покрыта. Но это задача решать как-то попроще. Да, то есть
[02:31:44.040 --> 02:31:51.360]  здесь просто делаем сканлайн и любая версия ДО, которая вам подходит. Можно сделать прям,
[02:31:51.360 --> 02:32:00.360]  ну если не хочется думать, то можно прям неявное ДО. Вот, то есть как бы понятно,
[02:32:00.360 --> 02:32:06.440]  что речь у нас идет о массовом прибавлении. Если у нас все оффлайн, а скорее всего так и есть,
[02:32:06.440 --> 02:32:19.720]  то можно в принципе координаты сжать и сделать все это нормальным ДО. Ну в онлайн. Ну типа.
[02:32:19.720 --> 02:32:26.920]  Нет, то там такое, да. Вот, что еще есть? Ну, на самом деле, да, есть конечно, то есть там разные,
[02:32:26.920 --> 02:32:33.040]  то есть таким методом с прямоугольниками можно делать очень много чего. Самое сложное,
[02:32:33.040 --> 02:32:38.520]  что можно делать, это допустим, это найти в сумму площадь объединения этих прямоугольников.
[02:32:38.520 --> 02:32:46.560]  Да, потому что в ней приходится дольше всего думать, какое ДО надо сделать.
[02:32:46.560 --> 02:32:54.600]  Ну по сути, да. Ну да, тут просто оказывается, если вы хотите объединения, то вам нужно, понятно,
[02:32:54.600 --> 02:32:58.280]  в каждой точке мы все еще храним, сколько многоугольников у нас проходит, и нам надо
[02:32:58.280 --> 02:33:06.440]  находить, через сколько клетчик проходит хотя бы один многоугольник. Как это сделать? Но это для
[02:33:06.440 --> 02:33:10.920]  этого нужно просто знать, а через сколько клетчик проходит ноль многоугольников. То есть идея
[02:33:10.920 --> 02:33:15.840]  оказывается, что у нас дерево отрезков на прибавлении и минимум, причем вместе с минимумом мы храним
[02:33:15.840 --> 02:33:23.040]  сколько у нас минимумов. Ну либо сделаем просто чуть-чуть дальше, короче, добавим прямую, где всегда ноль.
[02:33:23.040 --> 02:33:31.200]  Ну, например. А, ну да, да, пожалуйста. Да, то есть вот такие на самом деле идеи начинают возникать,
[02:33:31.200 --> 02:33:36.200]  да, но это просто вот, да, ну просто такие технические вещи, иногда вот просто, как все равно, нет-нет,
[02:33:36.200 --> 02:33:41.120]  она правила направится, что такие даже умные люди просто такого не знают. То есть там начинают
[02:33:41.120 --> 02:33:45.320]  там что-то придумывать, что-то это, вот тут ничего придумывать не надо, тут уже все давно придумали.
[02:33:45.320 --> 02:33:56.160]  Вот здесь вот простое, не заезженное решение. Ну или наоборот заешенное. Вот, но тут как бы да,
[02:33:56.160 --> 02:34:03.240]  вот получилось качественно. Ладно, идем дальше. Но на самом деле с конлайном конечно решается
[02:34:03.240 --> 02:34:09.560]  вообще суперкуль, одна суперкультовая задача. Суперкультовая задача называется доно 100 тысяч
[02:34:09.560 --> 02:34:15.200]  отрезков. Скажите, пожалуйста, существует ли два из них, которые пересекаются? Вы все культовость потеряли.
[02:34:15.200 --> 02:34:27.960]  Почему? Что такое все культовость? Если где-то в условии фигурирует пьяница или курение, то сразу
[02:34:27.960 --> 02:34:37.080]  культовость возрастает пропорционально. А, ну да, а типа у нас в контесте это значит называется не
[02:34:37.080 --> 02:34:59.600]  курить. Да, рядом с внутренней точкой. Ну да, но задача тем не менее классическая. Итак,
[02:34:59.600 --> 02:35:04.320]  доно 100 тысяч отрезков пересекаются ли хотя бы два из них? Как решать такую задачу?
[02:35:04.320 --> 02:35:18.640]  Нет. Вот, все еще круче. Мы пройдемся с конлайном. Мы снова пройдемся с конлайном,
[02:35:18.640 --> 02:35:26.360]  потому что дело в том, что пока мы не дойдем до пересечения, мы отрезки, мы все отрезки можем
[02:35:26.360 --> 02:35:31.960]  прям честно хранить. Вот тоже опять у нас уже был компаратор, который по двум отрезкам говорит,
[02:35:31.960 --> 02:35:43.920]  кто ниже, кто выше. Мы в 2D живем, конечно. И мы давайте честно эти отрезки так храним. Но при этом
[02:35:43.920 --> 02:35:52.840]  идея такая, что когда у нас появляется новый отрезок, мы его как бы добавляем в сет. Кстати,
[02:35:52.840 --> 02:35:57.640]  на самом деле есть такая веселая техника, как писать компаратор. Компаратор будет ссылаться
[02:35:57.640 --> 02:36:04.880]  на глобальную переменную y, которую вы будете в процессе с конлайном увеличивать. Тьфу,
[02:36:04.880 --> 02:36:10.280]  ладно, не y, а x. Где он находится? И тогда, когда вы будете два отрезка сравнивать,
[02:36:10.280 --> 02:36:15.120]  он будет просто вычитать x координату одного отрезка, x координату другого и сообщать,
[02:36:15.120 --> 02:36:25.640]  у кого меньше. Значит, смотрите, какой тут возникает неожиданный чит. Чит возникает такой,
[02:36:25.640 --> 02:36:30.480]  что когда у вас появился новый отрезок, вы не просто его добавляете в сет, а еще и проверяете.
[02:36:30.480 --> 02:36:38.920]  Вот смотрите на двух соседей в сети и говорите, а не пересекается ли этот отрезок с кем-то из
[02:36:38.920 --> 02:36:51.920]  этих соседей? А я не сказал, что я закончил алгоритм. Вот. Но в принципе, заметим, что таким образом
[02:36:52.080 --> 02:36:57.120]  можно какие-то пересечения найти. Если компаратор в какой-то момент сказал, что я нашел два отрезка,
[02:36:57.120 --> 02:37:07.040]  то все, можно выбрасываться с криком «да». Ну а с каким криком еще мы выбрасываемся? Ну да,
[02:37:07.040 --> 02:37:11.800]  мы обычно выбрасываемся с криком «ном салюшн», «минус один», а мы теперь выбрасываемся с криком
[02:37:11.800 --> 02:37:22.760]  «да». Ну хорошо. Но как бы, допустим, мы прошли весь сканлайн и не выбросились. Значит ли это,
[02:37:22.760 --> 02:37:29.800]  что пересечений не нашлось? В таком виде, конечно, нет. Ведь давайте подумаем, могло же так,
[02:37:29.800 --> 02:37:35.720]  наверное, случиться, что вы добавили два, что есть два пересекающихся, допустим, отрезка,
[02:37:35.720 --> 02:37:47.200]  допустим, вот такие два пересекающихся отрезка, и неожиданно вы их как бы добавили в сет,
[02:37:47.200 --> 02:37:54.800]  и неожиданно не нашли, что они пересекаются. Могло быть такое? Да, конечно, могло. Ведь вполне
[02:37:54.800 --> 02:38:05.400]  вероятно, что между ними на самом деле там влезла еще пара радостей. Ну давайте предположим,
[02:38:05.400 --> 02:38:11.040]  для простоты, что вот этот отрезок, то есть вот это пересечение, это первое по иксу пересечение.
[02:38:11.040 --> 02:38:19.080]  Вот могло быть такое, да? Могло. Но теперь идея такая, что раз это самое первое пересечение,
[02:38:19.080 --> 02:38:24.440]  то до этого момента никаких проблем не будет. Но тогда сканлайн будет делать следующее. То есть
[02:38:24.440 --> 02:38:30.320]  сканлайн постепенно все эти отрезки поудаляет, и рано или поздно перед вот этим пересечением
[02:38:30.320 --> 02:38:37.080]  эти отрезки окажутся соседними. Поэтому у меня теперь дополнительный чит. Мы делаем проверку не
[02:38:37.080 --> 02:38:43.280]  только когда отрезок добавляем, но и когда отрезок удаляем. А именно, когда пришло время удалить
[02:38:43.280 --> 02:38:53.280]  отрезок, вы смотрите на его двух соседей и спрашиваете, они пересекаются ли они. Вот. И вот теперь,
[02:38:53.280 --> 02:39:00.400]  собственно, тогда алгоритм уже работает. Вот видим, уже доказательно работает.
[02:39:23.280 --> 02:39:43.400]  Ну да, проблема. Не, ну там да. Не, ну с инвариантом да. Ну тут инвариант вот аккуратен.
[02:39:43.400 --> 02:39:47.160]  Потому что на самом деле инвариант эти можно, на самом деле как бы наука в принципе может эти
[02:39:47.160 --> 02:39:54.400]  пересечения даже отлавливать и в этом месте эти отрезки в сете свапать даже. Потому что на самом
[02:39:54.400 --> 02:39:59.400]  деле, то есть, конечно, в олимпиадах я такого не встречал, но вообще как бы в науке есть теоретические
[02:39:59.400 --> 02:40:07.560]  задачи. Дано n отрезков, найдите, пожалуйста, все пересечения. И она работает за что-то типа n log n
[02:40:07.560 --> 02:40:12.920]  плюс, что-то типа там получается едва линия n log n плюс k, где k реальное количество пересечений.
[02:40:12.920 --> 02:40:26.680]  Или n plus k умножено log n. Ну да, мы просто берем. То есть, да. Ну типа да. Ну то есть,
[02:40:26.680 --> 02:40:32.720]  суть заключается в том, что на самом деле события надо хранить в сете сразу тоже. И просто для любых
[02:40:32.720 --> 02:40:36.480]  двух отрезков, которые пересекаются, мы говорим, что вот в момент пересечения будет событие,
[02:40:36.480 --> 02:40:41.920]  когда их придется посвапать. И тем или иным способом свапаем. Ну, например, рассматриваем,
[02:40:41.920 --> 02:40:47.360]  как бы тут события, вот это вот там, допустим, если это точка х, что там, и х минус и эпсилон,
[02:40:47.360 --> 02:40:54.760]  и х плюс и эпсилон. То есть там какая-то такая логика начинается. То есть там, конечно, видимо,
[02:40:54.760 --> 02:40:59.880]  так или иначе придется рассматривать там всякие совсем мерзкие случаи, когда там несколько отрезок
[02:40:59.880 --> 02:41:07.600]  пересеклись. Ой, а если это еще и вертикальный отрезок, это вообще раз. Да. Ну, то есть просто
[02:41:07.600 --> 02:41:12.360]  с вертикали, если вас задача просто найти хоть одно пересечение, ну как бы, пожалуйста. Нет,
[02:41:12.360 --> 02:41:16.640]  ну бывает такое. В принципе, такое приходится иногда писать. То есть там в 2009 году, например,
[02:41:16.640 --> 02:41:23.400]  на Всероссе там в жюри пришлось это писать в качестве чекера. Ну потому что там была задача...
[02:41:23.400 --> 02:41:29.320]  Почему они не могли написать за квадрат? Потому что там 100 тысяч было.
[02:41:30.280 --> 02:41:35.680]  Знаете, там задача была дан кактус размера 100 тысяч. Ну там, конечно,
[02:41:35.680 --> 02:41:40.600]  прыл крыша компьютера и провода, конечно, были, но по сути дан кактус на 100 тысяч. Расположите
[02:41:40.600 --> 02:41:46.720]  его вершины в квадрате миллиард на миллиард и нарисуйте ребра так, чтобы ребра были прямыми,
[02:41:46.720 --> 02:41:58.720]  пересекались они только в вершинах. Время пошло. Это же просто не курить. Нет,
[02:41:58.720 --> 02:42:05.360]  не просто не курить. Тут как бы у нас отрезки независимые. А так вообще получается дан граф,
[02:42:05.360 --> 02:42:12.400]  и надо проверить, что ребра не пересекаются где-кроме как в вершинах. То есть вот эти вот то,
[02:42:12.400 --> 02:42:17.920]  что отрезки могут попасть друг на друга в вершинах, это нам придется тем или иным способом учесть.
[02:42:17.920 --> 02:42:24.960]  Нет, я не говорю, что это совсем непонятно как делать, я говорю, что просто жюри пришлось это
[02:42:24.960 --> 02:42:30.040]  сделать. То есть нет, жюри, естественно, успешно сделали. В конце концов это первая задача в сероса
[02:42:30.040 --> 02:42:36.200]  была. Ну там реально не самая сложная задача была. Ну ладно, по современным меркам, в общем-то,
[02:42:36.200 --> 02:42:42.280]  это главное. Весь тот серос вам нужно как кубок МФТИ давать. Ну вот, так что есть подозрение,
[02:42:42.280 --> 02:42:48.080]  что вы там за три часа реально там задачи три-четыре, может быть, даже закроете. Там шестих. Ну,
[02:42:48.080 --> 02:42:57.200]  всего шести. В фражер-туре там было по три задачи. Ну, с одной стороны, можно сказать,
[02:42:57.200 --> 02:43:02.560]  что там как бы на том, на пять часов давали три задачи, 300 баллов, ну, 300 баллов ни у кого не было
[02:43:02.560 --> 02:43:08.000]  ни за тот, ни за другой тур. Там лучший результат был, по-моему, в первом туре 262, во втором, по-моему,
[02:43:08.000 --> 02:43:17.880]  по-моему, две там, ну, сколько-то в этом роде. А, ну, я помню, что там чемпиона было 430. Вот,
[02:43:17.880 --> 02:43:24.680]  но, правда, там была оговорка, что да, во-первых, там было из шестиста, во-вторых, напоминаю,
[02:43:24.680 --> 02:43:31.280]  это были те времена, когда тестирование было оффлайн. Да, когда можно было после контракта
[02:43:31.360 --> 02:43:38.040]  узнать, что ваше крутое решение без 100 баллов получает 40. Нет, ну, нет, 1 нет,
[02:43:38.040 --> 02:43:41.520]  на тестах и условиях тестировалось. Так что нет. Но, взрослые,
[02:43:41.520 --> 02:43:50.840]  дальнейшее тестирование было глубоко вашим делом. Вот, ну, странно. Хотя, пройдите,
[02:43:50.840 --> 02:43:56.520]  пройдите, ну, как минимум, а, ну, маницепт, наверное, возможно, потому что регион-то вы должны
[02:43:56.520 --> 02:44:03.600]  писать по всероссийским правилам. Так что вот это еще такая задача, значит, на сканлайн. А,
[02:44:03.600 --> 02:44:07.800]  ну, есть, конечно, еще задача в таком максимальном кресте, которую я должен был рассказать в начале,
[02:44:07.800 --> 02:44:11.440]  ну, я просто ее расскажу, потому что она там в программе экзамена обычно присутствует.
[02:44:11.440 --> 02:44:14.520]  Можно не рассказывать. Ну, нет, я кратко расскажу задачу,
[02:44:14.520 --> 02:44:19.200]  просто задаю, о чем я спрашиваю. Как решать ее, то сейчас поймете. Задача такая, дано несколько
[02:44:19.200 --> 02:44:24.520]  отрезков, каждый либо вертикальный, либо горизонтальный. Хочется найти, ну, крест, понятно,
[02:44:24.520 --> 02:44:27.400]  это вертикальный и горизонтальный отрезок, которые пересекаются. Хочется найти крест,
[02:44:27.400 --> 02:44:34.760]  но есть максимально суммарной длины или там максимального произведения. Каждый отрезок
[02:44:34.760 --> 02:44:40.120]  либо вертикальный, либо горизонтальный, да, почти наоборот. Вертикальный, горизонтальный. Ну,
[02:44:40.120 --> 02:44:45.800]  то есть понятно, что по сравнению с предыдущими задачи уже совсем ни о чем, да. Хотя, возможно,
[02:44:45.800 --> 02:44:50.000]  декортячку вам тут, ну, учитывая вот эти случаи, декортячку или ДО, конечно, по-любому писать
[02:44:50.000 --> 02:44:58.800]  придется. Вот, чтоб там максимумы какие-то на отрезки искать, но это и проблема. Вот, значит,
[02:44:58.800 --> 02:45:11.240]  это у нас сканлайн. Так, это у нас сканлайн. Сколько у нас там времени? Час до конца. Да,
[02:45:11.240 --> 02:45:20.200]  прямо уже интрига. Ладно, еще чуть-чуть перерыва выдохнуть надо. Заморозка. Что такое заморозка?
[02:45:20.200 --> 02:45:27.720]  Когда камера выключается, ну, короче, перекрывается камера, и все, в следующий час результаты нет.
[02:45:27.720 --> 02:45:33.200]  А, ну, да, да, да. А потом только после конца экзамену узнается, что там было.
[02:45:33.200 --> 02:45:47.760]  Красиво, да, красиво. Ну окей, нет, реально серьезно, перерыв надо. Что вы хотите рассказать дальше?
[02:45:47.760 --> 02:45:54.240]  Ой, хорошие вопросы. Что я хочу рассказывать дальше? Ну, по идее, я хочу про это, наверное,
[02:45:54.240 --> 02:46:00.760]  ну, видимо, имеет, наверное, смысл поговорить про выпуклооболочки. Ну, я не знаю, там дальше
[02:46:01.760 --> 02:46:10.680]  должны быть выпуклооболочки, должно быть торнарный поиск. Ну, во-первых, давайте сразу. Так,
[02:46:10.680 --> 02:46:15.560]  чтобы найти выпуклооболочку, надо ответить на такой вопрос, который, возможно, не все восьмиклассники
[02:46:15.560 --> 02:46:24.680]  ответят. А что такое выпуклооболочка вообще? Ну, мы берем все возможные комбинации дневника,
[02:46:24.680 --> 02:46:37.640]  элементы, конечно. Все, восьмиклассник уже убер. Ну, да, как-то выпуклооболочка, это как волна
[02:46:37.640 --> 02:46:44.040]  физики. Мы не будем говорить строго определения, давайте просто будем изучать свойства. Вот,
[02:46:44.040 --> 02:46:49.800]  но на самом деле выпуклооболочка даже абсолютно любому множеству можно легко ввести. Значит,
[02:46:49.800 --> 02:46:59.760]  определение звучит следующим образом. Значит, пусть у меня есть какое-то множество. Да, совершенно
[02:46:59.760 --> 02:47:07.160]  верно. То есть пусть у меня А, значит, это абсолютно, обратите внимание, даже абсолютно
[02:47:07.160 --> 02:47:14.560]  призвольное множество, там никаких требований к связности нету. Внимание, ну вот, тогда выпуклооболочкой,
[02:47:14.560 --> 02:47:33.960]  тогда конв от А, более известно как выпуклооболочка А, это пересечение таких множеств В, всех таких,
[02:47:33.960 --> 02:47:51.440]  что А является под множеством В, и В выпукло. Так это уже другой вопрос. Вот это нам еще предстоит
[02:47:51.440 --> 02:47:58.160]  выяснить, чему равна выпуклооболочка конечного числа точек. Вот, но есть вот такое определение. В
[02:47:58.160 --> 02:48:04.280]  принципе, я часто люблю, можно ввести было бы второе определение и сказать, что конв от А это
[02:48:04.280 --> 02:48:15.920]  минимальное по включению выпуклое множество, содержащее А. Вот, не понятно, почему это как бы
[02:48:15.920 --> 02:48:19.840]  адекватно корректно, но на самом деле, просто если сказать, что у вас есть вот такое выпуклое
[02:48:19.840 --> 02:48:26.240]  множество, то тогда становится корректно. То есть можно сказать, это свойство такое. То есть как бы
[02:48:26.240 --> 02:48:35.920]  есть, то есть как бы вот это пересечение, то есть такое ядро всех выпуклых множеств А, значит оно
[02:48:35.920 --> 02:48:43.680]  заведомо содержится в любом выпуклое множестве, оно конечно выпуклым является. Вот, да, можно себе
[02:48:43.680 --> 02:48:49.800]  такое сказать. В принципе, то есть на самом деле выпуклооболочка может быть абсолютно любым
[02:48:49.800 --> 02:48:56.720]  множеством. Да, то есть она может быть в принципе, то есть она может быть и кругом, но там, например,
[02:48:56.720 --> 02:49:04.600]  выпуклая оболочка какой-нибудь вот такой вот гадости, это у нас что такое? Ну, по сути, вот. Видно,
[02:49:04.600 --> 02:49:15.360]  да? Ну да, ну если взять круг и, допустим, выколоть какую-то точку, то тогда выпуклооболочка это
[02:49:15.360 --> 02:49:23.280]  просто ничего не вык... Ну да. Да, вот это интересно. Да, если выколоть точку на границе,
[02:49:23.280 --> 02:49:31.120]  то выпуклооболочка окажется весь круг, кроме вот этой точки. Да, это немножко неожиданно.
[02:49:31.120 --> 02:49:41.680]  Правда, часто, чаще всего нам, конечно, потребуется искать выпуклооболочку замкнутых множеств. А что не так?
[02:49:41.800 --> 02:49:51.060]  Мне не нравится, что если мы возьмем окружность и выпуклооболочка круг,
[02:49:51.060 --> 02:49:57.900]  reass зан Sym siso simɷ Нет. И так мы можем
[02:49:57.900 --> 02:50:01.360]  со несколькими точками делать.. Можем. Даже со счётным числом.
[02:50:01.360 --> 02:50:04.140]  Да. Но если мы возьмём окружность без окружности,
[02:50:04.140 --> 02:50:07.420]  это и выпуклооболочка внезапно не станет кругом. Не станет.
[02:50:07.420 --> 02:50:14.620]  какой момент происходит фазовый переход но в тот момент что ты выкинул не счетной
[02:50:14.620 --> 02:50:24.060]  так да тоже не обязательно если она не будет нет если оставшимся на что не всю
[02:50:24.060 --> 02:50:29.980]  доплотно то нас отрежется не точка а уже вот такая вот типа а но это да ну по сути
[02:50:29.980 --> 02:50:34.140]  ну видимо фазовый переход проходит когда ты счетная заменящина не счетные я могу
[02:50:34.140 --> 02:50:41.860]  выковать не счетная множество спокойно я могу оставить да да да да да ну хорошо
[02:50:41.860 --> 02:50:59.500]  ну хорошо хорошо пожалуйста да ладно это можно крышку опнуть да вот так хорошо но обычно
[02:50:59.860 --> 02:51:06.420]  интересует более простой вариант нас интересует просто обычно конечно нас
[02:51:06.420 --> 02:51:11.700]  интересует что да да да да но просто n точек то есть множество а это обычно просто n точек
[02:51:11.700 --> 02:51:22.180]  хочется найти выпукло оболочку спрашивает что же такое выпукло оболочка из множества из n точек
[02:51:22.180 --> 02:51:36.900]  не обязательно что такое общий много ну тут аккуратно а то знаете от у меня там
[02:51:36.900 --> 02:51:43.620]  диссертации там помпаге еще понятия открытый многоугольник там выяснялось что то есть для
[02:51:43.620 --> 02:51:49.980]  меня это вот это вот тоже было удобно считать многоугольником да это лучшие но там просто
[02:51:49.980 --> 02:51:55.260]  хотелось пересечение полуплоскостей просто там произвольно рассматривает там пересечение
[02:51:55.260 --> 02:52:01.820]  пупски еще более экзотические случаи если тоже мы видим уже в следующий раз рассмотрим вот значит
[02:52:01.820 --> 02:52:06.900]  ну что делать с точками но на самом деле да есть маленький подлый случай но первых если точка
[02:52:06.900 --> 02:52:14.300]  одна то выпукла оболочка точки это она же есть да что множество из этой точки оно оказывается
[02:52:14.300 --> 02:52:22.340]  выпукла как бы контринтуитивно это не звучало вот но также еще верно что если все точки лежат
[02:52:22.340 --> 02:52:28.940]  на одной прямой то выпукла оболочка это конечно отрезок такие базовые случаи есть а теперь
[02:52:28.940 --> 02:52:34.460]  давайте предположим что выяснилось что ну какие мы там три точки не лежащие на одной прямой в
[02:52:34.460 --> 02:52:42.620]  этом множестве найдутся давайте попробуем построить выпукла оболочку хотя да как бы по камере
[02:52:42.620 --> 02:52:49.180]  по легенде мы пока даже не догадываемся а что это вообще такое а теперь давайте думать как же
[02:52:49.180 --> 02:52:58.020]  строить выпукла оболочку так но на самом деле можно заметить но в принципе на самом деле можно
[02:52:58.020 --> 02:53:07.660]  заметить ну да остается только по доказать доказать что это оказывается доказать что это
[02:53:07.660 --> 02:53:15.060]  работает вот но как же но опять давайте значит скажем вот что а как вы думаете вот выпукла
[02:53:15.060 --> 02:53:26.140]  оболочка это вообще замкнутая множество или нет хорошо но вообще а можно ли сказать что-нибудь
[02:53:26.140 --> 02:53:29.660]  духе если множество а замкнута то его выпукла оболочка заведомо замкнута
[02:53:29.660 --> 02:53:50.700]  ну да по ходу до замкнутая да но заметим до что заметим что множество из энточек замкнута
[02:53:50.700 --> 02:53:57.660]  поэтому наверно выпукла оболочка конечно это явно замкнутая множество а еще можно легко заметить
[02:53:57.660 --> 02:54:06.220]  что это множество ограничено почему ну потому что заметим следующее что если у меня тут да
[02:54:06.220 --> 02:54:11.620]  множество из но если вот сам да но множество из энточка но ограничено следует но не выпукла
[02:54:11.620 --> 02:54:21.620]  оболочка ограничена потому что она заведомо лежит внутри вот такого bounding бокса логично да а на
[02:54:21.620 --> 02:54:25.820]  самом деле у всех ограниченных замкнутых множество на самом деле выпукла оболочку
[02:54:25.820 --> 02:54:36.660]  ну вот можно искать при на самом деле весьма приятным образом давайте искать касательный
[02:54:36.660 --> 02:54:52.100]  да я не знаю как выглядит но что но давайте искать к нему касательный вот я утверждаю такое
[02:54:52.100 --> 02:55:01.460]  нет никакого отвала что вы придумываете нет никакого отвала вот смотрите я утверждаю чтобы
[02:55:01.620 --> 02:55:10.340]  была вот такая касательная я хочу найти касательный я хочу найти касательную выпукла оболочки в этом
[02:55:10.340 --> 02:55:18.420]  направлении значит я утверждаю следующее что это сделать просто я просто возьму эту прямую и
[02:55:18.420 --> 02:55:26.580]  буду издалека вот так вот параллельно двигать до тех пор пока не она не наткнется на там на собственно
[02:55:26.580 --> 02:55:30.860]  какую-нибудь точку этого множество кстати это это работает но даже в замкнутом множестве это
[02:55:30.860 --> 02:55:38.020]  тоже будет работать прекрасно вот то есть давайте вот такую касательную найдем то есть вот мы там
[02:55:38.020 --> 02:55:44.020]  до ближайшей точки дойдем если мы нарезаем торт с датчиками которые отлавливают если мы съели
[02:55:44.100 --> 02:56:01.220]  какой торт но да да да но в данном случае помоет называется так мы этим ножом пытаемся вот так
[02:56:01.220 --> 02:56:07.060]  вот резать если мы наткнулись на датчик он там если нас долбануло током значит мы останавливаем
[02:56:07.260 --> 02:56:25.140]  да у нас бесконечный нож да у нас вот так у нас такой но что-то приводит то есть не вот так вот
[02:56:25.140 --> 02:56:46.260]  а вот именно так вот так вот смотрите так вот я утверждаю нет смотрите нет на самом
[02:56:46.260 --> 02:56:51.700]  деле немножко магии магия заключается в том что то что я тут нарисовал это действительно касательно
[02:56:51.700 --> 02:56:59.660]  ну в каком плане касательная я утверждаю что действительно вся выпукла оболочка будет находиться
[02:56:59.660 --> 02:57:10.660]  слева от этой прямой это нашли самую правую точку да да да важное мистическое свойство
[02:57:10.660 --> 02:57:21.220]  полуплоскость выпуклое множество да равно как статьи вся плоскость вот нет и это знаете
[02:57:21.260 --> 02:57:25.380]  это иногда бывает очень удобно потому что ну в принципе заведешь есть у меня попала
[02:57:25.380 --> 02:57:30.980]  1 то есть более того я вам даже я вам даже еще скажу если у меня на эту касательную попала
[02:57:30.980 --> 02:57:40.420]  ровно одна точка то я утверждаю что больше не одна точка этой прямой то есть там скорее всего то
[02:57:40.420 --> 02:57:47.060]  есть скорее всего больше не одна точка этой прямой на самом деле в к вам не попадет то есть я
[02:57:47.060 --> 02:57:49.860]  Я утверждаю, что здесь это совсем очевидно,
[02:57:49.980 --> 02:57:52.620]  ни одна точка этой прямой в выпуклую оболочку не попадет.
[02:57:53.220 --> 02:57:55.380]  Здесь это совсем очевидно. Почему?
[02:57:55.500 --> 02:58:00.780]  Потому что я могу вот эту часть, вот этот лучик чуть-чуть повернуть,
[02:58:01.300 --> 02:58:02.900]  и у меня получится вот такой угол,
[02:58:02.900 --> 02:58:05.540]  который тоже является выпуклым ножем, он содержит все.
[02:58:08.020 --> 02:58:08.860]  Удобно, правда?
[02:58:11.780 --> 02:58:14.100]  Ну, более точно, хотя не знаю, в общем случае,
[02:58:14.100 --> 02:58:16.260]  если у нас просто замкнутая нож, что-то там, конечно,
[02:58:17.100 --> 02:58:19.420]  возможно, придется чуть-чуть подоказывать еще.
[02:58:21.220 --> 02:58:25.460]  Ну что, допустим, у вас дано призвольное замкнутое выпуклое множество,
[02:58:25.620 --> 02:58:28.740]  и у вас там касательная, то есть такая вот касательная,
[02:58:28.740 --> 02:58:30.980]  проходит через одну точку, утверждение тогда,
[02:58:30.980 --> 02:58:34.420]  и выпуклой оболочки на этой касательной будет только одна точка.
[02:58:38.100 --> 02:58:39.380]  Это правда?
[02:58:44.620 --> 02:58:46.620]  Хотя да, это правда, потому что многоугольник
[02:58:46.620 --> 02:58:50.180]  там, в общем случае, можно какие-то вот такие вот делать, на самом деле.
[02:58:50.500 --> 02:58:54.820]  То есть отклоняться можно не прям в этой точке,
[02:58:54.820 --> 02:58:57.300]  а там типа чуть-чуть отойти и там отклоняться.
[02:58:58.140 --> 02:59:01.340]  То есть вы там, получается, на какое-то расстояние, видимо, где-то отошли.
[02:59:02.060 --> 02:59:04.060]  А хотя нет, с расстоянием тоже придется думать.
[02:59:04.420 --> 02:59:07.060]  Ну ладно, ладно, давайте, ладно, не будем в эту сторону думать,
[02:59:07.060 --> 02:59:08.060]  ладно, не будем тогда.
[02:59:09.580 --> 02:59:11.260]  Нет, если замкнутая множество,
[02:59:11.620 --> 02:59:14.620]  то кажется, что, скорее, не правда.
[02:59:14.620 --> 02:59:18.060]  Мы можем просто подходить к нему, уходя на бесконечность.
[02:59:19.260 --> 02:59:21.260]  То есть мы по синусоиде к нему подходим, отходим,
[02:59:21.260 --> 02:59:23.260]  все ближе и ближе, но при этом эти,
[02:59:23.260 --> 02:59:25.260]  все ближе и ближе уходят на бесконечность,
[02:59:25.260 --> 02:59:27.260]  поэтому замкнутость не нарушается.
[02:59:28.020 --> 02:59:30.020]  Ну да, ну да.
[02:59:30.020 --> 02:59:32.020]  И тогда нам придется всю прямую взять.
[02:59:32.020 --> 02:59:33.020]  То есть придется...
[02:59:33.020 --> 02:59:34.020]  Кажется.
[02:59:34.500 --> 02:59:35.500]  Сейчас, нет.
[02:59:35.500 --> 02:59:37.500]  А, ну, ой, чего?
[02:59:37.740 --> 02:59:39.740]  Да, ну тут вопрос.
[02:59:39.740 --> 02:59:41.740]  Видимо, нужно еще учесть, что множество ограниченное.
[02:59:41.740 --> 02:59:43.740]  Да, то есть если множество не ограничено...
[02:59:43.740 --> 02:59:45.740]  А, это вообще лажа.
[02:59:45.740 --> 02:59:47.740]  Если множество замкнутого не ограничено,
[02:59:47.740 --> 02:59:49.740]  кажется, его кладболочка может быть не замкнутая.
[02:59:49.740 --> 02:59:51.740]  Спокойно.
[02:59:51.740 --> 02:59:53.740]  Вот из того же примера.
[02:59:53.740 --> 02:59:55.740]  Ну да.
[02:59:55.740 --> 02:59:57.740]  Если множество замкнутое...
[02:59:57.740 --> 02:59:59.740]  Ну не ограниченное.
[02:59:59.740 --> 03:00:01.740]  То мы начинаем к этой прямой подходить?
[03:00:01.740 --> 03:00:03.740]  Ну да, нет, если множество...
[03:00:03.740 --> 03:00:05.740]  Ну да.
[03:00:05.740 --> 03:00:07.740]  Если множество замкнутое, но не ограниченное.
[03:00:07.740 --> 03:00:09.740]  Ага.
[03:00:09.740 --> 03:00:11.740]  И что нам это даст?
[03:00:11.740 --> 03:00:13.740]  Ну я начинаю подходить к нему все ближе и ближе,
[03:00:13.740 --> 03:00:15.740]  но точки не накапливаются,
[03:00:15.740 --> 03:00:17.740]  потому что уходят на бесконечность.
[03:00:17.740 --> 03:00:19.740]  И поэтому придется взять всю прямую.
[03:00:19.740 --> 03:00:21.740]  Вот.
[03:00:21.740 --> 03:00:23.740]  Но я могу саму прямую не брать,
[03:00:23.740 --> 03:00:25.740]  но все, что...
[03:00:25.740 --> 03:00:27.740]  То есть я могу саму прямую не брать,
[03:00:27.740 --> 03:00:29.740]  как открытая ножица.
[03:00:29.740 --> 03:00:31.740]  Ну, там...
[03:00:31.740 --> 03:00:33.740]  Ну да.
[03:00:33.740 --> 03:00:35.740]  Получится, да.
[03:00:35.740 --> 03:00:37.740]  Ну я тебе...
[03:00:37.740 --> 03:00:39.740]  Так.
[03:00:39.740 --> 03:00:41.740]  Ну да, если оно еще не ограниченное,
[03:00:41.740 --> 03:00:43.740]  с такой вот границей, то да.
[03:00:43.740 --> 03:00:45.740]  Получится вся открытая полуплоскость.
[03:00:45.740 --> 03:00:47.740]  Хорошо.
[03:00:47.740 --> 03:00:49.740]  Да, действительно.
[03:00:49.740 --> 03:00:51.740]  Ладно.
[03:00:51.740 --> 03:00:53.740]  Но если у нас замкнутая и ограниченная...
[03:00:53.740 --> 03:00:55.740]  Ну ладно, не будем сейчас обобщать,
[03:00:55.740 --> 03:00:57.740]  это времени мало у нас.
[03:00:57.740 --> 03:00:59.740]  Ладно, давайте нас сейчас
[03:00:59.740 --> 03:01:01.740]  интересует в концерте случаи для N точек.
[03:01:01.740 --> 03:01:03.740]  Поняли, что в ту сторону тоже...
[03:01:03.740 --> 03:01:05.740]  Нет, на самом деле я сейчас для чего это делаю.
[03:01:05.740 --> 03:01:07.740]  В принципе, я хочется подчеркнуть,
[03:01:07.740 --> 03:01:09.740]  что в принципе это такой метод,
[03:01:09.740 --> 03:01:11.740]  что выпуклое ограниченное нож,
[03:01:11.740 --> 03:01:13.740]  что на самом деле задается
[03:01:13.740 --> 03:01:15.740]  вот этими опорными прямыми или касательными,
[03:01:15.740 --> 03:01:17.740]  как мы их называем.
[03:01:17.740 --> 03:01:19.740]  Да, еще они называются опорными прямыми
[03:01:19.740 --> 03:01:21.740]  или даже коллиперами.
[03:01:21.740 --> 03:01:23.740]  Да, задачи на этот метод
[03:01:23.740 --> 03:01:25.740]  у нас тоже будут.
[03:01:25.740 --> 03:01:27.740]  Через неделю, естественно.
[03:01:27.740 --> 03:01:29.740]  А пока же про выпуклоболочку
[03:01:29.740 --> 03:01:31.740]  я могу же сказать так.
[03:01:31.740 --> 03:01:33.740]  Вот наткнулись мы вот на эту касательную, на эту точку.
[03:01:33.740 --> 03:01:35.740]  Теперь идея такая. Давайте это направление
[03:01:35.740 --> 03:01:37.740]  немножко поворачивать.
[03:01:37.740 --> 03:01:39.740]  Что будет происходить?
[03:01:39.740 --> 03:01:41.740]  Ну, будет происходить следующее.
[03:01:41.740 --> 03:01:43.740]  Что мы тут будем... Некоторое время
[03:01:43.740 --> 03:01:45.740]  мы эту касательную просто вокруг этой вершины будем откровенно
[03:01:45.740 --> 03:01:47.740]  поворачивать, и она будет
[03:01:47.740 --> 03:01:49.740]  опираться ровно на эту точку. Правда?
[03:01:49.740 --> 03:01:51.740]  У нас есть минимум вот этих углов поворота.
[03:01:51.740 --> 03:01:53.740]  Да, но в какой-то момент этот поворот
[03:01:53.740 --> 03:01:55.740]  наткнется на еще одну точку.
[03:01:55.740 --> 03:01:57.740]  Тогда смотрите, что у нас произошло.
[03:01:57.740 --> 03:01:59.740]  Тогда мы замечаем маленький приятный факт,
[03:01:59.740 --> 03:02:01.740]  что вся выпуклоболочка лежит
[03:02:01.740 --> 03:02:03.740]  внутри вот этого
[03:02:03.740 --> 03:02:05.740]  угла. Да?
[03:02:09.740 --> 03:02:11.740]  Вот. Вне этого угла ничего
[03:02:11.740 --> 03:02:13.740]  не лежит, но с другой стороны заметим,
[03:02:13.740 --> 03:02:15.740]  что вот эта вот штука,
[03:02:15.740 --> 03:02:17.740]  то есть вот этот вот
[03:02:17.740 --> 03:02:19.740]  отрезок, он уже в выпуклоболочке заведомо
[03:02:19.740 --> 03:02:21.740]  лежит. Правда?
[03:02:21.740 --> 03:02:23.740]  Потому что обе эти точки
[03:02:23.740 --> 03:02:25.740]  оказывается заведомо лежат на
[03:02:25.740 --> 03:02:27.740]  лежат на выпуклоболочке, в смысле на границе
[03:02:27.740 --> 03:02:29.740]  выпуклоболочки.
[03:02:29.740 --> 03:02:31.740]  Потому что сам отрезок выпуклоболочки
[03:02:31.740 --> 03:02:33.740]  лежит, но вот рядом с ним
[03:02:33.740 --> 03:02:35.740]  вот уже все, что не с той стороны,
[03:02:35.740 --> 03:02:37.740]  справа от него уже в ауте.
[03:02:37.740 --> 03:02:39.740]  А вот это все, кстати,
[03:02:39.740 --> 03:02:41.740]  в выпуклоболочке не лежит.
[03:02:41.740 --> 03:02:43.740]  Понимаете, да?
[03:02:43.740 --> 03:02:45.740]  Что у нас происходит дальше?
[03:02:45.740 --> 03:02:47.740]  Ну дальше продолжаем вращать
[03:02:47.740 --> 03:02:49.740]  касательно, только уже вокруг этой прямой, абсолютно
[03:02:49.740 --> 03:02:51.740]  тем же методом. И натыкаемся
[03:02:51.740 --> 03:02:53.740]  на следующее.
[03:02:55.740 --> 03:02:57.740]  Вот.
[03:02:59.740 --> 03:03:01.740]  Видно, да?
[03:03:01.740 --> 03:03:03.740]  Ну и так далее.
[03:03:03.740 --> 03:03:05.740]  То есть на самом деле вот так честно вращаем.
[03:03:05.740 --> 03:03:07.740]  То есть на каждом шаге по факту мы там просто находим
[03:03:07.740 --> 03:03:09.740]  какую-нибудь точку с
[03:03:09.740 --> 03:03:11.740]  такую, что вот этот вот угол
[03:03:11.740 --> 03:03:13.740]  как можно больше.
[03:03:13.740 --> 03:03:15.740]  Да, как их на практике находить?
[03:03:15.740 --> 03:03:17.740]  Да очень просто. То есть на практике
[03:03:17.740 --> 03:03:19.740]  это делается так, что если
[03:03:19.740 --> 03:03:21.740]  мы находимся на какой-то крайней точке,
[03:03:21.740 --> 03:03:23.740]  то получается существует какой угол
[03:03:23.740 --> 03:03:25.740]  что меньше 180 градусов, внутри
[03:03:25.740 --> 03:03:27.740]  которых все эти точки находятся.
[03:03:27.740 --> 03:03:29.740]  Я это буду звать книжка такая.
[03:03:29.740 --> 03:03:31.740]  А внутри этой книжки как бы
[03:03:31.740 --> 03:03:33.740]  сравнивать точки по углу,
[03:03:33.740 --> 03:03:35.740]  это то же самое, что сравните по векторному произведению.
[03:03:35.740 --> 03:03:37.740]  Правда?
[03:03:37.740 --> 03:03:39.740]  Нет, это джарвис.
[03:03:39.740 --> 03:03:41.740]  Ну вот.
[03:03:41.740 --> 03:03:43.740]  Это на самом деле метод заворачивания
[03:03:43.740 --> 03:03:45.740]  подарка в явном виде.
[03:03:45.740 --> 03:03:47.740]  То есть мы просто так
[03:03:47.740 --> 03:03:49.740]  проходимся касательно, вот это вот проходим.
[03:03:49.740 --> 03:03:51.740]  Там проходим,
[03:03:51.740 --> 03:03:53.740]  проходим, проходим и в какой-то момент
[03:03:53.740 --> 03:03:55.740]  у нас все-таки мы поворачиваем на 360
[03:03:55.740 --> 03:03:57.740]  градусов и касательно возвращается
[03:03:57.740 --> 03:03:59.740]  в эту точку.
[03:03:59.740 --> 03:04:01.740]  Единственное, конечно, что изначально надо было бы
[03:04:01.740 --> 03:04:03.740]  то есть надо было бы
[03:04:03.740 --> 03:04:05.740]  изначально конечно стартовать не с рандомной
[03:04:05.740 --> 03:04:07.740]  касательно обычно стартует где-нибудь
[03:04:07.740 --> 03:04:09.740]  с самой нижней точки, то есть коризонтальной касательной.
[03:04:13.740 --> 03:04:15.740]  Вот и получается вот действительно
[03:04:15.740 --> 03:04:17.740]  такая вот штука. То есть получается
[03:04:17.740 --> 03:04:19.740]  смотрите, то есть в результате у нас замкнулся
[03:04:19.740 --> 03:04:21.740]  многоугольник, который является границей
[03:04:21.740 --> 03:04:23.740]  в оболочке. То есть мы показали,
[03:04:23.740 --> 03:04:25.740]  что все, что справа от каждого из этого
[03:04:25.740 --> 03:04:27.740]  ребра, оно по-любому в ауте.
[03:04:27.740 --> 03:04:29.740]  Понимаете, да?
[03:04:29.740 --> 03:04:31.740]  Понимаете?
[03:04:31.740 --> 03:04:33.740]  Ну потому что касательно, потому что
[03:04:33.740 --> 03:04:35.740]  заметим так, что все, что касательное
[03:04:35.740 --> 03:04:37.740]  заметает вне этих отрезков, мы доказали,
[03:04:37.740 --> 03:04:39.740]  что оно в ауте.
[03:04:39.740 --> 03:04:41.740]  Ну очевидно оно все вне этого
[03:04:41.740 --> 03:04:43.740]  многоугольника и замела.
[03:04:43.740 --> 03:04:45.740]  Отсюда, в общем-то,
[03:04:45.740 --> 03:04:47.740]  и следует, что, во-первых, то есть мы доказали
[03:04:47.740 --> 03:04:49.740]  что если есть хотя бы три точки, не лежащие
[03:04:49.740 --> 03:04:51.740]  на одной прямой, то выпуклый оболочек
[03:04:51.740 --> 03:04:53.740]  этих n-точек является выпуклый многоугольник
[03:04:53.740 --> 03:04:55.740]  с вершинами в этих
[03:04:55.740 --> 03:04:57.740]  точках.
[03:05:01.740 --> 03:05:03.740]  Вот. Понимаете, да?
[03:05:03.740 --> 03:05:05.740]  Вот.
[03:05:05.740 --> 03:05:07.740]  Этот метод называется метод
[03:05:07.740 --> 03:05:09.740]  Джарриса.
[03:05:09.740 --> 03:05:11.740]  Более известный как заворачивание подарка.
[03:05:13.740 --> 03:05:15.740]  Его асимптотика
[03:05:15.740 --> 03:05:17.740]  N-H.
[03:05:19.740 --> 03:05:21.740]  Да, это вот, кстати, важно.
[03:05:21.740 --> 03:05:23.740]  То есть в худшем случае, конечно, N-квадрат,
[03:05:23.740 --> 03:05:25.740]  но в реальности, то есть имеет
[03:05:25.740 --> 03:05:27.740]  смысл оценить как N-H, где H это
[03:05:27.740 --> 03:05:29.740]  реальный размер выпуклой
[03:05:29.740 --> 03:05:31.740]  оболочки.
[03:05:31.740 --> 03:05:33.740]  Да, тут без вариантов.
[03:05:33.740 --> 03:05:35.740]  Вот. Потому что бывает
[03:05:35.740 --> 03:05:37.740]  иногда что, бывает что алгоритм вполне
[03:05:37.740 --> 03:05:39.740]  себе полезен. Если там выпукла оболочка,
[03:05:39.740 --> 03:05:41.740]  у вас там маленькая.
[03:05:45.740 --> 03:05:47.740]  Вот.
[03:05:47.740 --> 03:05:49.740]  Слючайте другой метод.
[03:05:51.740 --> 03:05:53.740]  То есть в принципе это все
[03:05:53.740 --> 03:05:55.740]  можно мыслить, на самом деле, немножко по-другому.
[03:05:57.740 --> 03:05:59.740]  То есть еще один метод
[03:05:59.740 --> 03:06:01.740]  поиска этой выпуклой оболочки
[03:06:01.740 --> 03:06:03.740]  звучит на самом деле так.
[03:06:03.740 --> 03:06:05.740]  Так, давайте я сейчас все сотру
[03:06:05.740 --> 03:06:07.740]  и скажу так.
[03:06:07.740 --> 03:06:09.740]  То есть более известный, который обычно пишется,
[03:06:09.740 --> 03:06:11.740]  хотя тут пишут по-разному.
[03:06:11.740 --> 03:06:13.740]  Но классический метод
[03:06:13.740 --> 03:06:15.740]  звучит так.
[03:06:15.740 --> 03:06:17.740]  Смотрите.
[03:06:17.740 --> 03:06:19.740]  Ну, во-первых, среди этих точек
[03:06:19.740 --> 03:06:21.740]  заведомо найдется самая низкая точка.
[03:06:21.740 --> 03:06:23.740]  И как мы уже поняли, это
[03:06:23.740 --> 03:06:25.740]  среди самых нижних точек выберем, например, самую левую.
[03:06:25.740 --> 03:06:27.740]  И мы поймем, что эта точка
[03:06:27.740 --> 03:06:29.740]  заведомо является вершиной выпуклой оболочки.
[03:06:29.740 --> 03:06:31.740]  Правда?
[03:06:31.740 --> 03:06:33.740]  Вот возьмем эту нижнюю точку и
[03:06:33.740 --> 03:06:35.740]  рассмотрим ее
[03:06:35.740 --> 03:06:37.740]  книжку.
[03:06:39.740 --> 03:06:41.740]  А теперь заметим следующее.
[03:06:41.740 --> 03:06:43.740]  Что я не знаю, через какие вершины пройдет
[03:06:43.740 --> 03:06:45.740]  выпуклая оболочка,
[03:06:45.740 --> 03:06:47.740]  но у меня почему-то есть жуткое
[03:06:47.740 --> 03:06:49.740]  подозрение,
[03:06:49.740 --> 03:06:51.740]  что эта выпуклая оболочка
[03:06:51.740 --> 03:06:53.740]  будет проходить как бы
[03:06:53.740 --> 03:06:55.740]  строго справа-налево.
[03:06:55.740 --> 03:06:57.740]  То есть если я по этой выпуклой
[03:06:57.740 --> 03:06:59.740]  оболочке пущу опять ту же самую
[03:06:59.740 --> 03:07:01.740]  козу, а сам стану здесь,
[03:07:01.740 --> 03:07:03.740]  то коза у меня будет идти
[03:07:03.740 --> 03:07:05.740]  строго справа-налево. Правда?
[03:07:07.740 --> 03:07:09.740]  Ну, неправда. Почему?
[03:07:09.740 --> 03:07:11.740]  Ну, за исключением вот этих вот двух
[03:07:11.740 --> 03:07:13.740]  отрезков, конечно же.
[03:07:13.740 --> 03:07:15.740]  Ну, в плане не справа-налево,
[03:07:15.740 --> 03:07:17.740]  а...
[03:07:17.740 --> 03:07:19.740]  Ну, если идти против часовой стрелки, то справа-наль.
[03:07:19.740 --> 03:07:21.740]  Ну, если коза будет
[03:07:21.740 --> 03:07:23.740]  идти против часовой стрелки, то она вот в этот...
[03:07:23.740 --> 03:07:25.740]  Тут будет идти как бы справа-налево.
[03:07:27.740 --> 03:07:29.740]  Это выдает нам следующий
[03:07:29.740 --> 03:07:31.740]  алгоритм. Давайте-ка
[03:07:31.740 --> 03:07:33.740]  вот эти все точки относительно нас
[03:07:33.740 --> 03:07:35.740]  отсортируем по полярному углу.
[03:07:35.740 --> 03:07:37.740]  Ну, то есть
[03:07:37.740 --> 03:07:39.740]  кто правее, кто левее.
[03:07:39.740 --> 03:07:41.740]  Но как отсортировать? Напоминаю, что не надо.
[03:07:41.740 --> 03:07:43.740]  Честно, я удивляюсь,
[03:07:43.740 --> 03:07:45.740]  но даже умные олимпиагики в этом месте
[03:07:45.740 --> 03:07:47.740]  реально начинают вычислять угол.
[03:07:49.740 --> 03:07:51.740]  То есть на полном серьезе угол между вот этим
[03:07:51.740 --> 03:07:53.740]  и вот этим или полярный угол какой-то.
[03:07:55.740 --> 03:07:57.740]  Так вот, ребят, не надо.
[03:07:57.740 --> 03:07:59.740]  Во-первых, там не крост,
[03:07:59.740 --> 03:08:01.740]  а скилл.
[03:08:01.740 --> 03:08:03.740]  А, хотя...
[03:08:03.740 --> 03:08:05.740]  А, может и крост, ладно.
[03:08:05.740 --> 03:08:07.740]  Ладно, может и крост, ладно.
[03:08:07.740 --> 03:08:09.740]  Ну, короче говоря, то есть сравнивать
[03:08:09.740 --> 03:08:11.740]  две точки по полярному углу нужно, конечно,
[03:08:11.740 --> 03:08:13.740]  просто с помощью векторного произведения
[03:08:13.740 --> 03:08:15.740]  в целых числах без всяких этих ваших атан-2.
[03:08:15.740 --> 03:08:17.740]  Понимаете, да?
[03:08:21.740 --> 03:08:23.740]  Ну вот.
[03:08:23.740 --> 03:08:25.740]  Да-да-да, ну и...
[03:08:25.740 --> 03:08:27.740]  Как это да...
[03:08:27.740 --> 03:08:29.740]  Ну да, ты же да...
[03:08:29.740 --> 03:08:31.740]  Да, ты же вызываешь атан-2.
[03:08:31.740 --> 03:08:33.740]  С утра вызывал, но я принял контракт.
[03:08:35.740 --> 03:08:37.740]  А, ну да, все.
[03:08:37.740 --> 03:08:39.740]  Реклама, да.
[03:08:39.740 --> 03:08:41.740]  А, все-таки видели эту рекламу, да.
[03:08:43.740 --> 03:08:45.740]  Да, ну вот.
[03:08:45.740 --> 03:08:47.740]  Так вот, начнем их сортируем.
[03:08:47.740 --> 03:08:49.740]  Важный момент еще, что при равных полярных
[03:08:49.740 --> 03:08:51.740]  углах давайте их отсортируем по
[03:08:51.740 --> 03:08:53.740]  расстоянию от этой точки.
[03:08:53.740 --> 03:08:55.740]  Да, кстати, в идеале заметим, что можно здесь
[03:08:55.740 --> 03:08:57.740]  расстояние искать без вызова функции
[03:08:57.740 --> 03:08:59.740]  сqrt.
[03:08:59.740 --> 03:09:01.740]  Потому что, на самом деле, ну, во-первых, можно
[03:09:01.740 --> 03:09:03.740]  вычитать квадрат расстояния, во-первых.
[03:09:03.740 --> 03:09:05.740]  А, вторых, заметим, что вам
[03:09:05.740 --> 03:09:07.740]  это расстояние здесь можно сделать вообще
[03:09:07.740 --> 03:09:09.740]  манхеттерским.
[03:09:11.740 --> 03:09:13.740]  Зачем манхеттерское расстояние? Хорошо, что вам не придется
[03:09:13.740 --> 03:09:15.740]  лишнее умножение вызывать. Это тоже оптимизирует
[03:09:15.740 --> 03:09:17.740]  констант. Ну, незначительно,
[03:09:17.740 --> 03:09:19.740]  но оптимизирует.
[03:09:19.740 --> 03:09:21.740]  Но придется вызывать... Нет.
[03:09:23.740 --> 03:09:25.740]  Вызывать модуль — это if.
[03:09:25.740 --> 03:09:27.740]  If работает явно дольше,
[03:09:27.740 --> 03:09:29.740]  чем умножение.
[03:09:29.740 --> 03:09:31.740]  Да!
[03:09:31.740 --> 03:09:33.740]  Ну, я бы сказал, что нихрена.
[03:09:33.740 --> 03:09:35.740]  Ну, потому что if, у него две ветки,
[03:09:35.740 --> 03:09:37.740]  и он еще нужно выбирать, что делать.
[03:09:37.740 --> 03:09:39.740]  Ну и что? Ну да.
[03:09:39.740 --> 03:09:41.740]  Нет, ну, по-моему, на поверхе
[03:09:41.740 --> 03:09:43.740]  умножение и деление по константе работают дольше.
[03:09:43.740 --> 03:09:45.740]  Ну, типа деление работает, а умножение?
[03:09:45.740 --> 03:09:47.740]  Ну, умножение тоже.
[03:09:47.740 --> 03:09:49.740]  А умножение, что ли, там, не замарахивайся.
[03:09:49.740 --> 03:09:51.740]  В целых чисел очень быстро работает.
[03:09:51.740 --> 03:09:53.740]  Ну, по-моему, if как-то...
[03:09:53.740 --> 03:09:55.740]  Ну, то есть if он...
[03:09:55.740 --> 03:09:57.740]  Нет, ну, безо...
[03:09:57.740 --> 03:09:59.740]  Там всего лишь два модуля.
[03:09:59.740 --> 03:10:01.740]  Нет, ну, я бы сказал, что там всякие умножения
[03:10:01.740 --> 03:10:03.740]  и сложения if работают там быстрее
[03:10:03.740 --> 03:10:05.740]  всяких там умножений, даже умножений,
[03:10:05.740 --> 03:10:07.740]  не говоря уже о модулях. Ровно поэтому мы там
[03:10:07.740 --> 03:10:09.740]  обычно процентики иногда заменяем на if
[03:10:09.740 --> 03:10:11.740]  больше либо равно mod, но минус равно mod,
[03:10:11.740 --> 03:10:13.740]  и это реально очень круто работает.
[03:10:13.740 --> 03:10:15.740]  Нет, по модулю это взяться так.
[03:10:15.740 --> 03:10:17.740]  Ну, вот процентики.
[03:10:17.740 --> 03:10:19.740]  Ну, я бы сказал, что, по-моему, мне кажется,
[03:10:19.740 --> 03:10:21.740]  что умножение тоже...
[03:10:21.740 --> 03:10:23.740]  Так тоже операция более жирная, чем
[03:10:23.740 --> 03:10:25.740]  любой под...
[03:10:25.740 --> 03:10:27.740]  Ну, может быть, важно.
[03:10:27.740 --> 03:10:29.740]  Ну, в данном случае
[03:10:29.740 --> 03:10:31.740]  не сильно важно, потому что
[03:10:31.740 --> 03:10:33.740]  ядром этих операций все равно является
[03:10:33.740 --> 03:10:35.740]  векторное произведение с двумя умножениями.
[03:10:35.740 --> 03:10:37.740]  Так или иначе.
[03:10:37.740 --> 03:10:39.740]  Так что не проблема.
[03:10:39.740 --> 03:10:41.740]  Ну, не важно. Суть, на самом деле,
[03:10:41.740 --> 03:10:43.740]  в следующем.
[03:10:43.740 --> 03:10:45.740]  Дальше просто оказывается, что после того,
[03:10:45.740 --> 03:10:47.740]  как вы Zn log n это отсортировали,
[03:10:47.740 --> 03:10:49.740]  оказывается, что вы можете
[03:10:49.740 --> 03:10:51.740]  на самом деле идти...
[03:10:51.740 --> 03:10:53.740]  То есть теперь идея такая. Давайте по этим точкам идти
[03:10:53.740 --> 03:10:55.740]  в порядке сортировки, вот прям
[03:10:55.740 --> 03:10:57.740]  честно идти-идти.
[03:10:57.740 --> 03:10:59.740]  Но при этом выясняется следующее.
[03:10:59.740 --> 03:11:01.740]  И при этом заявляет, что
[03:11:01.740 --> 03:11:03.740]  если в какой-то момент вы пришли
[03:11:03.740 --> 03:11:05.740]  в новую точку, у вас обнаружилась не выпуклась,
[03:11:05.740 --> 03:11:07.740]  то есть у вас поворот не в правильную сторону,
[03:11:07.740 --> 03:11:09.740]  то утверждается, что
[03:11:09.740 --> 03:11:11.740]  все, что вам надо, это просто
[03:11:11.740 --> 03:11:13.740]  там предыдущую точку
[03:11:13.740 --> 03:11:15.740]  выкинуть. Может, даже не одну.
[03:11:19.740 --> 03:11:21.740]  Вот. То есть, например, в данном случае у вас получается
[03:11:21.740 --> 03:11:23.740]  вот так, вот так.
[03:11:23.740 --> 03:11:25.740]  А тут, допустим,
[03:11:25.740 --> 03:11:27.740]  вот так. Я вот даже подальше
[03:11:27.740 --> 03:11:29.740]  чуть-чуть точку нарисую.
[03:11:29.740 --> 03:11:31.740]  Ну, вот.
[03:11:31.740 --> 03:11:33.740]  Допустим, вот так.
[03:11:33.740 --> 03:11:35.740]  Вот.
[03:11:35.740 --> 03:11:37.740]  Тогда здесь мы эту точку выкинули,
[03:11:37.740 --> 03:11:39.740]  а тут, смотрите, какая ситуация.
[03:11:39.740 --> 03:11:41.740]  То есть тогда и вот эту мы придется выкидывать,
[03:11:41.740 --> 03:11:43.740]  но и вот эту, и даже вот эту,
[03:11:43.740 --> 03:11:45.740]  заранее скажу.
[03:11:45.740 --> 03:11:47.740]  Вот.
[03:11:47.740 --> 03:11:49.740]  Ну, в принципе, классический механизм,
[03:11:49.740 --> 03:11:51.740]  то есть, по сути, мы эти точки добавляем в стэк,
[03:11:51.740 --> 03:11:53.740]  и как только образуется не выпуклость, мы их выкидываем.
[03:11:55.740 --> 03:11:57.740]  Вот.
[03:11:57.740 --> 03:11:59.740]  То есть там получается дальше что-то там вот такое,
[03:11:59.740 --> 03:12:01.740]  там потом вот такое,
[03:12:01.740 --> 03:12:03.740]  вот такое, вот такое.
[03:12:03.740 --> 03:12:05.740]  Вот. Ну, там ладно,
[03:12:05.740 --> 03:12:07.740]  некоторые точки я пропущу, но, как бы,
[03:12:07.740 --> 03:12:09.740]  суть одна.
[03:12:09.740 --> 03:12:11.740]  Вот.
[03:12:11.740 --> 03:12:13.740]  Ну и в итоге вот мы, в итоге вот так вот сюда и придем.
[03:12:15.740 --> 03:12:17.740]  Ну, останется только аккуратненько
[03:12:17.740 --> 03:12:19.740]  по индукции доказать,
[03:12:19.740 --> 03:12:21.740]  что когда вы дошли до какой-то точки,
[03:12:21.740 --> 03:12:23.740]  то, в принципе, вот там вот,
[03:12:23.740 --> 03:12:25.740]  то есть в том, что лучик вот так вот замел до этой точки,
[03:12:25.740 --> 03:12:27.740]  вы реально выпукло оболочку нашли.
[03:12:29.740 --> 03:12:31.740]  То есть вот это, вот это реально выпукло оболочка
[03:12:31.740 --> 03:12:33.740]  вот этих точек.
[03:12:33.740 --> 03:12:35.740]  Потом, когда там следующую добавляете,
[03:12:35.740 --> 03:12:37.740]  там, собственно, это будет достаточно легко уже в этом убедиться.
[03:12:41.740 --> 03:12:43.740]  Вот.
[03:12:43.740 --> 03:12:45.740]  Это называется
[03:12:45.740 --> 03:12:47.740]  алгоритм Грехама.
[03:12:51.740 --> 03:12:53.740]  Он работает
[03:12:53.740 --> 03:12:55.740]  за N log N.
[03:12:55.740 --> 03:12:57.740]  Или даже, если быть точнее,
[03:12:57.740 --> 03:12:59.740]  O от N плюс сортировка.
[03:13:03.740 --> 03:13:05.740]  По полярному углу. То есть, если вы умеете по полярному углу
[03:13:05.740 --> 03:13:07.740]  скорее быстрее, чем за N log N,
[03:13:07.740 --> 03:13:09.740]  то у вас этот алгоритм будет работать
[03:13:09.740 --> 03:13:11.740]  быстрее, чем за N log N.
[03:13:13.740 --> 03:13:15.740]  Другой вопрос, что маловероятно,
[03:13:15.740 --> 03:13:17.740]  что вы так прямо умеете, потому что на самом деле
[03:13:17.740 --> 03:13:19.740]  задача о сортировке, допустим, N чисел
[03:13:19.740 --> 03:13:21.740]  прекрасно сводится
[03:13:21.740 --> 03:13:23.740]  к заданию по строению выпукла оболочки.
[03:13:25.740 --> 03:13:27.740]  Потому что что нужно, чтобы сортировать
[03:13:27.740 --> 03:13:29.740]  числа x1, x2, x3 и так далее?
[03:13:29.740 --> 03:13:31.740]  Нужно просто
[03:13:31.740 --> 03:13:33.740]  построить выпуклую оболочку
[03:13:33.740 --> 03:13:35.740]  у точек x и запятая
[03:13:35.740 --> 03:13:37.740]  x и в квадрате.
[03:13:43.740 --> 03:13:45.740]  Вот задача.
[03:13:45.740 --> 03:13:47.740]  Отсортировать.
[03:13:47.740 --> 03:13:49.740]  Решение.
[03:13:49.740 --> 03:13:51.740]  Возьмем вот такие N точек,
[03:13:51.740 --> 03:13:53.740]  построим у них выпуклую оболочку.
[03:13:55.740 --> 03:13:57.740]  Да. Откуда я взял эти точки?
[03:13:59.740 --> 03:14:01.740]  Ну, точки я взял вот откуда.
[03:14:01.740 --> 03:14:03.740]  То есть, я просто их на параболке
[03:14:03.740 --> 03:14:05.740]  нарисовал вот такие точки.
[03:14:05.740 --> 03:14:07.740]  Да.
[03:14:07.740 --> 03:14:09.740]  И что?
[03:14:09.740 --> 03:14:11.740]  Нет, ну это я просто к тому, что...
[03:14:11.740 --> 03:14:13.740]  Нет, а почему это работает?
[03:14:13.740 --> 03:14:15.740]  Ну, потому что выпуклая оболочка
[03:14:15.740 --> 03:14:17.740]  упорядочит точки ровно вот таким образом.
[03:14:17.740 --> 03:14:19.740]  Ну, там начало может быть
[03:14:19.740 --> 03:14:21.740]  откуда-то не оттуда, но это уже легко.
[03:14:21.740 --> 03:14:23.740]  И там с точностью десектического сдвига
[03:14:23.740 --> 03:14:25.740]  это будет сортированный порядок.
[03:14:25.740 --> 03:14:27.740]  Ну, так вот,
[03:14:27.740 --> 03:14:29.740]  вот,
[03:14:29.740 --> 03:14:31.740]  вот,
[03:14:31.740 --> 03:14:33.740]  вот,
[03:14:33.740 --> 03:14:35.740]  вот, с десектического сдвига это будет сортированный порядок.
[03:14:43.740 --> 03:14:45.740]  Да, но фишка в том, что выпуклая
[03:14:45.740 --> 03:14:47.740]  оболочка, что у нас много уголек
[03:14:47.740 --> 03:14:49.740]  должны задаваться в порядке обхода, а не просто
[03:14:49.740 --> 03:14:51.740]  какие точки у вас на выпуклой оболочке.
[03:14:59.740 --> 03:15:01.740]  Вот.
[03:15:01.740 --> 03:15:12.960]  такие вот иксики чего вот ну это так сведение правда единственное да но это
[03:15:12.960 --> 03:15:15.800]  просто я просто хотел хотел просто показать что на самом деле задачи
[03:15:15.800 --> 03:15:19.520]  ассортировки из ада там задачи выпукло оболочки это где-то близкие задачи
[03:15:19.520 --> 03:15:26.080]  возможно примерно одинаковые сложности на самом деле конечно да то есть ну
[03:15:26.080 --> 03:15:29.520]  полярный угол да честно если говорить по моему опыту то конечно когда я это
[03:15:29.520 --> 03:15:33.220]  впервые с этим столкнулся в восьмом классе где-то то мне было сложно потому
[03:15:33.220 --> 03:15:37.900]  что я тригонометрию как следует еще не знал ну якобы еще не знал там не
[03:15:37.900 --> 03:15:42.740]  векторов там не синусов за пределами 90 градусов там не там не прочего не
[03:15:42.740 --> 03:15:48.980]  прочего прочего то есть как бы там но поэтому там сложно было поэтому там вот
[03:15:48.980 --> 03:15:52.060]  сортировать но то есть у меня там задачи полярный угол точки на самом деле
[03:15:52.060 --> 03:15:55.820]  вызывала беспроспретный во вообще ничего не мог с ним сделать как выяснилось
[03:15:55.820 --> 03:15:59.520]  потому что я не знал просто что такое аксинус толком ну то есть я нашу аксинус
[03:15:59.520 --> 03:16:04.400]  дай так как бы что если мне аксинус а равно б значит синус б равно а но как бы
[03:16:04.400 --> 03:16:09.760]  то что он это так синус он возвращает как бы там условно это б будет от минус
[03:16:09.760 --> 03:16:16.400]  пидо пипа лам да пипа лам это была для меня не тривиальная идея вот поэтому я
[03:16:16.400 --> 03:16:20.120]  использовал метод который не требует сортировки поэтому мистическому полярному
[03:16:20.120 --> 03:16:25.700]  углу то есть более простой метод который вот заведомо надежно работает
[03:16:25.700 --> 03:16:33.440]  называется метод грехома эндрэ да эндрэ это фамилия если что они то что вы
[03:16:33.440 --> 03:16:45.240]  подумали да естественно вы про станкевича подумали ну ну конечно да ну
[03:16:45.240 --> 03:16:49.920]  как вы да он просто периодически он известен именно под этим именем почему
[03:16:50.000 --> 03:16:59.360]  вот идея заключается в том то есть идея заключается в том что значит здесь
[03:16:59.360 --> 03:17:08.120]  предлагается эти точки эти точки отсортировать то есть не сортировать по
[03:17:08.120 --> 03:17:17.160]  полярному углу а отсортировать их тупо по иксу и после этого смотрите взять
[03:17:17.160 --> 03:17:26.360]  самую левую точку самую правую и тогда провести вот это ребро и тогда тогда
[03:17:26.360 --> 03:17:29.800]  будущее выпукло оболочек распадется на две части которые мы будем можем
[03:17:29.800 --> 03:17:35.460]  условно называть нижней частью выпукло оболочки и верхней частью выпукло
[03:17:35.460 --> 03:17:51.100]  оболочки вот ну или там там кружка или там вот эта чашка и крышка нет это грехом
[03:17:51.100 --> 03:18:03.820]  грехом эндрэ да так у нас ой у нас много алгоритмов да вот то есть смотрите как
[03:18:03.820 --> 03:18:07.900]  теперь построить нижнюю часть выпукло оболочки после сортировки по иксу но
[03:18:07.900 --> 03:18:14.220]  очевидно ровно тем же методом просто вот идем слева направо там выпиливаем там
[03:18:14.220 --> 03:18:19.640]  какие-то точки так что-то выпиливаем выпиливаем там что-то выпиливаем то есть
[03:18:19.640 --> 03:18:25.420]  как всегда но вот давайте сразу выпиливаем ой нет сначала вот так потом
[03:18:25.420 --> 03:18:33.300]  вот так потом вот так там вот ну очень в принципе я думаю вы поняли я тут
[03:18:33.380 --> 03:18:42.380]  рисовать не понятно да вот понятная идея вот теперь фишка что можно теперь это
[03:18:42.380 --> 03:18:46.780]  а теперь можно пройдясь справа налево можно абсолютно тем же методом построить
[03:18:46.780 --> 03:18:50.940]  и верхнюю часть то есть обратить внимание тут я это называю нижней частью верхней
[03:18:50.940 --> 03:18:54.460]  часть но надо аккуратно что иногда хочется говорить называть это нижняя
[03:18:54.460 --> 03:18:57.780]  половина и верхняя половина но естественно у нас никаких решений на
[03:18:57.780 --> 03:19:01.740]  то где точек больше и насколько нету то есть может на самом деле вся выпукло
[03:19:01.740 --> 03:19:24.060]  оболочка вот тут снизу и лежит что какая люба сложный прикол так вот то есть
[03:19:24.060 --> 03:19:27.220]  принципе метод удобен конечно тем интуитивно что сортировать в этом случае
[03:19:27.220 --> 03:19:32.500]  надо не по полярному углу а реально по иксу то есть принципе если у вас все иксы до ста тысяч
[03:19:32.500 --> 03:19:39.340]  кстати там целые числа от нуля до ста тысяч то вы можете сортировать просто подсчетом то есть
[03:19:39.340 --> 03:19:45.300]  я тоже здесь напишу асимптотику от м плюс сорт но вот просто у этого метода есть преимущество
[03:19:45.300 --> 03:19:51.700]  что сортировку быстрее чем звен логин здесь конечно сделать гораздо реальнее там такой какой-то
[03:19:51.700 --> 03:19:57.860]  компаратор мистический что там будет грустно вот но минус конечно в том что вам придется сделать
[03:19:57.860 --> 03:20:04.420]  два прохода за он то есть построить нижнюю часть и верхнюю часть вот ну там понятно что можно это
[03:20:04.420 --> 03:20:09.340]  сделать без копипасты там вот этими или иными способами но вот то есть конечно понятно что
[03:20:09.340 --> 03:20:13.020]  там если вас значит просто построить выпукло оболоких учащик конечно использует вот этот
[03:20:13.020 --> 03:20:22.980]  метод с поля там с полярными углами точнее векторными произведениями но можно принципе так вот так это
[03:20:22.980 --> 03:20:30.420]  у нас такой грехом эндрю но конечно говоря об алгоритмах конечно построение выпуклых оболочек
[03:20:30.420 --> 03:20:37.300]  зан логин нельзя конечно не поменю упомянуть его величество разделяй властвуй но я пока просто
[03:20:37.300 --> 03:20:44.900]  отмечу что есть такой алгоритм принципе то есть алгоритм кихп уже там уже известного нам кик патрика
[03:20:44.900 --> 03:20:56.740]  если не ошибаюсь конечно у нас был кихпатрик сорт но помните этот изделательский ну по биткам
[03:20:56.740 --> 03:21:03.980]  там типа типа сортируем дабл юбитные там б битные числа типа делим их на б пополам
[03:21:03.980 --> 03:21:11.380]  значит сортируем эти там по б пополам там но эти в регистрах там было вот ну ладно не важно так
[03:21:11.380 --> 03:21:16.300]  вот тут идея такая давайте но тут просто идея заключается в том что давайте точечки значит
[03:21:16.300 --> 03:21:22.620]  разделим просто какой-нибудь вертикальной прямой ли чем еще на две две равные части или может
[03:21:22.620 --> 03:21:27.540]  даже просто разделим построим рекурсивно выпукло оболочку одного выпукло оболочку второго об том
[03:21:27.540 --> 03:21:33.340]  просто объединим за линию выпукло оболочки в значит двух многоугольников обратите внимание
[03:21:33.340 --> 03:21:38.100]  мы сегодня чем-то подобным уже занимались то есть вот тем же самыми вращающимися касательными
[03:21:38.100 --> 03:21:43.860]  можно сделать нам так скажу нет на самом деле понятно что писать тут это конечно не особо
[03:21:43.860 --> 03:21:49.740]  осмысленно но на самом деле смысл в том что просто ведь тисто теоретически на самом деле эти задачи
[03:21:49.740 --> 03:21:57.900]  могут быть поставлены в 3d то есть тут задача найдите трехмерную выпукло оболочку то есть отметим
[03:21:57.900 --> 03:22:02.660]  там тоже есть алгоритм там как бы заворачивание подарка на самом деле будет работать за там
[03:22:02.780 --> 03:22:08.260]  квадрат тоже но можно на самом деле вот такой разделяем властвую забабахать за н логин но
[03:22:08.260 --> 03:22:12.440]  объединяться он конечно там будет не вот этими вращающимися касательными а какую-то там пленочку
[03:22:12.440 --> 03:22:23.140]  вращать придется вот да поэтому мы поэтому мы подробно в это копать не будем да
[03:22:23.140 --> 03:22:32.500]  значит поэтому вместо этого мы займемся другим значит видимо последнее что я сегодня расскажу
[03:22:32.500 --> 03:22:40.140]  значит за оставшиеся наверное 10-15 минут это вот что смотрите у нас есть фактически два варианта
[03:22:40.140 --> 03:22:50.620]  как написать выпукло оболочку за н логин и за наш какой из этих алгоритмов лучше ответ да
[03:22:50.620 --> 03:22:58.380]  зависит ответ дп зависит от того кто больше логарифом или выпукло оболочек ну можно конечно
[03:22:58.380 --> 03:23:04.340]  написать ну да можно конечно так сделать написать заворачивание подарка если заворачивание вы
[03:23:04.340 --> 03:23:10.340]  поняли что вы уже сделали логарифом операции но то в принципе в этом месте надо остановиться и
[03:23:10.340 --> 03:23:18.260]  запустить алгоритм за н логин получится за минимум из и наша и н логина но притве вообще в принципе да то
[03:23:18.260 --> 03:23:22.220]  есть как бы есть такая глобальная идея что если у вас есть два алгоритма решающих одну задачу то вы
[03:23:22.220 --> 03:23:27.140]  можете запустить их так сказать параллельно и как только один из алгоритмов решит то остановить
[03:23:27.140 --> 03:23:36.860]  получится умеем решать за минимум это называется нет ну это было не лучше если например две половины
[03:23:36.860 --> 03:23:41.780]  нужно как-то объединять но при этом нельзя сколько из них больше то мы запускаем в обоих
[03:23:41.780 --> 03:23:52.060]  ну типа да она здесь у нас будет еще круче значит наша пошла сейчас мы изучим алгоритм
[03:23:52.060 --> 03:23:57.020]  который будет искать выпукло оболочку за значит это алгоритм чена будет называться
[03:23:57.020 --> 03:24:17.300]  не настолько тут будет n лог аж вот прям совсем хорошо если выпукло оболочка логарифом то он будет
[03:24:17.300 --> 03:24:23.660]  тогда искать его за n лог лог и хотя если там целые числа то можно и так за н лог логом найти
[03:24:23.660 --> 03:24:29.220]  выпукло оболочку ну мы же умеем искать овать целые числа за n лог лог и
[03:24:29.220 --> 03:24:53.700]  а это неважно нет просто а там неважно что мы мы про сортировку и так знаю ее оптимальную
[03:24:53.700 --> 03:24:59.060]  асимптутику ну ну пока в какой-то модели камешков тут конечно сложно применять модель камешков
[03:24:59.060 --> 03:25:08.460]  потому что нам для этих камешков еще надо как-то уметь определять там кто там в относительно
[03:25:08.460 --> 03:25:14.620]  какой полуплоскости от кого лежит нет я так скажу я не буду не смогу и к сожалению не могу
[03:25:14.620 --> 03:25:19.180]  сейчас углубиться в детали но скажем так то есть там на самом деле есть какие-то методы которые
[03:25:19.180 --> 03:25:25.260]  позволяют давать нижние оценки на границу там нижние оценки на то за сколько у вас алгоритм
[03:25:25.260 --> 03:25:33.900]  будет что-то искать вот то есть но подробнее нас но то есть какие-то подробности я вам
[03:25:33.900 --> 03:25:38.500]  но смогу порекомендовать кстати сразу книгу то есть есть такая книга прям на русском языке
[03:25:38.500 --> 03:25:45.300]  кстати в том числе есть хоть она конечно не там не русская вот то есть вот препарата шеймус
[03:25:45.300 --> 03:26:01.980]  вычислительная геометрия вот но это если книги брать по что есть у меня там я сейчас вот не
[03:26:01.980 --> 03:26:07.100]  скажу авторов там там есть еще еще у нас один язык учебник который тоже можно как как учебник
[03:26:07.100 --> 03:26:14.740]  использовать хотя в принципе хотя конечно есть конечно тут основное что я в этом смысле реально
[03:26:14.740 --> 03:26:21.300]  прям очень хочется просто души прекламировать именно в геометрии это конечно лекции киры
[03:26:21.300 --> 03:26:31.700]  вяткиной киры вяткиной вот то есть начнете просто вот можно найти просто ее видео лекции ну
[03:26:31.700 --> 03:26:36.740]  смотрите в питере есть такая штука как компьютер science club ну это там может быть что-то типа там
[03:26:36.740 --> 03:26:43.660]  нашего шада вот ну в принципе да практически да похоже на шат только там может быть может
[03:26:43.920 --> 03:26:49.260]  где-то больше в сторону математики но хотя нет все-таки попpop вот но вот там есть тоже какие
[03:26:49.260 --> 03:26:54.500]  то курсы так вот весь к labeling там вот есть запись остается видеозаписи там кула курс
[03:26:54.500 --> 03:26:59.460]  а вот собственно киры�яткиной то это абсолютно это абсолютно реальный ученый как то действующий
[03:26:59.460 --> 03:27:06.780]  ученый в области вычислительной геометрии вот абсолютно где нот то, естественно, действующий
[03:27:06.780 --> 03:27:11.300]  ученый то есть многое там то есть поэтому там многое из того что я рассказываю то есть можно
[03:27:11.300 --> 03:27:16.740]  увидите у нее, то в частности она замечательно рассказывает и про треангуляцию Доланэ, скажем,
[03:27:16.740 --> 03:27:24.380]  и про диаграмму Варанова. В отличие от меня, она там даже код напишет. Странно, так что в принципе
[03:27:24.380 --> 03:27:32.020]  очень рекомендую. Да, ну и этого я тоже не сказать не мог, это важно. Так что просто Кировяткина,
[03:27:32.740 --> 03:27:49.300]  а вот это мы легко обсудим. Значит, смотрите. Тут идея такая. Алгоритм говорит такое. Предположим,
[03:27:49.300 --> 03:27:57.260]  что откуда-то с небес по факсу нам прислали точный h. То есть мы точно знаем, какого будет у нас
[03:27:57.260 --> 03:28:07.180]  размера выпукла оболочка. Тогда мы сделаем неожиданную штуку. Разделим эти n точек на
[03:28:07.180 --> 03:28:12.220]  множество по h точек, в чем не важно как просто. То есть я тут нарисую их, конечно, для удобства
[03:28:12.220 --> 03:28:20.180]  не пересекающимися, но в реальности они могут и пересечься. Вот, то есть какие-то тут точки,
[03:28:20.180 --> 03:28:31.700]  вот h, h, h. Так вот, в каждом из них за h лог h, вот любым выше описанным алгоритмом мы найдем выпуклую оболочку.
[03:28:50.180 --> 03:29:01.820]  Вот. Это у нас займет сколько времени? Это займет получается h лог h умножить на сколько раз мы это
[03:29:01.820 --> 03:29:10.640]  делаем. Делаем это n делить на h раз, то есть получается как раз тот самый n лог h. Вот,
[03:29:10.640 --> 03:29:22.160]  понятно, да? Так вот, теперь у меня идея. Сейчас я буду заворачиванием подарка искать объединение
[03:29:22.160 --> 03:29:42.020]  вот этих вот выпуклую оболочку вот этих многоугольников. Нет, смотрите, там идея будет
[03:29:42.020 --> 03:29:47.860]  примерно, то есть идея будет базироваться, ну, примерно, нет, ну как, у меня есть n многоугольников
[03:29:47.860 --> 03:29:55.560]  вот этих, да? Может быть, даже пересекаются, да? Но там просто фишка будет примерно следующая. То есть я
[03:29:55.560 --> 03:30:03.240]  сейчас буду искать их выпуклую оболочку. Искать буду так. Вот. Ну, то есть искать я буду их практически,
[03:30:03.240 --> 03:30:18.340]  вот, то есть практически тем же методом. Ну, вот, тем же методом, ну, в каком плане? Вот. Искать,
[03:30:18.340 --> 03:30:27.500]  соответственно, буду в том плане, что, ну, просто тем же заворачиванием подарка. То есть я буду,
[03:30:27.500 --> 03:30:33.000]  то есть где-то я буду пытаться просто вращать, то есть, допустим, там вращать, может быть,
[03:30:33.000 --> 03:30:40.440]  там те же самые касательные, вот, те же самые, да, я их сумма нот, то есть буду их вот так вот,
[03:30:40.440 --> 03:30:46.560]  ну, то есть просто провращать эти касательные, я могу за линию, правда? Потому что каждая нот,
[03:30:46.560 --> 03:30:50.360]  ну, по крайней мере, если я в качестве касательной буду, то есть, там, вот, хранить прям конкретно
[03:30:50.360 --> 03:30:59.020]  опорную точку. Да? Ну, потому что суммарный размер N, правда? Вот. Ну, правда, ну, как? Ну,
[03:30:59.020 --> 03:31:03.140]  не совсем там N, потому что на каждом шаге, конечно, вам придется за O от N делить на H,
[03:31:03.140 --> 03:31:12.940]  честно выбирать, а куда вы там переходите. Ну, где вы конкретно делаете повороты, правда? Но там,
[03:31:12.940 --> 03:31:22.140]  ну, вот. Но для нас это, в общем, даже, там, значит, там это будет примерно так. То есть,
[03:31:22.140 --> 03:31:27.940]  мы вместо этого будем делать так. То есть, вот мы находимся, вот, самой правой с нашей
[03:31:27.940 --> 03:31:32.700]  точки зрения касательной, вот находимся в этой точке. Теперь думаю, какая будет следующая? Она
[03:31:32.700 --> 03:31:38.260]  может быть конкретно на этом многоугольнике, да? А может быть еще там, соответственно,
[03:31:39.140 --> 03:31:44.980]  то есть, соответственно, где то. Но давайте, вот, на каждом многоугольнике попробуем найти,
[03:31:44.980 --> 03:31:56.340]  найдем правую касательную. Изначально, допустим, в тупую, да? Вот. Ну, я пока нот. Ну, вот. Ну,
[03:31:56.340 --> 03:32:02.540]  и понятно, если я тут найду вот эту правую касательную из каждой точки, ну, а мы находимся
[03:32:02.540 --> 03:32:07.020]  заведомо вовне, потому что мы же, в принципе, по контуру всего ищем, то тогда у нас получается,
[03:32:07.020 --> 03:32:13.180]  что, ну, то есть, получается, что выбрать нужный вариант у нас получается за n делить на h,
[03:32:13.180 --> 03:32:20.180]  правда? За n делить на h умножить на поиск касательной. Ну, первый раз я нахожу касательную в тупую.
[03:32:20.180 --> 03:32:27.660]  Суммарно получается n. Хорошо. Вот, просто, вот, буквально можно в тупую найти. Но фишка просто в
[03:32:27.660 --> 03:32:33.220]  следующем. Давай я перейду в следующую точку, в оболочке. Тогда я утверждаю, что вот эта вот
[03:32:33.220 --> 03:32:42.740]  касательная, она на самом деле сдвинется вот так вот против часовой стрелки. Логично, да? Ну, там
[03:32:42.740 --> 03:32:47.260]  просто либо она будет правой касательной, либо выяснится, что этот лучик уже на самом деле вот
[03:32:47.260 --> 03:32:50.780]  куда-то сюда пересекает, поэтому мы должны из этой точки сдвинуться в следующую и проверить,
[03:32:50.780 --> 03:32:55.740]  подходит ли она нам. И будем прям честно двигаться до тех пор, пока не наткнемся, собственно,
[03:32:55.740 --> 03:33:01.500]  правой касательной. Ну, там легко заметить, да, что, как бы, если у вас есть многоугольник, есть
[03:33:01.500 --> 03:33:07.460]  точка, то проверить верно ли, что вот эта правая касательная вы сможете просто за 1, правда? Понимаете,
[03:33:07.460 --> 03:33:12.140]  да? Вот. То есть там идея такая, то есть это получается на самом деле, то есть вы это будете,
[03:33:12.140 --> 03:33:19.940]  это получается такой метод n делить на h указателей. Ну, буквально. Потому что вы эти касательные
[03:33:19.940 --> 03:33:25.740]  двигаете честно за n делить на h, то есть там суммарно они двигаются указателей за n и получается,
[03:33:25.740 --> 03:33:30.540]  что у вас, то есть тогда на каждом шаге вы следующую точку находите за n делить на h,
[03:33:30.540 --> 03:33:37.500]  да? Вот. И тогда получается, что суммарно это все у вас работает за n плюс n делить на h на
[03:33:37.500 --> 03:33:56.940]  размер выпуклой оболочки. Ну да. Просто, как бы, поиск мы делаем не за логарифом, как раньше,
[03:33:56.940 --> 03:34:05.820]  а вот просто идем указателем. Ну короче, у нас же эта точка сильно переместилась вниз. Ну не
[03:34:05.820 --> 03:34:12.620]  обязательно. Ну в данном случае, да, если она вот потом отсюда переместилась вот сюда, то как бы,
[03:34:12.620 --> 03:34:18.420]  да, то есть касательная, ну здесь-то она, кстати, как раз нормально, она осталась на месте, но здесь
[03:34:18.420 --> 03:34:22.820]  она, конечно, переместилась сильно, да, тут пришлось вот так ходить, но как бы это не глобально,
[03:34:22.820 --> 03:34:26.580]  потому что, как бы, с точки зрения каждого многоугольника будет происходить следующее,
[03:34:26.580 --> 03:34:32.940]  у вас есть многоугольник, есть какая-то коза. Ну вот, наша любимая коза, которая ходит по какому-то
[03:34:32.940 --> 03:34:40.020]  внешнему контуру. Ну может быть, даже иногда соприкасающимся с самим многоугольником, да? И вы
[03:34:40.020 --> 03:34:46.740]  у этой козы, в каждом, пока коза ходит, поддерживаете ее правую касательную, но так как она ходит по
[03:34:46.740 --> 03:34:52.020]  контуру против часовой стрелки, то получается и касательную, то есть точка касания этого правого
[03:34:52.020 --> 03:35:01.220]  у нее аккуратно двигается вот так. Вот, да, это вот N делить на H, но чему у нас равен? Мы знаем,
[03:35:01.220 --> 03:35:06.980]  что размер выпуклой оболочки у нас H, то есть получается, что вот этот вот сам проход,
[03:35:06.980 --> 03:35:12.340]  это объединение вы сделали за O от N, то есть получается вот такая комбинация заворачивания
[03:35:12.340 --> 03:35:23.420]  подарка Игрехома. Вот эти указатели бегают за N, выбор каждый раз вы делаете за N делить на H,
[03:35:23.420 --> 03:35:30.940]  но мы же помним, что у нас выпуклая оболочка сама размера H, и вы этот проход сделали за O от N.
[03:35:42.940 --> 03:35:55.420]  Ну, может, и могли. Так, ну, действительно, как мы это могли сделать? Ну, могли,
[03:35:55.420 --> 03:36:00.940]  нет, ну, да, мы могли, конечно, соптимизировать как, ну, да, то есть мы могли вместо H здесь,
[03:36:00.940 --> 03:36:07.780]  конечно, взять K, и что у нас там получится? N делить на K, то есть там получается что-то N
[03:36:07.780 --> 03:36:19.780]  лог K, да, плюс сколько там? Плюс получается, плюс N, плюс, значит, N делить на K на H,
[03:36:19.780 --> 03:36:32.740]  и теперь возникает вопрос, какое оптимальное K при этом надо выбрать, да? Ну, должно быть так,
[03:36:32.740 --> 03:36:37.980]  то есть по идее надо брать, конечно, что K лог K примерно H должно быть, то есть я бы сказал,
[03:36:37.980 --> 03:36:42.980]  что K, видимо, должно быть в идеале где-то H делить на лог H, так-то получается.
[03:36:42.980 --> 03:36:50.940]  Что, правда, что ли?
[03:37:00.940 --> 03:37:07.020]  Хотя нет, если я подставлю K как H делить на лог H, то-то что у меня здесь получится? Тогда
[03:37:07.020 --> 03:37:12.420]  я подставлю вместо лог K, у меня получится лог H делить на лог H, там, лог H минус лог лог H,
[03:37:12.420 --> 03:37:18.780]  но это тоже самое лог H, так что, по сути, то есть, на самом деле, нет симпатической оптимальности здесь нет.
[03:37:18.780 --> 03:37:26.900]  Остается, остается теперь изобрести небеса и факт, с которым нам этот H присылают,
[03:37:26.900 --> 03:37:35.340]  но на самом деле все гораздо проще. На самом деле, этот алгоритм можно уточнить, можно сказать,
[03:37:35.340 --> 03:37:41.260]  что этот алгоритм находит выпуклооболочку, если она размера не больше H, а если она больше H,
[03:37:41.260 --> 03:37:48.180]  то он за N лог H узнает, что размер выпуклооболочки больше, чем больше, чем H, согласны?
[03:37:48.180 --> 03:37:58.780]  Так вот, так вот, эта идея говорит нам теперь так, что, а давайте теперь искать так выпуклооболочку,
[03:37:58.780 --> 03:38:16.700]  подразумевая, что H равно 1, значит, скажем так, 2, 2 в квадрате, 2 в степени 2, 2 в степени 2,
[03:38:16.700 --> 03:38:23.460]  2 в степени 3, 2 в степени 2, 2 в степени 4, 2 в степени 2, 2 в степени 5, 2 в степени 2, 2 в степени 6 и так далее.
[03:38:23.460 --> 03:38:34.860]  Ну, короче, смотрите, я беру такую последовательность H, что у каждого следующего
[03:38:34.860 --> 03:38:46.740]  логарифа в два раза больше предыдущего. Понимаете, да? Но теперь заметим следующее,
[03:38:46.740 --> 03:38:50.100]  что, допустим, я где-то остановлюсь, то есть в какой-то момент выяснится, что у меня H не
[03:38:50.100 --> 03:38:57.300]  превосходит вот этого вот, и я за N лог H, за N лог вот этого вот выпуклооболочку найду, правда?
[03:38:57.300 --> 03:39:05.940]  Вот. Но заметим следующее, что так как мы работали за N лог, там, для каждой итерации,
[03:39:05.940 --> 03:39:12.420]  тут работали за N на вот это, тут на N, потом перед этим было N на вот это, на вот это и так далее,
[03:39:12.420 --> 03:39:17.300]  то есть, короче, весь этот алгоритм работал за O от N на алгоритм вот этого, согласны?
[03:39:17.300 --> 03:39:24.900]  Но теперь остается только заметить, что логарифом вот этого не более чем в два раза больше,
[03:39:24.900 --> 03:39:39.740]  чем логарифом реального H. Согласны? Есть кто живой? Вот. То есть отсюда получается,
[03:39:39.740 --> 03:39:44.980]  что при переборе вот таких вот H оказывается, что у нас все работает за N лог H.
[03:39:44.980 --> 03:40:05.340]  Ну, короче, там написаны числа вида два в степени, два в степени G. Ну ладно,
[03:40:05.340 --> 03:40:20.500]  давай единичку не будем писать. Вот так. Ну, можно, в принципе, два в степени,
[03:40:20.500 --> 03:40:25.260]  два в степени ноль не писать, потому что если точки не лежат на одной прямой, то выпуклооболочек
[03:40:25.260 --> 03:40:31.740]  имеет размер заведомо 3, хотя бы. Поэтому, в принципе, можно отсюда начинать. Так что вот
[03:40:31.740 --> 03:40:36.340]  такая неожиданная красота. Ну, понятно, что там, скорее всего, найдется красивая несимпатическая
[03:40:36.340 --> 03:40:41.980]  оптимизация вида, а давайте сначала предположим, что H не больше чем 10 и попытаемся за 10 H проверить
[03:40:41.980 --> 03:40:49.300]  этот факт в тупую. Ну, там, ну, это константа 10, понятно, она там, конечно, может быть поправлена влево,
[03:40:49.300 --> 03:41:04.060]  вправо, в радость, но соответственно. Ну, вот и все. Так что вот таким вот образом мы научились искать
[03:41:04.060 --> 03:41:10.380]  выпуклые оболочки. Вот, то есть действительно, то есть понимать, конечно, полезно, на самом деле,
[03:41:10.380 --> 03:41:16.780]  разные из этих алгоритмов. Вот, потому что там, конечно, в конкретных задачах по геометрии там,
[03:41:16.780 --> 03:41:20.180]  конечно, разные из этих алгоритмов могут вам неожиданно выплыть. Скажем, алгоритм,
[03:41:20.180 --> 03:41:24.660]  которым Андрю выплывает, если вам там какой-то выпукло оболочку надо как-то в онлайне поддерживать.
[03:41:24.660 --> 03:41:30.340]  Ну, там, знаете, какой-нибудь типичный какой-то, то есть типичный какой-нибудь прием для решения
[03:41:30.340 --> 03:41:34.100]  задач на каких-нибудь там седьмых, восьмых задач на все, это какое-нибудь там дерево,
[03:41:34.100 --> 03:41:42.740]  отрезка выпуклых оболочек. Все сталкивались? Нет. Нет? Осторожно. В какой-то момент можете
[03:41:42.740 --> 03:41:51.540]  столкнуться. Ну, на всяких серосах или там где-нибудь еще там. Ну, на открытке да.
