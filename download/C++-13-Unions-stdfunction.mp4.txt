[00:00.000 --> 00:17.360]  Тема четырнадцатая, пункт, видимо, третий. Вот, у нас план сегодня обсудить реализацию с
[00:17.360 --> 00:24.800]  defunction, но мы ее обсудим не до конца, то есть мы сделаем ее не совсем
[00:24.800 --> 00:33.360]  эффективной, а вот завтра, ну, у меня на самом деле бы уже, о, тут есть проект, кстати,
[00:33.360 --> 00:42.560]  может тогда я смогу код написать, потому что завтра сдача, ну что ж мы теперь пары проводить
[00:42.560 --> 00:49.880]  не будем, завтра будет сдача после пары, а все-таки пару я проведу, а потом уже принимаем,
[00:49.880 --> 00:57.000]  вот, ну, может до одиннадцати принимаю место за сидеть, не знаю. Так вот, но прежде чем реализователь с
[00:57.000 --> 01:06.320]  defunction, мы вот о чем еще поговорим, у нас есть такой важный, важная сущность в языке,
[01:06.320 --> 01:20.320]  которую мы до сих пор никак не затрагивали, не обсуждали, это юнионы. Юнионы. Объединение. Вот,
[01:20.320 --> 01:31.120]  но есть янамы, а есть юнионы. Эта штука тоже пришла из Си. Вот, кто знает, что такое юнионы? Юнион
[01:31.120 --> 01:39.120]  хранится одной из нескольких. Ну, да, ну, вот там, в принципе, да, одни и те же люди, ну, в принципе,
[01:39.120 --> 01:46.240]  ладно. Ну, вот, да, сейчас я поговорю о том, что такое юнионы и какими пользоваться, вот, довольно
[01:46.240 --> 01:51.840]  скоро, примерно через неделю, а может быть даже и завтра, может и сегодня, мы поймем, что пользоваться
[01:51.840 --> 01:58.120]  им почти никогда не надо, потому что есть современная, потому что есть, что? Сдовариант. Правильно, да,
[01:58.120 --> 02:05.200]  Сдовариант, в Сибирь-17, который я заменил, и вашей четвертой задачей будет как раз он. Да,
[02:05.200 --> 02:11.080]  спойлер небольшой. Ну, про то, как устроена Сдовариант внутри, это отдельная веселая песня, и там масса
[02:11.080 --> 02:18.120]  приколов, которые вас, я уверен, очень порадуют, но это мы, видимо, обсудим уже через неделю, а пока
[02:18.120 --> 02:30.160]  мы просто обсудим, что такое юнионы для начала. Ну, вот, смотрите, юнион, это, на виду с классом и
[02:30.160 --> 02:38.520]  структурой, еще один способ объявить пользовательский тип данных, и у него могут быть поля, я могу
[02:38.520 --> 02:53.640]  сказать, что в юнионе есть, не знаю, int x, ну, для начала что-то тупое, char c и там double d, вот, и, собственно,
[02:53.640 --> 03:03.080]  дальше я могу объявлять сущности такого типа, где-нибудь в мейне. Вот, ну, я могу битовые поля какие-нибудь
[03:03.080 --> 03:14.680]  делать вместо полей обычных, ну, то есть, я могу сказать, что на этом есть int x, там, 4 byte, ну, короче,
[03:14.680 --> 03:28.000]  как обычно. Вот, а теперь, что я могу делать? Я могу... В смысле, есть 4 bit. О, bit, да, bit. Вот, теперь, ну,
[03:28.000 --> 03:41.400]  главное, что отличает юнион от класса и структуры, это то, что размер его, это не сумма размеров полей,
[03:41.400 --> 03:57.640]  а максимум. Вот, то есть, размер такой штуки будет 8. Тебя это удивляет? Да. Почему? Я не поднимал руку.
[03:57.640 --> 04:06.960]  А, ты не поднимал руку? Я не поднимал руку. У меня ощущение было, что ты что-то там... А, просто остальные не делали даже
[04:06.960 --> 04:13.520]  этого. Я это воспринял как положительный знак. Ладно, хорошо. Хоть бы голову почешу. Вот, человек уже голову чешет.
[04:13.520 --> 04:21.520]  Ладно. Ну ладно, хорошо. Да, так вот, в чем смысл юниона? В том, что он позволяет вам прям вот так вот
[04:21.520 --> 04:33.080]  топорно хранить вещь одну из таких на одном и том же участке памяти. То есть, ну, логично, что тогда его
[04:33.080 --> 04:41.720]  размер будет максимум из размеров полей, и вы можете динамически подменять то, что там хранится в рантайме.
[04:41.720 --> 05:01.200]  Ну, например, я могу сказать у точка х равно пяти, и там вывести х. А потом сказать у точка
[05:01.200 --> 05:10.200]  с равно а в калычках. И снова вывести х. Х уже поменяется от этого. Ну, х перезатрется, потому что...
[05:10.200 --> 05:18.720]  Ну, на самом деле, я не уверен, прям вот поменяется ли х от такого, потому что это зависит от того, в каком порядке там
[05:18.720 --> 05:27.160]  что называется, литлэндион или бикэндион. Вот если я на какой-нибудь дабл, то уж точно поменяется. Вот если я так скажу,
[05:27.160 --> 05:35.160]  то все, х точно перезатрется и будет... А мы еще не можем писать сяут х, а можем писать сяут у точка х.
[05:35.160 --> 05:50.160]  Да, и у точка х. Я должен писать сяут у точка х, и здесь тоже напишу сяут у точка х. То есть, это в каком-то смысле рантайм RenderFedcast?
[05:50.160 --> 06:01.160]  Да. Ну да. Не, ну RenderFedcast, он в общем-то... Ну, а что? А еще формально бы написать вот так, у в. Это правда, да?
[06:01.160 --> 06:09.160]  А, ну да. Понятно. Ну, в смысле, вообще не гарантируется, как бы, что мы можем, когда мы... Если мы там присвоили у точка дэш,
[06:09.160 --> 06:15.160]  то у точка х вообще корректно используется. Ну, если это int, то корректно, всегда. Ну, формально. Да, вот самые веселые вещи
[06:15.160 --> 06:21.160]  начинаются когда-то с интервьюальными. Типа здесь, то есть, типа с интервьюальными конструкторами. Сейчас мы про это поговорим.
[06:21.160 --> 06:32.160]  Значит, существует понятие ActiveMemberOfUnion. Вот. Есть... Ну, вот один... В юнионе в нем так дела обстоят. В нем один из членов активный,
[06:32.160 --> 06:44.160]  а все остальные неактивные. Если я... Ну, вот, кстати, в такой... В таком случае я не знаю, кажется, активность становится первой по умолчанию.
[06:44.160 --> 06:54.160]  Вот. Ну, если у меня все... У всех членов поля... О, и все члены — это примитивные типы, то есть, там, типы без интервьюальных конструкторов, ну, как обычно,
[06:54.160 --> 07:06.160]  то активность члена, она определяется просто тем, кому мы последнему присвоили значение. Вот я сказал у точка х 75, и тем самым активным членом стал х.
[07:06.160 --> 07:18.160]  Вот. Я могу в любом момент сказать у точка Derm314, и тогда активным членом станет D, а обращение на чтение, там, к неактивным членам в юнионе — это будет UBR.
[07:18.160 --> 07:28.160]  Ну, на практике это будет реально просто интерпрет-каст, как будто бы. Вот ничего особо такого страшного.
[07:28.160 --> 07:30.160]  Обычная UBR. Нормальная, типичная.
[07:30.160 --> 07:33.160]  Обычная, да. Типичные плюсы, да.
[07:33.160 --> 07:35.160]  Да, базовый плюс.
[07:35.160 --> 07:46.160]  Вот. Хорошо. Я могу изначально юнион чем-то про создание проницилизировать, я могу сказать вот так.
[07:49.160 --> 07:54.160]  Ну, тогда он просто проницилизирует то из полей, которое по типу подходит.
[07:55.160 --> 07:57.160]  А здесь у вас все подходятся?
[07:57.160 --> 08:00.160]  Нет, ну, понятно, что одно подходит точнее.
[08:01.160 --> 08:05.160]  А еще у нас два инта — интыкс и интеллект.
[08:05.160 --> 08:07.160]  Ну, вероятно, он же вообще...
[08:07.160 --> 08:10.160]  Вроде он будет пытаться первый проницилизировать ситуацию.
[08:10.160 --> 08:19.160]  А, кстати, да, наверное, я соманул, наверное, он проницилизирует... Слушай-ка, не помню, не могу точно сказать, он проницилизирует.
[08:19.160 --> 08:23.160]  Ну, если агрегательно связывается, то первый. Ну, через фигурную скобочку.
[08:24.160 --> 08:30.160]  Вот, а так... Даже не знаю, может он действительно первый будет пытаться проницилизировать, а не какой-то.
[08:30.160 --> 08:33.160]  Но в любом случае я могу написать конструкторы.
[08:34.160 --> 08:36.160]  Вот так некомпилируется.
[08:36.160 --> 08:38.160]  А, так некомпилируется, да?
[08:38.160 --> 08:39.160]  Окей.
[08:40.160 --> 08:41.160]  Ну, хорошо.
[08:41.160 --> 08:43.160]  Но я могу написать конструкторы.
[08:44.160 --> 08:50.160]  То есть я могу честно сказать, что такое у, от, инта, у, от, чар.
[08:50.160 --> 08:53.160]  В общем, я могу честно там задать конструкторы.
[08:57.160 --> 09:00.160]  Там, ну, в принципе, вот так нужно работать, кажется.
[09:01.160 --> 09:03.160]  Ну вот, значит, union.
[09:06.160 --> 09:10.160]  Давайте я продублирую то, что писал, потому что сейчас дело пройдет быстро.
[09:12.160 --> 09:14.160]  И конструктор, скажем, от, инт.
[09:14.160 --> 09:17.160]  Вот, теперь я могу смело сказать так.
[09:19.160 --> 09:22.160]  Давай вывести, значит, что там в иксе.
[09:23.160 --> 09:26.160]  А теперь давайте я скажу, что у меня...
[09:26.160 --> 09:28.160]  U, U раз в один.
[09:29.160 --> 09:30.160]  Да.
[09:30.160 --> 09:35.160]  А теперь давайте я скажу, что я на что-то поменял double.
[09:35.160 --> 09:37.160]  И снова выведу то, что в иксе.
[09:37.160 --> 09:39.160]  Это будет UB.
[09:40.160 --> 09:42.160]  И снова выведу то, что в иксе.
[09:42.160 --> 09:43.160]  Это будет UB.
[09:43.160 --> 09:45.160]  Но мы, по всей видимости, увидим вот...
[09:47.160 --> 09:48.160]  UXO.
[09:48.160 --> 09:49.160]  Да.
[09:49.160 --> 09:50.160]  Гитовое представление.
[09:51.160 --> 09:52.160]  Какой-то части дома.
[09:52.160 --> 09:53.160]  Первый, четвертый убит.
[09:53.160 --> 09:54.160]  Ой, бай.
[09:54.160 --> 09:56.160]  А это разве не unspecified behavior?
[09:56.160 --> 09:57.160]  Почему это undefined?
[09:57.160 --> 09:58.160]  Undefined.
[09:58.160 --> 09:59.160]  Обращение к неактивному.
[10:00.160 --> 10:01.160]  Ну, почему это undefined?
[10:01.160 --> 10:02.160]  Потому что там может быть неймит.
[10:02.160 --> 10:04.160]  Если нет, то это просто бред.
[10:04.160 --> 10:06.160]  Ну, ты всегда его можешь интерпретировать.
[10:06.160 --> 10:07.160]  Он очистит.
[10:07.160 --> 10:09.160]  Как и нет, ты его не всегда можешь интерпретировать.
[10:09.160 --> 10:10.160]  Это правда.
[10:10.160 --> 10:11.160]  Это как бред не unspecified.
[10:11.160 --> 10:12.160]  Это не undefined.
[10:12.160 --> 10:15.160]  Ну, я думаю, что undefined, но это такие...
[10:17.160 --> 10:19.160]  Это очень такие технические детали, не особо...
[10:21.160 --> 10:22.160]  Существенные.
[10:22.160 --> 10:23.160]  Будем честными, кто из нас это использует.
[10:23.160 --> 10:24.160]  Все, да.
[10:24.160 --> 10:26.160]  Все понимают, что будет, если...
[10:27.160 --> 10:28.160]  Что так делать не надо.
[10:28.160 --> 10:29.160]  Надо просто...
[10:30.160 --> 10:32.160]  Правильно использовать union, да.
[10:33.160 --> 10:35.160]  Но это не так...
[10:35.160 --> 10:36.160]  Не так интересно.
[10:36.160 --> 10:37.160]  Нет, почему?
[10:37.160 --> 10:39.160]  Может кто-то из вас как раз будет использовать.
[10:39.160 --> 10:42.160]  Вам вот в задаче реализация вариантов вполне пригодится.
[10:42.160 --> 10:43.160]  Но...
[10:45.160 --> 10:47.160]  Никто из нас не будет реализовывать, я понял.
[10:48.160 --> 10:49.160]  Никто не будет цельно играть.
[10:49.160 --> 10:50.160]  Все-таки из-за ахиды сюда...
[10:51.160 --> 10:52.160]  В принципе...
[10:53.160 --> 10:54.160]  Подход на боль.
[10:54.160 --> 10:55.160]  Я знал, что...
[10:55.160 --> 10:56.160]  Я в ходу признал, что так на боль.
[10:56.160 --> 10:57.160]  А вы?
[11:00.160 --> 11:01.160]  Вот.
[11:01.160 --> 11:04.160]  Давайте рассмотрим случай теперь, когда у меня
[11:05.160 --> 11:07.160]  в union тип с негривляльными конструкторами.
[11:11.160 --> 11:12.160]  А...
[11:13.160 --> 11:14.160]  Смотрите.
[11:15.160 --> 11:17.160]  Давайте у меня в union будет, например...
[11:18.160 --> 11:19.160]  И...
[11:19.160 --> 11:20.160]  И стринг.
[11:20.160 --> 11:21.160]  Нет.
[11:25.160 --> 11:26.160]  Вот.
[11:26.160 --> 11:27.160]  Но я могу сказать, что
[11:28.160 --> 11:29.160]  U от...
[11:35.160 --> 11:36.160]  От XA...
[11:36.160 --> 11:38.160]  Ну, от NTA создается, получается, X.
[11:39.160 --> 11:41.160]  От строки создается, получается, S.
[11:42.160 --> 11:43.160]  Вот.
[11:44.160 --> 11:45.160]  Что будет,
[11:46.160 --> 11:47.160]  если я
[11:48.160 --> 11:49.160]  попробую...
[11:50.160 --> 11:51.160]  Ну, скажем...
[11:57.160 --> 11:58.160]  Что сделать?
[11:58.160 --> 11:59.160]  Ну, вот.
[12:05.160 --> 12:06.160]  Вот, допустим,
[12:06.160 --> 12:09.160]  я создал union, проницилизировал X,
[12:09.160 --> 12:11.160]  а теперь хочу вот так сделать.
[12:14.160 --> 12:16.160]  Ну, и вывести нормакресс.
[12:17.160 --> 12:18.160]  Вот.
[12:18.160 --> 12:19.160]  Проблем нет.
[12:19.160 --> 12:20.160]  Проблем нет.
[12:22.160 --> 12:24.160]  А вот, оказывается, будет секфолт сейчас.
[12:26.160 --> 12:27.160]  Хороший коз, добрый.
[12:28.160 --> 12:29.160]  Спасибо, я не хочу...
[12:29.160 --> 12:32.160]  Если я сейчас ничего не накутал, то кажется, будет секфолт.
[12:32.160 --> 12:33.160]  Давайте проверим.
[12:33.160 --> 12:34.160]  А, ну...
[12:34.160 --> 12:35.160]  Во-первых...
[12:35.160 --> 12:36.160]  Так, извиняюсь.
[12:36.160 --> 12:37.160]  Ну, во-первых,
[12:39.160 --> 12:40.160]  сначала CE.
[12:40.160 --> 12:42.160]  Давайте поймем, почему CE.
[12:43.160 --> 12:44.160]  Потому что,
[12:44.160 --> 12:49.160]  если у меня в union есть члены с нетрериальными конструкторами,
[12:50.160 --> 12:51.160]  типа string, например,
[12:52.160 --> 12:56.160]  то у такого union явно надо прописывать деструктор.
[12:56.160 --> 12:58.160]  Ну, это логично, потому что
[12:59.160 --> 13:01.160]  что должно происходить, когда union уничтожается?
[13:01.160 --> 13:03.160]  Деструктор активного.
[13:03.160 --> 13:04.160]  Да.
[13:05.160 --> 13:07.160]  Деструктор активный, а кто из них активный?
[13:07.160 --> 13:08.160]  Он же сам знает.
[13:08.160 --> 13:09.160]  Кто знает?
[13:09.160 --> 13:10.160]  Union не знает.
[13:10.160 --> 13:11.160]  Union не знает?
[13:11.160 --> 13:12.160]  Union...
[13:12.160 --> 13:13.160]  Нет, не знает.
[13:18.160 --> 13:20.160]  Блин, ты можешь просто не пропускать пары,
[13:20.160 --> 13:23.160]  просто потому, что без твоих комментариев гораздо гуснее, чем...
[13:23.160 --> 13:24.160]  У-у-у...
[13:26.160 --> 13:29.160]  Я этого и думал, что 4,5,10 лекции.
[13:29.160 --> 13:31.160]  Ну, вот давай, постарайся, а то прям вот...
[13:31.160 --> 13:34.160]  Мы очень скучаем без твоих, значит, этих...
[13:35.160 --> 13:36.160]  Хорошо.
[13:37.160 --> 13:38.160]  Да, но проблема.
[13:38.160 --> 13:40.160]  Потому что, как мы поймем,
[13:41.160 --> 13:42.160]  что он уничтожит?
[13:42.160 --> 13:43.160]  Union,
[13:44.160 --> 13:46.160]  когда выходит из области видимости,
[13:47.160 --> 13:49.160]  он должен что-то ветероятно уничтожить,
[13:49.160 --> 13:50.160]  у него явно есть поле и string,
[13:50.160 --> 13:51.160]  ему нужен деструктор.
[13:52.160 --> 13:54.160]  Он же откуда-то знает, кто у него активный,
[13:54.160 --> 13:55.160]  и вообще, как он?
[13:55.160 --> 13:56.160]  На B кидает.
[13:56.160 --> 13:59.160]  В том-то и смысл B, что он не знает,
[13:59.160 --> 14:00.160]  он делает так.
[14:03.160 --> 14:04.160]  О, какие беды, ладно.
[14:04.160 --> 14:07.160]  Если бы он знал, то его можно было бы избежать.
[14:07.160 --> 14:09.160]  В этом и смысл же.
[14:10.160 --> 14:11.160]  Вот, ну давайте.
[14:11.160 --> 14:13.160]  Плюс, кажется, надо вообще деструктор каждый раз,
[14:13.160 --> 14:15.160]  когда мы переприсваиваем что-то.
[14:15.160 --> 14:17.160]  Ну, меняем активный, да.
[14:17.160 --> 14:18.160]  Ну да.
[14:19.160 --> 14:21.160]  Я хотел предложить хранить еще и Bool,
[14:21.160 --> 14:24.160]  но как бы он не затрется.
[14:24.160 --> 14:26.160]  А вот, например, когда мы переприсваиваем,
[14:26.160 --> 14:27.160]  как он понимает,
[14:27.160 --> 14:29.160]  он понимает, кто был активным,
[14:29.160 --> 14:30.160]  что он нужен деструктор.
[14:30.160 --> 14:31.160]  Нет, он не знает,
[14:31.160 --> 14:33.160]  он просто его еще называет.
[14:33.160 --> 14:35.160]  В этом-то и причина segfault.
[14:37.160 --> 14:38.160]  Ну, давайте я скажу, что...
[14:38.160 --> 14:39.160]  Не понял.
[14:39.160 --> 14:40.160]  Сейчас поймешь.
[14:40.160 --> 14:41.160]  Ну, вот давайте я скажу,
[14:41.160 --> 14:43.160]  что деструктор ничего не делает.
[14:44.160 --> 14:45.160]  Так, наверное, должно быть, можно.
[14:45.160 --> 14:47.160]  А, нет, default...
[14:47.160 --> 14:48.160]  Default это что?
[14:48.160 --> 14:49.160]  Просто не что.
[14:49.160 --> 14:50.160]  Да, default он не умеет,
[14:50.160 --> 14:52.160]  лучше пустой просто оставлю.
[14:54.160 --> 14:55.160]  Вот.
[14:57.160 --> 14:58.160]  Отлично.
[14:59.160 --> 15:01.160]  И segfault, как я и говорил.
[15:02.160 --> 15:03.160]  Здорово.
[15:03.160 --> 15:04.160]  Кто понимает, почему?
[15:05.160 --> 15:06.160]  Мне кажется,
[15:06.160 --> 15:08.160]  в операторе присваивания строки...
[15:08.160 --> 15:09.160]  Ну, у нас в строке
[15:09.160 --> 15:10.160]  должна быть уже коррект
[15:10.160 --> 15:11.160]  на каком-то виде,
[15:11.160 --> 15:12.160]  когда мы присваиваем,
[15:12.160 --> 15:13.160]  а у нас там лидично написано.
[15:13.160 --> 15:14.160]  Ну, там у нас дел происходит
[15:14.160 --> 15:15.160]  по новому патеру.
[15:15.160 --> 15:16.160]  Конечно.
[15:16.160 --> 15:17.160]  Ну да.
[15:17.160 --> 15:18.160]  В этом вот месте
[15:18.160 --> 15:19.160]  вызывается оператор
[15:19.160 --> 15:21.160]  присваивания двух стрингов.
[15:23.160 --> 15:25.160]  Это же стринг и это стринг.
[15:25.160 --> 15:26.160]  Классическая проблема,
[15:26.160 --> 15:27.160]  как бы ярко ли было.
[15:27.160 --> 15:30.160]  Мы вызываем оператор присваивания,
[15:30.160 --> 15:32.160]  хотя стринг-то никакого нет
[15:32.160 --> 15:33.160]  на самом деле слева.
[15:33.160 --> 15:35.160]  Там, ну...
[15:35.160 --> 15:36.160]  Какие-то биты.
[15:36.160 --> 15:38.160]  Продобные байты, да.
[15:38.160 --> 15:40.160]  Слава, а если бы ты написал 0,
[15:40.160 --> 15:41.160]  то это было бы...
[15:41.160 --> 15:42.160]  0 где бы написал?
[15:42.160 --> 15:44.160]  Ну, урона 0.
[15:44.160 --> 15:45.160]  Ну, то есть...
[15:45.160 --> 15:47.160]  Нам могло бы повести.
[15:47.160 --> 15:48.160]  Зависит от того,
[15:48.160 --> 15:49.160]  как внутри устроен стринг.
[15:49.160 --> 15:50.160]  Ну да, зависит от того,
[15:50.160 --> 15:51.160]  как внутри устроен стринг.
[15:51.160 --> 15:52.160]  То есть, типа,
[15:52.160 --> 15:53.160]  сейчас нам могло бы повести
[15:53.160 --> 15:55.160]  и это бы означало, что...
[15:55.160 --> 15:56.160]  Не понял.
[15:56.160 --> 15:58.160]  Какая проблема с мусорной памятью?
[15:58.160 --> 15:59.160]  Ну, типа...
[15:59.160 --> 16:00.160]  Так ты дилит вызываешь.
[16:00.160 --> 16:01.160]  Там...
[16:01.160 --> 16:02.160]  Ну как?
[16:02.160 --> 16:03.160]  Еще раз.
[16:03.160 --> 16:04.160]  Какая была проблема?
[16:04.160 --> 16:05.160]  Указатель какой-то.
[16:05.160 --> 16:06.160]  Ну или что-то там.
[16:06.160 --> 16:07.160]  Я не понимаю.
[16:07.160 --> 16:08.160]  Но дилит он, наверное, не вызывает.
[16:08.160 --> 16:10.160]  Он же через аллокаты должен.
[16:10.160 --> 16:11.160]  Ну, какой аллокат?
[16:11.160 --> 16:12.160]  А, да.
[16:12.160 --> 16:13.160]  FC структура.
[16:13.160 --> 16:14.160]  Класс.
[16:14.160 --> 16:15.160]  Не-не-не.
[16:15.160 --> 16:16.160]  Сейчас.
[16:16.160 --> 16:18.160]  Это пришло FC,
[16:18.160 --> 16:19.160]  но это не значит,
[16:19.160 --> 16:21.160]  что у нас только C-шные разрешены.
[16:21.160 --> 16:22.160]  Он вызывает дилит,
[16:22.160 --> 16:23.160]  потому что стадартный жалобкафер.
[16:23.160 --> 16:24.160]  Конечно.
[16:25.160 --> 16:26.160]  Вот!
[16:26.160 --> 16:27.160]  А-а-а...
[16:27.160 --> 16:28.160]  Так.
[16:28.160 --> 16:29.160]  C подник.
[16:29.160 --> 16:30.160]  Почему U-Base?
[16:30.160 --> 16:31.160]  А почему C-Fault?
[16:31.160 --> 16:32.160]  С нулям не получилось?
[16:32.160 --> 16:33.160]  А давайте проверим.
[16:33.160 --> 16:34.160]  Нет, я думал,
[16:34.160 --> 16:35.160]  я старлю на то,
[16:35.160 --> 16:36.160]  что не получится.
[16:36.160 --> 16:37.160]  Почему?
[16:37.160 --> 16:38.160]  Не получится.
[16:38.160 --> 16:39.160]  О-хо-хо-хо!
[16:39.160 --> 16:40.160]  Ну, мусор с дилитом.
[16:40.160 --> 16:41.160]  Ну, ху-ху-хо-хо.
[16:41.160 --> 16:42.160]  Ну, мы с дилитом снижались.
[16:42.160 --> 16:43.160]  Ладно, хорошо.
[16:43.160 --> 16:44.160]  Ну, в общем,
[16:44.160 --> 16:46.160]  по прямому с мусором я не думаю.
[16:46.160 --> 16:47.160]  Ну, значит,
[16:47.160 --> 16:48.160]  в...
[16:48.160 --> 16:49.160]  Ну, в общем,
[16:49.160 --> 16:50.160]  в общем,
[16:50.160 --> 16:51.160]  в общем,
[16:51.160 --> 16:57.160]  Ну, значит, в стринге первым полем лежит указатель, действительно, что мы поняли.
[17:00.160 --> 17:02.160]  Так, вы поняли, что мы поняли?
[17:02.160 --> 17:03.160]  Или сайд?
[17:03.160 --> 17:04.160]  Хотя нет.
[17:04.160 --> 17:05.160]  Да, указатель.
[17:05.160 --> 17:09.160]  Типа, я должен явно вызывать инструкцию каждый раз?
[17:09.160 --> 17:11.160]  Да, да.
[17:11.160 --> 17:17.160]  Значит, если у тебя union состоит из полей, которые являются интервьюальными типами,
[17:17.160 --> 17:19.160]  то чтобы корректно...
[17:19.160 --> 17:21.160]  Я не понял, а если играли тип...
[17:21.160 --> 17:22.160]  Ну, вот...
[17:22.160 --> 17:23.160]  И все равно он падает?
[17:23.160 --> 17:24.160]  Нет, нет.
[17:24.160 --> 17:27.160]  Если у тебя есть...
[17:27.160 --> 17:28.160]  Ты не можешь...
[17:28.160 --> 17:33.160]  Во-первых, ты должен вызывать инструкцию, прежде чем выключить одно из полей.
[17:33.160 --> 17:38.160]  А чтобы включить поле новое, ты не представляешь, как должен использоваться placement tool.
[17:38.160 --> 17:41.160]  То есть правильное использование было бы таким.
[17:41.160 --> 17:42.160]  Не так.
[17:47.160 --> 17:48.160]  А вот так.
[17:48.160 --> 17:55.160]  У от, понятное дело, такого std string ktbc.
[17:59.160 --> 18:01.160]  Вот это правильное использование.
[18:01.160 --> 18:02.160]  Но теперь утечка памяти.
[18:02.160 --> 18:04.160]  Утечка памяти и в прошлом коде была.
[18:04.160 --> 18:08.160]  А чтобы утечки памяти не было, мне нужно вручную вызывать инструктор.
[18:08.160 --> 18:11.160]  То есть мне нужно написать u.s.tilde...
[18:11.160 --> 18:12.160]  А вот tilde что?
[18:12.160 --> 18:14.160]  Basic string.
[18:14.160 --> 18:17.160]  Да, std basic string.
[18:19.160 --> 18:21.160]  Если я напишу tilde st string, то это не скомпелируется.
[18:21.160 --> 18:22.160]  Давайте проверим.
[18:22.160 --> 18:23.160]  Давай.
[18:23.160 --> 18:24.160]  Потому что...
[18:24.160 --> 18:26.160]  String это alias, поэтому...
[18:26.160 --> 18:27.160]  Да.
[18:27.160 --> 18:28.160]  Но должно же компелировать.
[18:28.160 --> 18:29.160]  Using.
[18:30.160 --> 18:33.160]  Ну, нет такого метода.
[18:34.160 --> 18:35.160]  А, виноват.
[18:35.160 --> 18:36.160]  Почему?
[18:36.160 --> 18:37.160]  Какой std?
[18:37.160 --> 18:38.160]  Да-да-да.
[18:38.160 --> 18:41.160]  Здесь должно быть просто tilde.
[18:41.160 --> 18:42.160]  Но...
[18:42.160 --> 18:43.160]  Опять-таки...
[18:46.160 --> 18:47.160]  Это не класс String?
[18:47.160 --> 18:49.160]  Да, это ожидается и имя класса, а не имя alias.
[18:49.160 --> 18:50.160]  Поэтому...
[18:54.160 --> 18:55.160]  Basic string char.
[18:55.160 --> 18:56.160]  Вот так...
[18:56.160 --> 18:59.160]  Вот так скомпелируется.
[19:00.160 --> 19:01.160]  А если просто basic string?
[19:02.160 --> 19:03.160]  Так она шаблонная.
[19:03.160 --> 19:05.160]  Он скажет, я не знаю какой шаблонный аргумент.
