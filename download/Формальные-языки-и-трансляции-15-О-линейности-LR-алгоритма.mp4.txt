[00:00.000 --> 00:07.000]  Всем доброго дня, мы с вами сегодня встречаемся на последней лекции.
[00:07.000 --> 00:10.000]  И сегодня последняя лекция такая крайне интересная.
[00:10.000 --> 00:14.000]  Она заключается в том, что мы возвращаемся к старой тематике,
[00:14.000 --> 00:18.000]  но на самом деле мы сегодня немножко посмотрим новую тематику.
[00:18.000 --> 00:21.000]  Это не странно, для того чтобы доказать старую тематику.
[00:21.000 --> 00:24.000]  Значит, мы сегодня будем говорить про линейный селярный алгоритм,
[00:24.000 --> 00:27.000]  и более того, мы с вами будем говорить про такое понятие,
[00:28.000 --> 00:32.000]  как дет theCUBE детерминированный автомат с магазulinной памятью.
[00:34.000 --> 00:36.000]  То есть нам нужно будет определить,
[00:36.000 --> 00:37.460]  Что такое silhouette детерминированный автомат с магазе케
[00:38.000 --> 00:40.520]  во-первых Vai direct vet,
[00:41.000 --> 00:44.000]  и вы не поверите это разное определение.
[00:46.000 --> 00:49.220]  И кстати у ceux, кто конечно был у меня на семинарах,
[00:49.220 --> 00:52.000]  понимают в чем есть подвох.
[00:52.000 --> 00:54.520]  Особенно как строить дет crocodile дет Lisa,
[00:54.520 --> 00:56.280]  suspicious линейный автомат,
[00:56.280 --> 00:58.280]  просто mp-автомат
[00:58.280 --> 01:00.280]  просто mp, да
[01:00.280 --> 01:02.280]  а говорили, что есть там
[01:02.280 --> 01:04.280]  макер дна и вот это вот все
[01:04.280 --> 01:06.280]  макер дна?
[01:06.280 --> 01:08.280]  ну там элемент какой-то
[01:08.280 --> 01:10.280]  черта с два
[01:10.280 --> 01:12.280]  а, в плане элемента
[01:12.280 --> 01:14.280]  который мы сейчас проявляем
[01:14.280 --> 01:16.280]  да, да, да
[01:16.280 --> 01:18.280]  так вот, оказывается, чтобы честно
[01:18.280 --> 01:20.280]  распознавать слово в этом автомате
[01:20.280 --> 01:22.280]  чтобы честно автомат нафигировать, ему нужно положить
[01:22.280 --> 01:24.280]  символ конца слов
[01:24.280 --> 01:26.280]  вот, если не положить, то
[01:26.280 --> 01:28.280]  ничего работы не будет
[01:28.280 --> 01:30.280]  да, это мы сегодня тоже докажем
[01:30.280 --> 01:32.280]  значит, смотрите
[01:32.280 --> 01:34.280]  давайте вспомним вообще, что у нас было
[01:34.280 --> 01:36.280]  в предыдущих сериях, две серии назад
[01:36.280 --> 01:38.280]  три серии назад
[01:40.280 --> 01:42.280]  ну ладно, мы тут уже
[01:42.280 --> 01:44.280]  проговорились, мы вообще
[01:44.280 --> 01:46.280]  леоралгоритм доказали
[01:46.280 --> 01:48.280]  вот, значит
[01:48.280 --> 01:50.280]  доказали корректность леоралгоритма
[01:50.280 --> 01:52.280]  более того, мы доказали однозначность леоралгоритма
[01:52.280 --> 01:54.280]  и вот сегодняшняя цель будет как раз вести
[01:54.280 --> 01:56.280]  новую конструкцию
[01:56.280 --> 01:58.280]  и разобрать
[01:58.280 --> 02:00.280]  как она работает
[02:00.280 --> 02:02.280]  вот смотрите, давайте подумаем
[02:02.280 --> 02:04.280]  пока мы не начали говорить
[02:04.280 --> 02:06.280]  в чем будет состоять
[02:06.280 --> 02:08.280]  детерминированность
[02:08.280 --> 02:10.280]  классического ДК
[02:12.280 --> 02:14.280]  что мы требовали для детерминированности
[02:14.280 --> 02:16.280]  классического конечного автомата?
[02:16.280 --> 02:18.280]  во-первых, это
[02:18.280 --> 02:20.280]  буквенные переходы
[02:22.280 --> 02:24.280]  а во-вторых
[02:24.280 --> 02:26.280]  не было двух переходов по одной букве
[02:26.280 --> 02:28.280]  да, не было двух переходов по одной букве
[02:28.280 --> 02:30.280]  то есть
[02:30.280 --> 02:32.280]  понимая, что у нас находятся
[02:32.280 --> 02:34.280]  на входе
[02:34.280 --> 02:36.280]  мы явно понимали, как работает наш автомат
[02:38.280 --> 02:40.280]  давайте попробуем
[02:40.280 --> 02:42.280]  сначала, прежде чем мы перейдем к другому определению
[02:42.280 --> 02:44.280]  в определении ДК
[02:44.280 --> 02:46.280]  убрать требование на однобуквенность переходов
[02:46.280 --> 02:48.280]  тогда как, думаете, будет
[02:48.280 --> 02:50.280]  выглядеть определение?
[02:52.280 --> 02:54.280]  еще раз?
[02:54.280 --> 02:56.280]  представьте себе, что в определении ДК
[02:56.280 --> 02:58.280]  вы не требуете
[02:58.280 --> 03:00.280]  однобуквенность переходов, но при этом
[03:00.280 --> 03:02.280]  хотите, чтобы вы по входу однозначно понимали
[03:02.280 --> 03:04.280]  префикс на свободное
[03:04.280 --> 03:06.280]  префикс на свободное
[03:06.280 --> 03:08.280]  то есть у вас не должно быть картинки такой
[03:08.280 --> 03:10.280]  можно вас попросить
[03:10.280 --> 03:12.280]  сейчас остановиться
[03:12.280 --> 03:14.280]  я на пару минут прерыву запись звука
[03:14.280 --> 03:16.280]  а то я заметил, что я записывал
[03:16.280 --> 03:18.280]  звук через мобильный интернет
[03:18.280 --> 03:20.280]  хорошо
[03:20.280 --> 03:22.280]  что это?
[03:22.280 --> 03:24.280]  плохо
[03:24.280 --> 03:26.280]  оно уже работает
[03:26.280 --> 03:28.280]  должно
[03:28.280 --> 03:30.280]  скажите что-нибудь
[03:30.280 --> 03:32.280]  раз, два, три
[03:34.280 --> 03:36.280]  нет
[03:36.280 --> 03:38.280]  сейчас я перейду в конференцию
[03:38.280 --> 03:40.280]  колбасный цех 7
[03:42.280 --> 03:44.280]  еще не произошел
[03:44.280 --> 03:46.280]  кстати, совет
[03:46.280 --> 03:48.280]  послушайте
[03:50.280 --> 03:52.280]  а?
[03:52.280 --> 03:54.280]  не-не-не, это не то
[03:54.280 --> 03:56.280]  это, в общем
[03:56.280 --> 03:58.280]  рэф вечеринка
[03:58.280 --> 04:00.280]  так, теперь вам надо меня пустить
[04:00.280 --> 04:02.280]  рэф вечеринка была в 70-х годах
[04:02.280 --> 04:04.280]  ой, не в 70-х, в начале нулевых
[04:06.280 --> 04:08.280]  нифига себе
[04:10.280 --> 04:12.280]  так, теперь
[04:12.280 --> 04:14.280]  разрешение на запись
[04:14.280 --> 04:16.280]  ну, плюс-минус 30 лет 70-х
[04:16.280 --> 04:18.280]  все, готово
[04:18.280 --> 04:20.280]  в октябре было, кстати
[04:20.280 --> 04:22.280]  20 лет отмечали
[04:22.280 --> 04:24.280]  ладно, что, продолжаем?
[04:24.280 --> 04:26.280]  да
[04:28.280 --> 04:30.280]  так, возвращаемся
[04:30.280 --> 04:32.280]  значит, префиксы свободны
[04:32.280 --> 04:34.280]  что это означает?
[04:34.280 --> 04:36.280]  это означает, что у нас не может быть переходов
[04:36.280 --> 04:38.280]  таких, что у либо является префиксом v, либо v является префиксом o
[04:40.280 --> 04:42.280]  вот такая картинка запрещена
[04:44.280 --> 04:46.280]  а теперь давайте попробуем перевести это
[04:46.280 --> 04:48.280]  в терминах детаминированности
[04:48.280 --> 04:50.280]  в терминах mp-автомата
[04:52.280 --> 04:54.280]  как вы думаете, что будет?
[04:54.280 --> 04:56.280]  какое будет выполнено требование?
[05:08.280 --> 05:10.280]  одновременно
[05:10.280 --> 05:12.280]  согласованность стека и символа
[05:12.280 --> 05:14.280]  то есть, смотрите
[05:14.280 --> 05:16.280]  мы говорим следующее
[05:16.280 --> 05:18.280]  давайте ведем следующий переход
[05:18.280 --> 05:20.280]  определение, два перехода в mp-автомате
[05:20.280 --> 05:22.280]  будут называться совместными
[05:22.280 --> 05:24.280]  если у нас выполнено следующее условие
[05:26.280 --> 05:28.280]  тут смотрите, важно правильно
[05:28.280 --> 05:30.280]  это читать, по-моему
[05:32.280 --> 05:34.280]  да, тут немножко
[05:34.280 --> 05:36.280]  термины перепутаны, во втором месте
[05:36.280 --> 05:38.280]  суффиксы должны быть не те
[05:38.280 --> 05:40.280]  в общем
[05:42.280 --> 05:44.280]  давайте определим совместные переходы
[05:52.280 --> 05:54.280]  допустим, у нас с вами есть переход
[05:56.280 --> 05:58.280]  значит
[06:00.280 --> 06:02.280]  как пишут детаминированные
[06:02.280 --> 06:04.280]  а?
[06:04.280 --> 06:06.280]  детаминированные
[06:08.280 --> 06:10.280]  можно
[06:10.280 --> 06:12.280]  этот слово
[06:12.280 --> 06:14.280]  детерминан взять
[06:14.280 --> 06:16.280]  от него первые семь букв отрезать
[06:16.280 --> 06:18.280]  а дальше написать ровные
[06:24.280 --> 06:26.280]  итак, смотрите
[06:26.280 --> 06:28.280]  у нас есть два состояния в mp-автомате
[06:28.280 --> 06:30.280]  и нам нужно определить
[06:30.280 --> 06:32.280]  когда мы не сможем ничего понять
[06:32.280 --> 06:34.280]  но, во-первых
[06:34.280 --> 06:36.280]  у нас должно быть выполнено условие
[06:36.280 --> 06:38.280]  у1 является префиксом у2
[06:40.280 --> 06:42.280]  да
[06:42.280 --> 06:44.280]  а во-вторых
[06:44.280 --> 06:46.280]  нам нужно понять, что у нас с вами
[06:46.280 --> 06:48.280]  кажется
[06:48.280 --> 06:50.280]  сейчас, по-моему
[06:50.280 --> 06:52.280]  должен быть альфа2
[06:52.280 --> 06:54.280]  если у нас
[06:56.280 --> 06:58.280]  откуплю
[07:02.280 --> 07:04.280]  так, смотрите
[07:04.280 --> 07:06.280]  вот таких переходов быть не может
[07:08.280 --> 07:10.280]  одновременно
[07:12.280 --> 07:14.280]  то есть у нас получается, смотрите
[07:14.280 --> 07:16.280]  если у нас
[07:16.280 --> 07:18.280]  получается у1
[07:18.280 --> 07:20.280]  у2
[07:20.280 --> 07:22.280]  префикс у1
[07:24.280 --> 07:26.280]  и одновременно
[07:26.280 --> 07:28.280]  получается что?
[07:28.280 --> 07:30.280]  альфа2
[07:30.280 --> 07:32.280]  альфа2
[07:32.280 --> 07:34.280]  суффикс альфа1
[07:36.280 --> 07:38.280]  вот так
[07:38.280 --> 07:40.280]  альфа2 суффикс альфа1
[07:40.280 --> 07:42.280]  то есть тогда у нас
[07:42.280 --> 07:44.280]  будет наручено, потому что
[07:44.280 --> 07:46.280]  имея на входе букву а и на стоке b
[07:46.280 --> 07:48.280]  мы не понимаем, что с вами делать
[07:48.280 --> 07:50.280]  можем не понимать, что делать
[07:50.280 --> 07:52.280]  то есть
[07:52.280 --> 07:54.280]  получается у нас выполнено условие
[07:54.280 --> 07:56.280]  следующее
[07:56.280 --> 07:58.280]  либо 2
[08:08.280 --> 08:10.280]  что такое это терминированный mp-автомат
[08:10.280 --> 08:12.280]  в таком случае
[08:12.280 --> 08:14.280]  как вы думаете
[08:14.280 --> 08:16.280]  это mp-автомат без совместных переходов
[08:26.280 --> 08:28.280]  да
[08:28.280 --> 08:30.280]  это mp-автомат без совместных переходов
[08:30.280 --> 08:32.280]  отлично
[08:32.280 --> 08:34.280]  значит
[08:34.280 --> 08:36.280]  это терминированный
[08:36.280 --> 08:38.280]  вот это слово
[08:38.280 --> 08:40.280]  значит смотрите дальше
[08:40.280 --> 08:42.280]  важно следующее
[08:42.280 --> 08:44.280]  теперь нам нужно определить
[08:44.280 --> 08:46.280]  что такое терминированный
[08:46.280 --> 08:48.280]  cs язык
[08:56.280 --> 08:58.280]  это язык
[09:06.280 --> 09:08.280]  это язык
[09:08.280 --> 09:10.280]  в котором
[09:10.280 --> 09:12.280]  смотрите
[09:12.280 --> 09:14.280]  получается
[09:16.280 --> 09:18.280]  это
[09:18.280 --> 09:20.280]  множество слов w
[09:20.280 --> 09:22.280]  таких, что
[09:22.280 --> 09:24.280]  существует q
[09:24.280 --> 09:26.280]  множество завершающих состояний
[09:28.280 --> 09:30.280]  таких, что мы на входе читаем
[09:30.280 --> 09:32.280]  символ w$
[09:32.280 --> 09:34.280]  который не лежит в языке
[09:36.280 --> 09:38.280]  и получаем
[09:38.280 --> 09:40.280]  очищенный стэк
[09:40.280 --> 09:42.280]  обращу внимание
[09:42.280 --> 09:44.280]  символ $ здесь ваш
[09:44.280 --> 09:46.280]  сейчас, это не то же самое
[09:46.280 --> 09:48.280]  что у нас существует терминированный
[09:48.280 --> 09:50.280]  мп-автомат
[09:50.280 --> 09:52.280]  нет, не то же самое
[09:52.280 --> 09:54.280]  для произвольных грамматик
[09:54.280 --> 09:56.280]  что сделать
[09:56.280 --> 09:58.280]  мы хотим сделать так
[09:58.280 --> 10:00.280]  чтобы терминированные cs языки
[10:00.280 --> 10:02.280]  были под множеством
[10:02.280 --> 10:04.280]  классических cs языков
[10:06.280 --> 10:08.280]  если мы с вами
[10:08.280 --> 10:10.280]  этого не потребуем
[10:10.280 --> 10:12.280]  то будет некоторая проблема
[10:12.280 --> 10:14.280]  если мы не потребуем вот этого правила
[10:14.280 --> 10:16.280]  я хочу сказать другое
[10:16.280 --> 10:18.280]  логично предъявить терминированный язык
[10:18.280 --> 10:20.280]  как тот для которого существует терминированный
[10:20.280 --> 10:22.280]  мп-автомат его задающий
[10:22.280 --> 10:24.280]  очевидно тогда это под множеством
[10:24.280 --> 10:26.280]  это не работает?
[10:26.280 --> 10:28.280]  нет, это не работает
[10:28.280 --> 10:30.280]  сейчас будет некоторый пример
[10:30.280 --> 10:32.280]  который задается
[10:32.280 --> 10:34.280]  детерминированной cs грамматикой
[10:34.280 --> 10:36.280]  в терминах вот таким
[10:36.280 --> 10:38.280]  но не задается
[10:38.280 --> 10:40.280]  детерминированной cs грамматикой
[10:40.280 --> 10:42.280]  если мы с вами закроем символ $
[10:46.280 --> 10:48.280]  давайте разберем такой пример
[10:48.280 --> 10:50.280]  а что такое m в этом определении?
[10:52.280 --> 10:54.280]  это dmp-автомат
[10:56.280 --> 10:58.280]  вы строите
[10:58.280 --> 11:00.280]  детерминированный cs язык
[11:00.280 --> 11:02.280]  по автомату
[11:02.280 --> 11:04.280]  да
[11:04.280 --> 11:06.280]  и вот тот факт
[11:06.280 --> 11:08.280]  который мы с вами не будем доказывать
[11:08.280 --> 11:10.280]  если язык является
[11:10.280 --> 11:12.280]  детерминированным cs языком
[11:12.280 --> 11:14.280]  то он задается некоторой
[11:14.280 --> 11:16.280]  однозначной грамматикой
[11:18.280 --> 11:20.280]  а?
[11:22.280 --> 11:24.280]  наша цель сегодня все таки не эта
[11:24.280 --> 11:26.280]  а познакомиться с этим определением
[11:26.280 --> 11:28.280]  итак давайте рассмотрим вот такой вот пример
[11:30.280 --> 11:32.280]  и поймем что же в нем не так
[11:42.280 --> 11:44.280]  а в mt и bnt
[11:44.280 --> 11:46.280]  m равняется n
[11:46.280 --> 11:48.280]  или n равняется 0
[11:54.280 --> 11:56.280]  обвинение cs языков
[11:56.280 --> 11:58.280]  обвинение cs языков
[11:58.280 --> 12:00.280]  если мы даем обвинение cs языков
[12:00.280 --> 12:02.280]  мы сразу нарушаем детерминированность
[12:02.280 --> 12:04.280]  потому что у нас идет
[12:04.280 --> 12:06.280]  2 ε на ε переходы
[12:06.280 --> 12:08.280]  и мы не понимаем что делать
[12:08.280 --> 12:10.280]  оказывается есть интересная конструкция
[12:10.280 --> 12:12.280]  потому что если у нас есть
[12:12.280 --> 12:14.280]  с вами символ $
[12:16.280 --> 12:18.280]  смотрите
[12:20.280 --> 12:22.280]  значит автомат
[12:22.280 --> 12:24.280]  будет выглядеть так
[12:28.280 --> 12:30.280]  а?
[12:30.280 --> 12:32.280]  видимо понятно
[12:32.280 --> 12:34.280]  то есть мы по доллару переходим в состояние
[12:34.280 --> 12:36.280]  которое все стирает со стэха
[12:36.280 --> 12:38.280]  а не по доллару будем стирать по одной буквы
[12:38.280 --> 12:40.280]  да да да
[12:40.280 --> 12:42.280]  сейчас я вспомню конструкцию
[12:46.280 --> 12:48.280]  да
[12:50.280 --> 12:52.280]  доллар должен бэшку за стэк есть
[12:52.280 --> 12:54.280]  да
[13:02.280 --> 13:04.280]  доллар может ничего не есть
[13:04.280 --> 13:06.280]  просто мы потом соберем весь стэк и завершим
[13:08.280 --> 13:10.280]  там состояние для b
[13:12.280 --> 13:14.280]  либо перейти по b
[13:14.280 --> 13:16.280]  и там уже есть по одной мысли
[13:16.280 --> 13:18.280]  так
[13:18.280 --> 13:20.280]  у нас m больше 0
[13:20.280 --> 13:22.280]  или m равно 0
[13:22.280 --> 13:24.280]  если m равно 0
[13:24.280 --> 13:26.280]  то это их пересечение
[13:26.280 --> 13:28.280]  то есть короче может звучать за день
[13:28.280 --> 13:30.280]  у нас доллар отлучтен
[13:30.280 --> 13:32.280]  согласен
[13:38.280 --> 13:40.280]  так получается здесь что у нас
[13:44.280 --> 13:46.280]  вроде нигде
[13:46.280 --> 13:48.280]  совместных переходов у нас нету
[14:02.280 --> 14:04.280]  хорошо
[14:04.280 --> 14:06.280]  а теперь давайте подумаем что произойдет
[14:06.280 --> 14:08.280]  если у нас с вами
[14:08.280 --> 14:10.280]  нету стартового состояния
[14:10.280 --> 14:12.280]  о нету доллара
[14:12.280 --> 14:14.280]  в нашем слове
[14:16.280 --> 14:18.280]  сможем ли мы построить такой
[14:18.280 --> 14:20.280]  детерминированный ap автомат который
[14:20.280 --> 14:22.280]  принимает слово без доллара
[14:30.280 --> 14:32.280]  ну да
[14:32.280 --> 14:34.280]  то есть смотрите
[14:34.280 --> 14:36.280]  что здесь можно сказать
[14:36.280 --> 14:38.280]  значит тут надо понять что
[14:38.280 --> 14:40.280]  у нас распознаются слова
[14:42.280 --> 14:44.280]  avente
[14:44.280 --> 14:46.280]  и просто слова avente
[14:48.280 --> 14:50.280]  да
[14:50.280 --> 14:52.280]  что это нам дает
[14:56.280 --> 14:58.280]  если мы съели avente
[14:58.280 --> 15:00.280]  то дальше avente
[15:00.280 --> 15:02.280]  это означает что если мы съели
[15:02.280 --> 15:04.280]  слово avente
[15:04.280 --> 15:06.280]  то есть в детерминированности
[15:06.280 --> 15:08.280]  мы находимся в каком-то состоянии
[15:12.280 --> 15:14.280]  вот
[15:14.280 --> 15:16.280]  мы прочитали на вход avente
[15:16.280 --> 15:18.280]  дальше нам нужно
[15:20.280 --> 15:22.280]  собственно учиться читать
[15:22.280 --> 15:24.280]  ну и дальше есть
[15:24.280 --> 15:26.280]  какой-то путь
[15:26.280 --> 15:28.280]  с каким-то стэком
[15:28.280 --> 15:30.280]  который читает
[15:30.280 --> 15:32.280]  состояние bmw
[15:32.280 --> 15:34.280]  причем это состояние должно быть так
[15:34.280 --> 15:36.280]  нет не обязательно это состояние должно быть
[15:36.280 --> 15:38.280]  завершающее
[15:42.280 --> 15:44.280]  сейчас
[15:44.280 --> 15:46.280]  раскрутим
[15:48.280 --> 15:50.280]  идея в том
[15:50.280 --> 15:52.280]  смотрите сейчас расскажу в чем
[15:52.280 --> 15:54.280]  а идея будет состоять в следующем
[15:54.280 --> 15:56.280]  давайте воспользуемся принципом дирихля
[15:56.280 --> 15:58.280]  и скажем что
[15:58.280 --> 16:00.280]  слова вида avente у нас
[16:00.280 --> 16:02.280]  задает большое количество языков
[16:04.280 --> 16:06.280]  и из-за этого
[16:06.280 --> 16:08.280]  как раз возникнут проблемы
[16:08.280 --> 16:10.280]  потому что
[16:10.280 --> 16:12.280]  у нас грубо говоря
[16:12.280 --> 16:14.280]  по какому-то стэку
[16:14.280 --> 16:16.280]  будет получаться слово avente
[16:16.280 --> 16:18.280]  а потом мы
[16:18.280 --> 16:20.280]  достроим это все некоторым
[16:20.280 --> 16:22.280]  словом avente и мы проиграем
[16:24.280 --> 16:26.280]  то есть у нас как бы из-за того что
[16:26.280 --> 16:28.280]  конечно состояние у нас конечно
[16:28.280 --> 16:30.280]  сейчас давайте я подумаю как это сделать
[16:30.280 --> 16:32.280]  аккуратненько
[16:32.280 --> 16:34.280]  так конечно
[16:34.280 --> 16:36.280]  состояние конечно
[16:36.280 --> 16:38.280]  состояние
[16:38.280 --> 16:40.280]  до которого можно
[16:40.280 --> 16:42.280]  идти двумя путями
[16:42.280 --> 16:44.280]  по avente
[16:44.280 --> 16:46.280]  но тут надо их именно как-то
[16:46.280 --> 16:48.280]  тоже воспользоваться что у нас есть
[16:48.280 --> 16:50.280]  слова вида avente bvmte
[16:50.280 --> 16:52.280]  и слова вида avente
[16:52.280 --> 16:54.280]  можно идти двумя путями
[16:54.280 --> 16:56.280]  по avente
[16:56.280 --> 16:58.280]  то до финала можно идти двумя разными bvmte
[16:58.280 --> 17:00.280]  двумя разными bvmte
[17:02.280 --> 17:04.280]  допомним у нас с стэком бесконечная
[17:04.280 --> 17:06.280]  да-да-да тут со стэком есть проблемы
[17:10.280 --> 17:12.280]  секунду
[17:12.280 --> 17:14.280]  как же это лечится
[17:14.280 --> 17:16.280]  что мы хотим доказать
[17:16.280 --> 17:18.280]  мы хотим найти два состояния в которые мы можем
[17:18.280 --> 17:20.280]  пройти под маковому стэку
[17:20.280 --> 17:22.280]  причем это смотрите
[17:22.280 --> 17:24.280]  идея такая что мы хотим
[17:24.280 --> 17:26.280]  пройти до сюда
[17:26.280 --> 17:28.280]  по словам вида avente и avente
[17:32.280 --> 17:34.280]  хочется найти такой путь
[17:34.280 --> 17:36.280]  что тут еще будет петля какая-то
[17:38.280 --> 17:40.280]  то есть у нас есть avente
[17:40.280 --> 17:42.280]  дальше есть петля которая идет в avente
[17:42.280 --> 17:44.280]  и дальше мы
[17:44.280 --> 17:46.280]  мы гарантированно знаем что мы можем
[17:46.280 --> 17:48.280]  пройтись по avente
[17:48.280 --> 17:50.280]  до пустого стэка
[17:52.280 --> 17:54.280]  да
[17:56.280 --> 17:58.280]  это слово лежит в языке
[18:00.280 --> 18:02.280]  но с другой стороны
[18:02.280 --> 18:04.280]  оттуда же мы должны уметь
[18:04.280 --> 18:06.280]  пойти дальше по b
[18:06.280 --> 18:08.280]  потому что мы еще не знаем
[18:08.280 --> 18:10.280]  это конец слова
[18:10.280 --> 18:12.280]  или нет
[18:12.280 --> 18:14.280]  потому что у нас есть avente
[18:14.280 --> 18:16.280]  да
[18:16.280 --> 18:18.280]  да так
[18:18.280 --> 18:20.280]  это что-то должно быть
[18:20.280 --> 18:22.280]  а ну да
[18:22.280 --> 18:24.280]  смотрите мы стоим в пустом стэке
[18:24.280 --> 18:26.280]  и мы к нему пришли по avente
[18:26.280 --> 18:28.280]  очевидно мы с пустым стэком
[18:28.280 --> 18:30.280]  никак не сохраним информацию
[18:30.280 --> 18:32.280]  точнее мы сохраним это состояние
[18:32.280 --> 18:34.280]  а состояние конечного
[18:34.280 --> 18:36.280]  и тогда мы не сможем понять сколько
[18:36.280 --> 18:38.280]  флешек восстанавливается
[18:40.280 --> 18:42.280]  сейчас я думаю просто
[18:42.280 --> 18:44.280]  смотрите в чем может быть подвох
[18:44.280 --> 18:46.280]  мы можем по факту
[18:46.280 --> 18:48.280]  сделать следующее
[18:48.280 --> 18:50.280]  у нас либо могут быть
[18:50.280 --> 18:52.280]  переходы в духе epsilon a epsilon
[18:52.280 --> 18:54.280]  а в другом переходе
[18:54.280 --> 18:56.280]  допустим переход вида
[18:56.280 --> 18:58.280]  а подождите
[18:58.280 --> 19:00.280]  переход вида b
[19:00.280 --> 19:02.280]  что-то там epsilon тоже не работает кажется
[19:06.280 --> 19:08.280]  да потому что
[19:10.280 --> 19:12.280]  ну еще раз у нас есть q состояний
[19:12.280 --> 19:14.280]  возьмем q
[19:14.280 --> 19:16.280]  плюс одно слово вида a в степени i
[19:18.280 --> 19:20.280]  два из них придут в одно состояние
[19:20.280 --> 19:22.280]  после считывания
[19:22.280 --> 19:24.280]  вот и у всех
[19:24.280 --> 19:26.280]  у них должен быть пустой стэк
[19:26.280 --> 19:28.280]  да
[19:28.280 --> 19:30.280]  точнее после считывания
[19:30.280 --> 19:32.280]  и обнуление стэка
[19:32.280 --> 19:34.280]  да да да
[19:34.280 --> 19:36.280]  то есть сейчас
[19:36.280 --> 19:38.280]  короче утверждение что раз автомат
[19:38.280 --> 19:40.280]  терминированный значит
[19:40.280 --> 19:42.280]  до того как считать int и pvnt
[19:42.280 --> 19:44.280]  мы считали int у нас
[19:44.280 --> 19:46.280]  какой угодно стэк а потом мы обязаны
[19:46.280 --> 19:48.280]  его занудить и после этого
[19:48.280 --> 19:50.280]  мы обязаны начать считывать qnt
[19:50.280 --> 19:52.280]  вот так
[19:52.280 --> 19:54.280]  потому что
[19:54.280 --> 19:56.280]  терминированный автомат
[19:56.280 --> 19:58.280]  значит
[19:58.280 --> 20:00.280]  у нас каждый раз однозначно
[20:00.280 --> 20:02.280]  сдающийся переход но при этом мы должны
[20:02.280 --> 20:04.280]  уметь внулять
[20:04.280 --> 20:06.280]  чтобы уметь принимать
[20:06.280 --> 20:08.280]  Михаил прав то есть смотрите когда мы доходим
[20:08.280 --> 20:10.280]  до финального состояния
[20:10.280 --> 20:12.280]  то как бы мы должны
[20:12.280 --> 20:14.280]  принять именно все слово
[20:14.280 --> 20:16.280]  целиком то есть ключевое утверждение
[20:16.280 --> 20:18.280]  то если мы приняли слова int
[20:18.280 --> 20:20.280]  bnt
[20:20.280 --> 20:22.280]  то у нас есть промежуточное состояние
[20:22.280 --> 20:24.280]  да смотрите
[20:24.280 --> 20:26.280]  если мы приняли слово avmt
[20:26.280 --> 20:28.280]  bmt то мы таким же образом
[20:28.280 --> 20:30.280]  должны принимать слово iavmt
[20:30.280 --> 20:32.280]  любой его префикс
[20:34.280 --> 20:36.280]  да потому что стэк
[20:36.280 --> 20:38.280]  по словам мы должны понимать стэк
[20:38.280 --> 20:40.280]  а на входе стэка пустое слово а не символ доллара
[20:42.280 --> 20:44.280]  тогда давайте рассмотрим все
[20:44.280 --> 20:46.280]  все состояния вида avmt
[20:46.280 --> 20:48.280]  и поскольку у нас m достаточно
[20:48.280 --> 20:50.280]  большое
[20:50.280 --> 20:52.280]  то у нас существует два состояния
[20:52.280 --> 20:54.280]  qxnx
[21:12.280 --> 21:14.280]  qxnx
[21:14.280 --> 21:16.280]  а дальше из этих слов
[21:16.280 --> 21:18.280]  из этого состояния мы сможем с вами
[21:18.280 --> 21:20.280]  прочитать как bvnt
[21:20.280 --> 21:22.280]  так и bvnt
[21:24.280 --> 21:26.280]  и в итоге у нас примутся два слова
[21:32.280 --> 21:34.280]  где m не равняется n
[21:36.280 --> 21:38.280]  то есть идея такая
[21:38.280 --> 21:40.280]  по имеющему нас стэку
[21:40.280 --> 21:42.280]  и по имеющимся выходу
[21:42.280 --> 21:44.280]  который нам осталось прочитать мы четко знаем наши действия
[21:50.280 --> 21:52.280]  не является контекстом свободным
[21:54.280 --> 21:56.280]  в смысле
[21:56.280 --> 21:58.280]  где мы здесь пользовались
[21:58.280 --> 22:00.280]  детеминированностью
[22:00.280 --> 22:02.280]  чего автомата
[22:02.280 --> 22:04.280]  или чего
[22:04.280 --> 22:06.280]  вот здесь мы пользовались
[22:06.280 --> 22:08.280]  тем что мы как бы различили
[22:08.280 --> 22:10.280]  какой у нас следующий символ доллар или b
[22:10.280 --> 22:12.280]  да мы пользовались
[22:12.280 --> 22:14.280]  ну в смысле да долларом
[22:14.280 --> 22:16.280]  да
[22:16.280 --> 22:18.280]  а так
[22:18.280 --> 22:20.280]  если у нас просто детеминированность
[22:20.280 --> 22:22.280]  то мы просто берем
[22:22.280 --> 22:24.280]  разводим это
[22:26.280 --> 22:28.280]  на две ветки
[22:28.280 --> 22:30.280]  и каждый из них распознаем
[22:30.280 --> 22:32.280]  то есть нам никто не мешает
[22:34.280 --> 22:36.280]  чего?
[22:38.280 --> 22:40.280]  то есть мы пользуемся всеми детеминированностью
[22:40.280 --> 22:42.280]  в том что по выходному слову
[22:42.280 --> 22:44.280]  и по алфавиту
[22:44.280 --> 22:46.280]  по выходному
[22:46.280 --> 22:48.280]  по слову который осталось прочитать
[22:48.280 --> 22:50.280]  и по стэку который у нас здесь находим
[22:50.280 --> 22:52.280]  мы четко восстанавливаем последность действий
[22:54.280 --> 22:56.280]  вот такой пример
[22:56.280 --> 22:58.280]  хорошо
[22:58.280 --> 23:00.280]  так
[23:06.280 --> 23:08.280]  возможно
[23:08.280 --> 23:10.280]  да
[23:10.280 --> 23:12.280]  эти значки
[23:12.280 --> 23:14.280]  давайте смотрим на две определения
[23:14.280 --> 23:16.280]  скажем что у нас запорядоченная пара
[23:16.280 --> 23:18.280]  нет не там
[23:18.280 --> 23:20.280]  внизу
[23:20.280 --> 23:22.280]  смотрите второе определение
[23:24.280 --> 23:26.280]  у нас же пары можно порядочить
[23:26.280 --> 23:28.280]  вот так кажется
[23:34.280 --> 23:36.280]  ну да ладно
[23:36.280 --> 23:38.280]  можно вопрос
[23:38.280 --> 23:40.280]  да
[23:42.280 --> 23:44.280]  смотрите
[23:44.280 --> 23:46.280]  давайте цель расскажу
[23:46.280 --> 23:48.280]  цель вообще понять как ведут себя однозначные грамматики
[23:52.280 --> 23:54.280]  которые можно было распознать конструкции
[23:54.280 --> 23:56.280]  не связанные с грамматиками
[23:56.280 --> 23:58.280]  а связанные с автоматами
[23:58.280 --> 24:00.280]  вводим понятие логичное
[24:00.280 --> 24:02.280]  который у нас есть детеминированный
[24:02.280 --> 24:04.280]  это mp-автомат у которого нет
[24:04.280 --> 24:06.280]  никаких развилок
[24:06.280 --> 24:08.280]  вводим это понятие
[24:08.280 --> 24:10.280]  и оказывается
[24:10.280 --> 24:12.280]  что если мы введем
[24:12.280 --> 24:14.280]  классическое определение mp-автомата
[24:16.280 --> 24:18.280]  то оказывается
[24:18.280 --> 24:20.280]  с ним будут проблемы вот для такого языка
[24:22.280 --> 24:24.280]  поэтому чтобы этот
[24:24.280 --> 24:26.280]  автомат был детеминированным
[24:26.280 --> 24:28.280]  мы должны добавить символ
[24:28.280 --> 24:30.280]  конца слова в распознавание
[24:30.280 --> 24:32.280]  потом очистить стак
[24:32.280 --> 24:34.280]  ну да для того чтобы потом очистить стак
[24:34.280 --> 24:36.280]  если нужно
[24:36.280 --> 24:38.280]  мы в lr-алгоритме
[24:38.280 --> 24:40.280]  тоже добавили символ конца слова
[24:40.280 --> 24:42.280]  напоминаю
[24:44.280 --> 24:46.280]  то есть мы должны в автомат
[24:46.280 --> 24:48.280]  еще добавить переходы с этим долларом
[24:48.280 --> 24:50.280]  да конечно
[24:50.280 --> 24:52.280]  ну а в общем случае
[24:52.280 --> 24:54.280]  то есть у нас есть какой-то детеминированный автомат
[24:54.280 --> 24:56.280]  и нам нужно как-то к нему добавить
[24:56.280 --> 24:58.280]  переходы с долларами
[24:58.280 --> 25:00.280]  смотрите тут история такая
[25:00.280 --> 25:02.280]  что мы как конструкт
[25:02.280 --> 25:04.280]  детеминированный автомат
[25:04.280 --> 25:06.280]  вообще не привязан к символу доллара
[25:06.280 --> 25:08.280]  но если мы хотим его привязать к реальной жизни
[25:08.280 --> 25:10.280]  то нам нужен символ построить автомат
[25:10.280 --> 25:12.280]  для слова плюс символа конца слова
[25:14.280 --> 25:16.280]  то есть мы уже берем автомат с доллара
[25:16.280 --> 25:18.280]  да да да
[25:18.280 --> 25:20.280]  хорошо
[25:20.280 --> 25:22.280]  так давайте докажем один факт
[25:22.280 --> 25:24.280]  на самом деле он
[25:24.280 --> 25:26.280]  не очень сложный
[25:26.280 --> 25:28.280]  это упрощенный вид
[25:28.280 --> 25:30.280]  mp-автомата
[25:40.280 --> 25:42.280]  любой tmp-автомат
[25:50.280 --> 25:52.280]  эквивалентен tmp-автомату
[25:56.280 --> 25:58.280]  с переходами
[26:20.280 --> 26:22.280]  выполнено такое соотношение
[26:26.280 --> 26:28.280]  попробуем доказать
[26:28.280 --> 26:30.280]  есть идея
[26:30.280 --> 26:32.280]  как всегда
[26:32.280 --> 26:34.280]  разбиваем ребра
[26:34.280 --> 26:36.280]  надо разбивать
[26:36.280 --> 26:38.280]  ребра с учетом детеминированности
[26:40.280 --> 26:42.280]  мы говорим что
[26:42.280 --> 26:44.280]  мы можем в нашем детеминированном mp-автомате
[26:44.280 --> 26:46.280]  спросить чтобы у нас либо длина входа
[26:46.280 --> 26:48.280]  либо длина выхода была
[26:48.280 --> 26:50.280]  не более 1
[26:50.280 --> 26:52.280]  длина входа либо длина стака не более 1
[26:52.280 --> 26:54.280]  то есть у нас будут переходы вида
[26:54.280 --> 26:56.280]  либо такие
[26:58.280 --> 27:00.280]  либо такие
[27:04.280 --> 27:06.280]  кажется кто-то уже понимает
[27:06.280 --> 27:08.280]  намеку
[27:08.280 --> 27:10.280]  собственно мы хотим это
[27:10.280 --> 27:12.280]  провести все к шерптом и к редюсам
[27:12.280 --> 27:14.280]  любой детеминированный mp-автомат
[27:14.280 --> 27:16.280]  смотрите
[27:16.280 --> 27:18.280]  что мы с вами говорили
[27:18.280 --> 27:20.280]  давайте посмотрим
[27:20.280 --> 27:22.280]  собственно
[27:22.280 --> 27:24.280]  единственное
[27:24.280 --> 27:26.280]  здесь нужно аккуратненько
[27:26.280 --> 27:28.280]  рассмотреть
[27:28.280 --> 27:30.280]  разного вида перехода
[27:30.280 --> 27:32.280]  давайте начнем следующее
[27:32.280 --> 27:34.280]  факт номер
[27:34.280 --> 27:36.280]  пункт номер 1
[27:36.280 --> 27:38.280]  если у вас есть
[27:38.280 --> 27:40.280]  переход q1
[27:40.280 --> 27:42.280]  q2b
[27:42.280 --> 27:44.280]  то других переходов нет
[27:46.280 --> 27:48.280]  если у вас есть переход
[27:48.280 --> 27:50.280]  в состояние
[27:50.280 --> 27:52.280]  в коде других переходов
[27:52.280 --> 27:54.280]  в этом состоянии просто не может быть
[27:54.280 --> 27:56.280]  а можете повторить
[27:56.280 --> 27:58.280]  как мы сжали все это
[27:58.280 --> 28:00.280]  в смысле все сжали
[28:00.280 --> 28:02.280]  сжали многосрочные
[28:02.280 --> 28:04.280]  мы сейчас как раз это доказываем
[28:06.280 --> 28:08.280]  в смысле многосрочные сжали
[28:08.280 --> 28:10.280]  в плане какая конструкция сама
[28:10.280 --> 28:12.280]  конструкция
[28:12.280 --> 28:14.280]  конструкцию я чуть позже сейчас
[28:14.280 --> 28:16.280]  расскажу
[28:16.280 --> 28:18.280]  нет
[28:18.280 --> 28:20.280]  я сейчас просто покажу эту конструкцию
[28:20.280 --> 28:22.280]  пока мы рассмотрим несколько случаев
[28:22.280 --> 28:24.280]  в общем
[28:24.280 --> 28:26.280]  случай номер 1
[28:26.280 --> 28:28.280]  если у вас есть переход q1 и q2
[28:28.280 --> 28:30.280]  q2b
[28:30.280 --> 28:32.280]  то q1 больше переходов нету
[28:42.280 --> 28:44.280]  вариант 2
[28:44.280 --> 28:46.280]  значит у вас есть везде переходы
[29:08.280 --> 29:10.280]  как разбить эти переходы
[29:10.280 --> 29:12.280]  аккуратненько
[29:14.280 --> 29:16.280]  чтобы не было проблем
[29:16.280 --> 29:18.280]  с согласованностью
[29:22.280 --> 29:24.280]  собственно идея
[29:24.280 --> 29:26.280]  очень простая
[29:26.280 --> 29:28.280]  раньше мы разбивали эти переходы
[29:28.280 --> 29:30.280]  на
[29:36.280 --> 29:38.280]  что у нас было
[29:44.280 --> 29:46.280]  вот такие
[29:46.280 --> 29:48.280]  вот у нас были переходы
[29:48.280 --> 29:50.280]  то есть мы просто вкопали
[29:50.280 --> 29:52.280]  сжав
[29:52.280 --> 29:54.280]  да
[29:54.280 --> 29:56.280]  на самом деле не совсем вкоп
[29:56.280 --> 29:58.280]  здесь нужно будет аккуратно
[29:58.280 --> 30:00.280]  все конечно сделать
[30:00.280 --> 30:02.280]  потому что
[30:02.280 --> 30:04.280]  если у нас есть переходы по буквам
[30:04.280 --> 30:06.280]  то есть если у нас есть какой-то
[30:06.280 --> 30:08.280]  префикс еще
[30:08.280 --> 30:10.280]  у одинукатая
[30:10.280 --> 30:12.280]  то мы должны
[30:12.280 --> 30:14.280]  не нарушить согласованность
[30:14.280 --> 30:16.280]  мы должны положить в тот же самый префикс
[30:16.280 --> 30:18.280]  а дальше нужно
[30:18.280 --> 30:20.280]  аккуратненько будет обрабатывать
[30:20.280 --> 30:22.280]  эти конструкции по стеку
[30:24.280 --> 30:26.280]  чтобы не было
[30:26.280 --> 30:28.280]  не согласованных переходов
[30:36.280 --> 30:38.280]  смотрите как это можно
[30:38.280 --> 30:40.280]  хитро сделать
[30:40.280 --> 30:42.280]  все знакомы с бором
[30:42.280 --> 30:44.280]  даже будет там
[30:44.280 --> 30:46.280]  хорошо
[30:46.280 --> 30:48.280]  смотрите
[30:50.280 --> 30:52.280]  строим бор для
[30:52.280 --> 30:54.280]  для сигмы
[30:54.280 --> 30:56.280]  для слова сигмы со звездой
[30:56.280 --> 30:58.280]  для нанового перехода
[30:58.280 --> 31:00.280]  строим бор
[31:02.280 --> 31:04.280]  для гамма со звездой
[31:04.280 --> 31:06.280]  сигма бор и гамма бор
[31:06.280 --> 31:08.280]  да сигма бор и гамма
[31:08.280 --> 31:10.280]  определим сигма бор и гамма бор
[31:10.280 --> 31:12.280]  и дальше
[31:12.280 --> 31:14.280]  делаем следующее
[31:14.280 --> 31:16.280]  мы просто делаем переходы
[31:16.280 --> 31:18.280]  допустим у нас с вами есть
[31:18.280 --> 31:20.280]  переход у1 у2 и так далее
[31:20.280 --> 31:22.280]  что-то там
[31:22.280 --> 31:24.280]  мы делаем переход в
[31:30.280 --> 31:32.280]  в вершину этого бора
[31:34.280 --> 31:36.280]  точнее не в вершину бора
[31:36.280 --> 31:38.280]  у1
[31:42.280 --> 31:44.280]  то есть как бы из одного бора
[31:44.280 --> 31:46.280]  переходим в другой бор
[31:48.280 --> 31:50.280]  это мы вот так вот эти переходы совместно
[31:50.280 --> 31:52.280]  аккуратно отделяем
[31:58.280 --> 32:00.280]  а с декартово произведение этих боров?
[32:00.280 --> 32:02.280]  не декартово они после сумма
[32:02.280 --> 32:04.280]  я бы так сказал
[32:04.280 --> 32:06.280]  то есть у нас есть бор
[32:06.280 --> 32:08.280]  для чтения символов алфавита
[32:08.280 --> 32:10.280]  есть бор для разбора стека
[32:10.280 --> 32:12.280]  нам нужно аккуратно сделать
[32:12.280 --> 32:14.280]  переходы из одного бора в другой
[32:14.280 --> 32:16.280]  то есть по одному бору мы считываем
[32:16.280 --> 32:18.280]  слова которые у нас есть со стека
[32:18.280 --> 32:20.280]  а по другому бору мы снимаем символы
[32:20.280 --> 32:22.280]  со стека
[32:28.280 --> 32:30.280]  понятная идея?
[32:30.280 --> 32:32.280]  да
[32:34.280 --> 32:36.280]  на уровне идеи можно и оставить
[32:36.280 --> 32:38.280]  это все дело
[32:40.280 --> 32:42.280]  детали придумайте как и займено
[32:44.280 --> 32:46.280]  на самом деле мы когда раскрывали
[32:46.280 --> 32:48.280]  эти переходы мы делали ровно так же
[32:50.280 --> 32:52.280]  мы же не доказывали формально
[32:54.280 --> 32:56.280]  точнее у нас было
[32:56.280 --> 32:58.280]  две строки возможно они вообще даже совпадали
[32:58.280 --> 33:00.280]  у них просто были разные
[33:00.280 --> 33:02.280]  суффиксы
[33:02.280 --> 33:04.280]  так как мы
[33:04.280 --> 33:06.280]  мы сначала
[33:06.280 --> 33:08.280]  по ним
[33:08.280 --> 33:10.280]  мы сначала по ним
[33:10.280 --> 33:12.280]  прошли по префиксу
[33:12.280 --> 33:14.280]  дальше либо второй поехал
[33:14.280 --> 33:16.280]  либо эти префиксы у нас разъехались
[33:16.280 --> 33:18.280]  это тогда все хорошо
[33:22.280 --> 33:24.280]  либо разъедут эти стеки
[33:24.280 --> 33:26.280]  либо один поехал дальше
[33:26.280 --> 33:28.280]  другой поехал в другой бор
[33:28.280 --> 33:30.280]  в другой бор
[33:30.280 --> 33:32.280]  а вот как он поехал в другой бор
[33:32.280 --> 33:34.280]  он на А1 поехал?
[33:34.280 --> 33:36.280]  да он на А1 поехал
[33:36.280 --> 33:38.280]  не на А1
[33:38.280 --> 33:40.280]  а на Энтли поехал
[33:44.280 --> 33:46.280]  тогда он на А
[33:46.280 --> 33:48.280]  мы пока сжимаем только
[33:48.280 --> 33:50.280]  УИФы
[33:54.280 --> 33:56.280]  мы эти сжимаем
[33:56.280 --> 33:58.280]  пока у нас есть общие чуваки
[34:04.280 --> 34:06.280]  сейчас у нас суффикс должен совпадать
[34:06.280 --> 34:08.280]  у этих
[34:08.280 --> 34:10.280]  это мне нравится на 1 и 7
[34:10.280 --> 34:12.280]  в смысле суффикс совпадает?
[34:12.280 --> 34:14.280]  ну а 1-то
[34:14.280 --> 34:16.280]  последняя буква
[34:16.280 --> 34:18.280]  а, а 1 последняя буква
[34:18.280 --> 34:20.280]  сжимаем
[34:26.280 --> 34:28.280]  вроде нормально
[34:30.280 --> 34:32.280]  сначала различаем
[34:32.280 --> 34:34.280]  одним бором
[34:34.280 --> 34:36.280]  да, потом различаем вторым бором
[34:38.280 --> 34:40.280]  бор в квадрате
[34:40.280 --> 34:42.280]  можно алгоритм сам еще раз
[34:42.280 --> 34:44.280]  алгоритм
[34:44.280 --> 34:46.280]  значит смотрим все
[34:46.280 --> 34:48.280]  у нас есть состояние Q1
[34:48.280 --> 34:50.280]  и смотрим все переходы
[34:50.280 --> 34:52.280]  из состояния Q1
[34:52.280 --> 34:54.280]  в другое состояние
[34:54.280 --> 34:56.280]  а, слушайте я понял в чем проблема
[34:56.280 --> 34:58.280]  я задетектировал
[34:58.280 --> 35:00.280]  проблема Михаила
[35:00.280 --> 35:02.280]  что у нас алфавиты могут
[35:02.280 --> 35:04.280]  различаться, а стеки могут совпадать
[35:04.280 --> 35:06.280]  ну там боров несколько
[35:06.280 --> 35:08.280]  гамма боры на каждую бибетку вешать
[35:08.280 --> 35:10.280]  ну это да
[35:10.280 --> 35:12.280]  скорее всего это декарта во происхождение будет
[35:12.280 --> 35:14.280]  ну я так и понимал
[35:14.280 --> 35:16.280]  у меня затык в том
[35:16.280 --> 35:18.280]  что мы во первом
[35:18.280 --> 35:20.280]  не храним историю как мы до него дошли по УИТам
[35:20.280 --> 35:22.280]  да, да, да
[35:22.280 --> 35:24.280]  на самом деле гамма бор вешается
[35:24.280 --> 35:26.280]  на каждый выход сепсвонбора
[35:26.280 --> 35:28.280]  там свой гамма бор
[35:28.280 --> 35:30.280]  там декарта
[35:30.280 --> 35:32.280]  да, там декарта во происхождение
[35:32.280 --> 35:34.280]  так
[35:34.280 --> 35:36.280]  вы вышли из зума
[35:36.280 --> 35:38.280]  на каждом выходе сепсвонбора вешается свой
[35:38.280 --> 35:40.280]  гамма бор
[35:40.280 --> 35:42.280]  ну да
[35:48.280 --> 35:50.280]  я надеюсь я вернусь в свою же встречу
[35:52.280 --> 35:54.280]  но если вы откроете ссылку
[35:54.280 --> 35:56.280]  из переписки
[35:56.280 --> 35:58.280]  он можно да
[35:58.280 --> 36:00.280]  да, да, да
[36:08.280 --> 36:10.280]  да, все, я вернулся
[36:14.280 --> 36:16.280]  да, то есть нужно их в последнее соединить
[36:16.280 --> 36:18.280]  то есть сначала
[36:18.280 --> 36:20.280]  распознаем стек
[36:20.280 --> 36:22.280]  да, да, да
[36:26.280 --> 36:28.280]  да, то есть смотрите еще раз
[36:28.280 --> 36:30.280]  значит мы сначала разбиваем
[36:30.280 --> 36:32.280]  стек
[36:34.280 --> 36:36.280]  да
[36:36.280 --> 36:38.280]  а потом когда нам надо распознать
[36:38.280 --> 36:40.280]  стек при разных суффиксах
[36:40.280 --> 36:42.280]  если у нас префиксы разные
[36:42.280 --> 36:44.280]  то мы различаем их на вот этом боре
[36:44.280 --> 36:46.280]  если у нас уже
[36:46.280 --> 36:48.280]  стеки разные
[36:48.280 --> 36:50.280]  точнее
[36:50.280 --> 36:52.280]  внутри эти слова являются одинаковыми
[36:52.280 --> 36:54.280]  а стеки разными
[36:54.280 --> 36:56.280]  то распознаем уже на различных стаках
[36:56.280 --> 36:58.280]  да
[36:58.280 --> 37:00.280]  то есть такая двухуровневая конструкция
[37:00.280 --> 37:02.280]  получается
[37:02.280 --> 37:04.280]  ну то есть на самом деле мы свели
[37:04.280 --> 37:06.280]  согласованность переходов к тому
[37:06.280 --> 37:08.280]  что мы берем
[37:08.280 --> 37:10.280]  у ушки
[37:10.280 --> 37:12.280]  записываем какой-то разделитель
[37:12.280 --> 37:14.280]  и потом берем
[37:14.280 --> 37:16.280]  перевернутые ашки
[37:16.280 --> 37:18.280]  и нам нужно чтобы
[37:18.280 --> 37:20.280]  вот здесь просто одной не было
[37:20.280 --> 37:22.280]  чтобы вот это уже было беспринято
[37:22.280 --> 37:24.280]  да, да, да
[37:24.280 --> 37:26.280]  ладно, замучил я вас
[37:26.280 --> 37:28.280]  на самом деле надо было
[37:28.280 --> 37:30.280]  просто расходить все такие пути
[37:30.280 --> 37:32.280]  и сложить все пути в вбор
[37:32.280 --> 37:34.280]  и тогда нормально
[37:34.280 --> 37:36.280]  да, это точно
[37:36.280 --> 37:38.280]  в общем тут конструкцию можно
[37:38.280 --> 37:40.280]  правильно переводить
[37:40.280 --> 37:42.280]  главное что это распознать
[37:42.280 --> 37:44.280]  да, а идея такая что мы в собственном модном строте
[37:44.280 --> 37:46.280]  то есть мы делаем переходы совместно
[37:46.280 --> 37:48.280]  за совместностью оказывается скрывается вбор
[37:48.280 --> 37:50.280]  ладно, а теперь вопрос
[37:50.280 --> 37:52.280]  тем-то какая лекция у нас сегодняшняя
[37:52.280 --> 37:54.280]  LR
[37:54.280 --> 37:56.280]  вопрос, а где тут LR
[37:56.280 --> 37:58.280]  что такое LR
[37:58.280 --> 38:00.280]  LR алгоритм
[38:00.280 --> 38:02.280]  Эклер
[38:02.280 --> 38:04.280]  ну LR
[38:04.280 --> 38:06.280]  смотрите, утверждение
[38:06.280 --> 38:08.280]  работа LR алгоритма
[38:08.280 --> 38:10.280]  эмулируется работой DMP
[38:10.280 --> 38:12.280]  некоторого DMP автомата
[38:12.280 --> 38:14.280]  это логично
[38:14.280 --> 38:16.280]  что
[38:16.280 --> 38:18.280]  у нас в курсе LR алгоритм
[38:18.280 --> 38:20.280]  есть слово или нет или разбор
[38:20.280 --> 38:22.280]  есть слово или нет
[38:22.280 --> 38:24.280]  по умолчанию, но в принципе мы можем написать
[38:24.280 --> 38:26.280]  историю всего того что мы делали
[38:26.280 --> 38:28.280]  получить разбор
[38:28.280 --> 38:30.280]  ну вы на семинарах
[38:30.280 --> 38:32.280]  писали вот эту вот штуку
[38:32.280 --> 38:34.280]  вот она в принципе история
[38:34.280 --> 38:36.280]  по ней можно легко восстановить работу
[38:36.280 --> 38:38.280]  но для этого нужна другая конструкция
[38:38.280 --> 38:40.280]  нет, ровно та же самая
[38:40.280 --> 38:42.280]  написаны правила shift и reduce
[38:42.280 --> 38:44.280]  по которым вы делаете
[38:44.280 --> 38:46.280]  shift от считывания буквы, reduce от сворачивания по правилам
[38:48.280 --> 38:50.280]  так
[38:50.280 --> 38:52.280]  вопрос, а как
[38:52.280 --> 38:54.280]  работает LR алгоритм
[38:54.280 --> 38:56.280]  как его эмулировать
[38:58.280 --> 39:00.280]  у нас был автомат
[39:00.280 --> 39:02.280]  да, у нас был автомат
[39:02.280 --> 39:04.280]  и мы что-то в зависимости
[39:04.280 --> 39:06.280]  от наших действий
[39:06.280 --> 39:08.280]  что-то делаем
[39:08.280 --> 39:10.280]  смотрите, в качестве стека
[39:10.280 --> 39:12.280]  вот тут важно
[39:12.280 --> 39:14.280]  будем использовать стек LR алгоритма
[39:14.280 --> 39:16.280]  который мы с вами храним
[39:20.280 --> 39:22.280]  так, давайте еще
[39:22.280 --> 39:24.280]  с откатами
[39:24.280 --> 39:26.280]  вот это интересно
[39:34.280 --> 39:36.280]  это кстати вот такой пункт
[39:36.280 --> 39:38.280]  который я почему-то сам сразу
[39:38.280 --> 39:40.280]  не распарсил
[39:40.280 --> 39:42.280]  ну вот сейчас я попытаюсь
[39:42.280 --> 39:44.280]  это рассказать
[39:50.280 --> 39:52.280]  главное, что он должен быть еще
[39:52.280 --> 39:54.280]  детерминирован
[39:56.280 --> 39:58.280]  смотрите
[39:58.280 --> 40:00.280]  давайте настроим
[40:00.280 --> 40:02.280]  какую-нибудь грамматику
[40:02.280 --> 40:04.280]  точнее по автомату
[40:06.280 --> 40:08.280]  давайте что-нибудь простое
[40:10.280 --> 40:12.280]  вы не против
[40:12.280 --> 40:14.280]  если я нарисую LR0 автомат
[40:14.280 --> 40:16.280]  потому что для LR1 на самом деле все будет точно так же
[40:22.280 --> 40:24.280]  ну да, автоматы там будут
[40:24.280 --> 40:26.280]  одинаковые
[40:26.280 --> 40:28.280]  а?
[40:32.280 --> 40:34.280]  да
[40:34.280 --> 40:36.280]  разбор-то будет те же самые
[40:42.280 --> 40:44.280]  тут везде доллар можно сделать
[40:52.280 --> 40:54.280]  да
[40:56.280 --> 40:58.280]  смотрите
[40:58.280 --> 41:00.280]  если вот это у нас 0
[41:00.280 --> 41:02.280]  1
[41:02.280 --> 41:04.280]  2
[41:04.280 --> 41:06.280]  3
[41:06.280 --> 41:08.280]  то, смотрите, если у нас 3
[41:08.280 --> 41:10.280]  и следующий символ доллар
[41:10.280 --> 41:12.280]  здесь
[41:12.280 --> 41:14.280]  то мы должны будем сделать
[41:14.280 --> 41:16.280]  редюс по этому правилу
[41:16.280 --> 41:18.280]  при этом что у нас
[41:18.280 --> 41:20.280]  на стеке с вами хранится
[41:20.280 --> 41:22.280]  то есть
[41:22.280 --> 41:24.280]  при этом что у нас на стеке с вами хранится
[41:24.280 --> 41:26.280]  давайте сделаем следующее
[41:26.280 --> 41:28.280]  значит
[41:28.280 --> 41:30.280]  если у нас операция shift
[41:34.280 --> 41:36.280]  будет с вами
[41:36.280 --> 41:38.280]  то что мы с вами сделаем
[41:38.280 --> 41:40.280]  собственно мы берем
[41:42.280 --> 41:44.280]  делаем переход
[41:44.280 --> 41:46.280]  из куитова
[41:46.280 --> 41:48.280]  A
[41:48.280 --> 41:50.280]  и все
[41:52.280 --> 41:54.280]  вот тут
[41:56.280 --> 41:58.280]  вот тут
[41:58.280 --> 42:00.280]  A
[42:00.280 --> 42:02.280]  и на стеке, смотрите, кладем A
[42:06.280 --> 42:08.280]  как эти нацить вот эти вот у строк
[42:16.280 --> 42:18.280]  как сделать редюс
[42:18.280 --> 42:20.280]  сейчас что еще раз мы shift
[42:20.280 --> 42:22.280]  мы shift эмулируем вот таким вот образом
[42:28.280 --> 42:30.280]  если мы из состояния
[42:30.280 --> 42:32.280]  куитова по букве A
[42:32.280 --> 42:34.280]  пошли в переход
[42:34.280 --> 42:36.280]  go to в автомате
[42:36.280 --> 42:38.280]  то на самом деле мы на стеку BMP автомата кладем A
[42:38.280 --> 42:40.280]  и go to куитой от A
[42:44.280 --> 42:46.280]  да да да
[42:46.280 --> 42:48.280]  а вот с редюсом все хитрее
[42:50.280 --> 42:52.280]  да, смотрите
[42:52.280 --> 42:54.280]  давайте я напишу
[42:54.280 --> 42:56.280]  в качестве примера
[42:56.280 --> 42:58.280]  что мы делаем в качестве редюса
[43:04.280 --> 43:06.280]  в качестве редюса
[43:06.280 --> 43:08.280]  мы делаем
[43:08.280 --> 43:10.280]  следующее
[43:12.280 --> 43:14.280]  у3
[43:14.280 --> 43:16.280]  значит
[43:16.280 --> 43:18.280]  на стеке смотрите что у нас мы снимаем
[43:18.280 --> 43:20.280]  мы снимаем с вами
[43:22.280 --> 43:24.280]  Q0
[43:24.280 --> 43:26.280]  A
[43:26.280 --> 43:28.280]  Q1B
[43:28.280 --> 43:30.280]  Q2CQ3
[43:32.280 --> 43:34.280]  и кладем на стек
[43:42.280 --> 43:44.280]  Q0 от
[43:44.280 --> 43:46.280]  получается
[43:46.280 --> 43:48.280]  S
[43:48.280 --> 43:50.280]  Epsilon
[43:50.280 --> 43:52.280]  а нет
[43:52.280 --> 43:54.280]  подождите
[43:54.280 --> 43:56.280]  мы кладем S
[44:00.280 --> 44:02.280]  вот такую штуку мы кладем
[44:02.280 --> 44:04.280]  то есть мы снимаем правую часть стека
[44:04.280 --> 44:06.280]  и кладем
[44:10.280 --> 44:12.280]  вот эту часть
[44:12.280 --> 44:14.280]  то есть у нас
[44:14.280 --> 44:16.280]  стек это тот самый стек
[44:16.280 --> 44:18.280]  который был в алгоритме
[44:18.280 --> 44:20.280]  и больше ничего на нем нет
[44:20.280 --> 44:22.280]  а состояние
[44:22.280 --> 44:24.280]  а состояние это что
[44:24.280 --> 44:26.280]  вот эти состояния
[44:26.280 --> 44:28.280]  это те же самые состояния которые у нас были
[44:28.280 --> 44:30.280]  в этом DKA
[44:34.280 --> 44:36.280]  тут осталось внимательно понять
[44:36.280 --> 44:38.280]  почему не будет редюс-редюс конфликтов
[44:38.280 --> 44:40.280]  поэтому нужно грамматику
[44:40.280 --> 44:42.280]  ввести определение
[44:42.280 --> 44:44.280]  не ну
[44:44.280 --> 44:46.280]  для иллера грамматика у нас не будет
[44:46.280 --> 44:48.280]  конфликтов почему потому что у нас есть
[44:48.280 --> 44:50.280]  редюс-редюс конфликт то у нас
[44:50.280 --> 44:52.280]  одно из правил
[44:52.280 --> 44:54.280]  является суффиксом другого правила
[44:54.280 --> 44:56.280]  стека в переходе
[44:56.280 --> 44:58.280]  а shift-редюс конфликт у нас
[44:58.280 --> 45:00.280]  ломается тем что
[45:00.280 --> 45:02.280]  фришифте мы читаем букву
[45:02.280 --> 45:04.280]  должны
[45:04.280 --> 45:06.280]  прочитать букву а при редюсе мы должны
[45:06.280 --> 45:08.280]  прочитать что то со стека
[45:10.280 --> 45:12.280]  то есть это оказывает что
[45:12.280 --> 45:14.280]  автомат будет стиминирован
[45:14.280 --> 45:16.280]  мы можем либо
[45:16.280 --> 45:18.280]  по одной букве его прочитать
[45:18.280 --> 45:20.280]  либо по одному правилу его
[45:20.280 --> 45:22.280]  свернуть
[45:24.280 --> 45:26.280]  все а это значит что мы можем с вами
[45:26.280 --> 45:28.280]  работать в терминах DMP-автомат
[45:28.280 --> 45:30.280]  более того сейчас важный момент
[45:30.280 --> 45:32.280]  состоит в том
[45:32.280 --> 45:34.280]  что мы можем с вами даже
[45:34.280 --> 45:36.280]  просить вот это вот свойство
[45:36.280 --> 45:38.280]  у нашего DMP-автомата
[45:38.280 --> 45:40.280]  для иллера алгоритма
[45:40.280 --> 45:42.280]  можем
[45:42.280 --> 45:44.280]  да то есть что у нас
[45:44.280 --> 45:46.280]  вот это правило OK
[45:46.280 --> 45:48.280]  а вот здесь
[45:48.280 --> 45:50.280]  требовать что мы читаем ровно одну букву
[45:50.280 --> 45:52.280]  со стека
[45:52.280 --> 45:54.280]  да да да
[45:54.280 --> 45:56.280]  а теперь
[45:56.280 --> 45:58.280]  главная идея иллера алгоритма
[45:58.280 --> 46:00.280]  когда мы снимаем со стека
[46:00.280 --> 46:02.280]  мы же можем
[46:02.280 --> 46:04.280]  сразу много букв снять
[46:04.280 --> 46:06.280]  да
[46:06.280 --> 46:08.280]  так там у нас не нарушится
[46:08.280 --> 46:10.280]  а после этого мы приведем
[46:10.280 --> 46:12.280]  ну мы сначала
[46:12.280 --> 46:14.280]  встроим вот наш
[46:14.280 --> 46:16.280]  наш детерминированный DMP-автомат
[46:16.280 --> 46:18.280]  а дальше его приводим хорошим убедом
[46:18.280 --> 46:20.280]  все
[46:20.280 --> 46:22.280]  ну на самом деле видно что
[46:22.280 --> 46:24.280]  эта зависит только от
[46:24.280 --> 46:26.280]  вот эта конструкция зависит только от размеров алфавита
[46:26.280 --> 46:28.280]  сейчас
[46:28.280 --> 46:30.280]  на одном правиле редюс
[46:30.280 --> 46:32.280]  нам надо вратить на Q0
[46:32.280 --> 46:34.280]  мы же могли в один прийти по A с двух состояния
[46:34.280 --> 46:36.280]  не не не мы
[46:36.280 --> 46:38.280]  так
[46:38.280 --> 46:40.280]  смотрите здесь важный момент
[46:40.280 --> 46:42.280]  в том что мы рассматриваем все
[46:42.280 --> 46:44.280]  такие правила редюс
[46:44.280 --> 46:46.280]  да
[46:46.280 --> 46:48.280]  и если бы мы пришли в какой-то момент
[46:48.280 --> 46:50.280]  а кстати сейчас
[46:50.280 --> 46:52.280]  каждому надо снять со стека Q0
[46:52.280 --> 46:54.280]  да да да
[46:54.280 --> 46:56.280]  надо со стека Q0 снять согласен
[46:56.280 --> 46:58.280]  вот
[46:58.280 --> 47:00.280]  вот это точно
[47:02.280 --> 47:04.280]  вот
[47:04.280 --> 47:06.280]  я бы даже возможно
[47:06.280 --> 47:08.280]  при желании бы отсюда тоже
[47:08.280 --> 47:10.280]  какой-то бы снимал
[47:10.280 --> 47:12.280]  ладно то есть понятна конструкция
[47:12.280 --> 47:14.280]  а теперь главная мысль
[47:14.280 --> 47:16.280]  собственно а в чем
[47:16.280 --> 47:18.280]  будет заключаться линейность алгоритма
[47:18.280 --> 47:20.280]  давайте подумаем
[47:20.280 --> 47:22.280]  ведь если у нас алгоритм
[47:22.280 --> 47:24.280]  линейный
[47:24.280 --> 47:26.280]  по времени от длины в слово
[47:28.280 --> 47:30.280]  это означает что
[47:30.280 --> 47:32.280]  вот давайте
[47:32.280 --> 47:34.280]  поймал сколько у нас будет шифтов
[47:34.280 --> 47:36.280]  всегда
[47:36.280 --> 47:38.280]  шифтов всегда для нас слово
[47:38.280 --> 47:40.280]  если мы докажем что
[47:40.280 --> 47:42.280]  количество редюсов ограничивается
[47:42.280 --> 47:44.280]  тоже на среднем на одну
[47:44.280 --> 47:46.280]  букву
[47:46.280 --> 47:48.280]  некоторые константы
[47:48.280 --> 47:50.280]  сверху
[47:50.280 --> 47:52.280]  то мы победили при этом констант
[47:52.280 --> 47:54.280]  может быть очень большой
[47:56.280 --> 47:58.280]  там более жирная константа
[48:00.280 --> 48:02.280]  сейчас будем доказывать это
[48:02.280 --> 48:04.280]  смотрите
[48:04.280 --> 48:06.280]  а если у нас
[48:06.280 --> 48:08.280]  количество правил
[48:08.280 --> 48:10.280]  в среднем будет превышать эту константу
[48:10.280 --> 48:12.280]  как вы думаете что будет
[48:12.280 --> 48:14.280]  с нашим анализатором
[48:16.280 --> 48:18.280]  нет если он даже
[48:18.280 --> 48:20.280]  LR анализатор
[48:20.280 --> 48:22.280]  по их лише не может быть
[48:24.280 --> 48:26.280]  там будет wild true
[48:28.280 --> 48:30.280]  в LR алгоритме
[48:30.280 --> 48:32.280]  чего быть не может
[48:32.280 --> 48:34.280]  то есть мы будем доказывать
[48:34.280 --> 48:36.280]  что если у нас количество состояния
[48:36.280 --> 48:38.280]  длина пути
[48:38.280 --> 48:40.280]  будет больше
[48:40.280 --> 48:42.280]  чем какая то константа
[48:42.280 --> 48:44.280]  то алгоритм
[48:44.280 --> 48:46.280]  зацикливается
[48:46.280 --> 48:48.280]  а у нас он
[48:48.280 --> 48:50.280]  зацикливаться не может
[48:50.280 --> 48:52.280]  а мы доказали что он корректно распознает
[48:52.280 --> 48:54.280]  да
[48:54.280 --> 48:56.280]  такая идея
[48:58.280 --> 49:00.280]  вот собственно основная теорема
[49:02.280 --> 49:04.280]  которую мы сейчас
[49:04.280 --> 49:06.280]  попытаемся доказать
[49:18.280 --> 49:20.280]  так
[49:20.280 --> 49:22.280]  ладно
[49:22.280 --> 49:24.280]  значит
[49:24.280 --> 49:26.280]  теорема
[49:30.280 --> 49:32.280]  она заключается в том
[49:32.280 --> 49:34.280]  что если L
[49:40.280 --> 49:42.280]  длина самой
[49:48.280 --> 49:50.280]  длинные строки
[49:50.280 --> 49:52.280]  на стеке
[50:00.280 --> 50:02.280]  так что у нас получается
[50:02.280 --> 50:04.280]  у нас разве L
[50:04.280 --> 50:06.280]  не всегда 1 или 0
[50:06.280 --> 50:08.280]  на выходе по бете ограничиваем
[50:14.280 --> 50:16.280]  здесь по этому ограничению идет
[50:16.280 --> 50:18.280]  большая длина бета возможно
[50:18.280 --> 50:20.280]  да
[50:26.280 --> 50:28.280]  дальше говорит
[50:28.280 --> 50:30.280]  что существует такая константа
[50:32.280 --> 50:34.280]  которая зависит
[50:34.280 --> 50:36.280]  как некоторая функция
[50:36.280 --> 50:38.280]  это уже какой то дискран
[50:38.280 --> 50:40.280]  наверное вам напоминает
[50:40.280 --> 50:42.280]  такая
[50:42.280 --> 50:44.280]  что
[50:44.280 --> 50:46.280]  смотрите
[50:50.280 --> 50:52.280]  есть конфигурация
[50:52.280 --> 50:54.280]  что мы снимаем букву со стеков
[50:56.280 --> 50:58.280]  и после этого количества шагов
[51:00.280 --> 51:02.280]  мы с вами получаем
[51:02.280 --> 51:04.280]  то
[51:08.280 --> 51:10.280]  то
[51:10.280 --> 51:12.280]  есть цикл
[51:16.280 --> 51:18.280]  что означает цикл
[51:18.280 --> 51:20.280]  это означает следующее
[51:20.280 --> 51:22.280]  что у вас будет некоторое состояние
[51:22.280 --> 51:24.280]  состояние
[51:42.280 --> 51:44.280]  а поскольку мы работаем
[51:44.280 --> 51:46.280]  по автомате
[51:46.280 --> 51:48.280]  значит что алгоритм зациклится
[51:48.280 --> 51:50.280]  на этом переходе
[51:52.280 --> 51:54.280]  ну что давайте думать
[51:54.280 --> 51:56.280]  то есть не давайте думать
[51:56.280 --> 51:58.280]  давайте я вам расскажу доказательства
[51:58.280 --> 52:00.280]  здесь надо рассмотреть длину
[52:00.280 --> 52:02.280]  стека в пути
[52:14.280 --> 52:16.280]  здесь есть два варианта
[52:18.280 --> 52:20.280]  первый вариант
[52:20.280 --> 52:22.280]  длина стека в пути
[52:22.280 --> 52:24.280]  это вот эта длина альфа
[52:30.280 --> 52:32.280]  которая у нас будет
[52:32.280 --> 52:34.280]  с началом времени
[52:34.280 --> 52:36.280]  первым моментом это длина стека не более
[52:36.280 --> 52:38.280]  чем
[52:38.280 --> 52:40.280]  модуль q на модуль гамма
[52:40.280 --> 52:42.280]  на модуль r
[52:42.280 --> 52:44.280]  и из этого будет
[52:44.280 --> 52:46.280]  выводиться константа f
[52:46.280 --> 52:48.280]  то есть представьте себе
[52:48.280 --> 52:50.280]  что у вас
[52:50.280 --> 52:52.280]  вот вы разворачиваете это все
[52:52.280 --> 52:54.280]  по пути стека
[52:54.280 --> 52:56.280]  и у вас длина этого стека
[52:56.280 --> 52:58.280]  никогда не будет больше
[52:58.280 --> 53:00.280]  чем вот эта вот константа
[53:06.280 --> 53:08.280]  тогда если мы правильно
[53:08.280 --> 53:10.280]  смотрите тут очень хитрый момент
[53:10.280 --> 53:12.280]  возникает в том
[53:12.280 --> 53:14.280]  что если мы правильно введем константу n
[53:16.280 --> 53:18.280]  посчитаем это все
[53:18.280 --> 53:20.280]  то по принципу дирекле окажется
[53:20.280 --> 53:22.280]  что просто у нас есть две вершины
[53:22.280 --> 53:24.280]  у которых стекса впадает
[53:28.280 --> 53:30.280]  вот эта мысль понятна
[53:30.280 --> 53:32.280]  что типа вот на этом месте мы с вами
[53:32.280 --> 53:34.280]  можем задать константу
[53:34.280 --> 53:36.280]  где мы n используем вообще?
[53:36.280 --> 53:38.280]  n мы будем использовать дальше
[53:38.280 --> 53:40.280]  ну то есть n мы можем сами
[53:40.280 --> 53:42.280]  сколько угодно большим задать
[53:42.280 --> 53:44.280]  главное чтобы эта функция была
[53:44.280 --> 53:46.280]  вот она
[53:46.280 --> 53:48.280]  там кстати пропущена
[53:48.280 --> 53:50.280]  вот тут вот за n шагов
[53:54.280 --> 53:56.280]  вот и второй вариант
[53:58.280 --> 54:00.280]  когда существует путь
[54:02.280 --> 54:04.280]  модулей
[54:06.280 --> 54:08.280]  так
[54:08.280 --> 54:10.280]  что?
[54:10.280 --> 54:12.280]  два варианта рассматриваю
[54:12.280 --> 54:14.280]  то есть длина стека в пути
[54:20.280 --> 54:22.280]  я считаю здесь два варианта
[54:22.280 --> 54:24.280]  первая это длина стека не ограничена сверху
[54:24.280 --> 54:26.280]  вот эта константа
[54:26.280 --> 54:28.280]  вторая в какой-то момент времени длина стека оказалась
[54:28.280 --> 54:30.280]  больше чем такая
[54:30.280 --> 54:32.280]  значит идея такая
[54:32.280 --> 54:34.280]  здесь мы с вами будем просто утверждать
[54:34.280 --> 54:36.280]  что есть константа и по принципу дирекле
[54:36.280 --> 54:38.280]  у нас найдутся две вершины
[54:38.280 --> 54:40.280]  с одинаковой вершиной стека
[54:42.280 --> 54:44.280]  а вторым мы будем внутри
[54:44.280 --> 54:46.280]  этого пути искать цикл
[54:48.280 --> 54:50.280]  одинаковые стека
[54:50.280 --> 54:52.280]  и видимо одинаковые состояния
[54:52.280 --> 54:54.280]  да одинаковые стека и одинаковые состояния
[54:54.280 --> 54:56.280]  тогда очевидно цикл
[54:56.280 --> 54:58.280]  да очевидно цикл
[54:58.280 --> 55:00.280]  так
[55:00.280 --> 55:02.280]  я пожалуй извините
[55:02.280 --> 55:04.280]  я тут должен
[55:04.280 --> 55:06.280]  открыть конспект
[55:06.280 --> 55:08.280]  потому что да и тут наверное этим тоже
[55:08.280 --> 55:10.280]  можно будет пользоваться
[55:12.280 --> 55:14.280]  так
[55:14.280 --> 55:16.280]  значит
[55:16.280 --> 55:18.280]  просто тут константа страшная
[55:18.280 --> 55:20.280]  часограмма
[55:20.280 --> 55:22.280]  какая неважно главное что есть
[55:28.280 --> 55:30.280]  500 размер
[55:30.280 --> 55:32.280]  грамматический квадрат
[55:32.280 --> 55:34.280]  гамма в степени
[55:34.280 --> 55:36.280]  это будет
[55:36.280 --> 55:38.280]  надо же
[55:38.280 --> 55:40.280]  диреклей воспользоваться
[55:40.280 --> 55:42.280]  да
[55:48.280 --> 55:50.280]  я должен сказать спасибо
[55:50.280 --> 55:52.280]  тем людям которые все таки написали
[55:52.280 --> 55:54.280]  этот конспект
[55:54.280 --> 55:56.280]  а с нами поделитесь
[55:56.280 --> 55:58.280]  да
[55:58.280 --> 56:00.280]  поделимся
[56:00.280 --> 56:02.280]  значит смотрите
[56:02.280 --> 56:04.280]  N будет
[56:04.280 --> 56:06.280]  равняться следующим
[56:06.280 --> 56:08.280]  значит модуль Q
[56:08.280 --> 56:10.280]  на
[56:20.280 --> 56:22.280]  так это первый случай
[56:22.280 --> 56:24.280]  сейчас идет
[56:26.280 --> 56:28.280]  вот такая
[56:28.280 --> 56:30.280]  вот
[56:36.280 --> 56:38.280]  вот
[56:42.280 --> 56:44.280]  то есть смотрите
[56:44.280 --> 56:46.280]  что это такое
[56:48.280 --> 56:50.280]  вот это
[56:50.280 --> 56:52.280]  максимальное
[56:52.280 --> 56:54.280]  число
[56:54.280 --> 56:56.280]  стеков длины
[56:56.280 --> 56:58.280]  не больше чем гамма
[57:00.280 --> 57:02.280]  не больше чем
[57:06.280 --> 57:08.280]  модуль Q
[57:08.280 --> 57:10.280]  на модуль гамма на модуль A
[57:12.280 --> 57:14.280]  понятно да
[57:14.280 --> 57:16.280]  то есть мы перебираем все возможные
[57:16.280 --> 57:18.280]  варианты стеков длины вот такой
[57:20.280 --> 57:22.280]  модуль Q это количество состояния
[57:22.280 --> 57:24.280]  в нашем автомате
[57:24.280 --> 57:26.280]  но это означает
[57:26.280 --> 57:28.280]  что если величина у нас
[57:28.280 --> 57:30.280]  у нас есть
[57:30.280 --> 57:32.280]  переход хотя бы за
[57:32.280 --> 57:34.280]  Н шагов
[57:34.280 --> 57:36.280]  да это значит что в какой-то момент
[57:36.280 --> 57:38.280]  у нас просто два стека совпадут
[57:38.280 --> 57:40.280]  типа если учить эту констату может быть страшная
[57:40.280 --> 57:42.280]  но это самое такое что мы можем делать
[57:42.280 --> 57:44.280]  ну да
[57:44.280 --> 57:46.280]  этого достаточно
[57:52.280 --> 57:54.280]  так
[57:54.280 --> 57:56.280]  это первый
[57:56.280 --> 57:58.280]  второй пункт
[57:58.280 --> 58:00.280]  значит в втором пункте все интереснее
[58:00.280 --> 58:02.280]  у нас
[58:02.280 --> 58:04.280]  с вами тогда
[58:04.280 --> 58:06.280]  существует
[58:14.280 --> 58:16.280]  какой-то вывод
[58:22.280 --> 58:24.280]  да вы блин задолбали
[58:24.280 --> 58:26.280]  это не вам
[58:26.280 --> 58:28.280]  это было людям которые пишут
[58:28.280 --> 58:30.280]  в мессенджерах
[58:30.280 --> 58:32.280]  вот я поэтому прошу
[58:32.280 --> 58:34.280]  не писать большое количество
[58:34.280 --> 58:36.280]  раз по одному сообщению
[58:36.280 --> 58:38.280]  потому что происходит именно вот такое
[58:38.280 --> 58:40.280]  так длина бета у нас получается
[58:40.280 --> 58:42.280]  нужно просто не видеть людей
[58:44.280 --> 58:46.280]  тоже вариант
[58:46.280 --> 58:48.280]  вот то есть у нас получается
[58:48.280 --> 58:50.280]  вот такая вот величина
[58:50.280 --> 58:52.280]  а теперь смотрите
[58:52.280 --> 58:54.280]  вот этот вот путь
[58:56.280 --> 58:58.280]  который у нас есть
[58:58.280 --> 59:00.280]  давайте будем отмечать
[59:00.280 --> 59:02.280]  последнюю конфигурацию стека определенной длины
[59:02.280 --> 59:04.280]  а мы сейчас уже предполагаем что мы свели к
[59:04.280 --> 59:06.280]  а нет
[59:06.280 --> 59:08.280]  да
[59:08.280 --> 59:10.280]  да да да
[59:10.280 --> 59:12.280]  мы по факту уже свели
[59:12.280 --> 59:14.280]  потому что мы явно видите
[59:14.280 --> 59:16.280]  используемся тем
[59:16.280 --> 59:18.280]  что у нас буква одна у нас со стека снимается
[59:18.280 --> 59:20.280]  да мы свели к тому
[59:20.280 --> 59:22.280]  виду что у нас сумма переходов не больше
[59:22.280 --> 59:24.280]  чем один
[59:24.280 --> 59:26.280]  так вот
[59:26.280 --> 59:28.280]  так вот
[59:28.280 --> 59:30.280]  так вот
[59:30.280 --> 59:32.280]  к тому виду что у нас сумма переходов не больше чем один
[59:32.280 --> 59:34.280]  значит
[59:34.280 --> 59:36.280]  смотрите
[59:36.280 --> 59:38.280]  идея отметим
[59:38.280 --> 59:40.280]  последние конфигурации
[59:52.280 --> 59:54.280]  длины g
[59:54.280 --> 59:56.280]  в пути
[59:56.280 --> 59:58.280]  то есть что это означает
[59:58.280 --> 01:00:00.280]  это означает следующее
[01:00:00.280 --> 01:00:02.280]  что вот у нас здесь есть путь
[01:00:02.280 --> 01:00:04.280]  у нас написано правая часть
[01:00:04.280 --> 01:00:06.280]  то что мы кладем на стек
[01:00:06.280 --> 01:00:08.280]  и вот отследим последний момент
[01:00:08.280 --> 01:00:10.280]  когда в этой части на стеке у нас лежит g
[01:00:10.280 --> 01:00:12.280]  мощность слова длины g
[01:00:16.280 --> 01:00:18.280]  хорошо
[01:00:18.280 --> 01:00:20.280]  а тогда сколько у нас таких отмеченных ситуаций будет
[01:00:26.280 --> 01:00:28.280]  нет
[01:00:30.280 --> 01:00:32.280]  нет
[01:00:32.280 --> 01:00:34.280]  утверждение будет отмечено
[01:00:34.280 --> 01:00:36.280]  хотя бы модуль q на модуль g
[01:00:36.280 --> 01:00:38.280]  плюс одно состояние
[01:00:46.280 --> 01:00:48.280]  давайте я тут картинку
[01:00:48.280 --> 01:00:50.280]  нарисую
[01:00:50.280 --> 01:00:52.280]  смотрите
[01:00:56.280 --> 01:00:58.280]  шкала времени
[01:01:00.280 --> 01:01:02.280]  здесь у нас единичка
[01:01:02.280 --> 01:01:04.280]  это символ a
[01:01:04.280 --> 01:01:06.280]  это длина стека
[01:01:06.280 --> 01:01:08.280]  значит здесь у нас получается
[01:01:08.280 --> 01:01:10.280]  следующая вещь
[01:01:10.280 --> 01:01:12.280]  вот это вот у нас
[01:01:14.280 --> 01:01:16.280]  длина бета
[01:01:16.280 --> 01:01:18.280]  а и длина бета у нас больше
[01:01:18.280 --> 01:01:20.280]  равно чем
[01:01:22.280 --> 01:01:24.280]  вот эта константа
[01:01:26.280 --> 01:01:28.280]  насколько мы можем каждый раз
[01:01:28.280 --> 01:01:30.280]  подниматься вверх
[01:01:38.280 --> 01:01:40.280]  это ограничено сверху l
[01:01:46.280 --> 01:01:48.280]  вот
[01:01:48.280 --> 01:01:50.280]  l это длина
[01:01:50.280 --> 01:01:52.280]  самые длинные строки на стек
[01:01:52.280 --> 01:01:54.280]  которые мы кладем
[01:01:54.280 --> 01:01:56.280]  то есть у нас вот эта вот величина
[01:01:56.280 --> 01:01:58.280]  каждый раз растет не больше чем на l
[01:02:00.280 --> 01:02:02.280]  логично
[01:02:02.280 --> 01:02:04.280]  ну хорошо
[01:02:04.280 --> 01:02:06.280]  а теперь смотрите в чем
[01:02:06.280 --> 01:02:08.280]  интересный момент
[01:02:08.280 --> 01:02:10.280]  значит тогда мы
[01:02:10.280 --> 01:02:12.280]  отметим
[01:02:16.280 --> 01:02:18.280]  хотя бы
[01:02:18.280 --> 01:02:20.280]  плюс
[01:02:22.280 --> 01:02:24.280]  плюс одну ситуацию
[01:02:32.280 --> 01:02:34.280]  мы отмечаем последнее вхождение
[01:02:34.280 --> 01:02:36.280]  какой-то длины
[01:02:36.280 --> 01:02:38.280]  стека
[01:02:42.280 --> 01:02:44.280]  то есть мы отмечаем последнее вхождение
[01:02:44.280 --> 01:02:46.280]  длины ровно g
[01:02:46.280 --> 01:02:48.280]  в нашем пути
[01:02:48.280 --> 01:02:50.280]  для всех g
[01:02:50.280 --> 01:02:52.280]  мы утверждаем что у нас разных длин
[01:02:52.280 --> 01:02:54.280]  да
[01:02:54.280 --> 01:02:56.280]  у нас разных длин
[01:02:56.280 --> 01:02:58.280]  смотрите
[01:02:58.280 --> 01:03:00.280]  то есть смотрите
[01:03:00.280 --> 01:03:02.280]  наша цель добраться
[01:03:02.280 --> 01:03:04.280]  по отмеченным вершинам
[01:03:04.280 --> 01:03:06.280]  от единички к модуль бета
[01:03:06.280 --> 01:03:08.280]  значит смотрите мы отметили
[01:03:08.280 --> 01:03:10.280]  хотя бы столько позиций
[01:03:16.280 --> 01:03:18.280]  так а это что такое
[01:03:26.280 --> 01:03:28.280]  сколько у нас состояния всего
[01:03:30.280 --> 01:03:32.280]  модуль q
[01:03:32.280 --> 01:03:34.280]  а это значит что в какой-то ситуации
[01:03:36.280 --> 01:03:38.280]  у нас с вами по отмеченным позициям
[01:03:40.280 --> 01:03:42.280]  во-первых у нас
[01:03:42.280 --> 01:03:44.280]  длина стека не уменьшается
[01:03:44.280 --> 01:03:46.280]  секунду
[01:03:50.280 --> 01:03:52.280]  а что нам еще дает отмеченная позиция
[01:03:52.280 --> 01:03:54.280]  последняя отмеченная позиция
[01:03:56.280 --> 01:03:58.280]  это очень важно
[01:04:02.280 --> 01:04:04.280]  что означает позиция отмеченная
[01:04:04.280 --> 01:04:06.280]  это означает что
[01:04:06.280 --> 01:04:08.280]  после нее
[01:04:08.280 --> 01:04:10.280]  стек только растет
[01:04:10.280 --> 01:04:12.280]  последняя позиция
[01:04:12.280 --> 01:04:14.280]  последняя позиция
[01:04:14.280 --> 01:04:16.280]  последняя позиция отмеченная
[01:04:16.280 --> 01:04:18.280]  с длиной g
[01:04:24.280 --> 01:04:26.280]  возможно он только падает
[01:04:26.280 --> 01:04:28.280]  мы с единички начинали
[01:04:32.280 --> 01:04:34.280]  смотрите в чем фишка
[01:04:34.280 --> 01:04:36.280]  если мы падаем то на единичку
[01:04:36.280 --> 01:04:38.280]  только
[01:04:38.280 --> 01:04:40.280]  можем на 2 упасть
[01:04:40.280 --> 01:04:42.280]  на 1 и еще на 1
[01:04:42.280 --> 01:04:44.280]  и так мы можем
[01:04:44.280 --> 01:04:46.280]  подниматься каждый раз на l
[01:04:46.280 --> 01:04:48.280]  и потом падать на l-1
[01:04:48.280 --> 01:04:50.280]  пилой
[01:04:50.280 --> 01:04:52.280]  расти
[01:04:52.280 --> 01:04:54.280]  нет отмеченных позиций
[01:04:54.280 --> 01:04:56.280]  все равно будет столько
[01:04:56.280 --> 01:04:58.280]  нам важно чтобы
[01:04:58.280 --> 01:05:00.280]  еще стек под этим подмеченным позициям
[01:05:00.280 --> 01:05:02.280]  и не поменялся
[01:05:04.280 --> 01:05:06.280]  мы рассмотрим ситуацию
[01:05:06.280 --> 01:05:08.280]  когда мы заходим в d
[01:05:08.280 --> 01:05:10.280]  вверх
[01:05:10.280 --> 01:05:12.280]  вот у нас есть путь
[01:05:12.280 --> 01:05:14.280]  и мы смотрим его премикс
[01:05:14.280 --> 01:05:16.280]  до момента когда мы вышли в b
[01:05:22.280 --> 01:05:24.280]  еще раз
[01:05:24.280 --> 01:05:26.280]  говорим следующее что у нас будет 2 отмеченных позиций
[01:05:26.280 --> 01:05:28.280]  у которых последняя буквы на стеке
[01:05:28.280 --> 01:05:30.280]  совпадает
[01:05:32.280 --> 01:05:34.280]  еще раз мы отмечаем позиции которые
[01:05:34.280 --> 01:05:36.280]  но последняя позиция с такой длиной стека
[01:05:36.280 --> 01:05:38.280]  или у нас
[01:05:38.280 --> 01:05:40.280]  почему он просто
[01:05:40.280 --> 01:05:42.280]  растет
[01:05:42.280 --> 01:05:44.280]  а?
[01:05:44.280 --> 01:05:46.280]  почему они
[01:05:46.280 --> 01:05:48.280]  не могут убивать
[01:05:48.280 --> 01:05:50.280]  а может убивать
[01:05:50.280 --> 01:05:52.280]  у нас
[01:05:52.280 --> 01:05:54.280]  скрета не прирылась
[01:05:54.280 --> 01:05:56.280]  у нас скрета не прирылась только вниз
[01:05:56.280 --> 01:05:58.280]  ну вот у нас помеченная позиция
[01:05:58.280 --> 01:06:01.280]  когда мы вниз
[01:06:01.280 --> 01:06:03.280]  но мы все еще остались выше, чем они
[01:06:03.280 --> 01:06:05.280]  ну да, нет, тут важно, что
[01:06:05.280 --> 01:06:07.280]  он стоит больше, чем
[01:06:07.280 --> 01:06:09.280]  да, тут получается, смотрите
[01:06:09.280 --> 01:06:11.280]  если тут допустим, здесь
[01:06:11.280 --> 01:06:13.280]  а, да, а здесь что-то, плюс еще
[01:06:13.280 --> 01:06:15.280]  что-то, плюс а, и вот это что-то
[01:06:15.280 --> 01:06:17.280]  оно у нас
[01:06:17.280 --> 01:06:19.280]  не меняется уже
[01:06:19.280 --> 01:06:21.280]  да, но та позиция,
[01:06:21.280 --> 01:06:23.280]  в которую мы спустились может быть
[01:06:23.280 --> 01:06:25.280]  отмеченной, может быть
[01:06:25.280 --> 01:06:27.280]  еще раз
[01:06:27.280 --> 01:06:29.280]  куда? у нас вон так
[01:06:29.280 --> 01:06:31.280]  вершина горки может быть тоже
[01:06:31.280 --> 01:06:33.280]  отмеченной позиции
[01:06:33.280 --> 01:06:35.280]  а, вот эта?
[01:06:35.280 --> 01:06:37.280]  а, ну да
[01:06:37.280 --> 01:06:39.280]  после нее мы вместе
[01:06:39.280 --> 01:06:41.280]  она тоже может быть отмеченной
[01:06:43.280 --> 01:06:45.280]  да, действительно
[01:06:47.280 --> 01:06:49.280]  так, сейчас давайте подумаем
[01:06:49.280 --> 01:06:51.280]  можно ли этому быстро полечить
[01:06:51.280 --> 01:06:53.280]  можно поменять определение отмеченной позиции
[01:06:53.280 --> 01:06:55.280]  но тогда вопрос
[01:06:55.280 --> 01:06:57.280]  сколько их будет?
[01:06:57.280 --> 01:06:59.280]  да
[01:07:01.280 --> 01:07:03.280]  да, тогда их будет мало
[01:07:03.280 --> 01:07:05.280]  ну не знаю, мне хочется записывать
[01:07:05.280 --> 01:07:07.280]  не сразу все это, а
[01:07:07.280 --> 01:07:09.280]  по одному
[01:07:09.280 --> 01:07:11.280]  ну вот такое тоже можно сделать
[01:07:11.280 --> 01:07:13.280]  сейчас, если мы будем говорить
[01:07:13.280 --> 01:07:15.280]  что это
[01:07:15.280 --> 01:07:17.280]  нам важно, чтобы стэки
[01:07:17.280 --> 01:07:19.280]  чтобы все, что находилось под стэком
[01:07:19.280 --> 01:07:21.280]  совпадало
[01:07:21.280 --> 01:07:23.280]  почему?
[01:07:23.280 --> 01:07:25.280]  ну потому что тогда мы, собственно, получаем
[01:07:25.280 --> 01:07:27.280]  топливо для
[01:07:27.280 --> 01:07:29.280]  дальнейшего движения
[01:07:29.280 --> 01:07:31.280]  так, хорошо
[01:07:31.280 --> 01:07:33.280]  две отмеченных позиции
[01:07:33.280 --> 01:07:35.280]  главное, чтобы каждая отмеченная позиция
[01:07:35.280 --> 01:07:37.280]  вторая отмеченная позиция шла
[01:07:37.280 --> 01:07:39.280]  после первой отмеченной позиции, выше
[01:07:39.280 --> 01:07:41.280]  нее, тогда мы доказали
[01:07:47.280 --> 01:07:49.280]  все три могут быть отмечены
[01:07:49.280 --> 01:07:51.280]  ну да, ну смотрите
[01:07:51.280 --> 01:07:53.280]  если у нас такая картинка
[01:07:53.280 --> 01:07:55.280]  здесь у нас стэк не менялся
[01:07:57.280 --> 01:07:59.280]  а, смотрите
[01:07:59.280 --> 01:08:01.280]  фишка в чем?
[01:08:01.280 --> 01:08:03.280]  вот представим себе
[01:08:03.280 --> 01:08:05.280]  что у нас есть
[01:08:05.280 --> 01:08:07.280]  отмеченная позиция, да?
[01:08:07.280 --> 01:08:09.280]  и вторая отмеченная позиция оказалась
[01:08:09.280 --> 01:08:11.280]  после этого и ниже, чем
[01:08:11.280 --> 01:08:13.280]  текущая
[01:08:13.280 --> 01:08:15.280]  вот смотрите, мы поднимаемся всегда
[01:08:15.280 --> 01:08:17.280]  как минимум намного, а спускаемся
[01:08:17.280 --> 01:08:19.280]  на один, это значит в какой-то момент времени
[01:08:19.280 --> 01:08:21.280]  мы пройдем через этот уровень еще раз
[01:08:21.280 --> 01:08:23.280]  мы можем дальше не спускаться
[01:08:23.280 --> 01:08:25.280]  мы можем не подниматься
[01:08:25.280 --> 01:08:27.280]  после отмеченной позиции
[01:08:27.280 --> 01:08:29.280]  мы можем спуститься
[01:08:29.280 --> 01:08:31.280]  то есть утверждение, что типа
[01:08:31.280 --> 01:08:33.280]  мы чисто спускаемся
[01:08:33.280 --> 01:08:35.280]  а потом прыгнем вверх
[01:08:35.280 --> 01:08:37.280]  но мы можем видимо взять
[01:08:37.280 --> 01:08:39.280]  давайте скажу следующее
[01:08:39.280 --> 01:08:41.280]  а тут есть лайфхак
[01:08:41.280 --> 01:08:43.280]  мы просто заменим нашу отмеченную
[01:08:43.280 --> 01:08:45.280]  на минимальных пути, она только ниже
[01:08:45.280 --> 01:08:47.280]  смотрите, здесь кстати есть
[01:08:47.280 --> 01:08:49.280]  очень тонкий лайфхак
[01:08:49.280 --> 01:08:51.280]  он очень важный
[01:08:51.280 --> 01:08:53.280]  я его произнесу
[01:08:53.280 --> 01:08:55.280]  он заключается в следующем
[01:08:55.280 --> 01:08:57.280]  оказывается, что количество таких ситуаций
[01:08:57.280 --> 01:08:59.280]  вообще ограничено сверху
[01:08:59.280 --> 01:09:01.280]  давайте сделаем это другому
[01:09:01.280 --> 01:09:03.280]  давайте сдвигать
[01:09:03.280 --> 01:09:05.280]  отмеченные позиции как можно правее
[01:09:07.280 --> 01:09:09.280]  вот у нас есть две позиции
[01:09:09.280 --> 01:09:11.280]  если мы прыгаем вниз
[01:09:11.280 --> 01:09:13.280]  то она сдвигается, но у нас все еще
[01:09:13.280 --> 01:09:15.280]  остается их вот столько штук
[01:09:15.280 --> 01:09:17.280]  мы просто сдвинемся
[01:09:17.280 --> 01:09:19.280]  мы просто сдвинемся
[01:09:19.280 --> 01:09:21.280]  направо, насколько можно
[01:09:23.280 --> 01:09:25.280]  ну да, вот смотрите
[01:09:25.280 --> 01:09:27.280]  есть несколько вариантов
[01:09:27.280 --> 01:09:29.280]  как это обходить
[01:09:29.280 --> 01:09:31.280]  вариант номер один
[01:09:31.280 --> 01:09:33.280]  что означает, что мы спускаемся вниз
[01:09:35.280 --> 01:09:37.280]  это какой переход у нас получается
[01:09:39.280 --> 01:09:41.280]  нет
[01:09:41.280 --> 01:09:43.280]  важно, что это тогда у нас будет переход
[01:09:43.280 --> 01:09:45.280]  вида унитая
[01:09:45.280 --> 01:09:47.280]  епсилон а
[01:09:49.280 --> 01:09:51.280]  епсилон
[01:09:55.280 --> 01:09:57.280]  таких переходов ограничено количество
[01:10:01.280 --> 01:10:03.280]  ок, ограничено
[01:10:03.280 --> 01:10:05.280]  что с того
[01:10:05.280 --> 01:10:07.280]  это значит, что мы в эту константу
[01:10:07.280 --> 01:10:09.280]  можем внести ограничение на вот это количество
[01:10:11.280 --> 01:10:13.280]  таких переходов будет не больше
[01:10:13.280 --> 01:10:15.280]  чем модуль n, а модуль q
[01:10:19.280 --> 01:10:21.280]  а давайте возьмем лексик графическую минимальную
[01:10:21.280 --> 01:10:23.280]  последовательность из отмеченных вершин
[01:10:23.280 --> 01:10:25.280]  зарастающих
[01:10:25.280 --> 01:10:27.280]  вот да
[01:10:27.280 --> 01:10:29.280]  давайте возьмем мвп
[01:10:29.280 --> 01:10:31.280]  в этой последовательности отмеченных вершин
[01:10:31.280 --> 01:10:33.280]  и все, это понятно
[01:10:33.280 --> 01:10:35.280]  на мвп кажется будет
[01:10:35.280 --> 01:10:37.280]  длина у него кунагава плюс один
[01:10:37.280 --> 01:10:39.280]  короче, просто хочу сказать
[01:10:39.280 --> 01:10:41.280]  вы предлагаете наименьшую
[01:10:41.280 --> 01:10:43.280]  минимальную из таких позиций
[01:10:43.280 --> 01:10:45.280]  чтобы каждый спик уменьшал
[01:10:45.280 --> 01:10:47.280]  да, а при этом
[01:10:47.280 --> 01:10:49.280]  длина у нас плыть зависит от
[01:10:49.280 --> 01:10:51.280]  модуль q, модуль гаммы и модуль l
[01:10:51.280 --> 01:10:53.280]  мы сначала зафиксировали путь
[01:10:53.280 --> 01:10:55.280]  от одного до бета
[01:10:55.280 --> 01:10:57.280]  в нем есть вот столько
[01:10:57.280 --> 01:10:59.280]  отмеченных позиций
[01:10:59.280 --> 01:11:01.280]  а теперь мы берем
[01:11:01.280 --> 01:11:03.280]  просто
[01:11:03.280 --> 01:11:05.280]  нижнюю огибающую
[01:11:05.280 --> 01:11:07.280]  вы предлагаете брать мне больше возрастающую
[01:11:07.280 --> 01:11:09.280]  подпасительность
[01:11:09.280 --> 01:11:11.280]  с ограничением
[01:11:11.280 --> 01:11:13.280]  да, ладно
[01:11:13.280 --> 01:11:15.280]  но в целом
[01:11:15.280 --> 01:11:17.280]  давайте спрашиваем, понятна ли вот эта идея
[01:11:17.280 --> 01:11:19.280]  ключевая идея просто какой-то
[01:11:19.280 --> 01:11:21.280]  полуинвариант брать
[01:11:21.280 --> 01:11:23.280]  да, полуинвариант, в котором при этом у нас
[01:11:23.280 --> 01:11:25.280]  стэк будет совпадать
[01:11:25.280 --> 01:11:27.280]  а сколько у нас прыжков вверх будет?
[01:11:27.280 --> 01:11:29.280]  сколько прыжков вверх будет?
[01:11:29.280 --> 01:11:31.280]  как минимум
[01:11:31.280 --> 01:11:33.280]  q на модуль гаммы плюс один
[01:11:33.280 --> 01:11:35.280]  если мы берем
[01:11:35.280 --> 01:11:37.280]  прыжка вверх
[01:11:37.280 --> 01:11:39.280]  вершина с прыжка вверх
[01:11:39.280 --> 01:11:41.280]  понятно, что низ
[01:11:41.280 --> 01:11:43.280]  из всех отмеченных мы смотрим
[01:11:43.280 --> 01:11:45.280]  прыжки вверх
[01:11:45.280 --> 01:11:47.280]  после прыжка вверх
[01:11:47.280 --> 01:11:49.280]  максимальную подлине
[01:11:49.280 --> 01:11:51.280]  среди них легзографически наименьшую
[01:11:51.280 --> 01:11:53.280]  можно так, да
[01:11:53.280 --> 01:11:55.280]  хорошо, ну в целом
[01:11:55.280 --> 01:11:57.280]  смотрите, что мы с вами получаем
[01:11:57.280 --> 01:11:59.280]  мы получаем с вами, что если у нас
[01:11:59.280 --> 01:12:01.280]  в итоге
[01:12:01.280 --> 01:12:03.280]  если у нас существует такая константа
[01:12:03.280 --> 01:12:05.280]  за какое-то количество шагов
[01:12:05.280 --> 01:12:07.280]  и внезапно
[01:12:07.280 --> 01:12:09.280]  эта буква a со стэка
[01:12:09.280 --> 01:12:11.280]  оставляет что-то еще
[01:12:11.280 --> 01:12:13.280]  на стэке
[01:12:13.280 --> 01:12:15.280]  то мы зацикливаемся
[01:12:17.280 --> 01:12:19.280]  вы понимаете теперь
[01:12:19.280 --> 01:12:21.280]  что это приведет нас
[01:12:21.280 --> 01:12:23.280]  по факту доказательств линейности
[01:12:23.280 --> 01:12:25.280]  алгоритма
[01:12:25.280 --> 01:12:27.280]  еще раз
[01:12:27.280 --> 01:12:29.280]  мы не доказали
[01:12:29.280 --> 01:12:31.280]  еще теорию уже
[01:12:31.280 --> 01:12:33.280]  в смысле?
[01:12:33.280 --> 01:12:35.280]  мы не доказали, потому что
[01:12:35.280 --> 01:12:37.280]  смотрите в чем вещь
[01:12:37.280 --> 01:12:39.280]  вещь стоит в следующем, что
[01:12:39.280 --> 01:12:41.280]  если у нас, смотрите, хотя бы вот столько ситуаций
[01:12:41.280 --> 01:12:43.280]  есть, то по принципу Дерехле
[01:12:47.280 --> 01:12:49.280]  существует два состояния
[01:12:53.280 --> 01:12:55.280]  у которых
[01:12:59.280 --> 01:13:01.280]  одинаковые вершины, одинаковые верхние буквы
[01:13:01.280 --> 01:13:03.280]  да, а еще стэк под ними лежит одинаковый
[01:13:03.280 --> 01:13:05.280]  нет, вот стэк одинаковый
[01:13:05.280 --> 01:13:07.280]  стэк одинакового там не будет
[01:13:07.280 --> 01:13:09.280]  нет, смотрите, q1
[01:13:09.280 --> 01:13:11.280]  получается epsilon alpha
[01:13:11.280 --> 01:13:13.280]  a
[01:13:13.280 --> 01:13:15.280]  и q1
[01:13:15.280 --> 01:13:17.280]  epsilon alpha gamma a
[01:13:21.280 --> 01:13:23.280]  вот такой стэк у нас будет
[01:13:25.280 --> 01:13:27.280]  ну и все
[01:13:27.280 --> 01:13:29.280]  мы из этого в этот пришли
[01:13:29.280 --> 01:13:31.280]  у нас будет линейный конечный автомат
[01:13:31.280 --> 01:13:33.280]  сейчас
[01:13:33.280 --> 01:13:35.280]  альфа
[01:13:35.280 --> 01:13:37.280]  он за разрастами пошел
[01:13:37.280 --> 01:13:39.280]  вагабу можно в ванную стеклю звонить отсюда
[01:13:39.280 --> 01:13:41.280]  а зачем намаг конца?
[01:13:43.280 --> 01:13:45.280]  ну чтобы дальнейшие действия были по циклу
[01:13:45.280 --> 01:13:47.280]  ровно такие же
[01:13:49.280 --> 01:13:51.280]  сейчас, у нас зависит от вершины, которая первая на стэке?
[01:13:51.280 --> 01:13:53.280]  конечно
[01:13:53.280 --> 01:13:55.280]  у нас переход зависит
[01:13:55.280 --> 01:13:57.280]  нет, мы же ее снимаем только
[01:13:59.280 --> 01:14:01.280]  сейчас
[01:14:01.280 --> 01:14:03.280]  мы снимаем, а потом что-то еще кладем
[01:14:03.280 --> 01:14:05.280]  а почему мы не можем два раза снять?
[01:14:07.280 --> 01:14:09.280]  почему мы не можем два раза снять?
[01:14:09.280 --> 01:14:11.280]  почему нам только вершины?
[01:14:19.280 --> 01:14:21.280]  кажется да, можно просто без дала сказать
[01:14:21.280 --> 01:14:23.280]  что если у нас была
[01:14:23.280 --> 01:14:25.280]  два состояния, у которых
[01:14:25.280 --> 01:14:27.280]  альзаковая вершина
[01:14:29.280 --> 01:14:31.280]  и мы вывели состояние
[01:14:31.280 --> 01:14:33.280]  с большим стэком
[01:14:35.280 --> 01:14:37.280]  ну да, но главное, чтобы потом
[01:14:37.280 --> 01:14:39.280]  мы дальше двигаться могли по ним
[01:14:39.280 --> 01:14:41.280]  у нас может быть движение
[01:14:41.280 --> 01:14:43.280]  у вас стэк только растет из этой вершины
[01:14:43.280 --> 01:14:45.280]  если вы вышли из этой вершины, стэк только растет
[01:14:49.280 --> 01:14:51.280]  это состояние
[01:14:51.280 --> 01:14:53.280]  из отмеченной
[01:14:53.280 --> 01:14:55.280]  да, это состояние из отмеченной
[01:14:55.280 --> 01:14:57.280]  тогда нам они нужны
[01:14:57.280 --> 01:14:59.280]  ну да
[01:14:59.280 --> 01:15:01.280]  потому что если мы из стэка
[01:15:01.280 --> 01:15:03.280]  можем что-то забирать, то они достаточно
[01:15:03.280 --> 01:15:05.280]  потому что можно забрать несколько раз
[01:15:05.280 --> 01:15:07.280]  а если мы можем ничего забрать, то у нас
[01:15:07.280 --> 01:15:09.280]  стэк не влияет
[01:15:09.280 --> 01:15:11.280]  да, согласен
[01:15:11.280 --> 01:15:13.280]  так или иначе
[01:15:13.280 --> 01:15:15.280]  мы в итоге доказали теорему
[01:15:15.280 --> 01:15:17.280]  с поправкой
[01:15:17.280 --> 01:15:19.280]  на некоторые ограничения
[01:15:19.280 --> 01:15:21.280]  то есть мы можем экспонент
[01:15:21.280 --> 01:15:23.280]  в корень гаммы степени взять?
[01:15:23.280 --> 01:15:25.280]  мы можем просто гамму в эту степень
[01:15:25.280 --> 01:15:27.280]  выводить все
[01:15:27.280 --> 01:15:29.280]  у нас выводится бесконечный стэк
[01:15:29.280 --> 01:15:31.280]  то есть смотрите, у нас выводится бесконечный стэк
[01:15:31.280 --> 01:15:33.280]  а теперь
[01:15:33.280 --> 01:15:35.280]  после этого, как мы это все сделали
[01:15:43.280 --> 01:15:45.280]  мы можем наконец-таки доказать
[01:15:45.280 --> 01:15:47.280]  линейность
[01:15:47.280 --> 01:15:49.280]  или оргаритм
[01:15:49.280 --> 01:15:51.280]  я скорее про то, что у нас была оценка на n как гамма
[01:15:51.280 --> 01:15:53.280]  мы можем изменить на гамму в степень гаммы л
[01:15:53.280 --> 01:15:55.280]  а мы можем изменить на гамму в степень гаммы л
[01:15:55.280 --> 01:15:57.280]  ну да
[01:15:59.280 --> 01:16:01.280]  так смотрите, теперь линейность
[01:16:01.280 --> 01:16:03.280]  как доказывается
[01:16:05.280 --> 01:16:07.280]  значит у нас есть операция шифки
[01:16:07.280 --> 01:16:09.280]  и есть операция редюс
[01:16:11.280 --> 01:16:13.280]  ну, этих понятно, что
[01:16:13.280 --> 01:16:15.280]  будет длина нашего слова
[01:16:17.280 --> 01:16:19.280]  да
[01:16:19.280 --> 01:16:21.280]  у нас есть утверждение сверху, что
[01:16:21.280 --> 01:16:23.280]  это будет
[01:16:23.280 --> 01:16:25.280]  не больше, чем
[01:16:25.280 --> 01:16:27.280]  смотрите
[01:16:27.280 --> 01:16:29.280]  модуль гамма
[01:16:31.280 --> 01:16:33.280]  так, сначала не больше, чем длина нашего слова
[01:16:35.280 --> 01:16:37.280]  умножить на вот эту константу n
[01:16:37.280 --> 01:16:39.280]  умножить еще на некоторую
[01:16:39.280 --> 01:16:41.280]  небольшую константу c
[01:16:41.280 --> 01:16:43.280]  да, блин
[01:16:43.280 --> 01:16:45.280]  так, это задал...
[01:16:45.280 --> 01:16:47.280]  я же не угадал
[01:16:49.280 --> 01:16:51.280]  да
[01:16:55.280 --> 01:16:57.280]  да
[01:16:57.280 --> 01:16:59.280]  так, это...
[01:16:59.280 --> 01:17:01.280]  режим
[01:17:01.280 --> 01:17:03.280]  да
[01:17:03.280 --> 01:17:05.280]  можно общая режим
[01:17:05.280 --> 01:17:07.280]  ну да, хорошо
[01:17:07.280 --> 01:17:09.280]  так, смотрите
[01:17:09.280 --> 01:17:11.280]  количество шифтов сверху такое
[01:17:11.280 --> 01:17:13.280]  количество редюсов сверху будет такое
[01:17:15.280 --> 01:17:17.280]  собственно, как это доказывается
[01:17:17.280 --> 01:17:19.280]  методом потенциалов
[01:17:19.280 --> 01:17:21.280]  мы вводим потенциал
[01:17:25.280 --> 01:17:27.280]  под ситуации
[01:17:33.280 --> 01:17:35.280]  значит, смотрите
[01:17:37.280 --> 01:17:39.280]  число
[01:17:39.280 --> 01:17:41.280]  число терминалов на стеке
[01:17:43.280 --> 01:17:45.280]  число нетерминалов на стеке
[01:17:49.280 --> 01:17:51.280]  и утвоенное число
[01:17:51.280 --> 01:17:53.280]  непрочитных букв
[01:17:54.280 --> 01:17:56.280]  и утвоенное число непрочитных букв
[01:18:10.280 --> 01:18:12.280]  значит теперь фишка стоит в следующей
[01:18:12.280 --> 01:18:14.280]  по-моему есть презентация
[01:18:18.280 --> 01:18:20.280]  а в чем смысл складывает число терминалов
[01:18:20.280 --> 01:18:22.280]  в не терминальных, когда будут для нас теков
[01:18:22.280 --> 01:18:26.280]  В чем смысл складывать числа терминально и по числу не терминально как-то для нас тега?
[01:18:26.280 --> 01:18:28.280]  Ну, не всем стоит, смотрите.
[01:18:28.280 --> 01:18:30.280]  Теперь идея.
[01:18:30.280 --> 01:18:32.280]  Значит, когда мы делаем операцию shift,
[01:18:36.280 --> 01:18:38.280]  то внезапно,
[01:18:38.280 --> 01:18:40.280]  смотрите.
[01:18:40.280 --> 01:18:42.280]  Большой вопрос.
[01:18:42.280 --> 01:18:44.280]  Вот мы в теореме,
[01:18:44.280 --> 01:18:46.280]  у нас тег был изначально
[01:18:48.280 --> 01:18:50.280]  не пустой кажется.
[01:18:50.280 --> 01:18:52.280]  Сейчас.
[01:18:52.280 --> 01:18:54.280]  Не, мы говорили, что мы начинаем с одной буквы какой-то.
[01:18:56.280 --> 01:18:58.280]  Это на stack.
[01:18:58.280 --> 01:19:00.280]  Да.
[01:19:00.280 --> 01:19:02.280]  То есть мы говорим, смотрите,
[01:19:02.280 --> 01:19:04.280]  давайте суть теоремы,
[01:19:04.280 --> 01:19:06.280]  что если внезапно у нас был
[01:19:06.280 --> 01:19:08.280]  stack какой-то длины,
[01:19:08.280 --> 01:19:10.280]  определенной,
[01:19:10.280 --> 01:19:12.280]  и через определенное число шагов
[01:19:12.280 --> 01:19:14.280]  у нас stack по длине
[01:19:14.280 --> 01:19:16.280]  не уменьшился,
[01:19:16.280 --> 01:19:18.280]  то мы зациклились.
[01:19:20.280 --> 01:19:22.280]  Вот в чем
[01:19:22.280 --> 01:19:24.280]  суть этой теоремы.
[01:19:24.280 --> 01:19:26.280]  Мы доказали,
[01:19:26.280 --> 01:19:28.280]  что если у нас stack
[01:19:28.280 --> 01:19:30.280]  из одной буквы,
[01:19:30.280 --> 01:19:32.280]  то...
[01:19:32.280 --> 01:19:34.280]  Ну, смотрите, где мы этим пользовались.
[01:19:34.280 --> 01:19:36.280]  Мы хотели, чтобы длина stack
[01:19:36.280 --> 01:19:38.280]  была по...
[01:19:38.280 --> 01:19:40.280]  А, ну...
[01:19:40.280 --> 01:19:42.280]  Ну, по факту...
[01:19:42.280 --> 01:19:44.280]  Если у нас изначально длина stack была большая,
[01:19:44.280 --> 01:19:46.280]  то мы не сделаем высоких шагов, чтобы у нас было
[01:19:46.280 --> 01:19:48.280]  своих отмеченных вершин.
[01:19:48.280 --> 01:19:50.280]  Почему?
[01:19:50.280 --> 01:19:52.280]  Сейчас.
[01:19:52.280 --> 01:19:54.280]  Мы, видимо, хотим
[01:19:54.280 --> 01:19:56.280]  у нас длина plus один плюс уже
[01:19:56.280 --> 01:19:58.280]  обывшая длина stack.
[01:19:58.280 --> 01:20:00.280]  Да, наверное.
[01:20:00.280 --> 01:20:02.280]  Да, наверное,
[01:20:02.280 --> 01:20:04.280]  я согласен.
[01:20:04.280 --> 01:20:06.280]  Давайте я сейчас как раз расскажу
[01:20:06.280 --> 01:20:08.280]  вот этот факт. Там, на самом деле,
[01:20:08.280 --> 01:20:10.280]  чуть-чуть точнее оценку нужно сделать.
[01:20:10.280 --> 01:20:12.280]  Но в целом
[01:20:12.280 --> 01:20:14.280]  главное, чтобы понять идею.
[01:20:14.280 --> 01:20:16.280]  Смотрите. Давайте складывать.
[01:20:18.280 --> 01:20:20.280]  Значит...
[01:20:20.280 --> 01:20:22.280]  А, это...
[01:20:22.280 --> 01:20:24.280]  Да, смотрите.
[01:20:24.280 --> 01:20:26.280]  Значит, при
[01:20:26.280 --> 01:20:28.280]  операции stack push
[01:20:28.280 --> 01:20:30.280]  вот это на один увеличивается
[01:20:30.280 --> 01:20:32.280]  в числоне терминалов
[01:20:32.280 --> 01:20:34.280]  на stack.
[01:20:34.280 --> 01:20:36.280]  Вот это увеличивается
[01:20:36.280 --> 01:20:38.280]  на один... Ой, на ноль.
[01:20:38.280 --> 01:20:40.280]  А третья величина
[01:20:40.280 --> 01:20:42.280]  уменьшается на два.
[01:20:44.280 --> 01:20:46.280]  Вот это логично?
[01:20:46.280 --> 01:20:48.280]  То есть, вот это на плюс один,
[01:20:48.280 --> 01:20:50.280]  вот это на плюс один, вот это на минус два.
[01:20:50.280 --> 01:20:52.280]  Ой, плюс один, ноль, минус два.
[01:20:52.280 --> 01:20:54.280]  При операции shift.
[01:20:56.280 --> 01:20:58.280]  Да ведь?
[01:20:58.280 --> 01:21:00.280]  То есть, в итоге минус один.
[01:21:04.280 --> 01:21:06.280]  А теперь важный момент.
[01:21:06.280 --> 01:21:08.280]  Отметим
[01:21:08.280 --> 01:21:10.280]  правила
[01:21:10.280 --> 01:21:12.280]  ситуации, в которых
[01:21:12.280 --> 01:21:14.280]  stack уменьшился относительно
[01:21:14.280 --> 01:21:16.280]  предыдущего.
[01:21:22.280 --> 01:21:24.280]  Уменьшением stack.
[01:21:30.280 --> 01:21:32.280]  Значит, смотрите.
[01:21:32.280 --> 01:21:34.280]  А число терминалов и не терминалов
[01:21:34.280 --> 01:21:36.280]  на stack уменьшится
[01:21:38.280 --> 01:21:40.280]  будет минус один, как минимум.
[01:21:40.280 --> 01:21:42.280]  Меньше равно минус один.
[01:21:44.280 --> 01:21:46.280]  Количеством непрочитанных букв останется ноль.
[01:21:48.280 --> 01:21:50.280]  В итоге потенциал у нас уменьшится
[01:21:50.280 --> 01:21:52.280]  на минус один.
[01:21:54.280 --> 01:21:56.280]  А будем отмечать последние ситуации,
[01:21:56.280 --> 01:21:58.280]  в которых для нас stack растет.
[01:22:02.280 --> 01:22:04.280]  Да?
[01:22:04.280 --> 01:22:06.280]  Окей.
[01:22:06.280 --> 01:22:08.280]  Какой изначально у нас потенциал?
[01:22:10.280 --> 01:22:12.280]  Два длины слова.
[01:22:14.280 --> 01:22:16.280]  Два длины слова.
[01:22:16.280 --> 01:22:18.280]  В конце?
[01:22:18.280 --> 01:22:20.280]  Ноль.
[01:22:20.280 --> 01:22:22.280]  Да, ноль.
[01:22:24.280 --> 01:22:26.280]  И вот между такими вот ситуациями у нас
[01:22:26.280 --> 01:22:28.280]  длина stack уменьшается.
[01:22:28.280 --> 01:22:30.280]  Ну, длина потенциала уменьшается как минимум на один.
[01:22:30.280 --> 01:22:32.280]  Ну, типа.
[01:22:32.280 --> 01:22:34.280]  Типа.
[01:22:34.280 --> 01:22:36.280]  А теперь подумайте, что такое
[01:22:36.280 --> 01:22:38.280]  reduce с уменьшением stack относительно входа?
[01:22:38.280 --> 01:22:40.280]  Если у нас reduce идет
[01:22:40.280 --> 01:22:42.280]  с неуменьшением stack
[01:22:42.280 --> 01:22:44.280]  в какие-то моменты.
[01:22:44.280 --> 01:22:46.280]  На самом деле, здесь константа
[01:22:46.280 --> 01:22:48.280]  не двойка,
[01:22:48.280 --> 01:22:50.280]  а сильно больше.
[01:22:50.280 --> 01:22:52.280]  Вот это как раз цель.
[01:22:52.280 --> 01:22:54.280]  Вот откуда эта константа
[01:22:54.280 --> 01:22:56.280]  и возникает.
[01:22:56.280 --> 01:22:58.280]  А дальше делайте следующую вещь.
[01:22:58.280 --> 01:23:00.280]  Что означает, что вы делаете
[01:23:00.280 --> 01:23:02.280]  reduce, операции с reduce
[01:23:02.280 --> 01:23:04.280]  с неуменьшением stack относительно
[01:23:04.280 --> 01:23:06.280]  какого-то момента?
[01:23:06.280 --> 01:23:08.280]  Из одного не терминала в другой.
[01:23:08.280 --> 01:23:10.280]  Из одного не терминала в другой, либо
[01:23:10.280 --> 01:23:12.280]  ну да, по факту.
[01:23:12.280 --> 01:23:14.280]  Не, это правила типа вида AB.
[01:23:14.280 --> 01:23:16.280]  Смотрите,
[01:23:16.280 --> 01:23:18.280]  это правила вида, значит,
[01:23:18.280 --> 01:23:20.280]  из Sv Epsilon.
[01:23:20.280 --> 01:23:22.280]  Вида из A в Epsilon
[01:23:22.280 --> 01:23:24.280]  и правила вида из AB.
[01:23:28.280 --> 01:23:30.280]  Они могут порождать большое количество
[01:23:30.280 --> 01:23:32.280]  правил, они могут разрастаться.
[01:23:32.280 --> 01:23:34.280]  Вот таких правил, кстати, ограниченное
[01:23:34.280 --> 01:23:36.280]  сверху количество.
[01:23:36.280 --> 01:23:38.280]  Вот, поэтому здесь
[01:23:38.280 --> 01:23:40.280]  не константа 1,
[01:23:40.280 --> 01:23:42.280]  а больше.
[01:23:42.280 --> 01:23:44.280]  Потому что их нужно учитывать.
[01:23:44.280 --> 01:23:46.280]  Вот,
[01:23:46.280 --> 01:23:48.280]  то есть мы с вами
[01:23:48.280 --> 01:23:50.280]  поймем
[01:23:50.280 --> 01:23:52.280]  следующее, смотрите,
[01:23:52.280 --> 01:23:54.280]  что если у нас в какую-то ситуацию
[01:23:54.280 --> 01:23:56.280]  встретилось вот это правило,
[01:23:56.280 --> 01:23:58.280]  и мы попали в эту ситуацию
[01:23:58.280 --> 01:24:00.280]  два раза,
[01:24:00.280 --> 01:24:02.280]  в одну и ту же, мы зациклились,
[01:24:02.280 --> 01:24:04.280]  то есть если в двух
[01:24:04.280 --> 01:24:06.280]  разных ситуациях,
[01:24:06.280 --> 01:24:08.280]  мы попали в одно и то же состояние
[01:24:08.280 --> 01:24:10.280]  и нам нужно применить
[01:24:10.280 --> 01:24:12.280]  редюс по этому правилу.
[01:24:12.280 --> 01:24:14.280]  Да, то есть это получается
[01:24:14.280 --> 01:24:16.280]  у нас как раз
[01:24:16.280 --> 01:24:18.280]  замыкание будет здесь,
[01:24:18.280 --> 01:24:20.280]  поэтому здесь константа не единичка.
[01:24:20.280 --> 01:24:22.280]  А второе, что у нас есть,
[01:24:22.280 --> 01:24:24.280]  а теперь вот эти правила.
[01:24:24.280 --> 01:24:26.280]  Давайте посмотрим.
[01:24:26.280 --> 01:24:28.280]  А их же тоже ограниченное?
[01:24:28.280 --> 01:24:30.280]  А их тоже ограниченное сверху,
[01:24:30.280 --> 01:24:32.280]  но даже несмотря на то, что эти с этим
[01:24:32.280 --> 01:24:34.280]  растут, длина стека у нас
[01:24:34.280 --> 01:24:36.280]  не уменьшается.
[01:24:40.280 --> 01:24:42.280]  А это значит, что если количество
[01:24:42.280 --> 01:24:44.280]  шагов, которые мы сделаем,
[01:24:44.280 --> 01:24:46.280]  будет больше, чем это большое,
[01:24:46.280 --> 01:24:48.280]  то мы зациклимся.
[01:24:52.280 --> 01:24:54.280]  Значит, тут сверху у нас будет
[01:24:54.280 --> 01:24:56.280]  вот асимптотика
[01:24:56.280 --> 01:24:58.280]  вот этого у от 1,
[01:24:58.280 --> 01:25:00.280]  вот это асимптотика
[01:25:00.280 --> 01:25:02.280]  n на c.
[01:25:02.280 --> 01:25:04.280]  Плюс один, скорее всего.
[01:25:04.280 --> 01:25:06.280]  Ну вот мы получаем
[01:25:06.280 --> 01:25:08.280]  с вами
[01:25:08.280 --> 01:25:10.280]  линейную асимптотику алгоритма lr.
[01:25:14.280 --> 01:25:16.280]  Вот так вот теория.
[01:25:16.280 --> 01:25:18.280]  Линейная билайк с константой
[01:25:18.280 --> 01:25:20.280]  стремящейся к конечности.
[01:25:20.280 --> 01:25:22.280]  Да, lr таблицу
[01:25:22.280 --> 01:25:24.280]  собственно можно найти в интернетах,
[01:25:24.280 --> 01:25:26.280]  они обычно константы
[01:25:28.280 --> 01:25:30.280]  картинка 10 тысяч на 10 тысяч пикселей
[01:25:30.280 --> 01:25:32.280]  или таблица для грамматики
[01:25:32.280 --> 01:25:34.280]  какой-нибудь.
[01:25:38.280 --> 01:25:40.280]  Вот, в общем мы с вами закончили.
[01:25:40.280 --> 01:25:42.280]  Я надеюсь вас не сильно
[01:25:42.280 --> 01:25:44.280]  перегрузил, но вот такая вот
[01:25:44.280 --> 01:25:46.280]  интересная теорема, которую впервые
[01:25:46.280 --> 01:25:48.280]  реально мы доказали.
[01:25:48.280 --> 01:25:50.280]  Не бойтесь, нас перегрузили до нас.
[01:25:50.280 --> 01:25:52.280]  По ходу курса,
[01:25:52.280 --> 01:25:54.280]  я думаю, что это было крайне
[01:25:54.280 --> 01:25:56.280]  интересное, хотя
[01:25:56.280 --> 01:25:58.280]  хоть что-то нетрегальное.
[01:25:58.280 --> 01:26:00.280]  В отличие от самого lr, это часть нормальной.
[01:26:02.280 --> 01:26:04.280]  Я, кстати, разобрался с lr
[01:26:04.280 --> 01:26:06.280]  только пока его писал.
[01:26:06.280 --> 01:26:08.280]  Надо было выбирать
[01:26:08.280 --> 01:26:10.280]  Тиор Платон.
[01:26:10.280 --> 01:26:12.280]  У меня больше шансов дать нормальную
[01:26:12.280 --> 01:26:14.280]  экзотику.
[01:26:14.280 --> 01:26:16.280]  Так, спасибо большое, что
[01:26:16.280 --> 01:26:18.280]  на самом деле ходили на лекции.
[01:26:18.280 --> 01:26:20.280]  У нас даже ряд вроде разошелся.
[01:26:20.280 --> 01:26:22.280]  Что?
[01:26:22.280 --> 01:26:24.280]  По количеству. А сколько на потоке?
[01:26:24.280 --> 01:26:26.280]  2, 4, 6, 8, 10, 12, 13.
[01:26:26.280 --> 01:26:28.280]  Вы считаете проценты посещения?
[01:26:30.280 --> 01:26:32.280]  1,15 или больше здесь
[01:26:32.280 --> 01:26:34.280]  есть потока?
[01:26:34.280 --> 01:26:36.280]  Нормально.
[01:26:36.280 --> 01:26:38.280]  Аппроксимация не бесконечность.
[01:26:40.280 --> 01:26:42.280]  Давайте скажу, что нового в этом курсе было.
[01:26:42.280 --> 01:26:44.280]  Мы на самом деле убрали одну лекцию,
[01:26:44.280 --> 01:26:46.280]  но при этом заменили ее нормальным
[01:26:46.280 --> 01:26:48.280]  доказательством lr-алгоритма.
[01:26:48.280 --> 01:26:50.280]  Вот, раз. И второе, что мы добавили
[01:26:50.280 --> 01:26:52.280]  тиремахонского шуцембиржа,
[01:26:52.280 --> 01:26:54.280]  которая была в прошлый раз.
[01:26:54.280 --> 01:26:56.280]  Тоже.
[01:26:56.280 --> 01:26:58.280]  Замкнули наш курс в итоге.
[01:26:58.280 --> 01:27:00.280]  Значит, на экзамене выиграть победили.
[01:27:00.280 --> 01:27:02.280]  Ну, да.
[01:27:02.280 --> 01:27:04.280]  Это самое сложное, кстати, вспомнить сначала.
[01:27:04.280 --> 01:27:06.280]  Поэтому, если есть вопросы, задавайте.
[01:27:06.280 --> 01:27:08.280]  Вот.
[01:27:08.280 --> 01:27:10.280]  А так, всем большое спасибо за курс.
[01:27:10.280 --> 01:27:12.280]  Чем более тики горят, тем больше
[01:27:12.280 --> 01:27:14.280]  заблагодарят.
[01:27:14.280 --> 01:27:16.280]  Забирать 20 тирем, как обычно было так.
[01:27:16.280 --> 01:27:18.280]  Ну, понятно, как назвать.
[01:27:18.280 --> 01:27:20.280]  Там будет тема на досроке.
[01:27:20.280 --> 01:27:22.280]  Там будет тема на досроке.
[01:27:22.280 --> 01:27:24.280]  Если что, попросите конспект.
[01:27:24.280 --> 01:27:26.280]  Скажем спасибо Виталию,
[01:27:26.280 --> 01:27:28.280]  который написал этот конспект.
[01:27:28.280 --> 01:27:30.280]  Это конспект Виталия?
[01:27:30.280 --> 01:27:32.280]  Да.
[01:27:32.280 --> 01:27:34.280]  Он же по Ахаульмуру читает?
[01:27:34.280 --> 01:27:36.280]  Нет, про линейный lr-алгоритм.
[01:27:36.280 --> 01:27:38.280]  По Ахаульмуру, но линейный немного проще.
[01:27:38.280 --> 01:27:40.280]  Нет, там новый конспект был написан.
[01:27:42.280 --> 01:27:44.280]  Где он раньше был?
[01:27:44.280 --> 01:27:46.280]  Там раньше был, когда у нас просто lr.
[01:27:48.280 --> 01:27:50.280]  Ну, lr я читал по другому конспекту.
[01:27:52.280 --> 01:27:54.280]  Все, спасибо всем большое.
