[00:00.000 --> 00:13.120]  Всем доброго дня! Мы сегодня продолжаем с вами говорить про алгоритмы парсинга. Сегодня наш
[00:13.120 --> 00:19.120]  цель является разобрать алгоритм early целиком. В прошлый раз мы с вами начинали с мотивировки того,
[00:19.120 --> 00:27.560]  зачем нам нужен алгоритм early, точнее, какие абстракции у нас с вами в ней будут. И мы в
[00:27.560 --> 00:34.800]  прошлый раз попытались построить гипотетическое дерево разбора для слова аб. Мы это успешно
[00:34.800 --> 00:41.280]  сделали и с вами заметили, что у нас есть три вида операций. Первая операция — это спуститься по
[00:41.280 --> 00:47.400]  дереву разбора вниз, вторая — это прочитать слово целиком, а третья — это подняться по дереву разбора
[00:47.400 --> 00:57.120]  вверх. И мы с вами разобрали, допустим, следующую ситуацию, что на самом деле все гипотетические
[00:57.120 --> 01:02.880]  деревья разбора мы можем зашивать в некоторые наборы ситуации. Вот эти вот множества называются
[01:02.880 --> 01:09.960]  у нас ситуациями. Вот на примере, если мы находимся, вот мы разбирали пример, мы находимся в пятой
[01:09.960 --> 01:23.680]  позиции, где-то в пятый момент времени, мы с вами смотрели, мы находились, где тут ab, ab,
[01:23.680 --> 01:29.800]  но при этом мы находились в правиле из-за сводца SBS. Тогда мы с вами можем закодировать, значит,
[01:29.800 --> 01:37.640]  позицию точки, где мы сейчас находимся в дереве разбора, как позицию DGT, а здесь мы кодируем эту
[01:37.640 --> 01:47.200]  позицию как DGT, то есть то, где точку у нас находится у родителя. Почему этого нам хватит? Потому
[01:47.200 --> 01:54.200]  что мы с вами говорили, что DFS — это такая вещь рекурсивная, и для эмуляции DFS, чтобы вернуться
[01:54.200 --> 02:00.920]  из рекурсии DFS, нам нужно подняться на один уровень вверх. Вот, мы это говорили. И давайте
[02:00.920 --> 02:08.240]  сразу скажем очень важный факт, что далее везде вывод является левосторонним, да, это нам поможет
[02:08.240 --> 02:15.520]  в какой-то степени в доказательстве, чтобы не морочь себе голову. Вот, здесь на презентации есть
[02:15.520 --> 02:23.040]  пример, опять же, тут более простая грамматика, у нас есть слово abc, и нам нужно понять, какое
[02:23.040 --> 02:29.520]  правило нам необходимо приклеить к не терминалу A. Но на самом деле, что мы тут видим? Мы видим,
[02:29.520 --> 02:39.480]  что когда мы предскажем правила из S выведем AB, дальше из A нам нужно с вами выбрать позицию
[02:39.480 --> 02:44.800]  либо A, либо C. Но для того, чтобы ее выбрать, нам нужно взять и прочитать следующую букву в слове.
[02:44.800 --> 02:53.720]  Ну, мы не можем двигаться, потому что нам нужна следующая буква. Да, то есть, если посмотреть на
[02:53.720 --> 02:57.720]  дерево вывода, то как мы можем двигаться? Если мы встречаем не терминал, то можем спуститься вниз,
[02:57.720 --> 03:02.880]  если мы встречаем букву, мы можем прочитать букву, прочитав при этом слово все целиком,
[03:02.880 --> 03:11.000]  либо подняться наверх. Да, но при этом нам нужно, опять же, прочитать какой-то не терминал и точку
[03:11.000 --> 03:16.940]  сдвинуть от этого не терминала вправо. Вот, поэтому здесь ответ на данный вопрос является, что мы
[03:16.940 --> 03:25.080]  должны выбрать правило из A следует A, и оно будет у нас выполнено при операции, следующей операции
[03:25.080 --> 03:31.440]  сканирования. Вот, и смотрите, я тут назвал три абстракции, они, конечно, не очень хорошие,
[03:31.440 --> 03:37.480]  если вы их не поймете, ничего страшного. Вот представьте себе, мы с вами строим дерево,
[03:37.480 --> 03:45.960]  мы собираем новогоднюю елку. Новый год же скоро, уже два месяца осталось. Вот, что нам необходимо?
[03:45.960 --> 03:53.440]  Нам нужно три абстракции. Значит, первая абстракция — это наживитель. Что такое наживитель? Это мы,
[03:53.440 --> 03:57.880]  по сути, к одному дереву подвешиваем второе. То есть у нас обычно, когда мы елку собираем,
[03:57.880 --> 04:03.040]  у нас есть крепление, с которым мы, по сути, делаем защелку. То есть, ну, прикрепляем,
[04:03.040 --> 04:09.960]  сначала наживляем. Это все история. Это мы будем называть раскрытие дерева по не терминалу. Вторая
[04:09.960 --> 04:14.440]  история — это закрепитель. Что такое закрепитель? Это подтвердить, что правила грамматики
[04:14.440 --> 04:21.360]  действительно подходят. То есть, вы собрали уровень елки, обвесили ее игрушками, и после этого
[04:22.000 --> 04:30.880]  закрепляете то, что у вас произошло. По сути, это, если мы говорим в терминах системы контроля
[04:30.880 --> 04:35.680]  версии, это, так или иначе, коммит. То есть, когда мы подтверждаем те изменения, которые у нас были.
[04:35.680 --> 04:43.880]  И нам нужна третья абстракция, которая выберет, вычистит все лишние деревья разбора. Я ее назвал
[04:43.880 --> 04:49.920]  шпателем. Вы проходите, у вас буква не та, выбираете, сдираете то дерево разбора, которое было. То есть,
[04:49.920 --> 04:57.440]  вот мы с вами здесь показывали, как работает шпатель в прошлый раз. На самом деле, это такие
[04:57.440 --> 05:05.520]  жаргонные понятия. Давайте сейчас их немножечко расшифруем. Но прежде чем мы это делаем, мы скажем
[05:05.520 --> 05:13.120]  следующее. Важное замечание, что из-за того, что у нас вывод везде левосторонний, то если у нас
[05:13.120 --> 05:20.800]  из С выводится какой-то, как это посредственнее терминала, в терминала ФИАСИ, то ФИ это на самом деле
[05:20.800 --> 05:31.360]  буквы алфавита. Но почему? Потому что, точнее, смотрите, если, вот давайте вот так напишу. Сейчас я это
[05:31.360 --> 05:47.800]  уточню. То есть, смотрите, у нас вывод левосторонний, из С выводится ФИАСИ, при этом дальше у нас за
[05:47.800 --> 06:00.280]  один шаг, допустим, у нас было правило грамматики А, вводится Б. ФИБСИ. Если у нас картинка такая,
[06:00.280 --> 06:08.120]  то ФИ принадлежит Сигма со звездой. Почему это так? Потому что в левостороннем деле вывода, если у нас
[06:08.120 --> 06:13.400]  был какой-то не терминал слева от того, который раскрылся, то мы его должны были раскрыть раньше.
[06:13.400 --> 06:24.360]  Вот. К сожалению, у нас это здесь не так. Вот. Это важное замечание, которое нам с вами понадобится в
[06:24.360 --> 06:32.320]  будущее. А что здесь не так еще у нас? Где? Вы сказали, это здесь не так. А, на презентации не так, здесь еще
[06:32.320 --> 06:42.240]  типа нужно сказать, что еще за один шаг мы должны что-то сделать. Ну иначе это вообще неправда. Вот.
[06:42.240 --> 06:50.840]  Теперь смотрите, какие инструменты у нас есть. Опять же, пусть у нас есть слово на входе. И если у
[06:50.840 --> 06:56.920]  нас с шаблом какой-то уже подходит, то на самом деле у нас работает такая абстракция, что из С мы
[06:56.920 --> 07:04.320]  вводим какой-то ФИ, потом у нас находится не терминал А, и потом находится СИ. То есть у нас с вами С,
[07:04.320 --> 07:13.240]  потом у нас вводится картинка ФИАСИ. Но при этом и дальше мы с вами, если не терминала А, за один
[07:13.240 --> 07:22.280]  шаг раскрываем А на Б. Да, и мы находимся с вами в этой позиции. Тогда мы можем понять, что существует
[07:22.280 --> 07:37.800]  такое И, что у нас СФИ выводится в префикс до этого символа. Но так как у нас ФИ это элемент
[07:37.800 --> 07:46.600]  Сигма со звездой, то из этого следует ФИ, что ФИ у нас равняется В, до этого символа в частности. Вот.
[07:46.600 --> 07:53.880]  И тогда мы с вами можем поставить точку. Из А мы выводим АБ, и мы находимся в позиции разбора здесь.
[07:53.880 --> 08:03.720]  И тогда мы с вами можем сказать, что мы дошли до некоторой позиции G. И это значит тогда, что из А
[08:03.720 --> 08:11.480]  мы вводим с вами под слово отитого символа дожитого. Вот. И чтобы эту абстракцию обозначать,
[08:11.480 --> 08:19.760]  мы будем говорить следующее, что у нас есть некоторая А, которая находится для каждого правила
[08:19.760 --> 08:31.560]  грамматики, которая у нас выглядит вот так ААБ. Мы будем обозначать ситуацию ИТ, и она будет
[08:31.560 --> 08:44.840]  принадлежать множеству некоторому дожитому. Это ситуация. Такая, что выполнено некоторое свойство.
[08:44.840 --> 08:54.560]  Я его сейчас напишу, и мы с вами будем его детально доказывать. Потому что, когда мы будем строить
[08:54.560 --> 09:03.480]  с вами алгоритм, да, мы будем его строить по-другому. Не так, как есть. Давайте напишу. Хотелось бы
[09:03.480 --> 09:23.680]  иметь вот такой, хотелось бы иметь и вариант. Такое, что существует некоторое, давайте скажем,
[09:23.680 --> 09:43.560]  ПСИ, что из С мы выводим в ИТ А. А что у нас есть? У нас ПСИ уже в дереве разбора занято.
[09:43.560 --> 09:54.360]  Это я картинку сейчас рисовал. Сейчас я просто поясню, как это все перекладывается. То есть,
[09:54.360 --> 10:05.560]  я напишу это в формальных терминах. То есть, у нас получается, выводится так, и за один шаг у
[10:05.560 --> 10:19.000]  нас выводится вот такая композиция. Альфа, бета, С. При этом из А будет выводиться у нас с вами
[10:19.000 --> 10:31.200]  символ из ИТ пожитый. То есть, это, смотрите, мы хотим иметь такой вариант, который я описываю,
[10:31.200 --> 10:38.800]  что мы прочитали символ. То есть, мы дошли до терминала А, потом его раскрыли. Здесь фишка
[10:38.800 --> 10:47.400]  раскрывается в префиксов от ИТожитого, от нулевого до ИТого. Вот А открывается следующий символ. То
[10:47.400 --> 10:57.000]  есть, хотелось бы иметь вариант. Это что мы хотим. Теперь нам нужно это все согласовать с алгоритмом,
[10:57.000 --> 11:06.480]  который у нас был. Да, пока что мы не согласовали это все с алгоритмом. Давайте делать это. Значит,
[11:06.480 --> 11:12.280]  это идея алгоритма. Мы про нее уже много раз поговорили. Все состояния с и позиции ажи будем
[11:12.280 --> 11:17.320]  хранить некоторым множеством, которое будет называться ДЖТ. Вот, поэтому мы на самом деле здесь
[11:17.320 --> 11:25.360]  пишем, что мы А стрелочка альф.б и Т принадлежит ДЖТ. ДЖТ это на самом деле множество вот таких
[11:25.360 --> 11:37.440]  вот наборов. Можно еще вопрос? У нас получается Ж больше или ровно чем И, да? То есть, мы из А взяли какие-то первые буквы?
[11:37.440 --> 11:48.480]  Ну, не из А, мы из А раскрываем. То есть, получается у нас такая вещь, что из С мы дошли
[11:48.480 --> 11:53.840]  до не терминала А, при этом здесь раскрыли какие-то И символов, а из А типа мы обработали символы
[11:53.840 --> 12:04.880]  от Итого до Житого. Можем обработать. А это разве не всегда выполняется? Нет, далеко не всегда. Если А порождающий,
[12:04.880 --> 12:11.240]  то тогда... Не-не-не, тут важно, что какие А и Б написаны здесь. Да, то есть, это прямо правила
[12:11.240 --> 12:22.920]  грамматики у нас. Вот у нас правила грамматики. Вот, тут я определил ситуацию. Давайте просто
[12:22.920 --> 12:31.040]  сначала для каждого правила определим ситуацию вот таким вот образом. Это определение. А хотелось бы,
[12:31.040 --> 12:41.600]  чтобы у нас появлялись ситуации только такого вида. Давайте теперь нам нужно научиться получать
[12:41.600 --> 12:47.720]  ситуацию именно такого вида. Для этого нам нужно с вами посмотреть, какие действия мы с вами осуществляли
[12:47.720 --> 12:57.320]  в дереве разбора. Вот, смотрите, первая операция. Вот, это пример. Значит, вот это вот дерево,
[12:57.320 --> 13:02.720]  которое я разрисовал, я просто презентацию показывал. То есть, у нас С феапсид, из А вводится
[13:02.720 --> 13:09.320]  альфа бета, точка стоит перед бета. Я сейчас буду показывать всю деревню, а слева буду писать
[13:09.320 --> 13:18.640]  правила. Итак, смотрите, первые правила. Вот они раскрываются символом таким образом. Да, и всегда
[13:18.640 --> 13:24.120]  давайте сразу скажем, что из а штрих мы добавляем правила из а штрих в с в грамматику, чтобы у нас
[13:24.120 --> 13:32.360]  не было никаких конфликтов. Это нам будет важно. Итак, смотрите, первая операция это шпатель или
[13:32.360 --> 13:43.760]  операция scan. Давайте я напишу. Значит, операция scan, она у нас заключается в следующем, что если у
[13:43.760 --> 13:55.080]  нас есть из а альфа точка а бета и принадлежащее множество выжитых и при этом выжитая равно а,
[13:55.080 --> 14:05.160]  то мы по сути можем с вами сдвинуть позицию в дереве. То есть, у нас из этого будет следовать, что а
[14:05.160 --> 14:18.240]  альфа а точка бета и принадлежит дж т плюс один. То есть, мы позицию в точке в дереве двигаем
[14:18.240 --> 14:24.560]  направо. Соответственно, у нас вот эта позиция будет меняться на единичку. Как это выглядит? Значит,
[14:24.560 --> 14:30.440]  это выглядит вот таким образом. Def scan, когда мы будем выполнять, мы будем выполнять для множества
[14:30.440 --> 14:52.280]  выжитого а. Мы будем говорить for а альфа а бета и принадлежащую дж т, if, так сейчас, пусть вот это у нас
[14:52.280 --> 15:05.000]  с вами будет выжитая. If выжитая равно равно а, то мы будем с вами писать следующее, что в дж т плюс один мы
[15:05.000 --> 15:16.720]  добавляем с вами вот такую ситуацию. То есть, когда я пишу вот этот вот вывод, это означает,
[15:16.720 --> 15:34.440]  что мы в это множество добавляем эту ситуацию. Договорились? Вот, то есть, когда я пишу принадлежность,
[15:34.440 --> 15:42.320]  то мы добавляем это множество. Давайте, кстати, а я дерево не показал. Ну, тут дерево не надо
[15:42.320 --> 15:51.800]  показать. То есть, просто мы сдвигаем позицию. Так, со сканом разобрались? Ну, по сути,
[15:51.800 --> 15:56.880]  это двезвик вправо, который мы с вами делаем. Теперь давайте следующую операцию. Операция
[15:56.880 --> 16:09.280]  предикт. Смотрите, что делаем. Пусть у нас есть какой-то не терминал, ситуацию, перед которой не
[16:09.280 --> 16:16.920]  терминал у нас с вами, и принадлежит дж т. И пусть у нас есть правила грамматики, из b выводится гамма.
[16:16.920 --> 16:26.320]  Тогда мы можем с вами для них в множество дж т. добавить эту новую ситуацию.
[16:31.680 --> 16:38.680]  То есть, давайте картинку посмотрим, как она будет выглядеть. Я тут разрисовал, я надеюсь не ошибся.
[16:38.680 --> 16:47.880]  Смотрите, чтобы было видно, вот у нас из z штрих выводится phi abc, причем phi это у нас первый
[16:47.880 --> 16:58.720]  e символ, а a раскрывается в некоторую альфу, это символ от it до jit. А из b у нас выводится гамма,
[16:58.720 --> 17:05.680]  b гамма это правило. Но смотрите, нам нужно посмотреть, сколько символов мы обработали до
[17:05.680 --> 17:10.560]  родительской точки, то есть до вот этой точки. Это первые g символов, поэтому мы сюда пишем
[17:10.560 --> 17:16.600]  gt. И здесь нам надо посмотреть, сколько символов мы обработали до этой точки. Но поскольку здесь мы
[17:16.600 --> 17:23.400]  ничего не раскрыли, то здесь опять же получается g символов у нас. Поэтому здесь g, а здесь принадлежность
[17:23.400 --> 17:46.280]  тоже jit. Это предикт. Как это кодится? Это кодится следующим образом. Мы берем, перебегаем,
[17:46.280 --> 17:52.560]  пробегаем по всем правилам такого типа, пробегаем по всем правилам грамматики и добавляем множество
[17:52.560 --> 18:04.560]  вот этих элементов. Новые ситуации. То есть это два фара, внутри которых что-то происходит. Мы уже
[18:04.560 --> 18:11.720]  добавляем туда же, откуда берем. Да-да, ну надо трекать типа была ли эта вершина или не была, была ли
[18:11.720 --> 18:20.280]  эта ситуация в этом, может или нет. Вот предикт такой. Ну я специально хотел показать картинками. Нам
[18:20.280 --> 18:26.520]  нужно будет просто с вами потом эти операции, поэтому я их выписываю на доске. А теперь операция
[18:26.520 --> 18:39.000]  complete или закрепитель, как мы его назвали. В чем она заключается? Смотрите. Пусть у нас с вами уже
[18:39.000 --> 18:52.600]  была операция B, стрелочка гамма, точка K, принадлежащая джитому. Да, то есть эта ситуация как раз подъем
[18:52.600 --> 19:03.920]  по дереву вверх. Вот. Тогда нам нужно найти ситуацию, которая по сути позволит поднять нас на один
[19:03.920 --> 19:12.960]  уровень выше. Эта ситуация такая. Выглядит так, альфа, б, бета и принадлежит дегатому. Да,
[19:12.960 --> 19:22.720]  заметьте, что вот здесь K совпадает с этим K. Тогда из этого можно будет сделать вывод, что мы давайте
[19:22.720 --> 19:31.840]  добавлять множество дежитов. Вот такие вот. Так, ой. Кажется, я тут не дописал. Давайте допишем. Альфа, бета,
[19:31.840 --> 19:47.880]  точка, бета и принадлежащая дежитом. Вот. Давайте картинку посмотрим. Вот картинка. Значит, смотрите,
[19:47.880 --> 19:54.200]  давайте внимательно смотрим. Мы закрыли с вами правило B гамма, которое выводило символы от K до
[19:54.200 --> 20:01.080]  джитого. При этом здесь мы слева выводили от символа от 0 до K. Но мы берем правило, по которому мы
[20:01.080 --> 20:09.680]  можем с вами пытаемся закрыть это дерево. Это правило из A следует альфа, точка, бета, бета. Да,
[20:09.680 --> 20:16.120]  причем здесь вот мы понимаем, что до этого вывели символы от 0 до I, а здесь мы вывели символы от
[20:16.120 --> 20:25.160]  I до K. Да, поэтому когда мы сдвинем точку сюда, вот сюда гипотетически поставим, то здесь мы
[20:25.160 --> 20:33.240]  прочитаем символы от 0 до J, поэтому здесь дежитая. А в родительской вершине мы прочитаем уже символы
[20:33.240 --> 20:58.040]  только от 0 до I. Поэтому здесь ставится I. Понятно ли операция complete? Что делает? Ну,
[20:58.080 --> 21:08.800]  вообще давайте по всем трем ситуациям пройдемся. По всем трем правилам. По скану, по предикту и по
[21:08.800 --> 21:22.360]  комплиту. Понятно. Хорошо, давайте так отдвинемся дальше. Значит теперь надо в этом алгоритме
[21:22.360 --> 21:32.800]  поставить стартовую точку и конечную точку. Смотрите, стартовая позиция будет такая. Из S штрих
[21:32.800 --> 21:41.240]  выводится точка S, 0 принадлежит D0. То есть смотрите, мы находимся в S штрих, у нас точка
[21:41.240 --> 21:47.000]  родительская здесь, мы начинаем, двигаемся в S точку. То есть мы никакое слово не обработали,
[21:47.000 --> 21:54.720]  а при этом у родителя тоже никакой префикс не был обработан. Вот. Теперь давайте подумаем,
[21:54.720 --> 22:04.880]  какой у нас будет финиш. Давайте я нарисую картинку. Финиш хочется иметь такого типа,
[22:04.880 --> 22:16.720]  что мы обошли все по дереву и у нас точка оказалась здесь. Как мы это можем закодировать с вами?
[22:16.720 --> 22:44.880]  Давайте я подскажу чуть-чуть, а мы индексы простые. S штрих, здесь у нас выводится S точка,
[22:44.960 --> 22:55.960]  здесь надо понять индекс какой и принадлежно с чему. Первый индекс он про родителей говорит 0?
[22:55.960 --> 23:05.520]  Да, да, да. Значит 0 принадлежит D0W? Да, да и длинное слово D0W, потому что здесь мы хотим вывести
[23:05.520 --> 23:13.600]  наш слово целиком. Поэтому все символы у него должны быть обработаны. Вот это стартовые финишные,
[23:13.600 --> 23:23.480]  теперь нам надо все объединить, все объединить в наш алгоритм. Как мы это делать будем? Ну смотрите,
[23:23.480 --> 23:30.240]  это алгоритм Erle в первом приближении, как работает. Значит смотрите, вы множество D0,
[23:30.240 --> 23:38.760]  тут псевдокод на полупитоне, значит смотрите, что мы делаем. Мы говорим, что D0 состоит из
[23:39.360 --> 23:46.800]  одной ситуации. S штрих стрелочка точка S, запятая 0. Потом мы пока D0 меняется выполняем операция
[23:46.800 --> 23:54.840]  complete и predict. То есть пытаемся, ну вот в нашем классическом примере, в котором мы это делаем,
[23:54.840 --> 24:05.800]  нам нужно получить все слова, все правила, затрекать, в которые мы можем спустить точку вниз. Поэтому нам
[24:05.800 --> 24:12.520]  нужно вот эту вот опцию делать. То есть пока D0 меняется, мы выполняем complete и predict. А дальше
[24:12.520 --> 24:21.600]  мы делаем следующее. Мы перебираем все буквы слове, выполняем операцию scan, то есть сделаем сдвиг
[24:21.600 --> 24:29.120]  по букве и повторяем ту же самую историю. Выполняем complete и выполняем predict. На самом деле
[24:29.120 --> 24:36.640]  порядок операции predict и complete не важно, потому что они выполняют до тех пор, пока слова не имеются.
[24:36.640 --> 24:44.240]  Кстати, смотрите, важное замечание говорил Руслан, что при операции predict и при операции complete у
[24:44.240 --> 24:50.560]  нас меняется только множество D0, относительно которого мы смотрим правила. Поэтому когда мы
[24:50.560 --> 24:55.200]  выполняем операцию complete и predict, мы можем возвращать то же самое множество, просто в него
[24:55.200 --> 25:04.680]  добавлять некоторый элемент. Вот. И в конце концов нам нужно будет проверить, действительно ли у нас
[25:04.680 --> 25:23.840]  ситуация S'S.0 лежит в множестве D от длины слова W. Вот, вот такой вот алгоритм. Контрольный
[25:23.840 --> 25:41.560]  вопрос. Почему у нас эти циклы не превращаются в цикл wild room? Всего конечная ситуация. Да,
[25:41.560 --> 25:49.120]  количество ситуаций конечное. Их можно посчитать. Для каждого правила грамматики, для каждой у нас,
[25:49.120 --> 25:56.640]  во-первых, индексы и ижи, они конечны, они ограничены длиной слова. Во-вторых, количество точек,
[25:56.640 --> 26:00.880]  где мы можем поставить правила грамматики, оно тоже является конечным. Более детально посчитаем ближе
[26:00.880 --> 26:10.240]  к концу занятия, как это все работает. А теперь смотрите вот такое замечание, которое я хочу
[26:10.240 --> 26:17.120]  алгоритмами сказать. Давайте мы с вами посмотрим, что на самом деле у нас есть. У нас есть некоторые
[26:17.120 --> 26:25.160]  правила, которые добавляются в некоторые магические множества, каким-то непонятным образом. Кажется,
[26:25.160 --> 26:31.920]  они более-менее интуитивно работают. Но теперь, чтобы доказать корректность этого алгоритма,
[26:31.920 --> 26:39.440]  нам нужно, по сути с вами, доказать, что вот эти вот множества, вот эти вот операции по вот
[26:39.440 --> 26:44.000]  этому алгоритму, у нас удовлетворяют как раз вот этому соотношению.
[26:44.000 --> 26:53.920]  То есть снизу у нас просто набор ситуаций, каким-то образом добавляющиеся, а здесь у нас с вами
[26:53.920 --> 27:02.360]  хотим иметь вот такой вариант. Поэтому нам нужно доказать эквивалентность. Вот такой вот.
[27:02.360 --> 27:10.640]  Можете еще раз прокомментировать тот инвариант. Там вот из А выводилась альфа-бета. Да, вот он,
[27:10.640 --> 27:18.160]  давайте, вот он как раз тоже инвариант, вот прямо на экране. Сейчас его покромите. А как в моей
[27:18.160 --> 27:26.520]  ситуации? Что нам нужно доказать? Смотрим, значит, что нам нужно доказать. Вот, допустим,
[27:26.520 --> 27:34.960]  у нас в правиле в алгоритме early появилась вот такая вот ситуация. Вот по вот этому алгоритму,
[27:34.960 --> 27:44.680]  вы какой-то момент времени алгоритму. Тогда нам надо доказать, что он появился не сбоку при пёку,
[27:44.680 --> 27:55.480]  а именно по вот такому соотношению. Что у нас существует phi в c, принадлежащее n
[27:55.480 --> 28:02.000]  abn sigma со звёздочкой. То есть вот этот вот инвариант, который мы хотим соблюсти в нашем алгоритме.
[28:02.000 --> 28:16.640]  Такое, что из phi выводится v от 0 и. Мы сказали, что в левостороннем случае это просто у нас с
[28:16.640 --> 28:31.360]  вами phi равно v it. Вот. Дальше у нас что? Из alpha выводится символ с it пожитый. И у нас
[28:31.360 --> 28:39.680]  здесь вот такая цепочка. Из psi выводится phi ab psi. Дальше за один шаг мы выводим phi alpha beta psi.
[28:39.680 --> 28:49.080]  То есть если, ещё раз, если у нас появилась вот такая ситуация в ходе алгоритма, она могла
[28:49.080 --> 28:54.040]  появиться в том и только в том случае, когда выполнено вот это вот соотношение. То есть как
[28:54.040 --> 28:59.960]  раз вот тот самый инвариант, который у нас с вами получался с деревом. То есть у нас, я не помню,
[28:59.960 --> 29:10.320]  есть картинка у меня? Нет у меня картинка. Давайте нарисую её. То есть у нас phi a psi. Здесь alpha beta.
[29:10.320 --> 29:21.560]  Здесь точка. Из этой штуки у нас выводится слово it пожитого. А здесь у нас выводится
[29:21.560 --> 29:33.960]  слово с нулевого поитого. То есть мы по сути доказываем, что наш алгоритм согласован с той
[29:33.960 --> 29:40.560]  концепцией дерева вывода, который мы хотим. То есть это у нас согласование.
[29:40.560 --> 29:52.040]  Давайте я вот тут напишу. Появилась в ходе алгоритма.
[29:52.040 --> 30:10.200]  Понятно, что утверждает Лемма.
[30:10.200 --> 30:28.920]  Да, да, именно так. Изначально может показаться, что это факт очевидный, но на самом деле этот факт
[30:28.920 --> 30:39.040]  вообще не является очевидным. Поэтому давайте мы его начнём доказывать. Доказывается он в обе
[30:39.040 --> 30:49.800]  стороны индукции. Итак, поехали. Значит первое, что мы с вами докажем, это доказательство слева
[30:49.800 --> 31:01.920]  направо этого факта. То есть мы говорим с вами следующее, что давайте мы у нас есть а стрелочка
[31:01.920 --> 31:14.400]  и мы хотим показать, что у нас тогда есть тот самый вывод. Смотрите, будем делать следующую
[31:14.400 --> 31:29.040]  вещь. Индукция по количеству эффективных шагов в алгоритме. То есть что такое эффективный шаг в
[31:29.040 --> 31:37.320]  алгоритме. Это значит, что либо мы с вами делаем какую-то операцию scan, то есть у нас появляется
[31:37.320 --> 31:46.040]  операция даже плюс первая, либо мы выполняем операцию добавления в дите нового элемента.
[31:46.040 --> 31:52.520]  Да, в дите у нас элементы добавляются при помощи операции scan, ой, при помощи операции
[31:52.520 --> 32:00.680]  предикт или при помощи операции complete. Давайте покажем базу этой индукции, чтобы было понятно.
[32:00.680 --> 32:10.040]  База, значит я давайте буду адвансировать параметр t, это время. Значит что у нас происходит в
[32:10.040 --> 32:19.200]  моменте времени t равное нулё. Какая ситуация у нас с вами уже есть в нулевой момент времени?
[32:19.200 --> 32:33.760]  Да, у нас есть ситуация с вами. С, стрелька, точка, с, ноль принадлежная до ноль. Кажется да, давайте
[32:33.760 --> 32:43.360]  посмотрим. Дальше мы с вами доказываем это. Вот, база индукции, да, вот такая вот. Ну,
[32:43.360 --> 32:51.960]  давайте теперь посмотрим, что это означает. Нам нужно попытаться переложить это на этот язык.
[32:51.960 --> 33:06.480]  Тогда у нас получается должна быть картинка такая, что из s штрих у нас выводится phi s штрих
[33:06.480 --> 33:25.600]  psi. Хотим. Дальше за один шаг у нас раскрывается phi s psi. При этом скажите, вот если у нас
[33:25.600 --> 33:34.440]  происходит вот такая вот штука, то phi чему равняется? Пустому слову. Да, phi равняется пустому
[33:34.440 --> 33:46.080]  слову. Это v, можно так обозначать, двоеточие ноль. Да, и смотрите тут очень тонкий момент,
[33:46.080 --> 33:54.560]  который хочется рассказать. На самом деле, давайте вот так обозначу его. Вот это в нашем случае
[33:54.560 --> 34:03.040]  будет бета. Вот видите, а, стрелочка, альфа, точка, бета. А альфа равняется пустому слову.
[34:03.040 --> 34:12.400]  Да, теперь мы собираем, что это такое. То есть это у нас тоже будет v от нуля до нулевого. В
[34:12.400 --> 34:27.400]  итоге у нас получается, что из s штрих мы выводим phi s штрих psi. Нет, давайте лучше не так сделаем.
[34:27.400 --> 34:35.000]  Я просто покажу. Значит, в лемме, что у нас с вами? phi выводится v ноль psi.
[34:35.000 --> 34:56.840]  Существует phi, равное пустому слову, равное v ноль нулевому. А альфа тоже epsilon равно v ноль нулевому.
[34:56.840 --> 35:04.440]  Вот, и у нас в итоге получается аналогичное дерево вывода. Только оно у нас будет с вами
[35:04.440 --> 35:16.560]  выглядеть вот таким вот образом. s штрих v штрих v s. Ну, мы так можем вывести, но на самом деле мы
[35:16.560 --> 35:28.120]  можем сделать эту штуку такой, что из s штрих мы выводим с вами, внимание, тут сейчас может
[35:28.120 --> 35:41.040]  взорваться немножко мозг. epsilon s штрих. Тут epsilon, здесь у нас выводится epsilon epsilon s epsilon.
[35:41.040 --> 35:57.600]  И в нашем случае вот это у нас альфа, а вот это у нас phi. Да, и в итоге у нас все идет с голосованием.
[35:57.600 --> 36:03.920]  Вот это у нас с вами v нулевый, а вот это v zhi.
[36:03.920 --> 36:28.200]  Понятно ли это? Если непонятно, вопрос задавайте.
[36:28.200 --> 36:42.040]  Да, тут надо тонко расписать. Значит, теперь давайте будем делать с вами переход.
[36:42.040 --> 36:53.880]  Переходы сделаем. Три варианта нам надо разобраться. Как у нас появилась ситуация?
[36:53.880 --> 37:01.240]  Значит, у нас а стрелочка альфа точка b и t принадлежит дюжитам могло появиться тремя способами.
[37:01.240 --> 37:22.360]  Первое это скан, второе это при помощи операции predict и третье при
[37:22.360 --> 37:32.920]  помощи операции complete. Поехали разбирать эти три случая. Значит, первый случай это операция scan.
[37:32.920 --> 37:48.760]  Тогда смотрите, что мы с вами можем сказать. Тогда мы говорим, что альфа это у нас некоторое
[37:48.760 --> 38:08.040]  альфа штрих умножено символ а. Да, потому что мы эту штуку должны были продвинуть. При этом у нас получается
[38:08.040 --> 38:23.160]  следующее было. Альфа, точнее нет, из а выводилась а штрих точка, сейчас, не выводилась только, у нас была
[38:23.160 --> 38:33.960]  ситуация а штрих точка а бета и принадлежит джип минус один. Ну, потому что мы должны были
[38:33.960 --> 38:42.200]  получить с вами правила а стрелочка альфа точка бета и принадлежит джип. Тогда по предположению индукции
[38:42.200 --> 39:07.640]  мы получаем с вами следующую вещь. Из а штрих мы выводили в точка и, а, си, некоторое. Дальше мы за один шаг с вами
[39:07.640 --> 39:33.080]  выводили в и джи, точнее в доитого символа, а штрих, а бета, си. При этом а штрих у нас выводят символы слова
[39:33.080 --> 39:41.240]  с индекса и по джи минус один. Это все чисто из предположений индукции, у нас с вами выполняется.
[39:41.240 --> 39:55.560]  Да, тогда, что мы с вами можем сделать? Из этого мы можем сказать, что а. Вот, давайте я еще тут
[39:55.560 --> 40:07.400]  напишу, что в джи тогда равняется а. В джи минус первое равняется а. Тогда из а штрих а у нас выводится символ
[40:07.400 --> 40:19.080]  уже с итого до джитого. Ну, а это то же самое, что из а у нас выводится в и т джи. Да, и что у нас
[40:19.160 --> 40:27.240]  получается? У нас получается с вами, давайте я сейчас буду подчеркивать важные факты. У нас есть вот эта вот штука,
[40:27.240 --> 40:41.560]  да, и у нас есть вот эта штука, а вот эта штука у нас и так или иначе тоже равняется в, так давайте не буду громоздить.
[40:41.560 --> 40:59.560]  Давайте вот тут напишу, что за ноль символов и обведу вот эту штуку. Ну, за ноль, потому что мы это ровно то
[40:59.560 --> 41:16.680]  же самое. За ноль раз мы выводим в и т а бета си. То есть таким образом мы с вами вариант доказываем.
[41:16.680 --> 41:34.920]  Да, вот он. Давайте я буду вот, чтобы он у нас висел, вот он. То есть как раз у нас получается в джито а бета си раскрывается,
[41:34.920 --> 41:41.080]  из а выводится от итого до джитого, а из фи у нас выводится от нулевого до итого. Ну, значит,
[41:41.080 --> 41:48.920]  предположение переход доказан для сканов. Извините, вы не могли бы строчку написать как из леммы? Это не очень понятно сейчас.
[41:48.920 --> 42:03.880]  А давайте тогда это, да, это то же самое, что фи альфа бе альфа бе си. Вот так. А какую строчку?
[42:03.880 --> 42:16.840]  Ну, которую нам нужно доказать, вот которая внизу леммы. А, ну, а, хорошо. Да, ну, мы получаем ш-трих, выводится фи а си,
[42:16.840 --> 42:31.640]  это выводится в нулевое и, а си, а вот это у нас выводится как раз фи альфа бе си. Но при этом это у нас от итого до джитого, да,
[42:31.640 --> 42:39.000]  вот это у нас от нулевого до итого. Вот они как раз у нас тут вылетают, что из альфы у нас выводится бе и житое,
[42:39.000 --> 42:57.880]  но а фи оно и так и было. Си у нас так выводился из нулевого до итого. Вот. Это скан. Если непонятно, задавайте вопросы.
[42:57.880 --> 43:07.640]  Давайте дальше тогда двигаться. Давайте двинемся с операцией предикт, разберемся.
[43:07.640 --> 43:25.080]  Итак, операция предикт. У нас появилось вот такое вот свойство. У нас с вами а стрелочка альфа точка бета и т принадлежащая джитому.
[43:25.080 --> 43:44.040]  Что из этого мы с вами можем сразу сказать? Альфа заканчивается на не терминал. Больше даже мы про альфу можем что-то сказать.
[43:44.040 --> 43:58.440]  Замечу, что предикт, ну, можно перед этим не терминалом только были буквы и потом один не терминал.
[43:58.440 --> 44:19.320]  Не, даже более того. Давайте напомним, что такое операция у нас с вами предикт. Вот. То есть у нас появляется вот такое правило такого вида.
[44:19.480 --> 44:25.160]  Я даже больше скажу. Мы можем точно указать, чем уравняется альфа в данном случае.
[44:32.840 --> 44:43.880]  Смотрите, да. Пустое слово. Ну да, альфа пустое слово. И при этом и равно g. Вот это мы точно можем знать.
[44:43.880 --> 45:07.720]  Но при этом смотрите. Существовало, это важно. Какое-то k. И существовала k и ситуация вида, давайте я напишем как-нибудь так.
[45:08.600 --> 45:32.200]  B. Стрелочка гамма точка альфа дельта k, принадлежащая дежитому. Ну, потому что при помощи него мы с вами смогли вывести этот альфа стрелочка точка бета.
[45:32.200 --> 45:44.520]  Да, на самом деле вот из этого мы можем написать, что это штука более простая, что это из альфы у нас выводится точка бета g, принадлежащая дежитому.
[45:44.520 --> 45:52.680]  Вот. То есть применяя вот эту вещь и вот эту вещь, и правило a стрелочка бета, в грамотике мы получаем такую вещь.
[45:52.680 --> 46:15.720]  Тогда смотрите, по предположению индукции, мы получаем, что из s штрих выводится v от 0 до k. Bb. Заметьте, что у нас тут k.
[46:15.720 --> 46:35.560]  И из b за один раз мы раскрываем с вами v 0 ката гамма альфа дельта. Причем из гаммы выводится у нас с вами слово от ката в дежитово.
[46:35.560 --> 46:48.440]  Теперь продолжаем. Раскроем еще один раз эту вещь.
[46:48.440 --> 47:00.360]  Тут мы не будем с вами говорить, что у нас с вами левосторонний вывод, а попытаемся раскрыть, не, не будем говорить.
[47:00.760 --> 47:10.760]  Давайте раскроем все терминалы гамма.
[47:11.720 --> 47:30.120]  Тогда у нас получается с вами, смотрите что, у нас получается v 0 к, v k g, a дельта. Мы их должны раскрыть, потому что у нас вывод левосторонний.
[47:30.520 --> 47:35.480]  И дальше за одно правило грамматики мы теперь можем с вами раскрыть a.
[47:35.480 --> 47:45.480]  Мы получаем v 0 g. Давайте я поставлю сюда эпсилон, бета и дельта.
[47:49.480 --> 47:53.480]  Вот так напоминаю, что у нас с вами альфа.
[48:01.000 --> 48:07.000]  А большое раскрылось по правилам a, b. У нас a, b правила грамматики.
[48:11.000 --> 48:13.000]  Ну и что мы с вами получаем?
[48:13.000 --> 48:21.000]  Мы из этого получаем, что из альфы выводится v gt gt.
[48:21.880 --> 48:33.880]  А вот эта вот штука, это как раз у нас говорит маркер символа g.
[48:35.880 --> 48:39.880]  Давайте еще раз посуммирую, что мы хотим.
[48:40.760 --> 48:50.760]  Мы хотели следующий факт, что если у нас из а выводится точка бета gt принадлежит для gt, то существует такой вывод.
[48:51.640 --> 49:03.640]  Из s-трих мы выводим v 0 gt a psi, а здесь выводится для некоторого psi.
[49:03.640 --> 49:13.640]  А здесь у нас получается выводится v 0 gt beta psi.
[49:14.520 --> 49:20.520]  Ну вроде получилось то, что мы хотели.
[49:22.520 --> 49:28.520]  Да, вот он, v 0 gt, эпсилон, здесь все, здесь psi.
[49:34.520 --> 49:38.520]  То есть эту штуку мы тоже с вами показали.
[49:39.400 --> 49:41.400]  То есть тут, смотрите, идея какая.
[49:41.400 --> 49:49.400]  Мы просто берем, аккуратненько перекладываем то, что получается после каждого шага алгоритма.
[49:53.400 --> 49:55.400]  Так.
[49:55.400 --> 49:57.400]  Давайте комплеты, да.
[49:57.400 --> 49:59.400]  Да, мне можно просто...
[49:59.400 --> 50:01.400]  Давай.
[50:01.400 --> 50:03.400]  Что нужно было доказать?
[50:03.400 --> 50:05.400]  Там было три штопора.
[50:06.280 --> 50:10.280]  Да, да, да, мы только, смотри, давай сразу скажем тогда.
[50:10.280 --> 50:12.280]  Да, тут три штопора.
[50:12.280 --> 50:16.280]  Да, я просто один из них по факту не нужен.
[50:16.280 --> 50:18.280]  То есть мы можем вот этот штопор нафиг выкинуть.
[50:20.280 --> 50:22.280]  Да, понятно.
[50:22.280 --> 50:24.280]  Вот, ну вот.
[50:24.280 --> 50:26.280]  Хорошо.
[50:26.280 --> 50:28.280]  Давайте к комплету двигаться.
[50:32.280 --> 50:34.280]  Значит, третье.
[50:35.160 --> 50:39.160]  У нас появилась а, стрелочка, альфа, точка, бета.
[50:43.160 --> 50:47.160]  Бета и принадлежит dg после комплит.
[50:53.160 --> 51:03.160]  Тогда утверждается, что альфа, альфа равно альфа штрих на некоторые бета.
[51:03.160 --> 51:05.160]  Да, потому что мы должны были вывести.
[51:05.160 --> 51:07.160]  И...
[51:11.160 --> 51:13.160]  При этом...
[51:17.160 --> 51:19.160]  Что у нас было?
[51:19.160 --> 51:21.160]  Тут очень важно.
[51:21.160 --> 51:23.160]  Значит, смотрите, у нас получается а,
[51:23.160 --> 51:25.160]  стрелочка, альфа,
[51:25.160 --> 51:27.160]  штрих, точка,
[51:27.160 --> 51:29.160]  b,
[51:29.160 --> 51:31.160]  бета,
[51:31.160 --> 51:35.160]  принадлежала dcat для некоторого к.
[51:39.160 --> 51:43.160]  А из бета у нас выводилась некоторая гамма, точка,
[51:43.160 --> 51:47.160]  ката и принадлежащая dg тому.
[51:51.160 --> 51:53.160]  Опять же, давайте покажу операцию комплит,
[51:53.160 --> 51:55.160]  чтобы она была...
[51:55.160 --> 51:57.160]  Вот.
[51:57.160 --> 51:59.160]  Вот она.
[51:59.160 --> 52:01.160]  Видите?
[52:01.160 --> 52:05.160]  Чтобы вот эту точку передвинуть,
[52:05.160 --> 52:07.160]  которая у нас здесь появляется,
[52:07.160 --> 52:11.160]  нам нужно как раз снизу вверх подняться.
[52:11.160 --> 52:13.160]  Поднимаемся здесь по символука,
[52:15.160 --> 52:17.160]  получаем вот такое вот соотношение.
[52:17.160 --> 52:19.160]  А теперь нам надо все аккуратненько расписать.
[52:19.160 --> 52:21.160]  Значит, смотрите, что мы хотим?
[52:23.160 --> 52:25.160]  Мы хотим
[52:25.160 --> 52:27.160]  показать следующее, что у нас
[52:27.160 --> 52:29.160]  из штрих
[52:29.160 --> 52:31.160]  выводится
[52:31.160 --> 52:33.160]  v0i
[52:33.160 --> 52:35.160]  a
[52:35.160 --> 52:37.160]  psi
[52:37.160 --> 52:39.160]  и из этой штуки у нас выводится
[52:39.160 --> 52:41.160]  с вами
[52:41.160 --> 52:43.160]  v0i
[52:43.160 --> 52:45.160]  альфа
[52:45.160 --> 52:47.160]  бета
[52:47.160 --> 52:49.160]  psi. А вот из этой штуки выводится
[52:49.160 --> 52:51.160]  v от этого дожитого.
[52:51.160 --> 52:53.160]  Ну, поехали смотреть.
[52:53.160 --> 52:55.160]  Что мы можем написать по предположению индукции?
[52:57.160 --> 52:59.160]  Сначала напишем,
[52:59.160 --> 53:01.160]  значит,
[53:01.160 --> 53:03.160]  что у нас из штрих
[53:03.160 --> 53:05.160]  выводится...
[53:05.160 --> 53:07.160]  Пишем для вот этой вот штуки.
[53:07.160 --> 53:09.160]  Давайте ее подчеркну.
[53:09.160 --> 53:11.160]  Из штрих у нас выводится, значит,
[53:11.160 --> 53:13.160]  phi...
[53:13.160 --> 53:15.160]  Ой, не phi, давайте...
[53:15.160 --> 53:17.160]  Позицию у нас v0i
[53:17.160 --> 53:19.160]  альфа
[53:19.160 --> 53:21.160]  бета
[53:21.160 --> 53:23.160]  и из этой штуки
[53:23.160 --> 53:25.160]  выводится
[53:25.160 --> 53:27.160]  v0i
[53:29.160 --> 53:31.160]  Потом у нас выводится
[53:31.160 --> 53:33.160]  с вами
[53:33.160 --> 53:35.160]  a
[53:35.160 --> 53:37.160]  и выводится некоторое
[53:37.160 --> 53:39.160]  psi, которое за один шаг
[53:39.160 --> 53:41.160]  у нас раскрывается v0i
[53:43.160 --> 53:45.160]  альфа штрих
[53:45.160 --> 53:47.160]  бета
[53:47.160 --> 53:49.160]  b psi. Я специально
[53:49.160 --> 53:51.160]  пишу зеленым цветом, чтобы было понятно,
[53:51.160 --> 53:53.160]  что у нас вот этот пыль. При этом
[53:53.160 --> 53:55.160]  альфа штрих выводит
[53:55.160 --> 53:57.160]  v от итого
[53:57.160 --> 53:59.160]  до катого.
[53:59.160 --> 54:01.160]  Теперь
[54:01.160 --> 54:03.160]  мы смотрите, что с вами пишем.
[54:05.160 --> 54:07.160]  Потом у нас идет...
[54:07.160 --> 54:09.160]  Пусть это будет у нас с вами фиолетовый
[54:09.160 --> 54:11.160]  цвет.
[54:11.160 --> 54:13.160]  Раскрываем вот эту вот вещь.
[54:13.160 --> 54:15.160]  Здесь
[54:15.160 --> 54:17.160]  опять же раскрываем все альфы
[54:17.160 --> 54:19.160]  штрих.
[54:19.160 --> 54:21.160]  Раскрываем альфа
[54:21.160 --> 54:23.160]  штрих.
[54:23.160 --> 54:25.160]  Получаем,
[54:25.160 --> 54:27.160]  что
[54:27.160 --> 54:29.160]  здесь у нас v0i
[54:31.160 --> 54:33.160]  здесь у нас получается
[54:33.160 --> 54:35.160]  альфа штрих раскрывается v и k
[54:35.160 --> 54:37.160]  бета
[54:37.160 --> 54:39.160]  b phi
[54:39.160 --> 54:41.160]  штрих. И дальше
[54:41.160 --> 54:43.160]  за один шаг, используя правило
[54:43.160 --> 54:45.160]  как раз которое у нас подсвечено фиолетовым,
[54:45.160 --> 54:47.160]  мы получаем, что у нас
[54:47.160 --> 54:49.160]  v0i
[54:49.160 --> 54:51.160]  точнее v0k
[54:55.160 --> 54:57.160]  Здесь у нас
[54:57.160 --> 54:59.160]  получается с вами
[54:59.160 --> 55:01.160]  гамма
[55:01.160 --> 55:03.160]  бета-пси
[55:07.160 --> 55:09.160]  Да, из предположения индукции
[55:09.160 --> 55:11.160]  у нас получается,
[55:11.160 --> 55:13.160]  что из гаммы у нас выводится
[55:13.160 --> 55:15.160]  v
[55:15.160 --> 55:17.160]  k
[55:17.160 --> 55:19.160]  g
[55:27.160 --> 55:29.160]  Давайте теперь собирать все детально,
[55:29.160 --> 55:31.160]  потому что тут уже тонкая материя.
[55:35.160 --> 55:37.160]  Вот смотрите, вот это у нас есть
[55:37.160 --> 55:39.160]  из v0i
[55:39.160 --> 55:41.160]  и apsi
[55:41.160 --> 55:43.160]  Дальше мы раскрываем
[55:43.160 --> 55:45.160]  и хотим понять
[55:47.160 --> 55:49.160]  что из альфа штрих
[55:49.160 --> 55:51.160]  у нас выводится
[55:51.160 --> 55:53.160]  v и gt
[55:57.160 --> 55:59.160]  Почему
[55:59.160 --> 56:01.160]  альфа выводит
[56:01.160 --> 56:03.160]  v и gt
[56:03.160 --> 56:05.160]  Давайте отвечать
[56:05.160 --> 56:07.160]  Смотрите, альфа
[56:07.160 --> 56:09.160]  у нас это что?
[56:11.160 --> 56:13.160]  Это у нас альфа штрих b
[56:13.160 --> 56:15.160]  А что такое
[56:15.160 --> 56:17.160]  альфа штрих b?
[56:17.160 --> 56:19.160]  Из бета
[56:19.160 --> 56:21.160]  у нас выводится гамма
[56:21.160 --> 56:23.160]  альфа штрих гамма
[56:23.160 --> 56:25.160]  Из альфы у нас выводится
[56:25.160 --> 56:27.160]  и kt
[56:27.160 --> 56:29.160]  А из гаммы у нас выводится
[56:29.160 --> 56:31.160]  kgt
[56:31.160 --> 56:33.160]  Мы получаем,
[56:33.160 --> 56:35.160]  что это v и gt
[56:43.160 --> 56:45.160]  Вроде получили
[56:45.160 --> 56:47.160]  то, что хотели
[56:53.160 --> 56:55.160]  Тут двойной переход индукции
[56:55.160 --> 56:57.160]  после которого
[56:57.160 --> 56:59.160]  мы заклепаем
[56:59.160 --> 57:01.160]  то, что хотим
[57:09.160 --> 57:11.160]  По идее
[57:11.160 --> 57:13.160]  мы доказали с вами
[57:13.160 --> 57:15.160]  переход в одну сторону
[57:15.160 --> 57:17.160]  доказав подположение
[57:17.160 --> 57:19.160]  по индукции
[57:35.160 --> 57:37.160]  Я вас не кокну?
[57:37.160 --> 57:39.160]  Нет
[57:39.160 --> 57:41.160]  Ну хорошо
[57:41.160 --> 57:43.160]  Это формальная индукция
[57:43.160 --> 57:45.160]  просто ее нужно переварить
[57:45.160 --> 57:47.160]  и воспринять
[57:47.160 --> 57:49.160]  Так
[57:49.160 --> 57:51.160]  Ну товарищи, теперь начинается
[57:51.160 --> 57:53.160]  самая сложная вещь
[57:53.160 --> 57:55.160]  доказать в обратную сторону
[57:55.160 --> 57:57.160]  Давайте я
[57:57.160 --> 57:59.160]  выпишу еще раз, что мы доказываем
[57:59.160 --> 58:01.160]  Мы хотим доказать
[58:01.160 --> 58:03.160]  что если у нас
[58:03.160 --> 58:05.160]  есть такое
[58:05.160 --> 58:07.160]  есть такое дерево вывода
[58:09.160 --> 58:11.160]  v0i
[58:11.160 --> 58:13.160]  a
[58:13.160 --> 58:15.160]  psi
[58:15.160 --> 58:17.160]  при этом за один шаг у нас выводится
[58:17.160 --> 58:19.160]  v0i
[58:19.160 --> 58:21.160]  α, β, ψ
[58:23.160 --> 58:25.160]  то
[58:27.160 --> 58:29.160]  что мы хотим сказать
[58:29.160 --> 58:31.160]  то
[58:31.160 --> 58:33.160]  при этом скажем, что
[58:33.160 --> 58:35.160]  альфа у нас выводится
[58:35.160 --> 58:37.160]  в it
[58:37.160 --> 58:39.160]  gt
[58:41.160 --> 58:43.160]  то у нас
[58:43.160 --> 58:45.160]  ситуация
[58:47.160 --> 58:49.160]  из a выводится
[58:49.160 --> 58:51.160]  альфа.b
[58:51.160 --> 58:53.160]  и gt появится в алгоритме
[58:53.160 --> 58:55.160]  Смотрите, тут индукция не тривиальная
[58:55.160 --> 58:57.160]  и нам нужно ее с вами оговорить
[58:59.160 --> 59:01.160]  Значит
[59:01.160 --> 59:03.160]  обозначим количество шагов
[59:05.160 --> 59:07.160]  вот это за g
[59:07.160 --> 59:09.160]  пусть это k
[59:09.160 --> 59:11.160]  а вот это за l
[59:13.160 --> 59:15.160]  индукция
[59:15.160 --> 59:17.160]  в этом случае
[59:17.160 --> 59:19.160]  у нас есть
[59:19.160 --> 59:21.160]  альфа
[59:21.160 --> 59:23.160]  индукция
[59:23.160 --> 59:25.160]  по k плюс l
[59:31.160 --> 59:33.160]  то есть считаем
[59:33.160 --> 59:35.160]  количество шагов, за которые
[59:35.160 --> 59:37.160]  мы раскрываем все необходимые
[59:37.160 --> 59:39.160]  значимые вещи, которые у нас есть
[59:41.160 --> 59:43.160]  давайте базу проверим
[59:47.160 --> 59:49.160]  k плюс l равняется нулю
[59:49.160 --> 59:51.160]  из этого будет следовать, что k
[59:51.160 --> 59:53.160]  равняется нулю, l равняется нулю
[59:59.160 --> 01:00:01.160]  тогда
[01:00:03.160 --> 01:00:05.160]  только тут s штрих у нас
[01:00:07.160 --> 01:00:09.160]  тогда смотрите, что у нас получается
[01:00:09.160 --> 01:00:11.160]  s штрих
[01:00:11.160 --> 01:00:13.160]  выводится
[01:00:13.160 --> 01:00:15.160]  s штрих, ну за ноль шагов можем вывести
[01:00:15.160 --> 01:00:17.160]  s штрих
[01:00:17.160 --> 01:00:19.160]  здесь у нас v ноль и
[01:00:21.160 --> 01:00:23.160]  здесь у нас psi
[01:00:23.160 --> 01:00:25.160]  из этого следует
[01:00:25.160 --> 01:00:27.160]  внимательно если посмотреть
[01:00:27.160 --> 01:00:29.160]  то i равняется нулю
[01:00:31.160 --> 01:00:33.160]  а psi равняется епсилу
[01:00:33.160 --> 01:00:35.160]  потом за один шаг
[01:00:37.160 --> 01:00:39.160]  мы раскрываем
[01:00:39.160 --> 01:00:41.160]  эту всю штуку как
[01:00:41.160 --> 01:00:43.160]  альфа бета
[01:00:43.160 --> 01:00:45.160]  нет, смотрите
[01:00:45.160 --> 01:00:47.160]  за один шаг и за штрих
[01:00:47.160 --> 01:00:49.160]  что мы можем раскрыть
[01:00:49.160 --> 01:00:51.160]  мы из штрих можем раскрыть s
[01:00:51.160 --> 01:00:53.160]  потому что у нас есть только из штрих
[01:00:53.160 --> 01:00:55.160]  правило, что из штрих выводится s
[01:00:55.160 --> 01:00:57.160]  то есть у нас получается с вами
[01:00:57.160 --> 01:00:59.160]  смотрим
[01:00:59.160 --> 01:01:01.160]  так, сейчас
[01:01:03.160 --> 01:01:05.160]  давайте я вот так обозначу
[01:01:05.160 --> 01:01:07.160]  epsilon s
[01:01:07.160 --> 01:01:09.160]  ну мы можем обозначить
[01:01:09.160 --> 01:01:11.160]  то, что находится перед этим
[01:01:11.160 --> 01:01:13.160]  и смотрите, что у нас с вами получается
[01:01:13.160 --> 01:01:15.160]  вот это в нашем случае пусть будет альфа
[01:01:15.160 --> 01:01:17.160]  а вот эта штука
[01:01:17.160 --> 01:01:19.160]  у нас будет
[01:01:19.160 --> 01:01:21.160]  альфа
[01:01:21.160 --> 01:01:23.160]  а вот эта штука
[01:01:23.160 --> 01:01:25.160]  у нас будет
[01:01:25.160 --> 01:01:27.160]  альфа
[01:01:27.160 --> 01:01:29.160]  а вот эта штука
[01:01:29.160 --> 01:01:31.160]  у нас будет бетой
[01:01:31.160 --> 01:01:33.160]  поскольку у нас вывод левосторонний
[01:01:33.160 --> 01:01:35.160]  то мы сначала должны обеспечить раскрытие альфа
[01:01:41.160 --> 01:01:43.160]  так, давайте
[01:01:43.160 --> 01:01:45.160]  более аккуратно напишу
[01:01:45.160 --> 01:01:47.160]  вот так вот
[01:01:47.160 --> 01:01:49.160]  выводится альфа бета за один шаг
[01:01:49.160 --> 01:01:51.160]  при этом альфа
[01:01:51.160 --> 01:01:53.160]  за ноль шагов
[01:01:53.160 --> 01:01:55.160]  должна вывести слово какое-то
[01:01:55.160 --> 01:01:57.160]  v и gt
[01:01:57.160 --> 01:01:59.160]  а альфа бета
[01:01:59.160 --> 01:02:01.160]  это s
[01:02:01.160 --> 01:02:03.160]  мы это знаем
[01:02:03.160 --> 01:02:05.160]  смотрите
[01:02:05.160 --> 01:02:07.160]  из этого будет следовать
[01:02:07.160 --> 01:02:09.160]  что альфа равно
[01:02:09.160 --> 01:02:11.160]  epsilon
[01:02:11.160 --> 01:02:13.160]  а b равно s
[01:02:13.160 --> 01:02:15.160]  а b равно s
[01:02:15.160 --> 01:02:17.160]  а b равно s
[01:02:17.160 --> 01:02:19.160]  что мы хотим при этом?
[01:02:19.160 --> 01:02:21.160]  мы хотим
[01:02:21.160 --> 01:02:23.160]  чтобы правила
[01:02:23.160 --> 01:02:25.160]  какое у нас было в грамматике
[01:02:25.160 --> 01:02:27.160]  в ситуациях
[01:02:27.160 --> 01:02:29.160]  давайте смотреть
[01:02:29.160 --> 01:02:31.160]  из s'
[01:02:31.160 --> 01:02:33.160]  вот s'
[01:02:33.160 --> 01:02:35.160]  вот это наш а
[01:02:35.160 --> 01:02:37.160]  который равен а
[01:02:37.160 --> 01:02:39.160]  вот это наш а
[01:02:39.160 --> 01:02:41.160]  который равен а
[01:02:41.160 --> 01:02:43.160]  вот это наш а
[01:02:43.160 --> 01:02:45.160]  который равен а
[01:02:45.160 --> 01:02:47.160]  выводил
[01:02:47.160 --> 01:02:49.160]  стрелочка
[01:02:49.160 --> 01:02:51.160]  альфа
[01:02:51.160 --> 01:02:53.160]  который у нас
[01:02:53.160 --> 01:02:55.160]  epsilon
[01:02:55.160 --> 01:02:57.160]  точка бета
[01:02:57.160 --> 01:02:59.160]  сопитая
[01:02:59.160 --> 01:03:01.160]  i, которая равняется нулю
[01:03:01.160 --> 01:03:03.160]  вот это s
[01:03:03.160 --> 01:03:05.160]  принадлежало джитому
[01:03:05.160 --> 01:03:07.160]  которое нулю
[01:03:07.160 --> 01:03:09.160]  то есть по сути мы с вами
[01:03:09.160 --> 01:03:11.160]  говорим
[01:03:11.160 --> 01:03:13.160]  что
[01:03:13.160 --> 01:03:15.160]  что иначе говоря
[01:03:15.160 --> 01:03:17.160]  мы хотим чтобы из s'
[01:03:17.160 --> 01:03:19.160]  точка s нулевое
[01:03:19.160 --> 01:03:21.160]  принадлежит до нулю появилось
[01:03:21.160 --> 01:03:23.160]  а извините это у нас старт
[01:03:25.160 --> 01:03:27.160]  то есть из того
[01:03:27.160 --> 01:03:29.160]  что мы вывели
[01:03:29.160 --> 01:03:31.160]  от нуля до нуля
[01:03:31.160 --> 01:03:33.160]  посмотрели что мы раскрываем
[01:03:33.160 --> 01:03:35.160]  за ноль шагов
[01:03:35.160 --> 01:03:37.160]  и дальше какой вывод у нас раскрывается за ноль шагов
[01:03:37.160 --> 01:03:39.160]  мы получаем что это старт
[01:03:39.160 --> 01:03:41.160]  то есть мы в старте
[01:03:41.160 --> 01:03:43.160]  просто положили это множество до ноль
[01:03:53.160 --> 01:03:55.160]  понятно ли база индукции
[01:03:57.160 --> 01:03:59.160]  да
[01:03:59.160 --> 01:04:01.160]  теперь переход
[01:04:01.160 --> 01:04:03.160]  да важный
[01:04:03.160 --> 01:04:05.160]  надо считать в количестве шагов
[01:04:05.160 --> 01:04:07.160]  деревья грамматики сейчас мы будем делать
[01:04:07.160 --> 01:04:09.160]  теперь смотрите переход индукции
[01:04:09.160 --> 01:04:11.160]  я его тоже обозначил
[01:04:13.160 --> 01:04:15.160]  надо посмотреть на последний символ альфа
[01:04:27.160 --> 01:04:29.160]  итак смотрите пусть у нас
[01:04:29.160 --> 01:04:31.160]  альфа равно альфа штриха
[01:04:31.160 --> 01:04:33.160]  это первый вариант
[01:04:33.160 --> 01:04:35.160]  тогда мы должны получить операцию ска
[01:04:35.160 --> 01:04:37.160]  давайте смотреть
[01:04:37.160 --> 01:04:39.160]  как мы это с вами будем получать
[01:04:39.160 --> 01:04:41.160]  у нас получается
[01:04:41.160 --> 01:04:43.160]  изо штрих
[01:04:47.160 --> 01:04:49.160]  выводится
[01:04:49.160 --> 01:04:51.160]  я буду так писать
[01:04:51.160 --> 01:04:53.160]  за к шагов
[01:04:53.160 --> 01:04:55.160]  в ноль и
[01:04:59.160 --> 01:05:01.160]  а
[01:05:01.160 --> 01:05:03.160]  и
[01:05:03.160 --> 01:05:05.160]  дальше у нас
[01:05:05.160 --> 01:05:07.160]  за один шаг
[01:05:07.160 --> 01:05:09.160]  раскрывается
[01:05:09.160 --> 01:05:11.160]  альфа штрих
[01:05:11.160 --> 01:05:13.160]  а
[01:05:13.160 --> 01:05:15.160]  бета
[01:05:17.160 --> 01:05:19.160]  бета
[01:05:19.160 --> 01:05:21.160]  и потом
[01:05:21.160 --> 01:05:23.160]  у нас с вами
[01:05:23.160 --> 01:05:25.160]  тут очень аккуратно
[01:05:25.160 --> 01:05:27.160]  альфа
[01:05:27.160 --> 01:05:29.160]  за л шагов
[01:05:29.160 --> 01:05:31.160]  выводят
[01:05:31.160 --> 01:05:33.160]  в и
[01:05:33.160 --> 01:05:35.160]  ж
[01:05:39.160 --> 01:05:41.160]  вопрос
[01:05:41.160 --> 01:05:43.160]  альфа штрих
[01:05:43.160 --> 01:05:45.160]  за какое количество шагов выводят какое слово
[01:05:55.160 --> 01:05:57.160]  а как
[01:05:57.160 --> 01:05:59.160]  альфы связаны
[01:05:59.160 --> 01:06:01.160]  а
[01:06:01.160 --> 01:06:03.160]  у нас есть правила грамматики
[01:06:03.160 --> 01:06:05.160]  а стрелочка альфа б принадлежит
[01:06:05.160 --> 01:06:07.160]  правилам грамматики
[01:06:09.160 --> 01:06:11.160]  мы раскрываем его
[01:06:11.160 --> 01:06:13.160]  вот он
[01:06:13.160 --> 01:06:15.160]  мы пишем что
[01:06:15.160 --> 01:06:17.160]  вот оно
[01:06:17.160 --> 01:06:19.160]  из а за один шаг мы альфа бета раскрываем
[01:06:27.160 --> 01:06:29.160]  смотрите
[01:06:29.160 --> 01:06:31.160]  я утверждаю что нам
[01:06:31.160 --> 01:06:33.160]  требуется на одно правило меньше
[01:06:35.160 --> 01:06:37.160]  в
[01:06:37.160 --> 01:06:39.160]  и
[01:06:39.160 --> 01:06:41.160]  символ на один меньше
[01:06:51.160 --> 01:06:53.160]  ну потому что нам не нужно
[01:06:53.160 --> 01:06:55.160]  последнюю букву раскрывать
[01:06:55.160 --> 01:06:57.160]  или подождите
[01:06:57.160 --> 01:06:59.160]  или тоже за
[01:07:13.160 --> 01:07:15.160]  сейчас давайте подумаем
[01:07:15.160 --> 01:07:17.160]  за
[01:07:17.160 --> 01:07:19.160]  л или за л минус один шаг
[01:07:19.160 --> 01:07:21.160]  вроде за л
[01:07:21.160 --> 01:07:23.160]  да тоже за л
[01:07:23.160 --> 01:07:25.160]  да
[01:07:25.160 --> 01:07:27.160]  тоже за л шагов у нас
[01:07:27.160 --> 01:07:29.160]  выводится в и ж
[01:07:29.160 --> 01:07:31.160]  минус один
[01:07:35.160 --> 01:07:37.160]  и тогда
[01:07:37.160 --> 01:07:39.160]  что у нас получается
[01:07:39.160 --> 01:07:41.160]  давайте склепывать
[01:07:41.160 --> 01:07:43.160]  эту всю вещь
[01:07:43.160 --> 01:07:45.160]  возможно надо уточнить
[01:07:45.160 --> 01:07:47.160]  индукционный переход
[01:07:47.160 --> 01:07:49.160]  получается
[01:07:49.160 --> 01:07:51.160]  вообще хочется сказать
[01:07:51.160 --> 01:07:53.160]  хочется
[01:07:55.160 --> 01:07:57.160]  что
[01:07:57.160 --> 01:07:59.160]  из предположений индукции
[01:08:03.160 --> 01:08:05.160]  мы можем сказать
[01:08:05.160 --> 01:08:07.160]  что у нас было правило
[01:08:07.160 --> 01:08:09.160]  а стрелочка альфа точка
[01:08:09.160 --> 01:08:11.160]  а бета
[01:08:11.160 --> 01:08:13.160]  и принадлежит
[01:08:13.160 --> 01:08:15.160]  д ж т минус один
[01:08:15.160 --> 01:08:17.160]  хочется сказать что у нас
[01:08:17.160 --> 01:08:19.160]  будет такое
[01:08:21.160 --> 01:08:23.160]  а
[01:08:41.160 --> 01:08:43.160]  давайте сейчас сообразим
[01:08:51.160 --> 01:08:58.160]  А когда это у нас, когда вот такую штуку мы можем получать из предположения дедукции?
[01:08:58.160 --> 01:09:00.160]  Немножко дедуктивный метод.
[01:09:00.160 --> 01:09:13.160]  Получается, что у нас с вами из z штрих выводится v0e g, v0e i, a, psi.
[01:09:13.160 --> 01:09:30.160]  Дальше за один шаг у нас выводится v0e α' a, beta, psi.
[01:09:30.160 --> 01:09:40.160]  А из α' у нас выводится v и g-1.
[01:09:43.160 --> 01:10:11.160]  Мы знаем, что вот эта штука за k шагов выводится, а вот эта штука за l шагов выводится.
[01:10:11.160 --> 01:10:15.160]  Смотрите, тут количество шагов то же самое получается.
[01:10:15.160 --> 01:10:21.160]  Да, то есть тут шагов k, а здесь шагов l.
[01:10:21.160 --> 01:10:23.160]  Давайте вот этот момент пока оставим.
[01:10:23.160 --> 01:10:27.160]  Вот, если у нас база индукции сойдется, то окей.
[01:10:27.160 --> 01:10:35.160]  То есть пока что оставим этот момент, чтобы у нас он был каким-то вот таким тонким местом.
[01:10:35.160 --> 01:10:39.160]  Если что, я потом расскажу, как его доводить.
[01:10:39.160 --> 01:10:43.160]  Второй случай, который у нас есть, это α'a.
[01:10:43.160 --> 01:10:52.160]  Давайте пусть это будет α'b, потому что это некрасиво.
[01:10:52.160 --> 01:10:54.160]  Значит, смотрите, α'b.
[01:10:54.160 --> 01:10:59.160]  Тогда смотрите, что у нас с вами происходит.
[01:10:59.160 --> 01:11:09.160]  У нас из s выводится за k шагов v0i, a, psi.
[01:11:09.160 --> 01:11:19.160]  А здесь у нас с вами за 1 шаг выводится α'b, psi.
[01:11:19.160 --> 01:11:31.160]  И дальше у нас с вами из α'b должно вывести слово отитого дожитого элемента.
[01:11:31.160 --> 01:11:33.160]  Да?
[01:11:33.160 --> 01:11:40.160]  Ну, значит, существует гамма, причем это за l шагов.
[01:11:40.160 --> 01:11:47.160]  Такое, что из α' у нас выводится слово отитого докатого.
[01:11:47.160 --> 01:11:50.160]  Давайте за m шагов.
[01:11:50.160 --> 01:11:57.160]  А из β за n шагов у нас выводится слово откатого дожитого.
[01:11:57.160 --> 01:12:04.160]  Причем, что важно сказать, что m плюс n равно l.
[01:12:04.160 --> 01:12:15.160]  То есть у нас здесь выводится vитkt, а здесь у нас выводится vktjt.
[01:12:17.160 --> 01:12:26.160]  А почему существует такое гамма?
[01:12:26.160 --> 01:12:31.160]  Это из индукции или из чего-то другого?
[01:12:31.160 --> 01:12:36.160]  Смотри, да, спасибо.
[01:12:36.160 --> 01:12:41.160]  Значит, мы бета, я оговорка по Фрейду.
[01:12:41.160 --> 01:12:43.160]  Смотри, давай вот так напишем.
[01:12:43.160 --> 01:12:50.160]  Это вообще не из предположений индукции даже, а больше следует из того, что мы бета как-то раскрыть должны были.
[01:12:50.160 --> 01:12:53.160]  То есть за 1 шаг мы раскрываем гамму.
[01:12:53.160 --> 01:13:00.160]  И за, получается, n минус 1 шаг мы из этой гаммы получаем vktjt.
[01:13:07.160 --> 01:13:11.160]  То есть вот это у нас за 1 шаг гамма.
[01:13:11.160 --> 01:13:15.160]  А здесь у нас vktjt за n минус 1 шаг.
[01:13:31.160 --> 01:13:33.160]  Тогда тут надо очень-очень аккуратно.
[01:13:33.160 --> 01:13:36.160]  Смотрите, что у нас получается.
[01:13:36.160 --> 01:13:43.160]  У нас получается, что, давайте считать количество шагов.
[01:13:43.160 --> 01:13:58.160]  Из s штрих выводится, давайте посчитаем, за какое количество шагов у нас выводится слово v и t.
[01:13:58.160 --> 01:14:05.160]  v0kt, kt, b, c.
[01:14:06.160 --> 01:14:14.160]  Смотрите, вот эту штуку мы вводим за k шагов, вот эту штуку за 1 шаг, а вот эту за штуку за m шагов.
[01:14:14.160 --> 01:14:20.160]  Поэтому здесь мы за k плюс m плюс 1 шаг выводим вот это соотношение.
[01:14:20.160 --> 01:14:30.160]  При этом дальше за 1 шаг мы выводим с вами из беты гаммы.
[01:14:30.160 --> 01:14:45.160]  А дальше за n минус 1 шагов мы выводим с вами v0k, vkj, γс.
[01:14:49.160 --> 01:14:56.160]  Опять же смотрите, сумма шагов здесь такая же, но важно, давайте подчеркнем.
[01:14:56.160 --> 01:15:00.160]  Вот я тут хочу подчеркнуть очень важный момент.
[01:15:00.160 --> 01:15:08.160]  Сначала индукцию давайте сделаем по l, а потом по l и по l плюс k.
[01:15:08.160 --> 01:15:16.160]  То есть если у нас шагов вывода из альфы меньше, то мы делаем предположение индукции.
[01:15:16.160 --> 01:15:21.160]  Если они равны, то выполняем по сумме k плюс l.
[01:15:21.160 --> 01:15:26.160]  А смотрите, что у нас получается. У нас количество шагов становится меньше, чем здесь.
[01:15:26.160 --> 01:15:29.160]  А сумма при этом одинаковая.
[01:15:29.160 --> 01:15:37.160]  То есть здесь у нас было k плюс m плюс n, и здесь у нас k плюс m плюс n.
[01:15:37.160 --> 01:15:42.160]  И смотрите, что из этого мы получаем.
[01:15:42.160 --> 01:15:51.160]  Из этого мы получаем, что у нас есть бета, стрелочка, гамма точка.
[01:15:55.160 --> 01:15:57.160]  Так, сейчас давайте сообразим.
[01:15:57.160 --> 01:16:03.160]  Значит у родительского ката у нашего gtk принадлежит джитому по предположению индукции.
[01:16:03.160 --> 01:16:23.160]  Вот, так как n минус 1 точно меньше, чем l.
[01:16:23.160 --> 01:16:29.160]  Ну, здесь мы требовали l шагов, тут n минус 1.
[01:16:29.160 --> 01:16:32.160]  А теперь хочется сказать, почему еще...
[01:16:32.160 --> 01:16:34.160]  Давайте посмотрим на следующую вещь.
[01:16:34.160 --> 01:16:45.160]  А, стрелочка, альфа точка, б, бета и принадлежит декатому.
[01:16:45.160 --> 01:16:48.160]  Почему это так?
[01:16:48.160 --> 01:16:56.160]  Так как альфа штрих только.
[01:16:56.160 --> 01:16:57.160]  Почему это так?
[01:16:57.160 --> 01:17:12.160]  Потому что, значит, префикс мы выводим за k шагов, альфа штрих мы выводим за m шагов.
[01:17:12.160 --> 01:17:39.160]  И выводится за k шагов, альфа штрих v и k.
[01:17:39.160 --> 01:17:41.160]  За...
[01:17:41.160 --> 01:17:43.160]  На сколько?
[01:17:43.160 --> 01:17:48.160]  За m шагов.
[01:17:48.160 --> 01:17:50.160]  Ну, тут как угодно можно сделать.
[01:17:50.160 --> 01:18:01.160]  Давайте скажем, что m меньше, чем l.
[01:18:01.160 --> 01:18:05.160]  Алло, вы меня слышите?
[01:18:05.160 --> 01:18:08.160]  Да, слышим, слышим.
[01:18:08.160 --> 01:18:13.160]  Доска повисла.
[01:18:13.160 --> 01:18:15.160]  В общем, смотрите, идея какая.
[01:18:15.160 --> 01:18:19.160]  Вот эта штука выводится за k шагов, эта штука за m шагов выводится.
[01:18:19.160 --> 01:18:24.160]  И в итоге m плюс k меньше, чем k плюс l.
[01:18:24.160 --> 01:18:26.160]  Из этого будет делать переход.
[01:18:26.160 --> 01:18:27.160]  А дальше...
[01:18:27.160 --> 01:18:33.160]  А вот если у нас такое есть правило, есть такое правило, то по комплиту мы с вами получаем исходное правило.
[01:18:39.160 --> 01:18:46.160]  Ох ты...
[01:18:46.160 --> 01:18:57.160]  Ох ты пёс.
[01:18:57.160 --> 01:18:59.160]  Можно пока спросить?
[01:18:59.160 --> 01:19:00.160]  Да.
[01:19:00.160 --> 01:19:07.160]  У нас там был переход, когда мы из s штрихов выводили полностью слово.
[01:19:07.160 --> 01:19:12.160]  У нас там было сначала k плюс m плюс 1, потом еще 1, и потом n минус 1.
[01:19:12.160 --> 01:19:13.160]  Да.
[01:19:13.160 --> 01:19:17.160]  На ком сумме получается k плюс m плюс n плюс 1.
[01:19:17.160 --> 01:19:20.160]  Нет, там k плюс m плюс n получается.
[01:19:20.160 --> 01:19:22.160]  Там мы 1 не считаем средний.
[01:19:22.160 --> 01:19:24.160]  Никогда его не считаем.
[01:19:24.160 --> 01:19:31.160]  Там индукция по суммарному количеству выводов из альфы в эту, и из z штриха в эту.
[01:19:31.160 --> 01:19:37.160]  Да, то есть вот эту единичку среднюю мы не считаем.
[01:19:37.160 --> 01:19:40.160]  Сейчас можете сказать, почему?
[01:19:40.160 --> 01:19:43.160]  Потому что, к сожалению, экран отлетел.
[01:19:43.160 --> 01:19:48.160]  Мы говорим, что количество шагов здесь такое и здесь такое.
[01:19:48.160 --> 01:19:52.160]  Здесь мы получаем k плюс m плюс 1.
[01:19:52.160 --> 01:19:56.160]  А здесь n минус 1.
[01:19:56.160 --> 01:19:58.160]  В сумме k плюс m плюс n получается.
[01:19:58.160 --> 01:20:02.160]  И поскольку здесь n минус 1 меньше, чем l заведомо, то мы...
[01:20:13.160 --> 01:20:14.160]  Классно.
[01:20:21.160 --> 01:20:24.160]  На самом деле давайте я сейчас тогда раз зависла.
[01:20:24.160 --> 01:20:26.160]  В предикте ровно то же самое.
[01:20:26.160 --> 01:20:28.160]  Давайте идею расскажу.
[01:20:28.160 --> 01:20:34.160]  В общем, мы смотрим, когда у нас альфа это эпсилон, то есть никакой символ у нас не появляется,
[01:20:34.160 --> 01:20:42.160]  нам нужно подняться наверх, посмотреть, как это чудо-юдо родное могло у нас появиться.
[01:20:42.160 --> 01:20:46.160]  И дальше, сделав индукционный переход, сделать операцию предикт.
[01:20:50.160 --> 01:20:52.160]  Там количество шагов будет меньше.
[01:20:57.160 --> 01:20:58.160]  На единичку.
[01:21:00.160 --> 01:21:08.160]  А вот как починить операцию scan, там нужно, наверное, будет сказать что-то в духе следующего.
[01:21:08.160 --> 01:21:11.160]  Давайте еще посмотрим.
[01:21:11.160 --> 01:21:23.160]  Там третий параметр в индукции ввести для того, чтобы это вычислялось по сумме подлинения терминала вот этого правила альфы.
[01:21:24.160 --> 01:21:32.160]  Потому что там у нас как раз проблема возникла с тем, что у нас суммарное количество в грамматике.
[01:21:32.160 --> 01:21:37.160]  Давайте я сейчас еще тогда буквально пару минут займу у вас.
[01:21:37.160 --> 01:21:41.160]  Доказательство мы добьем в следующий раз, более точно.
[01:21:41.160 --> 01:21:43.160]  Теперь смотрите.
[01:21:43.160 --> 01:21:45.160]  Давайте быстренько оценим сложность алгоритма.
[01:21:46.160 --> 01:21:50.160]  Пусть у нас суммарное количество правил в грамматике P.
[01:21:50.160 --> 01:21:53.160]  Это суммарная длина всех правил в грамматике P.
[01:21:53.160 --> 01:21:58.160]  Давайте оценим количество операции scan, предикт и конклит, которые у нас выполняются.
[01:21:58.160 --> 01:22:00.160]  Смотрите, первое.
[01:22:00.160 --> 01:22:09.160]  Давайте мы будем хранить дожитое в виде всех возможных ситуаций, причем будем хранить его таким вот образом.
[01:22:09.160 --> 01:22:17.160]  То есть если у нас есть ситуация, а стрелочка альфа, точка х, бета и т, принадлежащая дожитое,
[01:22:17.160 --> 01:22:22.160]  то мы будем хранить его в некотором множестве, которое состоит дожитое и х,
[01:22:22.160 --> 01:22:28.160]  для того чтобы быстро посмотреть то, что у нас находится справа после точки.
[01:22:30.160 --> 01:22:32.160]  Да, это можно сделать.
[01:22:32.160 --> 01:22:44.160]  При этом мощность множества g мы можем посчитать как g плюс один умножить на количество правил в грамматике.
[01:22:44.160 --> 01:22:49.160]  Потому что точку мы можем поставить в любое место, во всех правилах.
[01:22:49.160 --> 01:22:52.160]  А i у нас не больше, чем g.
[01:22:52.160 --> 01:22:55.160]  Поэтому у нас i прибегает значение от нуля до g.
[01:22:55.160 --> 01:22:57.160]  Их g плюс один.
[01:22:58.160 --> 01:23:04.160]  Теперь смотрите, что нам нужно для того, чтобы ощутить скан.
[01:23:04.160 --> 01:23:09.160]  Нам нужно пройтись по всем правилам в дожитом и символе a.
[01:23:09.160 --> 01:23:12.160]  И сдвинуть точку.
[01:23:12.160 --> 01:23:18.160]  Это делается за o от модуль g, можно здесь написать даже количество правил в грамматике.
[01:23:20.160 --> 01:23:22.160]  Предикт.
[01:23:22.160 --> 01:23:26.160]  Значит, что у нас с вами в предикте получается?
[01:23:26.160 --> 01:23:28.160]  Давайте подумаем.
[01:23:28.160 --> 01:23:35.160]  Значит, нам нужно в дожитом пробежаться по всем множествам, которые здесь b.
[01:23:35.160 --> 01:23:38.160]  То есть дожитое не терминал.
[01:23:38.160 --> 01:23:41.160]  По всем пробежаться добавить новые правила.
[01:23:41.160 --> 01:23:45.160]  Это будет сверху o от модуль дожитого.
[01:23:49.160 --> 01:23:54.160]  А переходы мы же должны тоже перебирать, нет?
[01:23:54.160 --> 01:23:56.160]  Какие? А, правила грамматики?
[01:23:56.160 --> 01:23:58.160]  Или мы только самые левые используем?
[01:23:58.160 --> 01:24:01.160]  Нет, мы должны перебирать их все.
[01:24:01.160 --> 01:24:04.160]  Сейчас скажу, почему это так получается.
[01:24:04.160 --> 01:24:08.160]  Там более тонкая настройка.
[01:24:08.160 --> 01:24:11.160]  Там все равно получается o от модуль дожитого.
[01:24:11.160 --> 01:24:15.160]  Значит, нам нужно пробежаться по всем правилам грамматики.
[01:24:15.160 --> 01:24:18.160]  Это o от модуль g.
[01:24:18.160 --> 01:24:21.160]  И по всем дожитое беты.
[01:24:21.160 --> 01:24:23.160]  Тут, возможно, квадрат возникнет.
[01:24:23.160 --> 01:24:27.160]  Но сразу скажи, что модуль g это константа.
[01:24:27.160 --> 01:24:31.160]  Поэтому здесь все равно в сумме o длины слова получается.
[01:24:31.160 --> 01:24:37.160]  То есть тут точная оценка будет o от модуль g умножить на модуль дожитого.
[01:24:37.160 --> 01:24:40.160]  Но опять же, нам нужно просто посмотреть.
[01:24:40.160 --> 01:24:43.160]  И третий комплит тут сложнее.
[01:24:43.160 --> 01:24:46.160]  Значит, смотрите.
[01:24:46.160 --> 01:24:48.160]  Что нам нужно?
[01:24:48.160 --> 01:24:52.160]  Нам нужно пробежаться по всем правилам дожитого доллара.
[01:24:52.160 --> 01:24:54.160]  Доллар это символ конца строки.
[01:24:54.160 --> 01:24:56.160]  И по всем правилам дожитого бета.
[01:24:56.160 --> 01:24:59.160]  Где b стрелочка точка гамма и принадлежит дожить.
[01:24:59.160 --> 01:25:02.160]  То есть относительно это верхнее правило в комплите.
[01:25:02.160 --> 01:25:05.160]  А вот это нижнее правило в комплите.
[01:25:05.160 --> 01:25:08.160]  Да, и тут надо посчитать аккуратно.
[01:25:08.160 --> 01:25:10.160]  Значит, смотрите.
[01:25:10.160 --> 01:25:15.160]  Вот этих у нас правил будет o от модуля гамма.
[01:25:15.160 --> 01:25:19.160]  Вот этих o от дит.
[01:25:19.160 --> 01:25:22.160]  Ну, там сумма по всем i.
[01:25:22.160 --> 01:25:25.160]  Не больше, чем g.
[01:25:25.160 --> 01:25:30.160]  Здесь будет o от модуля гамма умножить на o от модуля v.
[01:25:30.160 --> 01:25:32.160]  Значит, смотрите, как это получается.
[01:25:32.160 --> 01:25:37.160]  o от модуля v это переход, еще перебор всех i.
[01:25:37.160 --> 01:25:44.160]  А o от модуля гамма это все правила, которые заткнулись и здесь.
[01:25:44.160 --> 01:25:50.160]  Вот, получаем, что это o от модуля дит на модуль g на модуль v.
[01:25:50.160 --> 01:25:56.160]  Получаем o от модуля g в квадрате на модуль v в квадрате.
[01:25:56.160 --> 01:25:58.160]  Вот, ну и в итоге смотрите, что получается.
[01:25:58.160 --> 01:26:01.160]  Нам эту всю штуку еще нужно домножить на длину слова дубль v.
[01:26:01.160 --> 01:26:07.160]  Потому что на самом деле мы рассуждали для определенного дожитого.
[01:26:07.160 --> 01:26:13.160]  В итоге получаем, что сложность у нас кубическая от длины слова.
[01:26:13.160 --> 01:26:19.160]  Но на самом деле, если посудить так, то тут можно доказать следующий факт,
[01:26:19.160 --> 01:26:23.160]  что если грамматика является однозначной,
[01:26:23.160 --> 01:26:30.160]  то именно вот такая версия алгоритма при более точной оценке будет давать квадратичную сложность.
[01:26:30.160 --> 01:26:37.160]  То есть по факту алгоритм Эрли работает сильно быстрее, чем алгоритм Кока Янгера Касами.
[01:26:37.160 --> 01:26:42.160]  Вот, но утверждение состоит в том, что можно делать линейный алгоритм парсинга.
[01:26:42.160 --> 01:26:47.160]  Вот, и к линейным алгоритмам парсинга мы с вами переберемся уже в следующий раз.
[01:26:47.160 --> 01:26:51.160]  К сожалению, доска нам не позволила довести доказательства.
[01:26:51.160 --> 01:26:54.160]  Вот, давай, о.
[01:26:54.160 --> 01:26:58.160]  А можно вопрос, а вот однозначная грамматика, это что?
[01:26:58.160 --> 01:27:02.160]  Это для любого слова есть романтическая грамматика.
[01:27:02.160 --> 01:27:04.160]  Извините, что я задержал вас.
[01:27:04.160 --> 01:27:07.160]  Наша цель будет доказать это утверждение.
[01:27:07.160 --> 01:27:10.160]  Тут вообще остался предикт.
[01:27:10.160 --> 01:27:12.160]  Вот.
[01:27:12.160 --> 01:27:17.160]  Ну и довести какие-то тонкие моменты.
[01:27:17.160 --> 01:27:22.160]  В следующий раз мы уже с вами будем говорить про линейный алгоритм парсинга.
[01:27:22.160 --> 01:27:24.160]  Вот.
[01:27:24.160 --> 01:27:26.160]  Вот.
[01:27:26.160 --> 01:27:30.160]  Ну и довести какие-то тонкие моменты.
[01:27:30.160 --> 01:27:35.160]  В следующий раз мы уже с вами будем говорить про так называемый LR алгоритм.
[01:27:35.160 --> 01:27:38.160]  Морально запасайтесь терпением.
[01:27:38.160 --> 01:27:44.160]  Но я постараюсь его рассказать проще, чем классическим подходом он рассказывается.
[01:27:44.160 --> 01:27:50.160]  Значит, те, кто хочет следующую лекцию смотреть, посмотрите как это.
[01:27:50.160 --> 01:27:53.160]  Как делается детерминизация автоматов.
[01:27:53.160 --> 01:27:55.160]  Это нам поможет.
[01:27:58.160 --> 01:28:01.160]  Все, извините, давайте задавайте вопросы.
[01:28:09.160 --> 01:28:11.160]  Видимо нет вопросов.
[01:28:11.160 --> 01:28:15.160]  Да, надо осознать, задавайте вопросы.
[01:28:15.160 --> 01:28:18.160]  В общем, можно в чате задавать по вопросам.
[01:28:18.160 --> 01:28:21.160]  Ссылку на доску оставляю, ее можно комментировать.
[01:28:24.160 --> 01:28:26.160]  Ох, мы идем.
[01:28:29.160 --> 01:28:32.160]  Значит, ютубу спасибо.
