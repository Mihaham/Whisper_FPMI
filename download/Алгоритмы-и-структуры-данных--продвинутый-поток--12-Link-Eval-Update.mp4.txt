[00:00.000 --> 00:08.000]  Вот. Молимся мы сегодня на мистическую структуру данных.
[00:08.000 --> 00:17.000]  Link eval update. Вот. Ну давайте сегодня мы ее еще раз сформулируем.
[00:17.000 --> 00:24.000]  Так что это такое? Значит, это следующее. У нас есть n вершин.
[00:25.000 --> 00:30.000]  У Кая, ну вот эти вершины образуют лес.
[00:30.000 --> 00:34.000]  Вот как-то так это звучит. В смысле выглядит.
[00:34.000 --> 00:37.000]  То есть они образуют в каждом момент времени лес.
[00:37.000 --> 00:41.000]  Вот. То есть как-то вот так. В чем именно лес.
[00:41.000 --> 00:46.000]  То есть вовсе не обязательно дерево. Если дерево, скорее всего, все уже тривиально.
[00:47.000 --> 00:59.000]  Вот. А еще, значит, у каждой вершины есть так называемая метка.
[00:59.000 --> 01:11.000]  Лейбл от V. Это некий элемент из S.
[01:11.000 --> 01:17.000]  Про S, ну, по умолчанию мы знаем только одно.
[01:17.000 --> 01:23.000]  Что S является полугруппой относительно операции ыть.
[01:27.000 --> 01:30.000]  Да. То есть это полугруппа, да.
[01:34.000 --> 01:39.000]  Нет. Вот. То есть у каждой VS поставляется так называемая метка.
[01:39.000 --> 01:41.000]  А по этой что? Вершина.
[01:41.000 --> 01:43.000]  Каждой вершине написано метка.
[01:43.000 --> 01:45.000]  Да. На каждой вершине написано метка.
[01:45.000 --> 01:47.000]  Деревья у нас это ориентированы, да?
[01:47.000 --> 01:49.000]  Да. Деревья совершенно верно ориентированы.
[01:49.000 --> 01:53.000]  То есть, более того, хранятся они в формате. У каждой вершины написан родитель.
[01:53.000 --> 01:55.000]  Родитель. Да. Родитель.
[01:55.000 --> 01:58.000]  А потомка мы не знаем. Именно родитель, да.
[01:58.000 --> 02:00.000]  Потопков мы можем вообще не знать, да.
[02:00.000 --> 02:04.000]  Ну да, вы видите. Ну или понятно. Написано ну, если родителя нету.
[02:04.000 --> 02:08.000]  Вот. Это вот у нас такая, ну вот эта полугруппа.
[02:08.000 --> 02:10.000]  То есть, операция ыть ассоциативно.
[02:10.000 --> 02:13.000]  Это все. Что мы по камере по умолчанию знаем.
[02:13.000 --> 02:17.000]  Впрочем, не то чтобы мы сегодня будем сильно копать вам совсем в абстракционизм.
[02:17.000 --> 02:22.000]  Потому что мы на самом деле сегодня попробуем поиграться с конкретными примерами.
[02:22.000 --> 02:24.000]  ыть.
[02:24.000 --> 02:28.000]  Вот. Да. Что мы совсем этим хотим делать?
[02:29.000 --> 02:35.000]  Ну, мы хотим выполнять, как следует из названия, три типа операции.
[02:35.000 --> 02:41.000]  Значит, ну, во-первых, хочется, конечно, выполнять эвал.
[02:43.000 --> 02:45.000]  Это что значит?
[02:45.000 --> 02:47.000]  Значит, эвал от В.
[02:49.000 --> 02:51.000]  Это значит следующее.
[02:51.000 --> 02:53.000]  Рассмотрим вершину В.
[02:53.000 --> 03:00.000]  И рассмотрим ее путь до корня.
[03:02.000 --> 03:04.000]  Ну, до корня ее дерева, конечно.
[03:04.000 --> 03:07.000]  Давайте себе представим, что эти вершины мы назовем.
[03:07.000 --> 03:09.000]  То есть, допустим, вот это корень.
[03:09.000 --> 03:11.000]  Это у нас вершина Вк.
[03:11.000 --> 03:15.000]  То есть, тут получается В1, В2 и так далее. Вк-1.
[03:16.000 --> 03:18.000]  Вот.
[03:18.000 --> 03:23.000]  И мы очень хотим вычислить такую величину, как
[03:25.000 --> 03:28.000]  вот будьте внимательны, давайте тут с размерностями.
[03:28.000 --> 03:43.000]  То есть, label от В0, ыть, label от В1, ыть, label от В2, ыть и так далее, ыть, label от Вк.
[03:45.000 --> 03:47.000]  Что такое эвал?
[03:47.000 --> 03:50.000]  Вот эвал это функция.
[03:50.000 --> 03:52.000]  То есть, запрос.
[03:52.000 --> 03:53.000]  Эвал от В это вершина.
[03:53.000 --> 03:54.000]  Да.
[03:54.000 --> 03:56.000]  Который дается на вход В.
[03:56.000 --> 04:02.000]  И мы хотим вычислить вот такое значение.
[04:02.000 --> 04:05.000]  Где это вот все, ну, в родители приходим каждый раз?
[04:05.000 --> 04:06.000]  Ну, по сути, да.
[04:06.000 --> 04:11.000]  Только обратите внимание, видите, мы идем слева направо от корня к вершине В, а не наоборот.
[04:11.000 --> 04:14.000]  Это важно, потому что это какого-то друга.
[04:14.000 --> 04:17.000]  Ассоциативность.
[04:17.000 --> 04:22.000]  Ассоциативность есть, это и есть определение понятия полугруппа.
[04:22.000 --> 04:25.000]  Но помните, ассоциативность и есть коммутативность.
[04:25.000 --> 04:28.000]  Логично, да?
[04:28.000 --> 04:31.000]  Да, коммутативность никто не обещал.
[04:31.000 --> 04:34.000]  Да, это может быть произведение матрицы.
[04:34.000 --> 04:37.000]  Там скажем.
[04:37.000 --> 04:39.000]  Ну, а какие примеры это?
[04:39.000 --> 04:42.000]  Некоммутативных ассоциативных операций вы знаете.
[04:42.000 --> 04:47.000]  Некоммутативных ассоциативных.
[04:47.000 --> 04:52.000]  Ну, окей, в каждой вершине стоит перестановка, да.
[04:52.000 --> 04:53.000]  Действительно.
[04:53.000 --> 04:56.000]  Вот, окей, ладно.
[04:56.000 --> 04:57.000]  Нет, или там, ладно.
[04:57.000 --> 05:03.000]  В алипиадах примеров бывает в каждой вершине написана строка «посчитайте хэш».
[05:03.000 --> 05:05.000]  А мы не знаем, что это такое.
[05:05.000 --> 05:08.000]  Вот.
[05:08.000 --> 05:11.000]  Увы, после аналогов MAP мы знаем, что такое хэш.
[05:11.000 --> 05:17.000]  Нет, я бы сказал, что мы верим в его существование, да.
[05:17.000 --> 05:20.000]  А что такое вот этот строковый полинарный хэш, мы все-таки не знаем.
[05:20.000 --> 05:22.000]  Ну и неважно, в общем-то.
[05:22.000 --> 05:23.000]  Нам он и не понадобится.
[05:23.000 --> 05:33.000]  Так вот, это вот eval, это вот, собственно, то, что единственная операция, которая будет что-то реально возвращать.
[05:33.000 --> 05:35.000]  Что мы еще хотим делать?
[05:35.000 --> 05:39.000]  Еще мы хотим делать линк.
[05:43.000 --> 05:44.000]  Линк вот так вот делаем.
[05:44.000 --> 05:46.000]  От V и W.
[05:49.000 --> 05:50.000]  Значит, ситуация такая.
[05:50.000 --> 06:00.000]  Значит, здесь есть ограничение, что V и W это не просто вершины, но это оба раза корни своих деревьев.
[06:00.000 --> 06:02.000]  Ну, естественно, различные.
[06:05.000 --> 06:09.000]  То есть у нас вот будет вершина V, на которой что-то вот висит.
[06:12.000 --> 06:15.000]  Там, условно, под дерево какое-то.
[06:15.000 --> 06:20.000]  И W, на которой тоже висит какое-то под дерево.
[06:24.000 --> 06:27.000]  Ну и, собственно, от операции линк требуется только одно.
[06:27.000 --> 06:33.000]  Подвесить W, объявить W ребенком V.
[06:34.000 --> 06:36.000]  То есть вот примерно вот так это и будет выглядеть.
[06:44.000 --> 06:48.000]  То есть, в общем-то, то есть, да, никакие лейплы не меняются.
[06:51.000 --> 06:54.000]  Ну, конечно, результаты эвалов, конечно, принципиально меняются.
[06:54.000 --> 06:55.000]  Обратите внимание, да.
[06:55.000 --> 06:59.000]  Ну, таки так, у вершин вот этого под дерева они не меняются от слова никак.
[06:59.000 --> 07:08.000]  А у этого под дерева к ним всем, ну, к ним всем, так сказать, они все там слева домножаются на label от V.
[07:12.000 --> 07:14.000]  Кстати, на тему умножения слева.
[07:16.000 --> 07:20.000]  За это у нас еще дополнительно отвечает операция update.
[07:23.000 --> 07:26.000]  Update от R.
[07:26.000 --> 07:30.000]  Да, то есть, да, подчеркиваем.
[07:30.000 --> 07:32.000]  А, нет, вру, вру, вру.
[07:32.000 --> 07:34.000]  Не R, а R и X.
[07:36.000 --> 07:43.000]  Значит, R это корень, а X это мистическое значение.
[07:47.000 --> 07:49.000]  Является мистическим значением.
[07:49.000 --> 07:51.000]  Это новое значение label от R?
[07:51.000 --> 07:53.000]  Нет, нет, нет.
[07:53.000 --> 07:55.000]  Тут еще круче.
[07:56.000 --> 08:01.000]  Тут, то есть, да, label от R изменится.
[08:02.000 --> 08:04.000]  Да, вот я и пишу, что оно делает.
[08:04.000 --> 08:10.000]  Так вот, оно делает label R, да, хочется написать функцию it равно, но это будет неправда.
[08:10.000 --> 08:16.000]  Потому что, да, мы просто берем label cork и домножаем его слева на X.
[08:17.000 --> 08:18.000]  Вот так.
[08:18.000 --> 08:21.000]  Да, хочется написать it равно, конечно, но вот.
[08:21.000 --> 08:22.000]  Ой.
[08:26.000 --> 08:28.000]  R равно it.
[08:30.000 --> 08:32.000]  Такую операцию еще не изобрели, кстати.
[08:32.000 --> 08:34.000]  Неоднозначно.
[08:34.000 --> 08:35.000]  Да.
[08:35.000 --> 08:36.000]  Такое.
[08:36.000 --> 08:37.000]  Не надо.
[08:37.000 --> 08:39.000]  Да, да, да.
[08:39.000 --> 08:40.000]  Вот.
[08:40.000 --> 08:41.000]  Вот, собственно, и все.
[08:41.000 --> 08:49.000]  То есть, опять, обратите внимание, то есть, мы просто говорим, что значение всех evals тогда во всех вершинах дерева с cork в R,
[08:49.000 --> 08:52.000]  тогда просто все будут домножены слева на X, по сути.
[08:53.000 --> 08:54.000]  Вот.
[08:54.000 --> 08:56.000]  Больше ничего не поменяется.
[08:58.000 --> 08:59.000]  Вот.
[08:59.000 --> 09:02.000]  Вот у нас вот есть такая мистическая структура.
[09:04.000 --> 09:05.000]  Вот.
[09:07.000 --> 09:08.000]  Вот.
[09:08.000 --> 09:09.000]  Ну, как она работает?
[09:09.000 --> 09:12.000]  Ну, работает она, конечно, предельно просто.
[09:13.000 --> 09:14.000]  То есть, она...
[09:17.000 --> 09:19.000]  Ну, вот, действительно, все деревья вот так хранятся.
[09:19.000 --> 09:22.000]  То есть, у каждой вершины есть parent и практически все.
[09:23.000 --> 09:24.000]  По камере, самые базовые.
[09:24.000 --> 09:26.000]  В первой реализации, то есть, это все.
[09:29.000 --> 09:30.000]  Что?
[09:31.000 --> 09:32.000]  Вот.
[09:32.000 --> 09:34.000]  Ну, понятно, label, да, и label, конечно, да.
[09:35.000 --> 09:37.000]  И, соответственно, можно вот так вычислять.
[09:37.000 --> 09:38.000]  Но с другой стороны, заметим следующее.
[09:39.000 --> 09:41.000]  То есть, у нас структура, конечно, может не все.
[09:41.000 --> 09:45.000]  То есть, в отличие от линката, то есть, у нас подвешивается только корень к корню.
[09:46.000 --> 09:49.000]  То есть, если у вершины появился родитель, то он навсегда.
[09:51.000 --> 09:53.000]  То есть, да, она может долго появиться.
[09:53.000 --> 09:55.000]  То есть, тут как бы она сначала появляется,
[09:55.000 --> 09:58.000]  а потом через некоторое время когда-нибудь у нее появляется родитель.
[09:59.000 --> 10:00.000]  Вот.
[10:00.000 --> 10:02.000]  Но если он уже появился, то он навсегда.
[10:03.000 --> 10:05.000]  Ну, на уровне определения, конечно.
[10:07.000 --> 10:08.000]  Вот.
[10:08.000 --> 10:11.000]  Но внутри себя, конечно, это нам уже дает возможность
[10:11.000 --> 10:15.000]  сделать мистическую операцию, ну, на русском языке, сжатия путей.
[10:18.000 --> 10:21.000]  Потому что, раз уж родители навсегда определены,
[10:21.000 --> 10:25.000]  вот мы думаем, так, вот у меня, допустим, есть вершина В.
[10:25.000 --> 10:29.000]  Чтобы вычислить ее значение, я должен прогуляться по всем вот этим вот вершинам,
[10:29.000 --> 10:34.000]  прям по родителям, и, соответственно, вычислить вот это значение.
[10:35.000 --> 10:39.000]  Но когда-нибудь этот родитель может быть подвешен еще к кому-то.
[10:40.000 --> 10:45.000]  Это будет означать, что нужно все равно прогуляться по этим вершинам, вычислить это значение,
[10:46.000 --> 10:50.000]  но просто потом его домножить еще там на что-то там дальше.
[10:52.000 --> 10:54.000]  Возникает естественная мысль.
[10:57.000 --> 10:58.000]  Ну вот.
[10:58.000 --> 11:02.000]  А нельзя ли, так сказать, просто для вершины В сохранить, что как бы мы,
[11:02.000 --> 11:07.000]  как бы мы не вычисляли ИВАЛ, мы дойдем досюда и наберем там значение какое-то?
[11:09.000 --> 11:11.000]  Ну, то есть сохранить значение.
[11:12.000 --> 11:13.000]  Ну вот.
[11:13.000 --> 11:15.000]  Да, то есть вот какая-то вот такая мысль.
[11:16.000 --> 11:19.000]  И потом, ну, то есть это что-то типа рекурсии с запоминанием, что ли.
[11:20.000 --> 11:21.000]  Вот.
[11:21.000 --> 11:23.000]  Ну, в общем-то, да, идея, в общем, классическая.
[11:24.000 --> 11:25.000]  Вот.
[11:25.000 --> 11:28.000]  И просто приводит нас, ну, тут на всякий случай давайте употребим выражение,
[11:28.000 --> 11:30.000]  которое тут сразу у Тарьянов водится в этом месте.
[11:32.000 --> 11:33.000]  Вот.
[11:33.000 --> 11:36.000]  Это так называемое виртуальное дерево.
[11:36.000 --> 11:37.000]  Значит, смотрите.
[11:37.000 --> 11:41.000]  Просто каждая из этих штук называется дерево.
[11:42.000 --> 11:43.000]  Да, поразительно, да?
[11:44.000 --> 11:46.000]  Но тем не менее, она реально называется дерево.
[11:47.000 --> 11:48.000]  Но это, ну вот.
[11:49.000 --> 11:51.000]  Но, но, но, но.
[11:52.000 --> 12:03.000]  То есть если это дерево, то мы можем вместо дерева хранить виртуальное дерево.
[12:07.000 --> 12:10.000]  Так называемое виртуальное дерево.
[12:13.000 --> 12:16.000]  Значит, аксиоматика у него предлагается следующее.
[12:17.000 --> 12:18.000]  Значит, что это такое?
[12:19.000 --> 12:23.000]  Значит, вот сейчас я просто вот давайте, просто вот возьму, чтобы не перепутать и напишу просто в формальное определение.
[12:24.000 --> 12:25.000]  Значит, что это такое?
[12:25.000 --> 12:26.000]  То есть это тоже дерево.
[12:29.000 --> 12:31.000]  Значит, аксиомы следующее.
[12:32.000 --> 12:33.000]  Аксиома номер раз.
[12:33.000 --> 12:34.000]  Аксиома номер раз.
[12:35.000 --> 12:48.000]  ВТ хранит те же вершины, что ИТ.
[12:52.000 --> 12:53.000]  Вот.
[12:53.000 --> 12:54.000]  Прямо на уровне концепции, да?
[12:55.000 --> 12:56.000]  Значит, еще.
[13:00.000 --> 13:01.000]  Ш, где украинский?
[13:03.000 --> 13:04.000]  Челты.
[13:06.000 --> 13:07.000]  Давай не надо.
[13:08.000 --> 13:09.000]  Не, причем тут краинцы?
[13:10.000 --> 13:11.000]  Это просто такая нотация есть.
[13:12.000 --> 13:13.000]  Ну, как бы вопрос к Тарьяну, я не знаю.
[13:14.000 --> 13:21.000]  Нет, может там, конечно, рядом с ним в этом месте сидел такой, это, американский ученый Эндрю Вячеслав Голбер, конечно.
[13:22.000 --> 13:23.000]  Но что-то я сомневаюсь.
[13:24.000 --> 13:26.000]  Хотя, нет, хотя он мог в принципе там.
[13:27.000 --> 13:29.000]  Альгоритм Голбера Тарьяна же существует.
[13:30.000 --> 13:31.000]  Ну, вот.
[13:32.000 --> 13:33.000]  Машина Голберга.
[13:34.000 --> 13:35.000]  Машина Голберга.
[13:36.000 --> 13:38.000]  А, вот этот вот БМБ там на парковке, да?
[13:39.000 --> 13:40.000]  Так.
[13:41.000 --> 13:42.000]  Куда-то мы не туда пошли.
[13:43.000 --> 13:44.000]  На нашем изучении.
[13:45.000 --> 13:47.000]  Не, ну, что-то мне подскажешь, у него машина есть на Векторе.
[13:48.000 --> 13:50.000]  Как-то в Америке сложно жить без машины.
[13:51.000 --> 13:52.000]  Ну, вот.
[13:53.000 --> 13:54.000]  Ну, я не знаю.
[13:55.000 --> 13:56.000]  Так вот, ладно.
[13:57.000 --> 13:58.000]  Т и ВТ.
[13:58.000 --> 14:00.000]  Даже У, Т и ВТ.
[14:01.000 --> 14:02.000]  Один и тот же корень.
[14:13.000 --> 14:14.000]  Корень Р.
[14:16.000 --> 14:17.000]  Я еще так напишу.
[14:17.000 --> 14:19.000]  С одним и тем же лейблом.
[14:28.000 --> 14:29.000]  Вот.
[14:35.000 --> 14:37.000]  То есть, ну, тут предлагается такая аксиоматика.
[14:38.000 --> 14:39.000]  Ну, тут как-то будет, знаете, это...
[14:40.000 --> 14:42.000]  Как бы Гайден Вёрс строго аксиоматику, строго ей привекался.
[14:43.000 --> 14:44.000]  Потом пришел...
[14:45.000 --> 14:46.000]  Да, у корня, да.
[14:47.000 --> 14:49.000]  То есть, в переводе говоря, то есть, пишем, что это будет называться у нас так.
[14:50.000 --> 14:57.000]  Лейбл Т от Р равен лейбл ВТ.
[14:58.000 --> 14:59.000]  А так вот.
[15:02.000 --> 15:03.000]  Ну, тут удобные такие обозначения.
[15:08.000 --> 15:11.000]  Ну, впрочем, на самом деле, конечно, это уточнение может быть...
[15:12.000 --> 15:13.000]  А, хотя нет, оно...
[15:14.000 --> 15:15.000]  Хотя нет, оно...
[15:16.000 --> 15:17.000]  Хотя где-то оно достаточно излишнее, если честно.
[15:18.000 --> 15:19.000]  По одной простой причине.
[15:20.000 --> 15:21.000]  Что если корень Р, ну, вот.
[15:22.000 --> 15:25.000]  Что дело в том, что, на самом деле, для любой вершины В...
[15:28.000 --> 15:29.000]  Верно.
[15:30.000 --> 15:31.000]  Следующая штука.
[15:32.000 --> 15:33.000]  Вот я так напишу.
[15:34.000 --> 15:35.000]  Вот.
[15:36.000 --> 15:37.000]  Так вот.
[15:38.000 --> 15:39.000]  Если вы вычислите эвал...
[15:40.000 --> 15:41.000]  Давайте я вот так напишу.
[15:42.000 --> 15:45.000]  Эвал с индексом Т.
[15:46.000 --> 15:49.000]  То есть, в дереве Т, если мы вот этот вот эвал честно вычислим.
[15:50.000 --> 15:51.000]  То он равен...
[15:52.000 --> 15:56.000]  Эвалу от вершины В вычислен в уже виртуальном деле.
[15:56.000 --> 15:57.000]  В виртуальном деле.
[16:03.000 --> 16:05.000]  Вот такая вот базовая аксиоматика.
[16:10.000 --> 16:11.000]  Вот.
[16:12.000 --> 16:14.000]  Ну, то есть, мы тут наложили на себя некоторые ограничения.
[16:15.000 --> 16:16.000]  То есть, мы хотим работать в некотором виртуальном дереве.
[16:17.000 --> 16:19.000]  То есть, как хранить дерево не в таком виде, а в каком-то другом.
[16:20.000 --> 16:23.000]  В котором мы могли бы что-то модифицировать, за счет этого получать профит.
[16:23.000 --> 16:27.000]  А не вычислять этот эвал просто от расстояния от вершины до корня.
[16:28.000 --> 16:29.000]  Вот.
[16:30.000 --> 16:31.000]  Соответственно.
[16:32.000 --> 16:36.000]  Поэтому иногда хотим наложить на себя какие-то аккуратные ограничения, чтобы что-то гарантили.
[16:38.000 --> 16:40.000]  Ну, это вот такой самый простой вид.
[16:41.000 --> 16:44.000]  То есть, на самом деле, у нас сегодня от каких-то аксиомат будем отказываться.
[16:45.000 --> 16:46.000]  Другие, наоборот, вводить.
[16:47.000 --> 16:48.000]  То есть, там это веселье будет.
[16:50.000 --> 16:51.000]  Да, конечно.
[16:51.000 --> 16:52.000]  Ну, Тарьян это успешно делает.
[16:53.000 --> 16:55.000]  Как бы выкинем И, врубим там И4.
[16:56.000 --> 16:57.000]  А, кстати, это римские цифры, на самом деле.
[16:58.000 --> 16:59.000]  Вот.
[17:00.000 --> 17:01.000]  Правда, римские цифры забавны?
[17:02.000 --> 17:03.000]  Нет.
[17:04.000 --> 17:06.000]  Нет, только как Тарьян написал, я так и воспроизвел.
[17:07.000 --> 17:08.000]  Только на русский перевел.
[17:09.000 --> 17:10.000]  Вот.
[17:11.000 --> 17:12.000]  Так вот.
[17:13.000 --> 17:14.000]  Значит, чем приятно такое дерево?
[17:15.000 --> 17:18.000]  В этом дереве можно оценивать.
[17:18.000 --> 17:21.000]  В этом дереве можно ввести...
[17:22.000 --> 17:27.000]  То есть, в таком виртуальном дереве можно ввести такую внутреннюю функцию.
[17:28.000 --> 17:29.000]  Такую подкапотную.
[17:30.000 --> 17:31.000]  Как компресс.
[17:34.000 --> 17:35.000]  Это виртуальном дереве.
[17:36.000 --> 17:37.000]  Да.
[17:39.000 --> 17:40.000]  Вот.
[17:42.000 --> 17:43.000]  Ну, потому что...
[17:44.000 --> 17:45.000]  Заметим теперь следующее.
[17:45.000 --> 17:46.000]  Вот.
[17:47.000 --> 17:49.000]  Рассмотрим какую-нибудь вершину В.
[17:50.000 --> 17:51.000]  Вот опять, да?
[17:52.000 --> 17:53.000]  Вот.
[17:54.000 --> 17:55.000]  Ну, вот.
[17:56.000 --> 17:58.000]  Вот рассмотрим, рассмотрим, рассмотрим, рассмотрим.
[17:59.000 --> 18:00.000]  Вот она дошла до корня, да?
[18:01.000 --> 18:02.000]  Тут тоже.
[18:03.000 --> 18:04.000]  Равно.
[18:05.000 --> 18:06.000]  Это В0, В1, В2.
[18:07.000 --> 18:08.000]  Вот.
[18:09.000 --> 18:10.000]  В3 и так далее.
[18:11.000 --> 18:12.000]  Ну, и тут ВК равно В.
[18:13.000 --> 18:14.000]  И самое главное, что у них есть лейблы.
[18:16.000 --> 18:17.000]  Я эти лейблы так и помечу.
[18:18.000 --> 18:23.000]  L0, L1, L2, L3 и так далее.
[18:24.000 --> 18:25.000]  LK.
[18:26.000 --> 18:27.000]  Вот, понятно, да?
[18:30.000 --> 18:31.000]  Ну, вот.
[18:32.000 --> 18:38.000]  Так вот, действительно возникает интересная мысль, что при вычислении...
[18:38.000 --> 18:46.000]  То есть, что, на самом деле, раз мы все равно будем прибираться по всем этим вершинам до корня и вычитать эти произведения,
[18:47.000 --> 18:49.000]  а не стоит ли их один раз пробежаться и предподсчитать?
[18:50.000 --> 18:52.000]  И в результате получается следующая штука.
[18:53.000 --> 18:55.000]  Такая классическая, СММная.
[18:56.000 --> 18:57.000]  То есть, смотрите.
[18:58.000 --> 18:59.000]  То есть, мы берем те же самые вершины.
[19:00.000 --> 19:01.000]  В1, В2.
[19:02.000 --> 19:03.000]  В2, я сказал.
[19:04.000 --> 19:05.000]  Так.
[19:06.000 --> 19:07.000]  В3.
[19:08.000 --> 19:09.000]  Еще вот ВК.
[19:12.000 --> 19:13.000]  Вот.
[19:14.000 --> 19:17.000]  И теперь мы говорим, что они все подвешены...
[19:26.000 --> 19:27.000]  Вот как-то вот так.
[19:28.000 --> 19:29.000]  Все подвешены к корням.
[19:30.000 --> 19:32.000]  И меточки у них теперь новые.
[19:34.000 --> 19:35.000]  Какие меточки?
[19:36.000 --> 19:37.000]  Ну, легко догадаться.
[19:38.000 --> 19:42.000]  А вот дальше будет интереснее.
[19:43.000 --> 19:45.000]  Значит, у В1 она тоже не меняется.
[19:48.000 --> 19:51.000]  А вот у второй вершины она меняется.
[19:57.000 --> 19:58.000]  И у третьей меняется.
[19:59.000 --> 20:00.000]  А почему не L0 на L1?
[20:00.000 --> 20:01.000]  L0 на L1?
[20:07.000 --> 20:08.000]  L0 на L1?
[20:09.000 --> 20:10.000]  Да.
[20:11.000 --> 20:12.000]  А вот почему. Смотрите.
[20:13.000 --> 20:16.000]  Дело в том, что когда вы будете вычислять значения от В1,
[20:17.000 --> 20:19.000]  вы рассмотрите метку здесь,
[20:20.000 --> 20:21.000]  рассмотрите метку здесь и перемножите их.
[20:22.000 --> 20:26.000]  Если вы напишете L0 на L1, то получится L0 на 2 раза.
[20:27.000 --> 20:29.000]  Тут вообще удобно очень понимать,
[20:30.000 --> 20:33.000]  что чиселка написана на ребре, исходящем из вершины.
[20:34.000 --> 20:36.000]  Правда, у корня она тоже есть.
[20:37.000 --> 20:39.000]  Но тут получается, в общем, полуинтервал.
[20:40.000 --> 20:47.000]  Ну, и здесь у нас остается L1, L2, L3, Lk.
[20:49.000 --> 20:51.000]  Вот такая вот красота у нас.
[20:52.000 --> 20:53.000]  Вот.
[20:56.000 --> 20:57.000]  Вот.
[20:58.000 --> 20:59.000]  Ну и действительно легко убедиться,
[21:00.000 --> 21:03.000]  что при введении таких меток действительно вот эти все условия сохраняются.
[21:04.000 --> 21:06.000]  Ну, это условие очевидно, это тоже.
[21:08.000 --> 21:10.000]  Ну, вот. Ну, самое нетривиальное вот это.
[21:11.000 --> 21:12.000]  Но здесь действительно суть в том,
[21:13.000 --> 21:16.000]  что если у нас там как-то эвал попал в какую-нибудь там вершину,
[21:17.000 --> 21:18.000]  допустим, V3,
[21:18.000 --> 21:21.000]  то дальше он в ряд, записывая справа налево,
[21:22.000 --> 21:27.000]  должен записать L3, L2, L1, прежде чем попасть в L0.
[21:28.000 --> 21:30.000]  А так мы теперь просто туда попадаем и записываем L1, L2, L3,
[21:31.000 --> 21:32.000]  правда, в виде их произведения.
[21:33.000 --> 21:35.000]  Вот тут мы явно пользуемся, конечно, ассоциативностью.
[21:38.000 --> 21:39.000]  Чего?
[21:39.000 --> 21:48.000]  Ну, как бы при любом эвале мы на L0 все равно тут ручками будем домножать всегда.
[21:50.000 --> 21:51.000]  Вот.
[21:52.000 --> 21:53.000]  Вот. Вот такой компресс.
[21:54.000 --> 21:56.000]  То есть в принципе это можно его код написать какой-нибудь рекурсивный,
[21:57.000 --> 21:58.000]  но необходимости...
[22:03.000 --> 22:04.000]  Значит, смотрите.
[22:05.000 --> 22:06.000]  Вот давайте себе представим,
[22:06.000 --> 22:07.000]  как мы вычисляем...
[22:08.000 --> 22:10.000]  как мы вычисляем эвал от V1?
[22:11.000 --> 22:15.000]  Он будет равен L1, там L0 умножить на L1, правда?
[22:16.000 --> 22:18.000]  То есть когда мы... идея в том, что когда мы пересоединяем,
[22:19.000 --> 22:22.000]  мы будем искать эвал от V0, который в старом деле...
[22:23.000 --> 22:24.000]  Нет, ну от V скорее.
[22:25.000 --> 22:26.000]  Не-не-не, я не...
[22:27.000 --> 22:28.000]  Ладно.
[22:29.000 --> 22:30.000]  Ну нет, мы как бы все равно будем вычислять делать...
[22:31.000 --> 22:32.000]  эвал будет делать абсолютно то же самое.
[22:33.000 --> 22:35.000]  Только родители просто будут немножко другие.
[22:36.000 --> 22:38.000]  То есть как всегда, смысл ребра любого, это...
[22:39.000 --> 22:41.000]  говорим, что если там в дереве T пробежаться по ребрам,
[22:42.000 --> 22:44.000]  то вы рано или поздно добежите вот до этой вершины,
[22:45.000 --> 22:47.000]  и причем более того, прежде чем вы до нее дойдете,
[22:48.000 --> 22:49.000]  у вас наберется вот такая чиселка.
[22:53.000 --> 22:54.000]  Вот.
[22:55.000 --> 22:56.000]  То есть...
[22:57.000 --> 22:58.000]  Еще раз, смысл, почему это L1?
[22:59.000 --> 23:00.000]  То есть V1 или L1?
[23:00.000 --> 23:01.000]  А смысл очень простой.
[23:02.000 --> 23:03.000]  Ну, дело в том, что...
[23:04.000 --> 23:07.000]  как бы, смотрите, эвал от V1, здесь L0, ведь L1.
[23:09.000 --> 23:10.000]  Вот.
[23:11.000 --> 23:12.000]  И здесь он тоже должен остаться тем же.
[23:13.000 --> 23:14.000]  Вот.
[23:15.000 --> 23:16.000]  Но если мы тут заменим L1 на L0-L1,
[23:17.000 --> 23:19.000]  то получится тогда вот эвал в виртуальном дереве,
[23:20.000 --> 23:22.000]  получится L0 на L1, и еще на L0 замножить.
[23:23.000 --> 23:24.000]  А это немножко не то.
[23:25.000 --> 23:26.000]  Ну, конечно, слева.
[23:26.000 --> 23:29.000]  А если мы не делали бы так, что нам приходилось по-настоящему замножать,
[23:30.000 --> 23:31.000]  а просто везде бы L0 добавить?
[23:32.000 --> 23:33.000]  Эвал-то же самый.
[23:34.000 --> 23:35.000]  Нет, ну тогда это надо было бы...
[23:36.000 --> 23:37.000]  О, все, все.
[23:38.000 --> 23:39.000]  Я понял.
[23:40.000 --> 23:42.000]  Нет, ну тут можно было бы замножить всех на L0
[23:43.000 --> 23:44.000]  и объявить, что у них родителей нет, но это было бы неправда.
[23:45.000 --> 23:46.000]  Я понял, да.
[23:47.000 --> 23:48.000]  Так что вот.
[23:49.000 --> 23:50.000]  Вот такая красота.
[23:51.000 --> 23:52.000]  То есть вот такой компресс.
[23:53.000 --> 23:54.000]  То есть вот, в принципе, это более известен,
[23:54.000 --> 23:57.000]  то есть это более известен как эвристика сжатия путей.
[23:58.000 --> 23:59.000]  Ну, вот такие в SNM.
[24:00.000 --> 24:02.000]  Ну, правда, SNM, как видим, это не совсем это.
[24:03.000 --> 24:04.000]  Ну, почти.
[24:05.000 --> 24:06.000]  Но по большому счету нам там...
[24:07.000 --> 24:08.000]  То есть на самом деле SNM это такой,
[24:09.000 --> 24:11.000]  может быть, упрощенный частный случай этого.
[24:12.000 --> 24:16.000]  Ну, потому что там у нас единственное заключается суть в том,
[24:17.000 --> 24:18.000]  чтобы когда мы подвешиваем,
[24:19.000 --> 24:20.000]  то есть нам нужно было просто,
[24:21.000 --> 24:22.000]  скажем, в каждой вершине стоит там фиксированное число,
[24:23.000 --> 24:24.000]  нам очень хочется там
[24:25.000 --> 24:29.000]  выполнять какую-то операцию в духе A и B равно A.
[24:30.000 --> 24:31.000]  Соответственно.
[24:32.000 --> 24:33.000]  И потом их там соответственно сравнивать.
[24:34.000 --> 24:35.000]  Ну, то есть по сути просто выяснять, кто корень.
[24:36.000 --> 24:37.000]  Причем нам, в общем-то, по барабану на самом деле
[24:38.000 --> 24:39.000]  кого куда подвешивать.
[24:40.000 --> 24:41.000]  Вот.
[24:42.000 --> 24:43.000]  Поэтому на самом деле, то есть SNM это
[24:44.000 --> 24:45.000]  на самом деле просто частный случай этой штуки.
[24:46.000 --> 24:47.000]  Вот.
[24:48.000 --> 24:49.000]  Ну, в общем, ладно, отдельно потом можем обсудить что-то такое.
[24:50.000 --> 24:51.000]  Что такое SNM.
[24:52.000 --> 24:53.000]  Вот.
[24:54.000 --> 24:55.000]  Никогда не писал.
[24:56.000 --> 24:57.000]  Ну, мало.
[24:58.000 --> 24:59.000]  Всякое бывает.
[25:00.000 --> 25:01.000]  Может вы это никогда не писали SNM,
[25:02.000 --> 25:03.000]  но являетесь богом DSU, мало ли.
[25:04.000 --> 25:09.000]  Ну, что такое DSG, не знаю уже я.
[25:10.000 --> 25:13.000]  Ну, может быть.
[25:14.000 --> 25:15.000]  Вот.
[25:16.000 --> 25:17.000]  Так.
[25:18.000 --> 25:19.000]  Так что оказывается, что если вы,
[25:20.000 --> 25:21.000]  ну, то есть крайне логично,
[25:22.000 --> 25:23.000]  то есть просто уже
[25:24.000 --> 25:25.000]  хотя бы и вристика сжатия путей.
[25:26.000 --> 25:27.000]  Вот.
[25:28.000 --> 25:29.000]  Но оказывается, что она, в принципе,
[25:30.000 --> 25:31.000]  сокращает работу достаточно серьезно.
[25:32.000 --> 25:34.000]  Значит, смотрите.
[25:35.000 --> 25:37.000]  Значит, а именно следующее.
[25:38.000 --> 25:40.000]  Значит, есть мистическая теорема.
[25:41.000 --> 25:42.000]  Мы ее пока проанонсируем.
[25:43.000 --> 25:46.000]  А успеем ли мы сегодня хоть что-то доказать из этого или нет,
[25:47.000 --> 25:48.000]  я пока не знаю.
[25:49.000 --> 25:50.000]  Значит, мистическая
[25:50.000 --> 25:51.000]  значит, мистическая.
[25:52.000 --> 25:53.000]  Ну, значит, теоремы тут,
[25:54.000 --> 25:56.000]  значит, все работают следующим образом.
[25:57.000 --> 25:59.000]  Значит, мы представим себе,
[26:00.000 --> 26:02.000]  что у нас есть n вершин
[26:05.000 --> 26:09.000]  и, внимание, m, вот именно сжатий.
[26:11.000 --> 26:12.000]  Вот именно сжатий.
[26:13.000 --> 26:14.000]  Не путать с количеством операций.
[26:15.000 --> 26:18.000]  Ведь обратите внимание, что в такой реализации,
[26:18.000 --> 26:22.000]  наверное, эвал будет предназумевать внутри себя сжатие.
[26:23.000 --> 26:24.000]  Правда?
[26:25.000 --> 26:26.000]  Понимаете это?
[26:27.000 --> 26:28.000]  Ну да.
[26:29.000 --> 26:30.000]  То есть базовая реализация такая.
[26:31.000 --> 26:32.000]  Мы храним вот такое виртуальное дерево
[26:33.000 --> 26:35.000]  и внутри эвала всегда выживаем сжатие пути.
[26:36.000 --> 26:37.000]  Вот.
[26:38.000 --> 26:39.000]  То есть вот такое вот сжатие вызываем.
[26:40.000 --> 26:41.000]  Ну, естественно, мы его можем спокойно сделать
[26:42.000 --> 26:43.000]  за о длины пути.
[26:44.000 --> 26:45.000]  Ну, тут я думаю понятно.
[26:45.000 --> 26:46.000]  Вот.
[26:47.000 --> 26:48.000]  Значит, m сжатий.
[26:50.000 --> 26:51.000]  Так вот.
[26:52.000 --> 26:53.000]  Значит, n вершин, m сжатий.
[27:02.000 --> 27:03.000]  Зачем?
[27:04.000 --> 27:05.000]  Эвал должен возвращать вот это значение.
[27:06.000 --> 27:07.000]  Это все, что он должен делать.
[27:07.000 --> 27:08.000]  Нет.
[27:13.000 --> 27:15.000]  Ну, так в виртуальном дереве мы его переписываем.
[27:20.000 --> 27:21.000]  Нет.
[27:22.000 --> 27:23.000]  Нет.
[27:24.000 --> 27:26.000]  А что с точки зрения кода?
[27:27.000 --> 27:28.000]  У вас в каждой вершине хранится parent.
[27:29.000 --> 27:33.000]  И мы говорим, что если у вершины, значит, если у вершины,
[27:34.000 --> 27:36.000]  ну, если в вершины нет родителя, то ничего не меняется.
[27:37.000 --> 27:40.000]  Если есть родитель, но нет дедушки, то тоже ничего не меняется.
[27:41.000 --> 27:44.000]  А в противном случае мы запускаемся рекурсивно от родителя.
[27:45.000 --> 27:47.000]  И после этого присваиваем себе...
[27:48.000 --> 27:49.000]  Берем все parent родители.
[27:50.000 --> 27:51.000]  Нет.
[27:52.000 --> 27:53.000]  Да, нет.
[27:54.000 --> 27:55.000]  Ну, не все, у него один родитель.
[27:56.000 --> 27:57.000]  То есть берем тупо parent родителя, а в качестве лейбла
[27:58.000 --> 27:59.000]  себе пишем то, что у родителей и домножаем на себя.
[28:00.000 --> 28:01.000]  Все.
[28:02.000 --> 28:03.000]  Вот.
[28:04.000 --> 28:05.000]  Да.
[28:05.000 --> 28:06.000]  Такая.
[28:07.000 --> 28:08.000]  Достаточно классическая.
[28:09.000 --> 28:10.000]  Так вот.
[28:11.000 --> 28:12.000]  Мистическая терема.
[28:13.000 --> 28:16.000]  Значит, мистическая терема номер раз.
[28:17.000 --> 28:20.000]  Значит, суммарная длина.
[28:21.000 --> 28:23.000]  У нас же именно длина интересует.
[28:24.000 --> 28:26.000]  Суммарная длина.
[28:27.000 --> 28:31.000]  Значит, m сжатий.
[28:31.000 --> 28:32.000]  Вот я даже так пишу.
[28:33.000 --> 28:35.000]  На n вершинном лесе.
[28:36.000 --> 28:37.000]  Что сжатием считается?
[28:38.000 --> 28:39.000]  Какой подъем?
[28:40.000 --> 28:43.000]  Сжатием считается вызов функции компресс от какой-то вершины.
[28:44.000 --> 28:47.000]  Да, то есть, например, компресс, конечно, в eval.link.update,
[28:48.000 --> 28:50.000]  то есть, в явном виде мы компрессы можем не вызывать,
[28:51.000 --> 28:53.000]  но eval вызывает компресс.
[28:54.000 --> 28:56.000]  И кто еще вызывает компресс?
[28:56.000 --> 28:57.000]  Eval вызывает компресс.
[28:58.000 --> 29:00.000]  И кто еще вызывает компресс?
[29:01.000 --> 29:03.000]  А, собственно, больше никто.
[29:04.000 --> 29:05.000]  Вот.
[29:06.000 --> 29:10.000]  Но мы можем просто предположить, что мы просто вызываем...
[29:11.000 --> 29:15.000]  Иногда, то есть, представим себе, что у нас такая структура называется link-compress.
[29:16.000 --> 29:19.000]  То есть, мы иногда делаем линки, иногда говорим вершину,
[29:20.000 --> 29:21.000]  ой, давай сделай мне компресс.
[29:22.000 --> 29:24.000]  И делаем вот ровно вот это.
[29:25.000 --> 29:29.000]  Так вот, суммарная длина m сжатий на n-ом весе.
[29:30.000 --> 29:33.000]  Что значит длина сжатия, подождите, мы говорим, что сжатие это будет компресс.
[29:34.000 --> 29:39.000]  Потому что, да, вот, ну, например, здесь сжатие, ну, будет то ли k, то ли скорее k плюс 1.
[29:41.000 --> 29:44.000]  Потому что вот к этому сжатии вот у нас в данном случае поучаствовала k плюс 1 вершина.
[29:45.000 --> 29:50.000]  То есть, за длину сжатия мы будем называть длину до корня в момент вызова.
[29:51.000 --> 29:52.000]  Да.
[29:53.000 --> 29:54.000]  Ну да.
[29:55.000 --> 29:58.000]  Ну, заметим, что, по сути, это, собственно, ровно там...
[29:59.000 --> 30:00.000]  Ну, вот.
[30:01.000 --> 30:02.000]  Так же классика такая, да.
[30:03.000 --> 30:06.000]  Так вот, суммарная длина m сжатий на n-ом весе.
[30:08.000 --> 30:11.000]  Лесе не превосходит чего?
[30:11.000 --> 30:12.000]  Ну...
[30:21.000 --> 30:23.000]  Нет, никакие ребра убиваться не будут.
[30:24.000 --> 30:26.000]  Они будут перевешиваться.
[30:27.000 --> 30:28.000]  Поэтому это...
[30:29.000 --> 30:30.000]  Поэтому убить...
[30:31.000 --> 30:38.000]  Нет, тут, понимаете, тут такая подлянка такая, что очень хочется мыслить в терминах, что это все работает за o от m.
[30:38.000 --> 30:40.000]  Там n плюс m, наверное, да.
[30:41.000 --> 30:42.000]  Потому что...
[30:42.000 --> 30:49.000]  Ну и действительно, на самом деле, заметим, что если вы сначала сделаете все линки, прям все, действительно, сделаете прям единое дерево на n-вершин,
[30:49.000 --> 30:53.000]  а потом будете делать компрессы, то это суммарно реально за n плюс m будет работать.
[30:54.000 --> 30:56.000]  Да, но иногда, к сожалению, это не так.
[30:56.000 --> 31:02.000]  То есть, мы иногда хотим вычитать валы до того, как, собственно, все на все повесится.
[31:03.000 --> 31:04.000]  Ну вот.
[31:05.000 --> 31:08.000]  Ну, по-разному, на самом деле.
[31:08.000 --> 31:09.000]  Ну вот.
[31:09.000 --> 31:12.000]  Ну, в первую очередь, оказывается, что это от m на самом деле может серьезно зависеть.
[31:13.000 --> 31:16.000]  Значит, ну здесь сейчас будет кое-что достать.
[31:17.000 --> 31:18.000]  Ну, тут разные варианты.
[31:18.000 --> 31:31.000]  Вот я, значит, убойная теорема говорит следующее, что тут написано m плюс n умножить на максимум из единицы.
[31:31.000 --> 31:50.000]  Значит, дальше, логарифом двоичный n квадрат делить на m плюс n делить на логарифом двоичный 2m плюс n поделить на m.
[31:51.000 --> 31:53.000]  Так, сколько скобочек я тут должен закрыть?
[31:54.000 --> 31:55.000]  Нет.
[31:56.000 --> 32:01.000]  Логарифом двоичный с скобочкой 2 на m плюс n делить на m?
[32:02.000 --> 32:03.000]  Да.
[32:04.000 --> 32:07.000]  То есть, это один логариф по основанию другого?
[32:08.000 --> 32:09.000]  Ну, на самом деле, да.
[32:10.000 --> 32:15.000]  Более того, кто-то вообще предложит, что давайте, в этом месте вообще не заморачиваемся.
[32:16.000 --> 32:18.000]  Давайте, там Паша Маврин, скажем, вообще предлагает.
[32:19.000 --> 32:22.000]  Давайте для удобства считать, что m у нас где-то между n и n квадратом.
[32:22.000 --> 32:23.000]  Ну, давайте вообще смотреть.
[32:24.000 --> 32:26.000]  Какие тут крайние случаи вообще?
[32:27.000 --> 32:28.000]  Ну, m.
[32:29.000 --> 32:39.000]  Ну, во-первых, если m, допустим, меньше либо равно n, то вот это вот все превращается в n лог n банально.
[32:40.000 --> 32:41.000]  Логично, да?
[32:42.000 --> 32:43.000]  Нет.
[32:44.000 --> 32:46.000]  Почему мы это делаем?
[32:47.000 --> 32:48.000]  Ну, давайте внимательно.
[32:49.000 --> 32:51.000]  Ну, давайте внимательно.
[32:52.000 --> 32:53.000]  Смотрите, вот m плюс m.
[32:54.000 --> 32:55.000]  Это там не более чем 2n.
[32:56.000 --> 32:57.000]  Логарифом.
[32:58.000 --> 32:59.000]  Значит, смотрим тут.
[33:00.000 --> 33:01.000]  n квадрат поделить на 2n.
[33:02.000 --> 33:03.000]  Это n.
[33:04.000 --> 33:05.000]  Ну, n пополам.
[33:06.000 --> 33:08.000]  А в знаменателе получается, ну, что-то константа какая-то, короче.
[33:09.000 --> 33:10.000]  Вот.
[33:11.000 --> 33:13.000]  Ну, в худшем случае 4, да.
[33:14.000 --> 33:15.000]  Ну, не суть.
[33:16.000 --> 33:17.000]  Вот.
[33:18.000 --> 33:19.000]  Так как у нас все равно ошка, то есть получается вот n лог n.
[33:20.000 --> 33:23.000]  То есть, в принципе, оказывается, что можно считать, что учетная стоимость каждой операции логарифом.
[33:24.000 --> 33:25.000]  Вот.
[33:26.000 --> 33:28.000]  Ну, в принципе, это можно будет даже достаточно просто доказать.
[33:29.000 --> 33:30.000]  Ну, в свое время мы их даже и сделаем.
[33:31.000 --> 33:32.000]  Вот.
[33:33.000 --> 33:37.000]  Есть другой, значит, ну вот, другой крайний случай.
[33:38.000 --> 33:40.000]  m равно n квадрат.
[33:41.000 --> 33:42.000]  А почему это крайний случай?
[33:43.000 --> 33:44.000]  Можно это объяснить?
[33:45.000 --> 33:47.000]  Ну, то есть, почему может быть больше, чем n квадрат?
[33:48.000 --> 33:55.000]  То есть, будет сжато все после n квадрат сжатки, как я, наверное, понимаю.
[33:56.000 --> 33:58.000]  Ну, там не совсем.
[33:59.000 --> 34:01.000]  Нет, это не обязательно будет сжато именно все.
[34:02.000 --> 34:03.000]  То есть, вопрос такой.
[34:04.000 --> 34:06.000]  Сколько сжатей нужно провести, чтобы сжать все дерево?
[34:07.000 --> 34:09.000]  То есть, у нас получилось солнышко, кажется, называется, да?
[34:10.000 --> 34:11.000]  Нет, тут это не...
[34:11.000 --> 34:14.000]  То есть, можно сжать каждый раз, чтобы тоже вершина где-нибудь была.
[34:15.000 --> 34:16.000]  Да, может быть такое.
[34:17.000 --> 34:23.000]  Но при этом, если ты один раз ее сжал и потом попросил тут же второй, то второе сжатие будет за вот единицы.
[34:24.000 --> 34:26.000]  Поэтому там включится амортизация.
[34:27.000 --> 34:28.000]  То есть, как бы этих единиц...
[34:29.000 --> 34:38.000]  То есть, там будет либо они все сожмутся в одно дерево, либо их будет так много, что там этих сжатий одинаково, что там будет очень много единичек, и в среднем получится, на самом деле...
[34:38.000 --> 34:41.000]  У тебя имеют предпосылы к тому, чтобы сказать, что m равно n квадрат?
[34:42.000 --> 34:45.000]  Нет, ну просто представь себе, что у нас очень много запросов.
[34:46.000 --> 34:47.000]  Вот так.
[34:48.000 --> 34:49.000]  Ну какова есть такая?
[34:50.000 --> 34:51.000]  Ну вот, то есть такое.
[34:52.000 --> 34:53.000]  Ну вот, действительно, если мы подставим n квадрат...
[34:54.000 --> 34:55.000]  Нет, почему вот именно n квадрат?
[34:56.000 --> 35:03.000]  То есть, если в эту формулу подставить, то можно заметить, что тогда вот эта штука вообще превращается в от m плюс n, на самом деле.
[35:04.000 --> 35:05.000]  Какая?
[35:06.000 --> 35:07.000]  Вот эта вся.
[35:08.000 --> 35:13.000]  Если квадрат или больше, то как бы здесь вот эта штука превращается в что-то меньше единиц.
[35:14.000 --> 35:15.000]  Вот.
[35:16.000 --> 35:17.000]  Ну а здесь, а это растет.
[35:18.000 --> 35:22.000]  Нет, а на самом деле тут от m плюс n начинается даже раньше, обратите внимание.
[35:23.000 --> 35:27.000]  То есть, в такой формулировке это надо подогнать такое m, чтобы вот это стало равно вот этому.
[35:28.000 --> 35:30.000]  И на самом деле легко убедиться, что как бы...
[35:31.000 --> 35:35.000]  Ну есть понятно, что m должно быть больше n, поэтому симпатически m плюс n то же самое, что m.
[35:35.000 --> 35:40.000]  И оказывается удобно считать, что m это просто будет n в степени полтора.
[35:43.000 --> 35:46.000]  Да, то есть вот на самом деле тут вот такая заява.
[35:47.000 --> 35:48.000]  То есть, начиная вот где-то с...
[35:49.000 --> 35:55.000]  Получается m больше либо равно n в степени полтора, то есть это получается m плюс n просто.
[35:56.000 --> 36:04.000]  Нет, ну что касается, если брать именно квадрат, то на самом деле если вы заранее знаете, что у вас квадрат запросов будет, да,
[36:05.000 --> 36:08.000]  то это означает, что вы там лишний квадрат действия можете делать.
[36:09.000 --> 36:14.000]  А на самом деле как бы сделать это так, чтобы у вас было n квадрат плюс m действия очень просто.
[36:15.000 --> 36:21.000]  Просто вы говорите следующее, что каждый раз, когда вы подвешиваете корень к корню, вы делаете компресс у всех его потомков.
[36:29.000 --> 36:33.000]  Ну, смотрите, вот вы подвесили, вы говорите там подвесили вершину w вершину.
[36:33.000 --> 36:40.000]  Ну, по сути да, хотя на самом деле, в чем каждый компресс будет работать за вот единицы,
[36:41.000 --> 36:50.000]  потому что очевидно, что при такой штуке у нас всегда будет, то есть на самом деле все деревья будут выглядеть вот таким вот нехитрым образом.
[36:55.000 --> 36:57.000]  Нет, ну вот...
[36:58.000 --> 36:59.000]  Да, конечно.
[37:00.000 --> 37:10.000]  А изначально у вас есть n деревьев по одной вершине, естественно, то да, то есть просто храните набор звездочек и, собственно, переподвешиваете.
[37:11.000 --> 37:21.000]  Хотя это уже практически то же самое, как для каждой вершины храните ответ, храните кто там корень, если кто-то кому-то подвесился, значит к этим вершинам вы там добавляете лейбл от w.
[37:22.000 --> 37:31.000]  Вот. И в принципе это, если это совсем в тупую делать, то есть обратите внимание, мы сейчас тут не заморачиваемся на тему того, как тут там какой-то там меньше к большему подвесить и так далее,
[37:32.000 --> 37:35.000]  то получается за n квадрат, даже так уже за n квадрат делается.
[37:36.000 --> 37:38.000]  Но тут вот теорема чуть более сильная.
[37:39.000 --> 37:40.000]  Вот.
[37:41.000 --> 37:42.000]  Но это первая теорема.
[37:43.000 --> 37:52.000]  Но оказывается, что она работает, то есть у нас на подвешивании никаких ограничений нет, то есть подвешивается что угодно к чему угодно.
[37:55.000 --> 37:56.000]  Вот.
[37:57.000 --> 38:00.000]  Но на самом деле бывают более красивые случаи.
[38:01.000 --> 38:08.000]  Бывают ситуации, когда получаемые деревья, когда дерево t сбалансировано.
[38:12.000 --> 38:13.000]  На самом деле да.
[38:14.000 --> 38:17.000]  Потому что на самом деле я еще не сказал определение слова сбалансировано.
[38:18.000 --> 38:19.000]  Вот.
[38:20.000 --> 38:21.000]  Значит смотрите.
[38:22.000 --> 38:23.000]  Определение.
[38:24.000 --> 38:25.000]  Так.
[38:26.000 --> 38:32.000]  Ну во-первых, определение даже не сбалансированности, а введем такое понятие, как пусть h от v,
[38:33.000 --> 38:37.000]  такое равное h вотvals индексом ti от v, а вот так напишем.
[38:40.000 --> 38:43.000]  Значит оно нас будет интересовать именно в дереве t.
[38:44.000 --> 38:52.500]  Это, значит максимальная, максимальная Analogity specia,
[38:53.000 --> 38:54.000]  Colin area.
[38:55.000 --> 38:57.000] mericicka Fredericka.
[38:59.000 --> 39:00.000]  В applicable conditions,
[39:00.000 --> 39:18.000]  максимальное расстояние от v до какого-то потомка v.
[39:30.000 --> 39:36.000]  Да, максимальная глубина поддирала.
[39:36.000 --> 39:41.000]  На самом деле в SNM это называется ранг.
[39:41.000 --> 39:49.000]  Потому что в ранговой евристики вы вычисляете ровно вот это.
[39:49.000 --> 39:54.000]  Ну да, вы ее можете через size записать.
[39:54.000 --> 40:00.000]  Но на самом деле тут парадокс в том, что можно считать через это, можно считать через size,
[40:00.000 --> 40:04.000]  и анализ будет примерно один и тот же.
[40:04.000 --> 40:10.000]  Но тут предлагается ввести такое h, то есть такое максимальное расстояние.
[40:10.000 --> 40:19.000]  Так вот, теперь определение, важное определение.
[40:19.000 --> 40:22.000]  Как бы его написать-то так?
[40:22.000 --> 40:26.000]  Дерево t, обратите внимание, мы говорим сейчас именно о дереве t.
[40:26.000 --> 40:30.000]  Про виртуальные деревья мы сейчас не говорим от слова ничего.
[40:30.000 --> 40:49.000]  Так вот, дерево t сбалансировано, вот, значит сбалансировано.
[40:49.000 --> 41:04.000]  Если существуют такие константы, значит a больше 1 одного и c больше либо равно, ну допустим одного, хотя там можно больше нуля написать.
[41:04.000 --> 41:13.000]  Такое, что для любого h верно следующее.
[41:13.000 --> 41:42.000]  Количество вершин с, вот давайте так, h' я напишу, с h от v равно h', не превосходит cn поделить на a в c.
[41:42.000 --> 41:50.000]  На a в степени h'.
[41:50.000 --> 41:57.000]  Ну да, причем так, так сказать, экспоненциально меньше.
[41:57.000 --> 41:59.000]  Ну это конечно не совсем экспоненциально, конечно.
[41:59.000 --> 42:03.000]  То есть a не обязана быть z или больше.
[42:03.000 --> 42:10.000]  Чаще всего там, например, в каких-либо классических примерах обычно a равно 2.
[42:10.000 --> 42:26.000]  Ну то есть в частности, например, если вы гарантировали, что вы всегда подвешиваете меньшее дерево к большему, например, то тогда это дерево будет сбалансировано.
[42:26.000 --> 42:34.000]  Вот, кстати, давайте для разминки такое мистическое утверждение.
[42:34.000 --> 42:51.000]  Вот представим себе, что вы, когда, что у вас каждый раз, когда вы делаете линк, у вас как-то так всегда получается, что в поддереве вершины w вершин не более чем вершин в поддереве v.
[42:51.000 --> 43:01.000]  Ну предположим, что вам тут всегда фантастически везет и там size of w меньше либо равно size of v.
[43:01.000 --> 43:09.000]  Тогда я утверждаю, что все эти деревья, то есть тогда все деревья, которые у вас будут получаться, они будут сбалансированы.
[43:13.000 --> 43:15.000]  Вот, понятное утверждение?
[43:15.000 --> 43:17.000]  Ну да.
[43:17.000 --> 43:21.000]  И в общем-то даже, может быть, даже где-то понятно откуда оно берется.
[43:21.000 --> 43:27.000]  А при этом мы просим, чтобы w тоже будет сбалансирована в том валище?
[43:27.000 --> 43:33.000]  Нет, ну они изначально будут сбалансированы, потому что одна вершина.
[43:33.000 --> 43:39.000]  Да, и они постоянно. Постоянно в каждый момент времени все деревья, которые у нас будут, они будут сбалансированы.
[43:43.000 --> 43:45.000]  Нет, на самом деле просто идея такая.
[43:47.000 --> 43:50.000]  Нет, ну идея на самом деле в следующем.
[43:50.000 --> 44:06.000]  То есть там просто идея будет в том, что если h от v равно h', то это означает, что size от v больше либо равен 2 в степени h'.
[44:06.000 --> 44:14.000]  То есть если глубина под дерева 5, то там хотя бы 32 вершины до найдется.
[44:15.000 --> 44:19.000]  Причем более, это первое такое.
[44:19.000 --> 44:26.000]  А во-вторых, еще конечно есть очень важное такое свойство, что h от v всегда строго меньше, чем h от parent от v.
[44:30.000 --> 44:31.000]  Ну это правда.
[44:31.000 --> 44:32.000]  Ну вот.
[44:32.000 --> 44:36.000]  Высота от v меньше, высота от v приятная.
[44:36.000 --> 44:39.000]  Ну в общем, h от низ, глубина.
[44:39.000 --> 44:41.000]  Ну h от глубина.
[44:41.000 --> 44:45.000]  Глубина вершины меньше, чем глубина родителей?
[44:45.000 --> 44:46.000]  Ну да.
[44:46.000 --> 44:47.000]  Нет.
[44:47.000 --> 44:48.000]  Да.
[44:48.000 --> 44:52.000]  А у нас в определении h это максимальное расстояние до потомка.
[44:52.000 --> 44:54.000]  Да, потомка.
[44:54.000 --> 45:01.000]  Поэтому как бы, если у вас от вершины v есть расстояние до потомка 8, то от родителей есть расстояние как минимум 9.
[45:01.000 --> 45:02.000]  Хитровое, хитровое.
[45:02.000 --> 45:04.000]  Да, так что в другую сторону.
[45:05.000 --> 45:06.000]  Вот.
[45:11.000 --> 45:15.000]  А доказательство на самом деле проводится по индукции.
[45:17.000 --> 45:23.000]  То есть там доказательство будет примерно следующее, что вот когда вы что-то подвешиваете, ну заметим следующее.
[45:23.000 --> 45:24.000]  У вас два варианта.
[45:24.000 --> 45:33.000]  То есть, ну у вас так, если вы подвесили вершину w, оказалось, что вот h от v.
[45:37.000 --> 45:45.000]  Ну то есть смотрите, вот у нас, если мы подвешиваем w к v, и вот скажем h от v было больше, чем hw,
[45:45.000 --> 45:51.000]  то тогда заметим, что тогда h вообще не поменяются.
[45:51.000 --> 45:55.000]  А единственное, что поменяется, это size от v, и он увеличится.
[45:57.000 --> 45:59.000]  Поэтому ничего не поменяется.
[46:00.000 --> 46:02.000]  Но поменяется другое.
[46:04.000 --> 46:06.000]  Вот, поменяется другое.
[46:06.000 --> 46:13.000]  То есть давайте, то есть с другой стороны могло быть так, что rank v, он там оказался меньше, чем rank w.
[46:16.000 --> 46:18.000]  Ну хорошо, h.
[46:20.000 --> 46:22.000]  Ну действительно, смотрите.
[46:22.000 --> 46:25.000]  То есть предположим, что h от v меньше h от w.
[46:26.000 --> 46:34.000]  Тогда это означает, что у нас h от w переприсваивается в h от w плюс 1.
[46:34.000 --> 46:35.000]  Логично, да?
[46:36.000 --> 46:47.000]  Но с другой стороны, заметим следующее, что по предположению индукции, у нас здесь тогда получается было больше либо равно 2 в степени h от w вершины.
[46:50.000 --> 46:55.000]  Но, как мы помним, size от w меньше либо равен size от v.
[46:56.000 --> 47:01.000]  То есть это означает, что тут тоже как минимум 2 в степени h от w.
[47:02.000 --> 47:06.000]  Но тогда получается, что в сумме будет хотя бы 2 в степени h от w плюс 1.
[47:09.000 --> 47:12.000]  Так что вот таким образом и получается.
[47:13.000 --> 47:18.000]  То есть на самом деле, если вы ботали доказательства ранговой евристики, то это практически оно.
[47:18.000 --> 47:20.000]  Ну, например, вот так.
[47:30.000 --> 47:31.000]  Ну, например, вот так.
[47:31.000 --> 47:32.000]  Значит, это отчему?
[47:32.000 --> 47:33.000]  Итак, смотрите.
[47:33.000 --> 47:36.000]  То есть действительно, если у нас, вот мы рассматриваем вершин.
[47:36.000 --> 47:46.000]  Допустим, если оказалось, что у нас rank h3, то у вас по дереве висят 2 в степени h3 вершин хотя бы.
[47:46.000 --> 47:49.000]  И заметим, что rank их строго меньше.
[47:51.000 --> 47:53.000]  Это означает маленькую приятную вещь.
[47:53.000 --> 48:00.000]  То есть это означает, что ни одна вершина rank h3 не является предком или потомком какой-то другой вершины того же rank.
[48:03.000 --> 48:05.000]  Ну, вот отсюда.
[48:08.000 --> 48:12.000]  То есть у нас все так устроено, что когда вы приходите к родителю, rank строго увеличивается.
[48:13.000 --> 48:15.000]  Ну, rank логично.
[48:15.000 --> 48:17.000]  Да, мы это аж так определили.
[48:17.000 --> 48:18.000]  Вот.
[48:18.000 --> 48:28.000]  Но тогда это означает, что получается можно каждой вершине h3 поставить в соответствие своей 2 в степени h3 вершин.
[48:28.000 --> 48:30.000]  То есть по дереве они пересекаются.
[48:31.000 --> 48:39.000]  А это означает, что таких вершин высоты h3, их не более чем...
[48:40.000 --> 48:41.000]  Сколько их там получается?
[48:42.000 --> 48:46.000]  Не более чем n поделить на 2 в степени h3.
[48:47.000 --> 48:50.000]  Ну, вот c равно 1, a равно 2. Пожалуйста.
[48:57.000 --> 49:09.000]  То есть таким образом получается, что если вы всегда ухитрились устроить себе переподвешивание так, что вы всегда подвешиваете меньшее под дерево к большему, то тогда ваше дерево сбалансировано.
[49:12.000 --> 49:14.000]  Вот. Ну, это вот такое вот.
[49:14.000 --> 49:18.000]  А вот все это, что за структура данных? Это link и bound rate?
[49:19.000 --> 49:23.000]  Нет, это пока... Ну, сейчас. Ну, вот эта структура да, но это пока базовая, потому что...
[49:23.000 --> 49:24.000]  Так и называется.
[49:25.000 --> 49:26.000]  Да, так и называется.
[49:27.000 --> 49:28.000]  Вот.
[49:31.000 --> 49:34.000]  Ну да. Сейчас. Не понял вопроса.
[49:35.000 --> 49:37.000]  Ну, какая структура данных?
[49:38.000 --> 49:39.000]  Ну...
[49:39.000 --> 49:40.000]  Волюбная скорее.
[49:40.000 --> 49:45.000]  Не-не-не. Ну, скорее... Не-не-не. Пока link и bound rate, это собственно не структура, это интерфейс, в общем-то.
[49:46.000 --> 49:47.000]  Другой вопрос, как мы ее реализовываем.
[49:48.000 --> 49:52.000]  То есть у нас есть теория о том, что мы ее реализовываем, просто делая сжатие путей.
[49:53.000 --> 50:00.000]  Первая теория была о том, что если мы делаем только сжатие путей, то там каждая из m операции будет в среднем работать за... Вон там написано сколько.
[50:02.000 --> 50:08.000]  Так вот. Но есть вторая теория. Предположим, что нам фантастически повезло, и деревья сбалансированы.
[50:11.000 --> 50:14.000]  Так вот. Теория мистическая.
[50:17.000 --> 50:18.000]  Чего?
[50:19.000 --> 50:30.000]  Нет, у нас теория опять. За сколько у вас будет работать... За сколько вы сделаете m операции, если вам фантастически повезет, и деревья у вас в процессе сбалансированы.
[50:35.000 --> 50:37.000]  То есть вот эта асцент была не сбалансирована?
[50:38.000 --> 50:39.000]  Да.
[50:40.000 --> 50:42.000]  Да. Ну как всегда, да.
[50:43.000 --> 50:46.000]  Нет, snm это частный случай этого.
[50:48.000 --> 50:54.000]  Сейчас мы в этом можем... В какой-то момент давайте сформулируем, что такое snm, и в этом увидимся.
[51:00.000 --> 51:04.000]  Ну с минимум, правда, да, отдельное. Но в snm не нужен минимум.
[51:04.000 --> 51:15.000]  По сути, да. Так вот. Нет, не доказали. Судя по всему, такие у нас...
[51:16.000 --> 51:17.000]  Тарьян доказал?
[51:18.000 --> 51:20.000]  Тарьян доказал, да.
[51:21.000 --> 51:26.000]  Так, нет, ну да. Ну посмотрим по темпу, кстати. Я не уверен, что мы сегодня успеем ее подоказывать.
[51:27.000 --> 51:32.000]  Вот. То есть возможно мы сегодня поговорим скорее о применениях этого, чтобы там...
[51:33.000 --> 51:38.000]  Ладно, давайте... Так, ребята, давайте попробовать. Чему равно a от единицы запятая g?
[51:41.000 --> 51:47.000]  Есть один случай a от 0.1. Это то же самое, что a от 0.2, то есть 4.
[51:48.000 --> 51:50.000]  Так, a от 0.2. Так, хорошо.
[51:51.000 --> 51:52.000]  Два в степени a от g.
[51:53.000 --> 51:56.000]  Ну не знаю, это прямо нот. Так, а остальное что?
[51:56.000 --> 51:57.000]  А остальное что?
[51:58.000 --> 52:04.000]  А остальное ноль g. То есть ноль запятая a от предыдущего.
[52:05.000 --> 52:06.000]  Так, давайте так. a от 1 g.
[52:07.000 --> 52:08.000]  Два в степени предыдущее число.
[52:09.000 --> 52:16.000]  Так, хорошо, да. То есть a от нуля, там, a от соответственно 1 g минус 1.
[52:17.000 --> 52:23.000]  То есть в переводе говоря, это равно, ну фактически, ну начиная с какого-то момента действительно,
[52:23.000 --> 52:27.000]  запустить это равно 2 в степени a от 1 g минус 1.
[52:29.000 --> 52:30.000]  Вот, мясо, да.
[52:31.000 --> 52:35.000]  То есть это... тут четыре даже удобную цепь в виде два в квадрате.
[52:36.000 --> 52:38.000]  Так что тут будет два в степень 2.
[52:39.000 --> 52:41.000]  Тут будет два в степени 2 Edinburgh.
[52:42.000 --> 52:44.000]  Тут будет два в степени 2 Edinburgh.
[52:46.000 --> 52:48.000]  Тут будет два в степень 2 Edinburgh.
[52:48.000 --> 53:05.000]  и так далее. Так, ну давайте смотреть. Хорошо, что тут дальше? Так, а, ну да, а от и1 мы наконец
[53:05.000 --> 53:15.000]  ну вот, а нет, так просто не получится. Здесь-то все просто, потому что в этом столце будет то же самое, что в этом, только сдвинута вот так.
[53:15.000 --> 53:16.000]  Сразу можно два в степени, два в степени два написать. Нет. Дааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааа
[53:45.000 --> 53:49.000]  Тут будет то же самое, что тут. Да, но его мы еще не писали. Да, совершенно верно.
[53:49.000 --> 54:00.000]  Так, ну давайте смотреть. Ну давайте смотреть. Значит пишем a от 2 g в адекватном случае. Это что такое?
[54:00.000 --> 54:11.000]  Это a от 1 значит и соответственно a от 2 g минус 1. То есть что мы должны сделать с предыдущим числом?
[54:11.000 --> 54:19.000]  Мы должны взять 2 и написать тут башенку в количестве равном этому предыдущему числу.
[54:20.000 --> 54:32.000]  Да, то есть условно, да. То есть здесь я должен 2, то есть я здесь почти должен написать 2 в степени, ну что-то вроде, там вот так написать.
[54:32.000 --> 54:39.000]  Два, два, пол, пол, пол, два в количестве, два в степени, два в степени, два.
[54:39.000 --> 55:00.000]  Вот. Здесь, здесь я должен написать два в степени тоже два, два, пол, пол, пол, два, где эти двойки написаны в количестве два в степени, два, два, пол, пол, пол, два, в количестве два в степени, два в степени, два.
[55:00.000 --> 55:02.000]  Нормально?
[55:03.000 --> 55:05.000]  Два в предыдущем, все нормально.
[55:05.000 --> 55:10.000]  В общем, и так далее, да? В общем, это быстра растущая функция, да?
[55:11.000 --> 55:16.000]  Сейчас, а это всегда два в степени предыдущего числа? Нет. Что?
[55:17.000 --> 55:28.000]  А, нет, почему? Там, нет, ну скажем так, a от единицы g в данном случае, это что такое? Это два в степени башенка из g2.
[55:29.000 --> 55:30.000]  Окей.
[55:30.000 --> 55:32.000]  Поэтому я здесь ровно это и пишу.
[55:32.000 --> 55:40.000]  Потому что a от 2g это a от 1, то есть это нот. То есть это два в степени, а сколько тут нот.
[55:40.000 --> 55:48.000]  Так что получается вот такая вот очень-очень-очень-очень-очень-очень быстра растущая функция, мне страшно даже писать, что будет дальше.
[55:49.000 --> 55:52.000]  Вот. Поэтому да, не будем этого делать.
[55:53.000 --> 55:55.000]  А теперь ведем обратную функцию, да.
[55:55.000 --> 55:57.000]  Так вот, что такое альфа?
[55:58.000 --> 56:00.000]  Обратная функция, все.
[56:00.000 --> 56:02.000]  Обратная функция.
[56:02.000 --> 56:04.000]  Почти надо ее обратно, да?
[56:04.000 --> 56:05.000]  Да.
[56:05.000 --> 56:07.000]  Нет, нет, нет, смотрите.
[56:07.000 --> 56:09.000]  Нет, нет, сейчас напишу, не волнуйтесь.
[56:09.000 --> 56:14.000]  В общем, альфа от, ну давайте, чтобы м и н не путать, я напишу x и г.
[56:15.000 --> 56:22.000]  Значит, альфа от x и г это минимальное такое.
[56:22.000 --> 56:27.000]  Какое и что?
[56:28.000 --> 56:30.000]  Да, больше либо равно одного.
[56:31.000 --> 56:33.000]  Такое что?
[56:33.000 --> 56:38.000]  Значит, а от, значит, х.
[56:38.000 --> 56:41.000]  Ну тут пишут, пишут почему-то примерно следующее, х.
[56:41.000 --> 56:45.000]  И дальше получается такое округление, 2х поделить на y.
[56:48.000 --> 56:50.000]  Так, а нет, набрал, набрал, набрал, набрал, набрал.
[56:50.000 --> 57:00.000]  И это больше, чем лог 2 и как.
[57:05.000 --> 57:11.000]  Да, к чему-то вот, да, в самой статье тут м и н написано, но кажется вот это немножко вот, есть м и н, а тут м плюс н.
[57:11.000 --> 57:13.000]  И это надо не перепутать.
[57:14.000 --> 57:16.000]  Ну я поэтому на всякий случай так написал.
[57:16.000 --> 57:20.000]  Ну нет, просто вот это м поделить на н, это у нас как всегда важно будет.
[57:20.000 --> 57:25.000]  Потому что, возможно, мы уже с этим стартились, у нас когда-то уже были логарифмы по вот этому основанию.
[57:25.000 --> 57:27.000]  Не надо.
[57:27.000 --> 57:29.000]  Уже было какая-то там у нас.
[57:29.000 --> 57:34.000]  У нас там по-моему оптимальная, там dx с оптимальной кучей по-моему работал за какую-то вот такую симптомию.
[57:34.000 --> 57:35.000]  Не надо.
[57:35.000 --> 57:42.000]  Там м умножить на там, логарифм, логарифм в по основанию вот этого вот.
[57:42.000 --> 57:44.000]  Как работал, так и не работает.
[57:44.000 --> 57:45.000]  Вот.
[57:47.000 --> 57:51.000]  Так, ну теперь остается только выяснить, да, что это.
[57:51.000 --> 57:52.000]  Вот.
[57:52.000 --> 57:55.000]  Но здесь, значит, тут честно сошлёмся.
[57:55.000 --> 58:07.000]  Значит, утверждается, значит, для любого n меньше, чем 2 в 16 утверждается, что а от м плюс н, н равно 1.
[58:07.000 --> 58:09.000]  А вообще на н?
[58:09.000 --> 58:10.000]  Н мы в похрен.
[58:10.000 --> 58:13.000]  Н в похрен, потому что м плюс н.
[58:14.000 --> 58:15.000]  Ну что значит?
[58:15.000 --> 58:17.000]  Ну м больше не правда нуля, хорошо.
[58:17.000 --> 58:19.000]  Ну да, в смысле.
[58:19.000 --> 58:22.000]  Альп уже зависит от x, а переданного?
[58:22.000 --> 58:23.000]  Уже не зависит.
[58:23.000 --> 58:24.000]  Зависит.
[58:24.000 --> 58:25.000]  Если передать...
[58:25.000 --> 58:28.000]  Ну начиная с какого-то момента не зависит.
[58:28.000 --> 58:29.000]  Вот.
[58:29.000 --> 58:33.000]  А нет, вот видите, n-то, видите, тут достаточно мелкие n просто.
[58:33.000 --> 58:36.000]  Два в степени, два в степени.
[58:36.000 --> 58:37.000]  Да, там соответственно.
[58:37.000 --> 58:42.000]  То есть просто первая же ячейка в этой строке уже будет...
[58:43.000 --> 58:44.000]  Нет, это...
[58:44.000 --> 58:45.000]  Ну это альфа, да.
[58:45.000 --> 58:46.000]  Начиная...
[58:46.000 --> 58:47.000]  Сейчас.
[58:47.000 --> 58:48.000]  Что?
[58:48.000 --> 58:49.000]  Это же бред какой-то.
[58:49.000 --> 58:50.000]  Почему бред?
[58:50.000 --> 58:51.000]  Что такое?
[58:51.000 --> 58:52.000]  Что такое агрессивное сегодня?
[58:52.000 --> 58:53.000]  Первая...
[58:53.000 --> 58:54.000]  Какое-то.
[58:54.000 --> 58:55.000]  Да?
[58:55.000 --> 58:58.000]  То есть если n равно 1, то у нас получается...
[58:58.000 --> 59:00.000]  А, там лого-ритм ещё есть.
[59:00.000 --> 59:01.000]  Лого-ритм.
[59:01.000 --> 59:02.000]  Это 16.
[59:02.000 --> 59:03.000]  А.
[59:04.000 --> 59:05.000]  А.
[59:05.000 --> 59:06.000]  Первая.
[59:06.000 --> 59:07.000]  Ох.
[59:08.000 --> 59:09.000]  О господи.
[59:09.000 --> 59:10.000]  О-хо-хо-хо.
[59:13.000 --> 59:15.000]  Что же это такое?
[59:15.000 --> 59:16.000]  Ясно.
[59:17.000 --> 59:18.000]  Давайте найдём функцию...
[59:18.000 --> 59:19.000]  Ну вот, в этом месте да.
[59:19.000 --> 59:22.000]  Тальян сам испугался там конкретно считать дальше.
[59:22.000 --> 59:24.000]  И просто сказал...
[59:24.000 --> 59:33.000]  For all feasible M&M, альфа is not more than two.
[59:35.000 --> 59:36.000]  Так и написал.
[59:36.000 --> 59:39.000]  Да, физиолог, типа хоть насколько-то адекватных вообще для нашей жизни,
[59:39.000 --> 59:40.000]  но там есть...
[59:40.000 --> 59:48.000]  Чем больше х, тем нам лучше, тем меньше и.
[59:48.000 --> 59:49.000]  Да.
[59:51.000 --> 59:54.000]  Ну да, то есть на самом деле это действительно такой парадокс.
[59:54.000 --> 59:59.000]  Чем больше m, тем как бы быстрее в среднем эти операции работают.
[01:00:00.000 --> 01:00:03.000]  Но заметим, что в общем-то это сегодня для нас не новость.
[01:00:03.000 --> 01:00:07.000]  Потому что обратите внимание, у нас тут ставка на то, что сжатие путей без...
[01:00:07.000 --> 01:00:12.000]  Даже без ранговых иллюмистик вообще тоже работает за какую-то ассинтотику,
[01:00:12.000 --> 01:00:15.000]  которая бы тоже откровена чем больше m, тем лучше.
[01:00:17.000 --> 01:00:18.000]  Обратите внимание.
[01:00:20.000 --> 01:00:22.000]  То есть схлопывается то, что начинается с какого-то момента,
[01:00:22.000 --> 01:00:25.000]  это вообще ввод единиц превращается.
[01:00:28.000 --> 01:00:30.000]  С момента примерно какого?
[01:00:31.000 --> 01:00:35.000]  Ну вообще там m это n степени 1,5 на самом деле.
[01:00:35.000 --> 01:00:37.000]  Но это совсем слабенько.
[01:00:37.000 --> 01:00:39.000]  Ну, ничего слабее.
[01:00:40.000 --> 01:00:44.000]  В общем, m как бы, это как бы из n запросов, как бы теперь каждый делает за ввод единицы,
[01:00:44.000 --> 01:00:45.000]  но это уже не слабенько.
[01:00:45.000 --> 01:00:47.000]  Славенько это если бы мы писали m равно m квадрат.
[01:00:49.000 --> 01:00:50.000]  Вот.
[01:00:50.000 --> 01:00:54.000]  А тут на самом деле вот в этой ассинтотике вот там m степени 1.
[01:00:54.000 --> 01:00:56.000]  Сильнее, чем ничего, но ладно.
[01:00:57.000 --> 01:00:58.000]  Нет, ну окей.
[01:00:59.000 --> 01:01:02.000]  Нет, я понимаю, что там можно, наверное, какую-то камевуху забабахать.
[01:01:05.000 --> 01:01:06.000]  Ну а что?
[01:01:06.000 --> 01:01:09.000]  Ну, это утверждение очевидное тогда получается.
[01:01:09.000 --> 01:01:18.000]  Потому что n до 16, значит нужно выбрать a первое, что-то хотя бы равное 2, больше 16.
[01:01:18.000 --> 01:01:22.000]  А у нас там a первое, а второе, а второе, а второе, и повесьте 16.
[01:01:22.000 --> 01:01:23.000]  Ну, типа того.
[01:01:25.000 --> 01:01:27.000]  Ну, типа того, типа того, да.
[01:01:27.000 --> 01:01:28.000]  Узнание как бы несложное.
[01:01:28.000 --> 01:01:29.000]  Ага.
[01:01:30.000 --> 01:01:31.000]  Ну окей.
[01:01:33.000 --> 01:01:34.000]  Ну, как бы да, тут можно, да.
[01:01:35.000 --> 01:01:40.000]  Как бы можно тогда посчитать, можно в принципе просто в данном случае поверить в авторитет.
[01:01:41.000 --> 01:01:43.000]  Да, не в нашем, конечно, это стиле, но.
[01:01:44.000 --> 01:01:45.000]  Ну, мы можем.
[01:01:45.000 --> 01:01:46.000]  Вот.
[01:01:46.000 --> 01:01:49.000]  Ну ладно, в конце концов, честно скажу, я говорю, как уже все это становится понятно,
[01:01:49.000 --> 01:01:51.000]  мы все равно все-таки доказывать не собираемся пока.
[01:01:52.000 --> 01:01:56.000]  Ну, в следующий раз, я надеюсь, надеюсь, честно скажу, надеюсь, мы все-таки это докажем.
[01:01:57.000 --> 01:01:58.000]  Это, это что?
[01:01:59.000 --> 01:02:00.000]  Вот это.
[01:02:00.000 --> 01:02:04.000]  Так, кстати, не теряем 1, не теряем 2, если что, для двух пришедших мы не доказывали еще.
[01:02:05.000 --> 01:02:06.000]  Сейчас.
[01:02:06.000 --> 01:02:09.000]  Это, это теряем 1, теряем 2, мы собираемся потом доказать.
[01:02:09.000 --> 01:02:10.000]  Да.
[01:02:10.000 --> 01:02:11.000]  Все хорошо.
[01:02:11.000 --> 01:02:13.000]  То есть пока, да, то есть сегодня у нас занятие не о том,
[01:02:13.000 --> 01:02:17.000]  сегодня у нас как бы занятие поговорить об собственно структуре EvalLink Update
[01:02:17.000 --> 01:02:20.000]  и собственно, что с ней вообще можно сделать.
[01:02:22.000 --> 01:02:23.000]  Вот.
[01:02:24.000 --> 01:02:25.000]  Так.
[01:02:26.000 --> 01:02:27.000]  Значит, смотрите.
[01:02:28.000 --> 01:02:31.000]  Да, да, собственно, мы тут, да, постепенно приближаемся к перерыву, но давайте смотреть.
[01:02:31.000 --> 01:02:32.000]  Вот, хорошо.
[01:02:32.000 --> 01:02:34.000]  Вот у нас есть вот, пока не меряете теории.
[01:02:34.000 --> 01:02:38.000]  Из точки зрения EvalLink Update, они говорят следующее.
[01:02:38.000 --> 01:02:44.000]  Что, соответственно, если вы просто делаете, то есть если вы просто делаете тупо сжатие,
[01:02:44.000 --> 01:02:46.000]  ну, это практически всегда можно тупо делать.
[01:02:47.000 --> 01:02:48.000]  Вот.
[01:02:48.000 --> 01:02:52.000]  Тогда у вас получится какая-то адекватная асимпдотика,
[01:02:52.000 --> 01:02:56.000]  ну, там типа не превосходящая логарифм, там логарифм N на операцию,
[01:02:56.000 --> 01:03:00.000]  ну, а чем больше M, тем на самом деле это среднее будет еще уменьшаться.
[01:03:00.000 --> 01:03:02.000]  И в конце конца оно сойдется к единице.
[01:03:03.000 --> 01:03:04.000]  Вот.
[01:03:04.000 --> 01:03:07.000]  Но если вам удастся реализовать все таким образом,
[01:03:08.000 --> 01:03:13.000]  чтобы у вас деревья были еще и сбалансированы,
[01:03:14.000 --> 01:03:17.000]  да, то есть у вас там, ну, скажем,
[01:03:17.000 --> 01:03:21.000]  количество вершин какого-то ранга там всегда не превосходило,
[01:03:21.000 --> 01:03:23.000]  давайте, какого-нибудь адекватного числа.
[01:03:26.000 --> 01:03:27.000]  Ну, вот.
[01:03:29.000 --> 01:03:31.000]  Ну, тогда, ну, вот.
[01:03:40.000 --> 01:03:41.000]  Сейчас.
[01:03:43.000 --> 01:03:46.000]  Хотя интересно, не превосходит или не имеешь?
[01:03:48.000 --> 01:03:52.000]  А то что-то я подумал, а бамбук, это сбалансированное дерево?
[01:03:54.000 --> 01:03:55.000]  Ну, по-другому определение.
[01:03:55.000 --> 01:03:57.000]  С HV хотя бы.
[01:03:58.000 --> 01:03:59.000]  Чего?
[01:03:59.000 --> 01:04:02.000]  Ну, с HV хотя бы, типа, ну, это просто.
[01:04:03.000 --> 01:04:05.000]  Нет, ну, по-другому определение.
[01:04:07.000 --> 01:04:08.000]  Ну, да так.
[01:04:08.000 --> 01:04:09.000]  Нет, а что?
[01:04:09.000 --> 01:04:12.000]  А, ну, хотя нет, бамбук, знаете, почему не подходит?
[01:04:12.000 --> 01:04:13.000]  Там ранг слишком большой.
[01:04:14.000 --> 01:04:16.000]  Ну, просто вот эта штука означает,
[01:04:16.000 --> 01:04:19.000]  что H не может превосходить логарифма N по основанию A.
[01:04:21.000 --> 01:04:23.000]  А в бамбуке есть ранг N.
[01:04:25.000 --> 01:04:28.000]  То есть, поэтому такая определенная отсечечка тут все-таки на лицо.
[01:04:35.000 --> 01:04:37.000]  Так что, да, тут вроде еще адекватно.
[01:04:38.000 --> 01:04:39.000]  Вот.
[01:04:41.000 --> 01:04:43.000]  Значит, теперь давайте смотреть.
[01:04:44.000 --> 01:04:46.000]  Значит, к чему это все нас приводит, да.
[01:04:46.000 --> 01:04:48.000]  То есть, если нам удастся как-то сделать.
[01:04:49.000 --> 01:04:50.000]  Вот.
[01:04:51.000 --> 01:04:52.000]  Ну, например.
[01:04:52.000 --> 01:04:56.000]  Ну, самый классический, конечно, самый такой простой пример мог бы быть.
[01:04:56.000 --> 01:04:58.000]  Это пример, в котором вообще не нужен апдейт.
[01:04:59.000 --> 01:05:01.000]  Это пример собственная СНМа.
[01:05:03.000 --> 01:05:06.000]  Вот давайте посмотрим, что может сделать СНМа.
[01:05:07.000 --> 01:05:09.000]  Так, вот давайте это уберем.
[01:05:13.000 --> 01:05:14.000]  Значит, смотрите.
[01:05:19.000 --> 01:05:20.000]  Что?
[01:05:21.000 --> 01:05:22.000]  Нет?
[01:05:23.000 --> 01:05:26.000]  Нет, бывает, конечно, может быть, СНМ, которому еще нужно что-то прицепить.
[01:05:26.000 --> 01:05:27.000]  Но давайте подумаем.
[01:05:28.000 --> 01:05:29.000]  СНМ, вообще говоря.
[01:05:31.000 --> 01:05:33.000]  Это он поддерживает что?
[01:05:36.000 --> 01:05:37.000]  Технологии.
[01:05:38.000 --> 01:05:39.000]  Инновации, да.
[01:05:40.000 --> 01:05:41.000]  Ну, вот.
[01:05:41.000 --> 01:05:42.000]  То есть, ДСУ.
[01:05:42.000 --> 01:05:44.000]  То есть, говорим, что у нас тоже есть Ender Shift.
[01:05:46.000 --> 01:05:50.000]  И они в каждый момент времени разделены на подмножество.
[01:05:52.000 --> 01:05:55.000]  То есть, на какие-то подмножества, не пересекающиеся.
[01:05:56.000 --> 01:05:57.000]  Вот.
[01:05:57.000 --> 01:06:01.000]  И у нас есть там операции Find от В.
[01:06:02.000 --> 01:06:04.000]  То есть, это найти представитель, да.
[01:06:04.000 --> 01:06:07.000]  То есть, это найти представителя так называемого.
[01:06:10.000 --> 01:06:15.000]  Ну, то есть, в каждой вершине, то есть, в каждом множестве есть так называемый представитель.
[01:06:24.000 --> 01:06:25.000]  Вителя.
[01:06:26.000 --> 01:06:27.000]  Множества.
[01:06:29.000 --> 01:06:30.000]  Содержащего В.
[01:06:31.000 --> 01:06:32.000]  Вот.
[01:06:32.000 --> 01:06:33.000]  И Юнион.
[01:06:36.000 --> 01:06:37.000]  От В и В.
[01:06:37.000 --> 01:06:42.000]  То есть, объединить клетки множества с В и В.
[01:06:44.000 --> 01:06:45.000]  Вот.
[01:06:46.000 --> 01:06:47.000]  Множества.
[01:06:48.000 --> 01:06:50.000]  С В и В.
[01:06:53.000 --> 01:06:55.000]  То есть, по сути, вот СНМ.
[01:06:56.000 --> 01:06:59.000]  По крайней мере, на уровне интерфейса требует вот этого вот.
[01:07:02.000 --> 01:07:05.000]  Значит, теперь, если мы верим в Evil Link Update.
[01:07:08.000 --> 01:07:10.000]  То есть, следующая идея.
[01:07:11.000 --> 01:07:18.000]  То есть, давайте каждое множество хранить в виде, соответственно, подвешенного дерева.
[01:07:20.000 --> 01:07:22.000]  Ну, достаточно произвольного.
[01:07:27.000 --> 01:07:29.000]  Там как-то так оно может быть.
[01:07:29.000 --> 01:07:33.000]  И самое главное, что и представителям мы будем объявлять корень.
[01:07:38.000 --> 01:07:39.000]  Вот.
[01:07:41.000 --> 01:07:42.000]  Сколько у нас тут?
[01:07:42.000 --> 01:07:43.000]  Семь, да?
[01:07:43.000 --> 01:07:44.000]  Ага.
[01:07:45.000 --> 01:07:47.000]  Три, пять, допустим шесть, семь.
[01:07:48.000 --> 01:07:50.000]  Ну, разное тут все может быть.
[01:07:51.000 --> 01:07:53.000]  Ну, вот, я что-нибудь еще туда.
[01:07:53.000 --> 01:07:55.000]  А тут вообще может быть тупое.
[01:07:56.000 --> 01:07:57.000]  Вот.
[01:07:57.000 --> 01:08:02.000]  И когда мы будем искать родителя, представителя, мы просто будем добегать до корня.
[01:08:02.000 --> 01:08:06.000]  То есть, чтобы совсем это свести к Evil Link, чтобы это функция Evil.
[01:08:06.000 --> 01:08:12.000]  То есть, как вы уже сказали, нам просто достаточно будет вести вот эту операцию такую, что A и B равно A.
[01:08:15.000 --> 01:08:22.000]  И еще объявить, конечно, что label от каждой вершины будет равен, ну, я не знаю, самой этой вершине.
[01:08:27.000 --> 01:08:28.000]  Вот.
[01:08:29.000 --> 01:08:30.000]  Вот.
[01:08:34.000 --> 01:08:35.000]  Да.
[01:08:35.000 --> 01:08:43.000]  То есть, самое главное, самое приятное у нас в этой структуре то, что когда вы объединяете два множества, то кто там будет представитель, вы выбираете сами.
[01:08:44.000 --> 01:08:54.000]  Самое главное в юнивере, чтобы в файне было, что как бы у двух вершин один одного и того же множества представитель находился один и тот же, а кто он конкретно, в общем-то, уже и не важно.
[01:08:55.000 --> 01:08:56.000]  Вот.
[01:08:57.000 --> 01:09:04.000]  То есть, замечаем тогда, что получается, что при таком хранении мы реально свели операцию к Evil Link Update.
[01:09:05.000 --> 01:09:07.000]  Даже просто к Evil Link Update.
[01:09:08.000 --> 01:09:09.000]  Вот.
[01:09:10.000 --> 01:09:35.000]  Ну, тогда, значит, как же нам, то есть, тогда замечаем, что, то есть, тогда из этих теорем уже, заметьте, мы сейчас ничего не догадываем, просто смотрим на теоремы и замечаем, что если мы просто храним подвешенные деревья и применяем эвристику сжатия пути, то тогда вот эта теорема нам гарантирует, что мы уже за логарифум мы как-нибудь справимся, а если запросов много, то еще быстрее справимся.
[01:09:37.000 --> 01:09:38.000]  Вот.
[01:09:40.000 --> 01:10:02.000]  Ну, вторая теорема говорит, что если мы все-таки будем подвешивать деревья там не абы как, а так, чтобы деревья были сбалансированы, сбалансированы, то тогда оказывается, что вы тогда, действительно, в среднем каждая операция будет выполняться за обратную функцию герману.
[01:10:05.000 --> 01:10:06.000]  А как нам это сделать?
[01:10:07.000 --> 01:10:19.000]  Ну, по-разному, можно ввести, да, можно в явном виде вычислять рамги, хотя, хотя нам будет даже удобно не вводить даже не рамги, а честно вычислять сайзы.
[01:10:21.000 --> 01:10:22.000]  Я не помню, почему это.
[01:10:23.000 --> 01:10:28.000]  Нет, смотрите, ну, нет, вот, вот, давайте, давайте в каждом корде хранить, сколько, сколько.
[01:10:29.000 --> 01:10:30.000]  Они растут очень быстро.
[01:10:31.000 --> 01:10:32.000]  Сайзы?
[01:10:32.000 --> 01:10:33.000]  Относительно.
[01:10:33.000 --> 01:10:37.000]  Потому что за одно обгнение у вас высота не увеличится, чем там большая ничка.
[01:10:38.000 --> 01:11:01.000]  Нет, с одной стороны, да, но сайзами просто приятнее то, что мы уже доказали, что там, если нам гарантируется, что мы там, если, что размер нас он как бы не более чем, что он там хотя бы в два раза меньше, чем размер родителя, а мы можем подвешивать так, чтобы это было, чтобы это было правда, то это дерево сбалансированы, мы это уже сегодня доказывали.
[01:11:01.000 --> 01:11:13.000]  Нет, правда, то, что два раза не было, это было то, что у нас после гарантизации мы подвешиваем, когда мы подвешиваем к W к V, то у нас сайз, ну, не важно.
[01:11:14.000 --> 01:11:15.000]  Ну, не важно.
[01:11:16.000 --> 01:11:18.000]  Да, хорошо, тогда гаранти, ладно, тогда, ну, не важно, то есть, да.
[01:11:19.000 --> 01:11:20.000]  Нет, я имею ввиду следующее, что.
[01:11:21.000 --> 01:11:22.000]  Да, то, что сайз W и меньше сайза V.
[01:11:22.000 --> 01:11:32.000]  Ну, это, это тоже, но да, но просто из этого автоматически следует, что в каждый момент времени у вас должно быть, что сайз от V меньше либо равен, чем сайз от parent от V.
[01:11:36.000 --> 01:11:37.000]  Попало.
[01:11:42.000 --> 01:11:46.000]  Ну, то есть, на самом деле, если мы будем всегда подвешивать меньше или больше, то это будет правда.
[01:11:49.000 --> 01:11:50.000]  Логично, да?
[01:11:50.000 --> 01:11:51.000]  Наверное.
[01:11:52.000 --> 01:11:53.000]  Вот.
[01:11:54.000 --> 01:12:07.000]  Ну, не важно, можно либо так, либо через ранги, но в общем убедиться в том, что действительно в этом случае можно показать, что тогда дерево является, любое дерево, все деревья, которые у нас образуются, является сбалансированными вот в этом смысле.
[01:12:12.000 --> 01:12:16.000]  Вот, и тогда это автоматически означает, что вот обратная функция кермана воспринимается.
[01:12:17.000 --> 01:12:23.000]  Ну, то есть, по сути, да, все, что мы сейчас сделали, это свели СНМ к Эволлинку.
[01:12:24.000 --> 01:12:26.000]  Категорически приветствую.
[01:12:27.000 --> 01:12:28.000]  Вот.
[01:12:29.000 --> 01:12:32.000]  То есть, на самом деле, да, то есть, это вот, есть основная черная магия.
[01:12:33.000 --> 01:12:34.000]  Вот.
[01:12:35.000 --> 01:12:49.000]  Но, нот, ну, в этом месте, конечно, нельзя не поговорить о том, действительно, а что с этим СНМом, что сами по себе СНМом можно сделать, потому что в конце концов есть алгоритм Тарьяна оффлайн поиска ЛЦА.
[01:12:51.000 --> 01:12:55.000]  Ну, а, конечно, да, немножко бессмысленно мы и так уже там это все за линию умеем искать.
[01:12:57.000 --> 01:12:59.000]  Ну, вот, там за НПЛЦМ, но тем не менее.
[01:12:59.000 --> 01:13:04.000]  Так, ну, кстати, так, не пришло ли нам время, о, по-моему, пришло время перевернуть.
[01:13:06.000 --> 01:13:09.000]  Нет, вот, да, можно действительно подумать, действительно, что с этим можно сделать.
[01:13:10.000 --> 01:13:17.000]  Ну, во-первых, непосредственно с СНМом, да, есть такой классический алгоритм, как искать ЛЦА оффлайн.
[01:13:18.000 --> 01:13:22.000]  Да, сейчас он нам уже не поможет, потому что мы с вами ЛЦА уже умеем за вот единицы искать.
[01:13:23.000 --> 01:13:25.000]  Да, потому что дерево, к сожалению, фиксируем.
[01:13:27.000 --> 01:13:28.000]  Вот.
[01:13:29.000 --> 01:13:30.000]  Антон.
[01:13:30.000 --> 01:13:31.000]  Чего?
[01:13:31.000 --> 01:13:32.000]  Держи.
[01:13:32.000 --> 01:13:33.000]  Осторожно.
[01:13:35.000 --> 01:13:41.000]  Вот, ну, просто, ну, вот, то есть, и так, вот снова у нас что-то представим в задаче, что дано дерево.
[01:13:42.000 --> 01:13:43.000]  Так, что происходит?
[01:13:44.000 --> 01:13:45.000]  Вмолим, вмолим, вмолим.
[01:13:46.000 --> 01:13:47.000]  А, вмолим.
[01:13:49.000 --> 01:13:50.000]  Ой, это да.
[01:13:52.000 --> 01:13:54.000]  Будем повернуть.
[01:13:55.000 --> 01:13:56.000]  Так вот.
[01:13:57.000 --> 01:14:03.000]  То есть, и так представим, что у нас здесь задача, действительно, дано дерево, даны запросы, там каждый запрос две вершины, найдите ЛЦА.
[01:14:04.000 --> 01:14:10.000]  Да, мы, конечно, с вами уже умеем эту задачу решать так, чтобы сделать предподсчет за ОАТН, а потом каждый запрос за ОАТ единицы.
[01:14:11.000 --> 01:14:12.000]  Вот.
[01:14:12.000 --> 01:14:23.000]  Но, конечно, нельзя такой, хотя бы для разминочки не обойти вниманием вопрос о том, называется, а нельзя ли как-то попроще, но при этом не сильно проиграть по ассимдотике.
[01:14:24.000 --> 01:14:43.000]  Ну, потому что вот в этом смысле, с точки зрения Альфы, то есть Альфа, на самом деле, эта функция достаточно мелкая, как мы уже сказали, чаще всего это не более чем двух для, по крайней мере, обозримых каких-то, я думаю, которые нам могут реально встретиться.
[01:14:44.000 --> 01:14:45.000]  Или можно даже еще по-другому.
[01:14:46.000 --> 01:14:51.000]  На самом деле, еще есть такое мистическое утверждение, именно просто мистическое утверждение, сейчас доказывать не буду, если...
[01:14:52.000 --> 01:14:53.000]  Но утверждение такое.
[01:14:54.000 --> 01:14:59.000]  Почему-то там утверждается, что Альфа от НН это лог звездочка Н.
[01:15:00.000 --> 01:15:01.000]  Прямо равно?
[01:15:02.000 --> 01:15:03.000]  Вот кто-то утверждал такое.
[01:15:04.000 --> 01:15:06.000]  Ну, давайте, ладно, для надежности скажем так.
[01:15:07.000 --> 01:15:11.000]  Мне самому, конечно, так кажется, но вот кто-то утверждал такое, то ли Маврин, то ли Тариян.
[01:15:12.000 --> 01:15:13.000]  Лог звездочка, это же вторая строчка.
[01:15:15.000 --> 01:15:18.000]  Ну, сейчас, там не всем так можно рассуждать, но, короче...
[01:15:18.000 --> 01:15:20.000]  А, нет, это... Что такое Альфа от НН?
[01:15:21.000 --> 01:15:22.000]  Это первый столбец.
[01:15:23.000 --> 01:15:24.000]  Так.
[01:15:24.000 --> 01:15:26.000]  Мы не совсем разговаривали, что первым столбцем происходит, но вроде, наверное, что-то быстрее.
[01:15:27.000 --> 01:15:28.000]  Нет, не совсем.
[01:15:29.000 --> 01:15:30.000]  Сейчас, подожди.
[01:15:31.000 --> 01:15:32.000]  Давай так.
[01:15:33.000 --> 01:15:34.000]  По определению пишем А от НН.
[01:15:35.000 --> 01:15:41.000]  Это минимальное И такое, что А от И, внимание, два, больше, чем логарифом два Н.
[01:15:42.000 --> 01:15:43.000]  Кажется, второй столбец растет два Н.
[01:15:43.000 --> 01:15:46.000]  Нет, второй столбец и первый столбец растут абсолютно одинаково.
[01:15:47.000 --> 01:15:49.000]  Это одно и то же, потому что с точностью до...
[01:15:50.000 --> 01:15:51.000]  Да, до И. Хорошо, да.
[01:15:52.000 --> 01:15:53.000]  Вот этого вот сдвига.
[01:15:54.000 --> 01:15:55.000]  Да.
[01:15:56.000 --> 01:15:57.000]  Ну, вот.
[01:15:58.000 --> 01:16:02.000]  То есть теперь, когда возникнет отдельная песня Шоэта, ну да, пока, конечно, похоже больше на...
[01:16:03.000 --> 01:16:04.000]  И на что?
[01:16:05.000 --> 01:16:06.000]  Ну да.
[01:16:06.000 --> 01:16:07.000]  Нет, почему?
[01:16:08.000 --> 01:16:10.000]  Нет, пока больше похоже действительно на то, что...
[01:16:11.000 --> 01:16:12.000]  Ну вот.
[01:16:13.000 --> 01:16:14.000]  Так, нет, ну да, лоб два Н.
[01:16:15.000 --> 01:16:19.000]  Нет, тут просто проблема такая, что у нас действительно определенная пашенка.
[01:16:20.000 --> 01:16:26.000]  Есть подозрение, что вряд ли тут будет в этом столбце что-то меньше, чем лоб два Н.
[01:16:27.000 --> 01:16:28.000]  Да.
[01:16:28.000 --> 01:16:29.000]  Есть?
[01:16:30.000 --> 01:16:31.000]  Есть у нас такое подозрение?
[01:16:32.000 --> 01:16:33.000]  Вот почему-то есть.
[01:16:34.000 --> 01:16:35.000]  Вот.
[01:16:37.000 --> 01:16:38.000]  Ну вот.
[01:16:39.000 --> 01:16:40.000]  И тогда получается, что...
[01:16:41.000 --> 01:16:44.000]  Да, поэтому лучше, наверное, написать петч или бараболок звездочка хотя бы.
[01:16:45.000 --> 01:16:47.000]  И уже не заморачиваться.
[01:16:48.000 --> 01:16:49.000]  Вот.
[01:16:50.000 --> 01:16:51.000]  Вот.
[01:16:52.000 --> 01:16:53.000]  Вот.
[01:16:54.000 --> 01:16:55.000]  Вот.
[01:16:56.000 --> 01:16:57.000]  Вот.
[01:16:58.000 --> 01:16:59.000]  Значит, далее.
[01:17:00.000 --> 01:17:06.000]  Ну а замечаем, что функция тут устроена так, что, соответственно, чем больше будет х, тем больше будет это число и, соответственно, чем и будет, на самом деле, даже меньше.
[01:17:07.000 --> 01:17:08.000]  Что интересно.
[01:17:09.000 --> 01:17:10.000]  Так.
[01:17:11.000 --> 01:17:12.000]  Ну вот.
[01:17:13.000 --> 01:17:14.000]  Ну ладно, значит, смотрите.
[01:17:15.000 --> 01:17:16.000]  То есть раз такая хорошая симптомика.
[01:17:17.000 --> 01:17:18.000]  К чему мы это все?
[01:17:19.000 --> 01:17:23.000]  Значит, как же можно было бы искать лца за адекватно...
[01:17:24.000 --> 01:17:34.000]  Вот хочется обработать m запросов за асимптотику вот m лцаша за m на вот эту же обратную функцию АК.
[01:17:36.000 --> 01:17:37.000]  Но с маленькой оговоркой.
[01:17:38.000 --> 01:17:40.000]  Мы это хотим сделать оффлайн.
[01:17:41.000 --> 01:17:44.000]  То есть там сразу данные вот m запросов, мы для каждого из них должны найти ответ.
[01:17:45.000 --> 01:17:48.000]  Но в каком порядке мы их будем искать, это глубоко наше личное дело.
[01:17:50.000 --> 01:17:51.000]  Вот.
[01:17:51.000 --> 01:17:52.000]  Ну как же это делать?
[01:17:53.000 --> 01:17:55.000]  Кстати, в качестве соц. запроса.
[01:17:56.000 --> 01:17:57.000]  А кто знает, кстати, как это делать?
[01:17:58.000 --> 01:18:01.000]  Я понимаю, что соц. запроса примерно в этом районе.
[01:18:02.000 --> 01:18:03.000]  А можно повторить, пожалуйста, что?
[01:18:04.000 --> 01:18:07.000]  Оффлайн лца за вот такую асимптотику, если в конце.
[01:18:08.000 --> 01:18:11.000]  То есть дано дерево и даны m запросов, заранее все данные.
[01:18:12.000 --> 01:18:16.000]  Хочется для каждого запроса найти лца и сделать это за вот такую асимптотику.
[01:18:17.000 --> 01:18:18.000]  Это статик.
[01:18:19.000 --> 01:18:22.000]  Мы можем решить за вот единица, а вот единица это вот эта штука.
[01:18:23.000 --> 01:18:24.000]  Да, мы умеем решать за вот единица, все, спасибо.
[01:18:25.000 --> 01:18:26.000]  А вот единица это вот эта штука и все.
[01:18:27.000 --> 01:18:29.000]  Ну давайте просто немножко поговорим на эту тему.
[01:18:30.000 --> 01:18:34.000]  Значит, как же это делать?
[01:18:35.000 --> 01:18:38.000]  Ну просто технология она может пригодится еще для непривианной задачи.
[01:18:39.000 --> 01:18:42.000]  Поэтому обычно работаем мы по следующему принципу.
[01:18:43.000 --> 01:18:45.000]  То есть вот у нас есть мистическое дерево.
[01:18:46.000 --> 01:18:54.000]  Ну вот, мы в каждой вершине записываем с какими запросами она связана.
[01:18:57.000 --> 01:18:59.000]  Вот с какими запросами она там связана.
[01:19:00.000 --> 01:19:05.000]  То есть у каждой вершины там есть какой-то набор запросов и при этом каждый запрос связан только с двумя вершинами.
[01:19:07.000 --> 01:19:11.000]  И мистическая идея заключается в следующем.
[01:19:12.000 --> 01:19:13.000]  Значит, смотрите.
[01:19:14.000 --> 01:19:25.000]  Мы заведем SNM и будем запускать DFS, целью которого будет объединить все вершины в под дерево.
[01:19:29.000 --> 01:19:31.000]  То есть суть будет примерно следующая.
[01:19:32.000 --> 01:19:38.000]  То есть мы запустим DFS, запускаем, запускаем и вот из этой вершины возвращаем множество из нее любимых.
[01:19:42.000 --> 01:19:50.000]  А из этой вершины мы возвращаем множество уже из всех этих трех вершин.
[01:19:51.000 --> 01:19:52.000]  Ну и так далее.
[01:19:53.000 --> 01:19:57.000]  То есть в каждый момент времени в зависимости от того, до куда мы вот дошли.
[01:19:58.000 --> 01:20:01.000]  Тут будет пум, пум, пум, потом пум, ну и так далее.
[01:20:05.000 --> 01:20:07.000]  Значит, при чем тут LCA?
[01:20:08.000 --> 01:20:09.000]  А вот при чем.
[01:20:09.000 --> 01:20:11.000]  Самое важное, что мы будем делать в SNM.
[01:20:12.000 --> 01:20:13.000]  Да, мы делаем SNM.
[01:20:13.000 --> 01:20:15.000]  Но самое главное, в каждом множестве.
[01:20:15.000 --> 01:20:17.000]  Ну например, в каждом корне этого множества.
[01:20:18.000 --> 01:20:21.000]  Да, обратите внимание, корень множества может отличаться от корня под дерево.
[01:20:22.000 --> 01:20:22.500]  Понимаете, да?
[01:20:24.000 --> 01:20:25.000]  Ну почему он может отличаться?
[01:20:25.500 --> 01:20:34.000]  Потому что, когда мы там захотим подвесить, скажем, множество из этой вершины к множеству, множество из этой вершины к множеству из этой вершины, то наверное мы скорее эту сюда подвесим, чем эту сюда.
[01:20:37.000 --> 01:20:37.500]  Ну вот.
[01:20:37.500 --> 01:20:43.000]  Тем не менее, ссылку на того, кто тут корни под деревом, мы хранить явно в виде мужа.
[01:20:44.500 --> 01:20:47.000]  И тогда будет идея такая.
[01:20:49.000 --> 01:20:56.500]  В этом всём процессе мы, когда приходим в вершину, ни в коем случае не забываем о запросах, которые с ней связаны.
[01:20:58.000 --> 01:21:03.000]  И в каждом запросе мы храним, а сколько вершин из этого запроса мы уже помедали.
[01:21:04.500 --> 01:21:07.000]  Вот, допустим, у нас есть запрос из двух вершин.
[01:21:07.000 --> 01:21:11.500]  И вот, допустим, шёл ДФС и зашёл в какую-то из этих вершин.
[01:21:13.000 --> 01:21:15.500]  В этом месте мы просто говорим, угу.
[01:21:17.000 --> 01:21:22.500]  Просто тупо ставим галочку, что в этом запросе, осторожно, одна вершина уже была найдена.
[01:21:23.000 --> 01:21:24.500]  Вот, понимаете, да?
[01:21:25.500 --> 01:21:26.500]  Вот.
[01:21:28.500 --> 01:21:35.000]  А теперь предполагаю, когда мы пришли во вторую вершину, то есть мы тоже там смотрим запрос, говорим, ой, это уже вторая вершина запроса.
[01:21:36.000 --> 01:21:46.000]  То теперь я утверждаю, что мы, в принципе, за у от единицы можем прямо сейчас найти лца этих двух вершин.
[01:21:48.500 --> 01:21:49.500]  Почему-то.
[01:21:51.500 --> 01:21:52.500]  А вот почему.
[01:21:54.000 --> 01:21:55.000]  Значит, смотрите.
[01:21:56.000 --> 01:22:00.000]  Потому что вот предположим, что вот эта вершина была у, а эта вершина была w.
[01:22:01.000 --> 01:22:01.500]  Да?
[01:22:02.000 --> 01:22:04.000]  Вот первая мы галочку поставили в u, и тут w.
[01:22:04.000 --> 01:22:06.000]  Это значит, что ДФС был устроен так.
[01:22:07.000 --> 01:22:11.000]  Вот у нас есть корень, и мы дошли до вершины w.
[01:22:12.000 --> 01:22:13.000]  Видите, да?
[01:22:14.000 --> 01:22:15.000]  Вот.
[01:22:16.000 --> 01:22:17.000]  Дошли до вершины w.
[01:22:18.000 --> 01:22:27.000]  И, значит, где-то в общем случае, значит, и где-то тут у нас были какие-то, вот слева есть какие-то под деревья, и справа какие-то под деревья.
[01:22:28.000 --> 01:22:30.000]  Чем отличаются под деревья слева, под деревья справа.
[01:22:30.000 --> 01:22:33.000]  Ну, по традиции то, что слева это мы уже обошли, а то, что справа еще не обошли.
[01:22:34.000 --> 01:22:35.000]  Ну, это мы так всегда рисуем, да?
[01:22:36.000 --> 01:22:43.000]  Но самое главное, что где-то в этих под деревьях, где-то в этих под деревьях, вот.
[01:22:44.000 --> 01:22:45.000]  Да, вот обратите внимание, да?
[01:22:46.000 --> 01:22:50.000]  То есть сами вершины по нашему определению пока еще как бы не объединены вот с этими, да?
[01:22:51.000 --> 01:22:54.000]  То есть это мы там, ну там, в зависимости от реализации.
[01:22:55.000 --> 01:22:57.000]  Ну, пока мы как бы только в конце это будем делать.
[01:22:57.000 --> 01:22:58.000]  Вот.
[01:22:59.000 --> 01:23:00.000]  Но у нас действительно что мы имеем?
[01:23:01.000 --> 01:23:02.000]  То есть у нас есть вот какие-то под деревья висящие.
[01:23:03.000 --> 01:23:09.000]  И самое главное, на самой вершине w, в самом, тоже мы уже запустились от ее детей, и тоже тут все эти под деревья объединены.
[01:23:10.000 --> 01:23:16.000]  И мы знаем, что вершина u висит где-то вот в одном из этих под деревьев.
[01:23:19.000 --> 01:23:22.000]  Но я утверждаю, что LSI теперь найти очень просто.
[01:23:22.000 --> 01:23:25.000]  Надо просто найти корень под дерево, это u, в котором она висит.
[01:23:26.000 --> 01:23:27.000]  То есть с помощью SNM-ки мы это уже сделали.
[01:23:28.000 --> 01:23:32.000]  Взять родителя этого корня, и этот родитель и будет вот Сашкой.
[01:23:33.000 --> 01:23:34.000]  Все.
[01:23:35.000 --> 01:23:36.000]  Ну, с оговоркой.
[01:23:37.000 --> 01:23:40.000]  Если, конечно, не окажется, что вершина u просто лежала на этом пути.
[01:23:41.000 --> 01:23:42.000]  Ну, подобные вещи.
[01:23:43.000 --> 01:23:44.000]  Ну, тут два варианта.
[01:23:45.000 --> 01:23:48.000]  Во-первых, подобные вещи мы с точки зрения теории так уже легко умеем проверять за вот единица.
[01:23:49.000 --> 01:23:53.000]  А во-вторых, на самом деле можно просто поправить немножко реализацию.
[01:23:54.000 --> 01:23:56.000]  То есть реализацию можно сделать так.
[01:23:57.000 --> 01:24:02.000]  То есть реализация будет так, что когда мы находимся в вершине, мы говорим так, вот у меня есть множество из себя любимых.
[01:24:03.000 --> 01:24:11.000]  И теперь говорим, запускаем DFS, вот запустились от ребеночка, вернули множество и объединились быстренько.
[01:24:12.000 --> 01:24:17.000]  Потом пошли с соседнего ребеночка и с ним тоже объединились и так далее.
[01:24:18.000 --> 01:24:25.000]  И тогда окажется, что тут на самом деле уже просто можно обратиться в корень этого поддерева и это и будет S&M.
[01:24:26.000 --> 01:24:28.000]  То есть это, кстати, сработает и в том случае, когда u была потомком.
[01:24:31.000 --> 01:24:33.000]  Так что вот получается вот такая идея.
[01:24:34.000 --> 01:24:35.000]  Понятная идея?
[01:24:36.000 --> 01:24:37.000]  То есть просто DFS и S&M еще.
[01:24:38.000 --> 01:24:45.000]  Ну да, то есть, ну, да, DFS, S&M, который вот, который вершина объединяет со всеми ее потомками.
[01:24:45.000 --> 01:24:46.000]  Вот.
[01:24:47.000 --> 01:24:50.000]  Ну и для каждого запроса еще хранить сколько вершин мы в нем обошли.
[01:24:51.000 --> 01:24:54.000]  И еще мы в S&M храним корень дерева, потому что мы не можем...
[01:24:55.000 --> 01:24:56.000]  Да.
[01:24:57.000 --> 01:25:03.000]  Да, и ваша оговорочка, что корень в S&M и корень под дерево, который в этом S&M хранится, это две большие разницы.
[01:25:04.000 --> 01:25:16.000]  Поэтому в корне под дерево, то есть в корне дерева S&M, в корне дерева S&M мы храним, собственно, храним, собственно, кто там был реальным корнем под дерево.
[01:25:17.000 --> 01:25:21.000]  То есть надо просто помнить, что это надо делать, потому что поддерживать вы это можете без труда, естественно.
[01:25:22.000 --> 01:25:23.000]  Вот.
[01:25:24.000 --> 01:25:25.000]  Ну, собственно, это одна.
[01:25:26.000 --> 01:25:28.000]  То есть это теперь дает вам возможность подвешивать к меньшему дереву больше.
[01:25:28.000 --> 01:25:35.000]  И, соответственно, гарантировать, что тогда, действительно, все там сжатия путей внутри у вас будут за такого красивого керма.
[01:25:37.000 --> 01:25:42.000]  С точки зрения практики, на самом деле, не важно, кого за что подвешивает сжатие путей.
[01:25:43.000 --> 01:25:45.000]  Делает так, что ощущение, что вы должны дымиться.
[01:25:46.000 --> 01:25:47.000]  Э-э-э...
[01:25:48.000 --> 01:25:49.000]  Ну, вот именно, что ощущение.
[01:25:50.000 --> 01:25:53.000]  Ну, в смысле, существует одна задача на все вот это вот.
[01:25:53.000 --> 01:25:55.000]  Вот это вот в раме олимпиадной практики.
[01:25:56.000 --> 01:25:57.000]  Там действует восьмой запросов.
[01:25:58.000 --> 01:25:59.000]  Два действует восьмой запросов.
[01:26:00.000 --> 01:26:02.000]  И там еврестика рамков замедляет решение, а не ускоряет.
[01:26:03.000 --> 01:26:04.000]  Ох ты, красиво.
[01:26:05.000 --> 01:26:07.000]  Точно уверена, что это не в тестах дело.
[01:26:08.000 --> 01:26:11.000]  Ну, я думаю, там тестами постарались.
[01:26:12.000 --> 01:26:13.000]  Возможно, да.
[01:26:14.000 --> 01:26:15.000]  Но тут надо уже смотреть.
[01:26:16.000 --> 01:26:18.000]  Нет, ну, правда, нет, мечта, конечно, есть, но тут просто одна.
[01:26:18.000 --> 01:26:23.000]  То есть, с точки зрения олимпиадной практики, как мы уже выяснили, там это альфа, все равно двойка.
[01:26:24.000 --> 01:26:25.000]  Ну да.
[01:26:26.000 --> 01:26:27.000]  Так что, в общем-то...
[01:26:28.000 --> 01:26:29.000]  То есть, это...
[01:26:30.000 --> 01:26:34.000]  Я не знаю, когда человечество дорастет до того момента, когда оно поймет, что это все-таки не константа.
[01:26:35.000 --> 01:26:37.000]  То есть, он будет это ощущать на практике.
[01:26:38.000 --> 01:26:39.000]  Ну, примерно никогда.
[01:26:40.000 --> 01:26:41.000]  Возможно, да.
[01:26:42.000 --> 01:26:43.000]  Ну, это называется оффлайн олца.
[01:26:44.000 --> 01:26:46.000]  Это один из вот таких классических алгоритмов.
[01:26:46.000 --> 01:26:48.000]  Но его, если мы верим в SNM, то можно реализовать.
[01:26:50.000 --> 01:26:51.000]  Вот.
[01:26:52.000 --> 01:26:53.000]  Но на самом деле...
[01:26:54.000 --> 01:26:58.000]  Но это, заметим, что SNM реализуется с помощью просто эволинка и вообще без апдейтов.
[01:27:00.000 --> 01:27:04.000]  А вот, например, если реализовать...
[01:27:05.000 --> 01:27:11.000]  А вот на самом деле было бы круто реализовать эволинк апдейт, где быть равен минимуму.
[01:27:12.000 --> 01:27:13.000]  Или максимуму.
[01:27:16.000 --> 01:27:17.000]  Вот.
[01:27:18.000 --> 01:27:20.000]  Но здесь, правда, вытекает маленькая проблема.
[01:27:21.000 --> 01:27:24.000]  Мы там хотим получать минимум на пути до корни?
[01:27:25.000 --> 01:27:26.000]  Да.
[01:27:27.000 --> 01:27:28.000]  Ну, там, да.
[01:27:29.000 --> 01:27:30.000]  Определение в самом начале точно и было, что мы хотим.
[01:27:31.000 --> 01:27:32.000]  Да.
[01:27:33.000 --> 01:27:34.000]  Ну, неважно.
[01:27:35.000 --> 01:27:36.000]  Но в данном случае, да.
[01:27:37.000 --> 01:27:39.000]  Но заметим, что если мы научимся делать минимум, да...
[01:27:40.000 --> 01:27:41.000]  То...
[01:27:42.000 --> 01:27:43.000]  То есть, научимся как-то минимум.
[01:27:43.000 --> 01:27:45.000]  Но нам удастся, на самом деле, решать еще какие...
[01:27:46.000 --> 01:27:48.000]  Ну, какие нам задачи тогда мы научимся решать.
[01:27:49.000 --> 01:27:53.000]  Ну, как мы в прошлый раз выяснили, дерево доминаторов мы научимся вот такую симпатику делать.
[01:27:54.000 --> 01:27:57.000]  Потому что, как вы помните, у нас алгоритм свелся к...
[01:27:58.000 --> 01:27:59.000]  Там просто к...
[01:28:00.000 --> 01:28:03.000]  Там некоторым просто количеством ОАТМ запросом, там, вот, чьи-то.
[01:28:04.000 --> 01:28:05.000]  Там в них надо было минимумы искать.
[01:28:06.000 --> 01:28:07.000]  Помните, да?
[01:28:08.000 --> 01:28:09.000]  Вот.
[01:28:09.000 --> 01:28:10.000]  Вот.
[01:28:11.000 --> 01:28:13.000]  Правда, обратите внимание, что интересно, там тоже не было апдейтов.
[01:28:14.000 --> 01:28:16.000]  Там, по факту, у каждой вершины мы определяем функцию.
[01:28:17.000 --> 01:28:20.000]  И, собственно, когда она вообще появляется в игре, там у нее уже написано, к чему она равна.
[01:28:21.000 --> 01:28:22.000]  И она равна навсегда.
[01:28:24.000 --> 01:28:25.000]  Так, помните, было дело.
[01:28:28.000 --> 01:28:30.000]  Да, у вас, конечно, чуть больше, чем на прошлой лекции, но все.
[01:28:33.000 --> 01:28:34.000]  Чуть-чуть.
[01:28:34.000 --> 01:28:35.000]  Вот.
[01:28:36.000 --> 01:28:38.000]  Но дерево доминаторов это даже еще...
[01:28:39.000 --> 01:28:40.000]  Ну, вот.
[01:28:41.000 --> 01:28:42.000]  То есть это еще не единственный пример.
[01:28:43.000 --> 01:28:46.000]  Потому что, на самом деле, есть еще такая нетривиальная задача.
[01:28:47.000 --> 01:28:48.000]  Дан граф.
[01:28:49.000 --> 01:28:50.000]  И дана стов.
[01:28:51.000 --> 01:28:53.000]  Внимание, вопрос.
[01:28:54.000 --> 01:28:56.000]  А это стов минимальный или нет?
[01:28:56.000 --> 01:28:57.000]  Вау.
[01:29:00.000 --> 01:29:01.000]  Вау.
[01:29:03.000 --> 01:29:05.000]  Можно управлять, что любой лектор не гном.
[01:29:06.000 --> 01:29:07.000]  Да.
[01:29:08.000 --> 01:29:09.000]  Оно хотя бы...
[01:29:10.000 --> 01:29:11.000]  Да.
[01:29:12.000 --> 01:29:14.000]  То есть, действительно, основная идея, действительно, у нас есть...
[01:29:15.000 --> 01:29:18.000]  Если вспомнить, вернуться немножко к теории миностолов,
[01:29:19.000 --> 01:29:21.000]  ну, конечно, раз уж мы говорим, нельзя не упомянуть алгоритм.
[01:29:22.000 --> 01:29:24.000]  Ну, во-первых, нельзя не упомянуть алгоритм краска, давайте сначала начнем.
[01:29:24.000 --> 01:29:25.000]  Да?
[01:29:26.000 --> 01:29:27.000]  А то мы...
[01:29:28.000 --> 01:29:29.000]  А то мы такие дурачки.
[01:29:30.000 --> 01:29:31.000]  Мы это, миностолов только примом умеем искать.
[01:29:32.000 --> 01:29:35.000]  Да, зато, правда, крутым правдейчином с кучей фибоначи и атомик-сипом.
[01:29:36.000 --> 01:29:38.000]  Да, фибоначи у кучи с огромной константом.
[01:29:39.000 --> 01:29:40.000]  Ну, вот.
[01:29:41.000 --> 01:29:42.000]  А потом с атомик-сипом.
[01:29:43.000 --> 01:29:44.000]  А краскала мы не знаем.
[01:29:45.000 --> 01:29:46.000]  Но краскала...
[01:29:47.000 --> 01:29:48.000]  Ну, в данном случае, да.
[01:29:49.000 --> 01:29:50.000]  Что предлагает алгоритм краскала, если так кратко сказать.
[01:29:51.000 --> 01:29:52.000]  Он предлагает там использовать миностолов...
[01:29:52.000 --> 01:29:55.000]  То есть использовать лему о безопасном ребре по принципу,
[01:29:56.000 --> 01:29:57.000]  а давайте просто добавлять на столов минимальное ребро,
[01:29:58.000 --> 01:29:59.000]  которое мы в общем можем добавить.
[01:30:00.000 --> 01:30:02.000]  То есть просто вот, у нас в каждый момент времени есть какое-то поддерево,
[01:30:03.000 --> 01:30:04.000]  даже не под дерево, а несколько там компонент,
[01:30:05.000 --> 01:30:06.000]  некоторые вершины отдельно.
[01:30:07.000 --> 01:30:08.000]  И давайте просто говорим, что,
[01:30:09.000 --> 01:30:11.000]  давайте там найдем просто минимальное ребро,
[01:30:12.000 --> 01:30:13.000]  которое вообще соединяет две разные компоненты
[01:30:14.000 --> 01:30:16.000]  и говорим, вот давайте его добавим.
[01:30:17.000 --> 01:30:19.000]  Ну, лемми о безопасном ребре,
[01:30:19.000 --> 01:30:22.460]  о безопасном ребре она же теперь разреза удовлетворяет потому что можно
[01:30:22.460 --> 01:30:26.420]  рассмотреть разрез вот например вот такой
[01:30:31.420 --> 01:30:35.680]  ну не судим да то есть возможно вы сейчас может не помните что такое лемма о безопасном
[01:30:35.680 --> 01:30:43.800]  ребре или погреб не это ладно ну вот но это как с минусом как ценност основу
[01:30:43.800 --> 01:30:48.080]  который нам дает но сейчас погребет но я не то я просто тут сошел что мы говорим
[01:30:48.080 --> 01:30:52.520]  эсэнэмэ то нельзя уже не упоминать об алгоритме краскала но то есть алгоритм да то
[01:30:52.520 --> 01:30:55.920]  есть это сводится к чему то есть это сводится к то есть алгоритм краскала в этом
[01:30:55.920 --> 01:31:00.960]  месте просто теперь предлагает так а давайте тупо отсортируем ребра по весу вот
[01:31:00.960 --> 01:31:06.680]  возьмем отсортируем а потом прибежимся по отсортированному списку и будем прям
[01:31:06.680 --> 01:31:12.040]  тыкать и будем там прям все добавлять то есть мы будем добавить пока же ребра
[01:31:12.040 --> 01:31:15.680]  говорить так если мы его можем добавить во стоп то есть она там цикл не стянет то мы
[01:31:15.680 --> 01:31:23.760]  его добавим вот это будет работать за сколько ну это будет работать за сортирую
[01:31:23.760 --> 01:31:29.040]  вот так ссортировку от мрюбер плюс
[01:31:29.040 --> 01:31:38.680]  плюс ну вот ну плюс ну плюс ну и здесь я утверждаю что это будет просто плюс м
[01:31:38.680 --> 01:31:44.480]  плюс м в общем на на ну фактически на альфа от м плюс сэнэмэ
[01:31:46.000 --> 01:31:51.760]  идея просто ну потому что все эти компоненты мы будем ходить тупо в
[01:31:51.760 --> 01:32:00.360]  сэнэмэ ну тут по разному как вы помните на самом деле мы ухитрились там вообще была
[01:32:00.360 --> 01:32:06.440]  помнится черная магия что когда мы когда у нас тут были целые числа мы вот по
[01:32:06.440 --> 01:32:09.760]  моему вот эту вот часть вообще по моему научились о вот это делать если я правильно
[01:32:09.760 --> 01:32:23.240]  было у нас было у нас от алексии ну правда а про там сортировки не было там не было
[01:32:23.240 --> 01:32:28.120]  там не было краскала там был другой алгоритм какие-то дикие штуки типа давайте
[01:32:28.120 --> 01:32:36.800]  строить меня стоп не не там не там другой метод был там был ограниченный прим в духе что давайте
[01:32:36.800 --> 01:32:44.240]  там то есть там давайте возьмем вершину и будем делать прима но не до бесконечности а пока у
[01:32:44.240 --> 01:32:54.960]  нас там не до количества вершин не станет что-то типа к но да то есть сначала фред монтарья мы
[01:32:54.960 --> 01:33:01.280]  выяснили что он с кучей фибоначи имеет там а симптотику там типа называется какую-то
[01:33:01.280 --> 01:33:07.120]  м лог звездочка n или даже там при достаточно больших м вообще просто золотые а потом
[01:33:07.120 --> 01:33:15.680]  но но но но там обнаружилось просто все за счет того что кара но там сначала два сначала там
[01:33:15.680 --> 01:33:21.120]  2 м поделить на n потом 2 в степени 2 м поделить на н потом 2 в степени 2 в степени 2 поделить на
[01:33:21.120 --> 01:33:27.360]  н и так далее и там вот с кучей фибоначи складывается а потом выяснилось что есть атомик хип
[01:33:28.120 --> 01:33:34.040]  который все доставания не делает не за логарифом а за логарифом поделить на логарифом логарифа и
[01:33:34.040 --> 01:33:39.440]  выяснилось что там к можно вообще подогнать просто вот сделать там операцию что типа
[01:33:39.440 --> 01:33:45.240]  первая кара было 2 в степени 2 м поделить на н а вторую уже не заморачиваем все и и обнаружило
[01:33:45.240 --> 01:33:51.280]  что там обе там обе террации работают заряд поэтому оказывалось что если вы то есть
[01:33:51.280 --> 01:34:04.280]  То есть, оказывалось, что там просто, если вы веса ребер умеете заранее посортировать и заменить на числа там, скажем, от 1 до n, то тогда оказывалось, что у вас называется просто линейный алгоритм построения дерева.
[01:34:06.280 --> 01:34:09.280]  Так, ну это было из разряда, краткое содержание предыдущих серий.
[01:34:11.280 --> 01:34:14.280]  Да, тем более что атомик хипа, к сожалению, так и не добили.
[01:34:16.280 --> 01:34:19.280]  Ну и ладно, не буду сейчас рассказывать все перепитие атомик хипа.
[01:34:19.280 --> 01:34:21.280]  Не надо, это флешбейки очень много.
[01:34:23.280 --> 01:34:25.280]  Ну вот, это тоже было больно.
[01:34:27.280 --> 01:34:29.280]  Так вот, тогда это было так.
[01:34:30.280 --> 01:34:35.280]  В данном случае мы не паримся, в данном случае у нас просто оказывается, что узким местом оказывается сортировка ребер.
[01:34:36.280 --> 01:34:45.280]  То есть, по большому счету все за сортировку ребер, а так мы в общем-то, в общем случае, мы целый чисел, даже вроде как за линию сортировать не умеем на самом деле.
[01:34:46.280 --> 01:34:53.280]  Ну, если это целые бейбитные числа, вот эти вот в нашей рам-модели.
[01:34:54.280 --> 01:34:57.280]  То есть, наука пока еще не умеет этого делать за линию.
[01:34:58.280 --> 01:35:01.280]  То есть, она закроет там m log log m, она это сделает.
[01:35:02.280 --> 01:35:04.280]  Вот, ну вроде пока не больше.
[01:35:05.280 --> 01:35:06.280]  Тоже не плохо.
[01:35:07.280 --> 01:35:08.280]  Чего?
[01:35:08.280 --> 01:35:09.280]  Тоже не плохо.
[01:35:09.280 --> 01:35:10.280]  На самом деле да.
[01:35:10.280 --> 01:35:17.280]  Ну тут как всегда, потому что часто бывает, что ребра нам даются уже в каком-то отсортированном виде, поэтому если они отсортированы, то вот, пожалуйста.
[01:35:18.280 --> 01:35:26.280]  Ну, отдельная песня, что, как я уже сказал, на самом деле с помощью софтхипа можно просто выкинуть эту сортировку и просто все сделать за эту асинтутику.
[01:35:28.280 --> 01:35:34.280]  Типа, а n еще можно убить по той простой причине, что когда мы ищем м на 100, то m это как минимум n-1.
[01:35:35.280 --> 01:35:36.280]  Вот.
[01:35:37.280 --> 01:35:43.280]  Но это уже там отдельная песня, хотя надо бы ее тоже, наверное, петь, потому что мы зря софтхип изучали, что ли.
[01:35:44.280 --> 01:35:45.280]  Вот.
[01:35:46.280 --> 01:35:49.280]  А то я сейчас скажу, слета я даже не помню, а если у него другие применения у этого софтхипа.
[01:35:51.280 --> 01:35:52.280]  Ну, как вас...
[01:35:53.280 --> 01:35:54.280]  Вот.
[01:35:54.280 --> 01:35:55.280]  Да, реально.
[01:35:56.280 --> 01:35:57.280]  Близкие сортировки.
[01:35:57.280 --> 01:35:58.280]  Да, но, значит, да.
[01:35:58.280 --> 01:36:02.280]  Значит, хорошо, краскалы обсудили, да, тут все понятно.
[01:36:02.280 --> 01:36:04.280]  Поговорили, значит, это было...
[01:36:05.280 --> 01:36:09.280]  А теперь вернемся, значит, к задаче, что теперь у нас такая более быстрая задача.
[01:36:10.280 --> 01:36:15.280]  То есть хотя бы для разминочки, то есть дан астов, скажите, пожалуйста, минимален ли он.
[01:36:16.280 --> 01:36:17.280]  Да или нет.
[01:36:19.280 --> 01:36:24.280]  Ну, и здесь тоже есть, честно скажем, не идеальность с точки зрения современной науки алгоритм.
[01:36:27.280 --> 01:36:29.280]  Ну, хотя нет, ну вот.
[01:36:29.280 --> 01:36:33.280]  Нет, ну, просто сейчас наш алгоритм будет работать за вот М на альфа.
[01:36:37.280 --> 01:36:39.280]  Просто есть алгоритм, который за М плюс С работает.
[01:36:41.280 --> 01:36:43.280]  Да, пока его оставят в стороне, совершенно верно.
[01:36:44.280 --> 01:36:48.280]  Хотя там в вероятностных алгоритмах на него как минимум ссылка будет.
[01:36:50.280 --> 01:36:51.280]  Вот.
[01:36:51.280 --> 01:36:52.280]  Ну, а смотрите, просто к чему.
[01:36:53.280 --> 01:36:54.280]  В чем устроен этот алгоритм?
[01:36:55.280 --> 01:36:56.280]  В чем устроен этот алгоритм?
[01:36:56.280 --> 01:36:57.280]  Ну, а смотрите, просто к чему.
[01:36:58.280 --> 01:36:59.280]  В чем устроен этот алгоритм?
[01:37:00.280 --> 01:37:02.280]  Потому что в миностолах есть мистическая теорема.
[01:37:04.280 --> 01:37:06.280]  В вашем задании тоже есть.
[01:37:11.280 --> 01:37:13.280]  Оно как бы есть.
[01:37:14.280 --> 01:37:22.280]  Но там, да, но теорема звучит так, что астов является, вот рассмотрим, пусть у нас есть граф и в нем есть астов.
[01:37:23.280 --> 01:37:39.280]  Так вот, астов является минимальным тогда и только тогда, когда любое ребро не из астова, значит, стягивает, соответственно, в этом астове цикл.
[01:37:40.280 --> 01:37:42.280]  Ну, в общем, это не утверждение.
[01:37:43.280 --> 01:37:49.280]  И при этом вес этого ребра оказывается больше либо равен веса любого из ребер.
[01:37:49.280 --> 01:37:53.280]  То есть любого из ребер на этом стянутом цикле.
[01:37:58.280 --> 01:38:06.280]  Ну, то есть, условно, если у него там вес, скажем, 12, то тут могут быть веса 8, могут быть 11, могут быть 0, может быть 3, может быть там минус 6.
[01:38:07.280 --> 01:38:10.280]  Вот, но 13 быть не может.
[01:38:11.280 --> 01:38:13.280]  Ну, сейчас, можно определить?
[01:38:14.280 --> 01:38:16.280]  Формально определить.
[01:38:17.280 --> 01:38:24.280]  Значит, формально так, каждое ребро не из астова стягивает в астове цикл.
[01:38:25.280 --> 01:38:34.280]  Формальное определение таково, что если это ребро УВ, то стянутый цикл это путь в дереве от УДВ, ну, это единственный путь у такой есть.
[01:38:35.280 --> 01:38:37.280]  К которому добавили ребро УВ.
[01:38:37.280 --> 01:38:41.280]  Это вот формальное определение стянутого, то есть того, что ребро стягивает цикл.
[01:38:43.280 --> 01:38:57.280]  Так вот, заметим, что необходимым условием, то есть для того, чтобы это был минимальный астов, является тот факт, что какое бы мы ребро вот это ни из астова не взяли, оно должно оказаться максимумом на стянутом астове цикле, правда?
[01:38:58.280 --> 01:39:00.280]  Ну, действительно, если тут скажем...
[01:39:00.280 --> 01:39:02.280]  Ну, действительно, если тут скажем...
[01:39:03.280 --> 01:39:09.280]  Если где-нибудь вот тут оказалась соточка, то мы можем просто вытянуть эту соточку и добавить 12.
[01:39:10.280 --> 01:39:12.280]  И астов от этого только уменьшится, правда?
[01:39:13.280 --> 01:39:14.280]  Вот.
[01:39:15.280 --> 01:39:16.280]  Так вот, но есть более...
[01:39:17.280 --> 01:39:19.280]  Но это говорит о том, что это необходимые условия.
[01:39:20.280 --> 01:39:22.280]  То есть необходимо, чтобы любое ребро было максимумом на стянутом цикле.
[01:39:23.280 --> 01:39:26.280]  Но более сложное утверждение утверждает о том, что это и достаточно.
[01:39:27.280 --> 01:39:28.280]  Что этого и достаточно.
[01:39:28.280 --> 01:39:34.280]  То есть если вы вот так астов улучшить не можете, значит вы его не можете улучшить в принципе.
[01:39:40.280 --> 01:39:41.280]  Вот.
[01:39:42.280 --> 01:39:43.280]  То есть вот такая теорема есть.
[01:39:44.280 --> 01:39:47.280]  И это, ну, теорема, если речь критерий.
[01:39:48.280 --> 01:39:50.280]  И что нам этот критерий дает?
[01:39:52.280 --> 01:39:57.280]  То есть теперь тогда получается, что, чтобы проверить является ли заданный астов минимальным,
[01:39:58.280 --> 01:40:03.280]  нам просто нужно проверить, а не является ли, соответственно...
[01:40:04.280 --> 01:40:09.280]  То есть для каждого ребра проверить, а является ли оно максимумом на стянутом цикле.
[01:40:11.280 --> 01:40:12.280]  Понимаете, да?
[01:40:13.280 --> 01:40:14.280]  Вот.
[01:40:16.280 --> 01:40:18.280]  Но тогда идея, оказывается, такая.
[01:40:19.280 --> 01:40:23.280]  Предположим, что мы умеем...
[01:40:24.280 --> 01:40:26.280]  Значит, эту задачу мы сведем к...
[01:40:26.280 --> 01:40:27.280]  Я так напишу.
[01:40:28.280 --> 01:40:35.280]  evil link update с минимумом.
[01:40:38.280 --> 01:40:40.280]  Ну, то есть операция уйти это минимум.
[01:40:44.280 --> 01:40:48.280]  Предположим, что мы каким-то мистическим образом научились ее делать за альфа.
[01:40:49.280 --> 01:40:51.280]  Хотя заметим, что по умолчанию, кстати, это не так просто.
[01:40:51.280 --> 01:41:01.280]  Потому что, как можно легко будет убедиться, вы, когда будете подвешивать деревья, вы там не сможете сказать, что, ой, если мы вмешиваем большое к меньшему, давайте вмешиваем к меньшему к большему и скажем, что так и было.
[01:41:02.280 --> 01:41:03.280]  Вот.
[01:41:04.280 --> 01:41:07.280]  Там будет эта вообще отдельная заподробительная песня, как это делать будет.
[01:41:08.280 --> 01:41:10.280]  Вот. Так, чтобы было хорошо.
[01:41:11.280 --> 01:41:15.280]  Но если мы научимся это каким-то образом делать,
[01:41:16.280 --> 01:41:19.280]  то тогда смотрите, что нас ждет.
[01:41:19.280 --> 01:41:25.280]  Тогда я утверждаю, что алгоритм проверки будет работать просто аналогично алгоритму поиска ЛЦА оффлайне.
[01:41:26.280 --> 01:41:30.280]  Ну, заметим, что нам для каждого ребра нужно проверить минимум на стянутом цикле, правда?
[01:41:31.280 --> 01:41:32.280]  Вот. Согласны?
[01:41:33.280 --> 01:41:34.280]  Согласны?
[01:41:35.280 --> 01:41:36.280]  Да, нет, наверное.
[01:41:37.280 --> 01:41:38.280]  Есть кто живой?
[01:41:39.280 --> 01:41:40.280]  Да.
[01:41:41.280 --> 01:41:42.280]  Вот.
[01:41:43.280 --> 01:41:44.280]  Или пока все просто.
[01:41:44.280 --> 01:41:45.280]  А аналогия?
[01:41:46.280 --> 01:41:47.280]  А аналогия вот в чем.
[01:41:48.280 --> 01:41:49.280]  Смотрите.
[01:41:49.280 --> 01:41:52.280]  Рассмотрим, представим себе, что наш этот остов еще и подвешенный, да?
[01:41:53.280 --> 01:41:54.280]  Ну, то есть просто подвесим?
[01:41:55.280 --> 01:41:56.280]  Да.
[01:41:56.280 --> 01:41:59.280]  Ну, просто подвесим, как всегда, за любую вершину.
[01:42:00.280 --> 01:42:01.280]  Ну да.
[01:42:02.280 --> 01:42:03.280]  Ну или там за 57.
[01:42:04.280 --> 01:42:05.280]  57.
[01:42:06.280 --> 01:42:08.280]  Чтобы напакостить авторам тестов.
[01:42:09.280 --> 01:42:10.280]  Ну да.
[01:42:11.280 --> 01:42:17.280]  А то знаете, как бывает, вы там, напишите там какие-нибудь хэши бабахвы, а мы поменяли модуль там миллиард семь на миллиард девять и получили окей.
[01:42:18.280 --> 01:42:20.280]  Ну это какие-то авторы очень слабенькие.
[01:42:21.280 --> 01:42:22.280]  Ну я их взял, нет?
[01:42:23.280 --> 01:42:24.280]  Нет.
[01:42:25.280 --> 01:42:27.280]  Ну это странно, если я автор пишу, они один модуль завалили, а другой нет.
[01:42:28.280 --> 01:42:29.280]  Нужно, чтобы десять модулей писали.
[01:42:30.280 --> 01:42:31.280]  Ага.
[01:42:32.280 --> 01:42:34.280]  Ну, там это уже может ПТЛ, он там просто...
[01:42:35.280 --> 01:42:38.280]  Обычно просто не принято так валить, потому что, как бы, вы всем, все модули в принятость.
[01:42:38.280 --> 01:42:39.280]  Вы не завалите.
[01:42:40.280 --> 01:42:45.280]  Поэтому, как бы, надо, потому что надо же, как бы, либо, либо валить все модули, либо валить, либо не валить ни один.
[01:42:46.280 --> 01:42:47.280]  Ну ближайшие десять, а один не семь.
[01:42:48.280 --> 01:42:49.280]  Вот.
[01:42:50.280 --> 01:42:51.280]  Так вот.
[01:42:52.280 --> 01:42:53.280]  Вот у нас есть миностов.
[01:42:54.280 --> 01:42:55.280]  Что нам надо проверить?
[01:42:56.280 --> 01:43:03.280]  Каждое ребро, которое не в миностове, оно у нас соединяет два, то есть вот соединяет две вершины.
[01:43:04.280 --> 01:43:05.280]  Ну вот.
[01:43:05.280 --> 01:43:06.280]  Ну вот.
[01:43:07.280 --> 01:43:08.280]  И теперь замечаем, что такое стянутый цикл.
[01:43:09.280 --> 01:43:10.280]  Тогда замечаем, что такое стянутый цикл.
[01:43:11.280 --> 01:43:16.280]  Это мы от этой вершины, вот, если она соединяет У и В, мы, как бы, от У поднимаемся до С толца.
[01:43:20.280 --> 01:43:21.280]  И потом спускаемся обратно.
[01:43:22.280 --> 01:43:23.280]  Видите, да?
[01:43:28.280 --> 01:43:29.280]  Ну вот.
[01:43:30.280 --> 01:43:33.280]  Но тогда фактически, то есть логика будет, может быть, примерно, ну, почти такая же.
[01:43:33.280 --> 01:43:34.280]  Ну, почти.
[01:43:35.280 --> 01:43:36.280]  Потому что работать это будет так.
[01:43:37.280 --> 01:43:42.280]  Ну, во-первых, мы можем за эту асимптотику найти для всех пар вершин лца.
[01:43:45.280 --> 01:43:46.280]  И тогда сделать следующее.
[01:43:47.280 --> 01:43:48.280]  То есть смотрите.
[01:43:49.280 --> 01:43:58.280]  Когда мы запускаем DFS теперь, для каждой вершины, то есть наша цель, действительно, это дерево построить с помощью операции ЛИК.
[01:43:59.280 --> 01:44:07.280]  То есть каждый раз, когда мы выходим из вершины, последнее, что мы делаем, это подвешиваем ее к ее родителям.
[01:44:10.280 --> 01:44:18.280]  То есть у нас, когда, то есть получается, когда мы выходим вот из листа, то есть у нас возвращается вот это дерево, мы его подвешиваем вот сюда.
[01:44:19.280 --> 01:44:20.280]  Потом подвешиваем и подвешиваем сюда.
[01:44:21.280 --> 01:44:23.280]  Тут вот идем потом вот так и так далее.
[01:44:23.280 --> 01:44:28.280]  То есть в каждый момент времени получается такие вот, то есть набор подвешенных деревьев.
[01:44:29.280 --> 01:44:33.280]  И в совокупности у нас получится единое дерево, которое совпадает с исходным.
[01:44:34.280 --> 01:44:38.280]  То есть обратите внимание, не путайте, это не виртуальное дерево, да, это реальное дерево.
[01:44:40.280 --> 01:44:50.280]  Но, смотрите, фишка в том, что на этом дереве мы как бы не просто работаем на этом дереве, но еще мы на нем умеем делать функции eval с минимумом.
[01:44:50.280 --> 01:44:56.280]  В данном случае максимум, да, можно минимум, можно максимум, да, это в данном случае одно и то же.
[01:44:57.280 --> 01:44:59.280]  Ну, в смысле одно в другом слоится.
[01:45:00.280 --> 01:45:09.280]  И тогда, ну вот, ну тогда идея такая, давайте скажем, что у каждой вершины будет вес равный, ну просто вес у ребра из нее в родителя.
[01:45:09.280 --> 01:45:22.280]  Ну а если вершина корень, то, ну по-разному, можно сказать, что там, скажем, минус бесконечность, а можно там просто чуть аккуратнее реализовать и прицеплять детей к вершине до того, как вы там будете какие-то лцашки искать.
[01:45:23.280 --> 01:45:34.280]  Вот, и тогда получается следующее, что когда вы, то есть идея такая, что вы теперь можете в каждой вершине, когда вы вот уже пришли, создали тут, подвесили, подвесили, подвесили.
[01:45:34.280 --> 01:45:39.280]  То есть идея такая, что вы теперь можете в каждой вершине, когда вы вот уже пришли, создали тут, подвесили все дерево.
[01:45:40.280 --> 01:45:46.280]  Теперь вы просто перебираете все запросы УВ, то есть все ребра УВ такие, что лца от УВ равно этой вершине.
[01:45:47.280 --> 01:45:52.280]  И для каждого из них просто вызываете два эвала, эвал от У и эвал от В.
[01:45:53.280 --> 01:45:57.280]  Эти эвалы выдадут вам максимальное ребро на этом пути и максимальное ребро на этом пути.
[01:45:57.280 --> 01:46:05.280]  Ну и все, что вам остается, это проверить. Не окажется, верно ли, что эти все оба максимума окажутся меньше, либо равны вот этой вершине?
[01:46:06.280 --> 01:46:09.280]  Нельзя в одном порядке. Нельзя за один ДФС это сделать.
[01:46:10.280 --> 01:46:12.280]  Потому что множество деревьев будет в вершине В.
[01:46:13.280 --> 01:46:15.280]  Но можно потом запустить ДФС в обратном порядке.
[01:46:16.280 --> 01:46:20.280]  За первым проходом я утверждаю, что можно будет только в вершине У это сделать.
[01:46:20.280 --> 01:46:28.280]  Ну, в принципе, я не утверждал, что я бы будет делать это за один ДФС.
[01:46:29.280 --> 01:46:34.280]  Вы сказали, что нужно будет вызвать эвал от двух вершин, а это как бы один в одном проходе, другой во втором проходе.
[01:46:37.280 --> 01:46:40.280]  Мы же сказали, что мы сначала от Сашки, а потом...
[01:46:41.280 --> 01:46:44.280]  Да, мы сначала запускаем один ДФС и ищем все у Сашки.
[01:46:45.280 --> 01:46:54.280]  И тогда мы не только нашли в ЛЦАшке, только для каждой вершины записали все эти ребра, то есть пары вершин, у которых ЛЦА равно ей.
[01:46:55.280 --> 01:46:58.280]  И тогда во втором ДФСе мы проделаем то, что я сказал.
[01:46:59.280 --> 01:47:08.280]  У нас во времени ДФСа должен быть шаг, на котором есть дерево, соединяющее нашу вершину ровно с этим корнем.
[01:47:09.280 --> 01:47:10.280]  Да, будет.
[01:47:10.280 --> 01:47:18.280]  На выходе ДФСа из вершины у нас как бы есть это дерево, так что все есть.
[01:47:19.280 --> 01:47:25.280]  И тогда получается, что пока проверять какой-то остов мы умеем залог такую классную семдуть.
[01:47:27.280 --> 01:47:28.280]  Неплохо так, правда?
[01:47:28.280 --> 01:47:33.280]  У нас здесь при линке нужно линковать только один корень одного дерева к другому корню другого дерева.
[01:47:34.280 --> 01:47:36.280]  Мы вообще ничего больше не будем делать.
[01:47:37.280 --> 01:47:38.280]  Мы всегда только корень корня.
[01:47:39.280 --> 01:47:43.280]  Нет, у нас в определение вал Винкоптейта, кстати, входит, что мы подвешиваем только корень корня.
[01:47:44.280 --> 01:47:45.280]  Это важно.
[01:47:46.280 --> 01:47:48.280]  Нет, если мы подвешиваем что угодно к чему угодно, это линкат.
[01:47:49.280 --> 01:47:51.280]  Но нет, даже если только корень к чему угодно.
[01:47:52.280 --> 01:47:53.280]  Ну...
[01:47:53.280 --> 01:47:55.280]  Тем более, что в линкате мы умели переподвешивать вершину дерева с другого.
[01:47:56.280 --> 01:47:58.280]  Да, но линкат это лазарис.
[01:47:59.280 --> 01:48:01.280]  А мы тут ставим чуть более компактный.
[01:48:02.280 --> 01:48:04.280]  Так, сколько у нас на времени?
[01:48:05.280 --> 01:48:06.280]  Вот.
[01:48:07.280 --> 01:48:08.280]  Но смотрите, это все.
[01:48:09.280 --> 01:48:11.280]  То есть мы заметим, что мы полностью задачу пока не решили.
[01:48:12.280 --> 01:48:13.280]  Мы ее свели.
[01:48:14.280 --> 01:48:15.280]  Мы ее свели.
[01:48:16.280 --> 01:48:17.280]  Мы ее свели.
[01:48:17.280 --> 01:48:20.280]  Ну...
[01:48:21.280 --> 01:48:22.280]  Мы ее свели к вал Винкоптейту.
[01:48:23.280 --> 01:48:25.280]  Мы ее свели к вал в Винкоптейт, где идь должен быть равен минимуму или максимуму.
[01:48:26.280 --> 01:48:27.280]  Ну...
[01:48:28.280 --> 01:48:31.280]  К сожалению, у этого черного ящика есть один изъян.
[01:48:32.280 --> 01:48:40.280]  Изъян заключается в том, что均 произвольную операцию довести до альфа, он не обещает.
[01:48:41.280 --> 01:48:42.280]  Ну...
[01:48:43.280 --> 01:48:44.280]  Произвольную ассоциативную операцию.
[01:48:44.280 --> 01:48:55.280]  ассоциативную операцию. То есть сделать компрессы, конечно, это пожалуйста, то есть первое, сделать вот так, чтобы все запросы работали за сток, это пожалуйста, это сколько угодно.
[01:48:55.280 --> 01:49:05.280]  То есть вот за такой нот. Но если же балансированность не гарантируется, то и со второй теремой напрямую.
[01:49:05.280 --> 01:49:12.280]  Но с другой стороны заметим, что как тут можно было реализовать Валлинг кавдей?
[01:49:12.280 --> 01:49:20.280]  То есть как вы уже поняли, если мы будем реализовывать в тупую, используя только сжатие путей, то Альфу не обещают будет токовый гаив.
[01:49:20.280 --> 01:49:31.280]  Но возникает вопрос. Нельзя ли как-то конкретно в случае минимума или максимума, чуть-чуть подмодифицировать структуру данного,
[01:49:31.280 --> 01:49:40.280]  так чтобы она сводилась с Валлинг кавдей на сбалансированных теремиях и, как следствие, работала за нужную ситуацию.
[01:49:40.280 --> 01:49:50.280]  То есть вот такой вопрос нас будет интересовать. Так, понятно, о чем я вообще предвидительно говорил?
[01:49:51.280 --> 01:50:01.280]  Ну а дальше давайте попробуем. Но для разминочки мы попробуем немножко другое.
[01:50:04.280 --> 01:50:09.280]  Вот, значит смотрите. То есть для разминочки мы попробуем поиграться вовсю.
[01:50:09.280 --> 01:50:16.280]  То есть наша цель, предположим, что рассмотрим операцию ить какого-нибудь специального вида
[01:50:16.280 --> 01:50:24.280]  и попробуем для этого специального вида сделать более хитрый Валлинг кавдей, так чтобы деревья в нем были сбалансированы.
[01:50:26.280 --> 01:50:41.280]  Вот, например, представим себе, вот давайте себе представим для разминочки, что, например, ить это не просто дает полугруппу, она дает группу.
[01:50:42.280 --> 01:50:53.280]  На самом деле даже более слабое условие сказать, что на самом деле для каждого элемента есть так называемый правый обратный.
[01:50:55.280 --> 01:51:05.280]  Вот, смотрите. Вводим абстракционизм. То есть мы забываем о минимумах и максимумах. Чуть позже мы к ним обязательно вернемся.
[01:51:06.280 --> 01:51:25.280]  Итак, смотри. Итак, представим себе, что у нас, допустим, оказывается верно, что для любого х, действительно там существует, то есть для любого х существует так называемый х-1.
[01:51:25.280 --> 01:51:34.280]  Что это такое? То есть это означает, что для любого у верно, что ух, вот этот х-1 равен у.
[01:51:38.280 --> 01:51:48.280]  То есть вот давайте представим себе, что мы живем вот в полугруппе С и у и выяснилось, что в этой полугруппе для каждого элемента существует правый обратный.
[01:51:55.280 --> 01:52:02.280]  Правый обратный не совсем. Ну это не совсем правый обратный. А правый обратный, когда он существует, ну типа говорит, что это такой нейтральный элемент?
[01:52:04.280 --> 01:52:11.280]  Ну, можно говорить так. А можно не вводить понятие обратный элемент, то есть этот нейтральный элемент, а можно ввести вот это.
[01:52:12.280 --> 01:52:16.280]  Ну да, может быть, ну это просто примеры этой операции здесь группы, например.
[01:52:17.280 --> 01:52:26.280]  Ну в данном случае, то есть сюда подходит, скажем, если там, скажем, С это какие-нибудь числа, а вот эта штука это, скажем, их сумма.
[01:52:27.280 --> 01:52:33.280]  Или там какие-нибудь остатки, не нулевые остатки по модуле еще могут подойти. Ну с произведением, конечно.
[01:52:40.280 --> 01:52:42.280]  Ну слета не скажу.
[01:52:43.280 --> 01:52:50.280]  Вот. Ну а давайте предположим, что вот мы не будем сейчас заморачиваться определением группы, а будем просто говорить, что у нас вот есть вот такое условие.
[01:52:51.280 --> 01:52:52.280]  Прямо то, что минимум акции на такое условие не удовлетворяют.
[01:52:53.280 --> 01:53:01.280]  Не удовлетворяют. Да, не удовлетворяют. Но я, собственно, этот случай рассматриваю скорее как разминочку, чтобы просто вот ощутить, собственно, в какую сторону мы мысли.
[01:53:02.280 --> 01:53:08.280]  Да, это минимум акции, ну вот. Но тем более, что здесь конкретно решение простое. Значит, что мы вообще хотим?
[01:53:09.280 --> 01:53:17.280]  Мы говорим, что вот у нас, то есть мы хотим делать как-то линки, да? Вот V и W, да? Вот у нас есть.
[01:53:18.280 --> 01:53:21.280]  И допустим, нам вызывается операция линк от W.
[01:53:23.280 --> 01:53:29.280]  И оказывается, что вот и В должно оказаться родителем W. Вот так.
[01:53:29.280 --> 01:53:45.280]  Но при этом, заметим, что если мы будем реализовывать по принципу, просто не заморачиваемся и просто подвешиваем, как подвешиваем и делаем сжатие путей, то никакая альфа нам не светит.
[01:53:47.280 --> 01:53:52.280]  Потому что можно привести такие примеры линков, чтобы дерево было не сбалансировано.
[01:53:53.280 --> 01:54:02.280]  Иди в пост там, где, я не знаю, у нас есть вершинка, один потомок с одной стороны, с другой стороны, помнишь, где его дальше?
[01:54:03.280 --> 01:54:04.280]  Ну все шоу будет, да.
[01:54:05.280 --> 01:54:08.280]  Да, господи, ну тупой пример. Тупой пример – бамбук.
[01:54:09.280 --> 01:54:10.280]  Ну и бамбук не построен.
[01:54:11.280 --> 01:54:12.280]  На линках построен.
[01:54:13.280 --> 01:54:17.280]  Линки устроены, могут быть устроены так, что это может оказаться и бамбук.
[01:54:18.280 --> 01:54:19.280]  Нам что-нибудь конкретно надо было.
[01:54:20.280 --> 01:54:21.280]  Линки-то не от нас зависит, к сожалению.
[01:54:22.280 --> 01:54:26.280]  Но нас может быть бамбук, но только после первого же где-то сожмется.
[01:54:27.280 --> 01:54:34.280]  То есть бамбук, как контртестка времени работы ДСУ или еще где-то из одной структуры, не работает?
[01:54:35.280 --> 01:54:36.280]  Ну не совсем сожмется, понимаете.
[01:54:37.280 --> 01:54:42.280]  Скажем так, если с конца будете его запускать, то одно дело, если где-то из середины, то там же будет он.
[01:54:43.280 --> 01:54:44.280]  Ну не совсем.
[01:54:45.280 --> 01:54:46.280]  И будут промежуточные.
[01:54:46.280 --> 01:54:51.280]  Посмотри, совсем у бамбука еще всякие вопросы были, что Джим был бамбук.
[01:54:52.280 --> 01:54:54.280]  Ты, допустим, захотел сжать вот отсюда-сюда, да?
[01:54:55.280 --> 01:54:58.280]  У тебя там получилось что? У тебя там получилось вот это и вот это, да?
[01:54:59.280 --> 01:55:00.280]  И дальше там все равно.
[01:55:01.280 --> 01:55:03.280]  Когда ты эту вершину начнешь там даже куда-то вешать.
[01:55:04.280 --> 01:55:05.280]  Вот если куда-то вешать, это уже не бамбук.
[01:55:06.280 --> 01:55:07.280]  Ну, скажем так.
[01:55:08.280 --> 01:55:12.280]  Смотри, тут не надо путать реальное дерево и виртуальное дерево.
[01:55:13.280 --> 01:55:17.280]  Да, виртуальное дерево, конечно, никогда не бамбук, но я имею в виду, что...
[01:55:18.280 --> 01:55:30.280]  Но тут имеется в виду, давайте уточним, раз об этом зашла веки, что когда мы тут говорим о теореме 2, нам требуется, чтобы реальное дерево с точки зрения линков было сбалансировано.
[01:55:31.280 --> 01:55:32.280]  Именно реальное.
[01:55:34.280 --> 01:55:38.280]  Если такое гарантируется, то тогда мы с ним бы там тупо сжатие путей дает вот эту осень.
[01:55:43.280 --> 01:55:44.280]  Вот.
[01:55:45.280 --> 01:55:56.280]  То есть наша цель, то есть как бы подмодифицировать внутри структуру так, чтобы она сводилась там каким-то подвешенным деревьем, в котором мы тоже делаем Эмалвин Камптейт, но чтобы деревья были сбалансированы.
[01:55:57.280 --> 01:56:04.280]  То есть поэтому внутри себя мы вот вместо этого дерева хотим хранить кое-что еще.
[01:56:05.280 --> 01:56:07.280]  То есть какое-то вот немножко другое дерево.
[01:56:09.280 --> 01:56:10.280]  Какое?
[01:56:10.280 --> 01:56:11.280]  Какое?
[01:56:12.280 --> 01:56:13.280]  Ну в данном случае идея будет очень проста.
[01:56:14.280 --> 01:56:15.280]  Смотрите.
[01:56:16.280 --> 01:56:20.280]  У каждой вершины, в каждой вершине тут хранится лейбл от V, да?
[01:56:22.280 --> 01:56:25.280]  И лейбл от W.
[01:56:26.280 --> 01:56:27.280]  Хранится.
[01:56:28.280 --> 01:56:30.280]  Ну помним, да, в каждой вершине у нас меточка хранится, помните?
[01:56:30.280 --> 01:56:40.280]  Ну то самое число, то есть то самое число, что когда мы там запускаем эвал, мы там прибегаемся от корня до вершины и ичкаем.
[01:56:41.280 --> 01:56:45.280]  Да, напоминаю, что, кстати, что ичку выполняем именно от корня к вершине.
[01:56:48.280 --> 01:56:49.280]  Вот, кстати.
[01:56:52.280 --> 01:56:53.280]  Так вот, значит, что мы тут хотим делать?
[01:56:54.280 --> 01:56:55.280]  Смотрите, немножко магии.
[01:56:56.280 --> 01:57:05.280]  На самом деле, заметим, что нам, в общем-то, достаточно по барабану, что мы будем хранить внутри.
[01:57:06.280 --> 01:57:07.280]  Самое главное, чтобы ответы были правильные.
[01:57:08.280 --> 01:57:11.280]  Поэтому давайте поддерживать вот такой вариант.
[01:57:12.280 --> 01:57:19.280]  Ну, значит, наше внутреннее дерево, значит, без компрессов, да?
[01:57:20.280 --> 01:57:26.280]  То есть мы в нем, вот, помните, вот у нас были три аксиома, да, что мы с ним делаем, да?
[01:57:27.280 --> 01:57:36.280]  Так вот, у нас будут только первая и третья, но без второго.
[01:57:36.280 --> 01:57:37.280]  То есть так же.
[01:57:41.280 --> 01:57:45.280]  Если вспомнить, что это все значило, то значило это следующее.
[01:57:46.280 --> 01:57:54.280]  Что у нас, мы вместо каждого дерева будем хранить какое-то альтернативное дерево, которое все равно, который содержит те же вершины.
[01:57:55.280 --> 01:58:00.280]  И результат эвалов от этого дерева виртуального и от того, что он уже материалит, будет тоже.
[01:58:01.280 --> 01:58:06.280]  Но мы откажемся от требования, что корень совпадает.
[01:58:09.280 --> 01:58:10.280]  Вот, понимаете, да?
[01:58:13.280 --> 01:58:14.280]  Ну, в общем-то, давайте смотреть.
[01:58:16.280 --> 01:58:17.280]  Что нам это дает?
[01:58:18.280 --> 01:58:19.280]  То есть это нам дает следующее.
[01:58:20.280 --> 01:58:23.280]  Значит, вместо вершин V и W, да?
[01:58:24.280 --> 01:58:36.280]  На самом деле нам теперь даны два дерева, корни, то есть корни, из которых в нашем виртуальном дереве в реальности это, скажем, условный V' и W'.
[01:58:37.280 --> 01:58:40.280]  То есть это могут быть прям где-то другие корни.
[01:58:41.280 --> 01:58:45.280]  Ну, вершина V может тут лежать где-то в поддереве.
[01:58:46.280 --> 01:58:47.280]  Вот, понимаете, да?
[01:58:48.280 --> 01:58:55.280]  Мы сейчас доказываем, что если у нас операция дополнительно обратимая, то мы всегда можем сбалансировать лес.
[01:58:56.280 --> 01:58:59.280]  Точнее так, допилить структуру так, чтобы лес получался сбалансировать.
[01:59:02.280 --> 01:59:04.280]  Но цель у нас будет очень простая.
[01:59:05.280 --> 01:59:09.280]  Когда нам надо объединить два поддерева, нам нужно подвесить меньше к большему.
[01:59:10.280 --> 01:59:14.280]  Ну, мы уже доказали, что если подвесим меньше к большему, то дерево будет сбалансировать.
[01:59:15.280 --> 01:59:16.280]  Но как же это сделать?
[01:59:17.280 --> 01:59:18.280]  Значит, корни теперь принципиально другие.
[01:59:19.280 --> 01:59:23.280]  Ну, в общем, кто они конкретно, кстати, можно вызвать компресс от V' и W', это явно не делается.
[01:59:25.280 --> 01:59:26.280]  Вот. Так вот.
[01:59:28.280 --> 01:59:29.280]  Ну, теперь идея такая.
[01:59:30.280 --> 01:59:31.280]  Итак, мы хотим вот это дерево подвесить сюда.
[01:59:33.280 --> 01:59:41.280]  Ну, как вы понимаете, да, причем мы точно знаем, что значение эвалов для вот этих вершин или этих вершин, оно то, что нам надо.
[01:59:44.280 --> 01:59:45.280]  Вот, понимаете, да?
[01:59:47.280 --> 01:59:48.280]  Вот.
[01:59:50.280 --> 01:59:51.280]  Ну, значит, теперь давайте думать.
[01:59:52.280 --> 01:59:53.280]  Что тут можно сделать?
[01:59:54.280 --> 02:00:02.280]  Ну, во-первых, если нам потребовалось, если это дерево оказалось меньше, чем вот это по размеру, то, в общем-то, можно не заморачиваться.
[02:00:04.280 --> 02:00:11.280]  То есть мы просто подвешиваем вот это дерево к этому и говорим, что на этом все.
[02:00:14.280 --> 02:00:15.280]  Непонятно.
[02:00:15.280 --> 02:00:16.280]  Мы хотим...
[02:00:18.280 --> 02:00:19.280]  У нас есть V' и W'.
[02:00:20.280 --> 02:00:23.280]  И мы хотим их подвесить друг другу в реальном дереве.
[02:00:24.280 --> 02:00:25.280]  Ну да.
[02:00:26.280 --> 02:00:28.280]  А в виртуальном дереве они являются корнями?
[02:00:29.280 --> 02:00:30.280]  Не являются.
[02:00:31.280 --> 02:00:34.280]  Но мы хотим сделать так, чтобы ответы на вершины были все равно те же самые.
[02:00:35.280 --> 02:00:36.280]  Почему они будут те же сами?
[02:00:37.280 --> 02:00:38.280]  Подождите, это же завершение значек и вариантов.
[02:00:39.280 --> 02:00:41.280]  Мы же требовали, что у нас даже конец.
[02:00:42.280 --> 02:00:44.280]  А теперь не совпадает.
[02:00:45.280 --> 02:00:46.280]  Как мы на это запили?
[02:00:47.280 --> 02:01:00.280]  Вот, почему, если в левом дереве все евалы сходят, в правом дереве все евалы, не смотря на их, какие надо, то если мы подвесим не вершину W' а W' W', почему у нас будут все евалы сохраняться?
[02:01:01.280 --> 02:01:02.280]  Так.
[02:01:03.280 --> 02:01:04.280]  Ну вот.
[02:01:05.280 --> 02:01:06.280]  На самом деле, действительно вопрос.
[02:01:07.280 --> 02:01:08.280]  Да.
[02:01:09.280 --> 02:01:10.280]  И все так просто.
[02:01:10.280 --> 02:01:15.280]  Даже если мы поймем, что мы просто имеем право сделать вот такое подвешивание и не заморачиваться с точки зрения сайза.
[02:01:16.280 --> 02:01:23.280]  Но проблема в том, что как от того, что мы сделаем вот это подвешивание, изменятся сайзы?
[02:01:24.280 --> 02:01:25.280]  Сайзы отлично изменятся.
[02:01:26.280 --> 02:01:27.280]  Да, сайзы все нормально.
[02:01:28.280 --> 02:01:29.280]  А как изменятся евалы?
[02:01:30.280 --> 02:01:32.280]  Ну, у этих вершин не изменятся от слова никак.
[02:01:33.280 --> 02:01:40.280]  А у этих вершин, они все домножатся на W'.
[02:01:41.280 --> 02:01:42.280]  А должны были домножиться на W'.
[02:01:43.280 --> 02:01:45.280]  Да, а хотелось бы на label of W'.
[02:01:48.280 --> 02:01:49.280]  Ну вот.
[02:01:50.280 --> 02:01:51.280]  Ну теперь вот, нот.
[02:01:52.280 --> 02:01:55.280]  Ну вот, возникает вопрос, действительно, что бы тут можно было сделать?
[02:01:56.280 --> 02:01:58.280]  Можно бы вторую штриху себе подвести, наверное.
[02:01:58.280 --> 02:01:59.280]  Да.
[02:02:00.280 --> 02:02:03.280]  Ну действительно, заметим, что приятно, мы действительно можем на label of W'.
[02:02:04.280 --> 02:02:06.280]  Можем за вот единицы влиять, правда?
[02:02:07.280 --> 02:02:08.280]  Конечно.
[02:02:09.280 --> 02:02:10.280]  Вот.
[02:02:11.280 --> 02:02:12.280]  Ну вот.
[02:02:13.280 --> 02:02:15.280]  Ну а теперь остается только понять, как же нам конкретно повлиять.
[02:02:16.280 --> 02:02:18.280]  А у нас W' и W'.
[02:02:19.280 --> 02:02:20.280]  Это...
[02:02:21.280 --> 02:02:23.280]  А, то есть мы вызвали где-то W и где-то W.
[02:02:24.280 --> 02:02:25.280]  Ну да.
[02:02:26.280 --> 02:02:27.280]  Да.
[02:02:28.280 --> 02:02:30.280]  То есть заметим, что если бы это была, например, идеальная группа.
[02:02:31.280 --> 02:02:33.280]  Идеальная прям вообще, да?
[02:02:34.280 --> 02:02:36.280]  Ну я не знаю, что такое понять идеальная группа.
[02:02:37.280 --> 02:02:43.280]  Ну в смысле, это реально группа, в которой что-ли там элемент там обрати, причем как справа, так и слева.
[02:02:44.280 --> 02:02:47.280]  И там даже существование нейтрального элемента.
[02:02:49.280 --> 02:02:52.280]  То тогда можно было бы сделать примерно следующее.
[02:02:53.280 --> 02:02:57.280]  То есть вместо label of W'.
[02:02:59.280 --> 02:03:08.280]  Мы бы написали бы что-нибудь в духе label of W' в минус 1.
[02:03:11.280 --> 02:03:15.280]  И label of W'.
[02:03:17.280 --> 02:03:20.280]  И label of W'.
[02:03:21.280 --> 02:03:23.280]  И label того, что там было.
[02:03:23.280 --> 02:03:25.280]  То есть вот такой неожиданный чит.
[02:03:26.280 --> 02:03:28.280]  То есть вот такой вот неожиданный чит.
[02:03:29.280 --> 02:03:32.280]  Ну и все отлично это, и просят только правое и обратное.
[02:03:33.280 --> 02:03:34.280]  Да, если бы.
[02:03:35.280 --> 02:03:36.280]  Почему нет?
[02:03:36.280 --> 02:03:39.280]  Потому что я боюсь, что это нам потребует скорее левое и обратное.
[02:03:40.280 --> 02:03:43.280]  Потому что теперь для любой вершины отсюда.
[02:03:44.280 --> 02:03:49.280]  То есть у нас было вот что-то такое, а теперь оно домножилось в итоге.
[02:03:49.280 --> 02:03:52.280]  То есть путь любой вершины доходит до W'.
[02:03:53.280 --> 02:03:55.280]  И потом идет W'.
[02:03:56.280 --> 02:04:03.280]  И тогда получается, что мы должны вычислить такую величину, как label of W'.
[02:04:03.280 --> 02:04:09.280]  И вычислить такую величину, как label of W'.
[02:04:10.280 --> 02:04:15.280]  И label of W' в минус 1.
[02:04:18.280 --> 02:04:20.280]  Значит label of W'.
[02:04:21.280 --> 02:04:24.280]  На label of W'.
[02:04:25.280 --> 02:04:27.280]  Ну и так далее.
[02:04:28.280 --> 02:04:29.280]  Ну да.
[02:04:30.280 --> 02:04:31.280]  Отлично.
[02:04:31.280 --> 02:04:32.280]  Ну как отлично.
[02:04:33.280 --> 02:04:36.280]  Если сказать, что вот эта вот штука равна label of W', то конечно да.
[02:04:37.280 --> 02:04:38.280]  Да.
[02:04:39.280 --> 02:04:41.280]  Только маленькая проблема. У нас тут в ксиоматике немножко другое прописано.
[02:04:42.280 --> 02:04:45.280]  Но это же не отменяет правости и ветости обратно.
[02:04:46.280 --> 02:04:48.280]  У нас в ксиоматике странная штука написана без нейтрального варианта.
[02:04:49.280 --> 02:04:50.280]  Угу.
[02:04:51.280 --> 02:04:55.280]  Ну вот я бы утверждал, что можно это сделать именно вот в таком более сильном виде.
[02:04:56.280 --> 02:04:57.280]  Можно как-то доказать.
[02:04:58.280 --> 02:05:00.280]  Почему не можно Y справа написать вместо Y слева?
[02:05:01.280 --> 02:05:05.280]  И сказать, что у нас есть минус 1 на Y, это то же самое, что Y.
[02:05:10.280 --> 02:05:11.280]  Я не знаю может.
[02:05:13.280 --> 02:05:14.280]  Сейчас.
[02:05:15.280 --> 02:05:16.280]  У меня даже пример такого.
[02:05:19.280 --> 02:05:21.280]  Нет, ну да. Вот в итоге хочется конечно написать слева, но...
[02:05:22.280 --> 02:05:23.280]  Как бы...
[02:05:23.280 --> 02:05:26.280]  Следует ли из правой обратимости левой обратимость?
[02:05:27.280 --> 02:05:29.280]  Это не правая и левая обратимость же.
[02:05:30.280 --> 02:05:32.280]  Это мы еще и для любого Y зачем-то написали.
[02:05:33.280 --> 02:05:34.280]  Ну да.
[02:05:35.280 --> 02:05:37.280]  Нет, ну как бы, мы говорили, что для любого Y существует вот такой элемент.
[02:05:38.280 --> 02:05:40.280]  На что там слева не домножай, будет вот такое счастье.
[02:05:43.280 --> 02:05:45.280]  Правда, заметим, что из этого следует вообще...
[02:05:46.280 --> 02:05:49.280]  Ну теперь давайте думать, насколько это принципиально правая и левая.
[02:05:49.280 --> 02:05:51.280]  Ну начнем с того, кстати, что из этого...
[02:05:52.280 --> 02:05:55.280]  Из этой штуки, кстати, существование нейтрального элемента хотя бы справа следует.
[02:05:58.280 --> 02:06:00.280]  Ну, просто рассмотрим вот это вообще.
[02:06:02.280 --> 02:06:03.280]  Аксиомы нет.
[02:06:04.280 --> 02:06:07.280]  Но рассмотрим какой-нибудь элемент X и его напарника.
[02:06:08.280 --> 02:06:12.280]  Их произведение равно какому-то мистической штуке, назовем ее Y.
[02:06:14.280 --> 02:06:16.280]  И теперь заметим, что у нас есть интересное утверждение, что...
[02:06:16.280 --> 02:06:19.280]  Для любого игрока верно, что Y умножить на E равен Y.
[02:06:24.280 --> 02:06:27.280]  То есть, по крайней мере, правый и нейтральный элемент на лицо.
[02:06:29.280 --> 02:06:30.280]  Ну вот.
[02:06:31.280 --> 02:06:32.280]  Теперь возникает вопрос.
[02:06:33.280 --> 02:06:40.280]  Следует ли из этого, что в данном случае и вот это E умножить на Y тоже будет равно Y?
[02:06:41.280 --> 02:06:42.280]  Нет.
[02:06:43.280 --> 02:06:45.280]  Вот да, вот тут и проблема.
[02:06:46.280 --> 02:06:48.280]  Само по себе вроде как и не следует.
[02:06:49.280 --> 02:06:50.280]  Вот.
[02:06:51.280 --> 02:06:52.280]  Почему-то.
[02:06:53.280 --> 02:06:56.280]  Единственное только, конечно, мы ответим, что если для любого элемента, то...
[02:06:57.280 --> 02:07:00.280]  Как бы скорее, то как бы нейтральный элемент у нас полнится всегда один.
[02:07:01.280 --> 02:07:02.280]  Где?
[02:07:03.280 --> 02:07:04.280]  А, хотя нет.
[02:07:05.280 --> 02:07:06.280]  А, если он только справой, хотя...
[02:07:07.280 --> 02:07:08.280]  Правых и нейтральных может быть больше.
[02:07:09.280 --> 02:07:10.280]  Да, чисто правых.
[02:07:11.280 --> 02:07:12.280]  Ну получается так вот.
[02:07:13.280 --> 02:07:14.280]  Интересная интеракция.
[02:07:14.280 --> 02:07:15.280]  Интересно, но как бы вот.
[02:07:16.280 --> 02:07:17.280]  Интересно, а почему тогда...
[02:07:18.280 --> 02:07:19.280]  Почему Тарьян тут утверждает, когда это пишет вот?
[02:07:20.280 --> 02:07:22.280]  Именно в виде правого обратного, а не левого.
[02:07:23.280 --> 02:07:25.280]  А можно повторить, что мы еще раз слайва сделали?
[02:07:28.280 --> 02:07:30.280]  Или пока еще мы пытаемся это сделать?
[02:07:31.280 --> 02:07:32.280]  Нет, вроде все, что хотели, сделали.
[02:07:33.280 --> 02:07:35.280]  Мы вообще думаем о том, какую сторону что обратим.
[02:07:36.280 --> 02:07:37.280]  Надо?
[02:07:37.280 --> 02:07:38.280]  Виртуально.
[02:07:39.280 --> 02:07:40.280]  Для которых все явалы были корректными.
[02:07:41.280 --> 02:07:45.280]  То есть, отчего бы ты не вызвал явал, он бы дал такое же значение, как будто ты в реальном дереве.
[02:07:46.280 --> 02:07:52.280]  И выяснили, что тогда, если нам нужно подвесить в реальном дереве вершину w к вершине v,
[02:07:53.280 --> 02:07:57.280]  и нам повезло, что размер w штрих меньше, чем размер w,
[02:07:58.280 --> 02:07:59.280]  меньше размер v штрих,
[02:08:00.280 --> 02:08:02.280]  то можем просто подвесить и изменить один лейбл.
[02:08:03.280 --> 02:08:04.280]  Вот на это вот число.
[02:08:05.280 --> 02:08:06.280]  Синим цветом, да?
[02:08:07.280 --> 02:08:08.280]  Да, синим цветом.
[02:08:09.280 --> 02:08:14.280]  Мы в реальном дереве подвешиваем w и qv, а в виртуальном w штрих и qv штрих, и меняем один лейбл.
[02:08:20.280 --> 02:08:22.280]  И утверждаем, что после этого все явалы тоже будут корректными.
[02:08:24.280 --> 02:08:25.280]  Ну, то идите там.
[02:08:26.280 --> 02:08:31.280]  Пока утверждение такое, если мы верим в обратимый дават не только справа, но и слева,
[02:08:32.280 --> 02:08:33.280]  то в общем-то все в порядке сразу.
[02:08:34.280 --> 02:08:38.280]  Ну, понятно, что эти штуки сокращаются и остается, собственно, то, что нам надо.
[02:08:43.280 --> 02:08:44.280]  Только утверждать, что...
[02:08:45.280 --> 02:08:47.280]  Может, я хотел снизу вверх вычислять, а снизу вверх вниз?
[02:08:48.280 --> 02:08:50.280]  Тут и проблема идет точно сверху вниз.
[02:08:51.280 --> 02:08:52.280]  Вот прям железно.
[02:08:54.280 --> 02:08:56.280]  Вот прям я железно, собственно, и копал.
[02:08:57.280 --> 02:08:58.280]  Вот.
[02:08:59.280 --> 02:09:00.280]  Ну, я не знаю, может быть...
[02:09:01.280 --> 02:09:02.280]  Может быть, конечно, просто это...
[02:09:03.280 --> 02:09:07.280]  Все кроме нас с вами знают, что это называется непринципиально, потому что...
[02:09:08.280 --> 02:09:09.280]  Знаете, в чем парадокс будет?
[02:09:10.280 --> 02:09:13.280]  Если мы потом это под дерево еще к чему-то подвесим,
[02:09:14.280 --> 02:09:18.280]  то к чему-то подвесим, то утверждение будет верным.
[02:09:21.280 --> 02:09:24.280]  То есть, как бы, смотрите, мы не можем гарантировать, что вот эта штука равна чему-то надо,
[02:09:24.280 --> 02:09:26.280]  но если тут будет что-то еще, то это будет правда.
[02:09:27.280 --> 02:09:29.280]  Остается только доказать, что...
[02:09:30.280 --> 02:09:33.280]  Просто можно доказать, что тут какой-то существует лево-нейтральный элемент.
[02:09:35.280 --> 02:09:36.280]  И справа обретимости.
[02:09:39.280 --> 02:09:40.280]  Тоже верно-право.
[02:09:43.280 --> 02:09:44.280]  Ну вот, вот...
[02:09:45.280 --> 02:09:47.280]  Если у нас хотя бы маной, то вроде все пошло.
[02:09:49.280 --> 02:09:50.280]  Ну да.
[02:09:51.280 --> 02:09:52.280]  Ну, в общем, конечно, да.
[02:09:52.280 --> 02:09:53.280]  Но это очень странный, действительно, момент.
[02:09:54.280 --> 02:09:55.280]  Почему мы это все делали?
[02:09:56.280 --> 02:09:58.280]  Ну вот, пока вы просто понимали, что можно делать.
[02:09:59.280 --> 02:10:01.280]  Пока это заметим, мы еще не стали...
[02:10:02.280 --> 02:10:04.280]  Пока еще это мы еще предполагаем, что нам повезло,
[02:10:05.280 --> 02:10:06.280]  и это дерево меньше, чем это.
[02:10:07.280 --> 02:10:09.280]  Ну на самом деле, смотрите, основная идея такая, что...
[02:10:10.280 --> 02:10:12.280]  Ладно, давайте без правых оборотов, давайте просто скажем,
[02:10:13.280 --> 02:10:16.280]  что у нас есть обороты в разные стороны.
[02:10:17.280 --> 02:10:19.280]  То есть, есть и такой оборот, и...
[02:10:19.280 --> 02:10:23.280]  И, допустим, одновременно еще и, скажем, вот такой.
[02:10:24.280 --> 02:10:26.280]  Ну то есть, действительно, ладно, пусть есть нейтральный элемент, короче, это группа.
[02:10:27.280 --> 02:10:28.280]  Маной.
[02:10:29.280 --> 02:10:30.280]  Да, достаточно там, что маной.
[02:10:31.280 --> 02:10:32.280]  Ну...
[02:10:33.280 --> 02:10:34.280]  Нет, ну...
[02:10:35.280 --> 02:10:37.280]  Не-не-не, нам принципиально существование обратного.
[02:10:38.280 --> 02:10:39.280]  Так что групповый.
[02:10:40.280 --> 02:10:42.280]  Так вот, а теперь давайте подчеркнем вот же.
[02:10:43.280 --> 02:10:44.280]  Какой тут хак можно сделать?
[02:10:45.280 --> 02:10:47.280]  Какой тут хак можно сделать?
[02:10:48.280 --> 02:10:49.280]  Если оказалось...
[02:10:51.280 --> 02:10:55.280]  То есть, если оказалось, что вам требуется подвесить вот это дерево к этому,
[02:10:56.280 --> 02:10:57.280]  но очень не хочется.
[02:10:58.280 --> 02:10:59.280]  Че?
[02:11:00.280 --> 02:11:01.280]  А я предел еще.
[02:11:02.280 --> 02:11:04.280]  А не хочется по той простой причине, что это дерево больше, чем это.
[02:11:05.280 --> 02:11:06.280]  Ну уже.
[02:11:07.280 --> 02:11:08.280]  Тогда предлагается...
[02:11:09.280 --> 02:11:11.280]  Тогда вот, предположим, если оказалось, что, так сказать,
[02:11:11.280 --> 02:11:17.280]  size от W' оказался неожиданно меньше, чем size от W'.
[02:11:18.280 --> 02:11:19.280]  Вот.
[02:11:20.280 --> 02:11:21.280]  Но тем не менее, а подвешивать хочется.
[02:11:22.280 --> 02:11:26.280]  Но оказывается, что можно неожиданным образом выкрутиться.
[02:11:27.280 --> 02:11:30.280]  И выкрутиться можно следующим образом.
[02:11:31.280 --> 02:11:32.280]  Смотрите.
[02:11:33.280 --> 02:11:37.280]  То есть, мы все-таки подвешиваем вершину W'.
[02:11:41.280 --> 02:11:42.280]  Но теперь что...
[02:11:43.280 --> 02:11:45.280]  Но как теперь нам поменять...
[02:11:46.280 --> 02:11:47.280]  Как теперь нам поменять лейблы?
[02:11:48.280 --> 02:11:49.280]  Секунду.
[02:11:53.280 --> 02:11:54.280]  Мы же просили другое.
[02:11:55.280 --> 02:11:57.280]  Нас просили подвесить W' к УКВ.
[02:11:58.280 --> 02:11:59.280]  Да.
[02:12:00.280 --> 02:12:01.280]  А мы заявляем, что...
[02:12:02.280 --> 02:12:03.280]  Нас просили подвесить W' к УКВ, вот так.
[02:12:04.280 --> 02:12:05.280]  Правильно.
[02:12:06.280 --> 02:12:07.280]  Так мы мало того, что сказали, что у нас тут другие корни.
[02:12:08.280 --> 02:12:10.280]  Так еще и сказали, что, ой, а знаете, я все равно хочу подвесить W' к W'.
[02:12:11.280 --> 02:12:12.280]  Ага.
[02:12:13.280 --> 02:12:14.280]  Но я же должен сделать вид, что у меня все в порядке, да?
[02:12:15.280 --> 02:12:16.280]  Да.
[02:12:17.280 --> 02:12:19.280]  И значит, что тогда должно произойти с этим под деревом?
[02:12:20.280 --> 02:12:21.280]  Значит, смотрите.
[02:12:22.280 --> 02:12:25.280]  То есть, у нас были тут, значит, допустим, меточки.
[02:12:26.280 --> 02:12:30.280]  Была тут метка L' и была тут метка L''.
[02:12:31.280 --> 02:12:32.280]  Да?
[02:12:33.280 --> 02:12:34.280]  Лейбл?
[02:12:35.280 --> 02:12:36.280]  Да.
[02:12:37.280 --> 02:12:40.280]  А теперь я хочу, значит, подменить в этих корнях тоже меточки.
[02:12:41.280 --> 02:12:43.280]  На, так сказать...
[02:12:44.280 --> 02:12:46.280]  Хочется написать L' от W'.
[02:12:47.280 --> 02:12:48.280]  Нет.
[02:12:49.280 --> 02:12:50.280]  Не надо, да?
[02:12:51.280 --> 02:12:52.280]  Давайте.
[02:12:53.280 --> 02:12:54.280]  Вот, подменить так.
[02:12:55.280 --> 02:12:56.280]  Вот.
[02:12:57.280 --> 02:12:58.280]  Вот.
[02:12:59.280 --> 02:13:00.280]  Значит, подменить.
[02:13:01.280 --> 02:13:02.280]  Но теперь смотрите.
[02:13:03.280 --> 02:13:06.280]  А теперь давайте, как они должны поменяться?
[02:13:07.280 --> 02:13:08.280]  Заметим, что...
[02:13:09.280 --> 02:13:10.280]  Значит, эвал...
[02:13:11.280 --> 02:13:13.280]  Вот, допустим, у меня есть тут вершина X и тут вершина Y.
[02:13:14.280 --> 02:13:15.280]  То и тут будет вершина X, вершина Y.
[02:13:16.280 --> 02:13:19.280]  И мы говорим, что эвал X должен теперь перейти во что?
[02:13:21.280 --> 02:13:22.280]  А не во что.
[02:13:23.280 --> 02:13:24.280]  Он поменяться не должен.
[02:13:25.280 --> 02:13:26.280]  Ну, вот так вот.
[02:13:27.280 --> 02:13:28.280]  Ну, потому что, реально, когда мы вот это под деревом подвесим к этому,
[02:13:29.280 --> 02:13:31.280]  то есть, для висящих на вершине V вершин,
[02:13:32.280 --> 02:13:34.280]  результаты эвалы не должны поменяться от слова «никак».
[02:13:35.280 --> 02:13:36.280]  На коку мы согласились уже, да?
[02:13:36.280 --> 02:13:37.280]  Нет, то есть...
[02:13:38.280 --> 02:13:39.280]  Ну, не знаю, по-моему, реальное дерево, по-моему...
[02:13:40.280 --> 02:13:41.280]  Это все равно не работает на комплотивности.
[02:13:42.280 --> 02:13:43.280]  А нам не нужна.
[02:13:44.280 --> 02:13:45.280]  Ну, в том смысле, у тебя порядок определенный есть.
[02:13:46.280 --> 02:13:49.280]  Если меняешь порядок установки L, V...
[02:13:50.280 --> 02:13:51.280]  Да, напоминаю.
[02:13:52.280 --> 02:13:53.280]  А эвал, напоминаю, от игрока...
[02:13:54.280 --> 02:13:55.280]  Правильно.
[02:13:56.280 --> 02:13:57.280]  Должен стать...
[02:13:58.280 --> 02:13:59.280]  Должен стать теперь...
[02:14:00.280 --> 02:14:01.280]  L, V.
[02:14:02.280 --> 02:14:03.280]  Причем именно L, V, обратите внимание.
[02:14:04.280 --> 02:14:05.280]  L, V, L, V, да?
[02:14:07.280 --> 02:14:09.280]  Умножить на эвал от игрока.
[02:14:10.280 --> 02:14:11.280]  Значит, ну, чтоб понять...
[02:14:12.280 --> 02:14:13.280]  То есть давайте вообразим себе реальное дерево.
[02:14:14.280 --> 02:14:16.280]  Потому что в реальном дереве как бы все по тесноку, да?
[02:14:17.280 --> 02:14:20.280]  Есть вершина X, на ней что-то висит, то есть есть вершина V,
[02:14:21.280 --> 02:14:22.280]  на ней что-то висит, да?
[02:14:23.280 --> 02:14:25.280]  Да, в том числе и X где-то там висит.
[02:14:26.280 --> 02:14:27.280]  Есть вершина W.
[02:14:28.280 --> 02:14:29.280]  И на ней что-то висит.
[02:14:30.280 --> 02:14:33.280]  Исключительно что-то исключительно висит.
[02:14:34.280 --> 02:14:35.280]  В том числе и где-то E.
[02:14:36.280 --> 02:14:39.280]  и мы хотим добавить вот это ребро
[02:14:39.280 --> 02:14:43.280]  тогда получается у всего вот этого поддерева все эвалы должны
[02:14:43.280 --> 02:14:46.280]  увеличить там домножиться слева на lv
[02:14:46.280 --> 02:14:49.280]  а тут они не должны домножаться от слова ни на что
[02:14:49.280 --> 02:14:53.280]  ну тогда пойдем как изменять как бы лейбл в наших кругах
[02:14:53.280 --> 02:14:55.280]  если это возможно
[02:14:55.280 --> 02:14:57.280]  если это группа, то возможно
[02:14:57.280 --> 02:14:59.280]  не, ну идея очень простая
[02:14:59.280 --> 02:15:03.280]  понятно, что для того чтобы у нас в w штрихе все поменялось
[02:15:03.280 --> 02:15:05.280]  то есть в этом поддереве игребки поменялось
[02:15:05.280 --> 02:15:08.280]  то очевидно имеет смысл сделать r в штрих
[02:15:08.280 --> 02:15:12.280]  равно просто lv умножить
[02:15:12.280 --> 02:15:15.280]  на соответственно то что там было раньше
[02:15:15.280 --> 02:15:18.280]  а, ну да
[02:15:18.280 --> 02:15:20.280]  тогда с этим диремием все в порядке
[02:15:20.280 --> 02:15:23.280]  а почему r это новое в смысле лейблы
[02:15:23.280 --> 02:15:25.280]  чего?
[02:15:25.280 --> 02:15:27.280]  р мы обозначили новое лейблы
[02:15:27.280 --> 02:15:28.280]  ну вот
[02:15:28.280 --> 02:15:31.280]  а тут теперь надо, а теперь заметим следующее
[02:15:31.280 --> 02:15:32.280]  что у нас тут произошло
[02:15:32.280 --> 02:15:34.280]  эвол х теперь тогда
[02:15:34.280 --> 02:15:36.280]  сейчас давайте я скажу
[02:15:36.280 --> 02:15:37.280]  жил был эвол х
[02:15:37.280 --> 02:15:39.280]  но если мы так подвесили
[02:15:39.280 --> 02:15:43.280]  то все эти эволы по умолчанию домножаются
[02:15:43.280 --> 02:15:47.280]  домножаются на rw штрих
[02:15:47.280 --> 02:15:50.280]  и нам его надо нейтрализовать
[02:15:50.280 --> 02:15:57.280]  тогда я предлагаю нейтрализовать его простым дедовским способом
[02:15:57.280 --> 02:15:59.280]  то есть нам надо чтобы
[02:15:59.280 --> 02:16:01.280]  рw штрих в минус 1
[02:16:01.280 --> 02:16:06.280]  на то что там было раньше
[02:16:06.280 --> 02:16:08.280]  то есть тогда заметим, что когда
[02:16:08.280 --> 02:16:10.280]  у всех этих вершин будет домножаться на r
[02:16:10.280 --> 02:16:18.280]  и в общем-то радостно нейтрализуется
[02:16:18.280 --> 02:16:24.280]  ну а у этих товарищей вроде все в порядке
[02:16:24.280 --> 02:16:26.280]  то есть получается, что в некоторых случаях
[02:16:26.280 --> 02:16:29.280]  например когда у нас операция обратима
[02:16:29.280 --> 02:16:31.280]  то есть обратима
[02:16:31.280 --> 02:16:33.280]  ну просто давайте скажем
[02:16:33.280 --> 02:16:35.280]  то обратима в обе стороны
[02:16:35.280 --> 02:16:37.280]  с нейтральным элементом
[02:16:37.280 --> 02:16:42.280]  то тогда у нас никаких проблем нет
[02:16:42.280 --> 02:16:46.280]  ну думаю, так сколько у нас там времени?
[02:16:46.280 --> 02:16:50.280]  45 даже надо закончить
[02:16:50.280 --> 02:16:52.280]  ну да
[02:16:52.280 --> 02:16:54.280]  ну ладно
[02:16:54.280 --> 02:16:56.280]  ну ладно
[02:16:56.280 --> 02:16:58.280]  у Тарьяна тут есть такое
[02:16:58.280 --> 02:17:00.280]  чуть более сложное в этом смысле мероприятие
[02:17:00.280 --> 02:17:02.280]  то есть он утверждает, что достаточно только
[02:17:02.280 --> 02:17:04.280]  там есть такие условия
[02:17:04.280 --> 02:17:06.280]  что элемент должен быть либо вот таким
[02:17:06.280 --> 02:17:08.280]  именно вот с правым обратным
[02:17:08.280 --> 02:17:11.280]  либо право обратимым
[02:17:11.280 --> 02:17:15.280]  либо он должен быть правым нулем
[02:17:15.280 --> 02:17:17.280]  ну там еще было дополнительно
[02:17:17.280 --> 02:17:19.280]  там написано что-то там типа
[02:17:19.280 --> 02:17:21.280]  то есть это такой
[02:17:21.280 --> 02:17:23.280]  то есть x еще может быть правым нулем
[02:17:23.280 --> 02:17:25.280]  ну типа для любого y там верно
[02:17:25.280 --> 02:17:27.280]  y и x равно x
[02:17:30.280 --> 02:17:32.280]  ну там в этом месте там что-то выяснялось
[02:17:32.280 --> 02:17:34.280]  что в этом месте выяснялось
[02:17:34.280 --> 02:17:37.280]  что в общем-то если это оказалось правым нулем
[02:17:39.280 --> 02:17:40.280]  ну вот
[02:17:40.280 --> 02:17:41.280]  то есть там где-то
[02:17:41.280 --> 02:17:42.280]  значит вообще все неважно
[02:17:42.280 --> 02:17:43.280]  ну да
[02:17:43.280 --> 02:17:44.280]  а или наоборот
[02:17:44.280 --> 02:17:46.280]  хотя тут может быть наоборот
[02:17:46.280 --> 02:17:47.280]  только надо x и t
[02:17:47.280 --> 02:17:48.280]  ну помните пожалуйста
[02:17:48.280 --> 02:17:49.280]  почему все это разлирование делали?
[02:17:49.280 --> 02:17:51.280]  нет это мы
[02:17:51.280 --> 02:17:55.280]  пока мы это делаем для того чтобы хотя бы примерно понимать
[02:17:55.280 --> 02:17:59.280]  то есть как все-таки уметь балансировать деревья
[02:17:59.280 --> 02:18:01.280]  если например у нас сумма на пути
[02:18:01.280 --> 02:18:03.280]  сумма на пути там или произведение там
[02:18:03.280 --> 02:18:05.280]  каких-нибудь по какой-нибудь модулю
[02:18:05.280 --> 02:18:07.280]  простому не нулевых остатков
[02:18:07.280 --> 02:18:09.280]  ну и так далее и тому подобное
[02:18:11.280 --> 02:18:13.280]  суммы уже проблем нет
[02:18:15.280 --> 02:18:16.280]  ну как сказать
[02:18:16.280 --> 02:18:17.280]  ну проблем нет
[02:18:17.280 --> 02:18:18.280]  ну теперь вот проблем нет
[02:18:18.280 --> 02:18:20.280]  вот именно теперь проблем нет
[02:18:21.280 --> 02:18:23.280]  ну минимум конечно это все не решает
[02:18:26.280 --> 02:18:27.280]  то есть минимум это вот просто
[02:18:27.280 --> 02:18:29.280]  то есть это просто чтобы немножко войти
[02:18:29.280 --> 02:18:31.280]  понять что мы хотим добиться того
[02:18:31.280 --> 02:18:33.280]  что мы хотим подвешивать не только то
[02:18:35.280 --> 02:18:37.280]  то есть хотим подвешивать иногда
[02:18:37.280 --> 02:18:39.280]  не то что надо к чему надо
[02:18:39.280 --> 02:18:40.280]  иногда наоборот
[02:18:40.280 --> 02:18:42.280]  но при этом все равно выкрутиться так что все хорошо
[02:18:44.280 --> 02:18:46.280]  Жанна самое страшное я вам скажу
[02:18:46.280 --> 02:18:48.280]  мы еще не все проблемы тут решили
[02:18:50.280 --> 02:18:52.280]  потому что хорошо мы научились сделать линк
[02:18:52.280 --> 02:18:54.280]  но вообще-то еще есть операция апдейт
[02:19:00.280 --> 02:19:02.280]  ну в целом понятно как сделать апдейт
[02:19:02.280 --> 02:19:04.280]  хотя в общем-то
[02:19:04.280 --> 02:19:06.280]  ну да
[02:19:06.280 --> 02:19:08.280]  хотя в общем-то никаких проблем нет
[02:19:08.280 --> 02:19:10.280]  на самом деле с апдейтом
[02:19:12.280 --> 02:19:14.280]  а это не важно
[02:19:14.280 --> 02:19:16.280]  на самом деле с нашей точки зрения
[02:19:16.280 --> 02:19:18.280]  это просто дало по дереву сделать так
[02:19:18.280 --> 02:19:20.280]  что все эвалы слева доложились
[02:19:24.280 --> 02:19:26.280]  да он обновляет корень это важно
[02:19:26.280 --> 02:19:28.280]  корень не важно виртуальный корень
[02:19:28.280 --> 02:19:30.280]  единственное тут упоминается маленький технический момент
[02:19:30.280 --> 02:19:32.280]  что вам этот корень придется найти
[02:19:32.280 --> 02:19:34.280]  то есть вам в запрос там
[02:19:34.280 --> 02:19:36.280]  вам передают реальный корень
[02:19:36.280 --> 02:19:38.280]  а у вас там он
[02:19:38.280 --> 02:19:40.280]  нет а у вас там в виртуальном дереве
[02:19:40.280 --> 02:19:42.280]  корень другой
[02:19:42.280 --> 02:19:44.280]  да совершенно верно да именно
[02:19:44.280 --> 02:19:46.280]  именно это да делаем компресс
[02:19:46.280 --> 02:19:48.280]  родителя родитель корень
[02:19:48.280 --> 02:19:50.280]  невероятно
[02:19:50.280 --> 02:19:52.280]  да как бы классик поразительный
[02:19:52.280 --> 02:19:54.280]  я не могу в это поверить
[02:19:54.280 --> 02:19:56.280]  я смотрю на это 5 часов
[02:19:58.280 --> 02:20:00.280]  но
[02:20:00.280 --> 02:20:02.280]  сейчас тут просто еще будет страшное шоу
[02:20:02.280 --> 02:20:04.280]  куда уже страшнее
[02:20:04.280 --> 02:20:06.280]  это ну помилуйте
[02:20:06.280 --> 02:20:08.280]  а теперь что делать если у вас максимум
[02:20:08.280 --> 02:20:10.280]  потому что максимум к сожалению
[02:20:10.280 --> 02:20:12.280]  не обратили
[02:20:12.280 --> 02:20:14.280]  хотя есть вообще для любой операции
[02:20:14.280 --> 02:20:16.280]  не не не
[02:20:16.280 --> 02:20:18.280]  и не мечтайте
[02:20:18.280 --> 02:20:20.280]  такого наука не умеет
[02:20:20.280 --> 02:20:22.280]  а максимум каким
[02:20:22.280 --> 02:20:24.280]  ну коммутативность
[02:20:26.280 --> 02:20:28.280]  он коммутативен
[02:20:28.280 --> 02:20:30.280]  да идем патентом
[02:20:30.280 --> 02:20:32.280]  там это не поможет
[02:20:32.280 --> 02:20:34.280]  а что там поможет
[02:20:34.280 --> 02:20:36.280]  а вот сейчас увидите
[02:20:36.280 --> 02:20:38.280]  а там прям минимум
[02:20:38.280 --> 02:20:40.280]  поможет короче
[02:20:40.280 --> 02:20:42.280]  там прям максимум
[02:20:42.280 --> 02:20:44.280]  короче функция очень
[02:20:44.280 --> 02:20:46.280]  делаем максимум
[02:20:46.280 --> 02:20:48.280]  если не успеем придется в следующий раз продолжать
[02:20:48.280 --> 02:20:50.280]  но ничего страшного
[02:20:50.280 --> 02:20:52.280]  максимум
[02:20:54.280 --> 02:20:56.280]  значит смотрите
[02:20:56.280 --> 02:20:58.280]  давайте вообще себе
[02:20:58.280 --> 02:21:00.280]  представим
[02:21:00.280 --> 02:21:02.280]  как выглядит вот представим себе
[02:21:02.280 --> 02:21:04.280]  реальное дерево это реальное дерево
[02:21:04.280 --> 02:21:06.280]  вообще не виртуальное да
[02:21:08.280 --> 02:21:10.280]  сейчас будет реальное дерево
[02:21:12.280 --> 02:21:14.280]  да
[02:21:14.280 --> 02:21:16.280]  а
[02:21:16.280 --> 02:21:18.280]  это умный кокон
[02:21:18.280 --> 02:21:20.280]  да
[02:21:20.280 --> 02:21:22.280]  это как дайте
[02:21:22.280 --> 02:21:24.280]  смерть какая то
[02:21:24.280 --> 02:21:26.280]  при слове реально обычно там возникают пацаны где то
[02:21:26.280 --> 02:21:28.280]  да
[02:21:28.280 --> 02:21:30.280]  оман
[02:21:30.280 --> 02:21:32.280]  то есть если мы
[02:21:32.280 --> 02:21:34.280]  рассмотрим реальное дерево
[02:21:34.280 --> 02:21:36.280]  и у меня тут написан
[02:21:36.280 --> 02:21:38.280]  допустим петачок
[02:21:38.280 --> 02:21:40.280]  это означает
[02:21:40.280 --> 02:21:42.280]  я могу гарантировать что тогда
[02:21:42.280 --> 02:21:44.280]  эвал от любой вершины в этом дереве
[02:21:44.280 --> 02:21:46.280]  не менее чем 5 правда
[02:21:48.280 --> 02:21:50.280]  но можно заметить
[02:21:50.280 --> 02:21:52.280]  что более того
[02:21:52.280 --> 02:21:54.280]  для некоторых вершин
[02:21:54.280 --> 02:21:56.280]  он даже будет
[02:21:56.280 --> 02:21:58.280]  равен петачку
[02:21:58.280 --> 02:22:00.280]  чтобы их найти
[02:22:00.280 --> 02:22:02.280]  надо просто запустить dfs
[02:22:02.280 --> 02:22:04.280]  по всем вершинам которые не происходят пяти
[02:22:04.280 --> 02:22:06.280]  правда
[02:22:06.280 --> 02:22:08.280]  но может тут вот найти какая нибудь вершина
[02:22:08.280 --> 02:22:10.280]  если тут написано например 7
[02:22:12.280 --> 02:22:14.280]  максим
[02:22:14.280 --> 02:22:16.280]  я вот прописал
[02:22:16.280 --> 02:22:18.280]  еще максим
[02:22:18.280 --> 02:22:20.280]  если вершины 7 это не позиция это лейбл
[02:22:20.280 --> 02:22:22.280]  это не композиция
[02:22:22.280 --> 02:22:24.280]  что не композиция
[02:22:24.280 --> 02:22:26.280]  он разбивает
[02:22:26.280 --> 02:22:28.280]  тогда замечаем
[02:22:28.280 --> 02:22:30.280]  что а теперь заметим
[02:22:30.280 --> 02:22:32.280]  что если тут написан 7
[02:22:32.280 --> 02:22:34.280]  то в некотором смысле
[02:22:34.280 --> 02:22:36.280]  можно это дерево
[02:22:36.280 --> 02:22:38.280]  на самом деле мысленно отпилить
[02:22:40.280 --> 02:22:42.280]  ну по крайней мере отпереть
[02:22:42.280 --> 02:22:44.280]  потому что заметим что тут дальше
[02:22:44.280 --> 02:22:46.280]  все вершины все равно меньше чем 7
[02:22:46.280 --> 02:22:48.280]  поэтому как бы дошли до сюда
[02:22:48.280 --> 02:22:50.280]  и остановились
[02:22:50.280 --> 02:22:52.280]  то есть либо 7 и подвесимся
[02:22:52.280 --> 02:22:54.280]  пока мы почему-то не подвесимся
[02:22:54.280 --> 02:22:56.280]  ну конечно да не только
[02:22:56.280 --> 02:22:58.280]  еще может быть апдейт
[02:22:58.280 --> 02:23:00.280]  то есть смотрите апдейт превращается
[02:23:00.280 --> 02:23:02.280]  в максимум
[02:23:02.280 --> 02:23:04.280]  поэтому мы тут петачок можем заменить на 57
[02:23:04.280 --> 02:23:06.280]  мы можем уметь
[02:23:06.280 --> 02:23:08.280]  делать апдейт
[02:23:08.280 --> 02:23:10.280]  увеличивающий
[02:23:10.280 --> 02:23:12.280]  и уменьшающий тоже
[02:23:12.280 --> 02:23:14.280]  апдейт у нас увеличивающий
[02:23:14.280 --> 02:23:16.280]  потому что напоминаю апдейт у нас
[02:23:16.280 --> 02:23:18.280]  напоминаю что
[02:23:18.280 --> 02:23:20.280]  лейбл от R
[02:23:20.280 --> 02:23:22.280]  присваивается
[02:23:22.280 --> 02:23:24.280]  X with лейбл от V
[02:23:24.280 --> 02:23:26.280]  поэтому как бы да
[02:23:26.280 --> 02:23:28.280]  мы только максимум равно делаем
[02:23:28.280 --> 02:23:30.280]  то есть заменить на рандомное
[02:23:30.280 --> 02:23:32.280]  не получится
[02:23:32.280 --> 02:23:34.280]  это смешивание к дереву
[02:23:34.280 --> 02:23:36.280]  только что созданному
[02:23:36.280 --> 02:23:38.280]  мы нельзя сказать
[02:23:38.280 --> 02:23:40.280]  что апдейтов вообще нет
[02:23:40.280 --> 02:23:42.280]  а есть только создание
[02:23:42.280 --> 02:23:44.280]  новой вершины и подвешивания
[02:23:44.280 --> 02:23:46.280]  потому что количество апдейтов
[02:23:46.280 --> 02:23:48.280]  в симпатике в другом смысле
[02:23:48.280 --> 02:23:50.280]  тогда у вас вершин будет не N
[02:23:50.280 --> 02:23:52.280]  а M
[02:23:52.280 --> 02:23:54.280]  если у вас M все равно порядка N
[02:23:54.280 --> 02:23:56.280]  то можно и так сделать
[02:23:56.280 --> 02:23:58.280]  а симпатика будет чуть-чуть другая
[02:23:58.280 --> 02:24:00.280]  очень сильная
[02:24:00.280 --> 02:24:02.280]  если N равно M
[02:24:02.280 --> 02:24:04.280]  что самое страшное
[02:24:04.280 --> 02:24:06.280]  у вас тут плодориф будет
[02:24:06.280 --> 02:24:08.280]  да
[02:24:08.280 --> 02:24:10.280]  ну вот
[02:24:10.280 --> 02:24:12.280]  а мы еще и альфа хотим
[02:24:12.280 --> 02:24:14.280]  поэтому
[02:24:14.280 --> 02:24:16.280]  смотрите
[02:24:16.280 --> 02:24:18.280]  шоу у нас будет в реальности
[02:24:18.280 --> 02:24:20.280]  виртуальные дерева
[02:24:20.280 --> 02:24:22.280]  мы сейчас откажемся
[02:24:22.280 --> 02:24:24.280]  даже от такой аксемы
[02:24:24.280 --> 02:24:26.280]  что у нас это все хранится в едином дереве
[02:24:26.280 --> 02:24:28.280]  смотрите
[02:24:28.280 --> 02:24:30.280]  в реальности
[02:24:30.280 --> 02:24:32.280]  вот это все
[02:24:32.280 --> 02:24:34.280]  будет храниться вот так
[02:24:34.280 --> 02:24:36.280]  это вот корень
[02:24:36.280 --> 02:24:38.280]  так вот в реальности
[02:24:38.280 --> 02:24:40.280]  у нас будет несколько деревьев
[02:24:40.280 --> 02:24:42.280]  все эти вершины
[02:24:42.280 --> 02:24:44.280]  из одного дерева
[02:24:44.280 --> 02:24:46.280]  так сказать
[02:24:46.280 --> 02:24:48.280]  в этом виртуальном дереве
[02:24:48.280 --> 02:24:50.280]  будут храниться в нескольких деревьях
[02:24:52.280 --> 02:24:54.280]  желательно гарантированно сбалансировано
[02:24:58.280 --> 02:25:00.280]  так
[02:25:00.280 --> 02:25:02.280]  да
[02:25:02.280 --> 02:25:04.280]  гарантируется естественно
[02:25:04.280 --> 02:25:06.280]  что эвалы в этих деревьях
[02:25:06.280 --> 02:25:08.280]  от каждой вершины будут совпадать с правильными
[02:25:08.280 --> 02:25:10.280]  но при этом важно
[02:25:10.280 --> 02:25:12.280]  еще следующее
[02:25:12.280 --> 02:25:14.280]  эти деревья мы будем хранить вот в такой цепочке
[02:25:14.280 --> 02:25:16.280]  обратите внимание
[02:25:16.280 --> 02:25:18.280]  эта цепочка не является
[02:25:18.280 --> 02:25:20.280]  указанием на то что это
[02:25:20.280 --> 02:25:22.280]  чей-то предок
[02:25:22.280 --> 02:25:24.280]  но при этом значит
[02:25:24.280 --> 02:25:26.280]  эти вершины это корень будет
[02:25:26.280 --> 02:25:28.280]  мы его будем называть R0
[02:25:28.280 --> 02:25:30.280]  R1, R2 и так далее
[02:25:30.280 --> 02:25:32.280]  Rk
[02:25:32.280 --> 02:25:34.280]  и при этом
[02:25:34.280 --> 02:25:36.280]  мы про эти корни будем гарантировать
[02:25:36.280 --> 02:25:38.280]  что
[02:25:38.280 --> 02:25:40.280]  лейбл
[02:25:42.280 --> 02:25:44.280]  от R0
[02:25:44.280 --> 02:25:46.280]  меньше либо равно лейбл
[02:25:46.280 --> 02:25:48.280]  от R1
[02:25:48.280 --> 02:25:50.280]  меньше либо равно
[02:25:50.280 --> 02:25:52.280]  лейбл
[02:25:52.280 --> 02:25:54.280]  не можем строгие знаки
[02:25:56.280 --> 02:25:58.280]  не можем
[02:25:58.280 --> 02:26:00.280]  потому что мало ли вдруг у нас равные элементы найдутся
[02:26:00.280 --> 02:26:02.280]  у нас может быть так
[02:26:02.280 --> 02:26:04.280]  что все лейблы
[02:26:04.280 --> 02:26:06.280]  все вершины равны
[02:26:06.280 --> 02:26:08.280]  теоретически можно
[02:26:08.280 --> 02:26:10.280]  нет
[02:26:10.280 --> 02:26:12.280]  надо признать в принципе
[02:26:12.280 --> 02:26:14.280]  как мы сейчас увидим можно гарантировать
[02:26:14.280 --> 02:26:16.280]  что они с равными не заморачиваемся
[02:26:18.280 --> 02:26:20.280]  теперь заметим следующее
[02:26:20.280 --> 02:26:22.280]  мы можем заметить
[02:26:22.280 --> 02:26:24.280]  что если бы мы объявили
[02:26:24.280 --> 02:26:26.280]  что у этого корня родитель предыдущей корень
[02:26:26.280 --> 02:26:28.280]  то на ответ бы это не повлияло
[02:26:28.280 --> 02:26:30.280]  потому что
[02:26:30.280 --> 02:26:32.280]  вот эти все вершины все равно меньше
[02:26:32.280 --> 02:26:34.280]  но это не важно
[02:26:34.280 --> 02:26:36.280]  мы все равно тем не менее подчеркиваем
[02:26:36.280 --> 02:26:38.280]  это я поэтому и пунктиркой нарисовал
[02:26:38.280 --> 02:26:40.280]  что в реальных деревьях
[02:26:42.280 --> 02:26:44.280]  к реальным виртуальным деревьям
[02:26:44.280 --> 02:26:46.280]  что мы тут храним это отношение не имеет
[02:26:46.280 --> 02:26:48.280]  то есть это корни у них в виртуальном дереве родителя нет
[02:26:50.280 --> 02:26:52.280]  да
[02:26:52.280 --> 02:26:54.280]  а где же он содержится
[02:26:54.280 --> 02:26:56.280]  кто содержится
[02:26:58.280 --> 02:27:00.280]  у нас структура данных
[02:27:00.280 --> 02:27:02.280]  внутри себя
[02:27:02.280 --> 02:27:04.280]  что у нас все вершины содержатся
[02:27:04.280 --> 02:27:06.280]  в наборе деревьев
[02:27:06.280 --> 02:27:08.280]  у этих деревьев есть корни
[02:27:08.280 --> 02:27:10.280]  эти корни мы храним в таком списке
[02:27:14.280 --> 02:27:16.280]  а теперь смотрите
[02:27:16.280 --> 02:27:18.280]  что это нам дает
[02:27:18.280 --> 02:27:20.280]  ну во первых начнем с простого
[02:27:22.280 --> 02:27:24.280]  эвал делаем как обычно
[02:27:24.280 --> 02:27:26.280]  поддерживаем вариант
[02:27:26.280 --> 02:27:28.280]  что эвал правильный
[02:27:28.280 --> 02:27:30.280]  причем не выходя из дерева
[02:27:30.280 --> 02:27:32.280]  понимаете да
[02:27:32.280 --> 02:27:34.280]  уровень чуть повыше
[02:27:34.280 --> 02:27:36.280]  как сделать
[02:27:36.280 --> 02:27:38.280]  как сделать апдейт
[02:27:40.280 --> 02:27:42.280]  как сделать баг с равно
[02:27:44.280 --> 02:27:46.280]  ну идея простая
[02:27:46.280 --> 02:27:48.280]  по лейблам
[02:27:52.280 --> 02:27:54.280]  и допустим они там 9,7,5,3,1
[02:27:56.280 --> 02:27:58.280]  и нам неожиданно пришел апдейт
[02:27:58.280 --> 02:28:00.280]  что очень важно
[02:28:00.280 --> 02:28:02.280]  у этого дерева с минимальным лейблом
[02:28:02.280 --> 02:28:04.280]  это корни
[02:28:04.280 --> 02:28:06.280]  это тоже важно
[02:28:06.280 --> 02:28:08.280]  корни реального дерева
[02:28:08.280 --> 02:28:10.280]  и нам пришел апдейт R
[02:28:10.280 --> 02:28:12.280]  и
[02:28:12.280 --> 02:28:14.280]  допустим 6
[02:28:16.280 --> 02:28:18.280]  тогда смотрите какая идея
[02:28:18.280 --> 02:28:20.280]  чем нам сейчас будет приятен максимум
[02:28:22.280 --> 02:28:24.280]  потому что заметим что что поменялось теперь
[02:28:24.280 --> 02:28:26.280]  идея
[02:28:26.280 --> 02:28:28.280]  поменялась следующая
[02:28:28.280 --> 02:28:30.280]  что мы ко всем
[02:28:30.280 --> 02:28:32.280]  у всех эвалов должны брать теперь максимум
[02:28:32.280 --> 02:28:34.280]  из того эвала что был раньше
[02:28:34.280 --> 02:28:36.280]  и 6
[02:28:36.280 --> 02:28:38.280]  но теперь заметим маленькую
[02:28:38.280 --> 02:28:40.280]  приятную вещь
[02:28:40.280 --> 02:28:42.280]  для вершин из этих под деревьев
[02:28:42.280 --> 02:28:44.280]  ничего не поменялось
[02:28:44.280 --> 02:28:46.280]  потому что там у них уже точно
[02:28:46.280 --> 02:28:48.280]  были больше
[02:28:48.280 --> 02:28:50.280]  для этих могло поменяться
[02:29:00.280 --> 02:29:02.280]  нет
[02:29:02.280 --> 02:29:04.280]  никаких свойств куч нет
[02:29:04.280 --> 02:29:06.280]  мы гарантируем только одно
[02:29:06.280 --> 02:29:08.280]  что в корнях
[02:29:08.280 --> 02:29:10.280]  они отсортированы
[02:29:10.280 --> 02:29:12.280]  а во всем остальном
[02:29:12.280 --> 02:29:14.280]  никаких гарантий нет
[02:29:14.280 --> 02:29:16.280]  кто угодно там будет брать больше
[02:29:16.280 --> 02:29:18.280]  меньше любого рода
[02:29:18.280 --> 02:29:20.280]  главное что эвалы
[02:29:20.280 --> 02:29:22.280]  совпадают
[02:29:22.280 --> 02:29:24.280]  и более того
[02:29:24.280 --> 02:29:26.280]  с этими вершинами что то поменяется
[02:29:26.280 --> 02:29:28.280]  я утверждаю
[02:29:28.280 --> 02:29:30.280]  что с точки зрения адекватности
[02:29:30.280 --> 02:29:32.280]  эвала
[02:29:32.280 --> 02:29:34.280]  адекватности эвала
[02:29:34.280 --> 02:29:36.280]  мы теперь можем заменить
[02:29:36.280 --> 02:29:38.280]  все вот эти
[02:29:38.280 --> 02:29:40.280]  вершины на 6
[02:29:40.280 --> 02:29:42.280]  я утверждаю что если мы сделаем
[02:29:42.280 --> 02:29:44.280]  вот такую замену
[02:29:44.280 --> 02:29:46.280]  теперь поменяется
[02:29:46.280 --> 02:29:48.280]  причем так как нам надо
[02:29:48.280 --> 02:29:50.280]  эвалы в этих деревьях
[02:29:50.280 --> 02:29:52.280]  поменялись на максимум
[02:29:52.280 --> 02:29:54.280]  из того что было раньше
[02:29:54.280 --> 02:29:56.280]  в какой вершине сделали максимум
[02:29:56.280 --> 02:29:58.280]  6
[02:29:58.280 --> 02:30:00.280]  во всех корнях у которых
[02:30:00.280 --> 02:30:02.280]  в реальном дереве
[02:30:02.280 --> 02:30:04.280]  в реальном дереве
[02:30:04.280 --> 02:30:06.280]  в корне да
[02:30:06.280 --> 02:30:08.280]  корень всегда соответствует
[02:30:08.280 --> 02:30:10.280]  корень всегда соответствует
[02:30:10.280 --> 02:30:12.280]  мы должны в них теперь
[02:30:12.280 --> 02:30:14.280]  из деревьев играть
[02:30:14.280 --> 02:30:16.280]  сейчас
[02:30:16.280 --> 02:30:18.280]  чтобы как-то этим точку
[02:30:18.280 --> 02:30:20.280]  да вот правильно
[02:30:20.280 --> 02:30:22.280]  с точки зрения того что
[02:30:22.280 --> 02:30:24.280]  эвалы были правильные
[02:30:24.280 --> 02:30:26.280]  то что я сделал этого достаточно
[02:30:28.280 --> 02:30:30.280]  а вот с точки зрения этим точке
[02:30:30.280 --> 02:30:32.280]  напряг
[02:30:32.280 --> 02:30:34.280]  потому что мы это по факту делаем
[02:30:34.280 --> 02:30:36.280]  из этих деревьев
[02:30:36.280 --> 02:30:38.280]  а еще мы видимо должны хранить себя
[02:30:38.280 --> 02:30:40.280]  в обратном порядке
[02:30:40.280 --> 02:30:42.280]  чтобы мы из корня как раз понимали
[02:30:42.280 --> 02:30:44.280]  на самом деле да
[02:30:44.280 --> 02:30:46.280]  в принципе тальян даже так и предлагает
[02:30:46.280 --> 02:30:48.280]  у каждого корня хранить так называемый чайлд
[02:30:48.280 --> 02:30:50.280]  в чем чайлд это вот
[02:30:50.280 --> 02:30:52.280]  но
[02:30:52.280 --> 02:30:54.280]  можно чайлд хранить
[02:30:54.280 --> 02:30:56.280]  можно вектор хранить
[02:30:56.280 --> 02:30:58.280]  но действительно
[02:30:58.280 --> 02:31:00.280]  нам не очень хочется бегать
[02:31:00.280 --> 02:31:02.280]  по этим всем корням
[02:31:02.280 --> 02:31:04.280]  если я возьму два дерева с одинаковыми корнями
[02:31:04.280 --> 02:31:06.280]  с корнями
[02:31:06.280 --> 02:31:08.280]  с одинаковыми корнями
[02:31:08.280 --> 02:31:10.280]  и подвешу одно к другому
[02:31:10.280 --> 02:31:12.280]  то тоже ничего не поменяется
[02:31:12.280 --> 02:31:14.280]  правда
[02:31:14.280 --> 02:31:16.280]  вот
[02:31:16.280 --> 02:31:18.280]  мне плевать тут есть
[02:31:18.280 --> 02:31:20.280]  где тут больше шестерки элемента
[02:31:20.280 --> 02:31:22.280]  где тут меньше
[02:31:22.280 --> 02:31:24.280]  главное если вы повесьте шестерки
[02:31:24.280 --> 02:31:26.280]  шестерки любую больше
[02:31:26.280 --> 02:31:28.280]  то ничего не поменяется
[02:31:28.280 --> 02:31:30.280]  поэтому для того чтобы себе
[02:31:30.280 --> 02:31:32.280]  изнацию
[02:31:32.280 --> 02:31:34.280]  мы сделаем следующее
[02:31:34.280 --> 02:31:36.280]  мы теперь вот эти деревья объединим в одном
[02:31:36.280 --> 02:31:38.280]  по я думаю уже интуитивно понятному принципу
[02:31:38.280 --> 02:31:40.280]  берем вот эти два дерева
[02:31:40.280 --> 02:31:42.280]  и вешаем одно из векторов к другому
[02:31:42.280 --> 02:31:44.280]  какое? ну естественно меньше и к большему
[02:31:44.280 --> 02:31:46.280]  то есть тут вешаем меньше и к большему
[02:31:46.280 --> 02:31:48.280]  потом у результата тоже
[02:31:48.280 --> 02:31:50.280]  объединяем с этим вешаем меньше и к большему
[02:31:50.280 --> 02:31:52.280]  и так далее
[02:31:52.280 --> 02:31:54.280]  а верно что когда мы их объединили
[02:31:54.280 --> 02:31:56.280]  если посмотреть на начальное дерево Т
[02:31:56.280 --> 02:31:58.280]  там это тоже будет связанная компонента
[02:31:58.280 --> 02:32:00.280]  ну с корнем
[02:32:02.280 --> 02:32:04.280]  сейчас чего там будет
[02:32:04.280 --> 02:32:06.280]  как мы получили вот эти нижние деревья
[02:32:10.280 --> 02:32:12.280]  как мы их получили
[02:32:12.280 --> 02:32:14.280]  в каком процессе у нас поединились
[02:32:14.280 --> 02:32:16.280]  вообще деревья на
[02:32:16.280 --> 02:32:18.280]  мультирных ребрах
[02:32:18.280 --> 02:32:20.280]  на линках
[02:32:20.280 --> 02:32:22.280]  на линках
[02:32:22.280 --> 02:32:24.280]  да мы их до линков
[02:32:24.280 --> 02:32:26.280]  пока еще не дошли
[02:32:26.280 --> 02:32:28.280]  хотя на самом деле ввергнуты движения
[02:32:28.280 --> 02:32:30.280]  заметим что в результате этих апдейтов
[02:32:30.280 --> 02:32:32.280]  конечно не будет вверх
[02:32:32.280 --> 02:32:34.280]  что корень самого верхнего элемента
[02:32:34.280 --> 02:32:36.280]  будет совпадать с реальным корнем
[02:32:36.280 --> 02:32:38.280]  нам это не особо важно
[02:32:38.280 --> 02:32:40.280]  в общем то нам это не особо важно
[02:32:40.280 --> 02:32:42.280]  потому что по факту
[02:32:42.280 --> 02:32:44.280]  то есть мы уже поняли что корень нам не особо важен
[02:32:44.280 --> 02:32:46.280]  когда нам просто приходит апдейт
[02:32:46.280 --> 02:32:48.280]  значит просто у всех эвалов
[02:32:48.280 --> 02:32:50.280]  надо сделать максимум равно и мы это сделаем
[02:32:50.280 --> 02:32:52.280]  корень все таки должен быть в корневом дереве
[02:32:52.280 --> 02:32:54.280]  все таки
[02:32:54.280 --> 02:32:56.280]  я утверждаю что будет вверх
[02:32:56.280 --> 02:32:58.280]  на следующее утверждение
[02:32:58.280 --> 02:33:00.280]  корень все равно
[02:33:00.280 --> 02:33:02.280]  может быть даже не корнем
[02:33:02.280 --> 02:33:04.280]  этого первого дерева
[02:33:04.280 --> 02:33:06.280]  но где-то в нем точно будет
[02:33:06.280 --> 02:33:08.280]  и более того эвалок его будет ему равен
[02:33:08.280 --> 02:33:10.280]  вот
[02:33:10.280 --> 02:33:12.280]  потому что
[02:33:12.280 --> 02:33:14.280]  это следует просто из общего ныря
[02:33:14.280 --> 02:33:16.280]  вот
[02:33:16.280 --> 02:33:18.280]  так что здесь разобрались
[02:33:18.280 --> 02:33:20.280]  здесь мы вроде добились того
[02:33:20.280 --> 02:33:22.280]  что все новые
[02:33:22.280 --> 02:33:24.280]  рёбра которые появляются тут в подвешиваниях
[02:33:24.280 --> 02:33:26.280]  они хорошие
[02:33:26.280 --> 02:33:28.280]  да
[02:33:28.280 --> 02:33:30.280]  что такое хорошее ребро
[02:33:30.280 --> 02:33:32.280]  назовем ребро хорошим если при движении по нему
[02:33:32.280 --> 02:33:34.280]  сайс увеличивается хотя бы в два раза
[02:33:36.280 --> 02:33:38.280]  вот так вот
[02:33:38.280 --> 02:33:40.280]  то есть давайте можем начать
[02:33:40.280 --> 02:33:42.280]  определение
[02:33:42.280 --> 02:33:44.280]  ребро хорошее
[02:33:44.280 --> 02:33:46.280]  через минус 3
[02:33:46.280 --> 02:33:48.280]  понял
[02:33:48.280 --> 02:33:50.280]  сейчас мы сейчас оцениваем симпатику
[02:33:50.280 --> 02:33:52.280]  и что мы делаем
[02:33:52.280 --> 02:33:54.280]  ребро parent от v
[02:33:54.280 --> 02:33:56.280]  я пока пробую
[02:33:56.280 --> 02:33:58.280]  parent от v хорошее
[02:33:58.280 --> 02:34:00.280]  я понятно сейчас
[02:34:00.280 --> 02:34:02.280]  на чем мы сейчас останавливаемся
[02:34:02.280 --> 02:34:04.280]  и что будем делать в прошлый раз
[02:34:04.280 --> 02:34:06.280]  что будем делать в прошлый раз
[02:34:08.280 --> 02:34:10.280]  да если
[02:34:10.280 --> 02:34:12.280]  оказалось что
[02:34:12.280 --> 02:34:14.280]  с z от v меньше
[02:34:16.280 --> 02:34:18.280]  если мы завтра придем
[02:34:18.280 --> 02:34:20.280]  и на автомате тут начнем
[02:34:20.280 --> 02:34:22.280]  если мы завтра
[02:34:22.280 --> 02:34:24.280]  то большие проблемы
[02:34:24.280 --> 02:34:26.280]  ну мало ли
[02:34:26.280 --> 02:34:28.280]  если мы идем вчера
[02:34:28.280 --> 02:34:30.280]  если вчера
[02:34:30.280 --> 02:34:32.280]  ну мало ли
[02:34:32.280 --> 02:34:34.280]  профессор мог перепутать эпохи и прийти на занятия в римской
[02:34:36.280 --> 02:34:38.280]  всякое бывает
[02:34:38.280 --> 02:34:40.280]  будет такое определение
[02:34:40.280 --> 02:34:42.280]  на самом деле
[02:34:42.280 --> 02:34:44.280]  на будущее будет такое
[02:34:44.280 --> 02:34:46.280]  ребро хорошее
[02:34:46.280 --> 02:34:48.280]  ребро v parent от v
[02:34:50.280 --> 02:34:52.280]  имеется в виду
[02:34:52.280 --> 02:34:54.280]  именно вот такое
[02:34:54.280 --> 02:34:56.280]  убеждение тут такое
[02:34:56.280 --> 02:34:58.280]  что если все ребра хорошие
[02:34:58.280 --> 02:35:00.280]  то все деревья
[02:35:00.280 --> 02:35:02.280]  сбалансируют
[02:35:02.280 --> 02:35:04.280]  и тогда это получается
[02:35:04.280 --> 02:35:06.280]  правда к сожалению
[02:35:06.280 --> 02:35:08.280]  линк у нас будет устроен так что все ребра хорошие
[02:35:08.280 --> 02:35:10.280]  мы обещаем
[02:35:10.280 --> 02:35:12.280]  но у нас здесь более
[02:35:12.280 --> 02:35:14.280]  чуть более слабо устроено
[02:35:14.280 --> 02:35:16.280]  ребро хорошее
[02:35:16.280 --> 02:35:18.280]  если у тебя при переходе к родителю
[02:35:18.280 --> 02:35:20.280]  происходит удвоение
[02:35:20.280 --> 02:35:22.280]  у дедушки
[02:35:22.280 --> 02:35:24.280]  ребро называется среденьким
[02:35:24.280 --> 02:35:26.280]  метеоком
[02:35:26.280 --> 02:35:28.280]  средничковое
[02:35:28.280 --> 02:35:30.280]  ребро средничковое
[02:35:30.280 --> 02:35:32.280]  если к родителю еще не удвоение
[02:35:32.280 --> 02:35:34.280]  а у дедушки удвоение
[02:35:34.280 --> 02:35:36.280]  тогда оказывается что дерево тоже сбалансировано
[02:35:36.280 --> 02:35:38.280]  и там правда вот этот констант
[02:35:38.280 --> 02:35:40.280]  равно корень из двух
[02:35:40.280 --> 02:35:42.280]  там достаточно легко будет убедиться
[02:35:42.280 --> 02:35:44.280]  и тогда вот оказывается
[02:35:44.280 --> 02:35:46.280]  что мы ухитримся сделать линк так
[02:35:46.280 --> 02:35:48.280]  чтобы
[02:35:48.280 --> 02:35:50.280]  ребра были ну если не хорошими
[02:35:50.280 --> 02:35:52.280]  то уж средничковыми точно
[02:35:52.280 --> 02:35:54.280]  метеок
[02:35:54.280 --> 02:35:56.280]  там это будет
[02:35:56.280 --> 02:35:58.280]  весьма забавно
[02:35:58.280 --> 02:36:00.280]  так что
[02:36:00.280 --> 02:36:02.280]  с этого увидим в следующий раз
