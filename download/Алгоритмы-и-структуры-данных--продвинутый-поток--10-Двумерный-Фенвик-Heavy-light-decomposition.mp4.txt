[00:00.000 --> 00:10.720]  Редкие случаи, начинаем с 9.00, может уже 9.01, но не
[00:10.720 --> 00:11.720]  важно.
[00:11.720 --> 00:15.640]  Что у нас с прошлого раза осталось?
[00:15.640 --> 00:19.680]  В прошлый раз мы обсуждали дерево Фенрика.
[00:19.680 --> 00:23.720]  Сегодня нам даже не особо пригодится то, что такое
[00:23.720 --> 00:26.200]  дерево Фенрика, в смысле как оно внутри устроено.
[00:26.200 --> 00:31.240]  Начнем мы с задачи, с точки зрения которой Фенрика
[00:31.240 --> 00:34.440]  можно рассматривать как черный ящик.
[00:34.440 --> 00:38.280]  То есть представим себе, что у нас есть какой-то
[00:38.280 --> 00:44.240]  массив, как всегда, массив А, и есть черный ящик, который
[00:44.240 --> 00:48.120]  хранит в себе этот массив и умеет делать запросы.
[00:48.120 --> 00:58.280]  Допустим, прибавить число D в позиции поз и найти сумму
[00:58.280 --> 00:59.280]  на отрезке.
[00:59.280 --> 01:02.760]  В принципе, здесь может быть дерево Фенрика, здесь
[01:02.760 --> 01:05.760]  может быть дерево отрезков с операциями снизу, что
[01:05.760 --> 01:06.760]  угодно.
[01:06.760 --> 01:15.400]  И вот у нас возникает такая естественная задача,
[01:15.840 --> 01:19.440]  после всяких операций с прибавлением на отрезке,
[01:19.440 --> 01:23.960]  то есть после всяких массовых операций возникает естественная
[01:23.960 --> 01:24.960]  задача.
[01:24.960 --> 01:31.120]  А если я хочу в этот суровый список добавить операцию,
[01:31.120 --> 01:34.120]  прибавить на подотрески?
[01:34.120 --> 01:40.480]  Ну, кто-то, конечно, да, понятно, что всякими нашими деревьями
[01:40.480 --> 01:43.040]  в огромных количествах это делается, как и просто
[01:43.080 --> 01:45.960]  деревом отрезков с проталкиваемыми операциями.
[01:45.960 --> 01:52.080]  Но оказывается, что необходимости писать эту какую-то страшную
[01:52.080 --> 01:55.000]  рекурсивную для кого-то может быть гадость, на самом
[01:55.000 --> 01:56.000]  деле нет.
[01:56.000 --> 02:00.000]  Потому что есть очень красивый прием, который позволит
[02:00.000 --> 02:03.760]  вам делать это и деревом отрезков снизу, и даже деревом
[02:03.760 --> 02:04.760]  Фенрика.
[02:04.760 --> 02:09.840]  Но как же это будет делаться?
[02:09.840 --> 02:14.280]  Ну, для этого мы когда-то, чтобы это понять, немножко
[02:14.280 --> 02:16.120]  придется разомнуться и кое-что воспомнить.
[02:16.120 --> 02:21.200]  Вот давайте начнем с того, что у нас с вами есть.
[02:21.200 --> 02:24.960]  Вот представим себе, что у нас есть операция только
[02:24.960 --> 02:25.960]  сумм.
[02:25.960 --> 02:26.960]  Вот давайте вспомним.
[02:26.960 --> 02:31.080]  У нас есть вот такая задача, статик РСКУ, да, то есть
[02:31.080 --> 02:32.080]  что это такое?
[02:32.080 --> 02:36.400]  Это означает, что у вас есть дан массив, он не меняется,
[02:36.400 --> 02:39.040]  вам все, что нужно, это уметь находить сумму на подотреске.
[02:39.040 --> 02:42.120]  Как это делать?
[02:42.120 --> 02:46.160]  Да, у нас есть действительно мистический метод, префиксные
[02:46.160 --> 02:47.160]  суммы.
[02:47.160 --> 02:55.120]  То есть, так сказать, по массиву А мы можем построить,
[02:55.120 --> 02:57.760]  там так сказать, массив ПА.
[02:57.760 --> 03:01.760]  Это будет называться у нас там префиксные суммы.
[03:01.760 --> 03:05.680]  То есть, ну, просто буквально сумму на префиксах насчитаем,
[03:05.680 --> 03:08.160]  и тогда мы скажем, что сумма на любом подотреске это
[03:08.160 --> 03:10.680]  сумма на префиксе минус сумма на префиксе.
[03:10.680 --> 03:15.240]  На всякий случай скажу, что сейчас у нас никакой
[03:15.240 --> 03:17.960]  абстракции нет, сейчас мы работаем именно с числами
[03:17.960 --> 03:18.960]  и сложением.
[03:18.960 --> 03:25.760]  Ну или если вы хотите абстракции, то мы работаем, то есть
[03:25.760 --> 03:29.240]  мы работаем с ассоциативными, коммутативными, обратимыми
[03:29.240 --> 03:30.240]  операциями.
[03:30.240 --> 03:35.680]  Ну, может так кому-то больше нравится, я не знаю.
[03:35.760 --> 03:39.240]  Но давайте еще пометим, что по префиксным функциям
[03:39.240 --> 03:43.760]  можно однозначно восстановить и сам массив А.
[03:43.760 --> 03:51.960]  Так мы это будем называть, ну, как бы, будем называть
[03:51.960 --> 03:52.960]  разности соседних.
[03:52.960 --> 03:56.680]  Хотя иногда у меня будет, я думаю, там прорываться
[03:56.680 --> 03:58.560]  словосочетание типа частичные разности.
[03:58.560 --> 04:02.600]  Ну, как типа, это частичная сумма, это частичные разности.
[04:02.600 --> 04:03.600]  Логично.
[04:03.600 --> 04:04.600]  Вот.
[04:04.600 --> 04:07.000]  Так что, в принципе, такие взаимообратные операции.
[04:07.000 --> 04:08.000]  Вот.
[04:08.000 --> 04:14.800]  И так статическое РСК делается просто, но попробуем усилить
[04:14.800 --> 04:15.800]  задачу.
[04:15.800 --> 04:19.040]  Ну, так усилить и, правда, одновременно ослабить.
[04:19.040 --> 04:23.880]  Вот представим себе теперь, что у нас есть такая задача,
[04:23.880 --> 04:27.920]  что тоже дан массив А и хочется на этот раз сделать две
[04:27.920 --> 04:28.920]  операции.
[04:28.920 --> 04:33.200]  Во-первых, операцию Get, то есть редкий случай, надо
[04:33.200 --> 04:36.560]  не сумму на отрезке найти, а получить конкретный
[04:36.560 --> 04:37.560]  элемент.
[04:37.560 --> 04:42.920]  Но при этом хочется прибавлять на отрезки.
[04:42.920 --> 04:47.080]  Нет, вот тут я, пожалуй, красненьким воспользуюсь.
[04:47.080 --> 04:54.080]  Так, вот смотрите, то есть теперь наоборот, не сумма
[04:54.080 --> 04:58.720]  на отрезке изменения в точке, а наоборот значение в точке
[04:58.720 --> 05:00.400]  и изменение на подотреске.
[05:00.400 --> 05:04.520]  Ну, давайте какая-то вопрос, как же это сделать.
[05:04.520 --> 05:09.920]  А ну-ка, давайте на уровне соцопроса, а кто, в принципе,
[05:09.920 --> 05:12.920]  просто знает, как это сделать?
[05:12.920 --> 05:13.920]  Ага.
[05:13.920 --> 05:14.920]  Так.
[05:14.920 --> 05:15.920]  Практически все.
[05:15.920 --> 05:18.800]  Так, а кто знает, как это сделать без использования
[05:18.800 --> 05:20.880]  каких-нибудь там деревьев, отрезков прибавляй там
[05:20.880 --> 05:23.120]  страшных, с прибавлением на отрезки имеется в
[05:23.120 --> 05:24.120]  виду.
[05:24.120 --> 05:28.960]  Так, ну хорошо, давайте, каким же способом это сделать?
[05:29.960 --> 05:30.960]  Ну вот.
[05:30.960 --> 05:31.960]  Ну да.
[05:31.960 --> 05:34.600]  Словом, сканлайн тут лучше не ругаться.
[05:34.600 --> 05:39.200]  Нет, ну сканлайн подразумевает все-таки, что мы тут делаем
[05:39.200 --> 05:42.520]  один проход, какой-то офлайновый запрос, давайте лучше не
[05:42.520 --> 05:43.520]  надо.
[05:43.520 --> 05:47.280]  А вот разности соседних тут действительно очень
[05:47.280 --> 05:48.800]  сильно выручают.
[05:48.800 --> 05:49.800]  Давайте посмотрим.
[05:49.800 --> 05:52.640]  То есть действительно есть у нас, допустим, есть массив
[05:52.640 --> 05:58.280]  А, в котором есть числа, допустим, 5, 7, 2, 4, 8, 0.
[05:58.280 --> 06:00.960]  Там, я не знаю, 9, 3.
[06:00.960 --> 06:03.000]  Нет, побольше надо.
[06:03.000 --> 06:09.880]  Там давайте что-нибудь еще добавим туда.
[06:09.880 --> 06:12.960]  6, 2, 5, 4, 8.
[06:12.960 --> 06:13.960]  Вот.
[06:13.960 --> 06:18.000]  И действительно, если мы хотим взять какой-нибудь
[06:18.000 --> 06:20.840]  вот такой там, какой-нибудь вот такой вот подотрезок
[06:20.840 --> 06:24.760]  и сказать, давайте прибавим к нему, к каждому этому элементу
[06:24.760 --> 06:28.040]  прибавим, ну я не знаю, 57.
[06:28.280 --> 06:30.120]  Ну что еще, действительно.
[06:30.120 --> 06:31.120]  Вот.
[06:31.120 --> 06:34.760]  Тогда, чтобы правильно модифицировать массив А, мы
[06:34.760 --> 06:37.520]  действительно должны прибавить, там сделать везде плюс
[06:37.520 --> 06:42.360]  57, плюс 57, плюс 57, плюс 57 и плюс 57.
[06:42.360 --> 06:49.760]  Но, а теперь что делать, если мы вместо этого возьмем
[06:49.760 --> 06:53.760]  вот массив ДА, который будет префиксными разностями.
[06:53.760 --> 06:54.760]  Вот.
[06:55.160 --> 06:58.160]  То есть давайте я тут даже, чтобы было понятнее,
[06:58.160 --> 07:00.160]  я в явном виде могу даже нарисовать.
[07:00.160 --> 07:04.160]  Минус 1, 4, минус 3, 2.
[07:07.160 --> 07:09.160]  Нет, не совсем точно.
[07:09.160 --> 07:11.160]  Так, нет, давайте так сделаем.
[07:11.160 --> 07:14.160]  Так, вот так вот.
[07:14.160 --> 07:19.760]  Значит, минус, значит, тут будет минус 1, тут будет
[07:19.760 --> 07:24.160]  4, тут будет минус 3, тут будет 2, тут будет минус 5, тут
[07:24.160 --> 07:28.160]  будет 2, тут будет 4, тут будет минус 8, тут 9, тут будет
[07:28.160 --> 07:29.160]  минус 6.
[07:29.160 --> 07:33.160]  Как от этого прибавления изменится массив?
[07:33.160 --> 07:37.160]  Вот изменится массив частично, там вот этих вот разностей
[07:37.160 --> 07:38.160]  соседних.
[07:38.160 --> 07:41.160]  Но оказывается, что изменится он ровно в двух точках.
[07:41.160 --> 07:46.160]  Потому что вот эта разность увеличится на 57 и вот эта
[07:46.160 --> 07:49.160]  разность, следующая за окончанием отрезка, уменьшится
[07:49.160 --> 07:50.160]  на 57.
[07:50.160 --> 07:52.160]  Ну как легко убедиться, больше никакая разность не
[07:52.160 --> 07:53.160]  изменится никак.
[07:53.160 --> 07:54.160]  Видно, да?
[07:54.160 --> 07:55.160]  Да.
[07:55.160 --> 07:58.160]  Вот тут мы, кстати, воспользовались коммутативностью, обратите
[07:58.160 --> 07:59.160]  внимание.
[07:59.160 --> 08:01.160]  Что можно взять два числа.
[08:01.160 --> 08:04.160]  И оказывается, что если к одному из них прибавить
[08:04.160 --> 08:08.160]  57 и к другому прибавить 57, то у них разность не поменяется.
[08:08.160 --> 08:09.160]  Вот.
[08:09.160 --> 08:13.160]  То есть мало того, что обратимость, так еще и коммутативность
[08:13.160 --> 08:14.160]  тут нам потребовалась.
[08:14.160 --> 08:15.160]  Вот.
[08:15.160 --> 08:19.160]  Но тогда это означает, что никаких там суперэкзотических
[08:19.160 --> 08:22.160]  массовых операций нам писать не надо.
[08:22.160 --> 08:23.160]  Да?
[08:23.160 --> 08:24.160]  Ни в коем образом.
[08:24.160 --> 08:27.160]  Но вот вместо этого нужно написать, взять просто
[08:27.160 --> 08:30.160]  хранив вместо массива А массив разности соседних
[08:30.160 --> 08:35.160]  и храним на нем можем хранить абсолютно обычное дерево
[08:35.160 --> 08:36.160]  Фенвика.
[08:36.160 --> 08:39.160]  Ну правда, да, говоримся, что как сделать вот операцию
[08:39.160 --> 08:40.160]  GetPos.
[08:40.160 --> 08:42.160]  Но GetPos, то есть на самом деле каждый элемент в массиве
[08:42.160 --> 08:45.160]  А это просто сумма на префиксе в массиве А.
[08:45.160 --> 08:46.160]  Думают, понятно, да?
[08:46.160 --> 08:47.160]  Да.
[08:47.160 --> 08:48.160]  Вот.
[08:48.160 --> 08:50.160]  Так что получается, что изобретать ничего не надо,
[08:50.160 --> 08:53.160]  то есть надо писать абсолютно того же Фенвика и просто
[08:53.160 --> 08:55.160]  чуть-чуть пошаманить с разностью соседних.
[08:55.160 --> 08:56.160]  Вот.
[08:56.160 --> 08:59.160]  Ну а если там прибавить на подотрески, требуется
[08:59.160 --> 09:00.160]  что-то.
[09:00.160 --> 09:04.160]  Но это, правда, надо писать от ELR, конечно, X какой-нибудь,
[09:04.160 --> 09:05.160]  чтобы красиво было.
[09:05.160 --> 09:06.160]  Это получается так.
[09:06.160 --> 09:07.160]  Очень удобно.
[09:07.160 --> 09:10.160]  То есть в принципе тоже вот такой вот стандартный
[09:10.160 --> 09:11.160]  метод есть.
[09:11.160 --> 09:12.160]  Вот.
[09:12.160 --> 09:16.160]  Ну а теперь возникает естественный момент.
[09:16.160 --> 09:22.160]  А что же делать, если мы хотим и сумму на подотреске,
[09:22.160 --> 09:26.160]  и прибавлять на подотрески?
[09:26.160 --> 09:28.160]  Ну первая идея действительно тоже понятна.
[09:28.160 --> 09:32.160]  Наверное, хотелось бы, конечно, работать не с массивом
[09:32.160 --> 09:34.160]  А, а с массивом dA.
[09:34.160 --> 09:36.160]  Он как-то очень удобно меняется.
[09:36.160 --> 09:40.160]  Но ведь сумма как-то странно меняется.
[09:40.160 --> 09:41.160]  Ну давайте посмотрим.
[09:41.160 --> 09:44.160]  Но для этого давайте посмотрим как.
[09:44.160 --> 09:49.160]  Ну для этого нам достаточно посмотреть вот на что.
[09:49.160 --> 09:50.160]  Так.
[09:50.160 --> 09:56.160]  Ну во-первых, заметим, что сумму на подотреске можно
[09:56.160 --> 09:59.160]  легко свести, как всегда, к сумме на префексе.
[09:59.160 --> 10:00.160]  Логично, да?
[10:00.160 --> 10:01.160]  Вот.
[10:01.160 --> 10:02.160]  Вот давайте сведем.
[10:02.160 --> 10:05.160]  Вот давайте скажем, что сумма.
[10:05.160 --> 10:09.160]  Вот давайте сейчас я честно скажу, мне сейчас будет очень
[10:09.160 --> 10:13.160]  удобно сказать, что массив у нас в один индексации.
[10:14.160 --> 10:15.160]  Вот.
[10:15.160 --> 10:16.160]  Так вот.
[10:16.160 --> 10:20.160]  Значит сумма от LR, она равна, на самом деле, как известно,
[10:20.160 --> 10:25.160]  сумма от 1R минус сумма от 1L минус 1.
[10:25.160 --> 10:27.160]  Ну не минус, а вот.
[10:27.160 --> 10:30.160]  Поэтому остается только найти сумму на, научиться
[10:30.160 --> 10:32.160]  искать сумму на префексе.
[10:32.160 --> 10:35.160]  Но для этого давайте немножко позанимаемся алкеброй.
[10:35.160 --> 10:37.160]  Что такое сумма на префексе?
[10:37.160 --> 10:38.160]  Сумма от 1R.
[10:38.160 --> 10:39.160]  Это что такое?
[10:39.160 --> 10:46.160]  По определению, это сумма по всем I от 1 до R.
[10:46.160 --> 10:49.160]  А это я просто написал определение.
[10:49.160 --> 10:54.160]  А теперь давайте попробуем подменить массив A на префекс
[10:54.160 --> 10:56.160]  на вот эти вот разности.
[10:56.160 --> 10:58.160]  Получится примерно следующее.
[11:02.160 --> 11:03.160]  Чего?
[11:03.160 --> 11:04.160]  Спокойно.
[11:04.160 --> 11:05.160]  Ой, Господи.
[11:05.160 --> 11:06.160]  Спокойно, да.
[11:07.160 --> 11:09.160]  Как-то знаете, вот у нас на химии был закон.
[11:09.160 --> 11:10.160]  Не все, да.
[11:10.160 --> 11:11.160]  Как бы на химии был закон.
[11:11.160 --> 11:14.160]  Не любая реакция, которую вы напишите на бумажке работы.
[11:14.160 --> 11:15.160]  Проверьте, значит так.
[11:15.160 --> 11:18.160]  Не всякое умное словосочетание, которое вы скажете, будет
[11:18.160 --> 11:20.160]  иметь отношение к делу.
[11:20.160 --> 11:21.160]  Осторожно.
[11:22.160 --> 11:24.160]  К сожалению, да.
[11:28.160 --> 11:29.160]  Ну вот.
[11:29.160 --> 11:31.160]  То есть на самом деле вот.
[11:31.160 --> 11:34.160]  То есть вот такую двойную сумму надо на самом деле найти.
[11:36.160 --> 11:39.160]  А теперь давайте немножко переставимся.
[11:40.160 --> 11:42.160]  То есть на самом деле.
[11:42.160 --> 11:45.160]  То есть теперь заметим, что на самом деле мы суммируем
[11:45.160 --> 11:46.160]  dA gt.
[11:46.160 --> 11:50.160]  Просто каждое dA я беру в этой сумме сколько-то раз.
[11:52.160 --> 11:53.160]  Вот.
[11:53.160 --> 11:55.160]  То есть я могу так и написать, что эта сумма по всем g
[11:55.160 --> 12:00.160]  от 1 до R dA gt умножить на.
[12:01.160 --> 12:03.160]  А скажите мне, что?
[12:04.160 --> 12:06.160]  R минус g плюс 1.
[12:06.160 --> 12:07.160]  Да, конечно.
[12:07.160 --> 12:08.160]  Разумеется.
[12:08.160 --> 12:09.160]  Или даже R плюс 1 минус g.
[12:09.160 --> 12:11.160]  Ну, впрочем, тут.
[12:11.160 --> 12:13.160]  Кому как.
[12:13.160 --> 12:14.160]  Вот.
[12:14.160 --> 12:15.160]  Да.
[12:15.160 --> 12:17.160]  R плюс 1 минус g.
[12:18.160 --> 12:19.160]  Что?
[12:19.160 --> 12:20.160]  Вопрос?
[12:20.160 --> 12:22.160]  Если вопрос, лучше задавайте сразу.
[12:27.160 --> 12:28.160]  Не было.
[12:28.160 --> 12:29.160]  Ну, вдвоем исполняем.
[12:29.160 --> 12:31.160]  У меня тут как бы не от этого зависит.
[12:31.160 --> 12:32.160]  У меня было бы то же самое.
[12:32.160 --> 12:34.160]  Только у меня тут нет единицы от нуля было.
[12:35.160 --> 12:36.160]  Так что.
[12:36.160 --> 12:37.160]  Ничего.
[12:37.160 --> 12:38.160]  Ну, вот.
[12:38.160 --> 12:39.160]  Хотя.
[12:39.160 --> 12:40.160]  Не хотя.
[12:40.160 --> 12:41.160]  Не-не-не.
[12:41.160 --> 12:42.160]  R плюс 1.
[12:42.160 --> 12:43.160]  Ой.
[12:43.160 --> 12:44.160]  Там ничего бы.
[12:44.160 --> 12:45.160]  Может даже R плюс 2.
[12:45.160 --> 12:46.160]  Так что нет.
[12:46.160 --> 12:47.160]  Тут дело не в этом.
[12:47.160 --> 12:49.160]  Вот если бы тут сумму делали с полуинтервалами, тогда
[12:49.160 --> 12:50.160]  да.
[12:50.160 --> 12:53.160]  Тогда у нас действительно был шанс избавиться от плюс
[12:53.160 --> 12:54.160]  минус единички.
[12:54.160 --> 12:55.160]  Но.
[12:55.160 --> 12:56.160]  Ну, скажем так.
[12:56.160 --> 12:57.160]  Это уже такое.
[12:57.160 --> 12:59.160]  То есть, честно скажу.
[12:59.160 --> 13:02.160]  На мой вкус это скорее уже такое дело привычки.
[13:02.160 --> 13:03.160]  Вот.
[13:03.160 --> 13:05.160]  То есть, в конце концов, мы дерево полуинтервалов,
[13:05.160 --> 13:08.160]  по-моему, деревом полуинтервалов с вами особо не баловались.
[13:08.160 --> 13:10.160]  Поэтому, собственно, там за это не цепляемся.
[13:10.160 --> 13:11.160]  Вот.
[13:11.160 --> 13:14.160]  Впрочем, если вы на экзамене выведете это через полуинтервалы,
[13:14.160 --> 13:16.160]  в общем-то, никто, естественно, не расстроится.
[13:16.160 --> 13:17.160]  Собственно, так.
[13:17.160 --> 13:18.160]  Как вам мог.
[13:18.160 --> 13:19.160]  Так.
[13:19.160 --> 13:20.160]  Но давайте.
[13:20.160 --> 13:21.160]  Тут идея, в общем-то, не в этом.
[13:21.160 --> 13:24.160]  Идея в том, что давайте это чуть-чуть вот еще можем
[13:24.160 --> 13:25.160]  переписать.
[13:25.160 --> 13:26.160]  Это можно переписать в следующем виде.
[13:26.160 --> 13:28.160]  R плюс 1 на сумму.
[13:28.160 --> 13:30.160]  Вот такую.
[13:32.160 --> 13:34.160]  И минус сумма.
[13:34.160 --> 13:35.160]  Вот такая.
[13:36.160 --> 13:39.160]  Умножить на dA жид.
[13:41.160 --> 13:43.160]  Вот такая радость.
[13:44.160 --> 13:47.160]  Но, в принципе, заметьте, что вот эта сумма это уже
[13:47.160 --> 13:50.160]  говорит нам о том, что мы могли бы, как и ранее,
[13:50.160 --> 13:53.160]  в мощного сиве dA забабахать обычного фенвика.
[13:53.160 --> 13:55.160]  И, собственно, эту сумму легко находить.
[13:56.160 --> 13:57.160]  Вот.
[13:57.160 --> 14:01.160]  Но этот просто фенвик нам на халяву не даст возможности
[14:01.160 --> 14:02.160]  находить вот эту сумму.
[14:02.160 --> 14:04.160]  Тут же каждый элемент еще надо что-то домножать.
[14:06.160 --> 14:10.160]  Но тут все достаточно просто.
[14:10.160 --> 14:14.160]  Мы вводим массив, который будем называть, давайте
[14:14.160 --> 14:17.160]  сразу это поймем, dA жид.
[14:22.160 --> 14:24.160]  Ну скажите так, это просто A.
[14:24.160 --> 14:26.160]  Но другая фишка, идея у нас будет заключаться в том,
[14:26.160 --> 14:28.160]  что мы же массив А-то не храним...
[14:28.160 --> 14:30.160]  Да, мы же не хотим его хранить, потому
[14:30.160 --> 14:31.160]  что А-то такой изменяется слишком сильно.
[14:31.160 --> 14:33.460]  Поэтому мы хотим хранить массив.
[14:33.460 --> 14:36.160]  Хотели хранить массив, чтобы он изменялся только
[14:36.160 --> 14:37.160]  в двух точках.
[14:37.160 --> 14:40.160]  Но, правда, теперь на для того, чтобы искать этот
[14:40.160 --> 14:44.160]  сумму мы заведем массив dA ж, где мы просто объявим
[14:44.160 --> 14:45.160]  официальное определение.
[14:45.160 --> 14:48.160]  Просто это официальное определение dA ж.
[14:48.160 --> 14:49.160]  dA жид.
[14:49.160 --> 14:53.160]  Это просто dA на ж умножить на ж.
[14:53.160 --> 14:55.960]  Просто вот официальное определение такое.
[14:55.960 --> 15:01.300]  к чему это нас приводит приводит нас к это то есть вот прям вот в явном виде сейчас эту
[15:01.300 --> 15:08.980]  прям вот в наглую так и напишу там 6 то есть потом будет минус 8 до ячеечки маленькие какие-то тут
[15:08.980 --> 15:20.620]  оказывается до 9 минус 4 20 ой ну да как это но великому эмиру быстро на скучило считать он
[15:20.620 --> 15:33.460]  позвал мудрецов и они стали считать сами соответственно те что тут у нас 40 минус 88
[15:33.460 --> 15:48.420]  о 9 на 12 сколько будет браво так и так а ну 6 на 13 это уже да так да что-то не так страшно все
[15:48.420 --> 15:54.540]  оказалось так но в результате но теперь заметим что этого дрожи тоже прятавшийся массив да меняется
[15:54.540 --> 16:01.380]  в двух точках то и массив дрожи меняется всего лишь в двух точках то здесь правда будет 57 умножить
[16:01.380 --> 16:11.540]  на 4 там вычислять не буду вот значит так ладно только не на 4 она 5 конечно там 5 6 7 8 9 10 и тут
[16:11.540 --> 16:25.300]  11 и тут получается минус 57 умножить на 11 вот тоже оказывается очень удобно вот то есть в
[16:25.300 --> 16:31.980]  принципе то есть давайте вот чтобы совсем красиво еще вот сделаю казалось бы лишнюю строчку то есть
[16:31.980 --> 16:45.220]  теперь я свел задачу к поиску на префексе на даже минус сумму на префексе да а жи житых вот
[16:45.220 --> 16:55.460]  такая красота то есть мы просто храним два вот таких массива и храним два массива если но вот
[16:55.700 --> 17:01.580]  каждому из них забабахиваем фенвико и вот делаем и если нам приходит запрос там сумма
[17:01.580 --> 17:07.760]  наотрески мы находим просто ну что мы делаем то есть если нам приходит сумма наотреске мы
[17:07.760 --> 17:13.460]  вызываем две функции поиска суммы на префексе каждый из которых сводится к двум запросам на
[17:13.460 --> 17:21.980]  префексе по одному в каждый массив видно и того но вот а если нам приходит запрос прибавить на
[17:21.980 --> 17:26.580]  на отрезке, то тогда мы просто делаем по две операции
[17:26.580 --> 17:29.380]  изменения в точке, в массиве dA и в массиве dAj.
[17:29.380 --> 17:33.420]  В общем, оказалось очень удобно, в общем-то ничего
[17:33.420 --> 17:36.300]  тут такого сильно умного-то и нет.
[17:36.300 --> 17:42.660]  Вот, но видите, что есть эта технология, что приятно
[17:42.660 --> 17:43.660]  в этой технологии?
[17:43.660 --> 17:46.460]  В этой технологии приятно то, что она вообще никак
[17:46.460 --> 17:49.620]  не зависит от того, как конкретно вы делаете вот
[17:49.620 --> 17:50.620]  это изменение в точке.
[17:50.620 --> 17:53.420]  То есть в этом месте можно делать как дерево фенлика,
[17:53.420 --> 17:55.740]  так и дерево отрезков с изменением в точке, которое
[17:55.740 --> 17:56.740]  снизу.
[17:56.740 --> 18:00.180]  Так что если вы там случайно, если случайно оказалось,
[18:00.180 --> 18:03.780]  что вы забыли, как делается прибавление на подотрезке,
[18:03.780 --> 18:05.900]  то есть там вот массовые операции, то есть для вас
[18:05.900 --> 18:08.740]  это какая-то сложная штука или вы там просто надух
[18:08.740 --> 18:11.420]  не переносите рекурсию, то собственно вот на самом
[18:11.420 --> 18:14.500]  деле вот такой лайфхак вам вполне себе может быть
[18:14.500 --> 18:15.500]  актуален.
[18:16.500 --> 18:17.500]  Вот.
[18:17.500 --> 18:20.500]  Кажется, это уже не сильно лучше, чем дерево отрезков.
[18:20.500 --> 18:21.500]  Ну.
[18:21.500 --> 18:25.500]  Потому что два памяти, два запроса.
[18:25.500 --> 18:27.500]  Нет, ну, скажем вот.
[18:27.500 --> 18:31.500]  Нет, ну так, нет, ну как сказать, нет, ну лучше, нет, преимущество
[18:31.500 --> 18:33.500]  тут конечно будет скорее за счет того, что тут нет
[18:33.500 --> 18:34.500]  рекурсии разве что.
[18:34.500 --> 18:35.500]  Да.
[18:35.500 --> 18:43.500]  То есть, нет, смотрите, нет, преимущества тут такие,
[18:43.500 --> 18:46.500]  да, что, что, как бы тут нет рекурсии, то есть, скорее
[18:46.500 --> 18:47.500]  всего, вы по константе выиграете.
[18:47.500 --> 18:50.500]  Хоть, конечно, недостаток есть в том, что это работает
[18:50.500 --> 18:53.500]  конкретно для прибавления на отрезки и суммы на отрезки.
[18:53.500 --> 18:57.500]  То есть, малейшая другая операция, то тут наши полномочия
[18:57.500 --> 18:59.500]  уже все, соответственно.
[18:59.500 --> 19:06.500]  Ну, да, да, да, да, да, да, ассоциативная, коммутативная,
[19:06.500 --> 19:07.500]  обратимая операция, пожалуйста.
[19:07.500 --> 19:09.500]  Хоть сумма матрицы.
[19:09.500 --> 19:10.500]  Да.
[19:10.500 --> 19:14.500]  Нет, а вот с умножением матрицу будет больно.
[19:14.500 --> 19:21.500]  А, нет, умножение, да, умно, скажи так, умно, формально
[19:21.500 --> 19:24.500]  скажем, давайте умножение не нулевых чисел тогда.
[19:24.500 --> 19:28.500]  Или, да, умножение не нулевых остатков по простому модулю,
[19:28.500 --> 19:29.500]  да.
[19:29.500 --> 19:33.500]  Или умножение по непростому модулю взаимно простых
[19:33.500 --> 19:35.500]  с модулем остатков.
[19:35.500 --> 19:38.500]  Да, пожалуйста, там сколько?
[19:38.500 --> 19:39.500]  Ладно.
[19:39.500 --> 19:45.500]  Да, да, да, да, да, с ксором тут красота, конечно.
[19:45.500 --> 19:48.500]  Да, ну, с ксором, да, ксор вообще приятен тем, что у него
[19:48.500 --> 19:51.500]  вычастие, вычастие прибавить это одно и то же.
[19:51.500 --> 19:54.500]  Да, но это уже там, да, совсем другое.
[19:54.500 --> 19:58.500]  Но, впрочем, у этой штуки есть неожиданно, но, впрочем,
[19:58.500 --> 20:01.500]  с другой стороны, у этой штуки, у этой идеи есть, на
[20:01.500 --> 20:04.500]  самом деле, еще одно неожиданное преимущество.
[20:04.500 --> 20:08.500]  Сейчас мы отправимся в граммире и неожиданно выяснится,
[20:08.500 --> 20:12.500]  что, забегая вперед, что эта идея там работает,
[20:12.500 --> 20:15.500]  а отложенной операции нет.
[20:15.500 --> 20:16.500]  Чего?
[20:16.500 --> 20:17.500]  В многомерии.
[20:17.500 --> 20:21.500]  Ну ладно, не сильно многомерия.
[20:21.500 --> 20:26.500]  Давайте начнем с простого, начнем с двумерии.
[20:26.500 --> 20:28.500]  Вот.
[20:28.500 --> 20:33.500]  Да, потому что, действительно, да, потому что давайте это,
[20:33.500 --> 20:35.500]  значит, мы ликвидируем все это безобразие.
[20:35.500 --> 20:38.500]  Ну есть тут никаких вопросов нет, конечно.
[20:38.500 --> 20:41.500]  Ну вроде, ну да, тут вроде, да, для вас уже, то есть,
[20:41.500 --> 20:44.500]  да, никакой, там, для вас уже никакой сложности нет.
[20:44.500 --> 20:48.500]  Да, вы уже, все-таки да, вы уже, как это да.
[20:48.500 --> 20:51.500]  ЕГЭ по математике вы сдали, поэтому там вот это вот вас
[20:51.500 --> 20:52.500]  пугать не должно.
[20:52.500 --> 20:56.500]  Не, просто иногда, там просто, когда-то, когда-то, иногда
[20:56.500 --> 20:58.500]  девятьклассникам это там объясняешь или восьмиклассникам,
[20:58.500 --> 21:01.500]  то, на самом деле, у кого-то там, вот эти вот абстрактные
[21:01.500 --> 21:03.500]  записи могут мозг взорвать иногда.
[21:03.500 --> 21:07.500]  Ну вот, но это нет, все зависит от того, просто, как бы,
[21:07.500 --> 21:10.500]  насколько вы привыкли к такому абстрактному мышлению
[21:10.500 --> 21:11.500]  и подобного рода записям.
[21:11.500 --> 21:13.500]  То есть, как бы, я думаю, да, понятно, что на вашем
[21:13.500 --> 21:15.500]  уровне, конечно, никаких проблем уже нет.
[21:15.500 --> 21:18.500]  Вот, впрочем, да, к сожалению, я уже, да, как бы, да, я уже,
[21:18.500 --> 21:20.500]  я уже забыл спросить, в принципе, кто, в принципе,
[21:20.500 --> 21:22.500]  это там знал и ранее.
[21:22.500 --> 21:24.500]  Вот, но не важно.
[21:24.500 --> 21:25.500]  Так.
[21:25.500 --> 21:27.500]  И так, смотрите.
[21:28.500 --> 21:32.500]  Вот так вот, вот так вот.
[21:32.500 --> 21:33.500]  Все.
[21:33.500 --> 21:35.500]  И так, на многомере.
[21:35.500 --> 21:39.500]  Значит, значит так, то есть, хотим порешать задачу
[21:39.500 --> 21:42.500]  какую-нибудь такое двумерное РСК.
[21:42.500 --> 21:47.500]  Значит, что это означает?
[21:47.500 --> 21:53.500]  Это означает, что массив А у нас неожиданно стал двумерным.
[21:54.500 --> 21:57.500]  Вот давайте я буду...
[21:57.500 --> 22:00.500]  Ну, то есть, вот давайте...
[22:00.500 --> 22:02.500]  То есть, тут я обычно...
[22:02.500 --> 22:06.500]  Ну, тут у меня обычно Х, а тут обычно И.
[22:06.500 --> 22:07.500]  Вот.
[22:07.500 --> 22:08.500]  Тоже как всегда.
[22:08.500 --> 22:13.500]  Тут от одного до Н, тут от одного до М.
[22:13.500 --> 22:14.500]  Вот.
[22:14.500 --> 22:18.500]  Тут какие-то у нас чиселки стоят.
[22:18.500 --> 22:19.500]  Вот.
[22:19.500 --> 22:22.500]  Ну, чиселки Дашу.
[22:25.500 --> 22:26.500]  Как это называется?
[22:26.500 --> 22:29.500]  Принцип действия бенитовой палочки.
[22:29.500 --> 22:31.500]  Жутко смешное словосочетание.
[22:31.500 --> 22:35.500]  Но каждого смешит свое слово.
[22:35.500 --> 22:36.500]  Так.
[22:36.500 --> 22:41.500]  Ну, вот давайте тут что-нибудь веселое.
[22:41.500 --> 22:42.500]  Так, 6.
[22:42.500 --> 22:43.500]  А впрочем...
[22:43.500 --> 22:44.500]  Ладно, я могу чуть позже прописать,
[22:44.500 --> 22:46.500]  пока это не сильно принципиально.
[22:46.500 --> 22:50.500]  Значит, я на таком массиве хочу сделать следующие операции.
[22:55.500 --> 22:57.500]  Ну, как сказать?
[22:57.500 --> 22:59.500]  Ну, на самом деле, по-разному.
[22:59.500 --> 23:01.500]  Разные бывают ограничения.
[23:01.500 --> 23:04.500]  Ну, в идеале, конечно, хотелось бы Н умножить на М,
[23:04.500 --> 23:07.500]  не превосходит 10 в какую-нибудь.
[23:11.500 --> 23:12.500]  Ну, хотя бы в шестой.
[23:12.500 --> 23:13.500]  Ладно.
[23:13.500 --> 23:14.500]  Давайте...
[23:19.500 --> 23:20.500]  Ну, там...
[23:20.500 --> 23:22.500]  Ну, по ситуации, на самом деле.
[23:22.500 --> 23:23.500]  Ну, посмотрим.
[23:23.500 --> 23:24.500]  Давайте, ладно.
[23:24.500 --> 23:26.500]  Для нас, скажем, для простоты 10 в пятой.
[23:26.500 --> 23:28.500]  Там бесконечно долго можно думать.
[23:28.500 --> 23:30.500]  Это там бесконечное число модификаций.
[23:30.500 --> 23:33.500]  Значит, все вообще хочется делать.
[23:33.500 --> 23:35.500]  Так.
[23:35.500 --> 23:38.500]  Ну, вообще, конечно, хочется, как всегда.
[23:38.500 --> 23:40.500]  То есть, в идеале.
[23:40.500 --> 23:43.500]  То есть, хочется, конечно же, искать...
[23:47.500 --> 23:49.500]  ...сумму на подпрямоугольнике.
[23:54.500 --> 23:56.500]  То есть, ну, как так говорят?
[23:56.500 --> 23:58.500]  На подпрямоугольнике, сумму сторон,
[23:58.500 --> 24:00.500]  которого параллельно осям координат.
[24:00.500 --> 24:02.500]  Что важно.
[24:03.500 --> 24:04.500]  А то именно вот.
[24:04.500 --> 24:06.500]  Нет, это была бы, конечно, отдельная песня.
[24:06.500 --> 24:08.500]  Если у вас есть задача, называется дан...
[24:08.500 --> 24:10.500]  Рандомно повернутый прямоугольник,
[24:10.500 --> 24:12.500]  пожалуйста, найдите сумму всех чисел,
[24:12.500 --> 24:14.500]  которые туда попали.
[24:14.500 --> 24:16.500]  В том или ином смысле.
[24:16.500 --> 24:18.500]  Да и да.
[24:18.500 --> 24:20.500]  Не обязательно.
[24:20.500 --> 24:22.500]  Нет, можно там считать, что на самом деле
[24:22.500 --> 24:23.500]  это такая...
[24:23.500 --> 24:25.500]  То есть, на самом деле тут
[24:25.500 --> 24:27.500]  как бы такая решетка целочисленная.
[24:27.500 --> 24:29.500]  И там в узлах записаны числа.
[24:29.500 --> 24:31.500]  Возьмите все целые точки, которые попали в прямоугольник
[24:31.500 --> 24:33.500]  и числа на них.
[24:33.500 --> 24:34.500]  Чего?
[24:34.500 --> 24:36.500]  Вряд ли.
[24:38.500 --> 24:40.500]  Ну, как сказать?
[24:40.500 --> 24:42.500]  Нет, скажи так.
[24:42.500 --> 24:44.500]  Слету не знаю, потому что, честно говоря,
[24:44.500 --> 24:46.500]  у меня просто ассоциация из головы.
[24:46.500 --> 24:48.500]  То есть, я это сказал, чтобы подчекнуть,
[24:48.500 --> 24:50.500]  какую задачу мы решаем, а какую мы не решаем.
[24:50.500 --> 24:52.500]  Да.
[24:52.500 --> 24:54.500]  Сейчас вы, конечно, развлекаться можно там
[24:54.500 --> 24:56.500]  как угодно.
[24:56.500 --> 24:58.500]  Итак, сумма на подпрямоугольнике.
[25:00.500 --> 25:02.500]  Как же такую задачу решать?
[25:04.500 --> 25:06.500]  Ну, на самом деле так.
[25:06.500 --> 25:08.500]  Вот давайте пока предположим, что мы не меняем ничего.
[25:10.500 --> 25:12.500]  Тогда...
[25:12.500 --> 25:14.500]  Ну, если делать это в тупую,
[25:14.500 --> 25:16.500]  то можно сделать...
[25:16.500 --> 25:18.500]  То есть, если взять это просто на массиве,
[25:18.500 --> 25:20.500]  а честно эту сумму искать,
[25:20.500 --> 25:22.500]  то что у нас получится?
[25:22.500 --> 25:24.500]  То получится у нас просто тупой поиск суммы
[25:24.500 --> 25:26.500]  за, в худшем случае, отнм.
[25:30.500 --> 25:32.500]  Соответственно.
[25:32.500 --> 25:34.500]  Так, вот давайте...
[25:34.500 --> 25:36.500]  Ну, ладно, давайте, наверное,
[25:36.500 --> 25:38.500]  поменьше это нарисуем.
[25:40.500 --> 25:42.500]  Вот так вот мы,
[25:42.500 --> 25:44.500]  пожалуй, сделаем.
[25:44.500 --> 25:46.500]  Ну, как бы, я думаю,
[25:46.500 --> 25:48.500]  на первый раз нам вот этого хватит
[25:48.500 --> 25:50.500]  с запасом.
[25:50.500 --> 25:52.500]  2, 3, 4, 8, 6,
[25:52.500 --> 25:54.500]  5, 5, 2, 5,
[25:54.500 --> 25:56.500]  6, 5, 5,
[25:56.500 --> 25:58.500]  5, 5, 5, 3.
[25:58.500 --> 26:00.500]  Ну, знаете, телефончик этот, да?
[26:00.500 --> 26:02.500]  Ну, это классика.
[26:02.500 --> 26:04.500]  Такси нежданчик, да?
[26:04.500 --> 26:06.500]  Да, типа да.
[26:06.500 --> 26:08.500]  Типа, спонсор выступления, такси нежданчик,
[26:08.500 --> 26:10.500]  такси нежданчик, 8, 8, 8, 8, 3.
[26:10.500 --> 26:12.500]  Ну, вот это вот.
[26:12.500 --> 26:14.500]  Ладно, вот.
[26:14.500 --> 26:16.500]  Вот.
[26:16.500 --> 26:18.500]  Значит, соответственно.
[26:18.500 --> 26:20.500]  Итак, вот.
[26:20.500 --> 26:22.500]  Если бы у нас был массив такой,
[26:22.500 --> 26:24.500]  и мы бы искали сумму какую-нибудь...
[26:24.500 --> 26:26.500]  Ну, вот, ладно, допустим.
[26:26.500 --> 26:28.500]  Если бы у нас...
[26:28.500 --> 26:30.500]  Ну, ладно, квадратненькую такую сумму бы искали,
[26:30.500 --> 26:32.500]  допустим.
[26:32.500 --> 26:34.500]  Ну, вот, то, конечно, бегали бы
[26:34.500 --> 26:36.500]  прямо честно по площади этого
[26:36.500 --> 26:38.500]  прямоугольника.
[26:38.500 --> 26:40.500]  Но что у нас есть?
[26:40.500 --> 26:42.500]  Ну, вот.
[26:42.500 --> 26:44.500]  Ну, можно завести
[26:44.500 --> 26:46.500]  и найти массив.
[26:46.500 --> 26:48.500]  Ну, вот, то заметим, что в каждом ряду
[26:48.500 --> 26:50.500]  мы, в принципе, можем завести
[26:50.500 --> 26:52.500]  префиксные суммы.
[26:52.500 --> 26:54.500]  То есть это мы будем называть...
[26:54.500 --> 26:56.500]  Ладно.
[26:56.500 --> 26:58.500]  По-другому. D, X, A.
[27:00.500 --> 27:02.500]  Ну, ладно, вру.
[27:02.500 --> 27:04.500]  P, X, A. Вот так.
[27:06.500 --> 27:08.500]  Это будем говорить о том, что
[27:08.500 --> 27:10.500]  что по X
[27:10.500 --> 27:12.500]  мы взяли префиксные суммы.
[27:20.500 --> 27:22.500]  Ну, вот. Хотя ладно.
[27:22.500 --> 27:24.500]  Может быть, там еще придется подумать
[27:24.500 --> 27:26.500]  на тему того, как это...
[27:34.500 --> 27:36.500]  Что у нас тут?
[27:36.500 --> 27:38.500]  Давайте по каждому ряду...
[27:40.500 --> 27:42.500]  Ну да, по каждому ряду
[27:42.500 --> 27:44.500]  честно находим префиксные суммы.
[27:44.500 --> 27:46.500]  Прям вот, предельно, предельно, предельно.
[27:46.500 --> 27:48.500]  Честно, 25, 29.
[27:48.500 --> 27:50.500]  Да, там на монтаже, наверное,
[27:50.500 --> 27:52.500]  можно это промотать под
[27:52.500 --> 27:54.500]  балалайчику, там, как всегда.
[27:54.500 --> 27:56.500]  Нет, ну, правда, ладно.
[27:56.500 --> 27:58.500]  Нет, там просто, знаете...
[27:58.500 --> 28:00.500]  А кто-нибудь видел видео лекции
[28:00.500 --> 28:02.500]  Павла Маврина, кстати?
[28:02.500 --> 28:04.500]  Ну, да.
[28:04.500 --> 28:06.500]  Да, это прикольно.
[28:06.500 --> 28:08.500]  На самом деле. Нет, ну, можно там что-нибудь еще
[28:08.500 --> 28:10.500]  вместо балалайки.
[28:10.500 --> 28:12.500]  Но, в принципе, шутка прикольная.
[28:12.500 --> 28:14.500]  Вот.
[28:16.500 --> 28:18.500]  Ну, вот, соответственно, значит...
[28:18.500 --> 28:20.500]  Да.
[28:20.500 --> 28:22.500]  Значит, 5, 10, 15,
[28:22.500 --> 28:24.500]  там, 20, 25 и
[28:24.500 --> 28:26.500]  28.
[28:26.500 --> 28:28.500]  Вот.
[28:28.500 --> 28:30.500]  Ну, теперь замечаем,
[28:30.500 --> 28:32.500]  что на самом деле, теперь, чтобы в таком массиве
[28:32.500 --> 28:34.500]  надо просто пробежаться по всем
[28:34.500 --> 28:36.500]  значит, рядам по игроку,
[28:36.500 --> 28:38.500]  значит, которые у нас тут задействованы в прямоугольнике,
[28:38.500 --> 28:40.500]  и найти
[28:40.500 --> 28:42.500]  префиксные суммы.
[28:42.500 --> 28:44.500]  То есть, за от единицы.
[28:44.500 --> 28:46.500]  Но для этого надо получается, например, вот в этом ряду
[28:46.500 --> 28:48.500]  прибавить к ответу вот эту величину
[28:48.500 --> 28:50.500]  и вычислить вот эту. Здесь надо прибавить эту,
[28:50.500 --> 28:52.500]  вычислить эту, тут надо прибавить эту, вычислить эту.
[28:54.500 --> 28:56.500]  Получается, что здесь мы уже сумму
[28:56.500 --> 28:58.500]  ищем за...
[28:58.500 --> 29:00.500]  Сколько? За получается от...
[29:00.500 --> 29:02.500]  От... Нет, не за нм, а
[29:02.500 --> 29:04.500]  просто за отм.
[29:04.500 --> 29:06.500]  Нет, все еще круче.
[29:08.500 --> 29:10.500]  Да, может.
[29:10.500 --> 29:12.500]  Но давайте так,
[29:12.500 --> 29:14.500]  это в принципе может оказаться даже прикольной идеей.
[29:14.500 --> 29:16.500]  Поэтому я даже вот так нарисую.
[29:16.500 --> 29:18.500]  Вот.
[29:18.500 --> 29:20.500]  Но не совсем. Ну, для конкретной
[29:20.500 --> 29:22.500]  этой задачи, конечно, это
[29:22.500 --> 29:24.500]  не обязательно.
[29:24.500 --> 29:26.500]  Потому что, да, тут первая идея,
[29:26.500 --> 29:28.500]  которая возникает, то, что мы должны взять
[29:28.500 --> 29:30.500]  два столбца, и в каждом столбце
[29:30.500 --> 29:32.500]  мы должны взять 2 столбца,
[29:32.500 --> 29:34.500]  мы должны взять 2 столбца, и в каждом столбце
[29:34.500 --> 29:36.500]  найти тоже сумму на подотреске.
[29:36.500 --> 29:38.500]  И даже следующая идея возникает,
[29:38.500 --> 29:40.500]  ой, а давайте-ка на каждом
[29:40.500 --> 29:42.500]  из этих столбцов тоже найдем префиксные
[29:42.500 --> 29:44.500]  суммы.
[29:44.500 --> 29:46.500]  А что по собственной? Что по собственной? Нет.
[29:46.500 --> 29:48.500]  Действительно.
[29:50.500 --> 29:52.500]  Давайте. Ну вот.
[29:52.500 --> 29:54.500]  То есть прям
[29:54.500 --> 29:56.500]  это мы будем называть
[29:56.500 --> 29:58.500]  PY
[29:58.500 --> 30:00.500]  PXA.
[30:00.500 --> 30:02.500]  То есть, как видите, то есть мы
[30:02.500 --> 30:04.500]  к А применили префиксные суммы PX,
[30:04.500 --> 30:06.500]  а потом к результату применили PY. Такая
[30:06.500 --> 30:08.500]  темология. Хотя мистическая
[30:08.500 --> 30:10.500]  теорема в этом месте
[30:10.500 --> 30:12.500]  будет звучать так.
[30:12.500 --> 30:14.500]  PY PXA тождественно
[30:14.500 --> 30:16.500]  равно PX PY
[30:16.500 --> 30:18.500]  A.
[30:18.500 --> 30:20.500]  Утверждаю я.
[30:22.500 --> 30:24.500]  Ну да, в первую очередь, это
[30:24.500 --> 30:26.500]  коммутатив. Но правда, да, заметим, что
[30:26.500 --> 30:28.500]  на самом деле, когда мы работаем с суммой
[30:28.500 --> 30:30.500]  в прямоугольниках, то нам
[30:30.500 --> 30:32.500]  вынуждены практически работать с
[30:32.500 --> 30:34.500]  коммутативными операциями. Почему?
[30:34.500 --> 30:36.500]  Потому что
[30:36.500 --> 30:38.500]  в противном случае нам придется
[30:38.500 --> 30:40.500]  реально заморачиваться с тем, что
[30:40.500 --> 30:42.500]  в каком порядке суммы искать. Вот в таком,
[30:42.500 --> 30:44.500]  вот в таком. Вот как-то
[30:44.500 --> 30:46.500]  непонятно, кто приоритет. Я сначала по их
[30:46.500 --> 30:48.500]  суптом, потом по игроку или наоборот. Поэтому тут
[30:48.500 --> 30:50.500]  от коммутативности, я боюсь, мы тут
[30:50.500 --> 30:52.500]  не уйдем от слова никуда.
[30:52.500 --> 30:54.500]  То есть могли бы
[30:54.500 --> 30:56.500]  то есть можно, в принципе, было бы разве что
[30:56.500 --> 30:58.500]  там можно избавиться от обратимости. Ну про ассоциативность
[30:58.500 --> 31:00.500]  я вообще молчу. Ну правда, без
[31:00.500 --> 31:02.500]  ассоциативности, кажется, что работать вообще
[31:02.500 --> 31:04.500]  практически невозможно.
[31:04.500 --> 31:06.500]  Вот.
[31:06.500 --> 31:08.500]  Ну давайте в каждом столбце
[31:08.500 --> 31:10.500]  на этом массиве честно насчитываем. Ну поехали.
[31:10.500 --> 31:12.500]  Там 5, 7,
[31:12.500 --> 31:14.500]  10, там 16, 21.
[31:14.500 --> 31:16.500]  Так, что там у нас еще?
[31:16.500 --> 31:18.500]  12, 18,
[31:18.500 --> 31:20.500]  27.
[31:20.500 --> 31:22.500]  Значит, соответственно, 38,
[31:22.500 --> 31:24.500]  48. И соответственно,
[31:24.500 --> 31:26.500]  16, 25,
[31:26.500 --> 31:28.500]  ну вот,
[31:28.500 --> 31:30.500]  36,
[31:30.500 --> 31:32.500]  там 49.
[31:42.500 --> 31:44.500]  Так.
[31:46.500 --> 31:48.500]  Так.
[31:48.500 --> 31:50.500]  Устный счет.
[31:50.500 --> 31:52.500]  Если бы опять это
[31:52.500 --> 31:54.500]  заклинание просто работало.
[31:54.500 --> 31:56.500]  Ну хотя нет, ну тут сложение, да.
[32:00.500 --> 32:02.500]  Как это приятно произвести
[32:02.500 --> 32:04.500]  на кого-то впечатление от того, что вы умеете
[32:04.500 --> 32:06.500]  перемножить в уме 89
[32:06.500 --> 32:08.500]  на 21.
[32:10.500 --> 32:12.500]  Так, ну-ка давайте успеете, пока я досчитаю.
[32:22.500 --> 32:24.500]  Сколько?
[32:28.500 --> 32:30.500]  Правильно, да, правильно.
[32:30.500 --> 32:32.500]  Мы тут на кулькуляторе тоже посчитали.
[32:32.500 --> 32:34.500]  Право.
[32:34.500 --> 32:36.500]  Ну да.
[32:36.500 --> 32:38.500]  В чем когда-то высказывает ощущение,
[32:38.500 --> 32:40.500]  что если это перемножение двузначных, то там это
[32:40.500 --> 32:42.500]  проверяющий мог бы, конечно, и посложнее пример
[32:42.500 --> 32:44.500]  подогнать.
[32:44.500 --> 32:46.500]  Ну я не знаю, там хотя бы
[32:46.500 --> 32:48.500]  37 на 46,
[32:48.500 --> 32:50.500]  я кажется, что умею умножить сильно сложнее.
[32:50.500 --> 32:52.500]  Ну там 37 на 47 понятно,
[32:52.500 --> 32:54.500]  там 42 в квадрате минус 25,
[32:54.500 --> 32:56.500]  там вот это все, да.
[32:56.500 --> 32:58.500]  Ну вот, не важно.
[32:58.500 --> 33:00.500]  Что у нас тут появляется?
[33:00.500 --> 33:02.500]  Чтобы найти вот эти суммы
[33:02.500 --> 33:04.500]  на подотреске, нужно получается
[33:04.500 --> 33:06.500]  найти, здесь прибавить, здесь вычесть.
[33:06.500 --> 33:08.500]  Ну и здесь, правда, вот эту сумму нужно вычесть,
[33:08.500 --> 33:10.500]  поэтому мы пишем, что здесь минусик,
[33:10.500 --> 33:12.500]  а здесь плюсик.
[33:14.500 --> 33:16.500]  В принципе, вот такая идея,
[33:16.500 --> 33:18.500]  что оказывается, что мы
[33:18.500 --> 33:20.500]  сначала сокращаем себе жизнь
[33:20.500 --> 33:22.500]  по рядам.
[33:24.500 --> 33:26.500]  Ну вот так.
[33:26.500 --> 33:28.500]  Ну скажем так, так сказать,
[33:28.500 --> 33:30.500]  активную жизнь, так сказать, когда надо
[33:30.500 --> 33:32.500]  что-то физическое делать.
[33:32.500 --> 33:34.500]  Так, активно-техническую жизнь, да.
[33:34.500 --> 33:36.500]  А потом замечаем,
[33:36.500 --> 33:38.500]  что нам, оказывается, просто в некоторых столпсах
[33:38.500 --> 33:40.500]  нужно что-то просто красивое сделать на подотреске,
[33:40.500 --> 33:42.500]  поэтому мы тут вводим какую-то структуру.
[33:42.500 --> 33:44.500]  В общем,
[33:44.500 --> 33:46.500]  то есть на самом деле, в общем-то вот
[33:46.500 --> 33:48.500]  идеи, мы, в общем-то, никуда и не денемся.
[33:50.500 --> 33:52.500]  То есть вот получается такая штука.
[33:52.500 --> 33:54.500]  Что приятно в этой идее, легко сразу замечу,
[33:54.500 --> 33:56.500]  в принципе, эта идея, в общем-то, и на трехмерии обобщается
[33:56.500 --> 33:58.500]  спокойно, на четырехмерии и так далее.
[34:00.500 --> 34:02.500]  Да, то есть, конечно же, да,
[34:02.500 --> 34:04.500]  то есть, конечно, если у вас камерея,
[34:04.500 --> 34:06.500]  то, конечно, вам придется тут, то есть
[34:06.500 --> 34:08.500]  там будет работать от 2 степени К,
[34:08.500 --> 34:10.500]  это да.
[34:10.500 --> 34:12.500]  Но обычно К всегда
[34:12.500 --> 34:14.500]  не сильно большой, поэтому не сильно
[34:14.500 --> 34:16.500]  страшно.
[34:18.500 --> 34:20.500]  Но чаще всего К равно 1, конечно.
[34:20.500 --> 34:22.500]  Но это уже, нет, у всякой бывает,
[34:22.500 --> 34:24.500]  иногда могут.
[34:24.500 --> 34:26.500]  Вот, значит, что же у нас
[34:26.500 --> 34:28.500]  дальше идет? Дальше идет следующее.
[34:30.500 --> 34:32.500]  Хорошо, но это был статический
[34:32.500 --> 34:34.500]  РСКУ.
[34:34.500 --> 34:36.500]  Да, но, во-первых, да, сразу заметим, давайте, да,
[34:36.500 --> 34:38.500]  почему вообще эта теория, мы верна?
[34:38.500 --> 34:40.500]  Почему нам безразильцы, как бы, сначала
[34:40.500 --> 34:42.500]  по Х по игроку или, наоборот, сначала по
[34:42.500 --> 34:44.500]  игроку, а потом по Х.
[34:44.500 --> 34:46.500]  Да, потому что, по факту, да, возможно,
[34:46.500 --> 34:48.500]  вы с этим ранее сталкивались, но в другом
[34:48.500 --> 34:50.500]  определении. Да, потому что
[34:50.500 --> 34:52.500]  можно это интерпретировать и
[34:52.500 --> 34:54.500]  по-другому. То есть, давайте найдем
[34:54.500 --> 34:56.500]  тоже, то есть, такой аналог
[34:56.500 --> 34:58.500]  префиксных сумм, то есть, двумерная, это называется
[34:58.500 --> 35:00.500]  двумерная префиксная сумма.
[35:00.500 --> 35:02.500]  Что это значит? Это означает, что в каждой клетке
[35:02.500 --> 35:04.500]  мы хотим найти сумму
[35:04.500 --> 35:06.500]  на вот этом прямоугольнике.
[35:06.500 --> 35:08.500]  Причем можно даже,
[35:08.500 --> 35:10.500]  как их искать? Причем чаще всего я рискую
[35:10.500 --> 35:12.500]  пред 신� положить, что вам даже не trzeba,
[35:12.500 --> 35:14.500]  что можно искать вот сначала вот так, потом так,
[35:14.500 --> 35:16.500]  то есть, ну,
[35:16.500 --> 35:18.500]  что-то мне подсказывает, что вам, скорее всего,
[35:18.500 --> 35:20.500]  могли сказать, что, как насчитать такую сумму?
[35:20.500 --> 35:22.500]  Заметим, что сумма на этом прямоугольнике
[35:22.500 --> 35:24.500]  что такое? Это вот этот элемент, плюс
[35:24.500 --> 35:26.500]  сумма на этом прямоугольнике, плюс сумма
[35:26.500 --> 35:28.500]  на этом прямоугольнике, минус сумма на этом.
[35:28.500 --> 35:30.500]  Да, в двумере дот.
[35:30.500 --> 35:32.500]  Ну, рискну а что-то там большинство
[35:32.500 --> 35:34.500]  из вас, пока в Москве, впервые так и рассказывали.
[35:34.500 --> 35:36.500]  Или кому-то рассказывали
[35:36.500 --> 35:38.500]  не так.
[35:38.500 --> 35:43.440]  Но обычно да, то есть обычно когда вы там первый раз в жизни это видите, действительно чаще всего так расскажут, действительно.
[35:43.720 --> 35:49.220]  Вот единственное, то есть минус у этой штуки будет заключается в том, что на какой-нибудь трехмерии это уже будет обобщаться немножко с трудом.
[35:52.140 --> 35:56.700]  Ну то есть там на трехмерии еще нарисовать можно, но вообразить себе четырехмерия, ну тут как бы
[35:57.700 --> 36:01.420]  сложно. Нет, отдельные математики говорят, что им удается, но это очень больно.
[36:01.420 --> 36:16.340]  Но тогда форму включили, скорее всего вам придется использовать как просто черный ящик или вот, ну или вы ее может быть даже докажете, но это будет скорее абстракция.
[36:16.940 --> 36:18.940]  Да, чего я хотел сказать?
[36:19.940 --> 36:21.940]  Нет, кто-то что-то сказать, пусть перебил.
[36:22.460 --> 36:24.460]  Потом, когда потом?
[36:25.580 --> 36:31.460]  Когда потом, когда мы сливаем это обувь, мы обсуждаем.
[36:33.260 --> 36:37.100]  Ну вот, давайте попробуем апдейтить эту, проапдейтить эту идею.
[36:37.100 --> 36:46.100]  Теперь давайте себе представим, что мы неожиданно хотим еще и сделать.
[36:47.100 --> 36:49.100]  Так, ладно, пришло время взять новый маркер.
[36:51.100 --> 36:53.100]  Какой маркер нам взять? Давайте фиолетовый.
[36:54.100 --> 36:56.100]  Мы неожиданно хотим.
[36:59.100 --> 37:01.100]  Так, видно, что он не синий.
[37:02.100 --> 37:04.100]  Мне тоже так кажется.
[37:04.100 --> 37:07.100]  Ладно, ну ничего, у нас есть мощный.
[37:08.100 --> 37:10.100]  У нас есть мощный, да, такой мощный.
[37:11.100 --> 37:12.100]  О, вот это точно не синий.
[37:13.100 --> 37:15.100]  А теперь давайте себе представим, что я хочу сделать.
[37:16.100 --> 37:18.100]  Так, тихо, тихо, тихо, тихо.
[37:19.100 --> 37:23.100]  Внимание, я хочу сделать изменение в точке.
[37:25.100 --> 37:27.100]  Вот я хочу неожиданно взять точку иксы как.
[37:27.100 --> 37:33.100]  И неожиданно в ней элемент изменить на D.
[37:37.100 --> 37:48.100]  Так, ну заметим, что конечно идея с префиксными суммами тут работает конечно уже не очень.
[37:50.100 --> 37:56.100]  Ну, так сказать, то есть в принципе можно сказать так, что допустим мы решили изменить какой-нибудь там вот этот элемент.
[37:58.100 --> 38:05.100]  Тогда заметим, что здесь у нас получается, что за O от N мы ищем сумму, но изменение происходит за O от единицы.
[38:06.100 --> 38:21.100]  Если мы переходим вот сюда, то здесь получается значит O от M на поиск суммы, но при этом изменять придется целый, что там получается, изменять?
[38:22.100 --> 38:26.100]  Ну да, целый суффикс ряда, то есть получается за O от N такого.
[38:27.100 --> 38:29.100]  Здесь соответственно придется изменять прямоугольник.
[38:31.100 --> 38:32.100]  Вот такой.
[38:34.100 --> 38:35.100]  И здесь O от N.
[38:36.100 --> 38:42.100]  Нет, то в принципе заметим, что в общем-то вот этот вариант на худой конец уже тоже может быть неплохой, что-то типа корневухи такое получается, особенность NM.
[38:43.100 --> 38:46.100]  То есть если NM равны произведения 10 в пятый, то как раз вот корневуха вам и вылезла.
[38:47.100 --> 38:50.100]  Можно сначала все запросы считать, посмотреть какие бы больше.
[38:51.100 --> 38:53.100]  Ага, во, во, во, во, во, во.
[38:53.100 --> 38:54.100]  Во, во, во, во, во.
[38:59.100 --> 39:00.100]  Нет, знаете, у меня с летом насекает упражнение.
[39:01.100 --> 39:03.100]  А что делать, если запросы вам дают чисто онлайн?
[39:04.100 --> 39:08.100]  И тогда есть ощущение, что в онлайне можно тоже поддерживать каких-то операций больше.
[39:09.100 --> 39:12.100]  Если каких-то операций прям сильно больше стало, то давайте все заодно пересчитаем.
[39:17.100 --> 39:18.100]  Нет, почему бы и нет в общем-то?
[39:19.100 --> 39:21.100]  Нет, в принципе может быть очень интересное исследование.
[39:23.100 --> 39:28.100]  Вот, значит O от M, O от N, в общем такая вот красивая радость.
[39:30.100 --> 39:32.100]  Вот, но можно конечно пойти и по-другому.
[39:35.100 --> 39:45.100]  Вот, то есть, но на самом деле теперь следующая идея у нас возникнет в том, что на самом деле в каждом ряду можно забабахивать и что-нибудь более умное, чем префиксные суммы.
[39:46.100 --> 39:47.100]  Например дерево Фенвика.
[39:48.100 --> 39:53.100]  Так, ну вот, смотрите, сейчас я начисел, как я это уже показывать не буду.
[39:54.100 --> 39:56.100]  Да, к сожалению, да.
[39:57.100 --> 39:58.100]  Хотя да.
[39:59.100 --> 40:01.100]  Ну вот, значит смотрите, так это вот.
[40:03.100 --> 40:06.100]  Да, то есть тут я уже что-то показал, да.
[40:07.100 --> 40:12.100]  Ну да, как-то один, это один, это одно яблоко, а это еще одно яблоко.
[40:13.100 --> 40:15.100]  Один плюс один равно два.
[40:16.100 --> 40:17.100]  А теперь введем дерево Фенвика, да.
[40:18.100 --> 40:22.100]  Так, это мы, эту уже классику мы знаем, да.
[40:23.100 --> 40:33.100]  Значит, вот тут есть какой-то массивчик, то есть тут есть какой-то массивчик, и тут есть какой-то массивчик.
[40:33.100 --> 40:45.100]  Ну а теперь идея такая, то есть вместо массива, то есть уже будет не массив П, а мы его будем называть теперь F-X-А, и тут мы его будем называть F-Y-F-X-А.
[40:46.100 --> 40:48.100]  Вот does it mean?
[40:49.100 --> 40:50.100]  Ну F means of course Fendrick.
[40:52.100 --> 40:56.100]  Да, редкий случай, но фамилия Fendrick пишется именно с этой буквы.
[40:57.100 --> 41:01.100]  Вот, нет, ну я не знаю, у меня просто имя такое, что меня любят не с этой буквы имя писать.
[41:01.100 --> 41:02.100]  Почему-то.
[41:03.100 --> 41:09.100]  Ну не почему-то, а просто классическое написание моего имени, почему-то без F пишется, но мое имя пишется с этой буквы, если что.
[41:10.100 --> 41:11.100]  Вот.
[41:12.100 --> 41:14.100]  Ну как бы, заранее показывать не буду, но как бы.
[41:15.100 --> 41:16.100]  Вот.
[41:17.100 --> 41:19.100]  Значит, соответственно.
[41:20.100 --> 41:22.100]  Значит, что тут предлагается делать?
[41:23.100 --> 41:24.100]  А предлагается делать следующее.
[41:24.100 --> 41:25.100]  Ну вот следующее.
[41:26.100 --> 41:31.100]  Значит, тут у нас, как всегда, если в тупую искать тут, что-то от суммы изменять, то, как мы сказали, NM и 1.
[41:32.100 --> 41:33.100]  Ну теперь следующая идея.
[41:34.100 --> 41:37.100]  А давайте-ка в каждом ряду забабахаем дерево Фенрика.
[41:38.100 --> 41:41.100]  Вот вместо того, чтобы хранить там честный массив, давайте забабахаем там дерево Фенрика.
[41:43.100 --> 41:44.100]  Вот.
[41:46.100 --> 41:47.100]  Вот.
[41:48.100 --> 41:51.100]  Тогда вот давайте подумаем, что там собственно теперь поменяется.
[41:52.100 --> 41:56.100]  Ну то есть если брать вот опять прямоугольник, давайте вот рисовать то же самое.
[41:57.100 --> 42:00.100]  И тут у нас какой-то вот тоже допустим.
[42:01.100 --> 42:02.100]  Тогда оказывается.
[42:05.100 --> 42:06.100]  То есть что нам нужно?
[42:07.100 --> 42:15.100]  Чтобы, ну вот тогда, значит, в каждом ряду нужно найти, ну тогда нужно здесь пробежаться по каждому ряду и найти там сумму в дереве Фенрика.
[42:16.100 --> 42:21.100]  Это будет работать, получается, теперь за O от M лог N получается.
[42:26.100 --> 42:31.100]  Вот. А изменение в точке одной, вот какой-нибудь давайте вот тот же самый, там напишем вот этой.
[42:32.100 --> 42:36.100]  То есть оно будет работать уже не за O от N, а за O от лог N.
[42:38.100 --> 42:39.100]  Уже неплохо, правда?
[42:40.100 --> 42:41.100]  Вот.
[42:41.100 --> 42:42.100]  Ну а теперь следующая идея какая?
[42:43.100 --> 42:45.100]  Давайте подумаем, что происходит, когда мы ищем сумму.
[42:46.100 --> 42:50.100]  Когда мы ищем сумму на подотрезке, мы и там, во-первых, ищем сумму на префиксах.
[42:51.100 --> 42:58.100]  То есть начиная с вот этого элемента, ну ладно там, с какого-то вот этого, мы тут что-то прибавляем, прибавляем, тут вот логарифом плюсиков делаем.
[42:59.100 --> 43:03.100]  Ну помните, в нашей интерпретации дерево Фенрика мы отсюда начинаем, ну это уже детали.
[43:04.100 --> 43:05.100]  Вот.
[43:05.100 --> 43:06.100]  Вот.
[43:06.100 --> 43:13.100]  Теперь замечаем, что теперь, когда мы идем в следующий ряд, мы прибавляем, а, забыл, еще мы должны тут, конечно, кое-что поучитать.
[43:14.100 --> 43:15.100]  То есть тут тоже найти сумму на префиксе какую-то.
[43:16.100 --> 43:19.100]  Может быть даже кого-то поучитать там, взаимоуничтожить.
[43:20.100 --> 43:27.100]  Теперь заметим, что в следующем ряду мы будем прибавлять и вычитать абсолютно те же самые элементы.
[43:33.100 --> 43:34.100]  Чего?
[43:35.100 --> 43:39.100]  Ну, какой массив разности?
[43:40.100 --> 43:43.100]  Нет, массива разности, нет, массива разности тут нет.
[43:44.100 --> 43:47.100]  Это просто, просто был честный массив, мы сделали на нем Фенрика, никаких разностей, обратите внимание.
[43:48.100 --> 43:49.100]  Вот.
[43:50.100 --> 43:55.100]  И поэтому возникает, ну по крайней мере пока, значит вот возникает такая вот красивая идея.
[43:56.100 --> 44:03.100]  И тогда получается, ну вот, и тогда здесь уже возникает такое, а давайте на каждом столбце тогда вот этих Фенриков тоже сделаем Фенрика.
[44:04.100 --> 44:09.100]  То есть это не Фенрик Фенриков, не путать, Фенрик Фенриков, как вы помните в прошлый раз, это немножко другое.
[44:10.100 --> 44:11.100]  Вот.
[44:12.100 --> 44:14.100]  И здесь получается вот такое.
[44:15.100 --> 44:16.100]  Вот.
[44:17.100 --> 44:31.100]  То есть здесь тогда, то есть когда ищем сумму такую, то вот оказывается, что, то есть надо на самом деле пробежаться по, то есть, ну во-первых, да, то есть сумму мы теперь ищем как бы вот уже, то есть там как бы, то есть можно так сказать.
[44:32.100 --> 44:39.100]  То есть была у нас вот по горизонтали, теперь на этих суммах сверху мы еще по вертикали что-то рисуем.
[44:40.100 --> 44:53.100]  И теперь, когда нам приходит, значит, запрос на прямоугольниках, то соответственно нам нужно пробежаться по логарифму, получается, отрезочков по иксу и в каждом из них найти сумму на подотрезке.
[44:54.100 --> 45:00.100]  Что мы делаем уже с помощью этого наворотчика, уже, значит, уже такого Фенрика поверх Фенрика.
[45:01.100 --> 45:03.100]  Вот это скорее называется, да, Фенрика поверх Фенрика получается.
[45:04.100 --> 45:08.100]  Вот. И тогда получается, что у нас тут лог м, лог н получается.
[45:09.100 --> 45:22.100]  А изменение получается, ну да, то есть здесь заметим, что мы, да, от лог н, потому что элемент здесь у нас там какой-то вот этот вот меняет там, то есть изменяется вот где-то вот в каких-то вот этих вот точках.
[45:22.100 --> 45:30.100]  Но здесь выясняется, что тут он выясняется, меняется не только вот в этих точках, но еще тут в логарифме точек в каждом месте, в каждом столбце.
[45:31.100 --> 45:36.100]  Поэтому тут получается тоже лог н, на этот раз на лог м.
[45:39.100 --> 45:46.100]  Вот. То есть, в принципе, вот так можно изобрести двумерное дерево Фенрика.
[45:47.100 --> 45:52.100]  Или если, ну вот, хотя, в принципе, заметим, что мы никак не пользуемся тем, что это именно дерево Фенрика.
[45:53.100 --> 45:56.100]  Двумерное дерево отрезков можно забабахать абсолютно таким же образом.
[45:57.100 --> 46:04.100]  Вот. То есть вот такая нот, то есть вот такая вот, в общем-то, нехитрая идея.
[46:05.100 --> 46:10.100]  Вот. Но не буду сейчас писать, какими, думаю, там, водоразночь, какими простыми вложенными циклами в принципе это можно сделать.
[46:11.100 --> 46:15.100]  Вот. Ну, в принципе, можно делать не вложенными, может и даже будет легче вообще.
[46:17.100 --> 46:21.100]  Вот. Так что вот такая вот получилась красота.
[46:22.100 --> 46:25.100]  Да, вот такое-то двумерное дерево отрезков, вот такое двумерное дерево Фенрика.
[46:27.100 --> 46:31.100]  Вот. Ну, в принципе, да, как видите, трехмерное, в общем-то, делается примерно так же.
[46:32.100 --> 46:36.100]  Но предположим, что у нас теперь появилась теперь царь-операция.
[46:37.100 --> 46:43.100]  Царь-операция будет там теперь говорить, что мы теперь хотим прибавлять на под прямоугольники.
[47:00.100 --> 47:02.100]  Ну, на самом деле, да.
[47:02.100 --> 47:23.100]  Нет, ну не важно, нет, ну тут, ну скажем так, в конечном счете, нет, вот там, как сказать, ну да, то есть там, конечно, да, у дерево отрезков может быть такое есть выгодное отличие.
[47:24.100 --> 47:29.100]  Такое, пока я, ну, то есть выгодное отличие действительно заключается в том, что там один логариф, а мы не два.
[47:29.100 --> 47:36.100]  Вот. Ну, в общем, тут на самом деле, конечно, это тут еще действительно вопрос.
[47:37.100 --> 47:45.100]  Потому что, конечно, да, то есть заметим, что когда, если у вас там рекурсия глубины ка и ка не константа, то на самом деле делаете в логарифом Н или два логарифа Н, это может оказаться принципиально.
[47:47.100 --> 47:49.100]  Вот, потому что два в степени ка, это уже не константа.
[47:50.100 --> 47:54.100]  Вот это, конечно, да. Впрочем, крайне редко такое действительно нужно.
[47:55.100 --> 48:05.100]  Но действительно, то есть, я знаю, в Фенвике действительно будет проблема, что так как Фенвике у вас сумма это префикс минус префикс, то там, конечно, количество конкретных запросов там, конечно, будет расти именно как два в степени.
[48:06.100 --> 48:07.100]  Вот.
[48:09.100 --> 48:10.100]  Чего?
[48:12.100 --> 48:19.100]  Ну, последняя мысль такая, да, что, как бы, если вы используете дерево Фенвика, то как бы каждую сумму на отрезке вы ищете не за один запрос, а за два.
[48:20.100 --> 48:25.100]  Поэтому, если у вас там происходит камерия, то, как бы, количество запросов там растет как два в степени ка.
[48:26.100 --> 48:28.100]  Собственно, только эту мысль я, в общем-то, и сказал.
[48:29.100 --> 48:31.100]  Больше никаких мыслей я пока не говорил.
[48:32.100 --> 48:33.100]  В этом месте.
[48:34.100 --> 48:37.100]  Ну вот, ну теперь есть какая-то вопрос. Как же делать прибавление на под прямоугольники?
[48:38.100 --> 48:46.100]  Да, ну заметим, что, да, в одномере у нас были там какие-нибудь прибавления, там какие-нибудь замечательные там отложенные операции.
[48:47.100 --> 48:50.100]  Но здесь у нас, к сожалению, этой древесной структуры нету, как в дереве отрезков.
[48:51.100 --> 48:56.100]  То есть, не, нельзя там это, то есть, идти сверху вниз и говорить, что ладно, если пойдем ниже, тогда эту операцию протолкнем.
[48:57.100 --> 48:58.100]  Здесь, к сожалению, такое уже не работает.
[48:59.100 --> 49:05.100]  Ну вот там, конкретно в двумере, там есть какие-то сложные механизмы, там как-то это можно себе забабахать и даже как-то понять.
[49:06.100 --> 49:08.100]  Но, на самом деле, необходимости в этом нет.
[49:10.100 --> 49:15.100]  Потому что наша, собственно, пластиковая бутылка, на самом деле, сейчас прекрасно нас выручит и здесь.
[49:16.100 --> 49:22.100]  Вот. Ну, знаете, это классический метод, да, типа берем обычную пластиковую бутылку, там и что-нибудь делаем.
[49:24.100 --> 49:25.100]  Ну вот.
[49:26.100 --> 49:27.100]  Сложно, да?
[49:28.100 --> 49:31.100]  Так, вам имя Андрей Бахметьев что-нибудь говорит о передаче «Пока все дома»?
[49:32.100 --> 49:33.100]  Нет.
[49:33.100 --> 49:34.100]  Ой.
[49:37.100 --> 49:38.100]  Ой.
[49:39.100 --> 49:41.100]  Ну там это очумелые ручки, там вот это все.
[49:42.100 --> 49:43.100]  Ой.
[49:44.100 --> 49:45.100]  Ах, молодежь.
[49:47.100 --> 49:48.100]  Да, да, да, да.
[49:49.100 --> 49:52.100]  Что-то там Эйби Бэйби слушают какое-то там это.
[49:54.100 --> 49:55.100]  Ой.
[49:56.100 --> 49:57.100]  Так вот. Ладно.
[49:58.100 --> 49:59.100]  Значит, смотрите.
[50:00.100 --> 50:03.100]  Теперь давайте думать. Мы хотим прибавлять на подотрески и искать сумму на подотрески.
[50:04.100 --> 50:08.100]  Вот. В принципе, эту операцию, об этой операции мы можем даже забыть.
[50:09.100 --> 50:11.100]  Ну, потому что она все равно подвит вот этой операции.
[50:12.100 --> 50:13.100]  Значит, но действительно.
[50:15.100 --> 50:17.100]  Ну, пока у нас все плохо.
[50:18.100 --> 50:21.100]  В том плане, что в тупую обе эти операции делаются за ОАТН.
[50:22.100 --> 50:26.100]  Но давайте попробуем себе техническую жизнь себе сократить.
[50:27.100 --> 50:28.100]  Ну, как всегда.
[50:29.100 --> 50:30.100]  Вот.
[50:31.100 --> 50:32.100]  Как мы сократим?
[50:33.100 --> 50:40.100]  Ну, как мы помним, в дереве Фенвика в этом месте, ну или в дереве отрезков тоже можно.
[50:41.100 --> 50:46.100]  Мы себе сделали, то есть в каждом ряду мы делали там, честно, два массива.
[50:47.100 --> 50:50.100]  Помните, у нас был массив ДА и ДАЖ, помните, да?
[50:52.100 --> 50:53.100]  Вот.
[50:53.100 --> 50:57.100]  Ну, так значит, давайте тогда сделаем тоже два массива.
[50:58.100 --> 51:02.100]  ДХА и ДХАХ.
[51:06.100 --> 51:11.100]  Ну, то есть, ДХ это означает, что мы в каждом ряду взяли разности соседних.
[51:12.100 --> 51:16.100]  А в ДХАХ это означает, что мы взяли то же самое, но домножили еще на Х.
[51:18.100 --> 51:22.100]  То есть, да. То есть, у нас теперь размножаются уже даже массивы.
[51:24.100 --> 51:25.100]  Вот они.
[51:30.100 --> 51:31.100]  Ну вот.
[51:32.100 --> 51:33.100]  Соответственно, да.
[51:34.100 --> 51:37.100]  Значит, это у нас вот такая вот красота.
[51:40.100 --> 51:43.100]  Значит, ДХА и ДХАХ.
[51:44.100 --> 51:52.100]  Но давайте думать, в таком массиве тогда получается, что как бы сумму в каждом ряду мы находим за логарифом и прибавляем на подотрески тоже за логарифом.
[51:53.100 --> 51:54.100]  Да.
[51:54.100 --> 52:01.100]  То есть, поэтому где-то здесь у нас тут получается, значит, сумму мы ищем за опять М лог Н.
[52:03.100 --> 52:08.100]  И изменения мы делаем за сколько? За, так, рыженьким пишем.
[52:08.100 --> 52:10.100]  Так, ой, коричневое давайте вообще отложу.
[52:11.100 --> 52:16.100]  Значит, ищем, да, тоже в общем-то за М логом, потому что просто в каждом ряду независимо работаем.
[52:16.100 --> 52:17.100]  Да.
[52:17.100 --> 52:22.100]  Ну, может зайдет, может нет.
[52:23.100 --> 52:26.100]  А это не принципиально, потому что от М мы сейчас тоже избавимся.
[52:27.100 --> 52:30.100]  Потому что, как вы уже догадываетесь, идея абсолютно та же.
[52:31.100 --> 52:45.100]  То есть, как бы, то есть в каждом ряду мы в общем-то будем искать там сумму, то есть понятно там нам в ДХА надо найти в каждом ряду сумму каких-то элементов, там вычесть сумму каких-то элементов, но эти элементы одни и те же.
[52:46.100 --> 52:49.100]  И в массиве ДХА и в массиве ДХАХ.
[52:50.100 --> 52:58.100]  Поэтому идея такая, так давайте на каждой вертикали каждого из этих массивов забабахаем тоже этого нашего продвинутого Фенлика.
[53:00.100 --> 53:01.100]  Да.
[53:02.100 --> 53:03.100]  Вот.
[53:04.100 --> 53:08.100]  Как бы да. Ну, как говорится, размножение продолжается.
[53:09.100 --> 53:15.100]  Потому что для того, чтобы сделать это на массиве ДХА, то есть нам придется создать вот уже, значит, целых два массива.
[53:16.100 --> 53:26.100]  Это будет массив ДЫ-ДХА и ДЫ-ДХАY.
[53:29.100 --> 53:30.100]  Вот.
[53:31.100 --> 53:33.100]  Но это мы еще только из массива ДХА такое сделали.
[53:33.100 --> 53:37.100]  А ведь придется то же самое делать из массива ДХАХ.
[53:41.100 --> 53:43.100]  Ну, на самом деле да.
[53:44.100 --> 53:51.100]  Ну, как сказать, там, там, конечно, чем дальше, тем как бы сложнее это использовать, именно как там действительно может быть черный ящик, хотя...
[53:56.100 --> 54:00.100]  Нет, ну, как сказать, ну, скажем так, ну, там и так, и так.
[54:01.100 --> 54:02.100]  Просто фишка такая.
[54:03.100 --> 54:07.100]  То есть в одномерии мы, как бы у нас в структуре мы прибираемся и ищем сумму каких-то элементов.
[54:08.100 --> 54:11.100]  А теперь в двумерной структуре мы будем модифицировать структуру так, что просто мы...
[54:12.100 --> 54:21.100]  У нас как бы есть то же одномерная структура, только в каждой точке мы как бы не просто берем чиселку и прибавляем там, вычитаем к ответу, да, а просто лезем в такую же структуру.
[54:22.100 --> 54:25.100]  И там запускаемся на подотрески. То есть модификация в этом.
[54:25.100 --> 54:38.100]  То есть в принципе на самом деле так, то есть обобщение может быть только в том, что, знаете, вот, допустим, у вас есть такой экзотический фенвик или деревоотресков, когда вы там говорите, хочу найти сумму на префиксе.
[54:39.100 --> 54:47.100]  И он вам возвращает вектор, типа, то есть он, типа, нищет вам сумму на префиксе, а говорит, значит, смотри, вот у тебя есть массив.
[54:48.100 --> 54:57.100]  Значит, вот те числа, один, два, четыре, там, я не знаю, там, девять, двенадцать. Вот возьмите элементы и их сложи.
[54:58.100 --> 55:06.100]  Вот, а, нет, все, я тебе больше ничего не должен. Вот, а то, типа, у вас много, я один, там, вот это все.
[55:07.100 --> 55:11.100]  То есть вот такой вот наглый, он выкладывает индексы, в которых надо сложить.
[55:12.100 --> 55:16.100]  Тогда вот, оказывается, с таким наглым фенвиком обобщать оказывается лучше.
[55:17.100 --> 55:28.100]  Почему? Потому что в двумерном случае тогда, говорит, берем по иксу, он говорит, значит, смотри, складывай первого, второго, четвертого, там, пятого, десятого, там, пятьдесят седьмого по иксу.
[55:29.100 --> 55:37.100]  Вот, окей. Ну вот, и дальше вы тогда идете по этим шести столбцам, и в каждом столбце у вас получается есть там своя структура.
[55:38.100 --> 55:45.100]  Ну, даже не совсем так. То есть вы можете, то есть вы там по иксу сказали в каких рядах, и потом вам говорят, а теперь еще скажите в каких столбцах.
[55:46.100 --> 55:53.100]  И там, ну, можно так двумя способами. Либо там, в каждом столбце у вас есть действительно внутренняя структура, куда вы действительно уже отправляете черный ящик.
[55:54.100 --> 56:05.100]  Ну, либо просто говорит, что делаете то же самое, что там, он вам возвращает какие индексы вас интересуют по игроку, и тогда вы уже знаете, что вот вам по иксу, вот вам по игроку, теперь перебираем, перебираем, и там прибавляем там то, что надо.
[56:07.100 --> 56:13.100]  Вот, в принципе, можно так мыслить. В принципе, такое мышление действительно очень удобно тогда обобщается уже и на трехмерии, и на что угодно.
[56:14.100 --> 56:26.100]  Вот. Да, ну, значит, я еще не дописал. Да, значит, dxax, это у нас получается dydxax, и, конечно, его величество dydxaxy.
[56:28.100 --> 56:35.100]  Вот. Ну, так. Ну, по сравнению с названиями каких-нибудь спиртов, я думаю, не так страшно.
[56:35.100 --> 56:41.100]  Не так страшно, да? Вот. Вот.
[56:42.100 --> 56:55.100]  Получается, получается, у вас четыре массива, в каждом из них нужно сделать запрос, как в обувь, в двумерном дереве, там, какой-нибудь фенвик или отрезков с изменением в точке, и тогда здесь уже получается действительно все по красоте.
[56:55.100 --> 57:07.100]  То есть тут log n, log n здесь, и там log n, log n здесь. Правда, с оговоркой, что придется хранить уже не двух фенвиков, а целых четыре.
[57:08.100 --> 57:14.100]  Ну, а в трехмерии восемь, там, шестнадцать и так далее. То есть у вас уже давите, то есть у вас как два степеника растет уже аж количество фенвиков.
[57:15.100 --> 57:17.100]  Да, так что вот такая вот красота.
[57:18.100 --> 57:27.100]  Так что если у вас есть там много работяг, которых надо трудоустроить, тогда всегда решайте задачу коммерного поиска суммы в камере.
[57:28.100 --> 57:33.100]  Да. И тогда, собственно, как говорится, работяги придут и будут работать.
[57:34.100 --> 57:38.100]  Вот. Так что вот такая радость. То есть обратите внимание, между прочим.
[57:39.100 --> 57:40.100]  Чего?
[57:40.100 --> 57:41.100]  Да?
[57:41.100 --> 57:42.100]  Не, а что тут?
[57:45.100 --> 57:46.100]  Так, конечно, говорят.
[57:47.100 --> 57:51.100]  Нет, ну, индексация тут, по-моему, особо не принципиальна.
[57:52.100 --> 57:53.100]  Ну, чтобы...
[57:55.100 --> 57:57.100]  Нет, ну там, на самом деле, там и...
[57:59.100 --> 58:00.100]  Ничего как для общего случая.
[58:01.100 --> 58:02.100]  Нет, ну что?
[58:04.100 --> 58:08.100]  Нет, ну а что, в общем, нот. Нет, ну по большому счету будет, в общем-то, примерно так же, в чем проблема.
[58:10.100 --> 58:11.100]  Нет, ну вот.
[58:12.100 --> 58:15.100]  Нет, то есть механизм обращения тоже, то есть у вас тут просто...
[58:16.100 --> 58:19.100]  То есть тоже будет это, то есть куча массивов DZ, DIG, DX.
[58:20.100 --> 58:24.100]  Просто они будут домножаться на там все возможные подмножества Иксов и Игоков.
[58:26.100 --> 58:27.100]  Ну вот.
[58:28.100 --> 58:29.100]  Почему 4 получилось?
[58:30.100 --> 58:31.100]  И чего?
[58:32.100 --> 58:33.100]  Почему у нас 4 матрицы?
[58:33.100 --> 58:41.100]  Ну, смотри, потому что, когда мы искали одномерную задачу поиска суммы на отрезки и прибавления на отрезки, у нас вместо одного фенвика получилось два.
[58:42.100 --> 58:45.100]  Позже, мы их назвали DA и DAG.
[58:46.100 --> 58:47.100]  Ну вот, вот здесь.
[58:47.100 --> 58:48.100]  Вот, поэтому здесь их уже два.
[58:49.100 --> 58:50.100]  Когда мы только...
[58:51.100 --> 58:52.100]  Да.
[58:52.100 --> 58:54.100]  Но и для этого массивы, и для этого.
[58:54.100 --> 58:55.100]  Поэтому 4.
[58:56.100 --> 58:57.100]  Вот.
[58:57.100 --> 59:00.100]  Вот так ещё можно обобщать.
[59:01.100 --> 59:02.060]  То есть, ну, на самом деле...
[59:02.100 --> 59:11.100]  Ну, как сказать, то есть, на самом деле можно действительно обобщить, что сказать, что у вас, что, допустим, при каждом фиксированном Иксе у вас там в толст sauce находится какая-то структура данных.
[59:12.100 --> 59:18.100]  То есть, то есть, если говорить о том, как на обобщать на большей размерности, то опять же говорю, что вот у вас там, камерный параллле-ипид.
[59:19.100 --> 59:20.100]  Переберём первую координату.
[59:21.100 --> 59:26.100]  При каждой фиксированной координате у вас есть 49- es-анимерный параллле-ипид, на котором у нас там, допустим, рекурсивно какая-то структура хранится.
[59:27.100 --> 59:29.420]  Вот, понятно, да?
[59:29.420 --> 59:31.900]  Ну, не важно, там давайте изначально для простоты
[59:31.900 --> 59:33.860]  считать, что у вас весь массив заполнен нулями.
[59:33.860 --> 59:39.380]  Тогда получается, что запросы будут, то есть везде так.
[59:39.380 --> 59:47.260]  То есть мы говорим, что мы фиксируем все, кроме первой
[59:47.260 --> 59:52.300]  координаты, и по, так сказать, ряду нот, и по ряду, допустим,
[59:52.300 --> 59:53.420]  условно забабахиваем фермика.
[59:53.420 --> 59:54.420]  Что это значит?
[59:55.220 --> 59:57.380]  То есть по большому счету это будет означать, что
[59:57.380 --> 01:00:02.140]  во всех запросах мы будем по этому х смотреть, какие
[01:00:02.140 --> 01:00:04.980]  х-ы нас вообще интересуют, в каких х-ах мы бы делали
[01:00:04.980 --> 01:00:05.980]  запросы.
[01:00:05.980 --> 01:00:10.860]  И при каждом фиксированном х-е запрашивали, делали
[01:00:10.860 --> 01:00:14.300]  бы что-то рекурсивное на k-минус одномерный случай.
[01:00:14.300 --> 01:00:17.140]  Вот, ну по сути так.
[01:00:17.140 --> 01:00:21.100]  Ну да, может не самый пока, то есть пока не самый щелкающий
[01:00:21.100 --> 01:00:22.700]  способ, конечно, получается.
[01:00:22.700 --> 01:00:25.460]  Ну вот, ну что делать.
[01:00:25.460 --> 01:00:31.340]  Хочется, конечно, че-нибудь пощелкающие, но ладно.
[01:00:31.340 --> 01:00:33.140]  Вот, но темя нот.
[01:00:33.140 --> 01:00:37.740]  Нет, туда, да, опять же, еще раз, мы никак не пользовались
[01:00:37.740 --> 01:00:38.740]  тем, что Дирева Фенвика.
[01:00:38.740 --> 01:00:42.420]  Мы здесь пользовались только одним, что хранится какая,
[01:00:42.420 --> 01:00:46.460]  в каждом ряду хранится какая-то структура данных,
[01:00:46.460 --> 01:00:49.260]  и в этой структуре данных, по каждому там, чтобы найти
[01:00:49.260 --> 01:00:52.860]  сумму на подотреске, допустим, ЭЛЕР, вам нужно найти сумму
[01:00:52.860 --> 01:00:56.380]  каких-то конкретных элементов, которые только от ЭЛЕР
[01:00:56.380 --> 01:00:57.380]  зависят.
[01:00:57.380 --> 01:00:59.660]  То есть это, в общем-то, что Дирева Фенвика, что Дирева
[01:00:59.660 --> 01:01:00.980]  Отресков этому удовлетворяет.
[01:01:00.980 --> 01:01:02.980]  Ну единственное, что в Диреве Фенвика какие-то элементы
[01:01:02.980 --> 01:01:04.460]  надо не только прибавлять, но и вычитать.
[01:01:04.460 --> 01:01:08.820]  Вот, то есть в принципе, кстати, но вот, но так суть
[01:01:08.820 --> 01:01:11.300]  одна, то есть мы не пользовались, что это именно Фенвика, а
[01:01:11.300 --> 01:01:13.260]  не Дирева Отресков, мы не пользовались.
[01:01:13.260 --> 01:01:15.780]  Более того, в принципе, вы могли вообще бы развлечься
[01:01:15.780 --> 01:01:18.420]  и сказать, что здесь вы делаете Дирево Фенвика, тут делаете
[01:01:18.420 --> 01:01:19.420]  Дирева Отресков.
[01:01:19.420 --> 01:01:22.300]  Ну, если у вас там очень большое желание зачем-то
[01:01:22.300 --> 01:01:28.300]  себе, там, усложнить реализацию, уж не знаю зачем, но теоретически
[01:01:28.300 --> 01:01:29.300]  возможно.
[01:01:29.300 --> 01:01:31.540]  Нет, чисто теоретически на этом можно там, если
[01:01:31.540 --> 01:01:33.180]  у вас третье измерение, можете вообще плюнуть и
[01:01:33.180 --> 01:01:34.180]  корневуху забабахать.
[01:01:34.180 --> 01:01:38.580]  Да, а симптотика, конечно, это попортит, но уж как-бы
[01:01:38.580 --> 01:01:39.580]  развлекаться так до конца.
[01:01:39.580 --> 01:01:40.580]  Вот.
[01:01:40.580 --> 01:01:45.900]  Так что вот такое, так что поздравляем, мы действительно
[01:01:46.460 --> 01:01:52.260]  шикарную операцию, с которой у нас не справилось всякие
[01:01:52.260 --> 01:01:57.580]  проталкивания, а именно прибавление на под прямоугольники
[01:01:57.580 --> 01:01:58.580]  и сумма на под прямоугольники.
[01:01:58.580 --> 01:02:01.140]  Обратите внимание, это не прибавление на прямоугольники
[01:02:01.140 --> 01:02:04.940]  и сумма в одной точке, которое тоже делались бы аналогичными
[01:02:04.940 --> 01:02:05.940]  технологиями.
[01:02:05.940 --> 01:02:10.420]  То есть, в принципе, получается достаточно неожиданно мощный
[01:02:10.420 --> 01:02:13.260]  результат, хотя, казалось бы, мы тут вроде никакой сильно
[01:02:13.260 --> 01:02:15.140]  большой магии не делали.
[01:02:15.140 --> 01:02:16.900]  То есть, шаг за шагом, и тут выясняется.
[01:02:16.900 --> 01:02:17.900]  Вот.
[01:02:17.900 --> 01:02:22.900]  Так, есть ли тут какие-то вопросы?
[01:02:22.900 --> 01:02:25.900]  Так.
[01:02:25.900 --> 01:02:38.740]  Ну, в первую очередь, сумму по каким-то конкретным
[01:02:39.740 --> 01:02:47.780]  Сумма каких-то элементов, при условии, что мы в каждом
[01:02:47.780 --> 01:02:50.780]  ряду забабахивали дерево Фенрика.
[01:02:50.780 --> 01:02:51.780]  Вот.
[01:02:51.780 --> 01:02:56.940]  Нет, ну там, да, что там надо, там что-то, но там
[01:02:56.940 --> 01:02:59.460]  понятно будет, сумма на префиксе, минус сумма на префиксе,
[01:02:59.460 --> 01:03:03.620]  каждая сумма на префиксе, это там длина префикса плюс
[01:03:03.620 --> 01:03:06.140]  один умножить на вот эту сумму, там минус сумма
[01:03:06.140 --> 01:03:07.140]  здесь еще.
[01:03:07.540 --> 01:03:10.540]  Если бы это было место Фенрика в дерево отрезков, то как
[01:03:10.540 --> 01:03:11.540]  он не прибавлял бы?
[01:03:11.540 --> 01:03:14.540]  То есть, мы не делали бы все вот эти вот, да и...
[01:03:14.540 --> 01:03:17.540]  Не, абсолютно, что делали бы, в чем проблема?
[01:03:17.540 --> 01:03:22.540]  Мы делали же дополнительная сила, чтобы массовость
[01:03:22.540 --> 01:03:25.540]  добавить, а в дерево отрезков можно массовость через
[01:03:25.540 --> 01:03:26.540]  пушистую.
[01:03:26.540 --> 01:03:27.540]  Ого.
[01:03:27.540 --> 01:03:29.540]  Ну, просто проблема в том, что технологии не особо
[01:03:29.540 --> 01:03:30.540]  вообще там как-то...
[01:03:30.540 --> 01:03:31.540]  Подождите, ну просто...
[01:03:31.540 --> 01:03:32.540]  Нет, это пуши...
[01:03:32.540 --> 01:03:33.540]  Нет, смотри, просто сейчас.
[01:03:33.540 --> 01:03:35.540]  Там, понимаешь, просто какая фишка?
[01:03:35.940 --> 01:03:37.940]  Дело в том, что пуши...
[01:03:37.940 --> 01:03:39.940]  Нет, скажем так, больше...
[01:03:53.940 --> 01:03:54.940]  Ну...
[01:03:55.940 --> 01:04:00.940]  Сейчас даже сложно объяснить, но сейчас по поводу не работает, да.
[01:04:05.940 --> 01:04:07.940]  Не, подожди, в чем проблема?
[01:04:14.940 --> 01:04:19.940]  Да, в каждой строке, в каждой столбце, Фенрика просто.
[01:04:19.940 --> 01:04:22.940]  Фенрика, которую мы делали с маслом и красом.
[01:04:22.940 --> 01:04:24.940]  Почему я не могу до Фенрика, но не до дерева отрезков?
[01:04:24.940 --> 01:04:25.940]  Можешь.
[01:04:25.940 --> 01:04:27.940]  Нет, сам скажи, как-то дерево отрезков, ну просто
[01:04:27.940 --> 01:04:29.940]  дерево отрезков можно, но если ты там пользуешься...
[01:04:33.940 --> 01:04:34.940]  Почему нельзя с пушами?
[01:04:35.340 --> 01:04:42.340]  Нет, просто с пушами, нет, боюсь, тут отложенность
[01:04:42.340 --> 01:04:45.340]  уже, как бы, по идее, сработать не должна.
[01:04:45.340 --> 01:04:48.340]  В дерево отрезков обычном есть такой вариант.
[01:04:48.340 --> 01:04:49.340]  То есть мы дерево...
[01:04:49.340 --> 01:04:52.340]  То есть каждый элемент не точно знает свою сумму,
[01:04:52.340 --> 01:04:55.340]  но мы гарантируем, что все отложенные операции
[01:04:55.340 --> 01:04:57.340]  находятся у него как бы выше, и мы в эту вершину
[01:04:57.340 --> 01:04:59.340]  можем прийти только через предков.
[01:04:59.340 --> 01:05:01.340]  За счет чего мы эти пуши протолкнем.
[01:05:01.740 --> 01:05:03.740]  Вот здесь такой гарантии нету.
[01:05:06.740 --> 01:05:07.740]  Ну, проверим.
[01:05:07.740 --> 01:05:09.740]  Вот в этой технологии мы как бы...
[01:05:09.740 --> 01:05:13.740]  Здесь мы как бы пользуемся в явном виде, что мы должны
[01:05:13.740 --> 01:05:16.740]  перебрать, в каких столбцах мы должны пробежаться.
[01:05:16.740 --> 01:05:19.740]  Если бы мы делали дерево отрезков, то нам бы пришлось
[01:05:19.740 --> 01:05:22.740]  сказать, что мы должны пробежаться еще там по каким-то...
[01:05:22.740 --> 01:05:27.740]  По каким-то всем верхним, на самом деле, вершинам.
[01:05:27.740 --> 01:05:29.740]  Ну, их там, ладно, само по себе логично.
[01:05:30.140 --> 01:05:32.140]  И сделать пуши.
[01:05:33.140 --> 01:05:34.140]  Вот.
[01:05:34.140 --> 01:05:36.140]  То есть сделать пуши.
[01:05:39.140 --> 01:05:40.140]  Ну, вот.
[01:05:40.140 --> 01:05:42.140]  Ну, кстати, хотя...
[01:05:42.140 --> 01:05:43.140]  Ну, вот.
[01:05:43.140 --> 01:05:45.140]  То есть действительно, если так аккуратно делать,
[01:05:45.140 --> 01:05:47.140]  то может, кстати, даже и зайдет.
[01:05:48.140 --> 01:05:49.140]  Ну, вот.
[01:05:49.140 --> 01:05:51.140]  Но там...
[01:05:53.140 --> 01:05:54.140]  Вот.
[01:05:54.140 --> 01:05:55.140]  Ну, вот.
[01:05:55.140 --> 01:05:56.140]  Но это...
[01:05:56.140 --> 01:05:58.140]  Но такая вещь, конечно.
[01:05:58.540 --> 01:06:01.540]  В каждом из тех деревьев, в которых мы делаем запрос,
[01:06:01.540 --> 01:06:03.540]  но можно все пропушить.
[01:06:03.540 --> 01:06:04.540]  Нет, ну, принц.
[01:06:04.540 --> 01:06:05.540]  Нет, ну...
[01:06:05.540 --> 01:06:07.540]  Мы не можем сразу обращаться ко вторым деревьям отрезков.
[01:06:07.540 --> 01:06:08.540]  Ну, вот.
[01:06:09.540 --> 01:06:11.540]  Нет, ну, как сказать.
[01:06:11.540 --> 01:06:13.540]  Нет, у нас сейчас...
[01:06:13.540 --> 01:06:14.540]  Ну, тут вот...
[01:06:14.540 --> 01:06:16.540]  Ну, тут, конечно, вот тут все-таки...
[01:06:16.540 --> 01:06:17.540]  Да.
[01:06:17.540 --> 01:06:18.540]  Нет, тут нет.
[01:06:18.540 --> 01:06:20.540]  Кажется, там можно сделать, но там логкуб вылезет.
[01:06:20.540 --> 01:06:21.540]  Нет, почему логкуб?
[01:06:21.540 --> 01:06:22.540]  Нет, смотри.
[01:06:22.540 --> 01:06:23.540]  Ну, пуши.
[01:06:23.540 --> 01:06:24.540]  Ну, смотри.
[01:06:24.540 --> 01:06:25.540]  В дереве...
[01:06:25.540 --> 01:06:27.540]  Ну, как мы знаем, операция в дереве отрезков работает
[01:06:28.540 --> 01:06:30.540]  То есть, когда мы перебираем не только нужные нам отрезки,
[01:06:30.540 --> 01:06:33.540]  но и все их предки, то их получается тоже от логарифма.
[01:06:33.540 --> 01:06:35.540]  Вот.
[01:06:35.540 --> 01:06:37.540]  Ну, вот.
[01:06:37.540 --> 01:06:39.540]  То есть, в принципе, ВАЗК действительно идея уровня
[01:06:39.540 --> 01:06:41.540]  «А давайте...»
[01:06:41.540 --> 01:06:43.540]  То есть, просчитаем, допустим, у нас тут в каждом ряду
[01:06:43.540 --> 01:06:45.540]  мы делали бы дерево отрезков такое, да?
[01:06:45.540 --> 01:06:47.540]  Тогда надо просто перебрать...
[01:06:47.540 --> 01:06:49.540]  Тогда получается...
[01:06:49.540 --> 01:06:51.540]  Нужно сделать следующее.
[01:06:51.540 --> 01:06:53.540]  То есть, нужно в каждом ряду
[01:06:53.540 --> 01:06:55.540]  перебрать ячейки дерева отрезков,
[01:06:55.540 --> 01:06:57.540]  из которых надо сделать пуш.
[01:06:59.540 --> 01:07:01.540]  И тогда в каждом конкретном ряду...
[01:07:03.540 --> 01:07:05.540]  То есть, получается, надо сделать...
[01:07:05.540 --> 01:07:07.540]  У каких-то операций надо сделать пуш.
[01:07:09.540 --> 01:07:11.540]  То есть, допустим, пуш-пуш-пуш-пуш.
[01:07:11.540 --> 01:07:13.540]  Там пуш-пуш.
[01:07:13.540 --> 01:07:15.540]  Ну, как-то так вот.
[01:07:15.540 --> 01:07:17.540]  Вот.
[01:07:17.540 --> 01:07:19.540]  И... Ну, вот.
[01:07:21.540 --> 01:07:23.540]  То есть, тогда мы гарантируем, что...
[01:07:23.540 --> 01:07:25.540]  То есть, когда мы тут проделали пуш,
[01:07:25.540 --> 01:07:27.540]  то есть, мы начинаем знать, что
[01:07:27.540 --> 01:07:29.540]  там, по крайней мере, все ноты.
[01:07:43.540 --> 01:07:45.540]  Нет. Ну, как сказать?
[01:07:45.540 --> 01:07:47.540]  Ну, вторая нота.
[01:07:49.540 --> 01:07:51.540]  Нет. Ну, в принципе, да.
[01:07:51.540 --> 01:07:53.540]  Нет.
[01:07:53.540 --> 01:07:55.540]  Я боюсь, тут проблема просто будет, что
[01:07:55.540 --> 01:07:57.540]  если мы попытаемся это обобщить...
[01:07:57.540 --> 01:07:59.540]  Ну, да. То есть, похорону...
[01:07:59.540 --> 01:08:01.540]  То есть, кажется, просто
[01:08:01.540 --> 01:08:03.540]  есть такой...
[01:08:03.540 --> 01:08:05.540]  Ну, да.
[01:08:05.540 --> 01:08:07.540]  Если мы, допустим, когда-нибудь захотим потом найти
[01:08:07.540 --> 01:08:09.540]  сумму на маленьком прямом углу, даже вот
[01:08:09.540 --> 01:08:11.540]  на этом ряду, то ей бог быть какие-то
[01:08:11.540 --> 01:08:13.540]  высокоуровневые пуши, до которых мы рискуем
[01:08:13.540 --> 01:08:15.540]  просто не дойти.
[01:08:15.540 --> 01:08:17.540]  Тут какие-то такие риски есть.
[01:08:17.540 --> 01:08:19.540]  Ну, да. Нет.
[01:08:19.540 --> 01:08:21.540]  Сложный, конечно, момент, но
[01:08:21.540 --> 01:08:23.540]  как бы у меня осталось всегда интуитивное
[01:08:23.540 --> 01:08:25.540]  ощущение, что там какая-то подлянка.
[01:08:25.540 --> 01:08:27.540]  Видимо, компенсируется она еще тем, что я никогда
[01:08:27.540 --> 01:08:29.540]  не слышал, чтобы кто-то
[01:08:29.540 --> 01:08:31.540]  решал за логарифом подобным
[01:08:31.540 --> 01:08:33.540]  технологию операцию, скажем, присваивания
[01:08:33.540 --> 01:08:35.540]  на маленьком углу.
[01:08:37.540 --> 01:08:39.540]  То есть, поэтому там вынуждено
[01:08:39.540 --> 01:08:41.540]  сказать, что какие-то подлянки тут есть.
[01:08:41.540 --> 01:08:43.540]  Хотя, конечно, может быть, слет очень
[01:08:43.540 --> 01:08:45.540]  нетривиально на таком уровне понять, а какие
[01:08:45.540 --> 01:08:47.540]  конкретно.
[01:08:47.540 --> 01:08:49.540]  Но они есть.
[01:08:51.540 --> 01:08:53.540]  Ага, желательно еще и доказательно.
[01:08:53.540 --> 01:08:55.540]  Потому что тут
[01:08:57.540 --> 01:08:59.540]  Ну, да, да, да.
[01:08:59.540 --> 01:09:01.540]  Или наоборот.
[01:09:01.540 --> 01:09:03.540]  Знаете, как бывает
[01:09:03.540 --> 01:09:05.540]  в этом?
[01:09:05.540 --> 01:09:07.540]  Казанцы же рассказывали
[01:09:07.540 --> 01:09:09.540]  прикол, что мы там сделали
[01:09:09.540 --> 01:09:11.540]  контест, дали оптом, из Open Cup пришло
[01:09:11.540 --> 01:09:13.540]  предположение, что наша задача G является
[01:09:13.540 --> 01:09:15.540]  полной. Предположение подкреплялось
[01:09:15.540 --> 01:09:17.540]  примером теста, который валит все решения
[01:09:17.540 --> 01:09:19.540]  жюри.
[01:09:19.540 --> 01:09:21.540]  Да, как бы чуть позже автор
[01:09:21.540 --> 01:09:23.540]  разобрался в проблеме, подтвердил, что
[01:09:23.540 --> 01:09:25.540]  действительно наше решение неправильно.
[01:09:25.540 --> 01:09:27.540]  Да, при этом шел пятый час контеста,
[01:09:27.540 --> 01:09:29.540]  кто-то уже
[01:09:29.540 --> 01:09:31.540]  получил акцент, пропихнув жадность,
[01:09:31.540 --> 01:09:33.540]  которую подразумевала жюри.
[01:09:33.540 --> 01:09:35.540]  Ну, бывает, да.
[01:09:37.540 --> 01:09:39.540]  Ну, да.
[01:09:39.540 --> 01:09:41.540]  Ну, бывает.
[01:09:41.540 --> 01:09:43.540]  Не, ну.
[01:09:43.540 --> 01:09:45.540]  Не, ну там подлянка.
[01:09:45.540 --> 01:09:47.540]  Форси как бы такой раунд признают н-рейтингом, естественно.
[01:09:47.540 --> 01:09:49.540]  Нет.
[01:09:49.540 --> 01:09:51.540]  Не, ну при таких вещах
[01:09:51.540 --> 01:09:53.540]  он кэша объявляется н-рейтингом и так далее.
[01:09:53.540 --> 01:09:55.540]  Была статистика, когда
[01:09:55.540 --> 01:09:57.540]  там куча красных
[01:09:57.540 --> 01:09:59.540]  сел кроме С.
[01:09:59.540 --> 01:10:01.540]  Ну, вот да.
[01:10:01.540 --> 01:10:03.540]  Я не правда, я Степаном стал.
[01:10:03.540 --> 01:10:05.540]  Ну, понятно.
[01:10:05.540 --> 01:10:07.540]  Не, ну что, нет, Петя Митричев как бы потом
[01:10:07.540 --> 01:10:09.540]  автор этого теста,
[01:10:09.540 --> 01:10:11.540]  он показал, что задача
[01:10:11.540 --> 01:10:13.540]  НП полная.
[01:10:13.540 --> 01:10:15.540]  Все задачи знали, так теперь думаем.
[01:10:15.540 --> 01:10:17.540]  Так, ну да, нет, задача реально НП полная.
[01:10:17.540 --> 01:10:19.540]  Так, ладно, давайте подумаем, что от нас могло
[01:10:19.540 --> 01:10:21.540]  хотеть жюри.
[01:10:21.540 --> 01:10:23.540]  Так, может быть, вот это, это, ну давайте это.
[01:10:23.540 --> 01:10:25.540]  О, accepted. Ну, значит, шлем Clark, что
[01:10:25.540 --> 01:10:27.540]  ребят, это хрень.
[01:10:27.540 --> 01:10:29.540]  Ну, то есть, в принципе, да.
[01:10:29.540 --> 01:10:31.540]  Но для этого нужно быть Петей Митричевым.
[01:10:31.540 --> 01:10:33.540]  Да, возможно, вы уже не знаете, кто это.
[01:10:33.540 --> 01:10:35.540]  Да, который Петр.
[01:10:35.540 --> 01:10:37.540]  Ну, в свое время это был легенда.
[01:10:37.540 --> 01:10:39.540]  Ну, в чутке, там про его и топ-кодер,
[01:10:39.540 --> 01:10:41.540]  там, знаете, ну, пока стираю, могу рассказать.
[01:10:41.540 --> 01:10:43.540]  Вот, что там,
[01:10:43.540 --> 01:10:45.540]  там какие, какие, какие
[01:10:45.540 --> 01:10:47.540]  там легенды, что там
[01:10:47.540 --> 01:10:49.540]  действительно, что
[01:10:49.540 --> 01:10:51.540]  там, что действительно, в той комнате,
[01:10:51.540 --> 01:10:53.540]  где контест пишет Петя, на самом деле
[01:10:53.540 --> 01:10:55.540]  называется, там системные тесты
[01:10:55.540 --> 01:10:57.540]  не запускаются.
[01:10:57.540 --> 01:10:59.540]  Потому что, на самом деле, просто всех, кого не взломал Петя,
[01:10:59.540 --> 01:11:01.540]  там всем руками выставляется accepted.
[01:11:01.540 --> 01:11:03.540]  Автоматически.
[01:11:03.540 --> 01:11:05.540]  Ну, а, ну реши, да.
[01:11:05.540 --> 01:11:07.540]  А, ну, да, или если контест пишет Петя,
[01:11:07.540 --> 01:11:09.540]  то, в принципе, авторы даже не пишут авторское решение,
[01:11:09.540 --> 01:11:11.540]  просто берут Петина.
[01:11:11.540 --> 01:11:13.540]  Или там, или там
[01:11:13.540 --> 01:11:15.540]  единственная вердикт, кроме
[01:11:15.540 --> 01:11:17.540]  окея, который может получить Петя, это time limit.
[01:11:17.540 --> 01:11:19.540]  Ну, дело в том, что чаще всего
[01:11:19.540 --> 01:11:21.540]  в тестирующих системах время обозначается
[01:11:21.540 --> 01:11:23.540]  беззнаковым, там, беззнаковым целым числом
[01:11:23.540 --> 01:11:25.540]  и минус, минус один воспринимается как
[01:11:25.540 --> 01:11:27.540]  плюс бесконечность.
[01:11:27.540 --> 01:11:29.540]  Там вот оно, ну, и так далее.
[01:11:29.540 --> 01:11:31.540]  Такие, ну, там вот эти, там, можете погуглить там
[01:11:31.540 --> 01:11:33.540]  40 фактов о Петре Митриче.
[01:11:33.540 --> 01:11:35.540]  Да,
[01:11:35.540 --> 01:11:37.540]  то есть...
[01:11:37.540 --> 01:11:39.540]  Ну, кстати, да.
[01:11:39.540 --> 01:11:41.540]  Не, ну, не то, чтобы, я думаю, он там не умеет на C++,
[01:11:41.540 --> 01:11:43.540]  но, как бы, вот он
[01:11:43.540 --> 01:11:45.540]  Джавай, да, давным-давно, когда
[01:11:45.540 --> 01:11:47.540]  Джавайы были, и было их много.
[01:11:47.540 --> 01:11:49.540]  Вот. А тут, как бы, даже
[01:11:49.540 --> 01:11:51.540]  хотя несколько лет назад даже ритмо
[01:11:51.540 --> 01:11:53.540]  упало в этом плане. Это может быть
[01:11:53.540 --> 01:11:55.540]  да. Ладно.
[01:11:55.540 --> 01:11:57.540]  Так.
[01:11:57.540 --> 01:11:59.540]  Так, ну ладно, давайте так, чтобы сейчас
[01:11:59.540 --> 01:12:01.540]  закончить с деревьями отрезков, по крайней мере,
[01:12:01.540 --> 01:12:03.540]  но, конечно, хочется рассмотреть
[01:12:03.540 --> 01:12:05.540]  еще одну маленькую,
[01:12:05.540 --> 01:12:07.540]  неожиданную задачку.
[01:12:07.540 --> 01:12:09.540]  Вот. Ну, сейчас я, правда,
[01:12:09.540 --> 01:12:11.540]  с двумя июля она уже отношений
[01:12:11.540 --> 01:12:13.540]  иметь не будет,
[01:12:13.540 --> 01:12:15.540]  но будет иметь кое-чему
[01:12:15.540 --> 01:12:17.540]  еще.
[01:12:17.540 --> 01:12:19.540]  Так.
[01:12:19.540 --> 01:12:21.540]  Но для этого
[01:12:21.540 --> 01:12:23.540]  нужно принудить. Напомните ко мне, обсуждали
[01:12:23.540 --> 01:12:25.540]  ко мне такую веселую задачу
[01:12:25.540 --> 01:12:27.540]  про, там, покраску забора
[01:12:27.540 --> 01:12:29.540]  на 10-9.
[01:12:29.540 --> 01:12:31.540]  Вот.
[01:12:31.540 --> 01:12:33.540]  Нет, ну просто я в какой-то момент со всеми
[01:12:33.540 --> 01:12:35.540]  это обсуждал, просто
[01:12:35.540 --> 01:12:37.540]  великая задача про тома Сойра, который
[01:12:37.540 --> 01:12:39.540]  неожиданно решается четырьмя разными способами.
[01:12:39.540 --> 01:12:41.540]  А задача такая.
[01:12:41.540 --> 01:12:43.540]  Ну, задача просто про том Сойра.
[01:12:43.540 --> 01:12:45.540]  Задача
[01:12:45.540 --> 01:12:47.540]  формулируется так. Значит,
[01:12:47.540 --> 01:12:49.540]  том Сойр красит забор. На
[01:12:49.540 --> 01:12:51.540]  заборе, редкий случай, 10-9
[01:12:51.540 --> 01:12:53.540]  досок. Да, даже не
[01:12:53.540 --> 01:12:55.540]  10-5, а 10-9.
[01:12:55.540 --> 01:12:57.540]  Он, значит,
[01:12:57.540 --> 01:12:59.540]  а он этот забор красит. Как он его красит?
[01:12:59.540 --> 01:13:01.540]  Ну, у него есть 10-5.
[01:13:01.540 --> 01:13:03.540]  Изначально все доски там бесцветные.
[01:13:03.540 --> 01:13:05.540]  Он красит, он там, у него там есть
[01:13:05.540 --> 01:13:07.540]  10-5 запросов типа покрасить
[01:13:07.540 --> 01:13:09.540]  какой-то подотрезок в заданный цвет.
[01:13:09.540 --> 01:13:11.540]  Прям, L, R, там,
[01:13:11.540 --> 01:13:13.540]  X. Так вот, скажите,
[01:13:13.540 --> 01:13:15.540]  ну понятно, что если красит одно и то же,
[01:13:15.540 --> 01:13:17.540]  красит поверх.
[01:13:17.540 --> 01:13:19.540]  Ну, присваивание, короче. Внимание
[01:13:19.540 --> 01:13:21.540]  вопрос. Для каждого цвета, скажите,
[01:13:21.540 --> 01:13:23.540]  то есть в конце, для каждого цвета
[01:13:23.540 --> 01:13:25.540]  скажите, пожалуйста, сколько
[01:13:25.540 --> 01:13:27.540]  досок в него покрашено?
[01:13:33.540 --> 01:13:35.540]  В общем, юмор такой. Просто почему
[01:13:35.540 --> 01:13:37.540]  прикольная эта задача?
[01:13:37.540 --> 01:13:39.540]  Потому что мне неожиданно оказалось,
[01:13:39.540 --> 01:13:41.540]  что я умею решать эту задачу четырьмя разными
[01:13:41.540 --> 01:13:43.540]  способами.
[01:13:43.540 --> 01:13:45.540]  Причем принципиально разными,
[01:13:45.540 --> 01:13:47.540]  на самом деле. А если вы скажете, причем более
[01:13:47.540 --> 01:13:49.540]  того, два из них с цветом.
[01:13:49.540 --> 01:13:51.540]  Я сейчас скажу, ну как решать цветом, понятно.
[01:13:51.540 --> 01:13:53.540]  Все говорят, понятно. Потом выясняется, что у нас
[01:13:53.540 --> 01:13:55.540]  принципиально разные решения с цветом.
[01:13:59.540 --> 01:14:01.540]  Но давайте подумаем, как вообще можно
[01:14:01.540 --> 01:14:03.540]  решать?
[01:14:03.540 --> 01:14:05.540]  На самом деле есть два решения с цветом,
[01:14:05.540 --> 01:14:07.540]  есть два решения без цвета.
[01:14:07.540 --> 01:14:09.540]  Но с деревом отрезков.
[01:14:11.540 --> 01:14:13.540]  Ну вот, сейчас будем доживать.
[01:14:13.540 --> 01:14:15.540]  Но начнем с не с цветом. Но как
[01:14:15.540 --> 01:14:17.540]  решать это деревом отрезков?
[01:14:19.540 --> 01:14:21.540]  Есть два варианта.
[01:14:21.540 --> 01:14:23.540]  Первый вариант.
[01:14:23.540 --> 01:14:25.540]  Обычно первый вариант,
[01:14:25.540 --> 01:14:27.540]  но самый классический вариант,
[01:14:27.540 --> 01:14:29.540]  который обычно все пишут. Это все-таки явное
[01:14:29.540 --> 01:14:31.540]  ДО, но со сжатием координат.
[01:14:33.540 --> 01:14:35.540]  Да, ну хорошо. Запросы офлайн.
[01:14:35.540 --> 01:14:37.540]  То есть там понятно, что
[01:14:37.540 --> 01:14:39.540]  на самом деле, заметим, что запросы делят у нас
[01:14:39.540 --> 01:14:41.540]  там забор на
[01:14:41.540 --> 01:14:43.540]  два на десять пятый секций, каждый из
[01:14:43.540 --> 01:14:45.540]  которых покрашен целиком в один и тот же цвет,
[01:14:45.540 --> 01:14:47.540]  поэтому можно присваивать прямо на подотрезке.
[01:14:47.540 --> 01:14:49.540]  Просто там, когда вы находите длину,
[01:14:49.540 --> 01:14:51.540]  то ищите не длину отрезка, а взвешенную длину отрезка.
[01:14:51.540 --> 01:14:53.540]  Это понятно.
[01:14:53.540 --> 01:14:55.540]  Вот. Ну как же делать сжатие координат,
[01:14:55.540 --> 01:14:57.540]  мы с вами в прошлый раз обсуждали, поэтому
[01:14:57.540 --> 01:14:59.540]  не будем повторяться. Вот.
[01:14:59.540 --> 01:15:01.540]  Но вторая версия,
[01:15:01.540 --> 01:15:03.540]  это, конечно, знаменитое,
[01:15:03.540 --> 01:15:05.540]  неявное дерево отрезков.
[01:15:05.540 --> 01:15:07.540]  То есть, оказывается, можно забабахать
[01:15:07.540 --> 01:15:09.540]  дерево отрезков на десять девятый.
[01:15:09.540 --> 01:15:11.540]  В чем там идея?
[01:15:11.540 --> 01:15:13.540]  Да, конечно, дерево отрезков
[01:15:13.540 --> 01:15:15.540]  на десять девятый требует, конечно, два на
[01:15:15.540 --> 01:15:17.540]  десять девятой парити.
[01:15:17.540 --> 01:15:19.540]  Но тут у нас, оказывается,
[01:15:19.540 --> 01:15:21.540]  неожиданная идея. У нас есть
[01:15:21.540 --> 01:15:23.540]  отложенная операция. Отложенная операция,
[01:15:23.540 --> 01:15:25.540]  типа...
[01:15:25.540 --> 01:15:27.540]  Здесь уже такой апгрейд. Раньше мы говорили,
[01:15:27.540 --> 01:15:29.540]  что что такое отложенная операция?
[01:15:29.540 --> 01:15:31.540]  Эль говорит, так, дорогой смотритель,
[01:15:31.540 --> 01:15:33.540]  вот тебе информация,
[01:15:33.540 --> 01:15:35.540]  но передай ее детям.
[01:15:35.540 --> 01:15:37.540]  Смотрит, говорит,
[01:15:37.540 --> 01:15:39.540]  и ничего не делает.
[01:15:39.540 --> 01:15:41.540]  Пока не поймет, что вы действительно
[01:15:41.540 --> 01:15:43.540]  хотите к детям. Вы прям хотите навестить
[01:15:43.540 --> 01:15:45.540]  детей? Да нет, ты мне полную сумму скажи.
[01:15:45.540 --> 01:15:47.540]  Вот она. А ну я пошел.
[01:15:47.540 --> 01:15:49.540]  Чего детей дергать?
[01:15:49.540 --> 01:15:51.540]  А если вы хотите к детям,
[01:15:51.540 --> 01:15:53.540]  то он говорит, сейчас,
[01:15:53.540 --> 01:15:55.540]  одну минуточку,
[01:15:55.540 --> 01:15:57.540]  и да, одну минуточку,
[01:15:57.540 --> 01:15:59.540]  и быстро передает информацию детям,
[01:15:59.540 --> 01:16:01.540]  потом говорит, вперед.
[01:16:01.540 --> 01:16:03.540]  Так у нас говорилось классическое дерево отрезков.
[01:16:03.540 --> 01:16:05.540]  Да, кто-то уже догадался.
[01:16:05.540 --> 01:16:07.540]  Что такое неявное дерево отрезков?
[01:16:07.540 --> 01:16:09.540]  Где мы откладываем не просто
[01:16:09.540 --> 01:16:11.540]  передачу, то есть отложенность
[01:16:11.540 --> 01:16:13.540]  является не только передачей информации
[01:16:13.540 --> 01:16:15.540]  детям, а и само создание их.
[01:16:23.540 --> 01:16:25.540]  Ты хочешь к моим детям?
[01:16:25.540 --> 01:16:27.540]  Да.
[01:16:33.540 --> 01:16:35.540]  Мы все еще делаем
[01:16:35.540 --> 01:16:37.540]  это всего от единицы, естественно.
[01:16:37.540 --> 01:16:39.540]  Да.
[01:16:41.540 --> 01:16:43.540]  Но тем не менее.
[01:16:43.540 --> 01:16:45.540]  Правда, более того, некоторые оптимизаторы
[01:16:45.540 --> 01:16:47.540]  ведут еще более страшную вещь.
[01:16:47.540 --> 01:16:49.540]  Потому что конкретно в этой задачи
[01:16:49.540 --> 01:16:51.540]  мы делаем только присваивание.
[01:16:55.540 --> 01:16:57.540]  В принципе, да, вопрос как бы потом,
[01:16:57.540 --> 01:16:59.540]  как восстановить ответ.
[01:16:59.540 --> 01:17:01.540]  В общем, кажется, что восстановить ответ
[01:17:01.540 --> 01:17:03.540]  надо пробежаться по всем девести в девятой доскам
[01:17:03.540 --> 01:17:05.540]  и протолкать все запросы до конца,
[01:17:05.540 --> 01:17:07.540]  но в данном случае делать это
[01:17:07.540 --> 01:17:09.540]  незачем, потому что если вы пришли в вершину,
[01:17:09.540 --> 01:17:11.540]  если вы хотите искать уже ответ,
[01:17:11.540 --> 01:17:13.540]  и вы знаете, что вот пришли в эту вершину,
[01:17:13.540 --> 01:17:15.540]  у нее есть отложенная операция, что тут все вершины
[01:17:15.540 --> 01:17:17.540]  равно 57, но тогда для детей
[01:17:17.540 --> 01:17:19.540]  бегать не надо, просто говорим, что тут все равно 57,
[01:17:19.540 --> 01:17:21.540]  добавляем к ответу.
[01:17:21.540 --> 01:17:23.540]  Это на самом деле
[01:17:23.540 --> 01:17:25.540]  вкупе с желанием сэкономить память,
[01:17:27.540 --> 01:17:29.540]  ну вот, то есть, ну или там, я не знаю,
[01:17:29.540 --> 01:17:31.540]  места в школах,
[01:17:31.540 --> 01:17:33.540]  то есть на самом деле
[01:17:33.540 --> 01:17:35.540]  это очень сильно соблазняет делать
[01:17:35.540 --> 01:17:37.540]  еще одну операцию.
[01:17:37.540 --> 01:17:39.540]  То есть операцию, то есть на самом деле замечаем,
[01:17:39.540 --> 01:17:41.540]  что если мы в вершину пришла
[01:17:41.540 --> 01:17:43.540]  вот такая информация,
[01:17:43.540 --> 01:17:45.540]  то в принципе заметим, что
[01:17:45.540 --> 01:17:47.540]  раз мы можем за вот единицы
[01:17:47.540 --> 01:17:49.540]  создать детей, то в принципе можно их и убить.
[01:17:51.540 --> 01:17:53.540]  То есть то, что у нас там находится ниже,
[01:17:53.540 --> 01:17:55.540]  там можно в принципе ликвидировать.
[01:17:57.540 --> 01:17:59.540]  Нет, ну как сказать, чем отличается
[01:17:59.540 --> 01:18:01.540]  C++ от Java? В C++ вам придется
[01:18:01.540 --> 01:18:03.540]  делать это как-то явно.
[01:18:05.540 --> 01:18:07.540]  Вот, как бы в Java, вот Java,
[01:18:07.540 --> 01:18:09.540]  это как бы, то есть Java
[01:18:09.540 --> 01:18:11.540]  это современный, только цивилизованный,
[01:18:11.540 --> 01:18:13.540]  красивый язык, в котором
[01:18:13.540 --> 01:18:15.540]  как бы никто не убивает детей.
[01:18:15.540 --> 01:18:17.540]  За вас это делает как бы школлектор.
[01:18:21.540 --> 01:18:23.540]  Вот.
[01:18:23.540 --> 01:18:25.540]  То есть он как бы сам, нет, вы просто говорите,
[01:18:25.540 --> 01:18:27.540]  что нет, я считаю, что у меня детей нет,
[01:18:27.540 --> 01:18:29.540]  ну вот, ну а как бы стоящий в углу
[01:18:29.540 --> 01:18:31.540]  школлектор говорит, и в какой-то момент
[01:18:31.540 --> 01:18:33.540]  начинает...
[01:18:35.540 --> 01:18:37.540]  Да, примерно так, да, в C++ все в явном
[01:18:37.540 --> 01:18:39.540]  виде происходит, то есть вы как бы в явном
[01:18:39.540 --> 01:18:41.540]  виде говорите, что как бы детей
[01:18:41.540 --> 01:18:43.540]  надо убить, а он
[01:18:43.540 --> 01:18:45.540]  что такое убить детей? Прям
[01:18:45.540 --> 01:18:47.540]  инструкция, так, так,
[01:18:47.540 --> 01:18:49.540]  что ты хочешь, так, что,
[01:18:49.540 --> 01:18:51.540]  пришел ты меня, пришел убить, да, но так, одну
[01:18:51.540 --> 01:18:53.540]  минуточку, у тебя есть дети, да,
[01:18:53.540 --> 01:18:55.540]  так, дай мне на скилке, ну вот они,
[01:18:55.540 --> 01:18:57.540]  все, спасибо. Так,
[01:18:57.540 --> 01:18:59.540]  и пошел рекурсивно.
[01:19:05.540 --> 01:19:07.540]  Но у нас, ну не совсем так, на самом деле
[01:19:07.540 --> 01:19:09.540]  заметим, что убивать он будет,
[01:19:09.540 --> 01:19:11.540]  заметим, что гарвыч-коллектор, что C++
[01:19:11.540 --> 01:19:13.540]  убьют не больше детей, чем создали.
[01:19:13.540 --> 01:19:15.540]  Да, так что
[01:19:15.540 --> 01:19:17.540]  тут в этом смысле, нет, гарвыч-коллектор, конечно,
[01:19:17.540 --> 01:19:19.540]  он там, конечно, более умный, потому что он думает,
[01:19:19.540 --> 01:19:21.540]  что дети могут там как-то и зациклиться там,
[01:19:21.540 --> 01:19:23.540]  вот это все, поэтому там, он как-то там
[01:19:23.540 --> 01:19:25.540]  аккуратно это все, то есть как-то там аккуратно
[01:19:25.540 --> 01:19:27.540]  это делает, поэтому тут вот вопрос.
[01:19:33.540 --> 01:19:35.540]  А у нас есть модифицизация, да?
[01:19:39.540 --> 01:19:41.540]  Ну, погодите, ладно, так, ну ладно,
[01:19:41.540 --> 01:19:43.540]  как всегда, конечно, да,
[01:19:43.540 --> 01:19:45.540]  получилось немножко черного юмора, но хотя да,
[01:19:45.540 --> 01:19:47.540]  хотя да, когда
[01:19:47.540 --> 01:19:49.540]  вот,
[01:19:49.540 --> 01:19:51.540]  лезли там, хотя страшные люди, программисты,
[01:19:51.540 --> 01:19:53.540]  конечно, им там это, что создать ребенка,
[01:19:53.540 --> 01:19:55.540]  убить ребенка, это все, да,
[01:19:55.540 --> 01:19:57.540]  то есть да, чем отличается
[01:19:57.540 --> 01:19:59.540]  программист от физика,
[01:19:59.540 --> 01:20:01.540]  да, если программисту надо там
[01:20:01.540 --> 01:20:03.540]  это, назвать лишние 57
[01:20:03.540 --> 01:20:05.540]  раз там это, создать ребенка и убить, то, ну,
[01:20:05.540 --> 01:20:07.540]  в принципе, можно и это.
[01:20:09.540 --> 01:20:11.540]  Ну вот, ну ладно, так, все.
[01:20:13.540 --> 01:20:15.540]  Нет, это второй, это
[01:20:15.540 --> 01:20:17.540]  неявное дерево отрезку.
[01:20:17.540 --> 01:20:19.540]  Такое вот.
[01:20:19.540 --> 01:20:21.540]  Ну, на самом деле понятно, что, конечно, для оптимизации,
[01:20:21.540 --> 01:20:23.540]  конечно, лишний раз убивать детей не надо,
[01:20:23.540 --> 01:20:25.540]  то есть как бы
[01:20:25.540 --> 01:20:27.540]  нод.
[01:20:31.540 --> 01:20:33.540]  Нет, но оно сколько будет жрать, ну, скажем так,
[01:20:33.540 --> 01:20:35.540]  каждый запрос в нем будет работать
[01:20:35.540 --> 01:20:37.540]  за О от лог Н вот того
[01:20:37.540 --> 01:20:39.540]  самого большого Н.
[01:20:39.540 --> 01:20:41.540]  Да, то есть и по времени, и по памяти
[01:20:41.540 --> 01:20:43.540]  это будет чуть больше, чем обычные дерево отрезков,
[01:20:43.540 --> 01:20:45.540]  поэтому тут, конечно, всегда есть риски.
[01:20:45.540 --> 01:20:47.540]  Вот, но тем не менее,
[01:20:47.540 --> 01:20:49.540]  вот такой метод тоже есть.
[01:20:49.540 --> 01:20:51.540]  Ну, у нас,
[01:20:51.540 --> 01:20:53.540]  в принципе, у нас массив длины 10-9 был.
[01:20:53.540 --> 01:20:55.540]  Вот, и как бы запрос там будет
[01:20:55.540 --> 01:20:57.540]  за, вот, за лог
[01:20:57.540 --> 01:20:59.540]  именно вот этого 10-9.
[01:20:59.540 --> 01:21:01.540]  Не за 10-5, а 10-9.
[01:21:03.540 --> 01:21:05.540]  Это как бы просто по константе будет
[01:21:05.540 --> 01:21:07.540]  чуть больше.
[01:21:07.540 --> 01:21:09.540]  Вот.
[01:21:09.540 --> 01:21:11.540]  Но, на самом деле, мы можем заметить,
[01:21:11.540 --> 01:21:13.540]  что, на самом деле,
[01:21:13.540 --> 01:21:15.540]  так, а, вот она, господи.
[01:21:15.540 --> 01:21:17.540]  Вот. Ну, есть, оказывается,
[01:21:17.540 --> 01:21:19.540]  два принципа для других метода,
[01:21:19.540 --> 01:21:21.540]  которые вообще не завязаны на
[01:21:21.540 --> 01:21:23.540]  дерево отрезков.
[01:21:23.540 --> 01:21:25.540]  Потому что, ну, тут зависит от того,
[01:21:25.540 --> 01:21:27.540]  вообще, в каком контексте
[01:21:27.540 --> 01:21:29.540]  вы вообще с этой задачей впервые столкнулись.
[01:21:29.540 --> 01:21:31.540]  Потому что многие так скажут, что, на самом деле, задача решается
[01:21:31.540 --> 01:21:33.540]  с конлайном и с сетом.
[01:21:35.540 --> 01:21:37.540]  Нужен.
[01:21:37.540 --> 01:21:39.540]  Потому что идея такая.
[01:21:39.540 --> 01:21:41.540]  Ну, потому что, как мы обычно решаем задачи,
[01:21:41.540 --> 01:21:43.540]  когда у нас есть какие-то отрезки напрямую, да?
[01:21:43.540 --> 01:21:45.540]  Вот, например, у нас есть классическая задача.
[01:21:45.540 --> 01:21:47.540]  Дано n отрезочков.
[01:21:47.540 --> 01:21:49.540]  Найдите, пожалуйста, точку, которая покрыта
[01:21:49.540 --> 01:21:51.540]  наибольшим количеством отрезочков, да?
[01:21:51.540 --> 01:21:53.540]  Как мы такую задачу решаем?
[01:21:53.540 --> 01:21:55.540]  Мы завоем, как бы,
[01:21:55.540 --> 01:21:57.540]  делаем с конлайн.
[01:21:57.540 --> 01:21:59.540]  То есть, делаем событие. То есть, идем, типа,
[01:21:59.540 --> 01:22:01.540]  слева направо и делаем событие.
[01:22:01.540 --> 01:22:03.540]  Типа, отрезок появился,
[01:22:03.540 --> 01:22:05.540]  отрезок исчез, правда? Вот это.
[01:22:05.540 --> 01:22:07.540]  Отсортировали события, да?
[01:22:07.540 --> 01:22:09.540]  Вот. Эта задача тоже так прекрасно
[01:22:09.540 --> 01:22:11.540]  решается.
[01:22:11.540 --> 01:22:13.540]  Только, идея в том, что
[01:22:13.540 --> 01:22:15.540]  только в нашем случае мы все запросы,
[01:22:15.540 --> 01:22:17.540]  которые у нас сейчас актуальны, будем хранить в сете.
[01:22:17.540 --> 01:22:19.540]  С компаратором по времени
[01:22:19.540 --> 01:22:21.540]  этого запроса.
[01:22:21.540 --> 01:22:23.540]  И когда у нас
[01:22:23.540 --> 01:22:25.540]  между любыми двумя соседними,
[01:22:25.540 --> 01:22:27.540]  когда у нас есть между любыми двумя соседними
[01:22:27.540 --> 01:22:29.540]  событиями, мы там прибавляем,
[01:22:29.540 --> 01:22:31.540]  то есть, мы там смотрим, что, так, вот у нас
[01:22:31.540 --> 01:22:33.540]  событие здесь, событие здесь. Так, значит, вот этот
[01:22:33.540 --> 01:22:35.540]  блок покрашен в один цвет. В какой?
[01:22:35.540 --> 01:22:37.540]  Ну, лезем в сет, находим последнюю покраску.
[01:22:37.540 --> 01:22:39.540]  Так вот, сейчас понятно,
[01:22:39.540 --> 01:22:41.540]  или надо как-то подробнее рассказать?
[01:22:41.540 --> 01:22:43.540]  Ну, понятно, что происходит, да?
[01:22:43.540 --> 01:22:45.540]  Хорошо.
[01:22:45.540 --> 01:22:47.540]  Вот.
[01:22:47.540 --> 01:22:49.540]  То есть, получается то же такое решение за внезапное
[01:22:49.540 --> 01:22:51.540]  НЛОГН.
[01:22:51.540 --> 01:22:53.540]  Ну ладно, не за НЛОГН,
[01:22:53.540 --> 01:22:55.540]  ладно, КУ, там сколько там?
[01:22:55.540 --> 01:22:57.540]  КУЛОКУ.
[01:22:57.540 --> 01:22:59.540]  Вот.
[01:22:59.540 --> 01:23:01.540]  КУЛОКУ. Это вот такое
[01:23:01.540 --> 01:23:03.540]  третье решение.
[01:23:03.540 --> 01:23:05.540]  Да.
[01:23:05.540 --> 01:23:07.540]  Да, вот. Но есть их четвертое,
[01:23:07.540 --> 01:23:09.540]  вообще другое решение с сетом.
[01:23:09.540 --> 01:23:11.540]  Идея заключается в том, что
[01:23:11.540 --> 01:23:13.540]  давайте тупо хранить
[01:23:13.540 --> 01:23:15.540]  сет отрезков.
[01:23:15.540 --> 01:23:17.540]  В чем? Это, кстати, даже онлайн
[01:23:17.540 --> 01:23:19.540]  решение, кстати, что интересно.
[01:23:19.540 --> 01:23:21.540]  То есть, идея такая,
[01:23:21.540 --> 01:23:23.540]  в каждый момент времени будем
[01:23:23.540 --> 01:23:25.540]  представлять наш забор
[01:23:25.540 --> 01:23:27.540]  как последовательность
[01:23:27.540 --> 01:23:29.540]  отрезков, покрашенных в один цвет.
[01:23:29.540 --> 01:23:31.540]  Вот.
[01:23:31.540 --> 01:23:33.540]  В каждом отрезке известно там,
[01:23:33.540 --> 01:23:35.540]  типа, что я иду от ЛДР и покрашен
[01:23:35.540 --> 01:23:37.540]  в цвет С.
[01:23:37.540 --> 01:23:39.540]  И давайте эти отрезки я буду
[01:23:39.540 --> 01:23:41.540]  прямо честно в явном виде хранить
[01:23:41.540 --> 01:23:43.540]  в сете с компаратором по, ну, естественно,
[01:23:43.540 --> 01:23:45.540]  Элю.
[01:23:45.540 --> 01:23:47.540]  И тогда у меня, теперь,
[01:23:47.540 --> 01:23:49.540]  как сделать теперь присваивание
[01:23:49.540 --> 01:23:51.540]  на отрезке?
[01:23:53.540 --> 01:23:55.540]  Ну вот, да.
[01:23:55.540 --> 01:23:57.540]  Ну да, давайте вот сейчас,
[01:23:57.540 --> 01:23:59.540]  да, сейчас надо просто внимательно
[01:23:59.540 --> 01:24:01.540]  тут немножко посмотреть, потому что тут, конечно,
[01:24:01.540 --> 01:24:03.540]  есть интересные моменты.
[01:24:03.540 --> 01:24:05.540]  Но если от нас теперь просят
[01:24:05.540 --> 01:24:07.540]  сделать присваивание на вот таком
[01:24:07.540 --> 01:24:09.540]  каком-то, допустим, под отрезке.
[01:24:09.540 --> 01:24:11.540]  Что нам нужно тогда сделать?
[01:24:11.540 --> 01:24:13.540]  Ну, нет.
[01:24:13.540 --> 01:24:15.540]  Не совсем. Начнем со следующего.
[01:24:15.540 --> 01:24:17.540]  Начнем с того, что вот эти вот отрезки
[01:24:17.540 --> 01:24:19.540]  на краю давайте посплитим.
[01:24:19.540 --> 01:24:21.540]  Ну, в принципе, мы даже
[01:24:21.540 --> 01:24:23.540]  не будем от себя требовать, чтобы у нас
[01:24:23.540 --> 01:24:25.540]  любые два соседних отрезка были
[01:24:25.540 --> 01:24:27.540]  покрашены в разные цвета.
[01:24:27.540 --> 01:24:29.540]  Вот. То есть мы просто вот попили.
[01:24:29.540 --> 01:24:31.540]  И получается,
[01:24:31.540 --> 01:24:33.540]  сведем задачу к тому, что наш запрос
[01:24:33.540 --> 01:24:35.540]  покрывает в точности вот
[01:24:35.540 --> 01:24:37.540]  целые отрезки.
[01:24:37.540 --> 01:24:39.540]  Натальич, впереди я такая.
[01:24:39.540 --> 01:24:41.540]  Давайте прогуляемся за о от количества
[01:24:41.540 --> 01:24:43.540]  вот этих отрезков за логорифом,
[01:24:43.540 --> 01:24:45.540]  которые внутрь попали,
[01:24:45.540 --> 01:24:47.540]  и тупо их из сета выпилим.
[01:24:49.540 --> 01:24:51.540]  Там каждый за логорифом.
[01:24:51.540 --> 01:24:53.540]  А вместо них
[01:24:53.540 --> 01:24:55.540]  вставим в этот сет
[01:24:55.540 --> 01:24:57.540]  один новый отрезок, покрашенный
[01:24:57.540 --> 01:24:59.540]  в этот сет.
[01:24:59.540 --> 01:25:01.540]  Это решение, конечно,
[01:25:01.540 --> 01:25:03.540]  амортизированное, потому что каждый
[01:25:03.540 --> 01:25:05.540]  конкретный запрос работает не за логорифом,
[01:25:05.540 --> 01:25:07.540]  а за логорифом умножить
[01:25:07.540 --> 01:25:09.540]  на сколько отрезков
[01:25:09.540 --> 01:25:11.540]  затронута запрос.
[01:25:11.540 --> 01:25:13.540]  Вот.
[01:25:13.540 --> 01:25:15.540]  Но с другой стороны
[01:25:15.540 --> 01:25:17.540]  заметим следующее, что
[01:25:17.540 --> 01:25:19.540]  убиваем на отрезков, как всегда,
[01:25:19.540 --> 01:25:21.540]  не более, чем создаем.
[01:25:21.540 --> 01:25:23.540]  Но обратите внимание,
[01:25:23.540 --> 01:25:25.540]  новых отрезков на каждом запросе
[01:25:25.540 --> 01:25:27.540]  мы создаем не более, чем
[01:25:27.540 --> 01:25:29.540]  ну там сколько.
[01:25:29.540 --> 01:25:31.540]  Ну да, в данном случае один.
[01:25:33.540 --> 01:25:35.540]  Нет, ладно, вру, не совсем так.
[01:25:35.540 --> 01:25:37.540]  Может быть три.
[01:25:37.540 --> 01:25:39.540]  Ну ладно, может быть два.
[01:25:39.540 --> 01:25:41.540]  Потому что есть такой случай,
[01:25:41.540 --> 01:25:43.540]  допустим, у тебя запрос попал внутрь
[01:25:43.540 --> 01:25:45.540]  какого-то отрезка, тогда тебе придется
[01:25:45.540 --> 01:25:47.540]  вместо этого одного отрезка сделать три,
[01:25:47.540 --> 01:25:49.540]  то есть плюс два.
[01:25:49.540 --> 01:25:51.540]  Так что плюс два.
[01:25:51.540 --> 01:25:53.540]  Ну как бы от единицы получается.
[01:25:53.540 --> 01:25:55.540]  В самом начале же так и будет у тебя.
[01:25:55.540 --> 01:25:57.540]  Как инициализировать такой сет?
[01:25:57.540 --> 01:25:59.540]  Понятно, как у вас есть один отрезок
[01:25:59.540 --> 01:26:01.540]  на нулевой цвет.
[01:26:01.540 --> 01:26:03.540]  Вот.
[01:26:03.540 --> 01:26:05.540]  Но получается, тем не менее,
[01:26:05.540 --> 01:26:07.540]  вот такая амортизация. Создаем мы получается
[01:26:07.540 --> 01:26:09.540]  отрезков не более, чем q,
[01:26:09.540 --> 01:26:11.540]  то получается, что
[01:26:11.540 --> 01:26:13.540]  суммарное время работы q log n,
[01:26:13.540 --> 01:26:15.540]  правда она амортизирована, но зато онлайн,
[01:26:15.540 --> 01:26:17.540]  обратите внимание.
[01:26:17.540 --> 01:26:19.540]  Ну то есть не идеальный онлайн,
[01:26:19.540 --> 01:26:21.540]  то есть как бы амортизированный, но прям вот онлайн,
[01:26:21.540 --> 01:26:23.540]  то есть как бы мы здесь вообще никак
[01:26:23.540 --> 01:26:25.540]  заранее не знаем,
[01:26:25.540 --> 01:26:27.540]  какие запросы будут.
[01:26:27.540 --> 01:26:29.540]  То есть вот такая вот, оказывается, тоже
[01:26:29.540 --> 01:26:31.540]  неожиданная технология, что оказывается,
[01:26:31.540 --> 01:26:33.540]  в такой задаче, казалось бы, надо делать присваивание
[01:26:33.540 --> 01:26:35.540]  еще и на 10-9, но выясняется, что
[01:26:35.540 --> 01:26:37.540]  сет вам прекрасно в этом помогает.
[01:26:39.540 --> 01:26:41.540]  Вот.
[01:26:41.540 --> 01:26:43.540]  Так вот, многие из этих технологий,
[01:26:43.540 --> 01:26:45.540]  на самом деле, нам сейчас неожиданно помогут
[01:26:45.540 --> 01:26:47.540]  решить просто весьма
[01:26:47.540 --> 01:26:49.540]  достаточно потрясающую задачу.
[01:26:51.540 --> 01:26:53.540]  То есть задача такая, дан массив,
[01:26:53.540 --> 01:26:55.540]  в чем нам, нам еще даже упрощают
[01:26:55.540 --> 01:26:57.540]  зачем-то задачу,
[01:26:57.540 --> 01:26:59.540]  говорят, что этот массив является перестановкой.
[01:27:01.540 --> 01:27:03.540]  И у вас есть
[01:27:05.540 --> 01:27:07.540]  два запроса. Значит, дан массив,
[01:27:07.540 --> 01:27:09.540]  он перестановка, хотя
[01:27:09.540 --> 01:27:11.540]  на самом деле не так принципиально, но не важно.
[01:27:11.540 --> 01:27:13.540]  И надо делать два типа
[01:27:13.540 --> 01:27:15.540]  запроса, первый тип запроса.
[01:27:15.540 --> 01:27:17.540]  Сумма
[01:27:17.540 --> 01:27:19.540]  на подотреске.
[01:27:23.540 --> 01:27:25.540]  Хотя, сейчас,
[01:27:25.540 --> 01:27:27.540]  надо вспомнить какие там конкретные задачи.
[01:27:27.540 --> 01:27:29.540]  Хотя, нет, там все что угодно,
[01:27:29.540 --> 01:27:31.540]  можно сумму сделать, можно.
[01:27:31.540 --> 01:27:33.540]  Хотя, знаете, как мы сделаем?
[01:27:33.540 --> 01:27:35.540]  Мы сделаем немножко по-другому.
[01:27:35.540 --> 01:27:37.540]  Сумму потом, наверное, тоже накрутим.
[01:27:37.540 --> 01:27:39.540]  Но давайте
[01:27:39.540 --> 01:27:41.540]  будем делать так.
[01:27:41.540 --> 01:27:43.540]  Нет, ладно, давайте сумму.
[01:27:43.540 --> 01:27:45.540]  Так, хорошо.
[01:27:45.540 --> 01:27:47.540]  Давайте сумму на отрезке, но можно сумму,
[01:27:47.540 --> 01:27:49.540]  там, по-моему, вообще был едва ли не дед
[01:27:49.540 --> 01:27:51.540]  от поза, хотя можно и сумму.
[01:27:51.540 --> 01:27:53.540]  Ну ладно, смешнее
[01:27:53.540 --> 01:27:55.540]  другая операция.
[01:28:01.540 --> 01:28:03.540]  Да, возьмите
[01:28:03.540 --> 01:28:05.540]  подотресок и отсортируйте его, пожалуйста.
[01:28:11.540 --> 01:28:13.540]  Чего?
[01:28:13.540 --> 01:28:15.540]  Нет, еще круче. Гед
[01:28:15.540 --> 01:28:17.540]  это, скажи, пожалуйста, что на позиции
[01:28:17.540 --> 01:28:19.540]  пост находится.
[01:28:19.540 --> 01:28:21.540]  Ну, хотя потом
[01:28:21.540 --> 01:28:23.540]  можно и сумму сделать.
[01:28:23.540 --> 01:28:25.540]  Вот такая вот.
[01:28:25.540 --> 01:28:27.540]  То есть, на самом деле,
[01:28:27.540 --> 01:28:29.540]  вот такая вот.
[01:28:29.540 --> 01:28:31.540]  Чего?
[01:28:45.540 --> 01:28:47.540]  Только
[01:28:47.540 --> 01:28:49.540]  нет, смотрите.
[01:28:49.540 --> 01:28:51.540]  Сейчас скажу.
[01:28:51.540 --> 01:28:53.540]  Вот вы сказали, что это интересная
[01:28:53.540 --> 01:28:55.540]  идея. То есть, давайте
[01:28:55.540 --> 01:28:57.540]  хранить отсортированные массивы вот
[01:28:57.540 --> 01:28:59.540]  так. И в каждом
[01:28:59.540 --> 01:29:01.540]  из них там сами элементы
[01:29:01.540 --> 01:29:03.540]  хранить, ну я не знаю, в каком-нибудь там
[01:29:03.540 --> 01:29:05.540]  условном дикарте.
[01:29:05.540 --> 01:29:07.540]  Или там, ну вот.
[01:29:07.540 --> 01:29:09.540]  Или даже просто в сайте.
[01:29:09.540 --> 01:29:11.540]  Потому что когда там
[01:29:11.540 --> 01:29:13.540]  ну вот.
[01:29:13.540 --> 01:29:15.540]  И казалось бы, когда к нам приходит запрос, то давайте
[01:29:15.540 --> 01:29:17.540]  просто несколько отрезков объединим, как в переливайке,
[01:29:17.540 --> 01:29:19.540]  подливая меньше в больше.
[01:29:19.540 --> 01:29:21.540]  Да, это бы прекрасно
[01:29:21.540 --> 01:29:23.540]  работало, если бы не одна мелкая
[01:29:23.540 --> 01:29:25.540]  оговорка.
[01:29:25.540 --> 01:29:27.540]  Потому что, к сожалению,
[01:29:27.540 --> 01:29:29.540]  если бы надо было только сливать сеты,
[01:29:29.540 --> 01:29:31.540]  это, конечно, шикарно бы работало.
[01:29:31.540 --> 01:29:33.540]  Ну вот.
[01:29:33.540 --> 01:29:35.540]  Гед, оно
[01:29:35.540 --> 01:29:37.540]  делается так, значит, сразу
[01:29:37.540 --> 01:29:39.540]  на уровне технологии. То есть, вот эти вот сами
[01:29:39.540 --> 01:29:41.540]  по себе отрезки, то есть, не только сеты храним,
[01:29:41.540 --> 01:29:43.540]  да, последствием сетов, а храним
[01:29:43.540 --> 01:29:45.540]  сами по себе эти отрезки, как отрезки,
[01:29:45.540 --> 01:29:47.540]  в той же самой дикартячке.
[01:29:47.540 --> 01:29:49.540]  То есть, там
[01:29:49.540 --> 01:29:51.540]  храним дикартячки, в каждой отрезке
[01:29:51.540 --> 01:29:53.540]  храним там L, R и там указатель
[01:29:53.540 --> 01:29:55.540]  на саму дикартячку.
[01:29:55.540 --> 01:29:57.540]  Вот. Поэтому, в принципе, после
[01:29:57.540 --> 01:29:59.540]  этого гед-отпоз делается действительно несложно.
[01:30:01.540 --> 01:30:03.540]  Нет, ну почему?
[01:30:03.540 --> 01:30:05.540]  Ну можно даже не две дикартячки,
[01:30:05.540 --> 01:30:07.540]  то есть, есть как бы
[01:30:07.540 --> 01:30:09.540]  ну как бы есть дикартячка поверх,
[01:30:09.540 --> 01:30:11.540]  которая, ну вот, и как бы,
[01:30:11.540 --> 01:30:13.540]  то есть, есть дикартячки, которые хранят элементы,
[01:30:13.540 --> 01:30:15.540]  просто по сути, по сути, ордеры сет
[01:30:15.540 --> 01:30:17.540]  такое, да, то есть, есть ордеры сеты, а есть дикартячка
[01:30:17.540 --> 01:30:19.540]  поверх их.
[01:30:19.540 --> 01:30:21.540]  Чего?
[01:30:21.540 --> 01:30:23.540]  Ну, для того, чтобы вот искать, где
[01:30:23.540 --> 01:30:25.540]  посовый элемент находится.
[01:30:27.540 --> 01:30:29.540]  Каким бинпоискам? Вы же, это же не
[01:30:29.540 --> 01:30:31.540]  массив же, они не фиксированы длинной, он же меняется,
[01:30:31.540 --> 01:30:33.540]  поэтому вам эти отрезки надо в каком-то, где-то еще
[01:30:33.540 --> 01:30:35.540]  хранить. А, ну
[01:30:35.540 --> 01:30:37.540]  хотя ладно, если вы в явном, а, ну да-да-да,
[01:30:37.540 --> 01:30:39.540]  если вы в явном виде или охраните, в общем-то, можно и
[01:30:39.540 --> 01:30:41.540]  в сете хранить, да, не проблема.
[01:30:41.540 --> 01:30:43.540]  Да, отрезки можно и в сете хранить, да-да-да-да-да-да.
[01:30:43.540 --> 01:30:45.540]  Согласен, да,
[01:30:45.540 --> 01:30:47.540]  дикартячка поверх не нужна,
[01:30:47.540 --> 01:30:49.540]  нужна только сет. Вот, да,
[01:30:49.540 --> 01:30:51.540]  это кайфово бы работало, если бы
[01:30:51.540 --> 01:30:53.540]  не одно но.
[01:30:53.540 --> 01:30:55.540]  Но называется, надо, к сожалению, эти
[01:30:55.540 --> 01:30:57.540]  дикартячки не только объединять,
[01:30:57.540 --> 01:30:59.540]  но и
[01:30:59.540 --> 01:31:01.540]  пилить, к сожалению.
[01:31:03.540 --> 01:31:05.540]  Чего? Кого мы будем
[01:31:05.540 --> 01:31:07.540]  удалять?
[01:31:09.540 --> 01:31:11.540]  Можем сказать, что
[01:31:11.540 --> 01:31:13.540]  мы удаляем
[01:31:13.540 --> 01:31:15.540]  этот отрезок и вместо него создаем чуть
[01:31:15.540 --> 01:31:17.540]  меньше. И что?
[01:31:17.540 --> 01:31:19.540]  Нет, ну как бы сами по себе отрезки
[01:31:19.540 --> 01:31:21.540]  мы создадим быстро, это да.
[01:31:21.540 --> 01:31:23.540]  Но проблема в том, что в данном случае
[01:31:23.540 --> 01:31:25.540]  сплит вот этого отрезка
[01:31:25.540 --> 01:31:27.540]  будет подразумевать собой и
[01:31:27.540 --> 01:31:29.540]  сплит в этом,
[01:31:29.540 --> 01:31:31.540]  сплит в вашем дикарте, ну или
[01:31:31.540 --> 01:31:33.540]  вот сплит вот этого сета, где вы там
[01:31:33.540 --> 01:31:35.540]  реальные элементы хранили.
[01:31:35.540 --> 01:31:37.540]  Чего?
[01:31:37.540 --> 01:31:39.540]  Ну, тогда
[01:31:39.540 --> 01:31:41.540]  перестает
[01:31:41.540 --> 01:31:43.540]  работать оценка переливайки.
[01:31:45.540 --> 01:31:47.540]  Так,
[01:31:47.540 --> 01:31:49.540]  ну вот это уже да, но тут есть маленькая
[01:31:49.540 --> 01:31:51.540]  проблема, если не заморачиваться.
[01:31:51.540 --> 01:31:53.540]  Редкий случай, когда дикартово дерево
[01:31:53.540 --> 01:31:55.540]  начинает обызровать дикартячки.
[01:31:57.540 --> 01:31:59.540]  Но когда?
[01:31:59.540 --> 01:32:01.540]  Да, потому что есть
[01:32:01.540 --> 01:32:03.540]  на самом деле две задачи, в которых
[01:32:03.540 --> 01:32:05.540]  как бы без дерева отрезка вы не обойдетесь.
[01:32:05.540 --> 01:32:07.540]  Да, первая задача была
[01:32:07.540 --> 01:32:09.540]  кстати тоже на перестановку.
[01:32:09.540 --> 01:32:11.540]  Там задача была что-то типа
[01:32:11.540 --> 01:32:13.540]  знаете задача,
[01:32:13.540 --> 01:32:15.540]  дана перестановка, и вам нужно делать
[01:32:15.540 --> 01:32:17.540]  в ней свапы. После каждого свапа надо
[01:32:17.540 --> 01:32:19.540]  найти количество инверсий в перестановке.
[01:32:21.540 --> 01:32:23.540]  Вот я не знаю,
[01:32:23.540 --> 01:32:25.540]  как решать эту задачу без дерева отрезков.
[01:32:25.540 --> 01:32:27.540]  Точнее без дерева, ну вот.
[01:32:27.540 --> 01:32:29.540]  А с деревом отрезков, пожалуйста.
[01:32:29.540 --> 01:32:31.540]  Делаем дерево отрезков, где на каждом
[01:32:31.540 --> 01:32:33.540]  подотреске храним дикартячку из всех элементов,
[01:32:33.540 --> 01:32:35.540]  которые там лежат.
[01:32:35.540 --> 01:32:37.540]  И тогда с помощью этой штуки,
[01:32:37.540 --> 01:32:39.540]  когда вы делаете свапы, то вам
[01:32:39.540 --> 01:32:41.540]  по сути надо посмотреть
[01:32:41.540 --> 01:32:43.540]  все элементы между ними свапаемыми
[01:32:43.540 --> 01:32:45.540]  и посмотреть, сколько из них попадают
[01:32:45.540 --> 01:32:47.540]  по значению между ними.
[01:32:47.540 --> 01:32:49.540]  Получается, находите логарифм дикартячек,
[01:32:49.540 --> 01:32:51.540]  в которых вы это все находите.
[01:32:53.540 --> 01:32:55.540]  Как всегда я какие-то вещи
[01:32:55.540 --> 01:32:57.540]  быстро рассказываю,
[01:32:57.540 --> 01:32:59.540]  может быть какие-то вещи надо
[01:32:59.540 --> 01:33:01.540]  просто помедленнее рассказать.
[01:33:01.540 --> 01:33:03.540]  А то нет, понятно, что есть умные люди,
[01:33:03.540 --> 01:33:05.540]  которые уже поняли все, что я скажу
[01:33:05.540 --> 01:33:07.540]  в ближайшие полтора часа.
[01:33:07.540 --> 01:33:09.540]  Но если это к вам не относится,
[01:33:09.540 --> 01:33:11.540]  то лучше меня тормозить немножко.
[01:33:15.540 --> 01:33:17.540]  На какие запросы?
[01:33:21.540 --> 01:33:23.540]  Да, мы храним дерево отрезков,
[01:33:23.540 --> 01:33:25.540]  но как отвечаем на запросы?
[01:33:25.540 --> 01:33:27.540]  Давайте думать.
[01:33:27.540 --> 01:33:29.540]  Вот у нас жили-были
[01:33:29.540 --> 01:33:31.540]  элементы x и y, которые находятся
[01:33:31.540 --> 01:33:33.540]  на позиции LR.
[01:33:33.540 --> 01:33:35.540]  Пока предположим, что x меньше y.
[01:33:35.540 --> 01:33:37.540]  Тогда смотрите,
[01:33:37.540 --> 01:33:39.540]  как меняется количество инверсий.
[01:33:41.540 --> 01:33:43.540]  Давайте подумаем. Заметим так.
[01:33:43.540 --> 01:33:45.540]  Во-первых, появляется плюс одна инверсия
[01:33:45.540 --> 01:33:47.540]  от самих y и x.
[01:33:47.540 --> 01:33:49.540]  Теперь заметим, что что еще меняется?
[01:33:49.540 --> 01:33:51.540]  Заметим, что вот эти элементы
[01:33:51.540 --> 01:33:53.540]  сами по себе на запросы
[01:33:53.540 --> 01:33:55.540]  никак не влияют, потому что
[01:33:55.540 --> 01:33:57.540]  инверсии с ними никак не поменялись.
[01:33:57.540 --> 01:33:59.540]  А что происходит между ними?
[01:33:59.540 --> 01:34:01.540]  Если элемент меньше x и y,
[01:34:01.540 --> 01:34:03.540]  то он создавал инверсию
[01:34:03.540 --> 01:34:05.540]  с x И не создавал
[01:34:05.540 --> 01:34:07.540]  инверсию с y.
[01:34:15.540 --> 01:34:17.540]  Если элемент больше y, то же самое.
[01:34:17.540 --> 01:34:19.540]  А если он по значению меньше
[01:34:19.540 --> 01:34:21.540]  от x до y,
[01:34:21.540 --> 01:34:23.540]  то, получается, он ни с кем
[01:34:23.540 --> 01:34:25.540]  из них не создавал инверсию,
[01:34:25.540 --> 01:34:32.420]  две инверсии создаст. То есть получается количество инверсий увеличится на один
[01:34:32.420 --> 01:34:36.580]  плюс два умножить, насколько на этом подотреске находятся элементы между их
[01:34:36.580 --> 01:34:45.980]  сами игроками. Но как это найти? Но если мы храним дерево отрезков дикартячек, то есть
[01:34:45.980 --> 01:34:49.700]  типа на каждом подотреске храним дикартячек у всех элементов, которые в них есть,
[01:34:49.700 --> 01:35:03.620]  то тогда получается, что мы берем этот подотрезок LR, разбиваем его на логарифом отрезков,
[01:35:03.620 --> 01:35:07.900]  в каждом из этих отрезков лезем в дикартячку и в дикартячке находим сколько элементов
[01:35:07.900 --> 01:35:15.180]  дикартячки находится между их сами игроками. Получается лог квадрат. Здесь вот именно тот
[01:35:15.180 --> 01:35:19.140]  факт, что у нас есть дерево отрезков, это с фиксированной структурой как бы позволяет
[01:35:19.140 --> 01:35:33.540]  нам гарантировать, что это лог квадрат. Внутри, ну можно дикартяч, можно ордерет сет, можно
[01:35:33.540 --> 01:35:40.540]  овель, пожалуйста. Но заметим, что как бы условно говоря, можно хранить дерево отрезков
[01:35:40.540 --> 01:35:46.660]  дикартячей, но хранить дикартяч дикартячей у вас не получится, потому что придется сплитить,
[01:35:46.660 --> 01:35:51.940]  мержить будет не тривиально. Потому что как бы, да, заметим, что как бы элементы здесь,
[01:35:51.940 --> 01:35:56.740]  это элементы отсюда, там объединенные с элементами отсюда. То есть на каждом
[01:35:56.740 --> 01:36:02.980]  спите мерже это делать будет больно. Вот, а с дерево отрезком будет как-то надежнее.
[01:36:02.980 --> 01:36:10.100]  Вот, это вот такое. Значит, это вот такая вот классическая задача, где вот оказывается,
[01:36:10.100 --> 01:36:14.100]  что дерево отрезков помогает. Максим, что тут, да, можно было пытаться сделать дерево
[01:36:14.100 --> 01:36:19.380]  фенвика в дикартчика, кстати. Вот, ну вот, делать то же самое, но на фенвике.
[01:36:19.380 --> 01:36:31.940]  Нет, просто надо поддерживать в онлайне количество инверсий. Здесь мы просто посчитали,
[01:36:31.940 --> 01:36:37.980]  что скажем свапом, анопами. Да, всего, конечно. Нет, всего количество инверсий на подотреске,
[01:36:38.060 --> 01:36:43.580]  конечно, там уже посложнее задача. Так вот, вернемся к задаче про сортировочку.
[01:36:43.580 --> 01:36:52.940]  Когда надо еще делать сортировочку. Там просто фишка такая. То есть идея действительно может
[01:36:52.940 --> 01:36:59.220]  быть такая, что давайте пытаться, ну как бы действительно посплитить дикартовое дерево
[01:36:59.220 --> 01:37:05.820]  действительно несложно. А вот помержить два дерева сложно. Почему сложно? Потому что выясняется,
[01:37:05.820 --> 01:37:10.500]  когда вы мержите дерево, там неверно, что у этого все значения меньше, чем вот этого. И,
[01:37:10.500 --> 01:37:16.260]  то есть, придется их как-то вот там аккуратно пересекать. Но это можно как-то сделать более
[01:37:16.260 --> 01:37:24.420]  или менее там жадно. Как можно такое мерж дикартового дерева написать? Ну, во-первых,
[01:37:24.420 --> 01:37:30.820]  там мерж, и так вот делаем мерж двух дикартовых деревьев, но не гарантируем. Считаем, что элементы
[01:37:30.820 --> 01:37:36.700]  у них перемешаны как угодно. Как тогда это можно делать? Тогда мы говорим так, у кого из них
[01:37:36.700 --> 01:37:42.940]  приоритет меньше, ну допустим, у этого. Тогда оказывается, что тут, вот тогда что надо делать?
[01:37:42.940 --> 01:37:49.620]  Объявляем вот это корнем, и тогда здесь у нас получается мерж двух левых деревьев типа вот
[01:37:49.620 --> 01:38:00.740]  этого и этого. И здесь у нас там мерж двух деревьев вот этого и этого. То есть, действительно,
[01:38:00.740 --> 01:38:05.220]  примерно вот так. Но там соговорка, что в каждый момент времени мы для каждого дерева храним,
[01:38:05.220 --> 01:38:09.660]  на каком диапазоне там изменяются элементы. Потому что, если выяснится, что надо объединить
[01:38:09.660 --> 01:38:14.300]  элементы, ну там просто, если выяснится, что там все элементы тут меньше, чем все элементы тут,
[01:38:14.300 --> 01:38:21.900]  то в принципе их тогда мержить становится сильно проще. Логично, да? Вот. То есть, это мы как-то
[01:38:21.900 --> 01:38:27.460]  учитываем и действительно. Ну и кажется, что действительно можно ввести там какой-то потенциал.
[01:38:27.460 --> 01:38:33.620]  Вот какой-то потенциал, но там утверждается так, что можно действительно ввести какой-то потенциал,
[01:38:33.620 --> 01:38:39.020]  я даже не помню, который вам покажет, что там амортизированная стоимость тогда получает
[01:38:39.020 --> 01:38:49.260]  всех таких операций. Это там то ли лог-квадрат, то ли лог-куп. Ну да. Ну потому что скажет,
[01:38:49.260 --> 01:38:54.820]  но там будет фишка в том, что каждый конкретный мерж на самом деле здесь будет там. Каждый
[01:38:54.820 --> 01:39:01.900]  конкретный мерж будет работать задолго, естественно, да? Ну понятно, что если вы там 1, 3, 5, 7, 9 мержите с 24, 8, 6, 8, 10,
[01:39:01.900 --> 01:39:08.020]  то это по-любому за линию будет. Вот. Но как бы суммарно, вот если там взять, то есть там какой-то
[01:39:08.020 --> 01:39:11.900]  потенциал, там пользующийся тем, что у нас там по количеству отрезков, по элементам в них,
[01:39:11.900 --> 01:39:16.140]  там можно там как-то показать, что там вроде то и лог-квадрат, то и лог-куп, но это будет черная магия.
[01:39:16.140 --> 01:39:23.100]  Дерево отрезков тут неожиданно побеждает. Просто вместо того, чтобы делать там какие-то сливаемые
[01:39:23.100 --> 01:39:30.020]  дикотехи или да, сливаемые красночерные деревья, оказывается, нужно сделать сливаемые неявные ДОшки.
[01:39:30.020 --> 01:39:42.780]  Да, то есть идея, то есть смотрите, то есть, но идея, но вот, то есть, действительно, идея такая,
[01:39:42.780 --> 01:39:47.860]  то есть мы храним прям в явном, то есть в явном виде, то есть каждый отрезок мы храним в виде
[01:39:47.860 --> 01:39:54.660]  просто неявной ДОшки, причем неявной прям от 1 до N. Ну с той лишь разницей, что, конечно,
[01:39:54.660 --> 01:40:04.740]  не нужны отрезки, на этот раз мы реально не храним. Понятно, да? Нет, ну чего, но там просто,
[01:40:04.740 --> 01:40:13.420]  но идея будет в том, что, нет, вообразим себе следующее, что давайте искать, то есть скажем так,
[01:40:13.420 --> 01:40:19.860]  каждый сет чисел от 1 до N можно хранить в виде ДОшки, в которой там числа, которые есть, помещаем
[01:40:19.860 --> 01:40:25.540]  единичкой, остальные ноликом, да, и скажем, и на каждом подотреске храним там, скажем,
[01:40:25.540 --> 01:40:32.500]  сумму на отрезке, да, вот будем этим заниматься, только если на отрезке сумма ноль, мы его в явном
[01:40:32.500 --> 01:40:43.940]  виде не храним. Понятно, да? Чего? Ну почему, ну иногда, но если оно пустое, ну бывает пустое,
[01:40:43.940 --> 01:40:49.500]  бывает, если в нем хранится только одно число, да, тогда там, тогда это неявное дерево будет
[01:40:49.500 --> 01:40:58.020]  выглядеть как там какая-то вот такая вот цепочка, вот, если у вас там в сете одно число хранится,
[01:40:58.020 --> 01:41:08.300]  да, то есть там вот последовательность единичек, да, неявное, что важно, да, да, что важно,
[01:41:08.780 --> 01:41:17.540]  вот, и сейчас, да, то есть наша задача сейчас, то есть в принципе, да, то есть наша задача,
[01:41:17.540 --> 01:41:23.100]  то есть смотрите, то есть да, идея такая, то есть вот этот вот сет от сортированных элементов мы
[01:41:23.100 --> 01:41:30.580]  будем хранить, то есть мы будем хранить в виде вот таких вот деревьев, и тогда получается мы
[01:41:30.580 --> 01:41:40.180]  победим, если нам научиться на этих деревьях делать какие операции, ну отрезки это сеты,
[01:41:40.180 --> 01:41:54.420]  эти сеты мы храним как деревья, ну можно и так сказать, хорошо, ну потому что, если бы это было
[01:41:54.420 --> 01:41:59.940]  явное дерево, по сути, на нижнем уровне был бы в явном виде бицет, вот в этом понимании, да,
[01:41:59.940 --> 01:42:06.380]  так вот, и значит с этими деревьями, что нам нужно сделать, а нужно сделать маленькую простую вещь,
[01:42:06.380 --> 01:42:15.620]  то есть такие два запроса, первое, посплитить какое-нибудь вот это вот дерево по элементу к,
[01:42:15.620 --> 01:42:20.780]  что значит посплитить, ну это означает, ну в классическом понимании, то есть там первые
[01:42:20.780 --> 01:42:26.780]  к элементам должны отправиться в одно дерево, а все остальные в другое, или в принципе, что то
[01:42:26.780 --> 01:42:32.020]  же самое, идентично, то есть можно сплитить по ключу, то есть там дано число х, пожалуйста,
[01:42:32.020 --> 01:42:39.620]  все меньше либо равные х мы отправляем в левое дерево, остальное в правое, да, и второй тип
[01:42:39.620 --> 01:42:54.180]  запроса, это неожиданно мерч, даны два дерева, объедините их, пожалуйста, в одно, то есть ну даны
[01:42:54.540 --> 01:43:01.340]  два, ну да, можно было вместо мержа написать там юнион какой-нибудь, и парадоксально, ну то есть это
[01:43:01.340 --> 01:43:07.740]  может показаться парадоксальным, но мы не будем это делать, то есть на самом деле мы, но мы на самом
[01:43:07.740 --> 01:43:11.820]  деле не будем это делать путем, казалось бы, напрашившимся путем, давайте посмотрим у кого
[01:43:11.820 --> 01:43:19.260]  элементов меньше, давайте и по одному их добавим в больше, нет, мы будем это делать гораздо более
[01:43:19.260 --> 01:43:24.980]  хитрым способом, так, но прежде чем мы к этим способом приступим, нужен ли нам перерыв,
[01:43:24.980 --> 01:43:32.540]  но просто диспозиция такая, после того как мы это обсудим, мы там займемся там всякими деревьями,
[01:43:32.540 --> 01:43:45.860]  нет, на этот раз как граф, а не как деревьями поиск, хотя с другой стороны идея, которая тут
[01:43:45.860 --> 01:43:50.500]  вытекает, особенно ее анализ может оказаться не совсем тривиальной, так что давайте все-таки
[01:43:50.500 --> 01:43:57.180]  перерыв теперь сделаем, как же делать сплит и мерч у деревьев отрезков, да, казалось бы,
[01:43:57.180 --> 01:44:00.380]  что да, зачем сплит и мерч, мы ради этого дикартячки изобретали, чтобы там делать,
[01:44:00.380 --> 01:44:08.980]  а вот выясняется, что нет, значит, ну давайте думать, как вообще сделать сплит пока, так,
[01:44:08.980 --> 01:44:14.980]  ну во-первых, давайте, как мы уже сказали, давайте превратим это в, нет, хотя нет, даже не будем
[01:44:14.980 --> 01:44:20.100]  превращать, даже этого не нужно, значит, как сделать сплит, то есть мы хотим отсплитить там левое
[01:44:20.100 --> 01:44:27.900]  ка элементов, соответственно, от всех остальных, как же это сделать, так, ну давайте так, это я
[01:44:27.900 --> 01:44:32.020]  тоже сотру, потому что как бы тут мы уже, как бы если мы научимся делать это, то мы вроде уже
[01:44:32.020 --> 01:44:41.660]  победили, да, то есть пока у нас просто задача, да, но, то есть давайте так, то есть у нас есть
[01:44:41.660 --> 01:44:48.300]  набор из какого-то количества сытов, да, в который суммарно лежит n элементов, ну там, ну помните
[01:44:48.300 --> 01:44:52.780]  самые числа, то есть у нас там числа от одного до n, пока у нас простой интерпретация, распиханы
[01:44:52.780 --> 01:44:59.540]  по нескольким сытам, и мы с этими сытами хотим делать вот такие операции, да, причем хотим,
[01:44:59.540 --> 01:45:06.300]  чтобы эти сыты хранились в не, там, хотим, чтобы эти сыты хранились в неявных д.о.шках, да, нам это
[01:45:06.300 --> 01:45:12.700]  для чего-то надо, то есть как бы, да, метод, что это мы там делаем, типа не работает уже, вот, и так,
[01:45:12.700 --> 01:45:23.140]  значит, как же мы будем, давайте вот начнем с простого, делать сплит, ну вот тут идея какая, да, да, да,
[01:45:23.420 --> 01:45:30.920]  да exploring. Да-да, значит, смотрите, я все-таки на всех ändах кучу расскажу,
[01:45:32.620 --> 01:45:42.100]  потому что, да, потому что понятно кому-то понятно, а потом... ну да-да нету, ну, spring, во-первых,
[01:45:42.900 --> 01:45:45.420]  с амминией, во-вторых, там потом еще fairy tale, что-то там на самом деле, да, там,
[01:45:45.420 --> 01:45:49.260]  тут-то какое-то он Alexander, там понимаю, что происходит, понимает от силы шесть,
[01:45:49.260 --> 01:45:55.340]  7 человек в аудитории нет это кстати реальные отзывы там в прошлых поколениях такие были поэтому
[01:45:55.340 --> 01:46:01.460]  поэтому поэтому извините но я на всякий случай вот подробно рассказываю потому что тут вот
[01:46:01.460 --> 01:46:06.180]  собственно вот больше действительно эффект такой есть потому что дайте как бы дашу там в
[01:46:06.180 --> 01:46:11.100]  коридоре начинайте начинайте сублимации супергаг очень резистентно и там и кажется что все хора
[01:46:11.100 --> 01:46:15.820]  вокруг да да да хотя этот эффект создается тем что так делают буквально там максимум 4 человека
[01:46:15.820 --> 01:46:22.900]  ну просто они хорошо рассредоточены по всей аудитории вот не надо потом дать歡ятия то есть это
[01:46:22.900 --> 01:46:28.520]  но то есть просто там эффект крикливого меньшинства то есть на самом деле как бы то есть на самом деле
[01:46:28.520 --> 01:46:32.700]  как визит а vaccine что там так иногда может показаться не но там какие то лучшие все
[01:46:32.700 --> 01:46:37.140]  время всем недовольны всем критикуют хотя на самом деле выяснито что просто есть два конкретных
[01:46:37.140 --> 01:46:41.540]  человека который все время소 будет замещается то есть на самом деле да то есть как бы и по
[01:46:41.540 --> 01:46:49.820]  по-хорошему понятно, что их мнение не является прям мнением всего коллектива, но в смысле,
[01:46:49.820 --> 01:46:56.900]  ну я знаю, в смысле, когда очень-то работаешь, да обычно этих людей прекрасно знаешь, да,
[01:46:56.900 --> 01:47:03.380]  нет, ну как сказать, нет, ну как сказать, ну целенаправленные,
[01:47:03.380 --> 01:47:13.740]  нет, нет, нет, нет, нет, нет, дело не в этом, там, собственно, нет, с ними ничего страшно
[01:47:13.740 --> 01:47:20.980]  ни произошло, там, собственно, соответственно, просто я говорил как-то, не потому что,
[01:47:20.980 --> 01:47:25.620]  просто потому что такое иногда бывает психологический эффект, это просто.
[01:47:25.620 --> 01:47:29.900]  Как бы я призываю, поп glorify, мы как бы не бояться, если там вот, вы там пришли в аудиторию,
[01:47:29.900 --> 01:47:37.900]  вам кажется, что все все понимают, а вы не понимаете. То есть помните, на самом деле там понимающих не больше вас, гораздо там на самом деле сильно больше, чем вы думаете.
[01:47:38.900 --> 01:47:45.900]  Вот, поэтому вот. Я, собственно, только к этому. Вот. Так вот, как будем делать сплит? Так, ну идея такая.
[01:47:46.900 --> 01:47:52.900]  Так, вот я хочу, ну вот. Ну, значит, на самом деле, значит, есть у нас вот эта вершина, то есть мы знаем всего сколько элементов.
[01:47:53.900 --> 01:48:01.900]  Ну, во-первых, можно сказать так, что если тут элементов ровно к, ну если меньше, ну мы их считаем шукатными, но если их ровно к, то как сделать сплит?
[01:48:03.900 --> 01:48:10.900]  Да очень просто. Вернуть два дерева. Одно вот это, второе пустое. Все. И больше ничего делать не надо.
[01:48:13.900 --> 01:48:16.900]  По количеству. По количеству.
[01:48:16.900 --> 01:48:20.900]  По количеству. Вот. Дай переча.
[01:48:21.900 --> 01:48:28.900]  Но если тут их оказалось больше, чем к, то тогда какая тут идея неожиданно возникает?
[01:48:29.900 --> 01:48:33.900]  Давай возникает следующая идея. Так, мы отправляемся в ребеночка.
[01:48:34.900 --> 01:48:38.900]  И думаем, вот в левом ребеночке элементов меньше, чем к, или больше, чем к.
[01:48:39.900 --> 01:48:44.900]  Допустим, выяснилось, что тут элементов больше либо равно, чем к.
[01:48:45.900 --> 01:48:47.900]  Тогда идея такая.
[01:48:48.900 --> 01:48:52.900]  Значит, вот это вот мы торжественно сплитим.
[01:48:53.900 --> 01:49:00.900]  То есть у нас тут появляется, вот я даже нарисую в дикартякичном стиле, тут либо там к элементов, тут все остальные.
[01:49:02.900 --> 01:49:09.900]  Правда, единственное только оговарка, что у меня дерево отрезков не на 1н, а на 1н пополам условно, да?
[01:49:10.900 --> 01:49:13.900]  Ну, потому что, ну, в смысле.
[01:49:14.900 --> 01:49:19.900]  Ну, смотри, что такое дерево отрезков для элементов 1н?
[01:49:20.900 --> 01:49:28.900]  Это два дерева, это как бы один корень, который ссылается на два дерева отрезков. Одно для 1н пополам, другое n пополам плюс 1н.
[01:49:29.900 --> 01:49:32.900]  То есть обобщение это дерево отрезков для проотреска lr.
[01:49:33.900 --> 01:49:36.900]  Понятно, да? Ну, если l равно r, то это один элемент.
[01:49:36.900 --> 01:49:40.900]  То есть поэтому давайте тут посплитили, значит, на просто более низком уровне.
[01:49:42.900 --> 01:49:47.900]  То есть мы получили вот это вот дерево 1 и дерево 2.
[01:49:49.900 --> 01:49:58.900]  Ну вот, и допустим, давайте так, это была, допустим, какая-нибудь вершина t, а это была вершина v, это было дерево t.
[01:49:59.900 --> 01:50:02.900]  Тут какое-нибудь висело, да? Тогда какой у нас будет ответ на задачу?
[01:50:02.900 --> 01:50:10.900]  Ответ на задачу будет такой, в левом дереве у нас будет дерево t1 и свежесозданная вершина.
[01:50:11.900 --> 01:50:18.900]  Вот свежесозданная вершина, у которой слева будет висеть вот эти t1, а справа пустота.
[01:50:20.900 --> 01:50:24.900]  Ну, это для того, чтобы сделать дерево именно порядка там вот 1н, да?
[01:50:25.900 --> 01:50:28.900]  Вот. А как будет выглядеть второе дерево?
[01:50:28.900 --> 01:50:35.900]  Второе дерево будет выглядеть так. Это будет прям та же самая вершина v, на которой будет висеть вот это вот дерево там.
[01:50:36.900 --> 01:50:40.900]  То есть вот это вот даже я черненьким нарисую, то же самое дерево t, которое было раньше.
[01:50:42.900 --> 01:50:47.900]  А слева к нему мы теперь подвесим просто вот это вот типа t2.
[01:50:50.900 --> 01:50:51.900]  Вот такой сплит.
[01:50:58.900 --> 01:51:05.900]  Нет, ну здесь нет. Вот здесь новую вершину создали, вот она.
[01:51:06.900 --> 01:51:07.900]  А здесь уже не надо.
[01:51:08.900 --> 01:51:10.900]  Потому что эта вершина продолжает отвечать под отрезок 1н.
[01:51:11.900 --> 01:51:15.900]  Единственное, что в ней кое-что поменяется, это конечно вам придется пересчитать, сколько тут элементов.
[01:51:16.900 --> 01:51:22.900]  Ну и конечно же, да, если тут оказалось 0 элементов, то лучше конечно это, то есть лучше конечно тут повесить крестик.
[01:51:23.900 --> 01:51:27.900]  Ну да, ну да.
[01:51:28.900 --> 01:51:30.900]  Есть и такое подозрение.
[01:51:31.900 --> 01:51:32.900]  Так что вот такая вот красота.
[01:51:33.900 --> 01:51:39.900]  То есть обратите внимание, то есть на самом деле оказывается посплитить неявное ДО оказывается очень просто.
[01:51:40.900 --> 01:51:47.900]  То есть обратите внимание, да, ну я правда рассмотрел только один случай, но я думаю вы же мне наверное поверите, что второй случай рассматривается симметрично.
[01:51:48.900 --> 01:51:56.900]  То есть разница будет в том, что здесь отсплитивать, есть тут меньше, чем k, то есть здесь надо отсплитить не k элементов, а k минус сколько было тут, но это классика.
[01:51:57.900 --> 01:52:01.900]  То есть получается сплитить очень просто.
[01:52:02.900 --> 01:52:07.900]  Обратите внимание, мы это сделали прям за честный логарифм.
[01:52:08.900 --> 01:52:15.900]  И создали, кстати, обратите внимание, не более чем логарифм, даже не от логарифм, а логарифм новых вершин.
[01:52:16.900 --> 01:52:17.900]  Видно, да?
[01:52:18.900 --> 01:52:19.900]  Очень удобно.
[01:52:20.900 --> 01:52:23.900]  Вот такая вот неожиданная у нас красота.
[01:52:23.900 --> 01:52:27.900]  Вот, ну значит сюда, то есть получается сделали логарифм, создали логарифм новых вершин.
[01:52:28.900 --> 01:52:31.900]  А теперь его величество мерч.
[01:52:33.900 --> 01:52:34.900]  Как же сделать мерч?
[01:52:37.900 --> 01:52:38.900]  А?
[01:52:38.900 --> 01:52:39.900]  Как сделать мерч?
[01:52:40.900 --> 01:52:41.900]  В тупую.
[01:52:41.900 --> 01:52:42.900]  В тупую, супер.
[01:52:43.900 --> 01:52:44.900]  А в тупую это как?
[01:52:45.900 --> 01:52:46.900]  Ну берем корни, сливаем.
[01:52:47.900 --> 01:52:48.900]  Детей припустим и сливаем, если они есть.
[01:52:50.900 --> 01:52:51.900]  Да, внимание, вопрос.
[01:52:52.900 --> 01:52:56.900]  Какими способами можно из этого набора слов собрать алгоритм?
[01:52:58.900 --> 01:53:00.900]  57 классно.
[01:53:01.900 --> 01:53:03.900]  179, но я боюсь там и 2007 зайдет.
[01:53:06.900 --> 01:53:07.900]  Да, непонятно.
[01:53:08.900 --> 01:53:14.900]  Ну, значит тут в тупую аккуратно, это не Z функция, где слово в тупую как бы дает автоматический смысл.
[01:53:15.900 --> 01:53:20.900]  Так, ладно, поднимите руки, кто кому рассказывали Z функцию с использованием слова в тупую.
[01:53:25.900 --> 01:53:30.900]  Ну, я не знаю, нет, мне просто, просто мне все время рассказывали Z функцию так.
[01:53:31.900 --> 01:53:34.900]  Ну, там как бы жила была строка S, мы считаем Z функцию.
[01:53:35.900 --> 01:53:40.900]  Мы там дошли до какого-то момента и храним еще отрезок реле, который заканчивается позже всех.
[01:53:41.900 --> 01:53:42.900]  И алгоритм звучит так.
[01:53:42.900 --> 01:53:43.900]  И алгоритм звучит так.
[01:53:44.900 --> 01:53:50.900]  То есть если там R меньше и, там Z в тупую.
[01:53:52.900 --> 01:53:53.900]  То есть насчитываем Z в тупую.
[01:53:55.900 --> 01:53:56.900]  Значит LZ.
[01:53:57.900 --> 01:54:04.900]  Ну, там дальше что-то типа и в Z, и плюс L меньше, чем R минус и, там Z в общем равно R минус и.
[01:54:04.900 --> 01:54:11.900]  Там LZ, значит пишем Z IT равно Z равно R минус и.
[01:54:12.900 --> 01:54:13.900]  Далее в тупую.
[01:54:16.900 --> 01:54:17.900]  Да, далее в тупую.
[01:54:18.900 --> 01:54:25.900]  Мне в свое время там это видимо в каком-то облахматом видимо 2006, там каком-то седьмом, плюс минус один.
[01:54:26.900 --> 01:54:27.900]  Вот объясняли вот именно так.
[01:54:28.900 --> 01:54:29.900]  С кодовым словом в тупую.
[01:54:30.900 --> 01:54:31.900]  Вот.
[01:54:32.900 --> 01:54:33.900]  А ну или я себе это так записал, я не знаю.
[01:54:35.900 --> 01:54:36.900]  Ну вот.
[01:54:37.900 --> 01:54:40.900]  Ну не важно, ладно там у нас хорошие времена были, да.
[01:54:41.900 --> 01:54:42.900]  Ну вот.
[01:54:43.900 --> 01:54:45.900]  Так, ну ладно, до этого мы в следующем году еще дойдем.
[01:54:46.900 --> 01:54:47.900]  Вот где-то как раз через годик, наверное.
[01:54:48.900 --> 01:54:49.900]  Да.
[01:54:50.900 --> 01:54:51.900]  Не, ну не потому что это сложно, а потому что это строчки.
[01:54:52.900 --> 01:54:54.900]  Да, просто у нас блок строчек идет именно там.
[01:54:57.900 --> 01:54:58.900]  Вот.
[01:54:59.900 --> 01:55:00.900]  Ой, геометрия.
[01:55:01.900 --> 01:55:02.900]  Геометрия это интересно.
[01:55:02.900 --> 01:55:03.900]  Нет, это все интересно.
[01:55:04.900 --> 01:55:07.900]  Знаете, неинтересных тем тут особо нет, если честно.
[01:55:12.900 --> 01:55:13.900]  Не, ну как сказать.
[01:55:14.900 --> 01:55:15.900]  Не, ну ладно, это отдельная песня.
[01:55:16.900 --> 01:55:17.900]  Так вот.
[01:55:18.900 --> 01:55:19.900]  Итак, как делаем мерч?
[01:55:20.900 --> 01:55:21.900]  Да, тут слово в тупую как бы однозначного смысла не дает.
[01:55:24.900 --> 01:55:26.900]  Оно говорит нам следующее, смотрите.
[01:55:26.900 --> 01:55:31.900]  Итак, пришло нам желание померзать два дерева.
[01:55:32.900 --> 01:55:33.900]  Т1 и Т2.
[01:55:35.900 --> 01:55:36.900]  Так, ну начнем с простого.
[01:55:37.900 --> 01:55:41.900]  Ну во-первых, давайте скажем так, что если одно дерево оказалось крестиком,
[01:55:42.900 --> 01:55:44.900]  то мы тупо возвращаем второе и не паримся, правда?
[01:55:45.900 --> 01:55:46.900]  Вот.
[01:55:48.900 --> 01:55:52.900]  Но что делать, если они оба оказались не крестиками?
[01:55:52.900 --> 01:55:53.900]  Не крестиками.
[01:55:55.900 --> 01:55:56.900]  Тогда, значит, идея такая.
[01:55:57.900 --> 01:56:05.900]  Так, значит, заметим, что тут висело дерево Т1-1, тут висело дерево Т1-2.
[01:56:06.900 --> 01:56:13.900]  Тут висело дерево Т2-1, тут висело дерево Т2-2.
[01:56:15.900 --> 01:56:18.900]  Тогда возникает неожиданная вещь.
[01:56:19.900 --> 01:56:27.900]  Значит, давайте для симметрии мы скажем так, давайте убьем на этот раз родителей в какой-то веке.
[01:56:28.900 --> 01:56:29.900]  Вот.
[01:56:30.900 --> 01:56:31.900]  А вместо...
[01:56:32.900 --> 01:56:35.900]  Нет, ну ладно, мы добрые, не в смысле прям убьем.
[01:56:38.900 --> 01:56:40.900]  Нет, мы их круче сделаем.
[01:56:41.900 --> 01:56:42.900]  Мы их объединим.
[01:56:43.900 --> 01:56:49.900]  Как бы, то есть у нас был, как бы, как бы, было у нас два дерева, у каждого был родитель.
[01:56:50.900 --> 01:56:52.900]  Мы теперь этих двух родителей объединим.
[01:56:53.900 --> 01:56:55.900]  Такой будет у нас такой супер родитель.
[01:57:00.900 --> 01:57:02.900]  Вот. Слева к нему мы подвесим.
[01:57:02.900 --> 01:57:03.900]  Мы подвесим.
[01:57:06.900 --> 01:57:08.900]  Ладно, вот так вот, подвесим.
[01:57:09.900 --> 01:57:13.900]  Результат объединения деревьев Т1-1 и Т2-1.
[01:57:17.900 --> 01:57:20.900]  Да, ну то есть прям вот рекурсивно запустим мерч от Т1-1, Т2-1.
[01:57:21.900 --> 01:57:24.900]  Ну, естественно, для своего подотреска, да, своего уровня.
[01:57:25.900 --> 01:57:30.900]  А справа мы подвесим результат объединения Т1-2.
[01:57:32.900 --> 01:57:34.900]  И Т2-2 тоже вот рекурсивно.
[01:57:35.900 --> 01:57:36.900]  Ну и, конечно, в корне еще придется пересчитать, сколько элементов.
[01:57:37.900 --> 01:57:39.900]  Правда, мы это могли сразу сделать, кстати, когда объединяли.
[01:57:40.900 --> 01:57:43.900]  Если тут 57 элементов, а тут 179, значит, тут их будет 226.
[01:57:46.900 --> 01:57:52.900]  Нет, ну как, пересекаться, ну как подотрески, да, но в плане, что у нас...
[01:57:53.900 --> 01:57:58.900]  Но я скажу так, смотрите, во-первых, в нашей конкретной задачи у нас гарантируется, что цветы не пересекаются.
[01:57:59.900 --> 01:58:01.900]  То есть у нас система не пересекающихся множеств.
[01:58:02.900 --> 01:58:06.900]  Да, знаете, это система не пересекающихся множеств, но не СММ.
[01:58:07.900 --> 01:58:09.900]  Система не пересекающихся деревьев.
[01:58:10.900 --> 01:58:13.900]  Да, ну, нет, ну, то есть есть множество, другой вопрос, как мы их храним.
[01:58:14.900 --> 01:58:16.900]  Вот.
[01:58:17.900 --> 01:58:20.900]  Ну вот, но на самом деле я утверждаю, что...
[01:58:21.900 --> 01:58:29.900]  Ну так, мы себе подложим на будущее, но я скажу так, я утверждаю, что если бы хранили мультисы три чисел от одного ДН,
[01:58:29.900 --> 01:58:31.900]  ну, как хранить мультисы?
[01:58:32.900 --> 01:58:38.900]  Так же, только в каждом элементе на нижнем уровне мы храним не единичку, а сколько этих элементов там, да?
[01:58:39.900 --> 01:58:41.900]  Вот. И тогда, ну вот.
[01:58:42.900 --> 01:58:46.900]  То есть, ну вот, в принципе, технология от этого принципиально не поменялась.
[01:58:47.900 --> 01:58:49.900]  То есть я утверждаю, что на самом деле это ни на что не повлияет.
[01:58:50.900 --> 01:58:56.900]  Ну, для того, чтобы убедиться, что ни на что не повлияет, я, конечно, должен сейчас провести анализ, почему это работает адекватно.
[01:58:56.900 --> 01:58:57.900]  Вот.
[01:58:58.900 --> 01:59:04.900]  Да, то есть хотя тут, видите, рекурсивные какие-то два мержа надо запускать, там что-то объединять, ну объединять тут за от единицы.
[01:59:05.900 --> 01:59:08.900]  Но на самом деле у нас произошло очень важное событие.
[01:59:10.900 --> 01:59:12.900]  У нас уменьшилось количество вершин.
[01:59:13.900 --> 01:59:15.900]  Видите, было два корня, стал один.
[01:59:16.900 --> 01:59:24.900]  Ну, то есть понятно, что при реализации вы, конечно, можете просто там убить реально только этот корень, а в этот корень, на самом деле, просто уже там прибавить что-то.
[01:59:24.900 --> 01:59:26.900]  И там подвесить вот эти объединения.
[01:59:27.900 --> 01:59:28.900]  Ну, это уже деталь.
[01:59:29.900 --> 01:59:30.900]  Скажите, как называется деталь реализации?
[01:59:31.900 --> 01:59:36.900]  Спрашивается, почему это все работает за какую-то адекватную синтуетику.
[01:59:37.900 --> 01:59:38.900]  Вот я утверждаю, что оно работает за.
[01:59:39.900 --> 01:59:42.900]  Но для этого нужно просто ввести хороший потенциал.
[01:59:43.900 --> 01:59:44.900]  Как уже с самого начала нам и говорилось.
[01:59:45.900 --> 01:59:46.900]  Но какой?
[01:59:46.900 --> 01:59:56.900]  Да, потенциал, внимание, тупо, количество вершин в, да, в деревьях, да, я могу тут добавить слово суммарное.
[02:00:03.900 --> 02:00:05.900]  Я даже напишу не в деревьях, а в деревьях.
[02:00:05.900 --> 02:00:06.900]  Да.
[02:00:07.900 --> 02:00:08.900]  Вот так.
[02:00:09.900 --> 02:00:19.900]  Да, не совсем формально, но как бы, но суть, хотя нет, здесь еще рано, мы еще не говорили о деревьях как графах, поэтому тут как бы слово дерево тут не выдадут непонятки.
[02:00:20.900 --> 02:00:21.900]  Вот.
[02:00:22.900 --> 02:00:23.900]  Вот.
[02:00:24.900 --> 02:00:26.900]  Вот, оказывается, это все.
[02:00:26.900 --> 02:00:27.900]  Но теперь давайте думать.
[02:00:28.900 --> 02:00:31.900]  Как у нас все работает относительно вот такого потенциала?
[02:00:33.900 --> 02:00:34.900]  Так, ну.
[02:00:35.900 --> 02:00:36.900]  Плюс лог.
[02:00:37.900 --> 02:00:38.900]  Ну да.
[02:00:39.900 --> 02:00:40.900]  Ой.
[02:00:41.900 --> 02:00:42.900]  Ну да.
[02:00:43.900 --> 02:00:44.900]  Так, хотя.
[02:00:45.900 --> 02:00:46.900]  Слушай.
[02:00:47.900 --> 02:00:48.900]  Так, ладно.
[02:00:49.900 --> 02:00:53.900]  Потому что для того, чтобы нам просто это красиво делать, я тут понял, что имеет смысл.
[02:00:54.900 --> 02:00:56.900]  Давайте вот так сделаем.
[02:01:00.900 --> 02:01:05.900]  Нет, я пишу то же самое, просто как бы мне удобно будет, если я это пишу другим цветом.
[02:01:06.900 --> 02:01:07.900]  Ну, да.
[02:01:08.900 --> 02:01:09.900]  Ну, да.
[02:01:10.900 --> 02:01:11.900]  Ну да.
[02:01:12.900 --> 02:01:13.900]  Ну да.
[02:01:14.900 --> 02:01:15.900]  Ну да.
[02:01:15.900 --> 02:01:16.900]  Если я это пишу другим цветом.
[02:01:17.900 --> 02:01:18.900]  Вот.
[02:01:19.900 --> 02:01:20.900]  То есть как бы.
[02:01:22.900 --> 02:01:23.900]  Вот.
[02:01:24.900 --> 02:01:25.900]  Так.
[02:01:26.900 --> 02:01:32.900]  Ну понятно, Даша, изначально мы, конечно, тратим N log N времени для того, чтобы создать N сетов в каждом по логарифму вершин.
[02:01:33.900 --> 02:01:34.900]  Вот.
[02:01:35.900 --> 02:01:36.900]  Теперь значит сплит.
[02:01:37.900 --> 02:01:38.900]  Он работает за честный логарифм.
[02:01:40.900 --> 02:01:44.900]  И количество вершин, которое добавляется, тоже плюс логарифм.
[02:01:45.900 --> 02:01:51.900]  Ну, точнее того, получается, как бы логарифм, то есть учетная стоимость относительно этого потенциала тоже логарифм.
[02:01:54.900 --> 02:01:55.900]  Так.
[02:01:56.900 --> 02:01:57.900]  Теперь мерш.
[02:01:59.900 --> 02:02:00.900]  Вот.
[02:02:01.900 --> 02:02:04.900]  Но теперь на самом деле появляется такой неожиданный чит.
[02:02:07.900 --> 02:02:08.900]  Вот.
[02:02:09.900 --> 02:02:10.900]  Чит на самом деле, здесь вот тут как нот.
[02:02:11.900 --> 02:02:14.900]  Но основная идея здесь заключается в том, что, смотрите, что мы здесь делаем?
[02:02:15.900 --> 02:02:17.900]  Мы делаем два рекурсивных мержа.
[02:02:18.900 --> 02:02:19.900]  Вот.
[02:02:20.900 --> 02:02:21.900]  Ну, по сути.
[02:02:22.900 --> 02:02:24.900]  Ну, по сути, два рекурсивных мержа.
[02:02:25.900 --> 02:02:26.900]  И какое-то единичное действие.
[02:02:27.900 --> 02:02:29.900]  Ну, теперь маленькая приятная штука.
[02:02:30.900 --> 02:02:33.900]  За это действие мы уменьшаем потенциал на единичку.
[02:02:34.900 --> 02:02:35.900]  Видно, да?
[02:02:36.900 --> 02:02:44.900]  То есть это означает, что учетная стоимость конкретно этого действия, включая, может быть, накладные расходы на сам запуск двух рекурсий.
[02:02:45.900 --> 02:02:46.900]  Ну, ноль.
[02:02:47.900 --> 02:02:54.900]  Ну, в принципе, на самом деле отсюда уже легко вывести, что на самом деле учетная стоимость этого мержа ноль.
[02:02:55.900 --> 02:02:57.900]  То есть даже не логарифм.
[02:02:58.900 --> 02:03:05.900]  Мы делаем операции от двух вершин в самом деле, но при этом удаляем одну.
[02:03:06.900 --> 02:03:08.900]  Нет, мы делаем О от единицы операции.
[02:03:09.900 --> 02:03:12.900]  Но для того, чтобы нас посмотреть на эти две вершины, удалить из них одну.
[02:03:12.900 --> 02:03:18.900]  Ну, не важно, скажем так, удалим ли мы две, создадим одну, или одну удалим, но факт остается фактом.
[02:03:19.900 --> 02:03:20.900]  Потенциал уменьшится на единицу.
[02:03:21.900 --> 02:03:24.900]  И делать мы тут будем от единицы операции.
[02:03:25.900 --> 02:03:29.900]  Ну, если мы делали уже две операции, то это было бы долгий.
[02:03:30.900 --> 02:03:34.900]  Так, но это называется, как бы вы потенциал, вы за каждую вершину дуете рубль, доллар или евро.
[02:03:35.900 --> 02:03:36.900]  Это называется.
[02:03:37.900 --> 02:03:39.900]  То есть это называется курс валюты.
[02:03:39.900 --> 02:03:43.900]  Естественно, мы будем считать, что, скажем, можно говорить так.
[02:03:44.900 --> 02:03:45.900]  То есть мы будем говорить так.
[02:03:46.900 --> 02:03:48.900]  Давайте на каждой вершине будем хранить монетку.
[02:03:49.900 --> 02:03:53.900]  Монетка будет достаточно жирной, чтобы оплатить все вот эти вот удаления объединения и радости.
[02:04:02.900 --> 02:04:03.900]  Но на самом деле, да.
[02:04:04.900 --> 02:04:08.900]  Поэтому, конечно, говорить, что совсем мы прям все сделаем, совсем за ноль нельзя.
[02:04:09.900 --> 02:04:11.900]  Но мы вынуждены сказать, что это все-таки один.
[02:04:12.900 --> 02:04:13.900]  Почему?
[02:04:14.900 --> 02:04:19.900]  Потому что, как это ни странно, самая жирная в этом смысле операция, оказывается, операция, когда вам предложили объединить два сетта, один из которых пустой.
[02:04:20.900 --> 02:04:22.900]  Там никакой амортизации не происходит.
[02:04:23.900 --> 02:04:24.900]  Это, честно, за вот единиц происходит.
[02:04:25.900 --> 02:04:26.900]  Да, смотрите.
[02:04:27.900 --> 02:04:28.900]  А вот тут смотрите внимательно.
[02:04:29.900 --> 02:04:36.900]  А теперь идея такая, что, действительно, у вас все рекурсивные запуски тогда дальше делятся на как бы тривиальные.
[02:04:36.900 --> 02:04:37.900]  Тривиальные.
[02:04:38.900 --> 02:04:40.900]  Ну, тривиальные, когда вам там передали два сетта, один пустой.
[02:04:41.900 --> 02:04:42.900]  И нетривиальные, то есть все остальные.
[02:04:43.900 --> 02:04:50.900]  Но теперь заметим, что нетривиальный мерш можно на самом деле в вот эту вот единицу более высокого уровня тоже включить.
[02:04:53.900 --> 02:04:55.900]  То есть, можно вообразить себе это так.
[02:04:56.900 --> 02:05:05.900]  Вы тут делаете два рекурсивных запуска, но в каждом запуске, говорите, вот, вообразите, что в коде вы пишете так, что если одно из этих деревьев пустое, то никакого рекурсивного запуска не происходит.
[02:05:06.900 --> 02:05:07.900]  Вешаем то, что есть.
[02:05:08.900 --> 02:05:12.900]  А если там оба они пустые, ну, тогда рекурсивный запуск выпускает.
[02:05:13.900 --> 02:05:14.900]  Вот вообразим себе такое.
[02:05:15.900 --> 02:05:19.900]  Тогда замечаем, что каждый рекурсивный запуск будет уничтожать одну вершину.
[02:05:20.900 --> 02:05:21.900]  Прямо реально.
[02:05:22.900 --> 02:05:23.900]  Вот.
[02:05:24.900 --> 02:05:30.900]  Но тогда, и тогда получается, что мы сделали сколько-то рекурсивных запусков и убили ровно столько же вершин.
[02:05:31.900 --> 02:05:33.900]  Следовательно, получился ноль.
[02:05:33.900 --> 02:05:41.900]  То есть, единственное, когда получается эта единичка, это вот на самом-самом верхнем уровне мы не можем сказать, что как бы у нас там, наш родитель нас оплатит.
[02:05:42.900 --> 02:05:43.900]  Вот так.
[02:05:44.900 --> 02:05:45.900]  То есть, здесь такого нет.
[02:05:46.900 --> 02:05:49.900]  Поэтому мы вынуждены заключить, что учетная стоимость мержа все-таки бывает единицей.
[02:05:50.900 --> 02:06:00.900]  Но как ни странно, видите, с точки зрения анализа получилось так, что вот, когда одно дерево пустое, тогда получается единственный раз в жизни, когда мы реально, когда учетная стоимость реально единица.
[02:06:00.900 --> 02:06:06.900]  Потому что, как бы, если надо объединять два непустых дерева, то вот как раз, ура, радость, учетная стоимость моль.
[02:06:07.900 --> 02:06:08.900]  Ну, не более нуля.
[02:06:09.900 --> 02:06:11.900]  Ну там, ну там, конечно, от конкретного курса зависит.
[02:06:12.900 --> 02:06:14.900]  Понятно, что если курс задрать, можно там и в глубокий минус уйти.
[02:06:15.900 --> 02:06:17.900]  Ну, за счет того, зато здесь будет более жирный логарифм.
[02:06:18.900 --> 02:06:23.900]  Как бы, но это понятно, это уже тот, это уже все такие вещи.
[02:06:23.900 --> 02:06:33.900]  То есть, ну, таким образом, как вы уже поняли, то есть, получается, мы на этих n запросах, то есть, если у нас, как бы, бассейн состоит из n элементов.
[02:06:34.900 --> 02:06:49.900]  То есть, все элементы состоят от одного до n, то тогда получается, суммарное время обработки q запросов на них получается, ну, с учетом того, что мы еще в самом начале что-то сделали, q плюс n на лог.
[02:06:54.900 --> 02:06:57.900]  То есть, никаких, ни квадрат, ни q, оказывается, просто честный логарифм.
[02:06:58.900 --> 02:07:00.900]  Помните, вот, предельно честный тут даже вот.
[02:07:03.900 --> 02:07:04.900]  Чего?
[02:07:09.900 --> 02:07:12.900]  Не, ну, а, ты знаешь, а за счет чего тут, кстати, долго?
[02:07:13.900 --> 02:07:14.900]  Может быть, за счет, разве что, ньюд элитов.
[02:07:14.900 --> 02:07:24.900]  Ну, нет, ну, скажем так, технологии, там, ньюд элит, понятно, что, да, сами по себе ньюшки работают долго, но есть стандартный олимпиадный способ, как от этого избавляться.
[02:07:25.900 --> 02:07:28.900]  Да, способ называется, да, создать глобальный буфер.
[02:07:29.900 --> 02:07:32.900]  Я думаю, там, думаю, на c++ мы уже столкнулись с таким понятием, как колокатор.
[02:07:33.900 --> 02:07:35.900]  Нет? Ну, столкнетесь.
[02:07:36.900 --> 02:07:43.900]  Нет, ну, столкнетесь, потому что, да, он, как бы, базируется на том, что тоже, то есть, по умолчанию, когда нужно создать во всех, там, сетах новые вершины, действительно вызываются ньюд элиты.
[02:07:44.900 --> 02:07:50.900]  Ну, вот, но иногда тоже выясняется, что это не самый оптимальный способ, может быть, там, пользователь умеет создавать память лучше.
[02:07:51.900 --> 02:07:55.900]  Поэтому, там, во все сеты, у всех сетов, на самом деле, есть дополнительный шаблонный параметр alocator.
[02:07:56.900 --> 02:08:00.900]  Ну, фактически, это alocator, это какое-то нечто, что умеет там создавать новую память.
[02:08:01.900 --> 02:08:08.900]  Вот, ну, собственно, вот, ну, это в качестве анонса, потому что, я думаю, там, у миссирина вы почти, наверное, собственно, там свой alocator.
[02:08:09.900 --> 02:08:12.900]  То есть, какой-нибудь шаблон с учетом alocator напишите обязательно.
[02:08:13.900 --> 02:08:15.900]  Ну, вот, и, как бы, действительно, может быть, полезная штука.
[02:08:16.900 --> 02:08:24.900]  То есть, вплоть до того, что, на самом деле, знаете, вот, в яндексовых библиотеках, известно, там, запрещено пользоваться STD.
[02:08:26.900 --> 02:08:27.900]  Ну, ладно, более точная формулевка.
[02:08:28.900 --> 02:08:31.900]  Запрещается пользоваться, прям, вызывать STD, а там, что-то напрямую.
[02:08:33.900 --> 02:08:41.900]  То есть, вместо этого, в яндексовске, там, по крайней мере, в Аркадии, принято использовать там специальные модификации.
[02:08:42.900 --> 02:08:43.900]  Которые называют себя Y-вектор.
[02:08:44.900 --> 02:08:45.900]  Или Y-hashmap.
[02:08:46.900 --> 02:08:48.900]  Или там, что-нибудь еще в этом роде.
[02:08:49.900 --> 02:08:50.900]  Да.
[02:08:51.900 --> 02:08:57.900]  Но, на самом деле, если, если копнуть, как они реализованы, то, по факту, так, ну, вы же уже знаете, что такое наследование, да?
[02:08:59.900 --> 02:09:05.900]  Так вот, по сути, так вот, на самом деле, вы можете обдумать, что там, по сути, окажется, что там Y-вектор.
[02:09:06.900 --> 02:09:07.900]  То есть, там, класс Y-вектор.
[02:09:08.900 --> 02:09:16.900]  Это просто тупо публичный наследник, значит, STD-вектора с правильным, там, или там, вот, ну да, ну да.
[02:09:17.900 --> 02:09:18.900]  То есть, просто публичный наследник бывает там.
[02:09:19.900 --> 02:09:21.900]  Ну, хотя, это Y-вектор не уверен, там, как бы, с векторами.
[02:09:22.900 --> 02:09:23.900]  Хотя, вот, хотя, скорее всего, там будет Y-вектор.
[02:09:24.900 --> 02:09:30.900]  Да, это публичный наследник просто вектора с специальным, с специальным локатором от Яндекса.
[02:09:32.900 --> 02:09:33.900]  Или там, hashmap тоже, на самом деле.
[02:09:33.900 --> 02:09:37.900]  Там anordered map, но там с правильным подсунутым компара, вот именно, локатором.
[02:09:38.900 --> 02:09:39.900]  Вот и нод.
[02:09:40.900 --> 02:09:41.900]  Вот, собственно, и все.
[02:09:42.900 --> 02:09:43.900]  Ну, там, конечно, по-разному бывает, то есть, нод.
[02:09:44.900 --> 02:09:45.900]  Но это так, это вот будет край нод.
[02:09:46.900 --> 02:09:48.900]  То есть, еще один нод с того, что там у вас на курсе по C++ еще будет.
[02:09:49.900 --> 02:09:51.900]  Так что, будет это, это у вас все будет еще в больших подробностях.
[02:09:52.900 --> 02:09:53.900]  Вот.
[02:09:53.900 --> 02:09:54.900]  Вот.
[02:10:00.900 --> 02:10:02.900]  Ну, потому что, ну, T1,1 это что?
[02:10:03.900 --> 02:10:07.900]  Это значит, вот в этом сете какие элементы у нас на отрезке, там, типа, 1DN пополам, типа.
[02:10:08.900 --> 02:10:10.900]  И тут, как бы, какие элементы были от 1DN пополам.
[02:10:11.900 --> 02:10:12.900]  Поэтому объединяем вот именно их.
[02:10:20.900 --> 02:10:21.900]  Нет, по величинам.
[02:10:21.900 --> 02:10:22.900]  По величинам.
[02:10:23.900 --> 02:10:26.900]  Потому что в этом сете должен быть, тут должен быть все элементы от 1DN пополам.
[02:10:27.900 --> 02:10:28.900]  Тут от 1DN пополам плюс 1DN.
[02:10:29.900 --> 02:10:30.900]  Ну, соответственно, поэтому так.
[02:10:31.900 --> 02:10:32.900]  Вот.
[02:10:33.900 --> 02:10:37.900]  Так что, вот, получилось такое вот не очень, как-то вот действительно не очень что-то страшное.
[02:10:38.900 --> 02:10:42.900]  Ну, вот, но работает вот за n log n, хотя вот действительно, то есть, есть модификации там.
[02:10:43.900 --> 02:10:44.900]  То есть, можно попробовать это сделать на дикотячках.
[02:10:45.900 --> 02:10:50.900]  Но, как бы, скажем так, тут я, конечно, сейчас у меня будет информация из тыквы, за что купил, за то продаю.
[02:10:51.900 --> 02:10:54.900]  Но сообщили следующее, что где-то нокут в фольсусах.
[02:10:55.900 --> 02:11:03.900]  Там называется вроде, там есть статья, в которой там доказывается, что если делать это там как-то хорошо на дикотячках, то это будет то ли log квадрат, то ли log куб.
[02:11:04.900 --> 02:11:07.900]  Вот, называлось даже имя Александр Шаховцов.
[02:11:08.900 --> 02:11:11.900]  Вот, да, есть, да, есть у нас такой товарищ.
[02:11:12.900 --> 02:11:14.900]  Вот, так что, при желании, можете там покопать, найти.
[02:11:15.900 --> 02:11:16.900]  Вот.
[02:11:17.900 --> 02:11:18.900]  Да.
[02:11:18.900 --> 02:11:21.900]  Так, ну, если что, да, представитель команды log grand conjecture, если что.
[02:11:22.900 --> 02:11:24.900]  Это одного из наших финалистов.
[02:11:25.900 --> 02:11:26.900]  О, супер.
[02:11:27.900 --> 02:11:28.900]  Ну, вот.
[02:11:29.900 --> 02:11:30.900]  Так же соответственно.
[02:11:31.900 --> 02:11:32.900]  Вот.
[02:11:35.900 --> 02:11:37.900]  Так, ну что, есть тут вопросы?
[02:11:40.900 --> 02:11:41.900]  Да нет, наверное.
[02:11:42.900 --> 02:11:43.900]  Хорошо.
[02:11:44.900 --> 02:11:46.900]  Так что вот, да, действительно, вот такая вот красота.
[02:11:46.900 --> 02:11:52.900]  Здесь могла бы быть, вот тут, да, как видим, вот тут дерево отрезков тут неожиданно побеждает всякие дикотячки.
[02:11:53.900 --> 02:11:58.900]  Все-таки, знаете, вот иногда фиксированная структура иногда лучше, чем нефиксированная, то есть вот какие-то вот свои козыри у нее тоже есть.
[02:11:59.900 --> 02:12:01.900]  И это, и это не только не асимпатическое.
[02:12:02.900 --> 02:12:03.900]  Вот.
[02:12:04.900 --> 02:12:05.900]  Так.
[02:12:06.900 --> 02:12:13.900]  Ну, а теперь, значит, пришло время попробовать усилить все эти, все эти, значит, куда еще можно усилить все эти рискушки и рэмкушки?
[02:12:14.900 --> 02:12:25.900]  Ну, естественно сказать, а давайте, ну вот, ну следующая идея, которая возникает, это, естественно, а давайте делать это на, не на массивах, а на деревьях.
[02:12:26.900 --> 02:12:27.900]  Ну, логично, да?
[02:12:29.900 --> 02:12:30.900]  Ничего?
[02:12:32.900 --> 02:12:33.900]  Ну, там немного другое.
[02:12:34.900 --> 02:12:35.900]  Значит, смотрите.
[02:12:36.900 --> 02:12:37.900]  То есть будут у нас такие, да, деревья.
[02:12:38.900 --> 02:12:39.900]  Вот.
[02:12:39.900 --> 02:12:40.900]  Вот.
[02:12:42.900 --> 02:12:43.900]  Так.
[02:12:44.900 --> 02:12:45.900]  Ну, значит, а, ой, летающие.
[02:12:46.900 --> 02:12:47.900]  Так.
[02:12:49.900 --> 02:12:50.900]  Вот.
[02:12:51.900 --> 02:12:53.900]  Ну, то есть, в принципе, давайте себе представим, что нам дано дерево.
[02:12:54.900 --> 02:13:01.900]  Только вот, начинай с этого момента, начинай путься, потому что как бы говорим, что дерево, то есть это не в смысле вот этого дерева поиска, который у нас было, или там вот это дерево отрезков.
[02:13:02.900 --> 02:13:06.900]  А вот честное, вот это вот графовое, что дерево это такой связанный граф без циклов.
[02:13:07.900 --> 02:13:08.900]  Вот.
[02:13:09.900 --> 02:13:10.900]  То есть какое-то вот дерево.
[02:13:11.900 --> 02:13:13.900]  А, еще есть понятие подвешенное дерево.
[02:13:14.900 --> 02:13:15.900]  Что такое подвешенное дерево?
[02:13:16.900 --> 02:13:21.900]  Это дерево, у которого в явном виде выделено одна вершина, которая называется корнем.
[02:13:22.900 --> 02:13:23.900]  Вот.
[02:13:24.900 --> 02:13:30.900]  И тогда у этого дерева автоматически индуцируется понятие потомки и предки.
[02:13:31.900 --> 02:13:32.900]  Логично, да?
[02:13:33.900 --> 02:13:34.900]  Вот.
[02:13:34.900 --> 02:13:35.900]  Вот.
[02:13:36.900 --> 02:13:41.900]  И вот с этими деревьями иногда хочется как-то поработать.
[02:13:44.900 --> 02:13:45.900]  Вот.
[02:13:46.900 --> 02:13:47.900]  То есть дано какое-то дерево.
[02:13:48.900 --> 02:13:56.900]  Ну, в принципе, с нашей точки зрения, на самом деле, то есть как бы если обобщать задачи РСК и РМК, там как бы можно в разные стороны действительно на эту тему пойти,
[02:13:57.900 --> 02:14:00.900]  то хочется иногда сказать что-нибудь в духе,
[02:14:00.900 --> 02:14:07.900]  ну там, то есть что-нибудь в духе, что давайте на каждом ребре, например, написано какое-то число.
[02:14:08.900 --> 02:14:14.900]  На каждом ребре написано какое-то число, и мы там хотим находить суммы на путях, например.
[02:14:15.900 --> 02:14:16.900]  Или минимумы на путях.
[02:14:17.900 --> 02:14:19.900]  Или там делать какие-нибудь обновления на путях.
[02:14:20.900 --> 02:14:21.900]  Или что-нибудь еще в этом роде.
[02:14:22.900 --> 02:14:23.900]  Вот, понятно, да?
[02:14:24.900 --> 02:14:25.900]  Вот.
[02:14:26.900 --> 02:14:28.900]  Ну, тут действительно много чего тут можно действительно копать.
[02:14:29.900 --> 02:14:30.900]  Вот.
[02:14:31.900 --> 02:14:32.900]  Так.
[02:14:33.900 --> 02:14:34.900]  Но, пожалуй, давайте.
[02:14:35.900 --> 02:14:37.900]  Ну, то есть какие-то такие вот запросы хочется делать.
[02:14:38.900 --> 02:14:40.900]  Но начнем мы, пожалуй, не с этого.
[02:14:41.900 --> 02:14:44.900]  То есть раз уж мы впервые столкнулись с деревом, то есть давайте, может быть.
[02:14:45.900 --> 02:14:47.900]  Хотя...
[02:14:50.900 --> 02:14:51.900]  А, нет.
[02:14:52.900 --> 02:14:53.900]  Ладно, все-таки отложим.
[02:14:54.900 --> 02:14:56.900]  Ладно, все-таки давайте, ладно, сосредоточимся на РСК.
[02:14:56.900 --> 02:14:57.900]  Вот.
[02:14:58.900 --> 02:15:01.900]  Ну, с чего вообще, конечно, хотелось бы начать.
[02:15:02.900 --> 02:15:05.900]  То есть у нас есть какие-то чиселки, да, допустим.
[02:15:06.900 --> 02:15:10.900]  И мы хотим там искать какие-то суммы.
[02:15:13.900 --> 02:15:15.900]  То вообще говоря, естественно, ну вот.
[02:15:16.900 --> 02:15:19.900]  То как бы, как там найти какую-то сумму на вот пути.
[02:15:20.900 --> 02:15:22.900]  Вот, допустим, вот от этой вершины до вот этой вершины.
[02:15:22.900 --> 02:15:23.900]  Ну, как вообще, как устроен любой путь?
[02:15:24.900 --> 02:15:25.900]  Он устроен так.
[02:15:26.900 --> 02:15:28.900]  Мы от вершины идем вверх до какого-то вот предочка.
[02:15:29.900 --> 02:15:30.900]  Да?
[02:15:31.900 --> 02:15:33.900]  А потом же этого предочка не менее неумолимо начинаем спускаться в другое под дерево.
[02:15:34.900 --> 02:15:35.900]  Да?
[02:15:36.900 --> 02:15:38.900]  То есть два пути имеют место от потомка к предку.
[02:15:39.900 --> 02:15:40.900]  К одному и тому же предку.
[02:15:41.900 --> 02:15:43.900]  Ну, единственное так, что один какой-то из этих путей может быть, конечно, нулевой.
[02:15:44.900 --> 02:15:45.900]  Да?
[02:15:46.900 --> 02:15:47.900]  Вот.
[02:15:48.900 --> 02:15:50.900]  Ну и, соответственно, вот.
[02:15:50.900 --> 02:15:51.900]  Вот.
[02:15:52.900 --> 02:15:59.900]  Ну и, соответственно, то есть можно заметить, что действительно этот предок является, так сказать, самым глубоким общим предком вершин УИВ.
[02:16:00.900 --> 02:16:01.900]  Да?
[02:16:02.900 --> 02:16:05.900]  Поэтому, конечно, очень неплохо было бы, конечно, для того, чтобы тут как-то работать с деревом.
[02:16:06.900 --> 02:16:10.900]  Ну, как минимум вести, то есть можно уже тут вести понятие ЛСА.
[02:16:11.900 --> 02:16:12.900]  Вот, в общем-то, уже и мотивировочка.
[02:16:13.900 --> 02:16:14.900]  Да?
[02:16:15.900 --> 02:16:16.900]  Вот появляется понятие ЛСА.
[02:16:17.900 --> 02:16:18.900]  Ну, я думаю, там.
[02:16:19.900 --> 02:16:20.900]  Да.
[02:16:21.900 --> 02:16:22.900]  Вот.
[02:16:23.900 --> 02:16:24.900]  Да.
[02:16:25.900 --> 02:16:26.900]  То есть, как минимум, уже было бы неплохо.
[02:16:27.900 --> 02:16:31.900]  То есть неплохо, как-то его искать.
[02:16:32.900 --> 02:16:34.900]  Ну, доживем.
[02:16:35.900 --> 02:16:36.900]  Ну, как бы, да.
[02:16:37.900 --> 02:16:38.900]  Ну, тем более, что...
[02:16:39.900 --> 02:16:40.900]  Ну, да.
[02:16:41.900 --> 02:16:47.900]  Но тем более, что, как бы, далеко не всегда нам, на самом деле, это вообще, то есть это вот, как бы, ЛСА сам по себе поможет, как человек.
[02:16:48.900 --> 02:16:49.900]  Как черный ящик.
[02:16:50.900 --> 02:16:51.900]  Потому что...
[02:16:52.900 --> 02:16:54.900]  Ну, вот, смотрите, давайте, там, с чего бы нам хотелось начать.
[02:16:55.900 --> 02:16:56.900]  Ну, предположим, пока, по крайней мере.
[02:16:57.900 --> 02:16:58.900]  То есть, естественно, мы там это обсудим.
[02:16:59.900 --> 02:17:03.900]  Но, как бы, предположим, что мы умеем искать для любых двух вершин ЛСА, как черный ящик.
[02:17:04.900 --> 02:17:05.900]  Ну, да.
[02:17:06.900 --> 02:17:07.900]  Может, допустим, даже за единицу.
[02:17:08.900 --> 02:17:10.900]  Тогда предположим, что у нас есть...
[02:17:11.900 --> 02:17:12.900]  Теперь у нас есть задача.
[02:17:13.900 --> 02:17:16.900]  Допустим, у нас есть задача статик РСК.
[02:17:17.900 --> 02:17:18.900]  Значит, смотрите, тут очень внимательно.
[02:17:19.900 --> 02:17:23.900]  Потому что задача, о которой я сегодня буду говорить, по умолчанию, буду боссом стаблазом написать сразу Хавиллайт и не париться.
[02:17:24.900 --> 02:17:27.900]  Но тут это будет называться горе от ума.
[02:17:29.900 --> 02:17:31.900]  Ну, потому что есть Хавиллайт.
[02:17:32.900 --> 02:17:33.900]  Чуть позже мы сегодня поговорим там.
[02:17:34.900 --> 02:17:37.900]  Нет, ну, давайте так, поделите руки, кто знает, что такое Хавиллайт Декомпозицион.
[02:17:38.900 --> 02:17:39.900]  О, какая неожиданность.
[02:17:40.900 --> 02:17:41.900]  Вот.
[02:17:42.900 --> 02:17:45.900]  Так, хорошо, поделите руки, кто хотя бы раз в жизни писал Хавиллайт Декомпозицион.
[02:17:46.900 --> 02:17:47.900]  А, уже нет.
[02:17:48.900 --> 02:17:49.900]  А, уже не все.
[02:17:50.900 --> 02:17:51.900]  А, уже не все.
[02:17:52.900 --> 02:17:53.900]  Вот.
[02:17:54.900 --> 02:17:55.900]  Ну, хорошо.
[02:17:56.900 --> 02:17:57.900]  Ну, ладно.
[02:17:58.900 --> 02:17:59.900]  Так, на всякий случай.
[02:18:00.900 --> 02:18:01.900]  Ну, вот.
[02:18:02.900 --> 02:18:03.900]  Так, ну, теперь, да.
[02:18:04.900 --> 02:18:05.900]  Правда, тут еще возит вопрос.
[02:18:06.900 --> 02:18:07.900]  Давайте так.
[02:18:08.900 --> 02:18:11.900]  За какое симпточку работают операции в Хавиллайте, так сказать?
[02:18:12.900 --> 02:18:13.900]  Ну, на самом деле, так.
[02:18:13.900 --> 02:18:15.900]  Так, да, дефолтная реализация залог квадрат.
[02:18:16.900 --> 02:18:17.900]  Хотя сегодня мы узнаем, как ее написать, чтобы было за логарифом.
[02:18:18.900 --> 02:18:19.900]  Вот.
[02:18:20.900 --> 02:18:21.900]  Да, нет, нет, это не линкат.
[02:18:22.900 --> 02:18:23.900]  Эх, жалко, да.
[02:18:24.900 --> 02:18:25.900]  Хотя надо посмотреть вообще.
[02:18:26.900 --> 02:18:29.900]  Теоретически, в общем, я исходно поправ, я не надеялся, что мы все-таки линкат успеем.
[02:18:30.900 --> 02:18:31.900]  А, может, кстати, успеем.
[02:18:32.900 --> 02:18:33.900]  Почему нет, кстати.
[02:18:34.900 --> 02:18:35.900]  Но, впрочем, смотрите.
[02:18:36.900 --> 02:18:37.900]  Ладно.
[02:18:38.900 --> 02:18:39.900]  Ну, пока не важно.
[02:18:40.900 --> 02:18:41.900]  Но, на самом деле, да.
[02:18:41.900 --> 02:18:42.900]  То есть обычно Хавиллайт...
[02:18:43.900 --> 02:18:44.900]  Ну, вот.
[02:18:45.900 --> 02:18:46.900]  То есть здесь хочется, конечно, всякими Хавиллайтами действительно делать.
[02:18:47.900 --> 02:18:49.900]  Просто все запросы там делать залог квадрата и не париться.
[02:18:50.900 --> 02:18:52.900]  Но, на самом деле, тут как всегда, надо всегда очень...
[02:18:53.900 --> 02:18:54.900]  Ну, как всегда, вы знаете, есть такие темы.
[02:18:55.900 --> 02:18:57.900]  В этом случае как холл-трик еще.
[02:18:58.900 --> 02:19:00.900]  То есть надо внимательно смотреть, какие конкретно запросы вам приходят.
[02:19:01.900 --> 02:19:05.900]  Потому что чем больше вы о них знаете, тем больше шанс, что вы можете отделаться сильно более простыми средствами.
[02:19:06.900 --> 02:19:10.900]  Потому что в данном случае, если от вас просят просто стать икрыску,
[02:19:11.900 --> 02:19:12.900]  то можно вас упасти писать Хавиллайт.
[02:19:13.900 --> 02:19:16.900]  Особенно, если у вас еще и лса за единицу ищет.
[02:19:17.900 --> 02:19:19.900]  Вы же догадались, почему?
[02:19:20.900 --> 02:19:21.900]  Потому что...
[02:19:22.900 --> 02:19:23.900]  Подожди, пора идти так.
[02:19:24.900 --> 02:19:25.900]  Вот не надо этим Элертру-3 сейчас ругаться.
[02:19:26.900 --> 02:19:28.900]  Потому что сейчас даже ими не надо ругаться.
[02:19:29.900 --> 02:19:31.900]  Ну ладно, там в черном ящике придется ругаться.
[02:19:32.900 --> 02:19:33.900]  Да, но давайте...
[02:19:34.900 --> 02:19:35.900]  Но это важно отметить, что тут тоже.
[02:19:36.900 --> 02:19:37.900]  Потому что есть аналог префиксных сумм.
[02:19:38.900 --> 02:19:41.900]  Аналог называется сумма на пути от корня до.
[02:19:42.900 --> 02:19:46.900]  То есть в каждой вершине честно пишем сумму на пути от этой вершины до корня.
[02:19:47.900 --> 02:19:48.900]  Прям честно DFS запускаем.
[02:19:49.900 --> 02:19:51.900]  Там 5, там 8, 9. Не будем делать вид, что мы не знаем, что такое DFS.
[02:19:52.900 --> 02:19:53.900]  Ну и так далее, как всегда.
[02:19:54.900 --> 02:19:55.900]  Вот.
[02:19:56.900 --> 02:19:57.900]  Что уж тут...
[02:19:58.900 --> 02:20:00.900]  То есть совсем уж так выпендриваться не надо.
[02:20:01.900 --> 02:20:02.900]  28, 33, 34.
[02:20:03.900 --> 02:20:04.900]  В общем, вы поняли тут...
[02:20:04.900 --> 02:20:05.900]  Все достаточно...
[02:20:06.900 --> 02:20:08.900]  В общем, тут все достаточно просто.
[02:20:09.900 --> 02:20:10.900]  Вот.
[02:20:14.900 --> 02:20:15.900]  Ну...
[02:20:16.900 --> 02:20:17.900]  Нет, ну это не кое...
[02:20:18.900 --> 02:20:19.900]  Ну пока не...
[02:20:20.900 --> 02:20:21.900]  Ну можно это называть PSSumquay.
[02:20:22.900 --> 02:20:23.900]  Хотя, честно говоря, официально такую обрывиатуру я не встречал.
[02:20:24.900 --> 02:20:26.900]  Хотя назвать, конечно, ее так логично.
[02:20:27.900 --> 02:20:28.900]  Вот. И тогда, смотрите.
[02:20:29.900 --> 02:20:30.900]  Но тогда идея, что если вы такую сумму на пути найдете,
[02:20:31.900 --> 02:20:32.900]  то если вам даны UEV,
[02:20:32.900 --> 02:20:35.900]  то тогда сумма на пути от UDW это что такое?
[02:20:36.900 --> 02:20:39.900]  Это получается сумма на пути от U до корня,
[02:20:40.900 --> 02:20:42.900]  плюс сумма на пути от V до корня,
[02:20:43.900 --> 02:20:46.900]  минус две суммы на пути от LCA до корня.
[02:20:47.900 --> 02:20:48.900]  Да?
[02:20:49.900 --> 02:20:50.900]  Чего?
[02:20:51.900 --> 02:20:52.900]  Ну да, если к сорту вообще кайф.
[02:20:53.900 --> 02:20:55.900]  Но это уже другая история.
[02:20:56.900 --> 02:20:57.900]  LCA не нужен.
[02:20:58.900 --> 02:20:59.900]  Да, LCA не нужен.
[02:21:00.900 --> 02:21:01.900]  Да, это называется, да.
[02:21:02.900 --> 02:21:03.900]  LCA не нужен.
[02:21:04.900 --> 02:21:05.900]  Но тот LCA...
[02:21:06.900 --> 02:21:07.900]  Да, конечно, если был к сорту.
[02:21:08.900 --> 02:21:09.900]  Но, к сожалению, у нас не к сорту.
[02:21:10.900 --> 02:21:11.900]  У нас более продвинутая операция, поэтому сумма.
[02:21:12.900 --> 02:21:13.900]  То есть получается, что у вас все работает за 1,
[02:21:14.900 --> 02:21:15.900]  плюс поиск LCA.
[02:21:16.900 --> 02:21:17.900]  Удобно.
[02:21:18.900 --> 02:21:19.900]  Удобно, правда?
[02:21:20.900 --> 02:21:21.900]  Вот.
[02:21:22.900 --> 02:21:25.900]  Но с другой стороны, конечно, как еще можно усилить?
[02:21:26.900 --> 02:21:28.900]  Можно на самом деле...
[02:21:29.900 --> 02:21:30.900]  Нет, давайте уж...
[02:21:30.900 --> 02:21:32.900]  Нет, ну обычно тут LCA так есть RSQ,
[02:21:33.900 --> 02:21:35.900]  а есть статик RMQ.
[02:21:36.900 --> 02:21:39.900]  А теперь представим себе, что нужно искать, например, минимум на пути.
[02:21:43.900 --> 02:21:46.900]  Тут заметим, что, к сожалению, как бы
[02:21:47.900 --> 02:21:49.900]  минимум на путях нам так в таком виде не поможет.
[02:21:52.900 --> 02:21:53.900]  Вот.
[02:21:54.900 --> 02:21:55.900]  Но тут, смотрите, что...
[02:21:55.900 --> 02:21:56.900]  Но тут действительно такой LCA – это аналог.
[02:21:57.900 --> 02:21:58.900]  То есть смотрите, да.
[02:21:59.900 --> 02:22:00.900]  То есть на самом деле...
[02:22:01.900 --> 02:22:02.900]  Так, тихо, тихо, тихо.
[02:22:03.900 --> 02:22:04.900]  То есть действительно, оказывается, небольшое обобщение.
[02:22:05.900 --> 02:22:06.900]  То есть что мы делали в этом месте в массиве?
[02:22:07.900 --> 02:22:08.900]  Мы...
[02:22:09.900 --> 02:22:10.900]  Вот я смотрю немножко по-другому.
[02:22:11.900 --> 02:22:14.900]  Для каждого элемента хранили минимумы на подотреске,
[02:22:15.900 --> 02:22:19.900]  заканчивая в нем длины 1, 2, 4, там 8 и прочие степени двойки.
[02:22:20.900 --> 02:22:21.900]  То есть вот можно это так.
[02:22:22.900 --> 02:22:23.900]  На этом вот просто вот с такой степенью,
[02:22:23.900 --> 02:22:24.900]  экзотического ракурса посмотреть.
[02:22:25.900 --> 02:22:26.900]  И вот.
[02:22:27.900 --> 02:22:31.900]  И тот возникает практически такая же идея.
[02:22:32.900 --> 02:22:37.900]  А давайте-ка для каждой вершины посчитаем,
[02:22:38.900 --> 02:22:39.900]  во-первых...
[02:22:40.900 --> 02:22:42.900]  То есть посчитаем, во-первых, такую функцию, как, значит...
[02:22:43.900 --> 02:22:46.900]  Ну, так и будем называть, beanup от VL.
[02:22:47.900 --> 02:22:49.900]  То есть просто честно по определению скажем,
[02:22:49.900 --> 02:22:52.900]  что это предок V.
[02:22:53.900 --> 02:22:55.900]  Напоминаю, мы уже это обсуждали, но напомню,
[02:22:56.900 --> 02:22:58.900]  что понятие предок вершины V и понятие родителей вершины V
[02:22:59.900 --> 02:23:00.900]  это разное понятие.
[02:23:01.900 --> 02:23:03.900]  То есть родителю вершины V 1, если она не корень,
[02:23:04.900 --> 02:23:05.900]  а предков много.
[02:23:06.900 --> 02:23:07.900]  Вот.
[02:23:08.900 --> 02:23:09.900]  Значит...
[02:23:10.900 --> 02:23:13.900]  То есть предок V на расстоянии...
[02:23:15.900 --> 02:23:17.900]  На расстоянии...
[02:23:18.900 --> 02:23:22.900]  Стоянии 2 в степени L.
[02:23:23.900 --> 02:23:24.900]  От V.
[02:23:25.900 --> 02:23:26.900]  Вот.
[02:23:27.900 --> 02:23:29.900]  Вот. То есть это вот такая штука.
[02:23:30.900 --> 02:23:32.900]  Заметим, что насчитать ее тоже не очень сложно.
[02:23:33.900 --> 02:23:38.900]  Потому что оказывается, что beanup V0 это что такое?
[02:23:39.900 --> 02:23:42.900]  Да, это тупо родитель вершины V.
[02:23:42.900 --> 02:23:48.900]  А чтобы найти предка на расстоянии 2 в степени L плюс 1,
[02:23:49.900 --> 02:23:54.900]  надо просто найти предка на расстоянии 2 в степени L
[02:23:55.900 --> 02:23:59.900]  от предка на расстоянии 2 в степени L.
[02:24:02.900 --> 02:24:03.900]  Вот.
[02:24:04.900 --> 02:24:06.900]  То есть чтобы скатнуть на 2 в степени PLUS 1,
[02:24:07.900 --> 02:24:08.900]  надо скатнуть на 2 в степени L и еще на два степени L.
[02:24:09.900 --> 02:24:11.900]  В общем, тогда вот...
[02:24:12.900 --> 02:24:22.900]  То есть, более того, в принципе, это даже один из, то есть, в принципе, на этом завязан, даже как мы, видимо, чуть позже быстро обсудим, один из способов нахождения собственной LCA.
[02:24:23.900 --> 02:24:34.900]  Но это нам даже и не важно. Важно другое. Заметим, что вот эта штука, она на самом деле позволяет вам найти не только, то есть, в нашей задаче она бы нам могла позволить найти
[02:24:34.900 --> 02:24:53.900]  еще такую величину, как минап от VL. Это то же самое, но только мы, когда поднимаемся на эти два в степени L, не только саму вершину, еще куда поднимемся, а еще и минимум чиселок, которые мы пройдем мимо.
[02:24:54.900 --> 02:24:56.900]  То есть, это тоже очень легко пересчитывается, правда?
[02:24:56.900 --> 02:25:10.900]  И теперь тогда, если у нас есть, если мы насчитаем такой бинат, то если у нас есть с вами задача подняться из какой-то вершины на заданную высоту h, мы это сделаем за лог h, просто разложив h по степеням двойки.
[02:25:11.900 --> 02:25:17.900]  Но думаю, я тут, но думаю, там сильно писать код тут, думаю, даже не надо, каким фориком мы тут будем пробираться, да?
[02:25:18.900 --> 02:25:33.900]  Вот. Не, рекурсивно не надо. Нет, скажи так, можно, но не очень-то и нужно. То есть, лучше там написать. Ладно, давайте. То есть, смотрите.
[02:25:33.900 --> 02:25:50.900]  Давайте я так-то пишу. Ну, называется это обычно L aq, int v.
[02:25:50.900 --> 02:25:57.900]  Значит, допустим, у вас задача. Это, кстати, тоже отдельная задача, которую будем решать. L aq. Называется level ancestor query.
[02:25:58.900 --> 02:26:03.900]  То есть, это я хочу найти предка вершины v, находящейся на высоте h.
[02:26:03.900 --> 02:26:09.900]  Так вот, с помощью бинапов это делается следующим образом.
[02:26:09.900 --> 02:26:31.900]  То есть, for l равно там max лог от нуля. То есть, перебираем просто все степени двойки и говорим, что, значит, если оказалось, что h больше либо равно 1 х х l, то, значит, что мы делаем?
[02:26:31.900 --> 02:26:47.900]  Тогда из h, то есть, мы поднимаемся на эту высоту, то есть, h уменьшаем и v, то есть, равно binap от vl. Все. И в конце просто сказать, что return l.
[02:26:48.900 --> 02:26:56.900]  В смысле, Ник? Ну, у нас с вами, знаете, на вкусы светломастера разные тогда это называется. По мне это очень красиво.
[02:26:56.900 --> 02:27:02.900]  Нет, предлагается сделать так. Давайте приобрести l от нуля до и пока l меньше, чем h.
[02:27:03.900 --> 02:27:10.900]  Будем проявить, что если h стоит битик l, то будем сдвигать.
[02:27:11.900 --> 02:27:25.900]  Ну, на вкус и цвет. То есть, на вкус и цвет. Можно и так, да, пожалуйста, как угодно, но можно так, можно эдак. Не суть важной.
[02:27:26.900 --> 02:27:37.900]  Вот. В конце концов, можно тут стартовать не от max log, а от вот этой вот логарифма h, который можно, потому что вы с порстейби все равно его насчитываете.
[02:27:38.900 --> 02:27:48.900]  Почему бы его тут не насчитать? Вот. То есть, как угодно. Вот. Так что вот так вот можно, то есть, подняться можно за логарифом.
[02:27:48.900 --> 02:27:56.900]  То есть, соответственно, минимум на этом пути до вот этой h. Ну, то есть, до какой-нибудь задней вершины тоже можно, получается, за логарифом найти.
[02:27:57.900 --> 02:28:06.900]  То есть, получается, теперь это будет работать за логарифом плюс поиск l. То есть, опять же, то есть, видите, никаких хевилайтов писать не надо, только себе в ногу выстрелить.
[02:28:06.900 --> 02:28:16.900]  Вот. Значит, оно, то есть, получается, видите, статические задачи решаются без проблем.
[02:28:36.900 --> 02:28:42.900]  Самое смешное, что на всех этих композициях, на путях, которые там возникают, ты можешь искать там минимум за единицу. Так что да.
[02:28:45.900 --> 02:28:47.900]  Так. Ну, давайте так. На уровне идеи.
[02:28:50.900 --> 02:28:59.900]  А это не важно. Во-первых, он нам будет как черный ящик, во-вторых, мы это все будем очень подробно обсуждать. Так что наберись терпения, как бы мы все, как бы все везде распишем.
[02:28:59.900 --> 02:29:05.900]  В конце, когда вот эту штуку нам тоже надо за единицу как-то делать. А, ну, с этого мы и начнем в свое время.
[02:29:08.900 --> 02:29:18.900]  Ну, да, да, да, да, да. Да, ну, там такой, да. Ой, ну, там посмотрим, там весело будет. Так вот.
[02:29:19.900 --> 02:29:24.900]  Но это мы просто рассмотрели, как решать задачу, если логариф у нас устраивает и без всяких хевилайтов.
[02:29:24.900 --> 02:29:34.900]  Что еще важно отметить? На самом деле, следующую задачу, которую тоже отдельно важно отметить, конечно, чтобы вот тут лишнего не писать.
[02:29:35.900 --> 02:29:43.900]  Это, конечно, эроскоп с изменением в точке. То есть представим себе, что мы хотим решать следующую задачу.
[02:29:43.900 --> 02:29:53.900]  То есть мы хотим делать прибавление на каком-то одном ребре, то есть добавить число икс и найти сумму на пути оттуда ве.
[02:29:54.900 --> 02:29:59.900]  То есть обратите внимание, не прибавление на пути, а прибавление только на одном ребре.
[02:30:02.900 --> 02:30:10.900]  Боже упаси вас тут его писать. Не надо. Нет, ну, хевилай.
[02:30:13.900 --> 02:30:20.900]  Ну, вот. Ну, можно назвать Эллеров обход, хотя Эллеров обход я бы тут тоже не писал, потому что он там слишком нот.
[02:30:21.900 --> 02:30:29.900]  Почему-то его называют так. Ну, я не знаю почему. Ну, вот. Нет, ну, даже когда мы сейчас дойдем, может я даже и расскажу откуда.
[02:30:30.900 --> 02:30:35.900]  Там, в общем-то, понятна интерпретация. Вот. Но в данном случае я бы употребил все-таки немножко другую интуицию.
[02:30:36.900 --> 02:30:42.900]  Тем более, что тут я могу ссылаться на Тарьяна, которая в своей статье 1975 года про ДФС.
[02:30:43.900 --> 02:30:53.900]  Статья так называлась. Depths for Search and its Appliances. Да, 1975 год.
[02:30:54.900 --> 02:31:03.900]  Как вы это, да. Да, для справочки Dx3, алгоритм Dx3 запретен в 59-м. Алгоритм Барувки в 26-м. Вот.
[02:31:05.900 --> 02:31:12.900]  Вот. Да. Но это отдельно для дот. Но вот ДФС, ну, я не уверен.
[02:31:13.900 --> 02:31:18.900]  Ну, я, конечно, не могу, конечно, гарантирую, что прям ДФС запретен в 75-м, но, возможно, как бы интерпретация,
[02:31:18.900 --> 02:31:24.900]  то есть интерпретация, которую дал Тарьян, что Тарьян там начинает с того, что рассказал про ДФС, рассказал про белый, серый, черный цвета.
[02:31:25.900 --> 02:31:30.900]  Там, как минимум, там, по-моему, расписано даже, как искать цикл в графе с помощью такого ДФС. Даже с доказательством.
[02:31:31.900 --> 02:31:37.900]  Раньше ведь не умели. Ну, вот. Ну, скажем так. Но все хорошие, но все хорошие вопросы.
[02:31:37.900 --> 02:31:42.900]  Так нет. Ну, наверное, умели, хотя, может быть, там, для, например, что это как бы делается и ДФСом или как-то еще.
[02:31:43.900 --> 02:31:46.900]  В принципе цикл как бы... Чего?
[02:31:49.900 --> 02:31:51.900]  Делаем все веса минус один. Ну, вот.
[02:31:52.900 --> 02:31:55.900]  Ну, по-разному, да.
[02:31:56.900 --> 02:31:58.900]  Ну, я... Нет, в общем, ладно. Тут, конечно, надо таки.
[02:31:59.900 --> 02:32:04.900]  Но, скажем так, мне неизвестно более... Ну, вот. Нет, на самом деле статья состояла не только из этого.
[02:32:04.900 --> 02:32:06.900]  То есть, конечно, мясо в ней состояло в другом.
[02:32:07.900 --> 02:32:11.900]  Потому что дальше там шло подробное доказательство, как искать компоненты вершинной двусвязности.
[02:32:12.900 --> 02:32:14.900]  Вместе с точками сочленения, естественно.
[02:32:15.900 --> 02:32:18.900]  И более... Ну, вот. Нет, мостов там не было.
[02:32:19.900 --> 02:32:24.900]  А вместо этого там появилось как абсолютно тем же ДФСом найти компоненты сильной связности.
[02:32:26.900 --> 02:32:31.900]  Да, вот. Не этими вашими... Вот это как бы... Обычно, да, в олимпиадной среде компоненты сильной связности ищут двумя ДФСами.
[02:32:31.900 --> 02:32:34.900]  Это называется алгоритм Косараю.
[02:32:35.900 --> 02:32:37.900]  Да, Косараю. Фамилия такая.
[02:32:38.900 --> 02:32:39.900]  Чего?
[02:32:40.900 --> 02:32:41.900]  Косараю, Шарир.
[02:32:42.900 --> 02:32:43.900]  Ну, наверное, да. Но известно как алгоритм Косараю.
[02:32:44.900 --> 02:32:45.900]  Хотя там... Да.
[02:32:46.900 --> 02:32:48.900]  Вот. Но на самом деле есть метод Тарьяна.
[02:32:49.900 --> 02:32:53.900]  Ну, вот. То есть, на самом деле, метод Тарьяна, который позволяет это искать одним ДФСом.
[02:32:54.900 --> 02:32:58.900]  И ровно просто одной той же технологии, как искать мосты точечной сочленения и другие компоненты.
[02:32:59.900 --> 02:33:02.900]  Там он не сортирует их в порядке.
[02:33:03.900 --> 02:33:05.900]  Да ладно. Прекрасно сортирует.
[02:33:06.900 --> 02:33:10.900]  Там... Прекрасно сортирует, учитывая... Да, он их как бы...
[02:33:11.900 --> 02:33:18.900]  Потому что как бы он в каждую компоненту индуитивно входит в какую-то вершину, обходит компонент, потом выходит и ее достает.
[02:33:19.900 --> 02:33:21.900]  И там всех детей он тоже достал, поэтому это тоже топ-сорт.
[02:33:21.900 --> 02:33:23.900]  Так что нет. Прекрасно он все делает.
[02:33:24.900 --> 02:33:27.900]  Просто это как бы олимпиадникам это может не объяснять, потому что это как бы может быть немножко усложненно.
[02:33:28.900 --> 02:33:29.900]  Алгоритм легче два ДФСа написать.
[02:33:30.900 --> 02:33:33.900]  Ну, так нет. Если понимать этот алгоритм ДНДФС, то вы тоже, в общем-то, не постарает там...
[02:33:34.900 --> 02:33:35.900]  То есть, на самом деле, ничего сложного в нем нет.
[02:33:36.900 --> 02:33:38.900]  Но просто, как бы, обычно просто не заморачиваются.
[02:33:39.900 --> 02:33:40.900]  Да. Вот.
[02:33:41.900 --> 02:33:43.900]  Ну, нет. То есть, мы с вами, конечно, видимо, там в следующем семестре, но до этого тоже доживем.
[02:33:44.900 --> 02:33:45.900]  То есть, в общем-то.
[02:33:46.900 --> 02:33:47.900]  Ну, вот. Но судьба была такая. Нет.
[02:33:47.900 --> 02:33:52.900]  Ну, надеюсь, что в этой статье, конечно, ее интересно подсчитать, потому что там, как бы, очень подробные доказательства с огромным количеством лем.
[02:33:54.900 --> 02:33:58.900]  Ну, потому что, как бы, то, что нам с вами там в олимпиадной среде может быть уже очевидно, потому что мы в этом живем,
[02:33:59.900 --> 02:34:02.900]  то есть, видимо, на момент 75-го года как бы было вообще не очевидно.
[02:34:03.900 --> 02:34:07.900]  Поэтому там пришлось Тарьянов, видимо, просто очень подробно прописывать, почему это вообще...
[02:34:08.900 --> 02:34:09.900]  Почему это все вообще правда.
[02:34:10.900 --> 02:34:13.900]  То есть, судя по тому, как он прописывал, это так, это концепция нетрибиальная.
[02:34:14.900 --> 02:34:15.900]  Потому что новая.
[02:34:15.900 --> 02:34:29.360]  то есть принципиально новое вот вот так вот и так ладно веримся тут к делу не
[02:34:29.360 --> 02:34:34.040]  ну погодите нет тут как бы чтоб тут хранить фенвика ну во первых тут просто
[02:34:34.040 --> 02:34:39.760]  идея какая то есть идея такая шесть вы решили ну то есть хочется конечно делать
[02:34:39.760 --> 02:34:45.160]  тоже самое то есть в каждой вершине хранить сумму до корня только маленькая
[02:34:45.160 --> 02:34:49.600]  проблема если на каком-то ребре мы тут добавили 57 то тогда ко всем вот этим
[02:34:49.600 --> 02:34:54.160]  вершинам надо прибавить 57 следует то есть надо научиться каким-то образом ко
[02:34:54.160 --> 02:34:59.360]  всем вершинам под дерево прибавлять 57 так вот я собственно к чему вспомнил
[02:34:59.360 --> 02:35:04.880]  статью тарьяна а вспомнил я это вот к чему потому что в другой статье тарьяна
[02:35:04.880 --> 02:35:14.560]  про дфс называется дерево доминаторов вот но она тоже про дфс но немного
[02:35:14.560 --> 02:35:17.800]  другое почему это статья уже не чисто тарьяна там что-то какой-то там автор
[02:35:17.800 --> 02:35:23.500]  на л запитает ориен на самом деле стоит вот подробности не знаю но там
[02:35:23.500 --> 02:35:28.740]  предлагается сразу ли чао да ладно не не там не на европейская какая-то
[02:35:28.740 --> 02:35:34.560]  фамилия вот и там идея нет улите далее чао да это просто там просто видимо
[02:35:34.560 --> 02:35:39.720]  китайские лепеги придумал лайфхак это называется да вот так вот а там просто
[02:35:39.720 --> 02:35:43.560]  а там тарьян предлагает абсолютно официальный лайфхак и предлагает прям то
[02:35:43.680 --> 02:35:48.880]  в начале статьи так и пишется запустим дфс и переименуем вершины в порядке их
[02:35:48.880 --> 02:35:53.640]  появления входа дфс вершины просто прям вот запустим и честно пишем что вот
[02:35:53.640 --> 02:35:59.080]  вершины теперь у нас будут называться 0 1 2 3 4 5 6 7 вот то есть в нашем случае
[02:35:59.080 --> 02:36:07.000]  это называется в порядке таймына да нет нет нет нет нет нет нет или в обход это
[02:36:07.000 --> 02:36:10.280]  если бы каждый раз когда мы выходим из дфс мы бы еще раз эту вершину
[02:36:10.280 --> 02:36:14.600]  записывали вот это или в обход и он был бы тогда или и вот действительно
[02:36:14.600 --> 02:36:18.700]  похож на или охотно потому что если каждое ребро размножить вот на два
[02:36:18.700 --> 02:36:22.080]  ориентированных две стороны то это получится буквально или обход
[02:36:22.080 --> 02:36:28.840]  действительно этого графа это вот это так вот но это все-таки не совсем это не
[02:36:28.840 --> 02:36:32.320]  совсем он то есть видите это я все-таки это я бы все-таки это
[02:36:32.320 --> 02:36:38.280]  интерпретировал как перенумерацию вершин в порядке в порядке входа дфс а вот
[02:36:38.280 --> 02:36:41.760]  чем вот просто кстати в дереве доминаторов стать статья так и написано
[02:36:41.760 --> 02:36:45.360]  что давайте перенумируем в том после исходя из этого будем всякие леммы
[02:36:45.360 --> 02:36:59.840]  доказывать да это что за статья а интересно нет осуществ такого не видел
[02:36:59.840 --> 02:37:12.560]  но что делать если это было эффективно то почему бы нет но мало понятно
[02:37:12.560 --> 02:37:21.840]  это все еще лучше чем конспекции там просто написан в конспекции самый
[02:37:21.840 --> 02:37:31.680]  худший конспектор я писал своей жизни я не смог понять это он такой написал да
[02:37:31.680 --> 02:37:37.280]  да ну ладно не но философский самый тупой вариант я так скажу может быть
[02:37:37.280 --> 02:37:41.680]  самый тупой вариант это как бы там до учили а если вы учите английский то как
[02:37:41.680 --> 02:37:46.000]  бы зачем до конспекции нужен сзади оригинальную статью тарья源 потому что
[02:37:46.000 --> 02:37:50.260]  редкий ну просто так как будто то есть вот он документ и хорошо пишут на 주
[02:37:50.260 --> 02:37:53.640]  то есть как бы это считает что это одни из самых то есть обычно часто бывает
[02:37:53.640 --> 02:37:57.960]  что там на самый конкретные статьи ученых иногда читать очень сложно
[02:37:57.960 --> 02:38:01.600]  даже не потому что они там как то владеют или не владеют там языком
[02:38:01.600 --> 02:38:05.240]  англиським или еще какие-то там еще в том что понятно что скорее всего если
[02:38:05.240 --> 02:38:08.860]  не придум안 shocked на новое страшное то скорее всего там то есть они как-то
[02:38:08.860 --> 02:38:13.140]  видимо это смотрели на это ну совсем видимо с повернутой точки зрения и пока в эту точку зрения
[02:38:13.140 --> 02:38:19.500]  окончательно этот угол не поняли то скотов скорее всего там будет очень сложно это читать то есть там
[02:38:19.500 --> 02:38:25.100]  то есть ну рейкер еще далеко ходить через статья про софт хип то есть я говорю я в свое время как бы
[02:38:25.100 --> 02:38:30.180]  там пришлось много энергии потратить чтобы вообще это все как бы в курить хотя как бы как вот как
[02:38:30.180 --> 02:38:35.580]  все как мы с вами убедились то есть в общем-то не самые страшные идеи там на самом деле есть но
[02:38:35.660 --> 02:38:42.940]  наверное бывают и пострашнее не знаю вот так вот так что тут так но ну с дерево демидаторов
[02:38:42.940 --> 02:38:48.700]  мы тоже в свое время разберемся там в общем-то тоже не сильно но здесь вот такой вариант на
[02:38:48.700 --> 02:38:52.380]  самом деле ну или есть вариант что там ладно концептав ваши великие предшественники могли
[02:38:52.380 --> 02:38:55.560]  там какой-то конспект там собственно лекции писать так что может там есть конспект может
[02:38:55.560 --> 02:38:59.900]  там понятнее я не знаю ну я не знаю я никаких этих конспектов и с честно не видел поэтому
[02:38:59.900 --> 02:39:10.340]  комментарии дать не могу вот так вот ой да 34 да так вот значит зачем мы это
[02:39:10.340 --> 02:39:14.620]  делали перенумерации но оказывается что если перенумерает вершины так то
[02:39:14.620 --> 02:39:19.740]  оказывается неожиданная вещь оказывается что у любой вершины ее под
[02:39:19.740 --> 02:39:25.220]  дерева это подотрезок то есть скажем у вершины 4 ее под дерево это все вершины
[02:39:25.220 --> 02:39:33.620]  с 4 по 21 вот скажем а вот 26 из 26 по 29 то есть можно этим же дфсом эти отрезки
[02:39:33.620 --> 02:39:37.780]  сохранить и тогда получается что если вы хотите прибавить ко всем вот этим
[02:39:37.780 --> 02:39:43.180]  суммам до корня как бы число 57 то вам нужно это сделать просто на подотрезке и
[02:39:43.180 --> 02:39:46.820]  вам остается только завести дерево отрезков то есть к уже честной дерево
[02:39:46.820 --> 02:39:50.420]  отрезков с прибавлением на отрезки или даже дерево фенрика можно как бы сегодня
[02:39:50.420 --> 02:39:54.980]  убедились то есть одно дерево отрезков то есть боже упаси там какие-то
[02:39:54.980 --> 02:40:02.140]  хевилл это писать не надо да нет ну нет да безусловно шоу как только мы тут
[02:40:02.140 --> 02:40:06.860]  захотим прибавлять на пути то конечно наша полномочия тут все это безусловно
[02:40:06.860 --> 02:40:11.420]  да но хочется просто обращать внимание что есть какие-то более простые задачи
[02:40:11.420 --> 02:40:15.500]  в которых страшных структур писать не надо я говорю как человек который в
[02:40:15.500 --> 02:40:20.900]  течение года на задачу статья крыску писал на автомате дерево отрезков то
[02:40:20.900 --> 02:40:24.460]  есть как бы то есть это и сыгла это работала это там часто получала там свои
[02:40:24.460 --> 02:40:29.340]  100 баллов конечно там ну вот но как бы все-таки или там лишнее время я на это
[02:40:29.340 --> 02:40:34.580]  потратил которая мог бы не потратить вот ну или в более сложных задачах мне
[02:40:34.580 --> 02:40:42.340]  этот логарифа мокрая вот поэтому все равно хочется обращать внимание что как
[02:40:42.340 --> 02:40:46.980]  вот если у вас есть какие-то простые вещи то как бы можно это делать проще
[02:40:46.980 --> 02:40:51.100]  то есть условия чтобы отсортировать колоду карт по мастям вам не надо писать
[02:40:51.100 --> 02:41:05.100]  мерчсорт тут вот да прикиньте чего нет ну а можно в четыре стопочки разложить
[02:41:05.100 --> 02:41:12.980]  нормально подсчетом вот нет ну смотрите нет нет тут нет тот отсылка классической
[02:41:12.980 --> 02:41:15.620]  задачи вот на собеседу и вот когда не будете проходить собеседу не дайте есть
[02:41:15.620 --> 02:41:21.940]  гугловская книжка там про там типа там крейкин за код ревью называется и там вот в одном месте
[02:41:21.940 --> 02:41:26.860]  там есть если там приводит пример если вас на собеседование спрашивают вот смотрите вот как
[02:41:26.860 --> 02:41:32.180]  решать как бы вы решали задачу от сортировки то первое что вы должны делать а что сортируем
[02:41:32.180 --> 02:41:39.540]  это важно потому что он может вам лететь ну например колоду карт и тогда наверно выяснять
[02:41:39.540 --> 02:41:44.420]  что если вы там побежали писать мерчсорт то как бы было бы это не совсем точно потому что это
[02:41:44.420 --> 02:41:48.420]  явно не очень эффективно там забабакивать мерчсорта это того чтобы там от сортировать
[02:41:48.420 --> 02:41:55.500]  колоду как то особенно еще и по мастям например так что в этом смысле просто всегда то есть как
[02:41:55.500 --> 02:42:03.180]  бы не то есть сложно не нужно сложных решений там как бы где их не нужно но вот тем более что как
[02:42:03.180 --> 02:42:07.260]  бы в реальном то есть в реальном коде даже как бы иногда бывает как бы принципиально вы
[02:42:07.260 --> 02:42:12.780]  работаете за 100 миллисекунд или за 10 то есть это не там не как у нас на олимпиадах там по барабану
[02:42:12.780 --> 02:42:19.740]  да там вот может быть критично потому что но знаете эту классику да просто на уровне там половина
[02:42:19.740 --> 02:42:32.820]  зернышка в день это мало женюсь так а сколько это в год 182 с половиной зерна получается не так уж и
[02:42:32.820 --> 02:42:44.580]  мало не не женюсь вот да то есть мало кто знает но крыло как бы вот крот был программистом да так
[02:42:44.580 --> 02:42:55.220]  что нет так ребята кто хотя бы читал сказку про дюймовочку а кто смотрел советский мультик там
[02:42:55.220 --> 02:43:01.580]  вот вот вот я из него сцену пересказал там человека там как рот реально сидел вот он
[02:43:01.580 --> 02:43:18.980]  на счетах считал вот ну вот так вот ну а теперь значит давайте ну значит смотрите то есть вот
[02:43:18.980 --> 02:43:24.580]  такие задачи что прежде чем переходить прям к илайту давайте все-таки быстренько обсудим
[02:43:24.580 --> 02:43:35.380]  потому что все равно пригодится а как нам собственно искать илса но нет на самом деле так вот за
[02:43:35.380 --> 02:43:39.540]  такие бинапы на самом деле то есть они на то есть на самом деле если вы хотите искать илса
[02:43:39.540 --> 02:43:45.500]  вам хватает лагерей потом вот эти бинапы вам могут очень сильно помочь кстати но их можно
[02:43:45.500 --> 02:43:53.260]  за илоген насчитать но правда вам потребуется еще кое-что значит давайте ну как бы это давайте
[02:43:53.260 --> 02:44:03.260]  кратенько обсудим но тут на самом деле разные но сформулируем так но то есть на самом деле по
[02:44:03.260 --> 02:44:07.900]  разному можно делать то есть на самом деле тут есть как бы два способа как с помощью двоих
[02:44:07.900 --> 02:44:16.340]  подъемов найти илса первый спот но тут вот даже интересно какой популярнее но потому что да
[02:44:16.340 --> 02:44:21.460]  потому что есть но на первый способ которым я пока меня когда был школьником всегда писал был
[02:44:21.460 --> 02:44:29.380]  такой значит давайте просто бин поиском найдем до какой высоты нам надо подняться то есть но как бы
[02:44:29.380 --> 02:44:33.940]  но имеется в виду следующее что если я знаю на какой высоте находится илса то я просто из
[02:44:33.940 --> 02:44:41.220]  какой-нибудь вершины до нее поднимусь правда а теперь мы скажем как эту высоту найти а очень
[02:44:41.220 --> 02:44:49.980]  просто даны у меня вершины у и в я могу за логарифом добиться там но если у меня находится ниже давайте
[02:44:49.980 --> 02:44:55.100]  я ее подниму до высоты в но я допустим заранее буду хранить на какой глубине находится у и на
[02:44:55.100 --> 02:45:01.500]  какой глубине находится в и так вот у меня поэтому теперь я предполагаю что у и вы у меня на одной
[02:45:01.500 --> 02:45:08.660]  глубине дает но я сразу про если они совпали то надо просто их и вывести вот теперь как найти
[02:45:08.660 --> 02:45:13.820]  теперь надо найти просто бин поиском на какую минимальную высоту надо подняться чтобы у и вы
[02:45:13.820 --> 02:45:27.380]  попали в одну вершину но можно не заморачиваться сделать бин поиск залог квадрат правда но вы всем
[02:45:27.380 --> 02:45:32.380]  допустим я могу я хочу подняться на высоту аши проверить будет ли там одна вершина я беру
[02:45:32.380 --> 02:45:38.180]  залогарифом аж поднимаюсь из у подымаюсь из в сравнивый результат получается лог квадрат
[02:45:38.180 --> 02:45:48.300]  это если совсем не думать просто вот отключить мозг но если его чуть-чуть включить то оказывается
[02:45:48.300 --> 02:45:56.340]  что бин поиск двоичной подъема прекрасно сочетается потому что идея оказывается следующая вот если у
[02:45:56.340 --> 02:46:04.980]  и вы у меня не совпадают давайте я переберу все высоты вот это вот и опять от max лого до нуля и
[02:46:04.980 --> 02:46:20.260]  скажу что если у меня оказалось что там вот этот вот бинап от уэль не равен бинап от вл то что я
[02:46:20.260 --> 02:46:27.020]  говорю то я говорю что про то я тогда это торта я просто кричу то есть я их тогда под на два
[02:46:27.020 --> 02:46:38.460]  степени или поднимаюсь то есть у равно бинап от уэль в равно бинап от уэль от вл пардон и тогда
[02:46:38.460 --> 02:46:46.860]  в результате этого форика я поднимаюсь куда нет я не поднимаюсь волца я утверждаю что я поднимусь
[02:46:46.860 --> 02:46:56.820]  что я как бы подойду из у и в я подойду вплотную к лца потому что можно доказать инвариант что
[02:46:56.820 --> 02:47:04.980]  после каждой итерации эля расстояние от у до в не превосходит расстояние от у до лца ну и
[02:47:04.980 --> 02:47:12.020]  соответственно от вл до лца не превосходит два степени л но это просто легко это просто легко
[02:47:12.020 --> 02:47:20.340]  доказать по индукции нет ровно может быть потому что концентрано будет два степени ноль но то есть
[02:47:20.340 --> 02:47:25.900]  изначально это так потому что max лог берется достаточно большим да а так дальше у нас два
[02:47:25.900 --> 02:47:30.460]  варианта либо это расстояние меньше и два в степени следующий тогда у нас тут получается равенство
[02:47:30.460 --> 02:47:37.660]  да вот но да но получается тут равенство и мы не поднимаемся либо оно получается чуть больше
[02:47:37.660 --> 02:47:51.340]  и тогда получается мы сокращаем это расстояние на два степени да ну где-то можно и так
[02:47:51.340 --> 02:47:59.580]  интерпретировать да вот да ну и в конце мы пишем конечно return там там так сказать ну я
[02:47:59.580 --> 02:48:08.340]  напишу parent ату хотя понятно берем это будет бина по ту ноль но это уже другое вот то есть
[02:48:08.340 --> 02:48:13.300]  принципе это один способ то есть обратить внимание даже искать эту высоту аши подниматься не
[02:48:13.300 --> 02:48:18.820]  потрясать надо пришлось подняться за логарифом здесь и погиб сюда проявится что в начале
[02:48:18.820 --> 02:48:25.780]  конечно пришлось сказать что там если ашату как всегда там стандартный лайфхак что если ашату
[02:48:25.780 --> 02:48:36.460]  меньше чем ашату это делаем свапату в ну и у равно там л аку от у и там ашату минус ашату
[02:48:36.460 --> 02:48:52.940]  и потом после этого вот это да да да да если у равно в то ретурн ретурн у да то есть вот в
[02:48:52.940 --> 02:48:58.220]  общем-то примерно так полный код и выглядит да но как всегда позже упроси вас тут это какое-то
[02:48:58.220 --> 02:49:05.020]  два случая прям копипасты писать да то есть вот есть вот этот вот стандартный хак да что как бы
[02:49:05.060 --> 02:49:12.580]  вы можете вершины свапать вот то есть это один способ но я вот я всегда писал так но есть
[02:49:12.580 --> 02:49:19.220]  второй то есть ну не то чтобы он вот то есть можно где-то он даже лучше хотя хотя тут сам не
[02:49:19.220 --> 02:49:24.620]  на самом деле они там по эффективности одинаковая но затронет мы затронем мы немножко другое
[02:49:24.620 --> 02:49:32.060]  смотрите альтернатив сейчас вот это уберу так поэтому по этому способа просто есть нет от
[02:49:32.060 --> 02:49:43.420]  вот значит альтернативная версия альтернативная версии я альтернативная версия звучит так
[02:49:43.420 --> 02:49:55.300]  мы заведем внимание значит мы заведем мистич значит опера нам захочется отвечать на такой
[02:49:55.300 --> 02:50:03.780]  запрос как из энцестер тоже полезно обсудить что вот такая штука тоже есть данные две вершины
[02:50:04.220 --> 02:50:15.900]  скажите пожалуйста является ли у предком не родителем а предком в да или нет да а тогда
[02:50:15.900 --> 02:50:26.220]  легко нет как мы уже говорили любая вершина является своим предком и своим потомком но
[02:50:26.220 --> 02:50:32.860]  не является своим родителем ребенка у нас у нас договоренности такие да
[02:50:32.860 --> 02:50:41.700]  спрашивается как решать такую задачу но вот но оказывается решать такую задачу достаточно
[02:50:41.700 --> 02:50:46.460]  но оказывается достаточно просто то есть можно сделать как бы у этой задачи легко сделать
[02:50:46.460 --> 02:50:54.220]  предподсчет за линию и отвечать на запросы за вот единицы классичный вот то есть там
[02:50:54.220 --> 02:51:02.860]  но то есть классический метод звучит так то есть давайте я начито я буду насчитывать время
[02:51:02.860 --> 02:51:12.820]  входа вершину и буду насчитывать время выхода то есть тут у меня будет 0 1 2 и тут же запятая 3 тут
[02:51:12.820 --> 02:51:23.820]  у меня будет 4 5 тот у меня будет там 6 тут там 7 8 тут будет 9 10 11 12 запятая 13
[02:51:23.820 --> 02:51:32.300]  14 запятая 15 тут уже будет запятая 16 тут будет там 17 там ладно забирай вперед 20 потому
[02:51:32.300 --> 02:51:39.740]  что тут будет 18 19 тот будет запятая 21 у принципа поняли да то есть тут не надо подробнее запить
[02:51:39.740 --> 02:51:45.700]  но отрасписать то есть суть оказывается в том что как бы то есть эти отрезок таймин тайм
[02:51:45.700 --> 02:51:51.420]  он обладает таким суть что если вот у этой вершины есть отрезок таймин тайм аут то всего и у всех
[02:51:52.340 --> 02:52:01.080]  их таймин тайм аут вложен в таймин тайм аут этой вершины вот то есть как бы поэтому понять
[02:52:01.080 --> 02:52:07.100]  являет но вот а для всех остальных это не верно потому что как бы для предков это верку у предков
[02:52:07.100 --> 02:52:11.940]  получается надо отрезок такой более широкий а у всех остальных отрезки просто не пересекаются
[02:52:11.940 --> 02:52:39.940]  Поэтому из Ancestor получается, что, то есть здесь как бы код, то есть окажется, то есть там функция bool оказывается просто, там return, return там, time in от u меньше либо равен, time in от v, end, end, time out от v меньше либо равен, time in от u и end.
[02:52:39.940 --> 02:52:47.940]  От u и в общем-то все. То есть классический метод такой, то есть я не знаю, может кто-то там побежал.
[02:52:48.940 --> 02:53:06.940]  Чего? Молодцы, молодцы, так, да, так, конечно, вот, вот, хорошо. Я еще думал тут вою посвапать.
[02:53:06.940 --> 02:53:18.940]  Вот, окей, хорошо. Теперь у нас есть такая мистическая функция, которая потребовала от нас два массива. То, что нам еще делать? То как нам теперь искать LCA?
[02:53:18.940 --> 02:53:28.940]  Ну, теперь оказывается буквально тем же бинпоиском, но можно, оказывается, искать так, то допустим, у меня вот есть u и v.
[02:53:28.940 --> 02:53:40.940]  Допустим, мы выяснили, что u не является предком v. Тогда идея такая, надо из u подняться на такую минимальную высоту, чтобы попасть в предка вершины v, правда?
[02:53:40.940 --> 02:53:53.940]  Но идея заключает в том, что это можно делать абсолютно тем же бинпоиском. То есть там поднимаемся, понятно, код опять же пишется буквально так же.
[02:53:53.940 --> 02:54:03.940]  То есть там звучит так. То есть вот давайте я только напишу int, там допустим, LCA от u, v. Значит, пишем.
[02:54:03.940 --> 02:54:18.940]  Ну, во-первых, так, ну давайте так, отсечем сразу такие тривиальные случаи. Если из ancestor от u, v, то просто сразу выбрасываемся с криком u.
[02:54:18.940 --> 02:54:37.940]  Вот. У-у-у. Да, красиво. Ну а что, так что? На самом деле нет. Вот. Можно, в принципе, если очень хочется сократить, можно то же самое и для v написать, но уже не обязательно.
[02:54:37.940 --> 02:55:03.940]  Дальше звучит так. Пишем опять for L равно там max log 0, if не из ancestor от binup от u, v, то значит тогда пишем u равно этому binup.
[02:55:03.940 --> 02:55:16.940]  То есть ровно по тем же причинам окажется, что в результате этого кода u находится в одном шаге от вожделенного ответа и поэтому пишем, что надо вернуть тупо родителя вершины u.
[02:55:16.940 --> 02:55:35.940]  Все. То есть вот еще такой красивый метод есть. Ну, пожалуй, мне он тоже может чуть-чуть больше нравится, хотя иногда полезно понимать оба.
[02:55:35.940 --> 02:55:45.940]  Нет, но то два варианта. Либо вы тратите два масси. Да нет, либо вы поднимаете tmta, либо вы там больше скачете двоичными подъемами с двух сторон.
[02:55:45.940 --> 02:56:03.940]  Так что да, то есть нет, но более логично это, но это как бы зависит от конкретного вашего способа мышления на самом деле. Нет, нет, я по-своему скажу, что его рассказывают чаще, потому что возможно там как бы новичкам с нуля вот это вот рассказать проще.
[02:56:03.940 --> 02:56:26.940]  Я не знаю, я в последнее время, кстати, новичкам с нуля рассказываю именно это. То есть как бы да, то есть тот нот. То есть я не помню, потому что Волкыша, я не помню, как мне это рассказывали, потому что я помню, что там возник пояс лкца, но там, видимо, там после каких-то пары слов там вот первый метод у меня там в голове сразу возник.
[02:56:26.940 --> 02:56:39.940]  Ну вот, но там, насколько, но правда там этим вот никто не баловался. То есть я там только недавно обратил внимание, что вот так на самом деле можно. Ну то есть просто простая вещь, что просто она мне как-то в жизни вот сама по себе как-то вот ни разу не была нужна.
[02:56:39.940 --> 02:56:50.940]  Ну вот так получилось. Ну вот, но вот, но вот действительно так полезно и на самом деле вот показывать бин поиск иногда будет полезно. Впрочем, на вкус, в общем, опять же на вкус и цвет, как всегда, фломастеры разные.
[02:56:50.940 --> 02:57:09.940]  Вот. И так, то есть вот так вот можно искать лца, если мы его ищем за логорифом. Да, но приятность заключается в том, что когда мы ищем так лца за лгорифами такими вот двоичными подъемами, то выясняется, что мы тут попутно еще какие-то что-то там на отрезке находить можем.
[02:57:09.940 --> 02:57:23.940]  Вот, но, конечно же, лца нам, если наша задача найти лца просто как само по себе лца, то, конечно же, мы его попробуем найти быстрее. Ну желательно это как-то за вот единиц.
[02:57:23.940 --> 02:57:42.940]  Вот, но да, но действительно, как у нас классический способ, но оказывается, что действительно можно пойти в эту же сторону и свести задачу лца к задаче статик РМКУ.
[02:57:42.940 --> 02:58:06.940]  Да, можно сказать даже плюс-минус один. Нет, это классический способ. Не-не-не, это не дальше, это называется, что вы захотите с этим делать, потому что, как вы смотрите, нет, смотрите, давайте не путать сведение к задаче и решение задач.
[02:58:06.940 --> 02:58:18.940]  Потому что, как вы, само по себе сведение задачи на самом деле делается даже не за НЛОГН, как мы говорили раньше, а за линию общей мечты.
[02:58:18.940 --> 02:58:30.940]  Ну, в чем у нас идея? Ну, идея у нас на самом деле такая. Так, давайте этот дерево поменьше нарисую, а то не проиллюстрируешь даже.
[02:58:30.940 --> 02:58:49.940]  Сейчас увидите. Сейчас увидите. Вот. Значит, да, но красивое дерево.
[02:58:49.940 --> 02:58:59.940]  Вот какое-нибудь вот такое. Так, чтобы мы не путались, я сейчас я переименую его вершины. Ну, как их переименовать? Ну, как всегда.
[02:59:19.940 --> 02:59:29.940]  У, фау, в, там, вот это вот. Ну, что, не учили в детстве немецкие разведения? Какой безобразие. Вот, неважно.
[02:59:29.940 --> 02:59:35.940]  Так вот. Нет, ну, на самом деле нет. Почему я, то есть, почему я переименовал их именно буквками?
[02:59:35.940 --> 02:59:45.940]  Ну, потому что нам сейчас, как бы, потому что я тут напишу один ряд буквок и ряд чиселок. И как бы я, как бы, хочется, чтобы мы не путали номера вершин и их глубины.
[02:59:45.940 --> 03:00:00.940]  Чего? Да нет, нормально. Вот. Значит, смотрите. Идея у меня такая. Я вот сейчас я запускаю ДФС и запишу то, что обычно называется эллеров обход дерева.
[03:00:00.940 --> 03:00:10.940]  Запишу я его так. То есть, я буду запущу ДФС, но каждый раз, когда я попадаю в вершину, неважно, сверху или снизу, я буду записывать.
[03:00:11.940 --> 03:00:24.940]  Получится примерно следующее. H, D, значит, иду A, возвращаемся, снова пишем D, потом тут опять R, D, H, дальше F, S, F.
[03:00:24.940 --> 03:00:44.940]  О, и начинается мясо. Так, значит, L, E, M, E, O, E, Q, E, L, C. Так это мы сотрем. L, F, H, B. Что там дальше?
[03:00:44.940 --> 03:00:54.940]  J, K, J, B, G, P, I, P, N, P, G, B, H.
[03:00:54.940 --> 03:01:03.940]  Как легко убедиться, записал я тут всего лишь два N плюс один буковок, два N минус один буковок.
[03:01:03.940 --> 03:01:09.940]  Но я написал первую букву H, а дальше я по каждому ребро прошелся два раза, поэтому их всего два N минус один.
[03:01:09.940 --> 03:01:15.940]  Но теперь у меня идея, а давайте-ка я тут напишу под каждой буковкой, я еще напишу ее глубину.
[03:01:15.940 --> 03:01:43.940]  Получится 0, 1, 2, 1, 2, 1, 0, 1, 2, 1, 2, 3, 4, 3, 4, 3, 4, 3, 2, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 0.
[03:01:43.940 --> 03:01:48.940]  Так вот, я написал еще такой массив высот.
[03:01:48.940 --> 03:01:57.940]  Так вот, теперь у меня задача. Я хочу найти, допустим, L у вершины K, какой-нибудь там и вершины P.
[03:01:57.940 --> 03:02:02.940]  Ну, например. Так вот, оказывается, идея очень простая.
[03:02:02.940 --> 03:02:09.940]  Я найду в этом массиве первое вхождение вершины K и первое вхождение вершины P.
[03:02:09.940 --> 03:02:21.940]  Рассмотрю подотрезок между ними и найду минимум по высоте на этом подотрезке.
[03:02:21.940 --> 03:02:25.940]  Утверждение. Это LCA.
[03:02:25.940 --> 03:02:33.940]  Чего? Доказательства? Поехали.
[03:02:33.940 --> 03:02:38.940]  Действительно, да. На экзамене может оказаться не очевидно.
[03:02:38.940 --> 03:02:41.940]  А доказательства при этом не сильно сложные.
[03:02:41.940 --> 03:02:48.940]  Итак, смотрите. Жила была вершина условно K и вершина условно P.
[03:02:48.940 --> 03:02:52.940]  И было, ну, допустим, пока сейчас для простоты, что...
[03:02:52.940 --> 03:02:56.940]  Рассмотрим общий случай, когда K и P редкими потомками друг друга не являются.
[03:02:56.940 --> 03:03:03.940]  И вот жила была LCA. Вот оно, да?
[03:03:03.940 --> 03:03:14.940]  И причем, да, то есть было LCA как минимум два дерева, в одном из которых лежало K, в другом лежало P, а еще там попутно могли еще быть какие-то деревья.
[03:03:14.940 --> 03:03:19.940]  Вот. Так вот. Значит, что произошло?
[03:03:19.940 --> 03:03:25.940]  Шел тут DFS себе, шел, шел, шел, шел. И в какой-то момент пришел вершина LCA.
[03:03:25.940 --> 03:03:29.940]  Конечно, это произошло раньше, чем он пришел в K и P, правда?
[03:03:29.940 --> 03:03:37.940]  Но теперь заметим следующее, что мы тут... Было время, когда мы вошли в LCA, и было время, когда мы вышли из LCA.
[03:03:37.940 --> 03:03:43.940]  Заметим, что все вхождения K и P были между этими двумя моментами времени, правда?
[03:03:43.940 --> 03:03:56.940]  Следовательно, уже из этого можно сделать вывод, что, во-первых, все глубины, то есть все глубины между входом в это и выходом были не меньше, чем вот эта LCA, правда?
[03:03:56.940 --> 03:04:03.940]  То есть следовательно, то, что мы найдем по глубине, будет как бы... будет по глубине не меньше, чем сама LCA.
[03:04:03.940 --> 03:04:10.940]  Да, и будет эта вершина под дерево LCA. Остается только убедить, что это будет самая LCA, а не какой-нибудь под дерево.
[03:04:10.940 --> 03:04:16.940]  Но здесь это... Ну, здесь по-разному можно сформулировать, почему это очевидно, но суть, на самом деле, такая.
[03:04:16.940 --> 03:04:26.940]  Можно заметить следующее, что между любые... Если я возьму тут две вершины любые в любой позиции, то мы заметим, что последовательный вершин между ними – это путь.
[03:04:26.940 --> 03:04:30.940]  Это путь в дереве, правда? Не обязательно простой, но путь.
[03:04:30.940 --> 03:04:37.940]  Но заметим, что мы как бы все пути из K в P вот эту LCA по-любому содержат, правда?
[03:04:37.940 --> 03:04:42.940]  То есть следовательно, где-то между K и P обязательно сама эта вершина возникнет.
[03:04:42.940 --> 03:04:48.940]  Поэтому она будет минимумом по глубине, а других вершин по глубине минимумов нет.
[03:04:48.940 --> 03:04:52.940]  То есть, может быть, там этих минимумов будет несколько, но они будут соответствовать одной и той же вершине.
[03:04:54.940 --> 03:04:56.940]  Вот, собственно, и все доказательство.
[03:04:56.940 --> 03:05:01.940]  Вот.
[03:05:05.940 --> 03:05:06.940]  Чего?
[03:05:06.940 --> 03:05:17.940]  Вот. То есть так вот получается, что теперь у нас задача, дано просто массив, вот просто дано RMQ, то есть просто дан массив, надо на нем найти минимум, и он статический.
[03:05:17.940 --> 03:05:20.940]  Почему это называется RMQ плюс-минус один?
[03:05:20.940 --> 03:05:26.940]  Потому что у этого массива есть еще и дополнительное свойство, что любые два соседних элемента отличаются на плюс-минус один.
[03:05:26.940 --> 03:05:30.940]  Это нам будет помогать когда-нибудь.
[03:05:30.940 --> 03:05:40.940]  Потому что в простой олимпиадной версии, конечно, говорят в этом месте, а давайте мы просто, чтобы искать минимум за О от единицы, давайте тупо насчитаем с парсы.
[03:05:40.940 --> 03:05:44.940]  Ну, господи, что еще делать?
[03:05:45.940 --> 03:05:56.940]  Ну, просто насчитаем с парсы за N лог N и после этого будем искать за О от единицы минимумы, то есть единственная там оговорка, что нужно искать не просто минимум, а его конкретную позицию.
[03:05:56.940 --> 03:06:01.940]  Но это уже как бы детали реализации, ничего сложного в этом нету.
[03:06:02.940 --> 03:06:04.940]  Вот, понятно, да?
[03:06:05.940 --> 03:06:06.940]  Чего?
[03:06:06.940 --> 03:06:07.940]  Каву.
[03:06:07.940 --> 03:06:09.940]  Каву и писать?
[03:06:10.940 --> 03:06:13.940]  А, с СНМчиком?
[03:06:13.940 --> 03:06:17.940]  Да, но это если он в офлайне.
[03:06:18.940 --> 03:06:22.940]  Чаще бывает онлайн, но на самом деле это не важно, у нас есть в фарах Колтон Бендер.
[03:06:22.940 --> 03:06:23.940]  Да.
[03:06:23.940 --> 03:06:24.940]  Вот.
[03:06:24.940 --> 03:06:27.940]  Нет, но я вам так честно скажу, я пока...
[03:06:27.940 --> 03:06:28.940]  Нет.
[03:06:28.940 --> 03:06:29.940]  Чего?
[03:06:30.940 --> 03:06:32.940]  Ну, это другой вопрос, да.
[03:06:32.940 --> 03:06:39.940]  Но правда, но правда честно, сейчас его рассказывать не хочется, потому что на самом деле это является просто применением метода четырех русских.
[03:06:40.940 --> 03:06:43.940]  И вот, понятно, но как бы метод четырех русских...
[03:06:43.940 --> 03:06:44.940]  Чего?
[03:06:47.940 --> 03:06:49.940]  Так, во-первых, нет никакого фара...
[03:06:49.940 --> 03:06:51.940]  Во-первых, зачем с того, что нет никакого фараха?
[03:06:51.940 --> 03:06:53.940]  Есть фарах Колтон.
[03:06:53.940 --> 03:06:55.940]  Это двойная фамилия.
[03:06:55.940 --> 03:06:58.940]  Да, не спрашивайте, почему, там совсем страшно.
[03:06:58.940 --> 03:07:00.940]  Второй Бендер.
[03:07:00.940 --> 03:07:03.940]  Во-вторых, они не линуты, во-вторых, это не русские.
[03:07:04.940 --> 03:07:10.940]  Значит, нет, четыре русских, на которые в том числе они ссылаются, имеют более простые русские фамилии.
[03:07:10.940 --> 03:07:12.940]  Значит, Динец.
[03:07:16.940 --> 03:07:23.940]  Значит, Динец, потом Кронрат, Фараджев, Орлазаров.
[03:07:26.940 --> 03:07:27.940]  Да ладно.
[03:07:27.940 --> 03:07:29.940]  Орлазарова, по-моему, даже...
[03:07:29.940 --> 03:07:32.940]  Нет, по-моему, там был Орлазарова, даже Сергей зовут, насколько я помню.
[03:07:33.940 --> 03:07:35.940]  Ну, вот и так далее.
[03:07:35.940 --> 03:07:37.940]  Нет, я нельзя по...
[03:07:37.940 --> 03:07:39.940]  А, нет, хотя нет, он по-моему...
[03:07:39.940 --> 03:07:48.940]  Хотя нет, я вот недавно тут пересматривал свои документы, обнаружил, что что-то в дипломе об окончании аспирантуры, там написано, предведатель реквизиционной комиссии В.Л. Орлазаров.
[03:07:48.940 --> 03:07:52.940]  Так что есть вероятность, что тот самый, да.
[03:07:52.940 --> 03:08:00.940]  Нет, потому что нет, я был известен примерно несколько лет назад, Орлазаров вполне себе там был в Москве, имел там какое-то прямое отношение, как минимум, к Миссису, так что...
[03:08:00.940 --> 03:08:02.940]  То есть абсолютно...
[03:08:02.940 --> 03:08:06.940]  Так что тут это, то есть это абсолютно реальный человек.
[03:08:06.940 --> 03:08:07.940]  Да.
[03:08:07.940 --> 03:08:17.940]  Нет, знаете, там вообще, когда начинаете там заниматься как-то наукой, иногда магия, потому что обычно, когда вы там читаете там, Пифагор, Каши, да, это какие-то вот стра... умные дяди, которые когда-то жили и умерли, да.
[03:08:17.940 --> 03:08:23.940]  А потом занимаетесь современной наукой, приезжаете на конференцию, представляете, что все эти люди, это абсолютно реально живые и вообще действующие люди, да.
[03:08:23.940 --> 03:08:27.940]  Которые там с вами могут это еще и с удовольствием обсудить.
[03:08:28.940 --> 03:08:33.940]  Ефим Динец живой и работает в Израиле.
[03:08:33.940 --> 03:08:35.940]  Ну а чего бы нет.
[03:08:35.940 --> 03:08:38.940]  Да, Ефим Динец, да, ну вот.
[03:08:38.940 --> 03:08:40.940]  Так что вот так.
[03:08:45.940 --> 03:08:46.940]  Внезапно.
[03:08:46.940 --> 03:08:47.940]  Ну ладно.
[03:08:47.940 --> 03:08:50.940]  Не, ну может я вам скажу поддельно, конечно, доказали, что он там...
[03:08:50.940 --> 03:08:53.940]  Не, ну я не знаю там, хотя это странно, но ладно.
[03:08:53.940 --> 03:08:54.940]  Разберемся отдельно.
[03:08:54.940 --> 03:08:55.940]  Вот.
[03:08:55.940 --> 03:08:58.940]  Не, ну может там не было официально.
[03:08:58.940 --> 03:08:59.940]  Так.
[03:08:59.940 --> 03:09:00.940]  Ладно.
[03:09:00.940 --> 03:09:02.940]  Значит, это мы обсудили, значит, как у нас...
[03:09:02.940 --> 03:09:04.940]  Значит, это мы обсудили, как из Кателса.
[03:09:04.940 --> 03:09:11.940]  Обсудили, значит, какие вот базовые задачи просто вот на тему Риску и Рымку можно решать без всяких Хевилайтов.
[03:09:11.940 --> 03:09:17.940]  Но боюсь, что, видимо, сейчас придется сделать перерыв, после которого Хевилайт придется все-таки ввести.
[03:09:17.940 --> 03:09:19.940]  Итак, Хевилайт.
[03:09:19.940 --> 03:09:21.940]  Значит, смотрите.
[03:09:22.940 --> 03:09:23.940]  Значит, смотрите.
[03:09:23.940 --> 03:09:29.940]  Так что же делать, если нам все-таки хочется изменять что-то на отрезке, в том числе и присваивать,
[03:09:29.940 --> 03:09:33.940]  там суммы всякие искать или минимумы, что-то еще в этом роде.
[03:09:33.940 --> 03:09:37.940]  Мы это умеем с вами делать только на массивах.
[03:09:37.940 --> 03:09:38.940]  Что такое массив?
[03:09:38.940 --> 03:09:41.940]  Ну это бамбук такой, по сути, да?
[03:09:41.940 --> 03:09:47.940]  Хочется разбить дерево как-то на бамбуке так, чтобы как бы было все как-то красиво.
[03:09:47.940 --> 03:09:49.940]  Но как же это сделать?
[03:09:49.940 --> 03:09:51.940]  Но как же это сделать?
[03:09:51.940 --> 03:09:53.940]  Ну на самом деле декомпозиции много.
[03:09:53.940 --> 03:09:55.940]  Как мы с вами, возможно, в следующий раз убедимся там.
[03:09:55.940 --> 03:09:59.940]  Декомпозировать дерево на пути можно инцитю способами.
[03:09:59.940 --> 03:10:01.940]  Чего?
[03:10:01.940 --> 03:10:05.940]  Чего? Ну че, лонгеспресс, ледер, да.
[03:10:05.940 --> 03:10:07.940]  Вот.
[03:10:07.940 --> 03:10:09.940]  Так что как минимум, да.
[03:10:09.940 --> 03:10:11.940]  Вот это вся классика.
[03:10:11.940 --> 03:10:14.940]  Вот. Но сейчас у нас все попроще.
[03:10:14.940 --> 03:10:17.940]  Потому что дело в том, что есть у нас есть подвешенное дерево.
[03:10:17.940 --> 03:10:19.940]  Просто какое-нибудь абсолютно произвольное дерево.
[03:10:19.940 --> 03:10:27.940]  Ну, как вы уже догадываетесь, у каждой вершины можно насчитать такую величину, как СЗ от В.
[03:10:27.940 --> 03:10:29.940]  Что такое СЗ от В?
[03:10:29.940 --> 03:10:31.940]  Ну количество вершин в поддереве.
[03:10:31.940 --> 03:10:33.940]  Считая себя любимую, естественно.
[03:10:33.940 --> 03:10:39.940]  Ну понятно, практически любой задачи на дереве, наверное, без подсчета СЗшки не обойдется.
[03:10:39.940 --> 03:10:45.940]  Ну там, например, в 95% случаев СЗшку вам написать придется в том или ином виде.
[03:10:45.940 --> 03:10:47.940]  Вот.
[03:10:47.940 --> 03:10:52.940]  Тут какая-то вот такая красота, там вот это все, вот это, вот это, вот это.
[03:10:52.940 --> 03:10:54.940]  Допустим.
[03:10:54.940 --> 03:10:56.940]  Допустим.
[03:10:56.940 --> 03:10:58.940]  Вот.
[03:10:58.940 --> 03:11:00.940]  Вот.
[03:11:00.940 --> 03:11:07.940]  Но, значит, соответственно, теперь у нас появляется неожиданное свойство.
[03:11:07.940 --> 03:11:09.940]  Значит, определение.
[03:11:09.940 --> 03:11:14.940]  Значит, пусть у меня У равно parent от В.
[03:11:17.940 --> 03:11:21.940]  Тогда ребро УВ.
[03:11:24.940 --> 03:11:26.940]  Говорим мы внезапно.
[03:11:26.940 --> 03:11:28.940]  Тяжелое.
[03:11:31.940 --> 03:11:33.940]  Прям вот красенький мы будем писать.
[03:11:33.940 --> 03:11:35.940]  Тяжелое.
[03:11:39.940 --> 03:11:48.940]  Если СЗ от В больше либо равно, чем 1 вторая СЗ от У.
[03:11:48.940 --> 03:11:49.940]  Да.
[03:11:49.940 --> 03:11:51.940]  Тяжелое капсом, естественно, пишем, да.
[03:11:53.940 --> 03:11:55.940]  Вот.
[03:11:55.940 --> 03:11:57.940]  Ну вот.
[03:11:59.940 --> 03:12:01.940]  Ну вот.
[03:12:01.940 --> 03:12:04.940]  И, соответственно, легкое.
[03:12:06.940 --> 03:12:08.940]  Иначе.
[03:12:09.940 --> 03:12:11.940]  Вот.
[03:12:15.940 --> 03:12:16.940]  Вот.
[03:12:16.940 --> 03:12:20.940]  Ну, собственно, к чему же это нас приводит.
[03:12:20.940 --> 03:12:26.940]  Так, ну давайте попробуем вот на этом дереве изобразить, какие у нас ребра тяжелые, какие легкие.
[03:12:26.940 --> 03:12:28.940]  Ну, заметим, да, что...
[03:12:28.940 --> 03:12:32.940]  Так, ну вот такое ребро у нас тяжелое явно.
[03:12:32.940 --> 03:12:33.940]  Вот.
[03:12:33.940 --> 03:12:35.940]  Вот это вот, конечно, тяжелое, да.
[03:12:35.940 --> 03:12:38.940]  Потому что тут размер под дерево 6, а тут 3.
[03:12:38.940 --> 03:12:40.940]  Вот.
[03:12:40.940 --> 03:12:42.940]  Вот.
[03:12:42.940 --> 03:12:46.940]  Здесь у нас вот это вот легенькое ребро.
[03:12:46.940 --> 03:12:48.940]  Легенькое, как промышленность.
[03:12:48.940 --> 03:12:50.940]  Вот.
[03:12:51.940 --> 03:12:53.940]  Так, вот.
[03:12:54.940 --> 03:12:56.940]  Так, что оно легонькое.
[03:12:56.940 --> 03:12:57.940]  Вот.
[03:12:57.940 --> 03:12:59.940]  Так.
[03:12:59.940 --> 03:13:00.940]  Так, ну что мы видим.
[03:13:00.940 --> 03:13:02.940]  Так, ну тут по дереве явно меньше элементов.
[03:13:02.940 --> 03:13:04.940]  Да, тут как бы.
[03:13:04.940 --> 03:13:06.940]  Да, вот так вот можно.
[03:13:06.940 --> 03:13:08.940]  Ну и давайте сразу.
[03:13:08.940 --> 03:13:09.940]  Так.
[03:13:09.940 --> 03:13:11.940]  Я знаю, как оптимизировать процесс.
[03:13:14.940 --> 03:13:15.940]  О.
[03:13:15.940 --> 03:13:17.940]  Сейчас краснота будет.
[03:13:17.940 --> 03:13:18.940]  Вот.
[03:13:18.940 --> 03:13:19.940]  Так.
[03:13:19.940 --> 03:13:21.940]  А вот это ребро тяжелое или нет, кстати?
[03:13:21.940 --> 03:13:22.940]  Да.
[03:13:22.940 --> 03:13:23.940]  А, вы уже...
[03:13:23.940 --> 03:13:24.940]  А, вы уже...
[03:13:24.940 --> 03:13:25.940]  Да, вы уже посчитали?
[03:13:25.940 --> 03:13:26.940]  Окей.
[03:13:26.940 --> 03:13:27.940]  Хорошо.
[03:13:28.940 --> 03:13:29.940]  Да.
[03:13:29.940 --> 03:13:31.940]  А прям надо, да?
[03:13:31.940 --> 03:13:33.940]  По картинке видно.
[03:13:33.940 --> 03:13:34.940]  Не, ну не факт.
[03:13:34.940 --> 03:13:35.940]  Нет, ну...
[03:13:35.940 --> 03:13:36.940]  Я бы так сказал.
[03:13:36.940 --> 03:13:38.940]  Смотрите, на самом деле это нужно только для корня,
[03:13:38.940 --> 03:13:40.940]  поэтому нет особого смысла.
[03:13:40.940 --> 03:13:41.940]  Вот.
[03:13:41.940 --> 03:13:42.940]  Вот.
[03:13:42.940 --> 03:13:43.940]  Ну, давайте так.
[03:13:43.940 --> 03:13:45.940]  Давайте вот для простоты скажем шут.
[03:13:51.940 --> 03:13:53.940]  Ну, нет, на самом деле.
[03:13:53.940 --> 03:13:55.940]  Вот это да.
[03:13:55.940 --> 03:13:56.940]  Ну, вот вообще так.
[03:13:56.940 --> 03:13:58.940]  Вот это не факт.
[03:13:58.940 --> 03:14:00.940]  А вот это точно да.
[03:14:00.940 --> 03:14:03.940]  Потому что если у вершины есть только один ребенок,
[03:14:03.940 --> 03:14:06.940]  то это ребро в него тяжелое автоматически.
[03:14:07.940 --> 03:14:08.940]  Вот.
[03:14:09.940 --> 03:14:10.940]  Так.
[03:14:10.940 --> 03:14:11.940]  Так.
[03:14:12.940 --> 03:14:13.940]  Что тут еще?
[03:14:13.940 --> 03:14:14.940]  Так.
[03:14:14.940 --> 03:14:15.940]  Ну, это вроде тяжелее.
[03:14:16.940 --> 03:14:17.940]  Так.
[03:14:17.940 --> 03:14:18.940]  Это у нас вот так вот.
[03:14:18.940 --> 03:14:19.940]  Так.
[03:14:19.940 --> 03:14:20.940]  Что тут у нас еще?
[03:14:20.940 --> 03:14:21.940]  Так еще вот так вот.
[03:14:21.940 --> 03:14:22.940]  И...
[03:14:22.940 --> 03:14:24.940]  А вот тут, конечно, не факт.
[03:14:25.940 --> 03:14:26.940]  Ну, это ладно.
[03:14:26.940 --> 03:14:27.940]  Не важно пока.
[03:14:27.940 --> 03:14:28.940]  Ладно.
[03:14:28.940 --> 03:14:29.940]  Важно пока другое.
[03:14:29.940 --> 03:14:31.940]  Значит, мы давайте вот тут рисуем, рисуем, рисуем, рисуем.
[03:14:31.940 --> 03:14:32.940]  Так.
[03:14:32.940 --> 03:14:33.940]  Что тут больше?
[03:14:33.940 --> 03:14:34.940]  Так.
[03:14:34.940 --> 03:14:35.940]  Три, три.
[03:14:35.940 --> 03:14:36.940]  Ну, тут больше.
[03:14:36.940 --> 03:14:37.940]  Да.
[03:14:37.940 --> 03:14:38.940]  Вы смотрите.
[03:14:38.940 --> 03:14:39.940]  Да.
[03:14:39.940 --> 03:14:40.940]  Тут три, шесть.
[03:14:40.940 --> 03:14:41.940]  А тут раз, два, три, четыре, пять, шесть.
[03:14:41.940 --> 03:14:42.940]  Ура.
[03:14:42.940 --> 03:14:43.940]  Боевая ничь.
[03:14:43.940 --> 03:14:44.940]  Да.
[03:14:44.940 --> 03:14:45.940]  А всего три.
[03:14:45.940 --> 03:14:46.940]  А всего тринадцать.
[03:14:46.940 --> 03:14:47.940]  Следовательно.
[03:14:47.940 --> 03:14:48.940]  Вот так.
[03:14:48.940 --> 03:14:49.940]  Ну, на самом деле да.
[03:14:49.940 --> 03:14:50.940]  Кто-то Хавилайт по-другому пишет.
[03:14:50.940 --> 03:14:51.940]  Да.
[03:14:51.940 --> 03:14:52.940]  Можно.
[03:14:52.940 --> 03:14:54.940]  Но это другое определение.
[03:14:54.940 --> 03:14:55.940]  Вот.
[03:14:55.940 --> 03:14:56.940]  Ну.
[03:14:56.940 --> 03:14:57.940]  Да.
[03:14:57.940 --> 03:14:58.940]  Идейно ничего.
[03:14:58.940 --> 03:14:59.940]  Да.
[03:14:59.940 --> 03:15:00.940]  Ну.
[03:15:00.940 --> 03:15:01.940]  Ну.
[03:15:01.940 --> 03:15:02.940]  Ну.
[03:15:02.940 --> 03:15:03.940]  Да.
[03:15:03.940 --> 03:15:04.940]  Ну.
[03:15:04.940 --> 03:15:05.940]  Ну.
[03:15:05.940 --> 03:15:06.940]  У вас theta и theta.
[03:15:06.940 --> 03:15:07.940]  Да.
[03:15:07.940 --> 03:15:08.940]  Ну.
[03:15:08.940 --> 03:15:09.940]  Ну.
[03:15:09.940 --> 03:15:10.940]  Вот.
[03:15:10.940 --> 03:15:11.940]  Так, тут вот так вот, тут вот так вот.
[03:15:11.940 --> 03:15:12.940]  И теперь вот барабанная дробь.
[03:15:12.940 --> 03:15:13.940]  Кто из них, кто из них тяжелый, если кто-то тяжелый.
[03:15:13.940 --> 03:15:14.940]  Да.
[03:15:14.940 --> 03:15:15.940]  Ну, не знаю.
[03:15:15.940 --> 03:15:16.940]  Вот тут, конечно, вот эти вот мелочи, конечно, пугают.
[03:15:16.940 --> 03:15:17.940]  Поэтому поехали.
[03:15:17.940 --> 03:15:18.940]  Раз, два.
[03:15:18.940 --> 03:15:19.940]  Ну давайте.
[03:15:19.940 --> 03:15:20.940]  Что тут думать-то?
[03:15:20.940 --> 03:15:21.940]  Раз, два, три, четыре, пять, шесть, семь, восемь, девять,
[03:15:21.940 --> 03:15:24.940]  десять, одиннадцать, двенадцать, тринадцать, четырнадцать,
[03:15:24.940 --> 03:15:25.940]  пятьдесят, шестнадцать.
[03:15:25.940 --> 03:15:27.940]  17 18 19 20
[03:15:29.740 --> 03:15:31.740]  Да ну пусть будет 21 хорошо
[03:15:32.420 --> 03:15:38.740]  раз так что у нас тут 1 2 3 4 5 6 7 8 9 10 11
[03:15:39.260 --> 03:15:43.460]  12 13 14 15 16 17 18 12 20 21 22
[03:15:44.300 --> 03:15:46.300]  уху да
[03:15:46.460 --> 03:15:48.460]  ура боевая ничья
[03:15:50.580 --> 03:15:55.220]  хотя если там еще пару вершин повесил быть бы там тяжелым или бы там тяжело
[03:15:55.940 --> 03:15:57.940]  но самое главное что можно заметить
[03:15:58.700 --> 03:16:02.260]  принципе можно это вывести на красивое красное утверждение
[03:16:03.660 --> 03:16:05.860]  что у любой вершины в
[03:16:07.740 --> 03:16:13.380]  то есть у любой вершины в не более одного тяжелого так сказать ребенка
[03:16:16.380 --> 03:16:19.780]  там не округление там просто там может быть это 1 2 дробно они
[03:16:19.780 --> 03:16:21.780]  сейчас
[03:16:22.500 --> 03:16:28.780]  да нет скажем так да тут как бы важно подчеркнуть что сз включает себя любимую то есть сз от
[03:16:29.260 --> 03:16:31.260]  висящей вершины адын
[03:16:32.500 --> 03:16:38.820]  и тогда в этом случае действительно очевидно что это так почему потому что если у тебя два тяжелых ребенка значит в двух этих поддеревьях
[03:16:39.900 --> 03:16:44.700]  вершин не меньше чем во всем под деревья но там их строго меньше потому что там нет меня
[03:16:45.860 --> 03:16:47.860]  вот поэтому соответственно
[03:16:48.020 --> 03:16:49.580]  вот
[03:16:49.580 --> 03:16:56.780]  но но поэтому тут поэтому получается не более одного но тогда заметим что если я возьму все тяжелые ребра то
[03:16:57.380 --> 03:17:03.100]  но то на самом деле тяжелые ребра образуют пути от предка до потомка и
[03:17:05.020 --> 03:17:11.860]  в принципе я могу сказать что если я удалю все легкие ровно стал у все тяжелые то дерево распадется на вот такого рода пути
[03:17:13.140 --> 03:17:16.620]  да некоторые из этих путей будут содержать всего одну вершину
[03:17:17.860 --> 03:17:20.160]  вот вот например корень у нас сейчас
[03:17:21.060 --> 03:17:23.060]  вообще лежит на таком пути
[03:17:23.120 --> 03:17:30.140]  вот так вот но много много вершин у нас много будет путей из одной из одной любимой там себя любимые вершины
[03:17:30.180 --> 03:17:32.180]  вот
[03:17:33.900 --> 03:17:37.400]  вот то есть вот так вот вот так вот так вот и
[03:17:38.060 --> 03:17:40.160]  вот так
[03:17:40.160 --> 03:17:41.460]  вот
[03:17:41.460 --> 03:17:46.740]  то есть получается мы то есть как бы разбили множество вершин на пути
[03:17:46.740 --> 03:17:54.420]  на пути такие, что ребра в них это тяжелые пути, поэтому это и называется тяжелолегкая
[03:17:54.420 --> 03:18:01.220]  декомпания, тяжелолегкое разбиение, да, то есть я не знаю, более адекватного перевода русский язык не
[03:18:01.220 --> 03:18:07.060]  встречал, поэтому обычно так и называют heavy line decomposition, вот как-то гармонично, а у нас как-то,
[03:18:07.060 --> 03:18:11.740]  ну нет, ну не знаю, как-то действительно тяжелое, тяжелое, легкое разбиение, как-то вот по-русски это
[03:18:11.740 --> 03:18:19.420]  надо говорить, но, но я думаю тут как бы, как бы да, думаю так, наверное конкретная русификация тут
[03:18:19.420 --> 03:18:28.820]  излишня, поэтому будем так и называть heavy light, то есть прямо буквально heavy light decomposition,
[03:18:29.820 --> 03:18:31.460]  вправо, бойца,
[03:18:31.460 --> 03:18:44.100]  вот, да, так что вот так и пишет обычно hld, но не то, чтобы буквы прям всегда пишутся тремя цветами,
[03:18:44.100 --> 03:18:55.940]  но значит, но теперь спрашивается, сколько может быть путей в этом heavy light? Ну понятно,
[03:18:55.940 --> 03:19:01.620]  ну по тяжелых, естественно, да, на самом деле, да, абсолютно сколько угодно, потому что если у меня
[03:19:01.620 --> 03:19:07.340]  дерево будет идеальным хипом каким-нибудь, то в принципе там все и оба будут легкие, то есть как бы
[03:19:07.340 --> 03:19:13.980]  да, фишка не в этом, то есть на самом деле, как бы ключевая, ключевая фишка находится в таком
[03:19:13.980 --> 03:19:33.180]  синим утверждение, которое говорит, на пути от произвольной вершины v до корня не более чем
[03:19:33.180 --> 03:19:48.780]  двоичный логарифом n лестих ребер, вот такое вот красивое синее утверждение, ну откуда оно берется?
[03:19:48.780 --> 03:19:54.660]  Ну доказательства его тоже достаточно тривиально, пойдем от вершины v до корня и будем замечать,
[03:19:54.660 --> 03:20:02.700]  что каждый раз, когда мы проходим ребро, созэшка текущей вершины строго увеличивается, да,
[03:20:02.700 --> 03:20:10.300]  само по себе этот факт ничего не значит, но он дает победу в купе с следующим фактом, что когда вы
[03:20:10.300 --> 03:20:15.180]  проходите по тяжелому ребру, он просто увеличивается, а когда вы проходите по легкому, то созэшка
[03:20:15.180 --> 03:20:23.180]  увеличивается хотя бы в два раза, ну обычно даже не хотя бы строго больше, чем в два раза, если
[03:20:23.180 --> 03:20:30.140]  быть точнее, но это уже мелочи, но так как у нас изначально созэ один, а в конце созэ n, то
[03:20:30.140 --> 03:20:36.100]  увеличиваться в два раза мы могли не более чем, вот столько раз, ну собственно доказательства окончено.
[03:20:36.100 --> 03:20:51.540]  Вот чем это нам помогает? А помогает нам это вот чем? То есть идея будет заключаться, то есть идея
[03:20:51.540 --> 03:20:57.660]  декомпозиции всяких структур дан с точки зрения нашей rs кушки будет заключаться в чем? Она будет
[03:20:57.660 --> 03:21:03.500]  заключаться в том, что на каждом пути я буду забабахивать, ну например, какой-нибудь дерево отрезков
[03:21:03.500 --> 03:21:15.820]  свое любимое или авэльку, или дикартач, вполне, и буду говорить, что для любого подотреска, то есть для
[03:21:15.820 --> 03:21:24.020]  любого под пути каждого тяжелого пути я могу находить операцию в них за логарифом, а если я хочу
[03:21:24.020 --> 03:21:31.620]  после этого, вот давайте представим себе, что будем решать классическую задачу rs q. Давайте представим
[03:21:31.620 --> 03:21:38.460]  себе, что в классическом виде, что мы хотим находить сумму на пути и допустим изменять,
[03:21:38.460 --> 03:21:49.260]  ладно, одно ребро изменять плохо, но допустим, мы будем находить не просто сумму, хотя нет,
[03:21:49.260 --> 03:21:55.340]  самый тупой знаете, чтобы обвалить себе старые технологии, можно уже просто искать минимум на
[03:21:55.340 --> 03:22:04.780]  пути и добавлять какой-нибудь д, то есть в принципе, можно тут пытаться думать, можно ли тут выкрутиться
[03:22:04.780 --> 03:22:17.940]  без хевилайтов, но я тут имел в виду, что ребро, уже этого хватает, хотя то, что я сейчас расскажу,
[03:22:17.940 --> 03:22:23.820]  понятно будет на самом деле вам и на пути все добавлять, но потому что смотрите, теперь какая
[03:22:23.820 --> 03:22:32.180]  идея, но идея будет, что начнем с это, это будет работать в худшем случае за, ну он будет работать
[03:22:32.180 --> 03:22:41.620]  либо за синюю единицу, либо за красный логариф, почему, ну потому что у меня будет идея такая,
[03:22:41.620 --> 03:22:47.700]  все ребра, которые у меня попадают в тяжелые пути, я буду хранить в дереве отрезков, а все легкие
[03:22:47.700 --> 03:22:56.540]  ребра я не буду хранить нигде, поэтому изменение легкого ребра будет за единицу, а изменение
[03:22:56.540 --> 03:23:02.060]  тяжелого за логарифом, ну формально за логарифом того пути, где оно находится, там как повезет,
[03:23:02.060 --> 03:23:13.420]  там вот действительно очень сильно повезет и там тоже единица будет, я не знаю, да, вот, ну конечно
[03:23:13.420 --> 03:23:18.580]  мы чуть позже поговорим, как это можно там удобно иногда реализовывать, но как бы идеально мы будем
[03:23:18.580 --> 03:23:25.980]  считать, что да, на каждом пути реализованы свое дерево отрезков, размера от, сколько там
[03:23:25.980 --> 03:23:33.380]  реальный ребер, то есть боже упаси на каждый путь забабахивать дерево отрезков размера n, то есть
[03:23:33.380 --> 03:23:38.860]  боже упаси, не надо так, то есть это будет как бы н квадрат памяти уже, поэтому как бы если у вас там
[03:23:38.860 --> 03:23:44.940]  дерево отрезков длины 5, значит уж будьте добры дерево отрезков за 1 от 5, ну вот, ну чтобы тогда
[03:23:44.940 --> 03:23:49.180]  суммарный размер всех деревьев отрезков будет линию, кстати, да, суммарный размер хавилайта по
[03:23:49.180 --> 03:23:56.700]  памяти это вполне себе линия, да и кстати, более того там, без учета инициализации, кстати, более
[03:23:56.700 --> 03:24:03.220]  того, в общем-то и строится хавилайт сам по себе вполне себе за линию, ну потому что, да, по сути
[03:24:03.220 --> 03:24:09.820]  это 2 dfs и на каждом пути еще д.о.шку построить, но это тоже линия, ну можно, ну там, да, дикар-тач
[03:24:09.820 --> 03:24:14.740]  возможно придется строить дольше, впрочем, как бы в Farah Colton Bender у нас возникнет идея, что там
[03:24:14.740 --> 03:24:21.820]  хавилайта, как бы дикар-тач, дикар-тач иногда все-таки за линию строится, если вам заранее ключи, если
[03:24:21.820 --> 03:24:32.500]  вам заранее сортирован по ключам, конечно, вот, нет, в Farah Colton есть дикар-тач, да, но там как
[03:24:32.500 --> 03:24:41.140]  свести рэмку колца, по сути, по сути построить дикар-тач с неявными ключами, с ключами от 1 до n
[03:24:41.140 --> 03:24:46.260]  и приоритетами в вашем массиве, вот, окажется, что это сведение рэмку колца, а потом мы лца
[03:24:46.260 --> 03:24:52.500]  сведем к рэмку плюс-минус 1, а потом начнется мясо, да, ну ладно, там тоже мясо, конечно, относительное,
[03:24:52.500 --> 03:25:03.420]  но как-то, да, после стов хипа, на самом деле, там мяса у нас нету толком, да, но хотя, да, вот да, ладно,
[03:25:03.420 --> 03:25:07.620]  ну посмотрим, почему, до чего мы доживем, до чего мы такими темпами доживем в итоге, на самом деле,
[03:25:07.620 --> 03:25:15.220]  ладно, значит, смотрите, это был end, тут все просто, а теперь давайте доживем до минимума, но давайте
[03:25:15.260 --> 03:25:29.460]  начнем простой случай, давайте рассмотрим минимум на пути от u до корня, давайте прогуляемся от u до корня,
[03:25:29.460 --> 03:25:37.660]  значит, вот жила была вершина u, значит, заметим, что, в принципе, вершина u лежит на каком-то тяжелом пути,
[03:25:37.660 --> 03:25:43.540]  да, по-любому, любая вершина u лежит на ровно одном тяжелом пути, другое, просто, как бы этот путь
[03:25:43.540 --> 03:25:50.340]  может состоять из одной вершины, но я его условно, тем не менее, буду рисовать вот таким неситым образом,
[03:25:50.340 --> 03:25:58.900]  так вот, значит, идея такая, ну, значит, вот вершина u и мы можем взять от вершины u, дойти до начала
[03:25:58.900 --> 03:26:04.100]  этого пути и, в принципе, там, так сказать, про апдейтить ответ минимум на этом префексе, согласны?
[03:26:04.100 --> 03:26:12.220]  Значит, тут теперь, ну, если это не корень, то тут, значит, есть легкое ребро, и тут мы тоже есть
[03:26:12.780 --> 03:26:18.400]  дальше идем тоже по префексу какого-то тяжелого пути, который тут где-то отваливается. Так, ну, на самом деле,
[03:26:18.400 --> 03:26:23.640]  я даже, знаете, по-другому немножко нарисую, то есть, вот идейно, вот это на самом деле, как-то,
[03:26:23.640 --> 03:26:31.820]  вот так получается. Вот то есть, вершина u была у меня где-то здесь, вот и красненький, красненький,
[03:26:31.820 --> 03:26:39.140]  красненький был у меня вот здесь, вот здесь и вот. Ну, вот то есть, тогда, смотрите, что получается,
[03:26:39.140 --> 03:26:45.740]  то есть когда мы идем до корня то есть мы делаем следующее то есть мы идем то
[03:26:45.740 --> 03:26:49.300]  есть мы получается прям вот идем идем идем идем и в каждом из этих путей
[03:26:49.300 --> 03:26:54.540]  находим вот этот префикс на этом префиксе находим минимум то есть
[03:26:54.540 --> 03:26:59.500]  получается мы находим ответ за логарифом но минимум мы с логарифом деревья
[03:26:59.500 --> 03:27:03.780]  отрезков ищем за логарифом умножить на сколько путей мы встретили но путей
[03:27:03.780 --> 03:27:07.980]  мы встретили как мы уже выяснили по синему утверждению тоже логарифом
[03:27:07.980 --> 03:27:16.860]  следовательно у нас получился лог квадрат вот такая вот вот такой вот
[03:27:16.860 --> 03:27:24.580]  простой версии но правда что делать если у нас у и в оказались не корнем но на
[03:27:24.580 --> 03:27:29.380]  самом деле идея в общем-то примерно та же то есть разница будет в том что если
[03:27:29.380 --> 03:27:35.020]  мы идем от у до корня то мы в какой-то момент случайно наткнемся на лца от у
[03:27:35.020 --> 03:27:40.420]  до в и тогда просто в этом последнем пути надо будет просто взять ответ на
[03:27:40.420 --> 03:27:48.300]  подотрески не на префиксе она только этом подотреске понятно да ну то есть по
[03:27:48.300 --> 03:27:53.340]  сути мы сведем как бы путь от путь от удове то есть к двум путям от у до
[03:27:53.340 --> 03:28:00.180]  какого-то предка и каждый из этих путей обработаем за логарифом
[03:28:00.180 --> 03:28:08.740]  понятно да более того специально искать это лца даже не обязательно то есть
[03:28:08.740 --> 03:28:12.820]  конкретная реализация там может выглядеть примерно в данном случае
[03:28:12.820 --> 03:28:19.780]  следующим образом то есть вот да ну данные там допустим файнд мин от ув
[03:28:19.780 --> 03:28:26.340]  сейчас я псевдокод конечно немножко напишу но там будет история такая то есть
[03:28:26.340 --> 03:28:39.460]  там будем говорить что ваил значит пока не оказалось что там из анцестер от ув
[03:28:39.460 --> 03:28:51.060]  значит будем делать следующее значит значит смотрите значит пока она начнется
[03:28:51.620 --> 03:28:59.780]  там будем говорить так значит у штрих равно давайте вот красненьким я напишу
[03:28:59.780 --> 03:29:09.420]  старт пэс так сказать старта то есть начало пути у вершины у то есть но вершина
[03:29:09.420 --> 03:29:13.540]  уже это тяжелом пути вот пусть у штрих это ее начало я даже здесь красненьким
[03:29:13.900 --> 03:29:21.460]  и тогда получится следующее то есть дальше скажу что если оказалось
[03:29:21.460 --> 03:29:35.100]  значит значит что тут у нас оказалось значит если оказалось что у штрих это предок
[03:29:35.100 --> 03:29:52.580]  предок в то то бряк но в противном случае апдейт анс от пути у штрих у и после этого
[03:29:52.580 --> 03:30:03.980]  написать синим теперь напишу у равно перрент от у штрих вот то есть вот такой вот смотрите то
[03:30:03.980 --> 03:30:15.780]  есть вот такой вот валик вайлик я напишу что сделает этот вайлик но я утверждаю что то есть
[03:30:15.780 --> 03:30:19.980]  там произойдет следующее вот на этой картинке я покажу то есть вот на самом деле несколько вот
[03:30:19.980 --> 03:30:25.300]  этих вот путей до лс ашки он вполне себе обработает в какой-то момент тут вот начнется какой-то вот
[03:30:25.300 --> 03:30:33.100]  путь который доходит до сюда и куда-то еще может быть выше идет да и тогда вершина у окажется
[03:30:33.100 --> 03:30:54.140]  теперь в итоге вот здесь видно да что теперь сделаю ну вот дальше я пишу то же для в абсолютно
[03:30:54.140 --> 03:31:03.700]  то же самое делаю ну понятно относительно пока вы не станет предком значит предком ну в данном
[03:31:03.700 --> 03:31:07.420]  случае это я сейчас только карши формально один случай и доказательство придется сделать чуть
[03:31:07.420 --> 03:31:13.740]  сложнее но мы это сделаем чтобы просто убедиться что это не лажа вот значит тут мы тоже подымаемся
[03:31:13.740 --> 03:31:18.220]  подымать пытаться но если тут выяснилось что тут как бы вот этот тяжелый путь от этой вот от
[03:31:18.220 --> 03:31:24.100]  этой лс ашки идет в сторону то тогда получается что мы в конце получится такая штука у нас в конце
[03:31:24.100 --> 03:31:29.380]  окажется вот этот вот вот это вот ребрышка то есть мы как бы вот это обработаем и прям вот
[03:31:29.380 --> 03:31:36.340]  сюда и придем то есть смотрите то есть я утверждаю что в конце будет так что здесь лца есть вот
[03:31:36.340 --> 03:31:41.780]  этот вот отрезок тяжелого пути да который идет вниз но остается предком хотя бы одного из
[03:31:41.780 --> 03:31:49.180]  ув и тогда ты же что в конце останется только вот это вот ув и в конце останется значит вот
[03:31:49.180 --> 03:31:59.620]  я добавляю после этого надо просто апдейт анс значит от теперь уже теперешних ув и ретурнанс все
[03:31:59.620 --> 03:32:13.740]  да при чем тут мимакс нет но я тут кратко пишу апдейт анс говорит так что у меня есть отрезок
[03:32:13.740 --> 03:32:18.500]  тяжелого пути от этой вершины это я гарантирую что не на одном тяжелом пути но я не знаю в
[03:32:18.500 --> 03:32:36.660]  каком порядке но так-то да ладно хорошо апдейт анс от не значит ну ладно так но от
[03:32:36.660 --> 03:32:49.260]  у штрих запятая у штрих хорошо вот так напишем но в этом плане да да но может еще так случиться что
[03:32:49.260 --> 03:32:54.820]  эти вершины совпадают тогда никакого апдейта не будет происходить от слова вообще но вот я
[03:32:54.820 --> 03:32:59.620]  утверждаю что но как видим вот там вот то есть утверждает что этот код на самом деле сработает
[03:32:59.620 --> 03:33:05.340]  всегда независимо не от каких случаев но давайте в этом убедимся вот мы сейчас рассмотрели случаи
[03:33:05.340 --> 03:33:13.340]  когда вот что когда у нас у и вы не являются предками друг друга но при этом есть какой-то
[03:33:13.340 --> 03:33:21.820]  тяжелый путь который от лца от ув идет в сторону видно да но думаю достаточно очевидно что если
[03:33:21.820 --> 03:33:27.380]  вон шел в сторону в то было бы то же самое то есть нам в общем-то вот эти вот операции у его они
[03:33:27.380 --> 03:33:32.300]  симметричны в принципе да хотя нет они не совсем симметричным что тут у вот куда-то сюда пришла
[03:33:32.300 --> 03:33:39.540]  поэтому ладно давайте вот аккуратненько в этом убедимся давайте вот в этом очень
[03:33:39.540 --> 03:33:47.540]  аккуратненько убедимся так это мы значит убираем значит давайте то есть что-то еще могло произойти
[03:33:47.540 --> 03:33:53.500]  но потому что в принципе если от у выяснилось что у нас есть какой-то тяжелый путь проходит
[03:33:53.500 --> 03:34:02.540]  через лца то как бы вот этот случай мы уже обработали хорошо вот да ну ладно хорошо раз
[03:34:02.540 --> 03:34:07.740]  это так то давайте еще обработаем тогда случай знаете какой когда у нас оказалось неожиданно что
[03:34:07.740 --> 03:34:15.100]  в это предок у если в это предок у то когда мы начинаем с у оказывается и вот допустим где-то
[03:34:15.100 --> 03:34:21.980]  в то тогда как у нас будет пока у не является предком в то есть наоборот да то получается мы
[03:34:21.980 --> 03:34:26.940]  тут идем идем идем идем а потом в какой-то момент наткнулись на вот путь который уже
[03:34:26.940 --> 03:34:34.220]  проходит через вершину в видно да тогда что произойдет у пройдет вот сюда в по своему циклу
[03:34:34.220 --> 03:34:39.200]  никуда не пойдет и нам останется только обработать этот отрезок видно да то есть ровно этот цикл это
[03:34:39.200 --> 03:34:48.500]  сделает но теперь весь кайта просто если мы не угадали порядок то есть если выяснилось что но вот
[03:34:48.500 --> 03:34:55.260]  то есть если выяснилось что путь тут не так устроен но на самом деле что могло еще быть могло
[03:34:55.260 --> 03:35:02.980]  еще конечно быть что действительно мы тут а ту скажем шли шли шли шли шли и тут бабах у неожиданно
[03:35:02.980 --> 03:35:11.220]  пришло прям в родителя то есть было тут у и пришло вот тут вершина у и тут вот она куда-то вот пошла
[03:35:11.220 --> 03:35:18.020]  сюда видно да но тогда у нас принципе два варианта либо у нас этот вот тяжелый то есть этот путь
[03:35:18.020 --> 03:35:24.500]  пошел сюда и тогда вершина в в конечном счете придет то есть вот вот так вот так вот так она просто
[03:35:24.500 --> 03:35:35.460]  вот сюда же и придет и мы обработаем вот этот отрезок ну ладно вот вот вот а нет да вот так
[03:35:35.460 --> 03:35:41.580]  тут даже получится но от вершины в итоге придет сюда либо может вообще оказаться что в принципе
[03:35:41.580 --> 03:35:47.580]  еще бывает такой случай когда у вас тут ув и вот этот вот красный путь на самом деле пришел в
[03:35:47.580 --> 03:35:52.860]  эту вершину и отправился куда-то ниже или вообще никуда не пришел тогда просто у его придут обе
[03:35:52.860 --> 03:35:59.940]  вот сюда и тут ничего не будет вот понятно да то есть получается действительно что видите то есть
[03:35:59.940 --> 03:36:07.100]  в явном виде л ца искать не пришлось я вам даже больше скажу вы можете в этой функции попутную
[03:36:07.100 --> 03:36:12.860]  ца сохранить как более высокую вершину из у его вот просто вот из этих же рассуждений очевидно
[03:36:12.860 --> 03:36:20.100]  что более высокая вершина оттуда в общем-то л цашкой той самой будет понятно да ну кстати
[03:36:20.100 --> 03:36:25.780]  да тут на самом деле еще возникает иногда бывает отдельная песня а как эти деревья отрезков реально
[03:36:25.780 --> 03:36:31.900]  кстати хранить потому что тут есть как бы два пути первый конечно это эти пути хранить прямо
[03:36:31.900 --> 03:36:37.060]  в явном виде и для каждого из этих путей там просто и написать там просто вектор из деревьев отрезков
[03:36:37.060 --> 03:36:49.700]  вот но кто-то рекомендует писать чуть по-другому предлагается так давайте перенумер опять же
[03:36:49.700 --> 03:36:58.060]  перенумеруем вершины а именно запустим дфс и перенумеруем вершины то есть запустим дфс но
[03:36:58.060 --> 03:37:04.700]  с тем расчетом что он будет идти сначала по тяжелому ребро потом по всем остальным то есть
[03:37:04.700 --> 03:37:17.740]  получится тогда следующее вот так вот 6 7 вот там 8 9 10 11 тут самое главное 12 13 14 15 16
[03:37:17.740 --> 03:37:28.940]  17 18 естественно тут получится 19 20 21 но тут получится 22 23 24 25 там ну и так далее
[03:37:28.940 --> 03:37:33.900]  в общем не буду дописывать суть я думаю вы уже ловили суть заключает но что при таком дфс
[03:37:33.900 --> 03:37:40.180]  каждый путь это подотрезок вершин и тогда можно запопахать одно дерево отрезков они
[03:37:40.180 --> 03:37:48.140]  вот кому-то считается даже удобно но потому что да и то есть если вам не удобно то есть если вы
[03:37:48.140 --> 03:37:52.980]  привыкли создавать только в каждой значит только одно статическое дерево отрезков то вот это вот
[03:37:52.980 --> 03:38:04.500]  будет очень удобно но вот другой вопрос что честно скажем что вот такой это конечно очень
[03:38:04.500 --> 03:38:09.260]  удобно реализовывать но это реализация есть глобальный минус минус будет заключаться в том
[03:38:09.260 --> 03:38:15.380]  что то есть что есть решение в таком таком дереве отрезков вы каждый путь будете реально
[03:38:15.380 --> 03:38:22.260]  залогом обрабатывать а так на самом деле у вас был шанс что как бы да у вас может быть там
[03:38:22.260 --> 03:38:26.780]  много путей но эти пути мелкие и пола и многие из этих путей вы обработаете не за логарифом за
[03:38:26.780 --> 03:38:33.860]  единицу ну и пока мере за логарифом того пути который есть вот то есть иногда там бывают на
[03:38:33.860 --> 03:38:38.460]  код фолькс бывали какие-то пополосновения доказать что на самом деле как бы если вот в таком мелком
[03:38:38.460 --> 03:38:43.180]  случае сделать то там вам еще удачи сделать тест на котором это реально лог квадрат работать будет
[03:38:43.180 --> 03:38:49.620]  вот но впрочем там официального доказательства так и не появилось по-моему больше скорее
[03:38:49.620 --> 03:38:53.380]  появились подозрения на то что нет там лог квадрат все-таки выковырить можно хоть константа
[03:38:53.380 --> 03:39:02.020]  у него будет конечно мелкая вот так что тут конечно на вкус азия то есть как бы я тут
[03:39:02.020 --> 03:39:08.260]  конечно предположил все-таки но то есть вот эта реализация красивая безусловно потому что как
[03:39:08.260 --> 03:39:12.300]  бы вам по любому для каждой вершины придется хранить какую-то информацию в духе на каком
[03:39:12.300 --> 03:39:16.980]  пути она находится и где она в ем если вы их так перенумируете то жизнь вам конечно существенно
[03:39:16.980 --> 03:39:25.460]  облегчится но тем не менее хранить там все в одном дереве отрезков я бы вам и советовал вот
[03:39:25.460 --> 03:39:30.740]  хотя в прочем если у вас все операции деревья отрезков снизу то в общем-то кстати по барабану
[03:39:30.740 --> 03:39:38.260]  да то есть кстати да еще одна приятность дерево отрезков снизу если вы обрабатываете если вы там
[03:39:38.260 --> 03:39:44.260]  если сумму на отрезке лр то вы работаете за низоватый логин а за от логарифма длины этого отрезка
[03:39:44.260 --> 03:39:55.740]  вот так что да и тогда может быть кому-то это даже поможет так что еще но впрочем последний
[03:39:55.740 --> 03:40:10.860]  видим о чем и сколько у нас там времени ой хорошо да но там хранить для каждой вершины
[03:40:10.860 --> 03:40:20.500]  для каждого нет ну все можно конечно но нет ну заморочиться конечно всегда можно но не
[03:40:20.500 --> 03:40:29.180]  очень-то и нужно вот но поэтому ладно закончим мы правда неожиданная вещь да но первым заметим
[03:40:29.180 --> 03:40:33.500]  что такая технология она каше чем приятно она приятно тем что на самом деле да я тут сказал
[03:40:33.500 --> 03:40:39.380]  прибавление на ребре но на самом деле конечно же если вы забыли тут поправить что как бы что-то
[03:40:39.380 --> 03:40:45.260]  прибавляем не на пути а на ребре то ничего страшного то есть вот эта технология как бы позволяет
[03:40:46.220 --> 03:40:53.500] Amg
[03:41:07.500 --> 03:41:12.180]  Вот но теперь в качестве добивки но это пока в официальной версии лог квадрат
[03:41:12.180 --> 03:41:21.020]  ну вот осталось только небольшая финалочка. Я утверждаю, что теперь можно на самом деле
[03:41:21.020 --> 03:41:26.060]  реализовать хавиллайт так, что это будет работать за алгорифм. Так, ну как, кстати,
[03:41:26.060 --> 03:41:34.340]  кто знает как это сделать? О, немного, окей, хорошо, ну ничего, сейчас узнаете все, там ничего сложно.
[03:41:34.340 --> 03:41:42.820]  Вот, значит, идея будет такая, ну слушайте внимательно, потому что подобного рода идеи,
[03:41:42.820 --> 03:41:49.580]  потом в следующий раз начну там, ой как, ой как быть нужны, хотя конкретно сейчас она достаточно
[03:41:49.580 --> 03:42:00.500]  простая. Смотрите, значит, так это мы все убираем, значит смотрите, да нет, ну заметим, ну заметим
[03:42:00.500 --> 03:42:08.900]  следующее, что сам по себе хавиллайт мы спокойно строим за, собственно, за линию, да, ну как набор путей,
[03:42:08.900 --> 03:42:16.460]  то есть да, ну и там, то есть вопрос, то есть на самом деле идея у нас будет в том, в какой
[03:42:16.460 --> 03:42:21.820]  конкретно магическую, какую магическую структуру мы забабахаем на пути, то есть мы просто не
[03:42:21.820 --> 03:42:28.580]  будем забабахивать деревоотресков. Почему мы не будем забабахивать деревоотресков? Потому что у
[03:42:28.580 --> 03:42:36.700]  нас, на ноге, вот откуда у нас, что такое деревоотресков вообще, да? Деревоотресков, ну если на него посмотреть
[03:42:36.700 --> 03:42:42.500]  сверху, то получится что-то такое. Деревоотресков это я думаю, так, я хочу хранить сумму на всем
[03:42:42.500 --> 03:42:48.580]  пути, а после этого я делю как бы массив на две части и запускаюсь рекурсивно, то есть там храню
[03:42:48.580 --> 03:42:55.460]  на всех половинках, потом на всех четвертях и так далее, да, это по сути деревоотресков. А теперь
[03:42:55.460 --> 03:43:03.500]  я думаю, а теперь у меня идея. Ну вот, то есть какая у меня идея? А почему я должен вделить
[03:43:03.500 --> 03:43:09.740]  на пополам именно количество вершин? Ну, в идеале, то есть в деревеотресков я хочу его делить,
[03:43:09.740 --> 03:43:16.660]  почему? Потому что если я, например, ищу минимум на префиксе, допустим, то как я в деревеотресков
[03:43:16.660 --> 03:43:23.060]  уйду? То есть я говорю так, я думаю так, где у меня эта граница этого префикса? В левой половине
[03:43:23.060 --> 03:43:30.180]  или в правой? Если выяснилось, что в левой, я просто иду влево, а на правую половину забиваю. А если,
[03:43:30.180 --> 03:43:38.380]  соответственно, всю левую покрываем, то мы как бы эту левую за 1 прибавляем к ответу и идем в
[03:43:38.380 --> 03:43:44.580]  правом под дереве. То есть получается, за один шаг я как бы уменьшил рассматриваемую часть деревоотресков
[03:43:44.580 --> 03:43:51.780]  в два раза. То есть ровно за счет этого это работает за логарифом. Вот, но тут у меня проблема в том,
[03:43:51.780 --> 03:43:57.060]  что я как бы, то есть тут у меня тоже возникает идея, что почти везде, кроме, может быть, одного,
[03:43:57.060 --> 03:44:04.940]  то есть я иду как бы сверху вниз и рассматриваю несколько префиксов. И в каждом префиксе я,
[03:44:04.940 --> 03:44:12.180]  получается, делаю вот этот спуск за логарифом. Так вот, цель у меня будет такая, что когда я иду,
[03:44:12.180 --> 03:44:17.620]  например, от корня в какую-то вершину и на каждом пути делаю спуск, я хочу, чтобы я суммарно
[03:44:17.620 --> 03:44:26.300]  спускался за логарифом, а не в каждом за логарифом. Да, пока звучит муторно, но сейчас вы видите,
[03:44:26.300 --> 03:44:36.660]  что я имею в виду. Значит, щит у меня будет такой. Значит, вместо деревоотресков я буду хранить в
[03:44:36.660 --> 03:44:45.860]  некотором смысле сбалансированное двоичное дерево поиска. Звучит оно будет так. Смотрите,
[03:44:45.860 --> 03:44:55.460]  рассмотрим какой-нибудь путь тяжелый. Смотрите, заметим, что на каждой вершине что-то висит.
[03:44:55.460 --> 03:45:05.580]  В чем на каждой вершине, кроме последней, висит, конечно, тяжелое ребро, но висит еще
[03:45:05.580 --> 03:45:17.100]  несколько люстих. Вот тут какие-то вот такие. Ну, тут ладно, я тут не буду врать. Тут, конечно,
[03:45:17.100 --> 03:45:21.860]  просто какое-то произвольное под дерево висит. Даже правильнее рисовать даже вот так. Смотрите,
[03:45:21.860 --> 03:45:25.580]  видите, как я нарисую. Правильнее рисовать так. То есть, тут на легком ребре висит какое-то под
[03:45:25.580 --> 03:45:31.580]  дерево, еще на легком ребре какое-то под дерево, ну и так далее. Тут тоже на легком. Тут висит,
[03:45:31.580 --> 03:45:41.460]  висит, висит. Вот тут, а тут ничего не висит. Вот так вот. Ну и тут что-то висит.
[03:45:41.460 --> 03:45:54.980]  Ну вот, они вот-вот, они красные ребра в одном пути. Может быть, но вот это ребро конкретно
[03:45:54.980 --> 03:46:00.060]  сине, а тут внутри могут быть и красные, и синие ребра, поэтому я их истер. Тут они вполне могут
[03:46:00.060 --> 03:46:05.500]  быть. Но нас это просто не волнует. То есть, мы говорим, что на каждом красном пути, по идее вот,
[03:46:05.500 --> 03:46:11.580]  что там, ну как бы вот на этой вершине, в принципе, можно интерпретировать так. На вот
[03:46:11.580 --> 03:46:16.980]  этом красном пути висят какие-то вершины. Ну, суммарный размер, то есть, суммарно,
[03:46:16.980 --> 03:46:23.180]  сколько тут висит, это вот СЗ от этой вершины. Правда? Но теперь я введу, вот у меня было понятие
[03:46:23.180 --> 03:46:47.940]  СЗ от В, а я введу СЗ light от В. Это будет равно 1 плюс сумма СЗ, допустим, СЗ от W,
[03:46:47.940 --> 03:47:07.980]  где я буду говорить так W лёгкий ребёнок В. То есть, обратите внимание, то есть,
[03:47:07.980 --> 03:47:12.500]  фактически я рассматриваю ту же СЗ, только отпиливаю тяжёлые поддели. То есть, я мог бы
[03:47:12.500 --> 03:47:20.180]  тут написать СЗ light равно СЗ от меня минус СЗ от моего тяжёлого ребёнка или минус 0,
[03:47:20.180 --> 03:47:30.020]  если у меня тяжёлых детей нету. То есть, вот такой вот СЗ light. То есть, я такое могу насчитать.
[03:47:30.020 --> 03:47:33.980]  Обратите внимание, что у каждой вершины этот СЗ light тоже как минимум один из себя мы всегда
[03:47:33.980 --> 03:47:42.460]  считаем. Понятно, да? Так вот, смотрите, какую структуру данных я тут на этом вот красном пути
[03:47:42.460 --> 03:47:54.300]  построю. Допустим, этот путь у меня, тут у меня вершины В1, В2, В3 и так далее где-то ВК. Так,
[03:47:54.300 --> 03:48:07.020]  ну во-первых, заметьте маленькое утверждение. Сумма по всем СЗ light от веитов, где и у меня
[03:48:07.020 --> 03:48:16.860]  прибегает от одного до К, и вот веито, да? Оно равно чему? Чему у меня равно сумма СЗ light
[03:48:16.860 --> 03:48:29.140]  от всех веитов? Ну, конечно, но СЗ в нашем случае от В1. Ну, потому что типа будем считать,
[03:48:29.140 --> 03:48:36.820]  что путь от В1 до ВК это типа сверху вниз. Ну, это так просто чисто для понимания происходящего.
[03:48:36.820 --> 03:48:50.500]  Так вот, значит, у меня идея такая. Смотрите, я буду идти по этому пути и суммировать СЗ.
[03:48:50.500 --> 03:49:00.180]  Прям вот находить префикс префикс, и найду первую такую ситуацию. Вот первую такую ситуацию,
[03:49:00.180 --> 03:49:08.780]  даже вот синим я буду рисовать. Когда сумма по И равно от одного до Ж вот этого СЗ light,
[03:49:08.780 --> 03:49:22.020]  вот допустим это вот ВЖ, да? СЗ light от ВЖ больше либо равна, чем СЗ от В1 пополам. То есть,
[03:49:22.020 --> 03:49:29.020]  видите, то есть, получилось, я тоже нахожусь в середину этого пути, но взвешенную, да? Вот,
[03:49:29.020 --> 03:49:34.700]  то есть, нахожусь в первую. Это первая такая. Вот, но очень хочется, чтобы она была больше,
[03:49:34.700 --> 03:49:42.460]  чем... так, вот тут ВИ, конечно, и тут хочется, чтобы она была, то есть, больше либо равна такой
[03:49:42.460 --> 03:49:49.580]  же суммы, но И равна от одного до Ж-1. То есть, тут еще меньше половины, а тут больше либо равно.
[03:49:49.580 --> 03:49:56.260]  Видите, да? Ну, во-первых, начнем с того, что раз тут больше либо равно половины, то и вот тут
[03:49:56.260 --> 03:50:04.740]  больше либо равно половины, а вот тут строго меньше половины, согласны? И теперь у меня идея такая,
[03:50:04.740 --> 03:50:10.740]  значит, я этот путь буду хранить так. Я буду хранить в двоичном дереве поиска по неявному ключу,
[03:50:10.740 --> 03:50:18.460]  где вот эта вершина объявляется корнем, и слева и справа на нее вешаются под деревья,
[03:50:18.460 --> 03:50:25.100]  которые сделаю абсолютно так же рекурсивным образом. Только вместо СЗ от В1 я тут подсуну
[03:50:25.100 --> 03:50:36.020]  сумму СЗ-лайтов от этих вершин. Ну, по сути так, воспринимайте, может, по-другому. У каждой
[03:50:36.020 --> 03:50:44.940]  вершины есть вес, да? Понятно, да? Так вот, я найду такую вершину, что у нее слева от нее сумма весов
[03:50:44.940 --> 03:50:54.660]  меньше половины суммарного веса и справа от нее меньше суммарного веса. Ну ладно, я, кстати,
[03:50:54.660 --> 03:51:01.420]  наврал. Такой вершины может не найти. Но там есть пограничные случаи, когда у вас вот можно,
[03:51:01.420 --> 03:51:06.460]  когда у вас как бы тут четкая половина и тут четкая половина. То есть как бы корректно будет,
[03:51:06.460 --> 03:51:15.980]  чтобы тут меньше либо равно стояло. Вот так. Вот. Вот, но это неважно. То есть такой, да, по сути
[03:51:15.980 --> 03:51:22.060]  это такой взвешенный центроид на самом деле, да. Вот. Да, мы еще не знаем, что такое центроид,
[03:51:22.060 --> 03:51:30.380]  но неважно. Вот. И тогда идея такая. То есть я буду выбирать вершину, объявлять ее корнем,
[03:51:30.380 --> 03:51:35.500]  слева и справа у меня будут такие подпути, на которых я корень выберу тоже тем же способом.
[03:51:35.500 --> 03:51:41.420]  То есть найду тоже взвешенный центроид уже этого подпути, повешу его, ну и так далее. То есть
[03:51:41.420 --> 03:51:47.020]  заметим, что высота такого дерева, ну то есть на этом дереве, это двоичное дерево поиска,
[03:51:47.020 --> 03:51:52.780]  я могу забабахивать на нем абсолютно те же самые всякие присваивания на отрезки, суммы на отрезки
[03:51:52.780 --> 03:52:05.100]  и так далее. Да. Да. И более того, заметим, что каждым таком деревом мы будем работать за от
[03:52:05.100 --> 03:52:15.020]  глубины этого дерева, ну высоты, а высота этого дерева от логарифма суммарного веса. Ну суммарного
[03:52:15.020 --> 03:52:21.500]  веса не более чем n, поэтому получается, что на каждом пути у нас теперь лог n, причем на этот
[03:52:21.500 --> 03:52:27.980]  раз буквально. Ну точнее так, чем глубже дерево, тем меньше этого веса, конечно, да, потому что там
[03:52:28.620 --> 03:52:36.740]  реально лог n будет только у корневого дерева, и то если повезет. А чем глубже, на самом деле,
[03:52:36.740 --> 03:52:42.260]  тем там скорее всего логарифм будет меньше, меньше, меньше. Ну это неважно. То есть получается,
[03:52:42.260 --> 03:52:55.900]  что на каждом таком дереве мы будем работать за логарифм. Понятно, да? Нет, мы же их не пополам
[03:52:55.900 --> 03:53:01.540]  делим. Тут если нам будет не вести с тот вопрос, где эта граница находится, она же не посередине
[03:53:01.540 --> 03:53:08.020]  находится, она находится где угодно, потому что на самом деле там распределение весов может быть
[03:53:08.020 --> 03:53:14.980]  каким угодно, может там вот на самом деле в конце вся бяка висит. Нет, с одной стороны да,
[03:53:14.980 --> 03:53:23.260]  с другой стороны тут да, но можно это оценивать как логарифм суммарного веса. Потому что мы
[03:53:23.260 --> 03:53:27.740]  специально выбираем вершину так, что когда мы переходим в ребенка, то суммарный вес во всех
[03:53:27.740 --> 03:53:34.180]  вершинах соответствующих ребенку, он не более чем половина суммарного веса всего по построению. Да,
[03:53:34.180 --> 03:53:40.500]  мы так выбираем. То есть получается такое, то есть такая взвешенная балансировка, да, то есть иногда
[03:53:40.500 --> 03:53:46.500]  бывает выгодно балансировать не по количеству вершин, а по весу какому-то. Вот, то есть в общем-то
[03:53:46.500 --> 03:53:52.660]  кстати вот в сплее дерева мы в общем-то с чем-то подобным уже сталкивались. Вот, но это ровно
[03:53:52.660 --> 03:54:01.740]  примерно. А теперь, теперь самое мистическое. Теперь я утверждаю, что если вы будете работать,
[03:54:01.740 --> 03:54:07.900]  подсунете такую структуру данных, то тогда все запросы вы будете делать не за лог квадрат,
[03:54:07.900 --> 03:54:16.140]  а за логарифм. Прям буквально. То есть да, то есть у вас все еще будет путь разбиваться на логарифм
[03:54:16.140 --> 03:54:20.940]  под, там на логарифм путей, каждый из которых является под путем какого-то вот этого тяжелого
[03:54:20.940 --> 03:54:27.420]  пути, но вы их обрабатывать будете не то, что каждый за логарифм, а суммарно за логарифм.
[03:54:27.420 --> 03:54:37.900]  Ну, за счет чего и будет победа. То есть понятно, что мы нацелились. Ну, то есть я сейчас попытаюсь
[03:54:37.900 --> 03:54:43.500]  доказать, что если вы вот в каждом дереве забабахаете вот это и будете прям предельно
[03:54:43.980 --> 03:54:49.540]  вот как мы обычно в дереве отрезков сверху делаем, прям забабахивать операции, то я утверждаю,
[03:54:49.540 --> 03:54:54.540]  что это будет суммарно за логарифм работать. То есть не каждая операция, не каждая отдельная
[03:54:54.540 --> 03:54:58.740]  операция с деревом отрезков за логарифм, хотя и это тоже, но и суммарно все, что нам потребуется,
[03:54:58.740 --> 03:55:08.340]  будет работать за логарифм. Значит, смотрите. Ну, начнем с простого. Ну, на самом деле первое,
[03:55:08.340 --> 03:55:15.180]  что мы заметим, это то, что задачу можно, по сути, свести к работе с путем от корня до
[03:55:15.180 --> 03:55:22.860]  произвольной вершины. Ну, там точнее так. Давайте вот сразу общий случай обработаем. Как у нас,
[03:55:22.860 --> 03:55:28.900]  вот мы уже такую картинку рисовали. Вот жил был у произвольный, жил был в. Да, вот тут лца и там
[03:55:28.900 --> 03:55:37.260]  что-то есть. Тогда смотрите. У нас есть вот этот вот путь, который, возможно, нам потребуется. То
[03:55:37.260 --> 03:55:43.920]  есть вот этот вот кусочек надо обработать за логарифм. Помимо него надо обработать какой-то
[03:55:43.920 --> 03:55:52.060]  набор вот такого рода путей и вот набор вот такого рода путей. Чем они объединены? Они объединены тем,
[03:55:52.060 --> 03:55:58.700]  что кроме вот этого пути все вот эти пути это префиксы своих путей. Согласны? То есть,
[03:55:58.700 --> 03:56:03.820]  видите, мы не произвольные, то есть на самом деле мы там делаем запросы не на совсем произвольные
[03:56:03.820 --> 03:56:09.820]  подотрески. То есть мы в основном работаем с префиксами. То есть кроме, может быть,
[03:56:09.820 --> 03:56:15.140]  одного корневого вот этого пути, который мы за логарифмом обработали. Так вот, я утверждаю,
[03:56:15.140 --> 03:56:22.500]  вот рассмотрим. Поэтому теперь без ограничений общества давайте скажем, что мы идем от предка
[03:56:22.500 --> 03:56:31.420]  к потомку и обрабатываем только пути вот эти вот. То есть обрабатываем только пути,
[03:56:31.540 --> 03:56:36.940]  в которых надо искать префикс. Поэтому я и сказал, что мы можем вообще даже оценить это так,
[03:56:36.940 --> 03:56:45.180]  что давайте предположим, что мы обрабатываем только пути от корня до потомка. Вот. И так,
[03:56:45.180 --> 03:56:51.420]  так вот, я утверждаю, то есть я сейчас хочу доказать это, как уже видно будет для нас победа,
[03:56:51.420 --> 03:57:01.500]  это то, что если мы идем от рута до вершины У, то я утверждаю, нет, знаете, нет, не так мы сделаем.
[03:57:01.500 --> 03:57:08.020]  Давайте я все-таки побольше тут картинку буду рисовать, потому что тут как бы хочется,
[03:57:08.020 --> 03:57:14.340]  чтобы это было визуально понятно. То есть это не та вещь, которая хочется. Заметим,
[03:57:14.340 --> 03:57:19.660]  что это логарифм, доказательства. Вот вам там на всю стену выкладки разбираетесь. То есть будет
[03:57:19.660 --> 03:57:25.660]  это из цикла, что доказательства есть, оно вроде правильное, но классическая ситуация.
[03:57:25.660 --> 03:57:42.580]  Вот. А теперь вот У. И вот как будем работать. Раз. Вот. То есть вот как-то вот. Заметишь,
[03:57:42.620 --> 03:57:49.820]  тогда мы просто заметим, что мы работаем с какими-то вот, такими вот префиксами. И теперь смотрите,
[03:57:49.820 --> 03:57:53.780]  давайте предположим, что мы, ну нам от перестановки обстрелить суммы не меняется,
[03:57:53.780 --> 03:58:00.740]  будем считать, что мы идем сверху вниз. Как мы ищем сумму на вот этом пути? Значит,
[03:58:00.740 --> 03:58:06.620]  мы сначала заходим вот это дерево. А визуально, как мы это в дереве отрезков ходили? У нас там
[03:58:06.620 --> 03:58:11.060]  есть корень дерево отрезков, и мы на каждом шаге выбираем, мы идем влево или вправо. Правда?
[03:58:11.060 --> 03:58:18.300]  То есть идем либо влево, либо вправо. Как это работает здесь? Допустим, значит,
[03:58:18.300 --> 03:58:24.340]  здесь у нас на этом отрезке нашлась взвешенная середина. И допустим, она нашлась где-то вот
[03:58:24.340 --> 03:58:33.220]  здесь. Тогда оказывается, что мы вот эту вот штуку выкидываем. И мы рассматриваем вот этот отрезок.
[03:58:33.220 --> 03:58:39.500]  Теперь допустим, у этого под отрезка середина нашлась где-то здесь. Тогда мы прибавляем к
[03:58:39.540 --> 03:58:47.660]  ответу вот эту сумму и рассматриваем вот этот отрезок. А теперь рассмотрим тут середину,
[03:58:47.660 --> 03:58:53.060]  значит, отсекаем, ну и так далее. В какой-то момент мы наконец, за логарифомбирацией,
[03:58:53.060 --> 03:59:01.260]  мы придем вот в эту вершину. Что так дальше произойдет? Потом мы пройдем вот это легкое
[03:59:01.260 --> 03:59:07.980]  ребро, перейдем сюда и сделаем на этом пути абсолютно то же самое. Тоже будем делать
[03:59:07.980 --> 03:59:12.140]  абсолютно те же самые спуски, но, может быть, они тут немножко в другом порядке отсекаться будут.
[03:59:12.140 --> 03:59:18.620]  Там пум-пум, ну и там в какой-то момент сюда придем. И так вот это постепенно сделаем. Так вот,
[03:59:18.620 --> 03:59:31.340]  я утверждаю, что вот этих вот вершин суммарно логарифом. Почему? Смотрите, ведь идейно,
[03:59:31.340 --> 03:59:36.540]  если мы вообразим себе этот путь как вот это вот дерево наше, новоизобретенное дерево,
[03:59:36.540 --> 03:59:44.420]  которое висит на сначала этой вершине, потом этой, потом этой. Понятно, да? То мы будем замечать
[03:59:44.420 --> 03:59:49.980]  следующее, что на каждой вершине в этом дереве висят какие-то вершины, и у них есть какая-то
[03:59:49.980 --> 03:59:57.260]  суммарный СЗЛайт, правда? Именно СЗЛайт. Так вот, заметим следующее, что когда я перехожу от вот
[03:59:57.260 --> 04:00:04.540]  этой вершины к вот этой вершины, то суммарный СЗЛайт под деревя уменьшается в два раза. Логично,
[04:00:04.540 --> 04:00:09.940]  да? Мы так строили. То есть мы тут несколько раз, то есть у нас тут изначально суммарный СЗЛайт был N,
[04:00:09.940 --> 04:00:16.780]  но когда мы тут спускаемся, спускаемся, спускаемся, на каждом шаге СЗЛайт уменьшался в два раза. Теперь
[04:00:16.780 --> 04:00:24.580]  дошли до этой вершины, прошли сюда, СЗЛайт просто уменьшился. Вот, и мы пришли вот в этот путь,
[04:00:24.580 --> 04:00:29.500]  в котором весь вот этот СЗЛайт, то есть СЗ вот этой вершины, да? Ну СЗ вот этой вершины,
[04:00:29.500 --> 04:00:35.060]  эту сумму СЗЛайтов в дереве, там вот этой вершины у нас была. Теперь тоже спускаемся,
[04:00:35.060 --> 04:00:41.300]  он продолжает уменьшаться, уменьшаться, уменьшаться и так далее. То есть получается,
[04:00:41.300 --> 04:00:46.500]  смотрите, то есть мы на каждом шаге внутри тяжелого пути у нас суммарный СЗЛайт как бы уменьшается в
[04:00:46.500 --> 04:00:54.420]  два раза, а когда мы проходим по легкому ребру, получается СЗ, ну там СЗ получается, то есть СЗЛайт
[04:00:54.420 --> 04:01:00.460]  там просто уменьшается. Видно, да? Да, обратите внимание, да, не в два раза, а просто уменьшается,
[04:01:00.460 --> 04:01:06.300]  потому что это СЗЛайт мы тяжелые выкинули, да? Но, то есть получается, что АССИМТОТЬКА это от
[04:01:06.300 --> 04:01:12.180]  логорифм, то есть получается у нас имеет место красный логорифм вот скачков внутри тяжелых
[04:01:12.180 --> 04:01:20.180]  путей и плюс еще количество скачков вот собственно по легким ребрам. Но легких ребер у нас сам по себе
[04:01:20.180 --> 04:01:25.380]  логорифм, поэтому получается, что суммарно у нас получился лого.
[04:01:25.380 --> 04:01:47.020]  Ну я имею ввиду следующее. Ну не на префексе. Нет, ну не совсем так. На самом деле можно это
[04:01:47.020 --> 04:01:51.700]  интерпретировать по-другому. Я имел ввиду, что я тут рассматриваю, я тут в дереве, то есть в этом,
[04:01:51.700 --> 04:01:58.140]  в нашем экзотическом дереве том самом, да, иду по какому-то пути, вот так, да, спускаюсь, и у каждой
[04:01:58.140 --> 04:02:05.940]  вершины есть такая штука, как сумма СЗЛайтов под дереве. Вот, то есть можно интерпретировать по-другому,
[04:02:05.940 --> 04:02:12.220]  знаете как? Я бы интерпретировал так. Раз вот у нас есть путь, изначально он вот такой, и на нем у
[04:02:12.220 --> 04:02:17.300]  него есть суммарность СЗЛайтов, да. Потом я выкинул вот эту половину и суммарность,
[04:02:17.300 --> 04:02:23.220]  я рассматриваю СЗЛайтов вот на этом пути. Потом я выкинул, ну обработал, ну и выкинул вот эту часть,
[04:02:23.220 --> 04:02:29.860]  и тогда сумма СЗЛайтов у меня там снова уменьшилась в два раза. Ну и так далее. Да, но я там еще,
[04:02:29.860 --> 04:02:36.260]  да, я там выкидываю так, что у меня реально уменьшается в два раза. Да, тут даже вот так. То есть
[04:02:36.260 --> 04:02:41.820]  обычно я тут, когда выкидываю, выкидываю вместе с корнем, да. Вот, и так вот я иду-иду-иду-иду,
[04:02:41.820 --> 04:02:50.780]  и тогда в какой-то момент у меня этот путь сжался до вот этой вершинки со своим СЗЛайтом, да. Теперь
[04:02:50.780 --> 04:02:57.140]  я из этого СЗЛайта я беру только СЗЛайты, которые висят вот на этом пути. Ну там еще могли какие-то
[04:02:57.140 --> 04:03:02.660]  ответвления быть, но мы их выкидываем. Теперь я рассматриваю вот этот путь, на нем висят какие-то
[04:03:02.660 --> 04:03:08.540]  СЗЛайты, ну их суммарно меньше, либо там меньше, чем сколько висело тут, и на нем повторяю эту
[04:03:08.540 --> 04:03:29.060]  операцию. Нет, ну не обязательно для листа. Но там просто там фишка такая, что ты в какой-то
[04:03:29.060 --> 04:03:34.140]  момент обрабатываешь вот путь отсюда до сюда, и выяснилось, что там этот взвешенный центроид его
[04:03:34.140 --> 04:03:40.740]  оказался ровно вот эта вершина, вот эта вершина. Тогда там оказалось так, ты как бы получается в
[04:03:40.740 --> 04:03:46.100]  левом поддереве вот этот путь-то его обработал и выкинул, в правом поддереве надо ты обработал
[04:03:46.100 --> 04:03:51.540]  там путь, который нам не нужен, мы его тоже выкидываем. Поэтому получается мы слева отсекли,
[04:03:51.540 --> 04:03:57.620]  справа отсекли, осталось только эта вершина. То есть в любом ином случае, то есть если бы там
[04:03:57.620 --> 04:04:04.420]  центроид этого пути оказался выше, чем мы, например, то оказалось, что мы выкинули этот путь и выкинули
[04:04:04.420 --> 04:04:11.060]  эту вершину. Поэтому получается мы как бы не менее чем половину выкинули. Вот такая красота.
[04:04:11.060 --> 04:04:16.940]  В общем-то даже по реализации кажется не сильно убойно. Ну то есть пописать, конечно, придется.
[04:04:16.940 --> 04:04:22.220]  Ну вот, в общем-то логарифом остается логарифом.
[04:04:22.220 --> 04:04:35.020]  Так нет, мы так построили, что как бы когда вы там, то есть как бы вот был у вас путь,
[04:04:35.020 --> 04:04:39.380]  да, и мы как бы соответствую ему построили вот какое-то вот дерево.
[04:04:39.380 --> 04:04:54.900]  Ну и что? Ну тогда, смотри, тогда это будет интерпретироваться так, что весь вот этот путь
[04:04:54.900 --> 04:05:04.300]  мы выкидываем и самую эту вершину выкидываем на самом деле. Нет, мы их выкидываем в каком плане?
[04:05:04.300 --> 04:05:09.780]  Как бы сумму длинных ребер на этом пути или там сумму вершин не важно. То есть мы просто
[04:05:09.780 --> 04:05:15.380]  за от единицы прибавляем к ответу. То есть тут тоже мы это как бы обрабатываем. То есть как бы есть два
[04:05:15.380 --> 04:05:20.220]  способа обработать за от единицы, понять, что это аут. То есть против деревоотресков было два
[04:05:20.220 --> 04:05:25.340]  способа выброситься за от единицы. Первый, мы попали в отрезок, который не пересекается с запросом,
[04:05:25.340 --> 04:05:30.140]  поэтому возвращаем ноль. И второй, наоборот, мы попали в отрезок, который является под отрезком
[04:05:30.140 --> 04:05:37.500]  запросного, поэтому мы просто берем сумму на нем полностью и тоже выходим. Вот как бы вот два
[04:05:37.500 --> 04:05:42.180]  способа. Вот здесь тоже самое. То есть вот это мы выкидываем, потому что это нам не надо, а это мы как
[04:05:42.180 --> 04:05:53.740]  бы обрабатываем за единицу, потому что это нам надо целиком. Вот и все. Вот собственно и вся не очень-то
[04:05:53.740 --> 04:06:02.340]  хитрая идея. Ну ладно, хитрая, конечно. Ну то есть хитрая, но, как выясняется, как бы да. То есть,
[04:06:02.340 --> 04:06:07.900]  в общем-то, идея нот. То есть тут оказывается, что просто дерево... Идея в том, что оказывается
[04:06:07.900 --> 04:06:13.300]  деревоотресков нот. То есть можно строить взвешенные деревоотрески для какой-то взвеш,
[04:06:13.300 --> 04:06:19.820]  то есть какую-то взвешенную балансировку по конкретным весам. Ну в принципе, в общем-то,
[04:06:19.820 --> 04:06:25.820]  я думаю, скорее всего, когда вы там изучали какую-нибудь там оптимизацию кнута... Ну-ка,
[04:06:25.820 --> 04:06:32.180]  поднимите руки. Кто знает, что такое оптимизация кнута? Это в динамическом программе такая оптимизация.
[04:06:32.180 --> 04:06:38.860]  Вот. Так вот, там была... Ну вот там, собственно, классическая задача. Почему она называется
[04:06:38.860 --> 04:06:43.820]  оптимизация кнута? Потому что кнут, ее, по крайней мере, по легенде, предлагал для такой следующей
[04:06:43.820 --> 04:06:52.260]  задачи. То есть мы... То есть там дано дерево из N-вершин дерева поиска. То есть дано N-вершин,
[04:06:52.260 --> 04:06:56.780]  мы хотим в нем построить дерево поиска. Но фишка в том, что мы про каждую вершину знаем,
[04:06:56.780 --> 04:07:01.580]  с какой частотой ее будут запрашивать. И хочется сделать балансировку так, чтобы,
[04:07:01.580 --> 04:07:07.300]  как бы, суммарное время, там, мотожидание, условно, времени дохода в этом дереве было как
[04:07:07.300 --> 04:07:12.340]  можно меньше. То есть там... Вот это, на самом деле, буквально то же самое. То есть просто желать,
[04:07:12.820 --> 04:07:17.740]  если там очень жирную вершину хочется поближе к корню, а если вершины редкие, то, в принципе,
[04:07:17.740 --> 04:07:22.860]  там, если там раз в сто лет до вершины доберутся, то до нее можно, в общем-то, и за линию добираться.
[04:07:22.860 --> 04:07:32.060]  Вот. Так что ничего страшного. Вот. То есть такая вот легенда была. Вот. Ну вот и... Ну вот. То есть
[04:07:32.060 --> 04:07:37.380]  вот тут мы эту идею применили. Так что в следующий раз мы, видимо, попробуем эту идею
[04:07:37.380 --> 04:07:43.500]  поприменять еще. Ну да, в следующий раз мы, конечно, будем, конечно, бросить себе еще
[04:07:43.500 --> 04:07:49.300]  больше вызов. Это сказать, как говорится, делаем то же самое, но если деревья еще и переподвешиваются.
[04:07:49.300 --> 04:07:55.980]  То есть мало того, что у нас несколько деревьев, которые подвешиваются друг к другу и еще и
[04:07:55.980 --> 04:08:03.060]  отпиливаются друг от друга, так еще и у нас там будут наглая операция. А пусть корень не вот это,
[04:08:03.060 --> 04:08:09.740]  а вот это. Ну, иногда в некоторых задачах, в общем, они формулируются таким образом,
[04:08:09.740 --> 04:08:15.900]  что корня нету, да. Ну, такая тупая задача. Да, но несколько деревьев. И у вас запросы добавить
[04:08:15.900 --> 04:08:21.540]  ребро, ну, гарантируя, что циклов не появилось, удалить ребро и найти какой-нибудь там минимум на пути.
[04:08:21.540 --> 04:08:26.500]  То есть, в общем-то, в этой задаче, в постановке задачи корень не нужен. То есть он нужен нам,
[04:08:26.500 --> 04:08:31.140]  в общем-то, там для какого-то удобства, хотя переподвешивать придется. Вот. Ну,
[04:08:31.140 --> 04:08:35.180]  выяснится, что это тоже, оказывается, можно. Взвешенность и вот взвешенные балансировки
[04:08:35.180 --> 04:08:39.740]  тут опять превращают логарифом квадрат логарифом. Правда, сильно более магическим
[04:08:39.740 --> 04:08:45.900]  способом на этот раз. Вот. Но как конкретно, это мы уже узнаем в следующий раз. А на сегодня все.
