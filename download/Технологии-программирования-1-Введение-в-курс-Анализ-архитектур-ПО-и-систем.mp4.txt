[00:00.000 --> 00:11.400]  всем доброго дня значит вас тут очень много я не знаю видели ли вы когда-нибудь друг друга
[00:11.400 --> 00:20.040]  на нашем курсе который называется технология программирования в этом году практически даже
[00:20.040 --> 00:24.840]  не удвоение а количество людей которые будут проходить курс два с половиной раза больше чем
[00:24.840 --> 00:30.920]  в предыдущие разы вот почему такое произошло это произошло по той причине что теперь
[00:30.920 --> 00:39.680]  весь фуфумаид проходит этот курс кроме направлений в т значит давайте подумаем почему вот как вы
[00:39.680 --> 00:50.960]  думаете теперь курс проходит большее количество раз людей чем предыдущие потоки вот он на самом
[00:50.960 --> 00:58.520]  деле важный вот и так или иначе вы будете сталкиваться с знаниями которые будут на этом
[00:58.520 --> 01:04.760]  курсе и в будущем обучение и не поверите на практики когда вы будете работать в сфере
[01:04.760 --> 01:13.360]  идти вот поэтому этот курс именно про так сказать промышленное использование кода войти мы с вами
[01:13.360 --> 01:20.000]  на лекциях будем говорить про разные так сказать лучшие практики у всех были как минимум один
[01:20.000 --> 01:25.640]  семинар или еще кого-то не было семинаров ну у кого-то еще не было семинаров на семинаре
[01:25.640 --> 01:29.680]  будут рассматриваться технические темы плюс дополнительно мы с вами будем рассматривать
[01:29.680 --> 01:38.400]  темы связанные с организации кода значит это паттерны проектирования на лекции мы тоже
[01:38.400 --> 01:44.800]  отчасти буду смотреть давайте наверное представлюсь меня зовут пайл охтямов я собственно лектор
[01:44.800 --> 01:51.240]  курса по технологиям программирования ну и по некоторым другим курсам тоже собственно сразу
[01:51.240 --> 01:58.080]  такое ограничение скажу чтобы вы понимали значит еще раз уточню значит у нас есть чат часа ссылку
[01:58.080 --> 02:03.480]  его покажу значит там нужно будет в одной ссылке будет слово драйв поменять на слово чат это для
[02:03.480 --> 02:09.040]  тех кто еще не присоединился к чату нашего курса по идее ссылки мы должны были распространить вот
[02:09.040 --> 02:15.320]  сразу скажу не бойтесь писать чат просто давайте договоримся следующее что нас очень много поэтому
[02:15.320 --> 02:21.600]  старайтесь писать грамотно то есть грамотно по сути изложения потому что иначе это превратится в
[02:21.600 --> 02:29.880]  некоторый хаос дополнительно кстати мы с вами и будем рассматривать некоторые вопросы коммуникации
[02:29.880 --> 02:38.240]  потому что как ни странно в сфере идти код пишут не 80 и не 90 процентов времени а зачастую большую
[02:38.240 --> 02:46.360]  часть времени отводится на коммуникацию потому что все-таки по это по а взаимодействие между
[02:46.360 --> 02:52.560]  людей должно проходить между людьми для того чтобы строить это по давайте сразу определенные ссылки
[02:52.560 --> 02:58.560]  значит полезные ссылки значит все материалы которые будут у нас на курсе будут располагаться
[02:58.560 --> 03:07.720]  на гугл диске ссылка я не знаю задних парт видно или нет если не видно я постараюсь в следующий
[03:07.720 --> 03:15.960]  раз увеличить шрифт в общем ссылка ахпл ru tp 2024 драйв если вас еще нету до сих пор в чате то
[03:15.960 --> 03:22.000]  вы можете в этой ссылке драйв заменить на чат и вы попадете в чат наш и дополнительно мы будем
[03:22.000 --> 03:28.480]  сдавать все домашние задания через систему ахчекру значит тут приходил иван в перерыве
[03:28.480 --> 03:35.600]  бедно разруливающие все заявки просьба почитайте в основной информации о том как заполнять
[03:35.600 --> 03:40.680]  заявку на регистрацию на курс почему мы это делаем нас 400 плюс человек опять же подчеркну
[03:40.680 --> 03:48.560]  теперь очень важный момент который очень будет сильно влиять на вашу оценку причем причем
[03:48.560 --> 03:57.280]  достаточно буквально deadline по заполнению форм будет 20 февраля в 20 59 мск значит я надеюсь что
[03:57.280 --> 04:03.160]  большинство из вас уже заполнила эту форму но для того чтобы мы начали эффективно собственно
[04:03.160 --> 04:08.440]  проходить задание нам нужно всех зарегистрировать это условие настолько требовательное что те кто
[04:08.440 --> 04:16.720]  не зарегистрируется на курс до 20 февраля 2059 мы поставим пересдачу извините но такие будут
[04:16.720 --> 04:26.440]  требования вот потому что нам нужно разруливать этот курс значит у нас с вами будет 24 группы у
[04:26.440 --> 04:33.840]  нас всего значит всего будет 12 семинаристов и порядка 20 22 ассистентов которые будут помогать
[04:33.840 --> 04:41.640]  вы проверки домашних заданий вот значит это что касается таких вещей по значит в чате мы
[04:41.640 --> 04:46.840]  специально организовали процесс таким образом чтобы вы видели собственно кто является лектором
[04:46.840 --> 04:52.640]  семинаристом или ассистентом к ним можно задавать вопросы значит давайте теперь расскажу все-таки
[04:52.640 --> 04:57.200]  про что мы узнаем с вами на курсе во-первых в практической точки зрения курса мы будем
[04:57.200 --> 05:03.120]  говорить с вами про ликбез разработчика кто знает как расшифровывать слово ликбез да
[05:03.120 --> 05:07.920]  ликвидация безграмотности то есть мы с вами будем как раз рассматривать аспекты связанные именно с
[05:07.920 --> 05:13.280]  промышленной разработкой значит дальше мы с вами поговорим про основы проектирования программного
[05:13.280 --> 05:20.000]  обеспечения оно же сокращается как по после этого мы с вами рассмотрим методологии разработки
[05:20.000 --> 05:25.840]  по и более того вы попробуйте эти методологи разработки по на практике потому что у нас
[05:25.840 --> 05:30.600]  с вами будут проектные задания которые можно будет делать либо самостоятельно либо в небольших
[05:30.600 --> 05:36.800]  командах и мы с вами будем учиться писать промышленный код не олимпиадный то есть в процессе
[05:36.800 --> 05:43.280]  код ревью мы будем детально обращать внимание на практике использования промышленного кода ну
[05:43.280 --> 05:49.600]  и в отчасти значит на сегодняшней лекции мы уже некоторые практики с вами посмотрим вот это
[05:49.600 --> 05:58.080]  важно давайте сразу я пойму следующую вещь кто писал из вас код который располагается больше
[05:58.080 --> 06:07.840]  чем в одном файле программы ага ну уже достаточно много это радует вот значит мы с вами должны
[06:07.840 --> 06:14.520]  понять что тот код который мы обычно пишем на там курсов программирования на c плюс плюс или там
[06:14.520 --> 06:20.720]  какие-то алгоритмы структуры данных это совсем не совпадает с тем как работает промышленный код
[06:20.720 --> 06:28.520]  то есть алгоритмы они полезны они важны а программирование на c плюс плюс тоже естественно
[06:28.520 --> 06:35.560]  важный курс но на самом деле не поверить на практике скорее всего вот те зазубренные знания по курсу
[06:35.560 --> 06:41.440]  программируем на c плюс плюс вам понадобится на уровне синьора где-то вот там понятно что зачастую
[06:41.440 --> 06:48.880]  эти практики мне совсем будут нужны главное чтобы ваш код был читаемым понимаемым и поддерживаем
[06:48.880 --> 06:54.440]  и про это мы тоже сегодня с вами поговорим значит касательно того что мы будем делать с вами на
[06:54.440 --> 07:01.760]  занятиях на лекциях мы с вами будем узнавать лучшие практики из промышленной среды я постараюсь
[07:01.760 --> 07:08.240]  это донести и будем понимать почему на работе используется методология x а не методология y на
[07:08.240 --> 07:13.480]  семинарах будут рассматриваться инструменты разработки значит первые несколько семинаров
[07:13.480 --> 07:20.760]  будут посвящену тому как работать баше знакомится с линуксом и дополнительно мы с вами посмотрим как
[07:20.760 --> 07:27.360]  работает система контроля версии он же гид собственно и дальше мы с вами на семинарах будем разбирать
[07:27.360 --> 07:32.640]  например шаблоны проектировать сразу скажу что часть связана с шаблонами проектирования
[07:32.640 --> 07:40.080]  программирования они будут отчасти на семинарах отчасти на лекциях почему так сделано потому что я
[07:40.080 --> 07:45.680]  буду говорить про некоторые технологии собственно и показывать сразу на паттернах каким образом они
[07:45.680 --> 07:52.320]  реализовываются просто чтобы вы понимали как это можно реализовать на практике собственно
[07:52.320 --> 08:00.160]  система оценивания давайте сразу скажу 40 процентов это технические задания они будут появляться
[08:00.160 --> 08:05.720]  наверное сегодня или завтра мы добавим нулевое техническое задание чтобы вы познакомились каким
[08:05.720 --> 08:11.560]  образом работать системой системы проверки каким образом она работает значит дальше будет 40
[08:11.560 --> 08:18.520]  процентов состоять из проекта это как раз проект который мы с вами будем писать по факту первый
[08:18.520 --> 08:24.920]  такой промышленный код он будет на 30 эти 40 процентов развиваются на два процента значит 30
[08:24.920 --> 08:31.840]  процентов это вы пишете сам программный код а 10 еще вы внедряете те технические задания которые
[08:31.840 --> 08:37.800]  у вас были вы свой собственный проект потому что мы как раз будем смотреть про технические задания
[08:37.800 --> 08:43.240]  не то как просто взять и реализовать а для того чтобы их внедрить на практике то есть по факту
[08:43.240 --> 08:47.280]  можно считать что технические задания вот технический стэк который мы с вами проходим это
[08:47.280 --> 08:55.680]  основная часть работы наши наши в этом семестве мы по факту являемся на лекции таким сопутствующим
[08:55.680 --> 09:01.760]  материалом для понимания того а зачем же мы все это проходим и 20 процентов это контрольные
[09:01.760 --> 09:07.320]  работы значит я вижу что нас очень много поэтому нам нужно будет придумать как организовать процесс
[09:07.320 --> 09:14.720]  контрольных работ я думаю что мы с этим справимся возможно что аудитория будут проводиться еще и в
[09:14.720 --> 09:20.360]  соседней аудитории то есть как-нибудь мы возразделим вот контрольные работы первая контрольная
[09:20.360 --> 09:26.280]  работа точно будет по материалам лекции вторая контрольная работа будет по совместному материалу
[09:26.280 --> 09:33.720]  лекции и семинаров и посмотрите внимательно важный пункт чтобы понятно в сумме сколько
[09:33.720 --> 09:40.040]  получается 100 процентов да понятно что можно допустим решить все технические задания и ничего
[09:40.040 --> 09:47.600]  не сделать по проекту и написать контрольную наполовину и получить оценку хор 5 кажется да
[09:47.600 --> 09:53.760]  поэтому чтобы такого не было разнообразие мы для каждого из пунктов водим блокирующий балл то есть
[09:53.760 --> 10:00.640]  что означает в прошлых годах блокирующий балл такие были 15 технические задания 10 проект
[10:00.640 --> 10:05.360]  и 5 контрольные то есть если вы все пороги автоматически проходите вы уже получаете вот
[10:05.360 --> 10:14.960]  вот понятно что больше нужно сделать да и еще в чате поднимался вопрос раз уж это было объявлено
[10:14.960 --> 10:22.360]  публично и с плюсом к этим ста процентам есть еще 10 процентов которые являются активностью либо
[10:22.360 --> 10:28.600]  на семинарах либо на лекциях то есть в принципе я буду на лекциях отмечать тех людей которые
[10:28.600 --> 10:33.920]  часто задают вопросы и пытаются коммуницировать со мной и на семинарах тоже семинаристы будут
[10:33.920 --> 10:39.480]  отмечать активность то есть можно получить еще сверх балл то есть не надо переживать что вот
[10:39.480 --> 10:44.640]  допустим десятку получить нереально на самом деле вполне реально и введение как раз 110 процентов в
[10:44.640 --> 10:51.760]  прошлом году это показала так давайте посмотрю да значит теперь касательно те темах лекционных
[10:51.760 --> 10:57.880]  занятий это draft опять же темы могут варьироваться мы с вами будем говорить про проектирование по по
[10:57.880 --> 11:03.360]  паттерны проектирование дальше мы научимся с вами на базовом уровне разбирать диаграммы то
[11:03.360 --> 11:08.560]  есть это язык общения программистов независимости от кода после этого мы с
[11:08.560 --> 11:14.280]  вами рассмотрим какие же типы парадигмы языков программирования существует и дальше мы пойдем
[11:14.280 --> 11:20.640]  в интересную тему это методология разработки по вот давайте представим себе что вот нас здесь
[11:20.640 --> 11:28.120]  я не знаю сколько порядка 400 человек и вот представьте себе что вы работаете в компании под
[11:28.120 --> 11:35.640]  названием и вам нужно каким-то образом наладить какой-нибудь там взять какой-нибудь стартап
[11:35.640 --> 11:41.080]  организовать ну потому что стартап организовать с меньшими людьми но это по факту уже ну компания
[11:41.080 --> 11:47.640]  которая средняя на рынке айти по количеству людей вот в принципе компании 400 человек может
[11:47.640 --> 11:53.080]  сделать достаточно хороший продукт именно такой технически хорошей и вот как организовать
[11:53.080 --> 11:59.480]  разработку так чтобы каждый из вас что-то делал и при этом не свихнуться от процесса управления
[11:59.480 --> 12:06.760]  мы про это будем говорить потом очень важная тема которую обычно забывают и она специально
[12:06.760 --> 12:11.440]  здесь включена это тестирование программного обеспечения то есть мы с вами поймем что яндекс
[12:11.440 --> 12:16.680]  контест это не панацея всех болезней и что тестирование на самом деле происходит в реальной
[12:16.680 --> 12:22.920]  жизни совсем по-другому после этого мы перейдем с вами к теме под названием сетевая инфраструктура
[12:22.920 --> 12:31.600]  да у нас будет небольшой блок курса по сетям почему это важно я общался значит недавно
[12:31.600 --> 12:38.320]  стимлидом в одной команде в компании в яндексе и он спрашивает я спросил его а какой skill set
[12:38.320 --> 12:45.080]  набор умений необходим для того чтобы человек успешно внедрился в компанию и он мне как раз
[12:45.240 --> 12:51.920]  сказал что у людей достаточно сильно проседают в сети то есть понимание того грубо говоря что
[12:51.920 --> 12:57.000]  происходит когда в адресную строку в браузере вбиваете ссылку и нажимаете на enter на самом
[12:57.000 --> 13:02.840]  деле там происходит огромное количество вещей под капотом дальше мы с вами будем говорить про
[13:02.840 --> 13:08.480]  инфраструктуру и архитектурные паттерны тоже рассмотрим это на лекции и будем рассматривать
[13:08.480 --> 13:14.440]  еще и анти паттерны проектировать то есть каким образом не стоит все это делать и дополнительно
[13:14.440 --> 13:18.640]  возможно мы с вами поговорим про такую тему как роскомпиляция то есть почему это важно
[13:18.640 --> 13:27.440]  потому что сейчас есть такое понятие как интернет вещей умные холодильники умные часы умные
[13:27.440 --> 13:33.840]  устройства камеры и так далее и они работают по другому принципу нежели наши обычные компьютера
[13:33.840 --> 13:41.680]  это тема лекционных занятий они могут варьироваться но в целом вот на лекциях мы будем говорить про это так
[13:42.360 --> 13:53.840]  давайте я здесь остановлюсь это организационные моменты были есть ли вопросы все такие молчок
[13:53.840 --> 14:00.680]  хорошо
[14:00.680 --> 14:13.240]  вы контрольной значит будут некоторые задачи именно практическими по тем мы будем с вами
[14:13.240 --> 14:19.240]  рассматривать разные метрики качества по и там будет задача все посчитать метрику качества по
[14:19.240 --> 14:27.240]  либо будет тема такая что образно говоря вот вы производите технологию x хотите внедрить продукт
[14:27.240 --> 14:33.400]  y вот какой методологи разработки вы собираетесь использовать вот и поясните плюс и минус понятно
[14:33.400 --> 14:40.560]  что сразу скажу что в этих контрольных мы не будем именно четко вот типа где есть субъективные
[14:40.560 --> 14:45.160]  вопросы нам мы не будем четко спрашивать корректного ответа потому что корректного
[14:45.160 --> 14:52.320]  ответа может не быть мы будем просить вас пояснить ваши мысли если ваши мысли выглядят
[14:52.320 --> 15:01.280]  здравыми то почему бы и нет вот потому что как ни странно в сфере it не все так объективно как
[15:01.280 --> 15:12.560]  изначально это может показаться так давайте еще вопросы хорошо давайте тогда двигаться дальше
[15:12.960 --> 15:22.080]  давайте начнем с затравки значит проектирование по мы с вами будем проектировать программные
[15:22.080 --> 15:28.880]  обеспечения и вот смотрите нам нужно с вами к примеру создать систему которая будет там не
[15:28.880 --> 15:35.840]  знаю ежемесячно давайте заходить миллион пользователей давайте подумаем что нам для этого нужно будет
[15:35.840 --> 15:50.440]  да хорошо нам нужна база данных вопрос одна машинка или очень много машин да
[15:50.440 --> 16:06.280]  что еще да который справляется с высокой нагрузкой согласен
[16:06.280 --> 16:16.440]  да географическая диверсификация согласен то есть нам нужны серверы в разных точках мира
[16:20.920 --> 16:28.120]  да какой тип нагрузки у нас будет у нас будет пиковая нагрузка или так сказать распределенная
[16:28.120 --> 16:41.320]  во времени нагрузка да да какой уровень безопасности данных мы должны обеспечивать
[16:41.320 --> 16:50.040]  безопасности и приватности данных вот допустим есть такое понятие как 152 федеральный закон да
[16:50.360 --> 16:56.440]  значит вы не поверите когда вы откроете любую страницу вы увидите типа мы обеспечиваем серверы
[16:56.440 --> 17:04.520]  по 152 фэзе то есть нам если нужно внедрить какой-то проект нам нужно читать спецификацию и
[17:04.520 --> 17:11.960]  сертификацию которая нам необходимо обеспечить допустим если мы говорим про 152 фэзе то там
[17:11.960 --> 17:17.760]  есть четыре уровня доступа к данным вот и какие-то недостаточно общие но допустим если вы храните
[17:17.760 --> 17:25.200]  какие-нибудь у вас а-ля проект в сфере медицины то понятно что персональные данные пользователей
[17:25.200 --> 17:30.880]  вот именно там у человека забрали кровь грубо говоря и она идентифицируется этим человеком
[17:30.880 --> 17:36.120]  конечно же использовать нельзя то есть вообще ни в каком виде их нельзя распространить из
[17:36.120 --> 17:46.520]  данной надо обезличивать еще да настроит способ взаимодействия между этими машинами
[17:46.520 --> 18:02.720]  да типы клиент серверного взаимодействия то что у нас будет работать на клиенте что у нас
[18:02.720 --> 18:13.160]  будет работать на сервере еще что необходимо учитывать это обновление системы потому что я
[18:13.160 --> 18:23.560]  не знаю сталкивались ли вы наверное с сферой игр вот сейчас из-за того что очень жатые бюджета
[18:23.560 --> 18:30.320]  и очень жатые сроки возникло такое понятие как патч первого дня слышали про такое что когда
[18:30.320 --> 18:39.240]  только как только игра выпускается она выпускается с багами не сырая и поэтому там через день или
[18:39.240 --> 18:44.240]  через два выпускается патч которые правят ну какое-то подавляющее количество исправлений
[18:44.240 --> 18:50.400]  потому что грубо говоря когда мы выпускаем игру или любой проект у нас сначала есть какие-то
[18:50.400 --> 18:57.960]  закрытые тестирование мы рассылаем игру достаточно раньше то есть на самом деле игра готова за
[18:57.960 --> 19:06.040]  некоторое время до ее выпуска значит сразу скажу перевод выпуск релиз это одно и то же вот я буду
[19:06.040 --> 19:11.040]  если какой-нибудь жаргонный термин у меня проскакивает пожалуйста останавливайте и
[19:11.040 --> 19:21.600]  я постараюсь рассказать что этот жаргон означает в общем очень много что нам нужно да это вот такой
[19:21.600 --> 19:27.000]  открытый вопрос и мы видим сразу большое количество аспектов которые нам нужно рассмотреть поэтому
[19:27.000 --> 19:36.160]  давайте начнем с плохих советов значит плохие совета вы наверное все знаете что такое айде ну
[19:36.160 --> 19:42.000]  или по крайней мере пользовались и это интегрированная среда разработки собственно плохой совет запускаем
[19:42.000 --> 19:51.000]  проект на миллион пользователей через айде ну звучит смешно да то есть сразу скажу что когда
[19:51.000 --> 19:57.000]  вы запускаете кнопочку run на самом деле под капотом происходит некоторая магия и желательно
[19:57.000 --> 20:04.480]  бы разбираться в этой магии вот запускать через командную строку тоже можно но есть проблема и
[20:04.480 --> 20:11.160]  как раз про это будут в семинаре там вы командной строке про башка договорится вы запускаете в
[20:11.160 --> 20:16.000]  командной строке у вас компьютер отключается да или вы просто закрываете эту вкладку с
[20:16.000 --> 20:22.760]  командной строкой у вас система на миллион пользователей падает понятно что так не стоит
[20:22.760 --> 20:32.000]  делать так ну писать код на коленке на самом деле иногда это происходит но желательно детальное
[20:32.000 --> 20:39.880]  проектирование всей этой системы еще один плохой совет да к сожалению которым редко пренебрегают
[20:39.880 --> 20:46.520]  написано сами разберитесь то есть вы даете инструкцию да и говорите ну нет инструкции в
[20:46.520 --> 20:57.160]  общем вот вам интерфейс пожалуйста тыкайтесь смотрите вам далее давайте в качестве примера
[20:57.160 --> 21:06.440]  задание по мотану да что означает писать задание по мотану на коленке вы такие садитесь не делаете
[21:06.440 --> 21:13.400]  его за месяц за два начинаете делать садитесь начать вы последние там не знаю в последнюю
[21:13.400 --> 21:21.880]  ночь это еще хорошо и вы такие идете просто уже на пару по мотану сдавать задание и вот вы пишете
[21:21.880 --> 21:27.760]  код реально на коленках просто потому что предыдущую с предыдущей пары еще люди не вышли вот и вы
[21:27.760 --> 21:33.320]  пытаетесь судорожно написать код точнее не кота задания для того чтобы его сдать или пока вас
[21:33.320 --> 21:39.080]  там не вызвали там преподаватель сказал что образно говоря мы сдаем тетрадки в конце пары и
[21:39.080 --> 21:49.960]  вы сидите на паре пишете типа судорожно хотя с учетом того что сейчас в принципе у всех ноутбуки и
[21:49.960 --> 21:55.280]  можно сидеть в любом месте то так или иначе скорее всего вероятно в буквальном смысле код реально
[21:55.280 --> 22:00.880]  пишется на коленке потому что просто садимся и пишем код на него на этих коленках тут это образно
[22:00.880 --> 22:09.280]  сказать образное насказание я ответил на вопрос вот поэтому важно именно иметь документацию более
[22:09.280 --> 22:14.640]  того в некоторых сферах вы не поверите вот есть такие достаточно строгие требования по
[22:14.640 --> 22:20.720]  сертификации с которым я статнулся где нужно весь код который вы используете сторонней
[22:20.720 --> 22:26.320]  прокомментировать каждую строку кода это вот самые требования строгие требования по сертификации
[22:26.320 --> 22:34.280]  которые могут возникать и последний пункт не защищаем систему собственно сейчас есть достаточно
[22:34.280 --> 22:41.400]  большое уязвимость количество уязвимости которые можно реально внедрить и допустим вот недавно
[22:41.400 --> 22:48.280]  на днях вышла там достаточно большая проблема уязвимости выяснил с которой грубо говоря
[22:48.280 --> 22:55.040]  пользователь может получить права супер пользователя который может выполнять все действия если кто
[22:55.040 --> 23:02.040]  знаком это было найдено в докере вот такая уязвимость или другая уязвимость которая была
[23:02.040 --> 23:07.560]  достаточно на слуху я не помню то ли год то ли два назад есть система для логирования данных то
[23:07.560 --> 23:15.160]  есть вы заходите вы заходите на страницу на какую-то и у вас сразу там появляется какая-то
[23:15.160 --> 23:24.080]  информация давайте может быть если хотите я сейчас эксперимент покажу смотрите значит сейчас
[23:24.080 --> 23:42.280]  я открою команду строку открою новую еще и сделаем так теперь нам нужен экспериментатор который
[23:42.280 --> 23:49.240]  возьмет и зайдет на сайтах чекру вот прямо сейчас заодно протестируем нагрузку
[23:49.240 --> 24:03.240]  о пошли пошли пошли запросы то есть вот все как только вы заходите у вас запрашивается какая-то
[24:03.240 --> 24:10.080]  страница в интернете да и вот эти все действия реально идут да к сожалению тут ip адрес не
[24:10.080 --> 24:15.040]  отслеживается но по факту реально еще отслеживается ваш ip адрес которого вы зашли на это
[24:15.040 --> 24:24.520]  о проводим нагрузочное тестирование более того видите здесь есть информация о том с какого
[24:24.520 --> 24:33.080]  браузера вы зашли это сохраняется это используется допустим для бана вашей страницы допустим если
[24:33.080 --> 24:38.640]  вы пытаетесь каким-то ботом зайти на сайт да кстати тут видно что у большинства из вас
[24:38.640 --> 24:44.240]  страницы закашированные потому что здесь 304 код возврата то есть вы не выполняете
[24:44.240 --> 24:53.480]  вообщем интересный эксперимент да вот и собственно в этой библиотеке нашлась уязвимость ну не в
[24:53.480 --> 24:57.880]  это в аналоге библиотеке для ларгирования нашлась уязвимость который можно было зайти от
[24:57.880 --> 25:04.000]  супер пользователя и начать выполнять любой код системе ее поправили это самая критичная
[25:04.000 --> 25:12.480]  уязвимость которая была за последнее время все давайте я остановлю этот экран вот то есть все
[25:12.480 --> 25:17.800]  равно защищать систему надо потому что если допустим какие-то данные утекут это судебное
[25:17.800 --> 25:25.560]  разбирательство прямо сразу вот это что касается плохих советов и вот мой любимый пример вот
[25:25.560 --> 25:30.600]  смотрите вот такой вот прибор он называется глюкометр он измеряет уровень сахара крови
[25:30.600 --> 25:39.080]  вопрос почему документация у этого маленького безобидного устройства может достигать 50 страниц
[25:39.080 --> 25:57.560]  да риск ошибки очень большой особенно когда мы работаем с кровью то есть мы забираем кровь
[25:57.560 --> 26:04.880]  у определенного человека да есть достаточно опасная болезнь заражение крови и не дай бог
[26:04.880 --> 26:09.760]  допустить поэтому там именно указывается каким образом палец прокалывать каким образом забирать
[26:09.760 --> 26:15.680]  это все дело пишется что пожалуйста проводить это все дело сваткой аккуратно вот и так далее
[26:15.680 --> 26:22.600]  значит это глюкометр у лактометра который измеряет уровень молочной кислоты в крови лактоза там
[26:22.600 --> 26:28.480]  документация еще больше потому что несколько режимов работы есть вот поэтому это очень важно
[26:28.480 --> 26:34.720]  ну и собственно понятно что еще вот если у нас есть такая система на миллион пользователей да она
[26:34.720 --> 26:39.240]  скорее всего должна быть достаточно большой и мы с вами явно должны видеть архитектуру этой
[26:39.240 --> 26:47.560]  системы да поэтому зачастую мы делаем некоторые эскиз значит это допустим эскиз того как выглядит
[26:47.560 --> 26:57.960]  автомобиль мы с вами видим что я не знаю у кого были уроки черчения или сейчас это уже было да но
[26:57.960 --> 27:07.040]  собственно чтобы машина поехала нам нужно построить этот эскиз чтобы мы с вами реально видели типа
[27:07.040 --> 27:12.640]  соотношения по сторонам потому что когда мы это с вами все будем собирать и внезапно машина может
[27:12.640 --> 27:19.960]  не не завестись вот понятно что первое это эскиз дальше у нас возникает модель то есть маленький
[27:19.960 --> 27:26.000]  маленький прототип который мы тестируем на он не в полной нагрузке то есть образно говоря если
[27:26.000 --> 27:33.840]  мы говорим с вами про по о не про по про классическую с тем что такое модель машины это прототип который
[27:33.840 --> 27:41.920]  там для которого высчитывается аэродинамика процессов там автомобиль едет либо мы говорим что
[27:41.920 --> 27:48.280]  у нас если мы хотим запроектировать самолет то мы должны предварительно этот самолет не
[27:48.280 --> 27:55.760]  выпускать в промышленное использование а провести испытания в аэротрубе наверное вы слышали сейчас
[27:55.760 --> 28:03.120]  что сейчас есть проблемы у компании боинг критические проблемы что у них несколько самолетов уже
[28:03.120 --> 28:08.720]  попало в крупной авиакатастрофа то есть у них есть колоссальные проблемы в последней миссией
[28:09.200 --> 28:18.120]  с которыми они пытаются разобраться вот если мы говорим про эскиз то это архитектура самой
[28:18.120 --> 28:24.120]  системы мы рисуем а в качестве модели мы можем взять ту же самую маленькую маленькую систему и
[28:24.120 --> 28:29.760]  допустим мы запускаем ее не на тысячи машин а на двух трех смотрим каким образом какую нагрузку
[28:29.760 --> 28:37.040]  мы с вами можем переварить вот или если мы говорим про какую-то небольшую систему то вот таким
[28:37.040 --> 28:43.360]  образом может выглядеть эскиз в программном обеспечении это так называемый диаграмма классов
[28:43.360 --> 29:00.760]  давайте сразу прошу все ли знают здесь что такое класс так у кого-то уже был c плюс плюс у всех
[29:00.920 --> 29:11.920]  до классов дошли вот хорошо это эта сущность вы которой значит мы можем выделить некоторые
[29:11.920 --> 29:19.680]  общие элементы в классе могут быть поля и у класс может выполнять некоторые роли посредством методов
[29:19.680 --> 29:29.120]  этого класса вот здесь в принципе мы с вами сразу видим что это за по как вы думаете тут есть
[29:29.120 --> 29:35.920]  аккаунт класс значит от него наследство кредит аккаунт да скорее всего это что-то связано с
[29:35.920 --> 29:41.880]  банковской сферой значит вот такие диаграммы называются и мы будем разбираться каким образом
[29:41.880 --> 29:47.680]  их можно строить допустим мы с вами видим что у организации вот смотрите я сейчас покажу у
[29:47.680 --> 29:55.600]  организации есть адрес адреса и адресов может быть либо 0 либо 1 то есть мы на диаграмме в коде
[29:55.600 --> 30:02.240]  мы бы написали что это у нас объект типа ну нан там нил разные языки программирования а вот здесь
[30:02.240 --> 30:07.200]  мы в схематическом виде видим что у пользователей либо существует организация либо не существует
[30:07.200 --> 30:14.080]  организация вот а вот этом мы здесь видим что это тип кинам перечислителя то есть это либо дом
[30:14.080 --> 30:22.960]  либо офис вот давайте посмотрим например и скажем значит хорошие это прототип нет а как мы это
[30:22.960 --> 30:31.200]  поняли на смотрите у нас есть вот центральный объект сразу скажу что этот объект называется
[30:31.200 --> 30:40.320]  университет и тут от него какие-то большие количество связи так вот знакомьтесь это первый
[30:40.320 --> 30:46.200]  антипатор в проектировании так называемый божественный объект или еще его называют
[30:46.840 --> 30:56.120]  то есть это сущность которая по факту существует везде то есть система без нее не работает как
[30:56.120 --> 31:02.320]  понять что перед нами находится год обжиг на самом деле это можно понять по названию классов вот
[31:02.320 --> 31:12.120]  смотрите если класс называется система программа что-нибудь еще давайте синонимы какие-нибудь
[31:12.120 --> 31:24.760]  ну да допустим мэйн да собственно если у нас есть класс мы он нужен только для того чтобы
[31:24.760 --> 31:33.320]  запустить программу больше ничего он не должен делать вот если мы говорим что у нас система
[31:33.320 --> 31:39.680]  икс да то класса икс не должно быть или он должен быть достаточно маленький только для старта
[31:39.680 --> 31:47.800]  приложения да тут честно это просто для визуализации нужно вот и давайте посмотрим как раз на примеры
[31:47.800 --> 31:53.800]  систем которые у нас могут быть значит вот так выглядит линукс сразу скажу что линукс это не
[31:53.800 --> 32:00.520]  операционная система это ядро и вот обычно когда у нас система большая ее сначала делят на наборы
[32:00.520 --> 32:07.040]  компонент либо модули больших либо сервисов а потом каждый из компонентов или сервисов делят
[32:07.040 --> 32:13.280]  на классы объекты значит вот так выглядит ядро линукс у нас с вами есть интерфейс для системных
[32:13.280 --> 32:19.480]  вызовов то есть для того чтобы выполнить действия какие-то это может быть либо управление процессами
[32:19.480 --> 32:25.240]  вашими программами либо переключение памятью либо работа с файловой системой либо управление
[32:25.240 --> 32:30.960]  с устройствами по идее на семинарах должны были показать что в линуксе устройство это файл и
[32:30.960 --> 32:37.200]  сетевое взаимодействие потом для каждой из вот этих частей то есть это большая система
[32:37.200 --> 32:45.000]  с набором плагинов это называется сейчас я вспомню по-моему монолит с подключением модулей я
[32:45.000 --> 32:51.520]  могу ошибаться то есть это такая монолитная система и вот видно типа какие при фичи
[32:51.520 --> 32:57.720]  имплементированная и дальше указано каким образом поддерживается каждый из этих компаний то
[32:57.720 --> 33:05.040]  есть вы можете вот каждый из этих функциональности подключить свой собственный плагин или дополнение
[33:05.040 --> 33:12.080]  ну и дальше вот тут вот указано типа а куда это спускается на уровень железа то есть видите
[33:12.080 --> 33:19.000]  диаграмма явно говорит за себя типа каким образом устроена система вот и по хорошему высоком
[33:19.000 --> 33:27.600]  уровне вот этот вот эскиз должен напоминать нам о том собственно а типа вообще где мы находимся
[33:27.600 --> 33:34.800]  и что мы делаем вот такой пример другая примера систем начата это локальная система это гид и
[33:34.800 --> 33:41.240]  в ней тоже на самом деле все расположено по определенным папкам значит здесь у нас с вами
[33:41.240 --> 33:55.440]  есть ссылки на определенные либо объекты либо на там либо на сказать там ветки если вы понимаете
[33:55.440 --> 34:01.200]  о чем я то есть и при этом видно что каждый тип объектов имеет свой собственный вид то есть
[34:01.200 --> 34:08.480]  они раскрашены в разные цвета для визуализации то есть мы сразу видим там допустим каким образом
[34:08.480 --> 34:14.720]  объекты между собой связан то есть тут видно видна определенная цепочка то есть сразу видно что
[34:14.720 --> 34:21.840]  все работает по папочкам все разложено все отлично причем так понять что в архитектуре все плохо это
[34:21.840 --> 34:29.280]  делается так что если у вас есть определенное количество ну под компонент и вас между разными
[34:29.280 --> 34:33.640]  компонентами проводится достаточно большое количество стрелок такое быть не должно то есть
[34:33.640 --> 34:41.240]  внутри одного компонента должно быть как можно больше стрелочек вот значит еще одна система это
[34:41.240 --> 34:47.720]  чисто для демонстрации это система для мониторинга она называется прометеус прометей если говорит на
[34:47.720 --> 34:54.920]  русский язык и она позволяет собирать как раз данные от разных источников от разных серверов и
[34:54.920 --> 35:00.320]  говорить допустим что если у нас есть какая-то нештатная ситуация то вам приходит либо
[35:00.320 --> 35:08.720]  уведомление в какой-нибудь messenger либо вам приходит звонок да реально бывает такое что в больших
[35:08.720 --> 35:16.520]  компаниях есть такое понятие как дежурство то есть когда человек его назначает дежурным и после
[35:16.520 --> 35:21.680]  этого значит он говорит он должен разбирать все нештатные инциденты то есть проблемы которые
[35:21.680 --> 35:28.880]  случились системы допустим там не знаю как какой-то из под компонентов сбоит либо на него переставили
[35:28.880 --> 35:35.400]  достаточно большую нагрузку эта система позволяет на это все оперативно реагировать и видно что вот сам
[35:35.400 --> 35:41.000]  сервер это центральная часть вот этого всего процесса но при этом ведь есть разные способы того
[35:41.000 --> 35:49.560]  каким образом могут заливаться данные в этой системе то есть сразу видно что кто-то может
[35:49.560 --> 35:55.480]  подключиться извне как программируемый интерфейс при помощи специального языка и есть система
[35:55.480 --> 36:01.880]  которая умеет отправлять уведомления а вот это вот левая часть этой диаграммы показывает о том
[36:01.880 --> 36:08.760]  каким образом мы можем подключать разные системы к этой к этой основной части то есть это так
[36:08.760 --> 36:15.480]  называемая графическое представление нашей диаграммы ну и последняя система на самом деле
[36:15.480 --> 36:22.440]  как ни странно это самая популярная система которая пользуется на у нас в стране вы тоже
[36:22.440 --> 36:30.000]  кстати с ней взаимодействует как ни странно угадайте где я пока слайд презентацию опущу
[36:30.000 --> 36:43.480]  а еще да в интернет магазинах вы видели наверное люди ходят со сканерами и пикают товары кто-нибудь
[36:43.480 --> 36:52.680]  видел вот в них стоит 1s версия приложения значит что еще есть вы не поверите где
[36:52.680 --> 37:02.960]  вы взаимодействуете в личный кабинет смотрели в fti а знаете что там под капотом там под капотом
[37:02.960 --> 37:10.320]  1s управление организателем организа управление образовательными организациями или какой-то
[37:10.320 --> 37:15.680]  из под компонентов 1s почему собственно эта система достаточно популярна потому что у
[37:15.680 --> 37:21.760]  1s есть так называемая платформа поверх которой можно создавать разные приложения при помощи
[37:21.760 --> 37:29.080]  конфигуратора чтобы вы понимали насколько большая система код платформы я могу ошибаться но
[37:29.080 --> 37:38.760]  в какое-то время были замеры он состоит из 18 угадаете чего строк кода миллионов строк кода
[37:38.760 --> 37:52.680]  вот насколько большие программы вы писали так две тысячи ну две пять тысяч да а тут весь
[37:52.680 --> 38:00.800]  продукт большая платформа 18 миллионов строк кода то есть это прямо очень очень много и вот тут
[38:00.800 --> 38:06.680]  есть как раз система 1s ERP управление организациями и вот в ней есть достаточно большое количество
[38:06.680 --> 38:14.280]  под платформ и вот по факту каждый из них либо делает связь внутри друг друга либо наследует
[38:14.280 --> 38:21.400]  какие-то особенности друг друга то есть куда сейчас не ткни везде 1s да тем более они заняли
[38:21.400 --> 38:29.120]  монопольное по факту положение на рынке в тот момент когда другие компании ушли у нас из сферы
[38:29.120 --> 38:37.120]  так хорошо давайте тогда будем решать мы будем двигаться последовательно или будем с перерывами
[38:37.120 --> 38:49.520]  на 5 минут все хорошо давайте тогда без перерыва значит давайте поговорим что такое архитектура
[38:49.520 --> 38:55.000]  программного обеспечения значит первое первое такое определение это абстрактная структура
[38:55.000 --> 39:00.720]  программного обеспечения которая вот представляется вот таком виде как мы это
[39:00.720 --> 39:07.040]  показали это называется архитектура либо это специальная дисциплина которая изучает создание
[39:07.040 --> 39:13.880]  систем для программного обеспечения вот и давайте поговорим про некоторые критерии хороший
[39:13.880 --> 39:19.280]  архитектур то есть что у нас должно быть значит первое что у нас должно быть это критерии
[39:19.280 --> 39:25.280]  эффективности системы опять же мы это будем еще специфицировать я пока что просто скажу
[39:25.280 --> 39:32.160]  смотрите первое что нам нужно это надежность нашей системы и в чем заключается надежность это
[39:32.160 --> 39:38.800]  составные пункты это отказа устойчивость то есть представьте себе что у вас часть системы
[39:38.800 --> 39:45.240]  отвалилась при этом по каким-то причинам там либо дата центр сгорел либо электричество отключили
[39:45.240 --> 39:51.040]  либо хакеры проникли вот то есть насколько у вас система в вот таком режиме способна
[39:51.040 --> 40:00.040]  существовать нам кажется сейчас это абстрактный но вот кстати кейс недельной давности кто помнит
[40:00.040 --> 40:12.720]  что было в прошлый вторник ру зона интернета отвалилась наверное помните этот сценарий то
[40:12.720 --> 40:18.840]  есть когда сайты в домене точка ру не загружались собственно сбой который привел к отказу всего
[40:18.840 --> 40:26.520]  интернета вот поэтому такие крупные компании например netflix значит у них есть специальная
[40:26.520 --> 40:33.520]  технология называется хаос манки которая заключается в том что внутри самого netflix вот
[40:33.520 --> 40:39.920]  это большая экосистема с наборами серверов ходят такая маленькая обезьянка и ломает сервера
[40:39.920 --> 40:47.680]  в случайном порядке просто берет и отключает там 10 процентов серверов значит чтобы понимали
[40:47.680 --> 40:57.320]  как выглядит обезьянка был советский мультик я не знаю видели нет где мама обезьяна это за
[40:57.320 --> 41:05.360]  маленькими ребенками охотила не охотилась и наблюдала вот наверное вспомните этот мультик
[41:05.360 --> 41:12.800]  вот вот по факту вот вот эти маленькие обезьянки то как внутри netflix все устроено ну ничего они
[41:12.800 --> 41:20.540]  переживают сын огромными это огромные нагрузки посмотрим это как запустится второй сезон какой
[41:20.540 --> 41:28.240]  какой последний популярный сериал у этих и граф кальмаров вспомнил да то есть они выдерживают
[41:28.240 --> 41:33.840]  достаточно большие нагрузки при этом когда это все происходило в российских сервисах все
[41:33.840 --> 41:42.360]  намертво ложилось то есть намертво падала и все вот мой кейс там недавний ну как недавний год
[41:42.360 --> 41:48.640]  назад я не смог нормально посмотреть финал чемпионата мир по футбол просто серверы падали из-за
[41:48.640 --> 41:54.680]  нагрузки вот это значит не исправление с нагрузкой отказываются то есть насколько система может
[41:54.680 --> 42:01.480]  выдерживать непреднамеренное падение узлов вторая вещь это восстанавливаемая система то есть если
[42:01.520 --> 42:08.840]  у нас система упала все-таки насколько быстро она восстановится в своем оперативном режиме то
[42:08.840 --> 42:12.800]  есть иногда восстанавливают то есть если восстанавливаемость несколько минут это идеальный
[42:12.800 --> 42:19.120]  кейс несколько часов это уже проблемно несколько суток это уже беда для бизнеса то есть есть
[42:19.120 --> 42:26.000]  прямо требования которые есть и если у вас система допустим недоступна какое-то время вы начинаете
[42:26.000 --> 42:31.640]  платить компенсацию другим компаниям то есть это прямо есть в юридических документах и
[42:31.640 --> 42:39.640]  следующая вещь это зрелость то есть насколько компания уже давно на рынке зарекомендовала
[42:39.640 --> 42:47.360]  себя как хороший продукт которым пользуется вот в качестве зрелости подходит 1s потому что у
[42:47.360 --> 42:53.040]  них во первых и бизнес модель хорошая достаточно и вообще продукт который достаточно долго на
[42:53.040 --> 43:02.160]  рынке находится правда ее под капотом иногда ругают типа а почему опять это 1s глючит и так
[43:02.160 --> 43:10.080]  далее но в целом ей пользуется вторая вещь это безопасность то есть насколько наши данные
[43:10.080 --> 43:18.040]  спокойно хранятся третья это производительность системы и вот смотрите я хочу сказать про
[43:18.040 --> 43:28.200]  производительность вот сразу что мы обычно подразумеваем под производительностью да смотрите
[43:28.200 --> 43:33.600]  количество операции выполняем в секунду только если мы про алгоритмах это измеряем мерах асимптотики
[43:33.600 --> 43:40.000]  алгоритмов то есть сколько операции за секунду мы с вами делаем здесь же возникают другие метрики
[43:40.000 --> 43:47.080]  допустим одна из метрик она называется rps это количество запросов в секунду которая выдерживает
[43:47.080 --> 43:53.280]  сервер или количество пользователей которые выдерживает наш сервер если мы говорим про
[43:53.280 --> 43:59.960]  игры то как измеряется производительность в какой метрике pps количество кадров в секунду то есть
[43:59.960 --> 44:05.240]  вот эти вот метрики они позволяют нам отслеживать насколько наша система производительная более
[44:05.240 --> 44:11.920]  того мы можем смотреть на среднюю нагрузку загрузку нашей системы то есть насколько у нас цпу
[44:11.920 --> 44:18.520]  занято или количество оперативной памяти следующий факт это масштабируемость то есть
[44:18.520 --> 44:24.520]  насколько наша система является масштабируемым значит тут бывает два типа масштабирования первое
[44:24.520 --> 44:31.600]  масштабирование это вертикальное масштабирование что это означает это скорее всего пока ваш кейс вот у
[44:31.600 --> 44:39.240]  вас был ноутбук в котором 4 гигабайта оперативной памяти 4 ядра вы берете и покупаете новый компьютер
[44:39.520 --> 44:49.440]  себе 8 гигабайт оперативной памяти 8 ядр увеличили ресурсов два раза кажется все замечательно но
[44:49.440 --> 44:57.080]  вопрос как вы думаете увеличение ресурсов два раза таким же образом по какой зависимости будет
[44:57.080 --> 45:08.800]  идти то есть если мы график построим то есть это у нас ресурсы а это у нас цена как вы думаете
[45:08.800 --> 45:16.240]  какой порядок функцию будет экспонента да то есть вы не можете это расширять вот бесконечно долго
[45:16.240 --> 45:26.640]  потому что просто есть ограничение на железо поэтому так на одном компьютере вы не вытянете
[45:26.640 --> 45:33.640]  систему с миллионом человек а есть другой способ называется горизонтальной масштабирование а что
[45:33.640 --> 45:41.760]  если вместо одного сервера которые два ядра 2 гига 4 ядра 4 гига вы поставим второй третий
[45:41.760 --> 45:52.240]  четвертый пятый и так далее и если у нас идет какой-то запрос сайта то мы ставим специальный
[45:52.240 --> 45:58.200]  узел который называется балансировщиком и перенаправляем нагрузку на случайный сервер
[45:58.200 --> 46:06.080]  понятно что тогда вот эти вот все сервери должны действовать как одно целое точнее они должны
[46:06.080 --> 46:12.680]  дублировать друг друга по функциональности но здесь есть проблема если вы хотите хотите хранить
[46:12.680 --> 46:18.960]  каким-то образом данные то понятно что данные нельзя хранить на каждом из компьютеров по
[46:18.960 --> 46:36.720]  отдельности то есть нужна еще отдельное отдельное хранение но тогда его нужно распределять между
[46:36.720 --> 46:43.200]  несколькими серверами то есть это как раз алгоритмы на внешних данных есть такое понятие и это
[46:43.200 --> 46:50.080]  хороший способ если мы говорим про какую-нибудь базу данных да или допустим там делает какой-то
[46:50.080 --> 46:55.440]  другой тип хранения баз данных образно говоря если интересно вы берете делаете алфавитный
[46:55.440 --> 47:03.880]  каталог у вас есть и ключи от а до я и вы говорите что данные допустим по букве а хранятся в одном
[47:03.880 --> 47:10.360]  месте по букве б будут храниться в другом сервере с в третьем да и в четвертом и так далее то есть
[47:10.360 --> 47:15.600]  вы их разделяете на разные серверы это называется шардирование данных вот и таким образом их
[47:15.600 --> 47:24.160]  можно раскидывать друг с другом вот то есть немножко выходим за предел одного компьютера да кстати
[47:24.160 --> 47:30.640]  где используются зачастую алгоритмы поиска в виде бинарного дерева они обычно используются в базах
[47:30.640 --> 47:37.680]  данных только там используется обычно не классическое красно-черное дерево или овл дерево там
[47:37.680 --> 47:45.720]  используется б дерево слышали такую структуру данных ну вот это немножко модифицированное
[47:45.720 --> 47:54.280]  дерево поиска которая именно предназначена для построения поисковых индексов вот так
[47:54.280 --> 48:06.280]  есть ли вопросы по этому пункту для поискового индекса то есть для поиска информации быстрой
[48:08.560 --> 48:23.960]  ну тут зависит от того что такое внешние данные так давайте двигаться дальше гибкость системы что
[48:23.960 --> 48:29.520]  такое гибкость системы это означает что вы в любую часть системы можете внести изменения
[48:29.520 --> 48:36.440]  которые не затронут собственно другие части системы далее быстрое нахождение ошибок то есть
[48:36.440 --> 48:41.560]  у вас система настолько адаптивно что вы можете зайти в любую часть и быстро понять где у вас
[48:41.560 --> 48:47.400]  находятся ошибки если что ее модифицировать либо даже возможность заменить на какую-то более
[48:47.400 --> 48:56.320]  новую совершенную версию дальше что такое гибкость еще системы это настройка системы вот пример вы
[48:56.320 --> 49:03.680]  играете там не знаю заходите на какой-то сайт да и у вас есть настройки допустим у вас есть разные
[49:03.680 --> 49:11.200]  части приложения которые вы можете активировать нам допустим куда как далеко ходить заходим на
[49:11.200 --> 49:18.160]  сайт контакта в контакте ru нет это раньше он назывался контакте ru сейчас вики и точка ком и у
[49:18.160 --> 49:25.640]  вас лев в верхнем меню есть пункт с основным меню вы можете зайти вы настройки и поменять
[49:25.640 --> 49:33.080]  те пункты меню которые у вас могут использоваться вот или допустим у самих так сказать администраторов
[49:33.080 --> 49:40.760]  есть возможность того каким образом будет вести себя система то есть допустим что вы там не
[49:40.760 --> 49:47.160]  можете создавать какие-то права легко можно разграничить права пользователей и так далее вот
[49:47.160 --> 49:54.560]  если мы говорим про конкретного пользователя если у вас есть ход кейм то это замечать то есть
[49:54.560 --> 50:03.960]  потому что есть такое социологическое исследование которое проводят следующее вы можете управлять
[50:03.960 --> 50:10.680]  каким-то действием при помощи мышки а можете при помощи клавиатуры так вы думаете где быстрее
[50:10.680 --> 50:16.000]  будет проходить работа клавиатура то есть соответственно если мы работают с клавиатурой у
[50:16.000 --> 50:21.680]  нас должны быть так называемые горячие клавиши классический пример горячих клавиш контрол с
[50:22.320 --> 50:30.440]  вставить более того если вы зайдите в какие-нибудь google презентации или к системе гугла у них там
[50:30.440 --> 50:35.600]  все из того что система достаточно большая сайт там получается так что у вас просто есть
[50:35.600 --> 50:41.280]  контрол с контрол в и вы не можете правой кнопки мышки нажать копировать и вставить там это
[50:41.280 --> 50:48.040]  запрещено просто вот это раз и второе допустим под задачи вы можете переориентировать пользователя
[50:48.040 --> 50:53.520]  и сказать вот допустим вот для твоих задач нужно только вот эта часть функционала вы берете
[50:53.520 --> 50:59.600]  ее настраивайте перед тем как зайти в это все дело если вы откроете допустим какую-нибудь среду
[50:59.600 --> 51:06.000]  работки тоже самый visual studio код либо там пай чарм вы берете заходите первым момент времени
[51:06.000 --> 51:13.000]  на первый заход вас спрашивают включить в им или не включить вам в им для того чтобы для более
[51:13.000 --> 51:18.400]  продвинутых кто привык работать в текстовых редакторов кабанной строке вы могли сделать
[51:18.400 --> 51:24.040]  это подключение понятно что система достаточно большая и ее можно там для больших тем должно
[51:24.040 --> 51:29.680]  быть огромное количество переконфигурации потому что иначе это будет доставлять огромные проблемы
[51:29.680 --> 51:39.880]  так опять пример с университетом гибкая ли система нет конечно же вот потому что здесь
[51:40.040 --> 51:46.520]  необходимо понимать собственно какие изменения надо вносить то есть мы хотим внести изменения
[51:46.520 --> 51:52.040]  в группу скорее всего нам нужно будет внести изменения в университет а дальше вот все по
[51:52.040 --> 51:59.880]  цепочке растянется то есть нам нужно локализовать участок изменения нашей системы расширяемость
[51:59.880 --> 52:04.880]  системы что это означает это означает можем ли мы добавить новый функционал нашу систему
[52:04.880 --> 52:14.000]  достаточно легко и значит как нужно организовывать систему в плане расширяемости чем вероятнее
[52:14.000 --> 52:20.360]  изменения в нашей системе тем меньше условия мы должны в тем меньше усилий мы должны выносить
[52:20.360 --> 52:28.680]  в это и вот как раз здесь есть два голубя да получается он спрашивает какие антонима к слову
[52:28.680 --> 52:35.640]  расширяемость это значит ограниченность сопротивляемость не эластичность не гибкость
[52:35.640 --> 52:42.240]  антигибкость то есть если у нас с вами мы пытаемся добавить новый функционал и при этом все остальное
[52:42.240 --> 52:51.080]  летит и не начинает работать значит что система не расширяемая пример вот представьте себе что
[52:51.080 --> 52:56.080]  вам нужно привязать кнопку для обновления статуса в базе данных то есть допустим какой-нибудь
[52:56.080 --> 53:04.360]  простую поменять фамилию да кажется что у вас поменять фамилию это не очень сложно но у вас
[53:04.360 --> 53:11.320]  возможно всем система настолько большая и не гибкая что придется переписывать весь код или вы
[53:11.320 --> 53:21.080]  так сказать изменили в одном месте у вас сломалась другом месте в общем этим грешат крупные компании и
[53:21.080 --> 53:29.760]  вот система не гибко не расширяемая это вот пример у вас есть какая-нибудь там большая функциональность
[53:29.760 --> 53:38.720]  да вы значит и вы пытаетесь извините что там пример там про давайте давайте пример про дом
[53:38.720 --> 53:45.880]  расскажу вот вы пытаетесь в доме образно говоря провести бой в старом доме пытаетесь провести
[53:45.880 --> 53:54.640]  новую систему отопления или новую проводку и вот получается так что вам не понятно куда эту
[53:54.640 --> 54:01.080]  проводку вставлять да и вот в итоге если посмотреть на старые советские дома в некоторых домах
[54:01.080 --> 54:07.360]  вот допустим в моем доме в котором я живу проводка идет по улице просто потому что больше
[54:07.360 --> 54:14.600]  ее некуда в дом строить то есть дом не предназначен для модификации для расширяемости вот то есть
[54:14.840 --> 54:21.120]  пример значит дополнительные критерии которые у нас могут быть это тестируемость мы и поддерживаемость
[54:21.120 --> 54:26.800]  кода мы про это будем говорить в лекциях по тестированию и сопровождаемость то есть каким
[54:26.800 --> 54:33.620]  образом это можно говорить мы про это буду говорить в лекциях по непрерывные поставки так это что
[54:33.620 --> 54:39.120]  касательно критерии хорошая архитектура если мы говорим про критерии неудачной архитектуры то
[54:39.120 --> 54:45.000]  есть такое понятие, как жесткость. То есть меняем код в одном месте,
[54:45.000 --> 54:50.040]  меняем код в другом месте. То есть у нас получается система настолько
[54:50.040 --> 54:55.500]  жесткая, что она не подвержена изменениям. Меняем код в сотом месте. То есть у нас изменение
[54:55.500 --> 55:02.160]  идет по цепочке. И эта большая проблема получается, да, это я это забегал на вперед,
[55:02.160 --> 55:07.760]  в итоге получается, что система не адаптирована никаким образом под изменение.
[55:07.760 --> 55:17.280]  Следующая часть хрупкость. Собственно, как вы думаете, почему вот эта система является хрупкой?
[55:17.280 --> 55:30.600]  Перед к нему провод, все перестанет работать. То есть представьте вот себе вот систему,
[55:30.600 --> 55:34.720]  кстати, вот в одной из атеторий ГК, система хрупкая, потому что я не могу подключить
[55:34.720 --> 55:39.880]  проектор. Потому что там получается один проектор подключается к одному экрану,
[55:39.880 --> 55:45.100]  потом первый экран подключается ко второму. В общем, они взаимодействуют с собой. А у меня
[55:45.100 --> 55:50.400]  ноутбук такой, что он не умеет поддерживать трансляцию на два экрана. Все, система хрупкая,
[55:50.400 --> 55:58.160]  приходится транслировать презентацию экрана через зону. Неудобно. Это иллюстрирует
[55:58.160 --> 56:08.080]  замечательный, замечательный термин, так сказать, эфоризм, афоризм в сфере IT работает не трош.
[56:08.080 --> 56:20.840]  Понятно, что так лучше не надо делать. Каким образом это можно сделать? Это можно сделать
[56:20.840 --> 56:25.920]  переорганизацию структуры. Возможно, не нужно такой набор узлов делать в одном компьютере.
[56:26.080 --> 56:30.520]  Если вы посмотрите, откроете информацию о том, как устроены стойки в дата-центре,
[56:30.520 --> 56:38.400]  то они устроены не таким образом. Что такое дата-центр? Это набор такое большое-большое здание,
[56:38.400 --> 56:45.160]  в котором стоят большое количество серверов, и они объединены между собой. Когда вы обращаетесь
[56:45.160 --> 56:52.400]  на тот же Яндекс.ру, какой-то сервер в дата-центре Яндекса начинает обрабатывать ваш запрос,
[56:52.400 --> 56:59.360]  или достаются данные оттуда. Следующий критерий неудачной архитектуры — это неподвижность.
[56:59.360 --> 57:06.280]  Собственно, получается так, что, допустим, вы писали что-то на одной платформе, вы хотите
[57:06.280 --> 57:13.000]  перенести свои данные, допустим, на другую платформу или портировать ваш код на другую
[57:13.000 --> 57:22.080]  платформу. Как вы думаете, с чем удобно путешествовать с рюкзаком либо с набором тяжестей?
[57:22.080 --> 57:27.920]  Ну, конечно, с рюкзаком намного проще путешествовать, а набор тяжести его еще
[57:27.920 --> 57:34.920]  перетаскивать нужно. Это так называемый, я бы так сказал, legacy-код, если мы говорим в сфере IT.
[57:34.920 --> 57:43.800]  И вот классический пример legacy-систем — это, как ни странно, Windows. Потому что Windows сколько
[57:43.800 --> 57:49.280]  лет на рынке? Microsoft уже много лет на рынке, а до сих пор некоторые функциональности остались с
[57:49.280 --> 57:59.840]  MS-DOS. И даже они недавно все-таки в какой-то степени отказались от Windows API. Был раньше
[57:59.840 --> 58:06.280]  такой механизм. И реально, код писать под Windows — это был суще ад. Графический интерфейс. То есть
[58:06.280 --> 58:11.680]  там все подобный стиль, который вот совсем неудобен для разработки. Сейчас это, к сожалению,
[58:11.680 --> 58:19.120]  все прошло. Так, это что касательно архитектуры. Опять же, мы образно поговорили про критерии
[58:19.120 --> 58:23.880]  хорошей и неудачной архитектуры, чтобы вы понимали, на какие аспекты стоит обращать внимание.
[58:23.880 --> 58:39.120]  Давайте вопрос по этой части. Что, пока слишком много теории, да? Давайте к практике перейдем.
[58:39.120 --> 58:46.200]  Давайте поговорим про практические принципы и поймем, каким образом можно отвязываться от
[58:46.200 --> 58:54.440]  этих составных частей. И здесь возникают первые два технических понятия, которые можно использовать.
[58:54.440 --> 59:01.000]  Первое — это cohesion. Что такое cohesion? Это сопряженность. То есть насколько у нас с вами
[59:01.000 --> 59:09.880]  объекты внутри одного модуля lay класса связаны между собой. И есть такое понятие как coupling —
[59:09.880 --> 59:16.920]  связанность. Это насколько объекты связаны между собой в разных модулях. Что такое модуль? Это class,
[59:16.920 --> 59:22.720]  можно представлять. Либо file, которым вы храните. И есть такой принцип под названием high cohesion,
[59:22.720 --> 59:27.480]  low coupling. Это означает, что у нас есть высокая сопряженность внутри одного модуля. То есть
[59:27.560 --> 59:32.680]  те функции и те объекты, которые у нас с вами находятся в одном классе,
[59:32.680 --> 59:39.680]  они выполняют максимально схожую роль, и они сильно связаны между собой функционально.
[59:39.680 --> 59:46.960]  Что такое coupling? Это насколько вы вызываете один код из другого класса и другого объекта.
[59:46.960 --> 59:56.040]  Вот скажите, вот помните диаграмму, вот эту тяжелую про университет? Да? Скажите, что у него было с
[59:56.040 --> 01:00:03.880]  coupling? У него был высокий coupling или низкий coupling? Да, у него был явно очень высокий coupling,
[01:00:03.880 --> 01:00:10.920]  который нужно разрешать. И мы видим с вами здесь на диаграмме у нас есть четыре части. Первое,
[01:00:10.920 --> 01:00:19.880]  это у нас что здесь? У нас здесь high cohesion, high coupling. Это называется gut object. То есть у нас
[01:00:19.880 --> 01:00:27.160]  получаются объекты внутри одного класса, каким-то образом связаны, сильно связаны, но при этом объект
[01:00:27.160 --> 01:00:35.120]  никаким образом не разделены. Дальше у нас есть low cohesion, high coupling. Это вы взяли систему и
[01:00:35.120 --> 01:00:40.640]  неправильно выстроили в ней границы. То есть у вас получается какая-то куча мала. То есть есть
[01:00:40.640 --> 01:00:45.640]  функциональность поделена цветом. То есть у нас красные, зеленые и желтые между собой сильно
[01:00:45.640 --> 01:00:52.320]  не перемешиваются. Это low cohesion, low coupling. То есть объекты совсем никаким образом между собой
[01:00:52.320 --> 01:00:58.880]  не связаны. И вот это идеальная структура. У нас с вами идеальная связь. Красные вызывают зеленые,
[01:00:58.880 --> 01:01:04.400]  зеленые общаются с желтыми, а желтые вызывают красные. Опять же лучше от циклических зависимости
[01:01:04.400 --> 01:01:10.640]  избавляться. То есть обычно стрелки должны быть направлены из одной стороны в другую. Вот,
[01:01:10.680 --> 01:01:17.960]  это называется ориентированный от циклических граф. У нас мы должны получать на выходе. И при
[01:01:17.960 --> 01:01:29.080]  этом выделяют разные типы coupling. Их выделяют обычно семь штук от худшей к лучшей. Здесь есть
[01:01:29.080 --> 01:01:37.200]  разные границы. Я про них, наверное, не буду говорить. Я расскажу про самые худшие и самые
[01:01:37.200 --> 01:01:45.080]  лучшие случаи. А самый худший – content coupling. Вы пишите функцию и вы такие думаете. Так,
[01:01:45.080 --> 01:01:53.000]  мне нужно написать быстро код на коленке. Пишем код на коленке. Так, у нас здесь код,
[01:01:53.000 --> 01:02:00.600]  который делает, допустим, не знаю, забивает какую-нибудь транзакцию, проводит какую-то
[01:02:00.600 --> 01:02:08.200]  транзакцию. В принципе, вот мы берем код, делаем простую часть, делаем CTRL-C, CTRL-V в другое
[01:02:08.200 --> 01:02:15.720]  место. То есть мы делаем copy-paste. Это означает, что у нас просто два модуля, которые находятся в
[01:02:15.720 --> 01:02:23.520]  разных местах, содержат один и тот же участок кода. То есть чем это плохо? Давайте подумаем.
[01:02:23.520 --> 01:02:32.160]  Чем плохо copy-paste? Да, если надо менять, то надо сразу менять в нескольких местах. То есть
[01:02:32.160 --> 01:02:41.280]  есть риск того, что не поменяем это все в разных местах. Вот. Значит, еще есть такой stem-комплект,
[01:02:41.280 --> 01:02:46.720]  тоже хочу сказать. Это когда у нас два класса связаны между собой следующим образом. У нас
[01:02:46.720 --> 01:02:53.840]  с вами есть какой-нибудь класс B, и внутри него объявлено поле вида класса A. То есть у нас
[01:02:53.840 --> 01:03:02.120]  получается такая неявная связь. То есть мы именно говорим, что один может вызывать второй. И самый
[01:03:02.120 --> 01:03:09.920]  лучший это data coupling. Это означает следующее, что у нас с вами два класса общаются между собой
[01:03:09.920 --> 01:03:15.480]  посредством только необходимых данных. То есть у них есть общий набор данных, который необходим
[01:03:15.480 --> 01:03:22.200]  для управления, и мы передаем только этот необходимый набор данных. Здесь еще есть интересный
[01:03:22.200 --> 01:03:29.720]  coupling. По-моему, это common. Я точно сейчас не вспомню, какой. По-моему, common coupling. Собственно,
[01:03:29.720 --> 01:03:37.720]  это когда у вас два разных объекта обращаются к одной глобальной переменной. Почему, как вы
[01:03:37.720 --> 01:03:45.640]  думаете, плохо использовать глобальные переменные в коде? Умирает многопоточность. То есть мы это
[01:03:45.640 --> 01:03:51.360]  никаким образом распараллелить не можем. Потому что если кто-то изменил одну часть, то второй
[01:03:51.360 --> 01:03:56.360]  получает изменения в этой части. Причем эти изменения могут быть несогласованными друг с другом.
[01:03:56.360 --> 01:04:06.280]  И это большая проблема. То есть у нас такой якорь висит, который мы должны держать. Тут есть разные
[01:04:06.280 --> 01:04:12.600]  уровни coupling. Я, наверное, пришлю потом ссылку, связанную с тем, каким образом эти coupling связаны.
[01:04:12.600 --> 01:04:19.920]  У cohesion на самом деле есть такая же связь. И, собственно, главная цель на высоком уровне
[01:04:19.920 --> 01:04:24.840]  cohesion. Так, давайте посмотрю презентацию. Ставил про cohesion? Нет. Про cohesion не ставил. Это стараться
[01:04:24.840 --> 01:04:33.400]  делать так, чтобы у нас модули выполняли какую-то единую функцию. То есть там есть тоже разные
[01:04:33.400 --> 01:04:41.680]  уровни. Есть соблазн. Собственно, первый соблазн, который есть, это у вас какие-то есть функции. Вы
[01:04:41.680 --> 01:04:48.200]  не понимаете, куда их привязать. И вы создаете так называемый utility class. То есть это класс,
[01:04:48.200 --> 01:04:55.120]  который выполняет какие-то функции. Причем эти функции между собой не связаны. Поэтому если вы
[01:04:55.120 --> 01:05:02.400]  будете писать какой-нибудь код, пожалуйста, будьте аккуратны с файлами под названием utils.py.
[01:05:02.400 --> 01:05:16.320]  Или utils.cpp. Или, если мы говорим про джаву, то это utility.java. Потому что именно в этих классах
[01:05:16.320 --> 01:05:23.040]  обычно зашивается корень всех проблем. А что это за utility? Какие-то инструменты,
[01:05:23.040 --> 01:05:27.840]  при этом что они делают, не понятно. То есть стараемся именно разделять. В том числе,
[01:05:27.920 --> 01:05:36.640]  если мы говорим про cohesion, то cohesion в ООП-шных языках это класс. Если мы говорим про функциональные
[01:05:36.640 --> 01:05:42.240]  языки, такие как Python, это наборы файлов. То есть старайтесь делать так. И это мы, кстати,
[01:05:42.240 --> 01:05:47.560]  будем внедрять. Мы будем стараться максимально вас просить не писать код в одном файле, а
[01:05:47.560 --> 01:05:54.480]  пользоваться механизмом импортов либо инклудов. Потому что если правильно разделить зависимости,
[01:05:54.600 --> 01:06:00.240]  то у вас будет меньше проблем. Более того, вы сможете задетектировать одну важную вещь. Она
[01:06:00.240 --> 01:06:06.720]  называется циклическая зависимость. То есть для того, чтобы работал класс A, должен работать класс B.
[01:06:06.720 --> 01:06:16.400]  А если работает класс B, то должен работать класс A. И в итоге у нас все ломается в этом месте.
[01:06:16.400 --> 01:06:23.880]  Вот. Как понять, собственно, какой у нас cohesion, какой у нас coupling? Вообще есть строгая математическая
[01:06:23.880 --> 01:06:28.840]  формальная определение, каким образом замеряется cohesion и каким образом замеряется coupling. Но я не
[01:06:28.840 --> 01:06:35.200]  хочу грузить этим. Тем более это нужно там на каких-то более продвинутых вещах. Собственно,
[01:06:35.200 --> 01:06:41.480]  что мы делаем? Мы строим диаграмму компонентов. То есть это то, что я изначально показывал вам в
[01:06:41.480 --> 01:06:46.040]  примерах систем. А потом внутри с нее строим диаграмму классов. Собственно, представьте себе,
[01:06:46.040 --> 01:06:51.880]  что у нас есть вот такой клубок. Мы поставим его разделить на какие-то большие компоненты. Это
[01:06:51.880 --> 01:06:58.760]  называется декомпозиция. То есть вычленяем слова, которые соответствуют определенной части. Мы это еще
[01:06:58.760 --> 01:07:04.840]  с вами будем смотреть, когда мы будем говорить на лекции про unified modeling language. А потом мы
[01:07:04.840 --> 01:07:09.760]  понимаем, ага, мы декомпозировали этот объект. И теперь мы видим с вами, что эти объекты между
[01:07:09.760 --> 01:07:14.920]  собой на самом деле общаются через центральную точку. Поэтому, чтобы не городить большое количество
[01:07:14.920 --> 01:07:21.880]  связей, почему бы нам не поставить медиатора, который будет общаться между ними? Но главное в этом
[01:07:21.880 --> 01:07:27.760]  деле, чтобы этот медиатор сам не стал божественным объектом. То есть не стал управлять всем. Как это
[01:07:27.760 --> 01:07:35.680]  делается в случае университета? Вот. Каким образом, собственно, происходит разбиение системы? Значит,
[01:07:35.680 --> 01:07:42.160]  у нас есть какая-то большая система. Потом мы ее разделяем на некоторые подсистемы или пакеты.
[01:07:42.160 --> 01:07:50.280]  Пакеты, чтобы вы понимали, те, кто знают в java, те понимают, что должно понимать, что такое пакеты.
[01:07:50.280 --> 01:07:59.080]  Чтобы вы понимали, у вас как это работает. C++ это аналоги namespace. Либо это наборы папок. То
[01:07:59.080 --> 01:08:05.200]  есть в одной папке у нас по факту находится один пакет. А дальше внутри пакетов мы еще это все дело
[01:08:05.200 --> 01:08:11.400]  разбиваем на классы. То есть мы открываем проекты такие сразу понимаем, ага, значит это у нас про
[01:08:11.400 --> 01:08:18.200]  транзакции. Это, допустим, про личный кабинет. Это про профиль. Это, допустим, про вычисление каких-то
[01:08:18.200 --> 01:08:26.320]  данных. То есть по факту структура проекта должна сама за себя говорить. То есть не все находится в
[01:08:26.320 --> 01:08:32.440]  коде. Иногда что-то находится за пределами кодов в структуризации наших данных. Собственно,
[01:08:32.440 --> 01:08:41.600]  давайте пример. Некоторая система. Это система Убера. Мы видим с вами, что здесь. Мы видим с
[01:08:41.600 --> 01:08:49.000]  вами грав взаимосвязи между классами, между компонентами. Видите, то есть система достаточно
[01:08:49.000 --> 01:08:53.360]  большая и, в принципе, люди каким-то образом пытаются в ней разобраться. Здесь видно,
[01:08:53.360 --> 01:08:59.000]  что есть какие-то прям центрально связанные компоненты. Я не знаю, вот тут вот она. И есть
[01:08:59.000 --> 01:09:05.760]  другие взаимосвязи между объектами. То есть это не прямо между собой так жестко связано,
[01:09:05.760 --> 01:09:11.760]  а именно по составным частям, в принципе, можно выделить под компоненты. Вот, собственно,
[01:09:11.760 --> 01:09:20.200]  каким образом можно избавляться от явной связи в каплик? Для этого есть как раз так называемый
[01:09:20.200 --> 01:09:28.480]  закон Диметра. Значит, что он говорит? Он говорит следующее, что если B связан с классом A,
[01:09:28.480 --> 01:09:37.600]  а C связан с классом B, то по факту A не должен знать никаким образом AC. То есть
[01:09:37.600 --> 01:09:46.040]  антитранситивность должна в коде соблюдаться. То есть зачем это делается? Потому что по факту,
[01:09:46.040 --> 01:09:54.040]  если у нас есть уже связь между A и B, B и C, то связь между A и C будет изличной. Вот. Каким образом
[01:09:54.040 --> 01:10:01.360]  это можно в коде организовать? Чтобы было понимание A и B, B это friend A, можно считать,
[01:10:01.360 --> 01:10:10.320]  что B это поле класса A. Экземпляр поля класса A. Ну, собственно, его можно вот так вот написать.
[01:10:10.320 --> 01:10:16.880]  То есть здесь явно видно, что у нас нарушается закон Диметра, потому что myObject это объект 1.
[01:10:16.880 --> 01:10:23.240]  Дальше у myObject есть объект под названием never, это 2. Дальше never знает от talks 3,
[01:10:23.240 --> 01:10:30.600]  to 4, 5, stranger. То есть у нас тут получается объект первого класса знает об объекте пятого класса.
[01:10:30.600 --> 01:10:39.800]  Понятно, что это не очень хорошо. Даже вы в коде можете посмотреть свой код, если у вас только
[01:10:39.800 --> 01:10:46.280]  не язык R, в котором точка это как подчеркивание, то если у вас находится много точек, подумайте,
[01:10:46.280 --> 01:10:50.560]  как это разделить. Собственно, практические требования по тому, как это можно разделить.
[01:10:50.560 --> 01:11:00.960]  Собственно, давайте представим себе, что у нас есть класс me, у него есть имя и есть функция под
[01:11:00.960 --> 01:11:10.320]  названием grid stranger. И что у нас здесь происходит? Мы с вами вызываем функцию grid stranger,
[01:11:10.320 --> 01:11:20.240]  потом говорим hello. То есть видите, у нас f. Давайте я сейчас покажу. То есть у нас есть me, это f,
[01:11:20.240 --> 01:11:28.280]  это у нас stranger. А дальше мы вот этого friend вызываем функцию here. То есть по идее мы должны
[01:11:28.280 --> 01:11:37.880]  сказать friend, пожалуйста вызвать у friend функцию, которая все сделает нам под капотом, а не возвращать
[01:11:37.880 --> 01:11:43.960]  объект типа stranger. Собственно, каким образом это можно решать? Первая вещь, которую мы можем
[01:11:43.960 --> 01:11:51.960]  сделать для этого, это попробовать поднять ответственность вперед. Смотрите, что мы делаем.
[01:11:51.960 --> 01:12:00.720]  Нам по факту что здесь нужно? Давайте прочитаем. Мы должны получить имя нашего stranger. И все. Поэтому
[01:12:00.720 --> 01:12:07.880]  вместо того, чтобы вызывать функцию get stranger, мы меняем эту функцию на get stranger name, которая
[01:12:07.880 --> 01:12:16.080]  возвращает объект name. То есть мы получаем имя и дальше мы говорим f get stranger name и функцию
[01:12:16.080 --> 01:12:22.560]  меняем. То есть мы не у объекта stranger вызываем функцию here, а мы говорим следующее. Пожалуйста,
[01:12:22.560 --> 01:12:30.760]  достать это сообщение вот до stranger. То есть получается у нас такая вот прямо развилка. То есть у нас
[01:12:30.760 --> 01:12:40.720]  теперь получается f, объект типа me вообще не знает про stranger ничего. Или другой метод. Мы можем
[01:12:40.720 --> 01:12:47.400]  отправить ответственность в другую сторону. И здесь даже будет более приятный код, потому что нам не
[01:12:47.400 --> 01:12:53.080]  придется действовать глухому телефону. Мы по факту делегируем ответственность на friend сделать все. То
[01:12:53.080 --> 01:13:00.000]  есть что говорим мы? Мы должны познакомиться со stranger. Он говорит, окей, доставь, пожалуйста,
[01:13:00.000 --> 01:13:06.880]  приветствие по такому-то имени. Дальше friend идет и доставляет это приветствие. И вот этот вот сложный
[01:13:06.880 --> 01:13:13.720]  код, который у нас был вот здесь вот в трех строках, он переносится на friend. То есть таким
[01:13:13.720 --> 01:13:21.400]  образом мы можем разрешать приводить к выполнению законной деметрии в двух случаях. То есть либо мы
[01:13:21.400 --> 01:13:28.760]  переносим ответственность на первого объекта, либо мы наоборот отклоняем, делегируем ответственность на
[01:13:28.760 --> 01:13:39.360]  другие объекты. Это в качестве примера. Понятен ли этот сценарий? Хорошо. В чем достоинство
[01:13:39.360 --> 01:13:45.680]  законной деметрии? Он позволяет уменьшить связанность нашего кода. Далее мы скрываем информацию о
[01:13:45.680 --> 01:13:54.120]  структуре нашего объекта. То есть по факту мы можем наши поля сделать приватными. То есть здесь
[01:13:54.120 --> 01:14:00.480]  с этим могут быть проблемы с приватностью полей. И дополнительно мы можем с вами увеличить
[01:14:00.480 --> 01:14:07.800]  так сказать cohesion, потому что мы явно указываем обязанности класса. То есть мы можем посмотреть,
[01:14:07.800 --> 01:14:12.600]  а потом понять, что этот класс какой-то слишком большой, он выполняет большое количество обязанностей.
[01:14:12.600 --> 01:14:21.360]  Почему бы нам его не разделить на несколько других классов? Так, и здесь на самом деле даже большие
[01:14:21.360 --> 01:14:28.840]  молодцы, потому что мы практически всю тему прошли. Следующий раз мы с вами будем говорить про вот
[01:14:28.840 --> 01:14:37.680]  эти вот абриатуры. Solid это принципы проектирования систем на уровне классов. То есть мы поймем каким
[01:14:37.680 --> 01:14:45.200]  образом с точки зрения ООП нужно устраивать связь классов. Следующая вещь это dry. Это по-моему один
[01:14:45.200 --> 01:14:52.560]  из таких важных принципов. Он расшифровывается как do not repeat yourself. Не повторяйте, пожалуйста,
[01:14:52.560 --> 01:15:01.840]  себя. Следующая называется kiss. Это расшифровка как kitted, simple, stupid. И последняя вещь это
[01:15:01.840 --> 01:15:10.720]  yagni. Вам этого не надо. То есть не городите сущности, не улучшайте код до тех пор, пока вам этого не надо.
[01:15:10.720 --> 01:15:19.120]  Вот, значит, здесь у меня есть последние полезные ссылки, по которым можно посмотреть информацию.
