[00:00.000 --> 00:09.000]  Соответственно, я вам сегодня рассказываю про себя, я вам рассказываю про то, про что
[00:09.000 --> 00:13.720]  этот будет этот курс. Мы с вами там, я не знаю, немножечко разминаемся, я вам показываю,
[00:13.720 --> 00:25.000]  как примерно будет проходить занятие и расходимся. Всё, поехали. Значит, первое. Меня зовут Олег Бунин.
[00:25.000 --> 00:34.680]  Я нифига не преподаватель. Вообще ни разу. Я предприниматель в области IT. У меня своя компания,
[00:34.680 --> 00:39.640]  которая некоторое время назад занималась разработкой сайтов, крупных сайтов, больших,
[00:39.640 --> 00:47.400]  то есть высоконагруженных, как раз то, про что мы с вами будем говорить. Многими сайтами,
[00:47.400 --> 00:57.560]  которые мы разрабатывали, вы пользуетесь. То есть, Спортсру, Рия Новости, мы писали кусочки под
[00:57.560 --> 01:04.720]  Олимпиаду. Мы даже консультировали Павла Дурова, когда он стартовал в 2007 году. Мы рассказывали,
[01:04.720 --> 01:09.200]  консультировали, помогали ему преодолеть нагрузки, выдержать какой-то, ну не знаю,
[01:09.200 --> 01:18.600]  рост посещаемости. Тогда еще очень маленький, смешной. 20-30 тысяч человек. Это был первый
[01:18.600 --> 01:25.520]  бизнес. Второй бизнес связан с конференциями. Мы организуем и проводим IT конференции. В том
[01:25.520 --> 01:30.760]  числе для разработчиков высоконагруженных проектов, высоконагруженных систем. То есть,
[01:30.760 --> 01:41.360]  весь наш курс про архитектуры сложных проектов. Кому нужно пойти? В обязательном порядке. То есть,
[01:41.360 --> 01:55.880]  у вас есть, у вас два варианта. Либо сюда, либо Project Management. Первый, если вы собираетесь
[01:55.880 --> 02:07.400]  выросли в технаря, то строго сюда, строго к нам. В технаря я имею ввиду, если вы собираетесь
[02:07.400 --> 02:14.760]  стать программистом, разработчиком, техническим директором, то собираетесь пойти по технической
[02:14.760 --> 02:27.960]  линейке. Есть такие? Вы знаете, чего хотите? Нет. Кто знает, чего хочет? Чего хотите? Нет, ну по
[02:27.960 --> 02:39.040]  жизни. Чем заниматься? Разработчик все прислез. Даша, еще кто? Ну, определились?
[02:39.040 --> 03:00.800]  Короче, если разработчиком, то сюда. Если предприниматель, продукт, вот что-то такое,
[03:01.800 --> 03:23.400]  управление проектами. Это не учебная тревога, нет? Ладно, едем дальше. Второй фактор для выбора,
[03:23.400 --> 03:35.360]  который вам нужно будет учесть. Я здесь, я буду не скромен. Вот этих курсов дофигище по управлению
[03:35.360 --> 03:41.840]  проектами. Таких курсов нет. Таких книг написано, по-моему, две или три штуки.
[03:41.840 --> 03:52.240]  Архитектор высоконагруженных систем, по-моему, есть один платный курс у отуса, все. Больше нет.
[03:53.600 --> 04:02.400]  Вы нигде этому не научитесь. Вы научитесь проектировать подобные системы, сидя за спиной у
[04:02.400 --> 04:09.560]  человека, который умеет это делать. Вот я, собственно говоря, так учился. Я учился, сидя за спиной у Игоря СССВ,
[04:09.560 --> 04:17.880]  20 лет назад. Кто знает Игоря СССВ? Если идете по высоконагруженному системам, нужно распечатать
[04:17.880 --> 04:26.960]  иконочку иконостасы в уголок. Это наш гуру. Человек, который очень много чего сделал в России. Он
[04:26.960 --> 04:32.640]  разработал NGNX, на котором работает примерно 90% российских сайтов и где-то 40% международных.
[04:32.640 --> 04:44.280]  Вы нигде не научитесь разработке высоконагруженного системы. Еще хуже, вы нигде не научитесь думать,
[04:44.280 --> 04:56.320]  как архитектор. Вот здесь и про это весь наш курс. Мы с вами будем пытаться... Смотрите,
[04:56.320 --> 05:04.920]  что состоит разработка высоконагруженных систем. У вас есть несколько процессов. Вам приходит
[05:04.920 --> 05:13.480]  заказчик и говорит. Слушайте, я хочу социальную сеть для туристов. Туда будут с одной стороны
[05:13.480 --> 05:18.800]  приходить локальные гиды. Вот, например, там, не знаю, какой-нибудь Анталия, Турция, еще откуда-то,
[05:18.800 --> 05:24.440]  не знаю, Испания. Локальные гиды, они будут публиковать информацию, например, про какие-нибудь,
[05:24.440 --> 05:29.360]  не знаю, места. А с другой стороны, мы будем нагонять туда пользователей. И вот пользователи
[05:29.360 --> 05:33.520]  будут искать свои локальные места, что им нравится, что им не нравится, выбирать и так далее.
[05:33.520 --> 05:40.920]  Спроектируй мне, пожалуйста, как мне это сделать. И ваша задача будет, как архитектора, как именно
[05:40.920 --> 05:45.800]  разработчиков высоконагруженной системы, написать техническое задание, которое потом программист
[05:45.800 --> 05:51.520]  реализует. Вот вы пока будете маленькими сепелитетами с программистами, вам умные дяди будут спускать и
[05:51.520 --> 05:58.360]  говорить, что делать. Вот эти умные дяди, они вот это все знают. Они будут описывать, что делать. И
[05:58.360 --> 06:03.520]  здесь есть несколько составляющих вот в этом проектировании. Первое, это придумать некую логическую
[06:03.520 --> 06:10.200]  схему. Как что, где расположить, как данные хранить, как хранить пользователей, как хранить информацию
[06:10.200 --> 06:15.680]  об конкретных местах, куда можно ходить, как картинки хранить, как видосики хранить, как
[06:15.680 --> 06:22.120]  балансировать нагрузку и так далее. Для каждого из вот этих блоков будут выбираться различные
[06:22.120 --> 06:29.680]  инструменты. Вот эти инструменты, они меняются со временем. Выпускаются новые, не знаю, запускаются новые
[06:29.680 --> 06:35.000]  базы данных, там не знаю, Click House вышел, еще что-то вышло и так далее, и так далее, и так далее. То есть,
[06:35.000 --> 06:40.920]  ну как бы, здесь прогресс. Мы вот туда, в конкретные настройки и конкретные системы, не полезем
[06:40.920 --> 06:47.720]  вообще. Мы сами принципы будем разбирать. То есть, моя задача и задача всего курса будет научить вас
[06:47.820 --> 06:54.740]  думать как архитектор. Если вы научитесь думать, как архитектор, вы как бы, выйдете через два sleeps
[06:54.740 --> 06:58.640]  три года, начнете работать, дорастетесь до архитектора, до технического директора, начнете
[06:58.640 --> 07:03.640]  заниматься вот тем самым, чем мы с вами занимаемся. Будем заниматься, проектировать какие-то aspect
[07:03.640 --> 07:09.640]  инструменить будут уже другие. Вам будет не важно, какие будут инструменты. Вы будете работать с тем,
[07:09.640 --> 07:14.080]  что есть, сейчас. Что что есть на рынке, что принято в данной конкретные кампании, что на
[07:14.080 --> 07:18.540]  на самом деле инструменты чаще всего выбираются под компанию, под конкретную
[07:18.540 --> 07:23.380]  компанию. И не важно, что какой инструмент лучше. В компании есть
[07:23.380 --> 07:28.820]  разработчики, которые умеют с Postgres работать. Ну все, у вас будет такая база
[07:28.820 --> 07:39.820]  данных, хоть вы тресните, хоть вы лично любите. Итак, Highload нигде
[07:39.820 --> 07:47.260]  научитесь с Project Management научиться. Много есть мест. Я уверен, что МФТИ выбрал
[07:47.260 --> 07:52.940]  лучшего преподавателя по управлению проектами, но тем не менее таких курсов
[07:52.940 --> 07:59.300]  много. Вот, собственно говоря, два фактора вам нужно будет выбрать между этими
[07:59.300 --> 08:10.660]  двумя курсами. Как мы с вами будем работать? Мы с вами, у нас полгода, мы за эти
[08:10.660 --> 08:17.140]  полгода сделаем примерно следующее. Для начала мы с вами просто изучим, ну
[08:17.140 --> 08:23.140]  штук 20 архитектурных паптернов. Что это такое? Это прием. Вот я поставил
[08:23.140 --> 08:28.900]  задачу, то есть специальную сетку сделать для туристов, и вы начинаете думать
[08:29.260 --> 08:34.920]  какие там есть функции. Например, хранение фоток, есть – есть. Как сделать memorizationmans?
[08:34.920 --> 08:39.960]  Есть определенные приемы, подходы к тому, как хранить бинарные данные.
[08:39.960 --> 08:44.600]  Много, много, много однородных данных – как их хранить?
[08:44.600 --> 08:47.720]  Их там нужно распределить на несколько серверов, как это сделать?
[08:47.720 --> 08:51.620]  По какому принципе их распределить на несколько серверов? Как они должны там
[08:51.620 --> 08:55.980]  с друг другом взаимодействовать? Что делать, когда и эти распределенные сейверы
[08:55.980 --> 08:58.100]  кончится. То есть мы с вами пойдем
[08:58.100 --> 09:08.180]  таким по изучать вот такие вот подходы или но с нагрузкой не справляется сделали хорошо
[09:08.180 --> 09:13.620]  данные распределили а с нагрузкой сервак не справляется что делать но очевидно разделить
[09:13.620 --> 09:22.700]  на два как не любую программу можно разделить надо то есть даже вот сейчас кто слышал про облака
[09:22.700 --> 09:30.940]  овочной системы все подобное наверняка облако же не является панацей вы не можете вкинуть
[09:30.940 --> 09:36.220]  любую программу в облако где она запустится и заработает облако точно так же как любой
[09:36.220 --> 09:44.660]  состоит из конкретных серверов и у этих конкретных серверов есть конкретно ограничение по конкретно
[09:44.660 --> 09:52.820]  ну то есть вы не сможете натыкать себе я не знаю хочу сервак на миллиард процессоров и не знаю
[09:52.820 --> 09:58.820]  миллиард терабайт памяти не получится сколько бы у вас денег не было не получится не будет
[09:58.820 --> 10:04.500]  работать то есть даже в облаке когда вы пишете под облако вы должны понимать как облако внутри
[10:04.500 --> 10:10.900]  работает чтобы написать корректную программу вот именно этим мы с вами будем пытаться учиться
[10:10.900 --> 10:20.620]  именно это будем пытаться учиться понимать как работает внутри облак как работает внутри сервак
[10:20.620 --> 10:29.140]  вот мы запустили программу на c++ отлично мы знаем как она работает все окружение вокруг нее как
[10:29.140 --> 10:37.700]  она взаимодействует я набираю в браузере вы как он наверняка отвечает с плюс плюс на программу как
[10:37.700 --> 10:44.180]  запрос на нее доходит что при этом проходит какие метаморфозы как и так далее так далее так
[10:44.180 --> 10:49.700]  далее то есть мы сами пытаемся понять принципы вот этой всей работы принципы распределения
[10:49.700 --> 11:00.300]  нагрузки принципы построения архитектуры принципы хранения данных и так далее так далее вот изучаем
[11:00.380 --> 11:04.860]  20 паттернов после чего некоторое время тренируемся
[11:08.300 --> 11:13.380]  придумываем все проект вот ту самую туристическую сетку и начинаем раскладывать причем большинство
[11:13.380 --> 11:21.900]  паттернов кстати не то что я вам буду рассказывать то есть мне больше нравится не когда я что-то
[11:21.900 --> 11:27.900]  рассказываю вы записываете а когда вы сами придумываете я поставлю например ну возьмем
[11:27.900 --> 11:33.860]  какую-то конкретную задачу вот много данных нужно сохранить столько данных сколько не
[11:33.860 --> 11:39.660]  влезает на один сервак как будете делать вы будете мне придумывать я буду задавать
[11:39.660 --> 11:45.060]  уточняющие вопросы вы будете отвечать на уточняющие вопросы я буду еще при том то есть как бы
[11:45.060 --> 11:51.860]  связь с исходной задачей научить вас думать улавливайте да то есть моя задача научить вас
[11:51.860 --> 11:58.180]  думать именно поэтому когда вы столкнитесь с новой задачей мы сами не рассматриваем раз
[11:58.180 --> 12:05.140]  и придумайте решение дальше изучили паттерны тренируемся на нескольких спректируем туристическую
[12:05.140 --> 12:13.540]  социальную сетку не знаю что угодно спректируем придумаем способ как роскомнадзору заблокировать
[12:13.540 --> 12:21.820]  телеграмм или наоборот как телеграмму надежно уйти от роскомнадзора чтобы он не придумал
[12:22.620 --> 12:28.640]  то есть без проблем и то и и в одну сторону и другую сторону можем придумать можно придумать
[12:28.640 --> 12:33.660]  подумать знаете что не знаю каждым провайдере стоит система ссорм
[12:35.660 --> 12:43.060]  в каждом провайдере стоит небольшая коробочка через на небольшой коробочек небольшой ящичек
[12:43.060 --> 12:47.720]  через который фильтруется трафик проходит весь трафик который проходит чем-то когда нет
[12:47.720 --> 12:58.400]  возможности в россии выйти в интернет минуя скан федеральной службы безопасности как это
[12:58.400 --> 13:04.040]  работает давайте попробуем спроектировать как это как это могло бы работать как за этим всем
[13:04.040 --> 13:08.520]  следить потому что там что трафик колоссальный следить за всем нам не нужно так далее то есть
[13:08.520 --> 13:19.800]  вот какие-то короче потренируемся немножечко а потом экзамен экзамен происходит в виде вы
[13:19.800 --> 13:25.920]  разобьетесь на команду я вам дам спроектировать проект вы приносите архитектуру если она хорошая
[13:25.920 --> 13:37.040]  отл плохая по второму кругу правильных ответов проблема в чем такого экзамена правильных ответов
[13:37.040 --> 13:45.920]  нет в смысле что любую как бы любую задачу можно жить несколькими способами и вам придется
[13:45.920 --> 13:53.760]  показать как вы думали когда вы решали ту или иную задачу вот собственно все вопросы по форме
[13:56.760 --> 14:03.560]  вот такой такие у нас будут занятия проходить они будут очно с утра
[14:03.560 --> 14:13.480]  длиться будет в 10 45 начинаем не знаю в 12 12 30 заканчиваем максимум больше не надо
[14:13.480 --> 14:25.320]  каждую неделю я вам пришел у вас есть главный старостая главарь вождь кто-нибудь ступ
[14:25.320 --> 14:26.600]  ко мне в телеграмме
[14:26.600 --> 14:42.240]  делаем группу для экстренных случаев не зная карантин закрыли фт и на карантин еще
[14:42.240 --> 14:45.080]  чего-нибудь еще чего-нибудь еще чего-нибудь перенос и так далее
[14:45.080 --> 14:57.200]  группа не но можно и по обсуждать без проблем я нормальный чувак со мной можно
[14:57.200 --> 15:02.600]  поговорить можно задать вопросы так далее то есть тюго постучитесь просто-напросто чтобы
[15:02.600 --> 15:06.800]  просто создать чатик и все дальше решим
[15:06.800 --> 15:15.360]  ну все по технической части все вопросы по технической части
[15:15.360 --> 15:22.880]  нет
[15:22.880 --> 15:37.680]  да нет ну может быть домашнюю придумаю но да да иначе это не работает ребят мне
[15:37.680 --> 15:41.600]  нет задачи вам данные передать вы по большому счету сможете видосики
[15:41.600 --> 15:48.880]  смотреть с прошлого раза или еще откуда-нибудь у меня задача поменять вам мозг но смысл чтобы
[15:49.040 --> 15:56.160]  научились думать как архитектор вот такая задача она не очень простая и она решается
[15:56.160 --> 16:04.640]  исключительно взаимодействие но вот смотрите как сохранить количество картина которая не
[16:04.640 --> 16:14.320]  влезает на один сервак валяйте понеслась ваше окей два делаем два сервака по какому
[16:14.320 --> 16:19.840]  принципу мы раз то есть как бы вот у нас сейчас один мы поняли о том что мы не влезаем в этот
[16:19.840 --> 16:36.080]  один что мы делаем окей хорошо мы разделили у нас есть мета данные так есть картинки
[16:36.080 --> 16:51.520]  что понимается под методами но я не знаю владелец пользователь название какой-нибудь
[16:51.520 --> 16:58.240]  описание вот вот те методы дальше разбили все равно на одном серваке все еще дальше как разбить
[16:58.240 --> 17:07.480]  а хорошо я ты приходишь ко мне это не знаю владельцу компании и говорю хорошо держи
[17:07.480 --> 17:11.920]  бабки покупай себе сервак ты купил второй сервак у тебя есть второй сервак он пустой дальше
[17:11.920 --> 17:27.640]  хорошо добавили туда столбец который указывает на какой-то конкретный серваков есть по капустам
[17:27.640 --> 17:33.600]  и сюда еще ничего не переложили половину картины кладем
[17:33.600 --> 17:51.800]  я не знаю давайте 10 терабайт вот у нас здесь были много серваков много диск
[17:51.800 --> 18:05.120]  вот 10 терабайт здесь картинок дальше 12 через две недели придется все равно решать
[18:05.120 --> 18:18.000]  проблемы новые картинки на новые картинки на новые картинки на новый сервак хорошо чем плохое
[18:18.000 --> 18:31.360]  решение нет но мета данные куда такие картинки на двух все новые картинки складываются сюда
[18:31.360 --> 18:45.280]  ну во-первых да то есть у тебя вот этот сервак будет перегружен этот сервак будет недогружен
[19:02.360 --> 19:13.120]  но мы мы купим себе от ручку на полгода хорошо еще пока ничего нет
[19:23.120 --> 19:29.400]  вот уже третий сервак вот так началось да вот денег один раз сразу понеслась хорошо мета
[19:29.400 --> 19:32.600]  данные перенесли на третий сервак дальше что
[19:44.200 --> 19:49.400]  так еще раз подождите мы делаем что-то с этими 20 терабайтами которые здесь есть сейчас
[19:49.400 --> 20:02.880]  на основе чего вы будете принимать решение делить или не делить маловато будет вот у
[20:02.880 --> 20:05.760]  тебя есть здравый смысл давай
[20:05.760 --> 20:32.480]  бинго ты не спросил у меня а что у нас вообще за сайт как к нему люди ходят потому что если
[20:32.480 --> 20:36.800]  например это какая-нибудь социальная сеть типа фейсбука то картинки устраивает моментально
[20:36.800 --> 20:57.440]  если ты только новое сюда переложишь подожди смотря какой паттерн доступа совершенно верно
[20:57.440 --> 21:03.960]  да то есть смотри если это социальная сетка или новости то люди будут ходить всегда к последним
[21:03.960 --> 21:11.040]  новостям последним картин и скачать последние картинки в этом случае можно вообще не
[21:11.040 --> 21:16.240]  перекладывать старые можно с этого момента начать писать новые как сюда например так и сюда
[21:16.240 --> 21:27.520]  потом уже перенести но в том плане что смотри все равно твоё решение то есть мы про это будем
[21:27.520 --> 21:34.360]  говорить много раз ваше решение относить того какую архитектуру выбрать зависит к сожалению от
[21:34.360 --> 21:45.040]  стёртого управления проект то есть вот чего захотят чего придумают продад вот они придумают
[21:45.040 --> 21:53.760]  такой проект пользователи делают то-то делают это так принять картинки так смотрят на них так
[21:53.760 --> 21:58.800]  то есть вы это все выясняете мы с вами будем еще проговаривать огромный составлять опросник
[21:58.800 --> 22:08.160]  потому что нам нужно спрашивать у руководителя проекта то есть у прода у продакта наш контрагент
[22:08.160 --> 22:17.680]  продакт то есть продакт это главный по части по идее да то есть вот что делает что делается с
[22:17.680 --> 22:23.520]  проектом что проект делает а мы главные по реализации то есть нам про то говорит я хочу вот
[22:23.520 --> 22:29.480]  это мы говорим они пига себе это невозможно технически не придумали еще технологии давай вот
[22:29.480 --> 22:36.200]  здесь вот делаем вот так и все будет хорошо ну то есть как бы мы главный за реализацию вот и
[22:36.240 --> 22:44.880]  наша реализация зависит от исходных данных я тебе могу на придумывать много различных схем
[22:44.880 --> 22:50.600]  когда тебе нужно что переносить данные сюда что не переносить и так далее может они вообще
[22:50.600 --> 22:56.240]  никогда не будут пользоваться может можно удалять или архивировать может можно выносить на какой-то
[22:56.240 --> 23:03.000]  не знаю отдельный сервак пейзбуке ты не докрутишь никак вообще там не знаю до странички которая
[23:03.000 --> 23:08.960]  была год назад но активного пользователя не знаю фронт ленту ты не докрутишь никогда ну блин хоть
[23:08.960 --> 23:19.400]  так не старайся доступ не доступ к посту который был год назад ты можешь получить легко только если
[23:19.400 --> 23:27.640]  это твой пост вот твой пост и ты и вы как архитектор начинаете уже думать так окей
[23:27.640 --> 23:33.200]  значит нас разные паттерны доступа то есть в одном случае пользователи смотрят чужую ленту в
[23:33.200 --> 23:38.080]  смысле свою ленту из чужих постов а в другом случае они смотрят свои посты если свои посты то я
[23:38.080 --> 23:43.480]  должен уметь смотреть на меня знаю на год назад а если чужие то мне достаточно это мне знаю одного
[23:43.480 --> 23:53.360]  дня назад и у вас начинается пляска вокруг метод данных они будут рано например вот именно так
[23:53.360 --> 23:59.040]  будут проходить наши занятия в принципе вот в виде такой дискуссии вы не будете что-то отвечать
[23:59.040 --> 24:07.880]  я буду заваливать а думали вы об этом подумали вы об этом но вы будете думать менять схему я буду
[24:07.880 --> 24:12.400]  опять ее заваливать разрушать и вообще принципе так очень полезный процесс сначала придумать
[24:12.400 --> 24:21.040]  потом посмотреть как она сломается или что будет через год или что должно случиться чтобы она
[24:21.040 --> 24:29.680]  поломалась тогда так очень важный пункт еще еще про что нам с вами нужно договориться
[24:29.680 --> 24:35.000]  у вас были сетевые технологии
[24:35.000 --> 24:40.800]  семи уровня моя модель оси
[24:40.800 --> 24:55.480]  да да да да да да да да да вот этот цепь что-нибудь помнить
[24:55.480 --> 25:10.240]  клеом лады нам с вами нужно будет перед тем как мы сами перейдем первой теме первая тема это что
[25:10.240 --> 25:18.120]  нужно будет первая тема я собрал про домашки я придумал домашку на следующий раз следующий раз
[25:18.120 --> 25:26.560]  давайте попробуем придумать опросник вот пришел к нам заказчик продакт и хочется делать какой-то
[25:26.560 --> 25:32.320]  сайт какой-то проект мы кстати говорим только про интернет сайты говорим про что угодно даже
[25:32.920 --> 25:41.440]  любой айтишный проект и он хочет сделать крутой айтишный проект что мы должны у него спросить
[25:41.440 --> 25:51.240]  вот домашка на следующий раз будет такая какие вопросы мы должны ему задать постарайтесь знаете
[25:51.240 --> 25:58.560]  чтобы подумать не конкретный список вопросов составить какую-то схему придумать этого этого
[25:58.560 --> 26:09.520]  вопроса опроса да то есть что вы будете в принципе не знаю пустить про кематики то есть что это
[26:09.520 --> 26:20.160]  такое то есть вот ну как бы я хочу сделать туристическую сеть бегает к вам продакт с горящими
[26:20.160 --> 26:27.960]  глазами вам нужно его опросить и понять что это будет за проект а сейчас немножечко еще
[26:27.960 --> 26:45.160]  подготовительной работы так у нас есть ваш ноутбук у нас есть первая на котором работает сайт
[26:45.160 --> 26:54.840]  контакт допустим для простоты сейчас они связаны
[26:54.840 --> 27:07.240]  толстеньким каналом вот вы на клавиатуре набрали бы каком что произошло
[27:07.240 --> 27:13.520]  давайте
[27:13.520 --> 27:30.840]  вы бы каком набирайте в браузере да браузер пошел в днс да что такое днс не все знают
[27:30.840 --> 27:45.320]  в интернете нету у серваков имен в интернете есть у серваков адреса набор цифр
[27:45.320 --> 27:56.760]  вот айпи некий айпи адрес это называется айпи адрес либо 4 цифрки 4 бита либо 6 4 байта либо 6
[27:56.760 --> 28:06.720]  для того чтобы сделать запрос к вк ком браузер сначала должен понять какой у него айпи адрес
[28:06.720 --> 28:12.440]  он не может сделать запрос к вк ком он может сделать запрос конкретный айпи адрес и так
[28:12.440 --> 28:22.480]  первое что делает браузер идет в днс и спрашивает днс это какая операционный
[28:22.480 --> 28:28.640]  системы в нашем случае операционный систем это операционная система реально скорее всего она
[28:28.640 --> 28:33.640]  тоже пошла куда-то в интернет просто куда-то в другое место каким-нибудь глобальным серверам
[28:33.640 --> 28:43.360]  днс что днс в общей сложности представляет собой не из себя некую иерархию да то есть и пользователь
[28:43.360 --> 28:48.600]  подключается к одному если этот сервак не знает он идет выше если он не знает он идет выше и
[28:48.600 --> 28:55.840]  кто-то в этой системе знает какой у этого конкретного адреса айпишка какая у него
[28:56.200 --> 28:58.120]  и так мы получили айпи адрес дальше
[29:06.600 --> 29:12.480]  давай по детальней нужно сделать запрос вот что перед тем как сделать запрос делай или как
[29:12.480 --> 29:24.040]  конкретно он делает окей еще детально что значит устанавливать соединение как конкретно браузер
[29:24.040 --> 29:44.400]  устанавливать соединение браузер не умеет это делать запрос в операционную систему о том что
[29:44.400 --> 29:51.840]  дорогая операционная система мне нужна установи пожалуйста связь вот таким вот эти адрес что
[29:51.840 --> 29:54.600]  делает операционная система получив такой запрос
[30:03.680 --> 30:04.600]  ну мак адрес
[30:13.840 --> 30:20.120]  давайте мы это все объединим в том что просто отправляет формирует запрос и отправляет его
[30:20.120 --> 30:28.360]  сетевой карт который дальше фигачит его в интернет нам достаточно для наших целей сетевую карту
[30:28.360 --> 30:39.840]  на самом деле происходит примерно следующее да то есть этот запрос как он разбивается
[30:39.840 --> 30:48.880]  в тсп и пакетики каждый пакетик там сколько я не помню там 1400 байт заворачивается в
[30:48.880 --> 30:57.240]  этой пакетике операционной системы то есть вот как раз этот семи уровня модель оси я бы прочитать
[30:57.240 --> 31:04.160]  одна страничка википедии ребят разбивается на эти пакетики каждый пакетик передается по сетеву
[31:05.160 --> 31:12.400]  отправляется искать путешествовать по интернету каждый раз когда мы когда мы доходим за сервака
[31:12.400 --> 31:22.240]  есть точно такая же сетевая карта она делает обратный процесс собирает эти пакетики относящиеся
[31:22.240 --> 31:28.440]  к одному запросу в единое целое распаковывает расшифровывает и передает уже выше так покей
[31:28.440 --> 31:39.000]  хорошо допустим передали в операционную систему еще здесь произошла установили
[31:39.000 --> 31:49.120]  соединение отправили мы установили соединение да пока нам ответили сюда на той стороне есть потом
[31:49.120 --> 31:59.440]  мы поэтому соединение пока потом что мы сделали а ну упаковали в каком да и отправили туды а да
[31:59.440 --> 32:07.440]  и нам что лежит на в каком что-нибудь еще браузер сделал до этого не но он еще пока ничего не
[32:07.440 --> 32:27.840]  получил погоди чего делает зачищает я думаю что он еще сходит кэш локально
[32:27.840 --> 32:34.200]  то есть локальный кэш
[32:38.480 --> 32:46.680]  браузер как правило папочка на диске в которой лежат палите да он проверит нет не там случайно
[32:46.680 --> 32:59.080]  вы как вам да и если есть то можно ли его показывать то есть не просто проверят что он
[32:59.080 --> 33:07.840]  там есть но что там есть он там честно настоящий и свеженький его можно показать если есть забирает
[33:07.840 --> 33:18.160]  отсюда он даже сюда не пойдет то есть вот этот шаг у нас на самом деле первый а может не знаю
[33:18.160 --> 33:28.800]  а может наоборот может даже вот так это 3 лады хорошо разобрали на пакетике отправили через
[33:28.800 --> 33:35.360]  отправили сетевую карту сетевая карта преобразовала это в электрический сигнал не знаю или вай-фай или
[33:35.360 --> 33:42.720]  радиоволн еще что-то долетела это на сервак на серваке есть тоже сетевая карта сетевая карта
[33:42.720 --> 33:52.520]  слушает воткнутую в нее проводочек бац там сигналики электричество собрала пакет дальше
[33:52.520 --> 34:11.280]  думаешь я думаю что это происходит чаще я не думаю что она ждет да я думаю что пришел пакет
[34:11.280 --> 34:18.200]  собрала поняла но понимаешь что сетевая карта не понимает смысла смысла да то есть вот того что
[34:19.200 --> 34:26.680]  собрала передала дальше ну допустим неважно не суть то есть как бы на каком уровне то есть что-то
[34:26.680 --> 34:37.800]  накопилось она готова передать кому она передает операционную систему что делает операционная
[34:37.800 --> 34:50.520]  систему какой порт где ты видишь порт я не вы
[34:50.520 --> 35:06.020]  вы
[35:06.020 --> 35:18.880]  Вы его поняли? Да. Давайте еще раз. Одна? Нет, ну ты правильно сказал про порты. Давайте их
[35:18.880 --> 35:27.160]  добавим сюда. Что такое порт? Там не одна программа. Проблема-то в чем? У вас даже в вашем
[35:27.160 --> 35:33.920]  лаптопе, вот здесь, не одна программа пользуется персональной системой. Вы когда почту скачиваете,
[35:33.920 --> 35:39.080]  не знаю, если у вас локальный почтовид, не знаю, Outlook, нажимаете скачать почту, вы же при этом
[35:39.080 --> 35:44.780]  параллельно в браузере что-то смотреть сможете. И как-то операционка разбирается, потому что вот
[35:44.780 --> 35:50.520]  это на самом деле кусочек почты, а вот это вот кусочек странички. А еще видосики можно смотреть
[35:50.520 --> 35:58.080]  на YouTube. А вот это вообще видео. Операционная система разбирается. И так вот, для этого придуман
[35:58.080 --> 36:06.880]  механизм, нам в двух словах было достаточно понять, неких портов. То есть когда мы говорим о том,
[36:06.880 --> 36:18.560]  что вот есть некий порт, то есть у этого IP адреса появляется несколько портов. 80-й для HTTP,
[36:18.560 --> 36:36.920]  443-й для HTTPS, 20-й для SSH и так далее. Это не физическое хрень, это некая конструкция,
[36:36.920 --> 36:44.920]  абстракция операционной системы, которая говорит ей о том, что если пакет пришел на этот порт,
[36:44.920 --> 36:51.920]  то отдай его какой-то конкретной программе. И конкретные программы просто-апросто начинают
[36:51.920 --> 36:59.880]  эти порты слушать, они на них как бы подписывают. Ну, например, база данных может подписаться на
[36:59.880 --> 37:11.680]  один порт. Не знаю. Веб-сервер может подписаться на другой порт. Допустим, мы послали первый запрос,
[37:11.680 --> 37:18.560]  у нас приходит на веб-сервер. Операционная система поняла о том, что пришел запрос,
[37:18.560 --> 37:32.520]  поняла о том, что запрос на 80 или 443-й порт, что это веб-сервер надо ему передать. На будущее
[37:32.520 --> 37:38.160]  просто знайте, что механизмов слушания вот этих портов, их много разных. Бывают синхронные,
[37:38.160 --> 37:42.920]  бывают асинхронные, еще какие-то, еще какие-то. Нам сейчас неважно, на данный момент неважно.
[37:42.920 --> 37:49.920]  Это вот стипенсует с программистом, им важно. Нам сами нет. И так вот, мы поняли, операционная
[37:49.920 --> 37:53.920]  система поняла. Поняла. Это к веб-серверу. Дальше. Давай.
[37:53.920 --> 38:23.480]  Как он понимает? Расшифровывает пакет и смотрит, что там внутри.
[38:23.480 --> 38:35.280]  У тебя в пакете? На портов на самом деле там дохричь. 64 тысяч, что ли, что-то такое.
[38:35.280 --> 38:41.120]  Вот. Но не суть, Паш, подождите. Во-первых, у вас вот здесь не будет одновременно ВККом,
[38:41.120 --> 38:47.280]  Ютьюбы, да? А вот здесь браузер, конечно, в картах может быть. Но браузер получает пакет,
[38:47.280 --> 38:55.280]  расшифровывается, смотрит, что внутри. Откуда это? Там пачка заголовок. То есть даже когда
[38:55.280 --> 39:01.760]  ты смотришь видео, смотришь видео, ты же... В большинстве случаев, в большинстве случаев это
[39:01.760 --> 39:07.680]  нечестный бровоткаст, то есть нечестное стримовое обещание. В большинстве случаев это набор пакетиков,
[39:07.680 --> 39:15.360]  которые склеиваются в маленький кусочек видео. Этот кусочек видео показывается и запрашивается
[39:15.360 --> 39:24.240]  следующий кусочек видео. То есть на самом деле, когда ты смотришь Ютьюб... Ютьюб, не знаю, но
[39:24.240 --> 39:30.360]  большинство стриминговых сервисов, не знаю, когда ты смотришь, ты смотришь много-много-много маленьких
[39:30.360 --> 39:36.800]  10-секундных видео или там же даже трех секундных видео. Вот. А как их склеиваются? Как они склеиваются
[39:36.800 --> 39:39.240]  в это видео? По информации из пакета.
[39:39.240 --> 39:52.760]  Послушателям, да. Потому кто будет обрабатывать?
[39:52.760 --> 40:14.720]  Подожди. Это сервак. Это... Это этот. Это ноутбук. Вот здесь мы пока на стадии о том, что мы поняли,
[40:14.720 --> 40:20.240]  что... Сейчас дойдем. Что веб-сервер... Как веб-сервер обрабатывать. Вот здесь браузер.
[40:20.240 --> 40:29.120]  Принимает решение о том, в какую кладку кинуть то, что пришло. На основе информации из пакета.
[40:29.120 --> 40:39.960]  Из вот этого пакетика, который здесь летает по сети. Итак, вот. Давайте, поедем дальше.
[40:39.960 --> 40:49.680]  Операционная система поняла. Итак, нужно вызвать веб-сервер. Это его запрос. Дальше.
[41:10.160 --> 41:15.800]  Подожди, подожди, подожди, подожди. У нас пока операционная система получила пакет. Поняла, что это
[41:15.800 --> 41:25.600]  веб-сервер. Ей нужно веб-сервер этот пакет передать. Хорошо. Она... Как она это делает? То есть веб-сервер
[41:25.600 --> 41:34.560]  это какая-то программа, которая работает по какому-то из, ну, не знаю, несколько возможных порядков.
[41:34.560 --> 41:44.720]  Она передает ему информацию о том, что вот это пакет твой. Веб-сервер, как правило, многопоточный.
[41:44.720 --> 41:54.880]  Допустим так. Допустим, веб-сервер устроен так. Он слушает отдельный поток, он слушает новое
[41:54.880 --> 42:03.880]  подключение. Он увидел, что новое подключение запустил у себя поточек именно для этого
[42:03.880 --> 42:12.960]  подключения, так? Запускает поточек для... Передает пакет ему. Вот странный чувак хочет
[42:12.960 --> 42:18.000]  посмотреть в ВК.Ком, говорит он. Запускай Абраватор. Дальше.
[42:28.640 --> 42:40.760]  Окей. Понеслась. Одобрили подключение. Подключение установилось. Дальше. Браузер формирует запрос
[42:40.760 --> 42:48.760]  непосредственно на содержание этой странички. Отправляет в ВК.Ком. Потому что аму дошло сюда.
[42:48.760 --> 43:06.120]  Нужно обрабатывать дальше. Здесь у нас начинается нюанс. Смотря, зависит от того, как мы вот эту
[43:06.120 --> 43:15.960]  штуку с вами написали. И что это такое? Бывают разные ситуации. Эта штука может, например, может
[43:15.960 --> 43:23.160]  обработать запрос как-то сама. Может куда-то сходить. Может запустить вашу программу. И в большинстве
[43:23.160 --> 43:31.040]  случаев происходит именно так. Вы веб-сервер не пишете. В Nginx не пишете. Просто говорите о том,
[43:31.040 --> 43:36.920]  что, чувак, дорогой Nginx, точнее, когда придет запрос на ВК.Ком, запусти вот эту программулину и
[43:36.920 --> 43:51.040]  передай все данные. Вот здесь у вас программа. C++-ники, скорее всего, строятся прямо внутрь вот
[43:51.040 --> 44:00.880]  этого. Ну, у них там, они любят посложнее. А нормальные ребята, C++-ники, C++-ники и так далее, они напишут
[44:00.880 --> 44:12.720]  настоящую программу. Я один раз устраивался на работу в Яндекс. Меня спросили, а как вы сделаете?
[44:12.720 --> 44:18.760]  Вы смотрите, слушайте, нам нужна такая штука. Нам нужно данные собирать с пользой. Ну, просто
[44:18.760 --> 44:26.440]  емейлы собирать. Тогда еще можно было, без всяких зашкаров, собирать емейлы и говорить пользователю
[44:26.440 --> 44:33.000]  спасибо. Как вы это сделаете? Я начал думать, ну, блин, это же Яндекс. Ну, наверное, у них как-то там,
[44:33.000 --> 44:37.680]  не знаю, все очень круто устроено. Наверное, они как-то напишут что-нибудь мощнее сквозь систему.
[44:37.680 --> 44:44.520]  Короче, правильный ответ был, чувак, мы на PHP скрипт напишем и запустим его. Даже в Яндекс. Почему?
[44:44.520 --> 44:50.280]  Потому что это самый простой вариант решения, самая простая задача, простой решение. Не надо ничего
[44:50.280 --> 44:55.320]  городить. Написали скрипт, обрабатывать будет моментально, заточить невозможно. Все, пишем.
[44:55.320 --> 45:13.400]  15 минут работы. Поэтому не смотрите с высока на простые человеческие радио. И так вот, то есть,
[45:13.640 --> 45:18.880]  возможно, разные варианты. Кто-то должен ваш запрос обработать. Скорее всего, это не веб-сервер.
[45:18.880 --> 45:24.640]  То есть, веб-сервер на сервере, программа веб-сервер на сервере предназначена для того,
[45:24.640 --> 45:30.320]  чтобы вот эти запросы управлять ими, аркестрировать, обрабатывать, вызывать нужные обработчики.
[45:30.320 --> 45:38.200]  Скорее всего, будет вызван какой-то внешний скриптик или какая-то внешняя программа ваша,
[45:38.200 --> 45:45.800]  которая получит уже вот этот весь самый запрос, обработает его, сходит куда-нибудь в базу данных,
[45:45.800 --> 45:57.920]  вернет его веб-сервер и веб-сервер его вернет обратно. Вот на вот этой простой схеме такие,
[45:57.920 --> 46:02.600]  видите, сложности. Где может что-то пойти не так? Здесь их дофигище.
[46:02.600 --> 46:12.120]  Окей, первая проблема. Еще проблема.
[46:12.120 --> 46:24.920]  Ну, мы пока в рамках одной машины находимся, да. Ну, это ты большие,
[46:24.920 --> 46:35.600]  даже на уровне вот этой схемки. Например. Да, то есть, это один способ нас задосять.
[46:35.600 --> 46:43.920]  Это лечится, да. То есть, например, вот эти же PHP-потоки, которые обрабатывают запросы их,
[46:43.920 --> 46:49.880]  тоже нужно несколько выпустить. Один работает с вот этим, другой работает с вот этим потоком веб-сервера.
[46:49.880 --> 46:56.800]  То есть, у нас кончится место под потоки веб-сервера, у нас может кончиться место под вот эти PHP-истории и так далее, да.
[46:56.800 --> 47:05.480]  То есть, у нас проблемы, за всем нужно следить. Ну, за всем следят архитекторы, системные администраты,
[47:05.480 --> 47:11.960]  когда работают со всем этим думают. Вот как сделать так, чтобы или смотреть, например,
[47:11.960 --> 47:17.320]  такая ситуация. Вот у нас вот этот вот поход в базу данных занимает, не знаю, секунду.
[47:17.320 --> 47:24.800]  Ну, это недопустимо много, но допустим. А вот работа вот здесь, она очень быстрая.
[47:24.800 --> 47:31.840]  Она сразу с вами начинается, сразу дисбаланс. Нам нужно вот этих вот историй больше, чем вот этих.
[47:31.840 --> 47:43.320]  Ну, понимаете, да. То есть, если они начинают, то есть, вот один поток веб-сервера может работать
[47:43.320 --> 47:54.360]  сразу несколькими потоками отсюда. Или, например, такая картинка. А что делает вот этот поток,
[47:54.360 --> 48:04.080]  пока наша PHP считает? Простая. Ну, может быть, ей чем-нибудь полезно нагрузить на это время?
[48:13.320 --> 48:24.280]  Ну, какая-то вот начинается, да. В NGINX возможности управлять. NGINX вот эта конструкция, это NGINX.
[48:24.280 --> 48:35.280]  Или это Apache. Вот таких много на самом деле. Вот у Гошечки свои, там еще какие-то есть. Или такая
[48:35.280 --> 48:40.760]  конструкция. Смотрите, у нас вот пошел запрос, мы поняли, что это нужно вызвать вот этот скрипт.
[48:40.760 --> 48:53.000]  А мы его заново запускаем? Каждый раз? Можно нет. Да. И ситуация, когда мы его не каждый раз
[48:53.000 --> 48:59.240]  запускаем, называется протокол fast CGI. А если мы его каждый раз будем запускать, то просто CGI.
[48:59.240 --> 49:10.440]  Это отличные истории, сейчас уже есть более новые. Но общая схема, она все время примерно такая.
[49:10.440 --> 49:18.640]  Пользователь делает запрос, он проваливается сюда, проходит до сетевой карты сервака,
[49:18.640 --> 49:23.720]  там собирается, операционная система смотрит кому этот запрос предназначается, вызывает
[49:23.720 --> 49:31.800]  кому. Кому, как правило, это веб-сервер. Веб-сервер смотрит на... обычно он смотрит на вот эту вот
[49:31.800 --> 49:43.720]  часть, которая вот здесь идет после названия. Называется URI. Вот это все называется URU, а вот этот
[49:43.720 --> 49:51.640]  конкретный кусочек называется URI. Смотрит, по нему определяет, какой скрипт вызвать или какой-то,
[49:51.640 --> 49:57.480]  не знаю, внутренней программы, внутренний кусочек модуля, модуль запустить и так далее.
[49:57.480 --> 50:08.480]  Вызывает его, передает ему все, что представил браузер, ждет ответ и отдает. А вот, например,
[50:08.480 --> 50:16.140]  как вы поступите? Смотрите, наш запрос-то маленький был, дай VK.com, а страничка VK.com может занимать,
[50:16.140 --> 50:21.640]  не знаю, ответ может занимать 200 килобайт. Вот посчитала вот эта штука, насчитала 200 килобайт
[50:21.640 --> 50:34.440]  от VK.com. Правило передала веб-серверу первые 10 килобайт. Ну, постепенно начала передавать.
[50:34.440 --> 50:46.720]  Вы сразу начнете обратно ее отправлять в пользу или подождете? А что зависит? Вот чем
[50:46.720 --> 51:01.840]  хороши и плохи оба варианта? Окей. Сразу отдавать хорошо тем, что быстрее пользователь увидит,
[51:01.840 --> 51:07.440]  быстрее начнет браузер обрабатывать запрос, им уже нужно все еще построить, дом дерева построить и
[51:07.440 --> 51:26.160]  так далее. А чем плохи варианты? Давай сразу. Почему? Сетевое соединение все равно одно,
[51:26.160 --> 51:36.080]  мы по нему фигачим. Отрисовать я, возможно, почти точно не смогу, пока страничка не загрузится.
[51:36.080 --> 51:42.560]  Ничего. Ну, пока весь HTML как минимум не дойдет до меня. Я даже не приступлю к этой
[51:42.560 --> 51:47.960]  истории, но не важно, я уже все равно начну ее обрабатывать хоть как. Это все равно быстрее,
[51:47.960 --> 52:08.600]  давайте сразу быстрее. Но это плюс, чем минус. Если будем ждать, будем более равномерно загружать.
[52:08.600 --> 52:16.760]  Да без разницы. У тебя же не один такой, у тебя, там не знаю, 200 пользователей одновременно
[52:16.760 --> 52:29.800]  обрабатывается. Раз на раз. В среднем будет одна. Да не, не будет. Какая разница? У тебя за секунду
[52:29.800 --> 52:38.120]  обрабатывается 200 запросов. Ты в миллисекунду отдашь по 10, что ты отдаешь в миллисекунду 200.
[52:38.120 --> 52:50.880]  Такой же, да такой же. Проблема в том, что если мы начинаем отдавать сразу, у нас вот эта цепочка
[52:50.880 --> 53:02.280]  раз, два, три, встает намертво. Мы никаких вот этих вот историй о том, что у нас один поток веб-сервера
[53:02.280 --> 53:12.000]  работает с двумя, тремя PHP, мы уже не сможем сделать. А если мы начали отдавать, а если PHP начинает
[53:12.000 --> 53:19.720]  подтормаживать и генерирует две секунды, три секунды, четыре секунды, все это время вот этот вот канал
[53:19.720 --> 53:27.240]  у нас как бы стоит в растопырку. Веб-сервер, кусочек веб-сервера занят. Канал между ними занят.
[53:27.240 --> 53:33.000]  Что осталось сделать до злоумышленника? Найти у вас страничку, которая долго считается,
[53:33.000 --> 53:41.720]  и отправляйте 200 одинаковых запросов. И он положил ваш серва. То есть буферизация вот здесь вот нужна
[53:41.720 --> 53:53.680]  скорее с точки зрения безопасности. Веб-сервер забывает отправил в PHP запрос. Это у нас веб-сервер,
[53:53.680 --> 53:59.080]  это у нас upstream так называемый, куда мы отправляем запросы. Отправил запрос и
[53:59.080 --> 54:05.280]  забыл про него до тех пор, пока он не будет полностью сформирован. Когда он полностью сформирован,
[54:05.280 --> 54:10.320]  он его принимает, буферизует у себя и только после того, как он полностью скачал к себе,
[54:10.320 --> 54:15.120]  начинает отдавать. Обычно работают вот так, так просто тупо безопаснее.
[54:15.120 --> 54:26.840]  Так, едем дальше. Итого, мы отдали сюда вот эту 200 килобайтную HTML. Браузер ее получил. Дальше
[54:26.840 --> 54:50.040]  что он делает? Там рановато. Там только HTML. Ни картинок, ничего. Он ее парсит, строит дом
[54:50.040 --> 54:55.640]  дерева и запрашивает все необходимые пайлы, которым нужно запросить для того, чтобы на
[54:55.800 --> 55:02.320]  рисовать. Если вы откроете любую страничку, вы видите там заголовки в пачку CSS файлов,
[55:02.320 --> 55:08.120]  стилевых файлов, пачку JavaScript файлов и так далее. Это все скачивается до того,
[55:08.120 --> 55:15.400]  как он начинает что-нибудь рисовать. CSS файл управляет тем, что такое HTML. Видели HTML когда-нибудь?
[55:15.400 --> 55:23.600]  HTML просто некая симантическая разметка. А как она выглядит? Как она выглядит?
[55:23.600 --> 55:30.400]  Описывается в CSS файлах. Проширение просто-напросто. Итого, браузер распарсил, обнаружил,
[55:30.400 --> 55:50.640]  что нам нужно скачать 5 JavaScript файлов, 10 стилевых и 154 картинки. Он начинает их скачать.
[55:54.600 --> 56:02.720]  Обычно в этот момент браузер уже не достаточно одного соединения с первоком. Он, как правило,
[56:02.720 --> 56:13.760]  восстанавливает несколько соединений с каждым доменным именем. В том 4 или 8 типа такого, да,
[56:13.760 --> 56:21.280]  и фигачит в 4 или 8 потоков одновременно. Как минимум потому, что они могут просто лежать
[56:21.280 --> 56:30.400]  на всех серверах картинки, на одном CSS, на другом JavaScript, на третьем. А почему ограничивает 4 или 8?
[56:30.400 --> 56:40.240]  Просто для того, чтобы как раз пропускную способность сетевой карты вот здесь,
[56:40.240 --> 56:49.760]  чтобы не переборщить. Самого себя не убить. Итого, запрасывает первый JavaScript,
[56:49.760 --> 56:55.160]  понеслась. Точно такой же процесс. Возможно, на другой сервер пришел. Определилось,
[56:55.160 --> 57:01.160]  что такое JavaScript, где он лежит, надо ли вызывать PHP или можно прям вообще с диска забрать. Бывают
[57:01.160 --> 57:14.000]  же такие запросы. Нам с диска забрали, отдали, сформировали ему, скачали мы 5 JavaScript, 10 CSS.
[57:14.000 --> 57:23.480]  Что я забыл? Перед тем, как скачивать первый CSS, что он сделает? И первый CSS, и второй CSS,
[57:23.480 --> 57:39.200]  и второй CSS. Хорошо. Каждый файл проверяется. Каждый файл отдельный. И вы можете для каждого
[57:39.200 --> 57:45.600]  файла задать разные параметры каширования. Где сдаются параметры каширования? Как это происходит?
[57:45.600 --> 57:58.000]  Да? То есть вот когда вот здесь ваш PHP или кто-то, неважно, C, C++, сервак и так далее, генерируют
[57:58.000 --> 58:04.000]  ответ, он его точно так же упаковывает и говорит, слушай, я тебе сейчас буду возвращать картинку,
[58:04.000 --> 58:13.400]  не знаю, лога png, картинка изменялась тогда-то, размер у нее такой-то, запиши ее, пожалуйста,
[58:13.400 --> 58:22.160]  навечно. И отдаёт такой запрос, да? То есть отдаёт не только логу png, но и весь набор параметров.
[58:22.160 --> 58:26.080]  Так что тебе параметр. Браузер, когда их получит, поймет, ага, хорошая картинка,
[58:26.080 --> 58:35.760]  можешь закашировать навечно. Кашируют навечно. Что такое JavaScript? Знаете.
[58:35.760 --> 58:51.480]  Клё, как вы поменяете лога, если его нужно поменять? А вы его закашировали навечно.
[58:51.480 --> 58:58.160]  Другое имя сделай.
[58:58.160 --> 59:12.720]  Всё верно.
[59:12.720 --> 59:26.680]  Картинка лога png вечно. Когда нам нужно поменять картинку, мы сделаем лого-1png и это будет уже новая
[59:26.680 --> 59:36.520]  картинка. Обычно, на самом деле, знаете, как есть, блин, что же это за доскатка? Делают даже так,
[59:36.520 --> 59:52.280]  лого png, знак вопросно, вер равно 1, вер равно 2, вершин, вер равно 3 и так далее. Для браузера это
[59:52.280 --> 01:00:01.480]  всё разные картинки. Можно вот эту цифру поменять вообще чуть ли не автоматом. Можно так настроить
[01:00:01.480 --> 01:00:08.680]  выкатку своего боевого решения о том, что у тебя при изменении в герте, вот эта цифра имплементируется на единичку.
[01:00:08.680 --> 01:00:17.240]  Ну и всё. И так сделать для всех картинок. Поэтому, когда у вас, например, что-нибудь заглючило,
[01:00:17.240 --> 01:00:23.080]  какая-нибудь страничка в интернете заглючила, вы добавьте туда что-нибудь там, не знаю, вер равно new
[01:00:23.080 --> 01:00:30.280]  или что-нибудь, ну просто киши сбросите. Как у вас в браузере, так на самом деле и вот здесь,
[01:00:30.280 --> 01:00:38.560]  потому что вот здесь, мы про это не говорили, но здесь везде киши, вот здесь кэш, вот здесь кэш,
[01:00:38.560 --> 01:00:45.400]  здесь тоже кэш, у базы данных тоже кэш, у файловой системы тоже кэш, везде всё закэшировано напрочь,
[01:00:45.400 --> 01:00:52.200]  иначе это вообще работать не будет никогда. Везде всё кэшируется на разных уровнях. Какими-то кэшами
[01:00:52.200 --> 01:00:57.600]  мы можем управлять, например, у нас вот здесь мы можем управлять кэшом в нашей программе. В
[01:00:57.600 --> 01:01:03.760]  операционной системе тяжеловато, тяжелей, но операционная система тоже всё кэширует, всё что
[01:01:03.760 --> 01:01:10.960]  может. Все ваши запросы в базу данных, сетевые запросы, всё что может она кэширует и точно
[01:01:10.960 --> 01:01:18.600]  также буферизует. То есть вот здесь мы можем принять решение, мы сразу отдаем ответ от PHP или
[01:01:18.600 --> 01:01:26.440]  нет. А операционная система по этому вопросу уже подумала и её уже настроили, и мы на это, как правило,
[01:01:26.440 --> 01:01:32.280]  не влияем. И скорее всего она как раз всё кэширует и всё буферизует по максимум. Пока
[01:01:32.280 --> 01:01:38.360]  кто-нибудь там не знает, пока запрос полностью отсюда не придет, никуда он не пойдет.
[01:01:38.360 --> 01:01:51.120]  Ну давай, что можно кэшировать. Операционная система у нас управляет всем железным компьютером.
[01:01:51.120 --> 01:01:59.400]  Всю коммуникацию с железом компьютера ты можешь управлять. Ну во-первых, смотри, работа с дисками,
[01:01:59.400 --> 01:02:15.240]  с дисками всё кэшируется. Когда ты считываешь один байт с диска, ты же реально, ты же понимаешь,
[01:02:15.240 --> 01:02:21.080]  что ты считываешь не один байт. Ты считываешь вот какой-нибудь такой огромный кусток, да,
[01:02:21.080 --> 01:02:29.160]  она кладется в память, тебе дается байт. Вот этот кусток не выбрасывается или выбрасывается,
[01:02:29.160 --> 01:02:36.880]  но не сразу. Операционная система кэширует диски, операционная система кэширует, буферизует
[01:02:36.880 --> 01:02:43.040]  работу с сетевой структурой, естественно. Естественно, иначе бы это всё не работало.
[01:02:43.040 --> 01:02:53.320]  Итого, JavaScript, возвращаясь к нему. Наша HTML страничка, которую мы показываем, состоит из самого
[01:02:53.320 --> 01:03:01.200]  HTML, суть из стилевых файлов CSS, которые показывают как оформлять эту суть, да, то есть как выглядит
[01:03:01.200 --> 01:03:07.120]  заголовок. В HTML написано вот это заголовок. В CSS написанный заголовок выглядит так, огромные
[01:03:07.120 --> 01:03:15.560]  буквы красного цвета. Браузер это всё понимает, соединяет и показывает. JavaScript, это на самом деле
[01:03:15.560 --> 01:03:21.720]  не к сожалению, к счастью, потому что JavaScript позволяет нам делать такие вещи в браузере.
[01:03:21.720 --> 01:03:31.000]  JavaScript это программа, которую браузер запускает у себя. То есть мы с вами можем на серверной
[01:03:31.000 --> 01:03:37.920]  стороне создать какую-то программу, отдать её браузеру, и браузер её запустит и будет выполнять.
[01:03:37.920 --> 01:03:45.400]  У вас в каждой откладке каждого браузера работает адовое количество JavaScript программ.
[01:03:45.400 --> 01:03:57.280]  Современная, когда вы сидите в ВКонтакте, в Фейсбуке, не знаю, у вас же в тиктоке, вы где сидите?
[01:03:57.280 --> 01:04:05.760]  Но когда приходит новый комментарий, у вас же страница не перегружается, а комментарий
[01:04:06.200 --> 01:04:14.240]  появляется, или когда приходит новое сообщение, или новое поп-апчик где-нибудь всплывает. Это всё JavaScript
[01:04:14.240 --> 01:04:26.520]  программы. Знаете, как мы раньше делали, 20 лет назад? Мы страничку перегружали для того, чтобы
[01:04:26.520 --> 01:04:32.640]  обновить что-то. Полностью ты сидишь, а в фигах страница перезагружается. И там тебе письмо.
[01:04:32.640 --> 01:04:38.440]  Вот сейчас же такого нет. Почему? JavaScript программка запустилась и постоянно сама JavaScript
[01:04:38.440 --> 01:04:44.800]  программка, работающая вот здесь в браузере, в каждой конкретной нашей вкладке тоже может делать
[01:04:44.800 --> 01:04:52.360]  запросы к серваку, получать оттуда ответы какие-то, как их обрабатывать. Например, она может делать
[01:04:52.360 --> 01:05:00.200]  запрос, а не появился новый писем или новых комментариев к моему посту. Появилась, говорит
[01:05:00.200 --> 01:05:06.640]  сервак, держи, вот для новых комментарий. Ага, отлично, отображают. И JavaScript программка заставляет
[01:05:06.640 --> 01:05:11.640]  браузер нарисовать этот новый комментарий. И браузер на лету нарисует. У вас что-то там
[01:05:11.640 --> 01:05:23.200]  раздвигается, появляется комментарий, лайк появляется и так далее. Вот, примерно так. Это
[01:05:23.200 --> 01:05:29.720]  штука работает. Показали, то есть браузер не успокаивается никогда. А может и JavaScript
[01:05:29.720 --> 01:05:34.600]  программка может и не постоянными, в смысле не запросами делать, а попытаться создать постоянное
[01:05:34.600 --> 01:05:40.760]  соединение. Например, просто слушать. Как только здесь что-то появится, говорит она, пришли мне
[01:05:40.760 --> 01:05:49.120]  сразу. Вариантов много. Вот примерно так вот это происходит. То есть, когда вы откройте любой
[01:05:49.120 --> 01:05:57.280]  сайт, откройте ВК. Кто может пользоваться режимом неотладки, это режим разработки в браузере.
[01:05:57.280 --> 01:06:05.440]  Нормально, все программисты. Ну короче, для тех, кто не пользовался, это очень интересно. Поищите,
[01:06:05.440 --> 01:06:13.080]  запустите и наберите vk.com. Посмотрите, сколько запросов делает ваш браузер к серверу vk.com. Там,
[01:06:13.080 --> 01:06:20.520]  по-моему, 700, что ли, для того, чтобы отобразить одну страничку. А потом просто посидите на этой
[01:06:20.520 --> 01:06:26.320]  страничке и вы увидите, что они постоянно общаются. Ваш браузер с ВК постоянно общается,
[01:06:26.320 --> 01:06:34.160]  без перерыва. Ну, почти с любым сайтом. Постоянно что-то скачивает и так далее. Ладно,
[01:06:34.160 --> 01:06:41.640]  нам последнее осталось. Вот это вот, ведь на самом деле никогда не просто провод. Что на самом деле
[01:06:41.640 --> 01:06:58.600]  здесь у нас? Агаунд Робина, это уже ближе к нам вот здесь. Нам добраться нужно вот здесь,
[01:06:58.600 --> 01:07:11.560]  мы не знаю, в Москве, а вот здесь, не знаю, в Питере стоит. Как доберемся? Ну да, все верно. То есть там на
[01:07:11.560 --> 01:07:18.280]  самом деле цепочечка выстраивается между вашим ноутбучком и большим количеством серваков.
[01:07:18.280 --> 01:07:28.040]  Вот это тут маршрут. И вам можно посмотреть. Трис роут называется программка. Опять же,
[01:07:28.040 --> 01:07:34.920]  если любопытно, выполните ее. В Винде есть. В Винде она Трис РТ называется. Набирайте Трис РТ,
[01:07:34.920 --> 01:07:41.520]  БК Ком и увидите весь путь, который делает. Он, по-моему, проскочит про серваков. 30 он проскочит.
[01:07:41.520 --> 01:07:50.400]  И, к сожалению, каждый из этих серваков тоже может влиять на то, что мы можем делать,
[01:07:50.400 --> 01:08:02.600]  а что мы не можем делать. Потому что где-то может быть кэш, где-то может быть сорн, где-то может
[01:08:02.600 --> 01:08:09.360]  быть еще что-нибудь, где-то может быть какая-нибудь отдельная история и так далее. То есть мы это все,
[01:08:09.360 --> 01:08:16.200]  но это мы все будем учитывать, когда будем сами что-нибудь проектировать. Вот, я для чего вот это
[01:08:16.200 --> 01:08:23.040]  все нарисовал. Это очень упрощенная схема, но мы на нее будем очень-очень сильно опираться.
[01:08:26.400 --> 01:08:35.800]  То есть, прочитайте осищную модель. Это поможет. То есть, как бы вот отсюда, от браузера, вот до
[01:08:35.840 --> 01:08:50.720]  сюда все наши 7 уровней оситы и происходят. Здесь у нас канальный, да, самый нижний. Физический,
[01:08:50.720 --> 01:08:57.800]  да, физический. Здесь у нас, если я не ошибаюсь, представление, по-моему, или приложение. Приложение,
[01:08:57.800 --> 01:09:08.000]  да. Ну вот, а здесь обратная ситуация. Отсюда до сюда они собираются в обратном порядке.
[01:09:10.720 --> 01:09:22.200]  Вопросы по вот этому маленькому, маленькому кусочку? Нет вопросов? Ну тогда расходимся,
[01:09:22.200 --> 01:09:29.120]  в следующий раз встречаемся и... Давай.
[01:09:40.080 --> 01:09:41.720]  Там себя не похвалишь.
[01:09:52.200 --> 01:09:59.160]  Вопрос, то кем ты хочешь быть. Если ты хочешь быть технологием,
[01:09:59.160 --> 01:10:06.040]  какого уровня технологием ты хочешь быть? В любой компании, которая занимается большими проектами,
[01:10:06.040 --> 01:10:09.760]  есть человек, который вот это все понимает. Если хочешь быть просто разработчиком,
[01:10:09.760 --> 01:10:30.560]  у тебя стоит задача. Так, ну подожди, ну давай я поработаю немножко вашим личным психологам.
[01:10:30.560 --> 01:10:42.560]  Так, я стираю это все, да. Смотри, это на самом деле, знаете, что это, мы вот так, сейчас я вам
[01:10:42.560 --> 01:10:48.040]  расскажу кусочек из того, как мы проектируем. То есть мы делаем конференции для разработчиков,
[01:10:48.040 --> 01:10:55.880]  и как мы понимаем, какую конференцию сделать следующей, как мы нашу линейку продуктов расширяем.
[01:10:55.880 --> 01:11:03.240]  Вот рассмышления точно такие же. Вот ты программист. Вырослив ты программистом,
[01:11:03.240 --> 01:11:08.440]  пошел расстроиться программистом. У тебя какие варианты дальнейшего развития? Вопрос по жизни.
[01:11:08.440 --> 01:11:28.680]  Окей. Middle. Senior. Дальше. Вот здесь вот начинается развилка, и вам в какой-то момент
[01:11:28.680 --> 01:11:35.960]  придется для себя решить. Первый вариант – это тимлит. То есть ты становишься, начинаешь управлять
[01:11:35.960 --> 01:11:47.520]  людьми, другими программистами управлять людьми. Нет-нет-нет, это оба нормальные вертикальные,
[01:11:47.520 --> 01:11:54.880]  в смысле оба роста вверх. Есть второй вариант. Ты начинаешь расти в экспертном смысле. То есть
[01:11:54.880 --> 01:12:02.920]  здесь начинаешь расти в управленческом смысле, а здесь ты становишься экспертом. И вот здесь у тебя
[01:12:02.920 --> 01:12:27.080]  архитектор. Вот здесь у тебя, я не знаю, ДВОПС. Понимаете? А? Согласен. Согласен. Согласен.
[01:12:27.080 --> 01:12:40.280]  Скорее всего ДВОПС – это прямо вот сюда. Архитектор. Тимлит. Это то же самое. Например, у нас есть одна
[01:12:40.280 --> 01:12:45.640]  конференция для вот этого уровня, для вот этого, для джинок у нас нет. У нас есть одна конференция
[01:12:45.640 --> 01:12:51.360]  сюда, одна конференция сюда, одна конференция сюда. То есть ты в какой-то момент будешь
[01:12:51.360 --> 01:12:56.120]  выбирать. Ты пойдешь управлять людьми или ты пойдешь управлять как бы системами, процессами.
[01:12:56.120 --> 01:13:03.320]  То есть вот этот человек управляет системами, проектирует архитектуру, принимает решение о том,
[01:13:03.320 --> 01:13:08.400]  как она будет работать, принимает решение о том, как она будет разрабатываться и так далее. А Тимлит
[01:13:08.400 --> 01:13:17.120]  управляет людьми. Он вытирает сопли джунам, он как бы, не знаю, как бы веселит их, проводит с ними
[01:13:17.120 --> 01:13:27.920]  one-to-one. То есть это другая работа. Да. Наверху они смыкаются опять. Кого? Если мы говорим про
[01:13:27.920 --> 01:13:33.480]  техническую составляющую, они смыкаются в технического директора. То есть как бы в технического
[01:13:33.480 --> 01:13:38.520]  директора можно вырасти как из Тимлита, так и из Тимлита. Но ему нужно и то и другое. То есть он
[01:13:38.520 --> 01:13:49.560]  должен быть и управлять людьми уметь, и уметь в архитектуру. Но ты в любой момент, естественно,
[01:13:49.560 --> 01:13:59.600]  можешь как-нибудь выскочить, не знаю, в продукт пойти или, я не знаю, в курьеры. Как угодно, да. Вот,
[01:13:59.600 --> 01:14:07.240]  мы с вами, вот эта линейка. Мы с вами вот примерно вот так. То есть вот курс, который мой, он вот такой.
[01:14:07.240 --> 01:14:19.640]  Курс, который, альтернатива, он вот такой. Ну вот как бы думайте. Я ответил на твой вопрос. Не надо отчаиваться.
[01:14:30.520 --> 01:14:36.600]  Архитекторы менее востребованы еще в Product Manager. Я согласен, в Product Manager нужно больше.
[01:14:38.040 --> 01:14:43.520]  Но хороших архитекторов ты вообще не найдешь сейчас на рынке. И хороший архитектор зарабатывает
[01:14:43.520 --> 01:14:51.440]  кратно больше, чем Product Manager. Слушай, ты знаешь сколько сейчас программист зарабатывает? Ты же бешеный.
[01:14:53.440 --> 01:15:03.400]  Ну, не знаю, ну, сотни тысяч рублей. То есть в Москве ценники уже там, не знаю, 300, 400, 500, 700. Могут занимать
[01:15:03.400 --> 01:15:14.400]  сеньоры за милую душу. Эксперт, вот этот. 700, 800. Есть проблемы. Product, если я не ошибаюсь, все-таки поменьше.
[01:15:14.400 --> 01:15:23.680]  Они тоже нужны, но все-таки они поменьше зарабатывают. И на самом деле ты зря. Одному хорошему проекту среднего
[01:15:23.680 --> 01:15:37.080]  размера нужно один архитектор, один продукт. То есть они как бы такие. Ладно, еще вопросы? Нет? Ну, пошли.
