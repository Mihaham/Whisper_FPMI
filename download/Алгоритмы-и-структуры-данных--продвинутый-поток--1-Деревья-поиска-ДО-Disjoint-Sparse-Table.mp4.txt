[00:00.000 --> 00:11.920]  ну хорошо поехали итак мы продолжаем изучать как-то до нас теплоход снова
[00:11.920 --> 00:23.080]  плывет мимо дифференциаль двоичных деревьев войском вот ну как бы да хотя возможно да
[00:23.080 --> 00:27.520]  что-то не что-то нет реальной смотонализа там на уровне слов лог конечно нам сегодня потребуется
[00:27.520 --> 00:35.080]  и даже не только для оценки асимптотики но начнем мы с такой замечательной структуры данных как
[00:35.080 --> 00:40.240]  б деревья мы уже начали обсуждать что это такое то есть не буду сейчас там комментировать на
[00:40.240 --> 00:48.720]  тему того это там сильно зачем это надо это мы уже в прошлый раз спокойно обсудили вот но
[00:48.720 --> 00:53.680]  напомним же определение значит ну начнем с того что б дерево это такое нетривиальное дерево
[00:53.680 --> 01:00.640]  поиска это единственное у нас будет дерево поиска который мы не можем назвать двоичным мы
[01:00.640 --> 01:07.520]  тоже мы не можем сказать что оно кайч на потому что количество ключей в каждой вершине то есть
[01:07.520 --> 01:13.240]  вот у нас каждой вершине есть какой-то набор ключей которые мы храним в отсортированном по
[01:13.240 --> 01:22.600]  возрастанию порядке вот и у нас есть на те нот и эти количество может от вершины к вершине
[01:22.600 --> 01:34.000]  изменяться но при этом есть мистическая константа т допустим больше либо равна двух и великая
[01:34.000 --> 01:39.720]  первая собственно условия говорит нам о том что количество ключей в любой вершине не превосходит
[01:39.720 --> 01:55.920]  2 t минус 1 вот да а еще количество ключей не меньше чем t минус 1 если что если что
[01:55.920 --> 02:11.280]  нет тут более не тривиальные условия да если вершина некой шеф то есть нам допускается что
[02:11.280 --> 02:20.480]  в корне может быть сколь угодно мало ключей главное чтобы их было больше либо равно одного
[02:20.480 --> 02:35.400]  но как сказать иначе это бы это достаточно бессмысленная потому что значит откуда уже
[02:35.400 --> 02:42.680]  для того чтобы понять напомним откуда нас берутся под деревья напоминаю что с не просто к ключей а
[02:42.680 --> 02:51.560]  у нас на самом деле еще значит у каждой вершины есть под деревья причем напоминаю что у нас под
[02:51.560 --> 02:59.400]  деревьев ровно к плюс 1 мы их так вот можно их нумеровать там допустим т 0 т 1 и так далее
[02:59.400 --> 03:12.360]  т к и мы понимаем что в т и там значит т и т дерево содержит ключи только вот то есть если
[03:12.360 --> 03:22.040]  это и то содержит какой-то ключ x то из этого следует что x лежит между x и минус 1 и x и вот
[03:22.040 --> 03:28.440]  ну естественно мы здесь будем подразумевать что x нулевое равно минус бесконечности а x к плюс
[03:28.480 --> 03:33.160]  1 равно соответственно плюс бесконечности ну можно было там по другому условия написать но я думаю вы
[03:33.160 --> 03:42.160]  и так все понимать вот спрашивается за счет чего же обеспечивается добрый день еще раз балансировка
[03:42.160 --> 03:53.080]  вот за счет чего у нас обеспечивается балансировка чего не откали а как нет
[03:53.080 --> 03:59.640]  количество под деревьев оно идентично количеству вершин плюс один тут без вариантов вот было но
[03:59.640 --> 04:05.320]  балансировка же как бы сам себе эти условия балансировку не обеспечивают потому что скажем
[04:05.320 --> 04:11.160]  абсолютно произвольное двоичное двоичное дерево поиска вполне себе будет удовлетворять на самом
[04:11.160 --> 04:19.360]  деле свойство б дерево скажем ст равно 2 давай а вот я и говорю плюс бесконечности
[04:19.360 --> 04:33.520]  потому что мы из единицы тут мирим а я вас понял да да да да да да так правильно так
[04:33.520 --> 04:46.280]  правильно да очень пяточка да нет балансировка конечно балансировка запуска но на самом деле
[04:46.280 --> 04:52.360]  достигается за счет другого то есть мы делаем произвольным количество ключей в вершине но зато
[04:52.360 --> 05:08.280]  3 теперь мы можем жестко требовать что для любой вершины в верно что глубины всех ее под деревьев
[05:08.280 --> 05:11.960]  совпадают
[05:11.960 --> 05:22.520]  совпадают то есть вот обратите внимание да то есть в овл дереве мы говорили что там совсем
[05:22.520 --> 05:27.960]  жестко чтоб совпадали глубины мы делать не можем но мы можем заявить что они там отличаются на плюс
[05:27.960 --> 05:33.040]  минус один это нас устроит но при этом тогда мы жестко говорили что у каждой вершины под дерево
[05:33.040 --> 05:39.480]  два но там может быть каких-то не существует но два но теперь смотрите здесь глубины под деревьев
[05:39.480 --> 05:48.280]  совпадают косвенным фактором является то что если вершина не лист то все под деревья существуют
[05:48.280 --> 05:54.560]  то есть не может быть так что скажем что там существует тут деревья только первое второе третье
[05:54.560 --> 06:02.080]  и 27 вот что нет то не такого не бывает либо существует все либо не существует никого вот
[06:02.080 --> 06:12.240]  тут все очень удобно в этом плане вот так вот так что вот такая вот балансировочка ну в принципе
[06:12.240 --> 06:18.000]  в прошлый раз мы кажется даже вывели что на самом деле глубина у нас оказывается то есть глубина
[06:18.000 --> 06:28.000]  всего дерева у нас не превосходит чего там у нас было вот да вот какая-то вот такая штука да у
[06:28.000 --> 06:34.640]  нас была не будем сейчас повторять вывод собственно в качестве упражнения можно привести
[06:34.640 --> 06:44.080]  вот и чему это нас приводит но то есть она нас приводит к тому что глубина вполне логарифмична
[06:44.080 --> 06:55.080]  с этим жить вполне можно но как конкретно с этим жить вот но более того нам то есть мы наложим
[06:55.080 --> 07:00.760]  на себя еще дополнительное ограничение как минимум на вставках и удалениях потому что
[07:00.760 --> 07:06.040]  напоминаю что откуда мы такое взяли чтобы в вершине хранилось много ключей то есть мы это
[07:06.040 --> 07:10.880]  взяли для для таких деревьев которые мы просто в оперативной памяти как у нас там на олимпиадах
[07:10.880 --> 07:15.800]  обычно принято хранить не будем то есть смысл будет заключаться в том что в оперативной
[07:15.800 --> 07:23.280]  памяти мы в каждый момент времени имеем право хранить от единицы чем не сильно желательно с
[07:23.280 --> 07:31.160]  большой константой от единицы вершин вот все остальные вершины хранятся где-то там в
[07:31.160 --> 07:36.120]  какой-то удаленной памяти ну там начинают жесткого диска и заканчивая там где-нибудь там из интернета
[07:36.120 --> 07:43.280]  скачиваем откуда-то вот и поэтому хочется сделать так чтобы этих скачиваний было как можно меньше
[07:43.280 --> 07:49.160]  но по константе то есть понятно что их должно быть наверно от логарифма потому что там я там
[07:49.160 --> 07:53.120]  ясно наверно чтобы там проделать какие-то инсерты дилиты наверно уж как-то быстрее чем
[07:53.120 --> 07:58.840]  зологарифа мы это делать не будем ибо у нас не амортизация у нас невероятности эти наши любимые
[07:58.840 --> 08:06.360]  но вот я да но вот я сообщаю маленький приятный факт это еще одно дерево с честной асимптотикой
[08:06.360 --> 08:13.560]  то есть у нас его нет у нас сегодня будет конечно же там мистическое дерево с амортизированной асимптотикой
[08:13.560 --> 08:25.040]  да но которые сплои естественно вот но до чем мы все-таки с б дерево вот и вот то есть бы у нас
[08:25.040 --> 08:30.240]  дерево будет с честной асимптотикой потому что будет от логарифма но сколько скачиваний вершин нам
[08:30.240 --> 08:39.200]  для этого потребуется вот ну и но вот но очень хотелось бы конечно уложиться в идеале совсем
[08:39.200 --> 08:47.800]  прям вот прям реально в лог но вот но давайте смотреть как же у нас это будет получаться
[08:47.800 --> 08:57.680]  вот что что ну хотя хотя какие у нас операции вообще хочется делать вот самые базовые операции
[08:57.680 --> 09:15.080]  какие хочется делать вообще ну да по модулю константы да как всегда так ну крейтс ну крейтс
[09:15.080 --> 09:20.480]  допустим просто да первую очередь нас интересует на самом деле первая конечно операция нас интересует
[09:21.480 --> 09:35.240]  а так интересует insert и нас интересует там delete ну или там erase вот давайте попробуем для
[09:35.240 --> 09:43.400]  разминочки написать что-то типа search но нет понятно что легко но нам это нужно в первую
[09:43.400 --> 09:50.680]  очередь для того чтобы так ознакомиться с инфраструктурой которая у нас есть так ну так давайте
[09:50.680 --> 09:55.600]  дать так начнем с того что у нас даже что у нас вершине вообще есть ну понятно что для
[09:55.600 --> 10:01.240]  программирования этой вершины нам конечно потребуется наверное там мистическое слово template
[10:01.240 --> 10:17.000]  ну как сказать мне кажется что пройтись по списку легче чем удалять ну по разному на
[10:17.000 --> 10:24.240]  самом деле это делается но вот ну можно в списке можно там векторе на самом деле так
[10:24.240 --> 10:38.960]  ну да ну для этого тогда при скачке надо там элементы какие-то в сет храни так что знаете
[10:38.960 --> 10:56.360]  легче уже легче в массиве хранить что ли но как сказать смотрите обычно обычно там в этом
[10:56.360 --> 11:00.240]  смысле не там за сколько мы работаем самой вершине не так принципиально просто потому
[11:00.240 --> 11:06.600]  что время работы все равно будет там не будет превышать время просто скачки самой вершины на
[11:06.600 --> 11:16.920]  самом деле так ну значит что у нас тут и так ну вот ну то есть получается у нас такое класс
[11:16.920 --> 11:28.060]  ноде что мы в нем храним ну допустим там что что можно ну вот ну можно ладно там для
[11:28.060 --> 11:36.660]  простоты допустим какой-нибудь вектор давайте хранить вектор int допустим так как мы будем как
[11:36.660 --> 11:53.960]  называть ключи да так и так и будем называть главное капсум не писать а так так а действительно
[11:53.960 --> 12:05.780]  зачем и писать ну как сказать нет ну как вам сказать нет template наверное помешает просто
[12:05.780 --> 12:12.420]  потому что как бы то есть он не понадобится в самой ноде но он потребуется при реализации всего
[12:12.420 --> 12:17.820]  остального в прочем тем более шалат не нужно относиться к этому как к идеальному коду особенно
[12:17.820 --> 12:22.380]  потому что в силу того что мы собираемся писать дальше а что мы собираемся писать дальше
[12:22.380 --> 12:43.880]  ну вот то есть дальше заметим что у нас должен быть мистически мистическая речь то по которому
[12:43.880 --> 12:51.480]  мы должны писать указатель то есть по которому мы должны скачивать детей вот причем это необычный
[12:51.480 --> 13:01.360]  указатель это какая-то мистика как да да это не но звездочка а какой-то да
[13:01.360 --> 13:23.360]  сам почему сам да но лучше не на солнце не надо на так но лучше да давайте какой-нибудь
[13:23.360 --> 13:41.000]  но дайди что ли вот так что вот ну допустим будет вектор а вот но дайде это не что вместо
[13:41.000 --> 13:48.400]  указателя то есть это некий объект то есть пока то есть который указывать на вершину где-то там
[13:48.400 --> 13:58.840]  в этом вашем интернете ее можно скачать но того что у нас интерфейс так хорошо мы умеем только
[13:58.840 --> 14:13.800]  там скачивать вершину целиком и кстати загружать вершину целиком тоже вот это в том-то и прикол
[14:13.800 --> 14:18.080]  что обычно нет там обычно оказывается что там скачать скажем один ключик и скачать
[14:18.080 --> 14:23.560]  50 ключиков это оказывается примерно одно и то же но помните мы с диском уже с жестким диском
[14:23.560 --> 14:30.080]  уже сталкивались такой ситуацией что оказывалось что там скажем один элемент и скачать и несколько
[14:30.080 --> 14:41.560]  там подряд приличного размера для нас прям было одно и то же буквально ну да нет ну да типа того
[14:41.560 --> 14:49.400]  да то есть да нет конечно нет речь не будет идти а т равно 10 пятый боже упаси конечно нет но там
[14:49.400 --> 15:00.080]  ты обычно там упинается константа типа 50 там 50 там может сотчика там не настолько то есть 10
[15:00.080 --> 15:04.200]  пятая конечно классно да потому что в лимпиадах ограничениях тогда у нас все бы хранилось в
[15:04.200 --> 15:10.200]  одной вершине да да и замечательно давайте тогда внутри каждой вершины хранить эти элементы в да
[15:10.200 --> 15:17.280]  действительно каком-нибудь сете да вот так вот давайте попробуем значит примерно понять как
[15:17.280 --> 15:26.640]  с этим работать так ну и все что у нас есть конечно это там но надо вот но например что-нибудь типа
[15:26.640 --> 15:43.240]  но ди айди рут вот допустим какой-нибудь рут у нас есть вот и так значит теперь вот давайте
[15:43.240 --> 15:54.680]  выжим функцию серч но вот да действительно можно до лучшее написать конечно до лучше
[15:54.680 --> 16:06.040]  написать и не вызывать чем вызывать но не написать да так но давайте попробуем так
[16:13.240 --> 16:22.200]  для разминочки нет хотя в принципе может быть нет но мы уже себе написали в интерфейсе
[16:22.200 --> 16:31.600]  срочи и пишем срочи вайну хорошо-хорошо файнт ладно так нет тогда это вообще написать
[16:31.600 --> 16:50.720]  экзист во все во чего с английским окей окей хорошо хорошо хорошо да все ладно но почему бы не ну
[16:50.720 --> 16:59.200]  для начала можем хотите экзиста можно было вообще каунт его назвать но ладно так так ну вот так ну
[16:59.200 --> 17:06.400]  давайте еще о вот что еще надо было в шаблон занести то вот а ну да на самом деле да хорошему
[17:06.400 --> 17:15.120]  надо это сюда еще писать да ну тип ключа да хорошему надо еще компара так там сюда написать но
[17:15.120 --> 17:30.720]  это какая тебе разница пробьет люк или не дам она о чем мы хотим ой-ой-ой все да действительно все
[17:30.720 --> 17:47.000]  безобразие ой господи зачем я попросил чтобы не снимали на господи а да действительно ну да
[17:47.000 --> 17:53.520]  надо намек на то на каком языке последние годы живу да но правда я там геометрию пишу они вот это
[17:53.520 --> 18:01.080]  вот ну вот ну ладно до нее мы в следующем семестре тоже доберемся не в следующем
[18:01.080 --> 18:16.880]  встрече вот так вот и так хотим найти ключик значит смотрите значит но допустим давайте
[18:16.880 --> 18:29.960]  вот здесь можно найти прям допустим самое простое но где допустим айти кур так допустим ну равно
[18:29.960 --> 18:46.040]  естественно рут так но но вот но и допустим while там допустим кур точка valid то есть
[18:46.040 --> 18:54.240]  во первых там пока этот кур указывает хоть на какую-то вершину значит что мы говорим там
[18:54.240 --> 19:06.480]  но где так сказать там от бла-бла-бла там допустим но где равно значит там соответственно
[19:06.480 --> 19:26.200]  ну назовем это даун лот но где откуда вот так ну что тут можно сказать так да сразу при
[19:26.200 --> 19:32.600]  ага ой а походу имела бы смысл на самом деле ключики нумеровать нуля да
[19:32.600 --> 19:46.680]  да да да естественно ничего нет ну как бы найти да тут минус единичка тут когда совершенно
[19:46.680 --> 20:00.840]  но да но в данном случае как всегда значит ищем наш ключик как мы его ищем вот ну естественно
[20:00.840 --> 20:16.640]  int пишем int num равно lower bound естественно но лавер баунт от чего но как всегда но где точка
[20:16.640 --> 20:33.160]  кейс точкой меги но где точка кейс точка и и соответственно что там еще ну собственно кейда вот
[20:33.160 --> 20:42.160]  а то мало ли то вдруг вы там побежите фориком это писать там каким-то непонятно нет ну скажем
[20:42.160 --> 20:52.760]  так мы предполагаем ваши знания на входе не настолько нулевые но да да да шесть ацектированный
[20:52.760 --> 21:01.200]  массив то существует вот такая магическая функция да вас экзамен по эстреле уже был вот так вот так
[21:01.200 --> 21:12.360]  ну и минус соответственно понятно но где точка кейс точка беги вот так но что здесь можно
[21:12.360 --> 21:21.480]  сказать но во первых скажем что если оказывается что значит дум там меньше соответственно этого
[21:21.480 --> 21:34.920]  сайза там да ой но где точка кейс точка сайз там энд энд там соответственно там нодя точка кейс
[21:34.920 --> 21:50.720]  нумовая прям равно нашему ключу то выбросится с криком тру вот в противном случае что мы
[21:50.720 --> 22:06.320]  делаем в противном случае так и пишем кур равно нодя точка чилдер а ну и в общем-то все но остается
[22:06.320 --> 22:17.560]  там сам в конце вайла остается только выбросится с криком фолс и и на этом все вот так ну вот
[22:17.560 --> 22:24.200]  примерно так экзис может выглядеть обратить внимание приятность данного экзиса заключается
[22:24.200 --> 22:32.040]  в том что мы с вами в каждый момент времени храним не более чем один вершина да вот у кого-то мог
[22:32.040 --> 22:38.280]  быть соблазн здесь на самом деле вызвать вызваться рекурсивно но б-дерево это не та структура данных
[22:38.280 --> 22:45.840]  в которой надо вызваться рекурсивно но вот потому что соответственно портирую если у вас была бы
[22:45.840 --> 22:52.240]  тут рекурсия глубины логарифом то вы бы хранили логарифом вершин а этого нам не нужно вот ну
[22:52.240 --> 22:56.600]  в общем-то не случайно рекомендует что при прочих равных рекурсию лучше избегать вот ровно
[22:56.600 --> 23:08.240]  соответственно ровно по причине там хранение кучи всего лишнего вот например так что так
[23:08.240 --> 23:13.000]  выглядит экзис так есть ли тут какие-то вопросы
[23:19.560 --> 23:20.720]  да нет наверное
[23:20.720 --> 23:24.320]  окей
[23:24.320 --> 23:38.080]  так хорошо да нет наверное так ну хорошо ладно это был такой
[23:39.040 --> 23:43.320]  но здесь я просто честно думаю дальше может год даже писать не будем просто здесь хотелось
[23:43.320 --> 23:48.560]  просто показать чем мы вообще работаем как-то вообще примерно выглядит потому что в инсерта
[23:48.560 --> 23:54.480]  хабиритах конечно же хранение одной вершины в один момент времени мы конечно не обойдемся
[23:54.480 --> 24:04.240]  вот чем же мы обойдемся так ладно давайте ну в первую очередь давайте это сотрем я думаю это
[24:04.240 --> 24:14.680]  нам уже не нужно вот значит вот давайте-ка с вами думать как же нам сделать например инсерт это
[24:14.680 --> 24:20.040]  такая задача медиум у нас как всегда как у нас как как часто бывало на старых добрых топ кодерах
[24:20.040 --> 24:26.440]  есть задача easy задача медиум задача хард да потом пришел кут форсис где задача стала 5 ну вот
[24:26.440 --> 24:33.400]  и соответственно ну и такое бывает
[24:33.400 --> 24:43.680]  еще у меня три из трех падала правда не на код форсис но да а на топ кодере ну бывает
[24:43.680 --> 24:56.200]  не не не ну не не не это из мемасов пепетромитричева тесты там есть на самом деле да если
[24:56.200 --> 25:00.440]  петр беда в комнате где сидит петр митричев отключает системные тесты просто все что он не
[25:00.440 --> 25:09.400]  почел он дел руками ставится accept это мы помним да это мы эту классику мы помним вот и так
[25:09.400 --> 25:18.360]  инсерт как же нам ставить в дерево элемент желательно не сильно большое количество вершин
[25:18.360 --> 25:29.640]  загружая так но идея на самом деле очень просто что в идеале конечно идея простая то есть если
[25:29.640 --> 25:35.840]  его нету да ну допустим мы откуда-то знаем что его нету да хотя на самом деле параллельно мы
[25:35.840 --> 25:42.040]  будем проверять то можно просто пройти до листа в котором он есть и торжественно в этот лист его
[25:42.560 --> 25:55.720]  вот вот у нас корень значит мы тут идем там идем идем идем идем идем идем идем идем идем
[25:55.720 --> 26:09.920]  шли шли шли и вот о пришли это лист допустим да ну мы считаем что нет но преимущество в том что
[26:09.920 --> 26:18.880]  пока мы идем вот так мы заодно еще и можем это случайно выяснить ну вот что что есть ли этот
[26:18.880 --> 26:23.000]  ключ если мы где-то его по пути встретили значит мы торжественно сообщают что он уже есть и как бы
[26:23.000 --> 26:27.760]  вставлять не надо ну или там я не знаю можно конечно забабахать там мульти сет но это уже в
[26:27.760 --> 26:33.840]  зависимости от задачи но здесь это как видите не принципиально потому что в идеале в идеале
[26:33.840 --> 26:39.040]  хотелось бы конечно сделать что-то самое простая версия если мы там это простые олимпиадники
[26:39.040 --> 26:44.200]  которым там заморачиваться а скачку не надо то есть мы там мы простые олимпиады там в этих ваших
[26:44.200 --> 26:50.760]  банках не работали там собственно не принципиально там делаем и 5 запросов базе данных или 25 вот
[26:50.760 --> 27:02.240]  вот нет я тоже в банках не работал но мне брат просто рассказывал нет 10 не принципиально потому
[27:02.240 --> 27:20.320]  что 10 константа а вот если не в 10 облагорифом вот это уже тогда да да ну хорошо хорошо ладно
[27:20.320 --> 27:27.080]  ладно да ладно по-разному но все равно тут как бы мышление тут все равно принципиально разное
[27:28.080 --> 27:33.160]  но что тут хочется хочется дойти до листа и сказать так хорошо вот мы его не нашли до листа дошли
[27:33.160 --> 27:39.440]  никого не нашли что делать куда вставлять ну и те казалось бы простая давайте тупо вставим
[27:39.440 --> 27:50.800]  вот в этот список элемент и возрадуемся что нам мешает возрадоваться полной мере какой нет
[27:50.800 --> 27:57.080]  глубина вообще не поменялась ни у кого конфигурация дерева вообще пока не поменялась от того что
[27:57.080 --> 28:04.360]  вы вставили в дерево какой-то там в лист какой-то ключ прям список да то есть конфигурация этих
[28:04.360 --> 28:18.920]  менялась нет постоп так внимание внимание никакого под дерево у нас не появилось например у нас
[28:18.920 --> 28:30.440]  в листе есть просто список ключиков да но да но они все пустые да да напоминаю да пойте
[28:30.440 --> 28:37.000]  фишка б дерево да что как бы либо все дети пустые либо все дети не пустые это вот это очень удобно
[28:37.000 --> 28:43.480]  то есть знаете когда у вас 57 детей не надо думать что у вас там 25 и пустой 27 нет там соответственно
[28:43.480 --> 28:50.840]  вот то есть все просто как бы все все вот все одинаковые то есть каждый отвечает за свой диапазон
[28:50.840 --> 28:58.720]  ключей но как бы идейно все одинаковые вот поэтому в данном случае для нас в общем не сильно большая
[28:58.720 --> 29:03.240]  проблема казалось бы просто если у нас есть список ключиков ну что вставляем куда-то в список до
[29:03.240 --> 29:11.120]  количества детей величества 1 все равно все они пустые какая разница поэтому мешает нам немножко
[29:11.120 --> 29:19.600]  другая вещь только вот так пока никто не сказал да как бы мешает нам то что количество ключей
[29:19.600 --> 29:27.440]  могло стать неожиданно больше чем 2t-1 да если нам повезло их меньше чем 2t-1 то мы в этом
[29:27.440 --> 29:31.920]  месте заканчиваем работу то есть дерево вообще не поменялось структурно там поменялось только
[29:31.920 --> 29:39.800]  тут что какие-то ключи да но отберите да да да совершенно верно что делать если у нас тут
[29:39.800 --> 29:49.440]  стало количество вершин 2t но идея крайне простая значит раз у нас тут образовалось 2t детей так
[29:49.440 --> 30:00.440]  давайте сделаем неожиданную вещь мы выберем медиану среди этих ключиков и вынесем ее в родителя
[30:00.440 --> 30:08.760]  то есть операция будет выглядеть так давайте даже отдельно нарисуем вот желала была допустим
[30:08.760 --> 30:17.880]  у нас вершинка и вот у нее где-то вот здесь был ребенок и у ребенка неожиданно стало
[30:17.880 --> 30:31.760]  2t детей тогда мы делаем следующее так смотрите что мы будем делать значит мы будем говорить что
[30:31.760 --> 30:37.760]  тут t-1 допустим тут видимо t и вот есть этот мистический ключик мы его назовем
[30:37.760 --> 30:47.600]  вот мы его назовем ключик обведенный в красный кружочек вот и сделаем мы
[30:47.600 --> 30:54.040]  теперь следующую мистическую штуку значит в этой вот корневой вершине у нас вот сокрых
[30:54.040 --> 31:00.760]  раз два три четыре пять шесть семь раз два три четыре пять шесть семь раз два и появляется
[31:00.760 --> 31:10.280]  торжественно вот этот ключик обведенный в красный кружочек и вместо одного ребенка здесь
[31:10.280 --> 31:17.280]  появляется два вот так что мы как всегда как говорится мы снова экспериментируем в области
[31:17.280 --> 31:28.280]  воспитания на этот раз мы распиливаем ребенка на две половинки вот да ну собственно о чем мы
[31:28.280 --> 31:34.920]  только не делаем нашу делать нашу такой в прошлый раз помнится это кладбище смёрзвали
[31:34.920 --> 31:45.040]  да и чем мы там прошлом году занимались так вы в прошлом году дитей а у нас там кучи были
[31:45.040 --> 31:59.040]  мы там тоже могли дитей резать да все нормально да господи да но я то ведь оно в этот день у
[31:59.040 --> 32:05.480]  нас двойственные деревья поиска теперь тут это как бы мы у нас как бы это мы сейчас будем это не
[32:05.480 --> 32:12.000]  только пилить детей но это переворачивать деревья еще мы будем всякие но можно может даже сегодня
[32:12.960 --> 32:28.440]  но не совсем ставку-то в этот массив-то вы все равно будете за там вот и делать так
[32:28.440 --> 32:34.960]  что скорее т h получается а есть да это был бы кайф если бы это был один только маленькая
[32:34.960 --> 32:48.520]  проблема после этой операции когда мы это сделали но скажем так но я так скорее всего
[32:48.520 --> 32:56.000]  наверное да можно показать скорее всего можно показать что если вы там делаете n подряд вставок
[32:56.000 --> 33:03.400]  то они суммарно наверное сделаются за там вот это да хотя не факт потому что мы на каждом шаг
[33:03.400 --> 33:11.680]  потому что мы на каждом шаге все равно делаем загрузку и делаем поиск поэтому так что с этой
[33:11.680 --> 33:18.840]  точки зрения тут лучше да ты аж не считать вот но заметим да что просто так на этом мы остановиться
[33:18.840 --> 33:25.920]  не можем потому что может так случиться может так случиться шуме эту вершину будем прообразывать
[33:25.920 --> 33:35.040]  куда-то вверх правда так но нет как бы идеи на олимпиадном в общем-то как бы в принципе никто
[33:35.040 --> 33:41.000]  нам не мешает все это прообразывать прообразывать до тех пор пока надо и в худшем случае может
[33:41.000 --> 33:47.760]  произойти только то что мы дойдем прям аж до до корня и выяснится что аж до в корне уже 2t
[33:47.760 --> 33:57.680]  элементов что тогда произойдет да именно тогда мы сделаем новый корень и соответственно и двух
[33:57.680 --> 34:06.760]  ему детей вот обратите внимание ровно в этой ситуации глубина дерева вообще меняется но
[34:06.760 --> 34:11.880]  обратите внимание что конечно ничего страшного не происходит но в том плане что как бы все под
[34:11.880 --> 34:19.400]  деревья все равно остаются одинаковыми вот но как видим глубина меняться можно это нормально да
[34:19.400 --> 34:24.080]  потому что понятно что если вы там было у вас пустое дерево глубину 0 вы добавили туда миллион
[34:24.080 --> 34:31.160]  элементов наверное каким-то образом глубина должна была стать чем-то адекватным вот но такая
[34:31.160 --> 34:38.280]  реализация нас не очень устроит то есть как бы с точки зрения там там олимпиад может она свою
[34:38.760 --> 34:46.480]  точке зрением скачивания вершин давайте думать сколько вершин нам придется скачать на самом
[34:46.480 --> 34:55.140]  деле получается нам придется качать два 2 умножить на глубину вершина правда потому что нам придется
[34:55.140 --> 35:01.880]  сверху вниз пройти потом еще снизу верхови а еще напищом еще еще доп проблема такая что нам придется
[35:01.880 --> 35:07.380]  для каждой вершины снизу еще и предка качать у нас стати в интерфейсе мы родителя кстати
[35:07.380 --> 35:19.580]  не прописывали да но родителей все равно очень бы не хотелось хранить вот
[35:19.580 --> 35:23.520]  по какой причине обратить внимание что дело в том что если у вас родитель
[35:23.520 --> 35:29.460]  поменялся вот вот такого рода да то придется у всех внуков видимо поменять
[35:30.060 --> 35:43.660]  храним стыда только да ваша то есть мы храним не логарифом вершин по которым
[35:43.660 --> 35:50.100]  спускались логарифом айдишки кав а да окей хорошо выкрутились
[35:50.100 --> 36:06.340]  ну как я уже сказал но я сказал ну плюс минус да вот ну как всегда знаете это
[36:06.340 --> 36:09.540]  знаете классические задачи у вас там были в седьмом классе такие задачи что там
[36:09.540 --> 36:17.940]  это там как бы на вход подаются 10 чисел там вам нужны там что-то типа сейчас как
[36:18.100 --> 36:29.140]  нет нужно вывести к сумму при этом разрешается использовать не более трех переменных но были
[36:29.140 --> 36:34.580]  у вас такие задачи седьмом классе где-нибудь такие знаете упражнения на сэкл-4 такое
[36:34.580 --> 36:51.880]  классическая что сложная задача не ну а сколько ну считай н а ну да потому
[36:51.880 --> 36:56.820]  не надо считать потому что у нас 10 чисел нам это это знаете поэтому поэтому храним x
[36:56.820 --> 37:01.260]  который мы считаем храним анс в котором храним ответ и заводим переменную и как
[37:01.260 --> 37:14.620]  индекс цикла все неприятного да нет нет нет нет третьего нет прийдите до итерации
[37:14.620 --> 37:22.340]  цикла в чем-то хранить придется там фор и от одного до 10 те придется ну хорошо там
[37:22.340 --> 37:28.500]  10 заменяется на там действительно за 200 там заменяется на 500 вы пишете на турбо
[37:28.500 --> 37:36.420]  паскаля там сильно большой код не сработает да ладно вот но здесь фишка в другом да здесь
[37:36.420 --> 37:41.820]  конечно то есть в принципе да то есть мы до два логарифма считывание сделали но возникает
[37:41.820 --> 37:49.860]  вопрос они взяли все-таки количество считываний по оптимизировать вот я утверждаю что очень
[37:49.860 --> 37:57.620]  хочется сделать так чтобы значит чтобы вершины по камере считывали не более чем логарифм раз
[37:57.620 --> 38:03.460]  ну загружали естественно как получится
[38:03.460 --> 38:19.500]  но почему да он лото плод какая разница что такое считывать ну считывать это вот да он
[38:19.500 --> 38:33.660]  вот загрузить вершину откуда-то ну как бы да ну загрузить но да он лодчо
[38:33.660 --> 38:45.420]  что ну мы как бы сейчас получать две глубины туда обратно хочется обойтись только так
[38:46.020 --> 39:01.020]  ну как бы да ну загрузить себе вершину да ну вот а вот хочется этого избегать нет пока два нет
[39:01.020 --> 39:05.900]  почему но а нету я имею в виду только только скачивание потому что да понятно что там все
[39:05.900 --> 39:13.500]  эти вершины там придется потом загружать еще и в новом виде понятно да но но вот вот чего
[39:15.420 --> 39:25.860]  но наоборот сервера локально но в плане мы данного это сервера нас а плот с нас на
[39:25.860 --> 39:37.340]  сервер да а загрузить то куда в какую сторону ну к нам ну не загрузить скачать
[39:37.340 --> 39:52.460]  что ну так не понял вопроса а плоте так и называю а ну а план вот но вот от плотну
[39:52.460 --> 39:58.700]  там собственно там положить в память там отправить отправить на сервер то самое
[39:58.700 --> 40:21.740]  ну потому что это могут быть высокочастотные запросы вот я вот не случайно вот вспомнил опыт
[40:21.740 --> 40:24.940]  работы братов сбербанки вот у них там действительно было принципиально в каком
[40:24.940 --> 40:29.380]  момент чтобы там в базе данных обращение было прям вот как можно меньше там 5 или 25 им там
[40:29.380 --> 40:34.420]  было дожути принципиально то есть как бы то есть как бы каждая операция до что вы там работать
[40:34.420 --> 40:40.460]  желательно максимально быстро вот поэтому даже если глубина оказалась бы небольшая то как бы
[40:40.460 --> 40:45.820]  тем не менее все равно там будет ли у вас операция работать за там 300 миллисекунд или за там 10
[40:45.820 --> 40:54.460]  миллисекунд это про вот дожути принципиально вот ну вот и хочется конечно звать от скачек конечно
[40:54.460 --> 41:02.300]  от лишних скачек конечно избавляться вот как бы сделать так чтобы не скачивать вершины
[41:02.300 --> 41:11.660]  на обратном пути ну когда ну как бы когда идем нам нужна новая вершина мы ее скачиваем
[41:11.660 --> 41:17.900]  финин слово скачиваем тоже вызывает коллизию вот вот давайте так и скачиваем да
[41:17.900 --> 41:27.380]  получается делаем как-то в любой операции нет да ну да без этого никак безусловно
[41:27.380 --> 41:39.140]  нет но мы ее скорее закачать нет мы ее будем закачивать они это там и обыкда
[41:39.140 --> 41:51.860]  ну да непонятно вот спрашивает так ну а давайте так без тюрьмы если отместить
[41:51.860 --> 41:58.540]  терминологически там там собственно вопрос это там суть остается как лишний раз эту вершину не
[41:58.540 --> 42:20.860]  считывать что у нас есть вершинка в которой строго меньше чем 2t-1 то понятно что выше уже
[42:20.860 --> 42:41.340]  так верно а если в ней 2t-1 что делать вот можно но вот нет вот фишка в том что добыть если мы
[42:41.340 --> 42:45.340]  допустим даже знаем что элемента у нас нет может быть такая проблема что если мы просто придем
[42:45.340 --> 42:50.540]  вершины у нее 2t-1 ключей то может оказаться неприятная ситуация чтобы всех ее всех всех
[42:50.540 --> 43:14.060]  ее потомков по 2t-1 детей но это да но это да да но
[43:15.340 --> 43:19.420]  да но заранее да но заранее это сложно поэтому классическая версия действительно здесь
[43:19.420 --> 43:24.620]  предлагает следующее то есть давайте просто хранить этот вариант что мы добавляем вершину
[43:24.620 --> 43:35.740]  в под дерево у корня которого заведомо меньше чем 2t-1 детей то есть мы не будем про то есть мы
[43:35.740 --> 43:42.220]  будем прям превратим это себе в три в вариант мы будем работать только с вершиной у которой
[43:42.220 --> 43:51.820]  меньше чем 2t-1 ключей то есть что нам это да но во первых да но начало с того что если нам
[43:51.820 --> 43:59.140]  не повезло и в корне 2t-1 детей то в общем-то то тогда глубина дерева так жестко в этом месте
[43:59.140 --> 44:07.100]  меняется да то есть смотрите обратите внимание почему тут именно t-1 и 2t-1 то есть классическим
[44:07.100 --> 44:14.420]  распилом на самом деле является именно когда ключиков 2t-1 и в этот момент можно распилить на
[44:14.420 --> 44:20.700]  две вершины равно как и наоборот если у вас есть две соседние вершины по t-1 ключиков то в
[44:20.700 --> 44:25.900]  принципе можно как бы один из ключиков сверху в общем-то спустить в этом месте но если там
[44:25.900 --> 44:32.900]  конечно достаточно много ключей но проделит мы сейчас будем еще отдельно разговаривать вот
[44:33.300 --> 44:41.620]  вот то есть на самом деле вот классическим распилом скорее вот это является вот и тогда
[44:41.620 --> 44:47.060]  идея такая то есть давайте мы просто идем идем идем и в каждый момент времени у нас но после
[44:47.060 --> 44:51.300]  того как мы с корнем разобрались мы говорим так мы находимся в вершине и у нее строго меньше
[44:51.300 --> 44:57.660]  чем 2t-1 ключей ну для чего мы это делаем это для того чтобы мы из ребенка в эту вершину ключик
[44:58.260 --> 45:03.540]  то есть мы понимаем в какой ребенок в какого ребенка нам надо идти и что так если у этого
[45:03.540 --> 45:10.700]  ребенка 2t-1 ключей значит мы его распиливаем значит у родителя ключиков становится на 1 больше
[45:10.700 --> 45:17.220]  мы прям добились того что мы можем так сделать вот но при этом значит после того как мы это
[45:17.220 --> 45:25.660]  сделали мы переходим в ребенку которого заведомо там t-1 ключик но нам уже плевать потому что мы
[45:25.660 --> 45:31.540]  теперь работаем не с родителем а там с одним из этих двух ребенков ну или там если тут было
[45:31.540 --> 45:37.780]  в принципе 2t-1 значит этого ребенка идет то что приятно то есть приятно тем что мы действительно
[45:37.780 --> 45:43.700]  идем прям идем вниз вниз вниз вверх мы уже больше не ходим и в конце концов мы приходим в лист у
[45:43.700 --> 45:50.500]  которого меньше чем 2t-1 ключей и это означает что в этого листа просто надо этот ключик вставить
[45:50.500 --> 45:57.900]  и работу завершить ну или там я не знаю например можно при спец на самом деле с
[45:57.900 --> 46:04.580]  этим эффектом тоже если мы там попутно ключик нашли то в общем-то давайте выбросимся вот так
[46:04.580 --> 46:09.580]  ничего страшного в общем-то конечно тут то есть конечно получится что экзис поменял дерево но
[46:09.580 --> 46:18.620]  ничего страшного вот так же разные реализации могут быть но почему тут надо копать чтобы
[46:18.620 --> 46:22.420]  деревья кстати вот кстати в тех самых базах данных кстати бы деревья очень любят на самом
[46:22.420 --> 46:34.180]  деле что да нет а ну да ну корень придется отдельно за и файт потому что начинаем с того
[46:34.180 --> 46:40.020]  что проверяем если в корне 2 т-1 детей то как бы его распиливаем и файт придется отдельно по
[46:40.020 --> 46:47.380]  той простой причине что как бы в этом месте меняется собственно корень и мы не можем как бы
[46:47.420 --> 46:54.300]  предков ставить да тот и оно тот и оно то есть придется это вот то есть придется этого предка
[46:54.300 --> 47:00.740]  создать да как говорится было у нас корень и было у нас там это называется 7 там верховных
[47:00.740 --> 47:13.060]  министров но один стал немножко ровнее да ну так ну я не боюсь там и файт все равно придется там
[47:13.060 --> 47:18.220]  если это вершина фиктивная совершенно нефективная так что проблемы лишний вайфа не на самом деле
[47:18.220 --> 47:26.300]  не решит то есть да то есть придется тут немножко это там пострадать чуть-чуть а а элементарно
[47:26.300 --> 47:33.100]  когда мы пришли в лист мы обнаружили что там меньше чем 2 т-1 детей то есть все что вам надо
[47:33.100 --> 47:38.820]  это пола значит вставить список этот ключик и собственно загрузить вершину то есть отправить
[47:38.820 --> 47:49.220]  вершину домой по тому же адресу нет почему нет измениться как раз могут тут очень много кто на
[47:49.220 --> 47:53.020]  самом деле то есть они там все попутно могут измениться потому что во всех там произошло
[47:53.020 --> 47:58.540]  вот это пропихивание но просто фишка в том что как бы допустим вот эта вершина изменилась но
[47:58.540 --> 48:04.500]  окей мы там значит распилили там допустим эту вершину на 2 там увеличили ключик там и отправили
[48:04.500 --> 48:09.100]  там и в эту вершину там отправили собственно на сервер что тут оказывается ключиков теперь
[48:09.100 --> 48:20.100]  чуть больше вместо вот этого ребенка есть вот эти два ребенка ну как повезет в худшем случае
[48:20.100 --> 48:27.580]  поменяется все потому что если вы там в переполненное дерево запихивает но как что такой суммарно
[48:28.580 --> 48:41.500]  только инсерты туда суммарно это будет не много раз но как повезет что есть еще и рейсы а
[48:41.500 --> 48:48.140]  то может но вот то есть может и там сейчас добавить в переполнен а потом сразу дарил потом
[48:48.140 --> 48:57.860]  ну как всегда но там как всегда по модулю того что там там миллион инсертов с нуля
[48:57.860 --> 49:04.700]  наверное будут работать там за там завинью наверное да скорее да но может и нет но
[49:04.700 --> 49:17.620]  но по сути да но тут дальше как повезет потому что тут как бы тут классический симпатический
[49:17.620 --> 49:32.700]  анализ тут уже не совсем так работает но нет мы говорим так в каждой вершине с которой мы
[49:32.700 --> 49:39.820]  работаем и прям требуем что в ней было меньше чем 2 т-1 ключей поддержим это так думаем куда
[49:39.820 --> 49:46.100]  идти в какого ребенка так берем этого ребенка если выясняется что у него 2 т-1 ключей то значит
[49:46.420 --> 49:52.580]  мы делаем вот такой распил и там переходим в нужного ребенка вот этот
[49:52.580 --> 50:01.980]  а почему там должно что-то сломаться по глубинам
[50:01.980 --> 50:14.900]  нет а ну сейчас сейчас ну чего не но да то есть мы как бы вы мы выносим ключик как бы вот
[50:15.460 --> 50:21.740]  при этом но то при этом нет а где глубины поменялись вообще у под деревьев вот этих
[50:21.740 --> 50:26.100]  того у всех вот этих поддельев на самом деле деревья не поменялись глубины не поменялись
[50:26.100 --> 50:42.140]  что поменялось-то вообще но вот а ну ну ну допустим вот тут какие-то дети вот так вот выглядели
[50:44.900 --> 50:51.900]  Ну мы могли, но нам уже по барабану, потому что мы идем в ребенка.
[50:51.900 --> 51:02.900]  Так, ну допустим.
[51:02.900 --> 51:04.900]  Все, что мы заявляли, все еще работаем.
[51:32.900 --> 51:52.900]  Ну порядок естественно сохраняется, вот все.
[51:52.900 --> 52:02.900]  Ну то есть да, мы посмотрим там, в зависимости от того, наш ключик как бы меньше или больше этого, мы спустимся либо в этого ребенка, либо в этого.
[52:02.900 --> 52:18.900]  Нет, это неважно. Ну просто да. Так, ну важный момент конечно заключается в том, что если тут ребенка было, если вот в этом ребенка было меньше, чем 2t-1t, то мы естественно этого не делаем.
[52:19.900 --> 52:21.900]  И просто спускаемся в этого ребенка.
[52:21.900 --> 52:27.900]  А здесь как бы да, мы переходим в ребенка, ну там допустим этого, ну или стоит он логично и повторяем операцию.
[52:27.900 --> 52:32.900]  То есть тут тоже выясняем в какого ребенка еще здесь надо спускаться, тоже там подымаем вершину если надо, ну и все.
[52:35.900 --> 52:37.900]  Так что видим, все очень просто.
[52:38.900 --> 52:41.900]  Вот. Ну как очень, да.
[52:42.900 --> 52:43.900]  Вот.
[52:44.900 --> 52:49.900]  То есть как бы да, вот такой вот аккуратненький проходик тут принято делать.
[52:49.900 --> 52:54.900]  По сути глубина дерева меняется только в высоту самого корня.
[52:54.900 --> 52:55.900]  Да.
[52:56.900 --> 52:58.900]  Да, да, да.
[52:59.900 --> 53:09.900]  То есть да, дайте как в красно-черном дереве, кстати тоже такой эффект есть, потому что там черная глубина меняется только в том случае, если мы там красный корень торжественно перекрашиваем в черный цвет.
[53:10.900 --> 53:11.900]  Вот.
[53:12.900 --> 53:13.900]  Вот.
[53:14.900 --> 53:19.900]  Так что получается такой вот красивый инсерт у нас получился.
[53:26.900 --> 53:30.900]  А у следующего два т-скачивания будет два аж скачиваний?
[53:30.900 --> 53:32.900]  Нет, обратите внимание, нет.
[53:33.900 --> 53:36.900]  Скачиваний у нас теперь стало аж.
[53:36.900 --> 53:41.900]  Потому что мы для каждой вершины с которой работаем скачиваем ровно одного ребенка.
[53:42.900 --> 53:49.900]  Другой вопрос, что эти ребенки, ребенок мог распилиться на два там как бы, как это там загрузка будет выглядеть, это отдельная песня.
[53:49.900 --> 53:51.900]  Точнее, ну загрузка в смысле отправка.
[53:52.900 --> 53:53.900]  Вот.
[53:53.900 --> 54:00.900]  Но скачер теперь аж, вот собственно ровно из-за этого мы тут сейчас и решили наложить в себя такое страдание дополнительное.
[54:00.900 --> 54:02.900]  А загрузок в сети их стало?
[54:03.900 --> 54:05.900]  Ну их, ну как бы.
[54:06.900 --> 54:10.900]  Ну как сказать, загрузок в сети собственно от этого меньше.
[54:10.900 --> 54:12.900]  Но осталось на самом деле примерно столько же.
[54:13.900 --> 54:18.900]  Потому что обратите внимание, при старом подходе мы как бы при вот этом проходе мы только скачивали, но ничего не отправляли.
[54:19.900 --> 54:20.900]  Ну точнее ничего не меняли.
[54:21.900 --> 54:22.900]  Вот.
[54:22.900 --> 54:25.900]  Но зато здесь мы могли идти тут сверху вниз, и там, ну вот.
[54:26.900 --> 54:27.900]  Вот.
[54:27.900 --> 54:37.900]  Но зато здесь мы могли идти тут сверху вниз, и там соответственно отправок вершин могло быть там до, ну сколько там, до 2 аж получается.
[54:39.900 --> 54:42.900]  Потому что каждая вершина вот из этих вот могла распилиться на две.
[54:45.900 --> 54:46.900]  Вот.
[54:46.900 --> 54:48.900]  Ну там что-то там, ну да типа 2 аж получается, да.
[54:52.900 --> 54:53.900]  Вот.
[54:54.900 --> 54:55.900]  Чего?
[54:56.900 --> 54:58.900]  А сейчас их тоже 2 аж.
[55:01.900 --> 55:06.900]  Ну если аккуратно реализовывать, если в тупую, то 3 аж, если прям вот при этом распили, прям их сразу загружать.
[55:08.900 --> 55:10.900]  Но на самом деле нам это не нужно.
[55:10.900 --> 55:14.900]  То есть на самом деле как бы нам нужно загрузить, загружать только то, что мы уже менять не собираемся.
[55:14.900 --> 55:19.900]  Если мы там скажем, хотим пойти в эту вершину, то прямо сейчас ее торопиться загружать не надо.
[55:20.900 --> 55:25.900]  Главное только запомнить ID-шник, по которому ее потом надо, значит надо отправить, но пока ее загружать не надо.
[55:25.900 --> 55:27.900]  И получится те же самые 2 аж.
[55:29.900 --> 55:30.900]  Вот.
[55:30.900 --> 55:31.900]  Чего? Кого?
[55:32.900 --> 55:33.900]  Вот.
[55:34.900 --> 55:35.900]  Не волнуйся.
[55:36.900 --> 55:37.900]  Вот.
[55:42.900 --> 55:43.900]  Вот.
[55:43.900 --> 55:44.900]  Так что вот такая диспозиция.
[55:44.900 --> 55:47.900]  Значит такая вот красивая диспозиция у нас получается.
[55:49.900 --> 55:51.900]  Так, что мы собственно с этим теперь.
[55:52.900 --> 55:53.900]  Ну вот.
[55:53.900 --> 55:54.900]  Но это была как бы задача медиум.
[55:56.900 --> 55:59.900]  И теперь у нас возникает такая классическая задача HARD.
[56:02.900 --> 56:07.900]  Теперь выполнить удаление ключа из этого всего.
[56:10.900 --> 56:11.900]  Чего?
[56:12.900 --> 56:13.900]  Чего?
[56:14.900 --> 56:18.900]  Ещё раз, то есть у нас вот такие 2 аж или аж скачиваем?
[56:20.900 --> 56:24.900]  Ну, которые до нас нашу предку тоже может скачать.
[56:25.900 --> 56:27.900]  Ну, в смысле, мы можем хранить две вершинки.
[56:27.900 --> 56:32.900]  Нет, ну все равно аж мы как бы ска... Походу, нет, скачиваем мы только путь от корня до вот этого листа.
[56:33.900 --> 56:39.900]  То есть да, мы потом распиливаем их, потом перезагружаем, но как бы скачиваем только аж теперь.
[56:41.900 --> 56:43.900]  Прям честный путь от этого вот корня до этого.
[56:44.900 --> 56:49.900]  То есть по сути вот ска... То есть потому что скачиваем мы ровно то же самое, что скачивали бы вот в этом вот экзистер.
[56:53.900 --> 56:55.900]  Собственно, вот ради этого мы это все изобрели вообще.
[57:02.900 --> 57:03.900]  Вот.
[57:05.900 --> 57:07.900]  Всё? Всё? Да? Нет? Наверное?
[57:09.900 --> 57:10.900]  Бл...
[57:12.900 --> 57:13.900]  Вот.
[57:18.900 --> 57:21.900]  Ну вот, значит, что же у нас получается дальше?
[57:25.900 --> 57:29.900]  А что получается дальше? Вот. А теперь, значит, пришло время понять, а как же мы будем удалять?
[57:31.900 --> 57:34.900]  Да, хоть за какую-нибудь константу вообще.
[57:35.900 --> 57:42.900]  Мы также спускаемся, если мы найдем вершину, то мы с одним ребенком, то перебросим сюда из соседнего что-нибудь.
[57:43.900 --> 57:44.900]  Ну вот так.
[58:04.900 --> 58:05.900]  Вот.
[58:08.900 --> 58:09.900]  Вот. И действительно.
[58:10.900 --> 58:11.900]  Ну вот. Но про нот.
[58:20.900 --> 58:25.900]  Ну вот. Ну так-то да, потому что да, вместо сплита можно делать действительно некоторые мерш.
[58:26.900 --> 58:27.900]  Вот давайте внимательно посмотрим, как мы это будем делать.
[58:27.900 --> 58:34.900]  То есть вот, да, вот очень хочется, давайте идем сверху вниз и прям вот храним красивый инвариант,
[58:36.900 --> 58:39.900]  что в каждой вершине, в которой мы находимся,
[58:42.900 --> 58:52.900]  ну, скажем так, скажем так, больше либо равно t, ну или для корня больше либо равно, ну ладно, для корня не заморачиваемся особо.
[58:53.900 --> 58:56.900]  Да, больше, ну там, с корнем мы там отдельно, допустим, разберемся, да?
[58:57.900 --> 58:58.900]  Ну корень у нас вообще никаких проблем нет.
[58:59.900 --> 59:01.900]  Ну, хочется вот больше либо равно t, нет, ну почему?
[59:02.900 --> 59:04.900]  Ну, корень, если он станет пустой, ну, не надо его.
[59:05.900 --> 59:06.900]  Не, ну, не совсем.
[59:07.900 --> 59:09.900]  Корень, если корень пустой, то надо тут как-то смержить, к сожалению,
[59:10.900 --> 59:13.900]  потому что тут же количество, дети еще вот такие есть, с ними надо что-то сделать.
[59:14.900 --> 59:17.900]  Поэтому просто так взять и удалить корень мы не можем.
[59:18.900 --> 59:20.900]  Если корень пустой, у него один ребенок, поэтому...
[59:20.900 --> 59:22.900]  Нет, он был, у него было два.
[59:23.900 --> 59:26.900]  Нет, если корень пустой, то такого корня не было, мы его уже удалили сами.
[59:27.900 --> 59:30.900]  Так, если у корня всего один ребенок, зачем нам такой корень?
[59:31.900 --> 59:32.900]  Давайте лучше этого ребенка корнем и сделаем.
[59:33.900 --> 59:41.900]  Ну вот, а то знаете, как оно вот, а то какой-то, а то какой-то эффективный сотрудник получается, который непонятно зачем нужен.
[59:42.900 --> 59:47.900]  Все знаете, там это, сейчас как этот фильм назывался, офисный планктон, видели такой?
[59:47.900 --> 59:48.900]  Нет? Нет? Нет.
[59:49.900 --> 59:50.900]  Нет, нет. Там просто описывалось.
[59:51.900 --> 59:54.900]  Там как бы... Ну, потому что человек очень боялся там любого аудито.
[59:55.900 --> 59:57.900]  Почему боялся? Потому что пришли там аудиторы, стали спрашивать там, чем вы занимаетесь.
[59:58.900 --> 01:00:03.900]  Там он там что-то описывает, что там очень важно, там издулзри, бэбэбэбэ, там поэтому проявляют, проявят, принять заказы.
[01:00:04.900 --> 01:00:07.900]  Так, подождите, вы понимаете заказы? Нет, заказы принимает моя секретарша.
[01:00:08.900 --> 01:00:11.900]  Ну вот, а вы их передаете собственно там начальству?
[01:00:12.900 --> 01:00:15.900]  Нет, там эта секретарша перейдет еще одному сотруднику, а он уже идет в начальство.
[01:00:15.900 --> 01:00:22.860]  а вы чем занимаетесь вот он ну понемногу я вам объясняю в индустрии очень важно там ну и
[01:00:22.860 --> 01:00:27.300]  так далее там какая-то такая интеллектуаль потом говорит что мы все удивились как он работает
[01:00:27.300 --> 01:00:31.300]  потом покопались и обнаружили что он был уволен еще три года назад но вследствие ошибки в
[01:00:31.300 --> 01:00:42.140]  программе бухгалтерии он еще получает зарплату оказывается ну нет ну ну может и один вес но
[01:00:42.140 --> 01:00:49.060]  только фильм американский если что так что но может и один вес но чем короче офисный план то
[01:00:49.060 --> 01:01:02.740]  лучше посмотреть целиком там нет нет нет нет там вот вот так вот как-то было написано ладно ну
[01:01:02.740 --> 01:01:08.060]  пересмотрите потом запись да прежде что и стоит пересматривать естественно вот ради этого она
[01:01:08.060 --> 01:01:16.540]  вот значит смотреть и так хочется в идеале действительно неплохо было бы конечно вот давайте
[01:01:16.540 --> 01:01:22.500]  нот неплохо было бы так и следить но правда тут еще оставляем подлянка сразу с полю заключается в
[01:01:22.500 --> 01:01:26.740]  том что если мы вставку могли говорить что мы хотим вставлять прям только в листы никуда кроме
[01:01:26.740 --> 01:01:34.700]  а да то к сожалению удали элемент который мы хотим удалить может оказаться абсолютно где угодно
[01:01:34.700 --> 01:01:48.940]  но философский опрос особенно еще и по центру а нет хотя нет а нам без разницы главное что
[01:01:48.940 --> 01:02:01.700]  да его можно да вершину можно опустить да но поправка просто так опустить не получится то есть
[01:02:01.700 --> 01:02:07.580]  конечно идеальный для нас вариант это конечно когда значит у нас есть это вершинка которую мы
[01:02:07.580 --> 01:02:17.780]  хотим удалить допустим да и у нее есть двое детей и детей потом но а у детей ровно по т-1 тогда их
[01:02:17.780 --> 01:02:47.380]  можно смёрзнуть и возрадоваться так ну хорошо так хорошо ладно
[01:02:47.380 --> 01:02:53.580]  то есть да действительно заметим до что в общем-то задача то есть если мы случайно шли шли шли где-то
[01:02:53.580 --> 01:02:59.020]  в середине дерева нашли ключик который мы хотим удалить то никаких проблем казалось бы с этим нет
[01:02:59.020 --> 01:03:06.140]  то есть легко там допустим свести то есть свести на самом деле задачу к удалению листа просто в
[01:03:06.140 --> 01:03:11.380]  качестве удаляя удаляемого элемента будет там элемент который типа тут самый большой в левом под
[01:03:11.380 --> 01:03:16.700]  дереве ну или самый маленький в правом под дереве то есть нот то есть не проблема
[01:03:16.700 --> 01:03:26.380]  чего но нет но мы и в инсекте вообще одновременно в памяти две вершины хранили да так что тут без
[01:03:26.380 --> 01:03:33.660]  вариантов вот ну хорошо да не сильно большая проблема вот но правда но тем не менее тут
[01:03:33.660 --> 01:03:40.500]  конечно но но как но тем не менее вариант как-то придется соблюдать должен например потому что
[01:03:40.500 --> 01:03:46.380]  заметим что слияние только если тут t-1 тут t-1 если например тут оказалось t-1 а в правом под
[01:03:46.380 --> 01:03:53.540]  дереве больше либо равно t то как бы на самом деле сказать что ладно давайте там пойдем в
[01:03:53.540 --> 01:03:59.460]  левом под дереве удалим самый большой элемент и его там запишем сюда это может нам вызвать
[01:03:59.460 --> 01:04:07.700]  просто фундаментальные проблемы почему потому что заметим что может так случиться что в этом
[01:04:07.700 --> 01:04:15.900]  подделье у всех вершин по t-1 по t-1 ключу и это означает что если вы уменьшите ключ там удалите
[01:04:15.900 --> 01:04:22.340]  хотя бы один из этих ключей то дерево такой же высоты вы тупо не построите просто ключиков мало
[01:04:22.340 --> 01:04:38.740]  ну нет ну да действительно можно пода можно святое действительно поверить что ладно допустим вот
[01:04:38.740 --> 01:04:43.380]  из этого под дерево наверно еще можно каким-то образом выпилить там минимальный ключ хорошо
[01:04:43.380 --> 01:04:51.140]  конкретно локальный вопрос действительно ладно локально решили хорошо то есть в переводе
[01:04:51.140 --> 01:04:55.740]  но вот то есть действительно когда мы хотим удалять то есть мы но вот но правда для того
[01:04:55.740 --> 01:04:59.620]  чтобы так смерживать нам еще придется каким-то образом гарантировать что когда мы сюда пришли
[01:04:59.620 --> 01:05:08.180]  здесь больше либо равно чем-то ключиков мы либо перекидываем из соседнего ребенка в наш ключ
[01:05:08.180 --> 01:05:26.820]  но но да но правда пришло время кажется делать уже единым общим образом неправда нет боже
[01:05:26.820 --> 01:05:34.940]  упаси рекурсивно не надо нет мы пока требуем того же самого варианта то есть мы говоришь мы
[01:05:34.940 --> 01:05:40.620]  требуем варианта того что значит мы удаляем какую-то то есть мы находимся сейчас какой-то
[01:05:40.620 --> 01:05:50.340]  вершине хотим что-то из нее удалить и но в ней больше либо равно чем ты вершина вот
[01:05:50.340 --> 01:06:00.380]  допустим ну как здесь можно сделать можно сейчас для простоты сейчас давайте пока вот
[01:06:00.380 --> 01:06:04.420]  сейчас не будем об этом просто всем думать пока предположим что удаляемая вершина находится
[01:06:04.420 --> 01:06:14.140]  по-любому в листе пока предположим позже мы снимем это предположение а вот вот в этом
[01:06:14.140 --> 01:06:20.100]  то есть собственно суть того что мы сейчас обсуждаем как же мы поддерживаем но начнем
[01:06:20.100 --> 01:06:27.020]  с корня конечно жил был корень в корне больше либо равно чем ты вершин вам никто не обещал
[01:06:27.020 --> 01:06:33.180]  но в корне вам правда достаточно больше либо равно чем два вершин на самом деле но могло
[01:06:33.180 --> 01:06:43.300]  так случиться что в корне вершина один точнее да но в смысле ключик один а детей двое и
[01:06:43.300 --> 01:06:51.060]  мы допустим без ограничений общности хотим спуститься вправо вот прям вот хотим спуститься
[01:06:51.060 --> 01:07:04.220]  вправо так но что делать но как всегда если там уже т или более ключиков то просто идем туда
[01:07:04.220 --> 01:07:17.420]  и не паримся правда а что делать если ключиков там t-1 но тут на самом деле да все варианты уже
[01:07:17.420 --> 01:07:23.260]  предлагали собственно остается их объединить тут у нас остается два случая первый случай если
[01:07:23.260 --> 01:07:31.900]  нам фантастически повезло и у соседа тоже t-1 ключиков то все что нам остается это опустить
[01:07:31.900 --> 01:07:42.020]  собственно этот ключик вот сюда и объявить что у нас теперь есть новый жирный корень вот понятно
[01:07:42.020 --> 01:07:50.900]  да кстати в этом месте корень поменялся и вот и в этом месте у нас высота могла уменьшиться вот
[01:07:50.900 --> 01:08:01.420]  так что у нас еще вот но это если нам повезло но вполне вероятно что нам не повезло
[01:08:01.420 --> 01:08:13.780]  так
[01:08:13.780 --> 01:08:25.260]  а ну по большому счету да только разница будет в том что у нас как бы от того что мы опустим
[01:08:25.260 --> 01:08:39.060]  вершину или там делаем то что я сейчас скажу корень просто не поменяется ну по сути да поэтому
[01:08:39.060 --> 01:08:42.380]  я собственно дай сейчас этот случай отдельно рассматриваешь этот случай когда у нас корень
[01:08:42.380 --> 01:08:51.500]  меняется и так что делайтесь тут t-1 а тут больше либо равно t тогда спустить не получится или
[01:08:51.620 --> 01:09:10.900]  ну вот ну здесь на самом деле можно выполнить по-разному да но в принципе да но на самом
[01:09:10.900 --> 01:09:15.620]  деле тут два способа нас двумя способами можно жить то есть по-любому придется конечно эту
[01:09:15.620 --> 01:09:24.740]  вершину опустить отсюда какую-то поднять вопрос какую ну да самый тупой что можно
[01:09:24.740 --> 01:09:31.660]  делать это выполнить что-то типа левого поворота да то есть сказать что если у нас это вот допустим
[01:09:31.660 --> 01:09:38.380]  это ключик x и вот у нас тут самый правый ключик допустим его будем называть и к штрих и у него
[01:09:38.380 --> 01:09:49.660]  тут висит под дерево допустим альфа да ну и тут какие-то вот какая-то тут борода висит пум-пум-пум то
[01:09:49.660 --> 01:09:57.020]  тогда мы просто делаем простую вещь то есть мы мы теперь объявляем что в этой вершине теперь значит
[01:09:57.020 --> 01:10:04.460]  у нас становится ключиков на один меньше то есть вот та же борода да видите тут борода было из
[01:10:04.460 --> 01:10:14.980]  7 с альфой теперь 6 потому что без альфа вот дерево теперь у нас значит тут и к штрихами объявляется
[01:10:14.980 --> 01:10:24.140]  корнем неожиданно так ну а здесь ключиков становится на один больше пум-пум-пум и вот
[01:10:24.140 --> 01:10:30.100]  тут x и от которого здесь мы вот это вот под дерево альфа и вешаем и тут бары и тут старая борода
[01:10:30.100 --> 01:10:40.180]  вот так вот такая красота у нас получается то есть вот это это у нас получается такой вот
[01:10:40.180 --> 01:10:46.900]  можно сказать такой поворот в б дереве но естественно естественно допустим и симметричная версия если надо
[01:10:46.900 --> 01:10:55.380]  вот и кстати обратите внимание там на самом деле еще один способ на самом деле иногда
[01:10:55.380 --> 01:11:01.140]  пропихивать ключик куда-нибудь пониже даже то есть обратите внимание что там можно иногда
[01:11:01.140 --> 01:11:04.900]  пытаться думать что если мы хотим удалить ключик из середины не хотим ли мы случайно
[01:11:04.900 --> 01:11:10.860]  действительно этот ключик там то есть на самом деле просто вот такими поворотами пропихивать
[01:11:10.860 --> 01:11:18.260]  в лист чтобы потом его оттуда так жестко дали ну да но правда совсем в наглу это будет сложно
[01:11:18.260 --> 01:11:23.620]  потому что как бы заметим что поворот там потребует поворот или мерч нам потребовался если тут было
[01:11:23.620 --> 01:11:35.620]  т-1 вот как интересно когда каждый когда каждый опаздывающий тверк попадает на камеру вот
[01:11:35.620 --> 01:11:47.420]  соответственно вот но не совсем не совсем но поворота нет но заметим что подобного рода поворот
[01:11:47.420 --> 01:11:53.980]  можно применять всегда если тут больше либо равно т а тут меньше чем 2 т-1 но к сожалению оба
[01:11:53.980 --> 01:12:02.140]  этих условия в общем-то обязательными не являются ну почему в этой верши тут нужно чтобы было
[01:12:02.140 --> 01:12:06.500]  меньше чем 2 т-1 потому что как бы у нас тут количество ключей увеличилось на 1
[01:12:06.500 --> 01:12:33.500]  ну я их 3 в корень и перенес вот он нельзя потому что тогда не тогда непонятно было бы куда
[01:12:33.500 --> 01:12:39.860]  девать под дерево альфа ага и тогда и тогда глубина альфа была бы такая же как глубина
[01:12:39.860 --> 01:12:46.900]  вот у этих детей инвариант на тему равности глубин бы нарушился так что увы просто так
[01:12:46.900 --> 01:12:53.500]  повесить между ними альфу нельзя еще мы не хотим думать что у родителя с размером с количеством
[01:12:53.500 --> 01:13:01.100]  ключей не но как сказать но мы садите мы сейчас мы сейчас рассматривали один конкретный случай
[01:13:01.100 --> 01:13:14.100]  когда у нас корень и в нем один ключ да но на самом деле да заметим что в общем-то это
[01:13:14.100 --> 01:13:20.220]  работает когда то есть это работает даже не просто когда у нас то есть да то есть может быть вот
[01:13:20.220 --> 01:13:27.420]  так тут в принципе то есть как бы да тут вот то есть на самом деле если в этом корне на самом
[01:13:27.420 --> 01:13:33.420]  деле больше чем один ребенок то в общем-то работали бы абсолютно так же разница была бы только в
[01:13:33.420 --> 01:13:45.260]  том что если нам довелось опустить этот x вниз и сделать мертв что корень бы не поменялся да более
[01:13:45.260 --> 01:13:52.540]  того да совершенно верно да но но да но заметим но но более того что на самом деле ровно такую же
[01:13:52.540 --> 01:13:59.620]  операцию мы будем пытаться проделывать и везде и во всех случаях не только когда это вершина корень
[01:13:59.620 --> 01:14:06.660]  но обратите внимание зачем нам требовать что как бы в этой вершине даже если она там есть она не
[01:14:06.660 --> 01:14:14.820]  корень то тут больше либо равно чем t ключей это нам принципиально важное требование почему потому
[01:14:14.820 --> 01:14:21.940]  что мы не знаем может нам придется просто эту штуку опустить и все поэтому вот больше либо равно
[01:14:21.940 --> 01:14:33.460]  t нам придется жестко поддерживать потому что может так случиться что нам как бы какой-то ключик
[01:14:33.460 --> 01:14:37.900]  очередной придется опустить потому что мы вот хотим там пойти в одного из его соседей их тут
[01:14:37.900 --> 01:14:44.460]  вот а тут t-1 ключиков и тут t-1 ключиков тогда его придется тупо опустить без какой-то компенсации
[01:14:44.460 --> 01:15:00.660]  для родителя вот так что можно соответственно это и опускать вот так что вот такая вот у нас
[01:15:00.660 --> 01:15:09.980]  красота получается вот но правда теперь остается только вот собрать это все в кучку то есть хорошо
[01:15:09.980 --> 01:15:15.860]  мы можем теперь запустить search и искать этот элемент только теперь искать этот элемент и
[01:15:15.860 --> 01:15:20.460]  попутно делать и причем попутно еще делать так что каждый раз когда мы приходим вершину в ней уже
[01:15:20.460 --> 01:15:43.900]  больше либо равно чем t ключей они как потому что если у обоих детей 2t-1 это означает что мы как
[01:15:43.900 --> 01:15:49.100]  бы хотели пойти в одного из них обнаружили что их там 2t-1 что больше чем t-1 и просто туда пошли
[01:15:49.100 --> 01:16:01.220]  так что отдельно этого случая у нас нет да но у нас конечно да да единственное конечно если только
[01:16:01.220 --> 01:16:08.260]  мы не упомянули это вот интеллектуальную мечту что нет почему мои родители опускать принципе у
[01:16:08.260 --> 01:16:18.500]  нас не было задачи опустить родителя нет а точнее так специально такой цели нет мы
[01:16:18.500 --> 01:16:29.780]  опускаем родителей только если это обусловлено какой-то необходимостью да нет мы эти действия
[01:16:29.780 --> 01:16:35.860]  проводили для того чтобы в ребенке куда мы хотим пойти было не минимальное количество вершин
[01:16:36.260 --> 01:16:42.460]  не минимальный число ключей то есть как бы мы это делали только вот если мы хотели пойти в ребенка
[01:16:42.460 --> 01:16:47.820]  а в нем t-1 ключ если там больше чем t-1 ключ мы вообще ничего не делаем тупо туда идем
[01:16:47.820 --> 01:17:04.140]  да совершенно верно вот то есть на самом деле там проблема возникает но вот то есть проблема
[01:17:04.140 --> 01:17:08.820]  только возникает если напоминаю мы где-то в середине то есть жила бы у нас вот середина
[01:17:08.820 --> 01:17:20.060]  и тут обнаружился ключик который мы реально хотим удалить то есть если вот нашли этот
[01:17:20.060 --> 01:17:26.420]  элемент но вот именно его мы хотим удалить но как бы тут дальше просто можно и в эту сторону думать
[01:17:26.420 --> 01:17:30.860]  но это будет не очень оптимально если вы будете думать сторону а как бы нам эту вершину опустить
[01:17:30.860 --> 01:17:37.460]  в лист но цитически можно это сделать то это не самое оптимальное просто будет так вот тогда
[01:17:37.460 --> 01:17:44.500]  вам реально придется разбирать случай когда тут 2t-1 и тут 2t-1 то есть возможно вам там вам тут
[01:17:44.500 --> 01:17:53.580]  реально страдать придется вот вот я поэтому да и например да вот поэтому я и проговариваю
[01:17:53.580 --> 01:17:59.380]  это просто что вместо этого лучше сказать что мы лучше тогда но во первых конечно то есть мы
[01:17:59.380 --> 01:18:05.380]  делаем вид что удаляем не его а того кто следующий то есть это вот который там минимум справа например
[01:18:05.380 --> 01:18:12.140]  да ну вот ну точнее так тут аккуратно потому что смотрите вот мы когда нашли этот элемент мы
[01:18:12.140 --> 01:18:19.260]  что делаем нет ну погодите но мой но породите и запоминать там как повезет потому что как мы
[01:18:19.260 --> 01:18:24.260]  уже сказали может так случиться что ни отсюда нельзя удалять просто так ключи и не отсюда
[01:18:24.260 --> 01:18:28.100]  нельзя просто так удалять ключи но потому что их тут минимальное количество для задней высоты
[01:18:28.100 --> 01:18:37.140]  да да но она поэтому мы проговариваем то есть если мы встретили ключик такой да то что мы
[01:18:37.140 --> 01:18:45.340]  говорим так рассмотрим двух соседних детей если у вас тут t-1 и тут t-1 ну значит мы этот ключик
[01:18:45.340 --> 01:18:51.660]  торжественно опускаем сюда и продолжаем то есть у нас типа все еще теперь все еще у нас теперь
[01:18:51.780 --> 01:18:59.140]  есть вершина в которой есть удаляемый элемент вот ну кстати да и но вот т.е. но но как бы она вот
[01:18:59.140 --> 01:19:04.560]  теперь пока протолкнулась то есть некоторое время мы пропихиваем пропихиваем пропихиваем но в
[01:19:04.560 --> 01:19:10.460]  какой-то момент неожиданно обнаружилась в какой-то вершине что ну если мы так дошли до листа то
[01:19:10.460 --> 01:19:15.500]  кайф мы ее просто удаляем но если у нас обнаружилось что у нее соседние дети соседних
[01:19:15.500 --> 01:19:20.220]  где-то хоть у кого-то больше либо равно t, но тут непонятно,
[01:19:20.220 --> 01:19:24.520]  тут больше либо равно t, да, для нас даже тут более
[01:19:24.520 --> 01:19:27.940]  худший случай будет, это когда, ну вот, то даже когда
[01:19:27.940 --> 01:19:30.100]  оба больше либо равно t, но это неважно, то есть тогда
[01:19:30.100 --> 01:19:32.500]  если какого-то ребенка больше либо равно t, то мы говорим,
[01:19:32.500 --> 01:19:35.260]  что допустим, если у левого больше либо равно t, то мы
[01:19:35.260 --> 01:19:39.660]  запускаемся, то мы как бы отсюда удаляем максимальный
[01:19:39.660 --> 01:19:42.700]  элемент, то есть обратите внимание, нам заранее его
[01:19:42.700 --> 01:19:46.860]  даже знать не обязательно, ну то есть можем считать,
[01:19:46.860 --> 01:19:48.700]  что плюс бесконечность, когда мы придем в лист и
[01:19:48.700 --> 01:19:50.820]  скажем, что надо кого-то удалить, значит мы ему удаляем
[01:19:50.820 --> 01:20:01.020]  максимум и его сюда записываем, вот, понятно, да, вот, делаем
[01:20:01.020 --> 01:20:04.060]  это только у того ребенка, у которого больше либо равно
[01:20:04.060 --> 01:20:08.100]  t, но если тут было t-1, а тут больше либо равно t, значит
[01:20:08.100 --> 01:20:13.620]  тогда удаляем минимум управа под дерево, но пока тут t-1,
[01:20:13.620 --> 01:20:18.460]  тут t-1, как я уже сказал, опускаем, опускаем, опускаем, то
[01:20:18.460 --> 01:20:21.700]  есть вот получается еще одна такая красивая операция,
[01:20:21.700 --> 01:20:25.420]  но правда скачивать придется, конечно, уже, видимо, не
[01:20:25.420 --> 01:20:28.380]  аж вершина, все-таки 2 аж, потому что для каждой вершины
[01:20:28.380 --> 01:20:33.220]  нам, возможно, придется и, собственно, два, там два
[01:20:33.220 --> 01:20:37.940]  ребенка скачивать и ни одного, при условии того, что мы
[01:20:37.940 --> 01:20:41.780]  даем ребенку с днем t-1, ну да, но правда, как всегда,
[01:20:41.780 --> 01:20:44.020]  как повезет, да, то есть нам, конечно, чаще всего будет
[01:20:44.020 --> 01:20:47.500]  вести, но в лучшем случае все равно, да, а в листах
[01:20:47.500 --> 01:20:52.740]  у нас тоже больше либо равно t, всегда, да, всегда, ну,
[01:20:52.740 --> 01:20:58.900]  на уровне инварианта, да, а если в листе t-1, вот ровно
[01:20:58.900 --> 01:21:01.020]  ради этого мы и добивались того, что когда мы придем
[01:21:01.020 --> 01:21:06.580]  в лист, там будет больше либо равно t, вот, то есть как
[01:21:06.580 --> 01:21:09.020]  бы закончится тем, что мы придем в лист, там больше
[01:21:09.020 --> 01:21:16.100]  либо равно t вершин, значит, нужную мы торжественно удалим,
[01:21:16.100 --> 01:21:22.980]  так что вот такая вот красота, вот, то есть это вот таким
[01:21:22.980 --> 01:21:26.460]  вот примерно образом у нас выглядит дилет.
[01:21:26.460 --> 01:21:31.220]  Мы уже не собираемся пытаться оптимизировать, чтобы меньше
[01:21:32.220 --> 01:21:35.780]  Ну, тут, боюсь сказать, никак и не получится.
[01:21:35.780 --> 01:21:40.020]  Ну, что подозреваю, ну, то есть там может, может кто-то
[01:21:40.020 --> 01:21:41.780]  там докажет, что можно так сделать, чтобы это было
[01:21:41.780 --> 01:21:45.380]  не больше чем полтора, там, аж там, или там опять же
[01:21:45.380 --> 01:21:48.100]  что-нибудь про средние, там кто-нибудь докажет.
[01:21:48.100 --> 01:21:51.940]  Ну, амортизировано, когда insert-delete, insert-delete, insert-delete,
[01:21:51.940 --> 01:21:52.940]  ну, тут, конечно.
[01:21:52.940 --> 01:21:58.540]  Ну, шутка, ну, как все сказать.
[01:21:58.540 --> 01:22:08.940]  Ну, это да, ну, тут разное бывает, разное бывает.
[01:22:08.940 --> 01:22:13.020]  Вот, так, ну, вот, но это вот, но это вот действительно
[01:22:13.020 --> 01:22:14.780]  есть рассматривать с точки зрения действительно
[01:22:14.780 --> 01:22:16.020]  промышленности.
[01:22:16.020 --> 01:22:22.380]  Так, о, эти времена, московское время 10 часов 33 минуты,
[01:22:22.380 --> 01:22:24.140]  это означает, что пришло время сделать перерыв.
[01:22:24.140 --> 01:22:28.680]  Так, ладно, ребят, всё, поехали, поехали, поехали, поехали,
[01:22:28.680 --> 01:22:30.480]  работаем, работаем, работаем, работаем, работаем repeat
[01:22:30.480 --> 01:22:33.760]  repeat
[01:22:33.760 --> 01:22:37.760]  expansion
[01:22:37.760 --> 01:22:40.540]  Так, что ж, сейчас мы продолжим говорить об боед дереве,
[01:22:40.540 --> 01:22:48.520]  но сейчас мы включим соцсостовал режим олимпийoupe, в том
[01:22:48.520 --> 01:22:52.100]  плане, что мы сейчас забьём на, там, вот эти, вот, там,
[01:22:52.100 --> 01:22:57.820]  там при логарифме скачиваний или там наоборот загрузок
[01:22:57.820 --> 01:22:59.820]  сейчас когда мы удаляем
[01:22:59.820 --> 01:23:01.820]  мы получается спускаемся туда
[01:23:01.820 --> 01:23:03.820]  ну понятно, короче, спускаемся
[01:23:03.820 --> 01:23:05.820]  спускаемся, да
[01:23:05.820 --> 01:23:09.820]  потом мы, возможно, находим вершину, которую нужно удалить
[01:23:09.820 --> 01:23:13.820]  смотрим, если оба сына по t-minus один, то мы
[01:23:13.820 --> 01:23:17.820]  смёрживаем эту вершину в них и рекурсивно выпускаемся от этого
[01:23:17.820 --> 01:23:19.820]  ну типа, ну типа рекурсивно
[01:23:20.540 --> 01:23:23.540]  да, в противном случае делаем поворот
[01:23:23.540 --> 01:23:25.540]  в противном случае
[01:23:25.540 --> 01:23:27.540]  в противном случае
[01:23:27.540 --> 01:23:31.540]  мы удаляем максимальную вершину, допустим, из левого
[01:23:31.540 --> 01:23:33.540]  если в корне этого левого
[01:23:33.540 --> 01:23:35.540]  если в левом ребёнке
[01:23:35.540 --> 01:23:37.540]  хотя бы t детей
[01:23:37.540 --> 01:23:39.540]  вот это и в этих, да
[01:23:39.540 --> 01:23:43.540]  если там t-minus один, а у правого больше, чем t-minus один, то ну вы поняли
[01:23:43.540 --> 01:23:45.540]  вот
[01:23:45.540 --> 01:23:47.540]  так что соответственно
[01:23:47.540 --> 01:23:49.540]  но
[01:23:49.540 --> 01:23:51.540]  вот
[01:23:51.540 --> 01:23:53.540]  вот, значит идём дальше
[01:23:53.540 --> 01:23:55.540]  вот, значит
[01:23:55.540 --> 01:23:57.540]  теперь мы попробуем
[01:23:57.540 --> 01:23:59.540]  значит всё-таки изобрести сплит и мерж
[01:23:59.540 --> 01:24:01.540]  так, ну здесь
[01:24:01.540 --> 01:24:03.540]  как бы да, я думаю там
[01:24:03.540 --> 01:24:05.540]  здесь присутствующим, наверное, не надо читать лекцию
[01:24:05.540 --> 01:24:07.540]  что такое там неявное дерево поиска
[01:24:07.540 --> 01:24:09.540]  явное дерево поиска, да?
[01:24:09.540 --> 01:24:11.540]  или надо?
[01:24:11.540 --> 01:24:13.540]  ну вообще-то говоря
[01:24:13.540 --> 01:24:15.540]  ну давайте попробуем
[01:24:15.540 --> 01:24:17.540]  нет, ну как сказать, ладно
[01:24:17.540 --> 01:24:19.540]  потому что я помню, в прошлый раз опрасывали
[01:24:19.540 --> 01:24:21.540]  выясняли, что дикартовые деревья тут писали
[01:24:21.540 --> 01:24:23.540]  по-моему, чуть более чем все
[01:24:23.540 --> 01:24:25.540]  мы
[01:24:25.540 --> 01:24:27.540]  какой чёткий критерий
[01:24:27.540 --> 01:24:29.540]  то есть надо понять, что значит термин
[01:24:29.540 --> 01:24:31.540]  нет, ну обычно
[01:24:31.540 --> 01:24:33.540]  ну как сказать, ладно, хорошо
[01:24:33.540 --> 01:24:35.540]  значит термин, обычно вот разделяют, есть такое понятие
[01:24:35.540 --> 01:24:37.540]  как там неявное, допустим, дерево поиска
[01:24:37.540 --> 01:24:39.540]  заключается в следующем
[01:24:39.540 --> 01:24:41.540]  ну потому что заметим, что если у нас есть
[01:24:41.540 --> 01:24:43.540]  допустим обычное двоичное дерево
[01:24:43.540 --> 01:24:45.540]  то у нас есть и нордер обход
[01:24:45.540 --> 01:24:47.540]  помните
[01:24:47.540 --> 01:24:49.540]  и нордер обход, который мы
[01:24:49.540 --> 01:24:51.540]  обходим левое под дерево, записываем корень
[01:24:51.540 --> 01:24:53.540]  обходим правое под дерево, помните, да?
[01:24:53.540 --> 01:24:55.540]  то есть он нам позволяет, если это реально
[01:24:55.540 --> 01:24:57.540]  дерево поиска, то мы таким образом
[01:24:57.540 --> 01:24:59.540]  выводим все элементы, находящиеся в нём
[01:24:59.540 --> 01:25:01.540]  в порядке возрастания
[01:25:01.540 --> 01:25:03.540]  вот
[01:25:03.540 --> 01:25:05.540]  то есть ну обычно
[01:25:05.540 --> 01:25:07.540]  если мы так, то что мы
[01:25:07.540 --> 01:25:09.540]  обсуждали, это называется явное дерево поиска
[01:25:09.540 --> 01:25:11.540]  потому что в нём реально можно искать ключи
[01:25:11.540 --> 01:25:13.540]  но заметим, что
[01:25:13.540 --> 01:25:15.540]  есть вот маленькая приятная вещь
[01:25:15.540 --> 01:25:17.540]  что если мы
[01:25:17.540 --> 01:25:19.540]  в каждом под дерево будем хранить дополнительно
[01:25:19.540 --> 01:25:21.540]  его размер, то есть в каждой вершине
[01:25:21.540 --> 01:25:23.540]  храним вот переменную СЗ, да?
[01:25:23.540 --> 01:25:25.540]  которая хранит сколько вершин
[01:25:25.540 --> 01:25:27.540]  в под дерево, то в принципе мы за
[01:25:27.540 --> 01:25:29.540]  тот же асимптотику того же самого
[01:25:29.540 --> 01:25:31.540]  сёрча можем на самом деле
[01:25:31.540 --> 01:25:33.540]  искать не только просто
[01:25:33.540 --> 01:25:35.540]  элемент, но и, скажем, найти каты по
[01:25:35.540 --> 01:25:37.540]  возрастанию элемента, но число к найдите каты
[01:25:37.540 --> 01:25:39.540]  по возрастанию элемента, и это вот аккуратным
[01:25:39.540 --> 01:25:41.540]  спуском тем же делается
[01:25:41.540 --> 01:25:43.540]  вот
[01:25:43.540 --> 01:25:45.540]  теперь возникает следующая идея
[01:25:45.540 --> 01:25:47.540]  вот нам
[01:25:47.540 --> 01:25:49.540]  иногда, например, хочется
[01:25:49.540 --> 01:25:51.540]  то есть решать там всякие задачи, типа
[01:25:51.540 --> 01:25:53.540]  например, до нас
[01:25:53.540 --> 01:25:55.540]  там дано набор строчек
[01:25:55.540 --> 01:25:57.540]  вот прям даже строчек вообще
[01:25:57.540 --> 01:25:59.540]  ну это могут быть массивы, там
[01:25:59.540 --> 01:26:01.540]  я даже сейчас скажу просто строчек
[01:26:01.540 --> 01:26:03.540]  и хочется с ними делать какие-нибудь операции
[01:26:03.540 --> 01:26:05.540]  типа конкатенировать строчки
[01:26:05.540 --> 01:26:07.540]  да? там
[01:26:07.540 --> 01:26:09.540]  там сплитить там допустим
[01:26:09.540 --> 01:26:11.540]  или вставить какую-нибудь строчку там
[01:26:11.540 --> 01:26:13.540]  какую-нибудь булковку там
[01:26:13.540 --> 01:26:15.540]  ну и там ещё какие-нибудь операции делать
[01:26:15.540 --> 01:26:17.540]  там, найди там, не знаю там, пятнадцатую букву
[01:26:17.540 --> 01:26:19.540]  там, в третьей строчке
[01:26:19.540 --> 01:26:21.540]  там, как угодно
[01:26:23.540 --> 01:26:25.540]  вот, вот хочется такое делать
[01:26:25.540 --> 01:26:27.540]  как это делать? ну идея получается такая
[01:26:27.540 --> 01:26:29.540]  а давайте-ка хранить
[01:26:29.540 --> 01:26:31.540]  то есть тогда в
[01:26:31.540 --> 01:26:33.540]  нашем двоичном дереве
[01:26:33.540 --> 01:26:35.540]  пока ещё
[01:26:35.540 --> 01:26:37.540]  только что была поиска, давайте хранить
[01:26:37.540 --> 01:26:39.540]  большую строчку
[01:26:39.540 --> 01:26:41.540]  то есть вот, допустим, есть у нас строчка там
[01:26:41.540 --> 01:26:43.540]  абракадабра какая-нибудь
[01:26:43.540 --> 01:26:45.540]  то давайте хранить эту строчку
[01:26:45.540 --> 01:26:47.540]  в двоичном дереве поиска таким
[01:26:47.540 --> 01:26:49.540]  образом, чтобы иноридный обход выдал
[01:26:49.540 --> 01:26:51.540]  ровно эту строчку
[01:26:51.540 --> 01:26:53.540]  как это будет? ну например
[01:26:53.540 --> 01:26:55.540]  вот я сейчас не буду гнаться со сбалансированностью
[01:26:55.540 --> 01:26:57.540]  прям идеальной, то вот будет
[01:26:57.540 --> 01:26:59.540]  вылететь это вот
[01:26:59.540 --> 01:27:01.540]  примерно так
[01:27:01.540 --> 01:27:03.540]  там абракадабра, там вот это
[01:27:03.540 --> 01:27:05.540]  соответственно бетат, ну тут допустим
[01:27:05.540 --> 01:27:07.540]  д, аа
[01:27:07.540 --> 01:27:09.540]  так, значит
[01:27:09.540 --> 01:27:11.540]  б
[01:27:15.540 --> 01:27:17.540]  вот
[01:27:17.540 --> 01:27:19.540]  так что
[01:27:19.540 --> 01:27:21.540]  соответственно
[01:27:23.540 --> 01:27:25.540]  вот
[01:27:25.540 --> 01:27:27.540]  то есть ну правда заметим, что
[01:27:27.540 --> 01:27:29.540]  это не является
[01:27:29.540 --> 01:27:31.540]  уже классическим деревом поиска
[01:27:31.540 --> 01:27:33.540]  ну просто потому, что как бы тут
[01:27:33.540 --> 01:27:35.540]  о том, что там какие-то элементы меньше
[01:27:35.540 --> 01:27:37.540]  каких-то, речи нет
[01:27:37.540 --> 01:27:39.540]  вот, то есть, но нам
[01:27:39.540 --> 01:27:41.540]  вожен только вот конкретный порядок
[01:27:41.540 --> 01:27:43.540]  но мы здесь
[01:27:43.540 --> 01:27:45.540]  как бы для удобства не явно подразумеваем
[01:27:45.540 --> 01:27:47.540]  что у нас в вершинах
[01:27:47.540 --> 01:27:49.540]  ключики есть
[01:27:49.540 --> 01:27:51.540]  и это порядковый номер
[01:27:51.540 --> 01:27:53.540]  соответствующего символа в строке
[01:27:53.540 --> 01:27:55.540]  мы сейчас и не кардачу
[01:27:55.540 --> 01:27:57.540]  принесем? нет, нет
[01:27:57.540 --> 01:27:59.540]  нет, нет, нет
[01:27:59.540 --> 01:28:01.540]  нет, ну
[01:28:01.540 --> 01:28:03.540]  ну не то чтобы никогда
[01:28:03.540 --> 01:28:05.540]  вот
[01:28:05.540 --> 01:28:07.540]  вот, ну конечно
[01:28:07.540 --> 01:28:09.540]  вот, нет, но это
[01:28:09.540 --> 01:28:11.540]  и называется дикартач
[01:28:11.540 --> 01:28:13.540]  это называется дерево
[01:28:13.540 --> 01:28:15.540]  по неявному ключу
[01:28:15.540 --> 01:28:17.540]  двоичное дерево с неявным ключом
[01:28:17.540 --> 01:28:19.540]  почему он неявный?
[01:28:19.540 --> 01:28:21.540]  потому что обратите внимание, что
[01:28:21.540 --> 01:28:23.540]  в явном виде мы просто эти ключи не храним
[01:28:23.540 --> 01:28:25.540]  вместо этого мы храним СЗшки
[01:28:25.540 --> 01:28:27.540]  то есть реально в дереве мы храним
[01:28:27.540 --> 01:28:29.540]  там один, тут один, два
[01:28:29.540 --> 01:28:31.540]  тут четыре получается
[01:28:31.540 --> 01:28:33.540]  один, один, три
[01:28:33.540 --> 01:28:35.540]  один, два, там шесть и одиннадцать
[01:28:35.540 --> 01:28:37.540]  вот
[01:28:37.540 --> 01:28:39.540]  поэтому там найти
[01:28:39.540 --> 01:28:41.540]  там какой-нибудь седьмой элемент
[01:28:41.540 --> 01:28:43.540]  мы все еще будем искать его за логарифом
[01:28:43.540 --> 01:28:45.540]  там аккуратненьким спуском
[01:28:45.540 --> 01:28:47.540]  вот
[01:28:47.540 --> 01:28:49.540]  так что такая вот маленькая красота
[01:28:49.540 --> 01:28:51.540]  вот, понятно?
[01:28:53.540 --> 01:28:55.540]  вот, понятно?
[01:28:55.540 --> 01:28:57.540]  так, ну вот
[01:28:57.540 --> 01:28:59.540]  так что вот красоту видим
[01:28:59.540 --> 01:29:01.540]  так что красота хорошая
[01:29:03.540 --> 01:29:05.540]  вот
[01:29:05.540 --> 01:29:07.540]  ну а теперь вот возникает вопрос
[01:29:07.540 --> 01:29:09.540]  как же делать конкатенацию?
[01:29:11.540 --> 01:29:13.540]  ну вот конкатенацию или это
[01:29:13.540 --> 01:29:15.540]  то конечно ключевыми
[01:29:15.540 --> 01:29:17.540]  операциями у нас становятся
[01:29:17.540 --> 01:29:19.540]  такие веселые вещи как
[01:29:19.540 --> 01:29:21.540]  сплит и мерч
[01:29:23.540 --> 01:29:25.540]  да, ну кстати
[01:29:25.540 --> 01:29:27.540]  да
[01:29:27.540 --> 01:29:29.540]  и это мы хотим везде
[01:29:29.540 --> 01:29:31.540]  потому что мы заметим
[01:29:31.540 --> 01:29:33.540] 最近 я вот ввел все с понятием
[01:29:33.540 --> 01:29:35.540]  дерево по ниявному ключу
[01:29:35.540 --> 01:29:37.540]  но мы заметим что у нас любое дерево
[01:29:37.540 --> 01:29:39.540]  может быть дерево по ниявному ключу
[01:29:39.540 --> 01:29:41.540]  то есть мы сейчас даже не будем обслуживать
[01:29:41.540 --> 01:29:43.540]  дикартого дерева по ниявному ключу
[01:29:43.540 --> 01:29:45.540]  то есть вместо этого
[01:29:45.540 --> 01:29:47.540]  потому что мы не знаем что такое дикартовое дерево
[01:29:47.540 --> 01:29:49.540]  поэтому у нас
[01:29:49.540 --> 01:29:51.540]  вот мы сегодня попробуем чтобы у нас сегодня было
[01:29:51.540 --> 01:29:53.540]  richt applies countries
[01:29:53.540 --> 01:29:54.540]  по неявному ключу.
[01:29:54.540 --> 01:29:57.300]  Ну начнём мы конечно с B дерева по неявному ключу.
[01:29:57.300 --> 01:30:01.140]  Ну в B дерева конечно стоит оговориться, что B дерева
[01:30:01.140 --> 01:30:04.860]  не является двоичным, но думаю как бы тут аналогию
[01:30:04.860 --> 01:30:05.860]  проводите, правда.
[01:30:05.860 --> 01:30:06.860]  Чего?
[01:30:06.860 --> 01:30:10.820]  Почему не является двоичным?
[01:30:10.820 --> 01:30:14.740]  Потому что там у вершины бывает больше чем два ребёнка.
[01:30:14.740 --> 01:30:16.980]  В плане оно может быть двоичным?
[01:30:16.980 --> 01:30:18.700]  Ну может быть, да.
[01:30:18.700 --> 01:30:22.460]  Ну в общем ключей не является двоичным.
[01:30:22.460 --> 01:30:24.300]  Ну обычно когда мы говорим о двоичном дереве, мы думаем,
[01:30:24.300 --> 01:30:26.140]  что оно всегда двоичное, а тут как повезёт.
[01:30:26.140 --> 01:30:30.100]  Да, конечно B деревом, да, то есть двоичное дерево
[01:30:30.100 --> 01:30:33.780]  конечно да, в частном случае B дерево, особенно с константой
[01:30:33.780 --> 01:30:40.460]  t равно 2, да, но вот, нет, это воронёк, а нет, это воронёк,
[01:30:40.460 --> 01:30:44.660]  да, это воронёк, да, не, даже не в этом дело, просто
[01:30:44.660 --> 01:30:47.740]  двоичное дерево может быть не идеально сбалансированным.
[01:30:47.740 --> 01:30:52.980]  Поэтому, нет, поэтому, поэтому, поэтому да, поэтому B дерево
[01:30:52.980 --> 01:30:55.060]  двоичным деревом не является от слова там.
[01:30:55.060 --> 01:30:57.620]  Нет, двоичное дерево может быть идеально сбалансированным.
[01:30:57.620 --> 01:30:58.620]  Ну да.
[01:30:58.620 --> 01:31:00.620]  И B дерево может быть двоичным.
[01:31:00.620 --> 01:31:03.020]  Да, да, да, ну хорошо, хорошо.
[01:31:03.020 --> 01:31:06.020]  Ну да, да, да.
[01:31:06.020 --> 01:31:09.200]  Не, кстати, t равно 2, потому что количество ключей не
[01:31:09.200 --> 01:31:11.300]  менее чем t-минус 1 всё-таки.
[01:31:11.300 --> 01:31:13.420]  А ещё t больше не было в двух пунктах.
[01:31:13.420 --> 01:31:15.660]  Вот да, но это ровно для того, чтобы как бы в каждой
[01:31:15.660 --> 01:31:17.060]  вершине был хотя бы один ключ.
[01:31:17.060 --> 01:31:23.860]  Да, но это другое, да, но поэтому там, да, отдельные,
[01:31:23.860 --> 01:31:26.740]  да, идеально сбалансированные двоичные дерева а-ля двоичная
[01:31:26.740 --> 01:31:29.740]  куча, да, могут вполне оказаться B дерево.
[01:31:29.740 --> 01:31:34.100]  Вот, ну ладно, это всё, экилибристика уже словесная пошла какая-то.
[01:31:34.100 --> 01:31:35.980]  Вот, это не очень интересно.
[01:31:35.980 --> 01:31:39.580]  Вот, интересно другое.
[01:31:39.580 --> 01:31:44.060]  Значит, в таких деревьях по неявному ключу, да, ну
[01:31:44.180 --> 01:31:46.540]  понятно, что во-первых, как делать?
[01:31:46.540 --> 01:31:49.900]  Ну во-первых, конечно, у нас модифицируется немножко
[01:31:49.900 --> 01:31:52.900]  операции insert, ну то есть всё, что у нас превращается
[01:31:52.900 --> 01:31:57.780]  в таких деревьях, в как раз поиск атового элемента,
[01:31:57.780 --> 01:31:59.820]  но во всех деревьях, в том числе и в B деревьях оно
[01:31:59.820 --> 01:32:00.820]  делается так же.
[01:32:00.820 --> 01:32:02.780]  Как я сказал, мы тут, ну вот, то есть там в каждой вершине
[01:32:02.780 --> 01:32:06.580]  придётся реально ССС-ку хранить, но это уже там технические
[01:32:06.580 --> 01:32:09.820]  детали, к тому же, как я уже сказал, мы уже этого там,
[01:32:09.820 --> 01:32:12.460]  ну в основном мы себе включили олимпиянника и не паримся
[01:32:12.460 --> 01:32:13.460]  по таким мелочам.
[01:32:13.460 --> 01:32:14.460]  Вот.
[01:32:14.460 --> 01:32:20.340]  Вот, значит, во что у нас превращается insert?
[01:32:20.340 --> 01:32:24.300]  Ну insert у нас теперь просто, ну insert у нас изменяется
[01:32:24.300 --> 01:32:25.300]  каким образом?
[01:32:25.300 --> 01:32:29.900]  Он изменяется тем, что у нас есть ключик, да, то есть
[01:32:29.900 --> 01:32:33.020]  вместо того, чтобы вставлять ключик, мы вставляем ключик
[01:32:33.020 --> 01:32:35.900]  в заданную позицию, то есть раньше мы его вставляли,
[01:32:35.900 --> 01:32:39.420]  куда его вставлять мы думали там по результатам сравнения,
[01:32:39.500 --> 01:32:42.380]  а теперь мы его куда мы его вставляем мы смотрим по
[01:32:42.380 --> 01:32:46.940]  результатам каких там вычислений и сайзов под деревьев.
[01:32:46.940 --> 01:32:51.420]  Так, это понятно о чём я говорю, да?
[01:32:51.420 --> 01:32:52.420]  Вот.
[01:32:52.420 --> 01:32:53.420]  Ну тут пока не...
[01:32:53.420 --> 01:32:54.420]  Вот.
[01:32:54.420 --> 01:32:55.420]  Так.
[01:32:55.420 --> 01:33:00.460]  Вот давайте-ка вот эту штучку мы тоже проденем, а то...
[01:33:00.460 --> 01:33:01.460]  Вот.
[01:33:01.460 --> 01:33:02.460]  Вот.
[01:33:02.460 --> 01:33:03.460]  Нет.
[01:33:03.460 --> 01:33:04.460]  Почему?
[01:33:04.460 --> 01:33:05.460]  Нет.
[01:33:05.460 --> 01:33:06.460]  До этого я вот так вот говорил.
[01:33:06.780 --> 01:33:11.180]  То есть знаете, вы ведем наш репортаж там, вот это вот
[01:33:11.180 --> 01:33:12.180]  всё.
[01:33:12.180 --> 01:33:13.180]  И вот.
[01:33:13.180 --> 01:33:16.580]  Ну когда-то так было, знаете, когда давным-давно, когда
[01:33:16.580 --> 01:33:20.300]  на сцену ещё выбегали вообще с этими вот микрофонами
[01:33:20.300 --> 01:33:22.620]  типа аля дубинка, вот это вот всё.
[01:33:22.620 --> 01:33:25.700]  А, ну причем там и сейчас такое бывает, если удобно.
[01:33:25.700 --> 01:33:26.700]  Вот.
[01:33:26.700 --> 01:33:27.700]  Там можно какие-то.
[01:33:27.700 --> 01:33:28.700]  Вот.
[01:33:28.700 --> 01:33:29.700]  Так что ответ.
[01:33:29.700 --> 01:33:32.900]  Не, ну самое главное там не начать это, если вы там
[01:33:32.900 --> 01:33:34.860]  не начать там выбирать без микрофона и не начать
[01:33:34.860 --> 01:33:36.660]  там просто что-то кричать, а потом когда вам дают
[01:33:36.660 --> 01:33:40.460]  микрофон, взять микрофон и начать вот так же вот кричать.
[01:33:40.460 --> 01:33:41.460]  Так.
[01:33:41.460 --> 01:33:42.460]  Ладно.
[01:33:42.460 --> 01:33:43.460]  Ну.
[01:33:43.460 --> 01:33:49.260]  Ну это будет уже немножко другой герой, на самом деле.
[01:33:49.260 --> 01:33:50.260]  Да.
[01:33:50.260 --> 01:33:51.260]  Так.
[01:33:51.260 --> 01:33:52.260]  Так вот.
[01:33:52.260 --> 01:33:53.260]  Значит, что хочется делать?
[01:33:53.260 --> 01:33:54.260]  Ну вот.
[01:33:54.260 --> 01:33:55.260]  Значит, ну соответственно, вставка, как вы сказали,
[01:33:55.260 --> 01:33:57.780]  то есть там вставка делается так же, только в какое под
[01:33:57.780 --> 01:34:00.460]  дерево вставлять мы уже решаем за счет того, что там
[01:34:00.460 --> 01:34:01.460]  сайзами.
[01:34:01.460 --> 01:34:02.460]  Вот.
[01:34:02.460 --> 01:34:06.020]  Соответственно, там вот аккуратненько.
[01:34:06.020 --> 01:34:07.020]  Вот.
[01:34:07.020 --> 01:34:09.820]  Ну и с дилитами, в общем-то, то же самое, да, когда мы
[01:34:09.820 --> 01:34:12.780]  говорим дилит, то есть мы теперь дилит говорим не
[01:34:12.780 --> 01:34:15.660]  удали элемент равный вот этому, а удали элемент номер
[01:34:15.660 --> 01:34:16.660]  такой.
[01:34:16.660 --> 01:34:20.900]  Но принципиально, например, в Б-дереве, ну, равно как
[01:34:20.900 --> 01:34:24.620]  и в ВВЛ красночерном, собственно, от этого сами по себе реализации
[01:34:24.620 --> 01:34:29.860]  инсортов, дилитов и исчерчей не меняются, согласны?
[01:34:29.860 --> 01:34:30.860]  Вот.
[01:34:30.860 --> 01:34:35.980]  Ну а в неявном, ну, когда у нас есть неявный ключ,
[01:34:35.980 --> 01:34:38.540]  хочется, конечно, делать операции, в первую очередь,
[01:34:38.540 --> 01:34:39.540]  сплит и мерч.
[01:34:39.540 --> 01:34:43.980]  Вот тут надо формально прописать, что это такое.
[01:34:43.980 --> 01:34:46.980]  Что такое, действительно, сплит и мерч?
[01:34:46.980 --> 01:34:49.340]  Вот что такое сплит и мерч.
[01:34:49.340 --> 01:34:51.820]  Ну, операция сплит, это, по сути, так.
[01:34:51.820 --> 01:34:54.460]  То есть, ну она вот, как я уже сказал, то есть операция
[01:34:54.460 --> 01:34:57.660]  сплит, то есть она получает на вход такой вот этот вот
[01:34:57.660 --> 01:35:00.540]  неявный массив, то есть, ну, по сути, каждое дерево
[01:35:00.540 --> 01:35:03.260]  хранит в себе, по сути, такой неявный массив, ну, или строчку.
[01:35:03.260 --> 01:35:06.540]  И число к.
[01:35:06.540 --> 01:35:15.260]  И задача теперь заключается в том, чтобы разбить элементы,
[01:35:15.260 --> 01:35:18.740]  то есть, строчку на две, то есть, как бы в одной из
[01:35:18.740 --> 01:35:21.100]  которых, то есть, если тут было n элементов, то в левом
[01:35:21.100 --> 01:35:25.820]  должно остаться k, а во втором n-k, естественно, с сохранением
[01:35:25.820 --> 01:35:26.820]  порядка.
[01:35:26.820 --> 01:35:31.380]  Это мы будем называть сплит.
[01:35:31.380 --> 01:35:34.700]  Вот, понятно, да?
[01:35:34.700 --> 01:35:35.700]  Вот.
[01:35:35.700 --> 01:35:41.220]  Ну, а также есть, конечно, еще операция мерч, но она
[01:35:41.220 --> 01:35:43.960]  получает на вход, ну, по крайней мере, по указателям,
[01:35:43.960 --> 01:35:51.580]  два массивчика размера, допустим, n1 и n2, и делает из них единый
[01:35:51.580 --> 01:35:54.020]  массив размера n1 плюс n2.
[01:35:54.500 --> 01:35:58.140]  Да, заметим, никаких копирований элементов тут особо не происходит,
[01:35:58.140 --> 01:36:00.860]  то есть, в том плане, что когда мы делаем сплит, вот
[01:36:00.860 --> 01:36:03.060]  это дерево само по себе перестает существовать.
[01:36:03.060 --> 01:36:07.940]  То есть, все его элементы перенаправляются в k, вот
[01:36:07.940 --> 01:36:08.940]  в эти два.
[01:36:08.940 --> 01:36:10.740]  Ну, и тут, наоборот, если вот эти два дерева перестают
[01:36:10.740 --> 01:36:12.860]  существовать, все их элементы отправляются сюда.
[01:36:12.860 --> 01:36:17.860]  Вот.
[01:36:17.860 --> 01:36:20.860]  Понятная идея, да?
[01:36:20.860 --> 01:36:23.220]  То есть, ну, заметим, что, кстати, если мы реализуем
[01:36:23.220 --> 01:36:26.540]  такие сплиты и мержи, то, в общем-то, кстати, вставки
[01:36:26.540 --> 01:36:29.900]  и удаления на самом деле у нас уже появятся автоматически,
[01:36:29.900 --> 01:36:30.900]  правда?
[01:36:30.900 --> 01:36:34.740]  Ну, потому что как добавить элемент куда-нибудь?
[01:36:34.740 --> 01:36:38.540]  Да, ну, просто сделаем сплит, создадим там, ну, в каждом
[01:36:38.540 --> 01:36:42.740]  дереве у нас есть операция, создай дерево из одного
[01:36:42.740 --> 01:36:43.740]  ключа, да?
[01:36:43.740 --> 01:36:45.660]  И после этого сделай два мержа.
[01:36:45.660 --> 01:36:49.540]  Ну, или если вы хотите удалить элемент, то как бы два сплита
[01:36:49.780 --> 01:36:51.780]  и один мерж тоже решают проблему.
[01:36:51.780 --> 01:36:52.780]  И даже сердж.
[01:36:52.780 --> 01:36:59.420]  Ну, да, ну, теоретически, да, и сердж можно сделать
[01:36:59.420 --> 01:37:01.420]  с помощью сплита и мержа, конечно.
[01:37:01.420 --> 01:37:02.420]  Хотя нет, ну, вот.
[01:37:02.420 --> 01:37:03.420]  Иногда они требуются.
[01:37:03.420 --> 01:37:05.420]  Надо просто вернуть назад потом.
[01:37:05.420 --> 01:37:06.420]  Ну, да.
[01:37:06.420 --> 01:37:09.420]  Да, ну, это, конечно, мерзость та еще.
[01:37:09.420 --> 01:37:11.420]  Но, впрочем, тут это, конечно, так теоретически.
[01:37:11.420 --> 01:37:15.420]  Но, как бы, вопрос как бы, как это реализовать практически?
[01:37:15.420 --> 01:37:17.860]  Потому что тут я уже молчу о всяких там технологиях
[01:37:17.940 --> 01:37:19.940]  отложенных операций, на самом деле.
[01:37:19.940 --> 01:37:23.180]  Ну, потому что раз вы писали дикартовые деревья, там
[01:37:23.180 --> 01:37:25.180]  скорее всего писали, там, скажем, прибавление.
[01:37:25.180 --> 01:37:28.180]  То есть, например, если у вас это не строчка, а массив,
[01:37:28.180 --> 01:37:30.180]  то, например, нам иногда хочется делать, скажем,
[01:37:30.180 --> 01:37:34.180]  прибавление на отрезке, да, присваивание на отрезке.
[01:37:34.180 --> 01:37:38.180]  Ну, или там вообще его величество реверс на отрезке.
[01:37:38.180 --> 01:37:41.180]  Ну, да.
[01:37:41.180 --> 01:37:43.180]  И всякие реверс на подотреске.
[01:37:43.180 --> 01:37:45.180]  Так, ну, поднимите руки.
[01:37:45.180 --> 01:37:47.180]  Кто когда-нибудь писал реверс на подотреске?
[01:37:47.180 --> 01:37:51.180]  Так.
[01:37:51.180 --> 01:37:53.180]  Понятно.
[01:37:53.180 --> 01:37:55.180]  Да.
[01:37:55.180 --> 01:37:57.180]  За квадрат.
[01:37:57.180 --> 01:37:59.180]  Да.
[01:37:59.180 --> 01:38:01.180]  Понятно.
[01:38:01.180 --> 01:38:03.180]  Нет, ну, все, нет, в смысле, нормально за логарифом
[01:38:03.180 --> 01:38:05.180]  дикартячки.
[01:38:05.180 --> 01:38:07.180]  Как?
[01:38:07.180 --> 01:38:09.180]  Как его, нет, как него не надо.
[01:38:09.180 --> 01:38:11.180]  Ну, вот.
[01:38:11.180 --> 01:38:15.180]  Нет, сплит реверс на подотреске в дикартячке.
[01:38:15.180 --> 01:38:17.180]  Ладно, хорошо.
[01:38:17.180 --> 01:38:19.180]  Кто писал реверс на подотреске в дикартячке?
[01:38:19.180 --> 01:38:21.180]  Хорошо.
[01:38:21.180 --> 01:38:23.180]  А, вот.
[01:38:23.180 --> 01:38:25.180]  А, то есть, нашлись те, кто тут пихал корневую.
[01:38:25.180 --> 01:38:27.180]  Понятно.
[01:38:27.180 --> 01:38:29.180]  Ну, ладно.
[01:38:29.180 --> 01:38:31.180]  Значит, придется потом в свое время это...
[01:38:31.180 --> 01:38:33.180]  Значит, придется в свое время это отдельно обсуждать.
[01:38:33.180 --> 01:38:35.180]  Окей.
[01:38:35.180 --> 01:38:39.180]  Ревью?
[01:38:39.180 --> 01:38:41.180]  Нет.
[01:38:41.180 --> 01:38:43.180]  Ну, где-то, думаю, будут.
[01:38:43.180 --> 01:38:45.180]  Что?
[01:38:45.180 --> 01:38:47.180]  Чего вы?
[01:38:47.180 --> 01:38:49.180]  С кодом, с кодом.
[01:38:49.180 --> 01:38:51.180]  Не, в этой теме у нас стеретических задач не будет.
[01:38:51.180 --> 01:38:53.180]  Не, в этой теме у нас стеретических задач не будет.
[01:38:59.180 --> 01:39:01.180]  Слушай, мне страшно накаркать.
[01:39:01.180 --> 01:39:03.180]  Если честно, то, что у меня, честно скажу, у меня
[01:39:03.180 --> 01:39:05.180]  что-то так забывает, что если я скажу, что вот задачи
[01:39:05.180 --> 01:39:07.180]  будут, скажем, сегодня, то вот там
[01:39:07.180 --> 01:39:09.180]  просто сложится просто тысячи звезд, чтобы
[01:39:09.180 --> 01:39:11.180]  сегодня не было.
[01:39:11.180 --> 01:39:13.180]  Честно скажу, я планировал, как бы сегодня там поехать
[01:39:13.180 --> 01:39:15.180]  в фистех, там, собственно, сесть и действительно в том числе
[01:39:15.180 --> 01:39:17.180]  контест этот сделать, если честно.
[01:39:17.180 --> 01:39:19.180]  Вот.
[01:39:19.180 --> 01:39:21.180]  Тьфу, тьфу, тьфу, тьфу, тьфу, тьфу, тьфу, тьфу, тьфу.
[01:39:21.180 --> 01:39:23.180]  Да, потом если приеду на фистех, там
[01:39:23.180 --> 01:39:25.180]  меня поймает Демид
[01:39:25.180 --> 01:39:27.180]  и дальше мы будем...
[01:39:27.180 --> 01:39:29.180]  И дальше мы будем до 12 ночи...
[01:39:29.180 --> 01:39:31.180]  Вы поймаете Демида?
[01:39:31.180 --> 01:39:33.180]  Ну, я не знаю, есть проблема, что Демид, по-моему,
[01:39:33.180 --> 01:39:35.180]  на фистехе особо не бывает, я так понимаю.
[01:39:35.180 --> 01:39:37.180]  Последнее время, да.
[01:39:37.180 --> 01:39:39.180]  Особенно когда у нас появились...
[01:39:39.180 --> 01:39:41.180]  Последнее время, а в принципе, по-моему, он это...
[01:39:45.180 --> 01:39:47.180]  Ну и что?
[01:39:47.180 --> 01:39:49.180]  Ну он катается...
[01:39:49.180 --> 01:39:51.180]  Нет, а что катается, а что олипиадами занимается, что ли?
[01:39:51.180 --> 01:39:53.180]  Ну, в смысле, как участник
[01:39:53.180 --> 01:39:55.180]  или что?
[01:39:59.180 --> 01:40:01.180]  А, ну это возможно, хорошо.
[01:40:01.180 --> 01:40:03.180]  Ну окей.
[01:40:03.180 --> 01:40:05.180]  Нет, ну окей.
[01:40:05.180 --> 01:40:07.180]  Ну окей, ладно, не важно.
[01:40:07.180 --> 01:40:09.180]  Ну я так в любом случае как пример привел.
[01:40:09.180 --> 01:40:11.180]  Знаете, там как бы теоретически
[01:40:11.180 --> 01:40:13.180]  поймать где угодно может кто угодно.
[01:40:13.180 --> 01:40:15.180]  В конце концов, да.
[01:40:15.180 --> 01:40:17.180]  К сожалению, в худшем случае у меня
[01:40:17.180 --> 01:40:19.180]  еще может быть плохое самочувствие, к сожалению.
[01:40:21.180 --> 01:40:23.180]  Ну ладно, эту проблему мы, я думаю,
[01:40:23.180 --> 01:40:25.180]  решим как раз. Ладно, так вот.
[01:40:25.180 --> 01:40:27.180]  Итак, ну вот.
[01:40:27.180 --> 01:40:29.180]  Ну, соответственно, пока я просто так...
[01:40:29.180 --> 01:40:31.180]  Ладно, мы чуть позже подробнее поговорим о том,
[01:40:31.180 --> 01:40:33.180]  как делать тут технологию отложенных операций.
[01:40:33.180 --> 01:40:35.180]  Вот. Всякую.
[01:40:35.180 --> 01:40:37.180]  Пока же я просто
[01:40:37.180 --> 01:40:39.180]  сосредоточимся на том, как делать
[01:40:39.180 --> 01:40:41.180]  сплит и мерж.
[01:40:41.180 --> 01:40:43.180]  Вот. Я почему вообще...
[01:40:43.180 --> 01:40:45.180]  Да, ну начнем мы с B-дерева.
[01:40:45.180 --> 01:40:47.180]  Потому что технология в B-дереве,
[01:40:47.180 --> 01:40:49.180]  сплита и мержа, мне кажется, вот такая максимально
[01:40:49.180 --> 01:40:51.180]  будет более наглядна, чем если бы мы ее обсуждали
[01:40:51.180 --> 01:40:53.180]  скажем в ВВЛ или там,
[01:40:53.180 --> 01:40:55.180]  о боже, в красночерном дереве, хотя конечно
[01:40:55.180 --> 01:40:57.180]  этим мы сегодня тоже займемся обязательно.
[01:40:57.180 --> 01:40:59.180]  Итак.
[01:40:59.180 --> 01:41:01.180]  Итак, как же
[01:41:01.180 --> 01:41:03.180]  сделать
[01:41:03.180 --> 01:41:05.180]  мерж
[01:41:05.180 --> 01:41:07.180]  в B-дереве?
[01:41:07.180 --> 01:41:09.180]  Да, начнем мы именно с мержа.
[01:41:11.180 --> 01:41:13.180]  Вот как сделать
[01:41:13.180 --> 01:41:15.180]  мерж
[01:41:15.180 --> 01:41:17.180]  в Дереве?
[01:41:21.180 --> 01:41:23.180]  Ну вот сколько
[01:41:23.180 --> 01:41:25.180]  корней объединить нельзя, потому что между этими
[01:41:25.180 --> 01:41:27.180]  корнями что-то
[01:41:27.180 --> 01:41:29.180]  должно, напоминаю, быть.
[01:41:29.180 --> 01:41:31.180]  И это что-то должно быть адекватной глубины.
[01:41:35.180 --> 01:41:37.180]  Ну вот, кстати, давайте вот с этого и начнем.
[01:41:37.180 --> 01:41:39.180]  Да, начнем с того, что когда мы
[01:41:39.180 --> 01:41:41.180]  слева объединяем два дерева,
[01:41:41.180 --> 01:41:43.180]  в B-дереве принципиально вопрос
[01:41:43.180 --> 01:41:45.180]  одинаковые ли они вообще глубины?
[01:41:47.180 --> 01:41:49.180]  Или нет?
[01:41:51.180 --> 01:41:53.180]  Или нет?
[01:41:53.180 --> 01:41:55.180]  Так вот. Ну давайте пока
[01:41:55.180 --> 01:41:57.180]  для простоты предположим, что да.
[01:41:59.180 --> 01:42:01.180]  Вот жили-были два дерева,
[01:42:01.180 --> 01:42:03.180]  тут у нас корень
[01:42:03.180 --> 01:42:05.180]  и тут корень.
[01:42:05.180 --> 01:42:07.180]  И как же их объединить?
[01:42:09.180 --> 01:42:11.180]  У них одна такая глубина или?
[01:42:11.180 --> 01:42:13.180]  Вот допустим, у них абсолютно одинаковая глубина H.
[01:42:13.180 --> 01:42:15.180]  Ну если у них
[01:42:15.180 --> 01:42:17.180]  сумма
[01:42:17.180 --> 01:42:19.180]  этих ключей
[01:42:19.180 --> 01:42:21.180]  в корнях сильно большая,
[01:42:21.180 --> 01:42:23.180]  то мы новый корень
[01:42:23.180 --> 01:42:25.180]  съедем.
[01:42:25.180 --> 01:42:27.180]  А как?
[01:42:27.180 --> 01:42:29.180]  Нет, погодите.
[01:42:29.180 --> 01:42:31.180]  Для начала, вот допустим, у них по T-1
[01:42:31.180 --> 01:42:33.180]  ключиков.
[01:42:33.180 --> 01:42:35.180]  Тогда все нормально.
[01:42:35.180 --> 01:42:37.180]  Если у обоих хотя бы T-1,
[01:42:37.180 --> 01:42:39.180]  то мы просто создаем новый корень,
[01:42:39.180 --> 01:42:41.180]  которому их подвешено.
[01:42:41.180 --> 01:42:43.180]  Замечательно, а ключик в этом корне кто?
[01:42:43.180 --> 01:42:45.180]  Если по T-1, то мы просто смерзим их.
[01:42:45.180 --> 01:42:47.180]  Возьмем список.
[01:42:47.180 --> 01:42:49.180]  Ага, замечательно, смерзим только
[01:42:49.180 --> 01:42:51.180]  между вот этими ребенками.
[01:42:51.180 --> 01:42:53.180]  Тут получается какие-то два ребенка.
[01:42:53.180 --> 01:42:55.180]  Что с ними делать?
[01:42:55.180 --> 01:42:57.180]  Э-э-э...
[01:42:57.180 --> 01:42:59.180]  Да, ну вот
[01:42:59.180 --> 01:43:01.180]  а точно получится смерзать
[01:43:01.180 --> 01:43:03.180]  той же высоты?
[01:43:03.180 --> 01:43:05.180]  Черт!
[01:43:05.180 --> 01:43:07.180]  А в чем проблема зацепиться?
[01:43:07.180 --> 01:43:09.180]  А тут двух.
[01:43:09.180 --> 01:43:11.180]  Потому что просто их схлопнуть
[01:43:11.180 --> 01:43:13.180]  удастся только если тут T-1, тут T-0
[01:43:13.180 --> 01:43:15.180]  или там плюс-минус один еще.
[01:43:15.180 --> 01:43:17.180]  А если тут 2T-1
[01:43:17.180 --> 01:43:19.180]  и тут 2T-1, то вы их просто так и схлопните.
[01:43:19.180 --> 01:43:21.180]  А мы хотим залог смерзать, да?
[01:43:21.180 --> 01:43:23.180]  Ну конечно.
[01:43:23.180 --> 01:43:29.380]  в идеале нет ну скажет нас как я сказал мы включили олимпиадник и забили на
[01:43:29.380 --> 01:43:32.140]  эти скачивания все так что
[01:43:37.140 --> 01:43:44.700]  одну но на самом деле да только мы даже не одну вершину на самом деле тут вот
[01:43:44.700 --> 01:43:48.940]  под таким техническим причинам обычно мерш не раз не рассматривается понятия
[01:43:48.940 --> 01:43:54.500]  слить два дерева просто два дерева рассматривается понятие слить два
[01:43:54.500 --> 01:44:06.460]  дерева и один ключик между ними да вот но сейчас собственно вот вот но вот нет
[01:44:06.460 --> 01:44:09.420]  это оказываю в этих терминах оказывается сильно удобно думать сейчас
[01:44:09.420 --> 01:44:17.540]  увидите но да то есть на самом деле да то есть да ну в том плане свести мерш
[01:44:17.540 --> 01:44:23.060]  без ключика к мержу с ключиком в общем-то легко но правда поможет для того что когда
[01:44:23.060 --> 01:44:38.500]  вы отсюда его удалите как бы тут высота могла и уменьшится соответственно вот ну вот а вот вот
[01:44:38.500 --> 01:44:42.380]  вот это оно что пока пока нам хотел чтобы глубина одинаковая но мы пока сказали что
[01:44:42.380 --> 01:44:46.620]  примерно одно и то же поэтому значит давайте и так сливаем через элемент то есть у нас
[01:44:46.620 --> 01:44:53.740]  есть два дерева и элемент между ними случай номер раз высоты деревьев оказались равны как
[01:44:53.740 --> 01:45:05.900]  тогда слить ну идея тогда объединяем эти вершины в одну через вот этот ключик теперь теперь все
[01:45:05.900 --> 01:45:13.260]  в порядке кроме того что количество ключиков может быть здесь больше чем 2 т-1 то тогда
[01:45:13.260 --> 01:45:19.580]  значит распиливаем на два не обязательно в этом месте обратите внимание да но потому что не факт
[01:45:19.580 --> 01:45:30.820]  потому что могло быть так что здесь 2 т-1 ключиков а тут 3 чтобы ну как бы потому что
[01:45:30.820 --> 01:45:35.780]  когда вы сейчас лили у вас тут как бы количество детей равно количество ключиков плюс один это вас
[01:45:35.940 --> 01:45:43.380]  до февра до первую очередь нужен дашь обнимешь под деревья рекурсивно как-то
[01:45:43.380 --> 01:46:03.200]  нет рекурсивно но не получится там рекурсивно но в смысле у тебя тут допустим вот так вот и
[01:46:03.200 --> 01:46:16.840]  тут вот вот и будет у тебя там это шесть шесть ключиков и восемь детей как это сейчас мы
[01:46:16.840 --> 01:46:21.880]  даже ничего не разделяем мы говорим объединим эти сперва сольем в одну вершину теперь говорим
[01:46:21.880 --> 01:46:29.240]  если количество ключиков здесь оказалось больше чем 2 т-1 то то тогда мы там берем этот ключик
[01:46:29.240 --> 01:46:33.440]  посередине я просто подчеркиваю еще раз что он не обязан совпадать с вот этим ключиком
[01:46:33.440 --> 01:46:58.800]  и возвышаем его до нового коке все но я могу заменить слово ключ конечно но я но я под
[01:46:58.800 --> 01:47:07.040]  ключом имею ввиду вот этот там символ строке ну или там число в массиве и так далее да ну я
[01:47:07.040 --> 01:47:19.960]  уже перестал это подразумевать хорошо элемент все но не во мне лучше давайте или меня лучше
[01:47:19.960 --> 01:47:25.280]  элемент давайте хотя конечно да то что мы сейчас говорим конечно можно делать и когда мы мерзим
[01:47:25.280 --> 01:47:29.840]  появному ключу тогда надо гарантировать что вот этот явный ключ больше всех вот этих и меньше
[01:47:29.840 --> 01:47:45.520]  всех вот этих да тут важная оговорка да потому что потому что пока эти вершины были корнями
[01:47:45.520 --> 01:47:56.680]  у них вполне могло быть меньше чем t-1 ключиков ну с элементов поэтому как бы но поэтому надо
[01:47:56.680 --> 01:48:01.840]  их объединить понять что их больше два либо понять что их не больше чем 2 т-1 и нас все в порядке
[01:48:01.840 --> 01:48:08.120]  либо понять что их больше и распилить уже в том месте в котором надо вот ну понятно что такое
[01:48:08.120 --> 01:48:12.720]  место найдется потому что количество элементов не более чем там 2 т-1 умножить на 2 плюс 1 там
[01:48:12.720 --> 01:48:26.960]  соответственно но соответственно вот так что вот такая красота вот так что там еще надо
[01:48:32.960 --> 01:48:40.040]  ну вот вот но сейчас погодите на но сейчас дойдем но в первую очередь важно конечно что важный
[01:48:40.040 --> 01:48:47.520]  тот момент что мы вот это слияние сделали даже не за от логарифма но по сути за от единицы ну если
[01:48:47.520 --> 01:48:53.720]  конечно считать т константой то есть обратите внимание слияние деревьев с одинаковой высотой
[01:48:53.720 --> 01:49:07.120]  делается вообще за от единицы понимаете да идем да но вот значит но вот теперь значит повысим
[01:49:07.120 --> 01:49:20.520]  планочку будьте здоровы а теперь предположим что у нас допустим ну без ограничения естественной
[01:49:20.520 --> 01:49:27.040]  общности там правое под дерево оказалось сильно ниже то есть тут аш-1 а тут прям вот аш-2 и
[01:49:27.040 --> 01:49:39.480]  между ними все еще элемент который между нужно между ними втиснуть что же делать в этом случае
[01:49:39.480 --> 01:49:51.240]  да совершенно верно то есть мы тупо идем соответственно здесь по правому пути там
[01:49:51.240 --> 01:49:59.400]  идем идем идем идем и доходим до под дерево высоты вот как раз той самой аж 2
[01:50:09.480 --> 01:50:22.160]  но не совсем но нет почему нет в церкви мы как бы шли просто до конца и впихивали вершину
[01:50:22.160 --> 01:50:32.080]  да ну можно и так сказать конечно да ну да да что какая-то схожесть действительно есть почему бы
[01:50:32.080 --> 01:50:38.040]  не да можно но здесь смотрите но здесь вот но здесь заметим что мы будем спускаться только до так
[01:50:38.040 --> 01:50:45.440]  чтобы там высота под дерево была аж два потому что в этом месте все что вам останется казалось
[01:50:45.440 --> 01:50:52.840]  бы это что сделать это вот объединить вот эти два под дерево да но остается ваша оговорка что
[01:50:52.840 --> 01:50:57.840]  могло так случиться что в объединении больше чем 2 и минус один вершин тогда мы достаем вершину
[01:50:57.840 --> 01:51:05.280]  и то есть распиливаем ее на два и соответственно заносим сюда чем более того процесс это получается
[01:51:05.280 --> 01:51:11.040]  такое каскадное распиливание потому что здесь тоже может казаться теперь 2 ты вершин и так вот
[01:51:11.040 --> 01:51:23.040]  да ну да практически до что-то очень похоже получилось вот понимаете да мы спускаемся до
[01:51:23.040 --> 01:51:35.360]  высоты аж два да причем обратите на этот раз причем это железно придется сделать потому
[01:51:35.360 --> 01:51:41.400]  что никакие гарантии того что тут там скажем меньше чем 2 т-1 вершин нас уже не спасут потому
[01:51:41.400 --> 01:51:48.360]  что мы тут подмежить можем уже называется очень жирный корень поэтому на этот раз обратно идти
[01:51:48.360 --> 01:52:08.320]  придется вот ну например да просто стека идишников храни мы не паримся но у нас был
[01:52:08.320 --> 01:52:14.320]  интеллектуальный вариант который заключается в том чтобы у каждой вершины у всех ее детей
[01:52:14.320 --> 01:52:24.080]  одинаковая глубина помните да это нет ну это мы пока там вы изучите еще изучаем б-дерево
[01:52:24.080 --> 01:52:34.920]  да но когда мы вот здесь смёрзли тут у всех детей одинаковая глубина мы ровно ради этого вот
[01:52:34.920 --> 01:52:44.840]  сюда и шли вообще а что мы там а что мы там могли делать там во всех операциях как бы глубины
[01:52:44.840 --> 01:52:50.640]  всех под деревьев сохраняются можно аккуратно проследить и убедиться в этом ну да не но там
[01:52:50.640 --> 01:52:56.600]  по сути просто ну а за счет чего смотрите вот жила была вершина да и было были у нее дети
[01:52:56.600 --> 01:53:03.480]  одинаковые глубины и взяли мы это и распилили мы эту вершину вот так вот надвое и вот эту вершинку
[01:53:03.480 --> 01:53:10.840]  отправили там куда-то наверх вот там ставят ставили и тут вместо одного ребенка стало два но
[01:53:10.840 --> 01:53:15.520]  это но этого ребенка но этих двух ребенков глубина оказалось абсолютно такой же как была
[01:53:15.520 --> 01:53:21.400]  у того одного ребенка поэтому ничего не поменялось ну и при обратной операции тоже мы при всех
[01:53:21.400 --> 01:53:26.120]  поворот но поворот это просто как бы мы перетянули этого ребенка с этим ключом сюда но как бы
[01:53:26.120 --> 01:53:30.640]  глубины от этого не поменялись уровень не поменялся так что ничего не поменялся
[01:53:30.640 --> 01:53:41.880]  ну потому что она может компенсироваться 2 t-1 ключом здесь
[01:53:41.880 --> 01:53:57.400]  гениально гениально да да да действительно да на самом деле да как делать сприт чтобы не да как
[01:53:57.400 --> 01:54:05.080]  делать сприт с логарифом плюс два скачиваний да то есть заметим что проблемы у нас с прокидыванием
[01:54:05.080 --> 01:54:09.240]  вверх могут возникнуть только здесь поэтому если мы гарантируем что мы тут идем идем сверху и
[01:54:09.240 --> 01:54:14.440]  гарантируем что тут везде меньше чем 2 t-1 вершин да то заметим что только вот при вот
[01:54:14.440 --> 01:54:18.760]  этом объединении там может быть мы там подымем этот ключик но тем не менее здесь все объединим
[01:54:18.760 --> 01:54:25.800]  и возрадуемся и на этом остановимся потому что дальше все в порядке да да да классно отлично
[01:54:25.800 --> 01:54:38.920]  да все давайте пойдем реализуем базу данных с реверсом на подотреске но пожалуй пожалуй но
[01:54:38.920 --> 01:54:44.200]  да нет ну просто в дереве придется глобально хранить глубину но в принципе там при всех
[01:54:44.200 --> 01:54:49.280]  инсертов и рейзах в общем-то глубину дерева главный заметим что в явном виде кстати
[01:54:49.440 --> 01:54:55.120]  глубину вершины вам хранить не надо ну смысле чтобы там у вас самой вершине было написано
[01:54:55.120 --> 01:55:00.040]  да там как они глубин то есть глубина я под дерево то есть вы просто там рядом с корнем то есть вы
[01:55:00.040 --> 01:55:04.320]  храните там корень в каком-то миде если вы там рядом с корнем храните глубину то в общем-то дальше
[01:55:04.320 --> 01:55:11.000]  проблем ну да но просто скачивать тратить на это память там вот эту скачку все кому это надо
[01:55:11.000 --> 01:55:17.760]  ну если мы олимпиагики нам по барабану если мы не олимпиагики туда так давай сейчас
[01:55:17.760 --> 01:55:27.000]  начать но лайфхак следующий там у нас опять возникала идея чтобы вот когда идем наверх вот
[01:55:27.000 --> 01:55:31.360]  это не делали это каскадное проталкивать не приходилось для этого перескачивать эти вершины
[01:55:31.360 --> 01:55:37.400]  заново если мы все-таки все-таки выключили режим олимпиагика опять так вот идея оказалась
[01:55:37.760 --> 01:55:42.680]  давайте когда мы идем сюда мы как и ранее в инсорте добиваемся того что когда мы находимся
[01:55:42.680 --> 01:55:51.960]  в вершине мы знаем что в ней меньше чем 2t-1 ключ но делаем абсолютно так же как раньше тогда
[01:55:51.960 --> 01:55:58.800]  это приводит нас к следующему что если мы нам нужно сделать объединение вот здесь да и протолкнуть
[01:55:58.800 --> 01:56:03.760]  ключик вверх то мы как бы его проталкиваем объединяем его вот с этой вершиной но дальше
[01:56:03.760 --> 01:56:07.920]  это не идет потому что тут было меньше чем 2t-1 вершин значит тут стало все в порядке
[01:56:07.920 --> 01:56:16.720]  потому что мы я же говорю мы сверху когда шли мы этого добивались вот против мы в инсорте умели
[01:56:16.720 --> 01:56:21.560]  идти сверху вниз и добиваться единственная маленькая оговорка что вам как бы если вы там
[01:56:21.560 --> 01:56:28.320]  поддерживаете сзшки вы поддерживаете сзшки да то как бы вам придется их тут пересчитывать но
[01:56:28.320 --> 01:56:34.400]  в общем-то зная размер собственно вот этого дерева вы в общем-то там заранее все это предпочитать
[01:56:34.400 --> 01:56:55.440]  а тут-то неважно смотрите если у вас тут меньше чем главное 2t-1 да согласен но и да но да но
[01:56:55.440 --> 01:57:00.320]  конкретно здесь мы сделаем аккуратно хорошо то есть мы говорим что здесь главное 2t-1 а вот с
[01:57:00.320 --> 01:57:06.400]  этим ребенком делаем меньше здесь мы ничего специально не заморачиваемся типа 2t-1 2t-1 объединяем
[01:57:06.400 --> 01:57:10.880]  если надо заносим эту вершину то есть даже отдельного случая на эту тему не рассматриваем
[01:57:10.880 --> 01:57:18.760]  да да то есть мы как бы главное то есть мы по сути досюда просто доходим они прям
[01:57:18.760 --> 01:57:23.640]  досюда то есть не поберем право ребенка и так далее то есть по моему ну кстати да тут даже
[01:57:23.640 --> 01:57:29.400]  лишних скачек кстати по сути не будет на самом деле то есть мы прям то есть количество скачек
[01:57:29.400 --> 01:57:42.000]  равда как и кстати асимптотика будет в точности аш-1 минус аш-2 плюс ну ладно плюс два но почему
[01:57:42.000 --> 01:57:47.040]  плюс два потому что смотрите потому что как бы вот на этой глубине все-таки вот этот коринг нам
[01:57:47.040 --> 01:58:07.760]  все-таки придется скачать но да конечно и глубина и ссшки да да да да да да да да да да да да да да да
[01:58:07.760 --> 01:58:15.480]  вот так же такая красота у нас получилось такая вот красота и ну вот но да но асимпточка но здесь
[01:58:15.480 --> 01:58:21.680]  на самом деле это асимпточка вот приятная видите что мы работаем не за от прям логарифма а за от
[01:58:21.680 --> 01:58:27.320]  именно разности усут то есть если разности там не сильно различаются то и работает это там не
[01:58:27.320 --> 01:58:36.480]  очень медленно то есть там если высоты отличаются на 10 то как бы это все будет работать за от 10 вот
[01:58:36.480 --> 01:58:44.920]  ну как бы понятно в худшем случае конечно это будет работать за от логарифма вот но
[01:58:44.920 --> 01:58:50.800]  здесь я все-таки подчеркиваю что это работает именно за от единицы плюс вот разность высот почему
[01:58:50.800 --> 01:59:00.520]  потому что нам сейчас это ой как пригодится как там это пригодится да сейчас там это пригодится
[01:59:00.520 --> 01:59:09.480]  в сплите да неожиданно но мы сейчас будем делать сплит с помощью мержат когда у нас такой был
[01:59:09.480 --> 01:59:18.240]  никогда но если писать дикарточку но не просто подвешивая под корень или левая
[01:59:18.240 --> 01:59:28.480]  потерева а делаем мёж с левым потерем ну дикарточка господи о господи дикарточка
[01:59:28.480 --> 01:59:39.120]  кто изобрел да как это называется да как как всегда да заводить там и потом опять индийская
[01:59:39.120 --> 01:59:48.200]  версия кто хочет стать миллионером кто да кто изобрел дикартово дерево пишем рене декат там
[01:59:48.200 --> 02:00:02.400]  я не знаю исак ньютон там сисилия рогон ой ну или там или там баба базидель как
[02:00:02.480 --> 02:00:09.680]  подлянка заключается в том что тут два правильных ответа но хотя тут надо копнуть там на самом деле
[02:00:09.680 --> 02:00:17.200]  не самый тривиальный вопрос в этом плане да а ну да вот да посмотрели они на это почесались и
[02:00:17.200 --> 02:00:23.000]  поэтому заменили вопрос на кто изобрел револьвер да там сэмюэль кольц там что-то там что-то там и
[02:00:23.120 --> 02:00:33.560]  кто изобрел револьвер да как это да как легко не его как вы сейчас револьвер изобрел сэмюэль
[02:00:33.560 --> 02:00:40.440]  кольц кто изобрел кольт остается загадкой да ну по крайней мере по этому фильму там википедии
[02:00:40.440 --> 02:00:58.560]  это наверно знает а рогон а рогон сисилия вот нет не надо ну ну вы знаете там по моему
[02:00:58.560 --> 02:01:06.280]  и через они там как бы знаете не эти все существа не о том чтобы изобретать дикартовые деревья да как
[02:01:06.280 --> 02:01:10.960]  это называется да и собрали сейфы и пошли там наносить котевки власти это собрал за их добрый
[02:01:10.960 --> 02:01:16.720]  волшебник да что называется даггер да где-то за стенкой двое ученых изобретали дикартовый
[02:01:16.720 --> 02:01:27.600]  дерево да нет почему не не и вставил между ними гипофиз а твой так это уже булгаков пошел да
[02:01:27.600 --> 02:01:45.360]  вот так вот и так сплит давай ну нет по факту нет вот мы сейчас для удобства считаем что мерж
[02:01:45.360 --> 02:01:52.720]  это вот у нас то есть нам даны два дерева и ключиками и вот элемент между ними конечно же если вам
[02:01:52.720 --> 02:01:59.520]  нужно сделать мерш двух деревьев без ключика то да вы там достаёте просто оттуда аккуратненько
[02:01:59.520 --> 02:02:06.000]  ключик и сморчу эти но правда это уже происходит не за от вот там разности высота реально залазали
[02:02:06.000 --> 02:02:16.240]  тут уже без вариантов вот но и просто именно в таком виде это нам пригодится потому что давайте
[02:02:16.240 --> 02:02:24.800]  попробуем теперь сплит сделать в таком виде то есть вот не в таком а вот в таком то есть сплит
[02:02:24.800 --> 02:02:33.440]  от строчки длины n и к это значит бой говорит что мы хотим получить массивчик длины к-1 собственно
[02:02:33.440 --> 02:02:44.640]  вот этот вот к-т элемент и массивчик n-к с сохранением порядка естественно вот такая у нас
[02:02:44.640 --> 02:02:55.960]  мистическая цель вот причем более того да нам может повезти нам везет нам сильно очень повезет
[02:02:55.960 --> 02:03:05.280]  если этот элемент находится в корне потому что если этот этот мистический элемент с давайте
[02:03:05.280 --> 02:03:20.480]  его цена звать если он находится в корне вот так и бороду еще рисуем да так то жила было ц
[02:03:20.480 --> 02:03:34.480]  но вот нет тут как генту линукс да вы можете сделать все и вы будете делать все пока вы
[02:03:34.480 --> 02:03:40.360]  все не сделаете как бы ничего работать не будет поэтому все-таки придется довести то есть
[02:03:40.360 --> 02:03:45.160]  конечно идейно понятно что делать да безусловно то есть давайте мы тогда распиливаем эту вершину
[02:03:45.160 --> 02:03:50.840]  на так сказать две вершины вот с этими ключами этими детьми и этими ключами этими детьми между
[02:03:50.840 --> 02:03:57.400]  ними остался вот этот элемент ну вот собственно вот ответы состоялся но просто к тому что это
[02:03:57.400 --> 02:04:03.960]  распиливание корни то есть это мистическую операцию распиливание корня делать придется еще
[02:04:03.960 --> 02:04:09.640]  кстати мистическая подлянка будет еще заключаться в том что вам придется тут еще сзшку пересчитать
[02:04:09.640 --> 02:04:15.280]  используя так что возможно вам придется в вершине чтобы лишних скачек не делать еще хранить сзшки
[02:04:15.280 --> 02:04:26.600]  всех детей напоминаю в корне в корне может быть меньше чем t-1 ключика
[02:04:26.600 --> 02:04:35.000]  напоминаю нет тут экзотический случай тут другой экзотический случай тут бывает если
[02:04:35.000 --> 02:04:47.320]  это вершинка с краю вот нет говорим что ну вы говорите что вот вот у вас тут есть порядок да
[02:04:47.320 --> 02:04:51.840]  вы тут можете типа аналог инордор отхода запустить так вот я хочу чтобы эта вершина в этом инордор
[02:04:51.840 --> 02:05:02.480]  отхода была катой ну да но но проговорить стоит потому что как бы скажем так тут может наступить
[02:05:02.480 --> 02:05:08.960]  разрыв шаблона называется или как говорит или перефразирует там или как это перефразирует
[02:05:08.960 --> 02:05:24.800]  классик тот может немножко кокнуть вот но да уже знаете да вот вот это я вот на это хочу
[02:05:24.800 --> 02:05:31.800]  обратить внимание нигде не прописано что эти массивы обязаны быть одинаковой глубины в общем-то
[02:05:31.800 --> 02:05:37.480]  на уровне интерфейса никто даже не то есть на уровне интерфейса вы вообще не знаете что такой
[02:05:37.480 --> 02:05:44.800]  глубина потому что на уровне интерфейса у вас есть мистическая структура данных там которая может
[02:05:44.800 --> 02:05:54.320]  так и называется там я не знаю там clever строка там я не знаю но вот или там умный стринг там я
[02:05:54.320 --> 02:05:59.720]  не знаю шо шо в общем но или там переставляйте джонглируйте словами как хотите я не знаю то
[02:05:59.720 --> 02:06:05.080]  есть clever строка и у нее есть интерфейс она умеет делать сприт умеет делать мерш умеет найти
[02:06:05.080 --> 02:06:12.440]  там как элемент ну и так далее и тому подобное на уровне интерфейса вы вообще кстати это да это
[02:06:12.440 --> 02:06:16.680]  важно кстати когда вы будете там когда вас будете готовить код код ревью у вас как бы и код должен
[02:06:16.680 --> 02:06:25.840]  удовлетворять таким требованиям кстати да да будет вот тем более знаете вот так как вы да с точки
[02:06:25.840 --> 02:06:31.880]  зрениях тех самых олимпиад кстати за которые вас тоже теперь зачет будет да ну то есть ладно там
[02:06:32.280 --> 02:06:36.640]  честно скажу пока конечно мало вероятны что мы там будем проводить код ревью хотя конечно мы еще
[02:06:36.640 --> 02:06:43.800]  подумаем а что такое у вас того в киша его ввели уже много лет назад
[02:06:43.800 --> 02:07:01.680]  да я получил минус балл за употребление инициативных слов во время занятия
[02:07:01.680 --> 02:07:13.920]  да как бы все-таки не нужно управлять все-таки это как бы это по всем причинам вода тут а занятия
[02:07:13.920 --> 02:07:18.680]  тут девушки и на камеру соответственно да я не знаю какая из этих причин важнее мне кажется
[02:07:18.680 --> 02:07:32.000]  каждый из них достаточно чтобы заработать пожизненный срок воскопа не тот шаблон вот так вот
[02:07:32.000 --> 02:07:38.880]  так вот значит соответственно но вот но это не но так конечно нет реально в олимпиадах конечно
[02:07:38.880 --> 02:07:43.680]  дамы там в ровно по этим причинам придираться не будет но хотя в некоторых случаях что в сложных
[02:07:43.680 --> 02:07:49.800]  задачах на самом деле как бы имена называется гадость кодить скажем так обычно лучше не надо
[02:07:49.800 --> 02:07:54.560]  то есть лучше писать как бы красивый упрошенный код вот с черными ящичками где как бы вне дикартовы
[02:07:54.560 --> 02:07:58.760]  дерева вы не думаете о том как устроено дикартовы дерева а внутри дикартовы дерева вы не думаете
[02:07:58.760 --> 02:08:06.800]  о том как его использовать но это сложных задача как бы лучше писать так просто вы просто уменьшаете
[02:08:06.800 --> 02:08:21.080]  вероятность ошибки бывает но по-разному вы знаете но тут нет но это конечно да но просто тут
[02:08:21.080 --> 02:08:26.080]  еще компенсируется тем что да там конечно крайне редко вам дадут еще там сложную задачу в которой
[02:08:26.080 --> 02:08:30.840]  нужно будет реализацию умирать обеими ногами но то есть обычно задачи на реализацию она в первую
[02:08:30.840 --> 02:08:36.360]  очередь задачи на реализацию то есть знаете там ну классическая такой задачи вот я не знаю
[02:08:36.360 --> 02:08:45.160]  есть вот моих любимых задач в этом направлении знаете какая смотрите данку в пространстве нет
[02:08:45.160 --> 02:08:50.560]  трехмерным трехмерным все нормально не дам да ну что угодно там можно и пролепить а может хоть
[02:08:50.560 --> 02:08:55.520]  пролепить может доход много граней господи только не только небольшого количества граней там по
[02:08:55.520 --> 02:09:02.360]  мобу там можете считать что 10 20 максимум 50 и есть лампочка вне многогранника найдите
[02:09:02.360 --> 02:09:13.600]  освещенную площадь поверхности этого многогранника это же как нектое константа умножить ну да нет
[02:09:13.680 --> 02:09:19.000]  это задача это задача где-то нашел по моему где-то там по моему в каких-то контестах 2007 года
[02:09:19.000 --> 02:09:33.760]  но там в той задачи реально кубик был если что так что не прием но повернутый там естественно а
[02:09:33.760 --> 02:09:38.960]  может ну или выпукло но это не важно ну ладно очень детально просто суть в том что нет понятно
[02:09:38.960 --> 02:09:42.960]  что это идейно понятно но как бы суть том что как бы это надо вот реально аккуратно кодить
[02:09:42.960 --> 02:09:49.880]  то есть аккуратно кодить и потратить на это явно не 20 и не 30 скорее всего не 40 минут вот
[02:09:49.880 --> 02:09:57.360]  нет но при грамотной тренировке конечно вашего кодера может вы конечно и начал
[02:10:12.960 --> 02:10:20.400]  а я спорно там еще по моему там было а возможно было два кубов о да я сказал там было два куба по
[02:10:20.400 --> 02:10:29.120]  моему да нет но они не пересекаются но конечно отбрасывать тень могут там возможно даже задача
[02:10:29.120 --> 02:10:37.560]  была там найдите площадь тени даже то есть нет там как бы понятно что это идейно все понятно но
[02:10:37.560 --> 02:10:43.720]  как бы вам придется писать там действительно проекцию там это у многограничия там это это кубика
[02:10:43.720 --> 02:10:54.520]  на кубик там еще их там может освещение точка которые вне всего да но я привожу задачи не
[02:10:54.520 --> 02:10:58.800]  в пример того как что сложные математические задачи я привожу в пример задачи в которой как
[02:10:58.800 --> 02:11:03.440]  бы это сложно сделать именно практически то есть вам все это придется написать
[02:11:07.560 --> 02:11:16.320]  в 3d 3d спрессы вот это просто фишка то что вам надо просто да так вам просто все это надо
[02:11:16.320 --> 02:11:21.160]  написать и как бы нигде не набар и главное грамотно использует то есть это вот хороший пример что
[02:11:21.160 --> 02:11:24.440]  там вот действительно вот тут как раз вот подход что вот разбить все на маленькие функции
[02:11:24.440 --> 02:11:28.880]  каждый решает свою локальную задачу соседа не вмешивается это вот прям то есть тот подход
[02:11:28.880 --> 02:11:36.040]  который здесь вот становится прям вот максимально очевидно почему писать надо именно так вот так
[02:11:36.040 --> 02:11:42.200]  что тут вот когда вот то есть это понятно что там то есть это из разряда прошел геометрия
[02:11:42.200 --> 02:11:48.620]  вообще большая часть геометрии из разряда понятно что пока вы не сядете это писать то он
[02:11:48.620 --> 02:11:53.240]  вот потом выяснится да то есть там два варианта да либо надо было тренироваться это реально
[02:11:53.240 --> 02:11:57.960]  писать либо на самом деле изучать как это писать правильнее потому что может быть просто другой
[02:11:57.960 --> 02:12:04.520]  алгоритм за ту же асимптотику, но пишет в десять раз проще, вот, так что тут, конечно, такое.
[02:12:04.520 --> 02:12:14.280]  Вот, так, что у нас дальше? Вот, так вот, значит, это был, значит, смотрите, экзотический случай,
[02:12:14.280 --> 02:12:20.000]  значит, еще раз вернемся, что если у нас ключик, у нас есть крайний, но, как мы уже сказали,
[02:12:20.000 --> 02:12:24.960]  здесь нам никто не сказал, что вот эти деревья обязаны быть в одинаковой глубины, более того,
[02:12:24.960 --> 02:12:31.640]  если тут, скажем, элементов сильно меньше, чем здесь, прям, значительно меньше, то, как бы,
[02:12:31.640 --> 02:12:35.640]  глубины заведомо будут различаться, очевидно, если мы говорим, конечно, обе деревья, да, и,
[02:12:35.640 --> 02:12:39.640]  в общем-то, о любом. То есть, ну, если тут три элемента, а тут три миллиона, три, то уж,
[02:12:39.640 --> 02:12:44.240]  наверное, глубина будет различаться, правда? Там, в любом более-менее адекватном дереве.
[02:12:44.240 --> 02:13:03.040]  Да и неадекватном тоже. А, мы если не храним, то, но вот придется хранить. Другой вопрос,
[02:13:03.040 --> 02:13:07.840]  что хранить ее можно не в каждой вершине, а только вот у вас есть, вот у вас есть структура данных
[02:13:07.840 --> 02:13:15.080]  B дерева. И храните вы два параметра. Первый – это указать вот этот ID шник корня,
[02:13:15.080 --> 02:13:24.800]  второй – глубина. Этого вам хватит. То есть, там, аккуратно это поддержать, вам удастся без труда.
[02:13:24.800 --> 02:13:34.000]  Вот. Так вот. Ну вот, со сплетами мержами разобрались. Если элемент, выпиливаем элемент,
[02:13:34.000 --> 02:13:46.480]  находится в корне. А что делать? А что делать? Если выпиливали элемент, выпиливали вы,
[02:13:46.480 --> 02:13:57.120]  либо вылипали. Короче, вот этот вот элемент посередине, он окажется не в корне.
[02:13:57.120 --> 02:14:07.400]  Че ты в сисюке плакать хочешь уже? Не знаю. Как-то твоим образом, как-то не сильно,
[02:14:07.400 --> 02:14:14.680]  честно говоря, там метчится. Если на каждую проблему плакать,
[02:14:14.680 --> 02:14:22.680]  знаешь, это как бы называется, проблема не решится от этого. Не, ну как сказать,
[02:14:22.680 --> 02:14:29.840]  если ты, конечно, вы не младший из сестер, которая прилетела обратно на остров,
[02:14:29.840 --> 02:14:40.800]  а там от чудовища уже от расстройства умерла, тогда там слезы внезапно помогают. Да, ну вот.
[02:14:40.800 --> 02:14:57.440]  Да, господи. Зачем плакать, господи, сессия еще далеко, в конце концов. Да и то, в общем-то.
[02:14:57.440 --> 02:15:04.280]  Мы амортизируем, а плакаем. Мы сразу переходим к результату. А, плакать, ну да.
[02:15:04.280 --> 02:15:13.280]  Мы решили предупредить другой беда. Ну я предпочитаю, ну как раз. Ну да-да-да,
[02:15:13.280 --> 02:15:18.280]  ну правда. А, ну тогда это когда мы плачем, мы говорим это, забиваем гвозди в голову,
[02:15:18.280 --> 02:15:29.920]  получается, да. Ну окей, хорошо. Хотя это хорошо, когда я говорю плакать, я подразумеваю
[02:15:29.920 --> 02:15:35.800]  забить гвозди в голову, да. Как говорится, да. Не, хорошо, так кому-то можно, да, хорошо это будет
[02:15:35.800 --> 02:15:41.000]  звучать, да. Как говорится, да, но если ты еще раз так сделаешь, тебе придется поплакать,
[02:15:41.000 --> 02:15:50.720]  я прослежу. То есть так это будет звучать как-то, да. Ну ладно. Так вот, значит, смотрите,
[02:15:50.720 --> 02:15:56.400]  предположим, что вы решили удалить, решили делать сплиты, но неожиданно выяснилось, что вот этот
[02:15:56.400 --> 02:16:01.760]  с-это элемент, то есть вот этот элемент с, который катый, он находится где-то вот в этом поддереве.
[02:16:01.760 --> 02:16:22.600]  Тогда, значит, мы делаем весьма неожиданный финт ушами. Ну если оно потом будет адекватной высоты.
[02:16:22.600 --> 02:16:30.240]  Сейчас давайте вот аккуратно. Значит, делать будем так. Мы отсплитим аж два поддерева, то что слева и
[02:16:30.240 --> 02:16:41.960]  то, что справа. И останутся еще, собственно, у нас вот эти два ключика. И теперь, а дальше мы,
[02:16:41.960 --> 02:16:47.880]  ну типа рекурсивно, на самом деле нет, будем сплитить теперь вот эти деревья, вот это дерево.
[02:16:47.880 --> 02:16:57.040]  Ну что будет получаться дальше, давайте. Тут я даже немножко разверну рекурсию. Так,
[02:16:57.040 --> 02:17:02.320]  вот давайте сразу рассмотрим случай, если у нас как бы нам захочется отправиться в край. Но ничего
[02:17:02.320 --> 02:17:07.920]  страшного не будет. Значит, мы просто будем спитить, значит, у нас просто справа тут дерева не будет,
[02:17:07.920 --> 02:17:15.200]  а слева будет. Ну, значит, да, будем с этим чуть позже разбираться. Ну, слева, естественно,
[02:17:15.200 --> 02:17:20.560]  все симметрично. Да, то есть вот тут у нас, в этом дереве у нас. Давайте, ну я давайте еще
[02:17:20.560 --> 02:17:25.480]  вот этот случай рассмотрю, когда мы там идем куда-нибудь вот сюда, но здесь тоже все понятно.
[02:17:25.480 --> 02:17:34.840]  Чего? Абсолютно то же самое. Просто у нас одного из этих вот деревьев, которые у нас тут возникали,
[02:17:34.840 --> 02:17:41.320]  здесь просто нет. А из того, что вот если у нас справа ничего нет, ну значит справа ничего не
[02:17:41.320 --> 02:17:45.480]  будет. А из того, что слева, значит, мы создаем вот это вот дерево, только без вот этого элементика.
[02:17:45.480 --> 02:17:52.680]  Вот, то есть вот здесь так, если тут вот опять мы оказались где-то в середине и тут надо идти
[02:17:52.680 --> 02:18:01.520]  куда-нибудь сюда, ну значит снова пилим вот так вот, вот так вот, радуемся. Хорошо. Чего еще?
[02:18:01.520 --> 02:18:24.560]  Чего? А, ну могло быть такое, хорошо. Нет, ну почему нет, какая разница? Ну, ничего страшного,
[02:18:24.560 --> 02:18:31.760]  да, ну хорошо, да, если тут ключиков нету, то значит, ну мало или там t равно 2 еще бывает. Да,
[02:18:31.760 --> 02:18:38.960]  так что, ну да, могло быть такое, хорошо. Значит, к чему нас это приводит? Ну, наконец, в какой-то
[02:18:38.960 --> 02:18:45.400]  момент мы наконец доходим до ситуации, когда у нас наш ключик наконец нашелся, но у этой вершинки
[02:18:45.400 --> 02:18:51.360]  может быть борода, а может и не быть, там как повезет. Но здесь соответственно тоже уже делаем
[02:18:51.360 --> 02:19:02.640]  финальный распил, по крайней мере финальный для спуска вниз. И вот теперь начинается достаточно
[02:19:02.640 --> 02:19:10.280]  интересная вещь, потому что обратите внимание, то есть у нас теперь, да, то есть да, нас попросили
[02:19:10.280 --> 02:19:23.840]  разбить дерево на два дерева, один ключик. Мы перевыполнили план. Вот, у нас много, у нас теперь,
[02:19:23.840 --> 02:19:28.520]  да, у нас теперь много деревьев, вот так вот. Вот.
[02:19:53.840 --> 02:20:06.240]  Ну вот, да, ну вот действительно интересно, что произошло следующее, что когда, то есть как бы у нас
[02:20:06.240 --> 02:20:12.280]  есть вот наш супер наш ключик c, то что слева, то есть заметим, то высоты у нас аккуратненько убывают.
[02:20:12.280 --> 02:20:20.240]  Ну ладно, да, нет, разница может быть какая угодно, потому что мы тут справа могли сколько
[02:20:20.240 --> 02:20:28.000]  угодно идти в левое поддерево. Да, мы каждый раз получали два, в смысле, у нас разница между
[02:20:28.000 --> 02:20:33.560]  соседними будет, кажется, максимум единицу, потому что мы когда сплитили дерево, скажем, вершины h,
[02:20:33.560 --> 02:20:41.640]  мы получали дерево вершина h и дерево вершина h минус 1. Ну не факт, если мы рассматриваем вот эту
[02:20:41.640 --> 02:20:47.640]  последствия деревьев, которые оставались слева, тут разница может быть какая угодно. Ну какая
[02:20:47.640 --> 02:20:54.240]  угодно. Нет, слушай, ну в смысле вполне возможно, когда мы отпилили это дерево, потом значит у нас тут
[02:20:54.240 --> 02:20:58.720]  образовалось поддерево и мы идем влево, влево, влево, влево и слева ничего не остается все время,
[02:20:58.720 --> 02:21:03.120]  то есть поэтому каждое следующее может быть какое угодно. То есть естественно, если мы померзим,
[02:21:03.120 --> 02:21:08.640]  отсортируем по высоте не только эти поддеревья, но и то, что оказалось справа, то да, скорее всего да.
[02:21:08.640 --> 02:21:17.040]  А, точно, мы же не хотим их местами менять. Вот, да, это важно. Вот, то есть вот тут какая-то такая
[02:21:17.040 --> 02:21:26.040]  красота. Вот, ну ладно, еще мелкая оговорка, что кажется, из того, что мы, кажется, обсудили раньше,
[02:21:26.040 --> 02:21:30.760]  следует, что, кстати, вот эти первые два дерева вполне могут быть и одинаковой глубины, кстати.
[02:21:30.760 --> 02:21:41.200]  Чего? Ну вот, но в целом для нас важно, что они хотя бы не убывают.
[02:21:41.200 --> 02:21:52.960]  А, не убывают? Пардон, ну ладно, не возрастают. А это не важно. Ну, они даже не просто не возрастают,
[02:21:53.560 --> 02:22:03.280]  но важно так, что они все-таки строго убывают, ну кроме вот этого последнего. Потому что после
[02:22:03.280 --> 02:22:13.240]  создания, ну смотрите, тут-то, хотя тоже, ну вот, нет, ну как вам сказать, смотрите, вот предположим,
[02:22:13.240 --> 02:22:21.200]  что вот жила была вершина, и вы тут перешли в поддерево высоты аж. Вот это вот то, что
[02:22:21.200 --> 02:22:27.160]  отпилено слева, какой высоты? Оно может быть аж плюс один, если вот тут слева были какие-то
[02:22:27.160 --> 02:22:34.160]  ключи, да, или если это оказалось вторым в списке, да, то есть если это первый ключик, а это дерево
[02:22:34.160 --> 02:22:41.480]  второе, то тут оказалось дерево тоже аж, то есть могло быть аж, могло быть аж плюс один. Ну,
[02:22:41.480 --> 02:22:51.360]  ну можно и так сказать. Да, но заметим, ну ладно, для нас, в самом деле, будет важно следующее,
[02:22:51.360 --> 02:23:02.120]  что каждое следующее дерево, оно не соответственно, не больше предыдущего. Понимаете, да? По глубине,
[02:23:02.120 --> 02:23:30.560]  конечно. Ну, мы, а мы их сюда выписываем. Ну, было вот такое дерево. Вот, стало вот такое.
[02:23:30.560 --> 02:23:40.720]  Вот такое дерево. Ну, если вот это, значит, стало вот такое дерево, такой ключик, вот такое дерево,
[02:23:40.720 --> 02:23:47.560]  в котором мы еще пошли курсивно. Вот такой ключик и еще вот такое дерево. Ну, в данном случае так.
[02:23:47.560 --> 02:23:55.920]  Вот такая вот идея. Да, то есть высоты здесь, конечно, могут быть такими относительно,
[02:23:55.920 --> 02:24:06.520]  там, то есть каждое следующее дерево имеет высоту не больше предыдущего. Вот, понятен принцип, да?
[02:24:06.520 --> 02:24:14.160]  Ну, теперь возникает такая идея. Ну, основная идея теперь заключается в том,
[02:24:14.160 --> 02:24:19.320]  чтобы на самом деле просто пробежаться теперь в возрастающем порядке, их аккуратно теперь смершить.
[02:24:19.320 --> 02:24:26.640]  То есть, так как мы смерживать будем через заданный элемент, обратите внимание,
[02:24:26.640 --> 02:24:31.040]  то получается, каждый веж будет работать не за логарифом, а за разность высот и,
[02:24:31.040 --> 02:24:40.920]  получается, суммарно получится адекватный логариф. Ну, а это, ну, это не особо принципиально,
[02:24:40.920 --> 02:24:53.160]  потому что одинаковые высоты мы всегда, одинаковые мы сливаем за от единицы. Ну, да, но там, смотрите, как это можно делать.
[02:24:53.160 --> 02:24:58.480]  Можно делать аккуратно, можно говорить, что если у вас образовалось два дерева одинаковой высоты,
[02:24:58.480 --> 02:25:05.360]  да? Ну, допустим, да? Так, что, где? Вот.
[02:25:05.360 --> 02:25:13.360]  Нет, просто говорим, что у нас мерч за разность высот плюс один, и плюс один выносится в количество, которое логарифом.
[02:25:13.360 --> 02:25:14.880]  Ну, типа того, да.
[02:25:15.880 --> 02:25:27.080]  Дмитрий, вы уже сказали, что делать вот, например, мы хотим, на порез, допустим, корень, мы удаляем, что у нас, если размер станет слишком маленьким.
[02:25:27.080 --> 02:25:32.240]  Сейчас какой размер? У корня размер может быть маленьким.
[02:25:32.240 --> 02:25:34.480]  У корня, но потом же внизу даже сам.
[02:25:34.480 --> 02:25:42.160]  Так, а это не важно, когда вы тут сплитите вот эти вот вершинки, они же корнями становятся, то есть, как бы, то есть,
[02:25:42.160 --> 02:25:48.640]  когда вы тут вот эту вершину распиливаете, она, по сути, уже корень, потому что то, что сверху, уже распалось.
[02:25:51.640 --> 02:25:56.880]  Поэтому то, что там малый вершин, нам плевать. Да, вот в каждом из этих орней, может быть, малый вершин, все нормально.
[02:26:00.880 --> 02:26:05.080]  То есть, это мы потом в мерже будем потом об этом думать.
[02:26:06.000 --> 02:26:17.000]  Чего? Ну, может получиться, ну, нет, ну, может получиться, ну, вообще можно подумать, смотрите, нет, смотрите, на самом деле все гораздо проще.
[02:26:17.000 --> 02:26:30.640]  То есть, на самом деле, то есть, как сделать вот тут классический алгоритм, да, вот, то есть, как бы нам теперь аккуратненько избавить, мы знаем, что у нас все высоты не убывают, да.
[02:26:31.200 --> 02:26:44.200]  Знаем такое? А еще мы знаем, что когда вы сливаете два дерева одинаковой высоты h, то получится дерево либо высоты h, либо дерево высоты h плюс один. Согласны?
[02:26:51.200 --> 02:26:54.200]  У каждого дерева мы в явном виде храним высоту.
[02:27:01.200 --> 02:27:03.200]  Мы не храним высоты в вершинах, только в дереве.
[02:27:04.200 --> 02:27:13.200]  Ну, для каждого глобального дерева храним высоту, мы ее там можем поддерживать. Вот так. Ну, можете, если вы включите совсем олимпиадник, можете в каждой вершине высоту поддерживать.
[02:27:14.200 --> 02:27:22.200]  Но по факту просто этого не нужно. Так вот, так вот, поэтому, значит, как теперь аккуратненько слить, значит, это все?
[02:27:23.200 --> 02:27:29.200]  Ну, во-первых, давайте сведем задачу к ситуации, когда у нас все высоты строго убывают.
[02:27:31.200 --> 02:27:32.200]  Чего?
[02:27:37.200 --> 02:27:47.200]  Ну, в смысле, ну как сказать, вот ситуация была такая, вот могло возникнуть так, что вы вот отпилили дерево h и пошли рекурсивно в дерево h, да?
[02:27:49.200 --> 02:27:57.200]  Так вот, а в этом дереве h могло оказаться много-много-много ключиков, и вы тут где-то посредине пошли. И тогда вот у этого дерева вполне себе высота будет h.
[02:28:01.200 --> 02:28:04.200]  Мы отпилили h, у этого h.
[02:28:05.200 --> 02:28:07.200]  Да, потому что вот с этими ключами, да.
[02:28:10.200 --> 02:28:17.200]  То есть, да, то есть, видимо, три подряд таких ситуаций, видимо, уже не будет, у следующего дерева уже точно будет глубина h-1.
[02:28:17.760 --> 02:28:23.760]  Ну, можно даже, смотрите, можно даже аккуратнее сказать.
[02:28:24.760 --> 02:28:34.760]  То есть, мы пробираемся по числам типа h, h-1, h-2 и так далее, h- там, допустим, какой-нибудь z, да, ну, мы там до z-а какого-то проходим, да.
[02:28:35.760 --> 02:28:40.760]  И, значит, на каждой из этих итерации мы сплитим дерево вот такой высоты.
[02:28:41.220 --> 02:28:53.220]  То есть из каждого из них может получиться, тут может получиться от h-1 до h, тут может получиться от h-2 до h-1, тут может получиться от h-3 до h-2, ну и так далее.
[02:28:57.220 --> 02:29:01.220]  А может и не получится, да. Но если получится, то hier высоты такие.
[02:29:02.220 --> 02:29:09.220]  То есть, как бы, да, поэтому, видите, тут как бы, да, совпасть случайно два идущих подряд могут, здесь и идущих подряд вышли уже не могут.
[02:29:09.220 --> 02:29:24.100]  Так что вот такая красота получается.
[02:29:24.100 --> 02:29:46.980]  Вот, так вот они эти элементы, мы их тоже как бы в список пишем.
[02:29:46.980 --> 02:29:57.300]  Нет, нет, у нас не совсем, у нас как бы слева получилось дерево элемент и справа дерево элемент.
[02:29:57.300 --> 02:30:02.020]  То есть по сути у нас было так, вот у нас есть этот будущий цетто элемент, у нас сначала
[02:30:02.020 --> 02:30:08.100]  образовались вот эти два дерева этот элемент, потом там вот эти два, ну и так далее. То есть как бы
[02:30:08.100 --> 02:30:24.620]  слева это идет и справа. Вот, поэтому одинаковые могут быть, но только желательно сделать так,
[02:30:24.620 --> 02:30:32.740]  чтобы высоты были строго убывающие. Ну, давайте поймем, предположим, что нам повезло и высоты
[02:30:32.740 --> 02:30:40.420]  строго убывающие. Тогда идея простая, тогда давайте просто мержить вот эти два, результат с вот этим,
[02:30:40.420 --> 02:30:48.580]  результат с вот этим. И тогда заметим, что когда мы сливаем вот это дерево, скажем, с каким-то
[02:30:48.580 --> 02:30:53.740]  деревом, которое по высоте не больше чем это, то результат получится не более чем вот это плюс
[02:30:53.740 --> 02:31:04.700]  один, то есть не более чем вот это, правда? Понимаете, да? Нет, поэтому получается, если они по парно
[02:31:04.700 --> 02:31:10.420]  различной высоты убывающие, то как бы слияние получается, что у нас никакое, просто я для чего это
[02:31:10.420 --> 02:31:16.940]  делаю? Для того, чтобы у нас по высоте тут тот, кто справа не обгонял то, что слева. Для чего это
[02:31:16.940 --> 02:31:22.140]  делается? Это делается для того, чтобы мы гарантировали, что слияние вот тут двух соседних происходит
[02:31:22.140 --> 02:31:32.900]  от разности высот этих деревьев. Понимаете, да? Но плюс один, понятно. Но просто если тут будет у вас
[02:31:32.900 --> 02:31:37.740]  в сумме помимо единичек, когда будет логарифм, будет это минус это, плюс это минус это, плюс это
[02:31:37.740 --> 02:31:43.660]  минус это, то как бы разности телескопически сократятся и останется только там вот эта высота
[02:31:43.660 --> 02:31:50.300]  минус вот эта высота. То есть таким образом получается, то есть конкретно вот эти деревья,
[02:31:50.300 --> 02:31:56.180]  если они по парно различных высот, то мы их аккуратненько, то есть по парно различных,
[02:31:56.180 --> 02:32:04.540]  точнее строго убывающих высот, то мы их аккуратненько залогарифм и смёрзли обратно. Вот, понятно, да?
[02:32:04.540 --> 02:32:13.900]  Но что делать, если у нас бывают всё-таки одинаковые высоты? Тогда у нас начинает быть обгон,
[02:32:13.900 --> 02:32:21.020]  правда? То есть тогда возникает действительно такая мелкая проблема, что там может так
[02:32:21.020 --> 02:32:25.540]  случиться, что здесь высота какая-нибудь там h, а тут стало h плюс один в результате, правда?
[02:32:25.540 --> 02:32:31.300]  Причем, более того, если за этим не следить, то как бы по крайней мере теоретически, там может
[02:32:31.300 --> 02:32:36.020]  быть h плюс 2, h плюс 3 и так далее, то есть там уповать на то, что обгон будет всегда не более,
[02:32:36.020 --> 02:32:42.500]  чем на константу, поэтому это нам по барабану, тут нельзя. Обгон может оказаться и намного. И как
[02:32:42.540 --> 02:32:48.380]  бы там долог квадрата не дошло. Сначала равные, потом выяснилось, что тут h,
[02:32:48.380 --> 02:32:52.420]  тут h плюс один, мы их слили, получили h плюс два, потом там дальше обгон пошёл, ну и так далее.
[02:32:52.420 --> 02:33:00.340]  Ну, возможно, математически можно там додумать и аккуратно показать, что такого не случится,
[02:33:00.340 --> 02:33:09.620]  но более надёжно тогда сделать так, на самом деле. Смотрите, просто сначала идём справа налево и
[02:33:09.620 --> 02:33:15.980]  добавляем все эти деревья, так сказать, в стек. При этом следим, что в стеке попарно различные все
[02:33:15.980 --> 02:33:23.300]  элементы. Ну, если обнаружилось, что новый элемент равен предыдущему, значит мы их сливаем,
[02:33:23.300 --> 02:33:29.300]  то есть достаем тот предыдущий стека, сливаем и пытаемся добавить в стек. Если выяснилось,
[02:33:29.300 --> 02:33:33.740]  что там оказалось тоже равный элемент, потому что этот типа больше, то сливаем его и так далее.
[02:33:33.740 --> 02:33:44.700]  Чего? Ну, не совсем. Ну, тут скорее как в стеке, потому что фибоначевые-то мы в явном виде для каждого
[02:33:44.700 --> 02:33:48.540]  размера хранили, а тут мы, к сожалению, у нас порядок принципиальный. Фибоначевые куча в
[02:33:48.540 --> 02:33:53.460]  каком порядке мы сливали деревья, нам по барабану было. Ну, так и мы там могли поменять местами,
[02:33:53.460 --> 02:33:58.380]  а тут вот мы их менять местами не можем. Но как бы это неважно, потому что мы же аккуратно
[02:33:58.380 --> 02:34:03.460]  всё равно следим за тем, что у нас никто никого не обгоняет никогда. Вот, и в результате получится,
[02:34:03.460 --> 02:34:08.060]  что в стеке у нас лежат деревья теперь строго убывающие и задать условия предыдущие.
[02:34:08.060 --> 02:34:26.220]  Получается очень удобно. Вот. В такой версии никаких потенциалов нет. Ну, не знаю.
[02:34:26.220 --> 02:34:40.060]  Нет, ну когда сливаем, то да, но просто как бы если... Просто там проблема в том,
[02:34:40.060 --> 02:34:44.500]  что телескопической суммы нет, потому что если обгон справа, то как бы у вас теперь слияние
[02:34:44.500 --> 02:34:52.140]  происходит не за левое минус правое, а за правое минус левое. Ну, не важно. Вот. Хорошо.
[02:34:52.140 --> 02:35:04.420]  Не обязательно. Нет, мы используем, во-первых, последний, только последний элемент и то,
[02:35:04.420 --> 02:35:10.300]  что у нас есть. Если они оказались одинаковых высот, мы достаем этот элемент из стека,
[02:35:10.300 --> 02:35:14.860]  сливаем и теперь нам снова нужен последний элемент из стека, но который был перед этим.
[02:35:14.860 --> 02:35:20.900]  Нет, наш уже не может оказаться больше, потому что тот строго больше, чем то,
[02:35:20.900 --> 02:35:38.300]  что мы достали. Нет, мы не могли получить, потому что мы доказали уже, что у нас массив все-таки
[02:35:38.300 --> 02:35:46.700]  убывающий. Может быть не строго, но убывающий. То есть у нас не может так оказаться, что изначально
[02:35:46.700 --> 02:35:50.100]  у нас там могут идти два идущих подряд элемента, но каждый следующий не может
[02:35:50.100 --> 02:36:00.700]  оказаться больше предыдущего. Но на единичку больше, да. Но ровно для этого мы этот стек
[02:36:00.700 --> 02:36:06.140]  и вводим. То есть мы аккуратно в стек добавляем эти элементы, причем если мы пытаемся добавить
[02:36:06.140 --> 02:36:12.900]  одинаковый с предыдущим, то мы вместо этого их сливаем и пытаемся рекурсивно добавить результат
[02:36:12.900 --> 02:36:17.620]  объединения. Возможно выяснится, что он равен предыдущим, и тогда мы еще раз объединяем,
[02:36:17.620 --> 02:36:34.620]  ну и так далее и так далее. Так что таким образом, оказывается, что и сплит мы в итоге
[02:36:34.620 --> 02:36:49.660]  сделали за логарифом. Это называется за логарифом. Так, ну а теперь тогда возникает... Так,
[02:36:49.660 --> 02:37:02.660]  какой у нас вопрос возникает? Ну как зачем? Ну как минимум для того, чтобы делать деревья по
[02:37:02.660 --> 02:37:08.380]  неявному ключу, а так же, чтобы делать там... Ну потому что теперь если вы... Так, ну давайте так.
[02:37:08.380 --> 02:37:19.140]  Значит тогда я вам теперь сейчас могу... Ладно, давай задам вопрос пока. Что значит нормальное?
[02:37:19.140 --> 02:37:27.580]  Ну потому что ты будешь добавлять, ты будешь добавлять элементы по очереди.
[02:37:27.580 --> 02:37:40.780]  Ну это глубинаш не превосходит логарифма. Ну глубина оценивается логарифом. Да, по факту,
[02:37:40.780 --> 02:37:49.020]  да, мы все эти мержи делаем за о от разности вот этих вот высот плюс... Чего? Не, ну почему? При
[02:37:49.020 --> 02:37:53.420]  желании можем оценить, но дело в том, что когда мы вызывали сплит, мы заранее не знали,
[02:37:53.420 --> 02:38:01.220]  какие у нас тут высоты будут. Более того, скорее всего, ну да, можно оценивать, конечно,
[02:38:01.220 --> 02:38:07.860]  глубиной вершины С, конечно, где она нашлась, но так как мы заранее не знаем, где она находится,
[02:38:07.860 --> 02:38:18.780]  она абсолютно где угодно может быть при одних и тех же ключах. Ну да, вероятность не так же
[02:38:18.780 --> 02:38:31.260]  оценивается немножко. Ну да, хорошо, все что угодно может быть. Зачем мы все это делали?
[02:38:31.260 --> 02:38:37.180]  Ну ладно, задам более простой вопрос, если вы не все писали дикартячку. Кто когда-нибудь в своей
[02:38:37.180 --> 02:38:52.580]  жизни писал дерево отрезков? Так, так, проблема, да, так, хорошо. Кто писал когда-нибудь дерево
[02:38:52.580 --> 02:39:02.220]  отрезков с прибавлением или присваиванием на отрезки? Так, кто-то уже не уверенно начинает
[02:39:02.220 --> 02:39:16.220]  подавать. Нет, спящий, ну, спит он, спит, да. Ой, о боже. Вот, ну вот, так вот, начнется отречь,
[02:39:16.220 --> 02:39:22.860]  да, все, спасибо, спасибо. Нет, просто попроси, наверное, просто как вы делаете присваивание
[02:39:22.860 --> 02:39:33.020]  на отрезках. Но речь идет о технологии отложенных операций, правда? Вот, то есть это означает,
[02:39:33.020 --> 02:39:37.060]  что вы пользуетесь тем, что вы идете сверху вниз, и у вас есть отложенная операция,
[02:39:37.060 --> 02:39:42.420]  которая говорит, что если я хочу пойти в детей, то прежде чем туда пойти, я протолкну известную мне
[02:39:42.420 --> 02:39:51.140]  отложенную операцию, правда? Если я туда не пойду, я не протолкну. Было такое, да? Ну, то есть,
[02:39:51.140 --> 02:39:56.660]  на уровне идей, то есть, заметим, что если вы это делали в дереве отрезков, то вот, например,
[02:39:56.660 --> 02:40:02.660]  вот в таком б-дереве вы также это можете делать. То есть, с помощью б-дерева вы прекрасно можете
[02:40:02.660 --> 02:40:16.020]  делать те же самые присваивания и прибавления на подотрески, правда? Ну, чего? Почему? Ну,
[02:40:16.020 --> 02:40:20.420]  те же. Ой, ну, те у нас все равно константа. Ну, и потом, да, это отдельный вопрос. Да,
[02:40:20.420 --> 02:40:23.220]  пропихивание отложенных операций в базах данных, это хорошо, конечно.
[02:40:23.220 --> 02:40:28.100]  Кажется, мы можем проталкивать только того сына, в который мы идем, а остальных не проталкиваем.
[02:40:28.100 --> 02:40:41.500]  Того сына, да, того, ну вот. Не, ну, там... Ну, да, да, да. Не, ну, понятно, что... Поэтому я говорю,
[02:40:41.500 --> 02:40:47.700]  в этом месте лучше уже легче включить или пианика, это да. Потому что вряд ли будут там сплит, мерч,
[02:40:47.700 --> 02:40:53.300]  реверс на подотреске делать на базах данных, как-то знаете. Базы данных обычно не для этого пишутся,
[02:40:53.300 --> 02:41:04.980]  ой, не для этого. Ну, бывает. Но просто нет. Если вот отослаться просто к этому, то, во-первых,
[02:41:04.980 --> 02:41:10.420]  на б-дереве теперь это можно прекрасно делать, потому что тоже отложенные операции прекрасно
[02:41:10.420 --> 02:41:17.580]  работают. Но чем это круче деревоотресков? Тем, что теперь все это прекрасно теперь объединяется
[02:41:17.580 --> 02:41:24.820]  с операциями типа вставки, удаления, ну и просто сплита мерча. То есть, если вы там решили в середину
[02:41:24.820 --> 02:41:30.700]  массива еще элемент вставить, то ничего страшного, собственно, никаких проблем. Но более того,
[02:41:30.700 --> 02:41:37.220]  классическая фишка, которая тут появляется, это, конечно, знаменитая задача реверс на подотреске.
[02:41:37.220 --> 02:41:47.540]  Как делать реверс на подотреске? Но, оказывается, замечаем, что реверс это такая же отложенная
[02:41:47.540 --> 02:41:54.620]  операция. Потому что что нужно, чтобы развернуть б-дерево? Надо что делать? Как бы надо развернуть
[02:41:54.620 --> 02:42:03.020]  массив ключей, развернуть массив детей и развернуть всех детей рекурсивно, правда? Поэтому получается,
[02:42:03.020 --> 02:42:07.060]  что, в общем-то, это может быть та самая, то есть, получается, что это прекрасно реализуется как-то
[02:42:07.060 --> 02:42:14.900]  самая отложенная операция. Вот. То есть, получается, что если у вас есть сплит и мерч, который
[02:42:14.900 --> 02:42:19.540]  реализуется сверху, то, получается, у вас есть практически все, что имеет дикартовое дерево. Но,
[02:42:19.540 --> 02:42:26.820]  в отличие от дикартового дерева, теперь у вас будет невероятный с полигарифом, а честный. Вот.
[02:42:26.820 --> 02:42:35.500]  Так что? Ну, можем попробовать обсудить. Но это мы обсудим после перерыва. Итак,
[02:42:35.500 --> 02:42:46.860]  так, ой, зачем я это убираю? Так, господа, вылезаем. Да, мы уже полностью научились делать сплит и мерч для
[02:42:46.860 --> 02:42:54.260]  б-дерева. А теперь возникает такой вопрос. А не можем ли мы случайно, ведь, действительно,
[02:42:54.260 --> 02:43:01.460]  б-дерево как-то сложное дерево с какой-то мегзоапокосной реализацией, а не можем ли мы сделать то же самое в овл-дереве?
[02:43:01.460 --> 02:43:14.140]  А вот давайте подумаем. А вот давайте вот внимательно подумаем. Допустим, у вас есть овл-дерево.
[02:43:14.140 --> 02:43:19.300]  Что такое овл-дерево? Это двоичное, помните, двоичное дерево поиска, где для любой вершины
[02:43:19.300 --> 02:43:26.900]  гарантируется, что разность высот двух под деревья одной и той же вершины не превосходит
[02:43:26.900 --> 02:43:38.100]  единицы в ту или иную сторону. Помните, да? Внезапно, да? А, или там что-то другое интересное, да?
[02:43:38.100 --> 02:43:45.620]  Не, вы убирайте, давайте. Так, ну давайте, ну захлопните, ну, шутя такое. А то понимаете, в чем проблема.
[02:43:45.620 --> 02:43:57.060]  Вы там смотрите, мне тоже становится интересно, и это задерживает лекцию, понимаете. Вот, вот, овл, да.
[02:43:57.060 --> 02:44:07.300]  Итак, значит, итак, теперь внимание, вопрос. Ну, давайте попробуем. Как делать мегж в овл-дереве?
[02:44:07.300 --> 02:44:18.020]  Вот такая загадка. Ну, давайте, чтобы это сделать, давайте скажем, что, да, сливать мы тоже будем через точку.
[02:44:18.020 --> 02:44:27.860]  Ну, то есть тоже будет промежуточный элемент, с которым мы хотим все это слить. Вот, понятно, да?
[02:44:28.260 --> 02:44:37.540]  Сливать. Ну, хорошо, объединять. Нет, нет, не важно. Вот, объединять. А мы можем ее достать, если ее нет?
[02:44:37.540 --> 02:44:43.380]  Ну, как вся, если нет, то достанем и сведем задачу в предыдущий. Ну, просто, как вы догадывали,
[02:44:43.380 --> 02:44:50.580]  сплит-то нам тоже мы будем через вот эту технологию делать. Вот, поэтому, то есть наша задача, как всегда,
[02:44:50.580 --> 02:44:57.300]  если у нас есть два дерева одинаковой высоты и вершинка между ними, то заметим, что мы прекрасно
[02:44:57.300 --> 02:45:04.900]  можем слить деревья за о от единицы, правда? Даже если они отличаются на плюс-минус один, мы все равно
[02:45:04.900 --> 02:45:10.420]  можем провернуть вот такую приятную операцию, правда? И это прям будет работать за о от единицы.
[02:45:10.420 --> 02:45:16.660]  Если они высот h1 и h2, что в этом случае сделать?
[02:45:16.660 --> 02:45:26.500]  Давайте второе подвешивать куда-нибудь внутрь первого. То есть, по первому спускаем, ну, по большему спускаем.
[02:45:26.500 --> 02:45:32.740]  Так, ну да, понятно, что по большему мы спускаемся вправо, и вот, допустим, натыкаемся на какую-то
[02:45:32.740 --> 02:45:41.540]  вот высоту, типа, эта вот высота h2, но тут как повезет. То есть, может, мы наткнулись на дерево высоты h2, может, не наткнулись.
[02:45:41.540 --> 02:45:46.020]  Мы наткнулись, видимо, либо на h2, либо на h2 плюс h1.
[02:45:46.020 --> 02:45:48.020]  Безусловно.
[02:45:48.020 --> 02:45:52.020]  Ну, просто если там подвесить, например, или нет?
[02:45:52.020 --> 02:46:06.020]  Ну, вот. Нет, ну, на самом деле, эта идея оказывается очень простой. Вот, допустим, у нас возникло первое дерево высоты не более, чем h2, давайте для формальности скажем, да?
[02:46:06.500 --> 02:46:16.500]  Тогда идея такая, вместо того, чтобы, значит, мы разрушаем вот это, да, вот так вот. А, давайте вот, у нас же есть цветные маркеры, да.
[02:46:16.500 --> 02:46:24.500]  Так, ух ты, новый общий родитель, да.
[02:46:24.980 --> 02:46:38.980]  Так, давай, а, значит, да, я же вот, да, вот смотрите, у нас же это мы удаляем, а вместо этого объявляем, то есть, правым ребенком вот это, и у них детей подвешиваем вот так.
[02:46:38.980 --> 02:46:46.980]  Но два, две проблемы. Ну, конечно, вот для этой вершины придется пересчитывать там всякие суммы, ну, или шоу у вас там, но это полбеды.
[02:46:47.460 --> 02:46:53.460]  Основная беда заключается в том, что глубина вот этого поддерева увеличилась.
[02:46:53.460 --> 02:46:55.460]  Увеличилась.
[02:46:55.460 --> 02:47:00.460]  Кстати, самое страшное, не обязательно на один, а даже могла увеличиться на два.
[02:47:04.460 --> 02:47:06.460]  А, ну, да.
[02:47:06.460 --> 02:47:16.460]  А, ну, это неважно, потому что, ну, ладно, смотрите, заметим, что было, нет, ровно h2 могло тупо не существовать.
[02:47:16.940 --> 02:47:29.940]  Если обе вершины, нет, у вас два, а, ну, да, нет, я имею в виду, что, короче, если у вас было меньше, чем h2, то левый ребенок, он ровно h2, а у этой вершины будет 100 h2.
[02:47:29.940 --> 02:47:37.940]  Да, то есть, действительно, если тут, да, то есть, если тут меньше h2, то тут заведомо, во-первых, было h2 плюс 1, а вот их конкретно здесь было.
[02:47:37.940 --> 02:47:42.940]  У нас могло не быть h2, у каждой вершины с высотой h, хотя бы один ребенок, высоты h.
[02:47:43.420 --> 02:47:46.420]  Да, но мы-то идем по строго заданному пути, а не по рандомному.
[02:47:46.420 --> 02:47:48.420]  Напоминаю, да.
[02:47:48.420 --> 02:47:55.420]  Да, порядок важен, у нас нет задачи просто взять эти элементы куда-нибудь пихнуть, так-то мы могли бы их в связанном списке хранить, если бы нам был порядок не принципиально.
[02:47:58.420 --> 02:48:07.420]  Поэтому, да, если тут h2 и тут стало меньше, чем h2, нет, ну, тогда заметим, что вместо этого мы можем просто подвесить вот это дерево, тут получается h2 плюс 1.
[02:48:07.900 --> 02:48:14.900]  Но это неверно, что больше ничего не надо делать, потому что тут из h2 плюс 1 превратилось в h2 плюс 2, и, возможно, какие-то повороты нам тут все-таки придется сделать.
[02:48:18.900 --> 02:48:19.900]  А это и неважно.
[02:48:19.900 --> 02:48:33.900]  Главное, что у нас, главное, что если случайно, то есть, мы знаем, что если у нас есть, у какой-то вершины высота увеличилась на 1, причем других проблем нет, да, то как бы там, как бы поворотами, начиная с нее и до корня, мы решить эту проблему умеем.
[02:48:34.380 --> 02:48:40.380]  Ну да, там магическая цепочка поворотов, я бы сказал.
[02:48:40.380 --> 02:48:54.380]  Но это, правда, если тут меньше, чем h2, потому что если тут оказалось равно h2, то здесь, конечно, тут, конечно, как повезет, потому что может нам повезти, и тогда тут окажется, что вот такой везучий случай, когда тут h2 плюс 2.
[02:48:56.380 --> 02:49:02.380]  Тогда, как бы заведомо, тут h2 плюс 1, и тут становится h2 плюс 1, то есть вообще ничего делать не надо буквально.
[02:49:02.860 --> 02:49:09.860]  Но могло так случиться, что тут было h2 плюс 1, а станет h2 плюс 2, и все равно цепочку поворотов делать надо.
[02:49:09.860 --> 02:49:12.860]  А вот если слева меньше, чем h2, то это вот.
[02:49:12.860 --> 02:49:19.860]  А, вот, да, действительно, основная проблема заключается в том, что тут еще могло быть h2 минус 1, тут h2, а мы бах-бах и захотели послевать.
[02:49:21.860 --> 02:49:24.860]  Ну слева сделать повороты, а после этого слевать.
[02:49:25.340 --> 02:49:34.340]  Правда, но правда это будет называться, что мы в этом под деревом высота увеличилась на 1, и значит просто поворота надо делать, начиная не с этой вершины, а с вот этой.
[02:49:36.340 --> 02:49:41.340]  Сейчас, я, может, что-то не понял, откуда мы берем вершину, которая у нас с общим родителем становится?
[02:49:43.340 --> 02:49:49.340]  Вот эту, ну это, ну как сказать, вот эта вершина, это первая вершина на правом пути, которой высоты не более, чем h2.
[02:49:51.340 --> 02:49:53.340]  А мы мержим также через промежуточное.
[02:49:53.820 --> 02:50:09.820]  А, да, вот, то есть, да, мы замечаем, что из прошлого раза мы можем сделать вывод простой, что если мы неожиданно взяли в дереве, выпилили под дерево,
[02:50:10.820 --> 02:50:21.820]  и заменили его под деревом высоты на единичку больше, то оказывается, что, начиная с него, можно делать цепочку поворотов так, что в результате дерево стало абсолютно корректно.
[02:50:22.300 --> 02:50:28.300]  Вот, по сути, мы в прошлый раз ровно это и доказали, там предъявив, собственно, в явном виде цепочку поворотов.
[02:50:30.300 --> 02:50:32.300]  Вот, здесь это тоже вот налицо.
[02:50:34.300 --> 02:50:40.300]  Еще более того, повороты делаются так, что это делается за от разности высот, прям то, что нам надо.
[02:50:41.300 --> 02:50:42.300]  Понимаете, да?
[02:50:43.300 --> 02:50:44.300]  Вот, понимаете?
[02:50:45.300 --> 02:50:46.300]  Вот.
[02:50:47.300 --> 02:50:48.300]  То переча.
[02:50:49.300 --> 02:50:51.300]  А теперь его величество сплит.
[02:50:52.300 --> 02:50:53.300]  А?
[02:50:56.300 --> 02:50:58.300]  Когда мы делаем повороты?
[02:50:59.300 --> 02:51:01.300]  Когда мы делаем повороты?
[02:51:02.300 --> 02:51:12.300]  Ну, нет, повороты, ну, как сказать, когда мы, ну, по сути, можно сказать так, мы вместо вот этого под дерево, по сути, подвешиваем новое, вот это вот.
[02:51:13.300 --> 02:51:14.300]  Независимость от h2, h-1.
[02:51:15.300 --> 02:51:17.300]  То есть, высота этого, ну, вот.
[02:51:17.780 --> 02:51:18.780]  Ну, вот.
[02:51:19.780 --> 02:51:23.780]  Ну, в данном случае, если тут h2, h2, значит, высота увеличилась на 1, и других некорректностей нет.
[02:51:24.780 --> 02:51:28.780]  Поэтому получается, что начиная с него, делаем повороты.
[02:51:29.780 --> 02:51:32.780]  Какие конкретные повороты обсуждались на прошлой лекции?
[02:51:33.780 --> 02:51:34.780]  Вот.
[02:51:35.780 --> 02:51:39.780]  Да, но если тут h2-1, то у нас там высекают мелкие проблемы.
[02:51:40.780 --> 02:51:41.780]  Вот.
[02:51:42.260 --> 02:51:50.260]  Ну, как, ну, на самом деле, ладно, там увеличивается, конечно, на 2, но за счет того, что тут тогда будет, если тут h2-1, то тут будет точно h2.
[02:51:51.260 --> 02:51:58.260]  Поэтому получается, что проблемы, там, разве что у этой вершины, у которой теперь высота изменилась, но само дерево осталось корректным.
[02:51:59.260 --> 02:52:00.260]  Вот.
[02:52:01.260 --> 02:52:03.260]  То есть, там нужно было идти вверх?
[02:52:04.260 --> 02:52:05.260]  Да, но начиная уже с него.
[02:52:06.260 --> 02:52:08.260]  Ну, можно и с него, на самом деле, тут как бы все корректно будет просто.
[02:52:09.260 --> 02:52:10.260]  Вот.
[02:52:10.740 --> 02:52:11.740]  Так.
[02:52:12.740 --> 02:52:13.740]  Ну, теперь как делать сплит?
[02:52:14.740 --> 02:52:15.740]  Но, заметь, ну, сплит делаем абсолютно так же.
[02:52:16.740 --> 02:52:17.740]  То есть, сплитим по катому элементу.
[02:52:18.740 --> 02:52:19.740]  Так.
[02:52:20.740 --> 02:52:21.740]  Ну, отлично.
[02:52:22.740 --> 02:52:23.740]  Если этот кат-элемент оказался корнем, то сплит понятно как делать.
[02:52:24.740 --> 02:52:28.740]  То есть, просто дети становятся самостоятельными деревьями, корень становится отдельным городом товарища.
[02:52:29.740 --> 02:52:38.740]  Но если совершенно случайно выяснилось, что, там, скажем, кат-элемент находится в правом под дереве, то как бы мы все равно корень отправляем в свободное плавание,
[02:52:39.220 --> 02:52:42.220]  левое под дерево живет, и, значит, сплитим вот это.
[02:52:43.220 --> 02:52:50.220]  То есть, обратите внимание, ну, то есть, делаем абсолютно так же и получаются абсолютно те же вот цепочки, как были раньше.
[02:52:54.220 --> 02:52:55.220]  Вот.
[02:52:56.220 --> 02:52:57.220]  Сейчас.
[02:53:02.220 --> 02:53:07.220]  Только единственное, только что на каждом шаге у нас теперь появляется ровно одно дерево с одной из сторон, это точно.
[02:53:07.700 --> 02:53:12.700]  Они, как раньше, могло и с обоих, могло и не с обоих, а теперь прям принципиально.
[02:53:13.700 --> 02:53:15.700]  То есть, опять такие же, то есть, у нас опять задача.
[02:53:16.700 --> 02:53:20.700]  Дана вот такая цепочка деревьев, и надо их каким-то образом смешать.
[02:53:21.700 --> 02:53:22.700]  Она точно не возрастает?
[02:53:23.700 --> 02:53:24.700]  Вот.
[02:53:25.700 --> 02:53:26.700]  И еще одна маленькая подлянка.
[02:53:27.700 --> 02:53:30.700]  Маленькая подлянка заключается в том, что на этот раз мы даже не можем гарантировать, что эти...
[02:53:31.180 --> 02:53:38.180]  Скажите так, а можем ли мы гарантировать, что высоты этих деревьев, ну, хотя бы не возрастают?
[02:53:39.180 --> 02:53:42.180]  Ну, просто в прошлый раз у нас тоже были невозрастающие деревья, и мы с этим прекрасно справились.
[02:53:43.180 --> 02:53:44.180]  А теперь внимание, вопрос.
[02:53:45.180 --> 02:53:49.180]  Верно ли, что каждое следующее дерево не выше предыдущего?
[02:53:51.180 --> 02:53:53.180]  Ну, кстати, вроде бы верно.
[02:53:54.180 --> 02:53:55.180]  Да?
[02:53:57.180 --> 02:53:58.180]  Ну, давайте разбираться.
[02:53:58.660 --> 02:54:02.660]  Вот жило было под дерево высоты h.
[02:54:03.660 --> 02:54:05.660]  Теперь думаем, какое будет следующее.
[02:54:06.660 --> 02:54:13.660]  Но заметим, что дальше мы пойдем вправо, и тут может быть высота h плюс 1.
[02:54:14.660 --> 02:54:19.660]  Но заметим, что отпиливать-то мы не его будем, а отпиливать мы будем в лучшем случае его левое под дерево.
[02:54:20.660 --> 02:54:23.660]  А если повезет, то мы вообще сейчас пойдем влево и еще там ниже отпиливаем.
[02:54:24.140 --> 02:54:29.140]  Поэтому как бы отпиливать мы будем вот как бы либо это дерево целиком, либо какой-то его под дерево.
[02:54:30.140 --> 02:54:32.140]  И это будет меньше, либо равно h.
[02:54:33.140 --> 02:54:38.140]  Поэтому мы можем на этот раз гарантировать, что каждая следующая высота не больше предыдущей,
[02:54:39.140 --> 02:54:52.140]  а это означает, что как бы слить эти деревья за, собственно, за h или за разность высот там первого и последнего мы прекрасно можем, оказывается.
[02:54:54.140 --> 02:54:58.140]  Ну там, точнее, разность высот плюс количество деревьев, конечно же.
[02:54:59.140 --> 02:55:01.140]  Вот, понятно?
[02:55:05.140 --> 02:55:07.140]  То есть на самом деле у нас просто тоже самое?
[02:55:08.140 --> 02:55:09.140]  Ну подда.
[02:55:10.140 --> 02:55:15.140]  Прям технология та же, то есть оказывается, так что если вам не нравится b дерево, просто пишите avl со сплитом.
[02:55:16.140 --> 02:55:18.140]  А это и не работает, наверное.
[02:55:19.140 --> 02:55:21.140]  А если не нравится avl, то пишите b дерево.
[02:55:21.620 --> 02:55:27.620]  Ну вот, если вам не нравится avl, то, пожалуйста, у нас есть красно-черное дерево.
[02:55:28.620 --> 02:55:30.620]  Да, сейчас будет вообще чит сезона.
[02:55:31.620 --> 02:55:34.620]  Красно-черное дерево со сплитом и мержом.
[02:55:40.620 --> 02:55:41.620]  Чего?
[02:55:46.620 --> 02:55:49.620]  Ну а что, все на камеру записывается, да, значит будет.
[02:55:50.100 --> 02:55:51.100]  Чего?
[02:55:52.100 --> 02:55:54.100]  И потом, на самом деле у нас сейчас как-то...
[02:55:57.100 --> 02:56:01.100]  Нет, если кто-то спонтирует так, что этого не будет, это будет плохо, конечно, да.
[02:56:03.100 --> 02:56:05.100]  Нет, ну там, конечно, всякое бывает.
[02:56:07.100 --> 02:56:08.100]  Нет, ну как сказать?
[02:56:08.100 --> 02:56:11.100]  Нет, еще ваша задача сейчас меня, как всегда, вытрясти.
[02:56:12.100 --> 02:56:14.100]  А то, знаете, недавно вообще у меня произошла забавная ситуация.
[02:56:14.580 --> 02:56:16.580]  То есть называется там...
[02:56:16.580 --> 02:56:18.580]  Я вот сейчас преподавец в 57 школе,
[02:56:18.580 --> 02:56:20.580]  ну вот, ко мне пришел одиннадцатиклассник,
[02:56:20.580 --> 02:56:22.580]  ну там, зовут его Илюша Васильев, если быть там, может быть.
[02:56:23.580 --> 02:56:25.580]  Кто же это такое?
[02:56:25.580 --> 02:56:27.580]  Да, знаете, такого, да, ну вот.
[02:56:27.580 --> 02:56:32.580]  Ну вот, и он говорит, что я тут это, Волкашак читал лекцию по Гомориху,
[02:56:32.580 --> 02:56:34.580]  называется на основе вашей лекции.
[02:56:34.580 --> 02:56:37.580]  Так вот, у вас там в конце бага в доказательстве.
[02:56:40.580 --> 02:56:42.580]  Да, говорит, там что-то недодоказано.
[02:56:43.060 --> 02:56:45.060]  То есть нет, нам удалось разобраться.
[02:56:45.060 --> 02:56:47.060]  Ну вот, соответственно.
[02:56:47.060 --> 02:56:49.060]  Так что, в том числе и ваша задача сделать так,
[02:56:49.060 --> 02:56:51.060]  чтобы на экзамене не выяснилось, что, оказывается, что-то недодоказано.
[02:56:53.060 --> 02:56:55.060]  Волкаша просто с интересной подготовкой лекции читается.
[02:56:57.060 --> 02:57:03.060]  У нас зимой, кажется, наш лектор просто полтора часа
[02:57:03.060 --> 02:57:05.060]  во время пары убил вот эту самую самому разобраться.
[02:57:07.060 --> 02:57:11.060]  Ну, так а думаете, с какой целью такие лекции назначаются?
[02:57:11.540 --> 02:57:15.540]  Вы задали какой-то вопрос, и человек сломался на полтора часа.
[02:57:19.540 --> 02:57:21.540]  Нет, мне страшно, что вы, получается, задали вопрос
[02:57:21.540 --> 02:57:23.540]  в начале лекции, видимо.
[02:57:23.540 --> 02:57:25.540]  Нет, спустя минут 40, наверное.
[02:57:25.540 --> 02:57:27.540]  Там в середине просто.
[02:57:27.540 --> 02:57:29.540]  Нет, если он сломался на полтора часа.
[02:57:29.540 --> 02:57:31.540]  То есть лекция была два слишком.
[02:57:31.540 --> 02:57:33.540]  Лекция суммарно была много.
[02:57:33.540 --> 02:57:35.540]  Ну понятно, да.
[02:57:35.540 --> 02:57:37.540]  Ну вот тут...
[02:57:37.540 --> 02:57:39.540]  Да.
[02:57:40.020 --> 02:57:42.020]  Возможно.
[02:57:42.020 --> 02:57:44.020]  По одиннадцатым.
[02:57:48.020 --> 02:57:50.020]  Не, Леша Васильев в одиннадцатом.
[02:57:50.020 --> 02:57:52.020]  Это я вам гарантию даю.
[02:57:54.020 --> 02:57:56.020]  Так вот.
[02:57:56.020 --> 02:58:00.020]  Но давайте думать, как же сделать мерч в красно-черном дереве.
[02:58:00.500 --> 02:58:02.500]  Вот.
[02:58:02.500 --> 02:58:04.500]  Так, ну давайте, для этого, конечно, нужно вспомнить,
[02:58:04.500 --> 02:58:06.500]  а что такое вообще красно-черное дерево.
[02:58:06.500 --> 02:58:08.500]  Но в случае човка, в помощь вам презентации,
[02:58:08.500 --> 02:58:10.500]  которая уже в группе находится, кстати.
[02:58:14.500 --> 02:58:16.500]  И прочие повороты, которые нам сейчас вспоминать не надо.
[02:58:30.500 --> 02:58:34.500]  Путь по одному цвету всегда одной длины.
[02:58:34.500 --> 02:58:36.500]  Нет.
[02:58:36.500 --> 02:58:38.500]  Да, значит, давайте вспоминать.
[02:58:38.500 --> 02:58:40.500]  Что такое красно-черное дерево?
[02:58:40.500 --> 02:58:42.500]  Это дерево, у которого все вершины красные и черные.
[02:58:44.500 --> 02:58:46.500]  Гарантируется, что у красной вершины не бывает
[02:58:46.500 --> 02:58:48.500]  красных детей.
[02:58:48.500 --> 02:58:50.500]  И гарантируется, что корень черный.
[02:58:50.500 --> 02:58:52.500]  И гарантируется, что на пути
[02:58:52.500 --> 02:58:54.500]  от любого, от корня до любого
[02:58:54.500 --> 02:58:56.500]  крестика
[02:58:56.500 --> 02:58:58.500]  абсолютно одинаковое количество
[02:58:58.980 --> 02:59:00.980]  черных вершин.
[02:59:00.980 --> 02:59:02.980]  Но отсюда следует,
[02:59:02.980 --> 02:59:04.980]  что от любой вершины до всех
[02:59:04.980 --> 02:59:06.980]  крестиков, которые у нее в поддереве,
[02:59:06.980 --> 02:59:08.980]  одинаковое количество черных вершин тоже.
[02:59:08.980 --> 02:59:10.980]  Но это следствие.
[02:59:10.980 --> 02:59:12.980]  Главное, как бы, что от корня везде одинаково.
[02:59:12.980 --> 02:59:14.980]  Вот.
[02:59:24.980 --> 02:59:26.980]  Не уверен.
[02:59:27.460 --> 02:59:29.460]  Потому что вообще еще есть random balance
[02:59:29.460 --> 02:59:31.460]  3 на самом деле.
[02:59:31.460 --> 02:59:33.460]  Это аналог
[02:59:33.460 --> 02:59:35.460]  декартачки, в которой не хранятся приоритеты.
[02:59:35.460 --> 02:59:37.460]  Но это персистентно.
[02:59:37.460 --> 02:59:39.460]  Нет, персистент, то есть тут вообще ни при чем.
[02:59:39.460 --> 02:59:41.460]  Нет, просто есть
[02:59:41.460 --> 02:59:43.460]  декартовое дерево. Что такое декартовое дерево?
[02:59:43.460 --> 02:59:45.460]  В нем в каждой вершине хранятся приоритеты,
[02:59:45.460 --> 02:59:47.460]  и мы строим так, чтобы по ним было куча.
[02:59:47.460 --> 02:59:49.460]  Вот.
[02:59:49.460 --> 02:59:51.460]  Мы пишем просто персистентную
[02:59:51.460 --> 02:59:53.460]  декартачку вот ровно вот так.
[02:59:53.460 --> 02:59:55.460]  Да, потому что мы там не храним приоритет,
[02:59:55.940 --> 02:59:57.940]  и вместо этого в каждый момент, когда ввержем,
[02:59:57.940 --> 02:59:59.940]  мы просто сливаем, кидаем монетку,
[02:59:59.940 --> 03:00:01.940]  какой корень будет корнем.
[03:00:01.940 --> 03:00:03.940]  Ну, там монетка может быть 1-2,
[03:00:03.940 --> 03:00:05.940]  или как принято это делать,
[03:00:05.940 --> 03:00:07.940]  вероятность будет
[03:00:07.940 --> 03:00:09.940]  больше у того, кто тяжелее,
[03:00:09.940 --> 03:00:11.940]  ну и так далее.
[03:00:11.940 --> 03:00:13.940]  Персистенты декартачки так пишут.
[03:00:13.940 --> 03:00:15.940]  Но вообще, по идее,
[03:00:15.940 --> 03:00:17.940]  это называется random lead balance, по-моему, 3.
[03:00:17.940 --> 03:00:19.940]  Поэтому РБ,
[03:00:19.940 --> 03:00:21.940]  аббревиатура может быть неоднозначная.
[03:00:21.940 --> 03:00:23.940]  Я, собственно, к этому.
[03:00:25.940 --> 03:00:27.940]  Я у меня во всех шаблонах.
[03:00:31.940 --> 03:00:33.940]  Ну вот. Итак, давайте думать,
[03:00:33.940 --> 03:00:35.940]  что же нам теперь?
[03:00:35.940 --> 03:00:37.940]  Итак, ну давайте так.
[03:00:37.940 --> 03:00:39.940]  Что же нам делать?
[03:00:39.940 --> 03:00:41.940]  Как же нам теперь слить?
[03:00:41.940 --> 03:00:43.940]  Так, ну начнем с простого.
[03:00:43.940 --> 03:00:45.940]  У каждого дерева
[03:00:45.940 --> 03:00:47.940]  есть черная глубина.
[03:00:47.940 --> 03:00:49.940]  Черная, черная глубина.
[03:00:51.940 --> 03:00:53.940]  И вот надо опять будем
[03:00:53.940 --> 03:00:55.940]  сливать через промежуточную вершину,
[03:00:55.940 --> 03:00:57.940]  ну естественно.
[03:00:57.940 --> 03:00:59.940]  Так, ну если эта черная глубина
[03:00:59.940 --> 03:01:01.940]  одинакова,
[03:01:01.940 --> 03:01:03.940]  вот не глубина одинакова,
[03:01:03.940 --> 03:01:05.940]  а черная глубина одинакова,
[03:01:05.940 --> 03:01:07.940]  то есть тут BH и тут BH,
[03:01:07.940 --> 03:01:09.940]  то как слить эти два дерева?
[03:01:09.940 --> 03:01:11.940]  Через промежуточную вершину.
[03:01:11.940 --> 03:01:13.940]  Да, просто корень черным,
[03:01:13.940 --> 03:01:15.940]  и все.
[03:01:15.940 --> 03:01:17.940]  Да, никаких проблем.
[03:01:19.940 --> 03:01:21.940]  Да, как бы все.
[03:01:21.940 --> 03:01:23.940]  Ждет сценографистка в кабинете,
[03:01:23.940 --> 03:01:25.940]  вы диктуете там пару новых теорем.
[03:01:25.940 --> 03:01:27.940]  Ну вот.
[03:01:29.940 --> 03:01:31.940]  Ну и конечно же держите это в секрете,
[03:01:31.940 --> 03:01:33.940]  и на какую камеру не записывайте.
[03:01:37.940 --> 03:01:39.940]  Сибирский паренек.
[03:01:39.940 --> 03:01:41.940]  Советский математик, да.
[03:01:47.940 --> 03:01:49.940]  Да, правда как-то странно, что история как будто
[03:01:49.940 --> 03:01:51.940]  на этом обублено, то есть как будто он доказал,
[03:01:51.940 --> 03:01:53.940]  сказал и пошел дальше
[03:01:53.940 --> 03:01:55.940]  дрова рубить.
[03:01:55.940 --> 03:01:57.940]  Ну ладно.
[03:01:57.940 --> 03:01:59.940]  Так вот, а теперь
[03:01:59.940 --> 03:02:01.940]  следующий вопрос.
[03:02:01.940 --> 03:02:03.940]  Что делать,
[03:02:03.940 --> 03:02:05.940]  если у вас совершенно случайно
[03:02:05.940 --> 03:02:07.940]  казалось, что черные высоты различны?
[03:02:07.940 --> 03:02:09.940]  BH1 и BH2,
[03:02:09.940 --> 03:02:11.940]  и промежуточный элемент.
[03:02:13.940 --> 03:02:15.940]  Так, ну казалось бы,
[03:02:15.940 --> 03:02:17.940]  да, мы спустимся до той же самой
[03:02:17.940 --> 03:02:19.940]  черной глубины,
[03:02:19.940 --> 03:02:21.940]  и давайте просто подвесим вот эти вот два
[03:02:21.940 --> 03:02:23.940]  дерева вот так.
[03:02:23.940 --> 03:02:25.940]  То есть вот как всегда.
[03:02:25.940 --> 03:02:27.940]  Да, вот такие вот это вот.
[03:02:27.940 --> 03:02:29.940]  Зелененьким вешаем.
[03:02:29.940 --> 03:02:31.940]  Вот, но возникает маленькая
[03:02:31.940 --> 03:02:33.940]  проблема.
[03:02:33.940 --> 03:02:35.940]  Нет, возникает
[03:02:35.940 --> 03:02:37.940]  нет, с цветами никаких проблем нет,
[03:02:37.940 --> 03:02:39.940]  черная вершина никаких проблем с цветами не дает.
[03:02:39.940 --> 03:02:41.940]  Проблема возникает больше,
[03:02:41.940 --> 03:02:43.940]  ну вот.
[03:02:43.940 --> 03:02:45.940]  Проблема возникает в том,
[03:02:45.940 --> 03:02:47.940]  что да, тут из-за этой вершины теперь с черным путем
[03:02:47.940 --> 03:02:49.940]  проблема возникает.
[03:02:49.940 --> 03:02:51.940]  Да, ну вот,
[03:02:51.940 --> 03:02:53.940]  и поэтому, ну как сказать, можно
[03:02:53.940 --> 03:02:55.940]  наверное и так выкрутиться, но легче кажется так.
[03:02:55.940 --> 03:02:57.940]  Давайте объявим эту вершину красной.
[03:02:59.940 --> 03:03:01.940]  Да, но теперь у вас
[03:03:01.940 --> 03:03:03.940]  возникает максимум какая
[03:03:03.940 --> 03:03:05.940]  проблема может быть, учитывая, что эти вершины заведомо
[03:03:05.940 --> 03:03:07.940]  черные. Ну вы здесь можете выбрать, чтобы эта вершина
[03:03:07.940 --> 03:03:09.940]  была черной, да?
[03:03:09.940 --> 03:03:11.940]  Давайте скажем, если выяснилось, что эта вершина
[03:03:11.940 --> 03:03:13.940]  красная, значит у вас классическая ситуация
[03:03:13.940 --> 03:03:15.940]  из инсерта.
[03:03:15.940 --> 03:03:17.940]  Помните, то есть у вас классное дерево, все хорошо,
[03:03:17.940 --> 03:03:19.940]  только вот как есть как бы родители ребенок
[03:03:19.940 --> 03:03:21.940]  красный, это только один раз такое встречается в жизни.
[03:03:21.940 --> 03:03:23.940]  Ну а мы помним, что там
[03:03:23.940 --> 03:03:25.940]  цепочка каких-то там перекрашиваний
[03:03:25.940 --> 03:03:27.940]  поворотов, в общем поворотов мало,
[03:03:27.940 --> 03:03:29.940]  прекрасно решит проблему.
[03:03:29.940 --> 03:03:31.940]  Вообще прикольно, но получается без инсерта и мерча
[03:03:31.940 --> 03:03:33.940]  не сделаем особо.
[03:03:33.940 --> 03:03:35.940]  Ну на самом деле
[03:03:35.940 --> 03:03:37.940]  да, и без делита еще.
[03:03:37.940 --> 03:03:39.940]  Да, то есть на самом деле инсерт
[03:03:39.940 --> 03:03:41.940]  и делит мы проходили с вами не зря.
[03:03:41.940 --> 03:03:43.940]  Нет, ну можно там всегда
[03:03:43.940 --> 03:03:45.940]  нет, можно конечно хранить
[03:03:45.940 --> 03:03:47.940]  между... как бы если у вас есть
[03:03:47.940 --> 03:03:49.940]  10 элементов, давайте хранить дерево на 2
[03:03:49.940 --> 03:03:51.940]  и минус 1 элементом, где там посредине лежат
[03:03:51.940 --> 03:03:53.940]  фиктивное, конечно.
[03:03:53.940 --> 03:03:55.940]  Но не уверен,
[03:03:55.940 --> 03:03:57.940]  что это нужно делать.
[03:03:57.940 --> 03:03:59.940]  А у нас не может быть такого, что 3 красных?
[03:03:59.940 --> 03:04:01.940]  А откуда?
[03:04:01.940 --> 03:04:03.940]  Нет, у вас эта вершина
[03:04:03.940 --> 03:04:05.940]  заведомо черная. Ну вы можете
[03:04:05.940 --> 03:04:07.940]  выбрать эту вершину так, чтобы она была черная.
[03:04:07.940 --> 03:04:09.940]  А справа?
[03:04:09.940 --> 03:04:11.940]  А справа она черная, потому что
[03:04:11.940 --> 03:04:13.940]  она корень.
[03:04:13.940 --> 03:04:15.940]  И там
[03:04:15.940 --> 03:04:17.940]  заведомо, что подъем тоже устроен
[03:04:17.940 --> 03:04:19.940]  красивым образом, так что
[03:04:19.940 --> 03:04:21.940]  все это сработает реально за разность
[03:04:21.940 --> 03:04:23.940]  высот. И при этом
[03:04:23.940 --> 03:04:25.940]  глобальная черная высота будет там
[03:04:25.940 --> 03:04:27.940]  насколько я помню
[03:04:27.940 --> 03:04:29.940]  не более либо BH1, либо BH1
[03:04:29.940 --> 03:04:31.940]  плюс 1.
[03:04:33.940 --> 03:04:35.940]  Так что вроде никаких проблем
[03:04:35.940 --> 03:04:37.940]  тут быть не должно.
[03:04:37.940 --> 03:04:39.940]  А, единственная проблема, которая у нас может быть
[03:04:39.940 --> 03:04:41.940]  это как раз вот эти две красные.
[03:04:41.940 --> 03:04:43.940]  Да, поэтому мы как бы там
[03:04:43.940 --> 03:04:45.940]  но это проблема мы
[03:04:45.940 --> 03:04:47.940]  решаем, и черная высота от этого
[03:04:47.940 --> 03:04:49.940]  вроде как не уменьшается.
[03:04:49.940 --> 03:04:51.940]  Или уменьшается?
[03:04:55.940 --> 03:04:57.940]  Вроде нет.
[03:04:57.940 --> 03:04:59.940]  А после темы, кажется, вообще можно просто выделить
[03:04:59.940 --> 03:05:01.940]  по дереву?
[03:05:01.940 --> 03:05:03.940]  В смысле?
[03:05:03.940 --> 03:05:05.940]  Я может что-то из варианта забываю?
[03:05:05.940 --> 03:05:07.940]  Так, ну вот давайте внимательно думать.
[03:05:07.940 --> 03:05:09.940]  Потому что как мы теперь будем сплитить?
[03:05:09.940 --> 03:05:11.940]  Ну сплитить, естественно, будем
[03:05:11.940 --> 03:05:13.940]  работать также, только разница будет
[03:05:13.940 --> 03:05:15.940]  в том, что
[03:05:15.940 --> 03:05:17.940]  если мы просто будем сплитить, то мы можем обнаружить
[03:05:17.940 --> 03:05:19.940]  что у каждого поддерева
[03:05:19.940 --> 03:05:21.940]  которое получится
[03:05:23.940 --> 03:05:25.940]  заметим, что корень может быть
[03:05:25.940 --> 03:05:27.940]  как черной вершиной, так и вполне себе
[03:05:27.940 --> 03:05:29.940]  красной, правда?
[03:05:29.940 --> 03:05:31.940]  Да и промежуточная
[03:05:31.940 --> 03:05:33.940]  вот эта вершина, она тоже вполне себе
[03:05:33.940 --> 03:05:35.940]  какой-нибудь красный может оказаться, правда?
[03:05:35.940 --> 03:05:37.940]  Я бы даже больше скажу, в принципе
[03:05:37.940 --> 03:05:39.940]  вот такая ситуация тоже вполне
[03:05:39.940 --> 03:05:41.940]  возможна, очевидно.
[03:05:41.940 --> 03:05:43.940]  Потому что это поддерево вот с этой
[03:05:43.940 --> 03:05:45.940]  вершиной может быть не связано напрямую.
[03:05:53.940 --> 03:05:55.940]  Нет, сплит делаем как всегда.
[03:05:55.940 --> 03:05:57.940]  То есть жил был корень.
[03:05:57.940 --> 03:05:59.940]  Так, ну вот, допустим
[03:05:59.940 --> 03:06:01.940]  он оказался, его порядковая статистика
[03:06:01.940 --> 03:06:03.940]  оказалась меньше, чем К.
[03:06:03.940 --> 03:06:05.940]  Ну значит тогда мы в левую часть сплита
[03:06:05.940 --> 03:06:07.940]  отправляем вот это поддерево,
[03:06:07.940 --> 03:06:09.940]  не важно тут какая вершина красная или черная,
[03:06:09.940 --> 03:06:11.940]  ну вот, и также
[03:06:11.940 --> 03:06:13.940]  ну вот, и эту вершину.
[03:06:13.940 --> 03:06:15.940]  А вот правое поддерево мы типа
[03:06:15.940 --> 03:06:17.940]  сплитием рекурсивно.
[03:06:17.940 --> 03:06:19.940]  Мы можем просто перекрасить, если у нас
[03:06:19.940 --> 03:06:21.940]  красный корень.
[03:06:21.940 --> 03:06:23.940]  Что перекрасить?
[03:06:23.940 --> 03:06:25.940]  Просто если у нас получился дерево с красным
[03:06:25.940 --> 03:06:27.940]  корнем, мы просто перекрасим.
[03:06:27.940 --> 03:06:29.940]  Погодите, погодите, погодите.
[03:06:29.940 --> 03:06:31.940]  Я сейчас просто аккуратненько,
[03:06:31.940 --> 03:06:33.940]  потому что надо понять что-то хотя бы о варианте,
[03:06:33.940 --> 03:06:35.940]  потому что как бы нам бы неплохо
[03:06:35.940 --> 03:06:37.940]  было бы, чтобы эти деревья были
[03:06:37.940 --> 03:06:39.940]  отсортированы по убыванию,
[03:06:39.940 --> 03:06:41.940]  хотя бы по невозрастанию черной высоты.
[03:06:43.940 --> 03:06:45.940]  Если мы сейчас наточим перекраш,
[03:06:45.940 --> 03:06:47.940]  то есть у нас как бы и без перекраски начинаются вопросы.
[03:06:47.940 --> 03:06:49.940]  То есть, во-первых, давайте подумаем,
[03:06:49.940 --> 03:06:51.940]  верно ли, что каждое следующее дерево без
[03:06:51.940 --> 03:06:53.940]  перекраски обладает не больше
[03:06:53.940 --> 03:06:55.940]  черной высотой, чем предыдущее?
[03:06:56.940 --> 03:06:58.940]  Наверно.
[03:06:59.940 --> 03:07:01.920]  У нас влево под дерево есть черная высота,
[03:07:01.920 --> 03:07:03.940]  у правого под деревом черная высота такая же, да?
[03:07:05.940 --> 03:07:07.940]  Это означает, что для любого его под дерева
[03:07:07.940 --> 03:07:09.940]  черная высота не более,
[03:07:09.940 --> 03:07:11.940]  чем такая?
[03:07:11.940 --> 03:07:13.940]  Я говорю, не более, потому что
[03:07:13.940 --> 03:07:15.940]  может оказаться, что тут красная вершина,
[03:07:15.940 --> 03:07:17.940]  и у этого черного под деревом высота
[03:07:17.940 --> 03:07:19.940]  inverse такая же, пока у этого.
[03:07:19.940 --> 03:07:21.940]  Такой может быть.
[03:07:21.940 --> 03:07:23.940]  Напоминаю, тут промежуточные
[03:07:23.940 --> 03:07:27.440]  Да, тут промежуточные вершины могут быть и красными, и черными, как углы.
[03:07:27.440 --> 03:07:29.940]  Все нормально, если у него красный корень, то у него высота строго меньше.
[03:07:32.940 --> 03:07:35.440]  Нет, в смысле, черная высота у него такая же.
[03:07:36.440 --> 03:07:37.940]  Тут кажется, можно еще кое-что.
[03:07:37.940 --> 03:07:44.940]  Если у нас дерево получилось с красным корнем, то черная высота у него должна оказаться меньше.
[03:07:44.940 --> 03:07:47.440]  Потому что предок у него точно был черный.
[03:07:47.440 --> 03:07:48.940]  Нет, погоди, погоди, почему это?
[03:07:48.940 --> 03:07:51.440]  Смотрите, сейчас расскажу ситуацию.
[03:07:51.440 --> 03:07:53.440]  Жил был корень.
[03:07:53.440 --> 03:07:57.940]  И был у него левый ребенок черный и правый ребенок красный.
[03:07:59.440 --> 03:08:03.940]  И было у них одинаковое, естественно, согласно инварианту, черная высота BH.
[03:08:04.940 --> 03:08:07.940]  И отпилили вы левое поддерево высоты BH.
[03:08:08.940 --> 03:08:12.940]  А потом, бах, пошли еще раз вправо, и как следствие отпилили вот это поддерево целиком.
[03:08:12.940 --> 03:08:15.440]  Внимание, вопрос, какая черная высота у этого дерева?
[03:08:15.440 --> 03:08:16.940]  У него черный корень.
[03:08:18.940 --> 03:08:23.940]  Ну да, еще.
[03:08:23.940 --> 03:08:25.940]  Ну, значит, не нужно перекрашивать.
[03:08:25.940 --> 03:08:29.940]  Не нужно перекрашивать, значит, равенство у нас устраивает.
[03:08:29.940 --> 03:08:30.940]  Так.
[03:08:30.940 --> 03:08:36.940]  Упередается, что если мы отпилили в какой-то момент дерево, и у нас под деревом получился красный корень.
[03:08:36.940 --> 03:08:37.940]  Так.
[03:08:37.940 --> 03:08:43.940]  То у него где, ну, до этого был черный, у него был черный предок.
[03:08:44.940 --> 03:08:47.940]  Соответственно, черная высота уменьшилась.
[03:08:47.940 --> 03:08:50.940]  Соответственно, если мы перекрасим, то мы не сломаем ничего.
[03:08:50.940 --> 03:08:51.940]  Так.
[03:08:51.940 --> 03:08:52.940]  Ну, хорошо.
[03:08:52.940 --> 03:08:54.940]  А можно чуть по-другому попробовать?
[03:08:54.940 --> 03:08:55.940]  Так.
[03:08:55.940 --> 03:08:56.940]  Да.
[03:08:56.940 --> 03:08:57.940]  Нет.
[03:08:57.940 --> 03:08:58.940]  Сейчас.
[03:08:58.940 --> 03:09:01.940]  Не все способы сразу называются.
[03:09:01.940 --> 03:09:02.940]  Так.
[03:09:02.940 --> 03:09:10.940]  То есть, что вы хотите, значит, предлагается следующее, что утверждается, что так пришло время выдать вам билет.
[03:09:10.940 --> 03:09:11.940]  Ладно.
[03:09:11.940 --> 03:09:12.940]  Вернемся к делу.
[03:09:13.940 --> 03:09:14.940]  Так.
[03:09:14.940 --> 03:09:15.940]  Итак.
[03:09:15.940 --> 03:09:17.940]  Значит, что нам тут предлагалось?
[03:09:17.940 --> 03:09:27.940]  Предлагалось, значит, так жестко объявить, что, во-первых, черные высоты здесь действительно не возрастают.
[03:09:28.940 --> 03:09:36.940]  И при этом, более того, еще и читерским образом гарантируется, что если вершина красная, то предыдущий знак неравенства заведомо строгий.
[03:09:41.940 --> 03:09:42.940]  Вот.
[03:09:45.940 --> 03:09:46.940]  Нет.
[03:09:46.940 --> 03:09:47.940]  Это как бы...
[03:09:47.940 --> 03:09:50.940]  Ну, тут, правда, возникает вопрос.
[03:09:50.940 --> 03:09:52.940]  Ну, возникает вопрос, насколько...
[03:09:52.940 --> 03:09:53.940]  Да.
[03:09:53.940 --> 03:09:54.940]  Но зачем нам это надо?
[03:09:54.940 --> 03:10:04.940]  Так как раз у нас гарантируется, что если вершина красная, то предыдущий знак неравенства точно строгий, то тогда проблему красных корней можно решить очень легко.
[03:10:04.940 --> 03:10:09.940]  Мы их просто перекрашиваем, и при этом отсортированность никак не порчится.
[03:10:09.940 --> 03:10:10.940]  Понимаете, да?
[03:10:10.940 --> 03:10:12.940]  Мы делаем.
[03:10:13.940 --> 03:10:16.940]  Мы делаем сплит в красно-черном дереве.
[03:10:16.940 --> 03:10:17.940]  Мы делаем сплит.
[03:10:17.940 --> 03:10:19.940]  Делаем классическим образом.
[03:10:19.940 --> 03:10:20.940]  Ну, вида там.
[03:10:20.940 --> 03:10:29.940]  Берем корень, значит, там, собственно, понимаем, что там, скажем, катая вершина хоть справа, и, значит, отправляем эту вершину опередней вот этого под дерево типа влево.
[03:10:29.940 --> 03:10:30.940]  Если бы она...
[03:10:30.940 --> 03:10:34.940]  Если бы оказалось, что кар где-то справа, то мы эту вершину вместе с правым под деревом проявили бы справа.
[03:10:34.940 --> 03:10:35.940]  Ну, все, спасибо.
[03:10:35.940 --> 03:10:37.940]  Я просто немножко торочился.
[03:10:37.940 --> 03:10:38.940]  Вот.
[03:10:38.940 --> 03:10:39.940]  Ну вот.
[03:10:39.940 --> 03:10:41.940]  Итак, что же получается?
[03:10:41.940 --> 03:10:43.940]  Итак, у нас есть веселые деревья.
[03:10:43.940 --> 03:10:46.940]  Значит, получается, у нас есть абсолютно корректные на этот раз деревья.
[03:10:46.940 --> 03:10:48.940]  И там промежуточные вершины.
[03:10:48.940 --> 03:10:54.940]  Нам, в общем-то, на самом деле плевать уже, как красные они там, или зеленые, и черные.
[03:10:54.940 --> 03:10:55.940]  Вот.
[03:10:57.940 --> 03:10:59.940]  Это корень дерева тоже.
[03:10:59.940 --> 03:11:00.940]  Не.
[03:11:00.940 --> 03:11:01.940]  Не, не факт.
[03:11:01.940 --> 03:11:03.940]  Видите, ниже корня.
[03:11:03.940 --> 03:11:05.940]  Самое первое, конечно, черное.
[03:11:05.940 --> 03:11:07.940]  А вот, а дальше потом...
[03:11:07.940 --> 03:11:08.940]  А, кстати, не факт.
[03:11:08.940 --> 03:11:09.940]  А, кстати, не факт.
[03:11:09.940 --> 03:11:10.940]  Если самое...
[03:11:10.940 --> 03:11:12.940]  То есть корень, конечно, отправится либо туда, либо туда, скорее всего.
[03:11:12.940 --> 03:11:13.940]  Но...
[03:11:13.940 --> 03:11:14.940]  Как бы...
[03:11:14.940 --> 03:11:15.940]  Ну вот.
[03:11:15.940 --> 03:11:16.940]  Но как бы там...
[03:11:16.940 --> 03:11:18.940]  Получается, если он отправился вправо, то там могла быть и красная вершина.
[03:11:18.940 --> 03:11:19.940]  Почему бы нет?
[03:11:19.940 --> 03:11:20.940]  Но это нам не важно.
[03:11:20.940 --> 03:11:22.940]  Мы, на самом деле, уже забиваем в этом месте на это.
[03:11:22.940 --> 03:11:24.940]  То есть у нас есть просто ключики.
[03:11:24.940 --> 03:11:26.940]  Ключики, корректные деревья.
[03:11:26.940 --> 03:11:31.940]  То есть можно писать меж на тимплейках сразу для RB3, для AVL?
[03:11:31.940 --> 03:11:33.940]  Ну, в принципе, да.
[03:11:35.940 --> 03:11:36.940]  Так что вот.
[03:11:36.940 --> 03:11:38.940]  То есть получается даже красно-черное дерево
[03:11:38.940 --> 03:11:40.940]  прекрасно поддерживает сплит мёртвые там эти...
[03:11:40.940 --> 03:11:42.940]  Основной вопрос.
[03:11:42.940 --> 03:11:44.940]  Это же в предположении, что неравенства были строгими.
[03:11:44.940 --> 03:11:46.940]  Как были каши, они становятся нестрогими.
[03:11:46.940 --> 03:11:47.940]  Да.
[03:11:47.940 --> 03:11:49.940]  Они становятся нестрогими.
[03:11:49.940 --> 03:11:51.940]  Но сливать под деревья...
[03:11:51.940 --> 03:11:53.940]  Как бы мы уже научились.
[03:11:53.940 --> 03:11:55.940]  А если они были нестрогими?
[03:11:55.940 --> 03:11:56.940]  Нет.
[03:11:56.940 --> 03:12:00.940]  Мы доказали следующее, что если у дерева оказалась красная корень,
[03:12:00.940 --> 03:12:02.940]  то неравенство точно строгое.
[03:12:02.940 --> 03:12:03.940]  Ладно.
[03:12:03.940 --> 03:12:04.940]  Вот.
[03:12:04.940 --> 03:12:05.940]  Это фишка.
[03:12:05.940 --> 03:12:07.940]  Мы же походу испортили там инварианты.
[03:12:07.940 --> 03:12:08.940]  Какой?
[03:12:08.940 --> 03:12:13.940]  Ну, например, то, что путь до крестика должен быть.
[03:12:13.940 --> 03:12:18.940]  Оттого, что мы в каком-то дереве взяли его корень.
[03:12:18.940 --> 03:12:19.940]  Внимание, кстати.
[03:12:19.940 --> 03:12:21.940]  В этом месте это дерево становится как отдельное дерево.
[03:12:21.940 --> 03:12:22.940]  Никаких предков нет.
[03:12:22.940 --> 03:12:23.940]  Да.
[03:12:23.940 --> 03:12:25.940]  Поэтому мы здесь спокойно можем перекрасить красную вишину в чёрную
[03:12:25.940 --> 03:12:27.940]  без нарушения инвариантов каких-то.
[03:12:27.940 --> 03:12:28.940]  Нет.
[03:12:28.940 --> 03:12:29.940]  Вопрос к этому.
[03:12:29.940 --> 03:12:32.940]  Вот когда мы из него вырезаем...
[03:12:32.940 --> 03:12:35.940]  Слушай, когда мы вырезаем, а мы же из дерева ничего не вырезаем.
[03:12:35.940 --> 03:12:39.940]  Мы по факту у дерева распиливаем на два поддеревы одну вершину.
[03:12:39.940 --> 03:12:43.940]  С правым поддеревом работаем рекурсивно, а левое поддерево запихивается туда.
[03:12:45.940 --> 03:12:47.940]  То есть на самом деле мы ничего не вырезаем.
[03:12:49.940 --> 03:12:52.940]  Вот какое объединение, которое мы показали на низком рисунке?
[03:12:52.940 --> 03:12:53.940]  Да.
[03:12:56.940 --> 03:12:57.940]  Здесь.
[03:12:59.940 --> 03:13:01.940]  Мы такое не делаем, да?
[03:13:01.940 --> 03:13:04.940]  Мы просто оставляем как раз личные деревья и потом их мерзим.
[03:13:04.940 --> 03:13:05.940]  Ну да.
[03:13:06.940 --> 03:13:08.940]  Всем я говорю, пока мы делаем вот этот распил,
[03:13:08.940 --> 03:13:11.940]  у нас даже не парит вообще эта вершина красная или чёрная там корень.
[03:13:12.940 --> 03:13:15.940]  То есть получается мы так же как у B3...
[03:13:16.940 --> 03:13:17.940]  Нет.
[03:13:17.940 --> 03:13:21.940]  В общем мы делимся на деревья и потом уже их мерзим.
[03:13:23.940 --> 03:13:24.940]  Ну да.
[03:13:24.940 --> 03:13:27.940]  То есть сначала мы получаем список этих деревьев с промежуточными ключиками,
[03:13:27.940 --> 03:13:30.940]  а потом уже их мерзим классическим образом.
[03:13:31.940 --> 03:13:34.940]  А здесь промежуточный ключик это чёрная серка, да?
[03:13:35.940 --> 03:13:37.940]  В данном случае да, вот эта чёрная.
[03:13:39.940 --> 03:13:40.940]  Да, вот эта.
[03:13:41.940 --> 03:13:42.940]  В данном случае да.
[03:13:43.940 --> 03:13:46.940]  Но потом может промежуточной следующей статьей эта красная.
[03:13:51.940 --> 03:13:55.940]  А для того, чтобы превратить эти деревья,
[03:13:55.940 --> 03:13:58.940]  корректные помодлю того, что корень может быть красный.
[03:13:58.940 --> 03:14:01.940]  Хочется сделать в абсолютно корректном перекрасе в корень чёрный цвет.
[03:14:02.940 --> 03:14:07.940]  Но перекраска корня изменяет чёрную глубину, чёрную высоту.
[03:14:10.940 --> 03:14:12.940]  И этот факт нам нужен для того, чтобы показать,
[03:14:12.940 --> 03:14:19.940]  что в результате этой перекраски как бы отсортированность деревьев по невозрастанию остаётся.
[03:14:22.940 --> 03:14:26.940]  Так что получается такая вот красота.
[03:14:28.940 --> 03:14:29.940]  Ну и в общем-то.
[03:14:34.940 --> 03:14:35.940]  Чего?
[03:14:36.940 --> 03:14:38.940]  Ну в смысле мэж, да, заразится глубина.
[03:14:38.940 --> 03:14:42.940]  Ровно за счёт этого сприт получается тоже за то, что надо.
[03:14:43.940 --> 03:14:47.940]  Ну я бы сказал так, за от глубины каты вершины плюс один получается.
[03:14:51.940 --> 03:14:55.940]  Ну то есть конечно вот эта классическая красночёрная радость
[03:14:55.940 --> 03:14:59.940]  на тему того, что вот там от единицы каких-то там переворотов при подвешивании
[03:14:59.940 --> 03:15:00.940]  конечно тут вылетает трубу.
[03:15:02.940 --> 03:15:03.940]  Ну вот, тем не менее.
[03:15:05.940 --> 03:15:09.940]  Так что получается, что на самом деле, да, то есть на самом деле сплит и вершины,
[03:15:09.940 --> 03:15:14.940]  прочие и вершины подотрески, это не есть прерогратива красночёрной, именно дикартьячки.
[03:15:15.940 --> 03:15:17.940]  То есть на самом деле это умеют все.
[03:15:18.940 --> 03:15:22.940]  И на самом деле, то есть эти операции можно вполне себе делать не за вероятность нелогарифом,
[03:15:22.940 --> 03:15:23.940]  а за предельно честный.
[03:15:23.940 --> 03:15:24.940]  Вот даже вот выбирайте каким способом.
[03:15:27.940 --> 03:15:28.940]  Так что вот такая красота.
[03:15:36.940 --> 03:15:37.940]  Не знаю.
[03:15:40.940 --> 03:15:41.940]  Хороший вопрос.
[03:15:41.940 --> 03:15:43.940]  Я не пробовал, если честно, я не знаю.
[03:15:45.940 --> 03:15:48.940]  Так что можете попробовать, да будет даже интересно.
[03:15:48.940 --> 03:15:49.940]  Так, ну ладно.
[03:15:49.940 --> 03:15:53.940]  Но теперь пришло время, как бы да, в программе это есть, но вот вопросы возникли так,
[03:15:53.940 --> 03:15:56.940]  что придётся поговорить про деревоотресков в технологию отложенных операций.
[03:16:00.940 --> 03:16:04.940]  Нет, ну смотрите, нет, во-первых, про это мы вынуждены поговорить,
[03:16:04.940 --> 03:16:07.940]  ну потому что я говорю, то есть мы должны в том или ином виде это обсудить.
[03:16:08.940 --> 03:16:12.940]  Просто, ну а так просто я спрашивал, как бы все ли это знают, ну вот подняли руки,
[03:16:12.940 --> 03:16:14.940]  я заметил, не все, и дело даже не в спящих.
[03:16:14.940 --> 03:16:16.940]  Ну вот, поэтому сейчас мы просто быстренько обсудим.
[03:16:16.940 --> 03:16:19.940]  Ну и ещё, ну и вторая цель, как всегда, то есть давайте,
[03:16:19.940 --> 03:16:23.940]  как бы чтобы привести нас с вами к единой терминологии.
[03:16:24.940 --> 03:16:27.940]  Потому что там выясняется, что как бы вроде все в целом знают,
[03:16:27.940 --> 03:16:30.940]  а потом выясняется, что под одними теми же словами подразумевается вообще не то.
[03:16:32.940 --> 03:16:35.940]  Потом выяснится, что для вас там технология отложенных операций,
[03:16:35.940 --> 03:16:37.940]  оказывается это сплит-ребилт, например.
[03:16:37.940 --> 03:16:39.940]  А, ну да, так было проще, ну ладно.
[03:16:39.940 --> 03:16:42.940]  Так еще ладно, включаем телевизор.
[03:16:49.940 --> 03:16:55.940]  Ну, а что, да? Представьте, чтоECTO в 아까шем году была в 18.
[03:16:55.940 --> 03:16:56.940]  И в 18 obsession.
[03:16:59.940 --> 03:17:00.940]  В 18?
[03:17:00.940 --> 03:17:14.140]  нет так но чудо представьте себе до каковица представьте себе что да представьте что даты
[03:17:14.140 --> 03:17:22.600]  до встречи дасты перед битвы встретились два войска но вот там там один из полководцев обладает
[03:17:22.600 --> 03:17:31.760]  красноречия мы другой нет и там вот да и там что-то мы да мы сегодня нас ждет славная победа там
[03:17:31.760 --> 03:17:42.240]  мы победим вас мы уничтожим вас и там и вот и захватим ваша года второй или это мы так сделаем
[03:17:42.240 --> 03:17:58.200]  так так то что ж и так триангуляции до ланы пересечения полуплоскостей так когда
[03:17:58.200 --> 03:18:03.320]  дерево нет это нет это программа третьего семестра скорее всего вас ждет примерно то
[03:18:03.320 --> 03:18:07.600]  же самое поможет того что в вашем случае скорее всего тут будут еще потоки видимо
[03:18:07.600 --> 03:18:25.240]  нет просто-то но почему нет 3 это удовол 4 это хор 5 это отл
[03:18:25.240 --> 03:18:41.560]  но у конян почему-то ну да ну или там да соф автомат конечно и ну но софтомат
[03:18:41.560 --> 03:18:52.640]  там извините по алгоритм со всеми доказательствами да вот плана так вот
[03:18:52.640 --> 03:19:05.400]  нет но там не переживайте собственно более того мало того что они самые сложные доказательства
[03:19:05.400 --> 03:19:10.120]  так еще и мы будем как бы его проходить где-то явно во второй половине следующего семестра когда
[03:19:10.120 --> 03:19:15.040]  у вас то формалка когда вы на формалках уже хорошо поработаете с автоматами в принципе но
[03:19:15.040 --> 03:19:18.520]  поэтому после этого на самом деле там понять доказательства будет не очень сложно на самом
[03:19:18.520 --> 03:19:34.960]  деле ну ты не там но так так ну ладно господа давайте ой выключите там свет пожалуйста вот
[03:19:34.960 --> 03:19:45.280]  спасибо но вот так так но первых вот тут мы пробежимся что да у нас тут сплида так
[03:19:45.280 --> 03:19:48.720]  ладно сплит у меня тут например с плей дерева но с плей дерева мы явно будем
[03:19:48.720 --> 03:19:58.120]  обсуждать уже в следующий раз так бла бла бла бла бла бла а ну ладно давайте тут пробежимся на
[03:19:58.120 --> 03:20:04.280]  всякий случай быстренько да но так напомним потому что ну а первых да что как бы если вы
[03:20:04.280 --> 03:20:10.760]  дерево отрезков надо вспомнить что мы говорим о задачах рск и рмку но ладно тут тут определение
[03:20:10.760 --> 03:20:19.520]  думаю вас достаточно классическое вот видно да но и раскуречь сам квари да то есть это
[03:20:19.520 --> 03:20:25.760]  классическая постановка это типа заменить одно число в массиве и найти сумму на подотрески но
[03:20:25.760 --> 03:20:31.760]  рмку то же самое что с минимумом но скажем так в принципе идея на общем-то мы еще нет потому
[03:20:31.760 --> 03:20:36.840]  что все деревья которые ладно мы не знаем пока не шуткой декор тачки декор тачки и шуткой
[03:20:36.840 --> 03:20:45.160]  с плей вот но мы знаем другие кучу способов как это делать за логарифом да с помощью сплита и
[03:20:45.160 --> 03:20:50.560]  мержа в общем-то это делает овл прекрасно как мы уже поняли и красно-черная там и б там в общем
[03:20:50.560 --> 03:20:57.760]  как угодно но надо рассмотреть другие способы потому что да сейчас будет разговор о программировании
[03:20:57.960 --> 03:21:01.960]  математики математически бы глобально ничего нового не узнаем но программистки
[03:21:01.960 --> 03:21:09.520]  наверно дерево отрезков писать проще чем овл со сплетом и мержем правда вот поэтому но давайте
[03:21:09.520 --> 03:21:17.640]  разминочка статик рск но здесь вот смотрите здесь мы вводим понятие частичные суммы но вот частичные
[03:21:17.640 --> 03:21:23.640]  суммы они же префиксные суммы но нет статик рск это означает что предположу что массив не
[03:21:23.640 --> 03:21:30.960]  меняется что мы тогда делаем тогда мы говорим что давайте просто насчитаем сумму каждого
[03:21:30.960 --> 03:21:36.800]  префикса и тогда после этого сумма здесь получится достаточно простой ну понятно она
[03:21:36.800 --> 03:21:41.840]  просто пересчитывается просто вычитать то есть там идеальная структура данных от предподсчета
[03:21:41.840 --> 03:21:51.240]  от единицы на запрос все в честную не фарах colton bender это как бы он делает то же самое но
[03:21:51.240 --> 03:22:00.160]  когда она не статичная нет как бы нет эти два человека с тремя фамилиями собрались не для
[03:22:00.160 --> 03:22:09.360]  того чтобы написать вот эту строчку да но нет сейчас мы этом до этого мы тоже доживем не волнуйтесь
[03:22:09.360 --> 03:22:18.000]  нет метод четырех русских это для нас да значит так вот здесь возникает конечно очень это тот
[03:22:18.000 --> 03:22:23.200]  очень интересный момент сейчас нам тоже еще попишем значит на третьем вот у нас есть еще
[03:22:23.200 --> 03:22:32.680]  такая штука как статик рмку вправывается что это значит но вот ну как бы да то есть заметим
[03:22:32.680 --> 03:22:39.200]  минимум обратимой операции не является но вместо обратимости в игру вступает и демпатентность
[03:22:39.200 --> 03:22:46.120]  соответственно да что такое демпатентность да вот тут так вот во втором абзаце это слово вот есть
[03:22:46.120 --> 03:22:58.480]  вот оно и демпатентность вот да это такой факт что как бы у вас есть как бы операция на множестве
[03:22:58.480 --> 03:23:02.440]  элементов даже на мульти множестве оказывается что если вы добавите элемент который уже был то
[03:23:02.440 --> 03:23:09.440]  ничего не поменяется это называется и демпатентность вот результате появляется такая классическая
[03:23:09.440 --> 03:23:11.280]  штука как спарс тейбл
[03:23:11.280 --> 03:23:26.960]  я погодите нет здесь все правильно сказано
[03:23:26.960 --> 03:23:44.600]  но да тем что да да да но да я к сожалению иногда включаю режим черномы где на конечно это да но
[03:23:44.600 --> 03:24:09.120]  да тем что мина а ну да ну да мина а ес что есть ясно вот так что такая красота но пересчет
[03:24:09.120 --> 03:24:17.280]  думаю тут вопросов сильных не вызывает я думаю то есть никаких проблем нет вот то есть бомжи
[03:24:17.280 --> 03:24:24.520]  болта с помощью такой таблицы вполне себе можно вычислять минимумы на подотрезке даже за от единицы
[03:24:24.520 --> 03:24:29.240]  потому что любой отрезок но чем там тут написан какой-то текст но суть его догадывается в том
[03:24:29.240 --> 03:24:34.640]  что любой отрезок можно покрыть двумя отрезками длины степени двойки но так и быть пусть они
[03:24:34.640 --> 03:24:44.560]  пересекаются понимаете да вот так что вот такая красота но пожалуй сейчас мы все-таки включим
[03:24:44.560 --> 03:24:53.640]  свет и попробуем найти решить еще продвинутую версию стать корымку значит продвинутая версия
[03:24:53.640 --> 03:25:00.040]  такая представьте себе что нам нужно сделать но то есть у нас есть какие-то элементы мистического
[03:25:00.040 --> 03:25:13.000]  множества на котором определена операция быть да да если бы это есть это да мы сейчас будем
[03:25:13.000 --> 03:25:17.880]  обсуждать дюджин спортси да но то есть раз уж раз об этом зашла речь то как бы не опомянуть об
[03:25:17.880 --> 03:25:38.160]  этом нельзя вот и так ну да и вот опять там когда да в каждой песне
[03:25:38.160 --> 03:25:51.960]  не тогда в каждое но там берет каждой песне настает момент когда можно не смывать он
[03:25:51.960 --> 03:26:03.400]  нужен для того чтобы забыли припев и мы могли его спеть еще один раз и снова он да просто
[03:26:03.920 --> 03:26:15.120]  так вот это мы будем звать операция быть да но у нас уже вы уже встречали такую операцию в прошлом
[03:26:15.120 --> 03:26:23.680]  семестре да значит операция быть значит фишка такая дан массив из элементов а он статический и
[03:26:24.680 --> 03:26:37.240]  и очень значит и но на множестве а операция значит апелла операция быть все что про нее
[03:26:37.240 --> 03:26:48.520]  известно что операция быть ассоциативно это означает что массив меняться не будет но нам
[03:26:48.520 --> 03:27:03.480]  очень хочется отвечать на запросы уить на подотрезке да но порядок не принципиален потому
[03:27:03.480 --> 03:27:10.160]  что уить ассоциативно то есть мы можем отрезок разбить как угодно на два отрезка найти эти
[03:27:10.160 --> 03:27:18.800]  рекурсивно потом скрыть этих в конце вот так что здесь в общем не очень сложно вот значит это
[03:27:18.800 --> 03:27:29.600]  быть все в этом мире быть ассоциативность но ассоциативность это означает что а1
[03:27:30.200 --> 03:27:38.480]  в скобочках быть а3 равно а1 быть а2 быть а3 но да сразу видно что мы с вами фенвик и не
[03:27:38.480 --> 03:27:48.400]  обсуждали да нет это тоже все будет не волнуйтесь там все фенвик это весело да вот значит это
[03:27:48.400 --> 03:27:56.520]  быть значит и очень хочется отвечать на запросы быть на подотрезке заметим что к сожалению тут
[03:27:56.520 --> 03:28:02.600]  уже как бы операция и обратимой быть не обязана поэтому префиксная сумма вылетают и
[03:28:02.600 --> 03:28:09.440]  конечно и демпатентностью тут не пахнет да тут даже коммутативности нету господи какая
[03:28:09.440 --> 03:28:25.320]  демпатентность уже вот спрашивается что же делать какой квадрат зачем квадрат операции на квадрате
[03:28:25.480 --> 03:28:33.120]  когда дерево у нас будет следующим семестром а может и ну подумаем ладно но вообще как бы
[03:28:33.120 --> 03:28:40.880]  это геометрическая структура данных поэтому как бы по идее следующим нет там такой это там
[03:28:40.880 --> 03:28:45.720]  такое красивое дерево на самом деле она хотя да пока оно дерево может логичнее его и сейчас
[03:28:45.720 --> 03:28:53.720]  конечно да там-то да там такой красивый шоу с доказательством да ну вот значит смотрите что
[03:28:53.720 --> 03:29:05.520]  тут делать вот но идея оказывается неожиданно простой внимание да но да но цель конечно что
[03:29:05.520 --> 03:29:13.560]  хочется быть и быть конечно хочется делать за за сколько правильно за о от единиц вот логично
[03:29:13.560 --> 03:29:26.800]  да но какая идея могла бы быть вот но идея может быть такая но если нам плевать за какой симпатику
[03:29:26.800 --> 03:29:34.600]  предподсчет да давайте насчитаем ответ на всех подотресках и сохраним да да
[03:29:34.880 --> 03:29:43.000]  ой ой ой но это отдельно пись это на так это так эту песню мы отдельно будем
[03:29:43.000 --> 03:29:47.320]  рассматривать и в подробности да да да это шоу нет это шоу тоже есть конечно конечно
[03:29:47.320 --> 03:30:04.800]  нет есть там вообще за этот четвертый там но это вот так вот так тихо да конечно же
[03:30:04.800 --> 03:30:16.040]  мы хотим отвечать на запросы за единицу боже упаси считать иначе да да да да да да да
[03:30:16.040 --> 03:30:21.440]  наша цель сделать как спортсах предподсчет за ноготь нет можно конечно не хотя нет тут
[03:30:21.440 --> 03:30:31.800]  конкретно тут с фара холтон бендером крыши вопросы будут сейчас то есть а
[03:30:31.800 --> 03:30:46.360]  ну в принципе а ну а ну да если да если не сводить когда если их водить колсашка туда
[03:30:46.360 --> 03:30:51.640]  в принципе да нет классический фар холтон бендер от сводит все-таки задачу колца а вот так
[03:30:51.640 --> 03:31:00.080]  плюс минус один а потом это да да если да если делать напрямую то наверно да сработает наверно
[03:31:00.080 --> 03:31:05.960]  а ну хотя так что бы ему не сработать да в общем смешно ладно очень смешного будет конечно лад
[03:31:05.960 --> 03:31:17.600]  вот сейчас хотя так что погоди погоди как фар холтон бендер сработает если тебе для
[03:31:17.600 --> 03:31:22.800]  подотрезка все возможных массивов длины не более чем ка надо посчитать ответы
[03:31:22.800 --> 03:31:29.520]  а ну что такое плюс минус один с операции уйти
[03:31:29.520 --> 03:31:41.880]  да нет там было принципиально что с точки зрения с точностью до двига там
[03:31:41.880 --> 03:31:47.440]  массивов все длины ка всего два степени к минус один и поэтому их можно было предподсчитать
[03:31:48.440 --> 03:31:57.080]  русских на этом и основа но какой сдвиг у нас даже операция необратима какой сдвиг
[03:31:57.080 --> 03:32:08.760]  не обратим но минимум не обратим но слава богу там можно прибавлять числом константу и минимум
[03:32:08.760 --> 03:32:15.600]  позиция хотя бы минимуму не поменяется там этим начинаем пользоваться вот но нет с бытию я
[03:32:15.600 --> 03:32:22.160]  боюсь так фар холтон бендер просто так на халяву не сработает так что увы да так что не все так
[03:32:22.160 --> 03:32:31.920]  просто да знаете так что нет как говорится нас попытались придавить авторитетом но но нет но как
[03:32:31.920 --> 03:32:38.560]  говорится геннадий короткий еще это не удавалось и тебе тоже не удастся да это называется не но
[03:32:38.560 --> 03:32:43.640]  геннадий как есть айвы чей не рассказывал эту бойку что ли я мы как-то давали контеста пистей то
[03:32:43.640 --> 03:32:47.680]  есть офисерский контест был в петрозаводске значит мы давали и там была была у нас одна
[03:32:47.680 --> 03:32:53.120]  веселая задача ее тоже отдельно расскажу на том что они не важно не важно какая задача но
[03:32:53.120 --> 03:33:04.320]  ладно давайте быстро расскажу что мы говорим и там задача и там история была такая что дачи
[03:33:04.320 --> 03:33:09.400]  геннадий короткий значит пишет задачу так что он написал задачу посылает получает васи смотрит
[03:33:09.400 --> 03:33:15.000]  так и так он говорит там он что-то но там и там и что-то вроде потестил там что-то по брут форсел все
[03:33:15.000 --> 03:33:19.640]  нормально смотрит так никто задачу не задает это все в таком случае делаем правильно пишем
[03:33:19.640 --> 03:33:25.640]  еще и слушайте а у вас там тесты точно правильно я тут по брут форсел у меня все работает значит
[03:33:25.640 --> 03:33:30.840]  мы открываем задачи открываем тесты смотрим как у него ответ из 17 цифр при том что ответ
[03:33:30.840 --> 03:33:37.880]  должен быть по модулю миллиард семь и с чистой совестью отправляем ему ноу коммерс но собственно
[03:33:37.880 --> 03:33:45.040]  через пять минут он получил акцент вот это я называю да он попытался продавить авторитетом
[03:33:45.040 --> 03:33:50.440]  да ну действительно с какой вероятностью больше бага у них или у меня действительно
[03:33:50.440 --> 03:34:02.000]  вот так вот так вот и так что же здесь делать но здесь мы все-таки предположим что n это степень
[03:34:02.000 --> 03:34:14.960]  двойки сейчас вы и сейчас вы поймете почему смотрите потому что мы построим что-то среднее
[03:34:14.960 --> 03:34:25.040]  между деревом отрезков и полным протоколом мерш сорта но это будет бы но это будет больше
[03:34:25.040 --> 03:34:29.680]  похоже на полный протокол мерш сорта потому что на каждом подотреске будем хранить от длины
[03:34:29.680 --> 03:34:48.640]  этого отрезка элементов чем реально оптамуш по факту 2 не свести а то мне придется это совсем
[03:34:48.640 --> 03:35:00.240]  это вживаться в роли а там как бы там это палка зубы там вылетали не надо вот вот ну что ты хочешь
[03:35:00.240 --> 03:35:14.200]  чтобы я в следующий раз принес мы к тому же и кулак у меня тоже есть в принципе ну и что у меня
[03:35:14.200 --> 03:35:30.760]  от этого кулака нету что ли лишь там есть кулак вот значит смотрите что я буду делать значит на
[03:35:30.760 --> 03:35:48.240]  каждом подотреске я насчитаю префиксный и суффиксный и я считаю внутри каждого подотреска вот
[03:35:48.240 --> 03:35:58.320]  этого из дерева отрезков я насчитаю все эти на префиксах и эти на суффиксах спрашивает как я
[03:35:58.320 --> 03:36:07.280]  буду теперь искать уить на подотреске но идея очень простая но во первых если у меня
[03:36:07.280 --> 03:36:14.200]  элия оказались из разных половин то я могу теперь идти на этом подотреске найти за от единицы
[03:36:14.200 --> 03:36:20.280]  правда ну просто я как бы возьму ответ то есть ответ у меня какой-то вот такой будет и тогда
[03:36:20.280 --> 03:36:31.280]  значит я возьму суффикс здесь и префикс здесь понятно да но но но что делать если у меня элия
[03:36:31.280 --> 03:36:40.200]  окажется в одной из половин ну что пойдемте в правое под дерево да вот пойдемте правое под
[03:36:40.200 --> 03:36:45.520]  дерево и если элия оказались тут в разных половинках то тоже за от единицы ну или там
[03:36:45.520 --> 03:36:53.120]  дальше спускаемся спускаемся спускаемся но в принципе получается такой уйдь уже за логарифом
[03:36:53.120 --> 03:37:04.480]  да это логариф безусловно нет это это штука конечно перестанет быть логарифом если мы с
[03:37:04.480 --> 03:37:11.320]  вами неожиданно научимся за от единицы понимать а собственно в какой отрезок нам надо реально
[03:37:11.320 --> 03:37:26.200]  там реально идти как же это понять по разнице по разнице ничего не поймет что разница если
[03:37:26.200 --> 03:37:31.800]  между ними разница 5 это может быть 5 элементов здесь а могут быть здесь хорошо по разнице вы
[03:37:31.800 --> 03:37:36.760]  ничего не поймете вы только можете по разнице вы можете конечно там оценить снизу что ниже куда
[03:37:36.760 --> 03:37:44.640]  вы точно не пойдете но вот нет на самом деле заметим следующее почему я специально подчеркнул
[03:37:44.640 --> 03:37:52.240]  что у меня n это степень двойки почему я специально подчеркнул потому что заметим что
[03:37:52.240 --> 03:37:58.680]  элия попадут вот в корне в разные половины тогда и только тогда когда у них самый старший бит вот
[03:37:58.680 --> 03:38:07.520]  этот вот там какой там к-1 различается правда более того они попадут в одну половину половину
[03:38:07.520 --> 03:38:11.480]  когда он будет совпадать они попадут в одну половину здесь и в одну половину здесь тогда
[03:38:11.480 --> 03:38:17.200]  и только тогда когда первые два 2 бита совпадают правда поэтому идея оказывается очень просто если
[03:38:17.200 --> 03:38:24.960]  вы хотите как понять на каком уровне у нас произойдет сплит надо просто взять л сорр на это
[03:38:25.040 --> 03:38:31.720]  ссор а не быть да то есть не путайте вот ссор и быть да у нас я понимаю что там может быть
[03:38:31.720 --> 03:38:37.160]  проблема потому что прошлом семестре у нас быть бывал ссором да но но в данном случае идти это
[03:38:37.160 --> 03:38:45.840]  другая но да правда для ксора легче при фиксу там это префиксные ксоры написать про то что ксор
[03:38:45.840 --> 03:38:54.040]  коммутативная обратимый там в общем и ассоциативный еще так что да конкретно для ксора это писать не надо
[03:38:54.040 --> 03:39:04.080]  вот это лучше для шаблона писать вот так вот делаем л сорр и смотрим на какой позиции находится
[03:39:04.080 --> 03:39:11.280]  старший единичный бит как это на сделать ну на самом деле просто там так как у вас этот
[03:39:11.280 --> 03:39:18.000]  сор будет все равно нуля до 2 степени к-1 да то тогда получается что вы там заранее можете там
[03:39:18.000 --> 03:39:26.000]  за отн предпочитать для каждого числа кто у него старший бит понимаете да нет ну нет зачем она
[03:39:26.000 --> 03:39:36.960]  логарифом просто за отн это можно предпочитать она точно вот единица работает предпочитать
[03:39:36.960 --> 03:39:45.360]  а ну да а это функция называется да а это функция называется логарифа двоичной логарифа
[03:39:45.360 --> 03:39:50.640]  округленной вниз да да окей но да но ладно это вы в любом случае предпочитать так или иначе
[03:39:50.640 --> 03:39:58.160]  можете вот но дальше но вот нет но дальше в общем-то идея будет достаточно просто то есть там по
[03:39:58.160 --> 03:40:02.400]  разному можно реализовывать то есть теоретически вы теперь как бы поняв уровень вы можете там
[03:40:03.040 --> 03:40:11.840]  еще и понять в какие конкретно массивы вы попадете но на самом деле конечно есть еще более но может
[03:40:11.840 --> 03:40:22.800]  быть на самом деле еще более крутая реализация на самом деле вот нет нет фишка будет такая на
[03:40:22.800 --> 03:40:29.240]  самом деле дело в том что смотрите ведь суммарная длина всех этих массивов она как бы равна ровно
[03:40:29.480 --> 03:40:37.880]  ну ладно 2 м правда так вот давайте на каждом уровне все префиксные суммы запишем в один
[03:40:37.880 --> 03:40:45.320]  массив и все суффиксные суммы напишем тоже в один массив тогда я утверждаю что если вот
[03:40:45.320 --> 03:40:51.640]  и леру у меня окажутся где-то здесь то тогда вам потребуется префиксная сумма вот здесь и
[03:40:51.640 --> 03:40:56.280]  суффиксная сумма здесь правда и тогда при такой реализации окажется что вам просто на
[03:40:56.280 --> 03:41:01.360]  соответствующем уровне нужно взять значение суффиксной суммы в эльтой ячейке где л это
[03:41:01.360 --> 03:41:09.080]  абсолютное значение и надо его пройтить с префиксным префиксной суммой записанной в эльтой ячейке
[03:41:09.080 --> 03:41:17.600]  соответственно уровне то есть получается прям реализация прям совсем куда-то
[03:41:17.600 --> 03:41:26.600]  так мы спускаться не собираемся мы же уровень за вот единицу ищем
[03:41:26.600 --> 03:41:42.600]  а супер пожалуй пожалуй да да да да да да да да да заметим еще что у нас как бы мы не можем эти
[03:41:42.600 --> 03:41:47.080]  эти два отрезка не могут быть вот эти отрезки да то есть они могут только те которых у которых
[03:41:47.080 --> 03:41:52.440]  есть вот общий родитель поэтому окажется что как бы в каждой паре действительно можно там в
[03:41:52.440 --> 03:41:58.200]  левом отрезке можно считать только суффиксные сумма тут только префиксная получается по памяти
[03:41:58.200 --> 03:42:10.200]  прям идентично классическому спортстейбл вот да спасибо да вот так что так что это был
[03:42:11.200 --> 03:42:22.200]  понятно вот отлично так сколько у нас там времени так ну ладно теперь ладно теперь надо быстренько
[03:42:22.200 --> 03:42:41.760]  разобраться с первым отрезков так так телевизор включись как-то телевизор включись холодильник
[03:42:41.760 --> 03:42:43.360]  юда там и так далее да
[03:42:43.360 --> 03:43:12.720]  так ладно выключить через новый свет пожалуйста
[03:43:12.720 --> 03:43:21.040]  так давайте сейчас побыстрее пойдем так но вот кстати дерево отрезков так но вот если так
[03:43:21.040 --> 03:43:28.400]  действительно так если давайте вкратце вот так или это уже рассказывать не надо это все равно
[03:43:28.400 --> 03:43:34.720]  все знают но я помню что я спрашивал кто-то кто там писал дерево отрезков выясняется что кто-то
[03:43:34.720 --> 03:43:41.360]  никогда не писал так что вот кто не писал давайте вот давайте первую смотрите внимательно потому
[03:43:41.360 --> 03:43:46.640]  что все в остальном это не интересно как раз уже так но мы будем соответственно как хранить ну
[03:43:46.640 --> 03:43:54.760]  храним мы вот примерно таким образом но вот даже тут вместо тысячи формальных слов он одна красивая
[03:43:54.760 --> 03:44:00.120]  картинка на самом деле вот она то есть если мы это делаем для например суммы дамы и я пишу
[03:44:00.120 --> 03:44:07.760]  дерево отрезка предположение что у меня два степеника элементов вот вот то вот оказывается
[03:44:07.760 --> 03:44:12.960]  что вот очень удобно на самом деле хранить яче прям ячейки прямо в массиве ну потому что как в
[03:44:12.960 --> 03:44:20.560]  куче да что дети у вас это там 2к и 2к плюс один ну и здесь там со сдвигом на единичку вот так
[03:44:20.560 --> 03:44:27.600]  что вот такая вот красивая штука вот вы да вот главное вот почему-то я все равно нарисовал на
[03:44:27.600 --> 03:44:33.960]  всякий случай красивую презентацию она почему пригодилась вот ну то есть как бы то есть видим
[03:44:33.960 --> 03:44:38.640]  что вы не на нижнем слое храним весь массив а сверх вот такие суммы но каждая сумма пересчитывается
[03:44:38.640 --> 03:44:46.640]  через две нижние вот но правда здесь вот надо поаккуратнее вот что оговоримся что если у вас
[03:44:46.640 --> 03:44:55.640]  задача изменять один элемент то рекурсивный код писать не надо ну потому что на самом деле вот
[03:44:55.640 --> 03:45:03.680]  захотели вы изменить вот этот элемент вместо пятачка появился кол да что делать но на самом
[03:45:03.680 --> 03:45:11.560]  деле поставить вместо пятачка кол и пробежаться по всем родителям и собственно пересчитать вот
[03:45:11.560 --> 03:45:18.200]  в общем заметим что только как бы подотрезки к которым этот пятачок отношения не имел в общем-то
[03:45:18.200 --> 03:45:28.280]  и сами не поменялись вот но заметим что но вот то есть это в общем-то заметим что в общем-то это
[03:45:28.280 --> 03:45:33.240]  прекрасно делается циклом ваил так у меня тут код не сохранился интересно во между прочим
[03:45:33.240 --> 03:45:40.560]  сохранился то есть на самом деле видите присваивание обратить внимание что это делается вот таким вот
[03:45:40.560 --> 03:45:54.520]  простым нехитрым способом но если присваивание одного элемента конечно нет это как раз нее мою это
[03:45:54.520 --> 03:46:02.680]  до снизу да как-то знаете это до снизу и код и экстра без кучи куча крутых программистов почему-то
[03:46:02.680 --> 03:46:09.320]  вообще могут не подозревать что оказывается это существует нет кто-то реально удивляется что
[03:46:09.320 --> 03:46:13.800]  кто-то реально считает что там сет или куча прям впаянный в алгоритм д экстра намертво почему-то
[03:46:13.800 --> 03:46:25.200]  нет нет и просто прочитали что теория так сразу удается а так но я не знаю не просто читали
[03:46:25.200 --> 03:46:34.160]  д экстру без кучи изначально поэтому но вам еще я вам еще д экстру не читал да так вот
[03:46:34.160 --> 03:46:45.080]  нет там была алгоритм д экстра с кличной кучей но не было самого алгоритма д экстра это нам в этом
[03:46:45.080 --> 03:46:54.560]  семестре еще с вами предстоит это все веселье обсуждать там ну вот ладно да так вот но это
[03:46:54.560 --> 03:46:59.120]  было присваивание это был файн сон вот сумму искать тоже можно не рекурсивно обратить внимание
[03:46:59.480 --> 03:47:08.760]  вот ну кот работает вот за счет чего то есть он работает за счет того что вы вас есть под
[03:47:08.760 --> 03:47:13.600]  отрезок вы думаете можно ли этот отрезок то есть это отрезок можно разбить на пары вот отрезков
[03:47:13.600 --> 03:47:19.720]  у которых есть общий родитель ну вот и возможно на краю еще какие-то лишние элементы вот они да
[03:47:19.720 --> 03:47:26.080]  вот тогда вы можете просто добавить эти лишние элементы к ответу и перейти на более высокий
[03:47:26.080 --> 03:47:32.000]  уровень вот причем как понять является ли самый левый элемент отрезка лишь кем очень
[03:47:32.000 --> 03:47:37.160]  просто надо просто понять там просто вот по индексам давайте посмотрим надо просто понять
[03:47:37.160 --> 03:47:42.960]  он theater у нас все правые элементы четные а все левые элементы нечетные поэтому отличить
[03:47:42.960 --> 03:47:51.800]  левый элемент от право очень просто вот вот�о очень оказывается удобно на самом деле
[03:47:51.800 --> 03:47:56.360]  видите, если сумма на префиксе надо искать, вообще кайф, то есть тут вот прям красота
[03:47:56.360 --> 03:48:10.320]  получается. Вот, так надо подробнее или все понятно? Так надо подробнее? Нет? Отлично. Вот, но в результате
[03:48:10.320 --> 03:48:14.840]  код получается тоже на самом деле, на самом деле он по-моему как-то даже красивше получается,
[03:48:14.840 --> 03:48:32.320]  чем там код того же самого сверху. Ну вот, так, ну хотя, а такими темпами, конечно,
[03:48:32.320 --> 03:48:51.360]  на полу интервалах. Спасибо. Нет, олимпиаде я, кстати, на отрезках пишу. Ну, чисто по привычке,
[03:48:51.360 --> 03:48:57.320]  на самом деле. А, кстати, а, погодите, погодите, слушайте, не факт, нет, погодите, нет, это отрезки,
[03:48:57.320 --> 03:49:04.840]  все нормально. Нет, видите, мид плюс один, все нормально. Нет, я знаю, что есть полуинтервалы,
[03:49:04.840 --> 03:49:11.720]  я знаю, что это круто, да, но, но, извините. Так, ладно, все, на этом, пожалуй, все. Так,
[03:49:11.720 --> 03:49:18.000]  придется в следующий раз закончить. Эту и соответственно. Но ничего страшного.
