[00:00.000 --> 00:09.200]  Мы с вами продолжаем наш курс занятий и наконец-таки,
[00:09.200 --> 00:11.920]  я не знаю, может быть для вас это будет радостная
[00:11.920 --> 00:15.640]  новость, но мы переходим именно к такой полупрактической
[00:15.640 --> 00:19.840]  теме, которая очень важно посмотреть вообще для того,
[00:19.840 --> 00:24.600]  чтобы понимать как современные сервисы работают и вообще
[00:24.600 --> 00:28.400]  как работает вся инфраструктура больших приложений.
[00:28.400 --> 00:31.480]  Возможно, что где-то вам это уже на курсе по Пайтону
[00:31.480 --> 00:34.720]  немного рассказывали, мы попытаемся эти знания
[00:34.720 --> 00:38.960]  углубить и рассмотреть то, как это работает на самом
[00:38.960 --> 00:39.960]  деле.
[00:39.960 --> 00:42.960]  Мы с вами начинаем говорить про сети Voicetag, в том числе
[00:42.960 --> 00:46.720]  мы сначала немного поговорим про низкоуровневую часть,
[00:46.720 --> 00:49.160]  а потом мы уже перейдем более к высокоуровневую
[00:49.160 --> 00:52.360]  части, я дополнил наши лекции по сравнению с прошлыми
[00:52.360 --> 00:55.560]  годами некоторыми примерами для того, чтобы вы могли
[00:55.560 --> 00:56.560]  понимать.
[00:56.560 --> 00:58.080]  И последняя лекция, по большей части, это будет
[00:58.080 --> 01:03.080]  затравка на будущие курсы, в которые вы можете в целом
[01:03.080 --> 01:04.080]  ходить.
[01:04.080 --> 01:07.560]  Да, потому что есть тот же самый курс по многопоточности,
[01:07.560 --> 01:14.120]  есть курс по написанию веб-сервисов, есть курс по сетям отдельной.
[01:14.120 --> 01:16.160]  То есть сегодня у нас такая именно вводная лекция,
[01:16.160 --> 01:18.840]  на которой мы с вами посмотрим именно как это устроено
[01:18.840 --> 01:21.520]  на самом базовом уровне, а дальше мы можем это дело
[01:21.520 --> 01:22.520]  углублять.
[01:22.520 --> 01:26.440]  Итак, мы с вами сначала займемся сетевой инфраструктурой,
[01:26.440 --> 01:30.800]  при этом мы уже перейдем на, так сказать, более высокий
[01:30.800 --> 01:33.560]  уровень, именно на уровень написания сервиса.
[01:33.560 --> 01:37.680]  Хорошо, давайте первый вопрос, который вам зададут
[01:37.680 --> 01:40.040]  на собеседование по сетевой инфраструктуре, как вы
[01:40.040 --> 01:43.040]  думаете, какой?
[01:43.040 --> 01:44.560]  Нет, на самом деле нет.
[01:44.560 --> 01:55.560]  У кого-нибудь есть еще мысли какие, какого?
[01:55.560 --> 01:56.800]  Интернет выглядит сложным.
[01:56.800 --> 02:06.240]  Смотрите, вас скорее всего спросят следующий вопрос.
[02:06.240 --> 02:10.320]  Так, это кажется, вот этот вопрос.
[02:10.320 --> 02:13.440]  Что происходит при запросе адреса, то есть что происходит,
[02:13.440 --> 02:17.060]  когда вы в браузере вводите какую-то ссылку и нажимаете
[02:17.060 --> 02:18.060]  на Enter?
[02:18.060 --> 02:22.200]  Это первый типичный вопрос, который задают по сетям.
[02:22.200 --> 02:26.080]  Наша цель сегодня, так или иначе, разобраться, что
[02:26.080 --> 02:27.880]  происходит при этом вопросе.
[02:27.880 --> 02:31.120]  Так, ну давайте попробуем понять.
[02:31.120 --> 02:35.160]  Во-первых, у нас есть с вами сайт MipTru, например, и на
[02:35.160 --> 02:38.840]  самом деле давайте посмотрим, что же происходит в этот
[02:38.840 --> 02:39.840]  момент времени.
[02:39.840 --> 02:44.080]  То есть мы заходим с вами на MipTru, и у нас открывается
[02:44.080 --> 02:45.080]  страница.
[02:45.080 --> 02:47.520]  Да, кажется, что у нас страница открывается быстро и у
[02:47.520 --> 02:49.040]  нас открывается веб-сайт.
[02:49.120 --> 02:54.660]  Но на самом деле в зависимости от региона сайт будет открываться
[02:54.660 --> 02:55.660]  по-разному.
[02:55.660 --> 02:57.520]  То есть в какой-то момент времени он открывается
[02:57.520 --> 02:59.880]  быстро, в какой-то момент времени он открывается
[02:59.880 --> 03:00.880]  медленно.
[03:00.880 --> 03:03.160]  Более того, здесь очень важный момент состоит в том,
[03:03.160 --> 03:07.600]  что если немножко пошаманить, то можно сделать очень
[03:07.600 --> 03:08.960]  хитрую вещь.
[03:08.960 --> 03:13.600]  Называется, если сюда поставить вместо MipTru Old MipTru, то мы
[03:13.600 --> 03:16.240]  внезапно проваливаемся на вот этот сайт.
[03:16.240 --> 03:18.200]  Это старая версия сайта Фистеха.
[03:18.200 --> 03:20.200]  Не знаю, мне она визуально больше нравится.
[03:20.200 --> 03:24.560]  Есть такие, кто считает, что старая версия сейха
[03:24.560 --> 03:25.560]  была лучше.
[03:25.560 --> 03:26.560]  Сайта.
[03:26.560 --> 03:27.560]  Ну, да.
[03:27.560 --> 03:32.520]  Иногда перенос интерфейса с сетевого всего этого
[03:32.520 --> 03:34.120]  дела происходит таким образом.
[03:34.120 --> 03:36.960]  Более того, знаете, что я могу сказать, я могу отправить
[03:36.960 --> 03:41.000]  запрос на сайт MipTru, при этом кое-что сделать и получить
[03:41.000 --> 03:42.000]  старую версию сайта.
[03:42.000 --> 03:46.400]  То есть существуют такие моменты, когда мы это можем
[03:46.400 --> 03:47.400]  сделать.
[03:47.400 --> 03:49.480]  И как это происходит, на самом деле, нам нужно
[03:49.480 --> 03:50.480]  разобраться.
[03:50.480 --> 03:55.480]  Значит, давайте начнем со следующего момента.
[03:55.480 --> 03:59.640]  Я, опять же, быстро пробегусь по основным моментам, потому
[03:59.640 --> 04:01.520]  что сейчас я этим грузить не хочу.
[04:01.520 --> 04:03.680]  То есть это все будет на курсе по сетям.
[04:03.680 --> 04:07.520]  Значит, в чем состоит суть?
[04:07.520 --> 04:11.920]  У нас на самом деле, когда мы с вами общаемся, у нас
[04:11.920 --> 04:13.320]  есть два процесса.
[04:14.200 --> 04:19.320]  То есть у нас есть процесс A, и есть некоторый процесс
[04:19.320 --> 04:20.320]  B.
[04:20.320 --> 04:26.400]  Только учтите, что если раньше мы запускали с вами простые
[04:26.400 --> 04:30.280]  программы, и, допустим, у нас процесс A и процесс
[04:30.280 --> 04:33.360]  B каким-то образом обменивался, зачастую они обмениваются
[04:33.360 --> 04:34.880]  через какой-то общий файл.
[04:34.880 --> 04:42.080]  То есть у них есть какой-то файл, в котором они делают
[04:42.080 --> 04:43.080]  запрос.
[04:43.240 --> 04:46.320]  Кто-то из вас сейчас делает проект по базам данных.
[04:46.320 --> 04:49.720]  Соответственно, процессы A и B могут обмениваться не
[04:49.720 --> 04:52.640]  только через файл, но и через базу данных.
[04:52.640 --> 04:55.280]  А хотелось бы, чтобы они общались между собой напрямую.
[04:55.280 --> 05:01.400]  Кто-нибудь, возможно, с тем темом семинаров уже
[05:01.400 --> 05:05.280]  знает, как можно общаться, как два процесса могут общаться
[05:05.280 --> 05:06.280]  между собой.
[05:06.480 --> 05:12.600]  Через порт это как раз то, к чему я подвожу.
[05:12.600 --> 05:20.840]  Так, хорошо, давайте я подскажу.
[05:20.840 --> 05:26.720]  Кто помнит, что делает команда вот эта?
[05:27.160 --> 05:43.480]  Ls, палка, wc-l, количество файлов в директории подсчитывают.
[05:43.480 --> 05:45.880]  То есть смотрите, что у нас получается.
[05:45.880 --> 05:49.280]  У нас есть один процесс A, который является ls, есть
[05:49.280 --> 05:51.720]  процесс B, который является wc-l.
[05:51.720 --> 05:53.160]  И что у нас происходит?
[05:53.160 --> 05:56.000]  У нас вывод одного процесса перенаправляется на вход
[05:56.000 --> 05:57.000]  другого процесса.
[05:57.000 --> 05:59.840]  То есть мы по факту можем сказать, что вот у нас есть
[05:59.840 --> 06:08.120]  открытый файл, у нас открывается поток estdout, а у B открывается
[06:08.120 --> 06:09.120]  stdin.
[06:09.120 --> 06:13.240]  И, собственно, мы перенаправляем процесс из estdout в stdin, то
[06:13.240 --> 06:15.200]  есть мы отправляем запрос в одну сторону.
[06:15.200 --> 06:18.720]  Но хотелось бы сделать так, чтобы эти соединения
[06:18.720 --> 06:23.840]  работали, так сказать, похожим образом, как файлы, но при
[06:23.840 --> 06:25.920]  этом они находились на более высоком уровне.
[06:25.920 --> 06:31.660]  И как раз для этого существует способ, который регламентирует
[06:31.660 --> 06:34.000]  нам процессы взаимодействия файлов.
[06:34.000 --> 06:38.280]  Значит, есть специальные типы файловых устройств,
[06:38.280 --> 06:40.600]  они называются сетевыми файлами или называются
[06:40.600 --> 06:41.600]  сокетами.
[06:41.600 --> 06:47.440]  И как раз при помощи механизма сокетов можно обеспечить
[06:47.440 --> 06:50.680]  так, что два процесса между собой при помощи некоторых
[06:50.680 --> 06:54.000]  протоколов будут взаимодействовать как файловые дескрипторы,
[06:54.000 --> 06:58.520]  то есть как открытые файлы, но при этом будут взаимодействовать
[06:58.520 --> 07:02.520]  на более высоком уровне, то есть он позволяет открыть,
[07:02.520 --> 07:05.560]  в отличие от основных файлов, мы можем привязаться к
[07:05.560 --> 07:08.800]  сетевой инфраструктуре, к сетевому стеку.
[07:08.800 --> 07:11.160]  И нам нужно понять, каким образом мы можем привязаться
[07:11.160 --> 07:14.160]  к сетевому стеку.
[07:14.160 --> 07:18.920]  Зачастую у нас A и B это у нас либо два компьютера,
[07:18.920 --> 07:23.480]  либо A это клиент, B это некоторые серверы, либо A и B это отдельные
[07:23.480 --> 07:26.080]  серверы, в котором просто A выступает как клиент, а
[07:26.080 --> 07:28.080]  B выступает как сервер, который принимает запрос.
[07:28.080 --> 07:33.200]  И я делаю подводку специально к следующей вещи, пожалуйста,
[07:33.200 --> 07:36.040]  сейчас не пугайтесь от большого слайда, есть специальный
[07:36.040 --> 07:40.720]  международный стандарт, мы с вами обучаемся по международным
[07:40.720 --> 07:45.480]  стандартам, и этот международный стандарт называется OSI.
[07:45.480 --> 07:49.920]  Он достаточно страшный, он состоит из семи уровней,
[07:49.920 --> 07:53.800]  но по факту большую часть из этих уровней нам знать
[07:53.800 --> 07:54.800]  особо не надо.
[07:54.800 --> 07:58.560]  Это просто классика, про которую нужно сказать.
[07:58.560 --> 08:03.600]  Итак, когда у нас есть два процесса A и B, давайте назовем
[08:03.600 --> 08:09.040]  процесс A источник, процесс B назначение, у нас на самом
[08:09.040 --> 08:11.960]  деле взаимодействие между этими процессами происходит
[08:11.960 --> 08:17.880]  на семи уровнях, всегда выделяют обычно семь уровней, но сейчас
[08:17.880 --> 08:20.600]  есть более простая модификация, в которой находятся на самом
[08:20.600 --> 08:23.560]  деле не семь уровней, а четыре уровня.
[08:23.560 --> 08:27.240]  Давайте поговорим про каждый из них понемногу.
[08:27.240 --> 08:29.560]  На самом деле, когда мы отправляем запрос в браузере, мы с
[08:29.560 --> 08:31.880]  вами работаем на прикладном уровне, то есть это самый
[08:31.880 --> 08:32.880]  верхний уровень.
[08:32.880 --> 08:36.560]  Мы заправляем запрос, и как раз здесь видно по какому
[08:36.560 --> 08:41.120]  протоколу мы обычно общаемся, это либо HyperText Transfer Protocol,
[08:41.280 --> 08:42.280]  либо протокол FTP.
[08:42.280 --> 08:47.080]  Кстати, браузеры позволяют поднимать файловые серверы,
[08:47.080 --> 08:48.080]  можете попробовать.
[08:48.080 --> 08:52.960]  Если у вас, можете провести мысленный, даже физический
[08:52.960 --> 08:55.320]  эксперимент, вы берете в браузере, смотрите есть
[08:55.320 --> 09:00.360]  ли у, ой, роутер дома, и проверяете есть ли у вашего роутера
[09:00.360 --> 09:01.360]  USB выход.
[09:01.360 --> 09:04.560]  Если у вас есть USB выход, значит вы можете поднять
[09:04.560 --> 09:08.480]  файловый сервер внутри вашей системы.
[09:08.480 --> 09:11.680]  Более того, на фистехе в бородатые годы, когда
[09:11.680 --> 09:15.240]  не было еще эпохи интернета, буквально 10 лет назад, была
[09:15.240 --> 09:17.960]  локальная сеть, которая по факту тоже работала как
[09:17.960 --> 09:20.960]  файловый сервер.
[09:20.960 --> 09:23.920]  Если кто-то нас в записи смотрит олды, то Натали
[09:23.920 --> 09:26.680]  Кампус всегда будет в наших сердцах.
[09:26.680 --> 09:30.040]  Сеть называлась Натали Кампус, и она была доступна
[09:30.040 --> 09:31.040]  из фистеха.
[09:31.040 --> 09:34.560]  Дальше мы спускаемся на более низкий уровень, уровень
[09:34.560 --> 09:35.560]  представления.
[09:35.560 --> 09:40.240]  Мы отправляем с вами какие-то сайты, то есть у нас либо
[09:40.240 --> 09:44.600]  отдается HTML страничка, либо отдаются картинки, либо
[09:44.600 --> 09:48.000]  отдаются стилевые картинки, либо отдаются скрипты
[09:48.000 --> 09:49.000]  до исполнения.
[09:49.000 --> 09:53.120]  Дальше следующий уровень, давайте спустимся ниже,
[09:53.120 --> 09:54.120]  это сеансовый уровень.
[09:54.120 --> 09:59.880]  Обычно его практически редко можно увидеть за некоторым
[09:59.880 --> 10:00.880]  исключением.
[10:00.880 --> 10:03.760]  Это некоторые исключения, это обычно сервисы из трех
[10:03.760 --> 10:06.760]  букв, которые мы рассматривали в примере паттерна прокса.
[10:06.760 --> 10:10.160]  Этими тремя буквами вы зачастую пользуетесь.
[10:10.160 --> 10:14.600]  На ВП начинается, на ПН заканчивается.
[10:14.600 --> 10:20.120]  Обычно эти сервисы работают именно в сеансовом уровне.
[10:20.120 --> 10:24.440]  Когда вы отправляете запрос в браузер, все равно у вас
[10:24.440 --> 10:26.200]  какая-то информация сохраняется.
[10:26.200 --> 10:31.360]  Вы задумывались о том, каким образом вы так или иначе
[10:31.360 --> 10:32.800]  авторизовываетесь в системе.
[10:33.240 --> 10:36.640]  Что вы авторизовали в системе и почему система о вас знает.
[10:36.640 --> 10:40.680]  А где?
[10:40.680 --> 10:48.600]  Не, то, что мы авторизовались в системе.
[10:48.600 --> 11:05.880]  В принципе, можно и так сказать.
[11:05.880 --> 11:09.320]  Либо используется токен для авторизации, это специальное
[11:09.320 --> 11:12.640]  случайное значение, которое может авторизовать вас
[11:12.640 --> 11:13.640]  по серверу.
[11:13.640 --> 11:18.080]  Либо все хранится на уровне куков, то есть на уровне
[11:18.080 --> 11:19.080]  браузера.
[11:19.080 --> 11:21.360]  Есть специальный механизм куки, расшифровывается
[11:21.360 --> 11:24.640]  как печеньки, через которые можно отправлять вот эту
[11:24.640 --> 11:26.560]  информацию и авторизовывать наш запрос.
[11:26.560 --> 11:30.400]  Это у нас сеансовый уровень, дальше спускаемся ниже.
[11:30.400 --> 11:35.040]  А вот здесь, ниже, заключается интересный момент, каким
[11:35.040 --> 11:37.760]  образом мы отправляем с вами сигнал по сети.
[11:37.760 --> 11:41.200]  То есть мы уже идем на уровень передачи данных.
[11:41.200 --> 11:44.000]  И здесь на транспортном уровне обычно выделяется
[11:44.000 --> 11:45.000]  два протокола.
[11:45.000 --> 11:47.800]  Первый протокол – это TCP, а второй протокол – это
[11:47.800 --> 11:48.800]  протокол UDP.
[11:48.800 --> 11:51.680]  Значит, в чем заключается особенность?
[11:51.680 --> 11:56.360]  Я не буду сейчас детально говорить, собственно, в том,
[11:56.360 --> 12:00.360]  когда мы подключаемся с вами по протоколу TCP, то
[12:00.360 --> 12:04.960]  сервер A убеждается, что сервер B подключен, и они
[12:04.960 --> 12:11.520]  по факту, как сказать, они начинают обмениваться
[12:11.520 --> 12:15.040]  данными, но они обмениваются данными интересным образом.
[12:15.040 --> 12:21.320]  То есть они, грубо говоря, должны удостовериться,
[12:21.320 --> 12:23.040]  что другой клиент находится в сети.
[12:23.040 --> 12:26.560]  То есть, что A и B наладили связь между собой, и после
[12:26.560 --> 12:30.560]  этого A и B отправляют сигнал друг к другу.
[12:30.560 --> 12:33.360]  То есть один может отправить какой-то запрос в пакет
[12:33.360 --> 12:36.200]  данных, а второй отправляет ответ к нему обратно.
[12:36.200 --> 12:42.840]  То есть мы с вами убеждаемся в том, что наши данные, грубо
[12:42.840 --> 12:45.360]  говоря, ни в какой момент времени не произойдет разрыв
[12:45.360 --> 12:47.880]  связи, и что A не отправит B какие-то данные.
[12:47.880 --> 12:50.600]  То есть A и B сразу поймут, что что-то идет не так.
[12:50.600 --> 12:53.920]  Есть другой транспортный уровень, протокол транспортного
[12:53.920 --> 12:55.360]  уровня, он называется UDP.
[12:55.360 --> 12:57.560]  В чем особенность UDP?
[12:57.560 --> 12:59.640]  Это просто направление в одну сторону.
[12:59.640 --> 13:03.920]  То есть A отправляет информацию B, и дальше, не важно, B в
[13:03.920 --> 13:04.920]  сети или нет.
[13:05.400 --> 13:08.760]  Давайте подумаем примеры, когда используется UDP протокол.
[13:08.760 --> 13:12.920]  В каком случае можно сделать так, чтобы какую-то часть
[13:12.920 --> 13:14.360]  информации мы могли пропустить?
[13:14.360 --> 13:17.280]  Видеоконференция, стриминг.
[13:17.280 --> 13:19.000]  Да, видеоконференция, стриминг.
[13:19.000 --> 13:21.280]  В принципе, если у нас какие-то кадры пропадут, то в целом
[13:21.280 --> 13:22.520]  ничего страшного не будет.
[13:22.520 --> 13:28.320]  На самом деле, если говорить чуть более интересным способом,
[13:28.320 --> 13:32.440]  то новая версия протокола HTTP работает поверх UDP, но
[13:32.440 --> 13:34.040]  с некоторой дополнительной проверкой.
[13:34.720 --> 13:37.560]  Правда, не поверите, наши браузеры используют слишком
[13:37.560 --> 13:40.520]  устаревшую версию протокола HTTP.
[13:40.520 --> 13:46.760]  Так сказать, браузеры при взаимодействии с некоторыми
[13:46.760 --> 13:52.120]  сайтами, то есть зачастую используют протокол HTTP 1.1,
[13:52.120 --> 13:54.720]  но если говорить более серьезно, то можно переключиться
[13:54.720 --> 13:58.400]  на протокол HTTP 2, и тогда будет работать все быстрее.
[13:58.400 --> 14:01.840]  В разы быстрее, потому что это формат данных такой.
[14:02.840 --> 14:06.520]  Это транспортный уровень, мы определяемся, каким
[14:06.520 --> 14:09.040]  образом мы отправляем друг к другу сообщения.
[14:09.040 --> 14:12.040]  Теперь вопрос, а куда именно отправлять наши сообщения.
[14:12.040 --> 14:18.160]  И здесь мы спускаемся еще на один уровень, это сетевой
[14:18.160 --> 14:19.160]  уровень.
[14:19.160 --> 14:20.920]  И здесь обычно выделяют два сетевых протокола.
[14:20.920 --> 14:24.560]  Первый сетевой протокол это IPv4, и второй протокол
[14:24.560 --> 14:25.560]  это IPv6.
[14:25.560 --> 14:29.000]  Зачастую, сейчас, когда мы вводим информацию в браузере,
[14:29.000 --> 14:30.560]  мы используем протокол IPv4.
[14:31.480 --> 14:35.800]  То есть, когда вы вводите в браузере что-нибудь вроде...
[14:35.800 --> 14:43.000]  Так, сейчас попробую 127.0.0.1, да, у меня ничего не открыто.
[14:43.000 --> 14:48.800]  Давайте я подшаманю немножко.
[14:48.800 --> 14:53.240]  Немножко подшаманю.
[14:53.240 --> 14:54.240]  Во.
[14:54.360 --> 14:55.360]  Во.
[14:55.360 --> 14:59.080]  Собственно, что мы с вами отправляем?
[14:59.080 --> 15:03.080]  Мы отправляем с вами магическую комбинацию из четырех.
[15:03.080 --> 15:07.880]  А ничего не видно, да?
[15:07.880 --> 15:08.880]  Блин.
[15:08.880 --> 15:11.680]  Кто-нибудь знает, как увеличить фон браузера.
[15:11.680 --> 15:16.680]  Так, фонт.
[15:16.680 --> 15:17.680]  Давай.
[15:17.680 --> 15:18.680]  А?
[15:18.680 --> 15:19.680]  А.
[15:19.680 --> 15:20.680]  Так.
[15:20.680 --> 15:21.680]  Так.
[15:21.680 --> 15:45.680]  Скорее всего, где-нибудь здесь.
[15:45.680 --> 15:49.680]  Скорее всего, где-нибудь здесь.
[15:56.680 --> 15:58.680]  Короче, ладно.
[15:58.680 --> 16:00.680]  В общем, смотрите.
[16:00.680 --> 16:02.680]  Попробую.
[16:02.680 --> 16:03.680]  Да.
[16:03.680 --> 16:07.680]  В общем, я ввёл в браузере 127.001,
[16:07.680 --> 16:13.680]  и дальше я ввёл некоторые двоеточия и 18.888.
[16:13.680 --> 16:16.680]  Мне придётся написать.
[16:21.680 --> 16:24.680]  Значит, вот это вот у нас, это IP-адрес.
[16:27.680 --> 16:30.680]  IP расшифровывается как интернет-протокол.
[16:34.680 --> 16:36.680]  А вот это порт,
[16:36.680 --> 16:38.680]  по которому мы подключаемся.
[16:39.680 --> 16:41.680]  То есть, поверха,
[16:41.680 --> 16:44.680]  грубо говоря, это у нас получается адрес назначения,
[16:44.680 --> 16:48.680]  а это по факту можно считать адрес дома,
[16:48.680 --> 16:50.680]  адрес квартиры, в которую мы отправили.
[16:50.680 --> 16:52.680]  То есть, если это дом, это номер квартиры.
[16:53.680 --> 16:55.680]  Дополнительно давайте тогда расскажу,
[16:55.680 --> 16:58.680]  что в браузерной ссылке есть.
[16:58.680 --> 17:02.680]  На самом деле здесь у нас вот это всё называется URL,
[17:02.680 --> 17:04.680]  и здесь у нас первое, что есть, это протокол,
[17:04.680 --> 17:06.680]  по которому мы отправляем сообщение.
[17:06.680 --> 17:09.680]  То есть, здесь у нас используется протокол HTTP.
[17:10.680 --> 17:12.680]  Дальше у нас идёт разделитель,
[17:12.680 --> 17:17.680]  и дальше вот здесь мы с вами отправляем уже запрос.
[17:20.680 --> 17:23.680]  То есть, здесь у нас как раз идёт структура директория.
[17:23.680 --> 17:25.680]  Допустим, я не знаю, три.
[17:25.680 --> 17:29.680]  Это означает, что нам на сервере нужно отправить запрос в slash3.
[17:30.680 --> 17:34.680]  То есть, как-то посмотреть в эту директорию, а-ля директорию.
[17:34.680 --> 17:37.680]  Вот, в принципе, здесь можно менять
[17:37.680 --> 17:39.680]  очень большое различных вещей.
[17:39.680 --> 17:41.680]  Допустим, из таких протоколов,
[17:41.680 --> 17:43.680]  которые браузер поддерживает, это файл.
[17:46.680 --> 17:49.680]  Это, так сказать, вот это вот у нас, если мы говорим,
[17:49.680 --> 17:54.680]  то это L7, то есть, прикладной уровень.
[17:54.680 --> 17:58.680]  Вот это у нас уровень L3 получается.
[17:58.680 --> 18:00.680]  То есть, когда мы указываем IP-адрес.
[18:00.680 --> 18:03.680]  Если мы указываем не IP-адрес, а какой-то адрес сервера,
[18:03.680 --> 18:06.680]  то мы снова переключаемся на L7 протокол.
[18:06.680 --> 18:11.680]  L7, смотрите, L1, L2, L3, L4, L5, L6, L7 это обозначения,
[18:11.680 --> 18:15.680]  которые используют для быстрого понимания,
[18:15.680 --> 18:18.680]  на каком уровне стека ИСОАСИ мы с вами находимся.
[18:20.680 --> 18:23.680]  Так, вопрос, вот это понятно, что я написал?
[18:26.680 --> 18:28.680]  Прикладной, самый верхний.
[18:28.680 --> 18:32.680]  То есть, как раз на уровне L3 у нас с вами возникает IP-адрес.
[18:32.680 --> 18:34.680]  Значит, есть страшные IP-адреса.
[18:34.680 --> 18:36.680]  Это IPv6.
[18:36.680 --> 18:37.680]  Почему их ввели?
[18:37.680 --> 18:41.680]  Потому что IP-адрес обычно имеет диапазон следующий.
[18:41.680 --> 18:45.680]  От каждой актет, так сказать.
[18:45.680 --> 18:46.680]  Почему он актет?
[18:46.680 --> 18:48.680]  Потому что он выражается восьмью байтами.
[18:50.680 --> 18:51.680]  Вот.
[18:51.680 --> 18:55.680]  Как раз на уровне L3 у нас с вами возникает IP-адрес.
[18:55.680 --> 18:57.680]  Он выражается восьмью байтами.
[18:58.680 --> 19:00.680]  Ой, восемь бит.
[19:02.680 --> 19:04.680]  И всего таких актета четыре.
[19:05.680 --> 19:09.680]  То есть, сколько всего мы бит с вами можем закодировать в IP-адресе?
[19:13.680 --> 19:15.680]  Ну, четыре раза по восемь.
[19:20.680 --> 19:23.680]  Сколько 2 в 32-й будет приблизительно?
[19:25.680 --> 19:27.680]  На 4 миллиарда.
[19:30.680 --> 19:34.680]  Как вы думаете, компьютеров всего больше или меньше, чем 4 миллиарда?
[19:34.680 --> 19:37.680]  Ну, вообще любых устройств, которые могут подключаться по сети.
[19:38.680 --> 19:40.680]  Да, сейчас уже больше.
[19:40.680 --> 19:42.680]  Соответственно, на всех IP-адресов не хватит.
[19:43.680 --> 19:44.680]  Вот.
[19:44.680 --> 19:48.680]  И поэтому, собственно, разработали новую версию протокола IPv6,
[19:48.680 --> 19:53.680]  при помощи которого можно задавать слишком большое количество диапазонов.
[19:53.680 --> 19:57.680]  Я не буду говорить, как выглядит IPv6, это IP-адрес,
[19:57.680 --> 19:59.680]  но, в общем, он выглядит достаточно страшно.
[20:01.680 --> 20:02.680]  А вы сейчас смотрите.
[20:02.680 --> 20:05.680]  Это получается у нас с вами протокол третьего уровня.
[20:05.680 --> 20:09.680]  Дальше, если мы с вами спускаемся, здесь уже начинается физика.
[20:09.680 --> 20:11.680]  Физика процесса.
[20:11.680 --> 20:13.680]  Потому что здесь нам уже надо понять,
[20:13.680 --> 20:15.680]  по какому с вами протоколу мы общаемся,
[20:15.680 --> 20:18.680]  именно на уровне канала, то есть сеть.
[20:18.680 --> 20:22.680]  И, наверное, вы заметили, что в некоторых сетях
[20:22.680 --> 20:28.680]  у нас с вами максимальная скорость доступа в интернет 100 мегабит в секунду.
[20:28.680 --> 20:29.680]  Мегабит.
[20:29.680 --> 20:33.680]  А на некоторых сетях максимальная скорость доступа 1000 мегабит в секунду.
[20:33.680 --> 20:37.680]  Да, то есть это уже зависит от того канала, который мы с вами можем поддерживать.
[20:38.680 --> 20:40.680]  Какую максимальную скорость вы видели?
[20:42.680 --> 20:43.680]  Подключение к интернету.
[20:48.680 --> 20:49.680]  Ну, это, конечно, мощно.
[20:52.680 --> 20:53.680]  Мегабит?
[20:53.680 --> 20:54.680]  Ну, нормально, в принципе.
[20:54.680 --> 20:55.680]  25 мегабит в секунду.
[20:56.680 --> 20:59.680]  Ну, в принципе, это значит, что есть поддержка гигабитного интернета.
[20:59.680 --> 21:03.680]  У меня, короче, такая небольшая байка.
[21:03.680 --> 21:08.680]  У меня дома раньше тоже интернет 500 мегабит в секунду.
[21:08.680 --> 21:13.680]  И, видимо, когда некоторые злостные товарищи из другого провайдера
[21:13.680 --> 21:17.680]  пришли и перерезали провода или не из злостного провайдера,
[21:17.680 --> 21:20.680]  точнее, из домоуправления, сказали провода не проводить,
[21:20.680 --> 21:21.680]  они провели новый провод.
[21:22.680 --> 21:26.680]  Только беда оказалась в том, что они провели не гигабитный интернет,
[21:26.680 --> 21:28.680]  а 100-мегабитный интернет.
[21:29.680 --> 21:32.680]  Хотя максимальная скорость соединения 500 мегабит.
[21:32.680 --> 21:34.680]  Ну, вот я до сих пор сижу со 100-мегабитным интернетом,
[21:34.680 --> 21:36.680]  ну, видимо, надо что-то это делать.
[21:36.680 --> 21:39.680]  То есть, видите, у нас именно уже на канальном уровне,
[21:39.680 --> 21:42.680]  то есть мы перешли на физику, на уровень проводов.
[21:42.680 --> 21:46.680]  Понятно, что нас это особо не интересует, но, в принципе, мы должны понимать,
[21:46.680 --> 21:48.680]  на каком уровне у нас идёт соединение.
[21:48.680 --> 21:50.680]  И последнее – это физический уровень.
[21:50.680 --> 21:54.680]  То есть, грубо говоря, как у нас байты по сети идут.
[21:54.680 --> 21:59.680]  И здесь, как раз, если мы посмотрим на вот эту версию стандарта 11801,
[21:59.680 --> 22:03.680]  то, я не знаю, видели вы, наверное, где-нибудь Ethernet кабель?
[22:04.680 --> 22:09.680]  Значит, вот этот стандарт описывает, как работают жилы этих проводов.
[22:10.680 --> 22:16.680]  То есть, как именно подавать напряжение на каждую из жил,
[22:16.680 --> 22:19.680]  чтобы, собственно, шли байты по сети.
[22:21.680 --> 22:23.680]  Это вот весь стэк.
[22:23.680 --> 22:26.680]  Понятно, что грузить им особо не надо,
[22:26.680 --> 22:29.680]  поэтому есть более упрощённая версия этого стэка.
[22:29.680 --> 22:33.680]  Давайте подумаем, какие, в принципе, из этих уровней можно объединить?
[22:36.680 --> 22:38.680]  Нижние два точно можно объединить?
[22:42.680 --> 22:44.680]  Первые три ещё можно объединить.
[22:44.680 --> 22:46.680]  Пятый, шестой и седьмой. То есть, они работают вместе.
[22:46.680 --> 22:49.680]  И как раз мы переходим к новой версии протокола,
[22:49.680 --> 22:51.680]  которая называется TCPIP.
[22:52.680 --> 22:56.680]  В нём у нас объединяется пятый, шестой и седьмой уровень,
[22:56.680 --> 23:00.680]  и каналный уровень у нас тоже называется общим.
[23:00.680 --> 23:02.680]  То есть, это очень важно.
[23:02.680 --> 23:04.680]  Сейчас это уже не важно,
[23:04.680 --> 23:09.680]  потому что, так сказать, уже версия интернет-взаимодействия,
[23:09.680 --> 23:11.680]  так или иначе, устаканилась.
[23:11.680 --> 23:13.680]  То есть, лет ещё 20 назад,
[23:13.680 --> 23:16.680]  когда можно было подключаться к интернету разными способами,
[23:16.680 --> 23:20.680]  не знаю, возможно, вы видели разные мемы с списком модемов.
[23:21.680 --> 23:25.680]  То есть, раньше реально модемы работали по телефонной сети.
[23:25.680 --> 23:29.680]  То есть, это начало нулевых, когда вы, грубо говоря,
[23:29.680 --> 23:34.680]  сидели в интернете по ночам, вы вытаскивали штекер из домашнего телефона
[23:34.680 --> 23:39.680]  и по этому штекеру подключали его к модему и пользовались интернетом.
[23:39.680 --> 23:41.680]  Потом никто дозвониться не мог,
[23:41.680 --> 23:43.680]  потому что вы занимали весь сигнал.
[23:44.680 --> 23:47.680]  Вот. То есть, вот такой вот способом есть.
[23:47.680 --> 23:49.680]  Сейчас, конечно же, уже всё устаканилось.
[23:49.680 --> 23:51.680]  Итак, давайте теперь...
[23:51.680 --> 23:54.680]  Так, поэтому понятно, что происходит?
[23:54.680 --> 23:57.680]  Теперь давайте поговорим про канонических представителей
[23:57.680 --> 23:59.680]  на каждом из уровней TCPIP.
[23:59.680 --> 24:03.680]  Значит, на каналном уровне у нас с вами есть такое понятие,
[24:03.680 --> 24:04.680]  как MAC-адрес.
[24:04.680 --> 24:06.680]  То есть, это как раз идентификатор,
[24:06.680 --> 24:11.680]  в котором сколько? 4 байта на каждый из объектов.
[24:11.680 --> 24:14.680]  4 байта, раз, два, три, четыре, пять, шесть.
[24:14.680 --> 24:18.680]  То есть, 24 байта у нас выдаётся на каждое устройство.
[24:18.680 --> 24:22.680]  И при помощи него можно задать статический IP-адрес.
[24:22.680 --> 24:26.680]  То есть, вы можете привязать IP-адрес вашей сети на устройство.
[24:26.680 --> 24:30.680]  Дальше, на сетовом уровне у нас задаётся IP-адрес.
[24:30.680 --> 24:34.680]  Вот, например, IP-адреса 192.168.0.123.
[24:34.680 --> 24:38.680]  На транспортном уровне мы всё оставляем точно так же.
[24:38.680 --> 24:41.680]  То есть, мы говорим про TCP-протокол.
[24:41.680 --> 24:44.680]  Значит, это у нас сообщения точно доходят.
[24:44.680 --> 24:47.680]  По HTTP-протоколу у нас сообщения только отправляются.
[24:47.680 --> 24:50.680]  Мы не гарантируем доставку этих сообщений.
[24:50.680 --> 24:54.680]  И на прикладном уровне на самом деле у нас определяется протокол.
[24:54.680 --> 24:57.680]  Но зачастую есть некоторое соглашение о том,
[24:57.680 --> 25:01.680]  что когда вы используете тот или иной протокол,
[25:01.680 --> 25:03.680]  вы привязываетесь к тому или иному порту.
[25:03.680 --> 25:08.680]  Значит, давайте я здесь тоже скажу, что когда вы используете сетевое устройство alias socket,
[25:08.680 --> 25:11.680]  вы можете его сохранить на уровне файла.
[25:11.680 --> 25:14.680]  То есть, он реально у вас создаётся раз.
[25:14.680 --> 25:18.680]  Но при этом вы можете слушать соединения, которые вам приходят из сети.
[25:18.680 --> 25:26.680]  То есть, вы можете привязать ваш socket на самом деле к определённому порту,
[25:26.680 --> 25:30.680]  к определённому сетевому интерфейсу и к определённому порту.
[25:30.680 --> 25:36.680]  И договариваются, что просто те порты, которые здесь есть, они вот такие заранее обозначены.
[25:36.680 --> 25:43.680]  То есть, на самом деле, когда вы пишете в браузере что-то alias HTTP MIP-true,
[25:43.680 --> 25:48.680]  давайте я, наверное, тут даже покажу это всё дело.
[25:48.680 --> 25:52.680]  Давайте я зайду на простой сайт example.com.
[25:52.680 --> 25:54.680]  Откроем вкладку Inspect.
[25:54.680 --> 25:56.680]  Это, кстати, знакомьтесь.
[25:56.680 --> 25:57.680]  Как её вызвать?
[25:57.680 --> 26:01.680]  Она вызывается либо F12, либо правой кнопкой мышки Inspect.
[26:01.680 --> 26:03.680]  И я открою вкладку Сеть.
[26:03.680 --> 26:06.680]  Для того, чтобы мы посмотрели, какой запрос отправился.
[26:06.680 --> 26:10.680]  Мы на самом деле отправили запрос на HTTPS протокол,
[26:10.680 --> 26:14.680]  и вот смотрите, сразу что здесь происходит, там выделяют IP-адрес.
[26:14.680 --> 26:19.680]  То есть, мы на самом деле делаем запрос по вот одному IP-адресу в 2.443.
[26:19.680 --> 26:22.680]  То есть, порт, по которому мы с вами отправляем, это порт 443.
[26:22.680 --> 26:25.680]  Так, я сейчас тему поменяю.
[26:25.680 --> 26:27.680]  А или она?
[26:29.680 --> 26:31.680]  Так.
[26:36.680 --> 26:38.680]  Угу.
[26:38.680 --> 26:40.680]  Ну, видимо, да.
[26:40.680 --> 26:43.680]  Она уже зависит от этого темы экрана.
[26:43.680 --> 26:46.680]  То есть, здесь порт 443.
[26:46.680 --> 26:49.680]  Теперь смотрите, сделаем одну некоторую махинацию.
[26:49.680 --> 26:53.680]  Мы заменим HTTPS на HTTP.
[26:53.680 --> 26:57.680]  И видите, здесь порт по умолчанию ставится 80, а не 443.
[26:57.680 --> 27:00.680]  То есть, HTTP протокол работает на порту 80,
[27:00.680 --> 27:06.680]  на HTTPS договаривается работать на порту 443.
[27:06.680 --> 27:09.680]  Значит, если мы говорим еще про другие сетевые уровни,
[27:09.680 --> 27:14.680]  то, значит, на 21 порту обычно работает файловый протокол.
[27:14.680 --> 27:19.680]  Отравка писем происходит на порту 587.
[27:19.680 --> 27:23.680]  Если это почтовый провайдер типа Gmail,
[27:23.680 --> 27:26.680]  у Яндекса это работает все на порту 465.
[27:26.680 --> 27:31.680]  То есть, видите, у нас есть заранее список обозначенных портов.
[27:31.680 --> 27:36.680]  И когда вы подключаетесь к протоколу SSH, secure shell,
[27:36.680 --> 27:39.680]  то есть, когда вы подключаетесь к удаленному компьютеру,
[27:39.680 --> 27:42.680]  то по умолчанию вы подключаетесь к порту 22.
[27:42.680 --> 27:44.680]  То есть, это защищенный протокол,
[27:44.680 --> 27:47.680]  который позволяет вам сделать удаленное подключение
[27:47.680 --> 27:49.680]  к какому-то компьютеру.
[27:49.680 --> 27:53.680]  То есть, на самом деле, когда мы с вами открываем соединение,
[27:53.680 --> 27:56.680]  то у нас открывается соединение на порту 22.
[27:56.680 --> 28:04.680]  Заранее скажу, что привязку к портам меньше, чем 1024
[28:04.680 --> 28:07.680]  может делать только суперпользователь.
[28:07.680 --> 28:10.680]  Когда вы не являетесь суперпользователем,
[28:10.680 --> 28:14.680]  вы можете использовать порты только от 1024.
[28:14.680 --> 28:19.680]  И, на самом деле, когда клиент отправляет какой-то запрос,
[28:19.680 --> 28:24.680]  то тоже, на самом деле, у нас отправляет запрос с определенного порта.
[28:24.680 --> 28:27.680]  Давайте я покажу некоторые примеры,
[28:27.680 --> 28:29.680]  как можно отлаживать сетевой трафик.
[28:29.680 --> 28:33.680]  Сетевой трафик можно отлаживать при помощи инструмента под названием Wireshark.
[28:33.680 --> 28:35.680]  Его можно скачать.
[28:35.680 --> 28:38.680]  И давайте просто посмотрим, как это происходит.
[28:38.680 --> 28:41.680]  Мы пропускаем эту версию.
[28:41.680 --> 28:43.680]  Так, а где он? Открылся, да?
[28:43.680 --> 28:48.680]  Во! Не знаю, тут ничего не видно, да, наверное?
[28:48.680 --> 28:50.680]  Так, я сейчас...
[28:54.680 --> 28:56.680]  Давай, не сломайся.
[28:57.680 --> 28:59.680]  Так.
[29:01.680 --> 29:03.680]  Да.
[29:07.680 --> 29:11.680]  Давайте я послушаю протокол N0.
[29:16.680 --> 29:18.680]  Не знаю, видно?
[29:20.680 --> 29:21.680]  Вот.
[29:21.680 --> 29:23.680]  Здесь мы слушаем на низком уровне,
[29:23.680 --> 29:27.680]  и видно, что у нас с вами отправляются какие-то сигналы по сети.
[29:27.680 --> 29:31.680]  То есть у нас есть протокол UDP, есть протокол TCP.
[29:31.680 --> 29:33.680]  И вот здесь у нас идут IP-адреса.
[29:33.680 --> 29:39.680]  Значит, вот это мой IP-адрес моего компьютера в сети.
[29:39.680 --> 29:44.680]  И здесь видно, что у меня как раз отправляются данные на разные-разные системы.
[29:44.680 --> 29:50.680]  То есть, в принципе, давайте попробуем открыть это все Example.com.
[29:50.680 --> 29:53.680]  Значит, мне нужно будет сделать следующее.
[29:53.680 --> 29:57.680]  IPDST.
[29:59.680 --> 30:02.680]  Отшифровываем наш трафик и проверяем.
[30:02.680 --> 30:04.680]  Во, видите?
[30:04.680 --> 30:07.680]  То есть я отправил запрос сначала по протоколу TCP.
[30:07.680 --> 30:11.680]  Значит, и вот видите, у меня тоже алоцировался определенный порт.
[30:11.680 --> 30:14.680]  То есть у меня порт 64093.
[30:14.680 --> 30:20.680]  И здесь как раз можно посмотреть, какие именно пакеты отправляются по протоколу TCP.
[30:20.680 --> 30:24.680]  То есть вот они здесь у нас как раз есть.
[30:24.680 --> 30:27.680]  Дальше мы переключились на протокол HTTP.
[30:27.680 --> 30:29.680]  У меня здесь подключение идет.
[30:29.680 --> 30:33.680]  А остальные каналы, видите, есть канал SIN, есть канал ACK.
[30:33.680 --> 30:39.680]  Они как раз и позволяют, вот эти вот пакеты, которые отправляют SIN-ACK,
[30:39.680 --> 30:42.680]  они позволяют настроить взаимодействие между сервисами A и B.
[30:42.680 --> 30:46.680]  По протоколу TCP мы такого не получим.
[30:46.680 --> 30:50.680]  То есть, в принципе, вы можете скачать себе Wireshark и попробовать в нем поэкспериментировать.
[30:50.680 --> 30:53.680]  Посмотреть, куда у вас данные по сети отправляются.
[30:53.680 --> 30:56.680]  Вы, наверное, найдете очень много интересных вещей.
[30:59.680 --> 31:01.680]  Wireshark.
[31:03.680 --> 31:06.680]  Мне, наверное, нужно будет в чате отправить.
[31:09.680 --> 31:11.680]  Сетевая кула.
[31:11.680 --> 31:20.680]  Вот, значит, вот такая вещь.
[31:20.680 --> 31:25.680]  Тут прямо можно посмотреть пакеты, и она умеет разбирать запросы с определенных протоколов.
[31:25.680 --> 31:30.680]  То есть мы прям спустились практически на низком уровне.
[31:30.680 --> 31:33.680]  Так, хорошо, это понятно, да?
[31:33.680 --> 31:37.680]  Давайте вопросы, если нет, то двинемся дальше.
[31:38.680 --> 31:42.680]  А теперь вопрос вам.
[31:42.680 --> 31:44.680]  Я задаю.
[31:44.680 --> 31:51.680]  Мы же вводим в страницу не IP-адрес,
[31:51.680 --> 31:54.680]  мы вводим с вами адрес HTTP MIP-TRUE.
[31:54.680 --> 31:56.680]  Или HTTPS MIP-TRUE.
[31:56.680 --> 31:58.680]  Что же происходит?
[32:00.680 --> 32:02.680]  Не-не-не.
[32:02.680 --> 32:05.680]  Как мы понимаем, по какому IP-адресу нам идти?
[32:08.680 --> 32:11.680]  Да, тут уже правильно говорят, на самом деле.
[32:11.680 --> 32:14.680]  У нас есть DNS, Domain Name Server,
[32:14.680 --> 32:19.680]  которое позволяет понять, по какому IP-адресу располагается тот или иной домен.
[32:19.680 --> 32:22.680]  Хорошо, давайте рассмотрим, как он работает.
[32:22.680 --> 32:28.680]  Значит, у нас есть юзер, который, допустим, хочет пойти на страничку Google.com.
[32:28.680 --> 32:30.680]  Ну, либо на Яндекс.ру, неважно.
[32:30.680 --> 32:32.680]  Значит, что у нас есть?
[32:32.680 --> 32:37.680]  У нас на самом деле протокол Domain Name Server работает по сетевому уровню.
[32:37.680 --> 32:40.680]  Да, тут, кстати, есть кэширование запросов,
[32:40.680 --> 32:44.680]  поэтому, так сказать, обновление страницы идет не очень быстро.
[32:44.680 --> 32:47.680]  Итак, мы идем на страницу Google.com.
[32:47.680 --> 32:50.680]  А дальше, когда мы идем на Google.com,
[32:50.680 --> 32:52.680]  мы должны понять, по какому уровню,
[32:52.680 --> 32:54.680]  какого типа запрос мы отправляем.
[32:54.680 --> 32:58.680]  Обычно, когда мы с вами отправляем запрос на получение IP-адреса,
[32:58.680 --> 33:00.680]  мы отправляем А-метку.
[33:00.680 --> 33:04.680]  То есть мы говорим, пожалуйста, дай нам А-запись по такому имени.
[33:04.680 --> 33:08.680]  И дальше, на самом деле, у нас возникает некоторая табличка,
[33:08.680 --> 33:11.680]  при помощи которой мы с вами можем это сделать.
[33:11.680 --> 33:16.680]  Итак, у нас сначала на нашем локальном компьютере есть, на самом деле,
[33:16.680 --> 33:18.680]  локальный DNS-сервер,
[33:18.680 --> 33:24.680]  который позволяет нам понять, куда нам направлять наш запрос по нашему адресу.
[33:24.680 --> 33:26.680]  И интересное здесь особенно стоит в том,
[33:26.680 --> 33:32.680]  что всегда у нас есть один зарезервированный хост,
[33:32.680 --> 33:34.680]  одно зарезервированное имя.
[33:34.680 --> 33:36.680]  И имя это Localhost.
[33:36.680 --> 33:41.680]  То есть Localhost всегда вас перенаправит на IP-адрес 127.01.
[33:41.680 --> 33:44.680]  Вот, это такое соглашение.
[33:44.680 --> 33:46.680]  А дальше мы смотрим.
[33:46.680 --> 33:50.680]  Если у нас нет локальных записей в нашем DNS-сервере,
[33:50.680 --> 33:53.680]  то мы идем на следующий DNS-сервер.
[33:53.680 --> 33:57.680]  Сначала мы идем в корневой DNS-сервер.
[33:57.680 --> 34:02.680]  В принципе, вы можете поставить даже адрес DNS-сервера в настройках вашей сети.
[34:02.680 --> 34:05.680]  То есть, куда вы именно обращаетесь.
[34:05.680 --> 34:09.680]  По умолчанию, названия DNS-серверов,
[34:09.680 --> 34:11.680]  IP DNS-серверов очень простые.
[34:11.680 --> 34:15.680]  Это либо 4 единицы, если мы идем в Cloudflare,
[34:15.680 --> 34:20.680]  либо 4.4, либо 4.8, либо 8.8.4.4.
[34:20.680 --> 34:22.680]  То есть, IP-адреса у них простые.
[34:22.680 --> 34:24.680]  А дальше это по факту записная книжка.
[34:24.680 --> 34:27.680]  Значит, что у нас находится в корневом DNS-е?
[34:27.680 --> 34:29.680]  Мы пытаемся найти...
[34:29.680 --> 34:33.680]  Представим себе, что у нас есть сайт google.com.
[34:41.680 --> 34:45.680]  Вы не поверите, как представляет этот адрес DNS-сервер.
[34:45.680 --> 34:47.680]  Он берет, его разворачивает,
[34:47.680 --> 34:50.680]  и на самом деле мы с вами обращаемся к адресу .com.google.
[34:53.680 --> 34:58.680]  То есть, сначала мы обращаемся к домену первого уровня .com.
[34:58.680 --> 35:01.680]  То есть, нам нужно найти IP-адрес нашего сервера,
[35:01.680 --> 35:06.680]  на котором находится книжка домена в первом уровне .com.
[35:06.680 --> 35:10.680]  Дальше нам нужно идти на книжку второго уровня.
[35:10.680 --> 35:12.680]  То есть, нам, допустим, говорят,
[35:12.680 --> 35:16.680]  что доменная запись .com находится по IP-адресу 4.2.
[35:16.680 --> 35:21.680]  Тогда мы идем и обращаемся с вами на IP-адрес 4.2.
[35:21.680 --> 35:26.680]  Это доменная локального уровня .com.ru и так далее.
[35:26.680 --> 35:30.680]  И говорим, пожалуйста, где у тебя находится запись .google.
[35:32.680 --> 35:35.680]  Мы идем на запись .google.
[35:35.680 --> 35:38.680]  После этого он говорит, окей, у меня есть такая запись,
[35:38.680 --> 35:40.680]  пожалуйста, иди по такому IP-адресу.
[35:40.680 --> 35:43.680]  И после этого мы идем как раз по этому адресу
[35:43.680 --> 35:45.680]  и отправляем запрос.
[35:46.680 --> 35:47.680]  Как раз.
[35:47.680 --> 35:50.680]  Дополнительно мы можем отправить еще на доменную второго уровня,
[35:50.680 --> 35:52.680]  третьего уровня и так далее.
[35:52.680 --> 35:56.680]  И, в принципе, вот такая записная книжка у нас с вами есть.
[35:56.680 --> 36:00.680]  Когда вы будете покупать, допустим, свое доменное имя,
[36:00.680 --> 36:02.680]  у вас такая книжка откроется.
[36:02.680 --> 36:07.680]  То есть, вы берете, покупаете себе доменное имя,
[36:07.680 --> 36:10.680]  и дальше у вас появляется запись вашей книжки.
[36:16.680 --> 36:19.680]  Такая многоуровневая хэш-таблица.
[36:20.680 --> 36:22.680]  То есть, у нас есть хэш-таблица первого уровня,
[36:22.680 --> 36:24.680]  второго уровня, третьего уровня.
[36:24.680 --> 36:28.680]  Более того, эта хэш-таблица не с уникальными IP-адресами.
[36:28.680 --> 36:30.680]  На самом деле, может быть несколько IP-адресов
[36:30.680 --> 36:32.680]  на одно и то же доменное имя,
[36:32.680 --> 36:35.680]  чтобы распределить нагрузку на сервера.
[36:37.680 --> 36:39.680]  Каким образом проверить эту вещь?
[36:39.680 --> 36:41.680]  Есть утилита, на самом деле их две.
[36:41.680 --> 36:43.680]  Первая утилита это DIC,
[36:43.680 --> 36:45.680]  а вторая утилита это NSLOOKUP.
[36:46.680 --> 36:48.680]  И давайте я ее покажу.
[36:55.680 --> 36:57.680]  Давайте попробуем.
[36:57.680 --> 36:59.680]  DIC MIFTRUE.
[37:00.680 --> 37:04.680]  Итак, мы с вами сейчас сделали запрос
[37:04.680 --> 37:06.680]  на доменный адрес MIFTRUE.
[37:07.680 --> 37:09.680]  И что мы с вами видим?
[37:09.680 --> 37:11.680]  Мы с вами видим интересную вещь.
[37:11.680 --> 37:13.680]  Мы хотим получить запись A.
[37:13.680 --> 37:15.680]  Нам ответили, что запись A находится
[37:15.680 --> 37:17.680]  по вот такому IP-адресу.
[37:17.680 --> 37:21.680]  То есть, 192, 188, 189, 147.
[37:22.680 --> 37:24.680]  При этом, что мы видим?
[37:24.680 --> 37:28.680]  Мы при этом видим, что у нас есть еще и дополнительные запросы.
[37:28.680 --> 37:32.680]  То есть, у нас на самом деле здесь есть два нейм-сервера.
[37:32.680 --> 37:34.680]  То есть, либо GW.MIFTRUE,
[37:34.680 --> 37:38.680]  либо NS8L2NICRUE.
[37:38.680 --> 37:40.680]  И дополнительно у нас есть секции,
[37:40.680 --> 37:41.680]  где IP-адреса.
[37:41.680 --> 37:43.680]  То есть, в принципе, у нас два доменных нейм-сервера
[37:43.680 --> 37:45.680]  могут отвечать на наши страницы.
[37:46.680 --> 37:48.680]  Давайте попробуем пропинговать
[37:49.680 --> 37:51.680]  из нашей сети.
[37:55.680 --> 37:56.680]  Значит, это пинг.
[37:56.680 --> 37:59.680]  У нас отправляются пакеты отсюда.
[37:59.680 --> 38:01.680]  Давайте попробуем то же самое сделать
[38:01.680 --> 38:03.680]  на другом компьютере.
[38:10.680 --> 38:12.680]  Кто видит разницу?
[38:13.680 --> 38:14.680]  Еще раз.
[38:20.680 --> 38:23.680]  Я не знаю, как это сделать аккуратненько.
[38:23.680 --> 38:25.680]  Вот так вот сделаем.
[38:31.680 --> 38:33.680]  Кто-нибудь видит разницу в ответах?
[38:35.680 --> 38:36.680]  Второго IP-шника нет.
[38:36.680 --> 38:38.680]  То есть, из-за того, что я ловил,
[38:38.680 --> 38:39.680]  второго IP-шника нет.
[38:39.680 --> 38:42.680]  То есть, из-за того, что я нахожусь в локальной сети Fistech,
[38:42.680 --> 38:44.680]  у меня есть еще один внутренний нейм-сервер,
[38:44.680 --> 38:47.680]  через который мы можем быстрее получить ответ на запрос.
[38:49.680 --> 38:51.680]  И за счет этого есть интересная возможность
[38:51.680 --> 38:53.680]  в сети Fistech.
[38:53.680 --> 38:55.680]  Оно заключается в том, что если даже у вас
[38:55.680 --> 38:57.680]  нет подключения к интернету,
[38:57.680 --> 39:00.680]  к внешнему интернету, допустим, у вас доступа к аккаунту нет,
[39:00.680 --> 39:03.680]  вы все равно на все ресурсы сайта MIFTRUE попадете.
[39:05.680 --> 39:07.680]  Вот, вы просто пойдете по-другому.
[39:07.680 --> 39:10.680]  Не по внешнему доменному адресу, а по внутреннему доменному.
[39:14.680 --> 39:15.680]  Нет, не только MIFTRUE,
[39:15.680 --> 39:19.680]  но все внутренние сервисы сайтов Fistech вы на них попадете.
[39:22.680 --> 39:24.680]  Вот такая вот интересная вещь.
[39:25.680 --> 39:28.680]  Утилита полезная, есть еще утилита NSLOOKUP.
[39:38.680 --> 39:43.680]  Ну вот здесь видно, что у нас немножко разные ответы,
[39:43.680 --> 39:45.680]  потому что здесь у меня через роутер все идет,
[39:45.680 --> 39:48.680]  а здесь у нас идет через локальный сервер.
[39:48.680 --> 39:52.680]  То есть у нас один из серверов спокойно ответил.
[39:53.680 --> 39:57.680]  Вот, так, понятно, как работает DNS на первом уровне?
[40:00.680 --> 40:03.680]  Так, давайте я еще один эксперимент сделаю.
[40:03.680 --> 40:06.680]  Собственно, как это записная книжка выглядит?
[40:08.680 --> 40:11.680]  Вы можете купить любое доменное имя, допустим, на сервисе Regru.
[40:19.680 --> 40:20.680]  Господи.
[40:26.680 --> 40:27.680]  Это не робот я.
[40:28.680 --> 40:30.680]  Кота с SMS не показываем обычно.
[40:30.680 --> 40:33.680]  Так, смотрите, вот они доменные имена,
[40:36.680 --> 40:37.680]  которые у меня есть.
[40:39.680 --> 40:41.680]  И, шобственно, что мы можем с вами сделать?
[40:41.680 --> 40:46.680]  Мы можем с вами настроить доменные адреса, доменные сервера,
[40:46.680 --> 40:48.680]  и давайте это сделать.
[40:48.680 --> 40:51.680]  Внутри вот этих доменных имен.
[40:52.680 --> 40:53.680]  Вот, вот, вот.
[40:53.680 --> 40:58.120]  доменные адреса, доменные сервера, и давайте покажу
[40:58.120 --> 41:02.960]  на примере, допустим, на примере AhChek.ru, допустим,
[41:02.960 --> 41:03.960]  сервисы.
[41:03.960 --> 41:07.280]  Вот, значит, и вот здесь как раз вот эта вот записная
[41:07.280 --> 41:10.440]  книжка, она здесь есть.
[41:10.440 --> 41:16.440]  То есть, видите, я не знаю, видно или нет, то есть на
[41:16.440 --> 41:20.560]  какие получается у нас A-запись, и она указывает, куда мы
[41:20.560 --> 41:25.440]  именно нашу страницу перенаправляем, на какой IP-адрес.
[41:25.440 --> 41:28.160]  Значит, после этого, как вы обновите запись, она,
[41:28.160 --> 41:30.000]  по идее, должна доехать до всех провайдеров.
[41:30.000 --> 41:35.920]  Вот, то есть видно, как оно работает.
[41:35.920 --> 41:38.320]  Звездочка, это означает, что любой символ, кроме
[41:38.320 --> 41:41.960]  точки до точки, собака здесь тоже есть, кстати, вот,
[41:41.960 --> 41:45.920]  это, собственно, когда вы вводите адрес AhChek.ru, то
[41:45.920 --> 41:47.920]  у вас автоматически все перенаправляется на вот
[41:47.920 --> 41:52.240]  этот IP-адрес, на один IP-адрес определенного сервера.
[41:52.240 --> 41:56.680]  Вот, то есть и, в принципе, вот здесь вы, когда покупаете
[41:56.680 --> 41:58.960]  имя, вы можете добавить одну из записей, которая
[41:58.960 --> 41:59.960]  вам нужна.
[41:59.960 --> 42:04.880]  A-запись используется для серверов, NS – это name server,
[42:04.880 --> 42:08.280]  TXT – это метаинформация, и есть еще доменная запись
[42:08.280 --> 42:09.280]  типа MX.
[42:09.280 --> 42:12.600]  MX используется для почтовых серверов.
[42:12.600 --> 42:15.080]  То есть это просто соглашение протокола DNS.
[42:15.560 --> 42:18.640]  Вот, просто, чтобы вы понимали, откуда это все берется.
[42:18.640 --> 42:20.600]  Значит, сразу скажу, как только вы обновите эту
[42:20.600 --> 42:23.320]  запись, информация не сразу будет обновлена.
[42:23.320 --> 42:25.920]  То есть вам нужно будет обновить все доменные серверы.
[42:25.920 --> 42:31.440]  Вот, это обычно по соглашениям на это может идти до 24 часов.
[42:31.440 --> 42:34.360]  Ну, потому что обновится запись.
[42:34.360 --> 42:36.640]  У меня, кстати, домашний провайдер самый медленный.
[42:36.640 --> 42:39.880]  Почему-то он обновляет эти записи в течение двух-трех
[42:39.880 --> 42:40.880]  часов.
[42:40.880 --> 42:43.880]  Вот, поэтому мне нужно идти в другую сеть для того,
[42:43.960 --> 42:44.960]  чтобы это все отработало.
[42:44.960 --> 42:48.720]  Так, вот она книжка.
[42:48.720 --> 42:51.240]  В принципе, у любой сети, где вы покупаете доменные
[42:51.240 --> 42:52.920]  имя, такая книжка должна существовать.
[42:52.920 --> 42:57.120]  Так, ладно.
[42:57.120 --> 43:02.520]  Мы с вами поняли, как по доменному адресу получить
[43:02.520 --> 43:05.240]  IP-адрес, по доменному имени получить IP-адрес.
[43:05.240 --> 43:08.360]  Угу, хорошо.
[43:08.360 --> 43:15.720]  Теперь, смотрите, мы подключились к нашему адресу по какому-то
[43:15.720 --> 43:16.720]  сетевому протоколу.
[43:16.720 --> 43:19.960]  Как понять, куда идти?
[43:19.960 --> 43:25.640]  Вот, смотрите, мы идем по адресу, допустим, 192.168.04.
[43:25.640 --> 43:41.440]  Вот мы вводим в браузере адрес, ну, то есть, допустим,
[43:41.440 --> 43:43.240]  мы поняли, что IP-адрес у нас находится здесь.
[43:43.240 --> 43:47.880]  Что делать?
[43:47.880 --> 43:50.720]  Наверное, должен быть какой-то способ, который нам позволит
[43:50.720 --> 43:54.600]  определить, куда нам именно идти по этому IP-адресу.
[43:54.600 --> 43:57.640]  Мы с вами сказали, что IP-адресов на все устройства не хватает.
[43:57.640 --> 44:02.520]  А это значит, что IP-адреса у нас каким-то образом должны
[44:02.520 --> 44:03.520]  повторяться.
[44:03.520 --> 44:08.700]  Так вот, здесь у нас возникает понятие сети, в которой
[44:08.700 --> 44:10.360]  находятся несколько устройств.
[44:10.360 --> 44:13.520]  И на уровне IP-протокола, когда мы находимся в определенной
[44:13.520 --> 44:17.200]  сети, каждому компьютеру выдается IP-адрес в этой
[44:17.200 --> 44:18.200]  сети.
[44:18.200 --> 44:21.640]  То есть, изначально у нас есть внешняя сеть, во внешней
[44:22.640 --> 44:24.960]  сети у нас с вами есть разные веб-серверы, которые имеют
[44:24.960 --> 44:25.960]  IP-адреса.
[44:25.960 --> 44:26.960]  Вот.
[44:26.960 --> 44:30.200]  И каким образом понять, как у нас идет перенаправление
[44:30.200 --> 44:31.200]  запроса?
[44:31.200 --> 44:34.280]  Здесь нам очень сильно как раз поможет такое понятие
[44:34.280 --> 44:36.200]  как таблица маршрутизации.
[44:36.200 --> 44:38.560]  Значит, в чем она заключается?
[44:38.560 --> 44:42.600]  У нас с вами, представьте себе, есть система, и в таблице
[44:42.600 --> 44:44.880]  маршрутизации, это, допустим, таблица маршрутизации
[44:44.880 --> 44:48.280]  моего роутера, указывается, что если вы вводите определенный
[44:48.280 --> 44:52.520]  IP-адрес, и у вас IP-адрес совпадает с определенной
[44:52.520 --> 44:56.080]  маской сети, то вы идете по такому-то адресу.
[44:56.080 --> 44:58.600]  То есть, вы перенаправляете ваш запрос на определенный
[44:58.600 --> 45:01.600]  IP-адрес.
[45:01.600 --> 45:05.560]  Соответственно, дальше, когда мы доходим до вот этого
[45:05.560 --> 45:08.480]  устройства, у нас идет перенаправление дальше.
[45:08.480 --> 45:11.800]  То есть, у нас по факту это выходной канал нашей сети.
[45:11.800 --> 45:12.800]  Вот.
[45:12.800 --> 45:16.040]  И в итоге цепочка перенаправляется по сети.
[45:16.040 --> 45:17.760]  Сразу я покажу большую картинку.
[45:17.760 --> 45:20.720]  Вот такая большая картинка.
[45:20.720 --> 45:25.160]  Значит, это специальная нотация синтаксиса.
[45:25.160 --> 45:29.440]  Это, к примеру, у нас с вами какая-то интересная сеть.
[45:29.440 --> 45:34.400]  Да, то есть, у нас с вами, получается, есть два компьютера,
[45:34.400 --> 45:36.920]  которые находятся, допустим, в сети одного кабинета.
[45:36.920 --> 45:40.120]  Вот это у нас сеть лаборатории, а вот это у нас выход внешняя
[45:40.120 --> 45:41.120]  сеть.
[45:41.120 --> 45:42.120]  Видите?
[45:42.120 --> 45:43.760]  То есть, на самом деле все намного сложнее.
[45:43.760 --> 45:45.480]  То есть, когда вы отправляете запрос в интернет, то вы
[45:45.560 --> 45:48.120]  скорее всего находитесь где-то вот здесь.
[45:48.120 --> 45:49.520]  Вот у вас определенный компьютер.
[45:49.520 --> 45:52.160]  Значит, дальше вы отправляете запрос в интернет, и вам
[45:52.160 --> 45:54.680]  нужно каким-то образом перейти через эти сигналы.
[45:54.680 --> 45:58.400]  И здесь есть несколько устройств, которые вам помогают.
[45:58.400 --> 46:04.640]  Значит, устройство вида V1 – это, на самом деле, как
[46:04.640 --> 46:07.080]  раз шлюз, через который вы отправляете протокол.
[46:07.080 --> 46:10.440]  И здесь как раз нам нужна таблица маршрутизации.
[46:10.440 --> 46:12.640]  Значит, в чем она заключается?
[46:12.640 --> 46:14.920]  Коммутатор, на самом деле, просто перегоняет трафик
[46:14.920 --> 46:16.440]  из одного места в другое.
[46:16.440 --> 46:18.600]  То есть, у вас идет переключение между сетями.
[46:18.600 --> 46:23.440]  А вот в нашем случае R1 и R2 – это как раз так называемые
[46:23.440 --> 46:26.160]  свечи, которые позволяют вам переключиться на определенную
[46:26.160 --> 46:27.160]  сеть.
[46:27.160 --> 46:29.480]  И видно, что оно подключено к разным сетям.
[46:29.480 --> 46:34.480]  Значит, у, получается, здесь у R1 по протоколу Ethernet1
[46:34.480 --> 46:37.480]  есть IP-адрес 192.168.1.1.
[46:37.480 --> 46:41.120]  А в этой сети это IP-адрес 10.10.2.1.
[46:41.120 --> 46:42.120]  Вот.
[46:42.120 --> 46:43.120]  И дополнительно мы видим.
[46:43.600 --> 46:45.440]  Видите, здесь пунктирные стрелочки.
[46:45.440 --> 46:49.240]  Это выделенная сеть.
[46:49.240 --> 46:54.800]  То есть, в сети LAN1 у нас с вами выделяется диапазон
[46:54.800 --> 46:55.800]  IP-адресов.
[46:55.800 --> 47:00.560]  И этот диапазон IP-адресов 192.168.1.0.
[47:00.560 --> 47:02.120]  То есть, получается следующее.
[47:02.120 --> 47:07.200]  У нас с вами два компьютера имеют IP-адрес 192.168.1.10.
[47:07.200 --> 47:12.440]  То есть, по факту, наше устройство должно выдать
[47:12.440 --> 47:14.600]  IP-адрес в нашей сети.
[47:14.600 --> 47:16.320]  То есть, у нас получается два IP-адреса, по которым
[47:16.320 --> 47:17.320]  можем общаться.
[47:17.320 --> 47:22.480]  А дальше по маске сети мы можем с вами понять, куда
[47:22.480 --> 47:23.480]  именно идти.
[47:23.480 --> 47:25.360]  Так, давайте я спрошу.
[47:25.360 --> 47:32.640]  В школе, значит, когда сдаете EG по информатике, есть такое
[47:32.640 --> 47:36.280]  понятие, как IP и маска сети, но обычно про него не понимают,
[47:36.360 --> 47:39.360]  как это работает.
[47:39.360 --> 47:40.360]  А, уже убрали?
[47:40.360 --> 47:47.880]  Ну, хорошо, тогда мне придется вам рассказывать, что это
[47:47.880 --> 47:48.880]  такое.
[47:48.880 --> 48:03.560]  Итак, значит, что такое маска сети?
[48:03.560 --> 48:13.840]  На самом деле, когда мы представляем наш IP-адрес,
[48:13.840 --> 48:19.240]  то мы можем создать бинарную запись этого всего диапазона
[48:19.240 --> 48:20.240]  в виде маски.
[48:20.240 --> 48:21.840]  Значит, что представляет собой маска?
[48:21.840 --> 48:26.920]  Это, по факту, идентификатор того, в какой именно сети
[48:26.920 --> 48:28.200]  мы с вами находимся.
[48:28.560 --> 48:34.240]  Маска сети состоит из некоторого количества единиц, и после
[48:34.240 --> 48:35.240]  них идут нули.
[48:35.240 --> 48:40.520]  Количество единиц обычно обозначается через слэш.
[48:40.520 --> 48:41.760]  Давайте рассмотрим пример.
[48:41.760 --> 48:46.600]  Вот, допустим, маска сети у нас 24.
[48:46.600 --> 48:50.640]  Ее можно зашить еще таким образом.
[48:50.640 --> 48:55.400]  255, 255, 255, 0.
[48:56.080 --> 49:03.560]  Представим, что IP-адрес нашего компьютера это 192, 168, 1, 110.
[49:05.560 --> 49:06.560]  Вот.
[49:06.560 --> 49:12.200]  И дальше мы говорим следующее, что у нас с вами нужно определить,
[49:12.200 --> 49:15.640]  по какому протоколу мы с вами едем.
[49:15.640 --> 49:18.720]  То есть, у нас IP-адрес сети, и нам нужно определить, куда
[49:18.720 --> 49:19.720]  мы едем.
[49:19.720 --> 49:20.720]  Значит, что мы делаем?
[49:20.720 --> 49:24.280]  Мы рассмотрим, допустим, мы хотим с вами попасть в
[49:24.280 --> 49:29.760]  компьютер 190, 20, 168, 1.20.
[49:29.760 --> 49:32.000]  Нам нужно понять, являются ли эти устройства в одной
[49:32.000 --> 49:33.000]  сети или нет.
[49:33.000 --> 49:36.800]  То есть, по какой сети мы едем.
[49:36.800 --> 49:38.280]  А что мы берем?
[49:38.280 --> 49:43.200]  Мы берем, значит, вот это у нас SRC, вот это у нас DST.
[49:43.440 --> 49:53.000]  Значит, мы берем побитовое I, SRC, I-маск, и сравниваем
[49:53.000 --> 49:55.080]  его с DST-маск.
[50:01.080 --> 50:01.600]  Вот.
[50:01.600 --> 50:04.240]  Если они совпадают, то мы находимся в одной сети.
[50:04.240 --> 50:10.200]  То есть, получается, побитовое I здесь 192, 168, 1, 110.
[50:10.200 --> 50:12.760]  То есть, получается, побитовое I здесь 0.
[50:12.760 --> 50:15.120]  Здесь побитовое I тоже 0.
[50:15.120 --> 50:17.800]  Это означает, что мы, в принципе, можем отправить
[50:17.800 --> 50:20.120]  сигнал по одной и той же сети.
[50:20.120 --> 50:21.120]  Вот.
[50:21.120 --> 50:25.400]  И обычно, если мы, если у нас есть какие-то правила,
[50:25.400 --> 50:28.680]  то в конце мы ставим следующую сеть.
[50:28.680 --> 50:33.760]  0, 0, 0, 0, slash 0.
[50:33.760 --> 50:36.160]  То есть, что это означает?
[50:36.160 --> 50:38.760]  Это означает, что мы не ставим никакой порог на
[50:38.760 --> 50:39.760]  IP-адрес.
[50:39.760 --> 50:44.240]  То есть, мы вводим любой адрес, и именно когда мы
[50:44.240 --> 50:47.400]  вводим любой адрес, то обычно это перенаправляется
[50:47.400 --> 50:48.560]  на внешний протокол.
[50:48.560 --> 50:57.560]  Ну, а давайте в качестве эксперимента рассмотрим,
[50:57.560 --> 50:58.560]  куда мы едем.
[50:58.560 --> 50:59.560]  Вот.
[50:59.560 --> 51:00.560]  Давайте таблицу маршрутизации открою.
[51:00.560 --> 51:03.000]  То есть, они обычно выглядят вот таким вот, вот таким
[51:03.000 --> 51:04.000]  способом.
[51:04.000 --> 51:08.400]  То есть, у нас получается, что, видите, в каждом IP-адресе,
[51:08.480 --> 51:11.600]  в каждом сетевой маршрутизации у нас есть адрес сети, в
[51:11.600 --> 51:13.160]  котором мы обращаемся.
[51:13.160 --> 51:16.120]  То есть, если у нас IP-жник попадает по какой-нибудь
[51:16.120 --> 51:19.840]  сети, мы идем по определенному выходному адресу и перенаправляем
[51:19.840 --> 51:20.840]  наш сигнал.
[51:20.840 --> 51:21.840]  Вот.
[51:21.840 --> 51:25.600]  Давайте посмотрим, как мы выйдем в интернет в данном
[51:25.600 --> 51:26.600]  случае.
[51:26.600 --> 51:29.800]  Вот у нас адрес сети 4.0.
[51:29.800 --> 51:31.960]  Значит, мы вводим наш IP-адрес.
[51:31.960 --> 51:36.800]  После этого мы перенаправляемся на адрес шлюза 10.10.2.2, выходной
[51:36.800 --> 51:38.520]  в интерфейс Ethernet 1.
[51:38.520 --> 51:42.640]  То есть, смотрите, 10.10.2.2 мы перенаправляем, мы доходим
[51:42.640 --> 51:45.400]  до вот этого, извините, до вот этого маршрутизатора
[51:45.400 --> 51:47.200]  и идем в интерфейс Ethernet 2.
[51:47.200 --> 51:49.320]  То есть, мы выходим в другую сеть.
[51:49.320 --> 51:56.480]  Дальше, значит, Ethernet 2 устройства нам нужно понять, в какой
[51:56.480 --> 51:58.720]  коммутатор мы с вами идем.
[51:58.720 --> 52:02.000]  Значит, здесь у нас тоже есть сетевые протоколы.
[52:02.000 --> 52:05.720]  Нам нужно понять, в какой IP-адрес куда мы перенаправляем.
[52:05.720 --> 52:07.840]  Здесь нам поможет как раз адрес шлюза.
[52:07.840 --> 52:10.400]  То есть, вот он 10.10.2.2.
[52:10.400 --> 52:15.240]  Соответственно, у вот этого устройства IP-адрес 10.10.2.2.
[52:15.240 --> 52:17.200]  Вот видите, здесь написано 10.10.2.2.
[52:17.200 --> 52:20.520]  То есть отсюда нам сразу, как только мы выходим из
[52:20.520 --> 52:22.640]  коммутатора, мы идем в другую конкретную сеть.
[52:22.640 --> 52:27.160]  То есть, если бы в IP-адресе было бы написано 10.10.2.3,
[52:27.160 --> 52:31.480]  то мы бы пошли в устройство вида R3.
[52:31.480 --> 52:36.320]  Дальше мы доходим до нашего коммутатора R2, на маршетизатор
[52:36.320 --> 52:37.320]  R2.
[52:37.320 --> 52:40.200]  И здесь у нас указывают следующее.
[52:40.200 --> 52:46.040]  IP-адрес, у нас внешняя сеть, поэтому мы идем в IP-адрес
[52:46.040 --> 52:48.880]  шлюза и выходной интерфейс Ethernet 0.
[52:48.880 --> 52:52.360]  То есть, мы выходим в выходной интерфейс Ethernet 0 и мы уходим
[52:52.360 --> 52:53.360]  во внешнюю сеть.
[52:53.360 --> 53:00.240]  Так, то есть, вот у нас идет маршетизация.
[53:00.240 --> 53:03.040]  И если мы хотим дойти до третьего компьютера, то
[53:03.040 --> 53:07.880]  мы с вами, допустим, указываем IP-адрес какой.
[53:07.880 --> 53:08.880]  Давайте в качестве примера.
[53:08.880 --> 53:26.000]  Давайте посмотрим на вот этот IP-адрес.
[53:27.000 --> 53:32.400]  У нас компьютер находится вот здесь.
[53:32.400 --> 53:35.520]  Так, давайте посмотрим.
[53:35.520 --> 53:44.000]  Так, хорошо.
[53:44.000 --> 53:46.440]  Вот мы находим наш компьютер, наш сети.
[53:46.440 --> 53:49.440]  Куда мы едем?
[53:49.440 --> 53:50.440]  ISR1.
[53:50.440 --> 53:51.440]  Давайте поймем.
[53:51.440 --> 53:54.680]  По какому адресу у нас подходит соединение.
[53:55.360 --> 53:59.920]  Да, смотрите, 10, 10, 2, 3.
[53:59.920 --> 54:00.920]  Почему?
[54:00.920 --> 54:05.400]  Потому что берем битовое и последних 30 значений.
[54:05.400 --> 54:06.400]  Давайте разложим это.
[54:06.400 --> 54:16.040]  Вот он наш IP-адрес, соответственно, маска сети у нас здесь
[54:16.040 --> 54:17.040]  в конце.
[54:17.040 --> 54:21.000]  Это вот такая маска сети.
[54:21.320 --> 54:26.720]  Наберем битовое и получаем, сколько?
[54:26.720 --> 54:33.960]  172, да, здесь у нас будет получается 3.0.
[54:33.960 --> 54:43.960]  У нас получается 172, 16, 3, 2, то есть они идут по убыванию
[54:43.960 --> 54:44.960]  приоритета.
[54:44.960 --> 54:48.440]  Окей, значит, мы идем в 10, 10, 2, 3.
[54:48.880 --> 54:51.880]  10, 10, 2, 3 – это у нас маршрутизатор R3.
[54:51.880 --> 55:04.880]  И что у нас здесь, какой адрес у нас здесь подходит?
[55:04.880 --> 55:09.200]  4,0 на самом деле, он имеет большую дистанцию, поэтому
[55:09.200 --> 55:11.400]  мы идем по возрастанию дистанции.
[55:11.400 --> 55:15.160]  Вот, у нас адрес 172, 16, 3, 0 подходит.
[55:15.880 --> 55:19.880]  Сколько там?
[55:19.880 --> 55:22.880]  Да, 0,28.
[55:22.880 --> 55:25.240]  В принципе, маска сети подходит.
[55:25.240 --> 55:29.360]  Мы идем в интерфейс Ethernet 1.
[55:29.360 --> 55:36.480]  А где у нас интерфейс Ethernet 1?
[55:36.480 --> 55:38.600]  Вот он у нас Ethernet 1.
[55:38.600 --> 55:43.600]  Вот у нас выходной Ethernet S1, и мы попадаем как раз в нашу
[55:44.040 --> 55:46.680]  сеть, и как раз коммутатор-то знает, где у нас IP-адрес
[55:46.680 --> 55:47.680]  этого компьютера.
[55:47.680 --> 55:48.680]  Вот он.
[55:48.680 --> 55:51.120]  То есть он перенаправит его нам на текущий компьютер.
[55:51.120 --> 55:54.120]  Вот.
[55:54.120 --> 55:58.920]  Значит, на самом деле есть утилиты, которые показывают,
[55:58.920 --> 56:01.240]  каким образом мы с вами можем дойти до той или иной
[56:01.240 --> 56:02.240]  сети.
[56:02.240 --> 56:03.240]  То есть показывают таблицу маршрутизации.
[56:03.240 --> 56:13.240]  Значит, команда называется IPROUGE SHOW, значит, на линуксе
[56:13.880 --> 56:14.880]  она не поддерживается.
[56:14.880 --> 56:15.880]  На маке.
[56:15.880 --> 56:16.880]  Вот.
[56:16.880 --> 56:17.880]  Видите?
[56:17.880 --> 56:20.880]  Вот это таблица маршрутизации моего компьютера.
[56:20.880 --> 56:24.880]  То есть у нас есть сетевые интерфейсы, и нам показывают,
[56:24.880 --> 56:25.880]  куда мы именно направимся.
[56:25.880 --> 56:29.800]  Значит, есть сайт по умолчанию, куда мы идем.
[56:29.800 --> 56:33.080]  Мы идем в адрес LUSA192.168.01.
[56:33.080 --> 56:34.080]  Это роутер.
[56:34.080 --> 56:38.920]  А у роутера таблица маршрутизации уже другая.
[56:38.920 --> 56:39.920]  Вот.
[56:39.920 --> 56:42.160]  И вы можете пробить сигнал по любому адресу.
[56:42.280 --> 56:43.280]  Давайте попробуем.
[56:54.280 --> 56:55.280]  Вот.
[56:55.280 --> 56:58.960]  Мы видим весь сигнал по сети и по трафику, который
[56:58.960 --> 56:59.960]  идет.
[56:59.960 --> 57:03.720]  То есть у нас идет переключение через эти сети.
[57:03.720 --> 57:08.240]  А потом мы поднимаемся до уровня IP адреса, а на уровне
[57:08.240 --> 57:09.800]  IP адреса мы идем дальше.
[57:09.800 --> 57:11.600]  То есть мы спускаемся вниз.
[57:11.600 --> 57:12.800]  Ну что, давайте проверим.
[57:12.800 --> 57:19.000]  Так, сейчас заранее предупреждаю, что здесь будут всякие незаконные
[57:19.000 --> 57:20.000]  организации.
[57:20.000 --> 57:23.720]  Допустим, вот такие.
[57:23.720 --> 57:29.960]  Ну, я должен просто по законодательству сказать.
[57:29.960 --> 57:41.240]  Так.
[57:41.240 --> 57:47.240]  Кто здесь интересную запись видит?
[57:47.240 --> 57:50.880]  Да.
[57:50.880 --> 57:56.720]  То есть видите, нас в какой-то момент времени перенаправило
[57:56.720 --> 57:58.200]  на RKN-рестр-фильтр.
[57:58.200 --> 57:59.200]  Вот.
[57:59.200 --> 58:05.880]  Хотя странно, все равно, кстати, протокол дошел до определенного
[58:05.880 --> 58:10.040]  адреса, но просто у нас отфильтровалась информация о том, что мы с
[58:10.080 --> 58:11.760]  вами попали куда-то не туда.
[58:11.760 --> 58:15.960]  То есть если мы вводим браузер, тут можно указать именно
[58:15.960 --> 58:16.960]  тип протокола.
[58:16.960 --> 58:19.920]  То есть смотрите, он фильтр пропускает, да, но страничку
[58:19.920 --> 58:20.920]  не отгружает.
[58:20.920 --> 58:25.280]  Значит, возьмем еще какую-нибудь экстремистскую организацию.
[58:25.280 --> 58:31.080]  Вот, здесь видите трейсраут другой.
[58:31.080 --> 58:34.840]  И на самом деле, если мы сейчас откроем вот эту вот страницу,
[58:34.840 --> 58:38.840]  то вы не поверите, что мы получим с вами.
[58:38.840 --> 58:39.840]  Так.
[58:39.840 --> 58:46.840]  То есть нас отгрузили на статическую страницу.
[58:46.840 --> 58:47.840]  Вот.
[58:47.840 --> 58:48.840]  А?
[58:48.840 --> 58:55.840]  Это на уровне провайдера, я из домашнего компьютера.
[58:55.840 --> 58:57.840]  К нам подключаюсь.
[58:57.840 --> 59:01.840]  То есть смотрите, если в какой-то момент времени у вас сеть
[59:01.840 --> 59:03.840]  оборвется, то, в принципе, вы знаете, что делать.
[59:03.840 --> 59:07.840]  Ну, то есть вы можете прогнать утилит от трейсраута и посмотреть,
[59:07.840 --> 59:09.840]  где у вас все оборвалось.
[59:09.840 --> 59:10.840]  Вот.
[59:10.840 --> 59:12.840]  Это бывает полезно, особенно когда у вас большая система
[59:12.840 --> 59:14.840]  и непонятно, где сигнал пропал.
[59:14.840 --> 59:15.840]  Так.
[59:15.840 --> 59:16.840]  Хорошо.
[59:16.840 --> 59:19.840]  Есть ли вопросы по маршрутизации?
[59:19.840 --> 59:22.840]  Сразу скажу, во второй контрольной будет номер.
[59:22.840 --> 59:24.840]  На это посвященный.
[59:24.840 --> 59:26.840]  Как вы догадываетесь?
[59:26.840 --> 59:29.840]  То есть там нужно будет нарисовать сеть.
[59:29.840 --> 59:33.840]  То есть будет набор устройств, нужно будет выделить сети.
[59:33.840 --> 59:34.840]  Вот.
[59:34.840 --> 59:36.840]  Как раз определяются границами маршрутизаторов
[59:36.840 --> 59:38.840]  и настроить трафик.
[59:38.840 --> 59:39.840]  Куда?
[59:39.840 --> 59:40.840]  А?
[59:40.840 --> 59:42.840]  Не, не, не.
[59:42.840 --> 59:46.840]  Свою сеть создать, это уже к СИС-админам.
[59:46.840 --> 59:48.840]  Семнолинистратам.
[59:48.840 --> 59:49.840]  Так.
[59:49.840 --> 59:53.840]  Можно ли мы двигаться дальше?
[59:53.840 --> 59:54.840]  Угу.
[59:54.840 --> 59:55.840]  Хорошо.
[59:55.840 --> 59:58.840]  Значит, типы подсетей, которые обычно выделяют,
[59:58.840 --> 01:00:01.840]  собственно, обычно создается отдельное сетевое устройство
[01:00:01.840 --> 01:00:05.840]  Localhost, у которого маска сети 32.
[01:00:05.840 --> 01:00:07.840]  То есть мы получаем только на свой IP-адрес.
[01:00:07.840 --> 01:00:09.840]  На третьей я хочу обратить внимание,
[01:00:09.840 --> 01:00:13.840]  что когда вы будете делать задания по докеру или так далее,
[01:00:13.840 --> 01:00:17.840]  очень важно обращайтесь, на каком IP-адресе у вас сервер поднят.
[01:00:17.840 --> 01:00:20.840]  Потому что если у вас указана IP-адрес 172001,
[01:00:20.840 --> 01:00:23.840]  то только ваш компьютер может подключиться к этой сети.
[01:00:23.840 --> 01:00:25.840]  То есть именно только конкретные,
[01:00:25.840 --> 01:00:27.840]  локальные соединения принимаются.
[01:00:27.840 --> 01:00:30.840]  То есть любое соединение по сети будет отвергаться.
[01:00:30.840 --> 01:00:36.840]  Значит, у локальной домашней сети обычно IP-адрес 190.2.168.01
[01:00:36.840 --> 01:00:39.840]  с зарезервированными IP-адресами.
[01:00:39.840 --> 01:00:42.840]  Да, то есть есть именно список зарезервированных IP-сетей,
[01:00:42.840 --> 01:00:44.840]  которые можно найти на Википедии.
[01:00:44.840 --> 01:00:49.840]  Значит, дальше 10.4.0.8 это обычно сеть организации,
[01:00:49.840 --> 01:00:51.840]  в которой вы находитесь,
[01:00:51.840 --> 01:00:54.840]  и 4.0.0 это глобальная сеть.
[01:00:54.840 --> 01:00:58.840]  То есть это просто соглашение, которое выработали люди.
[01:01:01.840 --> 01:01:04.840]  В принципе, при желании вы можете даже постучаться к моей сети.
[01:01:04.840 --> 01:01:07.840]  Правда, вам нужно подключиться к одному этому устройству.
[01:01:07.840 --> 01:01:10.840]  И главное, чтобы Firewall не банил.
[01:01:10.840 --> 01:01:13.840]  То есть не было никаких ограничений внутри сети.
[01:01:13.840 --> 01:01:17.840]  Так, это, допустим, внутренняя сеть моего домашнего браузера.
[01:01:17.840 --> 01:01:20.840]  У роутера, в принципе, видно, что IP-адреса подключаются.
[01:01:20.840 --> 01:01:22.840]  Их можно использовать.
[01:01:22.840 --> 01:01:25.840]  И, значит, здесь мы поднимаемся на уровень выше.
[01:01:25.840 --> 01:01:27.840]  То есть, допустим, смотрите, мы с вами поняли,
[01:01:27.840 --> 01:01:29.840]  каким образом мы подключаемся к устройству,
[01:01:29.840 --> 01:01:32.840]  даже нашли IP-адрес нашего устройства,
[01:01:32.840 --> 01:01:34.840]  поняли, как дойти до него.
[01:01:34.840 --> 01:01:36.840]  Что дальше происходит?
[01:01:36.840 --> 01:01:38.840]  Мы дошли до нашего сервера.
[01:01:38.840 --> 01:01:41.840]  И здесь нужно понять, как двигаться дальше.
[01:01:41.840 --> 01:01:43.840]  То есть как это разворачивать дальше.
[01:01:43.840 --> 01:01:45.840]  Соответственно, здесь нам нужно посмотреть,
[01:01:45.840 --> 01:01:48.840]  каким образом процессы между собой взаимодействуют.
[01:01:48.840 --> 01:01:51.840]  И выделяется 4 обычно способа взаимодействия.
[01:01:51.840 --> 01:01:54.840]  То есть у нас есть способ взаимодействия через файл,
[01:01:54.840 --> 01:01:56.840]  через некоторые API,
[01:01:56.840 --> 01:01:58.840]  через некоторые интерфейс,
[01:01:58.840 --> 01:02:00.840]  Application Programming Interface.
[01:02:00.840 --> 01:02:04.840]  Либо у нас два приложения общаются через базу данных.
[01:02:04.840 --> 01:02:06.840]  И есть еще один продвинутый способ
[01:02:06.840 --> 01:02:08.840]  для выполнения отложенных задач.
[01:02:08.840 --> 01:02:10.840]  То есть там отправка писем и так далее.
[01:02:10.840 --> 01:02:13.840]  Это делается через очередь сообщений.
[01:02:13.840 --> 01:02:16.840]  Про очередь сообщений, наверное, не будем сегодня говорить.
[01:02:16.840 --> 01:02:19.840]  Но в целом эти 4 соимодействия есть.
[01:02:19.840 --> 01:02:23.840]  И они позволяют нам решить работу сервисов.
[01:02:23.840 --> 01:02:27.840]  И нам нужно понять, что же собой представляет API.
[01:02:27.840 --> 01:02:31.840]  API расшифровывается как Application Programming Interface.
[01:02:31.840 --> 01:02:33.840]  Это на уровне приложений.
[01:02:33.840 --> 01:02:35.840]  И нам нужно по факту получить договор.
[01:02:35.840 --> 01:02:37.840]  Первое, это какие команды принимает сервис
[01:02:37.840 --> 01:02:40.840]  и в каком формате передаются данные.
[01:02:40.840 --> 01:02:43.840]  И здесь как раз нам нужно будет понять,
[01:02:43.840 --> 01:02:46.840]  как работает первый протокол.
[01:02:46.840 --> 01:02:49.840]  Это протокол HyperText Transfer Protocol, HTTP,
[01:02:49.840 --> 01:02:51.840]  к которому мы и пользуемся.
[01:02:51.840 --> 01:02:54.840]  Здесь есть информация о запросе.
[01:02:54.840 --> 01:02:56.840]  Сейчас давайте рассмотрим ее детальнее.
[01:02:56.840 --> 01:02:59.840]  Когда мы с вами отправляем некоторые HTTP запросы,
[01:02:59.840 --> 01:03:01.840]  то нам нужно указать.
[01:03:01.840 --> 01:03:03.840]  Первое, это метод.
[01:03:03.840 --> 01:03:05.840]  Второе, это адрес.
[01:03:05.840 --> 01:03:08.840]  И третье, это версию протокола, которую мы используем.
[01:03:08.840 --> 01:03:12.840]  Дальше нам нужно будет отправить заголовки к запросу
[01:03:12.840 --> 01:03:14.840]  и отправить тело запроса.
[01:03:14.840 --> 01:03:17.840]  Давайте я покажу, как это можно сделать.
[01:03:17.840 --> 01:03:21.840]  Для этого мы можем использовать очень простую утилиту,
[01:03:21.840 --> 01:03:23.840]  а-ля Telnet.
[01:03:23.840 --> 01:03:26.840]  Давайте я попробую открыть.
[01:03:26.840 --> 01:03:28.840]  Telnet.
[01:03:28.840 --> 01:03:31.840]  Вам нужно отправить запрос.
[01:03:34.840 --> 01:03:36.840]  Давайте я сделаю очень хитрую вещь.
[01:03:36.840 --> 01:03:38.840]  Ah-chek-ru и укажу порт.
[01:03:38.840 --> 01:03:40.840]  То есть 80-й порт открою.
[01:03:40.840 --> 01:03:42.840]  Я буду обращаться.
[01:03:42.840 --> 01:03:44.840]  И сейчас буду по факту...
[01:03:44.840 --> 01:03:46.840]  Не знаю, видели ли вы такое или нет.
[01:03:46.840 --> 01:03:49.840]  Раньше был способ общения по телетексту.
[01:03:49.840 --> 01:03:52.840]  Вы могли включить телевизор, взять настройки
[01:03:52.840 --> 01:03:54.840]  и открыть текстовый протокол,
[01:03:54.840 --> 01:03:57.840]  по которому можно было читать программы.
[01:03:57.840 --> 01:03:59.840]  Да.
[01:03:59.840 --> 01:04:01.840]  Раньше такое было.
[01:04:01.840 --> 01:04:03.840]  Когда телеки не были умными,
[01:04:03.840 --> 01:04:05.840]  а сейчас же телек умный,
[01:04:05.840 --> 01:04:08.840]  в нем еще всякий программ-передача идет и так далее,
[01:04:08.840 --> 01:04:11.840]  раньше был отдельный протокол текстовый,
[01:04:11.840 --> 01:04:14.840]  по которому можно было переключиться
[01:04:14.840 --> 01:04:16.840]  и так далее.
[01:04:16.840 --> 01:04:19.840]  Там было в редком, в небольшом количестве телевизоров
[01:04:19.840 --> 01:04:21.840]  фотостроенная функция.
[01:04:21.840 --> 01:04:23.840]  Но я, честно, достал.
[01:04:23.840 --> 01:04:25.840]  Итак, значит...
[01:04:27.840 --> 01:04:30.840]  Итак, я подсоединился к IP-адресу.
[01:04:30.840 --> 01:04:32.840]  И дальше мы пишем следующее.
[01:04:32.840 --> 01:04:35.840]  Нам нужно указать один из типов запроса.
[01:04:35.840 --> 01:04:38.840]  Значит, get запрос на получение адреса.
[01:04:38.840 --> 01:04:41.840]  Делаем slash и указываем версию протокола.
[01:04:41.840 --> 01:04:44.840]  То есть мы обращаемся по запросу slash.
[01:04:44.840 --> 01:04:47.840]  Вот, по реквесту на slash.
[01:04:47.840 --> 01:04:49.840]  Значит, метод attack get,
[01:04:49.840 --> 01:04:51.840]  версия протокола 1.1.
[01:04:51.840 --> 01:04:53.840]  Есть.
[01:04:53.840 --> 01:04:56.840]  Дальше мы должны отправить один важный заголовок,
[01:04:56.840 --> 01:04:58.840]  по которому все идентифицируется.
[01:04:58.840 --> 01:05:00.840]  Смотрите, хитрая вещь.
[01:05:00.840 --> 01:05:03.840]  Я сначала укажу host.ahchekru.
[01:05:06.840 --> 01:05:08.840]  Дальше больше ничего не буду передавать,
[01:05:08.840 --> 01:05:10.840]  нажму на enter.
[01:05:10.840 --> 01:05:12.840]  А нажатие на enter нам прерывает запрос
[01:05:12.840 --> 01:05:14.840]  и отправляет результат.
[01:05:14.840 --> 01:05:17.840]  Итак, что мы получили с вами?
[01:05:17.840 --> 01:05:20.840]  Мы получили ответ от нашего сервиса.
[01:05:20.840 --> 01:05:22.840]  Значит, нам пришел ответ.
[01:05:22.840 --> 01:05:24.840]  Раз.
[01:05:24.840 --> 01:05:26.840]  Это версия протокола, по которой нам ответили.
[01:05:26.840 --> 01:05:28.840]  Мы могли увеличить версию,
[01:05:28.840 --> 01:05:30.840]  обгрейднуть версию протокола.
[01:05:30.840 --> 01:05:32.840]  С 1.1 на 2.0.
[01:05:32.840 --> 01:05:35.840]  И дальше нам вернулся статус кодовозврата.
[01:05:35.840 --> 01:05:37.840]  301.
[01:05:37.840 --> 01:05:39.840]  И нам говорят, что это move permanently.
[01:05:39.840 --> 01:05:41.840]  То есть наша страница отправляется
[01:05:41.840 --> 01:05:43.840]  на куда?
[01:05:43.840 --> 01:05:45.840]  Location.
[01:05:45.840 --> 01:05:47.840]  Видите, заголовок нам вернулся.
[01:05:47.840 --> 01:05:49.840]  Location.
[01:05:51.840 --> 01:05:53.840]  Куда нас отправили?
[01:05:55.840 --> 01:05:57.840]  А теперь давайте подумаем внимательно.
[01:05:57.840 --> 01:05:59.840]  Мы на самом деле с вами отправили запрос
[01:05:59.840 --> 01:06:01.840]  по http.ahchekru.
[01:06:01.840 --> 01:06:03.840]  Да, то есть нас перекинуло
[01:06:03.840 --> 01:06:05.840]  на https.
[01:06:05.840 --> 01:06:07.840]  То есть это настройка как раз есть.
[01:06:07.840 --> 01:06:09.840]  Хорошо.
[01:06:09.840 --> 01:06:11.840]  А теперь смотрите прикол.
[01:06:13.840 --> 01:06:15.840]  Мы подключаемся к тому же ip-адресу.
[01:06:19.840 --> 01:06:21.840]  Пишем host.
[01:06:21.840 --> 01:06:23.840]  Но я поменяю host.
[01:06:25.840 --> 01:06:27.840]  Ну вот такой поставлю.
[01:06:27.840 --> 01:06:29.840]  А, черт, черт, черт.
[01:06:29.840 --> 01:06:31.840]  Сейчас, сейчас, сейчас.
[01:06:37.840 --> 01:06:39.840]  Так.
[01:06:39.840 --> 01:06:41.840]  Теперь видно, что я написал?
[01:06:41.840 --> 01:06:43.840]  Я написал
[01:06:43.840 --> 01:06:45.840]  gitlab.ahchekru.
[01:06:49.840 --> 01:06:51.840]  Что?
[01:06:51.840 --> 01:06:53.840]  Нет.
[01:06:53.840 --> 01:06:55.840]  Сейчас объясню.
[01:07:03.840 --> 01:07:05.840]  И чудеса кажется, что мы попадаем
[01:07:05.840 --> 01:07:07.840]  с вами на gitlab.
[01:07:17.840 --> 01:07:19.840]  Объясняю.
[01:07:19.840 --> 01:07:21.840]  Значит, здесь работает два механизма.
[01:07:21.840 --> 01:07:23.840]  Первый механизм
[01:07:23.840 --> 01:07:25.840]  заключается в том, что
[01:07:25.840 --> 01:07:27.840]  нам доменное имя
[01:07:27.840 --> 01:07:29.840]  в первом приближении
[01:07:29.840 --> 01:07:31.840]  на уровне протокола DNS
[01:07:31.840 --> 01:07:33.840]  нужно для того, чтобы идентифицировать ip-адрес.
[01:07:33.840 --> 01:07:35.840]  Дальше мы с вами
[01:07:35.840 --> 01:07:37.840]  отправляем запрос
[01:07:37.840 --> 01:07:39.840]  на конкретный ip-адрес.
[01:07:41.840 --> 01:07:43.840]  Но мы с вами отправляем
[01:07:43.840 --> 01:07:45.840]  заголовок host.
[01:07:47.840 --> 01:07:49.840]  Мы отправляем с вами
[01:07:49.840 --> 01:07:51.840]  заголовок типа host куда-то.
[01:07:53.840 --> 01:07:55.840]  Куда мы его отправляем?
[01:07:57.840 --> 01:07:59.840]  И вот здесь нужно понять,
[01:07:59.840 --> 01:08:01.840]  что именно происходит.
[01:08:01.840 --> 01:08:03.840]  Давайте найду как раз этот слайд.
[01:08:03.840 --> 01:08:05.840]  Это метода запроса.
[01:08:05.840 --> 01:08:07.840]  Давайте я тут сразу пролистаю чуть вперед.
[01:08:07.840 --> 01:08:09.840]  А это работает вот так.
[01:08:09.840 --> 01:08:11.840]  Значит, смотрите.
[01:08:11.840 --> 01:08:13.840]  Мы с вами, с клиента,
[01:08:13.840 --> 01:08:15.840]  отправили запрос на некоторую штуку
[01:08:15.840 --> 01:08:17.840]  под названием веб-сервер.
[01:08:17.840 --> 01:08:19.840]  То есть на самом деле, когда у нас
[01:08:19.840 --> 01:08:21.840]  отправляют запрос в интернет, мы отправляем вон
[01:08:21.840 --> 01:08:23.840]  некоторые веб-сервер.
[01:08:23.840 --> 01:08:25.840]  А дальше веб-сервер уже должен
[01:08:25.840 --> 01:08:27.840]  решить по тому запросу,
[01:08:27.840 --> 01:08:29.840]  к которому приходят,
[01:08:29.840 --> 01:08:31.840]  к которому именно перенаправляют запрос.
[01:08:31.840 --> 01:08:33.840]  И как раз по заголовку host
[01:08:33.840 --> 01:08:35.840]  он определяет,
[01:08:35.840 --> 01:08:37.840]  куда ему во внутренней сети
[01:08:37.840 --> 01:08:39.840]  перенаправит запрос.
[01:08:39.840 --> 01:08:41.840]  И как раз, смотрите,
[01:08:41.840 --> 01:08:43.840]  по хосту ach-check-ru он перенаправляет
[01:08:43.840 --> 01:08:45.840]  на сервис ach-check-ru.
[01:08:45.840 --> 01:08:47.840]  А по хосту gitlab ach-check-ru
[01:08:47.840 --> 01:08:49.840]  он перенаправляет
[01:08:49.840 --> 01:08:51.840]  на другой сервер во внутренней сети.
[01:08:51.840 --> 01:08:53.840]  То есть у него как раз есть записи
[01:08:53.840 --> 01:08:55.840]  по тому, куда именно оно
[01:08:55.840 --> 01:08:57.840]  перенаправляется.
[01:08:57.840 --> 01:08:59.840]  Давайте я покажу эти записи.
[01:08:59.840 --> 01:09:01.840]  То есть я открою веб-интерфейс.
[01:09:21.840 --> 01:09:23.840]  Вот.
[01:09:25.840 --> 01:09:27.840]  Черт.
[01:09:27.840 --> 01:09:29.840]  Слушайте, а у вас gitlab нормально?
[01:09:29.840 --> 01:09:31.840]  У вас клонирование по SSH нормально работает?
[01:09:31.840 --> 01:09:33.840]  Я что-то так подумал,
[01:09:33.840 --> 01:09:35.840]  просто посмотрел это.
[01:09:37.840 --> 01:09:39.840]  Ну не, просто я сразу
[01:09:39.840 --> 01:09:41.840]  зашел на веб-сервер и понял,
[01:09:41.840 --> 01:09:43.840]  что что-то с ним не так, что в нем порту 22.
[01:09:43.840 --> 01:09:45.840]  Вот, значит, смотрите.
[01:09:45.840 --> 01:09:47.840]  Опять же, я показываю это пример
[01:09:47.840 --> 01:09:49.840]  сервера. Значит, и здесь видите,
[01:09:49.840 --> 01:09:51.840]  есть некоторые правила.
[01:09:51.840 --> 01:09:53.840]  Давайте попробуем найти
[01:09:53.840 --> 01:09:57.840]  хост gitlab ach-check-ru.
[01:09:57.840 --> 01:09:59.840]  Видите, то есть если у нас
[01:09:59.840 --> 01:10:01.840]  хост это gitlab ach-check-ru
[01:10:03.840 --> 01:10:05.840]  и путь префикс slash,
[01:10:05.840 --> 01:10:07.840]  то мы перенаправляем запрос
[01:10:07.840 --> 01:10:09.840]  на gitlab web-сервис.
[01:10:09.840 --> 01:10:11.840]  То есть это отдельный сервис, который
[01:10:11.840 --> 01:10:13.840]  у нас работает с gitlab.
[01:10:13.840 --> 01:10:15.840]  А если мы с вами пишем
[01:10:15.840 --> 01:10:17.840]  хост ach-check-ru,
[01:10:17.840 --> 01:10:19.840]  то мы перенаправляемся с вами
[01:10:19.840 --> 01:10:21.840]  на другой сервер. То есть у нас есть
[01:10:21.840 --> 01:10:23.840]  таблица маршрутизации
[01:10:23.840 --> 01:10:25.840]  на уровне запросов HTTP-сервера.
[01:10:27.840 --> 01:10:29.840]  То есть мы должны...
[01:10:29.840 --> 01:10:31.840]  Важное соглашение протокола HTTP,
[01:10:31.840 --> 01:10:33.840]  что мы с вами должны
[01:10:33.840 --> 01:10:35.840]  отправить как раз
[01:10:35.840 --> 01:10:37.840]  хост, заголовка хост.
[01:10:37.840 --> 01:10:39.840]  Без заголовка хост у вас HTTP-запрос не отправится.
[01:10:43.840 --> 01:10:45.840]  Кстати, кто здесь замечает
[01:10:45.840 --> 01:10:47.840]  какие моменты?
[01:10:49.840 --> 01:10:51.840]  Так, давайте увеличу.
[01:10:55.840 --> 01:10:57.840]  Видите, back-ach-ru slash static
[01:10:57.840 --> 01:10:59.840]  и back-ach-ru slash
[01:10:59.840 --> 01:11:01.840]  перенаправляются на разные сервисы.
[01:11:03.840 --> 01:11:05.840]  Один отдаёт статику,
[01:11:05.840 --> 01:11:07.840]  другой отдаёт ru. То есть на самом деле
[01:11:07.840 --> 01:11:09.840]  картинки, которые у вас отгружаются
[01:11:09.840 --> 01:11:11.840]  и сам запрос,
[01:11:11.840 --> 01:11:13.840]  они работают по-разному.
[01:11:13.840 --> 01:11:15.840]  Потому что картинка это статическая
[01:11:15.840 --> 01:11:17.840]  информация, которая нам выгружается,
[01:11:17.840 --> 01:11:19.840]  а запрос на сервер
[01:11:19.840 --> 01:11:21.840]  должны обращаться каким-то
[01:11:21.840 --> 01:11:23.840]  хитрым образом. То есть на самом деле
[01:11:23.840 --> 01:11:25.840]  здесь всё намного хитрее.
[01:11:25.840 --> 01:11:27.840]  И вот как раз при помощи заголовка
[01:11:27.840 --> 01:11:29.840]  хост мы с вами можем
[01:11:29.840 --> 01:11:31.840]  и понять каким образом куда у нас
[01:11:31.840 --> 01:11:33.840]  летит запрос.
[01:11:33.840 --> 01:11:35.840]  То есть сначала наша цель понять
[01:11:35.840 --> 01:11:37.840]  до какого IP-адреса мы доходим, а дальше
[01:11:37.840 --> 01:11:39.840]  уже развернуть этот запрос в зависимости от того
[01:11:39.840 --> 01:11:41.840]  редиректа есть. Вот.
[01:11:41.840 --> 01:11:43.840]  И как раз здесь есть два вида
[01:11:43.840 --> 01:11:45.840]  веб-серверов, которые зачастую
[01:11:45.840 --> 01:11:47.840]  используют. Первый называется
[01:11:47.840 --> 01:11:49.840]  NGINX.
[01:11:49.840 --> 01:11:51.840]  Точнее три они есть.
[01:11:51.840 --> 01:11:53.840]  Один из них
[01:11:53.840 --> 01:11:55.840]  уже по факту
[01:11:55.840 --> 01:11:57.840]  считается устаревшим в нашей стране.
[01:11:59.840 --> 01:12:01.840]  Вот.
[01:12:01.840 --> 01:12:03.840]  А давайте я
[01:12:03.840 --> 01:12:05.840]  наверное их
[01:12:05.840 --> 01:12:07.840]  покажу в Google Trends.
[01:12:11.840 --> 01:12:13.840]  Открываем Trends.
[01:12:15.840 --> 01:12:17.840]  Очень
[01:12:17.840 --> 01:12:19.840]  интересные
[01:12:19.840 --> 01:12:21.840]  запросы нам предлагают.
[01:12:21.840 --> 01:12:23.840]  NGINX
[01:12:23.840 --> 01:12:25.840]  значит HTTP
[01:12:25.840 --> 01:12:27.840]  D
[01:12:31.840 --> 01:12:33.840]  HTTP-сервер
[01:12:35.840 --> 01:12:37.840]  и
[01:12:37.840 --> 01:12:39.840]  Envoy.
[01:12:39.840 --> 01:12:41.840]  Нет, давайте
[01:12:41.840 --> 01:12:43.840]  Traffic.
[01:12:43.840 --> 01:12:45.840]  Это вот как раз вы видели
[01:12:45.840 --> 01:12:47.840]  веб-сервер по имени Traffic.
[01:12:47.840 --> 01:12:49.840]  Traffic Proxy.
[01:12:49.840 --> 01:12:51.840]  Здесь надо NGINX
[01:12:51.840 --> 01:12:53.840]  видимо задать.
[01:12:59.840 --> 01:13:01.840]  Вот.
[01:13:01.840 --> 01:13:03.840]  Значит и давайте откроем Trends
[01:13:03.840 --> 01:13:05.840]  за
[01:13:09.840 --> 01:13:11.840]  NGINX.
[01:13:13.840 --> 01:13:15.840]  Вот такие
[01:13:15.840 --> 01:13:17.840]  Trends.
[01:13:19.840 --> 01:13:21.840]  То есть видно, что
[01:13:21.840 --> 01:13:23.840]  раньше в качестве HTTP-серверов
[01:13:23.840 --> 01:13:25.840]  использовали Apache.
[01:13:25.840 --> 01:13:27.840]  Потом
[01:13:27.840 --> 01:13:29.840]  Trends снизились.
[01:13:29.840 --> 01:13:31.840]  И сейчас активно
[01:13:31.840 --> 01:13:33.840]  работает NGINX.
[01:13:35.840 --> 01:13:37.840]  Ну, активно используется NGINX. Кстати
[01:13:37.840 --> 01:13:39.840]  давайте последние
[01:13:39.840 --> 01:13:41.840]  5 лет откроем.
[01:13:41.840 --> 01:13:43.840]  Вот здесь показательнее картинка.
[01:13:47.840 --> 01:13:49.840]  Ну, это аналитика так
[01:13:49.840 --> 01:13:51.840]  замеряется.
[01:13:55.840 --> 01:13:57.840]  Ну, да.
[01:13:59.840 --> 01:14:01.840]  Не-не, что это за дата такая?
[01:14:03.840 --> 01:14:05.840]  А, так это Новый год.
[01:14:05.840 --> 01:14:07.840]  А?
[01:14:07.840 --> 01:14:09.840]  Да, это Новый год.
[01:14:09.840 --> 01:14:11.840]  На праздниках
[01:14:11.840 --> 01:14:13.840]  мировой.
[01:14:13.840 --> 01:14:15.840]  Вот. Кстати, если посмотреть
[01:14:15.840 --> 01:14:17.840]  по другим регионам, то
[01:14:17.840 --> 01:14:19.840]  картинка будет немножко другая.
[01:14:25.840 --> 01:14:27.840]  Вопрос. Как вы думаете, почему
[01:14:27.840 --> 01:14:29.840]  NGINX в России
[01:14:29.840 --> 01:14:31.840]  популярен?
[01:14:31.840 --> 01:14:33.840]  Посравить со всем
[01:14:33.840 --> 01:14:35.840]  миром?
[01:14:35.840 --> 01:14:37.840]  Не-не-не.
[01:14:41.840 --> 01:14:43.840]  Да, не. Просто все намного
[01:14:43.840 --> 01:14:45.840]  проще. Просто
[01:14:45.840 --> 01:14:47.840]  авторы NGINX закончили
[01:14:47.840 --> 01:14:49.840]  МГТУ мини-Баумана.
[01:14:49.840 --> 01:14:51.840]  Вот.
[01:14:51.840 --> 01:14:53.840]  Это, собственно, российские
[01:14:53.840 --> 01:14:55.840]  системы,
[01:14:55.840 --> 01:14:57.840]  российские наработки.
[01:14:57.840 --> 01:14:59.840]  И, в принципе, NGINX так или иначе умеет
[01:14:59.840 --> 01:15:01.840]  делать много разных вещей.
[01:15:01.840 --> 01:15:03.840]  То есть, по всему миру до сих пор видно, что
[01:15:03.840 --> 01:15:05.840]  используется Apache. А вот Trafic тоже
[01:15:05.840 --> 01:15:07.840]  начинает набирать популярность.
[01:15:07.840 --> 01:15:09.840]  И, возможно, он, кстати, очень хорошо
[01:15:09.840 --> 01:15:11.840]  подходит для контейнеризированных приложений.
[01:15:11.840 --> 01:15:13.840]  Как раз его сейчас на семинаре начали
[01:15:13.840 --> 01:15:15.840]  рассматривать тему по Docker.
[01:15:15.840 --> 01:15:17.840]  И вот Trafic как раз с Docker
[01:15:17.840 --> 01:15:19.840]  отлично дружит.
[01:15:19.840 --> 01:15:21.840]  Вот. То есть, смотрите, мы сегодня рассмотрели
[01:15:21.840 --> 01:15:23.840]  такую низкоуровневую часть.
[01:15:23.840 --> 01:15:25.840]  В следующий раз тогда мы продолжим
[01:15:25.840 --> 01:15:27.840]  нашу тему и пойдем на более
[01:15:27.840 --> 01:15:29.840]  высокоуровневую вещь. Посмотрим, как пишутся
[01:15:29.840 --> 01:15:31.840]  сервера, как выглядят запросы HTTP,
[01:15:31.840 --> 01:15:33.840]  чтобы вы уже могли
[01:15:33.840 --> 01:15:35.840]  с этим там
[01:15:35.840 --> 01:15:37.840]  деталями знакомиться и писать сервиса.
[01:15:39.840 --> 01:15:41.840]  Так. Если есть вопросы, то задавайте.
[01:15:47.840 --> 01:15:49.840]  Чего?
[01:15:51.840 --> 01:15:53.840]  Ну, я не знаю. Тут видно.
[01:15:55.840 --> 01:15:57.840]  Ну, давайте это...
[01:15:59.840 --> 01:16:01.840]  Давайте.
[01:16:07.840 --> 01:16:09.840]  Не-не-не. Видно, видно, видно.
[01:16:09.840 --> 01:16:11.840]  Давайте...
[01:16:13.840 --> 01:16:15.840]  Да, блин.
[01:16:25.840 --> 01:16:27.840]  Ладно.
[01:16:27.840 --> 01:16:29.840]  Ну, слушайте, тут экспедиционный тренд может быть
[01:16:29.840 --> 01:16:31.840]  в любой момент времени.
[01:16:33.840 --> 01:16:35.840]  Все тогда. Если вопросов нет, тогда спасибо
[01:16:35.840 --> 01:16:37.840]  всем.
