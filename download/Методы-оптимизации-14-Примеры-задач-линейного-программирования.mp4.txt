[00:00.000 --> 00:12.800]  Значит, вот мы рассматривали с вами алгоритм решения задачи линейного программирования,
[00:12.800 --> 00:22.440]  которые записаны в каноническом есть. Сегодня мы начинаем с примеров задачи линейного
[00:22.440 --> 00:31.200]  программирования, которые встречаются в жизненных ситуациях. Первая задача
[00:31.200 --> 00:39.120]  оптимального планирования производства. Предположим, что есть некоторые предприятия,
[00:39.120 --> 00:50.960]  которые выпускают D видов продукции. Но при производстве каждого из видов потребляются N
[00:50.960 --> 01:04.440]  видов сырья. И известно, что для выпуска одной единицы K виду продукции затрачивается
[01:04.440 --> 01:19.120]  АК житое единиц житого сырья. Значит, так имеется вот D видов, и каждый из этих видов потребляет какое-то
[01:19.120 --> 01:29.040]  количество сырья, а всего сырья N видов. Ну, что значит потреблять? Может и не потреблять,
[01:29.040 --> 01:42.520]  но тогда соответствующие затраты будут просто ноль уровня. В общем, в виде у нас для производства
[01:42.520 --> 01:56.680]  одной единицы K виду продукции используется АК житое единиц житого сырья. Но сырье не бесконечное,
[01:56.680 --> 02:03.960]  поэтому есть ограничение на суммарный объем житого вида сырья, находящегося в распоряжении
[02:03.960 --> 02:12.080]  предприятия. Известно, что он равен B жито. А прибыль с производства K виду продукции равна
[02:12.080 --> 02:20.720]  R ката рублей. Ну, а задача заключается в том, чтобы максимизировать прибыль. Ну, естественно,
[02:20.720 --> 02:28.640]  при условии, что расход сырья не превысит тот, который находится в распоряжении предприятия.
[02:28.640 --> 02:39.720]  И вот надо выяснить, значит, какой же такой оптимальный план, то есть вот сколько надо выпускать
[02:39.720 --> 02:51.360]  K, сколько единиц K виду продукции выгодно выпускать, чтобы общая прибыль была максимальная.
[02:51.360 --> 03:00.640]  Ну, если мы запишем вот эту задачу в таком формализованном виде, то она будет иметь
[03:00.640 --> 03:12.280]  такой вид. Ну, во-первых, общая прибыль равна сумме по всем единицам производимого продукта,
[03:12.280 --> 03:28.680]  то есть по кат единицы dd. R ката – это прибыль с единицей произведенной продукции на x ката.
[03:28.680 --> 03:41.120]  X ката – это сколько мы решили производить катового продукта. Значит, R – это у нас вектор R1 и так далее,
[03:41.120 --> 03:52.320]  Rd, но мы считаем, что он из Rd-сугрыженного, то есть это строка. А x – это вектор столбец x1 и так далее xd.
[03:52.320 --> 04:08.800]  А ограничения такие, что сумма А кожиты на x ката – это общий объем потребления житого
[04:08.920 --> 04:16.360]  вида сырья, он не должен превосходить b житым. Ну, естественно, x больше равно b.
[04:16.360 --> 04:26.560]  Поэтому вот мы получаем следующую задачу линейного программирования. R на x, R умноженное на x,
[04:26.560 --> 04:34.760]  на максимум при условии, что сумма по кат единицы d а кожиты на x ката не превосходит b житы,
[04:34.760 --> 04:44.840]  ну и x больше равно b. Ну, очевидно, что эта задача сводится к задаче в нормальной форме.
[04:44.840 --> 04:56.560]  Это мы с вами выясняли, что любая из трёх форм, которые мы рассматриваем, сводится к любой другой.
[04:56.560 --> 05:06.320]  Вот, поэтому, значит, вот это вот такая задача. Её можно, конечно, переформулировать в виде
[05:06.320 --> 05:12.280]  задачи линейного программирования в нормальной форме, но ясно, что это вот задача линейного
[05:12.280 --> 05:18.800]  программирования. Вторая задача, которую мы рассматриваем, это транспортная задача.
[05:18.800 --> 05:32.200]  Имеется n карьеров с песком и m потребителей, которых надо обистечить песком. И известно,
[05:32.200 --> 05:41.480]  что с катового карьера нужно увести а катое тон песка в сутки, а житое тон к потребителю
[05:41.480 --> 05:49.240]  нужно b житое тон песка в сутки. При этом перевозка 1 тонны песка с катового карьера
[05:49.240 --> 05:56.360]  житому к потребителю откроется в церковь житой рубли. Вот требуется обистечить всех
[05:56.360 --> 06:08.360]  потребителей, затратив при этом на перевозку наименьшую возможную сумму. Значит, понятно,
[06:08.520 --> 06:17.360]  вот имеется у вас n карьеров с песком, но тут традиционно рассматривают карьеры с песком и
[06:17.360 --> 06:25.400]  потребителей песка. Но, конечно, вы понимаете, что это могут быть и магазины, которые торгуют
[06:25.400 --> 06:34.520]  хлебом, и хлебозаводы в качестве места карьеров с песком. Хлебозаводы столько-то
[06:34.520 --> 06:47.240]  производят продукции в сутки, а житому магазину требуется такое-то количество хлеба, и вот разводят
[06:47.240 --> 06:53.560]  хлеб. Ну или это любой другой продукт, не обязательно. Ну да, это условная вещь совсем,
[06:53.560 --> 06:59.640]  но здесь традиционно рассматриваются такие карьеры с песком и потребителей. Это, конечно,
[06:59.800 --> 07:14.560]  чисто условная такая вещь. Итак, как это формализовать задачу? Давайте через x к житой обозначим
[07:14.560 --> 07:23.880]  количество песка взятого с катого карьера для перевозки житому купельницей. И тогда мы
[07:23.880 --> 07:39.600]  получаем следующую задачу, что общая сумма затрат на перевозки будет равна вот таким
[07:39.600 --> 07:55.240]  суммам, по k от единицы до n и по g от единицы до n, c к житой на x к житой. Мы каждому предъявителю
[07:55.240 --> 08:06.360]  из разных карьеров везем песок, и, значит, поэтому вот к житой это количество взятого
[08:06.360 --> 08:17.200]  с катого карьера для перевозки житому потребителя, а c к житой это стоимость. Поэтому вот мы просто
[08:17.200 --> 08:29.240]  суммируем все затраты c к житой на x к житой и хотим это минимизировать эту сумму. При этом мы знаем,
[08:29.240 --> 08:41.480]  что с катого карьера можно вывести а к к житой, поэтому сумма x к житой, если брать сумму по 7 g,
[08:41.480 --> 08:58.000]  то это должно равняться а к к житой. А если взять сумму x к житой по 7 k, то это то количество,
[08:58.000 --> 09:06.200]  которое мы привезем в житый пункт, но им нужно было жито, поэтому вот имеется два таких равенства,
[09:06.200 --> 09:16.600]  два таких ограничения, ну и, естественно, x к житой все больше равно. Поэтому вот получается тоже задача
[09:16.600 --> 09:26.960]  линейного программирования, но она уже как раз вот в такой канонической форме. Можно это записать
[09:26.960 --> 09:40.280]  в таком векторном виде, тогда, чтобы это записать, давайте рассмотрим вот такой вектор из rn
[09:40.280 --> 09:52.880]  плюс m со звездочкой. Размерность n плюс m у него. Нет, не n плюс m, а m, сейчас, значит сколько тут,
[09:52.880 --> 10:13.840]  каждый раз наберем m умножить на n. Вот и c со звездочкой, значит это вот такой вот вектор c11,
[10:13.840 --> 10:36.040]  c12, c1m и так далее. Это стоимость перевоза. Теперь через x это количество, сколько мы берем
[10:36.040 --> 10:53.240]  с катового карьера для перевозки житого потребителя, x11, x12, x1m и так далее, xnm. И тогда мы получаем,
[10:53.240 --> 11:05.240]  да, и вот матрица А. Вот она такая. Здесь, значит, смотрите, первые n, первые,
[11:05.240 --> 11:17.000]  сейчас, да, какого размера, n плюс m. Значит, тут первые n строк они устроены так, что идут тут
[11:17.000 --> 11:24.320]  единички, такие блоки стоят единички, кем все нули, потом во второй строке единички все остальные нули
[11:24.320 --> 11:32.360]  и так далее, в n строке единички все остальные нули. Вторая часть матрицы, она устроена так,
[11:32.360 --> 11:50.960]  что такие единичные матрицы стоят в каждом из n столцов. И тогда можно записать нашу задачу таким
[11:50.960 --> 12:01.680]  образом. Значит, вот эта вот стоимость вся, это c со звездушкой умножить на x. Вот c со звездушкой, вот x,
[12:01.680 --> 12:19.440]  значит, это стоимость будет. Надо ее минимизировать. Вот эти равенства, сумма xк по 7g равна k, сумма xк
[12:19.440 --> 12:32.160]  по 7g равна k, они получатся, если мы a умножим на x и переравняем b с чертой, а b с чертой это вектор из rn
[12:32.160 --> 12:45.080]  плюс m, у которых первый n координат это a, компоненты a, а остальные m координаты это
[12:45.080 --> 12:52.520]  компоненты b. Значит, вот так и получится. Если мы начнем ax умножать на b с чертой, то какой
[12:52.520 --> 13:02.060]  первый элемент будет? Вот будет такой элемент x1-1, x1-2 и так далее, плюс x1m. На первом месте стоят
[13:02.060 --> 13:18.140]  единишки, а второй индекс меняется. Это вот как раз сумма x1 житая должна равняться a1, ну и здесь вот
[13:18.140 --> 13:27.140]  первые компоненты a1. Так что вот такая матрица, она достаточно разрежена, здесь много нулей. Ну и вот эта
[13:27.140 --> 13:34.580]  задача с отверстием на x на минимум, при условии, что ax равно b с чертой и x больше равно нуля.
[13:34.580 --> 13:51.500]  И третья задача, которую мы рассматриваем, это задача на минимакс. Пусть у нас имеются
[13:51.500 --> 14:07.580]  векторы, к штук векторов, вектор строки из rd со звездочкой и к чиселу b1 и так далее. А матрица
[14:07.580 --> 14:18.980]  размера n на d, ну как обычно у нас, значит n строк d столцов и b вектор из rn. Вот мы рассмотрим такую
[14:18.980 --> 14:33.740]  функцию f от x, которая есть максимальная из вот таких разностей. Каждый вектор из этих векторов
[14:33.740 --> 14:46.420]  c1 со звездочкой и ck со звездочкой умножаем на x. x у нас вектор из rd и мы читаем соответствующее число
[14:46.420 --> 14:56.660]  числа b житые, значит c житые со звездочкой на x у нас b житые. Вот максимальная из этих чисел это и есть
[14:56.660 --> 15:04.540]  f от x. А задачу мы рассматриваем следующую, минимизировать это к максимуму, поэтому минимакс,
[15:04.540 --> 15:13.820]  минимизировать этот максимум при условии, что ax равно b, а x больше равно нуля. Условие это,
[15:13.820 --> 15:22.060]  конечно, такое же как канонической задачи линейного программирования, но сама задача не является
[15:22.060 --> 15:31.580]  линейной, потому что мы минимизируем максимум, не линейную функцию, а максимум из некоторых вот выражений.
[15:31.580 --> 15:40.060]  Ну это именно таких, которые там написаны. Но тем не менее ее можно свести, введя дополнительные
[15:40.060 --> 15:49.900]  перемены. И вот это сведение, а именно рассматривается задача. Мы покажем, что они эквивалентны.
[15:49.900 --> 16:01.420]  Следующее, мы вводим переменную x d плюс 1. У нас d значение, x вектор из rd. Мы рассматриваем d плюс первую
[16:01.420 --> 16:11.900]  переменную x и хотим ее минимизировать при условии, что c житой со звездочки на x минус b житой не превосходит
[16:11.900 --> 16:22.820]  этого значения x d плюс 1, этой переменной x d плюс 1, по 7 g от игнецетока. И еще вот эти вот
[16:22.820 --> 16:33.220]  условия x равно b и x больше равно b. Ну давайте вот покажем, что они эквивалентны. Действительно, пусть x с крышкой
[16:33.220 --> 16:44.340]  с компонентами x с крышкой 1 и так далее, x с крышкой d, решение вот этой задачи 49 обозначено на
[16:44.340 --> 16:57.240]  minimax. Ну тогда утверждается, что x1 с крышкой, и так далее x d с крышкой f от x с крышкой, f это вот этот
[16:57.240 --> 17:08.020]  максимум из разности. Есть решение задачи с дополнительной переменной 50. Но так как если положить
[17:08.020 --> 17:17.220]  противно, то тогда бы существовал такой элемент x с волной, допустимый в задачи 49, для которого было бы
[17:17.220 --> 17:25.940]  значение меньше f от x с волной, т.е. вот это x d плюс 1, f от x с волной было бы меньше, чем f от x с крышкой,
[17:25.940 --> 17:37.420]  но это противоречит тому, что x с крышкой решение задачи 49 нашей исходной задачи на minimax. А если
[17:37.420 --> 17:44.380]  наоборот предположить, что у нас имеется решение задачи вот с этим дополнительным
[17:44.380 --> 17:53.460]  переменным x d плюс 1, т.е. имеется такой вектор x1 с крышкой, и так далее x d с крышкой, x d плюс 1 с крышкой,
[17:53.460 --> 18:04.500]  то тогда вектор x1 с крышкой, и так далее x d с крышкой является допустимой задачей на minimax. Но если
[18:04.500 --> 18:11.820]  он не является решением этой задачи, то тогда найдется допустимый вектор x с волной, x1 с волной, x d с волной,
[18:11.820 --> 18:21.220]  для которого f от x с волной будет меньше, чем f от x с крышкой, но f от x с крышкой у нас меньше, равно чем x с крышкой d
[18:21.220 --> 18:32.180]  плюс 1 к условию решения этой задачи. Ну а тогда вектор x1 с волной, x d с волной и так далее, а последний
[18:32.180 --> 18:43.340]  x с волной d плюс 1, если положить f от x с волной, будет являться допустимым задачей с дополнительной
[18:43.340 --> 18:53.300]  переменной, и для него будет x с волной d плюс 1 меньше, чем x с крышкой, что противоречит экстремальности
[18:53.300 --> 19:05.580]  вектора, являющейся решением задачи 50. Так что вот эти задачи, они эквивалентны, а задача 50 уже линейна,
[19:05.580 --> 19:12.540]  потому что здесь ограничение виде неравенства, ограничение виде равенства, но все ограничения
[19:12.540 --> 19:21.460]  виде неравенства можно записать как ограничение в виде равенства, и ее можно переписать в каноническом
[19:21.460 --> 19:33.620]  виде, поэтому это вот задача линейного программина. Давайте дальше будем более подробно рассматривать
[19:33.620 --> 19:40.180]  вот такую интересную задачу, а именно транспортную задачу, которая там под номером 2 была.
[19:40.180 --> 19:55.700]  И значит, ну вот здесь мы понимаем о том, что у нас n пунктов и отправления. Здесь уже видите, мы не говорим там
[19:55.700 --> 20:02.900]  песок или еще что-то такое, вот более так сказать общей ситуации, что имеется n пунктов отправления,
[20:02.900 --> 20:13.080]  1 и так далее а n, и m пунктов назначения, b1 и так далее bn. Значит, какие-то грузы. Из пунктов
[20:13.080 --> 20:27.140]  акката отправляются грузы пункты б жита, и из акката можно увести а малая ката единиц груза,
[20:27.140 --> 20:39.860]  а в пункте b большого жита требуется b малая жита единиц груз. Ну и при этом перевоз к одной
[20:39.860 --> 20:50.580]  единице откроется в ц, из пункта k в пункт g откроется в ц ка житы ровно. Ну и требуется
[20:50.580 --> 21:02.780]  затратить наименьшую возможную сумму денег для вот этого процесса перевозка, перевозки из пунктов
[21:02.780 --> 21:10.300]  отправления к пунктам назначения. Ну мы уже писали с вами, что вот формально эта задача записывается
[21:10.300 --> 21:21.140]  как минимизация суммы ц ка житы на и ц ка житы при ограничении, что сумма ка житы ровно акката
[21:21.140 --> 21:34.080]  и сумму ка житы пожи. Сумма ка житы пожи это сколько мы берем из катова пункта отправления. Мы должны
[21:34.080 --> 21:46.280]  брать аккаты, вот такой груз суммарный. В пункт b большого жита мы должны достать b малая жита,
[21:46.280 --> 22:01.600]  вот единиц груза. И здесь это сумма х ка житы по пункт к. Ну вот эти обозначения,
[22:01.600 --> 22:08.480]  которые мы с вами уже использовали и матрица, и без черта это все было, значит здесь просто это
[22:08.480 --> 22:20.280]  заново все написано. Всякий допустимый вектор в этой задаче мы называем допустимым планом перевозок.
[22:20.280 --> 22:29.520]  Решение транспортной задачи называется оптимальным планом перевозок. Вот значит есть допустимый
[22:29.520 --> 22:36.480]  план перевозок, который удовлетворяет этим условиям и есть оптимальный самый лучший план перевозок.
[22:36.480 --> 22:48.600]  Такая терминология здесь примет. Из этих вот условий равенство вытекает, что если мы возьмем сумму
[22:48.600 --> 23:00.280]  х ка житы всю и па ка и па жи, то это все равно что сумма аккатов или все равно что сумма бжит.
[23:00.280 --> 23:12.280]  Значит они должны быть равны, то есть иначе говоря мы считаем, что вот сколько есть запас груза на
[23:12.280 --> 23:21.240]  всех пунктах отправления, такой запас груза и нужно перевести в пункт назначения. В этом
[23:21.240 --> 23:28.400]  случае говорят, что имеется замкнутая модель транспортной задачи. Ну конечно реально такого
[23:28.400 --> 23:36.680]  не встречается, значит реально может быть ситуация, что общее число груза, которое перевозится,
[23:36.680 --> 23:49.080]  может быть больше, в карьерах добывается больше песка, в пунктах назначения меньше общее
[23:49.080 --> 23:57.720]  количество груза, а может быть наоборот, что добывается меньше чем нужно в каждом пункте назначения.
[23:58.560 --> 24:07.800]  Вот так что возможно разной ситуации, но давайте покажем, что все это может свести все равно вот
[24:07.800 --> 24:16.080]  можно свести такой замкнутой задачей, замкнутой модели транспортной задачи. Действительно,
[24:16.080 --> 24:22.720]  давайте предположим, что суммарные запасы отправителей больше потребностей, песка много
[24:22.720 --> 24:30.720]  производится, такого общего количества, что за сутки там можно взять песка с каждого карьера,
[24:30.720 --> 24:38.960]  такого большого количества не требуется в пунктах назначения. То есть сумма по всем кат единицы ДН
[24:38.960 --> 24:48.880]  а ката больше, чем сумма, которая требуется, сумма грузов, которые требуется доставить в пункты
[24:49.640 --> 24:59.760]  то есть сумма коже от единицы ДН. В этом случае равенство, которое у нас есть, они просто заменяются
[24:59.760 --> 25:14.560]  на неравенство и задача стоит так, что мы берем-то столько, чтобы удовлетворить потребителю, чтобы
[25:14.560 --> 25:22.120]  будут говорить запросы у потребителя, сумма коже это равно выжитой, но сумма всех окаток больше,
[25:22.120 --> 25:28.960]  поэтому значит здесь стоит неравенство, там так сказать, сумма коже это не цдм, коже это меньше
[25:28.960 --> 25:37.960]  равно окаток. Так вот задача тогда ставится, но можно от нее перейти и к замкнутой задаче,
[25:37.960 --> 25:47.800]  можно ввести эффективный пункт назначения, Б, М плюс первое, и все лишнее как бы отравить туда,
[25:47.800 --> 25:59.480]  Б мало М плюс первое, сказать, что это разность из того, что все производится, минус того,
[25:59.480 --> 26:07.560]  что сколько надо в остальных пунктах и назначить туда нулевую стоимость перевозок, нулевая стоимость
[26:07.560 --> 26:17.400]  перевозок, значит вот в этот пункт, ну и фактически вы там получите, сколько туда надо перевести,
[26:17.400 --> 26:26.120]  ну естественно не перевозить туда, а все остальное останется, ну вот то, что надо реализовывать,
[26:26.120 --> 26:35.840]  и мы соответственно добавим новые не отрицательные перенеменные, тогда х ката х М плюс первое,
[26:35.840 --> 26:45.840]  пока от единицы ДМ, то есть то количество, которого из ката пункта производства надо внести в этот
[26:45.840 --> 26:53.080]  эффективный пункт назначения М плюс первое, а тогда получится уже замкнутая модель транспортной
[26:53.080 --> 27:01.000]  задачи, и вот здесь неста не равенства, добавится равенство суммы коши от единицы ДМ плюс один,
[27:01.000 --> 27:13.160]  х пожита равно а ката, ну еще раз повторяю, с нулевыми стоимостью перевозки, а если наоборот,
[27:13.160 --> 27:24.960]  что требуется больше, чем имеется на карьерах общего количества киска, то тогда другие равенства,
[27:24.960 --> 27:33.280]  вот сумма х пожита равно божитой была, но равно не получится, потому что нет такого количества киска,
[27:33.280 --> 27:41.280]  значит, равенство заменится на неравенство, сумма по ката единицы ДМ х пожита меньше равно божитой,
[27:41.280 --> 27:49.640]  можно тогда такую задачу рассматривать, но в этом случае тоже можно свести замкнутой задачи и
[27:49.640 --> 27:58.720]  рассмотреть эффективный пункт отправления, такой эффективный карьер А большое М плюс один сделать
[27:58.720 --> 28:10.440]  с величиной вывоза, но этот протостаток, то что не хватает всем пунктом назначения, вот эту разницу,
[28:10.440 --> 28:22.720]  сумма х пожитой минус сумма по ката единицы ДМ на ката, и это обозначить через о малое М плюс 1,
[28:22.720 --> 28:32.520]  вот так сказать, производство вот такой карьер эффективный сделать, а мало М плюс 1, и тоже с
[28:32.520 --> 28:41.600]  нулевыми стоимостью перевоза из этого пункта, и тогда если добавить новые неотрицательные
[28:41.600 --> 28:49.920]  переменные хн плюс первая жита, это значит сколько из этого эффективного карьера нести
[28:49.920 --> 28:59.960]  вжитый пункт потребления, то тогда получится замкнутая модель, снова замкнутая модель транспортной
[28:59.960 --> 29:09.960]  задачи с ограничениями в виде равенств, уже тогда можно равенство писать, что сумма по g от единицы
[29:09.960 --> 29:22.440]  ДМ х пожитой равно ката, но ка уже меняется от единицы до N плюс 1, и сумма по ка от единицы до N плюс 1 х пожитой
[29:22.440 --> 29:35.480]  равняется джитой, так что здесь вот мы просто с вами показали, что не обязательно рассматривать
[29:35.480 --> 29:43.080]  замкнутую модель, можно рассматривать не замкнутую модель, когда количество груза перевозимого
[29:43.080 --> 29:52.960]  производимого, скажем, на карьерах больше чем потребности, или наоборот потребности больше
[29:52.960 --> 30:01.080]  чем производится продукта, значит всегда можно, введя вот эти эффективные либо пункты отправления,
[30:01.080 --> 30:08.800]  либо пункты назначения с нулевыми стоимостьями перевозки, можно сводить все равно к замкнутой модели,
[30:08.800 --> 30:17.560]  поэтому дальше мы будем рассматривать только замкнутую модель. Ну вот следующий заголовок,
[30:17.560 --> 30:27.880]  это вот свойство транспортной задачи, значит, конечно транспортная задача, ее можно решать
[30:27.880 --> 30:37.880]  симплекс-методом, но в силу простого строения ограничений матрица можно упростить решение этой
[30:37.880 --> 30:44.000]  задачи, значит, формально говоря, можно ничего не делать, вот у нас есть матрица, вот у нас есть
[30:44.000 --> 30:53.200]  ограничения, там канонически такой формы они записаны, поэтому вот эту матрицу можно решать
[30:53.200 --> 31:01.760]  просто симплекс-методом, который мы изучали, не заморачиваться ни на что, но в реальности матрица
[31:01.760 --> 31:11.840]  может быть большая, а в силу ее такой разреженности существует некоторые методы упрощенные, вот это
[31:11.840 --> 31:21.760]  мы хотим рассмотреть, но сначала нам некоторые дополнительные результаты потребуются, вот такая
[31:21.760 --> 31:33.520]  лемма, что для любой транспортной задачи существует допустимый план перевозок, значит, еще мы в ограничении
[31:33.520 --> 31:43.280]  доказательств, мы считаем, что задача сведена уже к замкнутой модели транспортной задачи, и мы
[31:43.280 --> 31:55.480]  просто предъявляем допустимый план перевозок, вот мы берем хкж, равный произведению акад на
[31:55.480 --> 32:09.160]  бж и деленное на м, а м это общая сумма перевозимого груза, ну потребляемого и производимого, замкнутая
[32:09.160 --> 32:23.240]  модель, это одно и то же, ну давайте проверим, что выполнены ограничения, если мы просунируем хкж, а это
[32:23.240 --> 32:33.840]  есть все равно, что сумма акад на бж деленное на м, то вынеся акад на м, потому что мы по индексу
[32:33.840 --> 32:44.160]  уже суммируем, мы получим, что поскольку сумма бж это м большое, то у нас получится акад, а если мы
[32:44.160 --> 32:53.520]  инсунируем по к, ну тогда мы вынесем бж деленное на м, а сумма акад это снова м, поэтому получим
[32:53.520 --> 33:10.560]  хкж, ну и ясно, что хкж больше равны нуля, и тем самым хкж это допустимый план перевозок, значит здесь у
[33:10.560 --> 33:20.440]  нас ограничения какие-то мы писали или нет, значит что, ну конечно не имеет смысла в такой общей
[33:20.440 --> 33:27.080]  задачи рассматривать в случае, когда акад равно нулю, любой акад, значит это пропускается когда мы
[33:27.080 --> 33:37.680]  эффективны, да х больше, но это х, это значит вектор, что мы можем, а здесь мы по-моему не писали, да, не
[33:37.680 --> 33:44.400]  писали, ну в принципе ничего не противоречит, что если какой-то бж или какой-то акад равно нулю,
[33:44.400 --> 33:52.240]  смысла нет такого, если это эффективный, ну даже эффективный у нас всегда соответствующие акад или
[33:52.240 --> 34:02.800]  бж строго больше нуля, что можно считать, что все акады, все бж строго больше нуля, значит смысла
[34:02.800 --> 34:20.200]  нет, вводить пункт, который ничего не надо вести или вводить пункт производства, где ничего не
[34:20.200 --> 34:25.960]  производится, бессмысленная вещь, поэтому конечно можно считать, что акад и бж это больше нуля,
[34:25.960 --> 34:34.160]  но это ни на что на самом деле не влияет, другая лемма, которую мы хотим, значит так допустимый план
[34:34.160 --> 34:42.080]  перевозок всегда существует, следующая лемма такая, что для любой транспортной задачи существует
[34:42.080 --> 34:49.480]  оптимальный план перевозки, но это мы моментально получаем из общих теорем у задачи в задачах
[34:49.480 --> 35:02.400]  линейного программина, потому что смотрите, раз существует допустимый план перевозок, то у нас уже
[35:02.400 --> 35:15.440]  задача, которая должна иметь решение в том смысле, что мы же смотрим нижнюю грань, мы минимизируем,
[35:15.440 --> 35:26.640]  но у нас есть ограничение снизу, что нижняя грань больше равна нуля и поэтому и нету стоимости
[35:26.640 --> 35:38.280]  ограничений, значит нижняя грань всегда есть некое неотрицательное число, то есть задача имеет
[35:38.280 --> 35:46.800]  конечное значение, задача имеет конечное значение, у нас была теорема или предложение это было,
[35:46.800 --> 35:57.080]  нет, теорема вот тут написана, теорема существования, теорема около 17, которая утверждала, что если значение
[35:57.080 --> 36:07.080]  конечное, то существует решение, там даже в силу того, что все эквивалентные формы задачи линейного
[36:07.080 --> 36:12.720]  программина, даже неважно в какой форме эта задача записана, каноническая и общая.
[36:12.720 --> 36:30.400]  Теперь вот еще одно утверждение о том, что рамк матрицы A равен n плюс m минус 1, ну вот давайте
[36:30.400 --> 36:39.920]  смотреть на саму эту матрицу, мне приходится возвращаться здесь к самой матрице, вот она,
[36:39.920 --> 36:51.440]  матрица, значит у нее много столцов, как мы с вами говорили, значит вот строк n плюс m, она из двух
[36:51.440 --> 36:59.840]  частей состоит, вот первый n-строк, они устроены вот такими блоками и последний m-строк, они устроены
[36:59.840 --> 37:09.560]  вот так, какие-то блоки из единичных матриц, значит у нее n плюс m-строк, а столцов много, n умножить на n.
[37:09.560 --> 37:21.800]  Вот давайте вот что сделаем, нам надо доказать, что рамк n плюс m минус 1, на единичку меньше,
[37:21.800 --> 37:38.760]  чем число строк, давайте вот что сделаем, сложим все первые n-строк, сложим первую со второй,
[37:38.760 --> 37:49.280]  ну и поставим ее, ну скажем, к n-той строке, вот здесь n-тая строка, и к ней прибавим все предыдущие
[37:49.280 --> 37:58.120]  n минус одну скручку, смотрите, очевидно, что получится строка из всех единичек, ну мы знаем с вами,
[37:58.120 --> 38:05.960]  что при сложении строк рамк не меняется, значит мы получим вот эту n-ную строку, тогда всю составу из
[38:05.960 --> 38:18.080]  единичек, давайте теперь, начиная с n плюс первой строки, к последней прибавим все, начиная с n плюс первой,
[38:18.080 --> 38:28.560]  ну ясно, что получится тоже строка, состоящая из всех единиц, значит мы получим матрицу,
[38:28.560 --> 38:38.960]  у которой рамк как у исходной, но у нее две строки одинаковые, значит уж во всяком случае ее рамк
[38:38.960 --> 38:49.600]  метре восходит меньше, либо равен n плюс m минус 1, значит первое, что мы сделали, мы увидели,
[38:49.600 --> 39:03.440]  что рамк этой матрицы меньше равен, чем n плюс m минус 1, теперь давайте сделаем вот что,
[39:03.440 --> 39:24.440]  надо теперь указать такой минор порядка n плюс m минус 1, у которого определитель не равен нулю,
[39:24.440 --> 39:40.820]  вот что здесь предлагается, предлагается переставить строки, начиная со второй по n после последней
[39:40.820 --> 39:48.640]  строки матрица, вот что предлагается, давайте на самом матрице посмотрим, вот матрица,
[39:48.640 --> 40:01.160]  что значит, что предлагается, вот смотрите, вот вторая строка и до n, и мы ее поставим после последней,
[40:01.160 --> 40:15.720]  а потом выберем столцы, сначала выберем первую n столцов, потом n плюс 1 столбец,
[40:15.720 --> 40:24.320]  смотрите, вот здесь единичка появится, а дальше нули, потому что мы только до n строки ставим,
[40:24.320 --> 40:34.360]  потом возьмем, значит это n плюс 1, потом возьмем в следующем блоке, значит это сколько будет,
[40:34.360 --> 40:45.840]  2n плюс 1, там появится единичка, значит вот здесь будут единички, m штук, это на m плюс 1 месте,
[40:45.840 --> 40:59.000]  а там на m плюс, на таком же там месте, значит это n плюс m плюс 1 место, а там будет m плюс n,
[41:04.360 --> 41:18.440]  нет, ну и на следующем, значит m плюс 2, на m плюс 2 месте, если мы столбец такой берем,
[41:18.440 --> 41:27.120]  и вот получится треугольная матрица, где в главной диагонали будет единичка, какой ее будет размер,
[41:27.120 --> 41:35.400]  значит здесь m и еще n минус 1, мы добавим этих столных строчек, но не все столцы будем брать,
[41:35.400 --> 41:50.120]  а вот через n, получится тогда вот такой минор порядка n плюс m минус 1, который является треугольной
[41:50.120 --> 41:56.800]  матрицы, на главной диагонали стоит единица, ну ясно, что к удлителю не равен нулю, а размер его будет
[41:56.800 --> 42:12.440]  раз n плюс m минус 1, мы тем самым доказали, что рамп матрицы A это n плюс m минус 1, дальше,
[42:12.440 --> 42:25.320]  и еще одна лемма, пятая, что любые n плюс m минус 1 строк матрицы линейно не зависит,
[42:25.320 --> 42:37.760]  давайте эту попробуем доказать, вот матрица, мы доказали, что рамп ее n плюс m минус 1,
[42:37.760 --> 42:50.800]  посмотрите, что до этого мы доказывали, до этого мы доказывали, что сумма первых n строк, давайте
[42:50.800 --> 42:59.880]  строки обозначать в виде так сказать векторов, значит вот сумма первых n векторов равняется
[42:59.880 --> 43:10.240]  то же самое, что сумма последних m векторов, давайте где-то я напишу здесь,
[43:10.240 --> 43:37.360]  значит это у нас есть, ну как бы их обозначить, а, б, цепь, все равнится, ну давайте д, значит вот
[43:37.360 --> 43:50.680]  d1, d1 это вот этот вот вектор, самая первая строка, плюс и так далее, плюс dn, n это вот эта вот строка,
[43:50.680 --> 43:59.480]  последняя, значит сумма всех этих векторов это вектор изъединить состоит, но это то же самое,
[43:59.480 --> 44:14.920]  что сумма последних, значит f1 плюс и так далее, f1 это вот этот код, f1, а этот fm,
[44:14.920 --> 44:28.920]  плюс fm, ну из этого равенства и ясно, что любой вектор линейно выражается через остальные,
[44:28.920 --> 44:38.040]  значит любой вектор линейно выражается через остальные, есть линейная комбинация остальной,
[44:38.040 --> 44:46.040]  уж какой бы вектор, не знаю там, d2, ну все перенесите в правую часть, значит у вас d2 линейно выражается
[44:46.040 --> 44:53.880]  через все остальные, так что вот эта мглема, она довольно простая, она доказана.
[44:53.880 --> 45:22.040]  Да, а здесь же в линейне не только что выражается, а что любые n плюс m,
[45:22.040 --> 45:27.880]  значит я неправильно лему сформулировал, значит это в доказательстве это используется,
[45:27.880 --> 45:36.280]  значит сама лему звучит так, вот она написана, что любые n плюс m минус 1 строк матрицы линейно
[45:36.280 --> 45:48.640]  независимы, а доказано это так, что мы ну скажем вот выбрали n плюс m минус 1 строк, остальная строка
[45:48.640 --> 45:58.280]  линейно через них выражается, поэтому если бы из этих n плюс m минус 1 строк были бы,
[45:58.280 --> 46:07.480]  если бы эти строки были линейно зависимыми, то тогда ран был бы меньше, чем n плюс m минус 1,
[46:07.480 --> 46:13.960]  потому что тогда уже получалось, что это система и заставился, что она тоже линейно зависима,
[46:13.960 --> 46:24.600]  а так получается, что действительно какие бы строки вы не выбрали, любой другой вектор через них
[46:24.600 --> 46:31.880]  линейно выражается, линейно выражается, вот отсюда вытекает, что какие бы строчки вы не выбрали,
[46:31.880 --> 46:38.680]  они вот только n плюс m минус 1, не все, вот то есть любую строчку если зачерпнуть,
[46:38.680 --> 46:41.240]  то все остальные будут линейно независимы.
[46:53.760 --> 46:55.440]  Давайте я собру это.
[46:58.360 --> 47:06.000]  Вот теперь по поводу методов нахождения начальной крайней точки в транспортной задачи.
[47:06.000 --> 47:18.680]  Опять мы рассматриваем загнутую модель транспортной задачи и давайте ее запишем в
[47:18.680 --> 47:26.840]  виде такой платежной матрицы, значит слева столбец мы пишем это пункты отправления,
[47:26.840 --> 47:37.520]  сколько в каждом пункте производится единиц продукции, первая строка кроме первого столбца это
[47:37.520 --> 47:48.760]  пункты назначения, сколько требуется в каждом пункте назначения единиц продукции, а на пересечении
[47:48.760 --> 47:57.680]  соответствующая цена перевозки, нам скажем c22, это цена перевозки из пункта a22 в пункт b22 единицы
[47:57.680 --> 48:05.960]  продукции, а для составления матрицы плана перевозок мы используем почти такую же таблицу,
[48:05.960 --> 48:18.360]  но по краям такие же значения, а серединочки это то, что мы хотим перевозить, значит это то,
[48:18.360 --> 48:28.160]  что мы планируем перевозить, не оптимальные, а нам уже надо начальную крайнюю точку найти,
[48:28.160 --> 48:36.360]  значит есть разные методы, вот давайте их рассмотрим, первый этот метод северо-западного угла,
[48:36.360 --> 48:46.840]  но я сразу тогда буду на конкретной задачи показывать в чем он состоит, давайте вот как раз эту
[48:46.840 --> 48:57.800]  задачу рассмотрим, ну тогда надо написать, значит тогда удобнее просто здесь написать,
[48:57.800 --> 49:10.080]  вот эта табличка и перерисую, здесь она уже заполнена, я хочу чтобы она была не заполнена,
[49:10.080 --> 49:31.840]  вот здесь пункты отправления, здесь первым 10, вторым 80,
[49:31.840 --> 49:46.280]  последним 20, имеется 4 пункта назначения, первым требуется 40 единиц продукции, во втором 15,
[49:46.280 --> 49:58.480]  в третьем 42 и в последнем 13, замгнутая задача, вот сумма по строке равняется сумму по столцу,
[49:58.480 --> 50:08.480]  здесь 110 и если здесь вы сложите тоже будет 110, значит нам надо вот такой первоначальный план
[50:08.480 --> 50:17.480]  перевоза сформировать, значит первый метод это вот метод северо-западного угла, вот северо-западная
[50:17.480 --> 50:28.920]  точка, это вот самая северная и самая западная, дальше мы смотрим, нам нужно здесь поместить
[50:28.920 --> 50:40.200]  количество груза так чтобы удовлетворить либо производителя, либо потребителя, ну 40 мы не можем,
[50:40.200 --> 50:48.360]  потому что здесь только 10 производится, значит ну вот 10 мы можем написать и тем самым пункт а1 у нас
[50:48.360 --> 50:57.160]  закрыт, дальше мы как бы его вот эту строчку уже вычеркиваем, здесь 10 мы отправили и все,
[50:57.160 --> 51:06.880]  с первого пункта больше ничего не взять и мы переходим теперь к таблице у которой на одну меньше
[51:06.880 --> 51:15.520]  строчки, но если бы здесь было скажем не 45, тогда мы бы 5 отправили и тогда бы зачеркнули
[51:15.520 --> 51:23.800]  первый столбец, ну первый столбец бы был закрыт у нас, если одно и другое то неважно, значит можно
[51:23.800 --> 51:35.240]  любой или строку или столбец вычеркнуть, теперь в оставшейся таблице уже здесь две строки и четыре
[51:35.240 --> 51:51.480]  столбца, мы опять идем вот в этот северо-западный пункт, вот этого тоже и смотрим что здесь мы можем
[51:51.480 --> 52:01.240]  сделать, ну мы можем удовлетворить полностью закрыть первый пункт потребления, потому что осталось
[52:01.240 --> 52:16.560]  у него отправить 30, мы здесь пишем 30 и тем самым первый пункт потребления у нас закрыт, мы удовлетворили
[52:16.560 --> 52:27.640]  его спрос, остается таблица у которой две строки и три столбца, опять идем вот в этот самый северо-западный
[52:27.640 --> 52:38.160]  пункт, значит что мы можем здесь сделать, здесь во втором пункте производства осталось 50, а пункт
[52:38.160 --> 52:50.880]  потребления надо 15, мы можем 15 отправить сюда единиц и закрыть второй пункт потребления, у нас остается
[52:50.880 --> 53:01.040]  таблица два на два, опять идем в северо-западную точку и смотрим, значит во втором пункте производства у нас
[53:01.040 --> 53:11.800]  осталось 80 минус 45, это 35, мы можем его закрыть, этот второй пункт производства, потому что здесь
[53:11.800 --> 53:24.200]  42 единиц надо, значит если мы напишем 35, то тогда мы закроем второй пункт производства и у нас
[53:24.200 --> 53:32.520]  останется таблица из вот этих двух клеточек, но мы опять идем к северо-западную точку, вот она и
[53:32.520 --> 53:47.480]  смотрим, ну здесь 20, здесь осталось 7, если мы напишем 7, то мы закроем и третий пункт потребления и у
[53:47.480 --> 53:57.960]  нас останется 13 единиц в пункте производства третьего и 13 единиц в пункте потребления, задача же
[53:57.960 --> 54:06.080]  замкнутая, поэтому должно остаться столько, сколько требуется, 13, тем самым мы получили вот этот вот
[54:06.080 --> 54:17.960]  первоначальный допустимый план перевоза, 10, сюда 30, сюда 15, 35 и так далее, вот он здесь и
[54:17.960 --> 54:34.160]  это таблица стоимости здесь, а вот этот пункт, вот этот первоначальный план перевозок по методу
[54:34.160 --> 54:43.400]  северо-западного угла, вот он здесь и имеется, видите здесь как раз он, то есть вот допустимая
[54:43.400 --> 54:50.480]  точка, ну можно общую стоимость посчитать, давайте посчитаем, ну мы конечно вот просто из той
[54:50.480 --> 54:59.840]  таблицы стоимости, вот таблица стоимости здесь есть, мы умножаем 2 умножить на 10, 4 на 30, 3 на 15,
[54:59.840 --> 55:09.880]  4 на 35, потому что здесь есть стоимость и все, вот это все здесь написано, получается что 478 единиц,
[55:09.880 --> 55:17.960]  ну рублей там, 478 единиц нам надо, стоимость такого первоначального плана, ну никто не говорит,
[55:17.960 --> 55:26.800]  что он оптимальный, но вот он может даже далеко не оптимальным оказаться, потому что мы не учитывали
[55:26.800 --> 55:38.440]  стоимости перевоза, есть другой способ, который называется минимум по матрице, по матрице стоимости,
[55:38.440 --> 55:52.240]  конечно, значит видите нам нужно здесь минимум по матрице стоимости, значит в чем состоит этот метод,
[55:52.240 --> 56:01.760]  это другой, значит мы смотрим в этой матрице минимальный элемент, где самая дешевая перевозка,
[56:01.760 --> 56:15.240]  ну если там совпадает, то мы выбираем самую маленькую, любую из этих двух самых маленьких,
[56:15.240 --> 56:30.600]  или трех самых, давайте на той же самой табличке попробуем изобразить, вот как будет осуществляться
[56:30.600 --> 56:46.360]  вот этот, вот этот способ, минимум по матрице, для этого мне нужно еще изобразить вот, вот эта
[56:46.360 --> 56:55.120]  матрица стоимости, ну вот здесь удобней, что она есть, значит где же здесь минимум, ну минимум вот здесь,
[56:55.120 --> 57:05.480]  вот, поэтому мы должны как можно больше перевести груза с минимальной стоимости, значит здесь у нас
[57:05.480 --> 57:14.740]  производится 10, а требуется 15, ну больше 10 мы перевести не можем, поэтому мы пишем 10,
[57:14.740 --> 57:24.760]  и тогда закрываем первую строчку, она уже здесь все обслужена, обслужен первый пункт производства,
[57:24.760 --> 57:34.600]  теперь из оставшейся матрицы, вот она оставшаяся, мы смотрим следующее, где следующее минимальное
[57:34.600 --> 57:45.520]  перевозка, ну здесь есть две, вот, вот двоечка и тоже вот двоечка, ну давайте выберем вот скажем вот это вот,
[57:45.520 --> 57:57.920]  здесь мы можем посмотреть, что здесь вот, значит либо эту, либо эту, давайте посмотрим,
[57:57.920 --> 58:05.400]  где мы можем больше написать, ну здесь мы больше пяти не напишем, а вот здесь мы можем 13 написать,
[58:05.400 --> 58:15.880]  поэтому выгоднее, наверное, все-таки вот это, давайте возьмем вот это и отправим 13 единиц из 80 вот в этот пункт,
[58:15.880 --> 58:26.040]  и тем самым его закроем, и тем самым его закроем, теперь осталась вот такая матрица, значит 2 на 3 вот
[58:26.040 --> 58:36.120]  это вот, ну здесь вот этот минимум, вот этот, значит теперь здесь мы можем максимальное, что мы можем сделать,
[58:36.120 --> 58:50.440]  но здесь уже 10 отвезли, поэтому осталось только 5, ну придется значит 5 написать, мы закрыли вот этот
[58:50.440 --> 58:59.960]  второй пункт потребления, осталось 4 клеточки, вот они, 4, 4, 6, 7, значит либо вот это вот, либо вот это вот,
[58:59.960 --> 59:16.960]  здесь можно 42, нет 42, да можно здесь 13, а здесь 40, ну давайте 42 побольше, давайте здесь и отправим 42,
[59:16.960 --> 59:35.800]  и тогда мы закроем третий пункт потребления, ну останется вот эти две, потому что значит выбирать из этих 4 и 6 вот это
[59:35.800 --> 59:46.520]  минимум, давайте посмотрим сколько здесь мы можем отправить, мы уже из второго пункта производства 55 отправили,
[59:46.640 --> 59:58.840]  значит сколько же там остается от 80, отнять 55, 25 что ли остается, значит придется тогда отправить 25 здесь,
[01:00:00.840 --> 01:00:11.040]  и останется последний пункт, но здесь 5 отправлено, и здесь 15 нужно, вот 15, значит вот мы получили такой план перевозок,
[01:00:11.040 --> 01:00:20.560]  вот он здесь написан первоначальный план перевозок, мы учитывали стоимость, но я не уверен что он
[01:00:20.560 --> 01:00:26.720]  получился такой же как у меня в табличке, потому что здесь можно было выбирать, вот как там я выбирал,
[01:00:26.720 --> 01:00:39.040]  сейчас я не знаю, давайте посмотрим, что здесь у нас, минимум по строке,
[01:00:39.040 --> 01:00:49.640]  значит здесь вот как, здесь видите немножко по-другому, 13, значит здесь что-то по-другому,
[01:00:49.640 --> 01:01:04.600]  ну 10-то остается, вот, а потом вот здесь вот 13, это тоже также и было выбрано, а потом что-то другое,
[01:01:04.600 --> 01:01:16.720]  я выбрал что-то другое, вот здесь вот 40, не 42, вот сюда, значит можно было бы 42 сюда отправить,
[01:01:16.720 --> 01:01:26.080]  но почему-то здесь вот выбрано вот это, 40, ну можно посмотреть по стоимости, что там лучше,
[01:01:26.080 --> 01:01:37.080]  что там хуже, ну во всяком случае вот такой вот способ, он называется минимум по,
[01:01:37.080 --> 01:01:48.480]  здесь более подробно написано, значит это минимум по матрице, минимум по матрице стоимости,
[01:01:48.480 --> 01:01:59.280]  ну здесь коротко, минимум по матрице, можно было бы конечно сравнить, но если вот так как я здесь
[01:01:59.280 --> 01:02:09.280]  вот выбирал, то здесь 419 уже стоимость, а там была 478, там получился, минимум,
[01:02:09.280 --> 01:02:17.760]  про начальный план по стоимости она привел к более оптимальной цене, интересно, ну давайте
[01:02:17.760 --> 01:02:23.680]  посчитаем, что здесь получилось, тоже несложно сделать, можно здесь еще лучше, значит вот эта
[01:02:23.680 --> 01:02:34.000]  стоимость, вот она стоимость, давайте посчитаем, значит что у нас получается, здесь вот 10,
[01:02:40.960 --> 01:02:47.440]  дальше, ну я по строкам пойду, 25 на 4 плюс 100,
[01:02:47.440 --> 01:02:51.080]  42,
[01:02:54.520 --> 01:03:00.680]  тоже не 4, 42, не 4, 168,
[01:03:04.320 --> 01:03:10.840]  дальше 13 на 2, 26,
[01:03:10.840 --> 01:03:32.440]  15 на 6, 90 и 5 на 2, 10, вот если не ошибся, по-моему так, значит это 100,
[01:03:32.440 --> 01:03:49.960]  это 268 и еще 226, 36, значит 268 плюс 136,
[01:03:49.960 --> 01:04:01.640]  4, 0, 404, видите, а там у нас, значит здесь еще лучше вот мы сделали, а там у нас,
[01:04:08.120 --> 01:04:13.640]  а там 419, вот так вот я стал выбирать здесь, получилось еще лучше,
[01:04:13.640 --> 01:04:30.320]  ну есть еще несколько планов, давайте их уже сегодня тоже перечислим, есть минимум по строке,
[01:04:30.320 --> 01:04:42.560]  это тоже связано с платежной матрицы, но берется минимум не по, значит заранее на самом деле не
[01:04:42.560 --> 01:04:51.720]  известно какой из них лучше, но берется такой, что вот та же самая платежная матрица,
[01:04:51.720 --> 01:05:04.200]  вот эта платежная матрица, и берется минимум по строке, давайте посмотрим, как он работает,
[01:05:04.200 --> 01:05:18.200]  как этот метод работает, я жалко, что стер там, несложно восстановить, значит 40, 15,
[01:05:18.200 --> 01:05:46.080]  42, 13, 10, 80 и 20, значит вот берется первая строка и минимальное значение единицы,
[01:05:46.080 --> 01:05:55.160]  ну так как и там, значит мы 10 отправляем, и вот эта строка у нас уходит, остается вот эта матрица,
[01:05:55.160 --> 01:06:07.800]  и в ней мы выбираем опять минимальную по строке 2, ну пока идет также как и там, значит здесь тогда 13,
[01:06:07.800 --> 01:06:19.080]  и столбец закрыт, в оставшейся матрице мы опять берем минимум по строке, ну теперь уже получается вот
[01:06:19.080 --> 01:06:29.240]  это вот, что здесь можем сделать, ну вот у нас остается только 5 отправить во второй пункт,
[01:06:29.240 --> 01:06:42.160]  и второй пункт потребления закрыт, остается тогда вот эти 4 элемента, но это матрица,
[01:06:42.160 --> 01:06:50.000]  и минимум по строке, значит либо вот этот, либо вот этот, ну давайте посмотрим, что выгоднее,
[01:06:50.000 --> 01:07:05.840]  выгоднее наверное вот сюда отправить 42, и тогда вот это закроется, теперь остается только вот эти
[01:07:05.840 --> 01:07:13.080]  два элемента, ну и здесь значит по строке только один элемент, поэтому вот сюда вот мы должны
[01:07:13.080 --> 01:07:31.840]  отправлять сколько, значит здесь уже 18 и 42, 60, значит из пункта второго пункта производства мы уже 60
[01:07:31.840 --> 01:07:42.280]  отправили, значит больше 20 мы не можем отправлять, ну и здесь остается 20, вот получается такая матрица,
[01:07:42.280 --> 01:07:49.040]  если эти минимум по строке, если здесь у меня тоже самое, давайте посмотрим, что здесь,
[01:07:49.040 --> 01:08:01.160]  минимум по строке, сколько в этом примере получилось, почему-то минимум по строке,
[01:08:01.160 --> 01:08:12.560]  почему-то другой, 10, 5, а ну там можно было наверное выбирать что-то опять, мы вот так вот сделали,
[01:08:12.560 --> 01:08:26.360]  ну и да, и еще один способ, ну не минимум по строке, а минимум по столцу, значит вот то же самое
[01:08:26.360 --> 01:08:36.560]  происходит, что мы сейчас здесь изображали, но только не по столцу платежной матрицы берется
[01:08:36.560 --> 01:08:45.160]  минимум, а не по строке, а по столцу, а дальше значит вот все то же самое, и здесь по-моему оказалось
[01:08:45.160 --> 01:08:54.000]  самое маленькое, непонятно какой из описанных методов, значит заранее нельзя конечно сказать,
[01:08:54.000 --> 01:09:02.720]  может быть одно, может быть другое, но есть вот 4 метода, это северо-западный угол, минимум по
[01:09:02.720 --> 01:09:11.640]  матрице, минимум по строке и минимум по столцу, как-то так кажется, что минимум по самой матрице
[01:09:11.640 --> 01:09:18.360]  лучше, но здесь вот как раз пример показывает, что здесь минимум по столцу лучше всего получился,
[01:09:18.360 --> 01:09:27.640]  поэтому заранее сказать нельзя, ну вот имеется такое вот утверждение, что любой из записанных
[01:09:27.640 --> 01:09:35.600]  выше методов нахождения первоначального плана перевозок приводит первоначальные крайние точки
[01:09:35.600 --> 01:09:44.040]  множество допустимых элементов, ну надо просто доказать, что те столцы, которые мы выбираем,
[01:09:44.160 --> 01:09:56.120]  а что значит первоначальный план, если вернуться вот к такому общему описанию, вот в виде матрицы,
[01:09:56.120 --> 01:10:11.920]  давайте сейчас вот матрица далеко расположена, вот матрица, значит если вернуться вот к этой
[01:10:11.920 --> 01:10:21.920]  постановке в виде матрицы, электора х, то что значит первоначальный план перевозок, мы указываем здесь
[01:10:21.920 --> 01:10:29.680]  х положительные, остальные у нас нули, просто указываем какие из х мы берем, вот этот первоначальный
[01:10:29.680 --> 01:10:37.800]  план перевозок, с точки зрения крайней точки это означает, что мы выбрав какие-то х положительные,
[01:10:37.800 --> 01:10:46.200]  это все равно, что мы выбрали столцы этой матрицы, что надо показать из тех утверждений, которые мы
[01:10:46.200 --> 01:10:51.800]  доказывали для того, чтобы показать, что мы действительно первоначальный план перевозок
[01:10:51.800 --> 01:11:00.040]  определяет крайнюю точку, надо просто показать, что соответствующие столцы являются линейно
[01:11:00.040 --> 01:11:08.400]  независимыми, что вот те х, которые мы выбираем, по тому или по другому методу из этих, любой из
[01:11:08.400 --> 01:11:15.600]  этих четырех, приводит к начальной крайней точке, надо показать, что любой из этих четырех методов
[01:11:15.600 --> 01:11:25.880]  приводит к таким столцам матрицы, которые линейно независимы, ну давайте вот на следующей лекции,
[01:11:25.880 --> 01:11:33.520]  она у нас последняя будет, вот это вот как раз сделаем, ну и какой-то, так сказать, обзор еще того,
[01:11:33.520 --> 01:11:40.120]  что у нас в расчитанном, а на слогу тогда я остановлюсь, пожалуйста, если какие-то вопросы есть.
