[00:00.000 --> 00:22.080]  Ладно, дать начнем, обсудим, наверное, полные задачи.
[00:22.080 --> 00:44.720]  Ну, поскольку лекция была две недели назад, то я вкратце напомню, что мы там изучали.
[00:44.720 --> 00:48.400]  Значит, надо было понять параллельно сводимость.
[00:48.400 --> 01:13.120]  Значит, А параллельно сводится к Б, если существует параллельно вычислимая f, такая,
[01:13.120 --> 01:29.280]  что x принадлежит А тогда только f от x принадлежит B. Вот, начинал понятие NP-трудность.
[01:29.280 --> 01:51.920]  Значит, NP-трудность означает, что для любого А из NP А сводится к B. Значит, тогда B будет NP-трудная.
[01:51.920 --> 02:21.440]  Вот, и был понятие NP-полноты. NP-полнота это будет NP-трудность плюс равнесть к NP.
[02:21.440 --> 02:31.040]  Значит, мы дальше изучали свойства, что полинарная сводимость транзитивна.
[02:31.040 --> 02:39.760]  Если мы что-то сводим к языку из P, то у нас получается язык из P. Если что-то к языку из NP, то получается язык из NP.
[02:39.760 --> 02:58.320]  Ну и, соответственно, если мы NP-полную задачу куда-нибудь сводим и то, куда мы свили тоже в NP, то будет тоже NP-полная задача.
[02:58.320 --> 03:23.920]  То есть, основной инструмент, это такое утверждение, что если А NP-полная, и А полинарная сводится к B, и B из NP, то тогда B получается NP-полная.
[03:28.320 --> 03:38.320]  Вот, хорошо. Дальше мы обсуждали конкретные задачи.
[03:38.320 --> 03:50.320]  Ну, значит, была задача SAT. Сат от слова it's viable, it's stability problem.
[03:50.320 --> 04:08.320]  Значит, это множество таких phi, где-то были его формулы, и существует x такое, что phi от x равно 1.
[04:08.320 --> 04:22.320]  Значит, вот это вот SAT. И дальше был... есть еще, в частном случае, 3 SAT. 3 SAT это, в общем, аналогично.
[04:22.320 --> 04:40.320]  Да, только phi это формулы формат 3 KNN. Значит, phi 3 KNN такое, что существует x, что phi от x равно 1.
[04:40.320 --> 04:58.320]  Дальше, там еще была пара примеров, как мы сводили 3 раз краску и задачу о клике SAT.
[04:58.320 --> 05:16.320]  Ну, еще есть общая конструкция, как можно свести SAT к 3 SAT. Этого вроде же не обсуждали, да?
[05:16.320 --> 05:32.320]  Хорошо. Ну, идея такая. Смотрите, как вообще устроена формула. Есть какие-то базовые переменные, и дальше они как-то друг с другом комбинируются.
[05:32.320 --> 05:46.320]  Дальше комбинации как-то еще комбинируются, и каждый раз есть какая-то базовая операция, которая комбинирует какие-то уже созданные формулы.
[05:46.320 --> 05:57.320]  Ну, идея стоит в том, что для каждой такой подформулы нужно ввести свою переменную и записать условие, что там все правильно подсчитывается.
[05:57.320 --> 06:21.320]  Кстати, я на примере покажу. Пусть у нас формула phi. Ну, он примерно имеет такой вид. Пусть будет вот f или q, и, скажем неверно, то r влечет s.
[06:21.320 --> 06:37.320]  Значит, ну, вот это такая. Тут, конечно, задача выполнима стрибиально, но я хочу на этом примере показать, как мы, собственно, к 3 KNF переходим.
[06:37.320 --> 06:53.320]  Значит, ну, идея следующая. Значит, что мы для каждой подформулы заводим свою переменную.
[06:53.320 --> 07:07.320]  Значит, например, вот так вот. Знаете, что x это дизюмца по a или q, v это импликация, w отрицание, а x уже вся форма вместе.
[07:07.320 --> 07:23.320]  И тогда получается, что и выполнима, и выполнима тогда и только тогда, когда совместно вот такая система.
[07:23.320 --> 07:49.320]  Значит, u равно p или q, v равно r влечет s, w равно не v, и x равно u и w. Еще x отдельно.
[07:49.320 --> 07:59.320]  Значит, когда вот у такой системы есть решение, когда такая система тоже выполнима.
[07:59.320 --> 08:05.320]  Сейчас пока еще не 3 KNF, давайте обсудим, почему вот эта часть верна.
[08:05.320 --> 08:15.320]  Ну, смотрите, что значит, что phi выполнима. Значит, есть выполняющий набор, то есть такие были вы значения, что вся форма истина.
[08:15.320 --> 08:21.320]  Тогда, соответственно, для каждой вот этой вот новой буквы можно посчитать, чему она будет равна.
[08:21.320 --> 08:25.320]  И при этом вот этот x итоговый будет равен единицам.
[08:25.320 --> 08:29.320]  Ну, тогда если мы эти значения вот сюда подставим, то соответственно они все будут верны.
[08:29.320 --> 08:34.320]  И в итоге, поскольку их все равно единицам, то это тоже будет верно.
[08:34.320 --> 08:42.320]  Вот. Ну, от другой стороны, если форма не выполнима, то есть там какие значения поставить всегда будет 0, то и сюда тоже.
[08:42.320 --> 08:48.320]  Значит, либо какой-то из этих равенц неправильно посчитано, либо они все посчитаны правильно, тогда тут будет 0.
[08:48.320 --> 08:51.320]  И тогда они все сразу выполнены быть не могут.
[08:51.320 --> 09:13.320]  Ну, а дальше, дальше, на самом деле, вот эта вот система, система это и означает конъюнцы вот этих всех условий.
[09:13.320 --> 09:24.320]  Вот. А 3kNF получается, потому что можно просто каждую вот эту вот форму привести к формату 3kNF.
[09:24.320 --> 09:32.320]  Например, значит, u равно p или q.
[09:32.320 --> 09:40.320]  Ну, можно, в принципе, абстрактно сказать, что, ну, это же тоже, ну, здесь вот эта вот равенство понимается как эквиваленция.
[09:40.320 --> 10:03.320]  У нас, соответственно, можно сказать, что вот это вот все вместе, как выражение, истинное или ложное, это функция трех болевых переменных.
[10:03.320 --> 10:09.320]  Ну, а любую болевую форму, любую болевую функцию можно привести к 3kNF.
[10:09.320 --> 10:15.320]  Ну, в смысле, просто кkNF. Вот. Ну, поскольку здесь всего 3 переменных, то это получается 3kNF.
[10:15.320 --> 10:22.320]  Вот. Можно так абстрактно сказать, а может прям конкретно написать.
[10:22.320 --> 10:36.320]  Тут, наверное, вот так вот будет, значит, u или...
[10:36.320 --> 10:50.320]  Наверное, вот так вот, u или не p.
[10:50.320 --> 10:58.320]  Это значит, что если p, ну, такая вот конструкция, это же импликация, что из p следует u.
[10:58.320 --> 11:02.320]  То есть, если p верно, тогда здесь у нас тоже верно.
[11:02.320 --> 11:07.320]  Второй вариант это u или не q.
[11:07.320 --> 11:17.320]  И третий вариант это не u или p или q.
[11:17.320 --> 11:22.320]  Ну, он, собственно, означает, что, на самом деле, вот это означает, что из u следует p или q.
[11:22.320 --> 11:29.320]  А вот эти вот две штуки означают, что из p следует u и из q следует u.
[11:29.320 --> 11:39.320]  Вот.
[11:39.320 --> 11:46.320]  Ну, вот.
[11:46.320 --> 11:50.320]  Обязательно, вот это вот 3kNF получается.
[11:50.320 --> 12:01.320]  Ну и со всеми остальными функции точно так же, да, можно поупражняться, какие именно формы будут получаться.
[12:01.320 --> 12:09.320]  Так.
[12:09.320 --> 12:12.320]  Какие-нибудь вопросы?
[12:12.320 --> 12:16.320]  Хороший вопрос. Да, вот и правильный вопрос. Почему это переномеально?
[12:16.320 --> 12:24.320]  Ну, это, на самом деле, вопрос про то, почему существуют синтезические разборы, почему он быстро делается.
[12:24.320 --> 12:39.320]  Ну, я не буду вдаваться в детали, но в целом, это содержание каких-то курсов по синтезическому разбору математических выражений или программ.
[12:39.320 --> 12:49.320]  Да, в общем, там это делается. Ну, можно прямо попробовать программу написать, да, что, ну, тут какая-то баланс с кубок.
[12:49.320 --> 13:00.320]  Да, мы идем, вот эта кубка открылась, дальше мы рекурсивно этот разбор применяем, пока эта кубка не закроется, и это у нас будет там первая часть.
[13:00.320 --> 13:11.320]  То есть, на самом деле, нужно что сделать? Нужно вот из формулы сделать дерево, а потом из дерева написать эти все равенства, ну, а потом из равенства сделать уже КНН.
[13:11.320 --> 13:32.320]  Ну, третья часть вполне совсем понятна, да, потому что мы просто, ну, мы просто как бы говорим, что тут вот небольшое число функций, мы их переделываем вот так вот.
[13:32.320 --> 13:46.320]  Третья часть совсем понятна, по дереву более-менее тоже понятна, что мы дерево обходим вверх-вниз, слева-направо, и в каждой нетерминальной вершине пишем такое равенство.
[13:46.320 --> 13:51.320]  И плюс добавляем еще отдельного для, ну, для корня.
[13:51.320 --> 14:03.320]  Ну, а как строить дерево, ну, это по идее учит там в каких-то курсах по структурам данных там или чего-нибудь.
[14:03.320 --> 14:21.320]  Ну, и главное, там это по идее, это даже можно делать в один проход по формуле, что мы как бы идем, идем слева-направо по формуле и постепенно также слева-направо строим дерево.
[14:21.320 --> 14:25.320]  Ну, а в один проход это уж точно быстро.
[14:34.320 --> 14:45.320]  И нет, а потом, ну, можно вот эту систему заменить на конъюнцию всех вот таких вот подформул, и получится одна большая форма.
[14:49.320 --> 14:52.320]  Ну, может просто проверить.
[14:52.320 --> 14:59.320]  Вот во нет, логика тут такая, что вот в этой скобке логический смысл, что из u следует p или q.
[15:00.320 --> 15:04.320]  Да, вот эту вот равенство означает, если в одну сторону и в другую.
[15:04.320 --> 15:11.320]  То есть, вот это значит что из u следует p или q, это значит, что из p следует u и это значит, что из q следует u.
[15:16.320 --> 15:19.320]  Но, соответственно, из p или q тоже следует u.
[15:22.320 --> 15:42.820]  Ну, если нужно, чтобы в каждой скобке было ровно три, то это можно сделать за счет каких-то дополнительных переменных.
[15:42.820 --> 15:54.820]  Тут можно дописать или Q, или не Q, а здесь или P, а или не P уже получилось.
[15:54.820 --> 15:59.820]  Так будет больше скобок, но и из трех.
[15:59.820 --> 16:17.820]  Смотрите, если два KNF, два SAT уже будут лежать в P.
[16:17.820 --> 16:23.820]  А если больше трех, то, конечно, тоже будет NP полное.
[16:23.820 --> 16:37.820]  В некоторых приложениях будет важно, что именно три в каждой скобке, а не то, что не больше трех.
[16:53.820 --> 17:14.820]  Давайте обсудим, почему два SAT лежат в P. Это нам все равно потом пригодится, и довольно красиво по себе.
[17:14.820 --> 17:34.820]  Смотрите, если у нас есть какая-то кобка с двумя литералами, то она, на самом деле, равносильна двум импликациям.
[17:34.820 --> 17:46.820]  Это равносильно тому, что из не P следует Q, и также это равносильно тому, что из не Q следует P.
[17:46.820 --> 17:52.820]  Ну и с другими точно так же.
[17:52.820 --> 18:11.820]  Если будет не R или S, значит это равносильно тому, что из R следует S, и с другой стороны это равносильно тому, что из не S следует не R.
[18:11.820 --> 18:19.820]  Ну и так далее. Собственно, остается вариант с двумя отрицаниями, он тоже аналогично делается.
[18:19.820 --> 18:32.820]  И тогда получается, что если есть такая три KNF, то можно по ней построить некий граф.
[18:32.820 --> 18:51.820]  В этом графе для каждой переменной будут две вершины с этой переменной отрицанием.
[18:51.820 --> 18:58.820]  Ну и, например, можно вот такую рассмотреть.
[18:58.820 --> 19:06.820]  Значит, не P или Q.
[19:06.820 --> 19:20.820]  И, например, не Q или не R.
[19:20.820 --> 19:39.820]  И, соответственно, не P или R.
[19:39.820 --> 19:49.820]  Так, и тогда смотрите, что получается. Не P или Q. Это вот тут получается из P, из P следует Q. Значит, из не Q следует P.
[19:49.820 --> 19:55.820]  А каждую из импликаций буду рисовать как стрелочку. Вот в этом графе.
[19:55.820 --> 19:59.820]  Значит, из P следует Q, из не Q следует не P.
[19:59.820 --> 20:08.820]  Значит, это получается из Q, из Q следует не R. Значит, из R, соответственно, следует не Q.
[20:08.820 --> 20:15.820]  Такая симметричная штука.
[20:15.820 --> 20:28.820]  Дальше получается из P следует R. Значит, из не R следует не P.
[20:28.820 --> 20:39.820]  Вот, и получается, смотрите, что если мы пройдем, пройдем вот так вот.
[20:39.820 --> 20:43.820]  Да, значит, можно применять правильность логизма.
[20:43.820 --> 20:48.820]  Из P следует R, из R следует не Q, а из не Q следует не P.
[20:48.820 --> 20:52.820]  И в итоге получить, что из P следует не P.
[20:52.820 --> 20:56.820]  Значит, из P следует не P.
[20:56.820 --> 21:04.820]  Вот, и тогда это будет означать, что может быть только весь 0, а весь 1.
[21:04.820 --> 21:11.820]  Потому что только из нуля может следовать единица, а из единицы 0 не может следовать.
[21:11.820 --> 21:14.820]  Вот.
[21:14.820 --> 21:19.820]  Но если получишь, что есть два пути, из P в не P и из не P в P.
[21:19.820 --> 21:22.820]  Или какой-то переменный.
[21:22.820 --> 21:32.820]  Значит, если есть два пути,
[21:32.820 --> 21:35.820]  из, соответственно, P,
[21:35.820 --> 21:46.820]  или какой-то переменный, для P, да, из P в не P и из не P в P,
[21:46.820 --> 21:51.820]  то, соответственно, формула просто будет не выполнена.
[21:51.820 --> 21:54.820]  Ну что, формула.
[22:00.820 --> 22:03.820]  Формула не выполнена.
[22:17.820 --> 22:20.820]  Вот. Ну, на самом деле, это критерий.
[22:20.820 --> 22:24.820]  Значит, то есть вот в эту сторону это довольно понятно.
[22:24.820 --> 22:28.820]  Да, потому что тогда сразу должно быть и вот так вот, и наоборот.
[22:28.820 --> 22:31.820]  Да, так не может быть.
[22:31.820 --> 22:33.820]  Вот.
[22:33.820 --> 22:35.820]  Ну, на самом деле, верная и в обратную сторону.
[22:35.820 --> 22:39.820]  То есть, если таких путей нет, то она выполнена.
[22:42.820 --> 22:45.820]  Верная и обратная.
[22:47.820 --> 22:56.820]  Вот, значит, наверное, дать я полностью доказать не буду рассказывать.
[22:56.820 --> 22:59.820]  Да, значит, может подумать сами.
[22:59.820 --> 23:11.820]  Там есть несколько разных подходов.
[23:11.820 --> 23:14.820]  Ну, например, можно подходить так.
[23:14.820 --> 23:20.820]  То, рассмотрим все переменные по очереди.
[23:20.820 --> 23:26.820]  Вот, если нет вообще ни одного пути, да, не такого пути, не такого пути,
[23:26.820 --> 23:30.820]  то тогда каким-нибудь произвольным образом,
[23:30.820 --> 23:37.820]  каким-нибудь произвольным образом определяем назначение переменной.
[23:37.820 --> 23:42.820]  Вот, но после этого, значит, например,
[23:42.820 --> 23:48.820]  ну, например, вот это говорит, что P должно быть равном нулю.
[23:48.820 --> 23:52.820]  Ну, например, чему это равно R и Q?
[23:52.820 --> 23:54.820]  Да, это ничего не понятно.
[23:54.820 --> 23:59.820]  Например, мы можем сказать, что будет Q равно единице.
[23:59.820 --> 24:03.820]  Да, Q равно единице, тогда R должно быть равно нулю.
[24:03.820 --> 24:08.820]  Да, то есть, получается, что если мы поставим перемен какое-то заточение,
[24:08.820 --> 24:11.820]  то из двух литералов будет один истинный.
[24:11.820 --> 24:14.820]  И из него какими-то путями,
[24:14.820 --> 24:18.820]  на какими-то путями можно прийти.
[24:18.820 --> 24:25.820]  Соответственно, тоже куда-то и то, куда придем, будет равно единице.
[24:25.820 --> 24:29.820]  Вот.
[24:29.820 --> 24:33.820]  Ну вот, а если, соответственно, для очередной переменной,
[24:33.820 --> 24:36.820]  для очередной переменной есть какой-нибудь такой вот путь,
[24:36.820 --> 24:40.820]  то и значение тоже автоматически получается.
[24:40.820 --> 24:44.820]  Дальше нужно аккуратно доказать, что это все сойдется друг к другу.
[24:44.820 --> 24:49.820]  То есть, например, и тут как раз нужно использовать,
[24:49.820 --> 24:53.820]  что все эти ребра, они такие парами идут.
[24:53.820 --> 25:01.820]  Например, это же верно не только для просто ребр, но и для путей.
[25:01.820 --> 25:05.820]  То есть, есть путь из R вне P.
[25:05.820 --> 25:07.820]  Вот так, раз-два.
[25:07.820 --> 25:12.820]  То есть, вы двойственно ему из P в R.
[25:12.820 --> 25:14.820]  Вот.
[25:20.820 --> 25:22.820]  Так.
[25:37.820 --> 25:39.820]  Хорошо.
[25:43.820 --> 25:47.820]  Дальше, давайте я это оставлю как-то в упражнении для семинара.
[25:47.820 --> 25:53.820]  Дальше есть ключевая теорема Кукулевина.
[25:54.820 --> 25:59.820]  Теорема Кукулевина, которая стоит в том,
[25:59.820 --> 26:03.820]  что задача SAT.
[26:03.820 --> 26:05.820]  Ну и как следствие задача 3 SAT.
[26:05.820 --> 26:07.820]  NP полное.
[26:07.820 --> 26:09.820]  Ну вот.
[26:09.820 --> 26:11.820]  Ну вот.
[26:11.820 --> 26:13.820]  Ну вот.
[26:13.820 --> 26:15.820]  Ну вот.
[26:15.820 --> 26:17.820]  Ну вот.
[26:17.820 --> 26:19.820]  Ну вот.
[26:19.820 --> 26:21.820]  Ну вот.
[26:21.820 --> 26:23.820]  НП полное.
[26:29.820 --> 26:31.820]  НП полна.
[26:33.900 --> 26:37.140]  На самом деле, прям к САТ-у так не...
[26:39.900 --> 26:41.900]  Ну, должна быть некоторая довольно сложная конструкция.
[26:42.900 --> 26:44.900]  Да, и для начала
[26:44.980 --> 26:48.060]  можно поговорить не про САТ, а про то, что называется
[26:49.580 --> 26:51.580]  генерическая НП полная задача.
[26:51.820 --> 26:53.820]  Генерическая НП полная задача.
[27:09.820 --> 27:11.820]  Значит, она обычно означает ТМСАТ.
[27:15.820 --> 27:17.820]  ТМСАТ равняется
[27:21.820 --> 27:23.820]  множеству
[27:23.820 --> 27:25.820]  и строек.
[27:25.820 --> 27:27.820]  Значит, и строек
[27:27.820 --> 27:29.820]  машина,
[27:29.820 --> 27:31.820]  вход
[27:31.820 --> 27:33.820]  и число в унарной записи.
[27:35.820 --> 27:37.820]  Значит, машина,
[27:37.820 --> 27:39.820]  вход Х и число в унарной записи.
[27:43.820 --> 27:45.820]  Такие, что
[27:47.820 --> 27:49.820]  существует Y
[27:51.820 --> 27:53.820]  то М от XY
[27:53.820 --> 27:55.820]  равно единице
[27:57.820 --> 27:59.820]  и М от XY
[27:59.820 --> 28:01.820]  останавливается
[28:05.820 --> 28:07.820]  на не более чем Т шагу.
[28:21.820 --> 28:23.820]  Вот.
[28:27.820 --> 28:29.820]  Значит, соответственно,
[28:29.820 --> 28:31.820]  про нее нужно доказать
[28:31.820 --> 28:33.820]  во-первых,
[28:33.820 --> 28:35.820]  что она из-за НП
[28:35.820 --> 28:37.820]  и во-вторых,
[28:37.820 --> 28:39.820]  значит, во-вторых,
[28:39.820 --> 28:41.820]  что она НП трудная.
[28:41.820 --> 28:43.820]  Любая к ней сводится.
[28:43.820 --> 28:45.820]  Ну, и на самом деле
[28:47.820 --> 28:49.820]  тут может возникнуть вопрос
[28:49.820 --> 28:51.820]  зачем нужно Т
[28:51.820 --> 28:53.820]  еще и в унарной записи.
[28:55.820 --> 28:57.820]  Вот.
[28:57.820 --> 28:59.820]  Ну, вообще Т нужно
[28:59.820 --> 29:01.820]  чтобы это была хотя бы разрешимая задача.
[29:03.820 --> 29:05.820]  А вот
[29:05.820 --> 29:07.820]  в унарной записи нужна как раз
[29:07.820 --> 29:09.820]  чтобы это лежало в НП.
[29:09.820 --> 29:11.820]  Значит, принадлежность
[29:11.820 --> 29:13.820]  принадлежность к НП
[29:13.820 --> 29:15.820]  берется
[29:17.820 --> 29:19.820]  вот из чего.
[29:21.820 --> 29:23.820]  То
[29:23.820 --> 29:25.820]  ну, просто вот это все
[29:25.820 --> 29:27.820]  можно проверить
[29:27.820 --> 29:29.820]  как раз за полинома длины входа.
[29:31.820 --> 29:33.820]  Это все
[29:33.820 --> 29:35.820]  мы можем проверить
[29:35.820 --> 29:37.820]  как раз за полинома длины входа.
[29:39.820 --> 29:41.820]  Ну, потому что моделирование
[29:41.820 --> 29:43.820]  ну, моделирование на Т шагов
[29:43.820 --> 29:45.820]  занимает как раз порядка времени Т.
[29:47.820 --> 29:49.820]  Ну, как именно порядка
[29:49.820 --> 29:51.820]  зависит от деталей моделя.
[29:53.820 --> 29:55.820]  Вот.
[29:55.820 --> 29:57.820]  Ну, в общем, в любом случае получается,
[29:57.820 --> 29:59.820]  что моделирование
[29:59.820 --> 30:01.820]  моделирование на Т шагов
[30:01.820 --> 30:03.820]  моделирование на Т шагов
[30:11.820 --> 30:13.820]  занимает
[30:13.820 --> 30:15.820]  время порядка Т.
[30:31.820 --> 30:33.820]  Ну, да.
[30:41.820 --> 30:43.820]  А вот как раз чтобы
[30:43.820 --> 30:45.820]  потому что время
[30:45.820 --> 30:47.820]  именно порядка Т.
[30:49.820 --> 30:51.820]  А, 1 степень T
[30:51.820 --> 30:53.820]  означает 1 из подряд.
[30:57.820 --> 30:59.820]  Ну, нет,
[30:59.820 --> 31:01.820]  а среди кадров скорее будет Y.
[31:01.820 --> 31:03.820]  А это как раз часть входа.
[31:07.820 --> 31:09.820]  Да, значит
[31:09.820 --> 31:11.820]  вот это я как раз объясняю, что нужно
[31:11.820 --> 31:13.820]  смотрите, если мы
[31:13.820 --> 31:15.820]  просто T напишем,
[31:15.820 --> 31:17.820]  то это даст потребовать
[31:17.820 --> 31:19.820]  логарифма T обитов.
[31:19.820 --> 31:21.820]  И тогда будет общая длина
[31:21.820 --> 31:23.820]  будет как раз там
[31:23.820 --> 31:25.820]  N плюс логарифм T.
[31:25.820 --> 31:27.820]  И тогда получается,
[31:27.820 --> 31:29.820]  что T может быть экспоненциальным,
[31:29.820 --> 31:31.820]  чтобы, тем не менее,
[31:31.820 --> 31:33.820]  битов на запись T
[31:33.820 --> 31:35.820]  тратилось бы по полиномиальное число.
[31:37.820 --> 31:39.820]  Но тогда будет не то, что мы хотим.
[31:39.820 --> 31:41.820]  Тогда мы не сможем проверить,
[31:41.820 --> 31:43.820]  что за такое экспоненциальное время оно действительно становится.
[31:45.820 --> 31:47.820]  И чтобы, соответственно,
[31:47.820 --> 31:49.820]  время, которое нам нужно
[31:49.820 --> 31:51.820]  было полиномом
[31:51.820 --> 31:53.820]  от суммарной длины записи,
[31:53.820 --> 31:55.820]  нужна такая унарная запись
[31:55.820 --> 31:57.820]  из одних единиц.
[31:59.820 --> 32:01.820]  Вот.
[32:03.820 --> 32:05.820]  Да, конечно.
[32:05.820 --> 32:07.820]  Да, это вот про все.
[32:11.820 --> 32:13.820]  Да, да, да, да.
[32:15.820 --> 32:17.820]  Да, может быть такое.
[32:19.820 --> 32:21.820]  Вот.
[32:23.820 --> 32:25.820]  Ну, а вторая часть НП-трудность
[32:27.820 --> 32:29.820]  она почти очевидная.
[32:29.820 --> 32:31.820]  Значит, пусть у нас
[32:31.820 --> 32:33.820]  А лежит в НП.
[32:35.820 --> 32:37.820]  А лежит в НП.
[32:37.820 --> 32:39.820]  И как раз
[32:39.820 --> 32:41.820]  Х лежит в А.
[32:41.820 --> 32:43.820]  Тогда и только тогда,
[32:43.820 --> 32:45.820]  когда существует Y,
[32:45.820 --> 32:47.820]  что
[32:47.820 --> 32:49.820]  M
[32:49.820 --> 32:51.820]  от XY
[32:51.820 --> 32:53.820]  равно единице.
[32:53.820 --> 32:55.820]  И, соответственно,
[32:55.820 --> 32:57.820]  это работает
[32:57.820 --> 32:59.820]  за меньше либо равно,
[32:59.820 --> 33:01.820]  чем какой-то полином.
[33:01.820 --> 33:03.820]  Иначе МП
[33:03.820 --> 33:05.820]  от N шагов.
[33:09.820 --> 33:11.820]  Вот.
[33:21.820 --> 33:23.820]  Вот.
[33:23.820 --> 33:25.820]  Ну, это получается, что просто нужно
[33:25.820 --> 33:27.820]  Х
[33:27.820 --> 33:29.820]  отобразить в тройку
[33:29.820 --> 33:31.820]  как раз из М
[33:31.820 --> 33:33.820]  Х
[33:33.820 --> 33:35.820]  единиц,
[33:35.820 --> 33:37.820]  которая NП от длины Х раз.
[33:43.820 --> 33:45.820]  Вот.
[33:45.820 --> 33:47.820]  Значит, соответственно,
[33:47.820 --> 33:49.820]  вот эта тройка
[33:51.820 --> 33:53.820]  и эту тройку, конечно,
[33:53.820 --> 33:55.820]  по Иксу можно довольно быстро
[33:55.820 --> 33:57.820]  написать.
[33:57.820 --> 33:59.820]  Ну, вот. Ну, а весь получается
[33:59.820 --> 34:01.820]  ровно то, что написано.
[34:05.820 --> 34:07.820]  Ладно, давайте сделаем
[34:07.820 --> 34:09.820]  перерыв на 5 минут.
[34:11.820 --> 34:13.820]  Значит, вот теория
[34:13.820 --> 34:15.820]  МП Клевина.
[34:17.820 --> 34:19.820]  Значит, ну, чтобы
[34:19.820 --> 34:21.820]  ее доказывать,
[34:21.820 --> 34:23.820]  нужно так или иначе
[34:23.820 --> 34:25.820]  залезть в какие-то
[34:25.820 --> 34:27.820]  детали
[34:27.820 --> 34:29.820]  модели.
[34:31.820 --> 34:33.820]  Да, значит, нужно что-то говорить про машину тюринга.
[34:35.820 --> 34:37.820]  Значит, ну, и мы будем считать.
[34:45.820 --> 34:47.820]  Будем вот так вот записывать.
[34:49.820 --> 34:51.820]  Вот.
[35:05.820 --> 35:07.820]  Вот, значит, есть Х.
[35:09.820 --> 35:11.820]  Потом,
[35:11.820 --> 35:13.820]  например, вот так, такой
[35:13.820 --> 35:15.820]  пробельный символ,
[35:15.820 --> 35:17.820]  бланк, будет отделять
[35:17.820 --> 35:19.820]  Х от
[35:19.820 --> 35:21.820]  Y.
[35:21.820 --> 35:23.820]  Ну, и потом еще
[35:23.820 --> 35:25.820]  все остальное
[35:25.820 --> 35:27.820]  будет заполнено
[35:27.820 --> 35:29.820]  тоже бланками.
[35:29.820 --> 35:31.820]  Тут я для простоты предполагаю, что у нас
[35:31.820 --> 35:33.820]  одна лента у машины.
[35:33.820 --> 35:35.820]  Соответственно, у этой одной ленты
[35:35.820 --> 35:37.820]  написан Х,
[35:37.820 --> 35:39.820]  потом пробел, потом Y,
[35:39.820 --> 35:41.820]  потом сплошные пробелы.
[35:43.820 --> 35:45.820]  Соответственно, после этого
[35:45.820 --> 35:47.820]  еще нужно
[35:47.820 --> 35:49.820]  состояние написать.
[35:49.820 --> 35:51.820]  На Q1.
[35:53.820 --> 35:55.820]  Значит, Q1 состояние.
[35:57.820 --> 35:59.820]  Вот, значит, соответственно, после этого
[36:03.820 --> 36:05.820]  мы просто запускаем
[36:07.820 --> 36:09.820]  запускаем машину и так далее.
[36:09.820 --> 36:11.820]  И будем считать, что у нас
[36:11.820 --> 36:13.820]  в каждой строчке
[36:13.820 --> 36:15.820]  написана конфигурация.
[36:15.820 --> 36:17.820]  Любая конфигурация имеет
[36:17.820 --> 36:19.820]  вид
[36:19.820 --> 36:21.820]  вот такой вот.
[36:21.820 --> 36:23.820]  Значит, A, Q.
[36:23.820 --> 36:25.820]  Маленькая B.
[36:27.820 --> 36:29.820]  Здесь A
[36:29.820 --> 36:31.820]  и B большое.
[36:31.820 --> 36:33.820]  Это слова
[36:33.820 --> 36:35.820]  какие-то. Значит, Q
[36:35.820 --> 36:37.820]  какое-то состояние.
[36:37.820 --> 36:39.820]  Вот.
[36:39.820 --> 36:41.820]  Значит, Q какое-то состояние, A какое-то символ.
[36:45.820 --> 36:47.820]  Вот. Соответственно,
[36:47.820 --> 36:49.820]  подразумевается, что вот такая
[36:49.820 --> 36:51.820]  запись означает, что вот есть лента.
[36:51.820 --> 36:53.820]  Значит, вот есть
[36:55.820 --> 36:57.820]  символ A. Значит, есть соответственно
[36:57.820 --> 36:59.820]  символ B.
[36:59.820 --> 37:01.820]  Вот. И соответственно, машина
[37:01.820 --> 37:03.820]  находится в состоянии Q
[37:03.820 --> 37:05.820]  и указывает
[37:05.820 --> 37:07.820]  вот на этот символ A.
[37:07.820 --> 37:09.820]  Слева от него написано A большое,
[37:09.820 --> 37:11.820]  справа от него B большое.
[37:11.820 --> 37:13.820]  Вот. И вот эти конфигурации, они
[37:13.820 --> 37:15.820]  друг за другом так
[37:15.820 --> 37:17.820]  записываются.
[37:25.820 --> 37:27.820]  Вот.
[37:27.820 --> 37:29.820]  Ну, а здесь, соответственно, где-то
[37:29.820 --> 37:31.820]  в конце есть
[37:31.820 --> 37:33.820]  принимаешь состояние
[37:33.820 --> 37:35.820]  Q accent.
[37:37.820 --> 37:39.820]  Ну, решетки
[37:39.820 --> 37:41.820]  это просто пустые клетки, можно считать.
[37:41.820 --> 37:43.820]  Решетка, она и похожа
[37:43.820 --> 37:45.820]  на пустую клетку.
[37:45.820 --> 37:47.820]  Ну да.
[37:49.820 --> 37:51.820]  Вот.
[37:51.820 --> 37:53.820]  Значит, дальше, какая тут основная
[37:53.820 --> 37:55.820]  идея.
[37:55.820 --> 37:57.820]  На самом деле,
[37:57.820 --> 37:59.820]  символ, который
[37:59.820 --> 38:01.820]  написан в клетке,
[38:01.820 --> 38:03.820]  зависит
[38:03.820 --> 38:05.820]  только от
[38:05.820 --> 38:07.820]  четырех
[38:07.820 --> 38:09.820]  символов.
[38:11.820 --> 38:13.820]  Значит, только от четырех символов
[38:13.820 --> 38:15.820]  над ним.
[38:17.820 --> 38:19.820]  Значит, почему
[38:19.820 --> 38:21.820]  от четырех, почему так несимметрично?
[38:21.820 --> 38:23.820]  Ну, несимметрично это потому,
[38:23.820 --> 38:25.820]  что мы именно вот так записываем.
[38:25.820 --> 38:27.820]  То есть, тот символ
[38:27.820 --> 38:29.820]  под символы,
[38:29.820 --> 38:31.820]  который указывает головка,
[38:31.820 --> 38:33.820]  он записывается после,
[38:33.820 --> 38:35.820]  соответственно, символа состояния.
[38:35.820 --> 38:37.820]  Вот.
[38:37.820 --> 38:39.820]  Ну и там получается, что если вот среди этих
[38:39.820 --> 38:41.820]  четырех вообще нету символа
[38:41.820 --> 38:43.820]  состояния,
[38:43.820 --> 38:45.820]  то тогда тут просто копируется сверху.
[38:47.820 --> 38:49.820]  Вот. И даже если здесь символ состояния,
[38:49.820 --> 38:51.820]  то тоже просто копируется
[38:51.820 --> 38:53.820]  сверху.
[38:55.820 --> 38:57.820]  Ну, это вот,
[38:57.820 --> 38:59.820]  это на ленте все написано.
[38:59.820 --> 39:01.820]  Но, опять же, вот как здесь,
[39:01.820 --> 39:03.820]  мы записываем именно вот так.
[39:03.820 --> 39:05.820]  То есть, тут все, что на ленте, плюс состояние.
[39:05.820 --> 39:07.820]  Да, да, да, да.
[39:07.820 --> 39:09.820]  Я сказал, одноленочная машина.
[39:13.820 --> 39:15.820]  Так это разные этапы.
[39:17.820 --> 39:19.820]  То есть, тут...
[39:19.820 --> 39:21.820]  Ну, типа того, да, да, да.
[39:21.820 --> 39:23.820]  Да, после конфигурации.
[39:23.820 --> 39:25.820]  Ну, ветка в том смысле, что Y в начале выбрано.
[39:25.820 --> 39:27.820]  Y в начале выбрано,
[39:27.820 --> 39:29.820]  а остальное уже
[39:29.820 --> 39:31.820]  идет как идет.
[39:39.820 --> 39:41.820]  Погодите.
[39:41.820 --> 39:43.820]  Значит, я хочу сказать следующее,
[39:43.820 --> 39:45.820]  что тут вот, в каждой строчке
[39:45.820 --> 39:47.820]  написано.
[39:47.820 --> 39:49.820]  Я хочу сказать, что вот,
[39:49.820 --> 39:51.820]  что будет написано в этой клетке,
[39:51.820 --> 39:53.820]  зависит только от четырех клеток
[39:53.820 --> 39:55.820]  на дней, которые вот так расположены.
[39:55.820 --> 39:57.820]  Вот. Если есть тут состояние
[39:57.820 --> 39:59.820]  вообще нет, или если оно вот здесь,
[39:59.820 --> 40:01.820]  вот тогда тут просто копируется сверху.
[40:01.820 --> 40:03.820]  Вот. А дальше, ну, соответственно,
[40:03.820 --> 40:05.820]  есть команды.
[40:05.820 --> 40:07.820]  Например, если состояние вот здесь вот,
[40:07.820 --> 40:09.820]  если состояние вот здесь вот,
[40:09.820 --> 40:11.820]  и, соответственно,
[40:11.820 --> 40:13.820]  тут какой-то символ.
[40:13.820 --> 40:15.820]  Вот дальше, что будет здесь,
[40:15.820 --> 40:17.820]  соответственно, того что машина делает,
[40:17.820 --> 40:19.820]  когда она вот в таком состоянии
[40:19.820 --> 40:21.820]  смотрит на такой символ.
[40:21.820 --> 40:23.820]  Значит, что она может делать?
[40:23.820 --> 40:25.820]  Она может этот символ
[40:25.820 --> 40:27.820]  куда-то заменить
[40:27.820 --> 40:29.820]  и сдвинуться налево, например.
[40:29.820 --> 40:31.820]  Тогда здесь будут то,
[40:31.820 --> 40:33.820]  на что она заменит.
[40:33.820 --> 40:35.820]  Она может на что-то заменить
[40:35.820 --> 40:37.820]  и сдвинуться направо.
[40:37.820 --> 40:39.820]  Если она сдвинется направо, тогда то,
[40:39.820 --> 40:41.820]  на что мы заменили, будет вот здесь вот,
[40:41.820 --> 40:43.820]  а здесь будут на вот состоянии.
[40:43.820 --> 40:49.700]  Ну вот, в любом случае, это вот этим двумя определяются.
[40:49.700 --> 40:52.340]  Ну и также нам нужна вот эта клетка, потому что может
[40:52.340 --> 40:59.820]  быть так, что на самом деле вот здесь вот символ состояния,
[40:59.820 --> 41:13.020]  здесь символ алфавита, и это такой символ, при котором
[41:13.020 --> 41:17.020]  куст двигается налево, а если будет другой символ,
[41:17.020 --> 41:19.620]  то он не будет двигаться налево.
[41:19.620 --> 41:24.060]  Значит, если двигаться налево, то тут будет новое
[41:24.060 --> 41:28.380]  состояние, а если не двигаться налево, то будет тот же символ,
[41:28.380 --> 41:29.380]  который вот здесь вот.
[41:29.380 --> 41:30.380]  Ну вот, поэтому то, что вот здесь вот тоже влияет на
[41:30.380 --> 41:31.380]  то, что будет вот здесь вот.
[41:31.380 --> 41:37.260]  Слава какие-то, да.
[41:37.260 --> 41:42.820]  Да, мы доказали куклу Левина.
[41:42.820 --> 41:51.820]  Сейчас-то еще нет никакой формулы, значит, я объясняю, что происходит, но дальше уже очень близко к формуле.
[41:52.820 --> 41:56.820]  А и Б – это то, что дофинство происходит в родине, да?
[41:56.820 --> 41:58.820]  Ну да.
[42:00.820 --> 42:02.820]  Да.
[42:08.820 --> 42:16.820]  Нет, нет. Нет, А и Б – это не могут быть состояния, это именно слова из алкогита.
[42:16.820 --> 42:22.820]  Ну, потому что есть только одно место, куда машины указывают, там только одно состояние может быть.
[42:24.820 --> 42:30.820]  Бывают, конечно, такие экзотические модели, где машина тюрингит с несколькими головками.
[42:46.820 --> 42:48.820]  Да.
[43:16.820 --> 43:28.820]  Вот. Хорошо, значит, теперь, как будет выглядеть наша формула, значит, которая выполнима тогда-это тогда-когда?
[43:28.820 --> 43:38.820]  Когда есть такой Y, при котором вот это все вычисление заканчивается снимающим состоянием.
[43:38.820 --> 43:40.820]  Так, сейчас я еще вернусь вот сюда.
[43:40.820 --> 43:46.820]  Вот про количество строчек надо сказать.
[43:49.820 --> 43:52.820]  Значит, количество строчек – это, собственно, время работы машины.
[43:53.820 --> 43:56.820]  Там какое-то T от M.
[43:58.820 --> 44:09.820]  Вот. Ну, дальше смотрите, за каждый шаг, значит, за каждый шаг машина может сдвинуться правее, не более чем на одну клетку.
[44:10.820 --> 44:30.820]  Поэтому по горизонтали, значит, по горизонтали тоже можно считать то, что тут T от M.
[44:40.820 --> 44:46.820]  Вот. Ну, поэтому, соответственно, размер всей таблицы T от M в квадрате.
[44:46.820 --> 44:53.820]  То есть, полиномиальная, если это, значит, если это N, P, то тогда вот это T от M должен быть полиномиальная.
[44:53.820 --> 44:57.820]  И тогда размер всей таблицы тоже полиномиальный.
[44:57.820 --> 45:00.820]  Так, все, теперь пишу формулу.
[45:00.820 --> 45:09.820]  Значит, всю эту таблицу можно закодировать.
[45:09.820 --> 45:14.820]  То есть, можно сказать, что там P ежитое.
[45:14.820 --> 45:21.820]  P ежитое – это набор, значит, набор переменных.
[45:31.820 --> 45:53.820]  То есть, набор переменных, кодирующих содержимое в ячейке.
[45:53.820 --> 46:01.820]  Соответственно, ежи.
[46:01.820 --> 46:05.820]  Вот. Ну, это какой-то конечный набор переменных.
[46:05.820 --> 46:08.820]  Потому что у нас всего конечное число символов, конечное число состояний.
[46:08.820 --> 46:15.820]  Соответственно, можно какое-то конечное число битов, даже логарифмическое от общего числа символов состояний,
[46:15.820 --> 46:20.820]  каким-то логарифмическим числом символов закодировать.
[46:20.820 --> 46:29.820]  Соответственно, все, логарифмическим числом битов закодировать все возможные символы.
[46:29.820 --> 46:36.820]  Вот.
[46:36.820 --> 46:48.820]  Во, значит, это вот P ежитое.
[46:48.820 --> 46:52.820]  Так, теперь, что нам нужно?
[46:52.820 --> 46:55.820]  Наш Ворлофи.
[46:55.820 --> 47:01.820]  Значит, будем представлять, как конъюнцию трех составляющих.
[47:01.820 --> 47:14.820]  Значит, phi start и phi accept и phi step.
[47:14.820 --> 47:22.820]  Значит, phi start будет означать, что начальная, значит, начальная конфигурация, какая нужна.
[47:22.820 --> 47:27.820]  И phi accept означает, что в конце конфигурация принимающая.
[47:27.820 --> 47:39.820]  И phi step означает, что всюду по дороге и переход сделан направленно.
[47:39.820 --> 47:57.820]  Так, значит, phi start будет такой вещью.
[47:57.820 --> 48:01.820]  Будет примерно так, что, значит, P0,0 равно Q1.
[48:01.820 --> 48:06.820]  То есть сначала там будет начальное состояние.
[48:06.820 --> 48:15.820]  Значит, дальше будет P01 равно X1.
[48:15.820 --> 48:17.820]  И так далее.
[48:17.820 --> 48:20.820]  И P0,0 равно X0.
[48:20.820 --> 48:29.820]  То есть, значит, там сначала принимающие состояние, потом все символы X.
[48:29.820 --> 48:30.820]  Вот.
[48:30.820 --> 48:33.820]  Потом будет P0,0 и N плюс 1.
[48:33.820 --> 48:37.820]  Это будет пробел.
[48:37.820 --> 48:40.820]  Значит, бланк.
[48:40.820 --> 48:41.820]  Вот.
[48:41.820 --> 48:45.820]  А дальше смотрите, Y мы как раз не знаем.
[48:45.820 --> 48:47.820]  Но мы знаем, что он стоит из битов.
[48:47.820 --> 48:51.820]  То есть, что в Y либо 0, либо 1.
[48:51.820 --> 48:54.820]  Поэтому можно так написать.
[48:54.820 --> 48:58.820]  И P0,0,N плюс 2 равно 0.
[48:58.820 --> 49:03.820]  Или P0,0,N плюс 2 равно 1.
[49:03.820 --> 49:10.820]  И, соответственно, P0,0,N плюс 3 равно 0.
[49:10.820 --> 49:16.820]  Или P0,0,N плюс 3 равно 1.
[49:16.820 --> 49:17.820]  И так далее.
[49:17.820 --> 49:21.580]  и тогда, и так, дö того, сколько у нас символов у И.
[49:21.600 --> 49:25.080]  Сколько символов у И тоже зависит от нашей машины.
[49:25.100 --> 49:26.660]  Значит, это какой то полином,
[49:26.680 --> 49:29.720]  который может быть меньше, чем T от m.
[49:34.800 --> 49:36.560]  Ну, можно считать, что так.
[49:42.720 --> 49:46.040]  Да, Поежит – это не одна переменная, а несколько.
[49:47.820 --> 49:52.820]  Потому что, да, символ ты можешь считать, что три, а вот стейн все равно будет много.
[49:56.820 --> 50:07.820]  Так, и так далее. Да, значит, и, соответственно, p 0, а тут n плюс какое-то...
[50:08.820 --> 50:14.820]  Ну, дайте я так пишу, плюс длина y и плюс один, наверное, да.
[50:14.820 --> 50:22.820]  Вот это равно нулю или, соответственно, эта же штука равна единице.
[50:23.820 --> 50:33.820]  Вот, а все остальные, да, например, n плюс длина y плюс 2, это будет бланк.
[50:33.820 --> 50:47.820]  Ну, и так далее, вплоть до последнего, да, значит, p 0, ну, t от n я просто напишу, да, значит, равно бланк.
[50:48.820 --> 50:50.820]  Вот, вот это фистарт.
[50:51.820 --> 50:55.820]  Фистарт означает, что в начале написано ровно то, что там написано.
[50:57.820 --> 51:02.820]  И на самом деле вот это вот единственное место, где мы бит икса используем.
[51:03.820 --> 51:11.820]  То есть, опять же, к вопросу о том, почему садимся в полинамиальное, мы можем просто взять бита икса и сюда подставить.
[51:15.820 --> 51:20.820]  Так, хорошо, ну, соответственно, дальше fe accept.
[51:33.820 --> 51:47.820]  Ну, вот сначала идет там q1, все бита икса, потом бланк, а потом либо 0, либо 1, потом тоже либо 0, либо 1.
[51:48.820 --> 51:55.820]  А на кроссе нужно, чтобы существовал такой y из нули единиц, да, и это x дан, а y не дан.
[51:56.820 --> 51:58.820]  И y должен существовать.
[51:58.820 --> 52:00.820]  Ну, t от n какой-то многочлен.
[52:03.820 --> 52:14.820]  Да, его можно, ну, его можно записать как-то в сводящую функцию, да, то есть, ну, t от n оттуда же, откуда и длину y берем, да, из природы машины, которая это все делает.
[52:15.820 --> 52:22.820]  Да, потому что у этой машины есть какая-то длина y и какое-то время работы.
[52:22.820 --> 52:24.820]  Да нет, это же неправильно, там есть решетка еще между x и y.
[52:27.820 --> 52:35.820]  Ну, нет, ну, вот здесь я просто, я на самом прямую, что дальше все остальные решетки, то есть, что здесь я предустановил длину y.
[52:38.820 --> 52:40.820]  Ну, может, да, может быть.
[52:40.820 --> 52:42.820]  Ну, да, можно сделать так.
[52:43.820 --> 52:51.820]  Нет, там он может, конечно, и не устанавливать длину y, но это всегда вопрос кодирования, потому что можно сначала y за y закодировать.
[52:51.820 --> 52:58.820]  Ну, да, можно сделать так, вот. Нет, там можно, конечно, и не устанавливать длину у.
[53:03.820 --> 53:11.820]  Но это всегда вопрос кодирования, потому что можно сначала у закодировать беспрефиксным кодом.
[53:12.820 --> 53:16.820]  Например, вот какой может быть беспрефиксный код?
[53:16.820 --> 53:20.820]  Ну, самый простой, когда мы каждый бит удваиваем, а в конце пишем 0,1.
[53:21.820 --> 53:26.820]  Тогда код одного у не может быть префиксом кода другого у.
[53:27.820 --> 53:31.820]  Но тогда, после этого 0,1, можно еще дописывать все, что угодно.
[53:31.820 --> 53:34.820]  И все равно мы можем будет прочесть, какой именно у.
[53:38.820 --> 53:43.820]  И тогда, значит, если мы так сделаем, то можно считать, что для у предустановлено.
[53:43.820 --> 53:49.820]  А можно, конечно, считать, что и не предустановлено, а действительно писать, как вы говорите,
[53:49.820 --> 53:58.820]  как бы для всех индексов, начиная вот с этого, написать, что они равны 0,1 или бланку.
[53:58.820 --> 54:01.820]  И если какой-то район бланку, то следующий тоже район бланку.
[54:08.820 --> 54:10.820]  Типа того.
[54:19.820 --> 54:21.820]  Нет, сертификат у нас возникли вот здесь вот, да.
[54:21.820 --> 54:26.820]  То есть тут вот у нас есть два варианта для вот этого m plus второго бита,
[54:26.820 --> 54:29.820]  потом два варианта для m plus третьего бита и так далее.
[54:29.820 --> 54:31.820]  Соответственно, мы все эти двойки перемножаем.
[54:42.820 --> 54:44.820]  Ну, типа того, да.
[54:44.820 --> 54:46.820]  Ну, fiacet означает, что просто...
[54:56.820 --> 54:58.820]  Так нет, здесь вообще нет.
[54:58.820 --> 55:01.820]  Просто вот у нас получится форма полинамидной длины,
[55:01.820 --> 55:05.820]  где мы просто вот в эти конкретные места поставим конкретные биты.
[55:10.820 --> 55:12.820]  Но мы вставляем форму полинамидной длины,
[55:13.820 --> 55:15.820]  но мы вставляем формулу, мы вставляем формулу.
[55:26.820 --> 55:28.820]  Значит, устроить, что важно.
[55:28.820 --> 55:30.820]  Значит, важно, что таблица полинамидного размера,
[55:30.820 --> 55:35.820]  и важно, что тут используется только четыре предыдущих клетки.
[55:35.820 --> 55:38.820]  Что это позволит здесь сделать функцию константного размера,
[55:38.820 --> 55:40.820]  который от этого зависит.
[55:40.820 --> 55:44.820]  Да, если был тут какой-то растущий, то тут как раз экспонентом возникло.
[55:49.820 --> 55:51.820]  Ну, можно так сказать, да.
[55:51.820 --> 55:53.820]  Можешь сказать, что мы TMSAT сводим.
[55:53.820 --> 55:56.820]  Можешь сказать, что мы произвольную машину сводим.
[55:57.820 --> 55:59.820]  Так, так вот, fiacet.
[55:59.820 --> 56:02.820]  Ну, fiacet означает, что просто в конце,
[56:02.820 --> 56:06.820]  да, значит, TAT0, значит, это qacet,
[56:08.820 --> 56:10.820]  или и так далее,
[56:10.820 --> 56:13.820]  или TATMTATM.
[56:14.820 --> 56:16.820]  Значит, равно qacet.
[56:21.820 --> 56:23.820]  Вот.
[56:23.820 --> 56:25.820]  Так, ну и FISTEP.
[56:25.820 --> 56:30.820]  FISTEP будет как раз кодировать вот эту фигурку.
[56:53.820 --> 56:55.820]  Вот.
[57:24.820 --> 57:28.820]  Ну, а что fiacet? Fiacet означает, что либо здесь принимающий стояние qacet,
[57:28.820 --> 57:31.820]  либо здесь, либо здесь, либо здесь, и так далее.
[57:32.820 --> 57:34.820]  Так.
[57:42.820 --> 57:44.820]  Хорошо.
[57:49.820 --> 57:51.820]  Ну, дальше FISTEP.
[57:53.820 --> 57:55.820]  Нет, почему?
[57:55.820 --> 57:57.820]  Так, давайте я тут...
[58:03.820 --> 58:05.820]  А, в смысле...
[58:05.820 --> 58:09.820]  Нет, да, можно считать, что слева есть граница, да,
[58:09.820 --> 58:11.820]  то есть что лента односторонняя.
[58:11.820 --> 58:13.820]  То есть мы можем двигаться и налево, и направо,
[58:13.820 --> 58:17.820]  но только справа от ограничителя.
[58:17.820 --> 58:21.820]  Ну, мы обсуждаем, что это не обременительные условия.
[58:23.820 --> 58:25.820]  Вот, FISTEP.
[58:26.820 --> 58:29.820]  Так, ну тут я, давайте, уже без многоточий, да,
[58:29.820 --> 58:31.820]  напишу вот так.
[58:31.820 --> 58:33.820]  Вот это, значит, будет конъюнкция
[58:33.820 --> 58:35.820]  по всем i.
[58:37.820 --> 58:39.820]  Вот единицы, то есть,
[58:39.820 --> 58:41.820]  по всем i,
[58:41.820 --> 58:43.820]  по всем i,
[58:43.820 --> 58:45.820]  по всем i,
[58:45.820 --> 58:49.820]  от единицы до t от n.
[58:49.820 --> 58:51.820]  Конъюнкция по всем g,
[58:51.820 --> 58:53.820]  от нуля до t от m.
[58:57.820 --> 59:01.820]  Здесь нужно писать, что p и gt
[59:01.820 --> 59:03.820]  будет какой-то конкретной функцией.
[59:03.820 --> 59:09.820]  Значит, как p и минус 1g минус 1.
[59:09.820 --> 59:13.820]  Ответственно, p и минус 1g,
[59:13.820 --> 59:19.820]  p и минус 1g плюс 1,
[59:19.820 --> 59:23.820]  и p и минус 1g плюс 2.
[59:25.820 --> 59:27.820]  Вот, ну приятно смотреть,
[59:27.820 --> 59:29.820]  тут вот это g минус 1,
[59:29.820 --> 59:31.820]  или g плюс 1g плюс 2
[59:31.820 --> 59:33.820]  могут, в принципе, вылезти вообще
[59:33.820 --> 59:35.820]  за пределы этой таблички,
[59:35.820 --> 59:37.820]  да, то есть если g у нас вот здесь,
[59:37.820 --> 59:39.820]  и минус 1 вылезет вот сюда.
[59:39.820 --> 59:41.820]  Но можно считать, что есть
[59:41.820 --> 59:43.820]  специальный символ нахождения
[59:43.820 --> 59:45.820]  за пределами таблички,
[59:45.820 --> 59:47.820]  и вот эта вот функция,
[59:47.820 --> 59:49.820]  функция, которая говорит,
[59:49.820 --> 59:51.820]  что будет в зависимости от вот этих вот,
[59:51.820 --> 59:53.820]  она соответственно тоже
[59:53.820 --> 59:55.820]  умеет обрабатывать.
[59:55.820 --> 59:57.820]  То есть, если оказалось, что вот эта клетка уже за пределами таблички,
[59:57.820 --> 59:59.820]  то будет специальное значение
[59:59.820 --> 01:00:01.820]  для этой функции.
[01:00:01.820 --> 01:00:03.820]  То есть, вот эта вот f,
[01:00:03.820 --> 01:00:05.820]  и f, вообще говоря, довольно сложная функция,
[01:00:05.820 --> 01:00:07.820]  потому что f
[01:00:07.820 --> 01:00:09.820]  внутри себя
[01:00:09.820 --> 01:00:11.820]  содержит всю программу машины тюринга.
[01:00:13.820 --> 01:00:15.820]  И даже по несколько раз.
[01:00:15.820 --> 01:00:17.820]  Вот, но тем не менее,
[01:00:17.820 --> 01:00:19.820]  у нее размер хоть и большой, но константный.
[01:00:23.820 --> 01:00:25.820]  Вот,
[01:00:25.820 --> 01:00:27.820]  значит размер у нее хоть и большой, но константный,
[01:00:27.820 --> 01:00:29.820]  поэтому
[01:00:29.820 --> 01:00:31.820]  вот у этой части будет размер константа,
[01:00:31.820 --> 01:00:33.820]  ну а дальше мы это умножаем
[01:00:33.820 --> 01:00:35.820]  еще на t от n и еще на t от n,
[01:00:35.820 --> 01:00:37.820]  получаем размер пленомиандии.
[01:00:41.820 --> 01:00:43.820]  Вот, добавляем вот этого,
[01:00:43.820 --> 01:00:45.820]  добавляем вот этого, получаем, соответственно,
[01:00:53.820 --> 01:00:55.820]  ну всю формулу получаем, да,
[01:00:55.820 --> 01:00:57.820]  то есть это остается пленом,
[01:00:57.820 --> 01:00:59.820]  значит, получаем всю формулу.
[01:00:59.820 --> 01:01:01.820]  Так, ну теперь давайте аккуратно проговорим,
[01:01:01.820 --> 01:01:03.820]  почему это правильная сводимость.
[01:01:05.820 --> 01:01:07.820]  Вот, смотрите, пусть у нас есть
[01:01:07.820 --> 01:01:09.820]  такой y,
[01:01:09.820 --> 01:01:11.820]  пусть у нас x зафиксирован,
[01:01:11.820 --> 01:01:13.820]  и для него есть такой y,
[01:01:13.820 --> 01:01:15.820]  что машина выдает единицу.
[01:01:15.820 --> 01:01:17.820]  Тогда, соответственно,
[01:01:17.820 --> 01:01:19.820]  есть
[01:01:19.820 --> 01:01:21.820]  соответствующий вот таблица работы
[01:01:21.820 --> 01:01:23.820]  этой машины на этом y.
[01:01:25.820 --> 01:01:27.820]  И можно значение всех переменных
[01:01:27.820 --> 01:01:29.820]  взять такими,
[01:01:29.820 --> 01:01:31.820]  чтобы
[01:01:31.820 --> 01:01:33.820]  ну чтобы они совпадали с тем,
[01:01:33.820 --> 01:01:35.820]  что в столице написано.
[01:01:41.820 --> 01:01:43.820]  Вот.
[01:01:45.820 --> 01:01:47.820]  Ну и тогда просто получается,
[01:01:47.820 --> 01:01:49.820]  что все это будет верно.
[01:01:49.820 --> 01:01:51.820]  Так.
[01:01:51.820 --> 01:01:53.820]  А, сейчас, да,
[01:01:53.820 --> 01:01:55.820]  вот так вот.
[01:01:55.820 --> 01:01:57.820]  Да, получается,
[01:01:57.820 --> 01:01:59.820]  что все это будет верно.
[01:01:59.820 --> 01:02:01.820]  Да, мы возьмем
[01:02:01.820 --> 01:02:03.820]  для игр как раз такие биты,
[01:02:03.820 --> 01:02:05.820]  соответственно, вот это все тоже будет верно.
[01:02:05.820 --> 01:02:07.820]  В конце, поскольку
[01:02:07.820 --> 01:02:09.820]  ответ дату будет, соответственно,
[01:02:09.820 --> 01:02:11.820]  понимающий состояние,
[01:02:11.820 --> 01:02:13.820]  вот, и поскольку это правильный протокол,
[01:02:13.820 --> 01:02:15.820]  то все переходы тоже будут верны.
[01:02:15.820 --> 01:02:17.820]  Да, то есть получается, что если
[01:02:17.820 --> 01:02:19.820]  существует y,
[01:02:19.820 --> 01:02:21.820]  значит такое, что
[01:02:21.820 --> 01:02:23.820]  m от x и y
[01:02:23.820 --> 01:02:25.820]  равно единице,
[01:02:27.820 --> 01:02:29.820]  то тогда для
[01:02:31.820 --> 01:02:33.820]  для протокола
[01:02:35.820 --> 01:02:37.820]  для протокола работы
[01:02:41.820 --> 01:02:43.820]  m от x и y
[01:02:43.820 --> 01:02:45.820]  m от x и y
[01:02:49.820 --> 01:02:51.820]  и формулы
[01:02:53.820 --> 01:02:55.820]  будут верны.
[01:03:07.820 --> 01:03:09.820]  То есть формулы выполнимы.
[01:03:09.820 --> 01:03:11.820]  Ну, то есть, значит, для протокола работы,
[01:03:11.820 --> 01:03:13.820]  значит, для значений по ежи
[01:03:13.820 --> 01:03:15.820]  взятых из протокола работы,
[01:03:15.820 --> 01:03:17.820]  то есть из той таблички.
[01:03:17.820 --> 01:03:19.820]  Вот.
[01:03:19.820 --> 01:03:21.820]  Ну, на самом деле и наоборот тоже.
[01:03:21.820 --> 01:03:23.820]  Значит, если
[01:03:23.820 --> 01:03:25.820]  есть выполняющий набор у формул,
[01:03:31.820 --> 01:03:33.820]  есть выполняющий набор у формул,
[01:03:35.820 --> 01:03:37.820]  тогда получается, что
[01:03:37.820 --> 01:03:39.820]  по, соответственно,
[01:03:43.820 --> 01:03:45.820]  по
[01:03:45.820 --> 01:03:47.820]  p
[01:03:47.820 --> 01:03:49.820]  0 n plus 2,
[01:03:49.820 --> 01:03:51.820]  значит, p 0 n plus 3
[01:03:51.820 --> 01:03:53.820]  и так далее.
[01:03:55.820 --> 01:03:57.820]  Значит, p, соответственно,
[01:03:57.820 --> 01:03:59.820]  0
[01:03:59.820 --> 01:04:01.820]  n плюс размер
[01:04:01.820 --> 01:04:03.820]  y плюс 1
[01:04:03.820 --> 01:04:05.820]  можно поставить
[01:04:05.820 --> 01:04:07.820]  можно построить
[01:04:21.820 --> 01:04:23.820]  может построить y.
[01:04:25.820 --> 01:04:27.820]  Вот. Ну и, соответственно,
[01:04:29.820 --> 01:04:31.820]  значит, значения
[01:04:31.820 --> 01:04:33.820]  по ежи t
[01:04:33.820 --> 01:04:35.820]  значит, зададут протокол работы
[01:04:35.820 --> 01:04:37.820]  на этом y.
[01:04:43.820 --> 01:04:45.820]  Протокол работы
[01:04:53.820 --> 01:04:55.820]  для этого y.
[01:04:55.820 --> 01:04:57.820]  Вот.
[01:04:57.820 --> 01:04:59.820]  Ну и, соответственно, этот протокол
[01:04:59.820 --> 01:05:01.820]  закончится
[01:05:01.820 --> 01:05:03.820]  принимающим состоянием.
[01:05:05.820 --> 01:05:07.820]  Значит, который
[01:05:09.820 --> 01:05:11.820]  закончится принимающим состоянием.
[01:05:25.820 --> 01:05:27.820]  Вот. Значит, почему
[01:05:35.820 --> 01:05:37.820]  почему это все будет правильно?
[01:05:37.820 --> 01:05:39.820]  Ну, потому что, смотрите,
[01:05:39.820 --> 01:05:41.820]  что у нас говорит FISTART?
[01:05:41.820 --> 01:05:43.820]  FISTART говорит, что у нас возникает
[01:05:43.820 --> 01:05:45.820]  начальная конфигурация
[01:05:45.820 --> 01:05:47.820]  для вот этого x
[01:05:47.820 --> 01:05:49.820]  и какого-то y
[01:05:49.820 --> 01:05:51.820]  нужно длины.
[01:05:51.820 --> 01:05:53.820]  Дальше, что говорит FISTEP?
[01:05:53.820 --> 01:05:55.820]  Ну, FISTEP говорит, что каждая следующая
[01:05:55.820 --> 01:05:57.820]  строчка получается из предыдущей
[01:05:57.820 --> 01:05:59.820]  по правилам перехода машины тюринга.
[01:06:01.820 --> 01:06:03.820]  Вот. Но это, конечно, в принципе,
[01:06:03.820 --> 01:06:05.820]  нужно еще немножко подробнее доказывать,
[01:06:05.820 --> 01:06:07.820]  но ладно, это я тоже пропущу
[01:06:07.820 --> 01:06:09.820]  на что
[01:06:09.820 --> 01:06:11.820]  ну, что действительно
[01:06:11.820 --> 01:06:13.820]  однозначно определяется.
[01:06:15.820 --> 01:06:17.820]  То есть тут
[01:06:17.820 --> 01:06:19.820]  и оно вообще вроде довольно понятно
[01:06:19.820 --> 01:06:21.820]  должно быть.
[01:06:23.820 --> 01:06:25.820]  Ну, тут нужно
[01:06:25.820 --> 01:06:27.820]  на самом деле две вещи доказывать, что
[01:06:27.820 --> 01:06:29.820]  во-первых, это определяется,
[01:06:29.820 --> 01:06:31.820]  во-вторых, однозначно.
[01:06:33.820 --> 01:06:35.820]  Вот. Ну, так, в общем, то и другое
[01:06:35.820 --> 01:06:37.820]  можно доказать путем аккуратного
[01:06:37.820 --> 01:06:39.820]  анализа
[01:06:39.820 --> 01:06:41.820]  правил перехода машины тюринга.
[01:06:41.820 --> 01:06:43.820]  Вот.
[01:06:43.820 --> 01:06:45.820]  Так. Ну, и на этом все.
[01:06:45.820 --> 01:06:47.820]  Так. Ну, и, значит, и
[01:06:47.820 --> 01:06:49.820]  последнее,
[01:06:49.820 --> 01:06:51.820]  что раз выполнена Fiat Accept, значит,
[01:06:51.820 --> 01:06:53.820]  там где-то в конце есть принимающий состояние.
[01:06:53.820 --> 01:06:55.820]  Вот. Ну, значит,
[01:06:55.820 --> 01:06:57.820]  соответственно, оно там
[01:06:57.820 --> 01:06:59.820]  должно быть.
[01:07:01.820 --> 01:07:03.820]  Вот.
[01:07:03.820 --> 01:07:05.820]  Какие-нибудь вопросы.
[01:07:05.820 --> 01:07:07.820]  Не, ну, на самом деле
[01:07:07.820 --> 01:07:09.820]  можно и не через нее делать.
[01:07:09.820 --> 01:07:11.820]  То есть, ну, можно сказать, что вот это вот
[01:07:11.820 --> 01:07:13.820]  и это как раз вот это вот.
[01:07:13.820 --> 01:07:15.820]  Это то же самое, что вот это.
[01:07:15.820 --> 01:07:17.820]  А так, в принципе,
[01:07:17.820 --> 01:07:19.820]  то есть тут ценность
[01:07:19.820 --> 01:07:21.820]  генерической
[01:07:21.820 --> 01:07:23.820]  не обязательно в том, что мы ее
[01:07:23.820 --> 01:07:25.820]  сводим там куда-то.
[01:07:25.820 --> 01:07:27.820]  Вот. А
[01:07:27.820 --> 01:07:29.820]  то есть, ну,
[01:07:29.820 --> 01:07:31.820]  то есть, ну,
[01:07:31.820 --> 01:07:33.820]  то есть, ну,
[01:07:33.820 --> 01:07:35.820]  да.
[01:07:35.820 --> 01:07:37.820]  Вот. А может быть в том, что
[01:07:37.820 --> 01:07:39.820]  просто
[01:07:39.820 --> 01:07:41.820]  часто вот по полной задачи выглядит
[01:07:41.820 --> 01:07:43.820]  именно так.
[01:07:43.820 --> 01:07:45.820]  Да. То есть, полная задача в
[01:07:45.820 --> 01:07:47.820]  одной классе часто получается
[01:07:47.820 --> 01:07:49.820]  так, что мы получаем какое-то описание
[01:07:49.820 --> 01:07:51.820]  вообще задачи из этого класса.
[01:07:51.820 --> 01:07:53.820]  И если такая задача сама будет в том
[01:07:53.820 --> 01:07:55.820]  же классе, то она будет полной.
[01:07:55.820 --> 01:07:57.820]  Вот.
[01:07:57.820 --> 01:07:59.820]  Так. Ну, ладно.
[01:07:59.820 --> 01:08:01.820]  В следующий раз получается, что мы
[01:08:01.820 --> 01:08:03.820]  будем разные полные задачи
[01:08:03.820 --> 01:08:05.820]  изучать.
[01:08:05.820 --> 01:08:07.820]  Все. Спасибо за внимание.
