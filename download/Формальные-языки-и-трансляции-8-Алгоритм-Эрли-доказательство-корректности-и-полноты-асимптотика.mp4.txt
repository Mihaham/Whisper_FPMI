[00:00.000 --> 00:10.000]  Всем доброго дня! Мы с вами продолжаем изучение наших алгоритмов и сегодня мы будем доказывать алгоритмы Erli.
[00:10.000 --> 00:18.000]  Те, кто смотрит записи, на текущий момент может поставить паузу на видео и осознать, что происходит на доске,
[00:18.000 --> 00:24.000]  потому что здесь уже выписаны основные операции, по которым у нас строятся алгоритмы Erli.
[00:24.000 --> 00:30.000]  У нас есть с вами операция Scan, которая двигает букву, при этом у нас позиция ситуации меняется.
[00:30.000 --> 00:38.000]  Мы немножко переобозначили обозначение для того, чтобы было понятно, что ситуация это не что-то, принадлежащее какому-то множеству,
[00:38.000 --> 00:43.000]  а что это тройка объектов, которые у нас существуют в объекте.
[00:43.000 --> 00:48.000]  У нас есть три операции Scan, которая позволяет нам двинуть букву за точку,
[00:48.000 --> 00:54.000]  операция Predict, которая позволяет спуститься в дерево разбора, внутрь раскрыть не терминал,
[00:54.000 --> 00:58.000]  и есть операция Complete, которая закрывает определенные правила.
[00:58.000 --> 01:04.000]  Наша цель сейчас пройтись по алгоритму, который делает следующее.
[01:04.000 --> 01:10.000]  Он пытается максимально прокинуть все возможные операции для принадлежности слова грамматики.
[01:10.000 --> 01:15.000]  Наша цель, опять же, у нас есть какое-то слово, нам нужно проверить принадлежность его произвольной грамматики.
[01:16.000 --> 01:20.000]  И нам нужно доказать сегодня основную лему о корректности и полноты,
[01:20.000 --> 01:27.000]  которая стоит в следующем, что если мы правильно с вами напишем алгоритм, нигде не накосячим,
[01:27.000 --> 01:31.000]  это важно, потому что в коде все-таки можно накосячить,
[01:31.000 --> 01:40.000]  то у нас ситуация А, стрелочка, альфа, точка Б и G появляется в наших выводах тогда и только тогда,
[01:40.000 --> 01:46.000]  когда существуют такие Пси и Альфа, что из Альфы у нас выводится символ с Итова до Житой,
[01:46.000 --> 01:54.000]  то есть получается у нас из вот этой последствия терминалов будет выводиться символ от Итова до Житого,
[01:54.000 --> 02:00.000]  а это значит, что позиция родительской точки, которая у нас была в деле вывода на картинках,
[02:00.000 --> 02:02.000]  она как раз будет от нулевой до Итой.
[02:03.000 --> 02:13.000]  И дальше сделаем следующее, что у нас с вами есть из С3 вывод до того, как мы спустились в наш не терминал А
[02:13.000 --> 02:19.000]  символа с нулевого до Итого, потом за один шаг мы раскрываем не терминал А по нашему правилу
[02:19.000 --> 02:24.000]  и с А выводим Альфа, Бета, и дальше за какое-то количество шагов мы раскрываем нашу Альфу
[02:24.000 --> 02:26.000]  и выводим символы с этого до Житого.
[02:26.000 --> 02:30.000]  Нам нужно будет доказать это лему в две стороны.
[02:30.000 --> 02:38.000]  Значит, во-первых, что если у нас в правиле, выводя вот такими правилами наше соответствие,
[02:38.000 --> 02:44.000]  мы получаем вот такое дерево вывода, и с другой стороны, если у нас появляется какое-то дерево вывода,
[02:44.000 --> 02:50.000]  то мы получаем с вами вот такой результат, то есть что у нас такое правило появляется.
[02:50.000 --> 03:00.000]  Напомню, что у нас с вами есть стартовое предположение, что у нас с вами в грамматике
[03:00.000 --> 03:08.000]  существуют правила из С' выводится С, и начало нашего алгоритма это следующая ситуация.
[03:08.000 --> 03:11.000]  С' стрелочка точка С00.
[03:14.000 --> 03:17.000]  Да, это означает, что мы начали наш разбор.
[03:18.000 --> 03:23.000]  Это такая водная часть, сейчас будут доказательства.
[03:26.000 --> 03:30.000]  То есть, если у нас ситуация существует, то у нас делан вывод.
[03:30.000 --> 03:34.000]  Давайте мы сначала будем доказывать утверждение с левого стороны вправое,
[03:34.000 --> 03:39.000]  и начнем рассуждать про следующее.
[03:39.000 --> 03:48.000]  Будет индукция по количеству шагов алгоритма.
[03:58.000 --> 04:00.000]  Итак, база индукции какая?
[04:00.000 --> 04:10.000]  Да, вот мы начальная ситуация, база. У нас появилась ситуация, вот она.
[04:20.000 --> 04:22.000]  Как тогда построить вывод?
[04:22.000 --> 04:40.000]  Ну, смотрите, S' выводит, смотрите, V00 S' ε.
[04:40.000 --> 04:44.000]  Вот с этим согласны выражения?
[04:44.000 --> 04:47.000]  Я просто взял, подставил И равное нулю.
[04:48.000 --> 04:52.000]  Apti равное ε.
[04:52.000 --> 04:59.000]  Потом за один шаг мы с вами раскрываем S'Vs.
[05:01.000 --> 05:05.000]  И при этом точка у нас стоит здесь.
[05:05.000 --> 05:09.000]  То есть у нас получается α тоже равняется ε.
[05:09.000 --> 05:15.000]  И мы можем сказать, что это тоже символ с нулевого по нулевой.
[05:15.000 --> 05:20.000]  И в нашем случае, в наших определениях это будет V и gt.
[05:25.000 --> 05:28.000]  Ой, извините.
[05:28.000 --> 05:32.000]  То есть видите, все вроде честно в наших определениях.
[05:32.000 --> 05:36.000]  Хорошо, это база.
[05:36.000 --> 05:39.000]  А дальше проверяем переход.
[05:40.000 --> 05:43.000]  Какая операция вам сегодня больше нравится?
[05:43.000 --> 05:46.000]  Скан, предикт или комплект?
[05:46.000 --> 05:50.000]  Скан. Ну хорошо, давайте начнем со скана.
[05:50.000 --> 05:56.000]  Значит нам нужно проверить, пусть у нас какая-то операция появилась по скану.
[05:56.000 --> 06:02.000]  Мы можем сказать, что это у нас, извините, ситуация появилась вот такая вот.
[06:02.000 --> 06:06.000]  Альфа точка бета и g плюс один.
[06:11.000 --> 06:16.000]  Ну тогда давайте напишем, какой у нас получается вывод, мы ожидаем.
[06:16.000 --> 06:30.000]  Но он у нас получился из того, что а, альфа точка, так, только альфа, а точка бета.
[06:30.000 --> 06:37.000]  Точка а бета и g появился был до.
[06:43.000 --> 06:48.000]  А это значит, что по предположению индукции мы можем сделать следующее.
[06:48.000 --> 06:51.000]  Мы можем написать вот такую вещь.
[06:51.000 --> 06:56.000]  В ноль и, а, и.
[06:56.000 --> 07:04.000]  И за один шаг у нас раскрывается ноль и.
[07:04.000 --> 07:12.000]  Дальше у нас идет альфа, а бета, си.
[07:12.000 --> 07:16.000]  Да, собственно, вот оно у нас правило перед точкой.
[07:16.000 --> 07:18.000]  Теперь смотрите.
[07:18.000 --> 07:23.000]  Из-за того, что у нас альфа выводит v и gt.
[07:24.000 --> 07:30.000]  А v и gt равняется а.
[07:30.000 --> 07:34.000]  То, что у нас выводится из альфа, а?
[07:39.000 --> 07:41.000]  Проспаемся.
[07:46.000 --> 07:48.000]  Ну, конечно же.
[07:49.000 --> 07:52.000]  V и gt плюс один.
[07:52.000 --> 07:56.000]  И в итоге, в нашем случае, для вот того дерева вывода,
[07:56.000 --> 07:59.000]  си остается тем же самым, да?
[07:59.000 --> 08:02.000]  А вот это будет такой альфа штрих,
[08:02.000 --> 08:04.000]  который мы хотим вывести.
[08:04.000 --> 08:09.000]  То есть вот оно, альфа а, которое выводит символ ситого дж плюс первого.
[08:09.000 --> 08:13.000]  То есть позиция точки у нас сохраняется.
[08:14.000 --> 08:17.000]  То есть здесь некоторые манипуляции.
[08:17.000 --> 08:21.000]  Важно понять, что именно вот этот символ был точно таким же.
[08:23.000 --> 08:26.000]  Так, со сканом понятно, что произошло?
[08:26.000 --> 08:28.000]  Хорошо.
[08:28.000 --> 08:31.000]  Следующая операция – это предикт.
[08:35.000 --> 08:36.000]  Предикт.
[08:36.000 --> 08:39.000]  Значит, у нас появилась ситуация вот такая при предикте.
[08:39.000 --> 08:43.000]  А это значит, что у нас было какое-то правило до этого.
[08:51.000 --> 08:53.000]  То есть у нас был...
[09:01.000 --> 09:04.000]  Значит, существовало правило.
[09:04.000 --> 09:11.000]  А, альфа точка б бета и ж.
[09:11.000 --> 09:14.000]  Ну раз у нас существовало такое правило,
[09:14.000 --> 09:18.000]  то смотрите, давайте выпишем, что у нас происходит.
[09:18.000 --> 09:22.000]  У нас происходит следующее, что из штрих
[09:22.000 --> 09:25.000]  у нас выводится v нули.
[09:25.000 --> 09:29.000]  Дальше у нас вводится апси.
[09:29.000 --> 09:38.000]  За один шаг у нас выводится v ноль и альфа бета б пси.
[09:42.000 --> 09:44.000]  Это предположение индукции.
[09:47.000 --> 09:49.000]  Двигаемся дальше.
[09:49.000 --> 09:52.000]  Значит, для того, чтобы у нас применилось предположение индукции,
[09:52.000 --> 09:55.000]  мы должны за один шаг каким-то образом раскрыть b.
[09:55.000 --> 09:57.000]  Ну давайте посмотрим.
[09:57.000 --> 10:00.000]  Поскольку у нас из альфы выводится v и gt,
[10:04.000 --> 10:12.000]  то вот это все превращается в вывод v ноль gt.
[10:12.000 --> 10:14.000]  B бета пси.
[10:16.000 --> 10:20.000]  И вот здесь мы как раз уже за один шаг
[10:20.000 --> 10:30.000]  раскрываем, смотрите, что v ноль gt,
[10:30.000 --> 10:34.000]  я напишу здесь, смотрите, важно,
[10:34.000 --> 10:38.000]  эпсилон гамма бета пси.
[10:38.000 --> 10:40.000]  Зачем я написал эпсилон?
[10:40.000 --> 10:44.000]  Потому что эпсилон это то же самое, что w gt gt.
[10:44.000 --> 10:51.000]  Делает специальный трюк, чтобы показать, что на самом деле у нас вот это вот альфа,
[10:51.000 --> 10:56.000]  которая у нас существует в условиях леммы, на самом деле это пустое слово.
[10:56.000 --> 11:01.000]  А мы раскрыли это все до того момента, как мы получаем символ с нулевого pgt.
[11:01.000 --> 11:08.000]  То есть в итоге у нас для вот этого правила индукционный вывод тоже будет существовать.
[11:14.000 --> 11:16.000]  Я вижу какие-то смущения.
[11:20.000 --> 11:25.000]  То есть наша цель, как только мы заходим в какое-то внутреннее дерево вывода,
[11:25.000 --> 11:28.000]  проверить, что было до этого,
[11:28.000 --> 11:33.000]  и проверить, что закрывалось, как только мы спустились в это дерево.
[11:37.000 --> 11:40.000]  Так, с предиктом понятно, что произошло?
[11:44.000 --> 11:46.000]  Так, хорошо.
[11:46.000 --> 11:50.000]  Собственно, прописываем вот такую вот вещь.
[11:50.000 --> 11:53.000]  Так, хорошо. Здесь мы тоже все разобрались. Теперь с комплитом.
[11:53.000 --> 11:56.000]  Значит, с комплитом все сложнее.
[11:58.000 --> 12:00.000]  Так, а где тряпка?
[12:02.000 --> 12:04.000]  Тряпка, ты где?
[12:04.000 --> 12:06.000]  Тряпка спряталась.
[12:08.000 --> 12:11.000]  Нет. Никто не видит синюю такую вещь.
[12:18.000 --> 12:22.000]  Нет, там есть, но правда это просто сильно замедляет скорость нашего чтения.
[12:22.000 --> 12:28.000]  Обычно тлокомплименты, которые мы делаем, они просто замедляют скорость нашего чтения.
[12:29.000 --> 12:33.000]  Нет, там есть, но правда это просто сильно замедляет скорость нашего чтения.
[12:33.000 --> 12:35.000]  Обычно тут сухая тряпка лежала.
[12:39.000 --> 12:40.000]  А?
[12:41.000 --> 12:42.000]  Нет.
[12:43.000 --> 12:44.000]  Нет.
[12:44.000 --> 12:46.000]  Что, вы думаете, что я могла это?
[12:51.000 --> 12:52.000]  А?
[12:53.000 --> 12:58.000]  А, вот ее кто. Все, я говорил, что я видел. Ее в компьютер засунули.
[13:04.000 --> 13:06.000]  Еще бы доску от цифровалеба.
[13:10.000 --> 13:11.000]  Как?
[13:18.000 --> 13:19.000]  Ну вот.
[13:23.000 --> 13:25.000]  Итак, комплит давайте разбирать.
[13:26.000 --> 13:37.000]  Значит, предположим, что у нас с вами появилась ситуация альфа, бета, точка b, и g.
[13:38.000 --> 13:40.000]  Тогда, значит, у нас есть два вывода.
[13:41.000 --> 13:49.000]  Первая, то у нас было правило какое-то бета, стрелочка, гамма, точка, k, g.
[13:52.000 --> 14:01.000]  А и было альфа, альфа, точка, бета, бета, и k, t.
[14:03.000 --> 14:06.000]  И давайте мы сейчас выпишем два предположения индукции.
[14:07.000 --> 14:17.000]  Значит, первое предположение индукции будет следовать, что из эш-трих, давайте начнем со второго лучше.
[14:17.000 --> 14:23.000]  Из эш-трих выводится символа нулевого по итой.
[14:24.000 --> 14:32.000]  Дальше у нас получается с вами, что у нас, а, пси.
[14:33.000 --> 14:43.000]  Дальше за один шаг раскрывается это все, в, нулевое, ит, альфа, б, бета, пси.
[14:43.000 --> 15:10.000]  А здесь у нас получается, что на самом деле у нас есть вывод в, нулевое, k, t, гамма, пси-штрих.
[15:10.000 --> 15:28.000]  Вот, при этом, так, я что-то погорячился, бета, и за один шаг, b, нулевое, k, t.
[15:28.000 --> 15:37.000]  Не, не, не, мы же для правила пишем.
[15:38.000 --> 15:46.000]  Не, там же от корня у нас все зависит. То есть, мы все выводы вот в этой лемме, которые используем, пишем для корня.
[15:47.000 --> 15:53.000]  То есть, как только у нас появляется вывод, то мы его выводим от начала слова.
[15:53.000 --> 16:03.000]  Вот, значит, смотрите, что у нас получается. У нас получается вот такой вывод, и теперь нам надо их грамотно сконкатенировать.
[16:04.000 --> 16:14.000]  Что мы хотим с вами? Мы хотим, чтобы, на самом деле, из альфа, бета, выводился символ с итовопокатой.
[16:14.000 --> 16:34.000]  С итовопожитой. Потому что, вот, смотрите, вот это вот, вот этот вот вывод, он по факту работает, давайте я напишу так, в кавычках, работает для i.
[16:35.000 --> 16:39.000]  То есть, работает для позиции родительской точки, которая у нас здесь закодирована.
[16:39.000 --> 16:47.000]  А значит, нам нужно понять, почему у нас из альфа, бета будет выводиться символ с итовопокатой.
[16:48.000 --> 17:03.000]  Ну, давайте рассуждать. Значит, из вот этого вот, да, у нас граф не планарный, будет следовать, что гамма выводит символ с катовопожитой.
[17:03.000 --> 17:13.000]  Ну, и из этого будет следовать, что b выводит символ с катовопожитой.
[17:14.000 --> 17:23.000]  Да? А из вот этого, будет следовать, что из альфа выводит символ с итовопокатой.
[17:23.000 --> 17:33.000]  И используя вот эти два свойства, мы получаем, что из альфа, бета выводится символ с итовопожитой.
[17:34.000 --> 17:43.000]  А это как раз то, что мы хотели вывести между родительской позицией и нашей текущей.
[17:43.000 --> 17:51.000]  Окей? Вот. Давайте еще раз продублируем. Собственно, была позиция. Была еще раз позиция.
[17:52.000 --> 18:00.000]  Пишем предположение индукции. Из альфа выводим символ с итовопокатой. Из бета выводится символ с катовопожитой.
[18:01.000 --> 18:08.000]  В итоге мы получаем, что из альфа, бета выводится символ с итовопожитой.
[18:08.000 --> 18:12.000]  Что из альфа, бета выводится символ с итовопожитой.
[18:15.000 --> 18:25.000]  Итак, понятно ли доказать это в одну сторону? Что сделали? Мы проверили базу индукции, мы проверили предположение индукции.
[18:26.000 --> 18:32.000]  Да, то есть переход индукции для всех трех правил. В одну сторону доказали.
[18:32.000 --> 18:39.000]  В другую сторону доказали. Да. Сейчас буду полноту доказывать.
[18:40.000 --> 18:46.000]  То, что если у нас существует такой вывод, то такая ситуация у нас точно появится.
[18:48.000 --> 19:00.000]  То есть наша цель будет найти как раз предыдущие выводы, которые у нас были, из них вытащить возможные ситуации и потом показать, в какой части алгоритма эта ситуация появилась.
[19:01.000 --> 19:04.000]  И это первое взрывающее мозгодоказательство.
[19:05.000 --> 19:11.000]  Да. Ну что, сейчас будет индукция по трем параметрам одновременно на того, чтобы это все сошлось.
[19:13.000 --> 19:19.000]  Ага. Так. Ну давайте доказать корректность.
[19:20.000 --> 19:24.000]  Зафиксируем количество шагов, которые было здесь в этой лемме.
[19:24.000 --> 19:29.000]  Пусть вот этот вывод у нас был за к шагов, вот этот вывод был у нас за л шагов.
[19:34.000 --> 19:36.000]  Полноты. Блин, я все...
[19:43.000 --> 19:45.000]  Рефакторим презентацию в прямом эфире.
[19:49.000 --> 19:50.000]  Так, где это у нас?
[19:54.000 --> 19:55.000]  Не, это...
[20:05.000 --> 20:06.000]  Нашел.
[20:13.000 --> 20:14.000]  Да.
[20:17.000 --> 20:18.000]  Все, вроде больше не... Да.
[20:19.000 --> 20:20.000]  Это полнота.
[20:22.000 --> 20:23.000]  Да.
[20:25.000 --> 20:26.000]  Это все доказательство.
[20:27.000 --> 20:29.000]  Короче, возьмите, зачеркните на слайде.
[20:36.000 --> 20:37.000]  Да.
[20:38.000 --> 20:42.000]  Ну, много чего знаю. Вот тут нарушение паттерна dry.
[20:47.000 --> 20:52.000]  Кстати, нарушение паттерна dry это так искать в любые презентации в Powerpoint.
[20:52.000 --> 20:57.000]  Потому что там происходит дублирование слайдов в огромном количестве.
[20:58.000 --> 21:00.000]  Ладно, мы доказываем полноту.
[21:01.000 --> 21:04.000]  Теперь внимательно, по какому параметру мы будем ввести индукцию.
[21:05.000 --> 21:06.000]  Я пока не буду это писать на доске.
[21:07.000 --> 21:10.000]  Мы будем ввести индукцию, смотрите, по вот такой штуке.
[21:11.000 --> 21:12.000]  По трем параметрам.
[21:13.000 --> 21:16.000]  Первый параметр – это по длине вывода, по длине g.
[21:16.000 --> 21:25.000]  Дальше мы введем индукцию по сумме, по факту, по длине раскрытия от s до, по факту, раскрытия последствий не терминалов альфа.
[21:26.000 --> 21:33.000]  И третий параметр – это параметр, за сколько мы раскрываем символы с итого до житого.
[21:36.000 --> 21:39.000]  Давайте я напишу g, k плюс l, l.
[21:39.000 --> 21:41.000]  Тобственно, g – это понятно.
[21:42.000 --> 21:46.000]  Здесь, скажем так, длина полного вывода.
[21:51.000 --> 21:52.000]  Нет.
[21:54.000 --> 21:56.000]  До житого символа.
[22:00.000 --> 22:02.000]  А вот это вывод от итого до житого.
[22:02.000 --> 22:03.000]  Ай.
[22:09.000 --> 22:10.000]  А?
[22:12.000 --> 22:13.000]  И вот оно.
[22:15.000 --> 22:17.000]  То есть, за сколько мы выводим альфа?
[22:19.000 --> 22:21.000]  Ну что, поехали базу проверять.
[22:22.000 --> 22:23.000]  Ну что, поехали.
[22:24.000 --> 22:25.000]  Ну что, поехали.
[22:26.000 --> 22:27.000]  Ну что, поехали.
[22:28.000 --> 22:29.000]  Ну что, поехали.
[22:29.000 --> 22:31.000]  Ну что, поехали базу проверять.
[22:34.000 --> 22:35.000]  Что?
[22:36.000 --> 22:37.000]  Какие-то вопросы?
[22:41.000 --> 22:44.000]  Индукция по тройке или к графическому порядку?
[22:46.000 --> 22:50.000]  То есть, если первое меньше второе, то сначала используется первое.
[22:51.000 --> 22:52.000]  Сначала по первому, потом по второму.
[22:53.000 --> 22:54.000]  При равенстве первых используем по второму.
[22:55.000 --> 22:57.000]  При равенстве вторых используем третий.
[22:58.000 --> 22:59.000]  А?
[23:05.000 --> 23:06.000]  Ага.
[23:09.000 --> 23:11.000]  Так, скажите, база какая будет?
[23:16.000 --> 23:17.000]  0,0,0.
[23:24.000 --> 23:26.000]  Так, давайте напишем, что у нас получается.
[23:27.000 --> 23:28.000]  Значит, из этого штриха,
[23:30.000 --> 23:33.000]  за ноль шагов мы выводим
[23:36.000 --> 23:39.000]  В0, И, А, С.
[23:40.000 --> 23:43.000]  Дальше за один шаг мы это раскрываем.
[23:47.000 --> 23:49.000]  Альфа, точка бета.
[23:50.000 --> 23:51.000]  Альфа, бета, С.
[23:52.000 --> 23:53.000]  И дальше за ноль шагов.
[23:54.000 --> 23:55.000]  Опять же, подчеркну.
[23:58.000 --> 23:59.000]  В0, И.
[24:01.000 --> 24:02.000]  Мы раскрываем.
[24:03.000 --> 24:04.000]  Что?
[24:10.000 --> 24:11.000]  А что должно быть?
[24:13.000 --> 24:14.000]  А, В, И, ноль.
[24:16.000 --> 24:17.000]  А?
[24:18.000 --> 24:19.000]  Ну да, сейчас будет два нуля.
[24:20.000 --> 24:21.000]  Я просто формально выписываю это все дело.
[24:23.000 --> 24:24.000]  Так, ну давайте рассуждать.
[24:24.000 --> 24:26.000]  Значит, первое, что мы понимаем с вами,
[24:27.000 --> 24:29.000]  вот из вот этого, что А равняется штрих.
[24:33.000 --> 24:36.000]  Си равняется Эпсилон и равняется нулю.
[24:39.000 --> 24:40.000]  Да?
[24:41.000 --> 24:42.000]  Логично.
[24:44.000 --> 24:45.000]  Дальше.
[24:46.000 --> 24:48.000]  И при этом у нас G равняется нулю.
[24:49.000 --> 24:51.000]  Так, давайте вот здесь раскроем.
[24:51.000 --> 24:52.000]  Так, Си, ноль.
[24:53.000 --> 24:54.000]  Ага, смотрите.
[24:55.000 --> 24:58.000]  Дальше мы за один раз раскрываем наше правило.
[24:59.000 --> 25:07.000]  Это значит, что альфа, бета это на самом деле не что иное как С.
[25:08.000 --> 25:11.000]  Потому что единственное правило, которое у нас существует в правиле,
[25:12.000 --> 25:15.000]  из вывода С штрих, из С штриха это С штрих С.
[25:15.000 --> 25:18.000]  То есть, у нас есть единственное правило, что из Д штриха мы в ОМС.
[25:19.000 --> 25:21.000]  Поэтому у нас получается, что вывод вот такой.
[25:22.000 --> 25:24.000]  То есть, что у нас в левой части это С штрих.
[25:25.000 --> 25:26.000]  Давайте напишем у нас.
[25:30.000 --> 25:31.000]  Прилежит правил нашей грамматики, да?
[25:32.000 --> 25:34.000]  А дальше смотрите, что мы понимаем.
[25:35.000 --> 25:38.000]  Мы понимаем, что из альфа выводятся в выводе С штриха.
[25:39.000 --> 25:42.000]  То есть, у нас есть единственное правило, что из Д штриха мы в ОМС.
[25:42.000 --> 25:43.000]  Но мы не понимаем.
[25:44.000 --> 25:49.000]  Мы понимаем, что из альфа выводится в 00 равняется С.
[25:50.000 --> 25:52.000]  Из этого будет следовать, что в равняется С.
[25:56.000 --> 25:58.000]  А теперь смотрите чудеса.
[25:59.000 --> 26:02.000]  Нам нужно доказать, что если у нас встретился такой вывод,
[26:03.000 --> 26:05.000]  то какая ситуация должна существовать?
[26:06.000 --> 26:11.000]  У нас должна существовать корректная ситуация в алгоритме.
[26:13.000 --> 26:15.000]  Вместо А у нас подставляется С.
[26:16.000 --> 26:18.000]  Вместо альфа у нас подставляется эпсилон.
[26:19.000 --> 26:20.000]  Точка остается здесь.
[26:21.000 --> 26:22.000]  Вместо бета подставляется С.
[26:23.000 --> 26:24.000]  00.
[26:25.000 --> 26:27.000]  То есть, у нас должна быть ситуация,
[26:28.000 --> 26:32.000]  из С штрих выводится точка С.
[26:33.000 --> 26:34.000]  А такая ситуация у нас есть?
[26:37.000 --> 26:38.000]  Да.
[26:39.000 --> 26:40.000]  Тобственно, это начало.
[26:42.000 --> 26:44.000]  Как мы получили, что бета равно С?
[26:45.000 --> 26:47.000]  Мы понимаем, что альфа-бета это С.
[26:48.000 --> 26:53.000]  Дальше мы понимаем, что из альфы за 0 шагов мы вывели ВИТ-0.
[26:55.000 --> 26:59.000]  А это значит, что альфа выводится с символом с 0 по 00.
[27:00.000 --> 27:01.000]  То есть, у него альфа это пустое.
[27:03.000 --> 27:04.000]  За 0 шагов.
[27:12.000 --> 27:19.000]  Смотрите, мы из альфы за 0 шагов вывели С по 00.
[27:20.000 --> 27:22.000]  То есть, это то же самое.
[27:23.000 --> 27:28.000]  Вот видите, как мы начинаем очень сильно пользоваться рефлексивностью в отношениях штопора.
[27:32.000 --> 27:33.000]  Это был простой пункт.
[27:33.000 --> 27:35.000]  Следующий пункт, который нас ждет.
[27:36.000 --> 27:37.000]  Вот тут важная идея.
[27:38.000 --> 27:39.000]  Заключается следующим.
[27:41.000 --> 27:46.000]  Давайте посмотрим на последний символ альфы.
[27:49.000 --> 27:53.000]  Вот в этой цепочке, которая у нас есть, рассмотрим последний символ альфы.
[27:53.000 --> 27:55.000]  Какой может быть такой же символ альфы.
[27:56.000 --> 27:58.000]  Ж Hofr, что мы здесь собрали Singlet-1.
[28:00.000 --> 28:02.000]  Вот场я С, у нас могучаяrome.
[28:03.000 --> 28:04.000]  Аullet-1.
[28:05.000 --> 28:07.000]  Ну и вот такие hills, до Aunt Edna.
[28:10.000 --> 28:12.000]  Эк nasty.
[28:15.000 --> 28:17.000]  Да миг наאת M played Eboard-1.
[28:18.000 --> 28:20.000] videmment,剛剛 бы болтали бутылки,vettekybest BH,
[28:20.000 --> 28:26.440]  Какой он может быть?
[28:26.440 --> 28:27.440]  Ваши варианты.
[28:27.440 --> 28:38.280]  Да, давайте я их правильно расставлю в качестве приоритетов,
[28:38.280 --> 28:40.360]  потому что тут надо правильно понять.
[28:40.360 --> 28:41.640]  Во-первых, это может быть буква.
[28:41.640 --> 28:52.120]  Второе, что это может быть?
[28:52.120 --> 28:53.280]  Это может быть пустое слово.
[28:53.280 --> 28:59.240]  Третье, это какой-то не терминал.
[28:59.240 --> 29:09.600]  Рубрика «Интуиция», какое правило из каждых мы будем
[29:09.600 --> 29:12.440]  выводить, будем искать с вами.
[29:12.440 --> 29:18.760]  То есть, каждое из этих случаев будет соответствовать
[29:18.760 --> 29:20.560]  появлению в каком-то правиле.
[29:20.560 --> 29:24.680]  Как вы думаете, если последний символ альфа, терминал,
[29:24.680 --> 29:27.680]  то это что будет?
[29:27.680 --> 29:30.120]  Это будет скан.
[29:30.120 --> 29:35.600]  Если эпсилон, это предикт, вот видите, точка здесь,
[29:35.600 --> 29:40.880]  а если терминал, то будем искать комплит.
[29:40.880 --> 29:43.880]  Да, именно так.
[29:43.880 --> 29:44.880]  Давайте напишем.
[29:44.880 --> 29:52.580]  Мы можем сказать, что здесь у нас будет а равно а штрихно
[29:52.580 --> 30:00.080]  получается b, здесь у нас будет а равно эпсилон а
[30:00.080 --> 30:01.080]  штрихно b.
[30:01.080 --> 30:06.800]  Ну и здесь надо уже будет разбирать три возможных
[30:06.800 --> 30:07.800]  случая.
[30:07.800 --> 30:10.800]  Итак, первый случай.
[30:10.800 --> 30:15.920]  Альфа штрих равняется b, альфа штрих равняется
[30:15.920 --> 30:31.560]  альфа штрих на b.
[30:31.560 --> 30:37.280]  Значит, смотрите, что мы с вами понимаем?
[30:37.280 --> 30:42.680]  Мы с вами понимаем, что если у нас новый символ появляется
[30:42.680 --> 30:46.200]  таким, то нам нужно каким-то образом получить предыдущий
[30:46.200 --> 30:47.200]  вывод.
[30:47.200 --> 30:49.600]  И тогда мы можем с вами написать.
[30:49.600 --> 30:51.080]  Давайте я напишу это все дело.
[30:51.080 --> 30:52.080]  Так, заказ символов.
[30:52.080 --> 30:56.200]  Мы выводим символ с нулевого паитой.
[30:56.200 --> 31:07.320]  Дальше у нас будет альфа апси за один шаг в нулевой
[31:07.320 --> 31:16.560]  и, значит, альфа, давайте я сразу раскрою, альфа штрих
[31:16.560 --> 31:22.600]  бета, а нет, нельзя раскрывать, а можно раскрывать, бета
[31:22.600 --> 31:23.600]  апси.
[31:23.600 --> 31:29.560]  Ну и дальше у нас с вами получается еще какой-то
[31:29.560 --> 31:30.560]  вывод.
[31:30.560 --> 31:35.000]  Значит, смотрите, что мы понимаем с вами?
[31:35.000 --> 31:39.080]  Мы с вами понимаем, во-первых, что из альфа штрих бета
[31:39.080 --> 31:41.320]  будет выводиться символ с итово пожитый.
[31:41.320 --> 31:56.320]  Да, ой, из альфа штрих бета, это просто по тому, как этот
[31:56.320 --> 32:00.000]  вывод появился, правая часть.
[32:00.000 --> 32:03.240]  Ага, давайте сделаем из этого два вывода.
[32:03.480 --> 32:04.480]  Символ номер первый.
[32:04.480 --> 32:08.840]  Из альфа штрих выводится символ с итово пожитый минус
[32:08.840 --> 32:09.840]  первый.
[32:09.840 --> 32:10.840]  Логично?
[32:10.840 --> 32:19.280]  Второй вывод, который можно сделать, g-ты символ нашего
[32:19.280 --> 32:20.280]  слова равен b.
[32:20.280 --> 32:21.280]  Да?
[32:21.280 --> 32:22.280]  Хорошо.
[32:22.280 --> 32:32.760]  Так, а теперь смотрите, мы можем для…
[32:33.280 --> 32:34.280]  А?
[32:34.280 --> 32:35.280]  Ну да.
[32:35.280 --> 32:36.280]  Ох ты.
[32:36.280 --> 32:37.280]  Мачесная.
[32:37.280 --> 32:38.280]  Да, g-1.
[32:38.280 --> 32:39.280]  Погласен.
[32:39.280 --> 32:53.560]  Так, тогда смотрите, для g-1 k плюс l и l мы можем применить
[32:53.560 --> 32:54.560]  предположение индукции.
[32:54.560 --> 33:03.240]  И тогда у нас существует ситуация вида, смотрите,
[33:03.240 --> 33:17.680]  из а стрелочка альфа штрих точка b бета и g-1.
[33:17.800 --> 33:23.600]  Пользуемся предположением индукции то, что вот у нас
[33:23.600 --> 33:26.160]  есть вот этот вот вывод, только здесь он был с итово
[33:26.160 --> 33:28.120]  пожитый символ, а здесь он с итово пожитый минус
[33:28.120 --> 33:29.120]  первый.
[33:29.120 --> 33:35.760]  Так, а теперь смотрите, фокус.
[33:35.760 --> 33:39.120]  Объединяем эти два условия, то есть мы, во-первых, понимаем,
[33:39.120 --> 33:43.360]  что g-ты минус первый символ это b, а вот этот вывод такой.
[33:43.360 --> 33:44.360]  Вопрос.
[33:44.360 --> 33:48.400]  Вот здесь появляется правило вот такое вот, а стрелочка
[33:48.400 --> 33:56.880]  альфа штрих бета точка b и g, кто нам разрешает сделать
[33:56.880 --> 33:58.880]  такой вывод?
[33:58.880 --> 33:59.880]  Scan.
[33:59.880 --> 34:00.880]  Scan позволяет нам сделать такой вывод.
[34:00.880 --> 34:11.240]  Хитро получается, да?
[34:11.240 --> 34:14.160]  То есть мы воспользуемся первым переходом по нашей
[34:14.160 --> 34:15.160]  алгоритме.
[34:15.160 --> 34:16.160]  Ещё раз.
[34:16.160 --> 34:20.440]  Мы делаем вывод, выписываем предположение.
[34:20.440 --> 34:27.120]  Так, секунду, только пока что параметры представились.
[34:27.120 --> 34:34.960]  Так, то есть вот такие вот ситуации мы пытаемся с
[34:34.960 --> 34:37.880]  вами находить в нашем алгоритме, доказать нашему алгоритму.
[34:37.880 --> 34:40.880]  Так.
[34:41.880 --> 34:44.880]  Да.
[34:52.880 --> 34:54.880]  Да.
[34:54.880 --> 34:58.320]  А потому что, смотрите, вот получается следующая
[34:58.320 --> 35:04.880]  вещь, что поскольку у нас с вами правило, какое у нас
[35:04.880 --> 35:07.880]  было?
[35:07.880 --> 35:16.880]  А стрелочка альфа штрих b бета, да?
[35:16.880 --> 35:19.880]  То есть у нас именно правило такое имеет вид.
[35:19.880 --> 35:23.880]  То есть это я объясняю, почему l такое.
[35:23.880 --> 35:27.880]  Смотрите, вот эта вот бета, которая у нас находится,
[35:27.880 --> 35:29.880]  она дальше раскрываться никак не будет.
[35:29.880 --> 35:32.880]  Поэтому количество раскрытия из альфа штрих бета будет
[35:32.880 --> 35:36.880]  ровно такое же, как количество раскрытия из альфа штрих.
[35:36.880 --> 35:39.880]  Потому что b это буква, а у нас грамматика контекста
[35:39.880 --> 35:41.880]  свободная.
[35:41.880 --> 35:42.880]  Вот.
[35:42.880 --> 35:44.880]  А при этом вот все, что было до родителя, мы никаким
[35:44.880 --> 35:47.880]  образом не портили.
[35:47.880 --> 35:52.880]  Поэтому k будет тем же самым.
[35:52.880 --> 35:55.880]  Ну да, тут даже не важно, сколько здесь стояло, все
[35:55.880 --> 36:00.880]  равно этот первый параметр нас перебивает.
[36:00.880 --> 36:01.880]  Хорошо.
[36:01.880 --> 36:04.880]  Второй переход.
[36:06.880 --> 36:08.880]  Давайте рассмотрим второй случай.
[36:08.880 --> 36:09.880]  Он такой.
[36:09.880 --> 36:12.880]  Сейчас на слайде будет подкрепительная картинка,
[36:12.880 --> 36:15.880]  без которой будет очень сложно разобраться.
[36:24.880 --> 36:25.880]  А?
[36:30.880 --> 36:31.880]  Так.
[36:32.880 --> 36:33.880]  G.
[36:36.880 --> 36:38.880]  Неужели мы хотим перерыв устроить?
[36:42.880 --> 36:44.880]  Давайте я попробую это.
[36:44.880 --> 36:48.880]  Я, конечно, не эксперт в орудовании этим всем делом,
[36:48.880 --> 36:51.880]  но давайте...
[36:51.880 --> 36:54.880]  Просто она сейчас будет размазней эта доска.
[36:59.880 --> 37:00.880]  Ага.
[37:02.880 --> 37:03.880]  Да.
[37:06.880 --> 37:07.880]  Чего?
[37:08.880 --> 37:09.880]  Да.
[37:24.880 --> 37:25.880]  Да.
[37:31.880 --> 37:32.880]  Да, да, да.
[37:32.880 --> 37:35.880]  Ну вот это одно из немного доказательств, в которых
[37:35.880 --> 37:37.880]  нужно именно понимать, типа, что делать.
[37:42.880 --> 37:43.880]  Нет.
[37:45.880 --> 37:46.880]  Параметром, да?
[37:46.880 --> 37:47.880]  Да.
[37:47.880 --> 37:48.880]  Значит, смотрите.
[37:48.880 --> 37:49.880]  Давайте начнем...
[37:49.880 --> 37:51.880]  А, тут картинки сразу.
[37:51.880 --> 37:52.880]  Давайте посмотрим на картинки.
[37:52.880 --> 37:55.880]  Эгей, смотрите.
[37:55.880 --> 38:00.880]  Вот у нас вот такой вот вывод есть.
[38:00.880 --> 38:01.880]  Да.
[38:01.880 --> 38:04.880]  То есть за как шагов мы раскрыли так, за один шаг мы раскрыли так.
[38:06.880 --> 38:10.880]  А дальше смотрите, что у нас происходит.
[38:10.880 --> 38:14.880]  Давайте зафиксируем количество шагов,
[38:14.880 --> 38:18.880]  в котором мы раскрывали B.
[38:18.880 --> 38:20.880]  То есть смотрите, что мы понимаем.
[38:20.880 --> 38:24.880]  Мы с вами понимаем, что альфа штрих бета...
[38:25.880 --> 38:28.880]  Давайте я это буду писать, потому что...
[38:31.880 --> 38:34.880]  Значит, некоторый подкрепительный факт.
[38:34.880 --> 38:35.880]  Значит...
[38:38.880 --> 38:39.880]  За как шагов...
[38:40.880 --> 38:42.880]  Кстати, можно картинки рисовать на колоке?
[38:42.880 --> 38:44.880]  Это даже это.
[38:53.880 --> 38:54.880]  Так.
[38:54.880 --> 38:55.880]  Значит, смотрите.
[38:55.880 --> 39:00.880]  За один шаг мы раскрываем альфа штрих бета.
[39:00.880 --> 39:01.880]  Да.
[39:01.880 --> 39:08.880]  И потом за L шагов мы это раскрываем символом с Итова Дожитой.
[39:11.880 --> 39:12.880]  Ага.
[39:12.880 --> 39:13.880]  Это наше предположение индукция.
[39:14.880 --> 39:15.880]  Да.
[39:15.880 --> 39:21.880]  Ну, тогда мы можем сказать, что пусть у нас альфа штрих,
[39:21.880 --> 39:25.880]  за какое-то количество шагов тогда, за T шагов,
[39:26.880 --> 39:29.880]  может раскрыть символы с какого-то с Итова Попетой,
[39:31.880 --> 39:38.880]  а бета тогда за один шаг раскроется в какой-то не терминал гамма,
[39:38.880 --> 39:41.880]  а за количество шагов L минус P минус 1...
[39:42.880 --> 39:44.880]  Ой, сколько там?
[39:44.880 --> 39:46.880]  L минус T минус 1.
[39:47.880 --> 39:50.880]  Будет раскрывать символы с Иппетова Дожитой.
[39:51.880 --> 39:52.880]  Ага.
[39:56.880 --> 39:57.880]  Так.
[39:57.880 --> 39:59.880]  Теперь самое сложное.
[39:59.880 --> 40:03.880]  Смотрите, здесь надо выписать, заметить две картинки.
[40:04.880 --> 40:10.880]  То есть, во-первых, нам нужно заметить, почему бета-стрелочка-гамма-точка
[40:10.880 --> 40:18.880]  будет являться ситуацией, которая у нас уже появилась в алгоритме.
[40:19.880 --> 40:23.880]  Для этого нам нужно нарисовать эту картинку целиком.
[40:25.880 --> 40:28.880]  И я попытаюсь это пояснить.
[40:33.880 --> 40:36.880]  О, кстати, доска нормально стирает так-то.
[40:37.880 --> 40:39.880]  Чуть не доска, а это.
[40:43.880 --> 40:45.880]  Альфа штрих бета.
[40:45.880 --> 40:52.880]  Дальше, значит, у нас вот это за Т шагов раскрывает символ Иппетова Дожитого.
[40:53.880 --> 40:54.880]  Ой.
[40:54.880 --> 40:56.880]  А еще, я кажется...
[40:56.880 --> 40:58.880]  А, нет, все нормально.
[40:58.880 --> 41:00.880]  С Иппетова Догатой.
[41:00.880 --> 41:03.880]  А вот это вот раскрывается за один шаг.
[41:05.880 --> 41:07.880]  Блин, я всегда забываю.
[41:10.880 --> 41:11.880]  А, по этому.
[41:11.880 --> 41:12.880]  Вот.
[41:12.880 --> 41:16.880]  А гамма за L-T-1 шаг.
[41:24.880 --> 41:29.880]  И тут возникает мем про то, что в русской и английской раскладке одна и даже буква
[41:29.880 --> 41:32.880]  по написанию находится на одном и том же месте.
[41:35.880 --> 41:36.880]  Так.
[41:36.880 --> 41:38.880]  Значит, смотрите.
[41:38.880 --> 41:41.880]  Рубрика «Собираем конструктор».
[41:41.880 --> 41:44.880]  Значит, давайте я на картинке это поясню.
[41:45.880 --> 41:48.880]  Вот давайте выделим вот эту вот вещь.
[41:56.880 --> 42:01.880]  Колька шагов вывода в обмеденном месте?
[42:02.880 --> 42:04.880]  K плюс 1 плюс T.
[42:04.880 --> 42:06.880]  K плюс 1 плюс T.
[42:07.880 --> 42:09.880]  Значит, давайте напишу так.
[42:09.880 --> 42:11.880]  Для B стрелочка гамма.
[42:11.880 --> 42:13.880]  Значит, первый параметр.
[42:13.880 --> 42:16.880]  Позиция, которая здесь, это g.
[42:16.880 --> 42:18.880]  Дальше.
[42:18.880 --> 42:22.880]  У нас идет K плюс T плюс 1.
[42:23.880 --> 42:25.880]  Плюс...
[42:25.880 --> 42:27.880]  Смотрите.
[42:27.880 --> 42:29.880]  L к чему равняется в нашем случае?
[42:29.880 --> 42:33.880]  Количество шагов вывода с Итого Дожитого.
[42:35.880 --> 42:39.880]  Плюс L минус T минус 1.
[42:43.880 --> 42:47.880]  И здесь количество шагов L минус T минус 1.
[42:50.880 --> 42:54.880]  То есть вот это вот сколько мы вывели до не терминала B.
[42:54.880 --> 42:57.880]  А вот это сколько раскрыли это?
[42:57.880 --> 42:59.880]  После не терминала B.
[42:59.880 --> 43:01.880]  Так, чему это равняется?
[43:01.880 --> 43:03.880]  Это равняется g.
[43:03.880 --> 43:04.880]  K плюс L.
[43:04.880 --> 43:08.880]  Видите, индукция по второму параметру не прокатывает.
[43:10.880 --> 43:13.880]  Потому что оно то же самое, равенство.
[43:13.880 --> 43:16.880]  А здесь уже будет L минус T минус 1.
[43:16.880 --> 43:18.880]  Которая меньше, чем L.
[43:24.880 --> 43:25.880]  Ага.
[43:25.880 --> 43:29.880]  А это значит, что для этой штуки мы можем написать правила.
[43:30.880 --> 43:37.880]  Что у нас существует ситуация из B стрелочка гамма точка KG.
[43:43.880 --> 43:44.880]  Ага.
[43:45.880 --> 43:47.880]  Такие, что за...
[43:50.880 --> 43:54.880]  Тут вспоминаются рекламы этого, зарубежных курсов из Мытища.
[43:55.880 --> 43:58.880]  Это легендарный мем, ну и вы чего?
[44:02.880 --> 44:04.880]  Ладно, в конце лекции покажу.
[44:07.880 --> 44:08.880]  Полное видео.
[44:10.880 --> 44:13.880]  Так, значит теперь смотрите дальше.
[44:17.880 --> 44:19.880]  Здесь еще второй вывод нужен.
[44:20.880 --> 44:29.880]  Утверждается, что есть еще вывод, альфа стрелочка альфа штрих точка B бета.
[44:31.880 --> 44:33.880]  И G. И KT.
[44:36.880 --> 44:38.880]  Откуда мы вот это получаем?
[44:39.880 --> 44:42.880]  Тут, к сожалению, нет маркеров другого цвета.
[44:43.880 --> 44:46.880]  Но тут, смотрите, параметры будут такие.
[44:46.880 --> 44:48.880]  Во-первых, здесь будет параметр K.
[44:49.880 --> 44:51.880]  С которым есть проблема.
[44:51.880 --> 44:53.880]  То есть, если K меньше G, то все замечательно.
[44:53.880 --> 44:55.880]  Проходит индукционный переход.
[44:55.880 --> 44:57.880]  Но если K равнивается G, нам надо двигаться дальше.
[44:59.880 --> 45:03.880]  Количество шагов вывода от, получается, родителя до вот этого A.
[45:03.880 --> 45:04.880]  Это K.
[45:05.880 --> 45:06.880]  Плюс...
[45:09.880 --> 45:12.880]  Плюс количество шагов раскрытия вот этого терминала альфа.
[45:12.880 --> 45:13.880]  K плюс T.
[45:17.880 --> 45:18.880]  И T.
[45:19.880 --> 45:20.880]  Так.
[45:27.880 --> 45:28.880]  Да.
[45:32.880 --> 45:33.880]  Вот так, да?
[45:34.880 --> 45:35.880]  Вот так.
[45:36.880 --> 45:39.880]  Итак, смотрите, то есть у нас либо G меньше K.
[45:40.880 --> 45:42.880]  Ой, наоборот, G больше K.
[45:42.880 --> 45:44.880]  Либо, если у нас K равняется G.
[45:44.880 --> 45:45.880]  Так, здесь P, да.
[45:46.880 --> 45:47.880]  Вот так.
[45:48.880 --> 45:51.880]  Смотрите, то есть, либо у нас P меньше, чем G.
[45:52.880 --> 45:56.880]  Либо P равняется G, тогда нам нужно двигаться по второму параметру.
[45:56.880 --> 46:00.880]  А K плюс T, мы видим, что с вами меньше, чем K плюс L.
[46:04.880 --> 46:09.880]  Да, потому что в L правил, вот этого вывода входит, в том числе, T правил.
[46:09.880 --> 46:15.880]  Ну а тогда из вот этих двух правил мы получаем, что у нас альфа...
[46:17.880 --> 46:18.880]  Альфа штрих бета.
[46:19.880 --> 46:20.880]  Точка бета.
[46:24.880 --> 46:25.880]  И G.
[46:27.880 --> 46:28.880]  О комплит.
[46:30.880 --> 46:31.880]  И вот здесь.
[46:32.880 --> 46:33.880]  И вот здесь.
[46:34.880 --> 46:35.880]  И вот здесь.
[46:36.880 --> 46:37.880]  О комплит.
[46:45.880 --> 46:49.880]  Через термины существуют выводы, здесь уже писать невозможно.
[46:51.880 --> 46:52.880]  Рисуются картинки.
[46:53.880 --> 46:55.880]  То есть мы схлопнули наш конструктор в двух местах.
[46:57.880 --> 46:58.880]  Так, это понятно.
[46:58.880 --> 46:59.880]  На колоке пока ничем.
[47:01.880 --> 47:03.880]  Поэтому мы сроки, так сказать, с ней спрашиваем.
[47:05.880 --> 47:07.880]  Ну, на колоке точно ничем.
[47:07.880 --> 47:10.880]  На экзамене можно будет пользоваться в одной теме конфекта.
[47:12.880 --> 47:13.880]  Она будет еще.
[47:16.880 --> 47:17.880]  Вот они выводы.
[47:18.880 --> 47:21.880]  Да, вот конкретный вывод еще раз, кому хочется посмотреть.
[47:21.880 --> 47:24.880]  Останавливайте на паузу, фоткайте, в общем, все что хотите.
[47:25.880 --> 47:27.880]  Следующий, третий случай.
[47:27.880 --> 47:29.880]  Альфа штрих равняется пустому слову.
[47:52.880 --> 47:53.880]  Белая доска.
[48:06.880 --> 48:08.880]  Да, да, да, блин.
[48:10.880 --> 48:13.880]  Как говорится, рейс кондицион у меня случится тогда.
[48:15.880 --> 48:16.880]  Так.
[48:21.880 --> 48:22.880]  Так, что там?
[48:22.880 --> 48:23.880]  Альфа...
[48:24.880 --> 48:25.880]  Да.
[48:26.880 --> 48:28.880]  Альфа штрих равняется епсилам.
[48:28.880 --> 48:31.880]  То есть у нас получается, с вами...
[48:31.880 --> 48:33.880]  Опять же, тут будет некоторая картинка.
[48:36.880 --> 48:37.880]  Вот такая вот.
[48:37.880 --> 48:42.880]  Давайте посмотрим, собственно, каким образом у нас был получен А.
[48:43.880 --> 48:47.880]  То есть у нас с вами, смотрите, по идее должно быть,
[48:47.880 --> 48:50.880]  из А выводится альфа-бета,
[48:51.880 --> 48:57.880]  но поскольку альфа у нас это пустое слово, то мы получаем вот такую вот ситуацию.
[48:57.880 --> 48:59.880]  Давайте я тут ее нарисую.
[49:00.880 --> 49:05.880]  Из эш-штрих мы, получается, сда, ка шагов.
[49:06.880 --> 49:08.880]  Получаем силу в нолито.
[49:10.880 --> 49:12.880]  Дальше у нас идет А.
[49:12.880 --> 49:18.880]  И дальше за один шаг мы получаем с вами что-то,
[49:19.880 --> 49:21.880]  что у нас состоит точка.
[49:21.880 --> 49:22.880]  Здесь вот у нас пустое слово.
[49:22.880 --> 49:26.880]  Я специально подчеркну вот эту вот всю вещь.
[49:26.880 --> 49:28.880]  И давайте поднимемся на шаг вверх
[49:29.880 --> 49:33.880]  и посмотрим каким образом родился у нас символ А.
[49:34.880 --> 49:38.880]  То есть там мы спускались вниз, здесь мы поднимемся вверх,
[49:38.880 --> 49:40.880]  а что значит, что у нас появился не терминал А?
[49:40.880 --> 49:43.880]  Это значит, что существует какой-то не терминал, который его породил.
[49:46.880 --> 49:51.880]  Получается вот такая картинка, что у нас сверху существует какой-то не терминал В,
[49:53.880 --> 49:55.880]  который вот тут вот висит,
[49:56.880 --> 50:00.880]  я тут тонко нарисую, и вот он порождает не терминал А.
[50:00.880 --> 50:02.880]  То есть у нас получает следующая вещь,
[50:02.880 --> 50:09.880]  то есть за штрих, за k-t-1 шаг мы породили какое-то слово с нулевого попета.
[50:11.880 --> 50:14.880]  Дальше у нас появляется какой-то не терминал В
[50:14.880 --> 50:16.880]  и некоторый С-штрих.
[50:16.880 --> 50:20.880]  Здесь за один шаг мы с вами порождаем какой-то гамма,
[50:21.880 --> 50:24.880]  и дальше у нас появляется какой-то не терминал В
[50:24.880 --> 50:26.880]  и некоторый С-штрих.
[50:26.880 --> 50:29.880]  Мы с вами порождаем какое-то гамма,
[50:29.880 --> 50:32.880]  и дальше у нас какое-то альфа дельта.
[50:34.880 --> 50:37.880]  И получается за один шаг здесь у нас получается бета,
[50:38.880 --> 50:40.880]  а здесь количество шагов чему равняется у нас?
[50:43.880 --> 50:50.880]  k-t-1, здесь получается t шагов, мы порождаем слово с этого поитой.
[50:52.880 --> 50:55.880]  Еще одна важная идея, которая есть в этом доказательстве,
[50:55.880 --> 50:58.880]  что если у вас есть какой-то не терминал и непонятно что с ним делать,
[50:58.880 --> 51:00.880]  посмотрите как он был выведен.
[51:02.880 --> 51:04.880]  Вот, мы посмотрели как он был выведен.
[51:04.880 --> 51:07.880]  Ну давайте теперь рассуждать, что мы здесь видим.
[51:07.880 --> 51:11.880]  Наша цель получить правило альфа стрелочка точка бета.
[51:12.880 --> 51:14.880]  По предикту.
[51:14.880 --> 51:16.880]  Значит, как мы его можем получить?
[51:18.880 --> 51:21.880]  Нам нужно посмотреть на вот это вот поддерево.
[51:26.880 --> 51:27.880]  Угу.
[51:29.880 --> 51:32.880]  Ну давайте представить какие у него предположения индукция.
[51:33.880 --> 51:35.880]  Собственно, здесь у нас i,
[51:36.880 --> 51:38.880]  которая равняется g в нашем случае.
[51:39.880 --> 51:40.880]  Да?
[51:44.880 --> 51:46.880]  Да, альфа равно и апсилон.
[51:47.880 --> 51:50.880]  Блин, надо еще раз поправить презентацию.
[51:50.880 --> 51:53.880]  Так, смотрите, значит здесь у нас символы совпадают.
[51:54.880 --> 51:58.880]  А теперь считаем количество суммарных выводов, которые у нас есть.
[51:59.880 --> 52:04.880]  Значит, здесь у нас получается следующая позиция.
[52:06.880 --> 52:11.880]  Первое, что здесь у нас возникает, это k-t-1+,
[52:12.880 --> 52:16.880]  позиции, из которых мы попытались вывести вот этот не терминал.
[52:16.880 --> 52:19.880]  Да, здесь, кстати, за ноль шагов мы выводим апсилон.
[52:20.880 --> 52:24.880]  Так, а хотя это неважно.
[52:25.880 --> 52:29.880]  Так, смотрите, то есть у нас получается вот для вот этого дерева,
[52:30.880 --> 52:32.880]  для вот этого дерева.
[52:33.880 --> 52:34.880]  Так, сейчас секунду.
[52:35.880 --> 52:37.880]  Вот здесь количество позиций, которые мы вывели.
[52:38.880 --> 52:42.880]  Это k-t-1, вот если мы рассмотрим вот этот вот блок.
[52:42.880 --> 52:46.880]  Плюс количество позиций, в которые мы выводим из гаммы что-то.
[52:47.880 --> 52:48.880]  Это t.
[52:51.880 --> 52:59.880]  И получается здесь количество выводов, которое у нас идет из гаммы v и g-t.
[53:00.880 --> 53:02.880]  Это количество позиций равняется t.
[53:04.880 --> 53:09.880]  Вот, при этом мы с вами понимаем, что изначально у нас коррекция,
[53:09.880 --> 53:10.880]  параметризация была такая.
[53:11.880 --> 53:12.880]  Смотрите, и равная g.
[53:13.880 --> 53:14.880]  Дальше, давайте напишу до.
[53:16.880 --> 53:19.880]  Здесь у нас было k плюс l.
[53:20.880 --> 53:22.880]  l в данном случае будет равняться нулю,
[53:23.880 --> 53:27.880]  потому что из апсилона за ноль шагов мы выводим пустое слово.
[53:29.880 --> 53:32.880]  То есть нам нужно сравнить конфигурации i и k-0.
[53:33.880 --> 53:36.880]  То есть нам нужно сравнить конфигурации i и k-0.
[53:40.880 --> 53:45.880]  И конфигурации i и k-1t.
[53:46.880 --> 53:47.880]  Какой из них больше?
[53:50.880 --> 53:51.880]  Левый или правый?
[53:54.880 --> 53:55.880]  Да, левый.
[53:55.880 --> 53:58.880]  А это значит, что вот та конфигурация, которая здесь,
[53:59.880 --> 54:01.880]  она меньше, чем текущая по индукции.
[54:02.880 --> 54:03.880]  По параметру индукции.
[54:04.880 --> 54:07.880]  Значит, по предположению индукции мы можем сказать, что у нас из...
[54:08.880 --> 54:10.880]  Получается, существует ситуация.
[54:11.880 --> 54:17.880]  B, стрелочка, гамма, точка a дельта.
[54:19.880 --> 54:21.880]  Так, a дельта.
[54:23.880 --> 54:24.880]  Господи.
[54:26.880 --> 54:29.880]  Позиция родительской точки P и...
[54:31.880 --> 54:33.880]  Дальше у нас есть позиция b...
[54:34.880 --> 54:36.880]  Есть правило a, стрелочка, бета.
[54:40.880 --> 54:43.880]  А из этого будет следовать, что по предикту...
[54:50.880 --> 54:51.880]  Существует ситуация и и.
[54:55.880 --> 54:57.880]  Ура, мы доказали с вами лему.
[55:05.880 --> 55:07.880]  Так, давайте вопросы.
[55:13.880 --> 55:15.880]  Наконец-то мы можем освободить эту часть доски.
[55:19.880 --> 55:21.880]  Нет, сама лемма нам сейчас понадобится.
[55:21.880 --> 55:25.880]  Нам нужно доказать теперь факт, что слова выводятся тогда и только тогда,
[55:26.880 --> 55:28.880]  когда алгоритм заканчивается корректно.
[55:30.880 --> 55:31.880]  А?
[55:32.880 --> 55:35.880]  А мы пока доказывали математический смысл.
[55:36.880 --> 55:37.880]  Вот это всего.
[55:38.880 --> 55:40.880]  В ходе алгоритма у нас все работает.
[55:42.880 --> 55:44.880]  Да, на самом деле, доказывается, будет в одну строчку.
[55:45.880 --> 55:47.880]  Не-не-не-не, ну стоп.
[55:48.880 --> 55:49.880]  Смотрите.
[55:50.880 --> 55:51.880]  Смотрите.
[55:55.880 --> 55:56.880]  Какая-то это факта.
[55:58.880 --> 55:59.880]  Из a штрих.
[56:00.880 --> 56:02.880]  Смотрите, за один шаг мы можем вывести s.
[56:05.880 --> 56:06.880]  Да?
[56:07.880 --> 56:08.880]  Давайте начнем так.
[56:09.880 --> 56:11.880]  Что слово лежит в языке, задаваемом грамматикой.
[56:12.880 --> 56:13.880]  Тогда и только тогда.
[56:14.880 --> 56:15.880]  А?
[56:16.880 --> 56:18.880]  Из s можно вывести...
[56:19.880 --> 56:21.880]  Во-первых, w нулевое, нулевое s.
[56:23.880 --> 56:24.880]  s.
[56:25.880 --> 56:28.880]  А дальше мы можем сказать, что за какое-то количество шагов
[56:29.880 --> 56:34.880]  мы можем вывести слово w нулевое до длины w.
[56:36.880 --> 56:38.880]  Зачем я так страшно написал это все дело?
[56:43.880 --> 56:44.880]  Да, смотрите.
[56:45.880 --> 56:46.880]  Что у нас получается?
[56:47.880 --> 56:50.880]  В нашем случае i равняется нулю, а g равняется длиной слова.
[56:57.880 --> 56:59.880]  Тогда мы можем сказать, что это эквалютно тому,
[57:00.880 --> 57:03.880]  тогда и только тогда, когда у нас существует ситуация
[57:04.880 --> 57:10.880]  из a штрих стрелочка с. 0 длина слова.
[57:15.880 --> 57:18.880]  А это верно тогда и только тогда, когда алгоритм выдает true.
[57:30.880 --> 57:32.880]  Все, теперь мы можем пользоваться алгоритмом.
[57:46.880 --> 57:47.880]  Ага.
[57:48.880 --> 57:49.880]  Да.
[57:50.880 --> 57:53.880]  Я, кстати, из-за этого диплом повсердцу по проге не получил в свое время.
[57:54.880 --> 57:56.880]  Нет, из-за похожей ситуации.
[57:59.880 --> 58:03.880]  Что у меня кое-какой w не был на быстром алгоритме.
[58:06.880 --> 58:07.880]  Который я писал.
[58:08.880 --> 58:10.880]  Какой-то корнер кейс был, который нужно было фиксить.
[58:11.880 --> 58:13.880]  Так вот, то есть мы теперь можем сказать, что ура!
[58:13.880 --> 58:15.880]  Мы доказали с вами корректность алгоритма.
[58:16.880 --> 58:20.880]  Теперь за оставшееся время нам нужно посчитать B8 точку.
[58:23.880 --> 58:24.880]  Пятая степень.
[58:29.880 --> 58:30.880]  Это прям тупая.
[58:31.880 --> 58:33.880]  Это вообще умная B8 точка.
[58:34.880 --> 58:35.880]  Значит, смотри.
[58:35.880 --> 58:36.880]  Давайте оценим.
[58:41.880 --> 58:43.880]  А симптотика нашего алгоритма,
[58:44.880 --> 58:45.880]  значит, для того, чтобы ее оценить,
[58:46.880 --> 58:49.880]  нам нужно понять, собственно, какие у нас базовые блоки есть.
[58:50.880 --> 58:52.880]  В общем, еще раз эти базовые блоки.
[58:53.880 --> 58:56.880]  А теперь давайте посчитаем, сколько всего ситуаций у нас может быть.
[58:57.880 --> 58:58.880]  Вот.
[58:59.880 --> 59:00.880]  Вот.
[59:01.880 --> 59:02.880]  Вот.
[59:02.880 --> 59:05.880]  А теперь давайте посчитаем, сколько всего ситуаций у нас может быть.
[59:13.880 --> 59:14.880]  Для конкретного G.
[59:14.880 --> 59:15.880]  Колька.
[59:16.880 --> 59:18.880]  Смотрите, у нас с вами есть A.
[59:19.880 --> 59:20.880]  Стрелочка Альфа точка Бета.
[59:21.880 --> 59:23.880]  И G, которая фиксированная.
[59:27.880 --> 59:29.880]  Вот это О длины нашего слова.
[59:30.880 --> 59:31.880]  И это А.
[59:32.880 --> 59:33.880]  А это А.
[59:34.880 --> 59:35.880]  И это А.
[59:36.880 --> 59:37.880]  И это А.
[59:38.880 --> 59:39.880]  И это А.
[59:40.880 --> 59:41.880]  И это А.
[59:42.880 --> 59:43.880]  И это А.
[59:44.880 --> 59:45.880]  И это А.
[59:46.880 --> 59:47.880]  И это А.
[59:48.880 --> 59:51.880]  А это по факту, давайте назовем U большую А G.
[59:53.880 --> 59:58.880]  Это суммарное число всех правил в правой части.
[59:59.880 --> 01:00:01.880]  То есть это назовем, сколько, грубо говоря, у вас всего буквок.
[01:00:02.880 --> 01:00:05.880]  Когда вы выписываете всю грамматику, сколько у вас всего буквок будет.
[01:00:06.880 --> 01:00:08.880]  Да, суммарная длина всех правил.
[01:00:09.880 --> 01:00:12.880]  То есть всего ситуации у нас будет то...
[01:00:14.880 --> 01:00:16.880]  На количество правил грамматики.
[01:00:19.880 --> 01:00:20.880]  Да, для конкретного G.
[01:00:21.880 --> 01:00:24.880]  То есть всего их будет квадрат на количество правил.
[01:00:26.880 --> 01:00:28.880]  Это суммарное.
[01:00:29.880 --> 01:00:30.880]  Давайте я напишу.
[01:00:36.880 --> 01:00:40.880]  Число символов правых числа.
[01:00:40.880 --> 01:00:44.880]  Число символов правых частях правил.
[01:00:51.880 --> 01:00:53.880]  Давайте и левых частях правил.
[01:01:03.880 --> 01:01:08.880]  Образно говоря, вы выписываете на бумаге все ваши правила и считаете сколько буквок написали.
[01:01:11.880 --> 01:01:15.880]  Хорошо. А теперь давайте посчитаем, сколько раз мы делаем каждую операцию.
[01:01:19.880 --> 01:01:21.880]  Помните у нас цикл был, while меняется.
[01:01:22.880 --> 01:01:25.880]  Пока у нас ситуации для G-того элемента накапливаются.
[01:01:27.880 --> 01:01:33.880]  И если грамотно это все реализовать, то оказывается можно получить оптимальную симптомику.
[01:01:33.880 --> 01:01:43.880]  Вот здесь мне надо было объявить множество дешитое, которое является множеством ситуации, у которых правый символ равняется G.
[01:01:45.880 --> 01:01:47.880]  Только здесь он появляется.
[01:01:48.880 --> 01:01:57.880]  То есть у нас мощность каждого множества это количество не терминалов, а количество правил от модуля G на длину слова.
[01:01:57.880 --> 01:02:01.880]  Так, а теперь смотрите, каким образом нам необходимо хранить ситуации.
[01:02:02.880 --> 01:02:14.880]  Мы, кажется, это обсуждали уже с вами, что если у нас с вами есть какое-то правило а стрелочка а, стрелочка альфа, там не знаю,
[01:02:14.880 --> 01:02:24.880]  C, точка бета и G, то поскольку нам надо эффективно обращаться, во-первых, к G, а во-вторых, к C,
[01:02:25.880 --> 01:02:29.880]  то давайте мы будем хранить их в множестве дешитое от символа C.
[01:02:32.880 --> 01:02:34.880]  О, от терминала или нет терминала.
[01:02:37.880 --> 01:02:40.880]  Так, чтобы быстрые ситуации не происходили.
[01:02:41.880 --> 01:02:46.880]  Так, чтобы иметь быстрый поиск к элементу.
[01:02:47.880 --> 01:02:54.880]  Более того, поскольку у грамматика у нас всегда плюс-минус одна, давайте я тут скажу, что в принципе можно сделать так,
[01:02:55.880 --> 01:02:59.880]  что поиск был за 1 через универсальную хэш-функцию либо еще каким-то образом.
[01:03:03.880 --> 01:03:04.880]  Да?
[01:03:05.880 --> 01:03:06.880]  Да.
[01:03:06.880 --> 01:03:07.880]  Фиксит, фиксит.
[01:03:08.880 --> 01:03:09.880]  Да, фиксит.
[01:03:12.880 --> 01:03:16.880]  Ну да, списочек создать, заиндексировать, все.
[01:03:17.880 --> 01:03:18.880]  Да.
[01:03:19.880 --> 01:03:24.880]  Собственно, здесь говорится, что храним правила вида таком, правую часть можно хранить в виде связанного списка
[01:03:25.880 --> 01:03:30.880]  либо как-нибудь там, для того, чтобы можно было быстро получать следующий символ, который идет за C.
[01:03:31.880 --> 01:03:33.880]  Да, это нам тоже понадобится.
[01:03:33.880 --> 01:03:41.880]  Важная вещь, что если у нас символ, в храм КЦ-правил нету точки, добавляем символ end of word,
[01:03:42.880 --> 01:03:43.880]  называем в F$.
[01:03:46.880 --> 01:03:51.880]  Можно, кстати, по-отечественному, по-патриотски, вставить символ рубль.
[01:03:54.880 --> 01:03:55.880]  Не знаю.
[01:03:55.880 --> 01:03:56.880]  Лайфхаки.
[01:03:57.880 --> 01:03:58.880]  Лайфхаки.
[01:03:59.880 --> 01:04:01.880]  Быстрее вычлите ID для каждой ситуации.
[01:04:02.880 --> 01:04:09.880]  Ну, то есть, если вы не хотите, грубо говоря, использовать unorderedMap и unorderedSet, хотя в реализации можно будет их использовать.
[01:04:11.880 --> 01:04:13.880]  Для того, чтобы алгоритм был нормальным.
[01:04:14.880 --> 01:04:15.880]  Нормальный был код.
[01:04:16.880 --> 01:04:17.880]  Читабельный.
[01:04:18.880 --> 01:04:20.880]  Ну, типа, быстро надо, надо уметь.
[01:04:20.880 --> 01:04:23.880]  Грубо говоря, за O от 1 доставать джиты от ней терминала.
[01:04:27.880 --> 01:04:28.880]  Ну, да.
[01:04:30.880 --> 01:04:31.880]  Вот.
[01:04:32.880 --> 01:04:33.880]  Ну, там меньше.
[01:04:34.880 --> 01:04:37.880]  То есть, смотрите, если хотите быстрее, то, собственно, вычлите ID.
[01:04:38.880 --> 01:04:43.880]  Если вам нужно меньше памяти, то можно через F$ делать реализацию, и оно будет работать.
[01:04:44.880 --> 01:04:45.880]  Так.
[01:04:46.880 --> 01:04:47.880]  Давайте со сканом, просто.
[01:04:47.880 --> 01:04:49.880]  Так, давайте со сканом разберемся.
[01:04:50.880 --> 01:04:52.880]  Собственно, что здесь нам надо сделать для скана?
[01:04:54.880 --> 01:04:56.880]  Вот чтобы вот такую вещь получить.
[01:05:03.880 --> 01:05:04.880]  Один переход.
[01:05:05.880 --> 01:05:12.880]  Нам нужно по факту проэтерироваться for loop'ом, for циклом, по джитая от а.
[01:05:17.880 --> 01:05:18.880]  Понятно это?
[01:05:22.880 --> 01:05:23.880]  Давайте напишу.
[01:05:23.880 --> 01:05:51.880]  Can for situation in the jitter от the jitter.
[01:05:53.880 --> 01:05:54.880]  Скан будет выглядеть вот так.
[01:05:57.880 --> 01:05:58.880]  Ну.
[01:05:59.880 --> 01:06:00.880]  Ну.
[01:06:01.880 --> 01:06:02.880]  Ну, да.
[01:06:03.880 --> 01:06:08.880]  Ну, да, поэтому джита, то есть, вот это тоже, это у нас будет список, на самом деле.
[01:06:12.880 --> 01:06:15.880]  Да, то есть, это джита от вжита, это будет список.
[01:06:16.880 --> 01:06:18.880]  То есть, джита от чего-то, это будет список.
[01:06:18.880 --> 01:06:21.880]  Да, то есть, джита от вжита, это будет список.
[01:06:22.880 --> 01:06:27.880]  То есть, джита от чего-то, это будет список элементов, список ситуаций, у которых справа после точки стоит этот символ.
[01:06:34.880 --> 01:06:35.880]  Да, конечно же.
[01:06:38.880 --> 01:06:41.880]  Конечно же, пробегаем всегда по актуальному джиту.
[01:06:41.880 --> 01:06:42.880]  А?
[01:06:45.880 --> 01:06:51.880]  Вот, смотрите, а симптотика будет в итоге для скана, для конкретной буквы, просто мощность этого множества.
[01:06:55.880 --> 01:06:56.880]  Логично.
[01:06:57.880 --> 01:07:01.880]  А мощность этого множества ограничена сверху мощности самого джитого.
[01:07:11.880 --> 01:07:12.880]  Хорошо.
[01:07:13.880 --> 01:07:14.880]  Предикт.
[01:07:16.880 --> 01:07:18.880]  Что нам нужно сделать в предикте?
[01:07:27.880 --> 01:07:28.880]  Придикт.
[01:07:30.880 --> 01:07:31.880]  Придикт.
[01:07:32.880 --> 01:07:33.880]  Придикт.
[01:07:34.880 --> 01:07:35.880]  Придикт.
[01:07:36.880 --> 01:07:37.880]  Придикт.
[01:07:38.880 --> 01:07:39.880]  Придикт.
[01:07:39.880 --> 01:07:40.880]  Придикт.
[01:07:41.880 --> 01:07:42.880]  Придикт.
[01:07:43.880 --> 01:07:44.880]  Придикт.
[01:07:45.880 --> 01:07:46.880]  Придикт.
[01:07:47.880 --> 01:07:48.880]  Придикт.
[01:07:49.880 --> 01:07:50.880]  Придикт.
[01:07:51.880 --> 01:07:52.880]  Придикт.
[01:07:53.880 --> 01:07:54.880]  Да.
[01:07:59.880 --> 01:08:04.880]  Да, нам нужно пробежаться по всем SEA терминалам и пробежаться по всем правилам,
[01:08:06.880 --> 01:08:07.880]  а?
[01:08:09.880 --> 01:08:15.880]  Нет, там нужно еще аккуратно. Вот как раз то, что вы сказали, что не надо повторяться по всеми терминалам.
[01:08:26.880 --> 01:08:30.880]  Вот, тут важно помечаем, была рассмотрена уже текущая ситуация.
[01:08:40.880 --> 01:08:44.880]  Эпсилон. Ну типа они все эпсилон порождающие.
[01:08:53.880 --> 01:08:57.880]  Да, ну квадрат именно не от длины слова.
[01:09:00.880 --> 01:09:03.880]  А, количество правил в грамматике в квадрате.
[01:09:04.880 --> 01:09:07.880]  Да, то есть здесь модуль от g в квадрате будет.
[01:09:09.880 --> 01:09:13.880]  Да, тут всякие приколы с амортиционной сложности возникают.
[01:09:18.880 --> 01:09:21.880]  Да, ну скорее всего на длина будет.
[01:09:23.880 --> 01:09:29.880]  Там по факту, смотрите, что нам нужно. Перебирать правила b-strelochka.gamma, это количество правил в нашей грамматике.
[01:09:29.880 --> 01:09:33.880]  Дальше рассматривать правила djt на b, и добавляем это правило в djt.
[01:09:34.880 --> 01:09:42.880]  При этом, смотрите, мы можем в принципе сказать следующее, что каждая новая ситуация, которую мы добавляем, она добавляет один элемент djt.
[01:09:45.880 --> 01:09:54.880]  Поэтому количество добавленных правил при помощи предикта в квадрате в квадрате в квадрате в квадрате в квадрате в квадрате в квадрате в квадрате.
[01:09:55.880 --> 01:09:59.880]  Поэтому количество добавленных правил при помощи предикта.
[01:10:00.880 --> 01:10:02.880]  А? Вопрос как?
[01:10:05.880 --> 01:10:07.880]  Ну да, там квадрат.
[01:10:25.880 --> 01:10:28.880]  А, именно одна ситуация.
[01:10:35.880 --> 01:10:38.880]  Да, смотрите, здесь идет амортизационная оценка.
[01:10:39.880 --> 01:10:41.880]  Амортизационная оценка.
[01:10:44.880 --> 01:10:46.880]  Ну да, либо амортизационная оценка.
[01:10:47.880 --> 01:10:55.880]  Смотрите, идея такая, что каждый раз, когда мы добавляем одну ситуацию, то есть когда у нас срабатывает предикт, у нас добавляется одна ситуация в djt.
[01:10:57.880 --> 01:11:04.880]  Соответственно, количество добавленных правил по предикту суммарно, у нас, напоминай, в алтру там стоит, будет равняться o от модуль gt.
[01:11:06.880 --> 01:11:10.880]  Каждый перебор такой занимает нам o от количества правил гамматики.
[01:11:12.880 --> 01:11:14.880]  Получаем o от модуль g на g квадрате.
[01:11:14.880 --> 01:11:16.880]  Так, с этой симпточкой понятно?
[01:11:19.880 --> 01:11:21.880]  Сейчас самое сложное.
[01:11:23.880 --> 01:11:26.880]  Самое толстое, самое сложное, на самом деле, с точки зрения оценки.
[01:11:27.880 --> 01:11:35.880]  Здесь важно сразу сказать, что когда мы делаем форд цикл по вот этому комплиту, важно не повторяться два раза.
[01:11:36.880 --> 01:11:38.880]  То есть не выводить одно и то же правило дважды.
[01:11:39.880 --> 01:11:40.880]  Одну и ту же ситуацию.
[01:11:41.880 --> 01:11:48.880]  Поэтому, несмотря на то, что кажется, что здесь можно написать фор по вот этому, фор по верхней части и фор по нижней части,
[01:11:49.880 --> 01:11:52.880]  если вы так напишете, вы получите четвертую степень сразу.
[01:12:00.880 --> 01:12:01.880]  Можно получить.
[01:12:02.880 --> 01:12:07.880]  Смотрите, здесь нужно оценить, когда у нас меняется верхняя часть, а когда у нас меняется нижняя часть.
[01:12:08.880 --> 01:12:11.880]  То есть когда у нас добавляется вот это правило.
[01:12:12.880 --> 01:12:14.880]  А это правило может появиться по следующим причинам.
[01:12:15.880 --> 01:12:19.880]  Либо у нас нижнее правило новое, либо у нас верхнее правило новое.
[01:12:20.880 --> 01:12:23.880]  То есть оно добавилось на текущей итерации цикла.
[01:12:24.880 --> 01:12:29.880]  Вот, поэтому нужно отслеживать аккуратно пары операций, по которым мы можем сделать.
[01:12:29.880 --> 01:12:30.880]  Значит, когда это у нас меняется?
[01:12:33.880 --> 01:12:36.880]  С отслеживанием второго не очень все сложно.
[01:12:38.880 --> 01:12:43.880]  Да, просто у нас добавляется новое правило в джитое, оно сразу попадает в кандидаты вот сюда.
[01:12:47.880 --> 01:12:48.880]  Ну да, да, да, транзитивное.
[01:12:50.880 --> 01:12:52.880]  Ну вот, тут надо аккуратно оценить, чтобы оно было за квадрат.
[01:12:53.880 --> 01:12:54.880]  Понять откуда оно за квадрат получается.
[01:12:56.880 --> 01:12:58.880]  Здесь важное, посмотрите на правила.
[01:12:59.880 --> 01:13:01.880]  Которая у нас в b-стрелочку точка гамма.
[01:13:02.880 --> 01:13:04.880]  Вот, и на самом деле смотрите, тонкий момент.
[01:13:05.880 --> 01:13:06.880]  Первое правило здесь тоже может поменяться.
[01:13:07.880 --> 01:13:10.880]  То есть оно тоже может оказаться новым, если здесь k равняется g.
[01:13:14.880 --> 01:13:17.880]  Вот, то есть такой тест можно привести, пример.
[01:13:18.880 --> 01:13:19.880]  Смотрите, почему здесь куба не получается?
[01:13:20.880 --> 01:13:22.880]  Потому что здесь транзитивное замыкание интересное.
[01:13:23.880 --> 01:13:26.880]  Правила джит, вот эти вот берутся из джитова доллар.
[01:13:30.880 --> 01:13:31.880]  Да?
[01:13:32.880 --> 01:13:34.880]  А сколько вот таких вот правил сверху?
[01:13:35.880 --> 01:13:36.880]  Как их можно оценить?
[01:13:39.880 --> 01:13:46.880]  Смотрите, у нас есть правило b-стрелочка гамма точка k, g.
[01:13:48.880 --> 01:13:50.880]  Ну, этих кажется джитое всего.
[01:13:51.880 --> 01:13:52.880]  Сверху оценка.
[01:13:52.880 --> 01:13:55.880]  А дальше, здесь нам нужно правило, откуда брать?
[01:13:58.880 --> 01:14:01.880]  Здесь нам нужно брать правило из дкт от b.
[01:14:10.880 --> 01:14:11.880]  Логично?
[01:14:13.880 --> 01:14:17.880]  Вот, сколько таких правил у нас есть?
[01:14:17.880 --> 01:14:18.880]  Логично?
[01:14:19.880 --> 01:14:25.880]  Вот, сколько таких запросов у нас будет в сумме по всему алгоритму?
[01:14:31.880 --> 01:14:32.880]  Да.
[01:14:33.880 --> 01:14:38.880]  То есть это сумма по всем джитам раз и сумма по всем дктам.
[01:14:39.880 --> 01:14:42.880]  Точнее, смотрите, вот это у нас фиксированное.
[01:14:42.880 --> 01:14:47.880]  Джитая доллар мы можем считать фиксирована мощность этого множества.
[01:14:54.880 --> 01:14:55.880]  От доллара.
[01:14:56.880 --> 01:14:58.880]  А здесь будет следующее.
[01:14:59.880 --> 01:15:06.880]  На о большое от суммы мощности дкт пока от 0 джи.
[01:15:12.880 --> 01:15:13.880]  Вот это асимптотика.
[01:15:18.880 --> 01:15:19.880]  От 0 до джи.
[01:15:25.880 --> 01:15:26.880]  Вот.
[01:15:26.880 --> 01:15:27.880]  Ну, собственно, теперь нужно оценить.
[01:15:28.880 --> 01:15:29.880]  Это все дело.
[01:15:33.880 --> 01:15:40.880]  И получается, что мощность суммы от 0 до джи, джитых, это о большое от длины словах квадрата на количество правил грамматики.
[01:15:42.880 --> 01:15:43.880]  Вот.
[01:15:44.880 --> 01:15:46.880]  А вот это как сверху оценить?
[01:16:12.880 --> 01:16:22.880]  Ну, потому что каждый из них от длины слов...
[01:16:27.880 --> 01:16:30.880]  Ну да, даже к умножить на количество правил грамматики.
[01:16:33.880 --> 01:16:34.880]  Вот.
[01:16:35.880 --> 01:16:39.880]  В основном утверждение, что это дает нам асимптотику.
[01:16:42.880 --> 01:16:43.880]  Вот такое.
[01:16:44.880 --> 01:16:45.880]  Смотрите.
[01:16:46.880 --> 01:16:47.880]  Количество правил грамматики такие.
[01:16:48.880 --> 01:16:50.880]  То есть, смотрите, что нужно тут сделать?
[01:16:51.880 --> 01:16:52.880]  Важно, что...
[01:16:53.880 --> 01:16:55.880]  Вот почему здесь не получается четвертая степень?
[01:16:56.880 --> 01:16:58.880]  Потому что по факту...
[01:17:01.880 --> 01:17:02.880]  Ну да.
[01:17:02.880 --> 01:17:05.880]  Ну, нет, тут почему асимптотика этого шага не четвертая степень?
[01:17:05.880 --> 01:17:09.880]  Потому что по джи мы, на самом деле, вычисляем k, имея наши правила грамматики.
[01:17:11.880 --> 01:17:14.880]  То есть, я здесь просто взял и умножил на о большое джи, это все дело.
[01:17:15.880 --> 01:17:18.880]  Но что здесь идет именно перебор по правилам грамматики, по факту.
[01:17:22.880 --> 01:17:31.880]  То есть, суммарное количество комбинаций, вот такие, сверху и снизу, оно будет о большое от модуль v в квадрате на модуль g в квадрате.
[01:17:32.880 --> 01:17:33.880]  Так.
[01:17:33.880 --> 01:17:35.880]  Вот это осознание есть?
[01:17:36.880 --> 01:17:38.880]  Один шаг работает, а тут все равно эти...
[01:17:39.880 --> 01:17:40.880]  Да.
[01:17:40.880 --> 01:17:41.880]  Компли...
[01:17:41.880 --> 01:17:46.880]  Суммарное количество комплей для фиксированного джи будет равняться о большое от модуль v в квадрате на модуль g в квадрате.
[01:17:48.880 --> 01:17:49.880]  Да.
[01:17:50.880 --> 01:17:52.880]  Видите, что у вас так-то написано?
[01:17:53.880 --> 01:17:54.880]  А у меня нет.
[01:17:54.880 --> 01:17:55.880]  Чего?
[01:17:55.880 --> 01:17:56.880]  А у меня нет.
[01:17:56.880 --> 01:17:57.880]  А у меня нет.
[01:17:57.880 --> 01:17:58.880]  А у меня нет.
[01:17:58.880 --> 01:17:59.880]  А у меня нет.
[01:18:00.880 --> 01:18:01.880]  Чего?
[01:18:03.880 --> 01:18:04.880]  А!
[01:18:05.880 --> 01:18:06.880]  Стоп.
[01:18:06.880 --> 01:18:07.880]  Да, согласен.
[01:18:13.880 --> 01:18:14.880]  Да.
[01:18:15.880 --> 01:18:17.880]  Кубическую я хочу получить.
[01:18:18.880 --> 01:18:21.880]  Ну вот, просто я объясняю, откуда она получается.
[01:18:23.880 --> 01:18:25.880]  Нет, квадраты не хочу получить.
[01:18:30.880 --> 01:18:34.880]  Да, мы хотим доказать, что это все-таки клубическая, не четвертая, не пятая степень.
[01:18:36.880 --> 01:18:37.880]  Ну вот...
[01:18:38.880 --> 01:18:41.880]  А почему-то все пишут алгоритмы за четвертую, за пятую степень.
[01:18:43.880 --> 01:18:44.880]  А?
[01:18:45.880 --> 01:18:46.880]  Ну вот.
[01:18:50.880 --> 01:18:51.880]  Да.
[01:18:55.880 --> 01:18:56.880]  Ну да.
[01:19:00.880 --> 01:19:03.880]  Вот с этим обычно проблемы возникают, с тем, как оно пишется.
[01:19:04.880 --> 01:19:05.880]  Теоретически это понятно.
[01:19:06.880 --> 01:19:08.880]  Теоретически-то да, а практически вот нет.
[01:19:09.880 --> 01:19:11.880]  Вот, смотрите, у нас всего...
[01:19:12.880 --> 01:19:14.880]  Значит, здесь квадрат.
[01:19:15.880 --> 01:19:19.880]  В скане у нас линия, в предикте тоже линия.
[01:19:20.880 --> 01:19:21.880]  Это на каждой житы.
[01:19:22.880 --> 01:19:24.880]  В итоге какая симптотика у нас с вами?
[01:19:24.880 --> 01:19:26.880]  Да, собственно, модуль G на...
[01:19:27.880 --> 01:19:29.880]  То есть, симптотика у нас...
[01:19:34.880 --> 01:19:35.880]  Так.
[01:19:36.880 --> 01:19:38.880]  Теперь задача со звездочкой.
[01:19:41.880 --> 01:19:45.880]  Однозначно, грамматика это та, у которой любое слово разбирается единственным образом.
[01:19:46.880 --> 01:19:49.880]  Однозначная грамматика это та, у которой любое слово разбирается единственным образом.
[01:19:54.880 --> 01:19:56.880]  Упражнения со звездочкой.
[01:19:58.880 --> 01:20:02.880]  Операция complete для однозначных грамматик будет занимать вот такую симпточку.
[01:20:10.880 --> 01:20:11.880]  Ну, плюс-минус оно...
[01:20:12.880 --> 01:20:15.880]  Там нет, там оценка сверху будет, там чуть-чуть сложнее.
[01:20:23.880 --> 01:20:24.880]  Ну, да.
[01:20:28.880 --> 01:20:30.880]  Ну, к неоднозначно становится G.
[01:20:32.880 --> 01:20:34.880]  Ну, понятно, что типа фиксированное значение.
[01:20:36.880 --> 01:20:39.880]  Ну, да, но там надо только чуть формально доказывать, а так идея верная.
[01:20:39.880 --> 01:20:45.880]  То есть, видите, оказывается, что для большого числа грамматик эта симптотика превращается в квадратичную.
[01:20:46.880 --> 01:20:51.880]  И в среднем она будет болтаться между квадратичной и кубичной по количеству операции.
[01:20:52.880 --> 01:20:54.880]  Все это зависит от числа неоднозначности в нашей грамматике.
[01:20:57.880 --> 01:21:00.880]  Вот, и тем более неоднозначно разбирается наше слово.
[01:21:01.880 --> 01:21:04.880]  То есть, в среднем получается симптотика от квадрата до куба.
[01:21:07.880 --> 01:21:08.880]  От длины слова.
[01:21:10.880 --> 01:21:15.880]  То есть, в алгоритме Коконьянгеракасами у нас точно куб, а вот здесь у нас получается от квадрата до куба.
[01:21:17.880 --> 01:21:23.880]  Вот, значит, смотрите, здесь уже получается такая вещь, что это плюс-минус один из оптимальных алгоритмов.
[01:21:24.880 --> 01:21:28.880]  То есть, для произвольной грамматики мы не сможем с вами что построить что-то более выгодное.
[01:21:29.880 --> 01:21:38.880]  Вот, но если мы сузим множество классов грамматик, которые мы рассматриваем, то можно достичь линейного алгоритма, а длины слова.
[01:21:40.880 --> 01:21:47.880]  Вот, и к этому мы еще вернемся, но не через лекцию, не даже, наверное, скорее всего даже через две лекции мы к этому вернемся.
[01:21:48.880 --> 01:21:52.880]  Вот, значит, в итоге мы доказали, что у нас алгоритм вот такой.
[01:21:53.880 --> 01:21:59.880]  Вот, и в следующей лекции мы рассмотрим такую абтракцию, как МП-автоматы, автоматы с магазинной памятью.
[01:22:00.880 --> 01:22:05.880]  И заодно выведем автомат, который позволяет проверить принадлежность слова грамматики.
[01:22:05.880 --> 01:22:14.880]  Вот, и там уже как раз будет некоторая мотивация, связанная с тем, а как построить парсер за линейное время для некоторого подножства грамматика.
