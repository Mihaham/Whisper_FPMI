[00:00.000 --> 00:11.040]  в целом стало лучше ну хорошо давайте тогда начинать во-первых я очень рад вас всех
[00:11.040 --> 00:15.400]  видеть здесь потому что вот я сказал уже я год разговаривал с компьютером это очень скучно
[00:15.400 --> 00:21.520]  ну и к тому же вряд ли вы будете собираться так каждый раз поэтому здорово что сегодня мы здесь
[00:21.520 --> 00:26.640]  надеюсь что никто не заболеет и мы весь семестр сможем видеться и разговаривать с вами вот здесь
[00:26.640 --> 00:32.560]  друг с другом сегодня у нас нулевая лекция сегодня не первая лекция сегодня нулевая лекция по курсу
[00:32.560 --> 00:37.200]  который называется конкарнси вот чтобы вас не написано было название в расписании название
[00:37.200 --> 00:42.280]  неправильное курс называется конкарнси и вот сегодня я здесь для того чтобы объяснить вам о чем
[00:42.280 --> 00:46.400]  же этот курс на самом деле что же я понимаю под этим словом и чем мы будем заниматься весь
[00:46.400 --> 00:52.400]  семестр у сегодняшней лекции есть некоторые нюанс вот начиная со следующей субботы у меня
[00:52.400 --> 00:56.240]  будет цель вам что-то объяснить вот я буду ждать что вы ничего не знаете приходится вам что-то
[00:56.240 --> 01:01.400]  рассказываю вы узнаете больше чем знали на входе сегодня у меня такой цели нет сегодня я буду
[01:01.400 --> 01:05.880]  говорить много каких-то сложных слов терминов и кажется не собираюсь их никак определять и
[01:05.880 --> 01:10.960]  пояснять но то есть что мы поймем здорово если мы не поймем то будем в течение семестра разбираться
[01:10.960 --> 01:17.160]  но просто я буду говорить те слова которые я буду объяснять вот следующие три месяца если
[01:17.160 --> 01:24.760]  мы что-то сможем схватить в этом рассказе чем больше мы сможем схватить тем нам наверное будет
[01:24.760 --> 01:29.920]  проще но если вы ничего не поймете то это не станет неким блокером мы дальше будем разбираться
[01:29.920 --> 01:38.560]  подробнее я сегодня хочу объяснить вам во первых что такое конкарнти а во вторых чем мы будем
[01:38.560 --> 01:43.840]  заниматься весь семестр потому что можно вообще разными вещами заниматься я пытаюсь объяснить что
[01:43.840 --> 01:49.480]  мне важно и что мне кажется важно делать вам чтобы вы извлекли из этого курса просто максимальную
[01:49.480 --> 01:58.400]  пользу для себя ну давайте начнем я почти весь семестр проведу на экране поэтому буду сидеть
[01:58.400 --> 02:07.800]  здесь не очень уважительно к вам все же но так нам будет удобнее ну давайте разбираться так просто
[02:07.800 --> 02:11.520]  объяснить что такое конкарнти нельзя и к сожалению привести это на русский нельзя если вам этого не
[02:11.520 --> 02:21.640]  хватает я буду так называть конкарнти окей вот перед вами картинка не очень яркая но вы
[02:21.640 --> 02:25.640]  наверное можете угадать что это там наверное написано но может быть написано мелко его не
[02:25.640 --> 02:37.640]  разглядите поэтому придется угадывать это похоже на процессор да что примечательно в этом процессоре
[02:37.640 --> 02:42.640]  вы видите но что-нибудь то есть мы конечно не понимаем какой он устроен он устроен очень
[02:42.640 --> 02:50.840]  сложно но все какое-то одинаковое то есть какие-то компоненты которые почему-то повторяются ну и вот
[02:50.840 --> 02:56.040]  если мы здесь выделим какие-то функциональные элементы в консервной блоке то мы вот видим что
[02:56.040 --> 03:03.840]  здесь есть такие вещи как ядра cpu core когда-то на заре времен этих ядер не было вот такой
[03:03.840 --> 03:10.760]  старенький процессор arm он выглядел так а сейчас он выглядит ну он выглядит гораздо сложнее
[03:10.760 --> 03:16.560]  во первых конечно же прошло много лет а вторых вот в нем появляются какие-то одинаковые элементы
[03:16.560 --> 03:22.040]  которые почему-то вот просто реплицированы скопированы это ядра и нужно объяснить почему
[03:22.040 --> 03:26.800]  они в процессорах появились потому что наш курс про многопоточность там видимо ядра будут как-то
[03:26.800 --> 03:33.520]  замешаны нужно мотивировать их появление ну вообще говоря не то чтобы они всегда были нужны вот
[03:33.560 --> 03:38.880]  вы наверное знаете про закон muro слышали про него он про транзистор про то что там примерно каждые
[03:38.880 --> 03:43.600]  два года число транзистора в процессоре удваивается но и этот закон в общем-то выполняется до
[03:43.600 --> 03:50.660]  сих пор судя по этой картинке становится все больше и больше но вы signature то чтоational уменьшают
[03:50.660 --> 03:55.900]  что их количество увеличиваются то есть не уменьшаются а важно то что их становится что
[03:55.900 --> 04:01.480]  не становиться быстрее но вообще что такое транзистор как можно об этом думать вот процессор
[04:01.480 --> 04:08.100]  на самом низком уровне он состоит ہے тех самых транзисторов таких элементарных переключателей из этих переключателей можно
[04:08.560 --> 04:13.940]  собирать какие-то логические вентилей из этих вентиля можно собирать какие то функциональные элементы из них можно собирать
[04:14.320 --> 04:19.940]  собственно весь процессор и вот этот процессор он там несколько миллиардов раз в секунду меняет свое состояние все эти
[04:20.540 --> 04:23.820]  транзисторы переключается и вот видимо происходит какое-то вычисления
[04:24.600 --> 04:31.300]  ну и о чем был закон мура о том что процессоры она был есть о том что транзисторы становятся меньше их становятся больше они становятся еще
[04:31.300 --> 04:37.960]  еще и быстрее, по крайней мере раньше так было, они быстрее переключаются, вот они
[04:37.960 --> 04:42.360]  научились переключаться два миллиарда раз в секунду, ну миллиарды раз в секунду,
[04:42.360 --> 04:51.480]  вот и до какого-то момента времени, но до середины 2000-х годов они становились
[04:51.480 --> 04:57.080]  меньше и быстрее, и вот вы можете написать программу в 2000 году, потом сесть,
[04:57.080 --> 05:01.080]  подождать два года и она станет быстрее работать, потому что больше транзисторов
[05:01.260 --> 05:04.080]  станет они будут быстрее переключаться и вычисления будут происходить тоже
[05:04.080 --> 05:08.680]  быстрее. Но с какого-то времени, это перестало работать в смысле, они
[05:08.680 --> 05:12.340]  перестали одновременно, становится и меньше, и быстрее, а не становятся меньше,
[05:12.340 --> 05:16.020]  в процессоре их становится больше, из них, можно собрать какой-то более
[05:16.020 --> 05:21.480]  сложную логику, но быстрее они больше не переключаются, вот и программы сами по
[05:21.480 --> 05:26.880]  себе ускорятся, перестали довольно неприятно. Но вот если мы инженеры, которые
[05:26.880 --> 05:30.400]  делают процессор и мы хотим делать процессор более быстрыми, то, что мы можем
[05:30.400 --> 05:34.400]  сделать, если мы не можем вычислять быстрее.
[05:34.400 --> 05:38.400]  Но вот мы можем делать что-то параллельно. Вот у нас транзистор
[05:38.400 --> 05:42.400]  становится больше в процессоре, и мы можем задублировать элементы,
[05:42.400 --> 05:46.400]  которые отвечают за вычисление, вот собственно сделать эти самые ядра.
[05:46.400 --> 05:50.400]  Вот ядро — это тот компонент процессора, который отвечает за вычисление.
[05:50.400 --> 05:54.400]  Что мы понимаем под вычислением? Ну вот такая условная картинка, есть
[05:54.400 --> 05:58.400]  процессор, у него есть какие-то регистры, и процессор вычитывает
[05:58.400 --> 06:01.400]  в памяти инструкции вашей программы и исполняет их.
[06:01.400 --> 06:05.400]  Ну инструкции могут быть самыми разными, это могут быть инструкции,
[06:05.400 --> 06:08.400]  которые выполняют какие-то репетические операции над регистрами,
[06:08.400 --> 06:12.400]  это могут быть инструкции, которые отвечают за поток управления,
[06:12.400 --> 06:16.400]  условный и безусловный переход, мы можем прыгнуть в другое место программы.
[06:16.400 --> 06:21.400]  Ну и инструкции типа MOV, которые позволяют процессору взаимодействовать с памятью,
[06:21.400 --> 06:25.400]  загрузить что-то в регистр из памяти или записать обратно.
[06:25.400 --> 06:31.400]  И мы такие компоненты дублируем. Ну а дальше мы собираемся научить программиста
[06:31.400 --> 06:34.400]  с этими ядрами работать. Нам нужно дать какой-то инструмент программиста,
[06:34.400 --> 06:37.400]  чтобы он смог писать параллельные программы.
[06:37.400 --> 06:41.400]  И так появляются потоки. Вот вы открываете документацию, скажем, по C++,
[06:41.400 --> 06:45.400]  открываете библиотеку потоков, и вот там есть класс «Поток».
[06:45.400 --> 06:49.400]  И что вы можете с помощью него написать? Вот вы можете написать такую программу.
[06:49.400 --> 06:54.400]  Запускаем два потока, создаем экземпляр класса std.read,
[06:54.400 --> 06:58.400]  передаем две функции foo и bar, и вот начиная с этого момента,
[06:58.400 --> 07:03.400]  у вас на процесс, если вам вообще это позволяет, если у него достаточно ядер,
[07:03.400 --> 07:07.400]  может параллельно исполняться функция main на одном ядре,
[07:07.400 --> 07:11.400]  на другом ядре будет запущена функция foo, на третьем функция bar.
[07:11.400 --> 07:15.400]  Ну они тут ничего полезного не делают, но могли бы.
[07:15.400 --> 07:20.400]  Вот, то есть std.read – это такой интерфейс к ядру процессора.
[07:26.400 --> 07:29.400]  Во-первых, задавайте вопросы, чтобы было сказать об этом.
[07:29.400 --> 07:32.400]  Пожалуйста, задавайте вопросы, если вам непонятно, если вам интересно,
[07:32.400 --> 07:36.400]  если я не говорю того, что вы ожидаете, то всегда спрашивайте,
[07:36.400 --> 07:38.400]  так будет полезнее для нас всех.
[07:38.400 --> 07:41.400]  Теперь отвечаем на вопрос. Программа скомпилируется, конечно,
[07:41.400 --> 07:46.400]  но в конце концов представь себе старый процессор и операционную систему.
[07:46.400 --> 07:48.400]  Вот там одно ядро в процессоре.
[07:48.400 --> 07:52.400]  Это же неверно, что ты можешь запустить только одну программу в операционной системе.
[07:52.400 --> 07:57.400]  Скорее всего, ты можешь запустить больше, но они будут просто упаковываться в это одно ядро.
[07:57.400 --> 08:00.400]  Операционная система будет запускать одну программу,
[08:00.400 --> 08:03.400]  а через 10 миллисекунд снимать ее с процессора и ставить другую.
[08:03.400 --> 08:05.400]  Собственно, multitasking.
[08:05.400 --> 08:07.400]  Вот здесь та же самая история.
[08:08.400 --> 08:10.400]  SDTrad это такое виртуальное ядро.
[08:10.400 --> 08:13.400]  Но вот как вы работаете с памятью оперативной в программе,
[08:13.400 --> 08:16.400]  вы же не думаете, что у вас там 2 гигабайта, у вас там, не знаю,
[08:16.400 --> 08:19.400]  экзобайты виртуальной памяти, более-менее бесконечная, это абстракция.
[08:19.400 --> 08:22.400]  Вот здесь то же самое. SDTrad это такая абстракция,
[08:22.400 --> 08:28.400]  которая дает программе как будто бы отдельное виртуальное ядро.
[08:28.400 --> 08:31.400]  Конечно же, целое ядро программы не получит,
[08:31.400 --> 08:35.400]  она будет делить это физическое ядро с другими программами.
[08:35.400 --> 08:39.400]  Но вы как разработчик этого не замечаете, вы исполняете функцию main
[08:39.400 --> 08:42.400]  и вы не знаете, когда планировщика операционной системы снимет ее с ядра
[08:42.400 --> 08:45.400]  и поставит другую, когда вернет вас обратно.
[08:45.400 --> 08:47.400]  Это все происходит для вас прозрачно.
[08:47.400 --> 08:51.400]  В этом и смысл абстракции, вы не наблюдаете физические ограничения.
[08:51.400 --> 08:56.400]  Так что программа скомпилируется, и если у вас ядер 4 или 8,
[08:56.400 --> 08:58.400]  то эти потоки будут работать параллельно.
[08:58.400 --> 09:01.400]  Если у вас ядро одно, то они будут чередоваться на одном ядре.
[09:01.400 --> 09:06.400]  Ну, собственно, где-то у меня про это была картинка.
[09:06.400 --> 09:08.400]  Вот какая-то такая история.
[09:08.400 --> 09:10.400]  Вот у вас 3 потока, 2 ядра,
[09:10.400 --> 09:14.400]  и они как-то перемещаются, возможно, между этими ядрами.
[09:14.400 --> 09:19.400]  Ну и какое очевидное применение для этих потоков вы можете придумать?
[09:24.400 --> 09:26.400]  Численное интегрирование.
[09:26.400 --> 09:29.400]  Обычно вы этим занимаетесь, когда приходите домой, садитесь за ноутбук.
[09:29.400 --> 09:33.400]  Да, наверное, вы можете с помощью этих потоков что-то распараллелить.
[09:33.400 --> 09:36.400]  Вот действительно можно подумать про какие-то там численные методы,
[09:36.400 --> 09:39.400]  про какое-то модулирование, вы строите там гоночный болид,
[09:39.400 --> 09:41.400]  вам нужно, наверное, динамику обчитывать.
[09:41.400 --> 09:46.400]  Или вы любите машинное обучение и там какие-то матрицы перемножаете.
[09:46.400 --> 09:48.400]  Как вам помогут ядра здесь, потоки?
[09:48.400 --> 09:53.400]  Ну, вот вы возьмете свою задачу и каким-то, ну, возможно, сложным образом
[09:53.400 --> 09:58.400]  поделите ее, мне не хватает картинки, давайте ее найдем.
[09:59.400 --> 10:01.400]  Да, конечно.
[10:08.400 --> 10:16.400]  Они могли, ну, смотри, программа, можно, я не знаю, про это ты спрашиваешь или нет,
[10:16.400 --> 10:19.400]  можно прибивать поток к ядру.
[10:19.400 --> 10:24.400]  Так можно делать, но это нужно в довольно редких случаях.
[10:24.400 --> 10:27.400]  Чаще всего это делать не нужно и о таких мелочах,
[10:27.400 --> 10:32.400]  но о таких низкоуровневых деталях думать скорее вредно для твоей программы.
[10:32.400 --> 10:35.400]  Так что нет, мы такого делать, наверное, не будем.
[10:35.400 --> 10:39.400]  И чуть позже я, наверное, лучше смогу объяснить, почему мы этого делать не хотим,
[10:39.400 --> 10:42.400]  пока это довольно сложно было бы сделать.
[10:42.400 --> 10:44.400]  Ну ладно, вернемся к потокам, к распараллеливанию.
[10:44.400 --> 10:45.400]  Что мы можем сделать?
[10:45.400 --> 10:48.400]  Мы можем вот разбить задачу вот этой синенькой квадратики на части
[10:48.400 --> 10:53.400]  и на каждую часть, каждую часть отдать своему потоку.
[10:53.400 --> 10:57.400]  И если у вас едер достаточно, то эти потоки будут исполняться параллельно
[10:57.400 --> 11:00.400]  и, там, не знаю, ваша операция, ваше учтение будет происходить,
[11:00.400 --> 11:03.400]  ну, если у вас 4 гидрата, 4 раза быстрее, если 8, то 8 раз быстрее,
[11:03.400 --> 11:07.400]  если 64, то, возможно, все 4, а возможно и меньше,
[11:07.400 --> 11:10.400]  потому что есть закон Амдала, который ограничивает параллелизм,
[11:10.400 --> 11:14.400]  потому что не все задачи идеально параллелятся.
[11:14.400 --> 11:19.400]  Но не суть, вот мы таким заниматься вообще не будем, нам это не важно.
[11:19.400 --> 11:22.400]  Мы не занимаемся параллелизмом в этом курсе.
[11:22.400 --> 11:25.400]  Наш курс называется Concurrency, а это вещь совершенно иная.
[11:25.400 --> 11:27.400]  Ну, вот параллелизм – это вот такая картинка.
[11:27.400 --> 11:29.400]  Это вот, смотрите, здесь есть щенята,
[11:29.400 --> 11:33.400]  ну, это классическая картинка из доклада RoboPike'а про Изого.
[11:33.400 --> 11:36.400]  Вот здесь есть какие-то задачи, это вот миски с едой,
[11:36.400 --> 11:39.400]  и есть щенята, которые их едят, видимо, в потоке.
[11:39.400 --> 11:41.400]  Мы хотим поговорить про такую картинку.
[11:41.400 --> 11:43.400]  Вот здесь все происходит немного иначе.
[11:43.400 --> 11:48.400]  Здесь происходит какой-то бардак, потому что задачи нам интересуют другие.
[11:48.400 --> 11:51.400]  Вот давайте посмотрим на код.
[11:55.400 --> 12:02.400]  Я не знаю, умеете ли вы читать C++ с сетевыми какими-то операциями, с сокетами,
[12:02.400 --> 12:06.400]  и уж тем более вряд ли вы знаете библиотеку ASIO, которая здесь используется.
[12:06.400 --> 12:08.400]  Но вот на что это похоже?
[12:09.400 --> 12:11.400]  Это похоже на сервер, да?
[12:11.400 --> 12:14.400]  Он, видимо, обрабатывает каких-то клиентов.
[12:14.400 --> 12:17.400]  Вот, во-первых, знаете ли вы, что такое сокет?
[12:18.400 --> 12:20.400]  Все знают, что такое сокет, да?
[12:26.400 --> 12:30.400]  Ну, хорошо, вот представьте какую-то большую компанию,
[12:30.400 --> 12:33.400]  у которой есть гигантский дата-центр на десятки тысяч машин,
[12:33.400 --> 12:35.400]  и в этом дата-центре живет какая-то распределенная система,
[12:35.400 --> 12:39.400]  какая-нибудь база данных, которая хранит все ваши письма за миллионы лет.
[12:39.400 --> 12:43.400]  И вот в этом большом здании, где эти 10 тысяч машин стоят,
[12:43.400 --> 12:46.400]  есть две отдельные машинки, находятся далеко друг от друга,
[12:46.400 --> 12:48.400]  и они хотят пообщаться друг с другом.
[12:48.400 --> 12:51.400]  Между ними есть огромное количество каких-то сетевых коробок,
[12:51.400 --> 12:54.400]  коммутаторов, все это связано в какую-то очень сложную,
[12:54.400 --> 12:56.400]  очень хитрую многомерную коммутационную фабрику.
[12:56.400 --> 12:59.400]  В общем, добраться от одной машины до другой довольно сложно.
[12:59.400 --> 13:01.400]  Но вы как программист думать об этом не хотите.
[13:01.400 --> 13:04.400]  Вам операционная система дает абстракцию прямого провода просто.
[13:04.400 --> 13:06.400]  Это называется TCP-соединение.
[13:06.400 --> 13:08.400]  И по этому прямому проводу можно в одну сторону
[13:08.400 --> 13:11.400]  управлять поток байтов и в обратную сторону получать.
[13:11.400 --> 13:15.400]  И TCP гарантирует вам, что вы получите те же байты
[13:15.400 --> 13:16.400]  в том же самом порядке.
[13:16.400 --> 13:18.400]  Ну либо соединение просто порвется.
[13:18.400 --> 13:20.400]  Вот что делает этот код?
[13:20.400 --> 13:24.400]  Он начинает слушать на некотором порту и принимает соединение.
[13:24.400 --> 13:26.400]  Вот здесь написано acceptor accept,
[13:26.400 --> 13:29.400]  и после этого вызова мы получаем очередной socket с очередным клиентом.
[13:29.400 --> 13:32.400]  Вот я не сказал socket, это конец TCP-соединения.
[13:32.400 --> 13:34.400]  По сути, это файловый дискриптер,
[13:34.400 --> 13:37.400]  который вы можете писать с помощью системного вызова write
[13:37.400 --> 13:40.400]  и читать с помощью вызова read, ну как обычно.
[13:40.400 --> 13:42.400]  Если вы работали с пайпами, то socket здесь,
[13:42.400 --> 13:45.400]  ну они, конечно, отличаются, но в первом приближении
[13:45.400 --> 13:47.400]  можно о различиях не думать.
[13:47.400 --> 13:51.400]  Ну и смотрите, что мы хотим делать с этими клиентами.
[13:51.400 --> 13:54.400]  Мы пишем echo-сервер.
[13:54.400 --> 13:56.400]  Echo-сервер – это такой бесполезный сервер,
[13:56.400 --> 14:00.400]  который получает данные от клиента и посылает вам эти данные обратно.
[14:00.400 --> 14:06.400]  То есть мы просто открываем, мы принимаем клиента,
[14:06.400 --> 14:14.400]  и мы запускаем поток, который в цикле из socket-а читает какие-то байты в буфер.
[14:14.400 --> 14:15.400]  Может быть вопрос?
[14:15.400 --> 14:16.400]  Да.
[14:16.400 --> 14:18.400]  Он же с переполнением будет?
[14:18.400 --> 14:19.400]  Переполнение чего?
[14:19.400 --> 14:24.400]  Ну при чтении вы же никак не придавите максимум в чтении.
[14:24.400 --> 14:29.400]  Ну вот эта функция buffer, она выводит размер массива статического.
[14:29.400 --> 14:34.400]  Так что я читаю не больше чем емкость этого буфера
[14:34.400 --> 14:36.400]  и пишу данные обратно.
[14:36.400 --> 14:39.400]  Но если ошибка, то я, видимо, сворачиваюсь.
[14:39.400 --> 14:43.400]  Вот не слишком полезная программа, но это такое Hello World
[14:43.400 --> 14:44.400]  сетевого программирования.
[14:44.400 --> 14:46.400]  Вот если вы хотите сетевой сервис, то вот если вы пишете
[14:46.400 --> 14:50.400]  какой-нибудь сетевой фреймворк, а мы, собственно, примерно для этого здесь собрались,
[14:50.400 --> 14:57.400]  то вот Hello World – это такой базовый пример, который можно написать.
[14:57.400 --> 15:00.400]  Чего мы от этого сервера хотим?
[15:00.400 --> 15:04.400]  Ну, видимо, мы хотим, чтобы он мог обслуживать много клиентов.
[15:04.400 --> 15:07.400]  И, видимо, все клиенты для нас равны.
[15:07.400 --> 15:11.400]  Мы хотим, чтобы они обслуживались, ну, по возможности, параллельно.
[15:11.400 --> 15:15.400]  Поэтому мы для каждого клиента запускаем поток.
[15:15.400 --> 15:20.400]  Вот мы конструируем std-thread и в нем исполняем вот такую лямду.
[15:20.400 --> 15:24.400]  Мы туда захватываем socket, и в этой лямде, в отдельном потоке
[15:24.400 --> 15:27.400]  запускаем функцию handleClient.
[15:27.400 --> 15:31.400]  Ну, вот смотрите, с одной стороны, потоки нам нужны были для того,
[15:31.400 --> 15:35.400]  чтобы что-то распараллелить, чтобы что-то делать быстрее.
[15:35.400 --> 15:39.400]  Вот мы могли умножить две матрицы там за какое-то время,
[15:39.400 --> 15:42.400]  а теперь можем умножить их там 4 раза быстрее.
[15:42.400 --> 15:44.400]  Это такое очевидное применение потоков.
[15:44.400 --> 15:47.400]  Вот здесь же потоки для чего-то другого нужны.
[15:47.400 --> 15:54.400]  Но вот мы же здесь явно ничего не ускоряем, у нас нет цели что-то ускорить.
[15:54.400 --> 16:02.400]  Мы здесь боремся не за то, чтобы клиенты обслуживались быстрее,
[16:02.400 --> 16:05.400]  а чтобы они все справедливо обслуживались просто,
[16:05.400 --> 16:09.400]  чтобы мы могли пережить такой рейд-запрос, в который у нас будет.
[16:09.400 --> 16:14.400]  И вот здесь есть много существенных различий.
[16:14.400 --> 16:17.400]  Например, когда мы говорим про распараллеливание,
[16:17.400 --> 16:19.400]  то сколько потоков разумно заводить?
[16:19.400 --> 16:22.400]  Настолько, сколько ядер, потому что если их будет больше,
[16:22.400 --> 16:25.400]  то просто операционная система будет их постоянно менять на ядрах
[16:25.400 --> 16:28.400]  и просто тратить дополнительное время, чтобы перепланировать их,
[16:28.400 --> 16:31.400]  чтобы всем отдать процессорное время.
[16:31.400 --> 16:35.400]  То есть мы сами выбираем число потоков и разумно, чтобы оно было
[16:35.400 --> 16:38.400]  сопоставимым с числом ядер.
[16:38.400 --> 16:42.400]  Здесь же в этой программе мы число потоков не выбираем.
[16:42.400 --> 16:45.400]  Число потоков зависит от того, сколько у нас будет клиентов,
[16:45.400 --> 16:49.400]  и чем больше клиентов способно такой сервер пережить,
[16:49.400 --> 16:52.400]  тем, кажется, нам будет лучше.
[16:52.400 --> 16:55.400]  Мы боремся не за скорость, мы боремся за масштабируемость,
[16:55.400 --> 16:59.400]  за то, чтобы обслуживать тысячу клиентов, 10 тысяч, 100 тысяч,
[16:59.400 --> 17:02.400]  может быть миллион клиентов.
[17:02.400 --> 17:04.400]  В чем еще существенное различие?
[17:04.400 --> 17:08.400]  В том, что потоки делают.
[17:08.400 --> 17:12.400]  Вот если мы что-то распараллеливаем, то потоки занимаются чем?
[17:12.400 --> 17:17.400]  Они занимаются какими-то вычислениями.
[17:17.400 --> 17:22.400]  Они читают из памяти, пишут память, что-то перемножают, делят, что угодно.
[17:22.400 --> 17:29.400]  Чем занимаются здесь потоки?
[17:29.400 --> 17:31.400]  Они чаще всего ничего не делают, они спят.
[17:31.400 --> 17:33.400]  То есть ждут на операциях водовывода.
[17:33.400 --> 17:38.400]  Они блокируются на чтении сокета и блокируются на запись сокета.
[17:38.400 --> 17:41.400]  Большую часть времени они не работают.
[17:41.400 --> 17:46.400]  Именно поэтому мы и надеемся упаковать вот эти потоки в небольшой число ядер.
[17:46.400 --> 17:50.400]  Мы можем запустить серверы и обслуживать 10 тысяч клиентов.
[17:50.400 --> 17:54.400]  Только потому, что вот эти 10 тысяч потоков все-таки могут улечься на 4 ядра,
[17:54.400 --> 17:57.400]  потому что большая часть потоков спит, они работают.
[17:57.400 --> 18:01.400]  Они параллельно не вычисляют, они параллельно спят.
[18:01.400 --> 18:03.400]  Но есть некоторая проблема в таком подходе.
[18:03.400 --> 18:11.400]  К сожалению, операционная система незадумана для этого.
[18:11.400 --> 18:14.400]  Во-первых, вот это и есть конкарнси.
[18:14.400 --> 18:16.400]  Это отличие от параллелизма.
[18:16.400 --> 18:21.400]  В параллелизме мы сами выбираем число потоков, делим задачу на части и что-то ускоряем.
[18:21.400 --> 18:23.400]  В конкарнси мы не выбираем число потоков.
[18:23.400 --> 18:26.400]  Мы вынуждены обслуживать каких-то клиентов столько, сколько у нас есть.
[18:26.400 --> 18:34.400]  И чем больше, тем для нас лучше.
[18:34.400 --> 18:37.400]  Так вот, утверждается, что это решение не идеально. Почему?
[18:37.400 --> 18:41.400]  Потому что в нашей задаче мы пишем эхо-сервер.
[18:41.400 --> 18:44.400]  Единица конкарнси — это клиент, это обработчик.
[18:44.400 --> 18:48.400]  Для каждого клиента должен свой обработчик, у него написана какая-то логика.
[18:48.400 --> 18:52.400]  Пока она тривиальная, но, видимо, есть приложения более сложные.
[18:52.400 --> 19:02.400]  Для операционной системы единица конкарнси — это поток или task, если говорить про ядро Linux чуть аккуратнее.
[19:02.400 --> 19:04.400]  Это единица планирования.
[19:04.400 --> 19:09.400]  Та задачка, которая ставится на ядро, исполняется 10 миллисекунд, потом с ядра снимается.
[19:09.400 --> 19:16.400]  Так вот, операционная система не заточена под то, чтобы на ней запускали миллион или сто тысяч таких обработчиков.
[19:16.400 --> 19:21.400]  Операционная система ожидает, что если вы запускаете поток, то, видимо, для того, чтобы он занимал процессор.
[19:21.400 --> 19:26.400]  Чтобы он что-то вычислял, а не для того, чтобы он прыгал туда-сюда на чтение к записи.
[19:26.400 --> 19:30.400]  И вот есть несоответствие масштаба.
[19:30.400 --> 19:34.400]  Вот скажем, вы такой код не сможете запустить на сто тысячах клиентах.
[19:34.400 --> 19:39.400]  Ну, вы упрете какой-то лимит, там библиотеки, операционные системы, но, в общем, это не слишком хорошо работает.
[19:39.400 --> 19:47.400]  В то же время вы можете написать программу не на C++, а на языке Go.
[19:47.400 --> 19:50.400]  И вот смотрите, как она устроена.
[19:50.400 --> 19:55.400]  Тут я ни в коем случае не сравниваю C++ и Go, на смысле, что лучше или хуже.
[19:55.400 --> 20:01.400]  Смотрите, вы можете не знать Go, это неважно.
[20:01.400 --> 20:05.400]  Код вы должны прочесть, потому что Go похож на C.
[20:05.400 --> 20:08.400]  Функция main, в ней тоже такой же цикл написан.
[20:08.400 --> 20:11.400]  Бесконечный цикл, где мы принимаем соединение от клиента.
[20:11.400 --> 20:15.400]  Тут вместо socket называется connection и запускаем.
[20:15.400 --> 20:18.400]  То, что называется в Go, Go-рутиной.
[20:18.400 --> 20:22.400]  И эта Go-рутина исполняет handle request.
[20:22.400 --> 20:25.400]  Go-рутина – новое слово, я не собираюсь его определять.
[20:25.400 --> 20:27.400]  Впрочем, я и поток не определял пока.
[20:27.400 --> 20:29.400]  Но, надеюсь, это на какое-то ваше интуитивное понимание.
[20:29.400 --> 20:34.400]  В первом приближении, Go-рутина для пользователей в Go неотличима от потока.
[20:34.400 --> 20:38.400]  Это не совсем справедливо, но к нюансам мы вернемся гораздо позже.
[20:38.400 --> 20:42.400]  И что делает эта Go-рутина в функции handle request?
[20:42.400 --> 20:47.400]  Она в цикле читает в тот же самый буфер, а потом пишет обратно.
[20:48.400 --> 20:53.400]  Она откладывает закрытие соединения на момент завершения функции.
[20:53.400 --> 20:58.400]  Это как рай FC++, если известно, что это.
[20:58.400 --> 21:02.400]  Код похож, да?
[21:02.400 --> 21:05.400]  Он вроде не сильно отличается от этого кода.
[21:05.400 --> 21:08.400]  Но я бы сказал, что ничем не отличается, кроме языка.
[21:08.400 --> 21:12.400]  Но почему-то этот код способен пережить 100 тысяч запросов.
[21:12.400 --> 21:15.400]  И миллион запросов способен пережить.
[21:15.400 --> 21:20.400]  Оказывается, что Go-рутина в Go – это все же не потоки.
[21:20.400 --> 21:26.400]  Go-рутина в Go – это некоторые виртуальные потоки.
[21:26.400 --> 21:32.400]  И сам язык Go занимается их планированием, а не операционной системой.
[21:32.400 --> 21:34.400]  Мы не можем довериться операционной системе.
[21:34.400 --> 21:36.400]  Операционная система не задумана для такого.
[21:36.400 --> 21:38.400]  Она планирует вычисления.
[21:38.400 --> 21:40.400]  А мы здесь планируем вот вывод.
[21:40.400 --> 21:44.400]  И поэтому в языке Go есть собственный runtime и собственный Go-рутина.
[21:44.400 --> 21:48.400]  Или, скажем, код, который мы напишем, буквально через месяц.
[21:48.400 --> 21:51.400]  Смотрите, как он выглядит.
[21:51.400 --> 21:54.400]  Тоже эхо-сервер.
[21:54.400 --> 21:56.400]  Мы принимаем в цикле клиентов.
[21:56.400 --> 22:00.400]  И мы снова запускаем какой-то поток, который выполняет handle-request.
[22:00.400 --> 22:03.400]  И в этом handle-request написано снова то же самое.
[22:09.400 --> 22:11.400]  Кажется, третих кода похожи.
[22:11.400 --> 22:15.400]  Но по крайней мере этот код на C++ написано, этот код написано на C++.
[22:15.400 --> 22:17.400]  Тут style-guide отличается.
[22:17.400 --> 22:19.400]  Немного интерфейса отличаются.
[22:19.400 --> 22:21.400]  Но, в принципе, тот же самый код.
[22:21.400 --> 22:23.400]  Вот сколько потоков использует этот код?
[22:27.400 --> 22:29.400]  Откуда такая гипотеза появилась?
[22:33.400 --> 22:35.400]  Но эта логика правильная, конечно.
[22:35.400 --> 22:38.400]  Этот код использует всего лишь один поток.
[22:38.400 --> 22:41.400]  Потому что в этом коде написан собственный планировщик.
[22:41.400 --> 22:43.400]  Который планирует собственные...
[22:43.400 --> 22:46.400]  Здесь это называлось в ГУАГ-рутины.
[22:46.400 --> 22:48.400]  А здесь у нас это будет называться Fiber.
[22:48.400 --> 22:50.400]  Но тоже какие-то виртуальные потоки.
[22:50.400 --> 22:58.400]  Это некоторый инструмент, который необходим для того, чтобы уметь обслуживать клиента в большом масштабе.
[22:58.400 --> 23:00.400]  Более-менее неограниченном масштабе.
[23:00.400 --> 23:02.400]  Мы пишем свои собственные потоки.
[23:02.400 --> 23:05.400]  Мы воспроизводим в пространстве пользователя
[23:05.400 --> 23:08.400]  некоторую часть операционной системы.
[23:08.400 --> 23:13.400]  И так делает, разумеется, не только ГУАГ.
[23:13.400 --> 23:16.400]  Потому что сетевые приложения нужно писать более-менее везде.
[23:16.400 --> 23:21.400]  Почти все, что люди сейчас пишут, они пишут с расчетом на то, что к ним по сети будут приходить запросы.
[23:21.400 --> 23:24.400]  Так что в любом современном языке такие механизмы нужны.
[23:24.400 --> 23:28.400]  Но вот есть ГУАГ, который вам предоставляет вот эти самые грутины.
[23:28.400 --> 23:33.400]  Есть, давайте я покажу вам, похожую программу на языке Rust.
[23:33.400 --> 23:34.400]  Она делает то же самое.
[23:34.400 --> 23:40.400]  Снова цикл, в нем мы снова принимаем клиентов, а потом снова запускаем что-то.
[23:40.400 --> 23:46.400]  И в цикле этой задачи мы снова читаем из socket, а потом пишем в socket.
[23:46.400 --> 23:50.400]  Но если вы Rust не знаете, то опять не страшно, потому что, кажется, слова знакомые.
[23:50.400 --> 23:52.400]  Socket, read, write, loop.
[23:52.400 --> 23:53.400]  Но есть какое-то отличие.
[23:53.400 --> 23:56.400]  Тут, смотрите, появляется какая-то точка await.
[23:56.400 --> 23:58.400]  Какое-то асинхронное ждание.
[23:58.400 --> 24:05.400]  В общем, какой-то специальный синтаксис для того, чтобы дождаться чтения socket.
[24:05.400 --> 24:13.400]  Или же, смотрите, как выглядит эхо-сервер, написанный на C++20.
[24:13.400 --> 24:15.400]  Что нам предлагают разработчики?
[24:15.400 --> 24:17.400]  Вот предлагают писать такой код.
[24:17.400 --> 24:22.400]  Тут, правда, нет обработки ошибок никакой, то есть этот код короче, чем должен быть.
[24:22.400 --> 24:27.400]  Но опять снова цикл, снова socket, read, write.
[24:27.400 --> 24:30.400]  И перед этим снова какие-то coawait.
[24:30.400 --> 24:37.400]  То есть в C++20 есть некоторый механизм, который позволяет нам делать конкурентность
[24:37.400 --> 24:39.400]  и не упираться в лимиты операционной системы.
[24:39.400 --> 24:43.400]  В языке Go у нас только такой механизм и есть.
[24:43.400 --> 24:44.400]  Грутины.
[24:44.400 --> 24:50.400]  В Rust у нас тоже есть async await и framework-tokyo.
[24:50.400 --> 24:52.400]  Да.
[25:00.400 --> 25:03.400]  Это отличный вопрос, замечательный просто.
[25:03.400 --> 25:10.400]  Вот смотрите, мы говорим, что вот такой код не масштабируется.
[25:10.400 --> 25:15.400]  Операционная система не может обслуживать такое количество клиентов в отдельных потоках.
[25:15.400 --> 25:20.400]  С другой стороны, если вы ходите на операционные системы или будете ходить, я не знаю,
[25:20.400 --> 25:25.400]  зависит от вашей программы, то скорее всего вас научат способы эффективнее.
[25:25.400 --> 25:31.400]  Вот есть E-Poll, такой событийный механизм, который позволяет обслуживать много клиентов в одном потоке.
[25:31.400 --> 25:36.400]  Но правда код, написанный на E-Poll, получается абсолютно чудовищным.
[25:36.400 --> 25:38.400]  Ну и вы сами напишите и убедитесь в этом.
[25:38.400 --> 25:43.400]  Он чудовищный вовсе не потому, что он написан на C очень низкоуровневый.
[25:43.400 --> 25:51.400]  Его можно переписать на C++, и он станет более удобно писать.
[25:51.400 --> 25:57.400]  Но все равно он вывернут наизнанку.
[25:57.400 --> 26:01.400]  Вот вы смотрели время приключений? В первом сезоне там появляется Magic Man.
[26:01.400 --> 26:05.400]  Ему на руку садится голубь. Не помните, что дальше происходит?
[26:05.400 --> 26:07.400]  Но я пришлю в чатик потом ссылку.
[26:07.400 --> 26:10.400]  В общем, этот код вывернут наизнанку просто.
[26:10.400 --> 26:12.400]  У вас здесь нет какого-то понятного цикла.
[26:12.400 --> 26:15.400]  Вот вы пишете здесь код, и у вас есть простой цикл FOR.
[26:15.400 --> 26:18.400]  Вы в нем читаете и пишете. Сразу понятно, что происходит.
[26:18.400 --> 26:22.400]  И также такой же код вы пишете в GO.
[26:22.400 --> 26:28.400]  Такой же код вы пишете в REST.
[26:28.400 --> 26:32.400]  Такой же код вы пишете с циклом в C++20.
[26:32.400 --> 26:36.400]  Где же он? Вот здесь вот.
[26:36.400 --> 26:40.400]  А если вы пишете через E-POL, то почему-то все разрывается,
[26:40.400 --> 26:42.400]  и никакого внятного цикла нет.
[26:42.400 --> 26:48.400]  Есть какая-то странная цепочка из разорванных фрагментов,
[26:48.400 --> 26:50.400]  которые перепланируются.
[26:50.400 --> 26:52.400]  Это не похоже на цикл WHILE.
[26:52.400 --> 26:55.400]  Здесь просто нет нигде цикла WHILE.
[26:59.400 --> 27:02.400]  Тем не менее, операционная система для того, чтобы делать эффективный вывод,
[27:02.400 --> 27:06.400]  дает вам именно этот самый E-POL и событийный механизм.
[27:06.400 --> 27:09.400]  Так вот, как же вы думаете,
[27:09.400 --> 27:13.400]  GO умудряется справляться с миллионом соединений в одном потоке?
[27:13.400 --> 27:19.400]  Как мы собираемся делать это тоже в одном потоке с помощью некоторых файберов?
[27:19.400 --> 27:21.400]  Но ровно так и собираемся.
[27:21.400 --> 27:26.400]  Просто этот E-POL нигде наружу не торчит, и код вправлен обратно.
[27:26.400 --> 27:29.400]  То есть это выглядит удобно.
[27:29.400 --> 27:32.400]  Это удобно писать, но это эффективно работает.
[27:32.400 --> 27:37.400]  И вот мы с вами хотим как раз в этом семестре, в этом курсе научиться,
[27:37.400 --> 27:43.400]  как можно эффективно, как можно удобно описывать какие-то конкурентные активности в коде,
[27:43.400 --> 27:48.400]  и при этом не жертвовать эффективностью, не жертвовать масштабируемостью.
[27:48.400 --> 27:54.400]  Мы хотим и масштабироваться, и иметь эргономичные инструменты для выражения наших целей.
[27:54.400 --> 27:56.400]  Ну и начал перечислять.
[27:56.400 --> 27:58.400]  Такие инструменты есть в разных языках.
[27:58.400 --> 28:02.400]  В GO это горутины, в C++ это корутины.
[28:02.400 --> 28:05.400]  Ну или с программой, если вам так больше нравится.
[28:05.400 --> 28:07.400]  В Rust это...
[28:07.400 --> 28:09.400]  Ну там это фьючи называется, не суть.
[28:09.400 --> 28:13.400]  В Java этого всего пока нет, но там делают.
[28:13.400 --> 28:17.400]  И там это тоже называется файберы, как у нас.
[28:17.400 --> 28:22.400]  Но потом их в Java переименовали и стали называть виртуальные потоки.
[28:22.400 --> 28:24.400]  Еще одно слово.
[28:24.400 --> 28:26.400]  Вообще слово множество.
[28:26.400 --> 28:29.400]  В Python есть такие инструменты.
[28:29.400 --> 28:32.400]  Правда, это клиент написан, а не сервер, но опять.
[28:32.400 --> 28:34.400]  Какой-то await.
[28:34.400 --> 28:37.400]  Опять, мы можем заводить много клиентов, заводить много соединений,
[28:37.400 --> 28:41.400]  и все они будут упаковываться в маленькое количество ядер.
[28:41.400 --> 28:43.400]  В Kotlin есть корутины, разумеется.
[28:43.400 --> 28:46.400]  Вы тоже можете запустить какую-то отдельную активность,
[28:46.400 --> 28:49.400]  она будет работать и чередоваться с остальными.
[28:49.400 --> 28:53.400]  Кстати, чтобы лучше пояснить, что такое конкарнсия.
[28:53.400 --> 28:57.400]  В этом коде, я сказал, запускается много обработчиков,
[28:57.400 --> 28:59.400]  но они работают на одном ядре.
[28:59.400 --> 29:01.400]  Это в чистом виде конкарнсии.
[29:01.400 --> 29:02.400]  Здесь параллелизма нет.
[29:02.400 --> 29:05.400]  Параллелизм конкарнсии — это вообще вещи перпендикулярные.
[29:05.400 --> 29:07.400]  У вас может быть параллелизм без конкарнсии.
[29:07.400 --> 29:09.400]  Это умножение матрицы параллельное.
[29:09.400 --> 29:11.400]  У вас может быть конкарнсия без параллелизма.
[29:11.400 --> 29:12.400]  Вот оно.
[29:12.400 --> 29:15.400]  У вас один поток, и в него упаковываются много обработчиков.
[29:15.400 --> 29:17.400]  Они просто чередуются там постоянно.
[29:17.400 --> 29:19.400]  У вас может быть конкарнсия с параллелизмом.
[29:19.400 --> 29:22.400]  Вы можете запустить программу на языке ГО,
[29:22.400 --> 29:26.400]  и вот эти грутины, мало того, что их в одном потоке много,
[29:26.400 --> 29:29.400]  они еще и запускаются параллельно в разных потоках.
[29:29.400 --> 29:32.400]  То есть это можно комбинировать просто для повышения производительности.
[29:34.400 --> 29:36.400]  В общем, в разных языках, во всех современных языках,
[29:36.400 --> 29:38.400]  есть какие-то инструменты.
[29:38.400 --> 29:42.400]  Но правда, вот иметь одни грутины или карутины,
[29:42.400 --> 29:45.400]  или как они там, виртуальные потоки называются, мало.
[29:45.400 --> 29:48.400]  Потому что программа бывает обычно сложнее, чем эхо-сервер.
[29:49.400 --> 29:54.400]  Вот в осенье я на спецкурсе рассказываю про распределенные системы.
[29:54.400 --> 29:58.400]  И вот там особенно много задач, которые связаны с конкарнсией,
[29:58.400 --> 30:01.400]  потому что клиенты там начинают взаимодействовать друг с другом.
[30:01.400 --> 30:03.400]  Они обращаются к какому-то раздеревному состоянию,
[30:03.400 --> 30:05.400]  они должны друг с другом синхронизироваться.
[30:05.400 --> 30:08.400]  Ну и тут появляются какие-то примитивы синхронизации.
[30:08.400 --> 30:13.400]  Появляется, ну, Mutex для начала.
[30:13.400 --> 30:15.400]  Mutex — это такой базовый примитив,
[30:15.400 --> 30:17.400]  который позволяет синхронизировать два потока,
[30:17.400 --> 30:19.400]  ну или большее количество поток.
[30:19.400 --> 30:22.400]  Вот у вас есть потоки, которые запускаются, допустим, параллельно,
[30:22.400 --> 30:24.400]  физически на разных ядрах.
[30:24.400 --> 30:27.400]  Но они обращаются к одним и тем же данным в общей памяти.
[30:27.400 --> 30:30.400]  Скажем, к какому-то, не знаю, STD-мэпу.
[30:30.400 --> 30:33.400]  А вот теперь представьте, что у вас два потока на разных ядрах
[30:33.400 --> 30:35.400]  начинают вращать одно и то же дерево.
[30:36.400 --> 30:39.400]  Но они же ему переломают просто все конечности.
[30:39.400 --> 30:42.400]  Их нужно запретить им так делать.
[30:42.400 --> 30:44.400]  Для этого у нас есть Mutex.
[30:44.400 --> 30:47.400]  У него есть всего лишь два метода — lock и unlock.
[30:47.400 --> 30:51.400]  И гарантия такая, что если потоки вызывают,
[30:51.400 --> 30:54.400]  перед тем как обращаться к общим данным Mutex-lock,
[30:54.400 --> 30:57.400]  а потом после обращения вызывают Mutex-unlock,
[30:57.400 --> 31:00.400]  то гарантируется, что между вызовом lock и unlock
[31:00.400 --> 31:03.400]  может находиться только один поток одновременно.
[31:03.400 --> 31:06.400]  Если кто-то Mutex-ом сейчас владеет,
[31:06.400 --> 31:09.400]  если кто-то зашел в lock и находится между lock и unlock,
[31:09.400 --> 31:11.400]  то другой поток, вызвав lock, заблокируется
[31:11.400 --> 31:14.400]  и будет ждать, пока первый поток lock не освободит.
[31:15.400 --> 31:17.400]  Ну вот такой примитив.
[31:17.400 --> 31:22.400]  И это самое наивное, что можно сделать для синхронизации.
[31:22.400 --> 31:25.400]  В C++ есть разные примитивы.
[31:25.400 --> 31:33.400]  Есть Mutex, здесь есть RV-Mutex,
[31:33.400 --> 31:37.400]  есть условные переменные, есть какие-то симмофоры, луэчи, барьеры.
[31:37.400 --> 31:40.400]  Но мы это все напишем, это мелочи, это пустяки.
[31:40.400 --> 31:49.400]  Современные языки, конечно же, предлагают вам инструменты более сложные,
[31:49.400 --> 31:53.400]  более выразительные, потому что с помощью Mutex-а и кондвара
[31:53.400 --> 31:56.400]  вообще-то в высокоуровневом промышленном коде вы нигде
[31:56.400 --> 31:58.400]  почти не будете использовать никакие кондвары,
[31:58.400 --> 32:00.400]  вот эти условные переменные.
[32:00.400 --> 32:02.400]  Если вы видите, то этот код очень низкоуровневый
[32:02.400 --> 32:04.400]  или плохо написан просто.
[32:04.400 --> 32:08.400]  Например, что вам дает язык Go для какой-то сложной синхронизации?
[32:08.400 --> 32:09.400]  Он вам дает...
[32:09.400 --> 32:13.400]  Ну, Mutex-а тоже дает, конечно, но дает вам вещи посложнее.
[32:13.400 --> 32:17.400]  Где-то они у меня были, здесь написаны, привиденные, сейчас я их найду.
[32:19.400 --> 32:21.400]  Ну или полистаю так.
[32:28.400 --> 32:30.400]  Дает вам каналы.
[32:30.400 --> 32:36.400]  Вы запускаете грутину и протягиваете между этой грутиной, основной грутиной канал,
[32:36.400 --> 32:39.400]  и здесь вы можете в него положить сообщение,
[32:39.400 --> 32:41.400]  а потом здесь вы можете достать сообщение.
[32:43.400 --> 32:46.400]  Ну тем, что канал реализован в пространстве пользователей,
[32:46.400 --> 32:48.400]  никак с операционной системой не взаимодействует,
[32:48.400 --> 32:51.400]  и он гораздо сложнее, потому что...
[32:51.400 --> 32:53.400]  Ну ладно.
[32:55.400 --> 32:57.400]  Если мы пока не знаем детали, а мы пока их не знаем,
[32:57.400 --> 32:59.400]  может быть, что ничем не отличается.
[32:59.400 --> 33:01.400]  Это, конечно, совершенно неправда.
[33:01.400 --> 33:03.400]  Канал, наверное, что-то более виртуальное.
[33:03.400 --> 33:05.400]  Пайп-то это просто...
[33:05.400 --> 33:07.400]  Ну у нас здесь виртуальные потоки, и канал тоже, в общем,
[33:07.400 --> 33:10.400]  этот пайп тоже, по нему операционная система ничего не знает.
[33:10.400 --> 33:12.400]  Это такой примитив синхронизации.
[33:12.400 --> 33:14.400]  А дальше, что с ними можно делать?
[33:14.400 --> 33:18.400]  Можно, ну, блокироваться, ожидая сообщения из канала,
[33:18.400 --> 33:20.400]  а можно делать...
[33:20.400 --> 33:22.400]  Смотрите, что?
[33:22.400 --> 33:24.400]  Можно делать селект.
[33:24.400 --> 33:27.400]  Можно дожидаться сообщений из первого канала.
[33:27.400 --> 33:30.400]  У нас есть два канала, мы не знаем, откуда прилетит сообщение в первую очередь,
[33:30.400 --> 33:32.400]  мы дожидаемся сообщений из первого канала.
[33:32.400 --> 33:35.400]  Ну и я вот осенью рассказываю желающим,
[33:35.400 --> 33:39.400]  как, скажем, писать протокол репликации в определенных системах.
[33:39.400 --> 33:41.400]  Протокол RAFT.
[33:41.400 --> 33:44.400]  И вот здесь есть реализация этого протокола ногой,
[33:44.400 --> 33:46.400]  и тут используются каналы и селекты для того,
[33:46.400 --> 33:48.400]  чтобы мультиплексировать события,
[33:48.400 --> 33:51.400]  с одной стороны, хардбиты, с другой стороны, запросы от пользователей.
[33:51.400 --> 33:53.400]  Ну, более сложная логика.
[33:53.400 --> 33:56.400]  Здесь вот как-то грутины сложнее взаимодействовать,
[33:56.400 --> 33:59.400]  чем просто запускаются и там независимо работают.
[33:59.400 --> 34:03.400]  Вот GO нам предлагает один набор инструментов,
[34:03.400 --> 34:05.400]  каналы и селекты.
[34:05.400 --> 34:08.400]  Язык Kotlin, в принципе, те же самые инструменты предлагает.
[34:08.400 --> 34:12.400]  То есть там тоже есть каналы, там тоже есть селект.
[34:12.400 --> 34:16.400]  Очень сложно написано, и мы в самом конце курса про него поговорим.
[34:16.400 --> 34:19.400]  Это, наверное, такая очень продвинутая лекция.
[34:19.400 --> 34:22.400]  Но это не единственные инструменты,
[34:22.400 --> 34:25.400]  которые доступны для синхронизации высокоуровневые инструменты.
[34:26.400 --> 34:29.400]  Скажем, вот есть такая известная статья,
[34:29.400 --> 34:34.400]  и она плохо отображается у нас, и мы сейчас это починим.
[34:34.400 --> 34:36.400]  The Server is a Function.
[34:36.400 --> 34:39.400]  Это статья, которая была написана инженером Твиттера
[34:39.400 --> 34:42.400]  про их фреймворк, на котором они пишут весь свой код,
[34:42.400 --> 34:44.400]  все свои сервисы.
[34:44.400 --> 34:49.400]  И здесь они оперируют не потоками и не каналами и не селектами,
[34:49.400 --> 34:51.400]  они оперируют другими сущностями,
[34:51.400 --> 34:54.400]  они все свои сервисы раскладывают на такой ортогональный базис
[34:54.400 --> 34:56.400]  из трех абстракций, из фьюч,
[34:56.400 --> 34:59.400]  рпс-сервисов и фильтров,
[34:59.400 --> 35:02.400]  которые декорируют эти самые фьючи и сервисы.
[35:04.400 --> 35:06.400]  Что такое рпс?
[35:06.400 --> 35:09.400]  Должно долго объяснять, но идея такая.
[35:09.400 --> 35:12.400]  В распространенных системах, опять пример,
[35:12.400 --> 35:16.400]  в который нам нужно углубляться очень долго,
[35:16.400 --> 35:19.400]  но лекция обзорная, поэтому я что-нибудь расскажу.
[35:19.400 --> 35:22.400]  В распространенных системах узлы,
[35:22.400 --> 35:24.400]  которые эту систему образуют, общаются с собой
[35:24.400 --> 35:26.400]  часто, конечно, не напрямую через socket,
[35:26.400 --> 35:28.400]  из слишком низкого уровня IP,
[35:28.400 --> 35:31.400]  они общаются через протокол вызова удаленных процедур,
[35:31.400 --> 35:34.400]  или удаленного вызова процедуры, я путаюсь, неизвестно.
[35:34.400 --> 35:37.400]  В общем, идея такая, вы делаете вызов,
[35:37.400 --> 35:40.400]  как будто бы вызываете какой-то метод на каком-то объекте.
[35:40.400 --> 35:44.400]  На самом деле этот объект находится на другой машине,
[35:44.400 --> 35:47.400]  и нужно ваш запрос, ваш вызов серилизовать,
[35:47.400 --> 35:50.400]  отправить по сети, там он десерилизуется,
[35:50.400 --> 35:52.400]  запустится в каком-то обработчике,
[35:52.400 --> 35:54.400]  тут снова какие-то файберы появляются, видимо,
[35:54.400 --> 35:56.400]  вычислиться ответ,
[35:56.400 --> 35:58.400]  он серилизуется, полетит в обратную сторону,
[35:58.400 --> 36:00.400]  мы его дождемся, запустим обработчик.
[36:00.400 --> 36:04.400]  В общем, для того, чтобы такие RPC вызовы делать,
[36:04.400 --> 36:06.400]  нам нужен какой-то специальный инструмент,
[36:06.400 --> 36:08.400]  какой-то фреймворк.
[36:08.400 --> 36:10.400]  И вот вы вызываете метод на другой машине.
[36:10.400 --> 36:12.400]  Вот если вы вызываете обычный метод,
[36:12.400 --> 36:14.400]  на локальной машине, вы вызываете функцию foo
[36:14.400 --> 36:16.400]  и дождаетесь, пока она завершится.
[36:16.400 --> 36:18.400]  В случае, когда мы отправим запрос по сети,
[36:18.400 --> 36:20.400]  у нас API, как правило, асинхронная.
[36:20.400 --> 36:22.400]  Мы отправляем запрос,
[36:22.400 --> 36:24.400]  а когда он будет готов, мы не знаем.
[36:24.400 --> 36:26.400]  Может, машина вообще откажет,
[36:26.400 --> 36:28.400]  и мы никогда не получим ответ.
[36:28.400 --> 36:30.400]  Поэтому мы не можем просто ждать значения.
[36:30.400 --> 36:32.400]  Мы должны вернуть что-то, что называется future.
[36:32.400 --> 36:34.400]  Это некоторое будущее представление
[36:34.400 --> 36:36.400]  будущего ответа.
[36:36.400 --> 36:38.400]  У нас прямо сейчас ответа нет,
[36:38.400 --> 36:40.400]  но есть некоторый контейнер
[36:40.400 --> 36:42.400]  для этого будущего ответа.
[36:42.400 --> 36:44.400]  И мы можем с помощью специального синтаксиса
[36:44.400 --> 36:46.400]  передать его в следующую функцию, какую-то асинхронную.
[36:46.400 --> 36:48.400]  Это звучит как некоторая магия.
[36:48.400 --> 36:50.400]  В общем, это некоторые другие API.
[36:50.400 --> 36:52.400]  В твиттере написали все
[36:52.400 --> 36:54.400]  на фьючах RPC,
[36:54.400 --> 36:56.400]  а не на файберах.
[36:56.400 --> 36:58.400]  Короче говоря, есть разные инструменты
[36:58.400 --> 37:00.400]  для того, чтобы
[37:00.400 --> 37:02.400]  описывать конкурентные активности
[37:02.400 --> 37:04.400]  и чтобы их синхронизировать.
[37:06.400 --> 37:08.400]  И каждый язык предоставляет
[37:08.400 --> 37:10.400]  какие-то свои инструменты.
[37:10.400 --> 37:12.400]  И даже если они похожи,
[37:12.400 --> 37:14.400]  то они часто называются по-разному.
[37:14.400 --> 37:16.400]  Я вот говорил файбер,
[37:16.400 --> 37:18.400]  гарутины, виртуальные потоки.
[37:18.400 --> 37:20.400]  Короче, целый зоопарк.
[37:20.400 --> 37:22.400]  Как мы все это пишем и как мы это синхронизируем.
[37:22.400 --> 37:24.400]  Но с другой стороны,
[37:24.400 --> 37:26.400]  какой бы язык мы не использовали,
[37:26.400 --> 37:28.400]  в конце концов,
[37:28.400 --> 37:30.400]  под этим языком, под компилятором
[37:30.400 --> 37:32.400]  находится один и тот же компьютер
[37:32.400 --> 37:34.400]  с одной и той же операционной системой,
[37:34.400 --> 37:36.400]  с одним и тем же процессором.
[37:36.400 --> 37:38.400]  И значит, все эти разные
[37:38.400 --> 37:40.400]  средства синхронизации,
[37:40.400 --> 37:42.400]  разные инструменты должны в конце концов
[37:42.400 --> 37:44.400]  на каком-то уровне работать одинаково.
[37:44.400 --> 37:46.400]  Но тут уже упоминали про E-Poll.
[37:46.400 --> 37:48.400]  Вот E-Poll — это некий низкий уровень,
[37:48.400 --> 37:50.400]  который делится между всеми реализациями.
[37:50.400 --> 37:52.400]  Если у вас фьюч,
[37:52.400 --> 37:54.400]  если у вас файберы
[37:54.400 --> 37:56.400]  с блокирующими сокетами,
[37:56.400 --> 37:58.400]  в конце концов все спускается в E-Poll.
[38:02.400 --> 38:04.400]  А с другой стороны,
[38:08.400 --> 38:10.400]  по-другому скажу,
[38:10.400 --> 38:12.400]  если все аккуратно написать,
[38:12.400 --> 38:14.400]  то можно добиться такого дизайна,
[38:14.400 --> 38:16.400]  где на верхнем уровне у вас
[38:16.400 --> 38:18.400]  либо фьючи, либо
[38:18.400 --> 38:20.400]  фьючи с комбинаторами,
[38:20.400 --> 38:22.400]  либо гарутины с каналами и селектами,
[38:22.400 --> 38:24.400]  а под капотом
[38:24.400 --> 38:26.400]  у вас некоторое общее следоисполнение,
[38:26.400 --> 38:28.400]  которое одинаково подходит для всего.
[38:30.400 --> 38:32.400]  Ну вот, выглядят программы
[38:32.400 --> 38:34.400]  на Rust, на Go
[38:34.400 --> 38:36.400]  и на фреймворке
[38:36.400 --> 38:38.400]  Twitter
[38:38.400 --> 38:40.400]  по-разному,
[38:40.400 --> 38:42.400]  но в конце концов
[38:42.400 --> 38:44.400]  исполняются они все примерно одинаково,
[38:44.400 --> 38:46.400]  используя примерно одни и те же абстракции.
[38:46.400 --> 38:48.400]  Мы снова переизобретаем планировщик,
[38:48.400 --> 38:50.400]  мы снова переизобретаем
[38:50.400 --> 38:52.400]  логику планирования,
[38:52.400 --> 38:54.400]  и оказывается,
[38:54.400 --> 38:56.400]  что можно
[38:56.400 --> 38:58.400]  всю эту сложную логику
[38:58.400 --> 39:00.400]  разделить, отделить
[39:00.400 --> 39:02.400]  от этих самых средств синхронизации,
[39:02.400 --> 39:04.400]  средств конкарнсии
[39:04.400 --> 39:06.400]  какими-то очень простыми абстракциями.
[39:06.400 --> 39:08.400]  Короче говоря,
[39:08.400 --> 39:10.400]  в нашем курсе будут две такие большие параллельные
[39:10.400 --> 39:12.400]  сюжетные линии.
[39:12.400 --> 39:14.400]  С одной стороны, мы будем говорить,
[39:14.400 --> 39:16.400]  как описывать конкурентные активности в коде,
[39:16.400 --> 39:18.400]  как их синхронизировать,
[39:18.400 --> 39:20.400]  а с другой стороны, мы будем говорить
[39:20.400 --> 39:22.400]  о том, как это эффективно исполнять на компьютере,
[39:22.400 --> 39:24.400]  потому что компьютер, в конце концов, у всех одинаковый.
[39:30.400 --> 39:32.400]  Если вернуться
[39:32.400 --> 39:34.400]  к эхосеверу, то можно сказать так, что наш курс
[39:34.400 --> 39:36.400]  про то, что с одной стороны,
[39:36.400 --> 39:38.400]  как эхосервер написать красиво,
[39:38.400 --> 39:40.400]  а с другой стороны, как написать его масштабируемо.
[39:40.400 --> 39:42.400]  Это вот две цели, которые
[39:42.400 --> 39:44.400]  не тривиально сочетаются.
[39:48.400 --> 39:50.400]  Но смотрите, я показываю вам примеры
[39:50.400 --> 39:52.400]  на разных языках. Неужели я от вас
[39:52.400 --> 39:54.400]  требую все это знать?
[39:54.400 --> 39:56.400]  Знать Rust, знать Go,
[39:56.400 --> 39:58.400]  знать Kotlin.
[39:58.400 --> 40:00.400]  Как вы думаете, требую я или нет?
[40:04.400 --> 40:06.400]  Будет хорошо, если вы все это знаете.
[40:06.400 --> 40:08.400]  Вот я так скажу, чем больше вы в своей жизни
[40:08.400 --> 40:10.400]  видели, тем вам будет полезнее,
[40:10.400 --> 40:12.400]  тем вам будет понятнее.
[40:12.400 --> 40:14.400]  Но, конечно же, я этого
[40:14.400 --> 40:16.400]  не требую прям строго, но я...
[40:16.400 --> 40:18.400]  Мы знаем с вами C++, ну или думаем, что знаем.
[40:18.400 --> 40:20.400]  И
[40:20.400 --> 40:22.400]  мы собираемся все делать
[40:22.400 --> 40:24.400]  на C++.
[40:24.400 --> 40:26.400]  Ну,
[40:26.400 --> 40:28.400]  с этим есть некоторые проблемы, потому что
[40:28.400 --> 40:30.400]  в C++ почти ничего нет. Там есть библиотека
[40:30.400 --> 40:32.400]  потоков, в которой нет почти ничего полезного.
[40:32.400 --> 40:34.400]  Ну, точнее, есть какие-то очень базовые вещи,
[40:34.400 --> 40:36.400]  но никакой промышленный код сложный,
[40:36.400 --> 40:38.400]  никакие проекты настоящие с помощью
[40:38.400 --> 40:40.400]  этого кода писать не...
[40:40.400 --> 40:42.400]  С помощью этой библиотеки писать невозможно, конечно.
[40:42.400 --> 40:44.400]  Но мы с одной... Мы, смотрите,
[40:44.400 --> 40:46.400]  мы и не собираемся
[40:46.400 --> 40:48.400]  как бы учиться вот пользоваться
[40:48.400 --> 40:50.400]  всеми этими грутиными каналами и селектами,
[40:50.400 --> 40:52.400]  и фьючами. Мы просто собираемся
[40:52.400 --> 40:54.400]  это все написать сами.
[40:54.400 --> 40:56.400]  Вот мы, в конце концов,
[40:56.400 --> 40:58.400]  с теми из вас, кто справится, конечно, это будет
[40:58.400 --> 41:00.400]  далеко не все, мы с вами за семестр
[41:00.400 --> 41:02.400]  напишем свой собственный го.
[41:02.400 --> 41:04.400]  Мы с вами напишем...
[41:04.400 --> 41:06.400]  Ну, начнем с этих однопоточных
[41:06.400 --> 41:08.400]  файберов потоков и напишем
[41:08.400 --> 41:10.400]  масштабируемый эхо-север.
[41:10.400 --> 41:12.400]  И сложность, конечно, не в этом коде,
[41:12.400 --> 41:14.400]  а сложность вот где-то здесь спрятана.
[41:14.400 --> 41:16.400]  Вот внутри этого вызова,
[41:16.400 --> 41:18.400]  внутри этого вызова,
[41:18.400 --> 41:20.400]  нам важно это сделать.
[41:20.400 --> 41:22.400]  А потом мы научимся делать
[41:22.400 --> 41:24.400]  эти файберы физически параллельными.
[41:24.400 --> 41:26.400]  Мы сделаем для них...
[41:26.400 --> 41:28.400]  Ну, напишем свой собственный го,
[41:28.400 --> 41:30.400]  в котором будут запускаться...
[41:30.400 --> 41:32.400]  Ну, тут не 100, можно 100 тысяч написать.
[41:32.400 --> 41:34.400]  Мы...
[41:34.400 --> 41:36.400]  Что сделаем?
[41:36.400 --> 41:38.400]  Напишем свой собственный где-то...
[41:38.400 --> 41:40.400]  Есть мютекс, наверное,
[41:40.400 --> 41:42.400]  для вот этих самых файберов
[41:42.400 --> 41:44.400]  параллельных уже.
[41:44.400 --> 41:46.400]  Напишем свои собственный каналы для них.
[41:46.400 --> 41:48.400]  Вот, строим канал,
[41:48.400 --> 41:50.400]  запускаем файбер, и он
[41:50.400 --> 41:52.400]  ждет с одного канала, пишет в другой.
[41:52.400 --> 41:54.400]  И вот этот...
[41:54.400 --> 41:56.400]  Ждет с второго, пишет в первый.
[41:56.400 --> 41:58.400]  И они обмениваются сообщениями друг с другом.
[41:58.400 --> 42:00.400]  Мы напишем для них селек.
[42:00.400 --> 42:02.400]  Но это, правда, совсем уже сложный уровень.
[42:02.400 --> 42:04.400]  Но те, кто сделают, будут большими молодцами.
[42:04.400 --> 42:06.400]  Вот мы просто напишем свой го.
[42:06.400 --> 42:08.400]  И...
[42:08.400 --> 42:10.400]  Как вам сказать?
[42:10.400 --> 42:12.400]  Не то, чтобы вы на работе
[42:12.400 --> 42:14.400]  будет писать свой го, конечно.
[42:14.400 --> 42:16.400]  Скорее всего, вы...
[42:16.400 --> 42:18.400]  Есть некоторая тонкость.
[42:18.400 --> 42:20.400]  С одной стороны, это полезно,
[42:20.400 --> 42:22.400]  потому что вы поймете, как все работает.
[42:22.400 --> 42:24.400]  Вы же приходите сюда не для того, чтобы...
[42:24.400 --> 42:26.400]  Читать мутацию.
[42:26.400 --> 42:28.400]  Это вы можете сделать на работе за первую неделю,
[42:28.400 --> 42:30.400]  с тажировки вашей.
[42:30.400 --> 42:32.400]  Я хочу, чтобы вы пришли на работу,
[42:32.400 --> 42:34.400]  писали, допустим, на каком-то языке,
[42:34.400 --> 42:36.400]  на языке Kotlin, Nagone, на любом.
[42:36.400 --> 42:38.400]  Скорее всего, с какой-то вероятностью
[42:38.400 --> 42:40.400]  это будет даже не C++.
[42:40.400 --> 42:42.400]  Но при этом, запуская вот эту горутину,
[42:42.400 --> 42:44.400]  вы будете глубоко, в самую глубину
[42:44.400 --> 42:46.400]  понимать, что происходит.
[42:46.400 --> 42:48.400]  Так же, как вы делаете pushback-вектор
[42:48.400 --> 42:50.400]  и понимаете, что там под капотом происходит.
[42:50.400 --> 42:52.400]  Где там реаллокации,
[42:52.400 --> 42:54.400]  мы хотим этого добиться.
[42:54.400 --> 42:56.400]  Но иногда, все-таки, нужно писать и самим.
[42:56.400 --> 42:58.400]  Вот, смотрите,
[42:58.400 --> 43:00.400]  совсем недавно
[43:00.400 --> 43:02.400]  на хабре в блоге Яндекса
[43:02.400 --> 43:04.400]  публиковали статью, Антон Получин
[43:04.400 --> 43:06.400]  написал, если вы знаете, кто это,
[43:06.400 --> 43:08.400]  про то, что Яндекс.Такси
[43:08.400 --> 43:10.400]  когда-то был написан
[43:10.400 --> 43:12.400]  на... Они используют микросервисную
[43:12.400 --> 43:14.400]  архитектуру, то есть, у них много сетевых сервисов,
[43:14.400 --> 43:16.400]  которые взаимодействуют между собой
[43:16.400 --> 43:18.400]  и обслуживают все ваши поездки.
[43:18.400 --> 43:20.400]  И весь сервис был написан
[43:20.400 --> 43:22.400]  на Python.
[43:22.400 --> 43:24.400]  Но на Python очень сложно поддерживать
[43:24.400 --> 43:26.400]  большие проекты, и там есть проблемы с производительностью,
[43:26.400 --> 43:28.400]  и тестировать это сложно, поэтому
[43:28.400 --> 43:30.400]  разработчики за некоторое время
[43:30.400 --> 43:32.400]  переписали все на C++.
[43:32.400 --> 43:34.400]  И им потребовался свой
[43:34.400 --> 43:36.400]  собственный фреймворк для конкуренции.
[43:36.400 --> 43:38.400]  И они написали фреймворк,
[43:38.400 --> 43:40.400]  где будут свои...
[43:40.400 --> 43:42.400]  Вот пример кода.
[43:42.400 --> 43:44.400]  Вот, скорее всего, да, вот он.
[43:44.400 --> 43:46.400]  И тут какие-то...
[43:46.400 --> 43:48.400]  Обработчик запроса, он
[43:48.400 --> 43:50.400]  обращается к базе.
[43:50.400 --> 43:52.400]  И, конечно, за таких обработчиков
[43:52.400 --> 43:54.400]  запускается конкурентно очень много.
[43:54.400 --> 43:56.400]  И это снова не потоки,
[43:56.400 --> 43:58.400]  это те самые файберы.
[43:58.400 --> 44:00.400]  И для этих файберов нужно писать
[44:00.400 --> 44:02.400]  свои примитивы синхронизации.
[44:02.400 --> 44:04.400]  И вот разработчики этим занимаются.
[44:04.400 --> 44:06.400]  Сейчас я найду пример.
[44:06.400 --> 44:08.400]  Вот кусочек
[44:08.400 --> 44:10.400]  реализации их мьютокса для их файберов.
[44:10.400 --> 44:12.400]  И вот на этом фреймворке дальше
[44:12.400 --> 44:14.400]  пишется весь код.
[44:14.400 --> 44:16.400]  Ну, то есть, иногда нужно писать свой го,
[44:16.400 --> 44:18.400]  потому что...
[44:18.400 --> 44:20.400]  Потому что задачи у вас такие.
[44:24.400 --> 44:26.400]  Этим мы будем заниматься.
[44:26.400 --> 44:28.400]  Ну, конечно, мы не с этого начнем сразу
[44:28.400 --> 44:30.400]  с семестров, потому что
[44:30.400 --> 44:32.400]  это сложная задача. Все-таки язык ГО
[44:32.400 --> 44:34.400]  пишут очень опытные разработчики.
[44:34.400 --> 44:36.400]  Мы начнем с чего-то простого.
[44:36.400 --> 44:38.400]  Мы будем возиться сначала, там, первые недели,
[44:38.400 --> 44:40.400]  первый месяц с какими-то вот мьютоксами,
[44:40.400 --> 44:42.400]  условными переменными.
[44:42.400 --> 44:44.400]  Научимся делать какие-то банальные вещи
[44:44.400 --> 44:46.400]  для потоков, а потом мы пойдем глубже.
[44:46.400 --> 44:48.400]  То есть, мы сначала напишем простенький
[44:48.400 --> 44:50.400]  мьютокс для потоков.
[44:50.400 --> 44:52.400]  Потом мы его используем для того,
[44:52.400 --> 44:54.400]  чтобы написать thread pool.
[44:54.400 --> 44:56.400]  То есть, просто будем использовать мьютокс
[44:56.400 --> 44:58.400]  при нитивы синхронизации.
[44:58.400 --> 45:00.400]  Потом мы в этом thread pool научимся запускать файберы.
[45:00.400 --> 45:02.400]  Потом мы для них
[45:02.400 --> 45:04.400]  переизобретем мьютокс.
[45:04.400 --> 45:06.400]  Потом мы изучим лог-фри и узнаем,
[45:06.400 --> 45:08.400]  как можно сделать мьютокс без мьютокса.
[45:08.400 --> 45:10.400]  Ну, короче...
[45:10.400 --> 45:12.400]  Это довольно сложно,
[45:12.400 --> 45:14.400]  и все будет усложняться.
[45:14.400 --> 45:16.400]  И я хочу, чтобы вы увидели, что
[45:16.400 --> 45:18.400]  те, кто будут сдавать курс на отлично
[45:18.400 --> 45:20.400]  или на очень хорошо, они увидят,
[45:20.400 --> 45:22.400]  что мы делаем все по два раза,
[45:22.400 --> 45:24.400]  потому что мы воспроизводим это сначала
[45:24.400 --> 45:26.400]  на уровне какого-то верхнего,
[45:26.400 --> 45:28.400]  а потом мы закапываемся очень глубоко.
[45:28.400 --> 45:30.400]  Можно еще про атомики сказать?
[45:30.400 --> 45:32.400]  Про атомики, да.
[45:32.400 --> 45:34.400]  Я могу сказать следующее, что мы увидим с вами,
[45:34.400 --> 45:36.400]  что Go можно сделать, имея один атомик.
[45:36.400 --> 45:38.400]  Вот если у вас есть атомик,
[45:38.400 --> 45:40.400]  то, в принципе, можно написать свой Go.
[45:40.400 --> 45:42.400]  А что вы хотели про них услышать?
[45:48.400 --> 45:50.400]  Если ты пишешь какие-то сетевые сервисы,
[45:50.400 --> 45:52.400]  ты пишешь какую-то прикладную логику,
[45:52.400 --> 45:54.400]  то вообще в твоем коде не должно быть
[45:54.400 --> 45:56.400]  никаких мьютоксов, почти что и кондваров,
[45:56.400 --> 45:58.400]  и атомиков.
[45:58.400 --> 46:00.400]  Это очень низкоуровневый код.
[46:00.400 --> 46:02.400]  Атомики нужны, чтобы написать
[46:02.400 --> 46:04.400]  этот фреймворк, а не для того, чтобы
[46:04.400 --> 46:06.400]  ты ими каждый день пользовался.
[46:06.400 --> 46:08.400]  Но иногда нужно ими пользоваться,
[46:08.400 --> 46:10.400]  но мы, собственно, этому всему научимся.
[46:12.400 --> 46:14.400]  Что такое атомик?
[46:14.400 --> 46:16.400]  Про это есть Домашка 1.
[46:16.400 --> 46:18.400]  Там говорят, напишите атомик, пожалуйста.
[46:18.400 --> 46:20.400]  Мы к этому вернемся через неделю.
[46:20.400 --> 46:22.400]  То есть я говорю, сегодня понимать ничего
[46:22.400 --> 46:24.400]  не обязательно, просто я какие-то слова произношу,
[46:24.400 --> 46:26.400]  вы их запоминаете, а потом мы...
[46:26.400 --> 46:28.400]  Атомик – это ячейка памяти, с которой можно
[46:28.400 --> 46:30.400]  делать более хитрые вещи, чем чтение
[46:30.400 --> 46:32.400]  и запись.
[46:32.400 --> 46:34.400]  Вот чтение и запись – это две операции,
[46:34.400 --> 46:36.400]  которые мы понимаем хорошо, но которых
[46:36.400 --> 46:38.400]  не делали.
[46:38.400 --> 46:40.400]  Нужно что-то еще.
[46:40.400 --> 46:42.400]  Мы, в общем,
[46:42.400 --> 46:44.400]  напишем все это голыми руками.
[46:44.400 --> 46:46.400]  Имея один анатомик, мы напишем свой целый
[46:46.400 --> 46:48.400]  ГО. И там, конечно же, научимся
[46:48.400 --> 46:50.400]  какой-то ловкой синхронизации.
[46:50.400 --> 46:52.400]  Но я бы сказал, что это только половина
[46:52.400 --> 46:54.400]  истории. Но, по крайней мере, для меня
[46:54.400 --> 46:56.400]  это только половина курса и может быть даже
[46:56.400 --> 46:58.400]  не самое важное, потому что
[46:58.400 --> 47:00.400]  вы изучите лог-фри, изучите какие-то схемы
[47:00.400 --> 47:02.400]  управления памятью в лог-фри,
[47:02.400 --> 47:04.400]  какие-то хитрые паттерны синхронизации,
[47:04.400 --> 47:06.400]  а потом через полгода забудете это все.
[47:06.400 --> 47:08.400]  Ценность курса не только в этом
[47:08.400 --> 47:10.400]  и не столько в этом.
[47:10.400 --> 47:12.400]  Вот, смотрите,
[47:12.400 --> 47:14.400]  я вам поясню, в чем она довольно
[47:14.400 --> 47:16.400]  таким странным способом.
[47:16.400 --> 47:18.400]  Есть такой код,
[47:18.400 --> 47:20.400]  есть крутины C++, такой механизм
[47:20.400 --> 47:22.400]  для того, чтобы описать конкаранция.
[47:22.400 --> 47:24.400]  И на крутинах можно написать
[47:24.400 --> 47:26.400]  такой код.
[47:26.400 --> 47:28.400]  Правда, непонятно, что такое
[47:28.400 --> 47:30.400]  коэвейт, зачем мы его пишем здесь,
[47:30.400 --> 47:32.400]  почему он нам нужен. В некоторых
[47:32.400 --> 47:34.400]  кодах и не нужен, в ГОМ мы так не пишем,
[47:34.400 --> 47:36.400]  но в C++ мы пишем. И вот мы решили разобраться,
[47:36.400 --> 47:38.400]  как это все работает. Мы читаем
[47:38.400 --> 47:40.400]  документацию вот эту, она чудовищная,
[47:40.400 --> 47:42.400]  невозможно ничего понять, мы бросаем.
[47:42.400 --> 47:44.400]  Но я вам говорю,
[47:44.400 --> 47:46.400]  есть очень хороший блог, сейчас я найду
[47:46.400 --> 47:48.400]  его, вот он.
[47:48.400 --> 47:50.400]  Его автор Льюис Бейкер, один из разработчиков
[47:50.400 --> 47:52.400]  крутины C++, он написал
[47:52.400 --> 47:54.400]  5 постов про то, что такое...
[47:54.400 --> 47:56.400]  сейчас я сложу 4...
[47:56.400 --> 47:58.400]  4 поста про то, что...
[47:58.400 --> 48:00.400]  как крутина внутри устроена.
[48:00.400 --> 48:02.400]  И вот вы пытаетесь понять что-то
[48:02.400 --> 48:04.400]  про коэвейт, вот этот самый, про это
[48:04.400 --> 48:06.400]  маленькое ключевое слово.
[48:06.400 --> 48:08.400]  Открываете этот блог, нажимаете
[48:08.400 --> 48:10.400]  на ссылку,
[48:10.400 --> 48:12.400]  и попадаете в огромную, сложнейшую
[48:12.400 --> 48:14.400]  простыню.
[48:14.400 --> 48:16.400]  Что происходит в этом коэвейте?
[48:16.400 --> 48:18.400]  И в принципе
[48:18.400 --> 48:20.400]  вы, может быть, даже разберетесь,
[48:20.400 --> 48:22.400]  но с трудом запомните, впихнете
[48:22.400 --> 48:24.400]  в это в голову. Но
[48:24.400 --> 48:26.400]  как вам сказать? Вот представьте,
[48:26.400 --> 48:28.400]  что вы хотите узнать, как что-то работает.
[48:28.400 --> 48:30.400]  Вы набиваете там в поиске,
[48:30.400 --> 48:32.400]  как работает там, не знаю, мьютекс.
[48:32.400 --> 48:34.400]  И вам открывается какая-то статья, или вы код читаете.
[48:34.400 --> 48:36.400]  Как работает Go, открываете там исходники
[48:36.400 --> 48:38.400]  Go, читаете их.
[48:38.400 --> 48:40.400]  Может быть, вы разберетесь.
[48:40.400 --> 48:42.400]  Но, скорее всего, у вас
[48:42.400 --> 48:44.400]  будет такая проблема, вы не сможете отличить
[48:44.400 --> 48:46.400]  вот в этой огромной простыне кода
[48:46.400 --> 48:48.400]  какие-то случайные, инженерные...
[48:48.400 --> 48:50.400]  ну, какие-то инженерные случайности
[48:50.400 --> 48:52.400]  от каких-то фундаментальных идей.
[48:52.400 --> 48:54.400]  Вы не поймете, что важно, а что вот просто
[48:54.400 --> 48:56.400]  ну, так написали.
[48:56.400 --> 48:58.400]  И вот, читая этот пост, вы
[48:58.400 --> 49:00.400]  вот сейчас, вы, в принципе, можете
[49:00.400 --> 49:02.400]  через примерно месяц это осилить.
[49:02.400 --> 49:04.400]  То есть, разобраться
[49:04.400 --> 49:06.400]  в механике крутины. Вы способны
[49:06.400 --> 49:08.400]  на это. Но
[49:08.400 --> 49:10.400]  я хочу, чтобы мы...
[49:10.400 --> 49:12.400]  Ну, если
[49:12.400 --> 49:14.400]  открыть план лекций, где-то
[49:14.400 --> 49:16.400]  он у меня есть...
[49:18.400 --> 49:20.400]  Попробуем еще раз. То
[49:20.400 --> 49:22.400]  крутина C++ это где-то середина апреля.
[49:22.400 --> 49:24.400]  Довольно не скоро.
[49:24.400 --> 49:26.400]  Почему?
[49:26.400 --> 49:28.400]  Что?
[49:28.400 --> 49:30.400]  Да, у нас будет канал... Сколько у нас вообще осталось времени?
[49:30.400 --> 49:32.400]  Нисколько, да?
[49:32.400 --> 49:34.400]  Сколько?
[49:34.400 --> 49:36.400]  О, здорово, тогда мы все успеем.
[49:36.400 --> 49:38.400]  К крутины
[49:38.400 --> 49:40.400]  будут довольно не скорость C++.
[49:40.400 --> 49:42.400]  Почему? Потому что я хочу, чтобы
[49:42.400 --> 49:44.400]  к моменту, когда...
[49:44.400 --> 49:46.400]  Когда мы к ним подойдем,
[49:46.400 --> 49:48.400]  мы не просто смогли понять, как это работает,
[49:48.400 --> 49:50.400]  а мы смогли понять, почему
[49:50.400 --> 49:52.400]  оно именно так сделано.
[49:52.400 --> 49:54.400]  То есть, мы начнем с каких-то простых задач,
[49:54.400 --> 49:56.400]  напишем какой-нибудь простой
[49:56.400 --> 49:58.400]  threadpool, напишем какие-то простые
[49:58.400 --> 50:00.400]  файберы, а потом начнем думать,
[50:00.400 --> 50:02.400]  а что с нашим решением не так?
[50:02.400 --> 50:04.400]  Может быть, где-то можно что-то улучшить, может
[50:04.400 --> 50:06.400]  где-то чего-то не хватает. У нас есть
[50:06.400 --> 50:08.400]  threadpool, но мы не умеем из него вернуть
[50:08.400 --> 50:10.400]  результат вычисления. У нас есть
[50:10.400 --> 50:12.400]  файбер, но там почему-то планировщик довольно
[50:12.400 --> 50:14.400]  монолитный, и там смешаны какие-то разные
[50:14.400 --> 50:16.400]  подзадачи. И вот мы будем придумывать
[50:16.400 --> 50:18.400]  какие-то абстракции, мы будем придумывать какую-то
[50:18.400 --> 50:20.400]  декомпозицию. Итак, постепенно,
[50:20.400 --> 50:22.400]  постепенно наши простые, грубые решения
[50:22.400 --> 50:24.400]  будут
[50:24.400 --> 50:26.400]  разделяться на какие-то,
[50:26.400 --> 50:28.400]  ну я надеюсь,
[50:28.400 --> 50:30.400]  артагональные, универсальные,
[50:30.400 --> 50:32.400]  точные абстракции. Мы их будем постепенно
[50:32.400 --> 50:34.400]  придумывать, и мне важно,
[50:34.400 --> 50:36.400]  чтобы мы сами видели, что в них появляется
[50:36.400 --> 50:38.400]  необходимость.
[50:38.400 --> 50:40.400]  И вот мы будем заниматься этим
[50:40.400 --> 50:42.400]  несколько месяцев, и когда мы дойдем до корутин,
[50:42.400 --> 50:44.400]  то мы уже сами будем
[50:44.400 --> 50:46.400]  чувствовать, что нам вот эти
[50:46.400 --> 50:48.400]  абстракции и эти точки
[50:48.400 --> 50:50.400]  абстракции необходимы. Мы будем
[50:50.400 --> 50:52.400]  понимать, почему дизайн такой,
[50:52.400 --> 50:54.400]  а не просто как он работает.
[50:54.400 --> 50:56.400]  Ну то есть для меня это курс
[50:56.400 --> 50:58.400]  наполовину про дизайн, и дизайн
[50:58.400 --> 51:00.400]  это тот навык, которому
[51:00.400 --> 51:02.400]  долго нужно учиться.
[51:02.400 --> 51:04.400]  Вот вы можете закончить университет, вы можете знать,
[51:04.400 --> 51:06.400]  как вращать красно-черное дерево,
[51:06.400 --> 51:08.400]  стоить фибоначевой кучей, как суффиксные массивы
[51:08.400 --> 51:10.400]  и там деревья писать, но это
[51:10.400 --> 51:12.400]  из вас, ну вы все равно станете
[51:12.400 --> 51:14.400]  старшим или средним разработчиком.
[51:14.400 --> 51:16.400]  Вы не можете выпустить старшим, младшим
[51:16.400 --> 51:18.400]  или средним, вы не можете выпустить старшим,
[51:18.400 --> 51:20.400]  потому что для того, чтобы делать сложные
[51:20.400 --> 51:22.400]  вещи, нужно хорошо понимать,
[51:22.400 --> 51:24.400]  как выделять абстракции, как выполнять
[51:24.400 --> 51:26.400]  декомпозицию, собственно дизайн уметь делать.
[51:26.400 --> 51:28.400]  А этому учиться нужно
[51:28.400 --> 51:30.400]  долго. И вот в
[51:30.400 --> 51:32.400]  этом курсе, кажется, если вы будете
[51:32.400 --> 51:34.400]  в правильном порядке
[51:34.400 --> 51:36.400]  решать много задач,
[51:36.400 --> 51:38.400]  то
[51:38.400 --> 51:40.400]  ну не то чтобы вы научитесь
[51:40.400 --> 51:42.400]  этому, но по крайней мере вы увидите,
[51:42.400 --> 51:44.400]  как это можно делать, как можно придумывать
[51:44.400 --> 51:46.400]  вещи, а не просто разбираться, как они
[51:46.400 --> 51:48.400]  устроены. Это гораздо
[51:48.400 --> 51:50.400]  гораздо сложнее.
[51:50.400 --> 51:52.400]  Но еще раз, для этого нужно делать задачи,
[51:52.400 --> 51:54.400]  поэтому я могу
[51:54.400 --> 51:56.400]  вам объяснить, что да, вот здесь не хватает
[51:56.400 --> 51:58.400]  этого, а тут можно сделать так.
[51:58.400 --> 52:00.400]  Но я бы сказал, что
[52:00.400 --> 52:02.400]  единственный честный способ этому научиться
[52:02.400 --> 52:04.400]  это писать код самим и самим убеждаться,
[52:04.400 --> 52:06.400]  что вам чего-то не хватает, что
[52:06.400 --> 52:08.400]  вы сами чувствуете, что стало лучше,
[52:08.400 --> 52:10.400]  что сейчас плохо, а можно сделать
[52:10.400 --> 52:12.400]  лучше.
[52:12.400 --> 52:14.400]  Поэтому
[52:14.400 --> 52:16.400]  призываю вас решать задачи,
[52:16.400 --> 52:18.400]  это потребует довольно большого количества усилий,
[52:18.400 --> 52:20.400]  но если вы любите
[52:20.400 --> 52:22.400]  программировать, то это все будет
[52:22.400 --> 52:24.400]  оправдано. Ну и без дизайна,
[52:24.400 --> 52:26.400]  конечно, будет
[52:26.400 --> 52:28.400]  будет сложно, особенно в конце
[52:28.400 --> 52:30.400]  курса, потому что вот темы,
[52:30.400 --> 52:32.400]  которые будут у нас в конце, сейчас мы
[52:32.400 --> 52:34.400]  к ним вернемся, вот Stackless Coroutines
[52:34.400 --> 52:36.400]  и Unified Executors, это темы,
[52:36.400 --> 52:38.400]  которые аккумулируют
[52:38.400 --> 52:40.400]  очень большое
[52:40.400 --> 52:42.400]  человеческий опыт, инженерный опыт,
[52:42.400 --> 52:44.400]  который накопился. Ну вот, скажем,
[52:44.400 --> 52:46.400]  все плюс-плюс сейчас разбираются,
[52:46.400 --> 52:48.400]  а как сделать тредпул?
[52:48.400 --> 52:50.400]  Это довольно базовая задача,
[52:50.400 --> 52:52.400]  тредпул у нас буквально вторая лекция,
[52:52.400 --> 52:54.400]  и мы его
[52:54.400 --> 52:56.400]  напишем, за полчаса я вообще ничего не знаю,
[52:56.400 --> 52:58.400]  мы ничего не знаем, приходим, тредпул готов.
[52:58.400 --> 53:00.400]  Почему-то
[53:00.400 --> 53:02.400]  все плюс-плюс
[53:02.400 --> 53:04.400]  инженеры до сих пор пытаются придумать,
[53:04.400 --> 53:06.400]  как он должен выглядеть,
[53:06.400 --> 53:08.400]  как придумать для него интерфейс вообще.
[53:08.400 --> 53:10.400]  И вот,
[53:12.400 --> 53:14.400]  если какой-то длинный
[53:14.400 --> 53:16.400]  пропозал, он, конечно, не только про тредпул,
[53:16.400 --> 53:18.400]  но вот он совершенно гигантский, про то,
[53:18.400 --> 53:20.400]  как вообще запускать параллельно задача.
[53:20.400 --> 53:22.400]  Ну я его не долистаю до конца,
[53:22.400 --> 53:24.400]  я устану, видите, он длинный.
[53:24.400 --> 53:26.400]  Там какое-то огромное количество сущностей
[53:26.400 --> 53:28.400]  задействовано. Рома, я правильно
[53:28.400 --> 53:30.400]  посылки даю, да? Вот оно.
[53:30.400 --> 53:32.400]  Вот огромное количество каких-то там, не знаю,
[53:32.400 --> 53:34.400]  концептов, абстракций, вот
[53:34.400 --> 53:36.400]  это такое, ну,
[53:36.400 --> 53:38.400]  я бы сказал, что это
[53:38.400 --> 53:40.400]  такой слишком
[53:40.400 --> 53:42.400]  декомпозируемый дизайн, очень мелкие,
[53:42.400 --> 53:44.400]  очень аккуратная абстракция,
[53:44.400 --> 53:46.400]  у нас будет проще, достаточно хорошо.
[53:46.400 --> 53:48.400]  Но вот люди приходят в конце концов
[53:48.400 --> 53:50.400]  к этому, и
[53:50.400 --> 53:52.400]  невозможно объяснить
[53:52.400 --> 53:54.400]  то, что придумывают сейчас, не объяснив
[53:54.400 --> 53:56.400]  какие-то более простые вещи, и не
[53:56.400 --> 53:58.400]  пройдя путь с...
[53:58.400 --> 54:00.400]  не пройдя путь, в котором
[54:00.400 --> 54:02.400]  все эти абстракции сами собой будут
[54:02.400 --> 54:04.400]  постепенно появляться.
[54:04.400 --> 54:06.400]  Мы почувствуем необходимость во всей этой сложности.
[54:10.400 --> 54:12.400]  Ну, что сказать?
[54:16.400 --> 54:18.400]  Почему-то никто не спрашивает, почему мы пишем на C++.
[54:20.400 --> 54:22.400]  Нет, это неправильная логика.
[54:22.400 --> 54:24.400]  Мы пишем на C++
[54:24.400 --> 54:26.400]  по двум причинам.
[54:26.400 --> 54:28.400]  Сейчас объясню, что я имею в виду, спрашивая про язык.
[54:28.400 --> 54:30.400]  Мы пишем
[54:30.400 --> 54:32.400]  на C++, во-первых, потому что на нем можно
[54:32.400 --> 54:34.400]  написать все.
[54:34.400 --> 54:36.400]  Вот скажем, если мы пишем на языке Go, то
[54:36.400 --> 54:38.400]  Go вам вот задает некоторые правила,
[54:38.400 --> 54:40.400]  задает некоторый набор инструментов, грутины, каналовые селекты,
[54:40.400 --> 54:42.400]  пожалуйста, пользуйтесь ими.
[54:42.400 --> 54:44.400]  Язык очень продуман.
[54:44.400 --> 54:46.400]  Он, собственно, создан для того, чтобы на нем
[54:46.400 --> 54:48.400]  писали сетевые приложения, только для этого и создан.
[54:48.400 --> 54:50.400]  В нем
[54:50.400 --> 54:52.400]  все очень хорошо друг к другу подходит,
[54:52.400 --> 54:54.400]  все продумано.
[54:54.400 --> 54:56.400]  Его написали в Google, собственно,
[54:56.400 --> 54:58.400]  аккумулируя весь свой инженерный опыт.
[54:58.400 --> 55:00.400]  Там до 10-го года.
[55:00.400 --> 55:02.400]  Но есть другие языки,
[55:02.400 --> 55:04.400]  и вот есть, я показывал вам
[55:04.400 --> 55:06.400]  статью про
[55:06.400 --> 55:08.400]  дизайн в Твиттере,
[55:08.400 --> 55:10.400]  и там другие примитивы используются.
[55:10.400 --> 55:12.400]  Вот мы пишем на C++, потому что
[55:12.400 --> 55:14.400]  на C++ можно написать все, что угодно.
[55:14.400 --> 55:16.400]  Можно и написать Go, и можно написать Future,
[55:16.400 --> 55:18.400]  и мы, собственно, это сделаем.
[55:20.400 --> 55:22.400]  Но мне важно, чтобы вы понимали,
[55:22.400 --> 55:24.400]  что курс, он не про C++, конечно же.
[55:24.400 --> 55:26.400]  Это инструмент, с помощью которого
[55:26.400 --> 55:28.400]  мы будем все делать.
[55:28.400 --> 55:30.400]  С помощью которого можно делать и несколько
[55:30.400 --> 55:32.400]  уровневые вещи, и
[55:32.400 --> 55:34.400]  какие-то сложные абстракции выдумывать.
[55:34.400 --> 55:36.400]  Но мы изучаем, конечно же,
[55:36.400 --> 55:38.400]  не C++, и не дай бог,
[55:38.400 --> 55:40.400]  не библиотеку потоков C++.
[55:40.400 --> 55:42.400]  Это вообще вещь довольно бесполезная.
[55:42.400 --> 55:44.400]  Мы изучаем какие-то
[55:44.400 --> 55:46.400]  общие идеи,
[55:46.400 --> 55:48.400]  какие-то общие идеи дизайна, общие концепции,
[55:48.400 --> 55:50.400]  которые вы встретите в любом языке,
[55:50.400 --> 55:52.400]  на чем бы вы дальше не писали.
[55:52.400 --> 55:54.400]  В любом современном языке есть
[55:54.400 --> 55:56.400]  конкуренция.
[55:56.400 --> 55:58.400]  Крипт, Раст, Котлин,
[55:58.400 --> 56:00.400]  Go, ну что угодно. Придумайте в любом
[56:00.400 --> 56:02.400]  современном языке, там будут эти инструменты.
[56:02.400 --> 56:04.400]  Если вы...
[56:04.400 --> 56:06.400]  Простите. Пройдете курс
[56:06.400 --> 56:08.400]  до конца, ну или почти до конца,
[56:08.400 --> 56:10.400]  то чем бы вы дальше не занимались,
[56:10.400 --> 56:12.400]  на чем бы вы не программировали, вам
[56:12.400 --> 56:14.400]  вот эти вещи, которые вы встретите, будут знакомы.
[56:14.400 --> 56:16.400]  Они будут немного отличаться, там будут
[56:16.400 --> 56:18.400]  другие слова, другие названия,
[56:18.400 --> 56:20.400]  но принципиальные внутренние механики будут теми же самыми.
[56:22.400 --> 56:24.400]  Да.
[56:24.400 --> 56:26.400]  Да, давайте я скажу,
[56:26.400 --> 56:28.400]  что вот с введением
[56:28.400 --> 56:30.400]  я закончил, я рассказал,
[56:30.400 --> 56:32.400]  что я хочу от курса и от...
[56:32.400 --> 56:34.400]  Да, вот я
[56:34.400 --> 56:36.400]  рассказал про конкуренцию,
[56:36.400 --> 56:38.400]  а не про курс пока, ну то есть в смысле,
[56:38.400 --> 56:40.400]  что мне важно и что кажется
[56:40.400 --> 56:42.400]  полезно понимать нам всем,
[56:42.400 --> 56:44.400]  то есть какие задачи глобально мы собираемся
[56:44.400 --> 56:46.400]  в этом семестре решать.
[56:46.400 --> 56:48.400]  А теперь давайте поговорим
[56:48.400 --> 56:50.400]  про курс, про току он организован.
[56:50.400 --> 56:52.400]  Ну, во-первых, действительно,
[56:52.400 --> 56:54.400]  говорю, что если вы пройдете курс до конца,
[56:54.400 --> 56:56.400]  потому что не все пройдут,
[56:56.400 --> 56:58.400]  и не всем это просто важно,
[56:58.400 --> 57:00.400]  но может быть вы пришли сюда машинным обучением заниматься,
[57:00.400 --> 57:02.400]  а вас сюда пригнали.
[57:02.400 --> 57:04.400]  Вот курс, я сразу скажу, про программирование.
[57:04.400 --> 57:06.400]  Вот он понравится тем, кто любит программировать.
[57:06.400 --> 57:08.400]  Вот есть люди, но не то чтобы я их
[57:08.400 --> 57:10.400]  осуждаю, вот просто разные люди есть.
[57:10.400 --> 57:12.400]  И вот некоторым нравится возиться в байтиках
[57:12.400 --> 57:14.400]  и писать какие-то структуры данных,
[57:14.400 --> 57:16.400]  а некоторым важно заниматься чем-то полезным.
[57:16.400 --> 57:18.400]  Для них программирование это просто инструмент,
[57:18.400 --> 57:20.400]  чтобы там запустить обучение
[57:20.400 --> 57:22.400]  за сети. И то и другое нормально.
[57:22.400 --> 57:24.400]  Но вот наш курс он про
[57:24.400 --> 57:26.400]  первых людей, конечно же, про людей,
[57:26.400 --> 57:28.400]  которые им нравится программировать,
[57:28.400 --> 57:30.400]  чтобы они не программировали, потому что мы будем
[57:30.400 --> 57:32.400]  программировать довольно абстрактные вещи.
[57:32.400 --> 57:34.400]  Вот какие-то там корутины,
[57:34.400 --> 57:36.400]  файберы, экзекьюторы,
[57:36.400 --> 57:38.400]  сендеры, ресиверы. Этого всего
[57:38.400 --> 57:40.400]  на улице не встретишь. В реальной жизни
[57:40.400 --> 57:42.400]  этого не существует. Это то, что придумал человек.
[57:42.400 --> 57:44.400]  И вот вам это будет
[57:44.400 --> 57:46.400]  интересно, если вам просто нравится программирование.
[57:46.400 --> 57:48.400]  Если не нравится, то
[57:48.400 --> 57:50.400]  ну, видимо, мы друг другу
[57:50.400 --> 57:52.400]  не пригодимся.
[57:52.400 --> 57:54.400]  Но не совсем, на самом деле.
[57:54.400 --> 57:56.400]  Вот вернемся к плану курса.
[57:56.400 --> 57:58.400]  Я бы сказал, что первые
[57:58.400 --> 58:00.400]  пять лекций,
[58:00.400 --> 58:02.400]  ну, четыре, если считать с нуля,
[58:02.400 --> 58:04.400]  это не считается. Первые
[58:04.400 --> 58:06.400]  четыре лекции полезны, наверное,
[58:06.400 --> 58:08.400]  послушать всем, чем бы вы не занимались.
[58:08.400 --> 58:10.400]  Они более-менее универсально
[58:10.400 --> 58:12.400]  полезны.
[58:12.400 --> 58:14.400]  Если говорить про конец
[58:14.400 --> 58:16.400]  курса, то для того, чтобы
[58:16.400 --> 58:18.400]  понять вот эти лекции,
[58:18.400 --> 58:20.400]  нужно,
[58:20.400 --> 58:22.400]  ну, или вот эти тоже,
[58:22.400 --> 58:24.400]  нужно понимать
[58:24.400 --> 58:26.400]  хорошо, что было на всех предыдущих
[58:26.400 --> 58:28.400]  и все предыдущее сделать своими руками.
[58:28.400 --> 58:30.400]  Ну, то есть, я ожидаю,
[58:30.400 --> 58:32.400]  что у нас как-то вот очень резко будет
[58:32.400 --> 58:34.400]  уменьшаться количество людей. Но по опыту
[58:34.400 --> 58:36.400]  прошлого года,
[58:36.400 --> 58:38.400]  по-моему, пятьдесят человек получили отлично.
[58:38.400 --> 58:40.400]  Это очень много.
[58:40.400 --> 58:42.400]  Из каких? Из двухсот.
[58:42.400 --> 58:44.400]  Что значит уменьшаться количества людей?
[58:44.400 --> 58:46.400]  Ну, вы послушайте первые пять лекций,
[58:46.400 --> 58:48.400]  а потом перестанете ходить.
[58:48.400 --> 58:50.400]  Потому что вам достаточно.
[58:50.400 --> 58:52.400]  Что?
[58:52.400 --> 58:54.400]  Нет, ну, вы можете отказаться,
[58:54.400 --> 58:56.400]  конечно. Я имею в виду, что
[58:56.400 --> 58:58.400]  курс обязательный.
[58:58.400 --> 59:00.400]  Я бы хотел, чтобы он был по выбору,
[59:00.400 --> 59:02.400]  чтобы людей, которые хотят обучать
[59:02.400 --> 59:04.400]  нейросеть, не заставляли программировать картины.
[59:04.400 --> 59:06.400]  Но пока это
[59:06.400 --> 59:08.400]  не в моих силах, я попытался, но вот что-то
[59:08.400 --> 59:10.400]  не получилось в этом году.
[59:10.400 --> 59:12.400]  Так что
[59:12.400 --> 59:14.400]  вам придется все-таки
[59:14.400 --> 59:16.400]  что-то сделать, чтобы получить
[59:16.400 --> 59:18.400]  какую-то достойную оценку.
[59:18.400 --> 59:20.400]  Если вы не хотите работать
[59:20.400 --> 59:22.400]  и вы согласны на минимальную
[59:22.400 --> 59:24.400]  положительную оценку, потому что
[59:24.400 --> 59:26.400]  вы просто ненавидите программирование,
[59:26.400 --> 59:28.400]  то этого можно достичь за две недели работы,
[59:28.400 --> 59:30.400]  за два воскресенья.
[59:30.400 --> 59:32.400]  Мне кажется, что это довольно
[59:32.400 --> 59:34.400]  гуманно.
[59:36.400 --> 59:38.400]  По поводу устройства курса.
[59:38.400 --> 59:40.400]  У нас будет канал, вот лекция закончится,
[59:40.400 --> 59:42.400]  и до вас долетит каким-то способом
[59:42.400 --> 59:44.400]  неизвестный мне ссылка на этот канал.
[59:44.400 --> 59:46.400]  Там будет вся необходимая информация.
[59:46.400 --> 59:48.400]  Курс представляет из себя
[59:48.400 --> 59:50.400]  репозиторий, в котором
[59:50.400 --> 59:52.400]  лежат все задачи.
[59:52.400 --> 59:54.400]  Вы будете эти задачи
[59:54.400 --> 59:56.400]  решать, они сначала будут простыми,
[59:56.400 --> 59:58.400]  потом они будут усложняться.
[59:58.400 --> 01:00:00.400]  Чем вы займётесь на первой неделе,
[01:00:00.400 --> 01:00:02.400]  вам нужно просто пройти инструкцию
[01:00:02.400 --> 01:00:04.400]  и развернуть
[01:00:04.400 --> 01:00:06.400]  этот самый репозиторий,
[01:00:06.400 --> 01:00:08.400]  развернуть рабочее окружение и научиться
[01:00:08.400 --> 01:00:10.400]  давать задачу А плюс Б.
[01:00:10.400 --> 01:00:12.400]  Это не так-то просто.
[01:00:12.400 --> 01:00:14.400]  Заготовьте вечер
[01:00:14.400 --> 01:00:16.400]  для этого, на это уйдёт время.
[01:00:16.400 --> 01:00:18.400]  Не сразу объясню,
[01:00:18.400 --> 01:00:20.400]  прокомментирую коротко,
[01:00:20.400 --> 01:00:22.400]  почему так сложно.
[01:00:22.400 --> 01:00:24.400]  Потому что курс сложный,
[01:00:24.400 --> 01:00:26.400]  это некоторый большой
[01:00:26.400 --> 01:00:28.400]  проект, в котором
[01:00:28.400 --> 01:00:30.400]  много зависимости, какие-то библиотеки,
[01:00:30.400 --> 01:00:32.400]  пять режимов сборки.
[01:00:32.400 --> 01:00:34.400]  То есть ваша программа будет собираться
[01:00:34.400 --> 01:00:36.400]  пятью разными способами,
[01:00:36.400 --> 01:00:38.400]  и по-разному исполняться, чтобы
[01:00:38.400 --> 01:00:40.400]  я смог из вас вытрести какие-то баги.
[01:00:42.400 --> 01:00:44.400]  Опыт Шада прошлого года говорит,
[01:00:44.400 --> 01:00:46.400]  что да, докер кажется умеет эмулировать другую
[01:00:46.400 --> 01:00:48.400]  платформу, другую архитектуру,
[01:00:48.400 --> 01:00:50.400]  должна работать.
[01:00:52.400 --> 01:00:54.400]  То есть это всё
[01:00:54.400 --> 01:00:56.400]  сложно, потому что программирование
[01:00:56.400 --> 01:00:58.400]  сложно устроено.
[01:00:58.400 --> 01:01:00.400]  Мы пишем не мэйн СПП
[01:01:00.400 --> 01:01:02.400]  с какой-то
[01:01:02.400 --> 01:01:04.400]  и читаем из файла, пишем файл,
[01:01:04.400 --> 01:01:06.400]  мы пишем какие-то библиотеки,
[01:01:06.400 --> 01:01:08.400]  они сложно устроены, для них нужно
[01:01:08.400 --> 01:01:10.400]  понимать, как там устроена
[01:01:10.400 --> 01:01:12.400]  сборка в C++, как работает система контроля
[01:01:12.400 --> 01:01:14.400]  версий, что такое CMake,
[01:01:14.400 --> 01:01:16.400]  что такое линтеры.
[01:01:16.400 --> 01:01:18.400]  В общем, какой-то
[01:01:18.400 --> 01:01:20.400]  опыт промышленного программирования
[01:01:20.400 --> 01:01:22.400]  вам потребуется, если у вас его нет, вам придется
[01:01:22.400 --> 01:01:24.400]  его получить. К сожалению,
[01:01:24.400 --> 01:01:26.400]  другого способа у нас не будет.
[01:01:26.400 --> 01:01:28.400]  Если у вас он есть, кажется, у вас должен быть
[01:01:28.400 --> 01:01:30.400]  курс про это какое-то, то
[01:01:30.400 --> 01:01:32.400]  вы с этими инструментами
[01:01:32.400 --> 01:01:34.400]  столкнетесь.
[01:01:38.400 --> 01:01:40.400]  Тут лучше вопросы вы задавайте, что вас
[01:01:40.400 --> 01:01:42.400]  в первую очередь волнует, а я буду вспоминать и рассказывать
[01:01:42.400 --> 01:01:44.400]  что-то сам.
[01:01:46.400 --> 01:01:48.400]  Да, у нас будет
[01:01:48.400 --> 01:01:50.400]  документ, вот он снова
[01:01:50.400 --> 01:01:52.400]  не загрузился, там
[01:01:52.400 --> 01:01:54.400]  описаны все правила, как вычисляются
[01:01:54.400 --> 01:01:56.400]  баллы задачи, про дедлайны, про какие-то
[01:01:56.400 --> 01:01:58.400]  лимиты, про обязательные задачи, требования
[01:01:58.400 --> 01:02:00.400]  к оценкам разным,
[01:02:00.400 --> 01:02:02.400]  про защиты, про списывания,
[01:02:02.400 --> 01:02:04.400]  не списывайте, пожалуйста,
[01:02:06.400 --> 01:02:08.400]  про то, как общаться в
[01:02:08.400 --> 01:02:10.400]  каналах. Да, вот важно,
[01:02:12.400 --> 01:02:14.400]  это все вы прочитаете сами,
[01:02:14.400 --> 01:02:16.400]  в конце концов.
[01:02:16.400 --> 01:02:18.400]  Давайте я расскажу про то, что вы
[01:02:18.400 --> 01:02:20.400]  не прочитаете, то,
[01:02:20.400 --> 01:02:22.400]  как получить от курса максимальную пользу.
[01:02:24.400 --> 01:02:26.400]  Смотрите, курс у нас довольно короткий,
[01:02:26.400 --> 01:02:28.400]  15 лекций,
[01:02:28.400 --> 01:02:30.400]  и за это время не возможно ничего успеть толкового.
[01:02:32.400 --> 01:02:34.400]  И я не смогу рассказать все, что знаю,
[01:02:34.400 --> 01:02:36.400]  я бы хотел, но не смогу.
[01:02:38.400 --> 01:02:40.400]  Времени у нас на все не хватит объективно, на лекциях,
[01:02:40.400 --> 01:02:42.400]  на семинарах даже не хватит.
[01:02:42.400 --> 01:02:44.400]  Поэтому я ожидаю от вас, что если вам
[01:02:44.400 --> 01:02:46.400]  интересно, если вам хочется чему-то научиться,
[01:02:46.400 --> 01:02:48.400]  то вы должны делать разные вещи
[01:02:48.400 --> 01:02:50.400]  дополнительно. Во-первых, вы должны задавать
[01:02:50.400 --> 01:02:52.400]  вопросы в чатах.
[01:02:52.400 --> 01:02:54.400]  Вот у нас будет общий чат, и все вопросы,
[01:02:54.400 --> 01:02:56.400]  которые возникают в мире,
[01:02:56.400 --> 01:02:58.400]  должны попадать туда,
[01:02:58.400 --> 01:03:00.400]  не к вашему семинаристу, не к вашему другу,
[01:03:00.400 --> 01:03:02.400]  а в общий чат.
[01:03:02.400 --> 01:03:04.400]  Потому что любой вопрос, который у вас возник,
[01:03:04.400 --> 01:03:06.400]  скорее всего, нужен еще кому-то.
[01:03:06.400 --> 01:03:08.400]  И тут есть следующая проблема.
[01:03:08.400 --> 01:03:10.400]  Вот появляется какой-то умный человек
[01:03:10.400 --> 01:03:12.400]  в курсе, но скорее всего, у вас
[01:03:12.400 --> 01:03:14.400]  среди вас есть какой-то очень умный человек, слишком умный.
[01:03:14.400 --> 01:03:16.400]  И вот он начинает сразу глубоко
[01:03:16.400 --> 01:03:18.400]  копать и задает какие-то очень сложные вопросы.
[01:03:18.400 --> 01:03:20.400]  Вы читаете чат и видите, что вы даже вопросы не понимаете,
[01:03:20.400 --> 01:03:22.400]  которые этот человек пишет, и вас чертовски
[01:03:22.400 --> 01:03:24.400]  расстраивает. А мы с ним
[01:03:24.400 --> 01:03:26.400]  пообщаемся.
[01:03:26.400 --> 01:03:28.400]  И если бы ему приятно, и мне интересно с ним
[01:03:28.400 --> 01:03:30.400]  общаться, вы думаете, ну, Боже мой.
[01:03:30.400 --> 01:03:32.400]  А я со своим тупым вопросом, что такое Атомик?
[01:03:32.400 --> 01:03:34.400]  Вот так и знал, что я что-то ляпну.
[01:03:34.400 --> 01:03:36.400]  Вот вопрос про Атомик
[01:03:36.400 --> 01:03:38.400]  абсолютно нормальный, если вы его
[01:03:38.400 --> 01:03:40.400]  первый раз слышите.
[01:03:40.400 --> 01:03:42.400]  Собственно, вы для этого и пришли. Если вы все знаете,
[01:03:42.400 --> 01:03:44.400]  то я вам не нужен. Вы просто
[01:03:44.400 --> 01:03:46.400]  почитаете код и сами разберетесь.
[01:03:46.400 --> 01:03:48.400]  Я для того, чтобы отвечать на вопросы,
[01:03:48.400 --> 01:03:50.400]  когда вы чего-то не знаете.
[01:03:50.400 --> 01:03:52.400]  Вот именно такие вопросы мне интересны.
[01:03:52.400 --> 01:03:54.400]  Мне интересно, чтобы вы задавали простые вопросы
[01:03:54.400 --> 01:03:56.400]  и узнавали то, что вы не знаете.
[01:03:56.400 --> 01:03:58.400]  Вот тогда вы получите
[01:03:58.400 --> 01:04:00.400]  пользу.
[01:04:00.400 --> 01:04:02.400]  Вот я сегодня наговорил вам огромное количество слов,
[01:04:02.400 --> 01:04:04.400]  которые вы вообще не понимаете, наверное.
[01:04:04.400 --> 01:04:06.400]  По моему замыслу не должны.
[01:04:06.400 --> 01:04:08.400]  Если вы понимаете, то, возможно,
[01:04:08.400 --> 01:04:10.400]  вам не стоит сюда ходить.
[01:04:10.400 --> 01:04:12.400]  Я говорил что-то про Мьютаксы, про Атомики,
[01:04:12.400 --> 01:04:14.400]  про какие-то сокеты, еполы, файберы.
[01:04:16.400 --> 01:04:18.400]  Задавайте вопросы, пишите свои вопросы.
[01:04:18.400 --> 01:04:20.400]  Понимаете,
[01:04:20.400 --> 01:04:22.400]  вы не пишете эти вопросы,
[01:04:22.400 --> 01:04:24.400]  по разным причинам.
[01:04:30.400 --> 01:04:32.400]  Вы ровно для этого поступаете в университет,
[01:04:32.400 --> 01:04:34.400]  а не учитесь на курсере,
[01:04:34.400 --> 01:04:36.400]  чтобы иметь возможность задать вопросы.
[01:04:36.400 --> 01:04:38.400]  Это главная польза от очного обучения,
[01:04:38.400 --> 01:04:40.400]  от того, что мы здесь присутствуем все вместе.
[01:04:40.400 --> 01:04:42.400]  Часто бывает так, что
[01:04:42.400 --> 01:04:44.400]  синдром самозванца.
[01:04:44.400 --> 01:04:46.400]  Вы думаете, боже мой, он сейчас узнает,
[01:04:46.400 --> 01:04:48.400]  что я ничего не соображаю.
[01:04:48.400 --> 01:04:50.400]  Я этого и не жду вообще-то.
[01:04:50.400 --> 01:04:52.400]  Это нормально, если вы чего-то не знаете.
[01:04:52.400 --> 01:04:54.400]  Вы для этого и пишете,
[01:04:54.400 --> 01:04:56.400]  задаете свои вопросы.
[01:04:56.400 --> 01:04:58.400]  В чате будут рады и сложным вопросом,
[01:04:58.400 --> 01:05:00.400]  и очень простым вопросом.
[01:05:00.400 --> 01:05:02.400]  Но единственное, я от вас все-таки чего-то ожидаю.
[01:05:02.400 --> 01:05:04.400]  Когда вы задаете вопрос,
[01:05:04.400 --> 01:05:06.400]  было бы здорово, если вы не просто задаете,
[01:05:06.400 --> 01:05:08.400]  как мне сделать что-то.
[01:05:08.400 --> 01:05:10.400]  А вы объяснили бы,
[01:05:10.400 --> 01:05:12.400]  подумали ли вы над ним сами.
[01:05:12.400 --> 01:05:14.400]  Может быть, вы подумали
[01:05:14.400 --> 01:05:16.400]  и ничего не смогли придумать,
[01:05:16.400 --> 01:05:18.400]  и ничего.
[01:05:18.400 --> 01:05:20.400]  А может быть, вы на чем-то споткнулись конкретным.
[01:05:20.400 --> 01:05:22.400]  Напишите о том,
[01:05:22.400 --> 01:05:24.400]  что у вас в голове происходит.
[01:05:24.400 --> 01:05:26.400]  Я могу, конечно, вам
[01:05:26.400 --> 01:05:28.400]  просто ответить на вопрос.
[01:05:28.400 --> 01:05:30.400]  Как сделать это? Используйте такой вызов.
[01:05:30.400 --> 01:05:32.400]  Или напишите такой код.
[01:05:32.400 --> 01:05:34.400]  Но это не очень полезно, потому что я вам даю готовый ответ.
[01:05:34.400 --> 01:05:36.400]  Вы все-таки учитесь для того, чтобы ответы сами находить.
[01:05:36.400 --> 01:05:38.400]  И если вы объясните мне,
[01:05:38.400 --> 01:05:40.400]  о чем вы успели подумать,
[01:05:40.400 --> 01:05:42.400]  я смогу вам объяснить,
[01:05:42.400 --> 01:05:44.400]  как додуматься дальше до ответа.
[01:05:44.400 --> 01:05:46.400]  И это касается любых вопросов.
[01:05:46.400 --> 01:05:48.400]  Сложных, самых элементарных.
[01:05:48.400 --> 01:05:50.400]  Вот нет тупых вопросов.
[01:05:50.400 --> 01:05:52.400]  Нет, конечно, нет тупых вопросов.
[01:05:52.400 --> 01:05:54.400]  Я ожидаю,
[01:05:54.400 --> 01:05:56.400]  что вы понимаете много
[01:05:56.400 --> 01:05:58.400]  и понимаете мало. И то, и другое одинаково
[01:05:58.400 --> 01:06:00.400]  годится. Это первое.
[01:06:00.400 --> 01:06:02.400]  Очень важное. Пожалуйста, чем больше будет вопросов, тем лучше.
[01:06:02.400 --> 01:06:04.400]  У нас в чате много семинаристов,
[01:06:04.400 --> 01:06:06.400]  много ассистентов.
[01:06:06.400 --> 01:06:08.400]  Если я буду до вас докапываться
[01:06:08.400 --> 01:06:10.400]  с этими расспросами, то может быть,
[01:06:10.400 --> 01:06:12.400]  ассистент вам ответить сразу нормально.
[01:06:12.400 --> 01:06:14.400]  Пишите, главное, в чат.
[01:06:14.400 --> 01:06:16.400]  Это первая сторона.
[01:06:16.400 --> 01:06:18.400]  Второй способ извлечь в курс
[01:06:18.400 --> 01:06:20.400]  больше пользы.
[01:06:20.400 --> 01:06:22.400]  Читайте код.
[01:06:22.400 --> 01:06:24.400]  Смотрите, вы открываете
[01:06:24.400 --> 01:06:26.400]  первую домашку.
[01:06:26.400 --> 01:06:28.400]  У вас уже будут сегодня задачи
[01:06:28.400 --> 01:06:30.400]  про Mutex. Мы еще не знаем, что это.
[01:06:30.400 --> 01:06:32.400]  Я вам кое-как за минуту объяснил.
[01:06:32.400 --> 01:06:34.400]  Этого, в принципе, достаточно.
[01:06:34.400 --> 01:06:36.400]  Для того, чтобы
[01:06:36.400 --> 01:06:38.400]  что-то сделать
[01:06:38.400 --> 01:06:40.400]  уже в первую неделю.
[01:06:40.400 --> 01:06:42.400]  Открываете домашку, и там написано
[01:06:42.400 --> 01:06:44.400]  «Напишите дедлог».
[01:06:44.400 --> 01:06:46.400]  Но, правда, не на потоках,
[01:06:46.400 --> 01:06:48.400]  а на файберах.
[01:06:48.400 --> 01:06:50.400]  И вы идете
[01:06:50.400 --> 01:06:52.400]  в эти файберы.
[01:06:52.400 --> 01:06:54.400]  Это репозитория какая-то.
[01:06:54.400 --> 01:06:56.400]  Научитесь его себе клонировать,
[01:06:56.400 --> 01:06:58.400]  открывать VDE,
[01:06:58.400 --> 01:07:00.400]  настроите себе IDE
[01:07:00.400 --> 01:07:02.400]  и научитесь
[01:07:02.400 --> 01:07:04.400]  запускать там примеры. Я открыл какой-то пример.
[01:07:04.400 --> 01:07:06.400]  Запускаю его.
[01:07:06.400 --> 01:07:08.400]  И он сейчас, надеюсь,
[01:07:08.400 --> 01:07:10.400]  соберется, если я
[01:07:10.400 --> 01:07:12.400]  не натворил бед ночью.
[01:07:16.400 --> 01:07:18.400]  И он как-то работает.
[01:07:18.400 --> 01:07:20.400]  Вот пример такой вот.
[01:07:20.400 --> 01:07:22.400]  Так вот,
[01:07:22.400 --> 01:07:24.400]  смотрите, что мне от вас нужно делать,
[01:07:24.400 --> 01:07:26.400]  чтобы вы не просто запустили этот код,
[01:07:26.400 --> 01:07:28.400]  а чтобы вы могли сделать вот так
[01:07:28.400 --> 01:07:30.400]  хоба и попасть в реализацию.
[01:07:30.400 --> 01:07:32.400]  А потом хоба и опуститься еще глубже.
[01:07:32.400 --> 01:07:34.400]  А потом пойти сюда.
[01:07:34.400 --> 01:07:36.400]  А потом пойти сюда.
[01:07:36.400 --> 01:07:38.400]  А потом пойти в разные библиотеки.
[01:07:38.400 --> 01:07:40.400]  А потом могли вернуться обратно быстро.
[01:07:42.400 --> 01:07:44.400]  Вот в нашем курсе
[01:07:44.400 --> 01:07:46.400]  будет довольно много библиотек,
[01:07:46.400 --> 01:07:48.400]  довольно много кода, которые написаны вокруг вас.
[01:07:48.400 --> 01:07:50.400]  И, собственно,
[01:07:50.400 --> 01:07:52.400]  такова жизнь. Вы придете на работу,
[01:07:52.400 --> 01:07:54.400]  и там будет написано уже миллион строк кода вокруг вас.
[01:07:54.400 --> 01:07:56.400]  И вам придется...
[01:08:00.400 --> 01:08:02.400]  Ну, у нас целый семестр впереди.
[01:08:02.400 --> 01:08:04.400]  Мы...
[01:08:04.400 --> 01:08:06.400]  У меня там компилируется, не знаю, там
[01:08:06.400 --> 01:08:08.400]  200 файлов в спецкурсе.
[01:08:08.400 --> 01:08:10.400]  Ничего не поделать. Так устроен мир,
[01:08:10.400 --> 01:08:12.400]  но его можно изучать ингриментально.
[01:08:12.400 --> 01:08:14.400]  То есть как-то по слоям. Не нужно
[01:08:14.400 --> 01:08:16.400]  понимать все. Но нужно уметь
[01:08:16.400 --> 01:08:18.400]  навигацию по коду. Нужно уметь по нему двигаться,
[01:08:18.400 --> 01:08:20.400]  переходить в реализацию, смотреть, как что-то устроено.
[01:08:20.400 --> 01:08:22.400]  Вот, пожалуйста,
[01:08:22.400 --> 01:08:24.400]  научитесь это делать, потому что иначе
[01:08:24.400 --> 01:08:26.400]  для вас курс превратится в какую-то череду заклинаний
[01:08:26.400 --> 01:08:28.400]  странных.
[01:08:28.400 --> 01:08:30.400]  Вот у нас есть какая-то одна из
[01:08:30.400 --> 01:08:32.400]  задач, которые будут уже через несколько
[01:08:32.400 --> 01:08:34.400]  недель, и вам там нужно
[01:08:34.400 --> 01:08:36.400]  писать библиотеку.
[01:08:36.400 --> 01:08:38.400]  Ну, собственно, файберы
[01:08:38.400 --> 01:08:40.400]  с поддержкой сокетов.
[01:08:44.400 --> 01:08:46.400]  И там используется какой-то механизм
[01:08:46.400 --> 01:08:48.400]  обработки ошибок. И вот вы просто
[01:08:48.400 --> 01:08:50.400]  должны уметь это сделать вот так.
[01:08:50.400 --> 01:08:52.400]  Просто перейти в реализацию.
[01:08:52.400 --> 01:08:54.400]  Не важно,
[01:08:54.400 --> 01:08:56.400]  делайте это в Vim, VDE, просто научитесь
[01:08:56.400 --> 01:08:58.400]  в вашей среде разработки
[01:08:58.400 --> 01:09:00.400]  этим пользоваться.
[01:09:02.400 --> 01:09:04.400]  Чем больше кода вы прочитаете,
[01:09:04.400 --> 01:09:06.400]  тем большему вы научитесь.
[01:09:06.400 --> 01:09:08.400]  У вас будет больше вопросов, вы просто будете
[01:09:08.400 --> 01:09:10.400]  лучше понимать, что происходит.
[01:09:12.400 --> 01:09:14.400]  Ну, и еще одна, может быть, странная вещь, про которую
[01:09:14.400 --> 01:09:16.400]  на семинарах мы тоже подробно поговорим,
[01:09:16.400 --> 01:09:18.400]  но пока, чтобы вас сразу не сбивало
[01:09:18.400 --> 01:09:20.400]  это с толку. Если вы
[01:09:20.400 --> 01:09:22.400]  открываете домашние работы в репозитории,
[01:09:22.400 --> 01:09:24.400]  то вы увидите, что мы
[01:09:24.400 --> 01:09:26.400]  используем на самом деле
[01:09:26.400 --> 01:09:28.400]  не то чтобы STD
[01:09:28.400 --> 01:09:30.400]  Mutex и STD
[01:09:30.400 --> 01:09:32.400]  Treads.
[01:09:32.400 --> 01:09:34.400]  У нас почему-то вот
[01:09:34.400 --> 01:09:36.400]  такие странные объекты будут.
[01:09:36.400 --> 01:09:38.400]  Ну, то есть,
[01:09:38.400 --> 01:09:40.400]  namespace будет не STD, а Twisted Like.
[01:09:40.400 --> 01:09:42.400]  В чем смысл? В том,
[01:09:42.400 --> 01:09:44.400]  что мы занимаемся
[01:09:44.400 --> 01:09:46.400]  синхронизацией в этом курсе.
[01:09:46.400 --> 01:09:48.400]  И, конечно же,
[01:09:48.400 --> 01:09:50.400]  вы будете ошибаться
[01:09:50.400 --> 01:09:52.400]  в этой синхронизации.
[01:09:52.400 --> 01:09:54.400]  Писать баги. Так вот,
[01:09:54.400 --> 01:09:56.400]  баги, скажем, в алгоритмах искать
[01:09:56.400 --> 01:09:58.400]  просто. Ну, почти всегда просто.
[01:09:58.400 --> 01:10:00.400]  Это большой случайный тест, и там что-то разваливается.
[01:10:00.400 --> 01:10:02.400]  В конкарнсе баги
[01:10:02.400 --> 01:10:04.400]  проявляются сложно,
[01:10:04.400 --> 01:10:06.400]  потому что они недетерминированы.
[01:10:06.400 --> 01:10:08.400]  Вот все зависит от того, как
[01:10:08.400 --> 01:10:10.400]  планировщик будет запускать потоки,
[01:10:10.400 --> 01:10:12.400]  когда он какой-то поток снимет, седра поставит,
[01:10:12.400 --> 01:10:14.400]  что он запустит параллельно, что он запустит последовательно.
[01:10:14.400 --> 01:10:16.400]  Поэтому, если вы напишете даже грубый баг
[01:10:16.400 --> 01:10:18.400]  и запустите такой наивный стресс-тест,
[01:10:18.400 --> 01:10:20.400]  то, скорее всего, он ничего не поймает.
[01:10:20.400 --> 01:10:22.400]  Просто вот сложно баги ловиться,
[01:10:22.400 --> 01:10:24.400]  иногда очень сложно.
[01:10:24.400 --> 01:10:26.400]  И ровно поэтому мы используем
[01:10:26.400 --> 01:10:28.400]  для того, чтобы писать весь наш код,
[01:10:28.400 --> 01:10:30.400]  мы используем
[01:10:30.400 --> 01:10:32.400]  сейчас я найду,
[01:10:32.400 --> 01:10:34.400]  специальный фреймвор, который
[01:10:34.400 --> 01:10:36.400]  когда-то был для этого курса написан,
[01:10:36.400 --> 01:10:38.400]  но не то, чтобы он как-то к курсу привязывал,
[01:10:38.400 --> 01:10:40.400]  он на самом деле довольно общий,
[01:10:40.400 --> 01:10:42.400]  про то, как можно тестировать
[01:10:42.400 --> 01:10:44.400]  вот такие многопоточные баги,
[01:10:44.400 --> 01:10:46.400]  ну, в смысле, код тестировать, как нам баги.
[01:10:46.400 --> 01:10:48.400]  Мы берем, и в репозитории
[01:10:48.400 --> 01:10:50.400]  про это есть короткая документация,
[01:10:50.400 --> 01:10:52.400]  пожалуйста, прочтите ее.
[01:10:52.400 --> 01:10:54.400]  Там говорится следующее,
[01:10:54.400 --> 01:10:56.400]  что мы заменяем все примитивы
[01:10:56.400 --> 01:10:58.400]  из стандартной библиотеки
[01:10:58.400 --> 01:11:00.400]  на вот собственные примитивы.
[01:11:00.400 --> 01:11:02.400]  Вот здесь раньше мог быть
[01:11:02.400 --> 01:11:04.400]  STD-атомик, про который мы пока ничего не понимаем,
[01:11:04.400 --> 01:11:06.400]  а теперь будет вот такой вот атомик.
[01:11:06.400 --> 01:11:08.400]  Документацию можно
[01:11:08.400 --> 01:11:10.400]  читать для STD, потому что
[01:11:10.400 --> 01:11:12.400]  все эти примитивы повторяют интерфейсы,
[01:11:12.400 --> 01:11:14.400]  ну, там с некоторыми очень редкими исключениями.
[01:11:14.400 --> 01:11:16.400]  Но при этом
[01:11:16.400 --> 01:11:18.400]  вот этот STD-твист-атомик
[01:11:18.400 --> 01:11:20.400]  он может компилироваться
[01:11:21.400 --> 01:11:23.400]  ну, там, по-моему,
[01:11:23.400 --> 01:11:25.400]  тремя или четырьмя разными способами.
[01:11:25.400 --> 01:11:27.400]  Вот тесты будут собираться, компилироваться
[01:11:27.400 --> 01:11:29.400]  там раз по пять, и в каждой
[01:11:29.400 --> 01:11:31.400]  сборке они будут вести себя по-разному.
[01:11:31.400 --> 01:11:33.400]  Вот mutex, он может быть
[01:11:33.400 --> 01:11:35.400]  mutex-ом настоящим,
[01:11:35.400 --> 01:11:37.400]  а может быть mutex-ом, в котором встроенные
[01:11:37.400 --> 01:11:39.400]  то, что называется fault injection.
[01:11:39.400 --> 01:11:41.400]  То есть вы говорите mutex log,
[01:11:41.400 --> 01:11:43.400]  а я вместо этого потока ваш переключаю на другой.
[01:11:43.400 --> 01:11:45.400]  Ну, просто потому что, почему бы и нет.
[01:11:45.400 --> 01:11:47.400]  Потому что операционная система сама это не сделает.
[01:11:47.400 --> 01:11:49.400]  Она будет реже переключать. Я буду часто переключать.
[01:11:49.400 --> 01:11:51.400]  И, скорее всего, из вашего решения
[01:11:51.400 --> 01:11:53.400]  выйдут какие-то баги с большей вероятностью.
[01:11:53.400 --> 01:11:55.400]  А в некоторые сборки...
[01:11:55.400 --> 01:11:57.400]  Ну, вообще говоря, мы весь наш код
[01:11:57.400 --> 01:11:59.400]  будем тестировать не только под настоящими
[01:11:59.400 --> 01:12:01.400]  потоками параллельными, а еще и
[01:12:01.400 --> 01:12:03.400]  под виртуальными потоками.
[01:12:03.400 --> 01:12:05.400]  То есть, с одной стороны, вы будете их писать, а с другой стороны,
[01:12:05.400 --> 01:12:07.400]  я их буду использовать для тестирования вашего кода.
[01:12:07.400 --> 01:12:09.400]  И все это чертовски хитро.
[01:12:09.400 --> 01:12:11.400]  Но когда-нибудь мы это поймем.
[01:12:11.400 --> 01:12:13.400]  Просто не удивляйтесь и имейте это в виду, что
[01:12:13.400 --> 01:12:15.400]  нужно писать всегда вот так.
[01:12:15.400 --> 01:12:17.400]  Прочтите инструкцию в репозиторе, обратите на это внимание.
[01:12:19.400 --> 01:12:21.400]  Ну, тут тесты очень специальны.
[01:12:21.400 --> 01:12:23.400]  Тут не то чтобы тесты хорошие, тесты они
[01:12:23.400 --> 01:12:25.400]  какие-то...
[01:12:25.400 --> 01:12:27.400]  Запустим много потоков и навалим
[01:12:27.400 --> 01:12:29.400]  их на какую-то структуру данных.
[01:12:29.400 --> 01:12:31.400]  Дело не в этом, а в том, как это все
[01:12:31.400 --> 01:12:33.400]  исполняется. Вот тут ронтайм меняется.
[01:12:33.400 --> 01:12:35.400]  То есть не сам какой-то тест, а вот именно
[01:12:35.400 --> 01:12:37.400]  то, как эти потоки на самом деле
[01:12:37.400 --> 01:12:39.400]  под капотом этого фреймворка планируются.
[01:12:43.400 --> 01:12:45.400]  Да, да.
[01:12:45.400 --> 01:12:47.400]  Код style обязательно. Google Style Guide.
[01:12:47.400 --> 01:12:49.400]  Линтеры будут.
[01:12:49.400 --> 01:12:51.400]  Линтеры позволят вам отформатировать
[01:12:51.400 --> 01:12:53.400]  автоматический ваш код.
[01:12:53.400 --> 01:12:55.400]  И заодно проверяют, что
[01:12:55.400 --> 01:12:57.400]  вы не пишете такое
[01:12:57.400 --> 01:12:59.400]  if условия return true.
[01:12:59.400 --> 01:13:01.400]  Вот такой код в курсе
[01:13:01.400 --> 01:13:03.400]  запрещен, и он запрещен
[01:13:03.400 --> 01:13:05.400]  автоматическими инструментами.
[01:13:05.400 --> 01:13:07.400]  Clangtide.
[01:13:07.400 --> 01:13:09.400]  Вот код, который не проходит
[01:13:09.400 --> 01:13:11.400]  Style Guide, не соблюдать Style Guide,
[01:13:11.400 --> 01:13:13.400]  не просто не протестировать.
[01:13:13.400 --> 01:13:15.400]  Домашки будут...
[01:13:15.400 --> 01:13:17.400]  Ну, если все совсем хорошо,
[01:13:17.400 --> 01:13:19.400]  то буквально для каждой лекции будут
[01:13:19.400 --> 01:13:21.400]  какие-то свои задачи.
[01:13:21.400 --> 01:13:23.400]  Да, давайте сделаем...
[01:13:23.400 --> 01:13:25.400]  Забыл. Самое главное для меня.
[01:13:25.400 --> 01:13:27.400]  Решить задачи невозможно.
[01:13:27.400 --> 01:13:29.400]  Но кажется, что в прошлом семестве никто
[01:13:29.400 --> 01:13:31.400]  не смог. Но там, правда, некоторые задачи
[01:13:31.400 --> 01:13:33.400]  появились позже, но...
[01:13:33.400 --> 01:13:35.400]  Или смог?
[01:13:35.400 --> 01:13:37.400]  Нет, в прошлом семестве никто не смог.
[01:13:37.400 --> 01:13:39.400]  Но там, правда, некоторые задачи появились позже, но...
[01:13:39.400 --> 01:13:41.400]  Или смог?
[01:13:41.400 --> 01:13:43.400]  Или смог?
[01:13:43.400 --> 01:13:45.400]  Три человека вроде было.
[01:13:45.400 --> 01:13:47.400]  Но вот теперь будет больше, и
[01:13:47.400 --> 01:13:49.400]  предлагается объявить какой-то конкурс
[01:13:49.400 --> 01:13:51.400]  с каким-то грандиозным призом, который еще не придуман.
[01:13:51.400 --> 01:13:53.400]  Вот для человека, который решит все задачи
[01:13:53.400 --> 01:13:55.400]  в семестре.
[01:13:57.400 --> 01:13:59.400]  Насколько я знаю, это некоторые альтернативные
[01:13:59.400 --> 01:14:01.400]  моему предложению вещи.
[01:14:01.400 --> 01:14:03.400]  Вот то, что я предлагаю сделать
[01:14:03.400 --> 01:14:05.400]  очень сложно.
[01:14:05.400 --> 01:14:07.400]  На это придется потратить много времени,
[01:14:07.400 --> 01:14:09.400]  много усилий, много чему научиться.
[01:14:09.400 --> 01:14:11.400]  Но вот если кто-то попробует решить все,
[01:14:11.400 --> 01:14:13.400]  то будет здорово.
[01:14:13.400 --> 01:14:15.400]  Все задачи решать не нужно для того, чтобы
[01:14:15.400 --> 01:14:17.400]  получить отличный, даже от ЛУ-10 все задачи не нужны.
[01:14:19.400 --> 01:14:21.400]  Критерии есть.
[01:14:21.400 --> 01:14:23.400]  Там написаны обязательные задачи,
[01:14:23.400 --> 01:14:25.400]  как рассчитывается балл.
[01:14:25.400 --> 01:14:27.400]  Критерии может быть немного пессимизирован,
[01:14:27.400 --> 01:14:29.400]  а может быть и нет.
[01:14:29.400 --> 01:14:31.400]  Но вот если что, пройдет некоторое время,
[01:14:31.400 --> 01:14:33.400]  мы, может быть, его пересмотрим.
[01:14:33.400 --> 01:14:35.400]  Но, скорее всего, на это рассчитывать не стоит.
[01:14:35.400 --> 01:14:37.400]  Все правила игры есть.
[01:14:37.400 --> 01:14:39.400]  Если вы их соблюдаете,
[01:14:39.400 --> 01:14:41.400]  то с вами ничего плохого не случится.
[01:14:43.400 --> 01:14:45.400]  Ну что, у нас закончилось время?
[01:14:47.400 --> 01:14:49.400]  Это будет... да, ура.
[01:14:49.400 --> 01:14:51.400]  Это в канале будет.
