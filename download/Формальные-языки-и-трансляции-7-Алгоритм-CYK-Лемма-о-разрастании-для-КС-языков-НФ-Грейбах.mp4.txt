[00:00.000 --> 00:12.200]  Так, всем здрасте. Мы с вами продолжаем занятие. Сегодня у нас, по-моему, седьмая часть нашего
[00:12.200 --> 00:20.200]  марлизонского балета. И из того, что, как известно, лектор лысый дегенерат, мы с вами в прошлый раз не
[00:20.200 --> 00:25.080]  доказали приведение к нормальной форме хомского до конца. Поэтому мы сегодня с вами будем продолжать
[00:25.080 --> 00:37.560]  эту эпопею. И давайте вспомним, как мы удаляем эпсилон, порождающий символ. В прошлый раз у нас
[00:37.560 --> 00:47.320]  с вами была грамматика вида следующего, в которой правила имели вид. Из А выводится БС, из А мог
[00:47.320 --> 00:55.200]  выводиться не терминал Б, из большой буквы А могло выводиться маленькая А, и у нас были эпсилон,
[00:55.200 --> 01:01.720]  порождающие правила. То есть мы по факту использовали правила за А и от С. И мы говорили
[01:01.720 --> 01:09.320]  следующее, что нам надо избавиться от вот таких вот ребят. И как мы с вами от них избавлялись? Мы
[01:09.320 --> 01:16.080]  мысленно говорили, что, окей, если у нас есть какой-то эпсилон, порождающий символ, то мы мысленно
[01:16.080 --> 01:22.800]  можем прикрыть его рукой и написать новые правила в грамматике. В итоге у нас получалась с вами
[01:22.800 --> 01:34.080]  грамматика G5, в которой было следующее, что если у нас есть правило А выводит БС, и Б был эпсилон
[01:34.080 --> 01:41.640]  порождающий, то мы добавляли с вами правила, из А выводится С. Я могу путать с порядком. А если из
[01:41.640 --> 01:49.840]  А выводилось БС, и С выводилось эпсилон, то мы добавляли правила из А выводит Б. И потом мы
[01:49.840 --> 02:06.080]  дропали все правила вида А выводит эпсилон. В смысле? Ну тогда мы на них клали.
[02:06.080 --> 02:17.760]  Нет, такие правила могли быть, но там это такие символы были бы непорождающими и недостижимыми.
[02:17.760 --> 02:31.440]  Ну да, вот оно, как мы избавлялись от эпсилон порождающих. То есть у нас просто эти символы
[02:31.440 --> 02:39.400]  перестают быть эпсилон порождающими. Но при этом здесь могли родиться непорождающие символы.
[02:39.400 --> 02:50.040]  Да, в принципе? Или нет? Не, они могли родиться, но в принципе там тогда бы символ был тоже в
[02:50.240 --> 03:12.000]  Ну да. Вот, и мы в прошлый раз начали доказывать следующее, что Lg5 равно Lg4 без эпсилон. И мы,
[03:12.000 --> 03:23.040]  кажется, с вами доказали... Я опять забыл. Ну какое мы не дописали? По-моему мы с Lg5 уже 4 или наоборот?
[03:23.040 --> 03:36.880]  Ага, то есть мы по факту не доказали вот это вот. Ну давайте докажем. Напоминаю,
[03:36.880 --> 03:46.720]  что мы доказываем следующее утверждение. А выводится слово W. Как же все смело, плохо сегодня.
[03:46.720 --> 03:59.600]  Так, грамматики G5. Тогда и только тогда, когда у А выводится G4. Слово W в грамматики G4. И мы делали
[03:59.600 --> 04:19.280]  индукцию по длине вывода. Итак, база какая у нас была? Что мы могли вывести за один шаг? Мы из A за
[04:19.280 --> 04:25.800]  один шаг в грамматики G5 могли вывести только пустое слово. Ой, не пустое, какой-то не терминал A.
[04:25.800 --> 04:33.920]  Ну а это значит, что у нас и в исходной грамматики G4 было такое правило.
[04:33.920 --> 04:59.040]  Базу доказали. Теперь переход. Ты будешь писаться сегодня? Переход. Значит, смотрим первое правило,
[04:59.040 --> 05:05.720]  которое у нас может быть. Тут есть несколько случаев. Давайте подумаем. Значит, у нас в грамматике
[05:05.720 --> 05:21.520]  было правило, допустим, из A за один шаг выводится BC, и дальше из B выводится некоторое слово U,
[05:21.520 --> 05:30.960]  а из C выводится некоторое слово V. Причем можно догадаться, что в грамматике G5 U и V не пустые.
[05:30.960 --> 05:40.120]  Потому что эпсимум порождающих символов в грамматике G5 нет.
[05:40.120 --> 05:55.200]  Тогда смотрите, что у нас получается с вами. По предположению индукции, давайте я сделаю хитрый
[05:55.200 --> 06:02.400]  шаг. Я сотру все с разных досок, а потом мы начнем писать на этой доске. Тогда будет все видно,
[06:02.400 --> 06:18.960]  я надеюсь. Да, скилл стирать с доски тоже должен быть. Я этим скиллом не обладаю.
[06:18.960 --> 06:32.120]  Итак, давайте будем это писать по предположению индукции аббревиатуры PPI. Я не знаю, почему,
[06:32.120 --> 06:44.720]  но давайте это. Смотрите, из B выводится U в G5. U не пустое. Следовательно, из B выводится U в
[06:44.720 --> 06:59.000]  грамматике G4. Значит из C выводится V, V не пустое. Грамматика G5 значит из C выводится V в
[06:59.000 --> 07:14.600]  грамматике G4. Правило A выводится BC, а у нас есть. Ну и в итоге аккумулируем вот это все,
[07:14.600 --> 07:25.480]  мы получаем, что из A выводится BC за один шаг в грамматике G4. Из B выводится U, из C выводится V.
[07:25.480 --> 07:37.080]  Это первый случай. Какой второй случай у нас может быть? Какое первое правило
[07:37.080 --> 07:48.400]  раскрытия у нас могло быть? Да, A выводит некоторое B. За один шаг выводит какое-то
[07:48.400 --> 08:01.520]  B, а B выводит слово W. Тогда давайте рассмотрим тоже. Тут будут три варианта. Какие? Это в грамматике
[08:01.520 --> 08:18.920]  G5. Вариант первый. A, B принадлежало правилам грамматики G4. Тогда у нас получается, по предположению
[08:18.920 --> 08:30.160]  индукции у нас из B выводилась W в G4, ну потому что в G5 у нас есть вывод. И получается A выводит B
[08:30.160 --> 08:38.280]  выводит W в грамматике G4. То есть у нас есть правило грамматики G4, значит и здесь есть у нас вывод.
[08:38.280 --> 08:54.720]  Какие два еще варианта у нас могут быть? У нас, как правило, A выводит B могло получиться либо таким
[08:54.720 --> 09:09.640]  образом, либо таким образом. Значит первое это у нас A выводит C, B принадлежало грамматики G4.
[09:09.640 --> 09:20.400]  C выводит Epsilon в грамматики G4. Я не знаю как писать, может быть мне кто-то подскажет как
[09:20.400 --> 09:32.360]  писать по этой доске. Может мне надо взять сухую тряпку. То есть смотрим как это правило могло
[09:32.360 --> 09:45.520]  появиться. И тогда мы можем сказать следующее. A выводит C, B в грамматике G4. Потом из C выводится
[09:45.520 --> 10:00.440]  C, Epsilon, G4. А по предположению индукции, V не пустое у нас, у нас выводит слово W. То есть вот такие
[10:00.440 --> 10:11.280]  вот переходы у нас. А понимаем почему случай 2-3 будет аналогичным? Что у нас правило появилось из-за
[10:16.520 --> 10:26.720]  А при этом был уже Epsilon в грамматике G4. Понятно почему это будет аналогичным разбираться?
[10:26.720 --> 10:36.800]  Ну типа либо мы убрали слева Epsilon порождающий, либо мы убрали справа Epsilon порождающий. Кажется это
[10:36.800 --> 10:48.120]  никак не влияет. Давайте напишу аналогично. И вот этим образом мы доказали вот этот вот факт.
[10:48.120 --> 11:11.280]  Тогда в итоге что у нас получается с вами? Для любого не пустого W в G4 это эквалентно тому,
[11:11.280 --> 11:21.840]  что из S мы выводим в грамматике G5 то же самое слово. А это эквалентно тому, что W принадлежит LGAG4,
[11:21.840 --> 11:37.200]  а это эквалентно тому, что W принадлежит LGAG5. В итоге я утверждаю, что мы доказали,
[11:37.200 --> 11:49.880]  что LGAG5 равно LGAG4 без Epsilon. Почему? Потому что Epsilon не принадлежит LGAG5,
[11:49.880 --> 12:08.960]  так как нет Epsilon порождающих. Вот это то, что мы с вами должны были в прошлый раз показать.
[12:08.960 --> 12:24.080]  Давайте сделаю стаканчик-глоток. И я спрошу, понятно ли это доказательство? Двигаемся дальше.
[12:24.080 --> 12:46.640]  Как фиксить будем? Что LGAG5 равно LGAG4 без Epsilon. Шестой шаг. Тут есть развилка,
[12:46.640 --> 13:05.160]  но добавим S' правила S, и G6 будет следующее. Значит у нас к получается, а не терминал на грамматике G5,
[13:05.160 --> 13:13.840]  добавляется не терминал вида S', а по виду остается тем же. Множество правил немножечко
[13:13.840 --> 13:21.280]  поменяется, а с артовый терминал будет S'. А правила грамматики будут следующими.
[13:21.280 --> 13:36.080]  PADG5 объединить правило S'. И еще мы добавляем правило следующее. S' будет выводить Epsilon при условии
[13:36.080 --> 13:58.360]  того, что Epsilon принадлежал LGAG4. Вопрос. Почему мы убили двух зайцев сразу? Каких двух зайцев мы
[13:58.360 --> 14:08.360]  сразу прибили? Когда мы с вами вот такую штуку построили. То есть мы заменили стартовый не терминал,
[14:08.360 --> 14:18.280]  добавили правила S' выводит S, и добавили правила S' выводит Epsilon, если Epsilon был, если стартовый
[14:18.280 --> 14:23.560]  не терминал до этого, был Epsilon порождающим. Какие две штуки мы убили с вами сразу?
[14:23.560 --> 14:48.440]  Ну это раз. Нет. Еще второе свойство, которое мы победили таким образом.
[14:53.560 --> 15:02.680]  Нет, у нас из одного не терминала в один не терминал. У нас пока такие правила есть. У нас правила теперь,
[15:02.680 --> 15:14.280]  все правила, которые были такие, у нас в правых частях не стоит стартовый не терминал. Потому что
[15:14.280 --> 15:18.760]  у нас появился новый стартовый не терминал, которого просто не было в правых частях никаких
[15:18.760 --> 15:29.000]  правил. Напоминаю, в нормальной форме Хомского в правых частях правил не может стоять стартовый
[15:29.000 --> 15:44.200]  не терминал. Вот это понятно? Пока стираю.
[15:49.240 --> 15:57.480]  Еще раз. Значит, что мы сделали на шестом шаге? Мы добавили стартовый не терминал, новый, и по сути
[15:57.480 --> 16:04.560]  из стартового не терминала нового добавили переход в старый стартовый не терминал. Таким образом,
[16:04.560 --> 16:12.080]  язык у нас не уменьшился. Но с другой стороны, мы сказали следующее, что если у нас Epsilon был в
[16:12.080 --> 16:17.160]  языке LNG4, то мы добавим специальное правило, которое у нас является заглушкой. То есть из стартового
[16:17.160 --> 16:24.680]  нового не терминала мы делаем переход в Epsilon. И благодаря этому у нас получается следующее,
[16:24.680 --> 16:34.600]  что LNG6 равняется LNG4, потому что LNG5 был без Epsilon, если что мы Epsilon вернули. И получается,
[16:34.600 --> 16:44.320]  что у нас в правых частях правил нигде не стоит штрих. То есть там нету стартового не терминала.
[16:48.160 --> 16:58.080]  Отлично. То есть мы получили, что LNG6 это тот же самый язык, который был в самом начале.
[16:58.080 --> 17:13.000]  Что, у вас 7 любимое число или нет? Да, это последний шаг. Итак,
[17:13.000 --> 17:32.320]  какого вида правила у нас с вами остались к седьмому шагу? Да. Да, A в B. Есть правила из
[17:32.320 --> 17:40.360]  Sv Epsilon, есть правила из A в Bc, которые уже хорошие, есть правила из Ava. Надо избавиться
[17:40.360 --> 18:02.960]  как-то от этих правил. По-хорошему стоит, но если что, замечу такую вещь, что можно в принципе в
[18:02.960 --> 18:08.400]  любом момент повторить процедуру удаления не пораждающих недостижимых символов. Ну,
[18:08.400 --> 18:17.280]  в смысле? Не, ну это по сути, по аналогичному тому, чтобы с каждого шага горбыш коллектор
[18:17.280 --> 18:24.560]  запускать. Ну там в большей части случаев этого возникнуть не должно. То есть по-моему только в
[18:24.560 --> 18:29.360]  удалении Epsilon пораждающих. И вот в последнем шаге возможно, что были какие-то символы,
[18:29.360 --> 18:38.200]  которые могли стать недостижимыми. Не пораждающими вряд ли, а вот недостижимыми вполне.
[18:38.200 --> 18:51.720]  Ну да, тогда надо удалять. В общем обычно делается очистка в конце, то есть дополнительная очистка
[18:52.440 --> 19:03.080]  А что мы делали, напоминая, когда мы удаляли не пораждающие, не это? Мы просто не удаляли
[19:03.080 --> 19:07.560]  ни терминала, сразу совсем правила, в котором он содержится. То есть у нас правила новые не
[19:07.560 --> 19:21.720]  добавлялись. Поэтому ничего не ломается. Итак, как бороться с этими ребятами? А делается
[19:21.720 --> 19:26.360]  следующее. Давайте сначала идею расскажу. Представьте себе, что у нас есть цепочка.
[19:26.360 --> 19:36.160]  А вводит В, В вводит С, С вводит Д. А дальше мы вводим, ну не знаю, допустим либо АВ, либо там не знаю, ЕФ.
[19:36.160 --> 19:55.160]  Ну да, ой, ну одну маленькую букву. Что тогда можно сделать? Вам эта картинка ничего не
[19:55.160 --> 20:00.760]  напоминает? Эпсалон-переход в автомате. То есть мысленно мы с вами можем представить, что это у нас
[20:00.760 --> 20:16.760]  Эпсалон-переход в автомате. А как мы их убирали? Тут благо есть цветной мел. Мы пробрасывали
[20:16.760 --> 20:30.000]  Переход. То есть мы делаем замыкание. Вот, то есть это делается ровно таким образом. То есть мы
[20:30.000 --> 20:40.240]  добавляем следующее. Давайте напишем немножечко, немножечко формально. G7. Что это такое? Это у нас
[20:40.240 --> 20:55.280]  картридж. Это у нас получается N6, Сигма, П штрих и С6. Теперь давайте определим правило, как у нас выглядит.
[20:55.280 --> 21:25.280]  Правило будет выглядеть в следующем. Давайте я напишу следующее. Значит АВСАСЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕ
[21:25.280 --> 21:50.160]  Причем в нашем room 이건 дальше в разной如е по
[21:50.160 --> 22:00.240]  а2 в чем за один шаг а3 за один шаг погнали то есть мы нашли цепь и дальше
[22:00.240 --> 22:08.120]  либо мы развилку делаем либо в бц либо в а тоже за один шаг
[22:12.160 --> 22:15.160]  вот
[22:20.160 --> 22:38.400]  что где где вот тут тут это просто что-то было не стертое с доски в прошлом где где вот это
[22:38.400 --> 22:47.160]  это то что осталось я говорю у меня нет скилла стирания с доски
[22:47.160 --> 22:53.120]  итак почему это работает
[23:03.760 --> 23:04.520]  есть догадки
[23:04.520 --> 23:11.720]  но опять же тут можно сделать пару индукций но
[23:11.720 --> 23:28.280]  но давайте я вкратце обрисую идею доказательства значит полные доказательства тут будет такое
[23:28.280 --> 23:37.640]  достаточно муторное итак предположим что у нас есть вывод из sv в каком-то в какой-то
[23:37.640 --> 23:47.560]  грамматике g6 тогда мы можем последовательность цепочек вывода там разбить на составные части
[23:48.040 --> 23:57.120]  там грубо говоря а1 потом значит у нас тут будет цепочка давайте назовем это цепь
[23:57.120 --> 24:07.240]  однобуквенных перих... цепь однобуквенных назовем в которой будет там не знаю b1 bкт то есть
[24:07.240 --> 24:13.600]  раскрываться будут только эти не терминалы потом все опять же раз у нас это цепь заканчивается там
[24:13.600 --> 24:21.160]  допустим либо в de либо f да ну понятно что каждый не терминал из правила мы будем раскрывать
[24:21.160 --> 24:29.920]  своим собственным образом да но главное нам в дереве вывода важно что мы можем говорить в
[24:29.920 --> 24:38.320]  дереве вывода это вот фиксировано что мы можем любым образом задавать порядок вывода порядок
[24:38.320 --> 24:46.560]  раскрытия терминалов да потому что грубо говоря мы находимся в стартовой вершине дерева и
[24:46.560 --> 24:56.080]  дальше мы должны получить каким-то образом итоговое слово целиком так ведь нам же неважно каким
[24:56.080 --> 25:03.600]  образом не терминалы раскрывать вот вообще неважно ну если у нас есть последовательность вывода просто
[25:03.600 --> 25:13.320]  мы можем переставлять эти последовательности местами благо у нас какое отношение благо у
[25:13.320 --> 25:18.480]  нас отношения хорошие ну и вот давайте давайте скажем так что мы будем раскрывать как только у
[25:18.480 --> 25:25.440]  нас есть не терминал с цепочкой следующий за ним мы сразу будем раскрывать вот и тогда у нас вот
[25:25.440 --> 25:31.120]  эти шаги действия которые у нас есть они будут идти последовательно и в итоге мы вот эту цепочку
[25:31.120 --> 25:39.680]  отследим это у нас g6 тогда вот эта вот цепочка заменяется просто на одно правило вы до 7 в g7
[25:39.680 --> 25:53.200]  и у нас все отлично работает ага это знаете это как у вас с садоводством дела с садоводством
[25:53.200 --> 26:04.240]  в общем рассказываю байку для того чтобы помидоры росли хорошо значит у них вообще любые культурные
[26:04.240 --> 26:11.280]  растения у нее ствол у нее есть ответвление и вот тут по моему это называется черенок местах
[26:11.280 --> 26:17.400]  которые пытаются идти разветвление вот они обычно находятся между обычным стволом и деревьями процедура
[26:17.400 --> 26:23.000]  по моему если я не ошибаюсь называть черенкованием для того чтобы у нас не вырастали там фрукты
[26:23.000 --> 26:30.480]  овощи достаточно маленьким мы берем и отламливаем вот этот кусок сразу вот и тогда у вас помидоры
[26:30.480 --> 26:37.640]  будут расти намного больше в размере вот и по факту мы можем просто сразу отследить этот эту
[26:37.640 --> 26:42.600]  последовательность и ее переломить на корню но собственно делаем то же самое по факту мы
[26:42.600 --> 26:55.640]  занимаемся черенкованием наших нашего дерева вывода вот в общем это делается вот таким вот образом
[26:55.640 --> 27:02.640]  стягиваем а дальше смотрите если мы говорим что у нас есть правила в же сей и мы хотим вывести
[27:02.880 --> 27:13.280]  в грамантику g6 тогда предположим что у нас есть правила а выводит бц ну в какой-то момент
[27:13.280 --> 27:22.080]  в ере мы встретили правила вводит бц но тогда по определению у нас есть сразу цепочка а 1 а 2
[27:22.080 --> 27:31.680]  ну и последняя цепь в будет раскрываться вы дереве g7 ну то есть идея ровно такая же как
[27:31.760 --> 27:40.680]  удаление всем переходов автобасе доказательства по факту тоже слово в слово доброе утро я не
[27:40.680 --> 27:52.120]  понял прикола во все в общем я утверждаю что мы доказали что наша грамантика привелась к
[27:52.120 --> 27:58.040]  нормальной форме холмского у кого есть вопросы или кто не верит в то что мы доказали это
[27:58.040 --> 28:10.520]  а конец доказательства
[28:10.520 --> 28:31.920]  ну да тут надо сказать что доказать почему дерево вывода мы можем называть дерево вывода то
[28:31.920 --> 28:39.760]  есть что любой не терминал можно раскрывать но это по факту опять же ну если формально доказывать
[28:39.760 --> 28:44.160]  я думаю это не будем делать из того что у нас отношение вводимости это рефлексивно-трандитивное
[28:44.160 --> 28:48.040]  отношение на и меньше то есть что это у нас транслятивное замыкание из какой-то
[28:48.040 --> 28:56.080]  количества раз мы точно выведем то или иное правило так ну не забываем в последней стадии
[28:56.080 --> 29:01.880]  сделать горбач коллектор да потому что у нас могло быть такое что из а выводилась
[29:01.880 --> 29:09.840]  б водилась с выводилась я не знаю там буква а да у нас какой-то момент буква б то есть у
[29:09.840 --> 29:15.400]  нас перешла произошла перемычка и б мок стать не не порождает это б мог стать непорождающим
[29:15.400 --> 29:23.520]  и недостижимым символом да поэтому чтобы чисто было можно запустить еще раз горбач коллектор как
[29:23.520 --> 29:29.880]  оказывается полезно что горбач коллектор итак давайте теперь мы поговорим про применение
[29:29.880 --> 29:37.080]  этого факта на самом деле из этого будут два следствия одно теоретическое другое практическое
[29:37.080 --> 29:51.160]  смотрите предположим что у нас есть грамматика же вы на внф хомского по факту это у нас любая
[29:51.160 --> 29:56.880]  грамматика мы можем теперь ее считать такие такой и теперь представьте себе что у нас есть
[29:56.880 --> 30:05.120]  слово в какое-то и нам надо ответить на следующий вопрос принадлежит ли в языку задаваем грамматика
[30:05.120 --> 30:23.440]  же теперь вспоминаем какие правила у нас есть с вами а выводят бц из с выводят эпсилон и за это
[30:23.440 --> 30:35.840]  вопрос можем ли мы как-то быстро проверить или придумать алгоритм того что слово лежит в языке
[30:35.840 --> 31:01.720]  не обязательно вот этого ну нет ну да ну говорю что просто то что выводится из б то что выводится
[31:01.720 --> 31:06.800]  будет меньше длины вот это точно можем гарантировать потому что каждый из этих терминалов не всем
[31:06.800 --> 31:13.360]  порождающий ну а там может быть еще какое-то другое дерево вывода под дерево вывода из
[31:13.360 --> 31:38.160]  не терминалы быть да да да но да собственно собственно смотрите мы можем отвечать на вопрос
[31:38.160 --> 31:49.040]  выводим али из какого-то не терминала вот такая вот вещь сразу скажу что это с это слайс
[31:49.040 --> 32:04.040]  питоновский все шпитонов знакома ну а полу интервал его сказал так вот и по факту смотрите
[32:04.040 --> 32:13.240]  мы можем завести замечательная вещь да так лучше не писать если что это я пишу на лекции
[32:13.240 --> 32:34.840]  так чтобы это чтобы сократить просто название это плохо и так смотрите мы можем вести вот такую
[32:34.840 --> 32:43.760]  вот вещь которая будет эквалентно вот этому соотношению да какая база будет
[32:43.760 --> 32:54.960]  одна буквенная то есть нам нужно пробежаться по правилам всех такого вида пробежаться по всем
[32:54.960 --> 33:05.520]  буквам и сказать выводится ли это буква или нет вот а перехода так я надеюсь все знают такое
[33:05.520 --> 33:12.520]  понять как динамика по подотрескам все слышу а ну окей давайте расскажу в общем идея такая что
[33:12.520 --> 33:21.840]  на курсе алгоритмов про это будут наверное рассказывать там классическая задача про это это
[33:21.840 --> 33:30.240]  как можно быстро матрицы перемножить последовательность смотрите идея какая все расскажу я на картинке
[33:30.240 --> 33:41.760]  нарисую значит вот у нас есть подотрезок от от этого элемента до житого у нас с вами есть не
[33:41.760 --> 33:47.360]  терминал а который мы хотим проверить выводится ли это слово целиком то есть выводится ли из а
[33:47.360 --> 33:59.480]  в и житая это эквалентно тому что существует какое-то разбиение средняя к и существует
[33:59.480 --> 34:11.880]  такое правило а в бц что из а выводится отрезок ситого по катам а из ой не из б а из б а из
[34:11.880 --> 34:22.040]  выводится под отрезок с катего пожитый то есть мы берем наш слов пополам и берем вот такое вот
[34:22.040 --> 34:29.080]  соотношение то есть выводится либо отсюда выводится лице такое отсюда а вот это у нас тоже определенная
[34:29.080 --> 34:49.960]  динамика вот такая вот то есть по факту нам надо пробежаться по определенному отрезку пробежаться
[34:49.960 --> 34:57.360]  по всем правилам пробежаться по промежуточной точке и понять выводится ли левый кусок и выводится ли
[34:57.360 --> 35:02.600]  правый кусок если оба выводится то значит из нашего терминала мы тоже можем вывести это это
[35:02.600 --> 35:11.600]  под слово вы конце нам надо проверить следующее какое значение нам надо в конце проверить
[35:11.600 --> 35:17.680]  после того как мы закончим динамику до длины слова
[35:28.240 --> 35:32.520]  если ответ на этот вопрос дата слова выводится если нет то не выводится
[35:32.520 --> 35:38.640]  какая симптомика этого чудо дело
[35:38.640 --> 36:01.840]  да куб от количества не терминалов ой куб от длины слова на количество правил
[36:08.640 --> 36:11.680]  что много
[36:17.680 --> 36:18.280]  что
[36:22.280 --> 36:34.000]  экспоненту для некоторых видов грамматик будет работать за линию да в общем наша целью этого курса
[36:34.000 --> 36:39.840]  и в общем виталии будет в теории рассказывать как для большого класса грамматик сделать вот так
[36:39.840 --> 36:53.080]  за линию но потому что блин представьте себе мы пишем компилятор да у нас извините программа
[36:53.080 --> 37:00.120]  там сколько символов состоит и сколько этих управляющих символов из тысячи и ну и из
[37:00.120 --> 37:05.880]  миллионов там ну возьмем код той же компании 1s там 18 миллионов строк кода а теперь представляем
[37:05.880 --> 37:20.800]  мы это компилим блин закуп как вам не я боюсь я боюсь до скончания это до нового взрыва великого
[37:20.800 --> 37:34.160]  время пройдет и то оно еще будет компилироваться в общем да значит сегодня наша цель такая начнем
[37:34.160 --> 37:38.200]  по крайней мере я думаю два пункта мы с вами разберем а треть как раз ставим следующий раз
[37:38.200 --> 37:48.320]  значит у нас темы такие лемма разрастание нормальная форма грейба х грейба х это женщина а что
[37:48.320 --> 37:57.320]  мы знаем про иностранные фамилии женского рода они не склоняются то есть мы с вами сразу
[37:57.320 --> 38:12.720]  понимаем как можно попасть в просак на экзамене ну конечно да собственно итак значит смотрите
[38:12.720 --> 38:19.480]  план есть ли другие нормальные формы и если аналогика из грамматика но смотрите вот у нас
[38:19.480 --> 38:25.840]  есть грамматика в нормальной форме хомского давайте поймем некоторые вывод каждый уровень
[38:25.840 --> 38:32.600]  дерева вывода увеличивает длину слова выводимого не более чем в два раза да потому что каждый не
[38:32.600 --> 38:39.840]  терминалом у нас максимум раскрывается не более чем два не терминала да потому что правила
[38:39.840 --> 38:47.160]  вида а бц у нас есть тогда давайте попытаемся оценить высоту дерева вывода относительно длины
[38:47.160 --> 39:02.000]  слова да значит смотрите если мы предположим что у нас высота дерева n тут надо вспомнить какая
[39:02.000 --> 39:17.440]  нумерация у меня с нуля или с единицы вот это у нас высота дерева 1 тогда у нас получается кажется
[39:17.440 --> 39:29.120]  что если у нас высота дерева n то тогда длина слова не больше чем высота дерева для этого
[39:29.120 --> 39:35.040]  слова минус 1 грамматики вы нормальной формы хомского вроде бы я считать умею сейчас
[39:35.040 --> 39:46.800]  а бц ну да похоже на правду тогда смотрите что мы можем оценить отсюда давайте прикинем так
[39:46.800 --> 39:58.040]  логарифм да нам нужен получается а то что не больше равно логарифм двоичный от длины слова
[39:58.040 --> 40:05.480]  дерева и тогда получается высота дерева всегда больше равна чем логарифм двоичный от длины
[40:05.480 --> 40:18.320]  слова плюс один нам эта оценочка понадобится и тогда мы можем сделать следующую фишку мы можем
[40:18.320 --> 40:27.640]  понять какие языки не являются контекст свободными парам попам глема о разрастании номер два всего их
[40:27.640 --> 40:45.320]  будет четыре для контекстно свободных языков начато пусть у нас лкс язык тогда давайте
[40:45.320 --> 40:56.400]  вспоминать как для автоматных языков существует такое п что любого слова лежащего в языке такое
[40:56.400 --> 41:04.480]  что его длина хотя бы п дальше значит тут идут отличия существуют такие слова так дайте ка
[41:04.480 --> 41:18.680]  я посмотрю ага они у меня так прочитано x у y в z такое что слово наше раскладывается в 5 компонент
[41:18.680 --> 41:28.360]  x у y в z теперь смотрите ограничение почему не контекст свободных языков доказывается сложнее
[41:28.360 --> 41:37.760]  потому что ограничение у нас кладутся на середину ограничение не пустоты кладется на второе и
[41:37.760 --> 41:49.760]  четвертое слово такое что для любого к опять же не отрицательного у нас слово x у y x у в каты
[41:49.760 --> 42:03.600]  y в каты z будет лежать в языке вот такая формулировка то есть у нас будет разрастаться
[42:03.880 --> 42:08.200]  со второй ah 4 и буду разрастаться второе и четвертое слово независимо друг от друга
[42:08.200 --> 42:25.660]  instantaneous и независимая связано с Kubharo
[42:25.660 --> 42:28.680]  внутрь у нас не будет объединенной структуры в которой все будет разрастаться
[42:28.680 --> 42:32.680]  То есть надо отслеживать две ветки. Итак, как это доказывать?
[42:35.680 --> 42:39.680]  Как вы думаете, вторая доска связана с первым каким-нибудь образом?
[42:47.680 --> 42:52.680]  Ну вот. А теперь давайте по мыслим. Немножечко о следующем.
[42:52.680 --> 42:54.680]  Давайте П возьмем, какой-нибудь.
[42:57.680 --> 43:00.680]  Ну давайте, во-первых, возьмем грамматику G в NF-грейбах.
[43:04.680 --> 43:08.680]  Так, спасибо. Все, у меня уже флешбеки из будущего.
[43:09.680 --> 43:10.680]  NF-хомского.
[43:13.680 --> 43:16.680]  Такое, что язык Аджер знает наш язык.
[43:16.680 --> 43:19.680]  И теперь смотрите. Возьмем П.
[43:19.680 --> 43:22.680]  Два в степени количеств унитерминала.
[43:28.680 --> 43:31.680]  Тогда что мы можем с вами написать?
[43:38.680 --> 43:43.680]  Высота дерева. Оценивается как логарифм двоичный.
[43:44.680 --> 43:48.680]  Высота дерева оценивается как логарифм двоичный.
[43:49.680 --> 43:56.680]  От чего? От длины слова плюс один.
[43:57.680 --> 44:01.680]  А длина слова у нас хотя бы получается два в степени n.
[44:04.680 --> 44:07.680]  Так, получается больше или равно, чем что?
[44:08.680 --> 44:13.680]  Логарифм двоичный два в степени n плюс один.
[44:19.680 --> 44:21.680]  Сейчас я подумаю, хватит ли этого.
[44:32.680 --> 44:33.680]  Сейчас.
[44:38.680 --> 44:40.680]  А, это высота один.
[44:40.680 --> 44:42.680]  То есть у нас получается от корня.
[44:42.680 --> 44:44.680]  Давайте я картинку рисую.
[44:45.680 --> 44:52.680]  Вот здесь вот будет еще хотя бы n плюс один высота.
[44:52.680 --> 45:03.680]  То есть у нас, смотрите, в дереве вывода самый длинный ствол будет содержать хотя бы количество унитерминалов плюс один символ унитерминалов.
[45:07.680 --> 45:16.680]  То есть у нас есть s, а у нас есть какая-то буква и существует ствол, в котором будет хотя бы столько нитерминалов.
[45:32.680 --> 45:33.680]  Так?
[45:38.680 --> 45:41.680]  У нас ствол из нитерминалов.
[45:42.680 --> 45:45.680]  Длины хотя бы количество нитерминалов плюс один.
[45:46.680 --> 45:48.680]  Что из этого можем сказать?
[45:50.680 --> 45:52.680]  Да, какой-то нитерминал находится дважды.
[45:52.680 --> 45:54.680]  То есть у нас будет картинка такая.
[45:55.680 --> 45:58.680]  И в какой-то момент времени будет выводиться a.
[46:04.680 --> 46:05.680]  И давайте рассмотрим.
[46:07.680 --> 46:09.680]  Здесь a, здесь какое-то слово.
[46:09.680 --> 46:14.680]  Давайте положим то, что у нас выводится из этого нитерминала как?
[46:14.680 --> 46:15.680]  Что?
[46:15.680 --> 46:16.680]  Y.
[46:18.680 --> 46:20.680]  То, что выводится здесь, это будет у.
[46:20.680 --> 46:23.680]  То, что у нас выводится здесь, это выводится y.
[46:23.680 --> 46:26.680]  Здесь у нас выводится x, здесь выводится z.
[46:27.680 --> 46:30.680]  Вот, мы выводим все слово x,u,y,v,z.
[46:31.680 --> 46:32.680]  Ой.
[46:33.680 --> 46:34.680]  Что-то не так, да?
[46:34.680 --> 46:35.680]  Вот тут вот.
[46:35.680 --> 46:36.680]  Да-да-да.
[46:37.680 --> 46:42.680]  Итак, и мы с вами сразу понимаем, какое слово будет лежать в языке для произвольного k.
[46:46.680 --> 46:47.680]  Ну да.
[46:47.680 --> 46:52.680]  x,u,k,t,y,v,k,t,z будет лежать в l.
[46:52.680 --> 46:56.680]  Ну потому что у нас по факту есть вывод из s.
[46:57.680 --> 46:58.680]  Выводится x,a,z.
[46:58.680 --> 47:05.680]  Из x у нас выводится x,u,a,v,z.
[47:05.680 --> 47:08.680]  Ну и это a можно разрастать сколько угодно раз.
[47:11.680 --> 47:12.680]  А?
[47:16.680 --> 47:17.680]  Вообще да.
[47:17.680 --> 47:23.680]  Ну, не, просто можно написать, что найдется вот такой не терминал, вот что выполнится вот это соотношение.
[47:24.680 --> 47:27.680]  Строже, я думаю, станет непонятнее.
[47:29.680 --> 47:35.680]  То есть у меня, как у человека, который рассказывает это все аудитории, есть такой терминал.
[47:35.680 --> 47:36.680]  Вот.
[47:36.680 --> 47:37.680]  Вот.
[47:37.680 --> 47:38.680]  Вот.
[47:38.680 --> 47:39.680]  Вот.
[47:39.680 --> 47:40.680]  Вот.
[47:40.680 --> 47:41.680]  Вот.
[47:41.680 --> 47:42.680]  Вот.
[47:42.680 --> 47:43.680]  Вот.
[47:43.680 --> 47:44.680]  Вот.
[47:44.680 --> 47:53.680]  Итак, у человека, который рассказывает это все аудитории, есть задача, чтобы поддержать компромисс между понятной и сложной.
[47:58.680 --> 47:59.680]  Тоже рассказать понятной.
[47:59.680 --> 48:04.680]  Ну, там дальше на самом деле по контексту будет понятная, понимаете вы или нет.
[48:06.680 --> 48:08.680]  Грубо говоря, говорите уверенно.
[48:11.680 --> 48:12.680]  Это никому еще не мешало.
[48:12.680 --> 48:13.680]  Вот.
[48:14.680 --> 48:18.680]  Итак, что нам необходимо доказать с вами?
[48:22.680 --> 48:32.680]  Нам надо доказать, что уй, во-первых, что ув не пустое, а второе, что длина уйв не больше, чем п.
[48:35.680 --> 48:38.680]  Для этого мы сделаем следующее.
[48:38.680 --> 48:43.680]  Возьмем самое нижнее повторение не терминала.
[48:44.680 --> 48:51.680]  То есть возьмем, поднимемся по этому дереву вверх и возьмем первый не терминал, который встречается дважды.
[48:58.680 --> 49:01.680]  В смысле ствол, не целое дерево?
[49:06.680 --> 49:08.680]  Как выглядит объект, который мы ищем?
[49:08.680 --> 49:14.680]  Мы берем последовательность выводов, которая у нас есть.
[49:14.680 --> 49:17.680]  Раскрываем не терминалы только по этой цепи.
[49:23.680 --> 49:26.680]  Дальше смотрим, какие не терминалы на этом стволе появлялись.
[49:28.680 --> 49:31.680]  Дальше берем, отматываемся по вот этому стволу.
[49:31.680 --> 49:34.680]  Тут какие-то могли быть еще не терминалы, которые мы не раскрыли.
[49:34.680 --> 49:41.680]  Давайте скажу честно, что то, что у нас здесь, это в каком-то случае последствия терминалов и не терминалов.
[49:41.680 --> 49:43.680]  До тех пор, пока мы их до слова не раскрыли.
[49:45.680 --> 49:47.680]  По факту, это что у нас будет?
[49:47.680 --> 49:51.680]  С выводится α, а, β.
[49:51.680 --> 50:02.680]  Дальше из а у нас выводится, каким-то образом, получается у, а, в, α, г.
[50:03.680 --> 50:11.680]  Потом только из а у нас раскрывается у, можем создать такой порядок, что из а выводится х, а из г выводится z в последнюю очередь.
[50:18.680 --> 50:22.680]  Потом в каком-то момент из а выводится х, а из β у нас выводится z.
[50:23.680 --> 50:25.680]  В последнюю очередь можно выводить.
[50:26.680 --> 50:42.680]  Мы ищем первый а, который на пути вот этого дерева вывода, вот этой части, а у получается, в, β.
[50:42.680 --> 50:53.680]  Вот на вот этом пути встречается первым при раскрытии в обратную сторону, по этому корню, по этому стволу.
[50:53.680 --> 50:57.680]  То есть мы нумируем последствия действий в стволе, идем в обратном порядке.
[50:58.680 --> 51:02.680]  И начинаем заводить сет не терминалов, по которым мы раскрывали правила.
[51:03.680 --> 51:07.680]  Вот как только в первый раз встретили какое-то повторение не терминала, его трекаем.
[51:07.680 --> 51:08.680]  И это у нас будет а.
[51:12.680 --> 51:13.680]  Вот, зачем это делается?
[51:14.680 --> 51:27.680]  Первое, что мы с вами можем заметить, давайте рассмотрим вот эту цепочку вывода а, у, а, в, и это выводит у.
[51:30.680 --> 51:34.680]  Давайте поймем какая высота у этого ствола.
[51:39.680 --> 51:40.680]  Да.
[51:43.680 --> 51:55.680]  Сейчас, давайте поймем.
[52:00.680 --> 52:02.680]  Нет, н, ровно.
[52:09.680 --> 52:11.680]  А, высота в ребрах считается, да?
[52:13.680 --> 52:18.680]  Да, это в ребрах высота, да.
[52:26.680 --> 52:27.680]  Ну да.
[52:29.680 --> 52:30.680]  Не, не, не, не, не.
[52:38.680 --> 52:39.680]  Сейчас.
[52:44.680 --> 52:51.680]  Так, сейчас, секундочку, давайте, а, б, ц, а.
[52:55.680 --> 52:57.680]  Так, это я просто прикинусь.
[52:58.680 --> 53:03.680]  Так, если у нас не терминал 3, да, то сколько тут получается?
[53:04.680 --> 53:11.680]  Раз, два, три, четыре, да, вот так вот.
[53:13.680 --> 53:17.680]  Все, рубрика арифметика, рубрика арифметика в прямом эфире, да.
[53:18.680 --> 53:20.680]  Так, ну тогда что у нас получается?
[53:22.680 --> 53:31.680]  А что мы можем сказать, то есть это получается у нас высота дерева вывода, слово, а какого?
[53:33.680 --> 53:34.680]  Y в, да?
[53:44.680 --> 53:48.680]  Ну да.
[53:52.680 --> 54:01.680]  Да, согласен, берем самый длинный ствол, да, у него длина такая, и тогда, да, согласен.
[54:02.680 --> 54:07.680]  Что надо брать самый длинный ствол и подниматься из самого длинного ствола наверх, чтобы никаких проблем не было.
[54:08.680 --> 54:12.680]  Так, сейчас, секунду, где у нас соотношение было?
[54:14.680 --> 54:17.680]  Нам нужно оценить длину слова сверху.
[54:21.680 --> 54:36.680]  А, логарифм 2, получается длины слова Y в не больше, чем OH от этого слова, минус 1.
[54:37.680 --> 54:40.680]  То есть это n, то есть это сверху n оценивается.
[54:40.680 --> 54:47.680]  Ура!
[54:49.680 --> 54:52.680]  Так, первую штуку оценили сверху.
[54:53.680 --> 54:57.680]  Почему у В не пусто?
[55:11.680 --> 55:13.680]  Так, давайте смотреть.
[55:14.680 --> 55:16.680]  Для этого сделаем следующее.
[55:17.680 --> 55:31.680]  Давайте поймем в дереве вывода, а, под дереве вывода, которое получается у-а-в, рассмотрим первый шаг.
[55:36.680 --> 55:38.680]  У нас грамматика в какой форме находится?
[55:39.680 --> 55:40.680]  В форме Хомского.
[55:41.680 --> 55:43.680]  Значит, у нас правило было точно такое.
[55:44.680 --> 55:45.680]  Ну, какое-то.
[55:47.680 --> 55:49.680]  Дальше смотрите, что у нас может получиться.
[55:50.680 --> 55:52.680]  У нас может быть несколько случаев.
[56:02.680 --> 56:03.680]  Ну, можно так.
[56:04.680 --> 56:05.680]  В общем, тут как угодно.
[56:05.680 --> 56:09.680]  То есть, можно сказать, что если у В...
[56:16.680 --> 56:17.680]  Ну, да.
[56:26.680 --> 56:29.680]  За какое-то количество шагов заводится А, да?
[56:32.680 --> 56:34.680]  Ну, за больше, чем один шаг.
[56:36.680 --> 56:38.680]  И что?
[56:39.680 --> 56:40.680]  Да.
[56:44.680 --> 56:45.680]  Ну, что-то как-то это.
[56:46.680 --> 56:48.680]  Давайте лучше не будем писать, так?
[56:49.680 --> 56:51.680]  Смотрите, а дальше сделаем следующее.
[56:52.680 --> 56:53.680]  Не умоляя общности,
[56:53.680 --> 56:54.680]  не умоляя общности,
[57:02.680 --> 57:09.680]  мы можем сказать, что из В выводилось у-а-альфа.
[57:11.680 --> 57:17.680]  То есть, какой-то из этих не терминалов В и С должен был вывести А.
[57:19.680 --> 57:22.680]  Но предположим, что это у нас будет не терминал А.
[57:24.680 --> 57:28.680]  Тогда рассмотрим первый момент, в который появился А.
[57:34.680 --> 57:37.680]  Да, я буду теперь в деле вывода писать так.
[57:38.680 --> 57:41.680]  Тогда у нас...
[57:42.680 --> 57:44.680]  Так, сейчас, секунду.
[57:47.680 --> 57:48.680]  Давайте смотреть.
[57:49.680 --> 57:50.680]  Да, неважно, короче.
[57:51.680 --> 57:54.680]  У нас из терминала В вывелся у-а-альфа, да?
[57:55.680 --> 58:01.680]  Тогда из С выводился какое-то слово, не знаю, Т.
[58:02.680 --> 58:06.680]  Причем, если посмотреть, как у нас выводится это все дело,
[58:07.680 --> 58:08.680]  ну, это пусть у нас...
[58:10.680 --> 58:11.680]  Р-слово, да?
[58:12.680 --> 58:14.680]  То есть, из В у нас выводится у-а-р,
[58:14.680 --> 58:15.680]  а из С выводится Т.
[58:16.680 --> 58:18.680]  Но С у нас не эпсилонопорождающий.
[58:20.680 --> 58:24.680]  Следовательно, длина Т больше нуля.
[58:25.680 --> 58:27.680]  А Т является у нас кем?
[58:28.680 --> 58:32.680]  Получается, Т является суффиксом слова W.
[58:36.680 --> 58:37.680]  Вот так.
[58:37.680 --> 58:42.680]  Поэтому длина слова W, длина слова С, длина С, длина С.
[58:42.680 --> 58:45.680]  Поэтому длина слова В больше нуля.
[58:46.680 --> 58:47.680]  То есть, нужно чуть-чуть аккуратнее.
[58:48.680 --> 58:49.680]  То есть, мы смотрим, что выводится отсюда,
[58:50.680 --> 58:52.680]  значит, из этого должен был вывести суффикс слова В.
[58:55.680 --> 58:57.680]  А у нас из не терминала выводится только не пустое слово.
[59:02.680 --> 59:04.680]  Не, я не проживал, я понял, что его просто не надо делать.
[59:07.680 --> 59:10.680]  Да, потому что я думал, что надо раскрывать Альфу,
[59:10.680 --> 59:12.680]  понимать, что там находится и так далее.
[59:13.680 --> 59:14.680]  Зачем?
[59:15.680 --> 59:16.680]  Наша цель доказать, что слово В не пустое.
[59:17.680 --> 59:20.680]  Грубо говоря, из В выводится А, значит, из С выводится то, что правее А.
[59:31.680 --> 59:32.680]  Ну, то самое А, которое у нас было.
[59:33.680 --> 59:34.680]  То есть, берем первый момент времени,
[59:35.680 --> 59:38.680]  когда этот не терминал А появился в нашей цепи вывода.
[59:41.680 --> 59:44.680]  Который у нас был в выводе А у АВ.
[59:45.680 --> 59:46.680]  Да.
[59:47.680 --> 59:48.680]  Да, смотрим...
[59:49.680 --> 59:50.680]  А?
[59:51.680 --> 59:52.680]  Почему У и В не содержат А?
[59:55.680 --> 59:57.680]  Скорее всего, все корректно, я тоже не понимаю.
[59:58.680 --> 59:59.680]  Ну...
[01:00:01.680 --> 01:00:04.680]  Тут интересная, опять же, суть момента состоит в том,
[01:00:05.680 --> 01:00:09.680]  что мы можем менять последовательность вывода в наших правилах.
[01:00:10.680 --> 01:00:12.680]  То есть, там, грубо говоря, мы держали ствол,
[01:00:13.680 --> 01:00:15.680]  да, пытались первым раскрыть ствол
[01:00:16.680 --> 01:00:18.680]  и раскрывать все, что справа от этого ствола.
[01:00:19.680 --> 01:00:25.680]  Ну, а здесь мы тоже предполагаем, что мы можем задержать именно тот момент,
[01:00:26.680 --> 01:00:28.680]  в который у нас остается не терминал А, а это все раскрыть слова.
[01:00:29.680 --> 01:00:32.680]  То есть, я говорю, тут очень большой набор манипуляций
[01:00:33.680 --> 01:00:36.680]  с тем, как мы делаем дерево вывода,
[01:00:37.680 --> 01:00:39.680]  как мы строим дерево вывода, в каком порядке мы раскрываем слова.
[01:00:40.680 --> 01:00:45.680]  Да, это кажется, что такие манипуляции, но к ним надо привыкнуть.
[01:00:46.680 --> 01:00:48.680]  То есть, все равно цель начальная у нас это не терминал,
[01:00:49.680 --> 01:00:50.680]  цель конечная это какое-то слово.
[01:00:53.680 --> 01:00:57.680]  Вот, поэтому это может быть реально казаться таким сложным фактом.
[01:00:58.680 --> 01:00:59.680]  Но идея такая, что...
[01:01:00.680 --> 01:01:01.680]  Давайте еще раз идею.
[01:01:02.680 --> 01:01:03.680]  Значит, берем самый длинный ствол в нашем дереве,
[01:01:04.680 --> 01:01:06.680]  его высота, хотя бы количество не терминалов, плюс один.
[01:01:07.680 --> 01:01:09.680]  Значит, в нем есть не терминал, который повторяется два раза.
[01:01:10.680 --> 01:01:12.680]  Идем со ствола вниз-вверх,
[01:01:13.680 --> 01:01:16.680]  и берем символы, которые встречаются два раза, причем первый раз.
[01:01:17.680 --> 01:01:18.680]  Отцепляем этот кусок,
[01:01:19.680 --> 01:01:20.680]  оценим высоту этого дерева,
[01:01:21.680 --> 01:01:23.680]  оно оказывается не очень большое, поэтому длина слова,
[01:01:24.680 --> 01:01:25.680]  которую выводим здесь, не очень большая.
[01:01:26.680 --> 01:01:28.680]  Ну, а поскольку мы работаем с нормальной формой холмского,
[01:01:29.680 --> 01:01:33.680]  и у нас все не терминалы являются не эпсенопорождающими,
[01:01:34.680 --> 01:01:36.680]  то тот не терминал, который не раскрывает этот не терминал А,
[01:01:37.680 --> 01:01:38.680]  он породит не пустое слово.
[01:01:38.680 --> 01:01:42.680]  Поэтому в этом раскрытии у нас как раз будет длина УВ не пустая.
[01:01:45.680 --> 01:01:46.680]  Это краткая идея доказательств.
[01:01:50.680 --> 01:01:52.680]  Давайте вопрос по этому доказательству.
[01:01:53.680 --> 01:01:55.680]  То, мне кажется, я начинаю вас терять.
[01:01:55.680 --> 01:01:57.680]  Вот она картинка на слайдах.
[01:02:05.680 --> 01:02:06.680]  Да, вот.
[01:02:08.680 --> 01:02:11.680]  Почему это еще раз работает?
[01:02:25.680 --> 01:02:26.680]  Этим?
[01:02:27.680 --> 01:02:28.680]  Отрицание взять.
[01:02:38.680 --> 01:02:39.680]  Да.
[01:02:40.680 --> 01:02:41.680]  Еще больше.
[01:02:42.680 --> 01:02:43.680]  Да, да.
[01:02:44.680 --> 01:02:46.680]  Ну, опять же, берем слова определенного вида.
[01:02:48.680 --> 01:02:50.680]  Ну да, случаев больше будет.
[01:02:51.680 --> 01:02:53.680]  А можно это поделать? Не надо.
[01:02:54.680 --> 01:02:56.680]  В презентации есть пример, на самом деле.
[01:02:58.680 --> 01:03:01.680]  Значит, есть пример неконтекстного свободного языка,
[01:03:02.680 --> 01:03:03.680]  это язык вот такой вот.
[01:03:08.680 --> 01:03:09.680]  Ну и дальше тут делается следующее.
[01:03:10.680 --> 01:03:11.680]  Смотрите, идея какая.
[01:03:12.680 --> 01:03:15.680]  Идея такая, что разбиваем, опять же, напоминаю,
[01:03:16.680 --> 01:03:17.680]  что смотрим произвольное разбиение,
[01:03:17.680 --> 01:03:21.680]  и, смотрите, поскольку длина куска y, q, v хотя бы p,
[01:03:22.680 --> 01:03:26.680]  не больше, чем p, то получается у нас в этом слове y, q, v
[01:03:29.680 --> 01:03:32.680]  какой-то буквы не будет, из a, b, c.
[01:03:34.680 --> 01:03:35.680]  Потому что длина слова не больше, чем p,
[01:03:36.680 --> 01:03:38.680]  среднего, по которому мы разрастаемся.
[01:03:42.680 --> 01:03:45.680]  Ну, а для того, чтобы все буквы из вида a, b, c
[01:03:45.680 --> 01:03:49.680]  у нас были в слове y, q, v, нам нужно, чтобы длина
[01:03:50.680 --> 01:03:53.680]  этого слова захватывала хотя бы одну a и хотя бы одну c.
[01:03:54.680 --> 01:03:56.680]  Значит, длина слова должна быть хотя бы p плюс 2.
[01:03:57.680 --> 01:03:58.680]  Такого быть не может.
[01:03:59.680 --> 01:04:01.680]  Ну и дальше получается следующее, что какой-то буквы есть,
[01:04:02.680 --> 01:04:06.680]  какой-то буквы нету у нас в u, v, в промежуточной штуке.
[01:04:07.680 --> 01:04:08.680]  Мы начинаем разрастать,
[01:04:09.680 --> 01:04:12.680]  и оказывается, что количество букв определенного вида
[01:04:12.680 --> 01:04:15.680]  будет больше, чем количество букв определенного другого вида.
[01:04:20.680 --> 01:04:22.680]  Опять же, это обобщение доказательства.
[01:04:23.680 --> 01:04:25.680]  Вот. Собственно, вот оно на доске.
[01:04:26.680 --> 01:04:29.680]  Ну, я говорю, на семинарах будут, опять же, примеры того,
[01:04:30.680 --> 01:04:33.680]  как доказывает некая текст свободности языков разного вида.
[01:04:36.680 --> 01:04:37.680]  Нет, вы.
[01:04:38.680 --> 01:04:39.680]  Нет, есть более гробовое.
[01:04:39.680 --> 01:04:41.680]  Какого? Lema-Logdano называется.
[01:04:46.680 --> 01:04:49.680]  Да, то есть наоборот, если отрицание выполнено,
[01:04:50.680 --> 01:04:51.680]  то язык не контекстно свободный.
[01:04:54.680 --> 01:04:57.680]  Ладненько, давайте хотя бы попробуем начать следующую тему.
[01:05:00.680 --> 01:05:02.680]  Поговорим про нормальную форму Грейбах.
[01:05:03.680 --> 01:05:05.680]  А именно поговорим его в контексте того алгоритма.
[01:05:05.680 --> 01:05:08.680]  А алгоритм, давайте я просто, я забыл его название указать.
[01:05:09.680 --> 01:05:12.680]  Тот алгоритм называется алгоритм Кока Янгера Касами.
[01:05:13.680 --> 01:05:17.680]  Вот тот старый, который мы разобрали с динамикой.
[01:05:21.680 --> 01:05:24.680]  Он же в простонародье называется...
[01:05:36.680 --> 01:05:40.680]  Так, у нас на ютубе это, 18 плюс или как?
[01:05:45.680 --> 01:05:49.680]  В общем, C, Y, K. Додумайте сами.
[01:05:56.680 --> 01:05:59.680]  Значит, это алгоритм. Давайте подумаем, в чем у него проблема.
[01:06:00.680 --> 01:06:01.680]  Во-первых, то, что он работает за куб.
[01:06:02.680 --> 01:06:05.680]  Во-вторых, в том, что в грамматике в нормальной форме Хомского
[01:06:06.680 --> 01:06:07.680]  непонятно, какая первая пуква выводится.
[01:06:09.680 --> 01:06:13.680]  Поэтому хочется сделать очень красивую вещь.
[01:06:15.680 --> 01:06:20.680]  Называется следующая. Давайте грамматику назовем в нормальной форме Грейбах.
[01:06:24.680 --> 01:06:26.680]  Если ее правила будут иметь такой вид.
[01:06:31.680 --> 01:06:34.680]  Это здесь дополнительное свойство.
[01:06:35.680 --> 01:06:38.680]  В чем примечательна эта нормальная форма?
[01:06:39.680 --> 01:06:41.680]  В чем она хороша?
[01:06:42.680 --> 01:06:44.680]  Вы можете объяснить, в чем была плохая предыдущая?
[01:06:45.680 --> 01:06:49.680]  То, что если мы хотим, чтобы у нас был гиперпед, то есть
[01:06:50.680 --> 01:06:54.680]  у нас был гиперпед, то есть у нас есть гиперпед, то есть
[01:06:55.680 --> 01:06:57.680]  у нас есть гиперпед.
[01:06:57.680 --> 01:07:05.400]  то что если мы хотим чтобы у нас был фактически парсер хочется чтобы парсер при каждом понятном
[01:07:05.400 --> 01:07:10.840]  действии откусывал как минимум одну букву ну чтобы он не вращался по циклу в холостую
[01:07:10.840 --> 01:07:20.480]  ну да практике такие да хочется видеть результат на деле так вот вот эта штука позволяет как раз
[01:07:20.480 --> 01:07:29.440]  сразу видеть какую букву мы отцепляем да потому что у нас каждом правиле сразу выводится терминал
[01:07:29.440 --> 01:07:34.280]  грей бах
[01:07:40.280 --> 01:07:51.040]  так вопрос как вы думаете алгоритм кока нянди ракосами работает для вот такой грамматики в
[01:07:51.040 --> 01:07:57.840]  такой нормальной формы можно его как-то модифицировать да в принципе можно достаточно
[01:07:57.840 --> 01:08:02.280]  легко модифицировать при этом на самом деле перебора станет меньше потому что мы сразу
[01:08:02.280 --> 01:08:07.400]  можем прыгать к словам меньшей длины разбивать наш отрезок на две части на словах на словах
[01:08:07.400 --> 01:08:14.480]  меньше длины но что у нас сразу первыми терминал выводится а симпатически а симпатически быстрее
[01:08:14.480 --> 01:08:22.400]  не становится но на практике может стать быстрее но меньше форов грубо говоря
[01:08:22.400 --> 01:08:33.560]  ну можно кстати рекурсивный спуск может быть будет чуть-чуть приятнее для грамматики
[01:08:33.560 --> 01:08:45.720]  в такой нормальной форме а ну да собственно давайте доказывать что любую грамматику
[01:08:45.720 --> 01:08:57.320]  можно привести в нормальную форму гребах один да давайте возьмем грамматику в нормальной
[01:08:57.320 --> 01:09:04.160]  форме хомского так что шагов на самом деле по-честному не один а 8
[01:09:04.160 --> 01:09:18.760]  и давайте посмотрим следующую вещь я ведем понятие левого деления
[01:09:18.760 --> 01:09:31.240]  и будем вводить вот такого рода не терминала и наша будет идея такая что мы это идея покажут
[01:09:31.240 --> 01:09:41.120]  что из а без б из а левое деление б будет выводится в только тогда когда будет выполняться вот такое
[01:09:41.720 --> 01:09:51.600]  грамматики да да да то есть идея такая что попытаться убрать все буквы то есть как-то
[01:09:51.600 --> 01:10:00.320]  вывести первую букву для этого нам нужно немножечко колдонуть да это мы тогда смотрите вот вот картинка
[01:10:00.320 --> 01:10:13.360]  такая да а левое деление б так такие чтобы выполнил был выполнен вот это соотношение на
[01:10:13.360 --> 01:10:17.800]  самом деле мы сейчас будем сразу доказывать вы факт смотрите у нас грамматика в нормальной
[01:10:17.800 --> 01:10:26.000]  форме хомского для этого давайте поймем как у нас может выводиться не терминал б
[01:10:30.320 --> 01:10:44.840]  тут надо индуктивное определение сделать смотрите в какой-то момент у нас вывелся в этом
[01:10:44.840 --> 01:10:52.240]  деле вы в этом деле вывода вывелся не терминал б и зафиксировался давайте найдем такой момент
[01:10:52.240 --> 01:11:00.880]  он вывелся из какого-то не терминала с за один шаг при этом раскрыл правила
[01:11:00.880 --> 01:11:12.120]  бд а из д дальше раскрывалась какое-то у да то есть фиксируем первый момент момент раскрытия
[01:11:22.240 --> 01:11:40.440]  так а это у нас какой-то зад будет теперь смотрите в чем особенность то есть мы хотим
[01:11:40.440 --> 01:11:50.240]  чтобы из а без б выводил и слово дубль в давайте посмотрим внимательно на вот
[01:11:50.240 --> 01:12:01.560]  это вот слово у что бы можем сказать для этого слова у она его цсд при этом у не пустое
[01:12:01.560 --> 01:12:15.400]  значит уду уд есть первая буква ой у слова у есть первая буква обозначим ее е
[01:12:15.400 --> 01:12:27.400]  а как это буква е могла появиться все то что у нас нормальная форма хомского
[01:12:27.520 --> 01:12:36.840]  только из правила вида е выводит е поэтому у нас картинка перерисовывается таким образом из
[01:12:36.840 --> 01:12:45.880]  а у нас выводится цз дальше за один шаг у нас выводится бд дальше в какой-то момент времени
[01:12:45.880 --> 01:12:57.000]  из д у нас будет выводиться е и слово какое-то дубль в и за один шаг так это это перенесу и
[01:12:57.000 --> 01:13:15.040]  как-то за один шаг мы получаем что буквы где но теперь как говорится в передаче поле чудес
[01:13:15.040 --> 01:13:24.040]  мы отгадали все буквы теперь надо отгадать со слову целиком нам надо новое правило грамматики
[01:13:24.040 --> 01:13:46.600]  написать как можно реализовать а без б а левое деление б смотрите внимательно вот это в терминах
[01:13:46.600 --> 01:13:56.560]  левого деления как можно написать в это что а да без е
[01:14:04.560 --> 01:14:08.080]  так вот это как можно написать
[01:14:16.600 --> 01:14:33.200]  шок контент еще на самом деле грамматика будет определяться следующим образом что
[01:14:33.200 --> 01:14:39.920]  введем правил для любой пары не терминала фаб мы будем вводить такое правило если у нас
[01:14:39.920 --> 01:14:49.480]  есть правила вида ц выводит бд и есть правила из е вводит е мы будем добавлять вот такое правило
[01:14:49.480 --> 01:15:07.280]  для любой пятерки не терминал для которой выполнено вот это соотношение будем да который
[01:15:07.280 --> 01:15:31.640]  творяет вот этим соотношением конструктивно как раз понятно но вот нам надо будет индуктивно
[01:15:31.640 --> 01:15:39.560]  в обе стороны показать это выражение на самом деле мы сейчас вот этот факт доказали так
[01:15:39.560 --> 01:15:49.040]  и с какой стороны в какую ну оно просто это такое определение которое по факту строится из
[01:15:49.040 --> 01:15:57.280]  картины доказательства то есть в этом финт ушами то есть у нас то есть предположим из а выводит
[01:15:57.280 --> 01:16:06.560]  бв да индукция по длине вывода да тогда что у нас получается из а вот бв значит тогда смотрите
[01:16:06.560 --> 01:16:18.120]  что у нас получается из а будет выводиться ц за меньшее число шагов так ведь а а из получается
[01:16:18.120 --> 01:16:30.960]  что там что там еще у нас есть а из деве тоже будет выводиться заменить число шагов да вот
[01:16:30.960 --> 01:16:35.640]  поэтому делаем индукционный переход и у нас все замечательно получается то есть если у нас
[01:16:35.640 --> 01:16:44.760]  есть вот это соотношение слева направо то просто имеет такое правило мы его получаем на самом деле
[01:16:44.760 --> 01:16:57.360]  там еще есть давайте я как раз еще одно правило покажу чтобы было понятно вот типа как заканчивается
[01:16:57.360 --> 01:17:09.200]  вывод но для этого нам надо взять первую букву есть у нас слово свв значит есть первая буква
[01:17:09.200 --> 01:17:19.360]  а которая выявилась из какого-то не терминала а здесь у ну и получается что
[01:17:19.360 --> 01:17:37.520]  с без а выводят у а мы добавляем правила получается из а из с выводится а есть без
[01:17:37.520 --> 01:17:42.720]  а вот поэтому на самом деле в нормальной форме грейбах нельзя обойтись от этого правила
[01:17:42.720 --> 01:17:56.480]  в общем вот такая картинка и на самом деле если внимательно подумать то факт в правую
[01:17:56.480 --> 01:18:07.480]  сторону получается да и еще смотрите базу надо доказать база будет такая надо будет
[01:18:07.480 --> 01:18:14.640]  добавить еще вот такое правило на всякий пожарный что ну справа то ничего нельзя
[01:18:14.640 --> 01:18:21.400]  добавить вот значит это будет делаться как раз справа налево база индукции будет вот такой
[01:18:21.400 --> 01:18:30.720]  переход это вот эти правила и получается у нас вот это соотношение а в обратную сторону мы как
[01:18:30.720 --> 01:18:37.800]  раз будем доказывать следующий раз с вами вот и кстати подумайте почему от этих правил можно
[01:18:37.800 --> 01:18:42.080]  избавиться это такое упражнение все
