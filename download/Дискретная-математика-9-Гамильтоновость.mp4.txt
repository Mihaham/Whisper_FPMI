[00:00.000 --> 00:14.800]  Ну давайте снова алгоритм Flurin, повторим, я тогда про
[00:14.800 --> 00:17.680]  него ничего толком доказать не успел.
[00:17.680 --> 00:31.720]  Значит дано илеров, илеров связанный граф, ну илеров граф.
[00:31.720 --> 00:49.320]  Значит, старт, стартуем из любой горшины, из любой горшины,
[00:49.320 --> 01:13.080]  и из любой вершины, и двигаемся по любому ребром, по любому ребром.
[01:13.080 --> 01:34.120]  Там мостов нет в начале, все степени вершин чётные, в самом начале степени
[01:34.120 --> 01:41.360]  вершин всех вершин чётные, мостов там быть не может. Можете проверить, что если степень
[01:41.400 --> 01:51.200]  всех вершин чётный, то конечно там нет мостов. Это первый шаг, говорю, повторяю,
[01:51.200 --> 01:57.880]  первый шаг. Тут никаких засад быть не может в начале, потому что мы ещё не нарушили структуру
[01:57.880 --> 02:21.320]  графа, он ещё хороший. Значит, пройденные ребра удаляем, но вот тут вот уже могут быть
[02:21.320 --> 02:32.000]  проблемы. Мы начинаем резать ребра, и вот тут уже начинаются всякие беды в этом месте. Значит,
[02:32.000 --> 03:00.000]  шагу. Значит, из вершины, в которые мы пришли, мы можем выйти, потому что степень вершины
[03:00.000 --> 03:07.320]  чётная, мы удалили ребро, но степень чётная, значит, есть ещё одно ребро, по которому можно
[03:07.320 --> 03:27.680]  выйти. Для выхода, для выхода выбираем ребро, не являющийся мостом,
[03:27.680 --> 03:44.960]  если же такого ребра нет, то двигаемся по мосту. Если такого ребра нет,
[03:44.960 --> 04:09.880]  то двигаемся по мосту, опять же пройденные ребра удаляются.
[04:14.960 --> 04:44.720]  Ну, критерии остановки нет ребер. Нет ребер, по которым можем выйти.
[04:44.720 --> 04:56.720]  По которым можно выйти из вершины. Нет ребер, по которым, то есть, локально всё проверяется,
[04:56.720 --> 05:13.240]  то есть, в окрестности конкретной точки, в которой мы оказываемся, можно выйти из вершины. Ну,
[05:13.240 --> 05:23.000]  собственно, всё. Давайте докажем, что вот был вопрос, почему там не может быть два моста. Как
[05:23.000 --> 05:29.880]  раз сейчас мы про это поговорим. Я просто тогда даже не начал доказывать корректности, в
[05:29.880 --> 05:38.560]  доказательстве в самом деле более-менее эти вещи прояснены. Значит, смотрите, утверждение.
[05:38.560 --> 06:07.680]  Алгоритм Fleury построит Эллеров цикл. Давайте докажем.
[06:08.560 --> 06:23.040]  Ну, предположим, давайте первое утверждение. Алгоритм Fleury построит просто цикл, как минимум.
[06:23.040 --> 06:35.680]  Он берет ребра и соединяет ребра в цикл, он же по ним ходит, пройденные удаляет, чтобы как раз
[06:35.680 --> 06:43.120]  второй раз по одному и тому же ребру не пройти. Он строит цикл, потому что он двигается по ребрам,
[06:43.120 --> 07:02.680]  которые собираются в цикл. Алгоритм Fleury построит цикл просто пока что. Как вы думаете,
[07:02.680 --> 07:20.880]  почему-то он обязательно именно цикл построит. Он построит цикл по той причине,
[07:20.880 --> 07:26.600]  что он не может закончить никакой другой вершине. Во всех промежуточных вершинах, отличных от
[07:26.600 --> 07:35.320]  стартовой, есть ребро, из которого можно выйти, потому что степень четная. Единственная вершина,
[07:35.320 --> 07:44.320]  в которой он дальше пройти уже не сможет, это вершина нечетной степени, которая есть стартовая.
[07:44.320 --> 07:53.880]  То есть вершина, которая проходит по серединке, там остаются степени вершин всечетные. И поэтому,
[07:53.880 --> 07:59.640]  даже если он может не элировать цикл, цикл точно построит, потому что он не закончит до тех пор,
[07:59.640 --> 08:09.520]  пока не вернется в начало. В любом случае у него будет куда идти, пока мы не вернемся в начало.
[08:09.520 --> 08:31.880]  Алгоритм не может закончить. Закончить работу в не стартовой вершине.
[08:39.520 --> 09:08.640]  Так как все степени всех вершин четные и все вершины, кроме стартовой, остаются
[09:08.640 --> 09:26.800]  с четной степенью и все вершины, остаются с четной степенью.
[09:38.640 --> 10:05.360]  В процессе работы алгоритма. Ну что ж, он построит цикл.
[10:05.360 --> 10:19.240]  Ну, вторая часть утверждения. Собственно, он построит эйлеров цикл. Давайте. Алгоритм
[10:19.240 --> 10:47.360]  флеури. Не знаю, как правильно, если честно, построит эйлеров цикл. Ну, хорошо. Вот мы запустил алгоритм,
[10:47.360 --> 10:59.760]  он закончил и, предположим, остались ребра. Понимаете, в чем дело? Вот вы описывали ту ситуацию,
[10:59.760 --> 11:19.560]  когда у нас вот что-нибудь такое. Почему такая ситуация в промежуточных шагах работы возникнуть
[11:19.560 --> 11:27.320]  не может? Ну, дело вот в чем. В том, что если он пройдет по вот этому мосту, то он здесь останется,
[11:27.560 --> 11:33.440]  но он должен цикл построить, то есть он должен как-то вернуться в начало. Если начало не в этой
[11:33.440 --> 11:41.480]  компоненте связанности, то противоречит получается. Мы же выяснили, что он обязан вернуться в ту
[11:41.480 --> 12:04.440]  вершину, с которой начинал. Опять же, если же стартовая вершина здесь, то у нас получается что?
[12:04.440 --> 12:19.040]  Если стартовая вершина в этой компоненте связанности, то получается, что мы прошли,
[12:19.040 --> 12:27.400]  образовали мост, до этого его не было. То есть как-то мы там прошли, вошли вот в эту компоненту
[12:27.400 --> 12:35.280]  связанности, стартовали, вошли в эту компоненту связанности, здесь порушили, а потом мы хотим
[12:35.280 --> 12:51.480]  опять назад. Почему так не может быть? Получается, мы вот эту компоненту связанности вообще не
[12:51.480 --> 12:59.480]  обрабатывали. Выходит так, да? Но граф Эйлеров, давайте подумаем, может такое произойти в Эйлеровом графе?
[12:59.480 --> 13:13.080]  Ну как бы, смотрите, если единственное, понимаете, получается, что вот здесь мы не работали, это ребра
[13:13.080 --> 13:21.120]  мы не трогали. Это оригинальный граф, это ребра оригинального графа без всякого удаления ребр.
[13:21.120 --> 13:25.920]  Получается, что у нас единство, вот есть компоненты связанности здесь, есть компоненты
[13:25.920 --> 13:30.440]  связанности здесь, и между ними единственный мост. Но такого в Эйлеровом графе быть не может.
[13:30.440 --> 13:39.780]  Да, конечно, в алгоритмах Лери нужно сначала проверить, что граф Эйлеров, потом ему давать
[13:39.780 --> 13:49.780]  собственно строить. Так вот эта штука, вот такая штука была в изначальном графе, потому что,
[13:49.780 --> 13:57.340]  ну, иначе. Ну, значит, получается, если мы стартовали здесь, значит, мы как-то вот сюда вышли,
[13:57.340 --> 14:03.100]  потом здесь, что-то походили и хотим обратно вернуться. Ну, значит, мы вот тут ничего не трогали.
[14:10.180 --> 14:20.980]  Ну, а если мы тут что-то трогали, то тогда вот, вот эта часть, смотрите. Пусть в конце алгоритма,
[14:20.980 --> 14:36.620]  давайте, в конце алгоритма, работы алгоритма, останется, остались ребра. То есть он вернулся
[14:36.620 --> 14:54.580]  в старт, в начало, но ребра остались. Остались ребра. Рассмотрим любую компоненту связанности,
[14:54.580 --> 15:01.780]  которая в самом конце, после окончания работы осталась. Как? Рассмотрим любую компоненту связанности.
[15:01.900 --> 15:07.900]  Раз ребра остались, значит, есть компонента связанности, неодновершенная, неизолированная вершина.
[15:07.900 --> 15:17.020]  Рассмотрим любую компоненту связанности,
[15:17.020 --> 15:36.500]  состоящую из двух вершин, состоящую из больше либо равно, чем двух вершин,
[15:36.980 --> 15:43.460]  которые осталось после работы алгоритма.
[15:43.460 --> 16:11.380]  Вот. Что у нас тогда получается? Вот давайте представим в себе картинку. Вот здесь К есть,
[16:11.380 --> 16:26.620]  что тут происходит вообще наверху. Я помню, что в школе, когда мы занимались там на каких-то
[16:26.620 --> 16:33.740]  этажах, ниже выше был спортзал и там все время прыгали, но здесь вроде спортзал совершенно в
[16:33.740 --> 16:46.740]  другом месте. Так, смотрите, вот эта компонент связанности, неодновершенная, и давайте найдем
[16:46.740 --> 16:53.460]  последний момент, когда мы в ней были, но вот следующий шаг, мы уже из нее вышли. Ну, то есть,
[16:53.460 --> 17:02.340]  вот последний шаг, в который мы еще пребывали внутри этой самой компонент связанности. Рассмотрим.
[17:03.740 --> 17:33.340]  Шаг М. Последний шаг. Алгоритм. При котором мы были в К. Мы были в К. Все, точка.
[17:33.740 --> 17:42.740]  Последний шаг. То есть, следующий шаг уже не в К. Ну, что ж тогда получается? Получается, что вот мы
[17:42.740 --> 17:52.060]  куда-то дальше, вот сюда пошли. То есть, прошли по ребру, а это был мост. Получается, мы не прошли
[17:52.060 --> 18:03.220]  компоненту связанности, у нас и была возможность пройти не по мосту, но мы пошли по мосту. Это мост.
[18:03.220 --> 18:18.540]  Противоречие. Поняли? Вот. То есть, вот такая же картинка, ну, посередине, когда может возникнуть,
[18:18.540 --> 18:26.620]  когда у нас вот здесь что-нибудь такое было, да, то есть, у нас не мост был изначально, тогда мы сюда
[18:26.620 --> 18:33.420]  вошли, что-то тут поделали, потом вернулись, но здесь что-то осталось, но вот по тому, что мы доказали,
[18:33.420 --> 18:39.060]  так не может быть. Здесь ничего не останется, если мы тут сюда зайдем и начнем тут действовать.
[18:39.060 --> 18:50.140]  Поэтому, если мы туда не заходили, то противоречие, потому что граф Эйлеровым,
[18:50.140 --> 18:55.540]  такой граф Эйлеровым быть не может, если же мы туда заходили, то не должно быть, не должно
[18:55.540 --> 19:06.300]  ничего остаться, в смысле ребер там вообще, вот. Поэтому тоже так не бывает. Но вот в итоге построится
[19:06.300 --> 19:12.580]  Эйлеров цикл. Вот. Ну, не знаю, насколько этот компьютерный алгоритм, потому что, видите,
[19:12.580 --> 19:22.860]  на каждом шаге нужно проверять две вещи. Что мост? Мост — это глобальная проверка, проверка того,
[19:23.060 --> 19:28.820]  что изначально граф был, ну, по крайней мере, в какой-то, кроме изолированных вершин, связан,
[19:28.820 --> 19:35.220]  а после удаления перестанет быть связанным. Вот эта проверка я не могу себе понять. Но,
[19:35.220 --> 19:41.060]  насколько я понимаю, там есть алгоритмы, я знаю даже некоторые алгоритмы, которые это делают.
[19:41.060 --> 19:50.380]  Расстояние между вершинами в графе считают, но это все-таки какие-то довольно, не то чтобы
[19:50.380 --> 19:55.140]  очень быстро. То есть, это довольно быстро делается, но если каждый раз это делать,
[19:55.140 --> 20:14.460]  мне кажется, все-таки довольно тяжеловесным получится. Так. Ну, что ж. Все, что хотел
[20:14.460 --> 20:21.420]  проигрывать, рассказал. Теперь давайте начнем с гамильтоновости. Ну.
[20:44.460 --> 20:56.900]  Смотрите. Вы же знаете, да, откуда возникла эта задачка про гамильтоновость. Что иногда называют
[20:56.900 --> 21:06.020]  задачками коми-вояжора. А кто такие коми-вояжоры? Это люди, которые ходили по домам и втюхивали
[21:06.020 --> 21:13.740]  людям всякую дрянь. Вот. Ну, всякий шерпотреб, который не очень качественный был. И поэтому
[21:13.740 --> 21:19.980]  у них была прямая заинтересованность не вернуться в тот город, с которым они уже были. Вот. Там люди их
[21:19.980 --> 21:27.540]  не любили и помнили. Вот. И поэтому вот они думали, можно ли как-то вот так пройти к побольше городов,
[21:27.540 --> 21:46.340]  но чтобы никуда в два раза не попадать. Вот. Ну, вот так. Значит, определение. Кравжи гамильтонов,
[21:46.340 --> 22:14.020]  если в нем есть цикл, который проходит по всем вершинам ровно один раз.
[22:14.020 --> 22:40.540]  Ну, это, знаете, приложение, так сказать, 18 века. А вот приложение современное, конечно,
[22:40.540 --> 22:49.180]  более к созданию микросхем скорее. Там есть заинтересованность. Смотрите, вот, при нанесении
[22:49.180 --> 22:57.660]  этих элементов на микросхему. Есть автомат, у него есть головка, которая наносит эти самые
[22:57.660 --> 23:03.900]  элементы. Она должна двигаться по какому-то, по какой-то траектории, по линии наносить.
[23:03.900 --> 23:11.180]  Соответственно, в чем интерес? Главное, чтобы она пока побыстрее прошла, никуда не возвращаясь,
[23:11.180 --> 23:19.660]  чтобы быстрее работала по микросхеме, при этом чтоб вернулась в исходную точку для нанесения таких
[23:19.660 --> 23:26.460]  же элементов на следующую микросхему. То есть тоже, по идее, есть масса точек на этой плате,
[23:26.460 --> 23:33.020]  которую нужно сделать и нужно обойти эти точки так, чтобы не возвращаться никуда два раза.
[23:33.020 --> 23:45.060]  Желательно. Причем по циклу. Значит, задача сложная. В Эйлер-вости, видите, есть алгоритмы,
[23:45.060 --> 23:52.380]  есть легкие критерии проверки того, что граф Эйлеров, гамильтоновость, задача сложная, алгоритмов.
[23:52.380 --> 24:00.140]  Проверки гамильтоновости, судя по всему, нет. Но все четко доказано, что связано с задачей,
[24:00.140 --> 24:08.860]  пресловутой задачей p равно np. И в зависимости от того, верно это гипотеза или не верна,
[24:08.860 --> 24:15.220]  алгоритм есть или нет, поскольку мы не верим, что она верна, то скорее всего алгоритма нет.
[24:15.220 --> 24:23.180]  Ну, вот как-то так. Потому что мы не хотим, чтобы наши криптоалгоритмы легко взламывались,
[24:23.180 --> 24:29.700]  если p равно np, то они взламывают легко. Как раз таки большинство современных криптоалгоритмов,
[24:29.700 --> 24:40.260]  которые существуют на настоящий момент, то есть не все. Мы ученые понимали, что твердость и не
[24:40.260 --> 24:47.820]  взламываясь наших шифров зависит от этой дурацкой гипотезы, про которую никто ничего не знает.
[24:47.820 --> 24:55.500]  И поэтому придумали шифры, которые не зависят от этой гипотезы, но все же более простые шифры
[24:55.500 --> 25:03.340]  основаны на ней. Поэтому нам не хочется, чтобы шифры основные легко взламывались,
[25:03.340 --> 25:13.820]  и поэтому p, наверное, не равно np, а поэтому и гамильтонового из алгоритма нет. Это то,
[25:13.820 --> 25:31.700]  что изучает в курсах сложность вычислений. Поэтому, ребят, обратите внимание, то, что я сейчас буду
[25:31.700 --> 25:39.060]  рассказывать, это не критерии гамильтоновости, таких не существует, что на самом деле довольно
[25:39.060 --> 25:44.620]  странно. Можно же, наверное, придумать какой-нибудь очень сложно проверяемый на практике, вообще не
[25:44.620 --> 25:51.820]  проверяемый на практике критерий, который критерием был при этом. Но не знаю, я не встречал именно
[25:51.820 --> 25:58.660]  критериев гамильтоновости. Вот признаки есть. Не гамильтоновости есть много признаков, то есть если
[25:58.660 --> 26:05.220]  граф вот что-нибудь такое содержит, то совершенно точно уже не гамильтонов, например, признаки. По
[26:05.220 --> 26:10.660]  обратную сторону опять не работает. Признак гамильтоновости есть, если граф что-то есть,
[26:10.660 --> 26:18.740]  то он совершенно точно гамильтонов. Вот признаки не гамильтоновости я вот на семинары оставил,
[26:18.740 --> 26:24.100]  скорее там в семинарских листочках они есть, а признаки гамильтоновости мы сейчас с вами
[26:24.100 --> 26:44.700]  рассмотрим некоторые. Первый признак Дирака. Вот этот конкретно признак Оры называется. То следствие,
[26:44.700 --> 26:49.780]  которое я из него выведу, частный случай фактически признак Оры называется признаком Дирака.
[26:49.780 --> 27:05.220]  Вот. Значит, если в графе же военные, для любых двух вершин,
[27:05.220 --> 27:33.160]  двух вершин, ув, несоединенных ребром, степень У плюс степень В, больше либо равна чем Н,
[27:33.160 --> 27:41.960]  суммарно. То есть вот такая данность есть. Для любых двух несоединенных ребров вершин,
[27:41.960 --> 27:52.720]  суммарно степень больше либо равна чем Н. Так Н это количество вершин, да. Вот. Н это количество
[27:52.720 --> 28:02.080]  вершин. То граф гамильтонов. Работает только в одну сторону, ребят. Но почему, предупреждаю,
[28:02.080 --> 28:08.920]  потому что каждый раз находятся студенты, которые применяют его в обратную сторону. Не признак
[28:08.920 --> 28:14.360]  вот этот вот. Вот это условие не выполнено, значит он не гамильтонов. Конечно, нет. Ну, конечно,
[28:14.360 --> 28:21.400]  нет. Есть графы гамильтонов, для которых это условие не выполнено. Безусловно. То есть что
[28:21.400 --> 28:34.680]  этот признак графжа гамильтонов? Есть очень классические гамильтоновы графы, называют
[28:34.680 --> 28:42.080]  простые циклы на вершинах. В них этот признак не выполнен совершенно точно. То есть что этот
[28:42.080 --> 28:50.960]  признак говорит? Эти циклы содержат очень мало ребер, но при этом они гамильтонов. И нельзя
[28:50.960 --> 28:58.040]  сказать, что любой там граф на вершинах с ребрами гамильтонов. Конечно, нет. Тоже неверно. Вот.
[28:58.040 --> 29:05.720]  То есть там, вот смотрите, что вот этот признак Оры, признак Дирока, который позже будет, они все
[29:05.720 --> 29:14.560]  говорят следующее неформально. Если в графе очень много ребер, то он гамильтонов заведомо. Но если в
[29:14.560 --> 29:20.320]  нём мало ребер, он может быть как гамильтоновым, так и не гамильтоновым. Это индивидуальная ситуация,
[29:20.320 --> 29:26.320]  как говорится. И вот тут нужны какие-то алгоритмы, но их нету. Вот, к сожалению.
[29:26.320 --> 29:43.360]  А здесь, на самом деле, фактически то, что здесь описывается, называется плотный граф. Но очень
[29:43.360 --> 29:49.920]  много ребер. Почти максимально возможное количество ребер. Само собой, полный граф на
[29:49.920 --> 29:57.200]  н-вершинах. Конечно, гамильтонов. В чём вопрос, как говорится. Если одно ребро из полного графа
[29:57.200 --> 30:01.920]  на н-вершинах, то у нас останется гамильтоновым. Но вот до какого момента можно удалять, как говорят,
[30:01.920 --> 30:09.360]  чтобы он всё же гарантированно остался гамильтоновым? Примерно про это признак Оры. Дальше, вот если
[30:09.360 --> 30:13.520]  правильно удалять, то он всё равно останется гамильтоновым. Если неправильно удалять, то нет.
[30:13.520 --> 30:35.120]  Но вот как-то так. То есть там уже разница. То есть самый интересный случай про гамильтоновость — это
[30:35.120 --> 30:40.720]  никогда очень много ребер. Там совершенно понятно. Он точно гамильтонов. Всё, вопросов нет.
[30:40.720 --> 30:51.080]  Там возникает другой вопрос числоприкладной. Как этот цикл найти? Мы знаем, предположим,
[30:51.080 --> 30:56.960]  из каких-то источников, что он гамильтонов. А как найти этот цикл гамильтонов? Казается,
[30:56.960 --> 31:03.320]  тоже нет алгоритма нормального. Есть какие-то более сложные, чем полиномиальные. Нормального
[31:03.320 --> 31:10.340]  тоже нет. Это тоже трудная задача, оказывается. В заведомо известном гамильтоновом графе найти
[31:10.340 --> 31:32.600]  цикл гамильтонов. Смотрите, что у нас получается. Давайте докажем. В данном
[31:33.240 --> 31:42.320]  случае у нас граф содержит совершенно очень много ребер. Безумно много на самом деле. Что это за
[31:42.320 --> 31:51.320]  безобразие? Суммарная степень больше либо равная, чем эта. Сколько у него ребер. Ну пусть и Женя
[31:51.320 --> 32:07.040]  гамильтонов. Пусть существует Ж, удовлетворяющий условиям задачи, условиям теоремы,
[32:07.040 --> 32:36.240]  которые не являются гамильтоновым. Вот. Смотрите. Вот кто может доказать,
[32:36.320 --> 32:44.720]  что из условия сразу автоматически следует, что граф связан. Понимаете, да? Не связанный граф
[32:44.720 --> 32:50.360]  гамильтоновым быть точно не может. Почему из вот этого? В этом условии не написано,
[32:50.360 --> 32:55.200]  что он связан. Но вот на самом деле из этого условия уже следует, что он связан. Но там настолько
[32:55.200 --> 33:01.440]  много ребер, что он не связанным быть не может, если это неформально. Вот как это доказать?
[33:01.440 --> 33:20.280]  Как? Ну да, но как доказать, что он не связан все-таки? Ну не обязательно. Подумайте,
[33:20.280 --> 33:38.360]  даже если вершина на ребер, может не связанный граф и сделать. Да, все правильно. Все правильно,
[33:38.360 --> 33:44.440]  все правильно. Если есть две компоненты связанности, хотя бы две компоненты связанности,
[33:44.440 --> 33:54.360]  возьмем две вершинки из разных компонентов связанности. Их суммарная степень какая? Ну,
[33:54.360 --> 34:04.360]  максимум, наверное, n-1, да? Ну какая? Количество вершин в этой компоненте связанности – –1,
[34:04.360 --> 34:09.640]  плюс количество вершин в этой компоненте связанности – еще раз – –1. То есть это n-2 даже
[34:09.720 --> 34:19.040]  самая большая суммарная степень у них может оказаться, правильно? А у нас больше
[34:19.040 --> 34:26.200]  ребровное, они же точно не соединены ребром. Ну то есть вот из этого условия автоматически следует.
[34:26.200 --> 34:45.440]  Если же они соединены, то вот что. То УВ и суммарной степенью плюс суммарной степенью В никак не больше,
[34:45.440 --> 35:13.240]  чем n-2, поэтому противоречие. То есть вот такого рода условия сразу дает нам связанность
[35:13.240 --> 35:23.280]  автоматическую, так сказать. Вот. Хорошо. Уже связан. Давайте найдем, в нем нет цикла
[35:23.280 --> 35:29.760]  Гамильтонова, да? Уже нет Гамильтонова цикла, но давайте найдем в нем Гамильтонову цепь.
[35:29.760 --> 35:38.640]  Понимаете, да? Что такое Гамильтонова цепь? Это цепь, которая, простая цепь,
[35:38.640 --> 35:47.760]  которая проходит по одному разу все вершины у цепи, не цикла. Давайте, собственно, построим
[35:47.760 --> 35:55.920]  такое. Может быть, мы немножко его модифицируем, сразу говорю, но давайте отыщем там, сделаем так,
[35:55.920 --> 36:07.480]  чтобы в нем была Гамильтонова цепь. Вот. Возможно, модифицируя же, возможно, изменяя же,
[36:07.480 --> 36:25.560]  сделаем так, чтобы уже содержалась Гамильтонова цепь.
[36:38.480 --> 36:44.960]  Ну давайте, как это сделать? Смотрите. Вот рассмотрим самую длинную цепь,
[36:44.960 --> 36:52.760]  которая уже у нас имеется, простую цепь. Рассмотрим самую длинную простую цепь уже.
[37:07.480 --> 37:15.880]  Самую длинную простую цепь уже. Ну вот, какая-нибудь.
[37:15.880 --> 37:41.080]  Смотрите, давайте добавим ребер уже так, чтобы А, он, ну смотрите, вот это условие
[37:41.080 --> 37:50.640]  при добавлении ребер само собой сохранится. Так? Но есть беда. Нам же нужно оставить граф
[37:50.640 --> 37:56.120]  негамильтоновым, то есть мы предположили, что негамильтонов при добавлении ребра мы должны
[37:56.120 --> 38:06.080]  гарантировать, что он остался негамильтоновым. Но если мы добавили, знаете, как один преподаватель,
[38:06.080 --> 38:12.440]  с которым я работал, говорил, ну тогда в этот граф можно все ребра докинуть, он сразу автоматически
[38:12.440 --> 38:20.840]  станет гамильтоновым, и всё, больше ничего с ним делать не надо. То есть мы же противоречить-то не
[38:20.840 --> 38:28.040]  получим тогда, да? То есть если мы докинем сразу все ребра, которые в нём нет, он станет полным и
[38:28.040 --> 38:34.840]  сразу окажется гамильтоновым. То есть нужно умным образом добавлять ребра таким образом,
[38:34.840 --> 38:43.760]  чтобы цепь вот эта самая длинная удлинялась, но при этом гамильтонов цикл не появлялся. Как это
[38:43.760 --> 38:59.640]  сделать? Ну как удлинить цепь? Логично найти вершину, которая, смотрите, ребра из А1, А2,
[38:59.640 --> 39:07.480]  так далее АК, из А1, из АК как минимум, только внутри цепи идут, правда? Ну иначе цепь можно
[39:07.480 --> 39:17.120]  было продлить. То есть из А1, из АК ребра идут только внутри цепи, если они есть, кроме вот этих
[39:17.120 --> 39:23.920]  оресоновых А1, А2, АК-1, АК, может быть ещё какие-то ребра, то ли тогда они внутри вершин цепи должны
[39:23.920 --> 39:37.360]  быть, так? Вот, значит рассмотрим любую вершину, которая вне цепи, она с АК, например, ребром уже не
[39:37.360 --> 39:47.720]  соединена. Давайте эту ребру сюда дорисуем. А почему гамильтонов цикл при этом не появится?
[39:59.720 --> 40:04.920]  Ну оно и не соединено с А1, всё правильно, да, но ещё, а почему цикл-то не появится,
[40:05.280 --> 40:22.240]  гамильтонов цикл не появится? Ну, смотрите, предположим, что у нас цикл появился. Вот добавили
[40:22.240 --> 40:30.600]  это ребро, а вдруг цикл появился. Ну что это значит? Это значит, что этот цикл совершенно
[40:30.600 --> 40:41.400]  точно данное ребро содержит, да? А значит удалив это ребро, мы сделаем гамильтонов цикл,
[40:41.400 --> 40:47.920]  гамильтонову цепь, а по нашему предположению это самая длинная цепь, она не гамильтонова. Вот,
[40:47.920 --> 41:01.360]  поэтому противоречие. То есть в чём беда? Если при добавлении ребра появляется гамильтонов цикл,
[41:01.360 --> 41:08.360]  значит этот цикл никак по этому ребру не пройти не может. Вот как раз это то ребро, которое нужно,
[41:08.360 --> 41:16.760]  чтобы он появился. Значит удалив это ребро, мы разобьём этот гамильтонов цикл на гамильтонову
[41:16.760 --> 41:28.920]  цепь, а значит вот это не самая длинная цепь у нас в графе. То есть рассмотрим любое АК плюс
[41:28.920 --> 41:37.160]  первое вне цепи, соединим с окатом его ребром, гамильтонов цикл не появится, потому что иначе
[41:37.160 --> 41:43.680]  этот цикл не самая длинная. Если дальше, возможно, можно это продлить. Ну то есть вот АК плюс первое
[41:43.680 --> 41:49.440]  добавили, может быть дальше можно пойти, чтобы не повторялись вершины и так далее. Доходим до
[41:49.440 --> 42:06.440]  того момента, пока опять заступорились, дальше некуда идти. Ну всегда сможем докинуть и таким
[42:06.440 --> 42:13.280]  образом продлить до гамильтоновой цепи, в этом идее. Всё правильно. То есть если гамильтоновой цепи нет,
[42:13.280 --> 42:20.920]  то мы вот так вот докидывая ребра по одному, внимание, по одному, получаем гамильтонову цепь
[42:20.920 --> 42:45.760]  в конечном счете. Поняли, да, ребят? Она длинная К, К меньше чем N. Тогда добавим, рассмотрим любое,
[42:45.920 --> 43:06.800]  любую вершину АК плюс один вне цепи и добавим ребром,
[43:06.800 --> 43:31.400]  ребром АК плюс один. Ну в таком случае у нас гамильтонов цикл не появится.
[43:37.200 --> 43:56.280]  Вот. Ну что ж, продолжаем. Ну теперь давайте, собственно, свела задача к чему, что в графе G
[43:56.280 --> 44:04.160]  есть гамильтоновая цепь, но нет гамильтонового цикла и условие задачи выполнено для этого графа.
[44:04.400 --> 44:21.800]  Так, смотрите, что у нас будет тогда. Уже есть гамильтоновая цепь,
[44:21.800 --> 44:51.240]  нет гамильтонового цикла и G удовлетворяет условиям теоремы.
[44:51.400 --> 45:18.360]  Смотрите, вот что у нас получается. Вот это давайте я изображу. Вот гамильтоновая цепь наша. Значит,
[45:18.360 --> 45:25.960]  смотрите, каких ребер совершенно точно не может быть, если мы имеем в виду, что есть и нет
[45:25.960 --> 45:43.880]  гамильтонового цикла. Вот этого ребра быть не может никак, да? Не ребро. Давайте просто посмотрим,
[45:44.840 --> 45:53.680]  поскольку здесь серебра графа, обратите внимание, здесь серебра граф по одной, то все ребра из-за 1,
[45:53.680 --> 46:00.640]  ну смотрите, у нас же условие вон какое, суммарная степень гигантская, то есть вот этими двумя ребрами
[46:00.640 --> 46:07.600]  из-за 1 и AN, соответственно, ну никак не обойтись. Тут есть куча ещё ребер, которые тоже внутри этой
[46:07.600 --> 46:14.920]  цепи как-то распределены, да? Вот. И у этих вершин, которые не соединены ребрами, но тут вот
[46:14.920 --> 46:21.240]  непонятно про них что, но тоже куча соседей, потому что у них суммарная степень очень большая. Так,
[46:21.240 --> 46:32.120]  ребят? Давайте смотреть. Вот предположим, что у нас из-за 1, например, во 3 есть ребро.
[46:32.120 --> 46:43.280]  Тогда я утверждаю, что вот такого ребра быть тоже точно не может. Почему? Тогда есть гамильтонов
[46:43.280 --> 47:02.160]  цикл. Увидите его? Вот он, вот он и вот он. Все, гамильтонов цикл есть. Если первое АИТ ребро,
[47:02.160 --> 47:28.680]  где И от 3 до N-1, то АНАИ-1 не ребро, так как иначе формируется гамильтонов цикл.
[47:28.680 --> 47:40.120]  Ну вот на этом, собственно, противоречие мы и построим. Давайте подумаем. Вот отсюда
[47:40.120 --> 47:49.960]  ДК-1 ребер исходит. Внутрь всё, всё внутри цепи. Каждое ребро накладывает, ну не каждое,
[47:49.960 --> 48:00.760]  а кроме вот этого, вот этого А1А2, накладывает ограничение. Да, ребят? Давайте посмотрим,
[48:00.760 --> 48:15.120]  какая суммарная степень может быть А1А1. Но она никак не может быть больше, чем... Давайте
[48:15.120 --> 48:27.680]  смотреть. Вот эти два ребра есть совершенно точно. Теперь среди вот этих, если есть вот это ребро,
[48:27.680 --> 48:41.600]  так? Из А1, например, в А3, в А4, то нет. В предыдущие из АН, так? Слава быть. У нас...
[48:41.600 --> 48:54.880]  Сколько у нас запретов получается? Получается, у нас...
[48:54.880 --> 49:19.280]  Да, на каждое ребро из А1, кроме одного вот этого, и получается запрет. Всё правильно. То есть у нас
[49:19.280 --> 49:39.120]  получается... Ну давайте, придется выражать... Ну понятно, да. Сейчас как раз я более формально
[49:39.120 --> 49:50.160]  это напишу. Вот столько ребер появляется, а вот эти все ребра накладывают запреты, да? Соответственно...
[49:50.160 --> 50:10.720]  Вот как-то так. Стоп, что-то я переборщил. Нет, стоп, конечно. Вот этих мы говорим про
[50:10.720 --> 50:31.200]  ребра от А3 до АН-3. Соответственно, здесь АН-3. До АН-2. Я тут все время путаюсь. Помогите мне,
[50:31.200 --> 50:56.640]  пожалуйста. Так, сколько здесь... Так. То есть И равно Н-5. От 0 до Н-5, тут Н-4. Даже. То есть из
[50:56.640 --> 51:10.240]  Н-4 вершин от А3 до АН-2. Обратите внимание. Вот столько запретных для ребра из АН. Правильно?
[51:10.240 --> 51:23.560]  Ну, потому что в АН-1-то ребра есть точно? Значит, вопрос про АН-2 и вот эти вот другие. До А2. В А1
[51:23.560 --> 51:45.160]  точно нет. Ну вот. Можно даже чуть поправить. До А2. Здесь Н-4, тут Н-3. Соответственно,
[51:45.160 --> 51:55.960]  вот эти стуки сократятся, получается Н-1. Ну, короче говоря, суммарная степень АН и А1 никак
[51:55.960 --> 52:03.000]  не может быть больше, чем Н-1 из вот этих запретов. Ну, а противоречие с условием. Все.
[52:03.000 --> 52:29.200]  С условием теории. Ну, собственно, все, которое доказывает, что вот это признак гарантирует,
[52:29.200 --> 52:42.560]  что Грав Гамильтонов. Так. Ну, смотрите. Вот эти два ребра точно есть. Теперь вопросы. Вот эти
[52:42.560 --> 52:51.760]  вершины идут. Вот есть ли ребра вот в эти вершины? Из АН вот в эти вершины, соответственно. Из АН.
[52:51.760 --> 53:03.360]  То есть, смотрите. Если, смотрите, рассмотрим ребра из А1, которые отличны от вот этого вот.
[53:03.360 --> 53:15.760]  Их ДЕК А1-1 штук. Каждое такое ребро накладывает запрет на ребро из АН-2. Правильно? Эти ребра
[53:15.760 --> 53:33.760]  из АН-2 могут быть вот в эти вершины. Их Н-3 штуки. От нуля до Н-4. Да, вот этих вершин. Среди них
[53:33.760 --> 53:41.640]  нельзя проводить вот во столько вершин. Но, стало быть, максимум вот во столько-минус столько
[53:41.640 --> 54:00.440]  вершин можно провести. Ну, потому что вот здесь Н-3 вершины. Ну, а я тут от С-3 насчитал. Я считал С-3.
[54:00.440 --> 54:22.240]  На самом деле, в А2-3 за АН тоже может быть ребро. Ну, да. А если граф не связан, там гамильтоновой цепи
[54:22.240 --> 54:33.040]  точно нет. Ну и вообще, в принципе, граф не связан, и гамильтоновым быть не может. То есть, сам признак
[54:33.040 --> 54:40.240]  получается неверен. Если вот это условие не гарантирует связанности графа, то это неверный признак.
[54:40.240 --> 54:53.440]  Ну, можно подумать. Да-да-да. А, кстати, да, контрпример-то простой. Одна вершина плюс клика,
[54:53.440 --> 55:03.640]  наверное, с одной вершины. Что-нибудь такое. Точно не гамильтонов граф. Вот. Так. Какой еще признак
[55:03.640 --> 55:17.160]  гамильтоновости сегодня изучим? Вот так. Сколько у нас времени? Мы в 12.10, да, заканчиваем? Хорошо.
[55:17.160 --> 55:29.400]  Более слов... А, ну, следствие. Следствие. Признак дирока называется.
[55:29.400 --> 55:43.640]  Если в графе...
[55:43.640 --> 56:13.040]  Ж, который ВЕ. Для любой вершины. Степень В. Больше либо рано,
[56:13.040 --> 56:42.520]  чем от пополам. Где от количества вершин? То граф гамильтонов. Вот так. Следствие признака
[56:42.520 --> 56:48.360]  Ора. Потому что если степень каждой индивидуальной вершины больше либо ровно, чем от пополам, то
[56:48.360 --> 56:54.080]  суммарная степень вершин, которые не соединены ребром, точно больше либо ровно, чем Н. Поэтому это
[56:54.080 --> 57:02.560]  более сильный признак, чем признак дирока. Признак дирока тем более. Говорит, ну, он очень-очень
[57:02.560 --> 57:10.440]  плотный граф, но вообще ужас плотный. Тут хотя бы половина ребер от полного графа, тогда он
[57:10.440 --> 57:22.000]  совершенно точно гамильтонов. Ну вот, да. Так. Само собой, если там хотя бы половина ребер от
[57:22.000 --> 57:31.640]  полного графа, конечно он будет гамильтонов. Куда он денется? Вот. Интереснее, как мы понимаем,
[57:31.640 --> 57:41.360]  интереснее в случае более разреженных графов. Вот. А про них ничего эти теоремы не говорят. Так.
[57:41.360 --> 57:53.240]  Есть более тонкий признак Эрдыша Хватова, который я хочу вам рассказать. А для этого
[57:53.240 --> 58:00.520]  нужно несколько определений дать. Определение. Ну что такое кликовое число графа, знаете, нет?
[58:00.520 --> 58:11.640]  Так. Я вам это говорил, да? Клика – это полный подграф. Кликовое число – это размер самой большой
[58:11.640 --> 58:21.440]  клики в графе. Тоже гадская вещь. НП – сложная задача, как ни странно. Я не знаю, почему так
[58:21.440 --> 58:28.360]  много НП-сложных задач. То есть вот кликовое число нахождения, вот граф задан. Придумать
[58:28.360 --> 58:33.800]  компьютерный алгоритм – быстрый, который найдет кликовое число. Ну и желательно вычислить эту
[58:33.800 --> 58:41.920]  самую большую клику. Вот нет таких быстрых алгоритмов. Вот. Оказывается. Поэтому там в каких-нибудь в
[58:41.920 --> 58:48.520]  веб-графах, в которых там миллиарды вершин, помните, я вам описывал их, там трудно ищутся клики,
[58:48.640 --> 58:55.080]  но у нас нет быстрого алгоритма, который ищет это все. Вот. И характеристики с трудом вычисляются.
[58:55.080 --> 58:59.920]  В разе что локально, то есть когда мы ограничим на какой-нибудь миллион, скажем, вершин, может
[58:59.920 --> 59:07.000]  там что-нибудь там и отыщется. А вот на весь граф не получается, что алгоритмы не могут быстро
[59:07.000 --> 59:12.840]  обработать такой массив данных. Вот. Но это вот как раз вопросы big data. Почему нам нужны эти
[59:12.840 --> 59:17.920]  быстрые алгоритмы? У нас огромное количество данных, нам нужно их быстро обрабатывать,
[59:17.920 --> 59:30.920]  а у нас нет быстрых алгоритмов, чтобы это сделать. Вот. Так. Значит. Смотрите. Ну кликовое число
[59:30.920 --> 59:42.640]  тогда не определяю. Что такое вершинная связанность? Набор. Набор вершин. Так. Еще раз.
[59:42.640 --> 01:00:01.080]  Минимальное число вершин. Минимальное число вершин. Которые можно удалить из графа G,
[01:00:01.080 --> 01:00:19.480]  из связанного графа G. Так, чтобы он потерял связанность.
[01:00:31.080 --> 01:00:55.360]  Называется вершиной связанности графа G. Вершиной связанности графа G.
[01:00:55.360 --> 01:01:24.600]  Обозначение вот такое. Так. Господи. Что же я не могу нарисовать? Вот. Капа G. А вот. А если вы
[01:01:24.600 --> 01:01:35.080]  помните, число независимости, например, обозначается альфа, да? Так. Ну давайте. Теперь
[01:01:35.080 --> 01:01:55.480]  признак карточки хватало. Да? Вопрос какой-то? Ну вопрос. Хорошо. А вот какая вершина связанная,
[01:01:55.480 --> 01:02:07.480]  скажем, у дерева? Да. Тогда один. Потому что, да, достаточно одну вершинку удалить, чтобы оно
[01:02:07.480 --> 01:02:21.800]  потеряло связанность. Все правильно. Вершина. Ну два получается. Ну пустой граф связан, да.
[01:02:21.800 --> 01:02:33.840]  Пустой граф связан. Поэтому два. Клика это полный под граф. То есть граф, под граф,
[01:02:33.840 --> 01:02:42.400]  в котором между любыми двумя вершинами есть ребро. Проведено ребро. Вот. В данном случае нам
[01:02:42.400 --> 01:02:47.720]  нужнее не кликовое число, а число независимости. То есть под множество вершин, в котором между
[01:02:47.720 --> 01:02:58.360]  любыми двумя вершинами как раз наоборот нет ребра. Вот теория. Вот не уверен, что мы успеем ее доказать
[01:02:58.360 --> 01:03:24.360]  сегодня, но начнем. Признак картоша хватало. Вот здесь, вроде бы, это оба венгерские имени,
[01:03:24.360 --> 01:03:30.600]  но вроде бы Райгородский, это с этим хватало, он общался, он знает, как его фамилия произносить.
[01:03:30.600 --> 01:03:41.920]  Вот. Да. Ну Эрдыш, я как говорил, он в 90-е годы умер. Например, ну мне не было шанс,
[01:03:41.920 --> 01:03:50.880]  но там Райгородский мог пообщаться. Не знаю, вроде он не общался с ним. Лично с Эрдышем. Вот. Да.
[01:03:50.880 --> 01:04:07.120]  Так. Просто знаете, как это пишется по-венгерски? И вот вопрос, что вот это, что эти две точки
[01:04:07.120 --> 01:04:15.480]  означают, это все-таки не «о» и не «е», а какая-то там... Ну вот, в общем, я могу произнести эту букву,
[01:04:15.480 --> 01:04:25.600]  но в русском языке такого звука нет, поэтому... Да. Это «э», вот. Соответственно, поэтому
[01:04:25.600 --> 01:04:32.160]  транслитерируют по-разному. Вот. Ну, на самом деле, это нормальное дело, ребят. Это в английский вам
[01:04:32.160 --> 01:04:38.880]  повезло, там нет букв, там нет звуков, которых нет в русском языке. Вообще-то в языках разный набор
[01:04:38.880 --> 01:04:46.200]  звуков. Вы должны знать. Я, например, киргизский учил, там еще три звука, кроме обычных, кроме тех,
[01:04:46.200 --> 01:04:53.840]  которые в русском имеются. Это обычный, при этом этот набор звуков характерен для всех тюркских
[01:04:53.840 --> 01:04:59.520]  языков. Там вот эти звуки все есть. Там адыгейский, я посмотрел, это ужасный совершенно язык, там
[01:04:59.520 --> 01:05:14.960]  56 согласных. Вот. Это вот как раз ниндоевропейские языки автохтонные. Там жуткий набор звуков. Так.
[01:05:14.960 --> 01:05:40.520]  Так. Ну что ж. Пусть графежем. Верно, вот такое. Так-так-так. Число независимости у нас нет,
[01:05:40.520 --> 01:05:52.760]  наоборот. Вершинная связанность будет... Так, стоп, стоп, я путаюсь, я путаюсь. Да, вот так. Число
[01:05:52.760 --> 01:06:11.160]  независимости меньше, чем вершинная связанность. Вот. Тогда же... Да, в графеже на трех и более
[01:06:11.160 --> 01:06:34.800]  вершинах. Это важно. А тогда же гамильтонов. Конечно, неверно, для двух или меньше там проще
[01:06:34.800 --> 01:06:42.720]  вся ситуация. И не нужно никакие такие признаки. То есть, если число независимости меньше,
[01:06:42.720 --> 01:06:54.240]  либо равно вершины связанности, то граф гамильтонов. Признак Эрдыша Хватова. Значит, смотрите.
[01:06:54.240 --> 01:07:00.240]  Начало доказательств такое. Нужно выяснить, что же сначала они... Вот если оно удовлетворяет
[01:07:00.240 --> 01:07:06.520]  условия, то точно не дерево. Но деревни гамильтонова. Это уже понятно, да? Там циклов нет.
[01:07:06.520 --> 01:07:12.480]  Поэтому и цикл гамильтонова точно не будет. Вот. Давайте выясним, что вот если это условие у нас
[01:07:12.480 --> 01:07:24.280]  есть, даже в связанном графе, конечно. Ну, как бы, да. Но тут определяется, вот эта капа определяется
[01:07:24.280 --> 01:07:29.080]  только для связанного. То есть, как бы, если оно есть, то предполагается, что граф связан. Но
[01:07:29.080 --> 01:07:39.920]  все-таки нужно отметить. Вот. Смотрите. Вот почему это же... Почему же, если удовлетворяет условия,
[01:07:39.920 --> 01:07:51.480]  то не дерево? Как минимум двоечки, да. Как минимум двоечки. Почему? Капа равно, если же дерево.
[01:07:51.480 --> 01:08:06.120]  Листы образуют независимое подмножество. Листы. А в дереве может быть три или больше листов.
[01:08:06.120 --> 01:08:14.800]  Ну, тут же три более вершин. Да. В любом дереве есть хотя бы два листа. Поэтому число независимости,
[01:08:14.920 --> 01:08:22.240]  листы образуют сами по себе независимое подмножество. Поэтому число независимости от дерева больше
[01:08:22.240 --> 01:08:33.160]  либо ровно чем два. Правильно, Риман? Вот. А вершинная связанность дерева, хотя равна единице, почему?
[01:08:33.160 --> 01:08:49.960]  Да, возьмем вершинку, которая листом не является. Что тогда? Тогда параграф распадется на компонент
[01:08:49.960 --> 01:09:05.360]  связанности. Почему? Ну, в принципе, да, можно так, можно так, можно так. То
[01:09:05.360 --> 01:09:22.200]  капа от g равно единичке, альфа от g больше либо равно чем 2. И условие не выполнено. И условие теоремы не выполнено.
[01:09:22.200 --> 01:09:46.360]  Для g не выполнено. Ну, то есть, если условие у нас имеет место быть, то же заведомо не дерево.
[01:09:46.360 --> 01:09:51.040]  Начнём с циклу. Рассмотрим самый длинный цикл уже.
[01:09:51.040 --> 01:10:17.680]  Значит, ну вот, смотрите.
[01:10:17.680 --> 01:10:39.520]  Какой-то обозначим вот c.
[01:10:47.680 --> 01:11:15.600]  Пусть, вот этот самый цикл g, пусть, c есть, нет, не n, нет, вру-вру-вру, k, мы не знаем сколько тут вершин, c это a1, a2, ну, то есть, обходим этот цикл по вершинам, a1, a2, в каком-нибудь направлении, в любом.
[01:11:16.320 --> 01:11:23.760]  Нам не важно в каком. Вот такой цикл, обойдём его.
[01:11:28.000 --> 01:11:42.080]  Так, смотрите, пусть же не Гамильтонов, он даже можно не предполагать, а хотя нет, нужно предположить. Пусть, ну, шока, но это самый длинный цикл.
[01:11:42.240 --> 01:11:44.960]  Если k равно n, то всё доказано.
[01:11:46.720 --> 01:11:53.440]  Если k строго меньше, чем n, вот с этого предположения мы должны противоречиво вести. Пусть k строго меньше, чем n.
[01:11:54.720 --> 01:11:59.120]  То есть, самый длинный цикл, который у нас есть в графе, меньше, чем n.
[01:12:00.720 --> 01:12:02.400]  Ну, простой цикл имеется в виду, да?
[01:12:03.360 --> 01:12:17.280]  Тогда, смотрите, при удалении вот этих ребер этого самого цикла, граф распадётся на какие-то компоненты связности, ну, кроме вот этих вершин цикла, так?
[01:12:17.280 --> 01:12:33.760]  Ну, может распадаться, может не распадаться, просто вот обозначим ту компоненту связности, если распадётся, то возьмём какую-нибудь компоненту связности, не одна вершина, которая осталась после того, как мы удалили.
[01:12:33.760 --> 01:12:38.000]  Если она одна, ну, её саму и возьмём, поняли, да?
[01:12:38.720 --> 01:13:00.800]  Так, значит, после удаления, после удаления ребер с, рассмотрим любую компоненту связности, которая образовалась.
[01:13:01.040 --> 01:13:18.160]  Рассмотрим любую образовавшуюся компоненту связности, образовавшуюся компоненту связности.
[01:13:18.160 --> 01:13:43.520]  Дубль В, который вовне, Дубль В, состоящий из более чем одной вершины, вот так.
[01:13:49.040 --> 01:13:53.040]  Больше одной, ну, не одна вершина.
[01:13:57.040 --> 01:14:07.440]  Так, если такой не будет, графуни циклический тогда получается, правда?
[01:14:09.440 --> 01:14:13.440]  Вернее, даже не ребер, а вершин цикла С.
[01:14:13.440 --> 01:14:15.440]  Вершин.
[01:14:18.160 --> 01:14:37.440]  Ну, давайте, хорошо, просто компонент связности Дубль В, на самом деле мы не будем пользоваться тем, что там больше, чем одна вершина, нам это на самом деле не так, чтобы нужно, вот.
[01:14:37.440 --> 01:14:43.440]  Ну вот, хорошо, вот теперь давайте перерисуем.
[01:15:18.160 --> 01:15:29.440]  И вот здесь у нас компонент связности Дубль В. Обозначим.
[01:15:29.440 --> 01:15:56.720]  Н-Дубль В это у нас neighbors, от neighbors соседи Дубль В, то есть это те вершины, те вершины В из множества вершин графа В без компонента Дубль В.
[01:15:56.720 --> 01:16:16.000]  Такие, что существует У из, существует У просто, такое, что УВ из, ну, ребром соединен.
[01:16:16.000 --> 01:16:29.280]  А, существует У из Дубль В, конечно же, ну то есть соседи Дубль В вне Дубль В. Н-Дубль В обозначим это дело.
[01:16:33.280 --> 01:16:35.280]  Понятно, ребята?
[01:16:35.280 --> 01:16:50.560]  Соседи, соседи вот это его компоненты связности, которые, ну, это те вершины, с которыми Дубль В соединено вне себя.
[01:16:50.560 --> 01:16:53.840]  Их, а?
[01:16:53.840 --> 01:16:57.840]  Есть. А это же граф связный.
[01:16:57.840 --> 01:17:05.840]  Понятно, что у нас это, ну, если бы не было ребер вовне Дубль В, то...
[01:17:05.840 --> 01:17:11.840]  Так мы же удалили для этого вот это вот вершины.
[01:17:11.840 --> 01:17:15.840]  Чтобы получить компонент связности, нужно удалить эти вершины.
[01:17:15.840 --> 01:17:25.120]  Теперь мы рассмотрим весь граф сразу. А он связан. То есть, вовне Дубль В точно ребра идут. Вопрос, куда идут ребра вовне.
[01:17:25.120 --> 01:17:34.400]  Первое утверждение. Лемма 1.
[01:17:34.400 --> 01:17:40.400]  Н-Дубль В под множество С.
[01:17:40.400 --> 01:17:46.400]  То есть, ребра идут в цикл.
[01:17:46.400 --> 01:17:48.400]  Очевидно, почему?
[01:17:48.400 --> 01:17:52.400]  Это же компоненты связанности, она в другие штуки идти точно не может.
[01:17:52.640 --> 01:17:56.640]  Ну да. Доказательства.
[01:17:56.640 --> 01:18:16.640]  Ну, пусть есть В, пусть есть вершины Дубль В из НВ, не принадлежащие от цикла.
[01:18:16.640 --> 01:18:18.640]  Что тогда?
[01:18:18.880 --> 01:18:22.880]  Тогда у нас вот такая картинка.
[01:18:22.880 --> 01:18:32.880]  Ну, тогда вот эта Дубль В маленькая плюс Дубль В большая, они вместе тоже образуют компоненты связанности.
[01:18:32.880 --> 01:18:38.880]  Но это не компоненты связанности, оно не максимально. Правильно?
[01:18:38.880 --> 01:18:46.880]  Следовательно, Дубль В большой объединить с Дубль В маленькая тоже связано.
[01:18:47.120 --> 01:18:57.120]  И Дубль В не компоненты связанности.
[01:19:07.120 --> 01:19:11.120]  Так как она не максимальная.
[01:19:17.120 --> 01:19:21.120]  Ну, собственно, все.
[01:19:21.120 --> 01:19:27.120]  Отсюда соседи Дубль В из Вне могут быть только внутри цикла.
[01:19:27.120 --> 01:19:35.120]  То есть, из Дубль В идут ребра только вот куда-нибудь сюда.
[01:19:35.120 --> 01:19:43.120]  И поэтому при удалении вот этого всего вершины цикла Дубль В получается одной отдельной компонентой связанности.
[01:19:43.120 --> 01:19:45.120]  Понимаете, да?
[01:19:45.360 --> 01:19:49.360]  Так, хорошо.
[01:19:49.360 --> 01:19:55.360]  Что теперь следующего утверждения, утверждение ЛЕМА-2?
[01:19:55.600 --> 01:20:21.600]  Если для любого И от 1 до k-1
[01:20:21.840 --> 01:20:35.840]  Если АИТ принадлежит НВВ, то есть, оно соединено ребром с этой компонентной связанностью,
[01:20:36.080 --> 01:20:40.080]  то следующее за ней уже нет.
[01:20:44.080 --> 01:20:54.080]  То следующее не соединено ребром с Дубль В.
[01:20:54.080 --> 01:20:56.080]  Почему?
[01:20:56.320 --> 01:21:00.320]  Ну, да.
[01:21:00.320 --> 01:21:04.320]  Правда, нужно, наверное, для АКАТОВА написать.
[01:21:04.320 --> 01:21:08.320]  Тогда, правда, непонятно, а И плюс 1 чему равно, имеется в виду А1 тогда.
[01:21:08.320 --> 01:21:10.320]  Вот.
[01:21:10.320 --> 01:21:12.320]  То есть, следующая подцикла.
[01:21:12.320 --> 01:21:14.320]  Поняли, ребят?
[01:21:14.320 --> 01:21:16.320]  Вот.
[01:21:16.320 --> 01:21:20.320]  Доказательства.
[01:21:20.560 --> 01:21:28.560]  Ну, если так, если есть две соседние подциклы вершины, которые соединены ребром с НВВ,
[01:21:28.560 --> 01:21:34.560]  то мы можем удлинить этот самый цикл, а мы предположили, что он самый длинный.
[01:21:34.560 --> 01:21:36.560]  Смотрите как.
[01:21:36.560 --> 01:21:38.560]  Мы удлиняем этот цикл.
[01:21:38.560 --> 01:21:40.560]  Вот так, вот так.
[01:21:40.560 --> 01:21:44.560]  Вот здесь некая перемычка между ними должна быть,
[01:21:44.560 --> 01:21:46.560]  потому что Дубль В компонента связанности.
[01:21:46.560 --> 01:21:48.560]  Потом вот так.
[01:21:48.800 --> 01:21:50.800]  И возвращаемся.
[01:21:50.800 --> 01:21:52.800]  Цикл длинее стал.
[01:21:52.800 --> 01:21:56.800]  Там добавилось хотя-то к АМИМУ два ребра в цикле.
[01:21:56.800 --> 01:21:58.800]  Добавилось.
[01:21:58.800 --> 01:22:00.800]  Противоречие.
[01:22:00.800 --> 01:22:10.800]  Если АИТ и АИ плюс 1 принадлежат Дубль В,
[01:22:10.800 --> 01:22:14.800]  то можем удлинить цикл С.
[01:22:15.040 --> 01:22:27.040]  Можем найти цикл длинее С.
[01:22:37.040 --> 01:22:39.040]  Так.
[01:22:39.040 --> 01:22:41.040]  Как это, значит, описать?
[01:22:41.040 --> 01:22:43.040]  А1 до АИТ.
[01:22:43.280 --> 01:22:45.280]  Дальше.
[01:22:45.280 --> 01:22:47.280]  В... не знаю.
[01:22:49.280 --> 01:22:53.280]  ЦИТ, ЦИ плюс 1.
[01:22:57.280 --> 01:22:59.280]  ЦИ плюс 1.
[01:22:59.280 --> 01:23:01.280]  Обратно ВАИТ плюс 1.
[01:23:03.280 --> 01:23:07.280]  И ВАИ 1.
[01:23:09.280 --> 01:23:11.280]  Противоречие.
[01:23:13.280 --> 01:23:15.280]  Противоречие.
[01:23:23.280 --> 01:23:25.280]  Пока понятно?
[01:23:25.280 --> 01:23:27.280]  Да.
[01:23:27.280 --> 01:23:31.280]  Ну, то есть, у нас вышло что?
[01:23:31.280 --> 01:23:35.280]  Что вершинки соседей Дубль В,
[01:23:35.280 --> 01:23:37.280]  они через раз идут.
[01:23:37.280 --> 01:23:39.280]  Как минимум через раз.
[01:23:39.280 --> 01:23:41.280]  Ну, как максимум через раз.
[01:23:41.520 --> 01:23:43.520]  В цикле.
[01:23:59.520 --> 01:24:03.520]  ЦИТ – это вот эта вершинка, с которой АИТ соединено.
[01:24:03.520 --> 01:24:05.520]  Блин, звонок.
[01:24:07.520 --> 01:24:09.520]  Почти закончили, честно, ребят.
[01:24:09.760 --> 01:24:13.760]  Тут еще одна лемма осталась, и, в принципе, все.
[01:24:13.760 --> 01:24:15.760]  Но в этой лемме я могу запутаться,
[01:24:15.760 --> 01:24:19.760]  потому что там цикл довольно заковыристый строится.
[01:24:21.760 --> 01:24:23.760]  Что делать?
[01:24:23.760 --> 01:24:25.760]  Я не думал, что мы так далеко в этом доказательности,
[01:24:25.760 --> 01:24:27.760]  честно говоря, продвинемся.
[01:24:27.760 --> 01:24:33.760]  Я думал, мы вот примерно до этого места дойдем и закончим уже.
[01:24:33.760 --> 01:24:35.760]  А там уже можно потом лемму будет рассказывать.
[01:24:35.760 --> 01:24:37.760]  Ну, это все.
