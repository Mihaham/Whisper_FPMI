[00:00.000 --> 00:13.320]  так поехали о да так же сегодня сегодня у нас будет очень много потоков
[00:13.320 --> 00:20.880]  ну ладно может не очень но да так вот ладно нет я даже не буду нет я правда
[00:20.880 --> 00:24.920]  даже не буду утверждать что там сегодня возможно мы потоки все и закончим потому
[00:24.920 --> 00:31.320]  что есть подозрение что все-таки не настолько вот но то есть с огромной
[00:31.320 --> 00:36.200]  вероятностью мы закончим следующий раз на самом деле прочь а впрочем прочим
[00:36.200 --> 00:43.240]  прочим прочим не вон вот прочим не будем загадывать там всякая возможна да
[00:43.240 --> 00:47.760]  в этом смысле у нас достаточно спокойные такие времена то есть там
[00:47.760 --> 00:53.240]  сколько у нас там ну да если мы в апреле закончим потоки то посмотрим
[00:53.240 --> 01:01.280]  сколько у нас занятия вообще в мае будет вот так но давайте вспоминать что у
[01:01.280 --> 01:05.640]  нас прошлый раз было так в прошлый раз мы с вами но только из важного
[01:05.640 --> 01:11.920]  теоретического доказали тирему форда фолкерсона было дело да да ну по-моему
[01:11.920 --> 01:15.720]  теоретически мы на этом остановились потому что дальше там мы начали
[01:15.720 --> 01:22.880]  обсуждать кучу задач там во главе там во главе с hard life вот так но сегодня мы
[01:22.880 --> 01:26.560]  конечно в теорию глубимся больше но начнем мы тем не менее с такой
[01:26.560 --> 01:35.640]  разминочки вот разминочкой будет у нас задача о пара сочетания вот да там так
[01:35.640 --> 01:41.760]  тут таки оказывается есть что обсудить да что тут казалось бы можно обсудить
[01:42.320 --> 01:55.280]  чего чего почему арабская кто говорит а он объясняет происхождение этого термина
[01:55.280 --> 02:12.680]  я понял да ну окей оригинально но нет нет нет нам бы с вами собственно основной
[02:12.680 --> 02:18.840]  что формально говоря мы даже с вами не знаем что такое алгоритм куна да ну
[02:18.840 --> 02:25.680]  типичная ситуация да вот но собственно да почему мы не знаем нет ну конечно ладно давайте
[02:25.680 --> 02:32.520]  задам тривиальный вопрос кто когда-нибудь хоть раз в жизни писал алгоритм куна глупо было бы
[02:32.520 --> 02:40.920]  предполагать обратно и действительно вот так ладно а кто-то когда-нибудь изучал его доказательства
[02:40.920 --> 02:50.840]  нет вот он действительно такая фишка да просто это приятно да что конечно же там если вы
[02:50.840 --> 02:56.040]  изучали в каких бы только шахтинько фах или там действительно там прочих подобных местах то
[02:56.040 --> 03:02.520]  обычно конечно там у вас алгоритм куна доказывается там по принципу действительно там рассмотрим
[03:02.520 --> 03:08.160]  ваши текущие про сочетание рассмотрим максимальное там значит там блаблаблаблаблабла вот есть
[03:08.160 --> 03:15.400]  удлиняющая цепь скорее всего такое заклинание вот вот но сегодня мы с вами посмотрим на это
[03:15.400 --> 03:20.240]  дело с более высокой колокольни а именно с колокольни теории поток потому что действительно
[03:20.240 --> 03:27.400]  достичь симптотики куна в общем-то очень просто и более того можно и за зачем кун что такое кун не
[03:27.400 --> 03:33.960]  знаю никакого куна господи как к чему-то венгекский математик там какой-то да господи там все сложно
[03:33.960 --> 03:38.360]  то есть действительно давайте просто найдем про сочетание потоками как найти про сочетание
[03:38.360 --> 03:48.680]  потоками очень просто заводим и сток заводим вот такие ребра с пропускной способностью адын вот
[03:48.680 --> 04:03.000]  вот что-нибудь такое а также заводим сток вот с такими ребрами да все вот тоже там один один один
[04:03.000 --> 04:09.920]  один один один тут дорисовывать не буду потому что по барабану вот все а ну как бы уже наверное
[04:09.920 --> 04:18.560]  нет нужно говорить что тут уже все ориентируем в эту сторону вот так вот вот вот вот и тут
[04:18.560 --> 04:23.800]  получается один один один один один один там бабла бабла бабла один все и думаю достаточно не
[04:23.800 --> 04:29.560]  сложно убедиться что любой поток в этой сети соответствует при сочетании аналогичного размера
[04:29.560 --> 04:37.680]  вот так что все что вам остается найти поток но как же найти по максимальный поток в этой сети ну
[04:37.680 --> 04:43.320]  у нас с вами есть метод форда фолтиксона кто и предлагает его искать едва ли не дфс в чем
[04:43.320 --> 04:49.480]  каждый дфс он либо скажет что поток максимальный либо найдет вам собственно какую-то новую единицу
[04:49.480 --> 04:57.720]  потока протолкнет поэтому асимптотика тогда от такого алгоритма получится о ац там можно
[04:57.720 --> 05:08.000]  сказать зе на я это пишу так анс плюс один ну где анс это размер максимального пара сочетания в
[05:08.000 --> 05:13.200]  общем-то ну вот то есть в общем-то все просто то есть если хочется достичь именно асимптотики
[05:13.200 --> 05:20.640]  кунна то никаких проблем вот все поток вам уже это сделал вот но на самом деле кунн конечно это
[05:20.640 --> 05:25.960]  не просто типа возьми потока и давайте сделать алгоритм тем более кстати еще хорошо просто
[05:25.960 --> 05:32.160]  появилось раньше алгоритм куна или вся эта теория поток вот потому что кунн по моему работал
[05:32.160 --> 05:38.000]  где-то в 50-е годы могу как-то ошибаться все-таки теория поток появилась там 60 и 70 это загорелось
[05:38.000 --> 05:45.160]  вот но тем не менее но то на самом деле тем не менее алгоритм куна все-таки изучить стоит потому
[05:45.160 --> 05:52.320]  что конечно же алгоритм куна он предложит вам реализовать этот алгоритм сильно проще вот ну
[05:52.320 --> 05:58.960]  с чего можно найти но то есть как упростить реализацию ну простить реализацию можно например
[05:58.960 --> 06:08.400]  такие способы чтобы вот эти вот s и t во-первых не создавать что тогда будет потому что заметим
[06:08.400 --> 06:14.520]  что как устроен любой путь от s до t он устроен так то есть мы идем из вас в какую-то вершину еще
[06:14.520 --> 06:20.320]  не покрытую очевидно по рассочетаниям потом тут идем как-то вот по какому-то пути причем
[06:20.320 --> 06:24.560]  который идет вот так вот зигзагообразно доходим до вершины которые не покрыта по рассочетаниям и
[06:24.560 --> 06:29.120]  идем еще более того когда идем справа налево это обязательно развернутый ребро то есть ребро из
[06:29.120 --> 06:38.000]  присочетания вот то есть в результате то есть получается так что можно как минимум s и t не
[06:38.000 --> 06:46.240]  создавать а просто на каждом шаге запускать dfs и из вершин не покрытых по сочетаниям причем
[06:46.240 --> 06:51.560]  там там пока у нас доказательства то есть получается алгоритм такой то есть у нас есть
[06:51.560 --> 06:56.720]  текущее по сочетаниям значит мы мысля на там раз вот то есть мы там разворачиваем все ребра
[06:56.720 --> 07:01.320]  которые в этом про сочетания лежат после этого пробегаемся по всем вершинам левой доли не
[07:01.320 --> 07:07.840]  покрытой по сочетаниям запускаем dfs причем когда мы запускаем из очередной вершины то есть когда
[07:07.840 --> 07:12.560]  пробегаемся из этой вершины до fs теперь то когда мы потом бежим из этой то старые пометки мы
[07:12.560 --> 07:18.480]  естественно не снимаем потому что наша цель достигнуть т ну смысле любой вершины справа не
[07:18.480 --> 07:26.200]  покрытой по сочетаниям да вот и соответственно вот и получается но вот и получается за от там
[07:26.200 --> 07:32.080]  в плюсе получается мы находим какой-то путь ну и соответственно вдоль этого пути проталкиваем
[07:32.080 --> 07:41.880]  поток то есть разворачиваем но алгоритм куна действует еще хитрее что алгоритм куна дил делает
[07:41.880 --> 07:52.640]  хитрее относительно того что я сейчас сказал ну да он как-то очень хитрый делает вместо того
[07:52.640 --> 07:56.720]  то есть мы говорим что сейчас на каждом шаге надо пробегаться по вершинам запускать dfs он
[07:56.720 --> 08:02.280]  говорит что просто надо один раз пробежаться и каждый раз снимать пометки потому что он почему-то
[08:02.280 --> 08:11.120]  не нагло нам утверждает что если вы запустили из вершины dfs и удлиняющий цепи не нашли то вы больше
[08:11.120 --> 08:18.560]  и видимо не найдете никогда почему-то он такое утверждает возможно в доказательстве без потоков
[08:18.560 --> 08:24.440]  это на самом деле едва ли не самое сложное место на самом деле или вы это как-то просто доказываете
[08:24.440 --> 08:40.440]  да действительно то есть что же делать как же у нас этот кунтик бенод так выясняется но мы
[08:40.440 --> 08:45.720]  докажем сейчас это утверждение с точки зрения потоков потому что оно тоже следует более общего
[08:45.720 --> 08:54.800]  потока вот сформулирую я его пожалуй следующим образом такой я его такой лемма не знаю давай не
[08:54.800 --> 09:01.640]  буду я наверное его возводить в ранг теоремы поэтому давайте лемма там пусть у нас значит
[09:01.640 --> 09:11.600]  на это уже абсолютно произвольная сеть вот не обязательно такая в е ц ст то есть пусть сеть в
[09:11.600 --> 09:33.120]  который ищется поток методом forda fokerson вот пусть перед очередной итерацией
[09:42.080 --> 09:43.080]  итерацией
[09:48.080 --> 09:49.120]  обнаружилось
[09:56.120 --> 09:56.560]  что
[09:59.880 --> 10:07.120]  что не существует пути от вершины в
[10:07.120 --> 10:20.680]  в и в соответственно сток в там же но вот в остаточной сети жф по не на по не нулевым
[10:20.680 --> 10:23.360]  ребрам ну как всегда
[10:28.680 --> 10:39.840]  во тогда говорим мы тогда
[10:43.360 --> 10:47.920]  когда что как бы это сформулировать но идея простая я утверждаю что из
[10:47.960 --> 11:01.760]  этой вершины в путь больше никогда и не появится тогда далее такого пути из такого пути
[11:01.760 --> 11:10.160]  из в в т и не появится
[11:10.160 --> 11:23.360]  красота вот вот такое мистическое утверждение вот ну думаю если мы сейчас поверим в
[11:23.360 --> 11:28.480]  это утверждение то алгоритм куна конечно доказан автоматически правда вот
[11:28.480 --> 11:36.400]  но теперь возникает вопрос как же такое доказать
[11:36.400 --> 11:46.840]  вот эх надо было бы вам конечно это как теоретическую задачу вот и задать конечно
[11:46.840 --> 12:00.320]  но как всегда да не будем этого делать давайте смотреть идея на самом деле такая и так мы
[12:00.320 --> 12:07.320]  делаем начать перед очередной итерации такого пути нет и после следующей нету и после после
[12:07.320 --> 12:14.560]  следующей нету но предположим что после какой-то итерации у нас неожиданно путь появился то есть
[12:14.560 --> 12:20.360]  какая ситуация возникла у нас пути не было мы значит запустили одну итерацию форда флакерсона
[12:20.360 --> 12:26.920]  то есть нашли какой-то пути застой и протолкнули поток и неожиданно пути от вд т появился
[12:26.920 --> 12:38.600]  допустим да что же это за путь ну заметим что ребра в этом пути делятся на две части первая
[12:38.600 --> 12:48.840]  часть это ребра которые существовали перед этой итерации вот я их черненьким нарисую вот
[12:48.840 --> 12:57.720]  допустим вот в это а были ребра которых перед этой итерации не было но после они неожиданно
[12:57.720 --> 13:03.920]  появились как они появились ну как обратно и понятно что хоть какой-нибудь хоть одно из них
[13:03.920 --> 13:12.840]  явно появилась правда вот то есть как именно как обратно что это означает это означает что на
[13:12.840 --> 13:18.720]  предыдущей итерации у нас пути от с дт выглядел каким-то таким образом то есть оно тут шло шло
[13:18.720 --> 13:26.640]  шло шло может даже вот так кстати шло вполне себе и вот бабах и прошел он пер по этому ребро еще
[13:27.000 --> 13:35.120]  погуляла погуляла и прошло например вот по этому ребро да дебильный рисовал давайте вот так вот
[13:35.120 --> 13:46.720]  нарисуем вот вот и ну вот как-то вот так вот то есть да заметим да что ребра то есть этот синий
[13:46.720 --> 13:52.840]  путь мог проходить вот эти ребра в общем-то абсолютно в любом порядке не обязательно конкретно в этом но нам
[13:52.840 --> 13:58.320]  это не принципиально потому что заметим что черным и синим я нарисовал ребра которые были перед
[13:58.320 --> 14:05.480]  соответствующей итерации форта фолкерсона да смотрите какая ситуация вот рассмотрим вот
[14:05.480 --> 14:12.320]  эту вершину это самое это вот самая первая вершина с красным ребром на пути от в дт но
[14:12.320 --> 14:20.600]  заметим что из нее какой-то путь дт существовал ну понимаешь мы пути протолкнули правда и вот
[14:20.600 --> 14:28.880]  эти ребра существовали вот ну вывод очень простой значит у нас получается от в дт перед
[14:28.880 --> 14:33.480]  итерацией тоже путь существовал мы просто должны были идти по вот этим ребрам до этой вершины
[14:33.480 --> 14:45.440]  а потом просто вот по синим ребрам доходить дт все доказательства окончено вот ну собственно
[14:45.440 --> 14:50.560]  абсолютно аналогичным образом кстати можно доказать и родного брата этой леммы такой
[14:50.560 --> 14:56.480]  симметричного близнеца так сказать за это близнец будет заключаться в том что то же самое только
[14:56.480 --> 15:10.440]  пропуть не из в не из в т а из с в соответственно то есть что если мы лемма ее двойственная то мы
[15:10.440 --> 15:17.800]  можем просто сказать что если не существует длиннейший спирт через в именно через в то
[15:17.800 --> 15:28.520]  ее не появится если он блокирует с какой-то стороны ну так ну по сути получается так да
[15:28.520 --> 15:32.920]  действительно что если у вас не существует удлиняющего пути проходящего через вершину
[15:32.920 --> 15:38.720]  в то значит до его и не появится потому что не существует его тогда и только тогда когда либо
[15:38.800 --> 15:44.080]  не существует пути от с до в либо не существует пути от в дт даже не либо или потому что если
[15:44.080 --> 15:49.400]  одновременно тоже на стрельб Нет вроде правда там надеюсь никаких за цикла вот этих не
[15:49.400 --> 15:53.980]  появляется а ну даже если за циклы появляется то ладно мы живем в ориентированном графе поэтому
[15:53.980 --> 16:02.960]  нам по барабану хотя хотя нет в ров-ров-ров-ров-ров-ров-ров этот нет вообще это неправда нет это не
[16:02.960 --> 16:07.480]  совсем так нет ну там это видимо что то более надо как-то аккуратнее формулировки что в принципе
[16:07.480 --> 16:15.840]  может возникнуть вот такая ситуация, но правда тут немножко наоборот,
[16:15.840 --> 16:23.980]  удлиняющего пути через В нету, но оба пути есть, правда есть подозрение,
[16:23.980 --> 16:31.640]  что через вершину В пути как не было, так и не появится, хотя здесь
[16:31.640 --> 16:34.960]  можно пойти следующим образом, можно просто сформулировать ту же самую лему,
[16:34.960 --> 16:39.800]  видя, что путь у нас не существует удлиняющего пути, проходящего через вершину В,
[16:39.800 --> 16:51.480]  утверждение его и не появится, доказательства, а вот собственно, хотя давайте по эмулируем,
[16:51.480 --> 17:03.680]  как там доказательства будет, так вот, жила была СВ, что если нет удлиняющего пути от С до Т,
[17:03.680 --> 17:11.560]  проходящего через вершину В, то его никогда и не появится, так, ну да, предположим,
[17:11.560 --> 17:18.480]  что какой-то появился, значит где-то тут есть красные ребра, там допустим, тут красные ребра,
[17:18.480 --> 17:25.680]  но вот тут непонятно, кстати, где красные ребра, так-так-так-так-так-так-так-так-так,
[17:25.680 --> 17:33.800]  ну просто вот давайте, ну просто тут есть три случая, как бы есть красные ребра только
[17:33.800 --> 17:38.240]  здесь, есть красные ребра только здесь и есть красные ребра и там и там, допустим,
[17:38.240 --> 17:46.760]  красные ребра только здесь, тогда что мы получаем, так, нет, а вот не скажите, сейчас хотя, так,
[17:46.760 --> 17:53.920]  жил был у нас предыдущий путь и он через вершину В не проходил, это для нас важно, так, значит мы
[17:53.920 --> 18:05.200]  каким-то шаманским шамань-шамань-шамань-шамань прошли сюда и можем пройти по В, так, более того
[18:05.200 --> 18:11.680]  заметим, что нам сейчас было абсолютно, так, ну да, все, путь существует, так, но это мы воспользовались
[18:11.680 --> 18:20.280]  тем, что тут красных ребр нету, обратите внимание, так, ладно, ну случай номер два, когда у вас тут
[18:20.280 --> 18:27.520]  красные ребра только справа, но он кажется симметричным, да, он кажется симметричным, хорошо,
[18:27.520 --> 18:36.200]  так что остается только теперь ситуация, когда у нас и тут ребра есть и тут ребра есть, так,
[18:36.200 --> 18:55.800]  спрашивается, что мы делаем в этом случае, да кто-то вот, а вот мы нарисовали пример, который-то валит,
[18:55.800 --> 19:20.600]  ну это не совсем так, тут кажется, что у нас есть и то и то, нет простого пути из СТ через В, но как бы есть и путь до СДВ, есть путь от В до Т.
[19:20.600 --> 19:28.600]  Да, мы же хотим показать уже не вот такого же, который отличается, то есть, а в каком случае это действительно работает?
[19:28.600 --> 19:36.600]  Ну тут уже можно видеть то, что это препарат, потому что если у нас длинная путь прошел сначала через ребра, которые справа,
[19:36.600 --> 19:39.600]  то через ребра, которые слева, мы не сможем воспользоваться его отрезками, чтобы...
[19:39.600 --> 19:43.600]  Так.
[19:43.600 --> 19:51.600]  То есть, первое, что с ними существуют пути из СВ, тогда и не будет пути из СТ через В никогда.
[19:51.600 --> 19:59.600]  Одно из двух, они в момент времени выполняются, на самом момент времени, когда нет пути из СВ-Т, либо то выполняется, либо то выполняется.
[19:59.600 --> 20:07.600]  Возможно оба, конечно, не важно, оба не выполняются, но если оба не выполняются, то по монотонности у тебя либо префит, либо сувик всегда не будет выполняться.
[20:07.600 --> 20:12.600]  Значит, они будут выполняться это упражнение.
[20:12.600 --> 20:18.600]  То есть, это, например, что другое ломает, то есть, как бы он контрпозицию ломает, а мы...
[20:18.600 --> 20:26.600]  Нет, он ломает упражнение о том, что если от СДВ есть путь и от ВДТ есть путь, то от СДТ тоже есть путь.
[20:26.600 --> 20:29.600]  Ломает именно, что простой путь, правда, есть.
[20:49.600 --> 21:08.600]  Нет, парадокс в том, что чисто теоретически, если разрешить удлиняющим путям быть непростыми, то вот в этой ситуации можно сделать удлиняющий путь, который через В проходит.
[21:08.600 --> 21:17.600]  Просто надо не насыщать все вот эти ребра, типа если тут даже они по единичке, я скажу 05 05 05 05 05 05.
[21:17.600 --> 21:20.600]  Там насытив, скажем, вот это ребро.
[21:20.600 --> 21:25.600]  То есть, как бы при большом желании это делается.
[21:25.600 --> 21:31.600]  А вот можно ли гарантировать, что...
[21:31.600 --> 21:33.600]  А кто такие красные ребра еще?
[21:33.600 --> 21:38.600]  Красные ребра это те, которые... Вот мы сейчас сделали итерацию, и эти ребра появились.
[21:38.600 --> 21:41.600]  И в результате их путь от СДТ через В появился.
[21:44.600 --> 21:47.600]  Появились обратные ребра, потому что...
[21:47.600 --> 21:52.600]  То есть, да, это означает, что предыдущий путь, по которому мы прототули, через них проходил.
[21:52.600 --> 22:04.600]  Так, в смысле? Нет.
[22:15.600 --> 22:19.600]  Ну, через ребро, наверное, тоже это можно доказать, в общем-то.
[22:19.600 --> 22:21.600]  Ну, потому что там...
[22:27.600 --> 22:29.600]  Из этой вершины пройти до Т, да.
[22:29.600 --> 22:35.600]  Как это пойти? Находим что-то или ничего не находим, и говорим, что все, отсекаем, идем к следующей вершине.
[22:35.600 --> 22:40.600]  Это не означает, что через эту вершину векторов, потому что рассмотрели, нет вообще никакой удлиняющей цепи.
[22:40.600 --> 22:43.600]  Она есть, мы ее найдем, если она есть.
[22:43.600 --> 22:48.600]  Просто она выходит из истока через другой ребро.
[22:48.600 --> 22:50.600]  Ну вот, главное шоки, да.
[22:50.600 --> 22:53.600]  Правда, конечно, шок через вершину В ее искать не придется.
[22:53.600 --> 22:55.600]  Из вершины В она не будет.
[22:55.600 --> 23:00.600]  Но здесь, правда, оговорка, что вершина В будет в этой удлиняющей цепи, если она есть, она должна быть прям второй.
[23:00.600 --> 23:02.600]  Точнее, первой после истока.
[23:05.600 --> 23:07.600]  То есть это утверждение, да, это более сильное.
[23:07.600 --> 23:12.600]  Но тут возникает вопрос, да, где тут у нас доказательства валятся, да?
[23:12.600 --> 23:25.600]  Потому что здесь, конечно, противоречие начинает только возникать в том, что если этот синий путь сначала пришел в эту вершину,
[23:25.600 --> 23:27.600]  а потом пришел в эту вершину.
[23:27.600 --> 23:36.600]  Потому что если он пришел сначала сюда, а потом сюда, то получается, что путь через вершину В существовать вполне себе будет.
[23:36.600 --> 23:40.600]  Правда, там начнутся оговорки, что он еще мог через вот эти вершины бегать.
[23:40.600 --> 23:42.600]  Как то.
[23:42.600 --> 23:44.600]  Да, слушайте, хороший вопрос.
[23:50.600 --> 23:52.600]  Да, ну ладно.
[23:56.600 --> 23:58.600]  Да?
[24:00.600 --> 24:02.600]  Ну не знаю, не знаю, не знаю.
[24:02.600 --> 24:04.600]  Ну не знаю, не знаю, не знаю.
[24:08.600 --> 24:10.600]  Так, вот как был вопрос такой.
[24:10.600 --> 24:12.600]  Вот действительно интересно, можно ли такое доказать?
[24:12.600 --> 24:14.600]  Потому что слет вот действительно возникнет там.
[24:14.600 --> 24:16.600]  Так, ну понятно, в чем затык, да?
[24:18.600 --> 24:20.600]  Да.
[24:24.600 --> 24:26.600]  Чего?
[24:26.600 --> 24:28.600]  Нам вот для куна хватает вот это одно.
[24:28.600 --> 24:32.600]  Потому что кун говорит просто, можно ли от вершины В дойти до вершины Т.
[24:32.600 --> 24:34.600]  Все.
[24:34.600 --> 24:36.600]  Если нет, то нельзя будет никогда.
[24:36.600 --> 24:44.600]  А с другой стороны у нас, если мы из этой вершины сейчас не сделаем ребра просочетания, то в будущем оно никогда не появится.
[24:44.600 --> 24:48.600]  То есть оно может появиться только если мы из вершины В в явном виде запустили просочетание.
[24:48.600 --> 24:54.600]  Но так как в будущем этого пути никогда не появится, то как бы будущая удлиняющая цепь через эту вершину никогда не появится.
[24:54.600 --> 24:56.600]  Так. Не то чтобы это тут при чем, но вот, но по сути так.
[24:56.600 --> 25:00.600]  Ну то есть вывод простой. Из вершины В действительно запускать ДФС будет бессмысленно.
[25:00.600 --> 25:02.600]  Больше этого.
[25:02.600 --> 25:04.600]  А впрочем нам это даже не важно.
[25:04.600 --> 25:08.600]  Потому что мы говорили о том, что из каждой вершины имеет смысл запускать ДФС не более одного раза.
[25:08.600 --> 25:14.600]  Потому что если бы запустили ДФС, либо мы этот ДФС-просочетание нашли, тогда эта вершина уже вошла в прошлое.
[25:14.600 --> 25:16.600]  То есть мы не будем вовремя запустили ДФС.
[25:16.600 --> 25:18.600]  Ну в смысле стартовать ДФС не будем.
[25:18.600 --> 25:22.600]  А если мы сейчас запустили ДФС и не нашли просочетание, значит ДТ пути нет.
[25:22.600 --> 25:28.600]  Больше он никогда не появится, значит больше никогда из вершины В запускать ДФС не потребуется.
[25:28.600 --> 25:30.600]  Все.
[25:30.600 --> 25:32.600]  Так что нет, этого-то нам хватает.
[25:32.600 --> 25:34.600]  То есть это мы сейчас, конечно, в ответвление немножко пошли.
[25:34.600 --> 25:36.600]  То есть так просто.
[25:36.600 --> 25:40.600]  То есть если мы запустили ДФС и не нашли просочетание, то мы не будем запускать ДФС.
[25:40.600 --> 25:44.600]  А если мы запустили ДФС и не нашли просочетание, значит ДТ пути нет.
[25:44.600 --> 25:46.600]  То есть в ответвление немножко пошли.
[25:46.600 --> 25:48.600]  То есть так просто немножко почесались.
[25:48.600 --> 25:52.600]  Потому что вопрос, конечно, оказался вот такой теоретически интересный.
[25:52.600 --> 25:54.600]  Вот.
[25:54.600 --> 25:58.600]  Так что да, ладно, не будем поэтому заморачиваться.
[25:58.600 --> 26:02.600]  А вместо этого, значит, вернемся к просочетанию и пойдем дальше.
[26:02.600 --> 26:06.600]  Да. То есть соответственно алгоритм Куна доказали.
[26:06.600 --> 26:09.600]  Так, ну более того, да, на всякий случай допомним эту оптимизацию.
[26:09.600 --> 26:15.600]  Обычно Куна пишут так, что лучше, чем за О от ВЕ его оценить нельзя.
[26:15.600 --> 26:17.600]  Почему?
[26:17.600 --> 26:21.600]  Потому что чаще всего, когда вы запускаете ДФС за четыре вершины, вы зачищаете юзет.
[26:21.600 --> 26:25.600]  Ну чаще всего, да.
[26:25.600 --> 26:31.600]  Ну на всякий случай просто отметим, что если вы будете зачищать юзет только после удачных итераций,
[26:31.600 --> 26:37.600]  то тогда у вас ДФС будет работать не за О от ВЕ, то есть это Кун, а за О от Е на размер ответа.
[26:37.600 --> 26:39.600]  Понимаете, да?
[26:39.600 --> 26:41.600]  Чего?
[26:51.600 --> 26:55.600]  А, в смысле, зачищать юзет за единицу?
[26:55.600 --> 26:59.600]  Нет, тут фишка.
[26:59.600 --> 27:03.600]  Это вам и симпатически не поможет.
[27:03.600 --> 27:05.600]  Нет, понимаете, тут фишка.
[27:05.600 --> 27:09.600]  Это вам не поможет, потому что как бы у вас дело будет не только в зачистке,
[27:09.600 --> 27:14.600]  а дело будет еще, потому что зачистка сама вообще даже не за Е работает, а за В.
[27:14.600 --> 27:21.600]  А дело в том, что просто, допустим, вы запустили ДФС из вершины и не нашли из нее просочетания, да?
[27:21.600 --> 27:28.600]  Тогда, когда вы запускаете следующие вершины, то если вы зачистили юзет, то если вы не зачистили юзет,
[27:28.600 --> 27:33.600]  то вы не ходите в те вершины, которые ходил предыдущий ДФС, да?
[27:33.600 --> 27:37.600]  Потому что вы знаете, что там пути до Т уже нету, собственно, в этом идее.
[27:37.600 --> 27:42.600]  А так, если бы вы зачистили юзет, то вы бы по ним еще раз ходили, я симпатично ломается.
[27:42.600 --> 27:48.600]  А так получается, что до ближайшей итерации ДФС будет работать также, то есть в каждой вершине он будет не более чем один раз,
[27:48.600 --> 27:52.600]  поэтому суммарно эти итерации будут работать за В плюс Е.
[27:52.600 --> 27:57.600]  То есть, поэтому, да, зачистка юзета за О от единицы тут, собственно, не причем.
[27:57.600 --> 28:01.600]  Хотя, конечно, это тоже, ну, то есть это тоже, конечно, можно, да.
[28:01.600 --> 28:05.600]  Хотя, ну, в данном случае просто не сильно поможет.
[28:05.600 --> 28:07.600]  Вот.
[28:07.600 --> 28:15.600]  Так, ну, говоря, конечно, о просочетаниях, нельзя, конечно, не обсудить и связанное с просочетаниями вещи.
[28:15.600 --> 28:19.600]  Да, говорили, что занятие будет о потоках, но да.
[28:19.600 --> 28:22.600]  Так, ну, какие у нас вещи возникают?
[28:22.600 --> 28:24.600]  Так, так, так, так, так, так.
[28:24.600 --> 28:34.600]  Ну, первая вещь, конечно, возникает, это, конечно, поиски всяких независимых множеств и, минимально, и всяких покрывающих множеств.
[28:34.600 --> 28:36.600]  И вот тут действительно оказываются интересные вещи.
[28:36.600 --> 28:38.600]  Так, давайте посмотрим.
[28:38.600 --> 28:42.600]  Так, ну, для этого давайте приведем немножко буквок.
[28:43.600 --> 28:51.600]  Ну, давайте скажем, что π от g это размер максимального просочетания.
[28:56.600 --> 28:58.600]  Так, что еще должен сказать?
[28:58.600 --> 29:10.600]  τ от g это размер минимального вершинного покрытия.
[29:14.600 --> 29:16.600]  Так, ну, сразу вопрос.
[29:16.600 --> 29:18.600]  А что такое вершинное покрытие?
[29:18.600 --> 29:21.600]  Так, ну, вершина, да, вершинным покрытием.
[29:21.600 --> 29:26.600]  То есть, вершинное покрытие, давайте, ну, давайте, ладно, тут определение тогда напишем.
[29:26.600 --> 29:30.600]  То есть, в чем определение, можно написать вообще для произвольного вопроса.
[29:30.600 --> 29:37.600]  Пусть у вас g равно v, это там не, неориентированный граф.
[29:37.600 --> 29:39.600]  Абсолютно произвольный.
[29:39.600 --> 29:52.600]  Тогда, значит, у, такое подмножество v, это вершинное покрытие графа g.
[29:53.600 --> 30:05.600]  Если для любого ребра там какого-нибудь, давайте, ab лежащего в множестве ребер,
[30:05.600 --> 30:11.600]  оказывается, что a лежит v или b лежит v.
[30:15.600 --> 30:19.600]  Да, это вот формальное определение того, что такое вершинное покрытие.
[30:19.600 --> 30:23.600]  То есть, можно сказать, что, то есть, так, нет, чушь.
[30:23.600 --> 30:28.600]  Конечно, тут u, а то так формально чушь какая-то болотная.
[30:32.600 --> 30:38.600]  Так, ну и, конечно же, еще надо ввести братское определение про независимое множество.
[30:40.600 --> 30:43.600]  То есть, опять же, a.
[30:44.600 --> 30:47.600]  Нет, мы сократим себе немножко текст.
[30:49.600 --> 30:50.600]  Вот.
[30:53.600 --> 30:54.600]  Вот так сделаем.
[31:08.600 --> 31:14.600]  Вот, то есть, ну независимое множество говорит о том, что никакое ребро не соединяет,
[31:14.600 --> 31:17.600]  то есть, никакие две вершины u не соединены ребром.
[31:19.600 --> 31:20.600]  То есть, вот.
[31:29.600 --> 31:31.600]  Да, хорошо, да.
[31:44.600 --> 31:48.600]  Да, вот так нам в математику неожиданно проникает c++.
[31:49.600 --> 31:50.600]  Вот.
[31:51.600 --> 31:54.600]  Нет, понятно, да, формально тут должен был конъюнкции написать.
[31:54.600 --> 31:56.600]  Тут вот этот вот уголочек, вот этот вот, да.
[31:56.600 --> 31:59.600]  Ну, я думаю, тут все и так понятно.
[31:59.600 --> 32:00.600]  Да.
[32:00.600 --> 32:06.600]  Но независимое множество, конечно, хочется, да, мы его обозначаем обычно как альфа адже.
[32:06.600 --> 32:16.600]  Это будет размер максимального независимого множества.
[32:17.600 --> 32:19.600]  Так.
[32:21.600 --> 32:25.600]  Да, ну в принципе, да, вот так оказывается, если формально написать эти определения,
[32:25.600 --> 32:29.600]  казалось бы, да, то есть, вершинное покрытие, это когда вершины покрывают ребра, да,
[32:29.600 --> 32:31.600]  то есть, любое ребро зацеплено хоть вершиной, да.
[32:31.600 --> 32:35.600]  Независимое множество, это никакие две вершины не соединены ребром.
[32:35.600 --> 32:41.600]  Но выясняется, сразу возникает маленькое утверждение,
[32:41.600 --> 32:50.600]  которое говорит о том, что действительно у, значит, оказывается вершинное покрытие,
[32:52.600 --> 33:03.600]  покрытие тогда и только тогда, когда v без u независимое множество.
[33:11.600 --> 33:27.600]  Заметьте, кстати, это утверждение, эти определения сами по себе с двудольностью графа не связаны абсолютно никак.
[33:27.600 --> 33:29.600]  Обратите внимание.
[33:29.600 --> 33:32.600]  И более того, это утверждение тоже.
[33:34.600 --> 33:40.600]  Так, пока я тут это замечаю, уже стало понятно, почему это утверждение очевидно.
[33:40.600 --> 33:50.600]  Нет, ну не совсем одно и то же, конечно, но если я тут формально начну расписывать,
[33:50.600 --> 33:54.600]  то выяснится, что там в текстах будет отличаться практически пара символов.
[33:58.600 --> 34:08.600]  То есть, независимое множество, потому что фактически неверно, что a лежит в u и b лежит в u,
[34:08.600 --> 34:16.600]  то это что означает? Это означает, что a лежит в v без u или, соответственно, b лежит не без u.
[34:18.600 --> 34:26.600]  В данном случае тогда появится, что это означает, что у любого ребра либо a лежит в u, либо b лежит в u.
[34:26.600 --> 34:28.600]  Определение вершинного покрытия.
[34:28.600 --> 34:33.600]  Так, в общем-то, в одну сторону получили, в другую сторону, согласен, скучно хочется спать.
[34:33.600 --> 34:47.600]  Да, вот, кстати, маленькое приятное следствие заключается в том, что...
[34:49.600 --> 34:50.600]  Чего?
[34:53.600 --> 35:01.600]  Ну да, как бы это страшный сон войшника на экзамене.
[35:01.600 --> 35:07.600]  Просто он приходит на экзамен, а его сразу профессор отвечает и говорит, ну-ка, отвечай, к чему равно t-a-g, просто альфа-a-g?
[35:09.600 --> 35:13.600]  Давай быстро, вопрос элементарный, не знаешь? Все, два, все, вылетаешь.
[35:13.600 --> 35:17.600]  Да, давай, вылетай, так, все, вылетаешь из свистехи километров за 500, все, сразу.
[35:21.600 --> 35:22.600]  В общем, действительно, да.
[35:23.600 --> 35:25.600]  То есть, пока, да, то есть, действительно, да, вот.
[35:25.600 --> 35:27.600]  А так вообще страшная задача, да, посмотрите, дайте.
[35:27.600 --> 35:29.600]  А, или другой вариант.
[35:29.600 --> 35:37.600]  Да, вы там попадаете, да, то есть, вы пока попадаете в какую-то пирамиду, ищете там сокровище, и вот попадаете в какую-то, видимо, главную пещеру.
[35:37.600 --> 35:42.600]  И там вот, или там, или вход в главную пещеру, а там перед ней вот вопрос.
[35:42.600 --> 35:45.600]  Вот t-a-g плюс альфа-a-g равно вопрос.
[35:45.600 --> 35:57.600]  Нет, нет, нет, нет, если бы от Huawei. Нет, от Huawei челленджа такой не будет, потому что на эту задачу ответ известен.
[36:02.600 --> 36:05.600]  Хотя, нет, то есть, на эту задачу ответ известен.
[36:07.600 --> 36:13.600]  Нет, нет, Huawei челлендж, на самом деле, мог вам подсунуть задачу, дам какой-нибудь граф.
[36:15.600 --> 36:18.600]  И t-a-g равно, вот.
[36:21.600 --> 36:25.600]  Почему? Потому что в общем случае задача NP полная.
[36:26.600 --> 36:28.600]  Вот будет у вас сложность вычислений, вы это докажете.
[36:30.600 --> 36:37.600]  То есть, ну а NP полная, это означает, что как бы, как бы, у науки есть сильное подозрение, что за полимерное время это не решается в принципе.
[36:39.600 --> 36:41.600]  Да, ну или все банковские системы жутко ненадежны.
[36:42.600 --> 36:43.600]  Вот.
[36:48.600 --> 36:49.600]  Ну такое, да.
[36:50.600 --> 36:53.600]  Вот, то есть, произволь найти, то есть, известно лишь только одно.
[36:54.600 --> 37:01.600]  То есть, есть, конечно, такое общее утверждение о том, что, конечно же, p-a-g меньше либо равно, чем t-a-g.
[37:01.600 --> 37:10.600]  Ну как-то логично, да, потому что если мы рассмотрим максимальное присочетание, то, как бы, на каждом из этих ребер хотя бы по одной своей вершине быть должно, поэтому очевидно.
[37:12.600 --> 37:14.600]  Причем, да, в чем, будьте внимательны, не перепутайте.
[37:15.600 --> 37:16.600]  t-a-g является n по полной задачей.
[37:17.600 --> 37:26.600]  А найти максимальное присочетание не является, потому что существует там какой-то страшный алгоритм с кодовым названием g-a-t соцветий, который тоже z-v-e это находится.
[37:26.600 --> 37:27.600]  Присочетание вам найдет.
[37:28.600 --> 37:30.600]  То есть, присочетание найти можно, а вот t-a-g проблема.
[37:31.600 --> 37:36.600]  И альфа-г автоматически, ну как вы уже поняли, найти t-a-g и альфа-g это, в общем-то, задача близнецы.
[37:38.600 --> 37:39.600]  Вот.
[37:40.600 --> 37:41.600]  Ну а это если мы говорим в общем случае.
[37:44.600 --> 37:45.600]  Да, ну сразу скажем да.
[37:46.600 --> 37:51.600]  А может, хотя действительно, насколько легко привести пример, в котором t-a-g больше, чем t-a-g?
[37:51.600 --> 37:52.600]  Ну, чтобы строго больше было.
[37:53.600 --> 37:56.600]  Ну да, самое тупое, да, самое тупое, вот, да.
[37:57.600 --> 37:59.600]  То есть, t-a-g равно 1, t-a-g равно 2.
[38:00.600 --> 38:01.600]  Все просто.
[38:02.600 --> 38:03.600]  Вот.
[38:04.600 --> 38:09.600]  Но для нас с вами оказывается интересная, интересная уже мистическая теорема.
[38:11.600 --> 38:12.600]  Рискну, конечно, сейчас ищу.
[38:13.600 --> 38:17.600]  Но для нас с вами оказывается интересная, интересная уже мистическая теорема.
[38:20.600 --> 38:25.600]  Рискну, конечно, сейчас ошибиться, но ее, кажется, теперь можно еще пафосно назвать теорема Кёнига.
[38:26.600 --> 38:28.600]  Кёнига, да, все, не наврал.
[38:29.600 --> 38:30.600]  Теорема Кёнига.
[38:34.600 --> 38:38.600]  Если g равно ve двудолен.
[38:42.600 --> 38:47.600]  То, оказывается, p-a-g равно t-a-g.
[38:48.600 --> 38:53.600]  Ну и, ладно, я так добавлю от себя в скобочках, равно модуль v минус альфа-g.
[39:00.600 --> 39:01.600]  Да, вот такая теорема.
[39:02.600 --> 39:05.600]  В общем-то, доказывается она вполне себе конструктивно.
[39:06.600 --> 39:17.600]  То есть, по принципу, если вы уже нашли максимальное просочетание, то сейчас за 1 dfs вы найдете, собственно, и само верхнее покрытие такого же размера.
[39:20.600 --> 39:22.600]  Так, кто когда-нибудь, кстати, этим занимался?
[39:27.600 --> 39:28.600]  Ух ты, о, уже не все.
[39:29.600 --> 39:31.600]  Окей, ну давайте вспоминать, как же мы это быстро делали.
[39:31.600 --> 39:34.600]  Так, ну идея, оказывалось, очень, такой достаточно простой.
[39:37.600 --> 39:41.600]  Оказывалось, что, давайте, пум-пум-пум, допустим, мы нашли просочетание какое-то.
[39:42.600 --> 39:45.600]  Вот, эти геобромы как-то вот так вот ориентировали.
[39:46.600 --> 39:52.600]  Вот, теперь идея такая, запустим dfs, как всегда, из всех вершин, которые не покрыты просочетанием.
[39:53.600 --> 39:55.600]  На этот раз единый dfs из всех вершин.
[39:55.600 --> 39:58.600]  До каких-то вершин мы дойдем, вот как-то вот так.
[40:01.600 --> 40:03.600]  То есть, до каких-то дойдем, до каких-то не дойдем.
[40:04.600 --> 40:08.600]  Вот, допустим, мы вот до этих вершин, получается, dfs дошел.
[40:13.600 --> 40:14.600]  Нет.
[40:14.600 --> 40:17.600]  Нет, мы допускаем только из вершин левой доли, внимание, да, это важно.
[40:18.600 --> 40:23.600]  Да, мы запускаем именно из вершин левой доли, не покрытых просочетанием.
[40:25.600 --> 40:28.600]  То есть, поэтому получается, что до каких-то вершин мы дошли.
[40:29.600 --> 40:35.600]  Мы эти вершины будем означать l+, и в левой доле мы будем означать l+.
[40:36.600 --> 40:39.600]  Поэтому получается, что до каких-то вершин мы дошли.
[40:40.600 --> 40:45.600]  Мы эти вершины будем означать l+, и в левой доле, и r+.
[40:50.600 --> 40:52.600]  По ребрам, по тем же, которые были.
[40:53.600 --> 41:01.600]  То есть, по ребрам, которые ориентированы вправо, если ребро не из просочетания, и ориентированы влево, если ребра покрыта.
[41:02.600 --> 41:04.600]  Ну, то есть, по сути, в той же самой остаточной сети.
[41:06.600 --> 41:11.600]  Да, l+, здесь, значит, это вот l+, и это r+, и r+, вот так.
[41:12.600 --> 41:14.600]  Это я тоже помечу как l+, это я тоже помечу как r+.
[41:15.600 --> 41:19.600]  Остальные вершины я помечу как, естественно, l- и r-.
[41:24.600 --> 41:25.600]  Теперь внимание, вопрос.
[41:26.600 --> 41:30.600]  Как же мне теперь найти покрывающее множество хорошего размера?
[41:33.600 --> 41:34.600]  Как же это сделать?
[41:35.600 --> 41:40.600]  Почти.
[41:41.600 --> 41:43.600]  Да, l- и r+.
[41:44.600 --> 41:45.600]  Да, запомнить очень просто.
[41:46.600 --> 41:51.600]  Надо брать те множества, ну, потому что очевидно, что нам не интересны вершины, которые не из просочетания.
[41:54.600 --> 41:56.600]  Вот, кстати, давайте на эту тему сразу подумаем.
[41:57.600 --> 42:02.600]  А могут ли в r+, быть вершины из просочетания?
[42:03.600 --> 42:05.600]  Не из просочетания, точнее.
[42:06.600 --> 42:08.600]  Ну, вершины, ну вот, у нас есть просочетания.
[42:09.600 --> 42:10.600]  Максимальное просочетание, которое мы нашли.
[42:11.600 --> 42:13.600]  Да, мы это поворачиваем с максимальным просочетанием, напоминаю.
[42:14.600 --> 42:19.600]  Спрашивается, могут ли в r+, оказаться вершины не из просочетания?
[42:19.600 --> 42:25.600]  Ну, да.
[42:34.600 --> 42:35.600]  Да, даже можно без илья.
[42:36.600 --> 42:39.600]  Можно просто сказать, что dfs мы запускали из вершин левой доли, не покрытая просочетанием.
[42:40.600 --> 42:47.600]  Если мы дошли до вершины правой доли, не покрытой просочетанием, значит мы нашли путь из какой-то вершины левой доли, не покрытой просочетанием.
[42:47.600 --> 42:50.940]  не покрытой пресочетанием, вершину правой доли не покрытой пресочетанием.
[42:50.940 --> 43:02.140]  В науке такой путь называется удлиняющая цепь, все, вот, да, поэтому в R плюсе у нас вершин не из пресочетания нету,
[43:02.140 --> 43:11.440]  а вот в L плюсе вершин не из пресочетания вполне себе может быть, поэтому тут берем L минус, тут R плюс.
[43:11.440 --> 43:16.440]  Но остается только доказать, ну скучно, но надо проработать.
[43:16.440 --> 43:26.440]  Вот, значит, соответственно, как теперь остается только сделать какие-то технические действия.
[43:26.440 --> 43:31.440]  Так, ну, во-первых, докажем, что это покрывающее множество.
[43:31.440 --> 43:36.440]  Ну, действительно, как оно может быть непокрывающее?
[43:36.440 --> 43:41.440]  Как оказаться, что у нас есть какое-то ребро, соединяющее R плюс, R минус?
[43:41.440 --> 43:44.440]  Спрашивается, в какую сторону смотрит это ребро?
[43:44.440 --> 43:49.440]  Либо в эту, либо в эту.
[43:49.440 --> 43:51.440]  А в чем тупой случай?
[43:51.440 --> 43:58.440]  Ну, вот этого такого быть не может, ну, как-то вершина ребра не может вести из вершины покрытой DFS, вершины не покрыты DFS, да?
[43:58.440 --> 44:00.440]  Ну, тупо.
[44:00.440 --> 44:07.440]  Вот здесь уже не тривиальнее. С точки зрения теории ориентированных графов такое, в принципе, бывает.
[44:07.440 --> 44:17.440]  А в чем же проблема?
[44:17.440 --> 44:27.440]  А вот почему такого случая быть не может?
[44:27.440 --> 44:36.440]  Да, совершенно верно. То есть фишка в том, что, да, можно сформулировать еще по-другому, что в эту вершину иначе, как по этому ребру, попасть нельзя в принципе.
[44:36.440 --> 44:45.440]  То есть DFS из нее не запускался, как стартово, а прийти он в нее мог только по этому ребру, потому что у нас в одну вершину одно ребро сочетание.
[44:45.440 --> 44:51.440]  Тогда получается, что если мы в эту вершину пришли, то и в этой вершине должны были быть.
[44:51.440 --> 44:57.440]  Вот. И здесь мы уже пользуемся тем, что мы тут с парасочетанием каким-то работаем. Отлично.
[44:57.440 --> 45:01.440]  Значит, мы показали, что это множество действительно покрывающее.
[45:01.440 --> 45:07.440]  Остается только убедиться в том, что его размер равен в точности размеру парасочетания.
[45:07.440 --> 45:09.440]  Как в этом убедиться?
[45:09.440 --> 45:17.440]  Ну, план очень простой. Надо убедиться, во-первых, что, как мы уже ранее увидели, что все эти вершины из парасочетания...
[45:17.440 --> 45:21.440]  Ну, R плюс из парасочетания мы уже, наверное, рассказали почему.
[45:21.440 --> 45:25.440]  А почему эти все вершины из парасочетания?
[45:31.440 --> 45:34.440]  Да, все еще проще.
[45:34.440 --> 45:41.440]  Да, просто по определению DFS, который запускался принудительно из всех вершин, не из парасочетания.
[45:41.440 --> 45:44.440]  Все. Поэтому да.
[45:44.440 --> 45:48.440]  Поэтому да. Все это из парасочетания остается убедиться только в одном.
[45:48.440 --> 45:54.440]  Теперь остается только доказать, что на каждом из ребер парасочетания взята ровно одна из этих вершин.
[46:00.440 --> 46:01.440]  Почему?
[46:01.440 --> 46:09.440]  Нет, пока мы получили только что у нас есть покрывающее множество, и мы получили, что все вершины лежат на парасочетании.
[46:12.440 --> 46:15.440]  Да, такое вот может быть.
[46:19.440 --> 46:21.440]  А это...
[46:21.440 --> 46:24.440]  А мы еще этого не доказали, если что.
[46:31.440 --> 46:34.440]  Ну, как минимум, да, безусловно.
[46:35.440 --> 46:38.440]  Нет, правильно.
[46:38.440 --> 46:40.440]  Нет, ну хорошо, да, давайте, да.
[46:40.440 --> 46:48.440]  Можно сразу сказать, что да, что как минимум на каждом, так как это покрывающее множество, то на каждом из ребер парасочетания хотя бы одна вершина есть.
[46:48.440 --> 46:52.440]  Да, потому что api adj как минимум tau adj, это правда.
[46:52.440 --> 46:54.440]  Но мы хотим доказать равенство.
[46:54.440 --> 46:58.440]  Но для этого нам достаточно доказать, что этих вершин ровно одна, а не ноль.
[46:58.440 --> 47:03.440]  Но с другой стороны, что значит, что на ребре парасочетания мы взяли и эту вершину, и эту вершину?
[47:03.440 --> 47:10.440]  Это означает, что эта вершина должна быть из R+, а эта вершина из L-.
[47:10.440 --> 47:16.440]  То есть опять у нас ребро идет из вершины, посещенной DFS, в вершину, не посещенной DFS.
[47:16.440 --> 47:18.440]  Не бывает.
[47:24.440 --> 47:29.440]  Нет, мы еще не доказали, что их размеры равны. Мы это только что сделали.
[47:29.440 --> 47:32.440]  Значит, еще раз давайте, план доказательства такой.
[47:32.440 --> 47:37.440]  Сначала мы вот здесь доказали, что это вообще покрывающее множество.
[47:38.440 --> 47:46.440]  Потом мы доказали, что все эти вершины лежат на парасочетании.
[47:50.440 --> 47:57.440]  Потому что все вершины L- лежат на парасочетании, потому что у нас из всех вершин не есть парасочетания в L, мы просто запускали DFS принудительно.
[47:57.440 --> 48:00.440]  А в R+, все вершины в парасочетании.
[48:00.440 --> 48:07.440]  Потому что... siitä положим, что у вас какая-то вершина R+, такая как это plays, посещена DFS, не есть парасочетания.
[48:07.440 --> 48:17.440]  Значит, мы нашли какой-то путь из вершины левой доли и непокрытой, вершину правой доле не покрыта парасочетанием, удлиняющая цепь.
[48:17.440 --> 48:19.440]  Ура!
[48:19.440 --> 48:22.440]  Значит все эти вершины есть парасочетания.
[48:22.440 --> 48:28.160]  финалочка остается только доказать, что на каждом ребре просочетания выбрана ровно одна вершина.
[48:28.160 --> 48:36.320]  Вот, ну на самом деле да, то есть мы доказываем, что двух вершин выбрать быть не может,
[48:36.320 --> 48:42.080]  ну формально, но с другой стороны заметим, что нуля вершин быть не может просто по определению
[48:42.080 --> 48:48.480]  покрывающего множество. Даже не потому, что там p i j меньше либо равно чего-то там,
[48:48.480 --> 48:55.800]  а просто, что если ноль, значит это не покрывающее множество. Так что автоматически доказательство
[48:55.800 --> 49:08.520]  получено, да, а по определению понятие покрывающее множество. Мы же уже доказали,
[49:08.520 --> 49:13.080]  что это покрывающее множество, значит на каждом ребре, даже не только просочетания,
[49:13.080 --> 49:25.960]  просто на каждом. Вот, так что вот такая красота. Вот, так что вот такая вот надежность. Так,
[49:25.960 --> 49:35.800]  вот, ну и как вы уже догадываетесь, альфа j конечно берется как l плюс или l means.
[49:35.800 --> 49:48.160]  Да, так что да, ну в принципе да, странно, да, так что вроде доказали. Нет, странно,
[49:48.160 --> 49:52.840]  правда судя по вопросам, вы дикают ощущение, что вы просто выучивали, что берем вот это и не
[49:52.840 --> 50:01.240]  паримся. Да, за что? Нет, ну просто как по мне, тут как раз-то случай, когда если вы понимаете
[50:01.240 --> 50:05.640]  доказательства, то как бы я сам этого не помню. Я как бы сейчас там трачу 5 секунд всегда на то,
[50:05.640 --> 50:21.880]  чтобы просто быстро вывести. Так, ну в трансляции, ну в трансляции. Нет, если бы вторая бага была,
[50:21.880 --> 50:42.880]  я бы всего не угадал. Ну да, нет, ну тут по ситуации, что вам надо, мало ли. Аккуратно на сэмплах,
[50:42.880 --> 50:59.040]  ну да, нет, в данном случае да, конечно на сэмплах скорее всего будет. Ну ладно, это уже нет,
[50:59.040 --> 51:05.440]  тут тоже да, с инфинити конечно, да, в чем главное, в чем как бы еще подлость еще финала, кстати,
[51:05.440 --> 51:08.760]  как вы уже могли убедиться, заключалось в том, что вам в тестивной системе на финале не сообщают
[51:08.760 --> 51:17.080]  о каком тестива. Почему елки-палки потратили полтора часа на чемпионатку в инфините,
[51:17.080 --> 51:27.600]  потому что им не сказали, что ва на тесте из условия. Так всегда было. Чего? Ну я не помню,
[51:27.600 --> 51:36.920]  но есть подозрение, что там на тесте из условия инфинити быть могло. Ну вот да, ну да, так нет,
[51:36.920 --> 51:43.880]  но это из цикла такое бывает, ничего не поделаешь. Вот, то есть нет, бывает вообще всякое, знаете,
[51:43.880 --> 51:51.080]  у нас, пока я тут стираю, самая подлая ситуация была когда-то, в фитрозаводский мы нагрелись,
[51:51.080 --> 51:55.080]  когда мы там написали какую-то задачу, получили VA, я ее честно там два с половиной часа дебарил.
[51:55.080 --> 51:59.640]  Потом выяснилось, что оказывается по правилам, значит по правилам американских чекеров,
[51:59.640 --> 52:04.680]  оказывается, если бы в какой-то строчке вывели лишний пробел после числа, то это автоматически VA.
[52:04.680 --> 52:13.200]  Потому что по еще более старым правилам, оказывается, лишние пробелы засчитываться не
[52:13.200 --> 52:20.440]  должны. То есть как потом Старк сказал, что вот мы, да, то есть да, это конечно у нас сейчас,
[52:20.440 --> 52:24.400]  конечно, такое уже не, там на тот момент уже в России такое было не по понятиям, но как бы
[52:24.400 --> 52:32.240]  американцы привезли такие чекеры, мы приняли решение, приняли решение это, то есть здесь оставить
[52:32.240 --> 52:36.000]  без изменений, потому что вот, извините, формально в правилах такое написано было,
[52:36.000 --> 52:42.720]  но это было в 2012 году, если что или 2013, то есть сейчас уже такого нет, сейчас уже даже в правилах
[52:42.720 --> 52:48.080]  финала написано, что там лишние пробелы нормально, более того, там infinity можно было и капсом вывести
[52:48.080 --> 52:52.720]  даже, а более того, можно даже было чередовать, то есть там прям принудительно сказано, что все
[52:52.720 --> 52:58.720]  подобные вещи там, это регистры нечувствительные должны быть. Вот, то есть поэтому, поэтому сейчас
[52:58.720 --> 53:03.600]  с этим не заморачивайтесь, но вот, но какие-то вот такие подлянки были, но вот с инфинити вот,
[53:03.600 --> 53:16.880]  ну что делать, но вот, но тут вот как бы ничего не поделаешь, но вот это, это картинка называется,
[53:16.880 --> 53:25.520]  вот так случилось, так произошло, вот, ладно, что еще про прочитание надо знать, так, ну кое-что
[53:25.520 --> 53:33.920]  конечно знать надо, так, какие у нас еще теории, но вот, вот, да, но перед, ну перед дилвертом надо
[53:33.920 --> 53:38.320]  еще дойти, потому что нет, на дилверт еще надо дойти, то есть да, я понимаю, что я, конечно,
[53:38.320 --> 53:42.480]  читаю абсолютно стандартную лекцию по про сочетаниям, там, которую вам, наверное, уже читали
[53:42.480 --> 53:54.320]  много раз, но тем не менее, нет, то почему, нет, ну не знаю, как бы тут сначала, как вспомнить,
[53:54.320 --> 54:01.360]  нет, потому что нет, дальше возникает еще даже не дилверт, а возникает на самом деле более веселая
[54:01.360 --> 54:08.960]  задача, задача называется покрытие ориентированного графа путями, то есть представить себе ситуацию,
[54:08.960 --> 54:17.920]  дан, ориентированный, но при этом ациклический граф, вот, ну какая-то вот такая ситуация,
[54:18.880 --> 54:31.520]  значит очень хочется все вершины этого графа покрыть путями, ну, например, вот таким вот каким-то образом,
[54:31.520 --> 54:45.760]  да, пути должны просто быть простыми, да, да, и, да, и пути должны вершинно не пересекаться,
[54:45.760 --> 54:53.280]  спрашивается, какое минимальное количество путей вы можете найти, желательно такие пути найти.
[54:53.280 --> 55:07.520]  Так, ой, так, сейчас прошу прощения.
[55:07.520 --> 55:37.520]  А он же покрыт именно ребра или вершины, вершины, вершины, конечно, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да,
[55:37.520 --> 55:46.160]  так вот.
[55:46.160 --> 55:50.080]  Важно, чтобы пути простые, чтобы... Но чтобы
[55:50.080 --> 55:55.200]  через какие-то лишние петли не бегали.
[55:55.200 --> 56:03.400]  Ну, я боюсь случаи не дага,
[56:03.400 --> 56:06.880]  то решение, которое у нас будет, будут циклы.
[56:07.520 --> 56:09.520]  Так, ну давайте.
[56:09.520 --> 56:11.520]  А в чем проблема петель?
[56:11.520 --> 56:13.520]  А, ну проблема.
[56:13.520 --> 56:15.520]  А, стоп.
[56:15.520 --> 56:17.520]  А, ни в чем проблема петель.
[56:17.520 --> 56:19.520]  В циклическом графе в общем-то
[56:19.520 --> 56:21.520]  непростых путей не бывает.
[56:21.520 --> 56:23.520]  Кстати.
[56:23.520 --> 56:25.520]  Так, ну давайте ладно.
[56:25.520 --> 56:27.520]  Чтобы понять, какие проблемы будут в циклическом графе,
[56:27.520 --> 56:29.520]  на самом деле давайте разберем решение
[56:29.520 --> 56:31.520]  для циклического графа.
[56:31.520 --> 56:33.520]  А решение возникает простое.
[56:33.520 --> 56:35.520]  Вот допустим у нас эти вершины A, B, C, D, E.
[56:35.520 --> 56:37.520]  А, B, C, D, E, F, G.
[56:37.520 --> 56:39.520]  Вот немецкие когда учили.
[56:39.520 --> 56:41.520]  A, B, C, D, E, F, G.
[56:41.520 --> 56:43.520]  Вот это все.
[56:43.520 --> 56:45.520]  G, H, J, K, L, M, N, O, P.
[56:47.520 --> 56:49.520]  Вот.
[56:49.520 --> 56:51.520]  Совершенно неожиданно выясняется,
[56:51.520 --> 56:53.520]  что надо составить
[56:53.520 --> 56:55.520]  по этому графу двудольный граф.
[56:55.520 --> 56:57.520]  В чем относительно
[56:57.520 --> 56:59.520]  неожиданным способом.
[57:01.520 --> 57:03.520]  То есть я именно хочу сказать,
[57:03.520 --> 57:05.520]  что в каждой доле вершин в так же,
[57:05.520 --> 57:07.520]  сколько в исходном графе.
[57:07.520 --> 57:09.520]  Более того, мы и будем называть
[57:09.520 --> 57:11.520]  H, B, C, D, E и так далее.
[57:11.520 --> 57:19.520]  И тут A, B, C, D, E, F, E.
[57:19.520 --> 57:21.520]  Вот это вся радость.
[57:21.520 --> 57:23.520]  И оказывается, что если у нас есть ребро,
[57:23.520 --> 57:25.520]  допустим, из AB,
[57:25.520 --> 57:27.520]  то мы здесь проводим ребро
[57:27.520 --> 57:29.520]  из A, B,
[57:29.520 --> 57:31.520]  но не наоборот.
[57:31.520 --> 57:33.520]  Вот.
[57:33.520 --> 57:35.520]  Дальше, что у нас там? Из A в C.
[57:35.520 --> 57:37.520]  Ну, пожалуйста, A штрих, C два штриха.
[57:37.520 --> 57:39.520]  Что там дальше? Ну, там дальше получается
[57:39.520 --> 57:41.520]  B, D.
[57:41.520 --> 57:43.520]  Там из C.
[57:43.520 --> 57:45.520]  Ой, тут уже побольше.
[57:45.520 --> 57:47.520]  Так, что у нас тут?
[57:47.520 --> 57:49.520]  C, D, C, E, C, F.
[57:49.520 --> 57:51.520]  Там из D у нас получается
[57:53.520 --> 57:55.520]  куда-то в G и в E.
[57:55.520 --> 57:57.520]  Ну, в общем, и так далее.
[57:57.520 --> 57:59.520]  Я дорисовывать не буду.
[57:59.520 --> 58:01.520]  Так вот, чем нам это поможет?
[58:01.520 --> 58:03.520]  Теперь мистический факт.
[58:03.520 --> 58:05.520]  Если мы рассмотрим ребра,
[58:05.520 --> 58:07.520]  которые составляют это покрытие путями,
[58:07.520 --> 58:09.520]  то я утверждаю, что
[58:09.520 --> 58:11.520]  соответствующие ребра
[58:11.520 --> 58:13.520]  в твудольном графе будут
[58:13.520 --> 58:15.520]  образовывать просто по рассочетанию.
[58:17.520 --> 58:19.520]  Почему?
[58:19.520 --> 58:21.520]  Да потому что
[58:21.520 --> 58:23.520]  эти цепи обладают таким свойством,
[58:23.520 --> 58:25.520]  что в каждую вершину
[58:25.520 --> 58:27.520]  входит не более чем одного ребра
[58:27.520 --> 58:29.520]  из цепей и выходит не более
[58:29.520 --> 58:31.520]  чем одного из ребра из цепей.
[58:31.520 --> 58:33.520]  Вернее, можно рассмотреть покрытие
[58:33.520 --> 58:35.520]  с таким же количеством детей,
[58:35.520 --> 58:37.520]  что это.
[58:37.520 --> 58:39.520]  Ну, не совсем.
[58:39.520 --> 58:41.520]  Это называется...
[58:41.520 --> 58:43.520]  Если у вас есть набор
[58:43.520 --> 58:45.520]  покрывающих путей из карабер,
[58:45.520 --> 58:47.520]  то в этом графе существует
[58:47.520 --> 58:49.520]  просочетание из карабер.
[58:51.520 --> 58:53.520]  Да, конечно.
[58:53.520 --> 58:55.520]  Более того, верное обратное.
[58:55.520 --> 58:57.520]  Если я возьму просочетание,
[58:57.520 --> 58:59.520]  то здесь это просочетание приведет
[58:59.520 --> 59:01.520]  к покрытию путями.
[59:01.520 --> 59:03.520]  Приведет это к набору путей,
[59:03.520 --> 59:05.520]  которые вершины не пересекаются.
[59:05.520 --> 59:07.520]  Они могут не цеплять какую-то вершину,
[59:07.520 --> 59:09.520]  но это означает, что мы просто возьмем
[59:09.520 --> 59:11.520]  путь, состоящий из одной вершины.
[59:11.520 --> 59:13.520]  Да, кстати, если уж говорить о циклических
[59:13.520 --> 59:15.520]  графах, то в циклических графах
[59:15.520 --> 59:17.520]  это будет называться покройте граф
[59:17.520 --> 59:19.520]  минимальным количеством путей и циклов.
[59:19.520 --> 59:21.520]  Потому что в циклическом графе
[59:21.520 --> 59:23.520]  может возникнуть...
[59:23.520 --> 59:25.520]  То есть каждый путь вполне себе
[59:25.520 --> 59:27.520]  может оказаться циклом,
[59:27.520 --> 59:29.520]  потому что цикл тоже будет удовлетворять
[59:29.520 --> 59:31.520]  вот этим условиям, что в каждую вершину
[59:31.520 --> 59:33.520]  входит не более чем одно ребро
[59:33.520 --> 59:35.520]  и выходит не более чем одно.
[59:35.520 --> 59:37.520]  Да, граф, естественно, должен быть не ориентирован.
[59:37.520 --> 59:39.520]  Важно, что граф должен быть хоть циклическим,
[59:39.520 --> 59:41.520]  но ориентированным.
[59:41.520 --> 59:43.520]  Вот.
[01:00:05.520 --> 01:00:07.520]  А зачем? Нет, этого не нужно.
[01:00:07.520 --> 01:00:09.520]  С циклическими проблемом будет.
[01:00:09.520 --> 01:00:11.520]  Нет, зачем? Потому что заметим,
[01:00:11.520 --> 01:00:13.520]  сколько у нас в графе путей.
[01:00:13.520 --> 01:00:15.520]  Путей в графе будет ровно
[01:00:15.520 --> 01:00:17.520]  столько же, в сколько
[01:00:17.520 --> 01:00:19.520]  вершин не входит ребро.
[01:00:21.520 --> 01:00:23.520]  Ну, потому что на каждом
[01:00:23.520 --> 01:00:25.520]  пути такая вершина ровно одна.
[01:00:25.520 --> 01:00:27.520]  Это начало.
[01:00:27.520 --> 01:00:29.520]  То есть это получается,
[01:00:29.520 --> 01:00:31.520]  что чем меньше мы хотим
[01:00:31.520 --> 01:00:33.520]  путей, тем меньше должно быть вершин,
[01:00:33.520 --> 01:00:35.520]  в которые ребра не входят.
[01:00:35.520 --> 01:00:37.520]  А это означает, что
[01:00:37.520 --> 01:00:39.520]  тем больше у нас вершин, в которые ребра входят,
[01:00:39.520 --> 01:00:41.520]  тем лучше.
[01:00:41.520 --> 01:00:43.520]  То есть получается максимальное
[01:00:43.520 --> 01:00:45.520]  просочетание даст нам минимейшие путей.
[01:00:47.520 --> 01:00:49.520]  Да, в циклическом графе, кстати, это не сработает.
[01:00:51.520 --> 01:00:53.520]  Потому что в циклическом графе у нас
[01:00:53.520 --> 01:00:55.520]  можно будет найти эти
[01:00:55.520 --> 01:00:57.520]  покрывающие пути циклы с минимальным
[01:00:57.520 --> 01:00:59.520]  количеством ребер.
[01:00:59.520 --> 01:01:01.520]  Точнее, наоборот, максимальным количеством ребер.
[01:01:01.520 --> 01:01:03.520]  Но количество путей
[01:01:03.520 --> 01:01:05.520]  это не максимизирует.
[01:01:07.520 --> 01:01:09.520]  Там будет немножко другое.
[01:01:15.520 --> 01:01:17.520]  Он даст вам следующее
[01:01:17.520 --> 01:01:19.520]  найти покрытие...
[01:01:23.520 --> 01:01:25.520]  Надо найти,
[01:01:25.520 --> 01:01:27.520]  видимо, набор независимых
[01:01:27.520 --> 01:01:29.520]  путей и циклов.
[01:01:29.520 --> 01:01:31.520]  Вершин на независимых.
[01:01:31.520 --> 01:01:33.520]  Так, чтобы в них участвовало как можно больше ребер.
[01:01:37.520 --> 01:01:39.520]  Получается так.
[01:01:39.520 --> 01:01:41.520]  То есть связано ли это
[01:01:41.520 --> 01:01:43.520]  как-то с минимальностью количества путей?
[01:01:43.520 --> 01:01:45.520]  Лично мне с лету непонятно.
[01:01:47.520 --> 01:01:49.520]  Может как-то и связано.
[01:01:53.520 --> 01:01:55.520]  Так что, в принципе, да.
[01:01:55.520 --> 01:01:57.520]  Как-то можно
[01:01:57.520 --> 01:01:59.520]  задачку придумать, я не знаю.
[01:01:59.520 --> 01:02:01.520]  Такую маленькую, подлинку.
[01:02:03.520 --> 01:02:05.520]  Нет, знаете, вот такие мелкие
[01:02:05.520 --> 01:02:07.520]  надо придумать задачи.
[01:02:07.520 --> 01:02:09.520]  Потому что я недавно
[01:02:09.520 --> 01:02:11.520]  прорешивали в сервис с парой ребят
[01:02:11.520 --> 01:02:13.520]  2000, какого-то 21-го года,
[01:02:13.520 --> 01:02:15.520]  по-моему. И там
[01:02:15.520 --> 01:02:17.520]  седьмая задача
[01:02:17.520 --> 01:02:19.520]  на сервисе должна быть
[01:02:19.520 --> 01:02:21.520]  сложная задача.
[01:02:21.520 --> 01:02:23.520]  Но, оказывается, если вы изучали теорию
[01:02:23.520 --> 01:02:25.520]  про компоненты вершины двух связанности,
[01:02:25.520 --> 01:02:27.520]  задача становится простым упражнением.
[01:02:27.520 --> 01:02:29.520]  Просто вот элементарнейшим, который в ДЗ
[01:02:29.520 --> 01:02:31.520]  можно давать. Практически.
[01:02:35.520 --> 01:02:37.520]  Да.
[01:02:39.520 --> 01:02:41.520]  Нет.
[01:02:41.520 --> 01:02:43.520]  А вот выясняется, что нет.
[01:02:47.520 --> 01:02:49.520]  Да? Серьезно?
[01:02:49.520 --> 01:02:51.520]  Нет.
[01:02:53.520 --> 01:02:55.520]  Может 22-я?
[01:02:55.520 --> 01:02:57.520]  Не помню.
[01:02:57.520 --> 01:02:59.520]  Может и DX.
[01:03:01.520 --> 01:03:03.520]  Но нет.
[01:03:03.520 --> 01:03:05.520]  Про доставщика? Да.
[01:03:05.520 --> 01:03:07.520]  Но это как-то да. Но причем это, главное,
[01:03:07.520 --> 01:03:09.520]  так достаточно странно. Видимо, компоненты вершины
[01:03:09.520 --> 01:03:11.520]  двух связанности считается сложной теорией.
[01:03:11.520 --> 01:03:13.520]  Может так, к счастью, потому что кто-то...
[01:03:13.520 --> 01:03:15.520]  Потому что ходили какие-то случаи, что если вы будете
[01:03:15.520 --> 01:03:17.520]  по Emax изучать эту теорию, то у вас будет очень мутное
[01:03:17.520 --> 01:03:19.520]  представление о том, что компоненты вершины
[01:03:19.520 --> 01:03:21.520]  двух связанности.
[01:03:27.520 --> 01:03:29.520]  Не, вот это и прикол,
[01:03:29.520 --> 01:03:31.520]  что, видимо, это является не тривиальным знанием.
[01:03:33.520 --> 01:03:35.520]  То есть если у вас просто есть понятие вершины,
[01:03:35.520 --> 01:03:37.520]  есть понятие вершины, ну да, наверное, там...
[01:03:39.520 --> 01:03:41.520]  Ну я не знаю, может я набрал, я не знаю.
[01:03:41.520 --> 01:03:43.520]  Может это...
[01:03:43.520 --> 01:03:45.520]  Вот прям по вам видно, что вы устали, вы еще не...
[01:03:45.520 --> 01:03:47.520]  Потому что, конечно, я думаю, месяц назад
[01:03:47.520 --> 01:03:49.520]  вы бы уже достали телефон и загуглили вопрос.
[01:03:51.520 --> 01:03:53.520]  Но нет.
[01:03:53.520 --> 01:03:55.520]  Так.
[01:03:55.520 --> 01:03:57.520]  Нет, ну я не знаю, просто мог
[01:03:57.520 --> 01:03:59.520]  с Emax, конечно, и упустить этот вопрос.
[01:03:59.520 --> 01:04:01.520]  Хотя...
[01:04:01.520 --> 01:04:03.520]  Ну вот.
[01:04:03.520 --> 01:04:05.520]  Так что это...
[01:04:05.520 --> 01:04:07.520]  Ну ладно, пока там гуглите, значит, соответственно,
[01:04:07.520 --> 01:04:09.520]  с этой задачей в любом случае разобрались.
[01:04:09.520 --> 01:04:11.520]  Так.
[01:04:11.520 --> 01:04:13.520]  Что там у нас еще есть?
[01:04:13.520 --> 01:04:15.520]  Нет, ну там да.
[01:04:15.520 --> 01:04:17.520]  Да, дальше мог бы идти там какой-нибудь
[01:04:17.520 --> 01:04:19.520]  это веселый прикол.
[01:04:19.520 --> 01:04:21.520]  В духе там дан какой-нибудь граф,
[01:04:21.520 --> 01:04:23.520]  найдите... там дан...
[01:04:23.520 --> 01:04:25.520]  Дан какой-нибудь граф, найдите максимальное
[01:04:25.520 --> 01:04:27.520]  количество... там...
[01:04:27.520 --> 01:04:29.520]  Найдите максимальное количество ребер на не пересекающихся
[01:04:29.520 --> 01:04:31.520]  путей, значит,
[01:04:31.520 --> 01:04:33.520]  идущих из SFT.
[01:04:33.520 --> 01:04:35.520]  Да.
[01:04:35.520 --> 01:04:37.520]  И там будет
[01:04:37.520 --> 01:04:39.520]  мистическая математическая теория.
[01:04:39.520 --> 01:04:41.520]  Там максимальное количество этих путей
[01:04:41.520 --> 01:04:43.520]  равно минимальному количеству ребер,
[01:04:43.520 --> 01:04:45.520]  которые надо удалить из РАФа, чтобы от СДТ
[01:04:45.520 --> 01:04:47.520]  пути не было.
[01:04:47.520 --> 01:04:49.520]  Ну да.
[01:04:49.520 --> 01:04:51.520]  Нет, в этом
[01:04:51.520 --> 01:04:53.520]  и прикол. Там просто юмор был,
[01:04:53.520 --> 01:04:55.520]  что в том, что как бы теория формулируется
[01:04:55.520 --> 01:04:57.520]  абсолютно математически.
[01:04:57.520 --> 01:04:59.520]  То есть как ее доказывать вопрос,
[01:04:59.520 --> 01:05:01.520]  ну если вы знаем вот форда Фолкерсона, то как бы это
[01:05:01.520 --> 01:05:03.520]  просто элементарная переформулировка.
[01:05:03.520 --> 01:05:05.520]  Вот, то есть можно было там
[01:05:05.520 --> 01:05:07.520]  с этого поржать, можно было про вершины еще там
[01:05:07.520 --> 01:05:09.520]  что-то поржать там.
[01:05:09.520 --> 01:05:11.520]  Ну, ребер на не пересекающихся.
[01:05:11.520 --> 01:05:13.520]  Если вершины не пересекающиеся,
[01:05:13.520 --> 01:05:15.520]  то нам бы пришлось вершины удалять.
[01:05:17.520 --> 01:05:19.520]  Да, то есть там это пришлось бы раздваивать
[01:05:19.520 --> 01:05:21.520]  вершины, и может быть у ребер там еще
[01:05:21.520 --> 01:05:23.520]  ставить профессиональную способность плюс бесконечность
[01:05:23.520 --> 01:05:25.520]  на всякий пожарный, да.
[01:05:25.520 --> 01:05:27.520]  В этом смысле, да.
[01:05:27.520 --> 01:05:29.520]  Ну ладно, мы сейчас там, ладно, юмором этим
[01:05:29.520 --> 01:05:31.520]  заниматься не будем, а вместо этого
[01:05:31.520 --> 01:05:33.520]  лучше докажем уже действительно солидную теорему.
[01:05:35.520 --> 01:05:37.520]  Да, уже вполне солидную теорему вообще
[01:05:37.520 --> 01:05:39.520]  про частично порядочное множество.
[01:05:39.520 --> 01:05:41.520]  Нет, тут действительно просто интересно
[01:05:41.520 --> 01:05:43.520]  в том, что сейчас вот это как бы просто абсолютно
[01:05:43.520 --> 01:05:45.520]  чистая математика, которая могла у вас на дискретке
[01:05:45.520 --> 01:05:47.520]  возникнуть.
[01:05:47.520 --> 01:05:49.520]  В случае цикличества у игрока тут проблемка
[01:05:49.520 --> 01:05:51.520]  в стиле, если
[01:05:51.520 --> 01:05:53.520]  Гамильтонов.
[01:05:53.520 --> 01:05:55.520]  Нет, понятно.
[01:05:59.520 --> 01:06:01.520]  Нет, Гамильтонов не поможет, потому что
[01:06:01.520 --> 01:06:03.520]  как бы был бы вопрос,
[01:06:03.520 --> 01:06:05.520]  можно ли покрыть там,
[01:06:05.520 --> 01:06:07.520]  нет, там будет другой.
[01:06:07.520 --> 01:06:09.520]  Если можно сделать так, чтобы у
[01:06:09.520 --> 01:06:11.520]  графа был, чтобы у этого
[01:06:11.520 --> 01:06:13.520]  покрытия циклами был размер N,
[01:06:13.520 --> 01:06:15.520]  ты получишь либо Гамильтонов цикл, либо там
[01:06:15.520 --> 01:06:17.520]  набор циклов.
[01:06:17.520 --> 01:06:19.520]  Поэтому как бы там, поэтому к сожалению
[01:06:19.520 --> 01:06:21.520]  задача Гамильтонов в цикле таким образом
[01:06:21.520 --> 01:06:23.520]  не решить.
[01:06:23.520 --> 01:06:25.520]  Да, то есть
[01:06:25.520 --> 01:06:27.520]  не все так, к сожалению, просто.
[01:06:27.520 --> 01:06:29.520]  Вот.
[01:06:29.520 --> 01:06:31.520]  То есть нет.
[01:06:31.520 --> 01:06:33.520]  Ну да.
[01:06:33.520 --> 01:06:35.520]  Ну да, да, да, да, да.
[01:06:35.520 --> 01:06:37.520]  Нет, вот сейчас.
[01:06:37.520 --> 01:06:39.520]  А нет, вот так вообще.
[01:06:41.520 --> 01:06:43.520]  Нет, вот если нет цель задачи,
[01:06:43.520 --> 01:06:45.520]  данный ориентированный граф,
[01:06:45.520 --> 01:06:47.520]  можно ли все
[01:06:47.520 --> 01:06:49.520]  шины покрыть циклами?
[01:06:49.520 --> 01:06:51.520]  Циклы циклами, а естественно длины
[01:06:51.520 --> 01:06:53.520]  больше чем один.
[01:06:59.520 --> 01:07:01.520]  Нет.
[01:07:01.520 --> 01:07:03.520]  По-моему движение такое, строим вот этот вот двудольный
[01:07:03.520 --> 01:07:05.520]  граф, если там найдется полное просочетание,
[01:07:05.520 --> 01:07:07.520]  значит можно, иначе нет.
[01:07:09.520 --> 01:07:11.520]  Так все, да.
[01:07:11.520 --> 01:07:13.520]  Выключаем камеру, вырезаем, даем на Код Форсис.
[01:07:13.520 --> 01:07:15.520]  Или куда-нибудь еще.
[01:07:15.520 --> 01:07:17.520]  Нет, я конечно
[01:07:17.520 --> 01:07:19.520]  не гарантирую, что какие-нибудь там
[01:07:19.520 --> 01:07:21.520]  координаторы не помочатся и не скажут,
[01:07:21.520 --> 01:07:23.520]  что таких задач уже миллион было.
[01:07:25.520 --> 01:07:27.520]  Или может там, я не знаю, может там
[01:07:27.520 --> 01:07:29.520]  в полигоне
[01:07:29.520 --> 01:07:31.520]  ЛКШ может такая задача уже давно есть,
[01:07:31.520 --> 01:07:33.520]  я не знаю.
[01:07:33.520 --> 01:07:35.520]  Ну так в принципе поржать можно.
[01:07:35.520 --> 01:07:37.520]  Да, ну вот хорошо.
[01:07:39.520 --> 01:07:41.520]  Хотя нет, задачи надо сохранить и спрашивать
[01:07:41.520 --> 01:07:43.520]  на зачете.
[01:07:45.520 --> 01:07:47.520]  Ну а что?
[01:07:47.520 --> 01:07:49.520]  Ну вижу в прочем, да.
[01:07:49.520 --> 01:07:51.520]  Чего?
[01:07:51.520 --> 01:07:53.520]  Тайные знания.
[01:07:53.520 --> 01:07:55.520]  Нет.
[01:07:57.520 --> 01:07:59.520]  Минимальное
[01:08:01.520 --> 01:08:03.520]  Максимально наоборот.
[01:08:05.520 --> 01:08:07.520]  Да, но чтобы при этом вершины не пересекаться.
[01:08:07.520 --> 01:08:09.520]  Ладно.
[01:08:09.520 --> 01:08:11.520]  Так, кстати, про максимальное количество
[01:08:11.520 --> 01:08:13.520]  ребер мы шейлеровый цикл с вами рассматривали.
[01:08:13.520 --> 01:08:15.520]  Все, да, хорошо.
[01:08:15.520 --> 01:08:17.520]  Ладно.
[01:08:17.520 --> 01:08:19.520]  Давайте вернемся к частичному порядочному множеству.
[01:08:19.520 --> 01:08:21.520]  Тут уже знания, которые
[01:08:21.520 --> 01:08:23.520]  уже известны.
[01:08:23.520 --> 01:08:25.520]  Ну во-первых, что такое
[01:08:25.520 --> 01:08:27.520]  частичное порядочное множество?
[01:08:29.520 --> 01:08:31.520]  Да.
[01:08:31.520 --> 01:08:33.520]  Во-первых множество,
[01:08:33.520 --> 01:08:35.520]  а во-вторых
[01:08:35.520 --> 01:08:37.520]  с мистической операцией
[01:08:37.520 --> 01:08:39.520]  ИТ.
[01:08:39.520 --> 01:08:41.520]  Ну это бинарная операция.
[01:08:41.520 --> 01:08:43.520]  Ладно, я даже вот так нарисую.
[01:08:45.520 --> 01:08:47.520]  Это булевая операция.
[01:08:47.520 --> 01:08:49.520]  Ну такой
[01:08:49.520 --> 01:08:51.520]  фолстру такая, да.
[01:08:51.520 --> 01:08:53.520]  Но чтобы это было частично порядочное множество
[01:08:53.520 --> 01:08:55.520]  по этой операции
[01:08:55.520 --> 01:08:57.520]  надо, чтобы выполнялись три аксиомы.
[01:08:57.520 --> 01:08:59.520]  Первая аксиома.
[01:08:59.520 --> 01:09:01.520]  То есть, что для любого А
[01:09:01.520 --> 01:09:03.520]  было верно, что
[01:09:03.520 --> 01:09:05.520]  А и А
[01:09:05.520 --> 01:09:07.520]  равно один.
[01:09:07.520 --> 01:09:09.520]  Дальше
[01:09:09.520 --> 01:09:11.520]  было бы верно,
[01:09:11.520 --> 01:09:13.520]  чтобы
[01:09:13.520 --> 01:09:15.520]  для любого А, для любых
[01:09:15.520 --> 01:09:17.520]  А и Б было верно, что
[01:09:17.520 --> 01:09:19.520]  если там А и
[01:09:19.520 --> 01:09:21.520]  Б и
[01:09:21.520 --> 01:09:23.520]  там
[01:09:23.520 --> 01:09:25.520]  Б и А, то
[01:09:25.520 --> 01:09:27.520]  из этого всего следует, что
[01:09:27.520 --> 01:09:29.520]  А тупо равно Б.
[01:09:29.520 --> 01:09:31.520]  А третья транзитивность.
[01:09:35.520 --> 01:09:37.520]  А третья транзитивность, да.
[01:09:37.520 --> 01:09:39.520]  Что для любых А, Б, С
[01:09:39.520 --> 01:09:41.520]  то есть верно,
[01:09:41.520 --> 01:09:43.520]  что значит из
[01:09:43.520 --> 01:09:45.520]  А и Б и
[01:09:45.520 --> 01:09:47.520]  Б и С
[01:09:47.520 --> 01:09:49.520]  следует, что А и С.
[01:09:51.520 --> 01:09:53.520]  Да, ну называются они рефлексивность,
[01:09:53.520 --> 01:09:55.520]  там антисимметричность
[01:09:55.520 --> 01:09:57.520]  и транзитивность.
[01:09:57.520 --> 01:09:59.520]  И транзитивность.
[01:09:59.520 --> 01:10:01.520]  Я мог бы...
[01:10:01.520 --> 01:10:03.520]  То есть, как бы для любых двух неравных
[01:10:03.520 --> 01:10:05.520]  элементов, верно, что
[01:10:05.520 --> 01:10:07.520]  либо А
[01:10:07.520 --> 01:10:09.520]  не меньше Б, либо
[01:10:09.520 --> 01:10:11.520]  А не является меньше, либо
[01:10:11.520 --> 01:10:13.520]  равно Б, либо Б не является меньше, либо равно А.
[01:10:13.520 --> 01:10:15.520]  Обычно смысл этого уйти
[01:10:15.520 --> 01:10:17.520]  такой меньше, либо равно.
[01:10:17.520 --> 01:10:19.520]  Самый типичный пример,
[01:10:19.520 --> 01:10:21.520]  которого можно привести,
[01:10:21.520 --> 01:10:23.520]  это, допустим, А
[01:10:23.520 --> 01:10:25.520]  равно какой-нибудь
[01:10:25.520 --> 01:10:27.520]  z в квадрате.
[01:10:27.520 --> 01:10:29.520]  Там набор точек на плоскости целых.
[01:10:29.520 --> 01:10:31.520]  И мы будем
[01:10:31.520 --> 01:10:33.520]  говорить, что там
[01:10:33.520 --> 01:10:35.520]  x1
[01:10:35.520 --> 01:10:37.520]  y1
[01:10:37.520 --> 01:10:39.520]  x2 y2
[01:10:39.520 --> 01:10:41.520]  равно просто
[01:10:41.520 --> 01:10:43.520]  x1 меньше, либо равно x2
[01:10:43.520 --> 01:10:45.520]  and then y1 меньше, либо равно y2.
[01:10:45.520 --> 01:10:47.520]  Вот это самый типичный пример такой.
[01:10:47.520 --> 01:10:49.520]  То есть, в том плане, что
[01:10:49.520 --> 01:10:51.520]  конечно, аксиомы
[01:10:51.520 --> 01:10:53.520]  естественно удовлетворяются,
[01:10:53.520 --> 01:10:55.520]  там могут быть пары точек, которые просто
[01:10:55.520 --> 01:10:57.520]  несравнимы между собой.
[01:10:57.520 --> 01:10:59.520]  Понимаете, да?
[01:10:59.520 --> 01:11:01.520]  Да, тут, в общем-то,
[01:11:01.520 --> 01:11:03.520]  тривиально. Вот. Ну, конечно,
[01:11:03.520 --> 01:11:05.520]  такие чумы мы рассматривать не будем,
[01:11:05.520 --> 01:11:07.520]  потому что нас интересуют, конечно,
[01:11:07.520 --> 01:11:09.520]  конечные чумы.
[01:11:09.520 --> 01:11:11.520]  Да, значит,
[01:11:11.520 --> 01:11:13.520]  в чумах есть такие...
[01:11:13.520 --> 01:11:15.520]  есть мистические понятия.
[01:11:15.520 --> 01:11:17.520]  Значит, определение.
[01:11:17.520 --> 01:11:19.520]  Значит, пусть
[01:11:19.520 --> 01:11:21.520]  у меня
[01:11:21.520 --> 01:11:23.520]  значит, вот это вот
[01:11:23.520 --> 01:11:25.520]  а и ыть это чум.
[01:11:25.520 --> 01:11:27.520]  Тогда
[01:11:29.520 --> 01:11:31.520]  значит,
[01:11:31.520 --> 01:11:33.520]  последовательность.
[01:11:33.520 --> 01:11:35.520]  Значит,
[01:11:35.520 --> 01:11:37.520]  последовательность а1, а2
[01:11:37.520 --> 01:11:39.520]  и так далее, ак.
[01:11:39.520 --> 01:11:41.520]  Ну, где каждый элемент
[01:11:41.520 --> 01:11:43.520]  это из а.
[01:11:45.520 --> 01:11:47.520]  Это цепь.
[01:11:47.520 --> 01:11:49.520]  Если
[01:11:49.520 --> 01:11:51.520]  оказывается, что
[01:11:51.520 --> 01:11:53.520]  а1, ыть, а2,
[01:11:53.520 --> 01:11:55.520]  end, end,
[01:11:55.520 --> 01:11:57.520]  а2, ыть, а3,
[01:11:57.520 --> 01:11:59.520]  end, end, и так далее,
[01:11:59.520 --> 01:12:01.520]  end, end, там, ак-1,
[01:12:01.520 --> 01:12:03.520]  ыть, ак.
[01:12:05.520 --> 01:12:07.520]  Что?
[01:12:13.520 --> 01:12:15.520]  Ну, нам по барабану будет, если честно.
[01:12:15.520 --> 01:12:17.520]  Да.
[01:12:17.520 --> 01:12:19.520]  То есть нам по барабану, да,
[01:12:19.520 --> 01:12:21.520]  желательно, конечно, чтобы они там
[01:12:21.520 --> 01:12:23.520]  соседние не были равные, но тем не менее.
[01:12:23.520 --> 01:12:25.520]  Для нас более интересно то,
[01:12:25.520 --> 01:12:27.520]  чем цепь, понятие цепь отличается от понятия
[01:12:27.520 --> 01:12:29.520]  путь.
[01:12:29.520 --> 01:12:31.520]  Она отличается тем, что
[01:12:31.520 --> 01:12:33.520]  в отличие от обычного пути в ориентированном графе
[01:12:33.520 --> 01:12:35.520]  здесь мы можем вытянуть вершину из середины
[01:12:35.520 --> 01:12:37.520]  и цепь останется цепью, обратите внимание.
[01:12:39.520 --> 01:12:41.520]  Потому что если изобразить это в виде
[01:12:41.520 --> 01:12:43.520]  графа, то получится, да,
[01:12:43.520 --> 01:12:45.520]  ориентированный ациклический граф, но с транзитивным замыканием.
[01:12:47.520 --> 01:12:49.520]  Вот.
[01:12:49.520 --> 01:12:51.520]  Так.
[01:12:51.520 --> 01:12:53.520]  И второе.
[01:12:53.520 --> 01:12:55.520]  Множество
[01:12:55.520 --> 01:12:57.520]  а1, а2, и так далее,
[01:12:57.520 --> 01:12:59.520]  ак
[01:12:59.520 --> 01:13:01.520]  называется антицепью
[01:13:05.520 --> 01:13:07.520]  если,
[01:13:07.520 --> 01:13:09.520]  если что.
[01:13:09.520 --> 01:13:11.520]  Если для любых ижи,
[01:13:11.520 --> 01:13:13.520]  давайте я так напишу,
[01:13:13.520 --> 01:13:15.520]  и не равно жи, оказывается
[01:13:15.520 --> 01:13:17.520]  верно, что,
[01:13:17.520 --> 01:13:19.520]  точнее оказывается не верно,
[01:13:19.520 --> 01:13:21.520]  что аито ить ажито.
[01:13:23.520 --> 01:13:25.520]  То есть наоборот, оказывается никакие
[01:13:25.520 --> 01:13:27.520]  два элемента ни в какую сторону
[01:13:27.520 --> 01:13:29.520]  не сравнимы.
[01:13:29.520 --> 01:13:31.520]  Такая сеть.
[01:13:31.520 --> 01:13:33.520]  Чего?
[01:13:33.520 --> 01:13:35.520]  Такая сеть, потому что
[01:13:35.520 --> 01:13:37.520]  просто множество.
[01:13:37.520 --> 01:13:39.520]  Это буквально множество.
[01:13:39.520 --> 01:13:41.520]  Нет, почему нет?
[01:13:41.520 --> 01:13:43.520]  Анти какой-то есть, потому что, смотрите,
[01:13:43.520 --> 01:13:45.520]  цепь, что такое цепь? Цепь это множество элементов,
[01:13:45.520 --> 01:13:47.520]  любые два из которых сравнимы,
[01:13:47.520 --> 01:13:49.520]  я мог сказать.
[01:13:49.520 --> 01:13:51.520]  Да.
[01:13:51.520 --> 01:13:53.520]  Потому что
[01:13:53.520 --> 01:13:55.520]  есть такая церема, что
[01:13:55.520 --> 01:13:57.520]  допустим у вас есть граф,
[01:13:57.520 --> 01:13:59.520]  ориентированный граф из N-вершин,
[01:13:59.520 --> 01:14:01.520]  такой, что
[01:14:01.520 --> 01:14:03.520]  в любом, между любыми двумя
[01:14:03.520 --> 01:14:05.520]  вершинами хоть в какую-то из сторон есть ребро.
[01:14:05.520 --> 01:14:07.520]  Тогда
[01:14:07.520 --> 01:14:09.520]  в этом графе есть гамильтонов
[01:14:09.520 --> 01:14:11.520]  путь.
[01:14:13.520 --> 01:14:15.520]  Так, так,
[01:14:15.520 --> 01:14:17.520]  так, так, давайте.
[01:14:17.520 --> 01:14:19.520]  Ну, была такая задача,
[01:14:19.520 --> 01:14:21.520]  была в сеть бомб-классе.
[01:14:21.520 --> 01:14:23.520]  Как говорится там...
[01:14:23.520 --> 01:14:25.520]  А,
[01:14:25.520 --> 01:14:27.520]  а даже так...
[01:14:33.520 --> 01:14:35.520]  Чего?
[01:14:37.520 --> 01:14:39.520]  Да.
[01:14:39.520 --> 01:14:41.520]  Ух ты. А по какому поводу он ее дал?
[01:14:41.520 --> 01:14:43.520]  Сортировки.
[01:14:43.520 --> 01:14:45.520]  Да.
[01:14:45.520 --> 01:14:47.520]  Ну, там алгоритм похож на сортировку.
[01:14:47.520 --> 01:14:49.520]  Да?
[01:14:49.520 --> 01:14:51.520]  Ну, не знаю.
[01:14:51.520 --> 01:14:53.520]  Нет, ну понятно, что это
[01:14:53.520 --> 01:14:55.520]  целом сортировка.
[01:14:55.520 --> 01:14:57.520]  Нет, ну, нет,
[01:14:57.520 --> 01:14:59.520]  а как вы там сортируете, учитывая, что в общем случае граф
[01:14:59.520 --> 01:15:01.520]  может быть и циклическим?
[01:15:01.520 --> 01:15:03.520]  Нет, там турнир, на каждой стороне сравним.
[01:15:03.520 --> 01:15:05.520]  Ну, турнир, да.
[01:15:05.520 --> 01:15:07.520]  Да, можно. Получается, что
[01:15:07.520 --> 01:15:09.520]  нужно найти лимфоиск,
[01:15:09.520 --> 01:15:11.520]  в первый момент разные
[01:15:11.520 --> 01:15:13.520]  ребра.
[01:15:13.520 --> 01:15:15.520]  Ну, это тогда.
[01:15:15.520 --> 01:15:17.520]  Но это надо...
[01:15:17.520 --> 01:15:19.520]  А, ну это да, но это правда надо вопрос,
[01:15:19.520 --> 01:15:21.520]  потому что асимпатически обычно тут...
[01:15:21.520 --> 01:15:23.520]  Как бы вопрос как ставить? Если ставить программистки, то вопрос как бы
[01:15:23.520 --> 01:15:25.520]  либо вам дадут просто N квадрат ребер
[01:15:25.520 --> 01:15:27.520]  и удачи, либо делать
[01:15:27.520 --> 01:15:29.520]  эту задачу как-то интерактивной.
[01:15:29.520 --> 01:15:31.520]  Генератор просто...
[01:15:31.520 --> 01:15:33.520]  А, ну,
[01:15:33.520 --> 01:15:35.520]  как угодно там генерировать.
[01:15:35.520 --> 01:15:37.520]  Ну, ладно, давайте на всякий случай
[01:15:37.520 --> 01:15:39.520]  расскажу это мистическое знание.
[01:15:39.520 --> 01:15:41.520]  Понятно, что
[01:15:41.520 --> 01:15:43.520]  могут там дать где-нибудь
[01:15:43.520 --> 01:15:45.520]  в седьмом классе, действительно, на самом деле.
[01:15:45.520 --> 01:15:47.520]  Но, правда,
[01:15:47.520 --> 01:15:49.520]  если вы там случайно занимались олимпиадной математикой
[01:15:49.520 --> 01:15:51.520]  в седьмом классе, мало ли там всякое бывает.
[01:15:53.520 --> 01:15:55.520]  То есть да, мистическая теорема,
[01:15:55.520 --> 01:15:57.520]  определение,
[01:15:57.520 --> 01:15:59.520]  что ориентированный граф
[01:15:59.520 --> 01:16:01.520]  там
[01:16:01.520 --> 01:16:03.520]  g равно v e
[01:16:03.520 --> 01:16:05.520]  это турнир.
[01:16:05.520 --> 01:16:07.520]  Там
[01:16:07.520 --> 01:16:09.520]  если...
[01:16:09.520 --> 01:16:11.520]  Ну, допустим,
[01:16:11.520 --> 01:16:13.520]  давайте скажем так, если нет
[01:16:13.520 --> 01:16:15.520]  кратных ребер,
[01:16:19.520 --> 01:16:21.520]  ну, вот, и...
[01:16:23.520 --> 01:16:25.520]  Ну, и для любых
[01:16:25.520 --> 01:16:27.520]  там uv
[01:16:27.520 --> 01:16:29.520]  причем неравных,
[01:16:29.520 --> 01:16:31.520]  верно, что, ну, допустим,
[01:16:31.520 --> 01:16:33.520]  там uv
[01:16:33.520 --> 01:16:35.520]  лежит в e,
[01:16:35.520 --> 01:16:37.520]  xor
[01:16:37.520 --> 01:16:39.520]  v
[01:16:39.520 --> 01:16:41.520]  лежит в e.
[01:16:41.520 --> 01:16:43.520]  Но обычно турнирам говорят, когда
[01:16:43.520 --> 01:16:45.520]  ровно одно из этих ребер существует,
[01:16:45.520 --> 01:16:47.520]  поэтому я тут xor пишу.
[01:16:49.520 --> 01:16:51.520]  Чего?
[01:16:51.520 --> 01:16:53.520]  Значит, да,
[01:16:53.520 --> 01:16:55.520]  мистическая теорема
[01:16:55.520 --> 01:16:57.520]  в турнире,
[01:16:59.520 --> 01:17:01.520]  ну, по крайней мере, в конечном есть
[01:17:01.520 --> 01:17:03.520]  гамильтонов цикл.
[01:17:05.520 --> 01:17:07.520]  Ладно, да, пути, конечно,
[01:17:07.520 --> 01:17:09.520]  но там
[01:17:09.520 --> 01:17:11.520]  была задача на регионе, где надо думать,
[01:17:11.520 --> 01:17:13.520]  что да, что...
[01:17:13.520 --> 01:17:15.520]  Нет, там верно такое,
[01:17:15.520 --> 01:17:17.520]  если граф является еленот,
[01:17:17.520 --> 01:17:19.520]  там более продвинутая теорема будет такая,
[01:17:19.520 --> 01:17:21.520]  если граф сильно связан, то есть
[01:17:21.520 --> 01:17:23.520]  гамильтонов цикл.
[01:17:23.520 --> 01:17:25.520]  И там на регионе была задача,
[01:17:25.520 --> 01:17:27.520]  где вам надо было это все вывести.
[01:17:29.520 --> 01:17:31.520]  Вот, не было?
[01:17:33.520 --> 01:17:35.520]  Нет, была, была, была, вот кто-то, да.
[01:17:35.520 --> 01:17:37.520]  То есть это, конечно, уже относительно
[01:17:37.520 --> 01:17:39.520]  старый, потому что там старый, по современным меркам, регион,
[01:17:39.520 --> 01:17:41.520]  но задача прям отпадная, да.
[01:17:43.520 --> 01:17:45.520]  Ну, так, ладно,
[01:17:45.520 --> 01:17:47.520]  давайте сейчас...
[01:17:47.520 --> 01:17:49.520]  Но погодите, давайте сейчас обсудим,
[01:17:49.520 --> 01:17:51.520]  раз об этом зашла речь, смотрите, и так есть
[01:17:51.520 --> 01:17:53.520]  гамильтонов путь.
[01:17:53.520 --> 01:17:55.520]  Так, как вообще это доказать?
[01:17:57.520 --> 01:17:59.520]  Ну, доказывать будем просто по индукции.
[01:18:01.520 --> 01:18:03.520]  Допустим, как перейти от...
[01:18:03.520 --> 01:18:05.520]  Ну, понятно, в графе из одной вершины
[01:18:05.520 --> 01:18:07.520]  гамильтонов путь, естественно, существует.
[01:18:07.520 --> 01:18:09.520]  Как перейти от графа размера K
[01:18:09.520 --> 01:18:11.520]  в граф размера K плюс один?
[01:18:11.520 --> 01:18:13.520]  Очень просто, на графе размера K
[01:18:13.520 --> 01:18:15.520]  гамильтонов путь существует, вот он.
[01:18:15.520 --> 01:18:17.520]  Вот, один, два и так далее,
[01:18:17.520 --> 01:18:19.520]  К, допустим, назовем вершину, вот еще одна вершина,
[01:18:19.520 --> 01:18:21.520]  то есть ее куда-то в этот путь вставить.
[01:18:23.520 --> 01:18:25.520]  Ну, куда ее можно вставить?
[01:18:25.520 --> 01:18:27.520]  Либо ее можно вставить в начало,
[01:18:27.520 --> 01:18:29.520]  либо ее можно вставить в конец.
[01:18:29.520 --> 01:18:31.520]  Если нам оба раза не повезло,
[01:18:31.520 --> 01:18:33.520]  значит, тут ребра устроены
[01:18:33.520 --> 01:18:35.520]  как-то вот таким образом.
[01:18:35.520 --> 01:18:37.520]  И тогда идея такая,
[01:18:37.520 --> 01:18:39.520]  а давайте пойдем слева-направо,
[01:18:39.520 --> 01:18:41.520]  и просто
[01:18:41.520 --> 01:18:43.520]  найдем первую вершину, у которой
[01:18:43.520 --> 01:18:45.520]  ребро ведет из этой вершины сюда,
[01:18:45.520 --> 01:18:47.520]  такое найдется.
[01:18:47.520 --> 01:18:49.520]  И все, вот вам, пожалуйста, в этом месте
[01:18:49.520 --> 01:18:51.520]  вставляем вершину, радуемся.
[01:18:51.520 --> 01:18:53.520]  Более того, в принципе,
[01:18:53.520 --> 01:18:55.520]  если вам задача дана как-то интерактивно,
[01:18:55.520 --> 01:18:57.520]  то вы это место можете найти за логарифом
[01:18:57.520 --> 01:18:59.520]  просто бинпоиском.
[01:18:59.520 --> 01:19:01.520]  Да, понятно,
[01:19:01.520 --> 01:19:03.520]  что тут не обязательно сначала все ребра
[01:19:03.520 --> 01:19:05.520]  сюда, потом сюда, тут может быть там как угодно,
[01:19:05.520 --> 01:19:07.520]  но бинпоиском это работает.
[01:19:07.520 --> 01:19:09.520]  Ну, в принципе, аналогичная ситуация,
[01:19:09.520 --> 01:19:11.520]  то есть задача дана, какая-то
[01:19:11.520 --> 01:19:13.520]  функция, найти ее хоть какой-нибудь
[01:19:13.520 --> 01:19:15.520]  корень.
[01:19:15.520 --> 01:19:17.520]  Надо просто найти точку, в которой
[01:19:17.520 --> 01:19:19.520]  функция заведомо отрицательна,
[01:19:19.520 --> 01:19:21.520]  найти точку, в которой функция заведомо положительна,
[01:19:21.520 --> 01:19:23.520]  и после этого найти корень просто бинпоиском,
[01:19:23.520 --> 01:19:25.520]  который найдет вам этот корень,
[01:19:25.520 --> 01:19:27.520]  даже если функция устроена вот каким-то таким образом.
[01:19:33.520 --> 01:19:35.520]  Нет, конечно.
[01:19:35.520 --> 01:19:37.520]  Нет.
[01:19:37.520 --> 01:19:39.520]  Вполне вероятно, что граф будет вот такой, например.
[01:19:41.520 --> 01:19:43.520]  Что?
[01:19:43.520 --> 01:19:45.520]  Кто сказал, что в графе нету циклов?
[01:19:47.520 --> 01:19:49.520]  Нет, отсутствия циклов в графе
[01:19:49.520 --> 01:19:51.520]  никто не обещал.
[01:19:57.520 --> 01:19:59.520]  Ну, не граф вообще, конечно,
[01:19:59.520 --> 01:20:01.520]  а именно граф турнир
[01:20:01.520 --> 01:20:03.520]  сильно связан.
[01:20:03.520 --> 01:20:05.520]  Да, в общем случае можно упасти, конечно.
[01:20:07.520 --> 01:20:09.520]  Чего лоббист?
[01:20:09.520 --> 01:20:11.520]  Что эквалентно?
[01:20:13.520 --> 01:20:15.520]  Да.
[01:20:15.520 --> 01:20:17.520]  Нет, ну это
[01:20:17.520 --> 01:20:19.520]  в принципе, да.
[01:20:19.520 --> 01:20:21.520]  То есть такой теория, да.
[01:20:21.520 --> 01:20:23.520]  Если...
[01:20:23.520 --> 01:20:25.520]  А, да, теория,
[01:20:25.520 --> 01:20:27.520]  но все равно лучше в сильно
[01:20:27.520 --> 01:20:29.520]  связанном турнире.
[01:20:29.520 --> 01:20:31.520]  Так, в сильно
[01:20:31.520 --> 01:20:33.520]  связанном турнире
[01:20:37.520 --> 01:20:39.520]  есть
[01:20:39.520 --> 01:20:41.520]  гамильтонов цикл.
[01:20:43.520 --> 01:20:45.520]  Так.
[01:20:47.520 --> 01:20:49.520]  Вот.
[01:20:51.520 --> 01:20:53.520]  Так.
[01:20:55.520 --> 01:20:57.520]  Так, ну вот
[01:20:57.520 --> 01:20:59.520]  выясняйте первое просто.
[01:20:59.520 --> 01:21:01.520]  Как доказать такое?
[01:21:07.520 --> 01:21:09.520]  Так.
[01:21:09.520 --> 01:21:11.520]  Так, давайте.
[01:21:11.520 --> 01:21:13.520]  Так, ну давайте
[01:21:13.520 --> 01:21:15.520]  разбираться.
[01:21:15.520 --> 01:21:17.520]  Так.
[01:21:17.520 --> 01:21:19.520]  Так, давайте.
[01:21:19.520 --> 01:21:21.520]  Как действительно этот путь устроен?
[01:21:21.520 --> 01:21:23.520]  Значит, это туда,
[01:21:23.520 --> 01:21:25.520]  то есть мы знаем, что из этой вершины в начальную
[01:21:25.520 --> 01:21:27.520]  какой-то путь есть.
[01:21:27.520 --> 01:21:29.520]  Так, скачем.
[01:21:29.520 --> 01:21:31.520]  Ага,
[01:21:31.520 --> 01:21:33.520]  после первого жеребра я вам сразу скажу.
[01:21:33.520 --> 01:21:35.520]  Кстати, оптичка.
[01:21:35.520 --> 01:21:37.520]  Эдж гамильтонов путь, да, там все
[01:21:37.520 --> 01:21:39.520]  вершины есть.
[01:21:39.520 --> 01:21:41.520]  Вот.
[01:21:41.520 --> 01:21:43.520]  А вот это интересно, что дальше.
[01:21:53.520 --> 01:21:55.520]  Не, ничего неприятного на самом деле
[01:21:55.520 --> 01:21:57.520]  нет. Ладно, давайте так сейчас
[01:21:57.520 --> 01:21:59.520]  сократим себе жизнь вот
[01:21:59.520 --> 01:22:01.520]  спокойненько.
[01:22:01.520 --> 01:22:03.520]  Ладно.
[01:22:05.520 --> 01:22:07.520]  Так.
[01:22:09.520 --> 01:22:11.520]  И снова назад.
[01:22:11.520 --> 01:22:13.520]  Сейчас куда назад?
[01:22:13.520 --> 01:22:15.520]  Где назад?
[01:22:15.520 --> 01:22:17.520]  Можно этот путь разбить
[01:22:17.520 --> 01:22:19.520]  на черные ребра и еще какие-то
[01:22:19.520 --> 01:22:21.520]  синие ребра, при условии, что
[01:22:21.520 --> 01:22:23.520]  синие ребра будут только назад.
[01:22:23.520 --> 01:22:25.520]  Так. Ну хорошо, так.
[01:22:25.520 --> 01:22:27.520]  Ну так и что?
[01:22:31.520 --> 01:22:33.520]  Ну хоть.
[01:22:35.520 --> 01:22:37.520]  Давайте просто по индукции докажем
[01:22:37.520 --> 01:22:39.520]  задачу. Ну с циклы мы сейчас
[01:22:39.520 --> 01:22:41.520]  вместо куда вставать вершину.
[01:22:41.520 --> 01:22:43.520]  А в фоне?
[01:22:43.520 --> 01:22:45.520]  Что тебе ждут, да.
[01:22:45.520 --> 01:22:47.520]  Ну с циклы по всем шинам.
[01:22:47.520 --> 01:22:49.520]  Ну.
[01:22:49.520 --> 01:22:51.520]  У тебя в индукции перестанет ломаться,
[01:22:51.520 --> 01:22:53.520]  когда ты ударяешь вершину.
[01:22:53.520 --> 01:22:55.520]  Тебе перестанет быть иметь, кажется.
[01:22:55.520 --> 01:22:57.520]  Да, это странно.
[01:22:57.520 --> 01:22:59.520]  Почему странно идут?
[01:22:59.520 --> 01:23:01.520]  Ну, не совсем понятно.
[01:23:01.520 --> 01:23:03.520]  Ты можешь просто взять и сказать...
[01:23:03.520 --> 01:23:05.520]  Да, у тебя может быть любой граф изначально
[01:23:05.520 --> 01:23:07.520]  добавить вершину.
[01:23:11.520 --> 01:23:13.520]  Давайте нарисуем
[01:23:13.520 --> 01:23:15.520]  синие ребра.
[01:23:15.520 --> 01:23:17.520]  Так, ну нарисуем. И что?
[01:23:17.520 --> 01:23:19.520]  Правда, может их и нету больше.
[01:23:19.520 --> 01:23:21.520]  Но они, конечно, есть.
[01:23:21.520 --> 01:23:23.520]  Ладно, да.
[01:23:23.520 --> 01:23:25.520]  Да.
[01:23:27.520 --> 01:23:29.520]  Что дальше?
[01:23:33.520 --> 01:23:35.520]  Так.
[01:23:37.520 --> 01:23:39.520]  Так, ну ладно,
[01:23:39.520 --> 01:23:41.520]  не будем на этом зависать.
[01:23:41.520 --> 01:23:43.520]  Нет, я просто... Ну скажем так,
[01:23:43.520 --> 01:23:45.520]  честно скажу. На самом деле тут можно просто...
[01:23:45.520 --> 01:23:47.520]  Нет, я имею в виду, можно
[01:23:47.520 --> 01:23:49.520]  по своему опыту скажу, да, тут можно очень долго
[01:23:49.520 --> 01:23:51.520]  и плодотворно думать.
[01:23:51.520 --> 01:23:53.520]  Но, на самом деле,
[01:23:53.520 --> 01:23:55.520]  одно из самых простых доказательств можно свести
[01:23:55.520 --> 01:23:57.520]  к следующему. Потому что наличие вот этого
[01:23:57.520 --> 01:23:59.520]  ребра приводит вас к тому,
[01:23:59.520 --> 01:24:01.520]  существует вот такая конструкция.
[01:24:03.520 --> 01:24:05.520]  Такая конструкция, покрывающая все
[01:24:05.520 --> 01:24:07.520]  ребра.
[01:24:07.520 --> 01:24:09.520]  Надо теперь будет просто аккуратненько
[01:24:09.520 --> 01:24:11.520]  вот этот хвостик сокращать.
[01:24:11.520 --> 01:24:13.520]  Как его сокращать?
[01:24:13.520 --> 01:24:15.520]  Ну, самое тупое, что можно
[01:24:15.520 --> 01:24:17.520]  сократить, это теперь давайте посмотрим на эту
[01:24:17.520 --> 01:24:19.520]  вершину. У вас тут
[01:24:19.520 --> 01:24:21.520]  как бы два варианта.
[01:24:23.520 --> 01:24:25.520]  Ну, если тут... Вы тут просто идем
[01:24:25.520 --> 01:24:27.520]  по этим ребрам и смотрим. Если выяснится,
[01:24:27.520 --> 01:24:29.520]  что тут из какой-то вершины все-таки нашлось ребро
[01:24:29.520 --> 01:24:31.520]  в эту вершину,
[01:24:31.520 --> 01:24:33.520]  то тогда как бы
[01:24:33.520 --> 01:24:35.520]  добавить эту вершину в цикл и вот
[01:24:35.520 --> 01:24:37.520]  сократить хвостик уже легко.
[01:24:39.520 --> 01:24:41.520]  Ну, вот так вот.
[01:24:43.520 --> 01:24:45.520]  Вот. Но как бы такое
[01:24:45.520 --> 01:24:47.520]  ребро... То есть просто вот идем
[01:24:47.520 --> 01:24:49.520]  после вот этой вершины, идем-идем-идем.
[01:24:49.520 --> 01:24:51.520]  Либо такая найдется, либо
[01:24:51.520 --> 01:24:53.520]  вот уже более подлый случай.
[01:24:53.520 --> 01:24:55.520]  То есть может быть
[01:24:55.520 --> 01:24:57.520]  уже такой нетривиальный для нас.
[01:24:57.520 --> 01:24:59.520]  Это если выяснится, что тут все ребра в эту
[01:24:59.520 --> 01:25:01.520]  сторону.
[01:25:01.520 --> 01:25:03.520]  Впрочем,
[01:25:03.520 --> 01:25:05.520]  это нам сильно помогает. Это нам помогает
[01:25:05.520 --> 01:25:07.520]  в том плане, что как бы я теперь этот
[01:25:07.520 --> 01:25:09.520]  цикл к этой вершине могу прицепить за абсолютно
[01:25:09.520 --> 01:25:11.520]  любую вершину.
[01:25:13.520 --> 01:25:15.520]  То к чему это нас приводит?
[01:25:15.520 --> 01:25:17.520]  Тогда это будет называться...
[01:25:17.520 --> 01:25:19.520]  Берем теперь вот эту вершину.
[01:25:19.520 --> 01:25:21.520]  Давайте тут хвостик подлиннее
[01:25:21.520 --> 01:25:23.520]  сделаем.
[01:25:23.520 --> 01:25:25.520]  Вот. Ну, так для удобства.
[01:25:25.520 --> 01:25:27.520]  Ну, вот.
[01:25:29.520 --> 01:25:31.520]  И тут просто, если...
[01:25:31.520 --> 01:25:33.520]  И тут опять то же самое.
[01:25:33.520 --> 01:25:35.520]  Смотрите, если мы опять же найдем
[01:25:35.520 --> 01:25:37.520]  вот какое-нибудь ребро, ведущую
[01:25:37.520 --> 01:25:39.520]  в эту вершину из этого цикла.
[01:25:41.520 --> 01:25:43.520]  Вот.
[01:25:43.520 --> 01:25:45.520]  То есть...
[01:25:45.520 --> 01:25:47.520]  Если такое ребро найдется.
[01:25:47.520 --> 01:25:49.520]  А можно даже еще проще.
[01:25:49.520 --> 01:25:51.520]  Знаете, даже не вот так циклическо искать.
[01:25:51.520 --> 01:25:53.520]  Смотрите, как надо искать.
[01:25:53.520 --> 01:25:55.520]  Смотрите, из этого цикла
[01:25:55.520 --> 01:25:57.520]  вот в эти вершины оставшиеся
[01:25:57.520 --> 01:25:59.520]  хоть одно ребро да придет.
[01:25:59.520 --> 01:26:01.520]  Иначе граф не будет сильно связанным.
[01:26:01.520 --> 01:26:03.520]  Правда? Давайте
[01:26:03.520 --> 01:26:05.520]  найдем самую близкую
[01:26:05.520 --> 01:26:07.520]  к этому циклу вершину, в которую
[01:26:07.520 --> 01:26:09.520]  ребро пришло.
[01:26:09.520 --> 01:26:11.520]  Да?
[01:26:11.520 --> 01:26:13.520]  Найдем самую близкую.
[01:26:13.520 --> 01:26:15.520]  Тогда путь
[01:26:15.520 --> 01:26:17.520]  будет...
[01:26:17.520 --> 01:26:19.520]  Ну, вот.
[01:26:19.520 --> 01:26:21.520]  Ну, тогда я утверждаю, что...
[01:26:21.520 --> 01:26:23.520]  Ну, то есть, если это не эта вершина,
[01:26:23.520 --> 01:26:25.520]  то путь, в общем-то, тогда автоматически оказывается
[01:26:25.520 --> 01:26:27.520]  устроен вот по принципу там...
[01:26:27.520 --> 01:26:29.520]  То есть, этот цикл пум-пум. Значит, тут
[01:26:29.520 --> 01:26:31.520]  соответственно...
[01:26:31.520 --> 01:26:33.520]  Нет, не так.
[01:26:33.520 --> 01:26:35.520]  Только не сюда, а вот сюда.
[01:26:35.520 --> 01:26:37.520]  Вот так, вот так, вот так, вот так,
[01:26:37.520 --> 01:26:39.520]  вот так, вот так, вот так,
[01:26:39.520 --> 01:26:41.520]  вот так и, соответственно, вот так.
[01:26:41.520 --> 01:26:43.520]  Так.
[01:26:43.520 --> 01:26:45.520]  Так.
[01:26:45.520 --> 01:26:47.520]  Так.
[01:26:47.520 --> 01:26:49.520]  Но там возникнет техническая
[01:26:49.520 --> 01:26:51.520]  ситуация, что из этой вершины
[01:26:51.520 --> 01:26:53.520]  ребро тоже может быть отправлено сюда,
[01:26:53.520 --> 01:26:55.520]  поэтому придется эту пару там
[01:26:55.520 --> 01:26:57.520]  более аккуратно искать.
[01:26:57.520 --> 01:26:59.520]  Вот.
[01:26:59.520 --> 01:27:01.520]  Да.
[01:27:01.520 --> 01:27:03.520]  То есть, тут два варианта.
[01:27:03.520 --> 01:27:05.520]  Либо эта вершина первая, с ней мы научились разбираться,
[01:27:05.520 --> 01:27:07.520]  либо эта вершина не первая, и тогда мы
[01:27:07.520 --> 01:27:09.520]  просто находим первое ребро и делаем вот так.
[01:27:11.520 --> 01:27:13.520]  Вот.
[01:27:13.520 --> 01:27:15.520]  То есть, получается, да, что вот... То есть, вот так
[01:27:15.520 --> 01:27:17.520]  аккуратно съедая хвостик,
[01:27:17.520 --> 01:27:19.520]  аккуратненько съедая хвостик,
[01:27:19.520 --> 01:27:21.520]  мы понимаем, что
[01:27:21.520 --> 01:27:23.520]  Гамильтона в цикл найдется.
[01:27:23.520 --> 01:27:25.520]  Вот. Но, конечно же, в общем случае
[01:27:25.520 --> 01:27:27.520]  это не обязательно так, то есть, в общем случае это будет
[01:27:27.520 --> 01:27:29.520]  там...
[01:27:29.520 --> 01:27:31.520]  То есть, в общем случае это будет, конечно,
[01:27:31.520 --> 01:27:33.520]  вот какая-то такая ситуация.
[01:27:33.520 --> 01:27:35.520]  Вот.
[01:27:35.520 --> 01:27:37.520]  Но, впрочем, там...
[01:27:37.520 --> 01:27:39.520]  Но, впрочем, то есть, Гамильтон в цикл,
[01:27:39.520 --> 01:27:41.520]  Гамильтон в путь, конечно, организовать можно,
[01:27:41.520 --> 01:27:43.520]  но тем не менее.
[01:27:43.520 --> 01:27:45.520]  Так что, да, вот такая вот штука возникает
[01:27:45.520 --> 01:27:47.520]  приятная. Значит, там
[01:27:47.520 --> 01:27:49.520]  более-то можно придумать там разные сложности алгоритма,
[01:27:49.520 --> 01:27:51.520]  которые это делают.
[01:27:53.520 --> 01:27:55.520]  Ну, вот это вот можно забабахать, очевидно,
[01:27:55.520 --> 01:27:57.520]  за n квадрат.
[01:27:57.520 --> 01:27:59.520]  Может, даже если...
[01:27:59.520 --> 01:28:01.520]  Может, даже если почесаться, можно даже как-то побыстрее.
[01:28:01.520 --> 01:28:03.520]  А хотя...
[01:28:03.520 --> 01:28:05.520]  Ну, да.
[01:28:05.520 --> 01:28:07.520]  Нет, ну, Гамильтон в путь,
[01:28:07.520 --> 01:28:09.520]  если вам ребро дается интеракторам,
[01:28:09.520 --> 01:28:11.520]  то как бы можно за n лога найти.
[01:28:11.520 --> 01:28:13.520]  Ну, там отдельная песня, как вы там
[01:28:13.520 --> 01:28:15.520]  в этом бинпоиске еще вставлять будете куда-то.
[01:28:21.520 --> 01:28:23.520]  Ну, мало ли.
[01:28:23.520 --> 01:28:25.520]  Нет, ну, как бы...
[01:28:25.520 --> 01:28:27.520]  Нет, ну, можно было себе подставить
[01:28:27.520 --> 01:28:29.520]  допустим там
[01:28:29.520 --> 01:28:31.520]  полный граф на 100 тысяч вершин.
[01:28:31.520 --> 01:28:33.520]  Ну, вот граф слишком большой,
[01:28:33.520 --> 01:28:35.520]  поэтому задается интерактором.
[01:28:35.520 --> 01:28:37.520]  Найдите Гамильтонов... Скажите, пожалуйста,
[01:28:37.520 --> 01:28:39.520]  существует ли у Гамильтонов путь за...
[01:28:39.520 --> 01:28:41.520]  Я не знаю, сколько там...
[01:28:41.520 --> 01:28:43.520]  Там 5 миллионов запросов.
[01:28:43.520 --> 01:28:45.520]  Ну, да. Придется, да.
[01:28:45.520 --> 01:28:47.520]  Придется пилить декартач.
[01:28:47.520 --> 01:28:49.520]  Ну, декартач в том плане, чтобы там искать
[01:28:49.520 --> 01:28:51.520]  катую в вашем порядке вершину и вставлять
[01:28:51.520 --> 01:28:53.520]  куда-то там что-то там.
[01:28:53.520 --> 01:28:55.520]  Вот.
[01:28:55.520 --> 01:28:57.520]  Ну, или корневухой там вставлять еще можно, уже не важно.
[01:28:57.520 --> 01:28:59.520]  Может, так...
[01:28:59.520 --> 01:29:01.520]  Может, так проще будет, я не знаю.
[01:29:01.520 --> 01:29:03.520]  А чего бы и нет, пожалуйста.
[01:29:03.520 --> 01:29:05.520]  Нет, ну, зачем...
[01:29:05.520 --> 01:29:07.520]  Нет, там фишка такая.
[01:29:07.520 --> 01:29:09.520]  Вставлять-то вы будете корневухой, но как бы искать
[01:29:09.520 --> 01:29:11.520]  все равно бинпоиском за энлога, за алгорифом.
[01:29:11.520 --> 01:29:13.520]  В этом смысле все нормально.
[01:29:13.520 --> 01:29:15.520]  Вот.
[01:29:15.520 --> 01:29:17.520]  Ну, просто вставлять будет чуть удобнее, но, впрочем,
[01:29:17.520 --> 01:29:19.520]  это как бы для тех, кто не любит писать декартач.
[01:29:19.520 --> 01:29:21.520]  В принципе, ничего сложного
[01:29:21.520 --> 01:29:23.520]  в нем нету, но уже...
[01:29:23.520 --> 01:29:25.520]  Ладно, если вы уже написали задачу про
[01:29:25.520 --> 01:29:27.520]  какой-нибудь там поиск
[01:29:27.520 --> 01:29:29.520]  next permutation подотрески, то, в общем-то,
[01:29:29.520 --> 01:29:31.520]  после этого, наверное, написать декартач
[01:29:31.520 --> 01:29:33.520]  уже проблемы нет.
[01:29:33.520 --> 01:29:35.520]  Или там сплей.
[01:29:35.520 --> 01:29:37.520]  Или AVL.
[01:29:37.520 --> 01:29:39.520]  Ну, и так далее. Так, ладно.
[01:29:39.520 --> 01:29:41.520]  Так, ладно.
[01:29:41.520 --> 01:29:43.520]  Так, господи.
[01:29:43.520 --> 01:29:45.520]  Так.
[01:29:45.520 --> 01:29:47.520]  А говорили мы вообще-то об одицепях, да?
[01:29:47.520 --> 01:29:49.520]  Ну, хорошо.
[01:29:49.520 --> 01:29:51.520]  Да, то есть...
[01:29:51.520 --> 01:29:53.520]  А, это мы... Почему у нас это возникло?
[01:29:53.520 --> 01:29:55.520]  Потому что мы неожиданно сказали, что
[01:29:55.520 --> 01:29:57.520]  да, цепи антицепи.
[01:29:57.520 --> 01:29:59.520]  Почему они так называются?
[01:29:59.520 --> 01:30:01.520]  Потому что я тут мог сказать просто множество вершин,
[01:30:01.520 --> 01:30:03.520]  любые две из которых попарно сравнимы,
[01:30:03.520 --> 01:30:05.520]  они бы все равно оказались в последовательности.
[01:30:05.520 --> 01:30:07.520]  Вот.
[01:30:07.520 --> 01:30:09.520]  Ну, собственно,
[01:30:09.520 --> 01:30:11.520]  теорема, которую нам очень
[01:30:11.520 --> 01:30:13.520]  захочется доказать,
[01:30:13.520 --> 01:30:15.520]  и более этого, честно говоря,
[01:30:15.520 --> 01:30:17.520]  я бы ее до перерыва доказал,
[01:30:17.520 --> 01:30:19.520]  потому что после перерыва у нас начнется шоу совсем
[01:30:19.520 --> 01:30:21.520]  с этим не связанное.
[01:30:21.520 --> 01:30:23.520]  Тема...
[01:30:23.520 --> 01:30:25.520]  То есть...
[01:30:25.520 --> 01:30:27.520]  Минимальное
[01:30:27.520 --> 01:30:29.520]  количество цепей...
[01:30:29.520 --> 01:30:31.520]  Да.
[01:30:31.520 --> 01:30:33.520]  Это теорема Диллерта, собственно.
[01:30:33.520 --> 01:30:35.520]  И Дилл Уорса там по-разному не называют.
[01:30:35.520 --> 01:30:37.520]  Вот.
[01:30:37.520 --> 01:30:39.520]  Ну, просто это из цикла.
[01:30:39.520 --> 01:30:41.520]  Задача. Как прочитать вот эту фамилию?
[01:30:45.520 --> 01:30:47.520]  Вот.
[01:30:47.520 --> 01:30:49.520]  Ну, я не знаю. Я ее читаю Диллерт.
[01:30:49.520 --> 01:30:51.520]  Ну, там другие есть версии Дилл Уорс.
[01:30:53.520 --> 01:30:55.520]  А шо б я знал?
[01:30:57.520 --> 01:30:59.520]  Ну, где-то они?
[01:31:01.520 --> 01:31:03.520]  Нет, ну просто вот слово Уорс,
[01:31:03.520 --> 01:31:05.520]  например, явно вы там, наверное, прочитаете
[01:31:05.520 --> 01:31:07.520]  как Уорса, а не Уорт.
[01:31:07.520 --> 01:31:09.520]  Наверное, да?
[01:31:09.520 --> 01:31:11.520]  Расхождение от американец.
[01:31:19.520 --> 01:31:21.520]  Ну, вот.
[01:31:21.520 --> 01:31:23.520]  Так, ладно, давайте мы
[01:31:23.520 --> 01:31:25.520]  и для конечного.
[01:31:29.520 --> 01:31:31.520]  Значит, короче, минимальное количество цепей,
[01:31:31.520 --> 01:31:33.520]  покрывающих чум конечного размера.
[01:31:33.520 --> 01:31:35.520]  Ну, покрывающий, понятно, значит, что каждая вершина хоть
[01:31:35.520 --> 01:31:37.520]  в одной цепи лежит.
[01:31:37.520 --> 01:31:39.520]  Так, заметьте, кстати, нам здесь даже не принципиально
[01:31:39.520 --> 01:31:41.520]  там пересекаются ли эти цепи.
[01:31:41.520 --> 01:31:43.520]  Потому что если они пересекаются,
[01:31:43.520 --> 01:31:45.520]  то они не пересекаются,
[01:31:45.520 --> 01:31:47.520]  то они не пересекаются.
[01:31:47.520 --> 01:31:49.520]  Потому что если они пересекаются,
[01:31:49.520 --> 01:31:51.520]  то давайте возьмем точку переченья
[01:31:51.520 --> 01:31:53.520]  и с какого-нибудь из пути ее просто выкинем.
[01:31:53.520 --> 01:31:55.520]  Хуже не станет.
[01:31:55.520 --> 01:31:57.520]  Вот.
[01:31:57.520 --> 01:31:59.520]  Так вот, минимальное количество
[01:31:59.520 --> 01:32:01.520]  таких цепей равно
[01:32:01.520 --> 01:32:03.520]  максимальному
[01:32:03.520 --> 01:32:05.520]  размеру антицепей.
[01:32:17.520 --> 01:32:19.520]  Ну, на всякий случай скажем, в этом же чуме.
[01:32:23.520 --> 01:32:25.520]  А то мало, а то мало ли, да.
[01:32:27.520 --> 01:32:29.520]  Вот. Нет, мало ли, потому что
[01:32:29.520 --> 01:32:31.520]  на разном максимальном размере антицепей в чуме,
[01:32:31.520 --> 01:32:33.520]  который строится по этому каким-то там
[01:32:33.520 --> 01:32:35.520]  экзотическим образом.
[01:32:35.520 --> 01:32:37.520]  Берем то же самое, только строим там вторую крышу,
[01:32:37.520 --> 01:32:39.520]  вот это все.
[01:32:39.520 --> 01:32:41.520]  И более того, на поверху оказывается,
[01:32:41.520 --> 01:32:43.520]  что ищется это максимально антицепей
[01:32:43.520 --> 01:32:45.520]  вполне себе алгоритмическим образом.
[01:32:45.520 --> 01:32:47.520]  Ну, потому что давайте сразу скажем,
[01:32:47.520 --> 01:32:49.520]  как нам вообще найти
[01:32:49.520 --> 01:32:51.520]  вот это
[01:32:51.520 --> 01:32:53.520]  минимальное количество цепей?
[01:32:53.520 --> 01:32:55.520]  Как мы уже с вами убедились,
[01:32:55.520 --> 01:32:57.520]  это делается там
[01:32:57.520 --> 01:32:59.520]  раздвоением чума
[01:32:59.520 --> 01:33:01.520]  и поиском просочетания,
[01:33:01.520 --> 01:33:03.520]  правда?
[01:33:03.520 --> 01:33:05.520]  Понимаете, да?
[01:33:05.520 --> 01:33:07.520]  То есть, ну находим
[01:33:07.520 --> 01:33:09.520]  какой-нибудь там максимально, то есть получается
[01:33:09.520 --> 01:33:11.520]  у меня такой же штрих
[01:33:11.520 --> 01:33:13.520]  и находится максимальное просочетание.
[01:33:13.520 --> 01:33:15.520]  И мы понимаем,
[01:33:15.520 --> 01:33:17.520]  что вот это вот количество цепей
[01:33:19.520 --> 01:33:21.520]  оно равно на самом деле к чему?
[01:33:21.520 --> 01:33:23.520]  Оно разно...
[01:33:23.520 --> 01:33:25.520]  Ну вот.
[01:33:31.520 --> 01:33:33.520]  Да, то есть размер
[01:33:33.520 --> 01:33:35.520]  g, ну пусть мне...
[01:33:35.520 --> 01:33:37.520]  Ну давайте до a.
[01:33:37.520 --> 01:33:39.520]  Хорошо, давайте a, а это а штрих, хорошо.
[01:33:39.520 --> 01:33:41.520]  Да, минус
[01:33:41.520 --> 01:33:43.520]  pi от а штрих.
[01:33:43.520 --> 01:33:45.520]  Логично, да?
[01:33:47.520 --> 01:33:49.520]  А теперь оказывается
[01:33:49.520 --> 01:33:51.520]  неожиданной идеей.
[01:33:51.520 --> 01:33:53.520]  Нашли множество, у которых столько
[01:33:53.520 --> 01:33:55.520]  антицепей.
[01:33:55.520 --> 01:33:57.520]  Это количество цепей, да, да, вот.
[01:33:57.520 --> 01:33:59.520]  Так, ну во-первых, заметь...
[01:33:59.520 --> 01:34:01.520]  Так, да, начнем со следующего.
[01:34:01.520 --> 01:34:03.520]  Начнем с того, что антицепь...
[01:34:03.520 --> 01:34:05.520]  Начнем с того, что
[01:34:05.520 --> 01:34:07.520]  антицепь больше, чем стока,
[01:34:07.520 --> 01:34:09.520]  мы точно не найдем.
[01:34:11.520 --> 01:34:13.520]  Логично, да?
[01:34:13.520 --> 01:34:15.520]  Да, для каждой...
[01:34:15.520 --> 01:34:17.520]  Ну просто для каждой вершины
[01:34:17.520 --> 01:34:19.520]  антицепи
[01:34:19.520 --> 01:34:21.520]  должна быть своя отдельная цепь.
[01:34:21.520 --> 01:34:23.520]  Вот.
[01:34:23.520 --> 01:34:25.520]  Так что наша
[01:34:25.520 --> 01:34:27.520]  теперь задача, хорошо, то есть
[01:34:27.520 --> 01:34:29.520]  минимальное количество цепей мы уже поняли.
[01:34:29.520 --> 01:34:31.520]  Оно равно вот этому, это мы уже знаем.
[01:34:35.520 --> 01:34:37.520]  Знаем, знаем.
[01:34:37.520 --> 01:34:39.520]  Колеса цепей не превосходят...
[01:34:41.520 --> 01:34:43.520]  Нет.
[01:34:43.520 --> 01:34:45.520]  Нет.
[01:34:45.520 --> 01:34:47.520]  А про антицепь, да.
[01:34:47.520 --> 01:34:49.520]  Пока мы знаем только больше либо равно.
[01:34:49.520 --> 01:34:51.520]  То есть мы знаем, что
[01:34:51.520 --> 01:34:53.520]  вот эта штука больше либо равна максимального
[01:34:53.520 --> 01:34:55.520]  размера антицепи.
[01:34:55.520 --> 01:34:57.520]  Потому что такое
[01:34:57.520 --> 01:34:59.520]  количество цепей, во-первых, оно минимального,
[01:34:59.520 --> 01:35:01.520]  во-вторых, оно точно есть.
[01:35:01.520 --> 01:35:03.520]  Это означает, что
[01:35:03.520 --> 01:35:05.520]  антицепь размера больше, чем стока,
[01:35:05.520 --> 01:35:07.520]  вы не найдете в принципе.
[01:35:07.520 --> 01:35:09.520]  Но правда, может, мы...
[01:35:09.520 --> 01:35:11.520]  Так что теперь...
[01:35:11.520 --> 01:35:13.520]  Нет, мы ее еще не нашли.
[01:35:13.520 --> 01:35:15.520]  Нет, когда антицепь вот такого размера,
[01:35:15.520 --> 01:35:17.520]  мы еще не нашли.
[01:35:17.520 --> 01:35:19.520]  Но ша найдем.
[01:35:21.520 --> 01:35:23.520]  Последние вершины тут ни при чем.
[01:35:23.520 --> 01:35:25.520]  Смотрите.
[01:35:25.520 --> 01:35:27.520]  Шаманство тут вот какое.
[01:35:29.520 --> 01:35:31.520]  Значит, что такое антицепь?
[01:35:33.520 --> 01:35:35.520]  На самом деле
[01:35:35.520 --> 01:35:37.520]  антицепи по идее, чтобы тут никакие две вершины
[01:35:37.520 --> 01:35:39.520]  не были соединены ребром.
[01:35:41.520 --> 01:35:43.520]  В терминах двудольного графа
[01:35:43.520 --> 01:35:45.520]  это означает,
[01:35:45.520 --> 01:35:47.520]  что вы должны взять прям пары вершин,
[01:35:47.520 --> 01:35:49.520]  и эти пары вершин тут никакими ребрами
[01:35:49.520 --> 01:35:51.520]  не соединены.
[01:35:51.520 --> 01:35:53.520]  Так вот, как мы это сделаем?
[01:35:53.520 --> 01:35:55.520]  Значит, найдем в этом графе
[01:35:55.520 --> 01:35:57.520]  максимальное независимое множество.
[01:35:59.520 --> 01:36:01.520]  Как оно будет...
[01:36:01.520 --> 01:36:03.520]  Как оно будет устроено?
[01:36:03.520 --> 01:36:05.520]  Ну, заметим, что в каких-то парах никакие вершины
[01:36:05.520 --> 01:36:07.520]  будут взяты, в каких-то парах
[01:36:07.520 --> 01:36:09.520]  будет взято по одной вершине,
[01:36:09.520 --> 01:36:11.520]  а в каких-то парах
[01:36:11.520 --> 01:36:13.520]  будут взяты прям обе вершины.
[01:36:13.520 --> 01:36:15.520]  Правда?
[01:36:15.520 --> 01:36:17.520]  Видно.
[01:36:17.520 --> 01:36:19.520]  Максимальное независимое
[01:36:19.520 --> 01:36:21.520]  множество в этом двудольном графе.
[01:36:23.520 --> 01:36:25.520]  Просто его рассмотрим.
[01:36:25.520 --> 01:36:27.520]  И заметим, что
[01:36:27.520 --> 01:36:29.520]  какие-то... Вот у меня все вершины
[01:36:29.520 --> 01:36:31.520]  в двудольном графе делятся на пары.
[01:36:31.520 --> 01:36:33.520]  Вот это а штрих, а 2 штрих, а b штрих, b 2 штрих, а вот это.
[01:36:33.520 --> 01:36:35.520]  Так вот, в каждой паре
[01:36:35.520 --> 01:36:37.520]  у меня в независимое множество
[01:36:37.520 --> 01:36:39.520]  входит либо 0 вершин, либо 1 вершина,
[01:36:39.520 --> 01:36:41.520]  либо 2 вершины.
[01:36:41.520 --> 01:36:43.520]  Так вот, рассмотрим вот эти пары вершин.
[01:36:43.520 --> 01:36:45.520]  Заметим, что эти пары вершин,
[01:36:45.520 --> 01:36:47.520]  они соответствуют какому-то... То есть вот
[01:36:47.520 --> 01:36:49.520]  набор вот этих пар вершин, которые попали
[01:36:49.520 --> 01:36:51.520]  в независимое множество, они в исходном
[01:36:51.520 --> 01:36:53.520]  графе соответствуют антицепи.
[01:36:55.520 --> 01:36:57.520]  Логично, да?
[01:36:59.520 --> 01:37:01.520]  Вот.
[01:37:01.520 --> 01:37:03.520]  То есть вот такой антицепи.
[01:37:03.520 --> 01:37:05.520]  Теперь рассмотрим, сколько этих двойчик
[01:37:05.520 --> 01:37:07.520]  здесь есть?
[01:37:13.520 --> 01:37:15.520]  Да, столько же сколько двойчик
[01:37:15.520 --> 01:37:17.520]  в заполнении.
[01:37:17.520 --> 01:37:19.520]  Да, ну вот.
[01:37:21.520 --> 01:37:23.520]  Ну вот.
[01:37:25.520 --> 01:37:27.520]  Так.
[01:37:27.520 --> 01:37:29.520]  Сейчас, ну давай, ну вот.
[01:37:29.520 --> 01:37:31.520]  То сколько и двойчик, надо пооценивать.
[01:37:31.520 --> 01:37:33.520]  Потому что, в принципе,
[01:37:33.520 --> 01:37:35.520]  ну давайте тут попишем, к чему равно
[01:37:35.520 --> 01:37:37.520]  значит, вот это у нас
[01:37:37.520 --> 01:37:39.520]  количество цепей.
[01:37:39.520 --> 01:37:41.520]  Оно равно a-p от а'.
[01:37:41.520 --> 01:37:43.520]  Но мы знаем, что p от а'.
[01:37:43.520 --> 01:37:45.520]  У нас есть теория о том, что это,
[01:37:45.520 --> 01:37:47.520]  давайте вот пишем, что это
[01:37:47.520 --> 01:37:49.520]  модуль a-tau от а'.
[01:37:53.520 --> 01:37:55.520]  Вот.
[01:37:55.520 --> 01:37:57.520]  Но tau от а' к чему равно?
[01:37:59.520 --> 01:38:01.520]  Нет.
[01:38:01.520 --> 01:38:03.520]  Оно равно размеру двудольного графа.
[01:38:03.520 --> 01:38:05.520]  А размер двудольного графа это вот.
[01:38:05.520 --> 01:38:07.520]  Минус
[01:38:07.520 --> 01:38:09.520]  а' от а'.
[01:38:11.520 --> 01:38:13.520]  Понятно, да?
[01:38:15.520 --> 01:38:17.520]  Ну вот. То есть равно
[01:38:17.520 --> 01:38:19.520]  а'
[01:38:19.520 --> 01:38:21.520]  минус модуль a.
[01:38:23.520 --> 01:38:25.520]  То есть вот такая штука.
[01:38:29.520 --> 01:38:31.520]  То есть вывод.
[01:38:31.520 --> 01:38:33.520]  Вывод очень простой.
[01:38:33.520 --> 01:38:35.520]  Вывод.
[01:38:35.520 --> 01:38:37.520]  α от а' равно
[01:38:37.520 --> 01:38:39.520]  модуль
[01:38:39.520 --> 01:38:41.520]  a
[01:38:41.520 --> 01:38:43.520]  плюс
[01:38:43.520 --> 01:38:45.520]  количество цепей.
[01:38:47.520 --> 01:38:49.520]  Ну что это означает?
[01:38:49.520 --> 01:38:51.520]  У нас паре вершин
[01:38:51.520 --> 01:38:53.520]  всего a.
[01:38:53.520 --> 01:38:55.520]  А в независимом множестве
[01:38:55.520 --> 01:38:57.520]  модуль a плюс
[01:38:57.520 --> 01:38:59.520]  вот столько вершин.
[01:39:01.520 --> 01:39:03.520]  Но отсюда автоматически следует, что пар
[01:39:03.520 --> 01:39:05.520]  вот этих вот синих пар взятых
[01:39:05.520 --> 01:39:07.520]  в независимое множество окажется
[01:39:07.520 --> 01:39:09.520]  хотя бы вот столько.
[01:39:15.520 --> 01:39:17.520]  Сейчас еще раз.
[01:39:17.520 --> 01:39:19.520]  Колеса цепей равняется
[01:39:19.520 --> 01:39:21.520]  а-tau.
[01:39:21.520 --> 01:39:23.520]  Ну да.
[01:39:23.520 --> 01:39:25.520]  Ну tau мы не замечаем, а просто
[01:39:25.520 --> 01:39:27.520]  что такое tau?
[01:39:27.520 --> 01:39:29.520]  tau это размер графа
[01:39:29.520 --> 01:39:31.520]  минус а.
[01:39:35.520 --> 01:39:37.520]  Да, ну вот мы это выявили сейчас.
[01:39:37.520 --> 01:39:39.520]  Смотрите.
[01:39:39.520 --> 01:39:41.520]  Независимое множество в а'
[01:39:41.520 --> 01:39:43.520]  в каждой доле
[01:39:43.520 --> 01:39:45.520]  ровно по модуль a вершин.
[01:39:45.520 --> 01:39:47.520]  А в альфу
[01:39:47.520 --> 01:39:49.520]  попала
[01:39:49.520 --> 01:39:51.520]  модуль a плюс количество цепей.
[01:39:51.520 --> 01:39:53.520]  Вывод. Я утверждаю, что из этого следует
[01:39:53.520 --> 01:39:55.520]  следующее, что вот этих пар
[01:39:55.520 --> 01:39:57.520]  вершин, именно пар вершин,
[01:39:57.520 --> 01:39:59.520]  которые попали в независимое множество их
[01:39:59.520 --> 01:40:01.520]  хотя бы количество цепей.
[01:40:03.520 --> 01:40:05.520]  Но тогда заметим, что этих
[01:40:05.520 --> 01:40:07.520]  если у нас есть получается
[01:40:07.520 --> 01:40:09.520]  в независимом множестве, то есть есть множество
[01:40:09.520 --> 01:40:11.520]  независимых пар размера хотя бы
[01:40:11.520 --> 01:40:13.520]  количества цепей.
[01:40:13.520 --> 01:40:15.520]  Но
[01:40:15.520 --> 01:40:17.520]  так как этим паром соответствует антицепь
[01:40:17.520 --> 01:40:19.520]  такого же размера то получается, что мы и нашли
[01:40:19.520 --> 01:40:21.520]  в явном виде антицепь размера
[01:40:21.520 --> 01:40:31.880]  не меньше, чем вот столько, потому что количество пар всего а.
[01:40:37.280 --> 01:40:41.600]  Я могу тут расписать формальное доказательство, но желательно это увидеть.
[01:40:52.120 --> 01:40:56.480]  Ну нет, но это опять приведет к формальному доказательству скорее,
[01:40:56.480 --> 01:41:01.600]  конечно, потому что я бы сказал так, вообразите, в каждой паре мы берем 0, 1 или 2, правда?
[01:41:01.600 --> 01:41:09.400]  Что вообще такое пары? Это вот синим, то есть что отмечен, это независимо множество, правильно?
[01:41:09.400 --> 01:41:14.240]  Да, ну вот так, потому что вспоминаем, как мы вообще искали минимальное количество цепей,
[01:41:14.240 --> 01:41:19.600]  как мы этот граф удольно вообще строили. Мы каждую вершину в чуме раздваивали, вот так вот,
[01:41:19.600 --> 01:41:25.480]  да? И потом, значит, раздвоили, нашли просочетание, нашли независимое множество. Так вот,
[01:41:25.480 --> 01:41:31.720]  я говорю, что пара попала в независимое множество. Если у меня там х- и х-2-, так вот,
[01:41:31.720 --> 01:41:36.360]  теперь я утверждаю, что вот раз мы доказали, что независимое множество имеет вот такой размер.
[01:41:36.360 --> 01:41:42.720]  Так вот, я утверждаю, что количество пар, попавших в это независимое множество, хотя бы вот столько.
[01:41:49.600 --> 01:42:04.620]  Но количество пар в исходном чуме это антицепь, поэтому
[01:42:04.620 --> 01:42:11.100]  я хочу сейчас доказать, что у меня сейчас в этом
[01:42:11.100 --> 01:42:15.180]  независимом множестве найдется, то есть взято хотя бы вот
[01:42:15.180 --> 01:42:17.580]  столько пар.
[01:42:17.580 --> 01:42:22.580]  Так я это докажу, независимое множество у меня вот столько.
[01:42:22.580 --> 01:42:28.220]  Я скажу так, наберем это независимое множество
[01:42:28.220 --> 01:42:29.220]  следующим образом.
[01:42:29.220 --> 01:42:35.780]  Если в паре нет ни одной вершины, то я ее приигнорирую.
[01:42:35.780 --> 01:42:36.780]  Сделаем так.
[01:42:36.780 --> 01:42:38.580]  Давайте в каждой паре, в котором взята хотя бы
[01:42:38.580 --> 01:42:42.780]  одна вершина, я эту одну вершину возьму себе множество.
[01:42:42.780 --> 01:42:44.980]  Беру, беру, беру, в общем любую пока, неважно.
[01:42:44.980 --> 01:42:53.460]  Тем самым я взял себе, то есть теперь каждая следующая
[01:42:53.460 --> 01:42:58.260]  вершина взятая, она будет давать новую пару, но при
[01:42:58.260 --> 01:43:01.260]  этом до этого пока, так как я из каждой пары взял
[01:43:01.260 --> 01:43:03.220]  не более одной вершины, то я взял не более чем вот
[01:43:03.220 --> 01:43:04.220]  столько.
[01:43:04.220 --> 01:43:06.500]  Следовательно, дальше я должен взять не менее чем
[01:43:06.500 --> 01:43:10.380]  вот столько, следовательно паре, следовательно пар
[01:43:10.380 --> 01:43:11.380]  я столько найду.
[01:43:11.780 --> 01:43:17.900]  То есть более того, получается даже алгоритм, построим
[01:43:17.900 --> 01:43:20.940]  такой граф, найдем независимое множество, рассмотрим все
[01:43:20.940 --> 01:43:23.780]  вершины, которые прям парами туда вошли, вот вам антицепь.
[01:43:24.780 --> 01:43:31.180]  Теорема-близнец этой теоремы, это более общий случай утверждения
[01:43:31.180 --> 01:43:33.180]  про турнир.
[01:43:33.180 --> 01:43:39.180]  Ну в турнире у нас покрытие антицепями единственное,
[01:43:39.180 --> 01:43:45.180]  это ну типа все антицепи, все вершины это отдельная
[01:43:45.180 --> 01:43:46.180]  антицепь.
[01:43:46.180 --> 01:43:50.180]  Тогда соответственно, если мы воспользуемся теоремой
[01:43:50.580 --> 01:43:55.580]  Близнеццом этой теоремы, то мы получим, что в турнире
[01:43:55.580 --> 01:43:59.580]  есть цель длины N.
[01:43:59.580 --> 01:44:05.580]  Ну вот тут возникает вопрос, а что такое близнец?
[01:44:05.580 --> 01:44:07.580]  Тут не очень понятно, да?
[01:44:07.580 --> 01:44:11.580]  Все-все-все, я не прав, турнир не обязательно ЧУ.
[01:44:11.580 --> 01:44:17.580]  Да, ну нет, если он да, если он ациклический, то конечно
[01:44:17.580 --> 01:44:18.580]  да.
[01:44:19.580 --> 01:44:22.580]  Правда, если он ациклический, то доказать, что он гамиль
[01:44:22.580 --> 01:44:24.580]  в пути есть, это тривиально, потому что сделаем топ-сорт.
[01:44:28.580 --> 01:44:32.580]  Да, не находим независимое множество, а в этом независимом
[01:44:32.580 --> 01:44:36.580]  множестве находим все пары вершин, которые попали.
[01:44:41.580 --> 01:44:42.580]  Нету.
[01:44:42.580 --> 01:44:45.580]  Нет, ребра из а штрих во два штриха мы не добавляем
[01:44:45.580 --> 01:44:46.580]  никогда.
[01:44:46.580 --> 01:44:47.580]  Не добавляем.
[01:44:47.580 --> 01:44:48.580]  Нет.
[01:44:48.580 --> 01:44:49.580]  Вот.
[01:44:49.580 --> 01:44:50.580]  То есть нет.
[01:44:50.580 --> 01:44:52.580]  Этого мы не добавляем, этого нам не нужно.
[01:44:52.580 --> 01:44:53.580]  Вот.
[01:44:53.580 --> 01:44:55.580]  Так что вот и оно вот.
[01:44:55.580 --> 01:44:57.580]  То есть находим независимое множество, находим пары,
[01:44:57.580 --> 01:44:59.580]  все, это антицепь автоматически.
[01:44:59.580 --> 01:45:01.580]  Так что вот такая приятная вещь.
[01:45:01.580 --> 01:45:04.580]  То есть вот так, что если потребуется.
[01:45:04.580 --> 01:45:07.580]  Так, есть ли тут какие-то вопросы?
[01:45:10.580 --> 01:45:11.580]  Так, нету.
[01:45:11.580 --> 01:45:14.580]  Ну ладно, вроде как о просочетаниях это все, что я хотел сказать.
[01:45:14.580 --> 01:45:17.580]  Поэтому, значит, пришло время перерыва, после которого
[01:45:17.580 --> 01:45:20.580]  там перейдем уже плотненько в потоки.
[01:45:20.580 --> 01:45:23.580]  Ну, точнее так, потому что сейчас как бы план действий
[01:45:23.580 --> 01:45:25.580]  на самом деле с точки зрения глобальной теории потоков
[01:45:25.580 --> 01:45:26.580]  у нас сейчас такой.
[01:45:26.580 --> 01:45:29.580]  Ну начать мы должны будем с вами с того, что наконец-то
[01:45:29.580 --> 01:45:31.580]  доказательность Акарпа.
[01:45:31.580 --> 01:45:35.580]  А дальше мы перейдем к, называется двум просто,
[01:45:35.580 --> 01:45:38.580]  можно сказать, парадигмам поиска потока продвинутым.
[01:45:38.580 --> 01:45:41.580]  Там парадигма это, или концепция, в этом бы первая будет
[01:45:41.580 --> 01:45:44.580]  концепция блокирующих потоков, видным представителем которого
[01:45:44.580 --> 01:45:47.580]  является алгоритм Диница.
[01:45:47.580 --> 01:45:48.580]  Вот.
[01:45:48.580 --> 01:45:50.580]  А второе это будет уже что-то принципиально другое.
[01:45:50.580 --> 01:45:55.580]  Это будет концепция, соответственно, даже концепция push relabel.
[01:45:55.580 --> 01:45:58.580]  Она более известна как технология Голдберга.
[01:45:58.580 --> 01:46:02.580]  Да, как всегда, еще одного американского математика.
[01:46:02.580 --> 01:46:05.580]  Как вы уже помните, да, Эндрю и Владислав Голдберг,
[01:46:05.580 --> 01:46:06.580]  но это я уже говорил.
[01:46:06.580 --> 01:46:07.580]  Вот.
[01:46:07.580 --> 01:46:10.580]  Да, Эндрю и Владислав, да.
[01:46:10.580 --> 01:46:13.580]  American scientist, да.
[01:46:13.580 --> 01:46:15.580]  Как всегда.
[01:46:15.580 --> 01:46:17.580]  Вот.
[01:46:17.580 --> 01:46:20.580]  Так что соответственно, да, причем обе концепции у нас будут
[01:46:20.580 --> 01:46:24.580]  почти нечейные в том плане, что обе нам позволят
[01:46:24.580 --> 01:46:27.580]  искать потоки закуп.
[01:46:27.580 --> 01:46:28.580]  Вот.
[01:46:28.580 --> 01:46:30.580]  Но правда, блокирующие потоки нам дадут, конечно,
[01:46:30.580 --> 01:46:33.580]  чуть попроще, потому что, ну не попроще,
[01:46:33.580 --> 01:46:35.580]  но с помощью блокирующих потоков у нас появятся алгоритмы,
[01:46:35.580 --> 01:46:40.580]  как сказать, поток за VE log C и VE log V.
[01:46:40.580 --> 01:46:43.580]  В чем VE log C достаточно халявно даже.
[01:46:43.580 --> 01:46:44.580]  Вот.
[01:46:44.580 --> 01:46:49.580]  Но VE log V это элементарно,
[01:46:49.580 --> 01:46:56.580]  типа возьмите единицы и забабахайте туда линкат.
[01:46:56.580 --> 01:47:00.580]  Да, идейно будет очень просто, но линкат, да.
[01:47:00.580 --> 01:47:04.580]  Но вы, по крайней мере, с вами в отличие от ваших многих предшественников
[01:47:04.580 --> 01:47:08.580]  как бы научились доказывать, что линкат работает с алгоритмами.
[01:47:08.580 --> 01:47:11.580]  Ну, предшественников не совсем прям предыдущих, конечно,
[01:47:11.580 --> 01:47:13.580]  но вот как бы предыдущие уже как минимум два поколения
[01:47:13.580 --> 01:47:17.580]  как бы линкат умеют.
[01:47:17.580 --> 01:47:20.580]  Нет, ну да, Катя, пора я мне точно это писала.
[01:47:20.580 --> 01:47:22.580]  Так, а до этого...
[01:47:22.580 --> 01:47:24.580]  Ладно, не важно.
[01:47:24.580 --> 01:47:25.580]  Вот.
[01:47:25.580 --> 01:47:27.580]  Значит, дальше.
[01:47:27.580 --> 01:47:29.580]  Ну вот и так.
[01:47:29.580 --> 01:47:31.580]  Ну вот.
[01:47:31.580 --> 01:47:32.580]  Значит.
[01:47:32.580 --> 01:47:33.580]  Так.
[01:47:33.580 --> 01:47:34.580]  Ладно.
[01:47:34.580 --> 01:47:37.580]  Давайте начнем с маленькой разминочки.
[01:47:37.580 --> 01:47:42.580]  В роли разминочки у нас будет алгоритм Эдмонса Карпа.
[01:47:42.580 --> 01:47:43.580]  И так.
[01:47:43.580 --> 01:47:46.580]  Точнее его доказательства.
[01:47:46.580 --> 01:47:47.580]  Вот.
[01:47:47.580 --> 01:47:48.580]  То есть сам по себе...
[01:47:48.580 --> 01:47:49.580]  Да.
[01:47:49.580 --> 01:47:50.580]  Что такое алгоритм Эдмонса Карпа?
[01:47:50.580 --> 01:47:51.580]  Алгоритм-то, конечно, тривиальный.
[01:47:51.580 --> 01:47:52.580]  Потому что...
[01:47:52.580 --> 01:47:54.580]  То есть тривиальный по формулировке имеется в виду.
[01:47:54.580 --> 01:47:57.580]  Потому что мы берем просто метод Форда Фолкерсона
[01:47:57.580 --> 01:47:59.580]  и ищем пути BFS.
[01:47:59.580 --> 01:48:02.580]  Да, то есть запускаем BFS по всем ребрам
[01:48:02.580 --> 01:48:05.580]  с любой пропускной остаточной способностью.
[01:48:05.580 --> 01:48:07.580]  Понятно, да?
[01:48:07.580 --> 01:48:12.580]  И вот возникает мистическая теория.
[01:48:12.580 --> 01:48:18.580]  Алгоритм Эдмонса Карпа работает за ВЗ квадрат.
[01:48:18.580 --> 01:48:21.580]  Или я ее переформулирую немножко по-другому.
[01:48:21.580 --> 01:48:28.580]  Эдмонса Карпа выполняет...
[01:48:28.580 --> 01:48:35.580]  Не более чем...
[01:48:35.580 --> 01:48:36.580]  Ладно.
[01:48:36.580 --> 01:48:42.580]  ВЕ итерации ФФ.
[01:48:42.580 --> 01:48:48.580]  Да, формулировочка у нас, конечно, да.
[01:48:48.580 --> 01:48:52.580]  Алгоритм ЭК выполняет ВЕ итерации ФФ.
[01:48:52.580 --> 01:48:53.580]  Нормально.
[01:48:54.580 --> 01:48:57.580]  Ну ладно, фураха не такое будет.
[01:49:00.580 --> 01:49:03.580]  Ну Форд Фолкерсон тоже через DFS.
[01:49:03.580 --> 01:49:05.580]  Да, действительно.
[01:49:06.580 --> 01:49:07.580]  Да.
[01:49:07.580 --> 01:49:08.580]  Да, согласен.
[01:49:08.580 --> 01:49:09.580]  Давайте.
[01:49:09.580 --> 01:49:11.580]  Ладно, хорошо, хорошо.
[01:49:16.580 --> 01:49:17.580]  Чего?
[01:49:17.580 --> 01:49:18.580]  Ну алг...
[01:49:18.580 --> 01:49:21.580]  Это нормально, потому что это сокращение слова.
[01:49:23.580 --> 01:49:24.580]  Чего?
[01:49:29.580 --> 01:49:33.580]  Нет, ну тут уже совсем перебор, не надо.
[01:49:33.580 --> 01:49:38.580]  Лучше вместо этого сосредоточим свои творческие силы на доказательства.
[01:49:38.580 --> 01:49:42.580]  А доказательство на самом деле базируется на следующей лемме.
[01:49:42.580 --> 01:49:46.580]  То есть базируется оно на такой лемме, что...
[01:49:46.580 --> 01:49:51.580]  Ну скажем так, когда вы ищете BFS, вы находите такую штуку, как D от V.
[01:49:51.580 --> 01:49:54.580]  То есть это расстояние от S до V по количеству гребер.
[01:49:54.580 --> 01:49:55.580]  Понимаете, да?
[01:49:57.580 --> 01:50:01.580]  Так вот, на самом деле высекает такая маленькая лемма.
[01:50:03.580 --> 01:50:13.580]  В процессе ЭК D от V не уменьшается.
[01:50:13.580 --> 01:50:16.580]  То есть не может быть так, что у нас было какое-то расстояние, мы сделали очередную
[01:50:16.580 --> 01:50:20.580]  итерацию от бомса-карпа, и бабах, расстояние D от V стало меньше.
[01:50:23.580 --> 01:50:27.580]  Вот я утверждаю, что в принципе из этой леммы, в общем-то, это все и следует.
[01:50:29.580 --> 01:50:33.580]  Ну давайте поймем, как из этой леммы, в принципе, теорияма следует.
[01:50:33.580 --> 01:50:34.580]  А очень просто.
[01:50:34.580 --> 01:50:37.580]  У нас, как минимум, для одной вершины.
[01:50:37.580 --> 01:50:38.580]  Нет, кстати, не факт.
[01:50:39.580 --> 01:50:42.580]  Как минимум, потому что могут быть кратные ребра и просто такой же путь.
[01:50:43.580 --> 01:50:45.580]  Вот, но фишка такая.
[01:50:45.580 --> 01:50:47.580]  Потому что как из этой леммы следует теорияма?
[01:50:47.580 --> 01:50:48.580]  Следует она вот что.
[01:50:48.580 --> 01:50:54.580]  Дело в том, что каждая итерация форта Фолкерсона, она насыщает какое-то ребро, правда?
[01:50:55.580 --> 01:50:57.580]  Именно насыщает, обратите внимание.
[01:50:57.580 --> 01:50:58.580]  Да?
[01:50:58.580 --> 01:51:01.580]  А как из этой леммы, в принципе, теорияма следует?
[01:51:01.580 --> 01:51:02.580]  Ну теперь у нас возникает вопрос.
[01:51:02.580 --> 01:51:06.580]  А сколько раз каждое ребро может насытиться?
[01:51:11.580 --> 01:51:12.580]  Да, много.
[01:51:12.580 --> 01:51:14.580]  Аж до V пополам.
[01:51:15.580 --> 01:51:16.580]  Но как-то не больше.
[01:51:18.580 --> 01:51:19.580]  Потому что вот какая ситуация.
[01:51:19.580 --> 01:51:21.580]  Вот жило было ребро.
[01:51:22.580 --> 01:51:23.580]  И оно насытилось.
[01:51:24.580 --> 01:51:25.580]  А как-то не больше.
[01:51:25.580 --> 01:51:26.580]  Потому что вот какая ситуация.
[01:51:26.580 --> 01:51:28.580]  Вот жило было ребро.
[01:51:29.580 --> 01:51:30.580]  И оно насытилось.
[01:51:31.580 --> 01:51:35.580]  Но когда оно насытилось, тут было до этой вершины было расстояние L.
[01:51:35.580 --> 01:51:37.580]  А до этой вершины расстояние L плюс 1.
[01:51:38.580 --> 01:51:39.580]  Что?
[01:51:39.580 --> 01:51:40.580]  В Edmunds Cart.
[01:51:40.580 --> 01:51:41.580]  Да, в Edmunds Cart.
[01:51:42.580 --> 01:51:43.580]  Вот.
[01:51:43.580 --> 01:51:44.580]  Теперь возникает вопрос.
[01:51:44.580 --> 01:51:45.580]  Может ли оно насытиться еще раз?
[01:51:46.580 --> 01:51:47.580]  Конечно, может.
[01:51:48.580 --> 01:51:53.580]  Но для этого нужно, чтобы у нас Edmunds Cart прошелся по ребру в обратную сторону.
[01:51:55.580 --> 01:52:01.580]  Но когда это будет происходить, здесь будет расстояние хотя бы L плюс 1,
[01:52:01.580 --> 01:52:03.580]  потому что у нас не уменьшается.
[01:52:04.580 --> 01:52:08.580]  Но тогда вот у этой вершины, если у нас эта вершина там,
[01:52:08.580 --> 01:52:11.580]  там какая-нибудь УВ, то как бы тут у нас ВУ.
[01:52:11.580 --> 01:52:15.580]  И тогда здесь уже будет больше ребра равно, чем L плюс 2.
[01:52:16.580 --> 01:52:18.580]  Значит, появилось это ребро.
[01:52:18.580 --> 01:52:19.580]  А теперь опять обгон.
[01:52:19.580 --> 01:52:21.580]  И теперь у нас должно возникнуть вот это ребро УВ.
[01:52:21.580 --> 01:52:25.580]  Но так как тут уже расстояние хотя бы L плюс 2, тут L плюс 3.
[01:52:25.580 --> 01:52:28.580]  То есть получается, если мы насытили ребро,
[01:52:28.580 --> 01:52:33.580]  то на следующем насыщении расстояние до этих вершин увеличится хотя бы на 2.
[01:52:34.580 --> 01:52:37.580]  Следовательно, насыщение будет не более чем В пополам.
[01:52:40.580 --> 01:52:44.580]  А так как ребер у нас всего, которое могут насыть, это сколько?
[01:52:45.580 --> 01:52:46.580]  Мимо.
[01:52:46.580 --> 01:52:47.580]  Два Е.
[01:52:52.580 --> 01:52:55.580]  Но дело в том, что у нас же насытится, может, обратное ребро.
[01:52:56.580 --> 01:52:59.580]  А Е это у нас все-таки исходное.
[01:53:03.580 --> 01:53:04.580]  Вот.
[01:53:05.580 --> 01:53:07.580]  Нет, мы говорим, что их у нас двое.
[01:53:08.580 --> 01:53:09.580]  Могли по-другому.
[01:53:09.580 --> 01:53:11.580]  Рассмотрим ребро вместе с своим напарником.
[01:53:11.580 --> 01:53:14.580]  Они суммарно насыщаются не более чем в раз к череду.
[01:53:15.580 --> 01:53:16.580]  Как угодно.
[01:53:16.580 --> 01:53:17.580]  Как удобно мыслить.
[01:53:17.580 --> 01:53:18.580]  Идея одна.
[01:53:19.580 --> 01:53:20.580]  Вот.
[01:53:20.580 --> 01:53:21.580]  Но суть одна.
[01:53:21.580 --> 01:53:22.580]  Но суть одна.
[01:53:22.580 --> 01:53:23.580]  В итоге это нам приходит ВЕ.
[01:53:23.580 --> 01:53:26.580]  То есть вот тут действительно тонко, потому что, видите, тут именно ВЕ.
[01:53:26.580 --> 01:53:28.580]  Не от ВЕ, обратите внимание.
[01:53:28.580 --> 01:53:29.580]  Именно ВЕ.
[01:53:30.580 --> 01:53:31.580]  Вот.
[01:53:31.580 --> 01:53:35.580]  Так что таким образом, если мы верим в эту лему, то теория автоматически доказалась.
[01:53:37.580 --> 01:53:41.580]  Но как же мы будем доказывать эту лему?
[01:53:42.580 --> 01:53:43.580]  А доказывать будем так.
[01:53:43.580 --> 01:53:47.580]  Итак, вот пришло время сделать очередную итерацию Эдмонса Карпа.
[01:53:47.580 --> 01:53:49.580]  Мы запустили БФС.
[01:53:53.580 --> 01:53:54.580]  Вот.
[01:53:54.580 --> 01:53:55.580]  Запустили БФС.
[01:53:55.580 --> 01:53:59.580]  И вот, допустим, я нарисую так называемые слои.
[01:54:00.580 --> 01:54:05.580]  Ну то есть здесь у меня будут вершины на расстоянии 1, вершины на расстоянии 2, вершины на расстоянии 3 и так далее.
[01:54:06.580 --> 01:54:07.580]  Вот.
[01:54:07.580 --> 01:54:09.580]  То есть у меня в каком-то слое у меня тут будет Т.
[01:54:09.580 --> 01:54:11.580]  Могут быть, кстати, еще слои за ним.
[01:54:12.580 --> 01:54:13.580]  Вот.
[01:54:13.580 --> 01:54:16.580]  И тогда, значит, как устроены ненасыщенные ребра?
[01:54:16.580 --> 01:54:17.580]  Они устроены так.
[01:54:17.580 --> 01:54:20.580]  То есть есть ребра, которые идут из слоя в следующий.
[01:54:20.580 --> 01:54:22.580]  Такие обязательно будут.
[01:54:23.580 --> 01:54:25.580]  Между любыми двумя слоями такие обязательно найдутся.
[01:54:25.580 --> 01:54:26.580]  Куда ж мы денемся?
[01:54:27.580 --> 01:54:28.580]  То есть вот как-то так.
[01:54:28.580 --> 01:54:29.580]  Вот.
[01:54:29.580 --> 01:54:30.580]  Может быть вот так.
[01:54:32.580 --> 01:54:33.580]  Вот так.
[01:54:34.580 --> 01:54:35.580]  Может вот.
[01:54:35.580 --> 01:54:36.580]  Ну вот тут еще что-то какая-то гадость.
[01:54:37.580 --> 01:54:38.580]  Вот.
[01:54:38.580 --> 01:54:40.580]  Да, могут быть еще какие-то вершины в ауте, но это нас не интересует.
[01:54:41.580 --> 01:54:42.580]  Вот.
[01:54:43.580 --> 01:54:45.580]  Какие еще бывают ребра, кроме вот таких?
[01:54:45.580 --> 01:54:46.580]  Ребр такого плана.
[01:54:47.580 --> 01:54:51.580]  Могут быть ребра назад, а могут быть ребра внутри слоя.
[01:54:52.580 --> 01:54:53.580]  В любом количестве.
[01:54:54.580 --> 01:54:56.580]  То есть единственное ограничение тут заключается в том, что
[01:54:57.580 --> 01:55:00.580]  не бывает ребр, которые ведут из слоя в следующий, но не прям.
[01:55:00.580 --> 01:55:02.580]  Вот следующий, а через один, там через два.
[01:55:04.580 --> 01:55:05.580]  Вот.
[01:55:06.580 --> 01:55:08.580]  Значит рассмотрим вот такие слои.
[01:55:11.580 --> 01:55:14.580]  Значит рассмотрим какой-нибудь путь.
[01:55:15.580 --> 01:55:16.580]  Вот.
[01:55:16.580 --> 01:55:19.580]  Какой-то кратчайший путь, по которому мы будем проталкивать
[01:55:19.580 --> 01:55:22.580]  Форда Фолкерсона, будет выглядеть вот таким вот нехитрым образом.
[01:55:24.580 --> 01:55:26.580]  Значит мы что-то протолкнули.
[01:55:27.580 --> 01:55:30.580]  И при этом образовались вот такие обратные ребра.
[01:55:32.580 --> 01:55:36.580]  При этом какое-то из этих ребр точно убилось из зеленых.
[01:55:39.580 --> 01:55:40.580]  Ну там допустим вот это.
[01:55:41.580 --> 01:55:42.580]  Может еще вот это.
[01:55:42.580 --> 01:55:44.580]  Ну остальные может убились, может нет.
[01:55:45.580 --> 01:55:47.580]  Но это нам сейчас даже не сильно принципиально.
[01:55:48.580 --> 01:55:50.580]  А теперь давайте подумаем вот о чем.
[01:55:51.580 --> 01:55:57.580]  Каково будет расстояние до какой-нибудь вершины В
[01:55:59.580 --> 01:56:01.580]  на следующей, допустим вот эта вот будет вершина В.
[01:56:02.580 --> 01:56:07.580]  Каково будет расстояние до этой вершины на следующей итерации ФФ.
[01:56:08.580 --> 01:56:13.580]  То есть вот прямо сейчас, вот сразу после того, как мы вот эти обратные ребра добавили.
[01:56:14.580 --> 01:56:15.580]  Я утверждаю, что оно не уменьшится.
[01:56:16.580 --> 01:56:17.580]  Почему?
[01:56:18.580 --> 01:56:21.580]  Потому что если брать вот эти слои, которые были уже на предыдущей итерации,
[01:56:22.580 --> 01:56:26.580]  мы заметим, что ребер скачущих через слой так и не появилось.
[01:56:27.580 --> 01:56:29.580]  То есть у нас появились ребра, но все они ведут назад.
[01:56:30.580 --> 01:56:31.580]  А вперед ни одного.
[01:56:32.580 --> 01:56:34.580]  Поэтому если вершина В находилась скажем в третьем слое,
[01:56:34.580 --> 01:56:42.580]  то расстояние на следующей итерации Эдманса Карпа будет не менее чем 3.
[01:56:43.580 --> 01:56:44.580]  Именно не менее.
[01:56:45.580 --> 01:56:48.580]  Ровно 3 никто не обещал, потому что одно из этих ребер могло убиться.
[01:56:49.580 --> 01:56:50.580]  А то и несколько.
[01:56:51.580 --> 01:56:52.580]  Да, могло не убиться.
[01:56:53.580 --> 01:56:55.580]  Поэтому мы не утверждаем, что расстояние строго увеличится.
[01:56:56.580 --> 01:57:01.580]  Но расстояние могло остаться, но меньше оно точно не станет.
[01:57:02.580 --> 01:57:03.580]  Понимаете, да?
[01:57:04.580 --> 01:57:10.580]  То есть вот таким образом получается, что расстояние от истока до любой вершины не уменьшается.
[01:57:13.580 --> 01:57:18.580]  Так что таким образом мы доказали Циарему Эдманса Карпа.
[01:57:22.580 --> 01:57:26.580]  Есть ли тут какие-то вопросы?
[01:57:35.580 --> 01:57:36.580]  Хорошо.
[01:57:37.580 --> 01:57:38.580]  Лежит, но он сложный.
[01:57:39.580 --> 01:57:40.580]  Нет, утверждается, что придумал.
[01:57:41.580 --> 01:57:42.580]  Глобально, да.
[01:57:43.580 --> 01:57:44.580]  Это название грибов.
[01:57:46.580 --> 01:57:47.580]  Да?
[01:57:48.580 --> 01:57:49.580]  Это типа намек, кто его придумал или что?
[01:57:50.580 --> 01:57:51.580]  Возможно, кстати.
[01:57:53.580 --> 01:57:57.580]  Скорее даже вопрос на какую-нибудь графию, прочитание.
[01:57:58.580 --> 01:58:00.580]  Нельзя сказать, что это хорошее правило?
[01:58:01.580 --> 01:58:04.580]  Что-то более хорошее, прочитать точку Эдманса Карпа.
[01:58:05.580 --> 01:58:06.580]  Нет.
[01:58:07.580 --> 01:58:08.580]  Так, конечно.
[01:58:09.580 --> 01:58:12.580]  Я вспомню, запускать эту игру на другую графию планеты будет быстрее.
[01:58:13.580 --> 01:58:14.580]  Он будет работать быстрее?
[01:58:15.580 --> 01:58:16.580]  Ну, нет.
[01:58:17.580 --> 01:58:18.580]  Может быть, ассистически сказать, что он работает быстрее?
[01:58:19.580 --> 01:58:21.580]  Я понял, что он работает быстрее.
[01:58:24.580 --> 01:58:25.580]  Нет, это Дениц.
[01:58:26.580 --> 01:58:27.580]  Не путайте.
[01:58:27.580 --> 01:58:28.580]  Это будет Дениц.
[01:58:29.580 --> 01:58:30.580]  Это будет, мы это докажем.
[01:58:31.580 --> 01:58:32.580]  Но нет.
[01:58:33.580 --> 01:58:34.580]  Это Дениц.
[01:58:35.580 --> 01:58:36.580]  На нем работает неожиданно быстро.
[01:58:37.580 --> 01:58:38.580]  Так, чего?
[01:58:39.580 --> 01:58:40.580]  А это карта.
[01:58:41.580 --> 01:58:42.580]  Нормально.
[01:58:43.580 --> 01:58:44.580]  Это карта.
[01:58:45.580 --> 01:58:46.580]  Это хорошо.
[01:58:49.580 --> 01:58:50.580]  Эдман скрывается.
[01:58:51.580 --> 01:58:52.580]  Но это да.
[01:58:53.580 --> 01:58:54.580]  Некоторые люди не любят быть публичными.
[01:58:55.580 --> 01:58:56.580]  То есть как-то не парадоксально.
[01:58:57.580 --> 01:59:01.580]  Просто утверждается, что даже нет элементарно странички в каком-то инстаграме.
[01:59:02.580 --> 01:59:04.580]  А, ну ладно, вас с этим тоже не удивить.
[01:59:09.580 --> 01:59:10.580]  Да, да, да.
[01:59:11.580 --> 01:59:12.580]  Как это называется?
[01:59:13.580 --> 01:59:14.580]  У кого есть страничка в инстаграме?
[01:59:15.580 --> 01:59:17.580]  Сопрещенная в России экранизация.
[01:59:20.580 --> 01:59:21.580]  Вот это вот.
[01:59:23.580 --> 01:59:24.580]  Так вот.
[01:59:25.580 --> 01:59:29.580]  Но на самом деле просто эту картинку я, пожалуй, стирать не буду.
[01:59:31.580 --> 01:59:32.580]  Потому что на самом, ну вот.
[01:59:33.580 --> 01:59:35.580]  Потому что эта картинка, конечно, нам пригодится.
[01:59:38.580 --> 01:59:39.580]  Да.
[01:59:40.580 --> 01:59:41.580]  Есть Хопков карта.
[01:59:42.580 --> 01:59:43.580]  Есть Эдманск карта.
[01:59:44.580 --> 01:59:45.580]  Есть Рабинк карта.
[01:59:46.580 --> 01:59:47.580]  Да.
[01:59:48.580 --> 01:59:49.580]  Вот.
[01:59:49.580 --> 01:59:56.580]  Ну нет, просто Карп это как бы тоже, как это часто бывает у ученых, он интересовался не только одним видом алгоритмов.
[01:59:58.580 --> 01:59:59.580]  Вот.
[02:00:00.580 --> 02:00:01.580]  Конечно.
[02:00:02.580 --> 02:00:03.580]  Так вот.
[02:00:04.580 --> 02:00:06.580]  Но потому что тут возникает, вот уже из этого алгоритма возникнет мысль.
[02:00:07.580 --> 02:00:10.580]  Вот, действительно, вот мы много раз запускаем БФС и что-то думаем.
[02:00:11.580 --> 02:00:12.580]  А теперь возникает такой вопрос.
[02:00:13.580 --> 02:00:20.580]  А нельзя было бы на самом деле БФС не переспускать, а исходя из этой же сети как-то вот искать потоки.
[02:00:21.580 --> 02:00:22.580]  Потому что есть же как-то подозрения.
[02:00:23.580 --> 02:00:25.580]  Да, во-первых, кстати, вот из этой леммы есть важное следствие.
[02:00:26.580 --> 02:00:30.580]  Следствие заключается в том, что в процессе Эдманса Карпа вообще-то расстояние до Т не уменьшается.
[02:00:32.580 --> 02:00:40.580]  А можно еще заметить, что, заметить следующее, что вообще говоря, смотрите, вот если мы построили слои, и Т у меня находится в каком-нибудь там 57-м слое.
[02:00:41.580 --> 02:00:51.580]  Так вот, у меня есть мистическое утверждение, что на самом деле пока расстояние 57 имеет смысл искать пути только вот в этих слоях, которые мы один раз нашли.
[02:00:56.580 --> 02:00:57.580]  Вот фишка такая, смотрите.
[02:00:58.580 --> 02:01:03.580]  Нет, ну не факт, ну вдруг там слои будут как-то меняться, но тем не менее там путь 57 мы будем находить.
[02:01:03.580 --> 02:01:05.580]  Ну на следующем БФСе вообще, формально говоря, слои будут другими.
[02:01:06.580 --> 02:01:07.580]  То есть какие-то вершины куда-то сдвинутся.
[02:01:08.580 --> 02:01:09.580]  Вот.
[02:01:10.580 --> 02:01:11.580]  Но у меня вытекает такое фантастическое желание.
[02:01:12.580 --> 02:01:13.580]  А давайте с этим повременем.
[02:01:14.580 --> 02:01:19.580]  Давайте я не буду пока двигать никакие вершины, а просто возьму эти слои и буду искать внутри этой сети.
[02:01:20.580 --> 02:01:22.580]  Это будет называться у меня, кстати, слоистая сеть.
[02:01:23.580 --> 02:01:24.580]  Вот я давайте спонтанно введу понятие.
[02:01:25.580 --> 02:01:27.580]  Вот есть такое понятие – слоистая сеть.
[02:01:28.580 --> 02:01:35.580]  То есть я говорю, что вот я запускаю БФС и оставляю в графе только ребра, ведущие слоя в следующий.
[02:01:36.580 --> 02:01:37.580]  А внутри слоя нет.
[02:01:38.580 --> 02:01:39.580]  Чего?
[02:01:40.580 --> 02:01:42.580]  А внутри слоя выкидываем, вот эти вот еще назад выкидываем.
[02:01:43.580 --> 02:01:44.580]  Ну временно естественно, да.
[02:01:45.580 --> 02:01:46.580]  Вот.
[02:01:47.580 --> 02:01:50.580]  И давайте я только на этих ребрах буду искать пути от СДТ и проталкивать по ним потоки.
[02:01:51.580 --> 02:01:52.580]  Может вдруг мне это…
[02:01:53.580 --> 02:01:54.580]  Ну вот.
[02:01:54.580 --> 02:01:55.580]  Буду как-то искать.
[02:01:56.580 --> 02:01:58.580]  Причем даже, не знаю, максимальный поток я нуду.
[02:01:59.580 --> 02:02:00.580]  Или просто буду искать, искать, искать, пихать, БФС опихать.
[02:02:01.580 --> 02:02:05.580]  И в какой-то момент неожиданно выясню, что оказывается очередного пути нет.
[02:02:06.580 --> 02:02:07.580]  Так вот.
[02:02:08.580 --> 02:02:11.580]  Я утверждаю, что расстояние ДТ в этот момент строго увеличилось.
[02:02:12.580 --> 02:02:13.580]  Логично.
[02:02:14.580 --> 02:02:15.580]  Ну потому что логично.
[02:02:16.580 --> 02:02:17.580]  Логично.
[02:02:18.580 --> 02:02:19.580]  Логично.
[02:02:20.580 --> 02:02:21.580]  Логично.
[02:02:22.580 --> 02:02:23.580]  Логично.
[02:02:24.580 --> 02:02:25.580]  Логично.
[02:02:26.580 --> 02:02:30.580]  Потому что если я делаю это много раз на одних и тех же слоях, то у меня и появляются только ребра, ведущие слоев предыдущих.
[02:02:31.580 --> 02:02:32.580]  Правда?
[02:02:33.580 --> 02:02:34.580]  Поэтому если у меня…
[02:02:35.580 --> 02:02:45.580]  Поэтому пока я по таким путям ищу, значит, по таким путям делаю проталкивание, то оказывается, что пути длины 57 у меня будут только вот строго по этим слоям.
[02:02:46.580 --> 02:02:53.580]  А как только у меня по этим слоям оказывается пути нет, то тогда оказывается, что и расстояние от СДТ будет строго больше.
[02:02:54.580 --> 02:02:55.580]  А?
[02:02:56.580 --> 02:03:06.580]  Фьюческие правды, что мы делаем, мы выкидываем все вот неинтересные на ребра и ищем вершины непересекающейся пути.
[02:03:07.580 --> 02:03:08.580]  Ребрно непересекающиеся.
[02:03:09.580 --> 02:03:10.580]  Ну нет, во-первых…
[02:03:11.580 --> 02:03:12.580]  А, да, ребрно.
[02:03:13.580 --> 02:03:15.580]  Во-первых, они и реберно пересекаются, потому что пропускные способности.
[02:03:16.580 --> 02:03:19.580]  То есть вполне вероятно, что следующий путь пройдет еще раз по этому ребру.
[02:03:20.580 --> 02:03:21.580]  Так что нет, тут можно упасть.
[02:03:21.580 --> 02:03:24.580]  Конечно, если граф был единичный, то да, ребрно непересекающийся.
[02:03:25.580 --> 02:03:28.580]  Но нет, пока у нас так.
[02:03:29.580 --> 02:03:30.580]  Так что вот такая красота.
[02:03:31.580 --> 02:03:35.580]  Вот, но заметим, что мы в итоге нашли, если мы тут вот…
[02:03:36.580 --> 02:03:48.580]  Если мы тут неожиданно попихали вот такого рода поток вот в этой сети, да, вот как-то вот, допустим, у нас вот как-то так получилось, допустим, вот так получилось, там вот, может вот так получилось, еще там вот так.
[02:03:49.580 --> 02:03:50.580]  И вот типа дальше от СДТ не пройдешь.
[02:03:52.580 --> 02:03:53.580]  Казалось бы, да.
[02:03:54.580 --> 02:03:56.580]  Является ли такой поток максимальным слоистой сети?
[02:03:57.580 --> 02:03:58.580]  Слоистая, да.
[02:03:59.580 --> 02:04:00.580]  Вот это нет, не факт.
[02:04:01.580 --> 02:04:04.580]  Но именно максимальным он не обязан являться, конечно, потому что…
[02:04:05.580 --> 02:04:08.580]  Ну, потому что у нас есть классический пример, напоминаю, вот этот вот, помните?
[02:04:10.580 --> 02:04:13.580]  Вот, потому что вот слоистая сеть могла быть вот такой.
[02:04:14.580 --> 02:04:19.580]  И вполне могло выясниться, что мы пропустили первым БФС-ом поток вот по этому пути.
[02:04:20.580 --> 02:04:21.580]  И заметим, да.
[02:04:22.580 --> 02:04:27.580]  И тогда в этом смысле окажется, что у нас в слоистой сети вот, чтобы расстояние было три, мы уже поток не улучшим.
[02:04:30.580 --> 02:04:34.580]  То есть он, да, он не максимальный, но улучшить его прямо сейчас в слоистой сети нельзя.
[02:04:35.580 --> 02:04:40.580]  То есть чтобы его улучшить, надо уменьшить поток по этому ребру.
[02:04:40.580 --> 02:04:45.580]  Ну, да, но лучше, чтобы не возникало вот этом разрывов шаблон, лучше потреблялись слова «локальный максим».
[02:04:47.580 --> 02:04:54.580]  Да. Нет, да, да, да, понятно, что у вас там было понятие «максимальный наибольший», это да, но вот такое.
[02:04:56.580 --> 02:04:57.580]  Но мы там все равно любые два потока…
[02:04:58.580 --> 02:05:00.580]  Здесь не очень корректно будет максимальный.
[02:05:01.580 --> 02:05:04.580]  Нет, и здесь не очень корректно будет максимальный.
[02:05:04.580 --> 02:05:09.580]  Нет, нельзя сказать, что он именно лучший возможный, но по крайней мере можно сказать, что его нельзя улучшить, не отменяя потоки.
[02:05:10.580 --> 02:05:11.580]  Вот.
[02:05:12.580 --> 02:05:17.580]  Да, если вот, то есть, но его нельзя улучшить, только увеличивая потоки. То есть нельзя найти такой путь.
[02:05:18.580 --> 02:05:21.580]  Так вот, такой поток мы будем называть блокирующий.
[02:05:23.580 --> 02:05:25.580]  Так, вот, так, вот, так.
[02:05:26.580 --> 02:05:27.580]  Так, вот, так.
[02:05:28.580 --> 02:05:29.580]  Так, вот, так.
[02:05:29.580 --> 02:05:31.580]  Так вот, мы будем называть блокирующий.
[02:05:35.580 --> 02:05:37.580]  Ну, в принципе, это можно общее определение вести.
[02:05:38.580 --> 02:05:49.580]  Поток F называется блокирующим, если в остаточной сети не существует пути ZST, не идущего по обратным ребрам.
[02:05:49.580 --> 02:05:54.580]  То есть, любой улучшающий путь от ZST должен отменить какой-то поток.
[02:05:56.580 --> 02:05:58.580]  То есть, такой путь называется блокирующим.
[02:06:00.580 --> 02:06:03.580]  И в принципе, тут предлагается некоторое обобщение.
[02:06:04.580 --> 02:06:11.580]  То есть, идея такая. Заметим, что предположим, что мы построим слоистую сеть и построим какой-нибудь блокирующий поток как-нибудь жадно, или еще чем-нибудь еще.
[02:06:11.580 --> 02:06:13.580]  Ну, просто построим блокирующий поток.
[02:06:14.580 --> 02:06:21.580]  Заметим, что уже этого будет достаточно, чтобы сказать, что расстояние от ZST в остаточной сети увеличилось, правда?
[02:06:21.580 --> 02:06:34.580]  Вот. В результате это приводит нас к тому, что я просто стираю эту теорему, а вместо этого пишу просто еще одну пафосную сеть.
[02:06:34.580 --> 02:06:36.580]  Концепция блокирующих потоков.
[02:06:36.580 --> 02:06:51.580]  В результате это приводит нас к тому, что я просто стираю эту теорему, а вместо этого пишу просто еще одно пафосное словосочетание.
[02:06:52.580 --> 02:06:54.580]  Концепция блокирующих потоков.
[02:07:06.580 --> 02:07:11.580]  Концепция блокирующих потоков, по сути, мета-алгоритм, устроена следующим образом.
[02:07:12.580 --> 02:07:21.580]  То есть while действительно в GF есть путь от S до T.
[02:07:22.580 --> 02:07:28.580]  От S до T по ненасыщенным ребрам.
[02:07:30.580 --> 02:07:32.580]  Ненасыщенным.
[02:07:33.580 --> 02:07:35.580]  Пфу, каким ненасыщенным? Не нулевым.
[02:07:36.580 --> 02:07:40.580]  Ребра, как всегда.
[02:07:42.580 --> 02:07:43.580]  Вот.
[02:07:45.580 --> 02:07:46.580]  Значит, мы делаем так.
[02:07:48.580 --> 02:07:53.580]  Строим в GF слоистую сеть.
[02:07:58.580 --> 02:08:00.580]  Ну делаем мы это, естественно, BFS.
[02:08:01.580 --> 02:08:02.580]  Я даже так напишу, BFS.
[02:08:05.580 --> 02:08:10.580]  Не, ну то есть теоретически я мог бы как бы мета-алгоритмичность вставить и в этой строке, но это неинтересно.
[02:08:11.580 --> 02:08:15.580]  Тут как бы все, уже есть BFS, там лучше, как бы сомнительно, что вы придумаете что-то лучше.
[02:08:16.580 --> 02:08:19.580]  Ну а симпатически вы что-то лучше придумаете вряд ли, чем BFS.
[02:08:20.580 --> 02:08:30.580]  Но может быть вы, ну может вы как-то BFS как-то там оптимальнее напишете, я не знаю, но сомнительно, что в эту сторону имеется мысль думать.
[02:08:30.580 --> 02:08:45.580]  Так вот, потому что более интересно на самом деле, потому что как бы мета-алгоритмичность, а не алгоритмичность заключается в том, что мы ищем в слоистой сети блокирующий поток.
[02:08:57.580 --> 02:08:58.580]  Вот.
[02:09:01.580 --> 02:09:02.580]  Вот.
[02:09:03.580 --> 02:09:04.580]  То есть это такой вот мета-алгоритм.
[02:09:05.580 --> 02:09:08.580]  Тут как бы останется только вопрос, как искать блокирующий поток.
[02:09:09.580 --> 02:09:10.580]  Что?
[02:09:11.580 --> 02:09:12.580]  Нечего не видно.
[02:09:13.580 --> 02:09:15.580]  Но на блокирующий поток все-таки пришлось, что они не идут по обратным рябрам.
[02:09:16.580 --> 02:09:17.580]  Ну да.
[02:09:18.580 --> 02:09:19.580]  Ну да, ну просто в слои, да.
[02:09:20.580 --> 02:09:29.580]  Ну то есть определение мы говорим, что поток называется блокирующим, если не один из удлиняющих цепей, если все удлиняющие цепи идут хотя бы по одному обратному ребру.
[02:09:30.580 --> 02:09:34.580]  Заметьте, да, в слоистой, конечно, да, тут надо не путать, что такое обратное ребро.
[02:09:35.580 --> 02:09:38.580]  Потому что, заметим, блокирующий поток мы ищем в слоистой сети.
[02:09:39.580 --> 02:09:42.580]  То есть в слоистой сети все вот эти ребра мы будем считать как бы прямыми.
[02:09:43.580 --> 02:09:47.580]  То есть да, они могут быть относительно исходной сети естественно обратными, это да.
[02:09:48.580 --> 02:09:49.580]  Но в слоистой сети они прямые.
[02:09:50.580 --> 02:09:51.580]  Вот.
[02:09:53.580 --> 02:09:56.580]  Да, ищем просто тем или иным способом блокирующий поток.
[02:09:57.580 --> 02:09:58.580]  Ну как его искать?
[02:09:58.580 --> 02:09:59.580]  Ну первый метод у нас уже придумался.
[02:10:00.580 --> 02:10:01.580]  Такой алгоритм номер ноль.
[02:10:02.580 --> 02:10:03.580]  Как-нибудь.
[02:10:05.580 --> 02:10:07.580]  Просто хоть какой-нибудь.
[02:10:08.580 --> 02:10:12.580]  Но от Edmunds Carp он отличаться по сути не будет.
[02:10:13.580 --> 02:10:22.580]  Разница только будет, что в Edmunds Carp мы просто на каждый путь отдельный BFS писали, а тут написали BFS, а потом внутри этого BFS ходим видимо DFS.
[02:10:23.580 --> 02:10:27.580]  То есть получилась такая пока усложненная версия Edmunds Carp.
[02:10:28.580 --> 02:10:39.580]  Да, но даже даже не выбросили, я бы сказал проигнорировали.
[02:10:40.580 --> 02:10:54.580]  Да, но по факту в реализации на самом деле мы просто в реализации забираю вперед, я скажу, что на самом деле мы ничего выкидывать не будем, а просто мы запустим BFS,
[02:10:54.580 --> 02:10:59.580]  сохраним D и просто будем говорить, что если ребро ведет ни слой в следующий, мы его просто проигнорируем.
[02:11:00.580 --> 02:11:05.580]  То есть это будет очень просто, позволит нам просто ничего не выкидывать.
[02:11:06.580 --> 02:11:07.580]  Вот.
[02:11:08.580 --> 02:11:11.580]  То есть самый тупой алгоритм мог бы выглядеть так.
[02:11:12.580 --> 02:11:15.580]  Но есть более хитрая версия.
[02:11:16.580 --> 02:11:17.580]  Хитрая версия такая.
[02:11:17.580 --> 02:11:28.580]  Вот вы запустили DFS вот в этой сети и неожиданно выяснили, что вот попытались через это ребро пройти и неожиданно выяснили, что пути до T вы не нашли.
[02:11:30.580 --> 02:11:32.580]  Тогда есть маленький приятный факт.
[02:11:33.580 --> 02:11:36.580]  Вы через эту вершину пути уже не найдете никогда.
[02:11:36.580 --> 02:11:37.580]  Да.
[02:11:38.580 --> 02:11:46.580]  Здесь этот факт уже очевиден просто, потому что заметим, что у нас как бы потоки не отменяются, то есть сейчас пути нет, то им не откуда будет взяться.
[02:11:47.580 --> 02:11:48.580]  Это понятно, да?
[02:11:49.580 --> 02:11:53.580]  То есть не потому, что там какая-то лемма когда-то была, а просто вот жадный.
[02:11:54.580 --> 02:11:55.580]  Сейчас пути нет, ну значит новых ребер у нас не появится.
[02:11:56.580 --> 02:11:58.580]  Потому что в слоистой сети у нас новых ребер не появляется.
[02:11:59.580 --> 02:12:02.580]  То есть если сейчас пути нет, значит его не будет.
[02:12:03.580 --> 02:12:07.580]  Но тогда возникает естественная такая оптимизация.
[02:12:08.580 --> 02:12:09.580]  С другой стороны, возникает такая идея.
[02:12:10.580 --> 02:12:12.580]  То есть вот как там оптимизировать DFS?
[02:12:13.580 --> 02:12:14.580]  Возникает такая идея.
[02:12:15.580 --> 02:12:23.580]  Тогда давайте-ка вот если это ребро, вы по ребру попытались пройти и DFS не нашел никого пути, то давайте это ребро просто вытянем, чтобы следующие DFS по этому ребру не ходили.
[02:12:26.580 --> 02:12:27.580]  Вот возьмем и вытянем.
[02:12:28.580 --> 02:12:38.580]  Все, можно пока себе удобно это вообразить так, что предположим, что мы этих ребра храним в каких-нибудь там, я не знаю, двусвязных списках, и из двусвязного списка мы ребра выкидываем там на раз-два.
[02:12:40.580 --> 02:12:42.580]  Ну пока себе для удобства такое вообразим.
[02:12:43.580 --> 02:12:45.580]  Как мы потом убедимся, писать это естественно не надо.
[02:12:46.580 --> 02:12:55.580]  Потому что понятно, что можно точнее написать и так, но тогда для каждого ребра в двусвязном списке вам нужно хранить еще указатель на то, а где у него там напарник там находится и так далее.
[02:12:55.580 --> 02:12:56.580]  Потому что напарника тоже надо удалить.
[02:12:58.580 --> 02:13:07.580]  Вот, хотя нет, напарников слоистой сети все равно нету, но вообще он все равно есть, потому что когда вы писаете поток, надо напарнику сообщить, что там вообще-то поток пустился, ну вот и все.
[02:13:08.580 --> 02:13:13.580]  То есть это такая гадость истыкла, это делается, но это неприятно, но вообразить себе можно.
[02:13:16.580 --> 02:13:17.580]  Или нельзя?
[02:13:18.580 --> 02:13:19.580]  Ну да, как это?
[02:13:21.580 --> 02:13:22.580]  Ну да, как это?
[02:13:22.580 --> 02:13:23.580]  Как это?
[02:13:24.580 --> 02:13:28.580]  Так вот, делаем в результате так, запускаем DFS.
[02:13:29.580 --> 02:13:36.580]  Ну просто DFS у меня там будет возвращать что-нибудь типа, ну там самый тупой вариант, как int DFS.
[02:13:37.580 --> 02:13:40.580]  Int v, int curc.
[02:13:41.580 --> 02:13:46.580]  То есть это означает, что у меня сейчас в стеке лежит путь от s до v, по которому я могу пропустить путь curc.
[02:13:46.580 --> 02:13:47.580]  Вот.
[02:13:48.580 --> 02:13:49.580]  И дальше он будет работать так.
[02:13:50.580 --> 02:13:51.580]  Перебираем все ребра.
[02:13:52.580 --> 02:14:09.580]  Перебираем значит все ребра у там, ну там скажем, for там, edge, ampersand, там, e, там, graph, от v, ну и что-нибудь там сказать.
[02:14:10.580 --> 02:14:11.580]  Ну и что-нибудь там сказать.
[02:14:12.580 --> 02:14:26.580]  Если окажется, что там e.finish, точнее D от него, там не равен D от e.start плюс один, то просто continue.
[02:14:30.580 --> 02:14:31.580]  Вот.
[02:14:31.580 --> 02:14:42.580]  Ну ладно, не continue, а дилет edge от e.
[02:14:45.580 --> 02:14:48.580]  Вот можно даже так сказать, delete edge, continue.
[02:14:51.580 --> 02:14:53.580]  Да, сомнительно конечно, но тем не менее.
[02:14:54.580 --> 02:14:56.580]  Да, сомнительно, но ok.
[02:14:57.580 --> 02:14:58.580]  Сказал бы классик.
[02:14:59.580 --> 02:15:00.580]  Вот.
[02:15:01.580 --> 02:15:03.580]  Классика в банке нет, а кружок продолжается.
[02:15:04.580 --> 02:15:05.580]  Приятно, да.
[02:15:09.580 --> 02:15:10.580]  Вот.
[02:15:15.580 --> 02:15:16.580]  Вот.
[02:15:18.580 --> 02:15:19.580]  Выпустили она.
[02:15:20.580 --> 02:15:21.580]  Ага.
[02:15:22.580 --> 02:15:23.580]  Так вот, значит и так.
[02:15:24.580 --> 02:15:25.580]  Так, ладно.
[02:15:25.580 --> 02:15:35.580]  Ладно, значит далее, если оказалось, что, ну давайте я еще так напишу, если e.capacity оказалось 0,
[02:15:37.580 --> 02:15:49.580]  ну в нашем случае равно e.flow, да, то тоже, вот, delete edge от e, continue, да, я даже в одну строчку напишу.
[02:15:50.580 --> 02:15:51.580]  Вот.
[02:15:51.580 --> 02:16:01.580]  А, ой, совсем забыл, в самом начале неплохо бы написать, что if v равно равно t, return e.
[02:16:02.580 --> 02:16:03.580]  Нет, curc.
[02:16:04.580 --> 02:16:05.580]  Да, curc, pardon.
[02:16:06.580 --> 02:16:07.580]  Да, забыл.
[02:16:08.580 --> 02:16:09.580]  Вот.
[02:16:14.580 --> 02:16:18.580]  Значит int c, где равно равно?
[02:16:21.580 --> 02:16:23.580]  Тут равно равно, тут не равно.
[02:16:24.580 --> 02:16:25.580]  А тут равно равно.
[02:16:26.580 --> 02:16:29.580]  Ну, e.capacity равно e.flow, это значит, что остаточная способность 0, да.
[02:16:30.580 --> 02:16:33.580]  Так, дальше, c пусть у меня равно,
[02:16:34.580 --> 02:16:39.580]  значит пусть у меня c это, значит, тогда результат,
[02:16:41.580 --> 02:16:48.580]  значит, результат, соответственно, dfs из, значит, соответственно, e.finish
[02:16:48.580 --> 02:16:56.580]  и minimum из curc и e.capacity минус e.flow.
[02:16:57.580 --> 02:16:59.580]  Минус e.flow.
[02:17:00.580 --> 02:17:01.580]  Вот.
[02:17:02.580 --> 02:17:03.580]  Ладно, вот еще скобочка.
[02:17:04.580 --> 02:17:13.580]  Так, потому что если он вернул мне c, то есть если он вернул мне 0, то есть сказал, что извиняйте, не получилось, извините, не получилось,
[02:17:15.580 --> 02:17:16.580]  то что тогда можно сделать?
[02:17:16.580 --> 02:17:17.580]  Совершенно верно.
[02:17:18.580 --> 02:17:20.580]  Тогда мы торжественно удаляем ребро.
[02:17:21.580 --> 02:17:26.580]  Elite edge от e и continue.
[02:17:27.580 --> 02:17:28.580]  Господи.
[02:17:29.580 --> 02:17:33.580]  Просто такой, тут прям хочется вставить этот define имени Тинькова, да.
[02:17:34.580 --> 02:17:35.580]  Вот.
[02:17:36.580 --> 02:17:37.580]  То есть который просто пишет вот это.
[02:17:38.580 --> 02:17:39.580]  Вот.
[02:17:41.580 --> 02:17:42.580]  Так.
[02:17:43.580 --> 02:17:44.580]  Так.
[02:17:49.580 --> 02:17:51.580]  Ну да, самое, самое тупое надо сделать так.
[02:17:52.580 --> 02:18:01.580]  То есть можно так сказать, значит, push от e и c и return, ну вот.
[02:18:02.580 --> 02:18:06.580]  Push это типа добавить налитие, добавить flow и обратно, ну и обратно.
[02:18:07.580 --> 02:18:08.580]  Ну да.
[02:18:08.580 --> 02:18:09.580]  То есть да, вот.
[02:18:10.580 --> 02:18:13.580]  И в конце, если так ничего не получилось, то return 0.
[02:18:14.580 --> 02:18:17.580]  Хочется ли нам сразу удалить ребро, если оно получится?
[02:18:18.580 --> 02:18:25.580]  Ну как-то на самом деле ничего страшного, просто когда мы в следующий раз придем в эту вершину, мы это первое что сделаем.
[02:18:26.580 --> 02:18:27.580]  Так что непринципиально.
[02:18:27.580 --> 02:18:35.580]  Мы все равно, если шо, мы сразу выбросимся.
[02:18:36.580 --> 02:18:38.580]  Да, заметим, что в следующую ротацию в форум мы придем через continue.
[02:18:39.580 --> 02:18:40.580]  Вот.
[02:18:41.580 --> 02:18:42.580]  То есть вот можно написать вот такой DFF.
[02:18:43.580 --> 02:18:44.580]  Начнем вот уже с такого.
[02:18:45.580 --> 02:18:50.580]  Хотя, конечно, сразу напрашивается, как написать хотя бы не асимпатически лучше, но это уже мы пока подумаем.
[02:18:53.580 --> 02:18:55.580]  Не, даже не в этом дело.
[02:18:55.580 --> 02:18:56.580]  Ну вот.
[02:18:57.580 --> 02:18:58.580]  Ну пока давайте так.
[02:18:59.580 --> 02:19:00.580]  Значит теперь давайте себе вообразим.
[02:19:01.580 --> 02:19:02.580]  Как будет работать DFF?
[02:19:03.580 --> 02:19:17.580]  Я утверждаю, что DFF будет работать за О от расстояния от СДТ плюс количество удаленных ребер.
[02:19:22.580 --> 02:19:23.580]  Что?
[02:19:24.580 --> 02:19:28.580]  А, потому что мы же удалили С.
[02:19:29.580 --> 02:19:30.580]  Да, потому что смотрите.
[02:19:31.580 --> 02:19:35.580]  Ну, заметим так, что, да, то есть мы, то есть фактически DFF работает.
[02:19:36.580 --> 02:19:37.580]  Ну ладно, если уж очень хочется, плюс один.
[02:19:38.580 --> 02:19:39.580]  Давайте напишем.
[02:19:40.580 --> 02:19:42.580]  Вот этот один, это типа запуск работы в С.
[02:19:43.580 --> 02:19:50.580]  Потому что когда мы работаем с вершиной, мы можем в это уже время включить и время работы с ребром, которое в нее привело.
[02:19:51.580 --> 02:19:55.580]  Кстати, да, обратите внимание, ни одного юзера в этой DFF не нет.
[02:19:56.580 --> 02:20:01.580]  Поэтому в принципе вполне вероятно, что мы в одну и ту же вершину будем несколько раз хранить разными путями.
[02:20:03.580 --> 02:20:04.580]  Но это нас сильно не пугает.
[02:20:05.580 --> 02:20:09.580]  Почему? Потому что заметим, что, ну, значит, фишка такая.
[02:20:10.580 --> 02:20:19.580]  В каждой вершине, ну, то есть я утверждаю, то есть легко сказать, что в каждой вершине, то есть DFF работает за количество ребер, которые мы вообще видим.
[02:20:21.580 --> 02:20:22.580]  Понятно, да?
[02:20:23.580 --> 02:20:27.580]  Ну, потому что вот эти вот операции мы, значит, включаем в ребро, по которому мы вершину В пришли.
[02:20:28.580 --> 02:20:34.580]  А вот то, что находится внутри фора, это, значит, мы включаем уже, ну, просто мы обрабатываем ребро Е.
[02:20:36.580 --> 02:20:42.580]  И если у нас, то есть в том плане, что есть у нас возникнет DFF, который там за О от единицы выбросится, потому что там ребра закончились,
[02:20:43.580 --> 02:20:48.580]  то мы этот DFF тоже как бы, это типа О от единицы обработки вот этого ребра.
[02:20:50.580 --> 02:20:52.580]  Но заметим, что ребра у нас делится на два типа.
[02:20:53.580 --> 02:20:57.580]  Либо мы вернули, либо через это ребро пройдет путь, вот этот вот, да?
[02:20:58.580 --> 02:21:00.580]  Либо мы это ребро прямо сейчас удалим.
[02:21:02.580 --> 02:21:08.580]  Поэтому суммарно все работает, поэтому один DFF работает вот за заявленную симпатику.
[02:21:10.580 --> 02:21:11.580]  Понимаете, да?
[02:21:12.580 --> 02:21:17.580]  Ну вот, но правда расстояние от S до T все равно больше либо равно единице, поэтому эту единицу мы выбираем.
[02:21:20.580 --> 02:21:24.580]  А теперь, если мы просуммируем все это.
[02:21:26.580 --> 02:21:27.580]  Так, ну теперь у нас есть какой-то вопрос.
[02:21:28.580 --> 02:21:33.580]  Ну вот, то есть если мы просуммируем все эти суммы по всем DFF, то что получится?
[02:21:34.580 --> 02:21:38.580]  Сумма расстояния от S до T по всем итерациям, а это не константа, да?
[02:21:39.580 --> 02:21:42.580]  Ну DIST от S до T, он с каждой итерацией может с этим изменяться.
[02:21:43.580 --> 02:21:44.580]  Плюс...
[02:21:47.580 --> 02:21:48.580]  Ну давай, ну вот.
[02:21:48.580 --> 02:21:51.580]  Ну плюс давайте так, сумма удаленных ребер.
[02:21:52.580 --> 02:21:55.580]  Но, каждое ребро у нас из слоистой сети...
[02:21:56.580 --> 02:21:57.580]  А, ну да.
[02:21:58.580 --> 02:21:59.580]  А хотя нет, стоп, стоп, стоп.
[02:22:00.580 --> 02:22:02.580]  А нет, стоп, да, не может удаляться, да.
[02:22:03.580 --> 02:22:09.580]  Да, потому что да, мы рассматриваем одну итерацию поиска блокирующего потока, поэтому расстояние константное, да?
[02:22:10.580 --> 02:22:16.580]  Поэтому как бы получается у нас количество DFF умножить на вот это расстояние.
[02:22:16.580 --> 02:22:18.580]  И плюс количество удаляемых ребер.
[02:22:19.580 --> 02:22:21.580]  Но удалиться у нас ребер не более чем E.
[02:22:22.580 --> 02:22:24.580]  Вот давайте, не более чем модуль E.
[02:22:27.580 --> 02:22:32.580]  А DFS, значит расстояние не более чем модуль V.
[02:22:34.580 --> 02:22:36.580]  А DFS у нас сколько?
[02:22:40.580 --> 02:22:41.580]  Нет, не больше чем E.
[02:22:42.580 --> 02:22:43.580]  Да, не более чем E, почему?
[02:22:43.580 --> 02:22:47.580]  Потому что DFS сам по себе блокирует хотя бы одно ребро.
[02:22:50.580 --> 02:22:51.580]  Вывод.
[02:22:52.580 --> 02:23:00.580]  Одна итерация такого DFS работает от VE.
[02:23:01.580 --> 02:23:06.580]  Но, заметим, что давайте я тут глобальную левму сразу сформулирую даже, серию ему.
[02:23:06.580 --> 02:23:34.580]  KBP выполняет любое KBP, но я имею ввиду любой алгоритм, основанный на концепции блокирующих поток, выполняет не более чем модуль V итерации Вайла, вот этого глобального Вайла.
[02:23:37.580 --> 02:23:44.580]  Потому что основная теря заключается в том, что расстояние от СДТ, от итерации к итерации, строго увеличивается.
[02:23:46.580 --> 02:23:47.580]  Понятно, да?
[02:23:49.580 --> 02:23:50.580]  Давайте я это даже сформулирую.
[02:23:51.580 --> 02:23:52.580]  Это вот.
[02:23:53.580 --> 02:23:54.580]  Вот.
[02:23:59.580 --> 02:24:02.580]  Итерации Вайл к итерации Вайл.
[02:24:07.580 --> 02:24:08.580]  C Вайл.
[02:24:10.580 --> 02:24:15.580]  Дист от СТ строго увеличивается.
[02:24:26.580 --> 02:24:29.580]  Так, значит, что же у нас тут получается?
[02:24:29.580 --> 02:24:39.580]  Вот мы с вами тогда, получается, этих итераций будет не более чем V, а на самом деле не более чем V-1, мы могли бы сказать, даже не более чем V-1.
[02:24:40.580 --> 02:24:42.580]  И каждая итерация работает за VE.
[02:24:43.580 --> 02:24:47.580]  То есть мы получили алгоритм за O от V2E.
[02:24:49.580 --> 02:24:53.580]  Но правда, теперь осталось только его чуть-чуть получше реализовать.
[02:24:54.580 --> 02:25:00.580]  Теперь, как удалять ребра так, чтобы не писать вот эту вот гадость с удалением из какого-то там списка?
[02:25:01.580 --> 02:25:02.580]  Да.
[02:25:03.580 --> 02:25:04.580]  Идея была уже озвучена.
[02:25:05.580 --> 02:25:07.580]  Она очень наглядно видно из этого DFS.
[02:25:08.580 --> 02:25:13.580]  ДФС, по сути, перебирает ребра просто в каком-то заданном порядке от начала до конца.
[02:25:14.580 --> 02:25:32.580]  И фактически заметим, что если на какой-то итерации DFS у нас дошел до какого-то ребра, то тогда получается, что все вот эти ребра удалены, и в следующий раз он пройдется по этим ребрам и поймет, что тут все плохо и начнет с этого.
[02:25:33.580 --> 02:25:34.580]  Тогда возникает естественный вопрос.
[02:25:35.580 --> 02:25:38.580]  А почему бы нам не сохранить, где мы в прошлый раз остановились?
[02:25:39.580 --> 02:25:40.580]  ДФС очень интересен.
[02:25:41.580 --> 02:25:45.580]  Если он встал на какое-то ребро, то он с него не слезет, пока его не убьет.
[02:25:54.580 --> 02:25:57.580]  Поэтому на самом деле все работает очень просто.
[02:25:58.580 --> 02:26:01.580]  Поэтому вместо вот этого мы напишем такое.
[02:26:05.580 --> 02:26:06.580]  Я напишу так.
[02:26:07.580 --> 02:26:09.580]  Так, давайте я тут каким-то красивым красненьким напишу.
[02:26:11.580 --> 02:26:35.580]  Ну вот, edge iterator ampersand it равно cur it от v, it.valid, знаете, я вот так напишу, it.next.
[02:26:36.580 --> 02:26:41.580]  Что я тут имею в виду?
[02:26:42.580 --> 02:26:47.580]  Ну потому что если бы с вами прям с нуля писали, вот к сожалению мы с вами не писали реализацию сети с нуля,
[02:26:48.580 --> 02:26:53.580]  но там оказывается очень удобно на самом деле завести какой-нибудь магический итератор,
[02:26:54.580 --> 02:26:58.580]  который смотрит на ребро и только через него вы разрешаете себе вообще что-то там делать push.
[02:26:58.580 --> 02:26:59.580]  То есть соответственно it.
[02:27:00.580 --> 02:27:23.580]  А так глобально вы заводите массив, то есть скажем так и напишите, там edge iterator cur it от, ну вот его размер соответственно на модуль v.
[02:27:23.580 --> 02:27:41.580]  Ну это изначально где-то в инициализации пишете, что v от нуля до n-1, понятно, cur it от v равно get begin от v.
[02:27:41.580 --> 02:27:48.580]  Понятно, да?
[02:27:49.580 --> 02:27:59.580]  И в результате итератор хочется реализовать так, что next это типа он, вот, то есть next он как бы переходит в следующую итерацию,
[02:28:00.580 --> 02:28:05.580]  а также он еще может принять состояние end, то есть типа он уже никуда не указывает и говорит, что он не валит.
[02:28:06.580 --> 02:28:12.580]  В принципе, если вы программировали на языке Java, то итераторы там реализованы, вот, по-моему, чуть менее чем вот так.
[02:28:16.580 --> 02:28:17.580]  Чего-чего?
[02:28:18.580 --> 02:28:19.580]  Ну да.
[02:28:20.580 --> 02:28:23.580]  Нет, ну это, да, это типичная Java, ну Kotlin это, в общем-то, извините, базируется на Java.
[02:28:24.580 --> 02:28:31.580]  Вот, то есть может там с какими-то дополнительными плюшками, но как бы, но суть одна, то есть это все-таки как бы Java.
[02:28:32.580 --> 02:28:33.580]  Значит, далее.
[02:28:34.580 --> 02:28:35.580]  Вот.
[02:28:36.580 --> 02:28:43.580]  Значит, смотрите, и тогда код превращается так, то есть каждая емрия придется заменить на it.finish вот так вот написать.
[02:28:44.580 --> 02:28:45.580]  Вот так.
[02:28:46.580 --> 02:28:47.580]  Так.
[02:28:48.580 --> 02:28:55.580]  Но delete edge, конечно, вылетает, а заменяем мы его ничем, потому что мы здесь пишем it next.
[02:28:56.580 --> 02:28:57.580]  Значит.
[02:28:57.580 --> 02:29:07.580]  Так, вот эту, ну тоже надо it.ref, ну можно так написать, хотя по-хорошему я бы написал, конечно, it.isSaturated.
[02:29:09.580 --> 02:29:13.580]  Ну, логично такой метод написать, который внутри себя вот это же и проверит.
[02:29:16.580 --> 02:29:18.580]  Вы знаете, нет, не обязательно, не обязательно.
[02:29:18.580 --> 02:29:21.580]  Это ты мыслишь как итератор, это как указатель на какое-то ребро.
[02:29:22.580 --> 02:29:29.580]  А дело в том, что я хочу, чтобы у этого итератора, помимо всего, прочее, но я хочу так, я хочу, чтобы к этим ребрам у тебя доступа не было.
[02:29:31.580 --> 02:29:32.580]  Почему?
[02:29:32.580 --> 02:29:41.580]  Ну, потому что суть такая, как бы в сети у тебя есть какие-то инварианты, которые заключаются в том, что если ты пустил по ребру поток величины 5, то у тебя есть какие-то инварианты.
[02:29:41.580 --> 02:29:50.580]  Ну, потому что суть такая, как бы в сети у тебя есть какие-то инварианты, которые заключаются в том, что если ты пустил по ребру поток величины 5, то по обратному ребру должен пойти поток минус 5.
[02:29:51.580 --> 02:29:52.580]  Ну, хотелось бы, да.
[02:29:53.580 --> 02:29:56.580]  Поэтому очень хочется, чтобы ты умел пускать нот.
[02:29:56.580 --> 02:30:03.580]  А если тебе дать по указателю возможность смотреть на ребро, то в принципе ты там можешь взять поле и просто его переписать, как тебе угодно.
[02:30:04.580 --> 02:30:13.580]  Да, тогда это должен быть либо константный указатель, да, но у тебя должна быть, но тогда, если какая-то вопрос, тогда ты по этому итературу вот здесь вот это ребро не пустишь, вот это не пустишь.
[02:30:21.580 --> 02:30:22.580]  Я бы для себя сказал так.
[02:30:22.580 --> 02:30:30.580]  Нет, и потом дело в том, что этот итератор, он позволит вам дать интерфейс, потому что в принципе он может дать вам возможность, ну потому что как это будет выглядеть на самом деле в сети.
[02:30:30.580 --> 02:30:37.580]  То есть в сети, то есть в сети у вас возможно не будет, то есть у вас может быть не будет доступа просто к тому, как устроены ребра.
[02:30:37.580 --> 02:30:43.580]  То есть непонятно, может даже вы не будете, потому что там отдельная песня, как вы эти ребра будете хранить и как вы по ним бегать будете.
[02:30:44.580 --> 02:30:45.580]  Чего?
[02:30:45.580 --> 02:30:59.580]  Вот, нет, потому что на самом деле, слушайте, по-моему, мы приходим к тому, что неплохо было бы действительно этот поток просто с нуля написать.
[02:31:00.580 --> 02:31:05.580]  Нет, нет, непонятно, непонятно.
[02:31:05.580 --> 02:31:07.580]  А идея с 41 была озвучена?
[02:31:08.580 --> 02:31:10.580]  Ну когда-то, нет, она была озвучена.
[02:31:10.580 --> 02:31:15.580]  Но там, нет, дальше начинается фишка, а можно ли обойтись без ресайда, без пушбеков вектора.
[02:31:17.580 --> 02:31:21.580]  Нет, ну да, нет, ну там просто вот этот итератор мог быть устроен немножко по-другому.
[02:31:21.580 --> 02:31:27.580]  Потому что если кто-нибудь когда-нибудь писал хотя бы обычные просто ориентированные графы на паскале.
[02:31:27.580 --> 02:31:39.580]  Вот, а я писал. Нет, он напоминает, я как бы в школе олимпиады писал только на паскале, если что, как бы Сиел знал только в УЗе.
[02:31:40.580 --> 02:31:48.580]  Вот, соответственно, вот, а Геннадий Каракевич вообще на паскале три междара выиграл. Я одно-второе место.
[02:31:49.580 --> 02:31:51.580]  Да, на пяти.
[02:31:52.580 --> 02:31:53.580]  Чего?
[02:31:54.580 --> 02:31:55.580]  Чего?
[02:31:56.580 --> 02:32:01.580]  Нет, ну сейчас. Нет, почему нет? Ну почему нет, он писал чисто.
[02:32:01.580 --> 02:32:08.580]  Нет, ну, видимо, там стандартная логика вида. Нет, понятно, что он там Си на каком-то уровне знал, потому что топ-кодер он как-то писал, но топ-кодер и паскаля не было отродясь.
[02:32:09.580 --> 02:32:11.580]  Ну, в общем-то, я тоже писал код на паскале.
[02:32:11.580 --> 02:32:18.580]  Но правда там фишка такая, я не умел тогда открыть среду и там как бы настроить себе нормальный проект, но в топ-кодере этого не требовалось.
[02:32:18.580 --> 02:32:24.580]  Почему? Ну там потому что там это экзотично было, там было понятие топ-кодер арена, надо было приложение открыть.
[02:32:25.580 --> 02:32:27.580]  Нет, не на телефоне, естественно. Вот.
[02:32:28.580 --> 02:32:36.580]  И там было понятие открыть задачу. То есть там вам включается окошечко, где вам показывают задачу, и вот в этом в соседнем окошечке надо вбить решение.
[02:32:37.580 --> 02:32:49.580]  Причем не просто вбить решение, а решение там было, вы должны написать класс там с заданным названием, в котором есть публичный метод такой-то, который собственно решает задачу.
[02:32:50.580 --> 02:32:54.580]  То есть мейн писать не надо, но и у вас там была возможность это запускать.
[02:32:55.580 --> 02:33:00.580]  Вот, да, это было очень красиво и в принципе это позволяло возможность там, позволяло спокойно писать.
[02:33:01.580 --> 02:33:04.580]  То есть для этого единственное, что вам нужно было в паскале узнать, как пишется вектор и стринг, все.
[02:33:05.580 --> 02:33:08.580]  Ну и то, что там присваивание делается без двоеточия, ну и прочее.
[02:33:09.580 --> 02:33:18.580]  Не, я помню, у меня когда-то были мелочи, когда я там не понимал, почему у меня код не компилируется, потом выяснилось, что оказывается в языке C нет оператора if с большой буквы.
[02:33:20.580 --> 02:33:23.580]  Да, нет, паскаль в этом смысле как бы можно и так и так наплевать, да.
[02:33:24.580 --> 02:33:25.580]  Поэтому я там все красиво.
[02:33:26.580 --> 02:33:32.580]  Да, кто-то даже так и пишет, if, then, lz, там вот это все.
[02:33:32.580 --> 02:33:39.580]  Вот, да, ой, извините, если кого-то разбудил там, да, вот.
[02:33:44.580 --> 02:33:49.580]  Соответственно, вот, значит, так вот, так же соответственно.
[02:33:50.580 --> 02:33:52.580]  Причем более того, в этом вот next может быть все, что угодно.
[02:33:53.580 --> 02:33:57.580]  Ну, я давайте кратенько расскажу, не будем писать код, но вообще есть как писать вообще в паскале.
[02:33:57.580 --> 02:34:02.580]  На самом деле в паскале список смежности написать достаточно просто.
[02:34:03.580 --> 02:34:16.580]  То есть вы заводите список ребер, ну прям честно пишете список ребер, прям вот такой вот, вот такой там, там типа там 1, 2, там 3, 4, там 1, 4, там вот это все, да, 4, 2, ну и так далее.
[02:34:17.580 --> 02:34:19.580]  Там 3, 2, вот.
[02:34:20.580 --> 02:34:22.580]  Это будем называть ну просто честно список ребер, допустим, да.
[02:34:22.580 --> 02:34:24.580]  Еще заводим два массива.
[02:34:25.580 --> 02:34:34.580]  Заводим массив А, который для четырех вершин вам честно скажет, где находится последнее ребро, торчащее из этой вершины.
[02:34:35.580 --> 02:34:44.580]  Ну, в данном случае здесь будет написано 3, там, допустим, 3, 0, значит, 5, 4.
[02:34:45.580 --> 02:34:50.580]  Почему, да, да, в паскале можно все с один адексацией делать, поэтому там так принято и делать.
[02:34:50.580 --> 02:34:52.580]  Да, это массивы с одной, с один адексацией.
[02:34:53.580 --> 02:34:54.580]  Этого указали последнее ребро.
[02:34:55.580 --> 02:34:57.580]  А еще здесь можно указать массив УК.
[02:34:58.580 --> 02:35:00.580]  Да, ну я его называю УК, от русского слова указатель.
[02:35:02.580 --> 02:35:03.580]  Вот.
[02:35:04.580 --> 02:35:05.580]  А не то, что вы подумали, да.
[02:35:06.580 --> 02:35:07.580]  Так.
[02:35:08.580 --> 02:35:09.580]  Да, что вы подумали, да.
[02:35:10.580 --> 02:35:11.580]  Отдельно пишем.
[02:35:12.580 --> 02:35:13.580]  Ага.
[02:35:14.580 --> 02:35:15.580]  Вот.
[02:35:15.580 --> 02:35:16.580]  Вот.
[02:35:17.580 --> 02:35:22.580]  Так, ну здесь идея такая, для каждого ребра просто надо сохранить, а где находится предыдущее ребро?
[02:35:23.580 --> 02:35:25.580]  То есть, где находится предыдущее ребро?
[02:35:26.580 --> 02:35:29.580]  Ну, если его нет, пишем ноль, то есть вот так пишет, ноль, ноль, там, ноль и два.
[02:35:30.580 --> 02:35:35.580]  И тогда заметим, что pushbackнуть сюда ребро, то есть просто задаем ребро массив на нужного размера,
[02:35:36.580 --> 02:35:40.580]  и когда вам нужно pushbackнуть новое ребро, то вы там за вот единицы разбираетесь, куда там что писать.
[02:35:40.580 --> 02:35:45.580]  Ну типа сюда пишете то, что написано в массиве А, в массиве А пишете вот эту позицию.
[02:35:46.580 --> 02:35:47.580]  Все.
[02:35:48.580 --> 02:35:51.580]  То есть, поэтому получалось, что в паскале список смежности пишется элементально.
[02:35:53.580 --> 02:35:54.580]  Более что?
[02:35:57.580 --> 02:36:02.580]  Проблема только в том, что в плюсах вас разращает вектор-вектор.
[02:36:03.580 --> 02:36:06.580]  Нет, я делаю один стат массив ребер.
[02:36:06.580 --> 02:36:07.580]  Да.
[02:36:11.580 --> 02:36:14.580]  Но в принципе, нет, можно это, нет.
[02:36:25.580 --> 02:36:26.580]  Нет.
[02:36:27.580 --> 02:36:31.580]  Мы только храним, где находятся, для каждой вершины храним, где находятся последние ребра.
[02:36:31.580 --> 02:36:41.580]  Вот, как находятся, а очень просто, когда вы добавляете ребро, вы тут же добавляете обратное.
[02:36:46.580 --> 02:36:47.580]  Чего?
[02:36:51.580 --> 02:36:56.580]  Ну не хранишь, а просто, если у тебя ребро имеет индекс int, то индекс обратного ребра индекс XOR 1.
[02:36:59.580 --> 02:37:00.580]  Чего?
[02:37:01.580 --> 02:37:13.580]  Ну это да, но правда единственный минус, что иногда оказывается, что если вы хотите оптимизировать свой код где-нибудь там на 0,4 секунды, то оказывается, что избавиться от вектора-векторов это оказывается разумной идеей.
[02:37:14.580 --> 02:37:18.580]  Знаете, вот есть такая подлая задача, у вас она даже в ДЗ есть.
[02:37:19.580 --> 02:37:22.580]  Задача называется найдите отсвертку.
[02:37:24.580 --> 02:37:25.580]  Нет, ладно, найдите SOS DP.
[02:37:26.580 --> 02:37:27.580]  Так вот, ситуация.
[02:37:28.580 --> 02:37:30.580]  Допустим, вы решили написать честное DP.
[02:37:32.580 --> 02:37:33.580]  Ну в смысле?
[02:37:34.580 --> 02:37:41.580]  Ну потому что если объяснять это детям, которые не знают там многомерного FFT, вот этой вот высокой математики, то как вы им будете объяснять?
[02:37:42.580 --> 02:37:43.580]  Будете объяснять так.
[02:37:44.580 --> 02:37:50.580]  Вот пусть DP от маск ИТО, это там сумма по всем подмаскам, которые в первые EBIT такие же, как у маски.
[02:37:51.580 --> 02:37:52.580]  Так вот, и получается какая динамика?
[02:37:53.580 --> 02:37:56.580]  Так вот, самый тупой вариант, а давайте вот честно эту динамику, прям двумерную напишем.
[02:37:57.580 --> 02:38:02.580]  Так вот, как выразила практика, если вы напишете это на двумерном векторе, вы рискуете нарваться на TL.
[02:38:03.580 --> 02:38:06.580]  Да, там его ужали на 0,8, но вот оказывается проблема.
[02:38:08.580 --> 02:38:09.580]  Вот.
[02:38:10.580 --> 02:38:12.580]  И там вот оказывается, ну вот, ну как-то вот, да, возникает проблема.
[02:38:13.580 --> 02:38:18.580]  То есть там вот оказывается, что, по-моему, если замениться хотя бы на статику, то, по-моему, там уже оказывается, окей.
[02:38:21.580 --> 02:38:22.580]  Вот.
[02:38:22.580 --> 02:38:23.580]  Там двумерные?
[02:38:24.580 --> 02:38:25.580]  Ну, в исходной версии, да.
[02:38:26.580 --> 02:38:29.580]  Другой вопрос, что это можно допилить до одномерного массива, естественно.
[02:38:30.580 --> 02:38:32.580]  Ну и вообще мы с вами уже убедились, да, что там.
[02:38:33.580 --> 02:38:35.580]  То есть он на векторе TLется?
[02:38:36.580 --> 02:38:37.580]  Вот.
[02:38:38.580 --> 02:38:41.580]  Если TL закрутили за 0,8, то может по TL.
[02:38:43.580 --> 02:38:47.580]  Нет, там много памяти, много векторов, то есть вот оказывается, вектора в этом плане дают.
[02:38:47.580 --> 02:38:48.580]  Вот такие.
[02:38:49.580 --> 02:38:53.580]  Ну тоже можно, да, но нет, понятно, что ладно, в СОЗДП не надо этого делать в принципе, на самом деле.
[02:38:54.580 --> 02:38:58.580]  Но там просто оказывалось, что на двумерном массиве, оказывается, можно достичь там 0,3.
[02:38:59.580 --> 02:39:00.580]  Вполне себе.
[02:39:01.580 --> 02:39:02.580]  Да, массив там 2 в 20, если что.
[02:39:03.580 --> 02:39:04.580]  Вот.
[02:39:05.580 --> 02:39:07.580]  Так что можете, в принципе, поэкспериментировать на эту тему.
[02:39:08.580 --> 02:39:09.580]  Вот.
[02:39:10.580 --> 02:39:13.580]  То есть там вот, поэтому, поэтому иногда вот вектор векторов, это то, чем, вот, особенно, если вы хотите, там, вот, вот.
[02:39:13.580 --> 02:39:14.580]  Вот.
[02:39:14.580 --> 02:39:15.580]  То есть такие вот балансики.
[02:39:16.580 --> 02:39:20.580]  Ну и тем более, нет, у меня был вообще прецедент, что даже вообще многомерными массивами иногда баловаться не надо,
[02:39:20.580 --> 02:39:25.580]  потому что я рассказывал этот прецедент, когда я написал решение с пятимерным массивом, даже статическим, и получил TL.
[02:39:26.580 --> 02:39:32.580]  Я поправил пятимерный массив на одномерный массив с, там, патчингом вручную, там, пяти индексов в один.
[02:39:33.580 --> 02:39:36.580]  И получил там, окей, там, с полутора миллиметра.
[02:39:36.580 --> 02:39:37.580]  Да.
[02:39:38.580 --> 02:39:39.580]  Вот.
[02:39:39.580 --> 02:39:40.580]  Так что тут...
[02:39:45.580 --> 02:39:46.580]  Да.
[02:39:47.580 --> 02:39:48.580]  Да.
[02:39:49.580 --> 02:39:50.580]  Да.
[02:39:51.580 --> 02:39:52.580]  Да.
[02:39:53.580 --> 02:39:54.580]  Да.
[02:39:55.580 --> 02:39:56.580]  Да.
[02:39:57.580 --> 02:39:58.580]  Да.
[02:39:59.580 --> 02:40:00.580]  Да.
[02:40:01.580 --> 02:40:02.580]  Да.
[02:40:03.580 --> 02:40:04.580]  Да.
[02:40:04.580 --> 02:40:05.580]  Вот.
[02:40:06.580 --> 02:40:09.580]  Обязательно вообще-то так торопиться, возвращать с из этого языка?
[02:40:10.580 --> 02:40:11.580]  Вот.
[02:40:12.580 --> 02:40:13.580]  А это, нет, это следующая оптимизация.
[02:40:14.580 --> 02:40:15.580]  Да.
[02:40:16.580 --> 02:40:17.580]  Нет, на самом деле, смотрите, лучше тут переписали.
[02:40:18.580 --> 02:40:19.580]  Так.
[02:40:20.580 --> 02:40:23.580]  Если с, значит, пишем, если с равно нулю, то continue.
[02:40:24.580 --> 02:40:25.580]  Так.
[02:40:26.580 --> 02:40:27.580]  Здесь мы напишем по-другому.
[02:40:28.580 --> 02:40:30.580]  Здесь мы напишем it.push от c.
[02:40:31.580 --> 02:40:32.580]  Вот так.
[02:40:34.580 --> 02:40:36.580]  Нет, потому что, ну, вот, то есть вот такая вот идея возникает.
[02:40:37.580 --> 02:40:40.580]  То есть, видите, мы ничего не удаляем, а просто вот двигаем итератор дальше.
[02:40:41.580 --> 02:40:44.580]  Видите, тут, да, вот этот амперсант является важной частью алгоритма.
[02:40:45.580 --> 02:40:46.580]  Вот.
[02:40:47.580 --> 02:40:48.580]  Нет.
[02:40:49.580 --> 02:40:50.580]  Нет.
[02:40:51.580 --> 02:40:52.580]  Эктератора даже нет.
[02:40:53.580 --> 02:40:54.580]  Это же не то, на что нужно...
[02:40:55.580 --> 02:40:57.580]  Упрызать итератор, далее квейс на структуру.
[02:40:58.580 --> 02:41:01.580]  Нет, просто, нет, важный момент, понимаете, что если я тут не напишу амперсант,
[02:41:01.580 --> 02:41:06.580]  то он скажет, то как бы itnext будет работать просто для копии итератора.
[02:41:07.580 --> 02:41:08.580]  А кур it от v не поменяется.
[02:41:09.580 --> 02:41:10.580]  Да, здесь...
[02:41:11.580 --> 02:41:12.580]  Ну, такой.
[02:41:13.580 --> 02:41:17.580]  Нет, ну, здесь просто вот, может, корректнее так писать.
[02:41:18.580 --> 02:41:23.580]  Потому что, мало ли, потому что такой интерфейс дает вам возможность внутри самой сети,
[02:41:24.580 --> 02:41:26.580]  по идее, проявить там какую-то свою фантазию.
[02:41:27.580 --> 02:41:30.580]  Потому что, по идее, если от вас требует такой интерфейс,
[02:41:31.580 --> 02:41:32.580]  то это означает, что вы там в сети можете писать все, что угодно,
[02:41:33.580 --> 02:41:34.580]  что поддерживает этот интерфейс.
[02:41:35.580 --> 02:41:36.580]  Вот.
[02:41:37.580 --> 02:41:40.580]  И это даст вам возможность, может быть, где-то что-то лучше сделать.
[02:41:41.580 --> 02:41:42.580]  Вот как векторы, например.
[02:41:43.580 --> 02:41:45.580]  Потому что векторы, что такое вектор?
[02:41:46.580 --> 02:41:48.580]  Это, с точки зрения шаблона, это что угодно,
[02:41:49.580 --> 02:41:51.580]  что поддерживает интерфейс с квадратными скобочками и всеми методами, которые там прописаны.
[02:41:52.580 --> 02:41:54.580]  И еще требования, чтобы они там адекватно работали.
[02:41:54.580 --> 02:41:56.580]  Например, за единицу, за амортизацию, бла-бла-бла.
[02:41:57.580 --> 02:41:58.580]  Вот.
[02:41:59.580 --> 02:42:00.580]  Но у нас есть возможность иногда подшаманить.
[02:42:01.580 --> 02:42:03.580]  Потому что иногда выясняется, что вектор Bool, или вектор Int,
[02:42:04.580 --> 02:42:06.580]  можно реализовать оптимальнее, чем вектор от произвольного типа.
[02:42:07.580 --> 02:42:08.580]  Вот.
[02:42:09.580 --> 02:42:10.580]  Поэтому, ну вот.
[02:42:11.580 --> 02:42:14.580]  И как бы такая интерфейсизация вам дает возможность так сделать.
[02:42:15.580 --> 02:42:16.580]  Но другой вопрос.
[02:42:17.580 --> 02:42:18.580]  Да, там другой вопрос, что вектор Bool, конечно, мы там нарушаем,
[02:42:19.580 --> 02:42:20.580]  или там нарушаем ее почему-то, да.
[02:42:21.580 --> 02:42:22.580]  Но это уже другая история.
[02:42:25.580 --> 02:42:26.580]  Вот.
[02:42:27.580 --> 02:42:28.580]  Нет, ну просто нет.
[02:42:29.580 --> 02:42:31.580]  Вектор Int, нет, но вектор Int, наверное, все-таки полегче.
[02:42:32.580 --> 02:42:34.580]  Потому что вектор Int, есть подозрение, что какой-нибудь олдскульный C,
[02:42:35.580 --> 02:42:38.580]  наверное, с массивом на Int, может уметь работать чуть лучше,
[02:42:39.580 --> 02:42:41.580]  чем с массивом на абсолютно произвольные типы.
[02:42:42.580 --> 02:42:44.580]  То есть там, ну, может быть, какие-то...
[02:42:47.580 --> 02:42:50.580]  Ну, тем, что это более базовый такой C-шный тип.
[02:42:51.580 --> 02:42:52.580]  И, возможно, там просто в каких-нибудь сях,
[02:42:52.580 --> 02:42:54.580]  просто можно более удобно с ним работать, что ли.
[02:42:55.580 --> 02:42:58.580]  А, или там, ну да, или там, если вызывается метод там,
[02:42:59.580 --> 02:43:00.580]  какой-нибудь fill.
[02:43:01.580 --> 02:43:02.580]  Нет, ладно, ну там, может там...
[02:43:03.580 --> 02:43:04.580]  Например, resize, ты можешь не вызывать конструктор.
[02:43:05.580 --> 02:43:06.580]  Да.
[02:43:07.580 --> 02:43:08.580]  Ну, что-то такое.
[02:43:09.580 --> 02:43:10.580]  Ну да, да, да, то есть вот.
[02:43:11.580 --> 02:43:12.580]  Так, давайте...
[02:43:13.580 --> 02:43:18.580]  Это текущий предвидел вопросов, но если что-то неправ.
[02:43:19.580 --> 02:43:20.580]  Чего?
[02:43:20.580 --> 02:43:22.580]  Ну так, не превращается в какой-то ассамбльный код.
[02:43:23.580 --> 02:43:24.580]  Ну хорошо, хорошо, да.
[02:43:25.580 --> 02:43:26.580]  Это работа на уровне компиляции.
[02:43:27.580 --> 02:43:28.580]  Он понимает, о, мне, Int, ну...
[02:43:29.580 --> 02:43:30.580]  Так.
[02:43:31.580 --> 02:43:34.580]  Нет, если не компилятор, то сам оптимизатор как бы скажет,
[02:43:35.580 --> 02:43:37.580]  что да, вот эта операция лишняя, мы ее выкидем.
[02:43:38.580 --> 02:43:39.580]  Да, это интересно.
[02:43:40.580 --> 02:43:41.580]  Да, да, да.
[02:43:44.580 --> 02:43:45.580]  Ладно, да.
[02:43:46.580 --> 02:43:47.580]  Ну не суй.
[02:43:48.580 --> 02:43:49.580]  Нет, ну не суй, ладно, да.
[02:43:50.580 --> 02:43:52.580]  Но вот этот коцикл пор конечный, он оптимизируется.
[02:43:55.580 --> 02:43:56.580]  Ой, нет.
[02:43:57.580 --> 02:43:59.580]  Не, ребят, все еще, нет, на самом деле, нет, ну тут как бы все еще круче.
[02:44:00.580 --> 02:44:01.580]  Нет, ладно, более крутой пример это да.
[02:44:02.580 --> 02:44:03.580]  Вопрос как бы, а, std set.
[02:44:04.580 --> 02:44:07.580]  Потому что вы можете забабахать сет на, там в любом случае на красночерных деревьях.
[02:44:08.580 --> 02:44:12.580]  А можете сказать, что если сет от Int, то давайте-ка лучше забабахаем там...
[02:44:13.580 --> 02:44:14.580]  М-м-м.
[02:44:15.580 --> 02:44:16.580]  Дереван.
[02:44:16.580 --> 02:44:17.580]  Именно.
[02:44:18.580 --> 02:44:19.580]  Именно, да.
[02:44:20.580 --> 02:44:21.580]  Дереван Индебоса, да.
[02:44:22.580 --> 02:44:23.580]  Вот.
[02:44:24.580 --> 02:44:26.580]  Которая будет работать за какую-нибудь там крутую симптутику.
[02:44:27.580 --> 02:44:28.580]  Да.
[02:44:29.580 --> 02:44:30.580]  Непонятно, что круче LogN или LogInt.
[02:44:31.580 --> 02:44:32.580]  Которая там будет.
[02:44:33.580 --> 02:44:34.580]  А, нет, там будет LogLogN.
[02:44:35.580 --> 02:44:37.580]  А LogLogInt это у нас сколько?
[02:44:38.580 --> 02:44:39.580]  Logarithm 32, то есть...
[02:44:40.580 --> 02:44:41.580]  Да, пять.
[02:44:41.580 --> 02:44:42.580]  Вот.
[02:44:43.580 --> 02:44:46.580]  Правда, да, правда вам придется какие-то там хэш-мапы использовать, да, но...
[02:44:47.580 --> 02:44:50.580]  Но чисто теоретически обратите внимание, у вас такая возможность есть.
[02:44:51.580 --> 02:44:53.580]  А у дерева Индебоса, у него же памяти будет больше, чем у...
[02:44:54.580 --> 02:44:56.580]  Да, нет, но если вы не забабахаете хэш-таблиц, конечно.
[02:44:57.580 --> 02:44:58.580]  Так-то да.
[02:44:59.580 --> 02:45:02.580]  Ну, идеально дереван Индебоса потребует от количества чисел в Индебосе.
[02:45:03.580 --> 02:45:04.580]  Это да.
[02:45:05.580 --> 02:45:06.580]  Да, да, да.
[02:45:07.580 --> 02:45:09.580]  В этом смысле да, но теоретически такая возможность есть.
[02:45:10.580 --> 02:45:11.580]  Вот.
[02:45:12.580 --> 02:45:13.580]  Нет, ну это на самом деле, да, дискуссия эта скорее по C++,
[02:45:14.580 --> 02:45:15.580]  типа зачем нужны такие интерфейсы.
[02:45:16.580 --> 02:45:17.580]  Ну, кстати, и в Олимпиадах тоже они могут пригодиться,
[02:45:18.580 --> 02:45:20.580]  потому что на самом деле, да, то есть в Олимпиадах это редко надо,
[02:45:21.580 --> 02:45:23.580]  но если вы пишете какую-то сложную задачу с несколькими составляющими,
[02:45:24.580 --> 02:45:26.580]  то если вы пишете это в подобного рода логи, очень удобно.
[02:45:27.580 --> 02:45:31.580]  Тем более, что этот интерфейс, ну, просто удобно про это писать,
[02:45:32.580 --> 02:45:34.580]  ну, как минимум потому, что каждую часть программы пишете как черный ящик,
[02:45:35.580 --> 02:45:38.580]  который общается с внешним миром только через заданный интерфейс.
[02:45:39.580 --> 02:45:41.580]  А черный писал по реворту классы FFT.
[02:45:42.580 --> 02:45:43.580]  Ну вот, ну класс-то.
[02:45:44.580 --> 02:45:45.580]  Ну, замечательно.
[02:45:46.580 --> 02:45:48.580]  Ну, у меня FFT это шаблоны класса двух аргументов,
[02:45:49.580 --> 02:45:53.580]  она следует от класса FFT0, у которого есть вертальные функции FFT и NIP.
[02:45:54.580 --> 02:45:55.580]  Боже мой.
[02:45:56.580 --> 02:45:57.580]  А ты понимаешь, что это будет очень легко работать?
[02:45:58.580 --> 02:46:00.580]  Виртуально нас и виртуально всегда писал в интерфейсе.
[02:46:01.580 --> 02:46:02.580]  Ну, да.
[02:46:03.580 --> 02:46:05.580]  Нет, ну это уже немножко о другом.
[02:46:06.580 --> 02:46:07.580]  Ой, ой, да.
[02:46:07.580 --> 02:46:08.580]  Да, да, да.
[02:46:09.580 --> 02:46:11.580]  Нет, ну тут, да, бесконечно, может долго,
[02:46:12.580 --> 02:46:15.580]  но тут в данном случае, конечно, разговор не о том, чтобы это было оптимальнее,
[02:46:16.580 --> 02:46:19.580]  да, то есть это может быть лишние интерфейсизации иногда не даст вам возможность чуть-чуть оптимизировать,
[02:46:20.580 --> 02:46:23.580]  но с другой стороны, если вы там пишете сложную программу или еще круче,
[02:46:24.580 --> 02:46:28.580]  такой редкий случай, такой тоже бывает, если внутри команды, если код пишет более чем один человек,
[02:46:29.580 --> 02:46:32.580]  а такое тоже бывает, между прочим, да,
[02:46:33.580 --> 02:46:35.580]  что там один человек напишет вам там потоки, допустим,
[02:46:35.580 --> 02:46:37.580]  то есть вы там даете кому-то, слушай, давай, напиши мне Динец,
[02:46:38.580 --> 02:46:41.580]  у вас там сакоманник за 6 минут его пишет, допустим, да, вот.
[02:46:42.580 --> 02:46:43.580]  Он говорит, где-то за.
[02:46:44.580 --> 02:46:45.580]  Ну вот.
[02:46:46.580 --> 02:46:49.580]  Нет, ну просто фишка, что вы с ним спаены, вы уже знаете его примерный интерфейс,
[02:46:50.580 --> 02:46:52.580]  который вам предоставят, поэтому вы в принципе уже потом,
[02:46:53.580 --> 02:46:56.580]  когда он допишет Динеца, вы за это время уже вывели, соответственно,
[02:46:57.580 --> 02:46:58.580]  какую сеть вы хотите построить и запустить,
[02:46:59.580 --> 02:47:02.580]  и после этого садитесь и вбиваете уже на заднем интерфейсе.
[02:47:02.580 --> 02:47:05.580]  Но вот нет, нет, да, но нет, был-то он сакоманька, но вы его знаете,
[02:47:06.580 --> 02:47:08.580]  потому что вы, скорее всего, с ним спаены, ну или он вам расскажет,
[02:47:09.580 --> 02:47:11.580]  на первый раз расскажет, а потом он уже спаеный, так что это вещь такая.
[02:47:12.580 --> 02:47:15.580]  Вот нет, на самом деле, знаете, классическая история из там статьи,
[02:47:16.580 --> 02:47:19.580]  как стать три же, там, как и три раза выиграть чемпионат Урала по программированию.
[02:47:20.580 --> 02:47:21.580]  Чего?
[02:47:22.580 --> 02:47:24.580]  Ну, достижение, ну, достижение было такое.
[02:47:25.580 --> 02:47:27.580]  Нет, ну, неважно, там парень, там это уральцы, там какие-то были,
[02:47:27.580 --> 02:47:28.580]  но это неважно, у них было достижение, чтобы, помимо этого,
[02:47:29.580 --> 02:47:31.580]  они еще взяли бронзу на чемпионате мира, так что нормально.
[02:47:32.580 --> 02:47:34.580]  Вот, в чем более того, когда они выходили в финал,
[02:47:35.580 --> 02:47:36.580]  говорит, я вот помню, когда мы не сговариваясь,
[02:47:37.580 --> 02:47:39.580]  вот когда мы вот писали вот код вот параллельно,
[02:47:40.580 --> 02:47:42.580]  и не сговариваясь, там назвали одинаково функцию,
[02:47:43.580 --> 02:47:45.580]  которые стыковались в нашей модуле.
[02:47:46.580 --> 02:47:48.580]  Так вот, именно в этот момент, за 10 минут до конца контеста,
[02:47:49.580 --> 02:47:50.580]  я поверил, что мы выйдем в финал.
[02:47:51.580 --> 02:47:53.580]  Вот, как вы понимаете, вот, в этом моменте,
[02:47:53.580 --> 02:47:55.580]  за 10 минут до конца контеста, я поверил, что мы выйдем в финал.
[02:47:56.580 --> 02:47:58.580]  Вот, команда вышла в финал и взяла бронзовую медаль.
[02:47:59.580 --> 02:48:01.580]  Чемпионатурала все еще существует?
[02:48:02.580 --> 02:48:03.580]  Кстати, да.
[02:48:04.580 --> 02:48:05.580]  Да, мне что-то вчера шепнули, что вроде-то когда-то там в конце мая,
[02:48:06.580 --> 02:48:07.580]  он там даже будет, может, мы даже туда съездим.
[02:48:08.580 --> 02:48:09.580]  Не знаю.
[02:48:10.580 --> 02:48:11.580]  В последнее время, как бы, да, хотите ли вы съездить 20 мая
[02:48:12.580 --> 02:48:13.580]  на чемпионатурала?
[02:48:14.580 --> 02:48:15.580]  Так, когда у меня там сессия?
[02:48:16.580 --> 02:48:17.580]  Вы знаете, нет.
[02:48:18.580 --> 02:48:20.580]  Хотя, хотя, с другой стороны, не знаю, какие-нибудь там вот...
[02:48:20.580 --> 02:48:21.580]  Ага, тогда поедут, просто два потока поедут.
[02:48:22.580 --> 02:48:23.580]  Нет, ладно, нет, Степанов, конечно, за такое бонус давать точно не будет, да.
[02:48:24.580 --> 02:48:25.580]  Вот.
[02:48:26.580 --> 02:48:27.580]  Нет, ну нет, ну на самом деле.
[02:48:28.580 --> 02:48:30.580]  Ну, я боюсь просто, к сожалению, да, если бы всего-то
[02:48:31.580 --> 02:48:32.580]  сдавался по всем предметам, тогда да.
[02:48:33.580 --> 02:48:35.580]  Просто у вас же там зачет, зачет и еще там по мотонам всяким.
[02:48:36.580 --> 02:48:37.580]  Так что нет, это вещь такая, да.
[02:48:38.580 --> 02:48:39.580]  Вот.
[02:48:40.580 --> 02:48:41.580]  Ну, хорошо.
[02:48:42.580 --> 02:48:43.580]  Ну, как бы, да.
[02:48:44.580 --> 02:48:45.580]  Вот.
[02:48:46.580 --> 02:48:47.580]  Вот.
[02:48:47.580 --> 02:48:48.580]  Так что нет, это вещь такая, да.
[02:48:49.580 --> 02:48:50.580]  Вот, ну хорошо.
[02:48:51.580 --> 02:48:52.580]  Ладно, если возвращаться к делу.
[02:48:53.580 --> 02:48:55.580]  Ну, действительно, почему хотелось, значит, не дооптимизировать отсюда,
[02:48:56.580 --> 02:48:58.580]  потому что, ну, по камере, по камере мы с вами будем считать,
[02:48:59.580 --> 02:49:01.580]  что именно это называется алгоритм Диница.
[02:49:02.580 --> 02:49:03.580]  Да.
[02:49:04.580 --> 02:49:06.580]  Еще раз подчеркну, грамматический момент.
[02:49:07.580 --> 02:49:08.580]  Неправильно говорит алгоритм Диницы.
[02:49:09.580 --> 02:49:12.580]  Правильно говорит алгоритм Диница, потому что фамилия Диница,
[02:49:13.580 --> 02:49:14.580]  то есть Диниц, пишется вот так.
[02:49:15.580 --> 02:49:16.580]  Да.
[02:49:17.580 --> 02:49:18.580]  Вот.
[02:49:19.580 --> 02:49:20.580]  Вот.
[02:49:21.580 --> 02:49:22.580]  Да, его зовут Ефим.
[02:49:23.580 --> 02:49:24.580]  Да.
[02:49:25.580 --> 02:49:27.580]  Да, там что-то Ефим, там Ефим, что-то там Диниц.
[02:49:28.580 --> 02:49:31.580]  Мы там уже гуглили, да, советские позы, там позже израильские ученые.
[02:49:32.580 --> 02:49:33.580]  Да, да, да, вот это вот.
[02:49:34.580 --> 02:49:35.580]  Вот.
[02:49:36.580 --> 02:49:37.580]  Поэтому правильно говорит алгоритм Диница.
[02:49:38.580 --> 02:49:40.580]  И писать надо Диница, а не Диницу.
[02:49:41.580 --> 02:49:42.580]  Вот.
[02:49:43.580 --> 02:49:44.580]  Но с нашей точки...
[02:49:45.580 --> 02:49:47.580]  Он как бы является, да, часто говорят еще,
[02:49:48.580 --> 02:49:49.580]  что давайте писать блокирующие потоки как Диница.
[02:49:50.580 --> 02:49:51.580]  Почему?
[02:49:52.580 --> 02:49:53.580]  Ну, потому что, может быть, да, Диниц это, можно сказать,
[02:49:54.580 --> 02:49:56.580]  человек, который ввел концепцию блокирующих потоков.
[02:49:57.580 --> 02:49:58.580]  Вот.
[02:49:59.580 --> 02:50:00.580]  Ну, как ввел?
[02:50:01.580 --> 02:50:02.580]  Может он ее не вводил прям явно именно как концепцию,
[02:50:03.580 --> 02:50:04.580]  потому что потом обнаружилось, что, оказывается,
[02:50:05.580 --> 02:50:07.580]  можно блокирующий поток искать вот не таким образом,
[02:50:08.580 --> 02:50:09.580]  как он предлагает, а чуть по оптимальнее.
[02:50:09.580 --> 02:50:13.580]  И дело даже не в этой логичной неосимпатической оптимизации.
[02:50:14.580 --> 02:50:16.580]  Потому что, да, есть логичная, потому что, в принципе,
[02:50:17.580 --> 02:50:18.580]  вот есть такая неосимпатическая оптимизация,
[02:50:19.580 --> 02:50:20.580]  которая говорит о том, что вот как правильно заметили,
[02:50:21.580 --> 02:50:23.580]  что если мы сделали, пропустили С,
[02:50:24.580 --> 02:50:26.580]  а тут курс С было больше, то возникает вопрос.
[02:50:27.580 --> 02:50:29.580]  То, во-первых, это означает, что мы ребро насытили,
[02:50:30.580 --> 02:50:32.580]  а во-вторых, а почему бы нам, собственно,
[02:50:33.580 --> 02:50:36.580]  не пойти в следующее ребро и остаток не пихнуть дальше?
[02:50:37.580 --> 02:50:38.580]  Что?
[02:50:39.580 --> 02:50:44.580]  Ну, правильное... Смотрите, оптимизация пишется здесь так.
[02:50:45.580 --> 02:50:47.580]  Значит, я убираю ретурн С и говорю так.
[02:50:48.580 --> 02:50:50.580]  Курс С минус равно С.
[02:50:51.580 --> 02:50:53.580]  Значит, если оказалось...
[02:50:56.580 --> 02:50:57.580]  Нет, тогда тут неправильно.
[02:50:58.580 --> 02:51:00.580]  Надо написать тогда так, int ans равно нулю.
[02:51:01.580 --> 02:51:02.580]  Вот так напишем.
[02:51:03.580 --> 02:51:04.580]  Ну, для удобства просто.
[02:51:04.580 --> 02:51:06.580]  Значит, С равно вот это, значит, push С.
[02:51:07.580 --> 02:51:09.580]  Значит, мы здесь напишем, курс С минус равно С,
[02:51:10.580 --> 02:51:11.580]  а ans плюс равно С.
[02:51:13.580 --> 02:51:17.580]  Значит, если оказалось, что курс С равно нулю,
[02:51:18.580 --> 02:51:20.580]  то ретурн ans.
[02:51:26.580 --> 02:51:28.580]  Вот. А если оно оказалось не равно нулю,
[02:51:29.580 --> 02:51:30.580]  значит, мы ребро по-любому насытили,
[02:51:31.580 --> 02:51:32.580]  и можно делать next и идти дальше.
[02:51:34.580 --> 02:51:36.580]  Нет, если курс С осталось неравным нулю,
[02:51:37.580 --> 02:51:38.580]  значит, мы его насытили.
[02:51:39.580 --> 02:51:40.580]  Наверное. Нет?
[02:51:42.580 --> 02:51:44.580]  Да, но смотрите, тогда два варианта.
[02:51:45.580 --> 02:51:47.580]  Либо мы это ребро насытили, и тогда можно идти дальше.
[02:51:48.580 --> 02:51:51.580]  Либо мы его не насытили, но у нас была возможность пихнуть там больше,
[02:51:52.580 --> 02:51:53.580]  и мы этого не сделали.
[02:51:55.580 --> 02:51:59.580]  Поэтому это означает, что через это ребро мы больше все равно не пихнем ничего.
[02:52:00.580 --> 02:52:02.580]  Потому что, смотрите, здесь технология такая.
[02:52:02.580 --> 02:52:04.580]  То есть запускаем мы этот DFS изначально,
[02:52:05.580 --> 02:52:08.580]  то у нас как бы DFS от S и плюс бесконечность.
[02:52:10.580 --> 02:52:13.580]  То есть как бы я хочу жадно пихнуть вот много-много воды.
[02:52:15.580 --> 02:52:18.580]  Но DFS у меня говорит, что я пришел тут по какому-то пути,
[02:52:19.580 --> 02:52:21.580]  и по этому пути я могу пихнуть там сколько-то.
[02:52:22.580 --> 02:52:23.580]  Вот.
[02:52:24.580 --> 02:52:26.580]  Там пихнуть, это пихнуть по этому пути сколько-то.
[02:52:27.580 --> 02:52:28.580]  Я пытаюсь это пихнуть по максимуму.
[02:52:29.580 --> 02:52:30.580]  То есть если я могу пихнуть 179,
[02:52:30.580 --> 02:52:31.580]  я могу пихнуть только 57,
[02:52:32.580 --> 02:52:34.580]  я хочу пойти в следующий ребро и допихать оставшееся 122.
[02:52:36.580 --> 02:52:37.580]  Вот.
[02:52:38.580 --> 02:52:41.580]  Да, и здесь, конечно, уже не ретурн 0, а ретурнация, естественно.
[02:52:43.580 --> 02:52:44.580]  Вот.
[02:52:45.580 --> 02:52:47.580]  То есть это такая более оптимальная версия 1.
[02:52:48.580 --> 02:52:50.580]  То есть более крутого доказательства, чем вот этого у меня нет.
[02:52:52.580 --> 02:52:57.580]  Но по слухам, по-моему, есть версия задачи пихните поток от Капилевича,
[02:52:57.580 --> 02:53:02.580]  в которой исходная версия вот без синих оптимизаций тейлится.
[02:53:03.580 --> 02:53:04.580]  Ну вот.
[02:53:05.580 --> 02:53:06.580]  А вот это уже заходит.
[02:53:07.580 --> 02:53:08.580]  Что?
[02:53:09.580 --> 02:53:13.580]  Синяя оптимизация даст следующее, что мы за 1 DFS,
[02:53:14.580 --> 02:53:17.580]  ну то есть за 1 DFS, то есть DFS исходно что делал?
[02:53:18.580 --> 02:53:20.580]  Если нашел путь, то он просто по нему пропихнулся и выбросился.
[02:53:21.580 --> 02:53:22.580]  Вот.
[02:53:23.580 --> 02:53:24.580]  А здесь вот возникает идея, что
[02:53:24.580 --> 02:53:27.580]  вот мы нашли путь и пустили по нему какой-то поток.
[02:53:28.580 --> 02:53:29.580]  Величины 5.
[02:53:30.580 --> 02:53:31.580]  Почему 5?
[02:53:32.580 --> 02:53:33.580]  Потому что у вас тут в середине где-то было ребро 5.
[02:53:34.580 --> 02:53:36.580]  А до него там были ребра 100, 200, 300, 400.
[02:53:37.580 --> 02:53:39.580]  Возникает вопрос, а давайте мы вместо этого,
[02:53:40.580 --> 02:53:43.580]  после этой пятерки тут еще в ребра пойдем и оставшиеся 95 распихаем.
[02:53:44.580 --> 02:53:45.580]  Вот.
[02:53:46.580 --> 02:53:47.580]  Ну да.
[02:53:48.580 --> 02:53:50.580]  То есть смотрите, типичный пример, на котором эта ситуация проявляется,
[02:53:51.580 --> 02:53:52.580]  выглядит вот так.
[02:53:52.580 --> 02:53:54.580]  Вот, допустим, у вас там какая-нибудь сеть,
[02:53:55.580 --> 02:54:00.580]  где у вас тут много-много-много, там 10 девятый, 10 девятый, 10 девятый, 10 девятый.
[02:54:01.580 --> 02:54:03.580]  И куча вот такой вот гадости.
[02:54:09.580 --> 02:54:10.580]  Вот.
[02:54:11.580 --> 02:54:12.580]  По единичке.
[02:54:15.580 --> 02:54:20.580]  Обычный единиц будет на пропих каждой единичке
[02:54:20.580 --> 02:54:22.580]  тратить прям ОАТВ-времени.
[02:54:26.580 --> 02:54:29.580]  Ну вот, то есть ОАТВ будет работать, там В в квадрат получится.
[02:54:30.580 --> 02:54:31.580]  Вот.
[02:54:32.580 --> 02:54:34.580]  А при вот таком жадной реализации,
[02:54:35.580 --> 02:54:38.580]  он эти 10 девятый тут распихает, и это сработает просто за один ДФС.
[02:54:38.580 --> 02:54:40.580]  Нет, ну скажем так, хуже не стало.
[02:54:42.580 --> 02:54:46.580]  Потому что ДФС продолжает говорить, что как только ДФС идет дальше,
[02:54:47.580 --> 02:54:50.580]  то есть ФОР идет дальше, значит, мы это ребро уже больше рассматривать не имеем смысла.
[02:54:51.580 --> 02:54:53.580]  Поэтому он продолжает работать за количество удаленных ребер,
[02:54:54.580 --> 02:54:56.580]  плюс какой-то последний может быть найденный путь.
[02:54:57.580 --> 02:54:59.580]  То есть, в общем-то, у вас есть какие-то проблемы?
[02:55:00.580 --> 02:55:02.580]  У вас есть какие-то проблемы?
[02:55:03.580 --> 02:55:05.580]  У вас есть какие-то проблемы?
[02:55:05.580 --> 02:55:07.580]  То есть какой-то последний может быть найденный путь?
[02:55:10.580 --> 02:55:12.580]  Тут вот в чем идея.
[02:55:13.580 --> 02:55:15.580]  Нет, хотя не совсем правда.
[02:55:16.580 --> 02:55:18.580]  Нет, смотрите.
[02:55:19.580 --> 02:55:21.580]  Дело не совсем так.
[02:55:22.580 --> 02:55:24.580]  Значит, смотрите, теперь доказательство звучит так.
[02:55:25.580 --> 02:55:27.580]  Каждое ребро либо сейчас удалено,
[02:55:28.580 --> 02:55:30.580]  либо оно сейчас удалено,
[02:55:31.580 --> 02:55:33.580]  либо по нему мы нашли путь и протолкнули.
[02:55:33.580 --> 02:55:35.580]  Вот этот вот пуш был выполнен.
[02:55:36.580 --> 02:55:38.580]  Но заметим, что понятно,
[02:55:39.580 --> 02:55:41.580]  по каждому ребру пуш мог быть выполнен несколько раз, естественно.
[02:55:42.580 --> 02:55:44.580]  Но каждый пуш будет соответствовать тому,
[02:55:45.580 --> 02:55:47.580]  что мы теоретически нашли путь хотя бы один
[02:55:48.580 --> 02:55:50.580]  и протолкнули по этому пути какой-то путь.
[02:55:51.580 --> 02:55:53.580]  Таких путей будет не более, чем е, потому что насыщенное ребро.
[02:55:54.580 --> 02:55:55.580]  Понимаете, да?
[02:55:56.580 --> 02:55:58.580]  Поэтому асимптотика хуже не стала.
[02:55:59.580 --> 02:56:02.580]  Другой вопрос, что у вас несколько пушей могли схлопнуться,
[02:56:03.580 --> 02:56:05.580]  что там, может быть, вы через какое-то большое ребро
[02:56:06.580 --> 02:56:09.580]  нашли много-много-много путей, но они разлетляются дальше.
[02:56:10.580 --> 02:56:12.580]  Поэтому вы на них сделали,
[02:56:13.580 --> 02:56:15.580]  конкретно это ребро сделали не много-много пушей,
[02:56:16.580 --> 02:56:18.580]  а только один большой, который вот тут просуммировался.
[02:56:19.580 --> 02:56:21.580]  Вот.
[02:56:22.580 --> 02:56:24.580]  В этом и оптимизация.
[02:56:25.580 --> 02:56:27.580]  Но как бы формально хуже не стало.
[02:56:28.580 --> 02:56:30.580]  Так что вот получилось.
[02:56:30.580 --> 02:56:32.580]  Это отдельная песня.
[02:56:33.580 --> 02:56:35.580]  Но для этого нам придется изучить масштабирование.
[02:56:36.580 --> 02:56:38.580]  Да, его можно оптимизировать с помощью масштабирования.
[02:56:39.580 --> 02:56:41.580]  И мы сделаем это.
[02:56:42.580 --> 02:56:44.580]  Но сделаем мы это, я думаю, как раз после перегрыва.
[02:56:45.580 --> 02:56:48.580]  Так сейчас у нас в оставшейся части занятия у нас будет,
[02:56:49.580 --> 02:56:51.580]  может быть, самые веселые факты, на самом деле, об этом всем.
[02:56:52.580 --> 02:56:54.580]  Так.
[02:56:54.580 --> 02:56:56.580]  С чего бы нам начать?
[02:56:57.580 --> 02:56:59.580]  Нет, ну ладно, начнем с прикола.
[02:57:00.580 --> 02:57:02.580]  Так.
[02:57:03.580 --> 02:57:05.580]  Не, если бы.
[02:57:06.580 --> 02:57:08.580]  Не, ну я могу, конечно, проанонсировать, что вот.
[02:57:09.580 --> 02:57:11.580]  Да, собственно, вот эта игра с шутками про госуслуги
[02:57:12.580 --> 02:57:14.580]  и прочие агитации на тему того, что надо читать,
[02:57:15.580 --> 02:57:17.580]  это как бы вот игра вышла вот в субботу.
[02:57:18.580 --> 02:57:20.580]  Так что мы уже можно посмотреть.
[02:57:21.580 --> 02:57:23.580]  Вот.
[02:57:24.580 --> 02:57:26.580]  Но это так.
[02:57:27.580 --> 02:57:29.580]  И с какими-то там грустными шутками.
[02:57:30.580 --> 02:57:32.580]  Господи, мне же все рассказали, у нас с 2008-го столько произошло,
[02:57:33.580 --> 02:57:35.580]  там мы сняли фильм в космосе, мы выиграли чемпионат мира,
[02:57:36.580 --> 02:57:38.580]  там мне все рассказали, выиграли чемпионат мира по хоккею.
[02:57:39.580 --> 02:57:41.580]  Нет, тебе ничего не рассказали.
[02:57:42.580 --> 02:57:44.580]  Ладно.
[02:57:45.580 --> 02:57:47.580]  Не, но этого я, очевидно, тоже не рассказали, да?
[02:57:48.580 --> 02:57:51.580]  Нет, я не знаю, может они там учатся в синергии, им все это рассказывать.
[02:57:51.580 --> 02:57:53.580]  Что-то мне подсказывают, что нет.
[02:57:54.580 --> 02:57:56.580]  Ну ладно.
[02:57:57.580 --> 02:57:59.580]  Вот. Как это, ну?
[02:58:00.580 --> 02:58:02.580]  Ладно.
[02:58:03.580 --> 02:58:05.580]  Ладно, в общем, отдельно.
[02:58:06.580 --> 02:58:08.580]  Значит, пока тут фишка такая. Дело в том, что вот алгоритм Диница,
[02:58:09.580 --> 02:58:11.580]  это вот у нас первый алгоритм, значит, соответственно,
[02:58:12.580 --> 02:58:14.580]  поиска блокирующих потоков.
[02:58:15.580 --> 02:58:17.580]  Но вот возникает вопрос, а можно ли сделать это эффективнее?
[02:58:18.580 --> 02:58:20.580]  Вот. Ну, тут произошла небольшая магия.
[02:58:21.580 --> 02:58:23.580]  Потому что действительно достаточно скоро появился такой ученый
[02:58:24.580 --> 02:58:26.580]  как Карзанов.
[02:58:27.580 --> 02:58:29.580]  Так ладно, нет смысла в акценте, просто Карзанов.
[02:58:30.580 --> 02:58:32.580]  Вот.
[02:58:33.580 --> 02:58:35.580]  И нет, советский абсолютно.
[02:58:36.580 --> 02:58:39.580]  И он подробно всем рассказал, как искать закуп.
[02:58:40.580 --> 02:58:42.580]  Правда, в аналах истории это осталось с трудом.
[02:58:43.580 --> 02:58:45.580]  Почему? Потому что дело в том, что он именно рассказал.
[02:58:46.580 --> 02:58:48.580]  То есть имело место...
[02:58:49.580 --> 02:58:51.580]  Но рассказал при этом достаточно официально.
[02:58:52.580 --> 02:58:57.580]  То есть ситуация была такая, что была какая-то конференция в Советском Союзе.
[02:58:58.580 --> 02:59:00.580]  Значит, где...
[02:59:01.580 --> 02:59:03.580]  На очередной доклад вышел товарищ Карзанов.
[02:59:04.580 --> 02:59:06.580]  И немножко, там, помахав руками,
[02:59:07.580 --> 02:59:09.580]  рассказал, как упихивать блокирующие потоки закуп.
[02:59:10.580 --> 02:59:12.580]  Вот.
[02:59:13.580 --> 02:59:15.580]  Тезисы этих докладов вроде остались,
[02:59:15.580 --> 02:59:17.580]  но вот описания, как он это сделал, равно как и статьи Карзанова,
[02:59:18.580 --> 02:59:19.580]  насколько я понял, нет.
[02:59:20.580 --> 02:59:21.580]  Или, по крайней мере, она мне неизвестна.
[02:59:22.580 --> 02:59:24.580]  Почему это лучше, если у нас ассинточка В на Е?
[02:59:25.580 --> 02:59:27.580]  Нет, ВЕ – это один блокирующий поток.
[02:59:28.580 --> 02:59:30.580]  А суммарный алгоритм Диница – это В квадрат Е.
[02:59:31.580 --> 02:59:34.580]  Вот, он пошаманил, пошаманил, сказал, как делать В квадрат.
[02:59:35.580 --> 02:59:37.580]  В квадрат в смысле В куб.
[02:59:38.580 --> 02:59:42.580]  Но более того, сведения об этом почему-то есть у Торьяна.
[02:59:42.580 --> 02:59:45.580]  Я не знаю, то ли он был на этой конференции каким-то образом.
[02:59:46.580 --> 02:59:48.580]  Нет, ну почему нет. В принципе, возможно.
[02:59:49.580 --> 02:59:50.580]  Нет, как бы да.
[02:59:51.580 --> 02:59:53.580]  Ну, как бы, я думаю, он мог к нам приехать.
[02:59:54.580 --> 02:59:55.580]  То есть, как бы да.
[02:59:56.580 --> 02:59:58.580]  То есть, конечно, забавно, что теория развивалась по обе стороны железного занавеса,
[02:59:59.580 --> 03:00:00.580]  но как бы люди как-то между собой общались, явно.
[03:00:01.580 --> 03:00:03.580]  Вот, и статьи друг друга, видимо, читали активно.
[03:00:04.580 --> 03:00:05.580]  Проталкивали потоки друг к другу.
[03:00:06.580 --> 03:00:08.580]  Нет, проталкивали потоки до другая концепция.
[03:00:09.580 --> 03:00:10.580]  Не футать.
[03:00:11.580 --> 03:00:13.580]  Да, потому что правительство не умело так хорошо конискать банкирующие.
[03:00:14.580 --> 03:00:16.580]  Нет, нет, ребят, нет, нет. Смотрите, нет.
[03:00:17.580 --> 03:00:18.580]  Это не совсем так.
[03:00:19.580 --> 03:00:21.580]  Потому что железный занавес, это не означает, что как бы все, все, что мы знаем, это мы знаем.
[03:00:22.580 --> 03:00:23.580]  И мы миру об этом не сообщаем. Нет.
[03:00:24.580 --> 03:00:25.580]  Правда, как и народ. Вот так нет.
[03:00:26.580 --> 03:00:29.580]  То есть, я думаю, там у продвинутых ученых, как бы, были возможности, собственно, читать международные журналы.
[03:00:30.580 --> 03:00:33.580]  Правда, как и у наших ученых, были возможности опубликоваться так, чтобы, собственно, другие ученые знали,
[03:00:34.580 --> 03:00:35.580]  что же надо демонстрировать, что мы крутые.
[03:00:36.580 --> 03:00:38.580]  Поэтому, как бы, да, там честно скрывать.
[03:00:38.580 --> 03:00:44.740]  скрывать то есть мы что не на уровне типа там но там типа мы умеем и так далее то есть вот более
[03:00:44.740 --> 03:00:49.940]  того там где где-то там в каких-то заметах тарьяна тарьян даже примерно рассказывает значит как там
[03:00:49.940 --> 03:00:55.100]  действительно этот выкуп но сейчас корзанов предлагает пихать но это достаточно но но это
[03:00:55.100 --> 03:01:00.140]  было какое-то что-то сложное муторо поэтому привело это к следующему примерно значит через
[03:01:00.140 --> 03:01:07.700]  не сильно долгое время появилась статья от трех индусов индусов звали значит фамилии этих
[03:01:07.700 --> 03:01:20.420]  индусов молхотра кумар и махишвари вот да индуса 3 да кумар да да да вот пожалуйста да то не так
[03:01:20.420 --> 03:01:25.900]  и писались прям вот как прям так и как как-то как слышится так и пишется да молхотра кумар махишвари
[03:01:25.900 --> 03:01:40.100]  да все прям там там вот да в чем индусов 3 а страниц статья 2 2 правда и да правда обе
[03:01:40.100 --> 03:01:45.940]  страницы а 4 и вот как бы его тут вот вот такие вот две колоночки нету кстати вы легко можете
[03:01:45.940 --> 03:01:51.340]  сами загуглить на самом деле открыть там еще сложного вот а содержательных там всего полстранички
[03:01:51.340 --> 03:01:58.100]  и в этой статье не подробно писали что у нас есть наш алгоритм ищется завокуп но на наш
[03:01:58.100 --> 03:02:03.100]  скромный взгляд он сильно проще да в принципе кстати да это тоже на самом деле тема на самом
[03:02:03.100 --> 03:02:06.380]  деле то есть как бы если какую-то задачу уже решили это не значит что не существует более
[03:02:06.380 --> 03:02:10.700]  простого решения потому что в принципе по-моему чебушова такие прецеденты были потому что у
[03:02:10.700 --> 03:02:16.260]  него но точнее так нет основным конечно человеком как в математике по моему связанным с подобного
[03:02:16.260 --> 03:02:21.940]  рода фишками по мне является товарищ пол эрдыш вот то есть он вот и да то есть у него две
[03:02:21.940 --> 03:02:27.620]  известности во-первых он там то есть количество коллабора там людей с которыми у него совместные
[03:02:27.620 --> 03:02:34.260]  статьи там просто превыше там просто там превышает все разумные пределы ну не разумно просто фишка
[03:02:34.260 --> 03:02:38.300]  в том что он именно вот то есть он вел именно кочевую жизнь он там перемещался из университета
[03:02:38.300 --> 03:02:42.500]  университета в каждом из них он с кем-то что-то делал вот то есть более того математике есть
[03:02:42.500 --> 03:02:47.540]  такая веселая вещь как число эрдыша то есть типа у самого число эрдыша 0 у всех его соавторов
[03:02:47.540 --> 03:02:53.540]  один у соавторов соавторов 2 и так далее ну то есть аналог число рукопожатия такое да вот то
[03:02:53.540 --> 03:02:59.300]  есть число эрдыша там потом вот и так далее вот это замечательная вещь и у него известно то есть
[03:02:59.300 --> 03:03:03.140]  там здесь какие-то теории в математике которые может не он первым доказал но он доказал это
[03:03:03.140 --> 03:03:08.820]  сильно проще ну то есть скажем там по-моему один из них это факт по-моему о том что вот есть такая
[03:03:08.820 --> 03:03:13.420]  теория что для любого n верно что от n до 2 n минус 1 есть простое число что-то такое
[03:03:13.420 --> 03:03:22.580]  да но я не помню насколько я помню было так вот теперь по-моему та теория мы это доказал по
[03:03:22.580 --> 03:03:29.940]  первым едва ли не чебушов вот кто-то в этом роде ну постулат ладно так себе постулат сложно это
[03:03:29.940 --> 03:03:35.500]  предполагать после там аксиомы вот такие вещи но вот но ты доказал как-то чебушов но чебушов
[03:03:35.500 --> 03:03:59.100]  до О leadershiplloießührterte
[03:03:59.100 --> 03:04:03.960]  потом спросили потом пообщались с редакторами журнала и выяснилось что они тоже ничего не
[03:04:03.960 --> 03:04:08.040]  не поняли. Поэтому сказали, а давайте мы опубликуем, вот у нас попроще доказательства есть.
[03:04:08.040 --> 03:04:12.140]  Опубликовали. Но я не могу ничего сказать за первое доказательство, второе доказательство
[03:04:12.140 --> 03:04:19.800]  действительно понятное. Вот так же соответственно. Поэтому вот так и здесь. То есть здесь оказался
[03:04:19.800 --> 03:04:23.800]  алгоритм, но он сильно проще. Но в данном случае он у нас может иметь и практическую ценность,
[03:04:23.800 --> 03:04:30.360]  что бывает, что как бы асимптотика та же, а по константе сильно лучше и пишется проще. Вот и в
[03:04:30.360 --> 03:04:34.440]  общем-то здесь тоже доказательства. Но давайте я кратко скажу, значит, идеи этого, потому что они
[03:04:34.440 --> 03:04:39.960]  там фактически там две страницы, но там где-то часть этого литература, часть там описания того,
[03:04:39.960 --> 03:04:45.280]  что вот там были там великие там, допустим, форт Валкерсон, есть Арема, есть там всякие
[03:04:45.280 --> 03:04:50.560]  адманс-карты, всякие работы. Был вот великий Динец, у него есть блокирующие потоки. Ну вот и был
[03:04:50.560 --> 03:04:54.600]  Корзанов, который что-то сказал, но мы ничего не поняли, там найти не смогли, поэтому вот сказали,
[03:04:54.600 --> 03:04:59.760]  значит, у нас есть более простой алгоритм. И все это там на страницу или чуть больше.
[03:04:59.760 --> 03:05:06.120]  То есть содержательная идея на самом деле умещается на полстраничке. И в общем-то она
[03:05:06.120 --> 03:05:11.960]  оказывается даже не сильно сложной, но тоже такая достаточно поучительная, мы об этом сейчас тоже
[03:05:11.960 --> 03:05:21.840]  будем думать. Значит, какая идея? Идея заключается в том, что, допустим, мы построили слоистую сеть
[03:05:21.840 --> 03:05:30.600]  и хотим пропихнуть какой-то блокирующий поток. А теперь возникает вопрос, а сколько через каждую
[03:05:30.600 --> 03:05:37.560]  вершину вообще может потока проходить? Так сказать, вот притекать через нее вот этих вот машинок
[03:05:37.560 --> 03:05:51.360]  проезжает, сколько вообще может? Да, минимум из этих величин. Это даже официально, давайте это
[03:05:51.360 --> 03:05:59.680]  введем. То есть определение. П плюс от В, пусть у меня будет П плюс от В, это вот сумма по всем
[03:05:59.680 --> 03:06:09.040]  исходящим ребрам С от Е. Допустим, да, где прибираем все ребра, у которых Е точка старта равно В.
[03:06:09.040 --> 03:06:26.040]  Чего? Нет, я тут пропускные способности пишу. Значит, есть П минус или, ну можно даже более
[03:06:26.040 --> 03:06:34.920]  точно назвать, даже не П плюс П минус, а П аут и П ин. Это мы будем, вообще это как бы там авторы это
[03:06:34.960 --> 03:06:55.280]  назвали исходящий потенциал и входящий потенциал. А есть просто потенциал. Значит, П от В это минимум из П аут от В и П ин. Вот такая
[03:06:55.280 --> 03:07:06.160]  приятная вещь. Заметим следующее, что пока у меня идея просто, ну такое, допустим, я буду делать, я буду
[03:07:06.160 --> 03:07:13.280]  иметь в виду сейчас именно слоистую сеть пока. Хотя парадокс в том, что мне по барабану, потому что на самом
[03:07:13.280 --> 03:07:23.080]  деле вот эти величины в процессе любого Форда Фолкерсона не меняются. Потому что, заметьте,
[03:07:23.080 --> 03:07:31.480]  предположим, я через вершину неожиданно пропустил одну единицу потока. Тогда, смотрите, у нас в остатке, казалось бы,
[03:07:31.480 --> 03:07:40.360]  потенциал в остаточной сети стал меньше на единицу входящий. То есть за счет этого ребра, он как бы
[03:07:40.360 --> 03:07:50.160]  потенциал входящий уменьшился на один, а исходящий, наоборот, увеличился на один.
[03:07:50.160 --> 03:07:59.360]  Да, но в остаточной сети у нас пропускные способности. То есть, казалось бы, тут один потенциал уменьшился,
[03:07:59.360 --> 03:08:06.320]  другой увеличился. Заметим, что за счет этого ребра уже наоборот. То есть, как бы, тут вот это ребро как бы
[03:08:06.600 --> 03:08:12.440]  исходящий потенциал уменьшило, именно исходящ Alytein. А входящий увеличилось.
[03:08:12.440 --> 03:08:19.840]  То есть, получается, здесь к исходящему потенциалу минус один, а здесь плюс один. То есть, в сумме
[03:08:19.840 --> 03:08:26.620]  исходящий потенциал не поменялся. И входящий не поменялся. То есть, поэтому в принципе потенциал и вершина
[03:08:26.620 --> 03:08:34.560]  это вещи, у которых они постоянны. То есть, это в принципе такая характеристика сети. Вот,
[03:08:34.560 --> 03:08:39.720]  но это нам чуть позже понадобится. Сейчас пока нас это интересует вот на сколько.
[03:08:39.720 --> 03:08:44.480]  Сейчас мы заметим, что когда мы пихаем поток через слоистую сеть, то вот эта
[03:08:44.480 --> 03:08:49.800]  характеристика на то, сколько воды может протеть через конкретную вершину. Так вот,
[03:08:49.800 --> 03:08:57.720]  что предлагают наши любимые три индуса. Сейчас вы их полюбите точно, если еще не полюбили.
[03:08:57.720 --> 03:09:07.440]  Идея такая. Давайте построили бфс вот эту сеть и посчитали потенциалы за е.
[03:09:07.440 --> 03:09:15.560]  Теперь у меня возникает неожиданная идея. Давайте найдем вершину с минимальным потенциалом,
[03:09:15.560 --> 03:09:23.560]  прям честно найдем. Вот она. Она вот тут в каком-то слое. Вот тут у нас стартовые вершины.
[03:09:23.560 --> 03:09:35.160]  Понятно, да? С минимальным. Так вот, у меня сейчас будет идея такая. Я сейчас хочу обнулить ее
[03:09:35.160 --> 03:09:44.120]  потенциал в слоистой сети. В том плане, что я буду просто жадно пропихнуть через нее воды на вот
[03:09:44.240 --> 03:09:52.440]  ее потенциал. Потому что как только я это сделаю, у нее потенциал ставит равен нулю и мы можем ее выкинуть.
[03:09:52.440 --> 03:10:01.000]  Понимаете, да? А как мы это будем делать жадно? Очень просто. Смотрите, вот допустим у нее потенциал
[03:10:01.000 --> 03:10:12.400]  равен ну я не знаю, п. Тогда идея такая. Давайте-ка посмотрим, какие ребра из нее торчат. И жадно,
[03:10:12.440 --> 03:10:18.480]  вот тут распихаем. Тут у нас допустим f1, f2, f3. Жадно так, чтобы сумма была п. А мы это можем сделать,
[03:10:18.480 --> 03:10:26.160]  правда? Теперь в следующем слое. Вот в эту вершину пришло f1 потока. Но так как у этой
[03:10:26.160 --> 03:10:33.440]  вершины потенциал больше либо равен п, и тем более больше либо равен чем f1, то я могу здесь жадно
[03:10:33.440 --> 03:10:42.200]  распихать вот так вот. Ну что-то такое могу распихать. И здесь тоже жадно распихаю, может даже в те же
[03:10:42.200 --> 03:10:47.160]  вершины. Но в каждую вершину суммарно все равно придет не более чем п, правда? То есть я буду
[03:10:47.160 --> 03:10:54.840]  просто жадно распихивать и кончится это тем, что вся вода течет, течет, течет, течет и придет в t.
[03:10:54.840 --> 03:11:07.040]  А с чего в t? Да, ведь может вам показаться, что этот жадник пойдет мимо t, да? Но что это будет
[03:11:07.040 --> 03:11:14.300]  означать? Это будет означать, что вода аналогично будет идти дальше, дальше, дальше и дальше. Но
[03:11:14.300 --> 03:11:19.840]  фишка такая, что дело в том, что тут есть какой-то последний слой, а у этого последнего слоя тогда
[03:11:19.840 --> 03:11:28.160]  потенциал будет 0. Поэтому заметим, что алгоритм начнет, а мы взяли вершину с минимальным потенциалом.
[03:11:28.160 --> 03:11:34.400]  Да, это очень приятно, потому что это приведет вас к тому, что, обратите внимание, то есть вы начнете
[03:11:34.400 --> 03:11:40.120]  с того, что все лишние вершины будут, все эти слои будут длины, и в этом слое останется только t.
[03:11:40.120 --> 03:11:47.080]  Да, но важный момент, конечно, когда вы удаляете вершину, вы все ребра тоже должны выкинуть и
[03:11:47.080 --> 03:11:54.720]  пересчитать потенциал. Понимаете, да? Ну, потому что вас интересует потенциал именно текущий,
[03:11:54.720 --> 03:12:00.640]  сколько вы еще можете пропихнуть. И тогда вот в этом предположении вы будете вынуждены заключить,
[03:12:00.640 --> 03:12:06.400]  что если вы потенциалы считаете везде там кроме t, то получается, что единственное, куда вода может
[03:12:06.400 --> 03:12:08.400]  деться, это прийти в вершину t.
[03:12:08.400 --> 03:12:15.400]  Я, может, пропустил, вершина с минимальным потенциалом считается, очевидно, без учета s и t.
[03:12:15.400 --> 03:12:22.480]  Без учета s и t. Ну, хотя нет, не совсем так. На самом деле авторы предлагают следующее, то есть это вот такой
[03:12:22.480 --> 03:12:30.640]  потенциал считает, что если v не равно s и t, ну вот, значит, предлагают, что p at это будет p out,
[03:12:30.640 --> 03:12:39.400]  а p at это p in. Ну, или что то же самое, давайте будем считать, что входной потенциал s и выходной
[03:12:39.400 --> 03:12:46.720]  потенциал t бесконечности. Вот, то есть авторы даже вот так предлагают. Ну, как вы уже догадались,
[03:12:46.720 --> 03:12:52.720]  то есть из p мы припихнули такой поток, а как пихнуть теперь из p в s? Ну, просто то же самое,
[03:12:52.720 --> 03:12:59.720]  только по обратным ребрам. Идейно легко, кодится мерзко. Ну, такая копипаста немножко получится.
[03:12:59.720 --> 03:13:04.800]  Либо копипаста, либо вот когда-то у нас было задание, там, действительно, напишите вот это вот,
[03:13:04.800 --> 03:13:11.400]  только без копипасты. И вот это было больно. Вот, но идейно очень просто. Ну, понятно,
[03:13:11.400 --> 03:13:18.480]  что очевидным образом по ребрам входящим вы там до s дойдете. Понятно, да? Но более того заметим,
[03:13:18.480 --> 03:13:25.120]  за какое время вы в принципе вот эту вот жадность распихаете? Квадрат? Нет, вот из одной вершины,
[03:13:25.480 --> 03:13:33.200]  но не квадрат, но на самом деле за e, потому что из каждой вершины вы это сделаете жадно. Вот,
[03:13:33.200 --> 03:13:38.800]  но при этом обратите внимание, что тут как в динице вы будете там какие-то ребра насыщать и
[03:13:38.800 --> 03:13:48.360]  выкидывать. Можете опять же тоже хранить, где вы остановились, жадники, правда? Нет, алгоритм такой,
[03:13:48.360 --> 03:13:53.000]  на каждом шаге у нас есть потенциалы, какие-то вершины, которые еще не убились, и потенциалы
[03:13:53.000 --> 03:14:05.240]  их. Вы честно за v находите вершину с минимальным потенциалом и за v плюс количество удаленных
[03:14:05.240 --> 03:14:16.560]  ребер делаете вот этот пропир, чтобы обнулить потенциал. Когда они насытились? Ну, тут просто
[03:14:16.560 --> 03:14:20.560]  видите, из каждой вершины вы несколько ребер насытили, кроме может быть последнего, но кого
[03:14:20.560 --> 03:14:29.840]  вы насытили вы удаляете тем же способом с двигом итератора. Каждый раз, когда вы пихаете,
[03:14:29.840 --> 03:14:36.240]  впускаете воду по какому-то ребру, вы как бы уменьшаете там один из потенциалов здесь и здесь.
[03:14:36.240 --> 03:14:51.760]  Нет, мы считаем потенциал по остаточной пропускной способности, при этом учитываем
[03:14:51.760 --> 03:14:55.840]  только ребра из слоистой сети. То есть вот обратные ребра мы здесь не считаем.
[03:14:55.840 --> 03:15:08.760]  Получается, один такой пропир с удалением такой вершины обнуление потенциала вы делаете вот за столько.
[03:15:08.760 --> 03:15:22.480]  Нет, в остаточной сети этого не произойдет.
[03:15:22.480 --> 03:15:29.680]  В остаточной сети мы рассматриваем только такие ребра, то есть мы не будем пихать воду обратно.
[03:15:29.680 --> 03:15:38.280]  Да, но в веста мы пихаем по ребрам, которые сюда входят, то есть мы рассматриваем только ребра,
[03:15:38.280 --> 03:15:44.720]  которые идут из этой сети. Вот, да, то есть здесь с этим надо быть аккуратнее, но тоже, то есть вам
[03:15:44.720 --> 03:15:49.280]  придется ввести видимо не только список смежности исходящих ребер, но и список смежности входящих
[03:15:49.280 --> 03:15:55.080]  ребер. Ну, то есть, понятно, чисто технический вопрос, там отдельные итераторы, но как бы это делается.
[03:15:55.080 --> 03:16:03.920]  Ну вот, то есть одна итерация пропиха через вот какую-то заднюю вершину работает за вот,
[03:16:03.920 --> 03:16:09.880]  получается, в плюс е количество удаленных ребер. Ну, количество не удаленных ребер тут как раз ве,
[03:16:09.880 --> 03:16:18.520]  потому что из каждой вершины по одному. Ну вот, то есть если суммировать по это по всем
[03:16:18.520 --> 03:16:29.480]  удалениям п, удаление нот, удаление, так сказать, ве, то получится что такое, то есть получится
[03:16:29.480 --> 03:16:38.040]  суммарно, значит, что-то типа от в квадрат плюс, значит, сумма всех удаленных ребер, а это в квадрат
[03:16:38.040 --> 03:16:50.200]  плюс е. Ну, если нет, ну, по модулю кратных ребер каких-то. Нет, понятно, да, вы там, в итоге официальная
[03:16:50.200 --> 03:16:59.460]  асимптотика алгоритма получается о от в в кубе плюс ве. Ладно, вот эту штуку можно убить, если вы
[03:16:59.460 --> 03:17:07.340]  убьете кратные ребра заранее. За от ве плюс е вы это сделаете. Да, именно, конечно. Ну, я уже говорил,
[03:17:07.340 --> 03:17:12.980]  стандартный алгоритм, то есть стандартная задачка это как убрать кратные ребра за ве плюс е, а не за ве
[03:17:12.980 --> 03:17:21.900]  квадрат. Нет, ну, ладно, сейчас не заморачивайтесь, значит, потом в случае еще придумаете, это не
[03:17:21.900 --> 03:17:28.220]  проблема. То есть там, как говорится, если сделать, сделать просто правильную, правильную по разрядной
[03:17:28.220 --> 03:17:39.020]  сортировку, собственно, никаких проблем не будет. А без хэшей? Нет, ну, на самом деле зачем, просто
[03:17:39.020 --> 03:17:45.100]  правильная по разрядной сортировка решит вопрос, не проблема. Хотя нет, ну, формально, конечно, это
[03:17:45.100 --> 03:17:52.180]  будет работать за ве куб плюс все равно е, потому что формально е может быть больше, чем ве куб. Ну,
[03:17:52.180 --> 03:18:01.660]  теоретически да. Ну, это понятно, что по бреду, конечно, да. Да, то есть, ну, без вот этого вы
[03:18:01.660 --> 03:18:12.100]  никогда не обойдетесь. Потому что считать вам придется граф. Потому что, значит, смотрите, нет,
[03:18:12.100 --> 03:18:17.860]  есть несколько причин. Ну, во-первых, он относительно градусно пишется. Ну, не так, ну, понятно,
[03:18:17.860 --> 03:18:22.980]  с копипастой. Да, не очень сложно, но, во-первых, ну, просто если у вас задача записать алгоритм
[03:18:22.980 --> 03:18:28.460]  за ве куб, то есть более просто пишущийся алгоритм, нас, основанные на пушере лейбле, мы это изучим. Там
[03:18:28.460 --> 03:18:33.100]  прям очень просто пишется, прям предельно тупо. Ну, видимо, уже в следующий раз мы с вами это очень
[03:18:33.100 --> 03:18:41.420]  подробно обсудим. В смысле, почему он работает? Ну, потому, нет, а в чем проблема? Потому что мы,
[03:18:41.420 --> 03:18:47.780]  ну, потому что каждый, если мы вершину выкинули, значит, что она уже заблокирована. Через нее нельзя
[03:18:47.780 --> 03:18:52.140]  опустить путь в слоистой сети. Поэтому, когда мы делаем этого раз, мы фактически выкинули все
[03:18:52.140 --> 03:18:58.660]  вершины. Это значит, что все вершины заблокированы, значит, ура, мы нашли блокирующий папа. Так что,
[03:18:58.660 --> 03:19:03.660]  вот, так что ладно, если надо было формально обсудить, то мы вот, обсудили это вот таким вот
[03:19:03.740 --> 03:19:10.580]  10-секундным способом. Вот, так что да, вот, то есть, есть вот такой, да, он, в принципе, красивый. А,
[03:19:10.580 --> 03:19:15.260]  во-вторых, на самом деле, и сам Динец в большинстве случаев работает гораздо быстрее, чем ЗВ квадрат Е.
[03:19:15.260 --> 03:19:26.660]  Вот, но правда, для того, чтобы это изучить, нам, конечно, но правда, чаще всего, конечно,
[03:19:26.660 --> 03:19:33.660]  это происходит именно из-за того, что у вас сети целочисленные. Так, поэтому, если по этому алгоритму
[03:19:33.660 --> 03:19:38.420]  вопросов нету, значит, смотрите, тут важно подчеркнуть. Оставшееся время сегодня мы будем,
[03:19:38.420 --> 03:19:48.660]  мы посвятим именно внимание целочисленным сетям. Нет, Динец работает на любых сетях. Нет,
[03:19:48.660 --> 03:19:54.580]  смотрите, до сего момента мы вообще не пользовались тем, что там пропускные способности целочисленные.
[03:19:54.580 --> 03:20:02.460]  Они, то есть, пока они тут могли быть любыми, алгоритм работает. То есть, любой и Эдман Скарп и это.
[03:20:02.460 --> 03:20:08.420]  А вот сейчас у нас будет, внимание, сейчас будет отдельный подвид алгоритмов, который будет,
[03:20:08.420 --> 03:20:15.780]  ну, не алгоритм, даже в нашем случае, ну, хотя и алгоритмов тоже. Ну, вот, то есть, которые будут
[03:20:15.780 --> 03:20:21.540]  работать именно на целочисленных сетях. То есть, можно сказать, такая у нас подглава такая, то есть,
[03:20:21.540 --> 03:20:34.300]  будет такая голова, целочисленные сети. А в ней прям есть, ну, вот, ну, целочисленные сети, да, то есть,
[03:20:34.300 --> 03:20:39.060]  ну, как бы, там, пока, например, на Олимпиадной практике в девяносто, там, в девяносто девяти
[03:20:39.060 --> 03:20:42.780]  процентах случаев у вас пропускные способности будут целочисленные. Ну, а ставим один процент
[03:20:42.780 --> 03:20:56.140]  это еще типа hard life. Вот. Хотя в hard life сети целочисленные были. А нет, не целочисленные, да, там, да, там дроби были, да.
[03:20:56.140 --> 03:21:04.940]  Что? Что не так? Вот. Ну, на самом деле, да, ну, в целочисленных сетях, да, да, сейчас будем предполагать,
[03:21:04.940 --> 03:21:17.260]  что у нас С от Е это целое число. Но начнем мы даже с разминочки. Потому что у целочисленных сетей есть еще один
[03:21:17.260 --> 03:21:25.620]  такой экзотический вид, который тоже периодически встречается. Это, конечно же, единичные сети. Это когда
[03:21:25.620 --> 03:21:37.660]  пропускная способность любого ребра один. Такое тоже встречается. Вот. Начнем мы с разминочки. За
[03:21:37.660 --> 03:21:41.820]  За какой симптотику работают наши алгоритмы, если у нас единичная сеть?
[03:21:41.820 --> 03:21:59.900]  Ну, на самом деле, что-что? Ну, как сказать, если нет кратных, ну, на самом деле, конечно, любой
[03:22:00.380 --> 03:22:11.180]  работает за как бы ответ на Е. Хотя ладно, это и в целочисленной сети верно. Вот. Хотя можно попытаться,
[03:22:11.180 --> 03:22:19.500]  наверное, но вот, но если мы будем говорить о 1, то на самом деле у нас, конечно, можно получить симптотику
[03:22:19.500 --> 03:22:36.740]  гораздо лучше, чем В квадрат Е. Почему? Ну, не факт. Хотя нет, ну, за В Е, конечно. Ну, там зависит от Е,
[03:22:36.740 --> 03:22:45.620]  конечно, там не факт. Если считать, что БФС работает за Е, то Эдманскарк работает за БЕ на единичных сетах.
[03:22:45.620 --> 03:22:56.020]  Сейчас, БФС. У нас еще нет кратных ребер. Так, БФС. Ну, да. Ну, если нет кратных, ну... Потому что у нас не больше, чем В ребер в ходе стока.
[03:22:56.020 --> 03:23:04.340]  Ну, в принципе, да. А, ну, Эдманскарк, ну, это тогда можно сказать, что Эдманскарк просто за сток работает. Да, но если нет кратных ребер, то, конечно, В. Может быть,
[03:23:04.340 --> 03:23:12.100]  там еще теоретически можно запилить, но там, к сожалению, вот, если кратные ребра есть, то у нас там начинается вот такая вот гадость.
[03:23:12.100 --> 03:23:25.220]  Да, но это В квадрат, он же В Е, он же Эд. Но это неважно. Важно для нас сейчас другое. Заметим, что, значит, это у нас Эдманскарк.
[03:23:26.180 --> 03:23:43.700]  Вот. Если рассмотреть Диница, то здесь смотрите, какая фишка. Начнем с того, что блокирующий поток в единичной сети ищется вот просто методом Диница.
[03:23:43.700 --> 03:24:01.220]  Не за В Е, а просто за Е. Почему так? Да просто потому, что каждый раз, когда вы нашли поток, то есть, нашли путь, вы убили не одно ребро, а все.
[03:24:01.220 --> 03:24:08.180]  Понимаете, да? Да, вот, что приятно в единичной сети. То есть, в этот раз вы убили просто все.
[03:24:08.260 --> 03:24:17.780]  Вот. И это означает, что фактически у вас одна фаза Диница работает фактически за сумму заудаляемые ребра.
[03:24:20.900 --> 03:24:33.620]  То есть, получается, что она работает за ОА на количество там, итерации КБП умножить на Е.
[03:24:33.620 --> 03:24:42.660]  Ну, в принципе, в Е это уже неплохая симпторика, да? Да, но я там называю нот. Но я могу круче.
[03:24:48.660 --> 03:24:55.220]  Да. Ну, почти всегда это будет круче. Кроме экзотических случаев.
[03:24:56.180 --> 03:25:08.820]  Значит, теорияма такая вот. Сейчас у меня будет утверждение, идея доказательства, которая будет хедлайнером всего оставшегося занятия.
[03:25:08.820 --> 03:25:20.180]  Значит, в единичной сети количество итераций КБП не превосходит два корня Е.
[03:25:25.220 --> 03:25:36.420]  Доказательства. Значит, смотрите внимательно. Значит, идея. Доказательства такое.
[03:25:36.420 --> 03:25:46.980]  Сделаем. Ну, давайте не будем заморачиваться. Хотя нет, попробуем обобщить. Сделаем каэтерации Диница.
[03:25:47.940 --> 03:25:55.620]  Хотя, ладно, просто КБП. Хотя, заметим, что это утверждение никак не зависит от того, Диницем вы ищете блокирующий поток или как-то еще.
[03:25:55.620 --> 03:26:04.340]  Да, даже так. То есть, Диниц тут вообще ни при чем. Главное, причем он только на тему блокирующих поток.
[03:26:04.580 --> 03:26:18.100]  Итак, давайте введем константу величину К и скажем, что после К итерации КБП. Концепция блокирующих поток.
[03:26:18.100 --> 03:26:25.940]  Значит, сделаем каэтерации. У нас останется какая-то остаточная сеть, правда?
[03:26:26.820 --> 03:26:33.540]  И заметим следующее, что в остаточной сети есть какой-то максимальный поток, правда?
[03:26:33.540 --> 03:26:38.740]  Но заметим, что каждая итерация КБП хотя бы одну единицу потока припихнет, правда?
[03:26:38.740 --> 03:26:46.820]  Поэтому, в принципе, мы оставшееся количество итерации можем оценить как максимальный поток в этой остаточной сети, правда?
[03:26:47.780 --> 03:27:00.340]  И тогда итерацией у нас будет К плюс максимальный поток от вот этой вот, так сказать, ЖК, вот этой вот остаточной сети.
[03:27:00.340 --> 03:27:03.860]  То есть, Ж с индексом Ф с индексом К. Вот так.
[03:27:05.860 --> 03:27:09.860]  А теперь давайте подумаем, что мы знаем про вот эту остаточную сеть?
[03:27:09.860 --> 03:27:22.900]  Да, мы знаем, что в ней, значит, в ЖФ, ну, во-первых, значит, все пропорционные способности равны один, естественно.
[03:27:22.900 --> 03:27:28.100]  А во-вторых, что мы еще знаем? А мы кое-что еще знаем.
[03:27:28.100 --> 03:27:34.100]  Да, СТ, даже там, больше либо равно К.
[03:27:34.340 --> 03:27:40.340]  Да, даже давайте, давайте больше скажем.
[03:27:40.340 --> 03:27:46.340]  Но смотрите, давайте найдем в этой сети максимальный поток.
[03:27:46.340 --> 03:27:50.340]  Этот максимальный поток мы декомпозируем на пути.
[03:27:50.340 --> 03:27:54.340]  Эти пути будут реберно непересекающиеся, правда?
[03:27:54.340 --> 03:28:00.340]  Да, и каждой длины хотя бы К, даже хотя бы К плюс один.
[03:28:00.580 --> 03:28:02.580]  Они могут, конечно, вершина пересекаться как угодно.
[03:28:02.580 --> 03:28:06.580]  Да, они могут быть даже неодинаковые длины, что интересно.
[03:28:06.580 --> 03:28:08.580]  Вот так, да?
[03:28:10.580 --> 03:28:12.580]  Вот как-то так это может быть, как угодно, да?
[03:28:12.580 --> 03:28:18.580]  Но сами эти, но вот, но каждый из этих путей содержит не более, чем каждый.
[03:28:18.580 --> 03:28:20.580]  Да ЖК плюс один, да?
[03:28:20.580 --> 03:28:26.580]  И это означает, но так как у нас реберто всего Е,
[03:28:26.820 --> 03:28:32.820]  то тогда получается, что вот это вот МАКСФ от ЖФК,
[03:28:32.820 --> 03:28:36.820]  оно получается не превосходит даже Е поделить на К плюс один.
[03:28:38.820 --> 03:28:44.820]  То есть получается, это не превосходит К плюс Е делить на К плюс один.
[03:28:44.820 --> 03:28:50.820]  Ну а теперь остается только подставить какое-нибудь правильное К.
[03:28:51.060 --> 03:28:57.060]  То есть давайте меньше либо равно, ну вот,
[03:28:57.060 --> 03:29:01.060]  ну вот, ну соответственно при, ну вот,
[03:29:01.060 --> 03:29:05.060]  ну то есть если мы подставляем К равно корень из Е,
[03:29:05.060 --> 03:29:07.060]  ну очевидно, что это примерно максимум, да?
[03:29:07.060 --> 03:29:11.060]  Ну вот, то получится, что это количество итераций не превосходит корень из Е
[03:29:11.060 --> 03:29:15.060]  плюс Е поделить на корень из Е плюс один.
[03:29:17.060 --> 03:29:19.060]  Два корень из Е.
[03:29:19.300 --> 03:29:21.300]  Ну да.
[03:29:21.300 --> 03:29:23.300]  Ну не при любом К меньше либо равно, конечно.
[03:29:25.300 --> 03:29:29.300]  То есть количество итераций получается суммарное,
[03:29:29.300 --> 03:29:31.300]  всегда меньше либо равно, вот эта причина для любого К.
[03:29:31.300 --> 03:29:35.300]  Я выбираю минимум по К, беру примерно,
[03:29:35.300 --> 03:29:37.300]  ну даже может это не самый минимум,
[03:29:37.300 --> 03:29:41.300]  может корень из Е плюс один надо брать, я не знаю.
[03:29:41.300 --> 03:29:43.300]  Да, сомнительно, но вот.
[03:29:43.300 --> 03:29:45.300]  Ну корень из Е не точно в конце концов,
[03:29:45.300 --> 03:29:47.300]  надо куда-то округлять, может быть вверх, не важно.
[03:29:47.540 --> 03:29:49.540]  Но я говорю, если примерно возьму корень из Е,
[03:29:49.540 --> 03:29:51.540]  то есть не буду я сейчас заморачиваться об округлении,
[03:29:51.540 --> 03:29:53.540]  то я получаю, что получается так.
[03:29:55.540 --> 03:29:57.540]  Вот.
[03:29:57.540 --> 03:29:59.540]  И получается тирему доказать.
[03:30:01.540 --> 03:30:03.540]  То есть вывод такой,
[03:30:03.540 --> 03:30:07.540]  что я здесь могу удинется заявить на самом деле асимптотику
[03:30:07.540 --> 03:30:09.540]  даже вот так вот.
[03:30:09.540 --> 03:30:15.540]  О от минимум из, формально говоря, В из корень из Е на Е.
[03:30:15.780 --> 03:30:17.780]  Ну вдруг там корень из Е больше, чем В, я не знаю, да?
[03:30:19.780 --> 03:30:21.780]  То есть формально, конечно, в адекватных графах
[03:30:21.780 --> 03:30:23.780]  это, конечно, просто Е корней из Е.
[03:30:23.780 --> 03:30:25.780]  Вот.
[03:30:25.780 --> 03:30:27.780]  Кстати, я вас должен поздравить,
[03:30:27.780 --> 03:30:29.780]  мы уже научились искать просочетания за Е корней из Е.
[03:30:33.780 --> 03:30:37.780]  Но конкретно в просочетании все еще круче.
[03:30:41.780 --> 03:30:43.780]  Да что такое?
[03:30:44.020 --> 03:30:46.020]  Кажется, Е корней.
[03:30:50.020 --> 03:30:52.020]  Итак, идем дальше.
[03:30:56.020 --> 03:30:58.020]  Итак, вернемся, как мы ищем просочетания?
[03:30:58.020 --> 03:31:00.020]  В просочетании мы тоже ищем в единичной сети,
[03:31:00.020 --> 03:31:04.020]  но в единичной сети есть более крутая ситуация.
[03:31:06.020 --> 03:31:12.020]  Заметим, что в единичной сети есть еще маленькое приятное свойство.
[03:31:12.260 --> 03:31:14.260]  Мы можем заметить, что
[03:31:14.260 --> 03:31:16.260]  то есть дело в том, что
[03:31:16.260 --> 03:31:18.260]  когда мы исходную сеть делаем,
[03:31:18.260 --> 03:31:20.260]  мы заметим, что в каждый момент времени
[03:31:20.260 --> 03:31:22.260]  в каждую вершину либо входит ровно одно ребро,
[03:31:22.260 --> 03:31:24.260]  либо выходит ровно одно ребро.
[03:31:24.260 --> 03:31:26.260]  Согласны?
[03:31:26.260 --> 03:31:28.260]  В самом начале это точно верно.
[03:31:28.260 --> 03:31:30.260]  Но заметим, что и в каждый момент времени
[03:31:30.260 --> 03:31:32.260]  это тоже будет верно.
[03:31:32.260 --> 03:31:34.260]  Потому что когда мы через вершину пропустим
[03:31:34.260 --> 03:31:36.260]  какой-то поток величины 1,
[03:31:36.260 --> 03:31:38.260]  то у нас, допустим,
[03:31:38.260 --> 03:31:40.260]  вот это ребро убьется,
[03:31:40.500 --> 03:31:42.500]  JB, что место regthere и главное появится вот это.
[03:31:42.500 --> 03:31:44.500]  И вершину в остаточной сети все равно будет входить ровно одно ребро.
[03:31:48.500 --> 03:31:50.500]  Но это означает Das板,
[03:31:50.500 --> 03:31:52.500]  что в каждую вершину
[03:31:52.500 --> 03:31:54.500]  в остаточной сети после K
[03:31:54.500 --> 03:31:56.500]  у вас все равно
[03:31:56.500 --> 03:31:58.500]  в каждую вершину
[03:31:58.500 --> 03:32:00.500]  будет либо входить ровно одно ребро,
[03:32:00.500 --> 03:32:02.500]  либо исходить ровно одно ребро.
[03:32:04.500 --> 03:32:06.500]  А означает это, что у вас вот эти вот пути
[03:32:06.500 --> 03:32:08.500]  когда мы будем в этом же рассуждении,
[03:32:08.500 --> 03:32:21.300]  не только реберно не пересекаться, но и вершинно не пересекаться. Понимаете? Поэтому мы можем
[03:32:21.300 --> 03:32:31.700]  сказать, что в парасочетании, то есть если мы будем искать парасочетание единицам, то оно будет
[03:32:31.700 --> 03:32:49.780]  работать не за Е корней из Е, а за О от Е корней из В. В данном случае мы просто доказали,
[03:32:49.780 --> 03:32:57.100]  что фаз единица будет О от корней из В. Доказать это то же самое, просто тут будет как бы путей будет
[03:32:57.100 --> 03:33:04.700]  не более выделить на этого, поэтому там как бы два корней из В будет, поэтому вот, поэтому никаких
[03:33:04.700 --> 03:33:12.180]  минимумов, просто Е корней из В. Да, это кстати называется алгоритм Хобкровта-Карпа. Да, буквально,
[03:33:12.180 --> 03:33:22.300]  ищем про сочетание единицам. Не, ну видимо достижение Хобкровта-Карпа заключается в том,
[03:33:22.300 --> 03:33:27.500]  что они просто доказали, что единица оказывается, ну то есть возможно они, может они были первые,
[03:33:27.500 --> 03:33:35.380]  кто построил такую сеть. Вот, ну вот и во-первых, во-вторых, они доказали, что это Е корней из В. Нет,
[03:33:35.380 --> 03:33:39.940]  крутая симпточка. Кстати, я что-то слету вам не скажу, а существует ли более крутой алгоритм,
[03:33:39.940 --> 03:33:50.340]  который ищет в додольном графе про сочетание. Ну это уже, да, на тестерке, ну, ну знаете,
[03:33:50.340 --> 03:33:56.420]  это нет, мы помним эти стандартные шутки, да, как это, да, мы сегодня будем учиться программировать,
[03:33:56.420 --> 03:34:00.500]  вот тебе задача найти Гамильтонов цикл в графе. А да, тут перебрать, тут перебрать, тут перебрать,
[03:34:00.500 --> 03:34:08.060]  закуп могу. А если подумать, а ну тут отсечь, отсечь, а точно, сэн квадрат можно, ура! А ну это
[03:34:08.060 --> 03:34:14.580]  рассказывал, да? А, ну всё, вот, не будем повторяться тогда. Да, на тестерчуре вообще линейно работать будет,
[03:34:14.580 --> 03:34:25.620]  да, мы помним, так. Ага, не, в нашем случае лучше, точнее, там это называется лекция такая-то,
[03:34:25.620 --> 03:34:37.380]  минута такая-то. Ладно, а теперь смотрите, значит, вот это, сейчас мы эту идею обобщим на более,
[03:34:37.380 --> 03:34:47.660]  на более крутую ситуацию. Представим, ну потому что, смотрите, сейчас я, значит, что-то ещё можно
[03:34:47.660 --> 03:34:57.700]  проделать. Значит, теперь, значит, что тут можно ещё проделать? Сейчас вот возьмём ту же самую идею,
[03:34:57.700 --> 03:35:05.300]  но теперь представим, что сеть уже не единичная, а просто целочисленная. Тогда мы сделаем вот что,
[03:35:05.300 --> 03:35:19.140]  мы введём понятие потенциал сети, то есть просто определение. Значит, p от g, будем это называть
[03:35:19.140 --> 03:35:28.820]  потенциал сети, это будет тупо сумма вот тех потенциалов, которые мы тогда сказали, по всем
[03:35:28.820 --> 03:35:36.740]  вершинам v. Ну, может быть, даже давайте и сток, и сток выкинем. Да, могли бы и не выкидывать, но давайте выкинем.
[03:35:36.740 --> 03:35:50.460]  Вот, да, можно было и там по всем. Так вот, первая теория Бакарзанова.
[03:35:59.580 --> 03:36:01.180]  В целочисленной сети
[03:36:01.180 --> 03:36:28.100]  кбп выполнит не более чем два корня, я её так сформулирую, хотя там ошка была, корень из p иterации.
[03:36:28.100 --> 03:36:39.300]  Вот, во многих задачах, кстати, это может вам сильно намекнуть, почему динец работает быстро,
[03:36:39.300 --> 03:36:43.860]  потому что в олимпиадах программирования обычно принято, что есть задача на поток,
[03:36:43.860 --> 03:36:48.340]  значит, напишите динец, а он точно зайдёт, потому что вряд ли от вас потребует что-то более крутое.
[03:36:48.340 --> 03:36:52.940]  В большинстве случаев, на самом деле, уже на уровне этой теории, на самом деле, это окажется легко
[03:36:52.940 --> 03:36:58.900]  доказать, потому что вы просто посчитаете потенциал и выясните, что там итераций немного, правда,
[03:36:58.900 --> 03:37:03.260]  каждая итерация, конечно, будет работать за непонятно сколько, хотя за понятно сколько она будет
[03:37:03.260 --> 03:37:08.420]  работать за суммарную пропускную способность ребер, кстати. Ну, потому что вы можете себе представить,
[03:37:08.420 --> 03:37:16.060]  что ребро пропускной способности 57, это таких 57 единичных ребер, правда? Можете такое представить, да?
[03:37:16.060 --> 03:37:27.260]  Ну, пока с масштабированием разберёмся позже, а мы разберёмся. Но пока просто факт, как бы вы не искали,
[03:37:27.260 --> 03:37:33.140]  то есть как бы вы не искали блокирующий поток просто любыми способами, а итерация будет не более чем сток.
[03:37:33.140 --> 03:37:40.100]  Почему? А, ну, во-первых, начнём с маленькой леммы.
[03:37:46.060 --> 03:38:04.700]  П, потенциал. Во-первых, это F, а во-вторых, GF, это у нас стандартное обозначение остаточной сети.
[03:38:04.700 --> 03:38:11.900]  Вот так вот, я утверждаю, что какой бы я поток вообще не пустил, а в остаточной сети потенциал будет
[03:38:12.100 --> 03:38:20.820]  ровно такой же. Да, мы это уже даже обсудили, да. Так поэтому, как бы, поэтому в случае чего оставим в качестве упражнения.
[03:38:20.820 --> 03:38:28.020]  Хотя, да, в качестве упражнения, да, там это найдите где-то там сколько-то там минут назад, собственно, как вы это обсудили.
[03:38:28.020 --> 03:38:39.820]  Значит, и это очень приятно. Потому что, значит, логика та же теперь. Потому что доказательства просто абсолютно такой же.
[03:38:40.020 --> 03:38:49.260]  Смотрите, что произойдёт после K-итерации? Что произойдёт после K-итерации?
[03:38:50.660 --> 03:38:56.740]  Как мы уже, ну вот, то есть пути на этот раз уже будут пересекаться, в том числе и по ребрам, да.
[03:38:57.780 --> 03:39:05.380]  То есть вполне себе там, пожалуйста, как угодно и по вершинам, и по ребрам, там как-нибудь вот так, вот там, ну, всё что угодно, да.
[03:39:06.380 --> 03:39:14.780]  Но теперь заметим следующее. Рассмотрим вот какую-нибудь вот вершинку, через которую у нас тут какие-то пути проходят, допустим.
[03:39:18.780 --> 03:39:25.780]  Вот. Смотрите, вот тут так вот, как бы, смотрите, теоретически я мог бы тут какой-то формализм вести, но мне как всегда не хочется.
[03:39:27.780 --> 03:39:29.780]  Хочется, чтобы вы это увидели. Что вы увидели?
[03:39:30.180 --> 03:39:32.180]  Если я эту вершину, ich... Смотрите.
[03:39:32.900 --> 03:39:42.380]  Каждую, вот смотрите, давайте я могу этот максимальный поток в остаточной сети, после K-итерации, декомпозировать на единичные пути, да.
[03:39:43.980 --> 03:39:45.960]  Ну естественно, там максимальный поток целочисленный будет, да.
[03:39:47.380 --> 03:39:54.760]  Ну и более того, то не сложно доказать теорему, существуя в целочисленной сети, существует целочисленный максимальный поток, да.
[03:39:56.180 --> 03:39:58.660]  Так вот, давайте я его декомпозирую на единичные пути.
[03:39:59.780 --> 03:40:08.780]  Смотрите, заметим, что через каждую вершину таких путей будет проходить не более, чем ее потенциал, правда?
[03:40:08.780 --> 03:40:14.780]  Ну, идейно, в общем-то, потенциал это он и есть, да?
[03:40:14.780 --> 03:40:23.780]  Мы будем это мыслить в терминах, что каждый единичный путь скушал одну единицу потенциала в вершине, правда?
[03:40:23.780 --> 03:40:27.780]  Ну, будем так просто это переформулировать, то же самое, да?
[03:40:27.780 --> 03:40:32.780]  Потому что, как вы уже догадались, идея будет заключаться в том, что мне жутко интересно.
[03:40:32.780 --> 03:40:42.780]  А сколько вершин, сколько единиц потенциала каждый единица потока скушала в целом?
[03:40:42.780 --> 03:40:45.780]  Хотя бы длину.
[03:40:45.780 --> 03:40:48.780]  Хотя бы длину. А длина?
[03:40:48.780 --> 03:40:51.780]  Хотя бы k плюс один.
[03:40:52.780 --> 03:40:59.780]  Но не совсем. Длина k плюс один, но промежуточных вершин тогда получается k.
[03:40:59.780 --> 03:41:02.780]  Ну, хотя бы k, правда?
[03:41:02.780 --> 03:41:10.780]  Потому что расстояние от s до t у любого пути теперь, по которому может идти поток в остаточной сети, она больше, чем k.
[03:41:10.780 --> 03:41:12.780]  Но почему не ровно?
[03:41:12.780 --> 03:41:15.780]  Потому что изначально-то она была один, хотя бы.
[03:41:15.780 --> 03:41:19.780]  А что еще каждый путь съедает?
[03:41:19.780 --> 03:41:27.780]  У каждой вершины, по которому этот путь проходит, этот путь съедает единицу потенциала.
[03:41:27.780 --> 03:41:31.780]  Почему у нас же путь не меняет потенциал?
[03:41:31.780 --> 03:41:33.780]  Мы от этих пришли.
[03:41:33.780 --> 03:41:35.780]  Мы мыслим так.
[03:41:35.780 --> 03:41:39.780]  Но будем мыслить так. У каждой вершины есть потенциал, да?
[03:41:39.780 --> 03:41:48.780]  Когда мы рассматриваем, то есть мы знаем, что у каждой вершины количество путей, проходящих через нее, не превосходит ее потенциала.
[03:41:48.780 --> 03:41:52.780]  Поэтому очень удобно мыслить в терминах, что каждый такой путь кушает потенциал.
[03:41:52.780 --> 03:41:58.780]  Нет, я могу тут какие-то суммы подписать.
[03:41:58.780 --> 03:42:03.780]  Нет, пожалуйста, если это непонятно, пожалуйста, я могу расписаться формализмом.
[03:42:03.780 --> 03:42:07.780]  Но просто если вы поймете вот это, тут становится понятно.
[03:42:07.780 --> 03:42:15.780]  В принципе, нет, вы можете там найти предыдущего поколения или может быть даже просто в Гугле, ну или просто попросить меня, я могу прислать там просто презентации.
[03:42:15.780 --> 03:42:17.780]  Ну или просто зайти на Emax и почитать.
[03:42:17.780 --> 03:42:22.780]  Там будет лемма, максимальный поток, там после L это рации не превосходит.
[03:42:22.780 --> 03:42:24.780]  Чего он там не превосходит?
[03:42:24.780 --> 03:42:28.780]  А чего он там, кстати, получается, не превосходит?
[03:42:28.780 --> 03:42:35.780]  P делить на L плюс 1 или что-то в этом роде.
[03:42:35.780 --> 03:42:38.780]  То есть да, заметим, что это единиц потока.
[03:42:38.780 --> 03:42:43.780]  То есть получается, что их осталось не более, чем потенциал поделить на L.
[03:42:43.780 --> 03:42:45.780]  Ну а то потенциал, сумма по всем.
[03:42:45.780 --> 03:42:50.780]  Из этой суммы каждая единица потока жрет хотя бы L, то есть хотя бы K.
[03:42:50.780 --> 03:42:58.780]  То есть получается у нас получается не более, чем K плюс P от GFK делить на K.
[03:42:58.780 --> 03:43:01.780]  Но, собственно, это то же самое, что обычный потенциал.
[03:43:01.780 --> 03:43:07.780]  Подставляем K равно корень из P, радуемся жизни.
[03:43:08.780 --> 03:43:13.780]  Основная церема, на самом деле, вот такая, обычно пользоваться нужно именно ей.
[03:43:20.780 --> 03:43:22.780]  На самом деле, да.
[03:43:22.780 --> 03:43:26.780]  Вот эти вот штуки, это, конечно, просто ее подвиды.
[03:43:26.780 --> 03:43:33.780]  Заметим, что потенциал, в принципе, очевидно, не превосходит суммы пропускной способности всех ребер.
[03:43:33.780 --> 03:43:34.780]  Вот.
[03:43:34.780 --> 03:43:38.780]  Но так видим, что потенциал, кстати, сети в просочетании равен TUPOV.
[03:43:40.780 --> 03:43:41.780]  Понятно, да.
[03:43:41.780 --> 03:43:43.780]  Поэтому там O от Е корней из V возникает сразу.
[03:43:45.780 --> 03:43:46.780]  Вот.
[03:43:46.780 --> 03:43:49.780]  А в общем случае, на самом деле, можно заметить, что в целочисленной сети,
[03:43:49.780 --> 03:43:52.780]  если все ребра не превосходят С по пропускной способности,
[03:43:52.780 --> 03:43:57.780]  то можно получить на единица оценку как ZC на корень из P.
[03:43:57.780 --> 03:43:58.780]  Вот так.
[03:44:02.780 --> 03:44:03.780]  Да.
[03:44:03.780 --> 03:44:06.780]  Ну, фаз O от корней из P, а каждая фаза делается за CE.
[03:44:08.780 --> 03:44:11.780]  Ну, потому что если вы вообразите себе, что каждое ребро это просто C единичный,
[03:44:11.780 --> 03:44:14.780]  не более чем C единичных ребер, то вы эту фазу сделаете за CE.
[03:44:15.780 --> 03:44:16.780]  Вот.
[03:44:17.780 --> 03:44:21.780]  Но можно сделать еще более нетривиальный вывод из формулировки этой церемы.
[03:44:21.780 --> 03:44:22.780]  Вывод называется.
[03:44:26.780 --> 03:44:29.780]  Ну, раз есть первая церема, как заново, то, наверное, есть хотя бы вторая.
[03:44:31.780 --> 03:44:32.780]  Нет, их всего две.
[03:44:36.780 --> 03:44:37.780]  Нет.
[03:44:37.780 --> 03:44:40.780]  Ну, вторая идея, но то же самое, да.
[03:44:41.780 --> 03:44:44.780]  Но тут просто оценим немножко по-другому.
[03:44:44.780 --> 03:44:47.780]  Ладно, ну вот, то есть вторая церема, как заново.
[03:44:53.780 --> 03:44:58.780]  Значит, пусть Z целочисленная сеть,
[03:45:00.780 --> 03:45:02.780]  численная сеть,
[03:45:04.780 --> 03:45:07.780]  бескратных ребер, это все, что мы делаем,
[03:45:08.780 --> 03:45:11.780]  это все, что мы делаем, это все, что мы делаем,
[03:45:11.780 --> 03:45:14.780]  бескратных ребер, это важно.
[03:45:23.780 --> 03:45:24.780]  Причем,
[03:45:26.780 --> 03:45:28.780]  для любого E,
[03:45:29.780 --> 03:45:32.780]  C от E не происходит какой-нибудь мистической константы C.
[03:45:34.780 --> 03:45:36.780]  Та-дам!
[03:45:42.780 --> 03:45:46.780]  Тогда количество итерации KBP
[03:45:48.780 --> 03:45:51.780]  не превосходит два на
[03:45:55.780 --> 03:45:56.780]  К сожалению, не на столько.
[03:45:58.780 --> 03:46:01.780]  Так, знаете, честно говоря, я иногда с трудом помню, что там дальше,
[03:46:02.780 --> 03:46:03.780]  но я помню доказательства.
[03:46:04.780 --> 03:46:07.780]  Я помню, там какой-то там корень, по-моему, даже кубический там, что-то такое.
[03:46:12.780 --> 03:46:13.780]  Вот.
[03:46:14.780 --> 03:46:17.780]  Поэтому в этот раз я все-таки начну с доказательства.
[03:46:18.780 --> 03:46:20.780]  Пуша, как я буду мыслить?
[03:46:21.780 --> 03:46:23.780]  Ну, начало доказательства,
[03:46:24.780 --> 03:46:25.780]  нет, ну,
[03:46:26.780 --> 03:46:28.780]  нет, ну, смотрите, доказательства такое.
[03:46:30.780 --> 03:46:32.780]  Ну, доказательства, очевидно, у вас будет
[03:46:33.780 --> 03:46:37.780]  K плюс, значит, максимальный поток после K итерации, правда?
[03:46:38.780 --> 03:46:41.780]  А как я буду оценивать максимальный поток после этой итерации?
[03:46:42.780 --> 03:46:43.780]  А оценивать я его буду так.
[03:46:44.780 --> 03:46:46.780]  Смотрите, я запущу BFS.
[03:46:48.780 --> 03:46:51.780]  Вот у меня ноль, вот у меня там сеть,
[03:46:52.780 --> 03:46:55.780]  там первая, вот у меня, прям, честно, вот эти вот слои.
[03:46:58.780 --> 03:47:01.780]  И вот у меня T, и он находится в каком-то слое L.
[03:47:03.780 --> 03:47:05.780]  И этот L у меня больше, чем K, если что.
[03:47:07.780 --> 03:47:09.780]  Так вот, вот эти все множества я обзову.
[03:47:10.780 --> 03:47:12.780]  Вот это множество я обзову V0,
[03:47:13.780 --> 03:47:16.780]  это я обзову V1, это я обзову V2, это я обзову V3,
[03:47:17.780 --> 03:47:19.780]  это я обзову V4 и так далее.
[03:47:21.780 --> 03:47:22.780]  Так вот.
[03:47:23.780 --> 03:47:25.780]  Ну, как мне известно,
[03:47:26.780 --> 03:47:28.780]  ну, как мне, нам всем, я надеюсь,
[03:47:29.780 --> 03:47:32.780]  величина максимального потока не превосходит,
[03:47:33.780 --> 03:47:35.780]  равна величине минимального разреза.
[03:47:36.780 --> 03:47:39.780]  А точнее не превосходит величины какого-то разреза, любого.
[03:47:40.780 --> 03:47:43.780]  Поэтому давайте я оценю поток через,
[03:47:44.780 --> 03:47:46.780]  ну, например, вот такой разрез.
[03:47:48.780 --> 03:47:50.780]  Спрашивается, как можно,
[03:47:51.780 --> 03:47:53.780]  как оценить пропускную способность такого разреза?
[03:47:54.780 --> 03:47:55.780]  N на C.
[03:47:57.780 --> 03:47:59.780]  Нет, можно поточнее.
[03:48:00.780 --> 03:48:03.780]  Во-первых, C на модуль V3, на модуль V4.
[03:48:03.780 --> 03:48:04.780]  Нет, ну, да.
[03:48:05.780 --> 03:48:06.780]  Вот.
[03:48:07.780 --> 03:48:10.780]  Но теперь заметим, что я могу взять еще вот такой разрез.
[03:48:11.780 --> 03:48:14.780]  Можно оценить какой-то разрез, как C е делить на L.
[03:48:15.780 --> 03:48:17.780]  C е делить на L?
[03:48:20.780 --> 03:48:21.780]  Свои ребра где?
[03:48:22.780 --> 03:48:23.780]  Ну, в принципе, да.
[03:48:24.780 --> 03:48:27.780]  Да, заметим следующее, что каждый ребро у нас, у нас всего E-рёбер.
[03:48:28.780 --> 03:48:29.780]  Ладно, два E-рёбер, ладно.
[03:48:30.780 --> 03:48:31.780]  У нас, обратно, ребра не входят.
[03:48:32.780 --> 03:48:34.780]  Да, да, да, согласен.
[03:48:35.780 --> 03:48:36.780]  Да, да, да, да, согласен.
[03:48:37.780 --> 03:48:38.780]  Ну, да, да, у нас, да.
[03:48:39.780 --> 03:48:42.780]  У нас есть E-рёбер, которые могут входить в один из этих разрезов.
[03:48:43.780 --> 03:48:44.780]  Каждый ходит не более чем в один.
[03:48:48.780 --> 03:48:49.780]  Хотя нет.
[03:48:50.780 --> 03:48:54.780]  Ну, можно оценить через C е, хотя тут рекомендуют через E квадрат.
[03:48:55.780 --> 03:48:56.780]  Ну ладно, давайте через C е попробуем.
[03:48:57.780 --> 03:48:58.780]  Сейчас, ладно, давайте.
[03:48:58.780 --> 03:49:04.780]  Давайте возьмём множество, точность множества, которое не больше, чем…
[03:49:07.780 --> 03:49:14.780]  Нет, ну ладно, можно оценить через E делить на K, но это как бы вам даст нот.
[03:49:15.780 --> 03:49:18.780]  Нет, ну смотрите, мы можем оценить, что размер разреза не более чем…
[03:49:19.780 --> 03:49:22.780]  Ну там минимальный из них разрез не более чем C е делить на K, это да.
[03:49:23.780 --> 03:49:25.780]  Почему? Потому что у нас тут всего K, даже капли с один.
[03:49:25.780 --> 03:49:31.780]  Но тогда это нам даст, что тут C, сколько там, C е делить на K плюс один.
[03:49:32.780 --> 03:49:35.780]  И тогда здесь, значит, и что у нас тогда получится?
[03:49:36.780 --> 03:49:41.780]  Корень из C е, но потенциал у нас и так не происходит в C е, поэтому ничего нового.
[03:49:46.780 --> 03:49:49.780]  Ну, перемножек не надо, а надо вместо этого следующее.
[03:49:50.780 --> 03:49:51.780]  Значит, смотрите, сейчас будет…
[03:49:51.780 --> 03:49:55.780]  Ну просто нет, тут смысл в том, что обоценивать не через E, а чисто через C е и V.
[03:50:05.780 --> 03:50:09.780]  Ну, значит, хотя да, в худшем случае тут корень из C е, но не совсем так.
[03:50:10.780 --> 03:50:11.780]  Значит, смотрите, тут предлагается аккуратненько.
[03:50:12.780 --> 03:50:15.780]  Потому что как действительно это оценить? Оценить получается так.
[03:50:21.780 --> 03:50:24.780]  Хотя нет, в общем-то да, дальше на самом деле говорится так.
[03:50:25.780 --> 03:50:28.780]  Да, можно оценивать корень из C е, но хочется получить тут красивую оценку.
[03:50:29.780 --> 03:50:32.780]  Ладно, дальше делается так. Заметим, что так, как кратных ребер нет, а это важно,
[03:50:33.780 --> 03:50:37.780]  то получается, что E суммарно не превосходит V квадрат.
[03:50:40.780 --> 03:50:42.780]  Тогда получается, что E можно…
[03:50:43.780 --> 03:50:48.780]  То есть, здесь тогда оценка получается K плюс C V квадрат делить на K плюс один.
[03:50:48.780 --> 03:50:49.780]  K плюс один.
[03:50:53.780 --> 03:50:54.780]  Так, нет, это плохая оценка.
[03:50:55.780 --> 03:50:56.780]  Ну, V как-нибудь из C это неинтересно.
[03:50:57.780 --> 03:50:58.780]  Нет, ладно, у меня будет лучше.
[03:51:00.780 --> 03:51:05.780]  Нет, просто можно еще лучше сделать.
[03:51:06.780 --> 03:51:08.780]  Смотрите, давайте сейчас мы просто немножко тут попишем алгебры.
[03:51:09.780 --> 03:51:11.780]  Дело в том, что нас интересует, что нас интересует.
[03:51:12.780 --> 03:51:24.780]  То есть, нас интересует C умножить на минимум из модуль 0 V1, модуль V1 на V2 и так далее.
[03:51:25.780 --> 03:51:28.780]  Модуль там V, сколько там, ладно, пусть будет L минус 1, модуль VL.
[03:51:33.780 --> 03:51:35.780]  Да, это не происходит C делить на L.
[03:51:38.780 --> 03:51:40.780]  В общем, я просто беру пока среднее арифметическое.
[03:51:41.780 --> 03:51:51.780]  Ну, в принципе, адекватная такая оценка, на самом деле, учитывая, что там тесты можно подогнать так, чтобы там действительно все они были плюс-минус равны.
[03:51:55.780 --> 03:51:56.780]  Вот.
[03:51:57.780 --> 03:51:58.780]  А, вот, нет.
[03:51:59.780 --> 03:52:03.780]  Нет, давайте так, ладно, давайте C я напишу тут, а тут я напишу делить на L.
[03:52:05.780 --> 03:52:07.780]  Так, теперь возникает вопрос.
[03:52:08.780 --> 03:52:11.780]  Когда вот это вот, то есть, тогда что у нас получается?
[03:52:12.780 --> 03:52:17.780]  У нас есть какие-то величины, сумма которых равна V, ладно, не более, чем V.
[03:52:18.780 --> 03:52:32.780]  И нам теперь жутко интересно, когда это среднее арифметическое становится, там становится, ну, то есть, при каких V оно вообще максимально возможно?
[03:52:37.780 --> 03:52:38.780]  На минимум.
[03:52:39.780 --> 03:52:40.780]  На минимум.
[03:52:42.780 --> 03:52:43.780]  Нет.
[03:52:44.780 --> 03:52:45.780]  Сейчас нет.
[03:52:46.780 --> 03:52:48.780]  Если у тебя есть нерадность, всегда выбираешь минимум.
[03:52:57.780 --> 03:52:58.780]  Вот.
[03:52:59.780 --> 03:53:01.780]  Ну, вот тогда, вот такой вот вопрос возникает.
[03:53:07.780 --> 03:53:08.780]  Вот.
[03:53:09.780 --> 03:53:10.780]  Ну, вот, как вот эту сумму?
[03:53:11.780 --> 03:53:12.780]  Ну-ка, давайте-ка.
[03:53:20.780 --> 03:53:21.780]  Чего, чего обожжем это?
[03:53:21.780 --> 03:53:26.780]  Ну, это похоже, это похоже на 20 градусов.
[03:53:27.780 --> 03:53:31.780]  Ну, и кажется, что надо просто не выгендриваться и завязать это просто.
[03:53:35.780 --> 03:53:36.780]  Да, вот есть, ну, вот.
[03:53:37.780 --> 03:53:38.780]  То есть, почему тогда, ну, вот.
[03:53:39.780 --> 03:53:44.780]  Нет, ну, действительно есть подозрение, что если мы уж, то есть, как бы у нас есть L плюс, там какие-то числа мы хотим тут распределить.
[03:53:45.780 --> 03:53:47.780]  И так, чтобы там сумма этого была как можно больше.
[03:53:48.780 --> 03:53:50.780]  Сумма этого как можно больше, когда они...
[03:53:51.780 --> 03:53:53.780]  Возрастают, как будто.
[03:53:54.780 --> 03:53:55.780]  Чего объяснять там уже?
[03:53:56.780 --> 03:53:58.780]  Тракторный раз ты получишь ценку C в b квадрате или очень классно.
[03:53:59.780 --> 03:54:00.780]  Ага.
[03:54:01.780 --> 03:54:02.780]  Так, как?
[03:54:03.780 --> 03:54:04.780]  Как?
[03:54:05.780 --> 03:54:06.780]  Как, может, он снирается и получил такую ценку?
[03:54:06.780 --> 03:54:08.780]  Ты говоришь, что у тебя 2 и 1 совсем.
[03:54:09.780 --> 03:54:10.780]  У нас есть V.
[03:54:11.780 --> 03:54:15.780]  Первые множители с V0, первые множители с V1.
[03:54:16.780 --> 03:54:20.780]  И вторые множители с 1, 2 по V.
[03:54:21.780 --> 03:54:22.780]  Давай с 1, 2.
[03:54:23.780 --> 03:54:24.780]  Поставим.
[03:54:25.780 --> 03:54:26.780]  Это правда или нет?
[03:54:27.780 --> 03:54:28.780]  А, можно дать половину.
[03:54:29.780 --> 03:54:30.780]  Ну, тут условно.
[03:54:31.780 --> 03:54:32.780]  Не, не воято.
[03:54:33.780 --> 03:54:34.780]  А, ничего не получилось.
[03:54:34.780 --> 03:54:35.780]  Почему?
[03:54:36.780 --> 03:54:37.780]  Потому что, кстати, два числа.
[03:54:38.780 --> 03:54:39.780]  1 и V.
[03:54:40.780 --> 03:54:41.780]  Не, что вы сейчас не садитесь?
[03:54:42.780 --> 03:54:43.780]  Мы можем все поставить V, L-1.
[03:54:44.780 --> 03:54:46.780]  Так, мы можем поставить V0 примерно в половину V, V1 тоже примерно в половину V.
[03:54:47.780 --> 03:54:48.780]  И уже поиграть.
[03:54:49.780 --> 03:54:50.780]  Сейчас все проверяем?
[03:54:51.780 --> 03:54:52.780]  Какой еще раз-то?
[03:54:53.780 --> 03:54:58.780]  Если мы возьмем V0 примерно в половину V, V умножится на какой-то констант.
[03:54:59.780 --> 03:55:02.780]  И V1 тоже в профессиональном V.
[03:55:03.780 --> 03:55:04.780]  То есть, какую-то часть.
[03:55:05.780 --> 03:55:06.780]  Допустим, четверть четверть.
[03:55:07.780 --> 03:55:08.780]  Ну, может.
[03:55:09.780 --> 03:55:10.780]  Нам не очень хотелось переходить к этому.
[03:55:11.780 --> 03:55:13.780]  Последний переход, кажется, уже заранее.
[03:55:14.780 --> 03:55:15.780]  Да, нет.
[03:55:16.780 --> 03:55:17.780]  Почему?
[03:55:18.780 --> 03:55:20.780]  Ну, потому что сейчас Рома прав.
[03:55:21.780 --> 03:55:24.780]  Можно выбрать такой тест, на котором это уже Cb2d9L.
[03:55:25.780 --> 03:55:26.780]  То есть, мы не улучшили нашу оценку.
[03:55:27.780 --> 03:55:28.780]  Нет, Cb2d9L.
[03:55:29.780 --> 03:55:30.780]  Как вы выберете, что именно в эква...
[03:55:31.780 --> 03:55:34.780]  V1 равно V2 на 4, а все остальное какое-нибудь.
[03:55:35.780 --> 03:55:36.780]  И все.
[03:55:37.780 --> 03:55:38.780]  В единицы, да.
[03:55:39.780 --> 03:55:40.780]  Ну, хорошо.
[03:55:41.780 --> 03:55:42.780]  Ладно, сделаем аккуратнее.
[03:55:43.780 --> 03:55:44.780]  Хотя странно тут.
[03:55:45.780 --> 03:55:46.780]  Ладно, смотрите.
[03:55:47.780 --> 03:55:49.780]  Тогда мы обнаглеем вот как.
[03:56:00.780 --> 03:56:01.780]  Вот так.
[03:56:15.780 --> 03:56:17.780]  Ну, в принципе, я могу сказать даже вот как.
[03:56:18.780 --> 03:56:19.780]  Это равно C поделить там.
[03:56:20.780 --> 03:56:22.780]  Нет, хотя нет, я оставлю так.
[03:56:23.780 --> 03:56:25.780]  Это C из вот так вот.
[03:56:26.780 --> 03:56:28.780]  Минимума вот этого вот всего.
[03:56:29.780 --> 03:56:31.780]  Плюс модуль V1 пополам.
[03:56:32.780 --> 03:56:35.780]  Модуль V1 плюс модуль V2 пополам.
[03:56:36.780 --> 03:56:37.780]  И так далее.
[03:56:38.780 --> 03:56:39.780]  Модуль VL.
[03:56:40.780 --> 03:56:42.780]  Плюс модуль VL пополам.
[03:56:43.780 --> 03:56:44.780]  И все это в квадрате.
[03:56:45.780 --> 03:56:47.780]  Вот я буду вот этот минимум искать.
[03:56:48.780 --> 03:56:49.780]  Вот.
[03:56:50.780 --> 03:56:53.780]  Нам известно, что сумма этих элементов равняется не больше.
[03:56:54.780 --> 03:56:56.780]  Да, это меньше либо равно как C.
[03:56:56.780 --> 03:56:58.780]  И тут у нас получается среднее арифметическое.
[03:56:59.780 --> 03:57:00.780]  То есть типа 1 на L.
[03:57:01.780 --> 03:57:02.780]  Сумма.
[03:57:03.780 --> 03:57:04.780]  Значит, по всем.
[03:57:05.780 --> 03:57:07.780]  Значит, там V и минус 1.
[03:57:08.780 --> 03:57:09.780]  Плюс модуль V и так далее.
[03:57:10.780 --> 03:57:11.780]  Все это пополам.
[03:57:12.780 --> 03:57:14.780]  И равно, допустим, 1 на L.
[03:57:15.780 --> 03:57:16.780]  И все это в квадрате.
[03:57:17.780 --> 03:57:19.780]  Но теперь приятно, что эта сумма не превосходит модуль V.
[03:57:20.780 --> 03:57:21.780]  То есть не.
[03:57:22.780 --> 03:57:25.780]  То есть не превосходит модуль V в квадрате
[03:57:26.780 --> 03:57:27.780]  Вот ради чего мы все это делали.
[03:57:28.780 --> 03:57:29.780]  Так, да, C забыл.
[03:57:30.780 --> 03:57:32.780]  Делали мы для того, чтобы у меня был L квадрат здесь.
[03:57:33.780 --> 03:57:37.780]  То есть получается, что здесь я пишу уже не CE делить на K плюс 1,
[03:57:38.780 --> 03:57:41.780]  а CV квадрат делить на K плюс 1.
[03:57:42.780 --> 03:57:46.780]  Так, только не на K плюс 1, а на K квадрат.
[03:57:47.780 --> 03:57:53.780]  И тогда, ну там очевидно, да, это возрастает, это убывает, приравниваем.
[03:57:53.780 --> 03:58:00.780]  И мистическая теорема получается, что здесь корень кубический из CV квадрата.
[03:58:01.780 --> 03:58:03.780]  Да, вот так теорема формулируется.
[03:58:11.780 --> 03:58:12.780]  Так.
[03:58:13.780 --> 03:58:15.780]  А это означает, что надо кратные ребра сжимать?
[03:58:16.780 --> 03:58:17.780]  Нет.
[03:58:18.780 --> 03:58:21.780]  Проблема в том, что да, у тебя, да, вот эта цешка, к сожалению, увеличится.
[03:58:21.780 --> 03:58:23.780]  А где мы пойдем сейчас?
[03:58:24.780 --> 03:58:26.780]  Да, вот именно, да.
[03:58:27.780 --> 03:58:31.780]  В чем смысл кратных ребра сжимать?
[03:58:32.780 --> 03:58:35.780]  Ну мало ли. Было у вас между городами две дороги.
[03:58:36.780 --> 03:58:40.780]  Называется хайвей и обычная.
[03:58:41.780 --> 03:58:44.780]  Хайвей на пять полос и проселочная на одну.
[03:58:47.780 --> 03:58:49.780]  Нет, минкост это другая задача.
[03:58:49.780 --> 03:58:55.780]  А следует на практике кратные ребра сжимать?
[03:58:56.780 --> 03:58:59.780]  Потому что, конечно, что-то все увеличится, тогда оценка будет, возможно, лучше.
[03:59:00.780 --> 03:59:01.780]  Нет.
[03:59:02.780 --> 03:59:04.780]  Когда вы сожмете кратные ребра, у вас как бы вот это вот с увеличится.
[03:59:05.780 --> 03:59:06.780]  Нет.
[03:59:07.780 --> 03:59:11.780]  То есть на практике это называется общая.
[03:59:12.780 --> 03:59:17.780]  Если у вас, вы знаете, что между любыми двумя решениями общая профессиональная способность не более, чем с, то применять можно.
[03:59:18.780 --> 03:59:20.780]  Я не знаю, конечно, есть ли там примеры.
[03:59:21.780 --> 03:59:23.780]  Это просто красивая оценка для общего случая.
[03:59:24.780 --> 03:59:30.780]  Чаще всего, конечно, я думаю, оценка потенциалом может оказаться точнее.
[03:59:31.780 --> 03:59:32.780]  Впрочем, черт его знает.
[03:59:33.780 --> 03:59:36.780]  Хотя в некоторых случаях, наверное...
[03:59:37.780 --> 03:59:39.780]  Нет, если у вас потенциал равен...
[03:59:40.780 --> 03:59:43.780]  Там потенциал равен... Чему он может быть равен?
[03:59:43.780 --> 03:59:51.780]  Если у каждой вершины торчит по В, там по В ребер профессиональной способности С, то потенциал равен СВ, в смысле СВ квадрат.
[03:59:52.780 --> 03:59:57.780]  Но правда, если потенциал СВ квадрат, то там будет корень обычный, а тут корень кубический.
[03:59:58.780 --> 04:00:00.780]  Поэтому в некоторых случаях эта оценка все-таки лучше.
[04:00:03.780 --> 04:00:11.780]  Правда, что все эти аремы нельзя подружить со случаем, когда мы проводим просто ребры бесконечной профессиональной сходности?
[04:00:12.780 --> 04:00:13.780]  Ну...
[04:00:14.780 --> 04:00:17.780]  Нет, конкретно...
[04:00:18.780 --> 04:00:21.780]  Нет, вторая серия мы вылетим с трубу, а вот с первой как повезет.
[04:00:21.780 --> 04:00:22.780]  С первой как повезет.
[04:00:36.780 --> 04:00:43.780]  Нет, правда, фишка в том, что если ты добавил 2 плюс бесконечности вершины, то первое, что ты можешь сделать в потоке, через эти бесконечности пропустить поток.
[04:00:44.780 --> 04:00:46.780]  Хотя оно там конкретно...
[04:00:46.780 --> 04:00:55.780]  Ну, может быть, сломать, но сломать, да, потому что проведя одно ребро, один из потенциалов ты убил.
[04:00:56.780 --> 04:00:57.780]  То есть, я правил бесконечности.
[04:00:58.780 --> 04:00:59.780]  Так, интересно, выгонит ли нас?
[04:01:03.780 --> 04:01:04.780]  Да я не знаю, ну просто нет, смотрите.
[04:01:10.780 --> 04:01:11.780]  Так, ну в прочем ладно, давай я...
[04:01:12.780 --> 04:01:14.780]  Нет, просто так жалко от этого уходить.
[04:01:16.780 --> 04:01:22.780]  Просто, нет, смотрите, просто в идеале было бы так, просто если бы сейчас потратили, там, можем потратить не более чем 45 минут.
[04:01:23.780 --> 04:01:27.780]  И в следующий раз тогда так жестно перейти, так жестно уже уйти от случаев себя.
[04:01:28.780 --> 04:01:30.780]  Что идет дальше? Дальше идет масштабирование.
[04:01:31.780 --> 04:01:34.780]  Потому что есть масштабирование просто, есть масштабирование 1.
[04:01:35.780 --> 04:01:41.780]  И хочется, чтобы, ну вот, в общем, само все масштабирование в общем-то там как бы доказать просто.
[04:01:42.780 --> 04:01:43.780]  Вот.
[04:01:44.780 --> 04:01:45.780]  Но выгонит ли нас?
[04:01:46.780 --> 04:01:47.780]  Нет.
[04:01:49.780 --> 04:01:50.780]  Все?
[04:01:51.780 --> 04:01:52.780]  Все, все, все, вы уже умерли, да?
[04:01:53.780 --> 04:01:55.780]  Так, ну это да, ну хотела, ну вот.
[04:01:56.780 --> 04:01:58.780]  Ну хорошо, с 9 утра, да.
[04:01:59.780 --> 04:02:01.780]  А, ну да, сегодня мы лекцию даже без задержки начали, да, полка.
[04:02:02.780 --> 04:02:03.780]  Так, ну ладненько.
[04:02:04.780 --> 04:02:05.780]  Тогда в следующий раз, значит, тогда надо будет обсудить масштабирование.
[04:02:06.780 --> 04:02:08.780]  Даже Диница с масштабированием.
[04:02:09.780 --> 04:02:15.780]  Нет, в принципе, да, потому что в принципе, конечно, из Диница вы уже можете понять, как, кстати, с помощью линката придумать алгоритм ЗВЕЛОГВ.
[04:02:16.780 --> 04:02:17.780]  А.
[04:02:18.780 --> 04:02:19.780]  А.
[04:02:20.780 --> 04:02:21.780]  Да.
[04:02:22.780 --> 04:02:23.780]  А.
[04:02:24.780 --> 04:02:25.780]  А, сейчас.
[04:02:26.780 --> 04:02:27.780]  Нет, можно, можно.
[04:02:28.780 --> 04:02:30.780]  Ты хочешь на пути что-то понимать?
[04:02:31.780 --> 04:02:32.780]  Да.
[04:02:33.780 --> 04:02:34.780]  А, такая связь.
[04:02:35.780 --> 04:02:36.780]  Ну, блин.
[04:02:37.780 --> 04:02:38.780]  Ну да, там и да.
[04:02:39.780 --> 04:02:42.780]  Да, то есть давайте до каждой вершины поставим ребро, на которое сейчас смотрит итератор, да.
[04:02:43.780 --> 04:02:48.780]  Заметим, что эти ребра, по идее, они образуют такое подвешенное дерево с корнем в Т.
[04:02:49.780 --> 04:02:53.780]  Ну ладно, или подвешенное дерево что-нибудь там с корнем в ауте.
[04:02:54.780 --> 04:02:57.780]  И надо тогда просто брать вот этот путь и к нему.
[04:02:58.780 --> 04:03:00.780]  Мы насыщаем ребро и приподвешиваем.
[04:03:01.780 --> 04:03:02.780]  Ну типа да.
[04:03:03.780 --> 04:03:06.780]  Переподвешивание, да, это делается фактически, да, в линкате вот так вот, да.
[04:03:07.780 --> 04:03:08.780]  Вот, то есть получается, да.
[04:03:09.780 --> 04:03:14.780]  Ну единственное, что у вас, конечно, отложенная операция вида «пропихни поток через ребро», это да.
[04:03:17.780 --> 04:03:20.780]  Да, пишется не очень приятно, но явно пишется, да.
[04:03:21.780 --> 04:03:29.780]  То есть как бы вы сначала вычитаете в дереве, а потом, когда у вас отложенная операция, вы уже там делаете реальное проталкивание в этом, да.
[04:03:29.780 --> 04:03:30.780]  Ну не, ну линка, понятно.
[04:03:31.780 --> 04:03:32.780]  Ну типа да.
[04:03:33.780 --> 04:03:38.780]  Но в итоге у вас получается алгоритм, так как вы это делаете, как бы таких проталкиваний вы делаете за «е», да.
[04:03:39.780 --> 04:03:40.780]  Ну удали вот эти лишние ребра, кстати.
[04:03:41.780 --> 04:03:43.780]  То есть получается у вас есть симпотика там «в» и «лог в».
[04:03:44.780 --> 04:03:46.780]  Вот в принципе неплохая симпотика.
[04:03:47.780 --> 04:03:48.780]  Ну не скажу.
[04:03:49.780 --> 04:03:50.780]  Ну не скажу.
[04:03:51.780 --> 04:03:52.780]  Ну не скажу.
[04:03:53.780 --> 04:03:54.780]  Ну не скажу.
[04:03:55.780 --> 04:03:56.780]  Ну не скажу.
[04:03:56.780 --> 04:03:57.780]  Ну не скажу.
[04:04:00.780 --> 04:04:01.780]  Нет, ну потому что у вас будет «ве лог с».
[04:04:02.780 --> 04:04:04.780]  Я правда так и не помню все время, что мы будем делать.
[04:04:05.780 --> 04:04:06.780]  Но алгоритм нет.
[04:04:07.780 --> 04:04:08.780]  Вот этот алгоритм устроен очень просто.
[04:04:09.780 --> 04:04:17.780]  Нет, там идея такая, просто мы будем блокирующий поток искать по принципу, сначала будем блокировать большие пути, потом в два раза меньше, потом еще в два раза меньше и так далее.
[04:04:18.780 --> 04:04:21.780]  Да, и мы неожиданно докажем, что это делается за быстро.
[04:04:22.780 --> 04:04:23.780]  Вот.
[04:04:24.780 --> 04:04:25.780]  Что?
[04:04:26.780 --> 04:04:27.780]  Не знаю.
[04:04:28.780 --> 04:04:29.780]  Какой?
[04:04:30.780 --> 04:04:31.780]  Нет, для этого…
[04:04:32.780 --> 04:04:33.780]  Нет, ну как сказать, что будет…
[04:04:34.780 --> 04:04:37.780]  Честно скажем, что будет в дивизионе, а вообще даже не совсем от меня зависит.
[04:04:38.780 --> 04:04:39.780]  Вот.
[04:04:40.780 --> 04:04:41.780]  А кто будет в дивизионе?
[04:04:42.780 --> 04:04:43.780]  Хотя, ой, а кто его будет делать-то?
[04:04:44.780 --> 04:04:45.780]  А, стоп, я же…
[04:04:46.780 --> 04:04:49.780]  А, ну стоп, я же буду подбирать контесты, Господи, да-да-да.
[04:04:51.780 --> 04:04:52.780]  Вот.
[04:04:53.780 --> 04:04:54.780]  Вот.
[04:04:54.780 --> 04:04:59.780]  Нет, ну в смысле нет, у меня есть какой-то архив хороших контестов, так что как бы это не проблема.
[04:05:00.780 --> 04:05:01.780]  Вот.
[04:05:02.780 --> 04:05:03.780]  Так что в этом смысле не волнуйтесь, нет, какие-то даже наметки есть, естественно, да.
[04:05:04.780 --> 04:05:05.780]  Вот.
[04:05:06.780 --> 04:05:07.780]  Так что, соответственно.
[04:05:08.780 --> 04:05:09.780]  Вот.
[04:05:10.780 --> 04:05:11.780]  Поэтому, да, это ВЛОКС, но откуда он берется, нам придется и масштабирование в целом изучить.
[04:05:12.780 --> 04:05:16.780]  Потому что нам же просто надо, чтобы масштабирование вообще по идее подразумевает более простой алгоритм.
[04:05:17.780 --> 04:05:22.780]  Говорит, что а давайте делать обычного Форда Фулкерсона, но только на первой фазе будем искать пропустые способности С,
[04:05:23.780 --> 04:05:24.780]  потом С пополам, потом и так далее.
[04:05:25.780 --> 04:05:28.780]  На самом деле это уже даст вам Е квадрат ЛОКС.
[04:05:29.780 --> 04:05:30.780]  Вот.
[04:05:31.780 --> 04:05:33.780]  Но, видимо, как бы уже в следующий раз придется.
[04:05:34.780 --> 04:05:39.780]  Да, но видимо это в следующий раз придется изучить почему.
[04:05:40.780 --> 04:05:41.780]  Вот.
[04:05:42.780 --> 04:05:43.780]  То есть там, да, там не сложно, но соответственно.
[04:05:44.780 --> 04:05:45.780]  Ладно, все.
[04:05:46.780 --> 04:05:47.780]  Спасибо.
