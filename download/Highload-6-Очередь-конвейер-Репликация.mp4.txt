[00:00.000 --> 00:11.560]  Так, архитектурный паттерд очереди. Значит, общий смысл заключается в том, что у вас есть
[00:11.560 --> 00:23.760]  хранилище, которое может быть специализированное, может быть самое-самое обычное, самое простое. Любое
[00:23.760 --> 00:33.800]  хранилище, в которое вы пишете данные и извлекаете их в том же самом порядке, в котором записали. Эти
[00:33.800 --> 00:41.960]  данные могут быть задачки, сигналы, еще что-то, обычно какие-то задачки, какие-то таски. То есть
[00:41.960 --> 00:52.480]  есть очередь, в нее кто-то пишет, из нее кто-то читает, и эти данные обрабатывают. Читают их,
[00:52.480 --> 01:03.440]  так называемые воркеры. Бывают очереди различных приоритетизаций, еще что-то параметрически и
[01:03.440 --> 01:08.000]  так далее, так далее, так далее. Нам по большому счету не важно. Для чего нужен паттерд? Все очень
[01:08.000 --> 01:16.240]  просто. У вас гарантированное количество воркеров, например, 1, 2, 3, 4, 5. Вы точно знаете,
[01:16.240 --> 01:21.600]  сколько им нужны ресурсов, точно знаете, как они работают. А что происходит здесь, неизвестно.
[01:21.600 --> 01:27.760]  Да, то есть здесь может быть какая-нибудь там пиковая нагрузка, здесь все ровно. Вот это вы
[01:27.760 --> 01:33.000]  можете делать тогда, когда вам удобно. Вот это вы делаете тогда, когда удобно пользователю. Это
[01:33.000 --> 01:40.320]  первый механизм использования, второй механизм использования. То, что выполняемая работа может
[01:40.320 --> 01:50.200]  быть долгой. Перекодировать видео. Вы не кладете сюда видео, вы кладете сюда задачку. Перекодируй,
[01:50.480 --> 01:55.440]  сходи, пожалуйста, вот сюда, вот это хранилище. Возьми вот это видео, перекодируй его, положи его вот
[01:55.440 --> 02:03.840]  туда. Вот это так звучит задачка. Воркеры ее выполняют. Очень часто используется это исключение. Это первая
[02:03.840 --> 02:07.180]  вводная задача, которую мы сейчас с вами будем обсуждать. Вторая вводная задача, которую мы
[02:07.180 --> 02:13.360]  сами будем обсуждать. Сервисно-ориентированная модель. Сервисно-ориентированная модель построена по
[02:13.360 --> 02:19.280]  принципу, потому что у вас есть всю вашу систему, вы делите на несколько сервисов.
[02:19.280 --> 02:25.920]  и каждый из этих сервисов обладает какой-то своей внутренней логикой, своей внутренней
[02:25.920 --> 02:33.320]  архитектурой, своими базами данных и так далее. Например, сервис фотографии построен совсем по
[02:33.320 --> 02:39.280]  другому, нежели сервис постов. Сервис фотографии — это большие диски, много места для того,
[02:39.280 --> 02:48.320]  чтобы хранить фотографии. Сервис постов — это SQL-база данных. В фотографиях база данных используется
[02:48.320 --> 02:53.360]  для хранения фотографии баз данных с пользователями. И, соответственно, у вас отдельный сервис
[02:53.360 --> 03:02.800]  фото, отдельный сервис паспорта. Это прям отдельный сервис, это чуть ли не отдельный сайт,
[03:02.800 --> 03:12.560]  то есть они как бы выглядят в полностью отдельной сущности. Принципиальным является сделать так,
[03:12.560 --> 03:20.600]  что вот такие вот связи запрещены. Нельзя из программы входить в базу данных другого сервиса.
[03:20.600 --> 03:25.880]  Почему? Потому что не вы его разрабатываете, его могут разрабатывать другие ребята, они не обязаны
[03:25.880 --> 03:30.400]  вам ничего говорить и так далее. То есть это как раз делается, вот это правило вводится для
[03:30.400 --> 03:37.800]  облегчения совместной работы. Если за каждую команду отвечает за свой пустот, то все нормально.
[03:37.800 --> 03:42.840]  Они как бы договорились о том, как они друг с другом общаются и внутренним друг другу не
[03:42.840 --> 03:50.320]  поняли. Если сервис постов решает поменять систему хранения там, не знаю, с базы данных на файлы,
[03:50.320 --> 03:58.000]  им никому об этом не надо говорить. Как они общаются? Они общаются вот так. Через некий
[03:58.000 --> 04:08.640]  маппи интерфейс. То есть каждый из них говорит, ребят, ко мне можно приходить и вызывать у меня вот
[04:08.640 --> 04:15.840]  такие-то, такие-то, такие-то, такие-то методы. Каким способом приходить? Как угодно, например.
[04:15.840 --> 04:25.880]  Самый такой простой способ. Дергать по HTTP, выполнять дикт-запрос. Вот точно так же,
[04:25.880 --> 04:35.600]  когда вы набираете вконтакте, вы выполняете дикт-запрос с сайта www.vk.com. Точно такой же дикт-запрос
[04:35.600 --> 04:41.160]  выполняется каком-нибудь методом. Просто мы договорились, что, например, я не знаю,
[04:41.160 --> 04:51.160]  фото.facebook.com.slash.upload.photo это некий метод, куда нужно передать фотографию и она будет
[04:51.160 --> 04:59.040]  загружена в хранилище. Все. И все остальные сервисы знают, что если нужно загрузить что-то в
[04:59.040 --> 05:09.800]  хранилище, они вызывают фото.facebook.com.upload.photo. В принципе, понятно? А теперь давайте сделаем
[05:09.800 --> 05:18.640]  следующее. Давайте придумаем, построим систему общения. Понятное дело, что это как бы внутреннее,
[05:18.640 --> 05:23.360]  внутреннее для надействия. Понимаете, да? То есть это не идет через глобальный интернет. Это какие-то
[05:23.360 --> 05:29.720]  внутренние, внутренние сети, еще что-нибудь, еще что-нибудь. Может быть, общение по РС. Нам не
[05:29.720 --> 05:41.880]  принципиально. Такого нам не принципиально. Как сделать так? Вот у нас есть сервис постов и сервис
[05:41.880 --> 05:52.920]  рассылок. Пришел новый пост. Нам нужно опубликовать, разослать тем друзьям этого пользователя
[05:52.920 --> 06:01.960]  информацию о том, что этот пользователь сделал новый пост. Сервис постов, сервис рассылок. Давайте. Как это сделать?
[06:11.880 --> 06:21.960]  Понятно, почему я выделил в отдельную историю. Потому что сервис рассылок может отправить, ну то
[06:21.960 --> 06:27.920]  есть, например, этот пост может опубликовать Zuckerberg. Тогда нам нужно сделать 100, отправить 100 миллионов
[06:27.920 --> 06:35.880]  писем. Это может быть долго. Zuckerberg не дождется. Даже по блату не дождется ответа. Нужно что-то делать.
[06:35.880 --> 06:42.400]  Давай. Как? У каждого из этих сервисов есть некий акт?
[06:54.680 --> 07:05.040]  Кто конкретно, кому дает ответ? Давай. Вот так. Пришел новый пост. Итак, вот этот чувачок, сервис
[07:05.040 --> 07:18.200]  постов вызывает сервис рассылок. Да? Как? Значит, сервис постов опубликовал себя, сохранил у себя пост
[07:18.200 --> 07:33.400]  где-то там у себя внутри. И вызывает метод сервиса рассылок. Какой? Расслать подписчикам такого-то
[07:33.400 --> 07:50.200]  пользователя такой-то пост. Окей. Расслать. Первый. Почему эта штука? Что внутри сервиса рассылок
[07:50.200 --> 08:00.920]  происходит в таком случае? Он сразу начинает рассылать. Итак, у него есть внутренняя очередь.
[08:00.920 --> 08:15.680]  То есть у нас с вами есть какой-то внешний аппен и есть внутренняя очередь. Есть какой-то
[08:15.680 --> 08:27.280]  оппен. И так вот, соответственно, вот эта штука идет сюда. Это идет сюда. Это идет сюда. Так?
[08:27.280 --> 08:56.920]  Вот этим, да? Отправляем сразу, чтобы принята задача. Верно? Окей. Какие минусы?
[08:56.920 --> 09:12.400]  Чем можно сломаться? Не, ну а как она зависит? У нас как раз вся эпишка, что ничего не зависит. Это один
[09:12.400 --> 09:20.560]  интерес, это другой. Ну придет. Фейсбук делает очень тупо. Он вышли там через, на следующий день получат ответы.
[09:20.560 --> 09:43.600]  Ответ. Ну дайте там где-нибудь откроем. Мы же сдохли. Слушай, они же открывали. А, ты специально
[09:43.600 --> 09:55.400]  закрыл для того, чтобы он не сломался. Так, в чем проблема в этой схеме, ребята? Не все продумано. Она может
[09:55.400 --> 10:10.440]  сломаться. Давай считать, что есть. Будем считать, что у нас какая-нибудь персидентная со сбрасыванием
[10:10.440 --> 10:28.440]  на диск. Когда-нибудь выполнится? Много задач. Мы сами что будем делать? Мы сами мониторим длину этой очереди и следить за тем,
[10:28.440 --> 10:41.600]  чтобы она не была не слишком длинной. Как в Москве Ирия Ивановна. Куда едут и едут, и все нормально.
[10:41.600 --> 10:51.760]  Запускаем, никакой блокируемой. Запускаем второй в горку и начинаем разбирать в два раза быстрее.
[10:51.760 --> 11:12.920]  Понятия не имею. Сколько угодно можно сделать. Смотри, обычно это делается так. Вот ты запускаешь эту историю, а очередь для
[11:12.920 --> 11:21.080]  того и нужна, чтобы вот это вот сглаживать, вот эти вот пики. Вот ты мониторишь, у тебя средние показания за сутки,
[11:21.080 --> 11:27.280]  например, растет и за месяц вырос, что-то, не знаю, с пяти сообщений до 15. И вот тогда ты принимаешь решение,
[11:27.280 --> 11:34.920]  что запускаешь решение в горку. Понятно, что это будет скакать. 0, 0, 10, 10, 15, 20 и так далее. Ты ориентируешься
[11:34.920 --> 11:40.280]  на среднее значение и на максимальное. Максимальное, чтобы не выходило вообще за грамотеразумного, чтобы
[11:40.280 --> 11:44.640]  не было каких-нибудь там, не знаю, многодневных ожиданий. Ну и на среднее. И запускаешь новые ворки.
[11:44.640 --> 11:56.280]  То есть, они не так, что прям всего сейчас запустит, через час вырубит. Да сколько хочешь запустить,
[11:56.280 --> 12:01.720]  не важно это вообще. Два, три, пять. Обычно по одному и не запускают. Так сразу запускай несколько штучек.
[12:01.720 --> 12:13.600]  Хорошо, запускай. Я не против, запускай. Тебе выделили под эту штуку сервак, запускай на нем столько
[12:13.600 --> 12:23.560]  воркеров, сколько сможешь? 5, 10. Не суть важна. Почему? Запускай одного воркера, он будет ходить с другой машиной,
[12:24.160 --> 12:44.960]  выдели очередь на одну машину, воркеры на другую машину. Нет, не страшно. Такая же какая-то задача
[12:44.960 --> 12:51.520]  удалить рассылку из очереди, если она еще не прошла. Ребята, эта схема не заработает. Почему?
[12:51.520 --> 13:04.560]  В этой схеме есть проблемы. Какие? Вот это вот Кринь принимает у нас внешний интерфейс нашего
[13:04.560 --> 13:21.400]  вот этого сервиса рассылок. Нет, этот наш воркер берет задачу разослать пользователям,
[13:21.400 --> 13:26.320]  подписчикам, пользователя, такого-то информации о таком-то посте и начинает ее выполнять,
[13:26.320 --> 13:32.400]  потихонечку ее рассылать. Мы сейчас внутрь того, как он это делает, не пойдем. Не пойдем. Нам нужно
[13:32.400 --> 13:38.720]  научиться коммуницировать между вот этим сервисом и вот этим. Хорошо. Спрашиваем,
[13:38.720 --> 13:55.520]  если этот сервис сломался, сломался, не отвечает. Он не отвечает. Вот этот афки интерфейс не отвечает.
[13:55.520 --> 14:02.360]  Вот этот сервис постов к нему стучится, а тот молчит. Мы не знаем почему. Связь пропала.
[14:02.360 --> 14:07.360]  Леха, в программистской ворочке что-то выпустили неправильно. Он не работает.
[14:07.360 --> 14:36.480]  Как ты перед постем? Постя 10 минут ждет? Постя у тебя 3 минуты.
[14:36.480 --> 14:45.640]  У тебя 3 секунды. Можно? Как ты предлагаешь, можно. А, ПКМАУТ не сработало, то что?
[14:45.640 --> 15:03.280]  Но только без условий. Сразу положим локальную очередь. Пойдем в локальную очередь.
[15:06.480 --> 15:13.920]  Нет, нет, нет. Орбита у тебя вот здесь. 2 сервисы. У тебя может быть сеть пропасть.
[15:13.920 --> 15:24.280]  И как бы обхорбиться не будет работать все. Здесь и входящий, не только исходящий сервис,
[15:24.280 --> 15:33.640]  сервер запросов. Тоже по большому счету вортир. Это вортир. Хорошо. Мы кладем пост. Мы не
[15:33.640 --> 15:39.520]  отправляем его сюда. Сразу в внешнюю. Кладем его в нашу локальную исходящую очередь.
[15:39.520 --> 15:50.160]  Не обязательно локальная машина. В нашем сервисе. Она расположена в нашем сервисе. Мы ее
[15:50.160 --> 15:57.960]  контролируем. Мы знаем, что с ним происходит. Мы понятия не имеем, что происходит во внешнем
[15:57.960 --> 16:02.280]  сервисе. Мы понятия имеем, что происходит там. Но мы знаем все, что происходит здесь.
[16:03.880 --> 16:09.640]  Мы это контролируем. Это наше. Поэтому мы кладем в локальную очередь. И отсюда вортиры,
[16:09.640 --> 16:16.920]  которые отвечают за то, чтобы отправить информацию куда-то еще. Отвечают за то,
[16:16.920 --> 16:23.520]  чтобы отправить информацию во внешние сервисы. Берут задачки и отправляют. Итог после того,
[16:23.520 --> 16:38.280]  как отсюда пришло принято, удаляют ее из очереди. А если не получилось,
[16:38.280 --> 16:40.960]  оставляют ее в очереди и возвращаются к этому через какое-то время.
[16:40.960 --> 16:55.360]  Можно. Это усложнить тебе несколько логику, но можно.
[16:55.360 --> 17:07.960]  Hardbit это конкретное название технологии, которое позволяет объединить два сервиса,
[17:07.960 --> 17:19.720]  два сервера под одним IP адресом. И работает во внешний мир один, а второй тупо стоит,
[17:19.720 --> 17:26.840]  работает, но не отличает. Во внешний мир он не смотрит. Он только мониторит первый. И если
[17:26.840 --> 17:32.240]  первый сломался, то второй говорит, а теперь я. И поток в тот же самый переключается на другой
[17:32.240 --> 17:48.040]  IP адрес. Вот это просто общая схема. Так, казалось бы, все нормально? Добавили сходящую очередь, да?
[17:48.040 --> 18:06.520]  Еще раз? Вот здесь. Как только мы в локальную базу данных, мы записываем пост в локальную базу данных,
[18:06.520 --> 18:19.560]  мы записываем задачу в исходящую очередь. Сразу точно, что все хорошо. Нет. Первый путь
[18:19.560 --> 18:27.960]  черевах тем, что мы ломаемся, если внешний сервис нам не отвечает. Мы не можем так работать.
[18:27.960 --> 18:39.680]  Работает у нас вот эта очередь. Наша информация не теряется. Мы отвечаем за себя. У нас ничего не
[18:39.680 --> 18:54.240]  теряется, у нас ничего не пропадает. Когда заработает, тогда мы отошлем. Репост публикуется нами, он не
[18:54.240 --> 19:08.960]  расцелается. Зачем она так говорит? Ну он же умер, хорошо, он умер, но это внештатная ситуация. Мы можем
[19:08.960 --> 19:22.320]  рассчитывать на то, что он в принципе поднимется через какое-то время и письмо уйдет. Мы ему об этом не
[19:22.320 --> 19:30.800]  говорим. Если ты посмотришь Facebook, об этом не говори. Просто через какое-то время присылать. Без записи, так скажем.
[19:34.800 --> 19:47.760]  Точно так же, ребят, у вас может быть, у вас может быть что угодно. У вас может быть вместо рассылки у
[19:47.760 --> 19:56.640]  вас может быть какая-то статистика, какая-то индексация, обработка видосиков, если в постели видосики
[19:56.640 --> 20:02.360]  есть и так далее. То есть вообще здесь может быть, например, какая-то параметрическая очередь с
[20:02.360 --> 20:10.920]  разными типами задач и каждый исходящий сервис отправляет в разные сервисы. Каждый исходящий
[20:11.800 --> 20:20.640]  отправляет свой тип задач, обсужит свой тип задач, отправляет их в разные сервисы. Вот примерно так на самом
[20:20.640 --> 20:29.200]  деле. Вот это, это некая классика. Так раньше делали. Это неубиваемая конструкция. Если этот сдохнет,
[20:29.200 --> 20:37.520]  как бы никого это не коснется. Если этот сдохнет, никого это не коснется. Данные не теряются. Общий
[20:37.520 --> 20:44.080]  принцип простой. Ты удаляешь данные от тебя, удаляешь задачи от себя, только после того, как тебе
[20:44.080 --> 20:55.920]  внешняя сторона прогарантировала, что она задачу приняла. Все. Сейчас есть такая история, которая
[20:55.920 --> 21:14.880]  называется Worker-сообщение. Вот это все? Вот это все? С исходящей очереди. Потому что здесь у нас
[21:14.880 --> 21:23.120]  Worker-ы, которые ну как бы... Здесь нам тоже нужно учить, потому что задачи могут выполняться до...
[21:23.120 --> 21:29.080]  Заменяется на Broker-сообщение.
[21:29.080 --> 21:44.560]  Профтинка, которая делает примерно то же самое. Некая коммуникационная среда между различными
[21:44.560 --> 21:48.840]  сервисами, которая гарантирует, что информация будет передаваться из одного места в другое.
[21:48.840 --> 21:57.240]  То есть либо вот так, либо через Broker. Так, а теперь смотрите. Вопрос. Внимание, вопрос.
[21:57.240 --> 22:08.400]  Хорошо. Внутрь сервиса рассылки пойдем. Вот у нас есть сервис рассылки. И вот мы получили задачу.
[22:08.400 --> 22:19.120]  Есть очередь. И в эту очередь попала задача разошли вот этот пост по всем друзьям вот этого
[22:19.120 --> 22:43.280]  пользователя. Пост пользователя. И вот здесь у нас Worker. В чем опасность этой схемы? Нет. Нет. Нет. Нет.
[22:43.280 --> 22:51.520]  Подавляться с постами у нас здесь. Это рассылщик. Он берет каждого друга пользователя,
[22:51.520 --> 23:02.440]  Цукерберга, например, и формирует письмо и отправляет каждому другу. Посты сохраняются вот здесь.
[23:02.440 --> 23:09.440]  Вот у нас сервис постов. Это сервис рассылок. У них разные вещи. Мы просто хотим, чтобы про каждый пост
[23:09.600 --> 23:11.800]  узнали друзья.
[23:21.400 --> 23:30.400]  Клиент там где-то здесь. Да, где-то в сервисе постов. Вот сервис постов хранит подпы, хранит ленты и все прочее.
[23:30.400 --> 23:39.120]  Рассылщик не хранит эти посты, они нахрен не нужны, он разослал, забыл. Итак, внимание, вопрос.
[23:40.000 --> 23:44.000]  Вот эта схема, чем плоха? Какую здесь видите опасность?
[23:58.000 --> 24:00.000]  Первая проблема.
[24:02.000 --> 24:04.000]  Еще.
[24:04.880 --> 24:07.880]  У Цукерберга, напоминаю, 100 миллионов друзей.
[24:14.880 --> 24:19.880]  Сколько времени будет рассылаться 100 миллионов писем?
[24:20.880 --> 24:22.880]  Я вам отвечу.
[24:22.880 --> 24:25.880]  Сутки. Несколько суток.
[24:26.760 --> 24:38.760]  То есть проблема у нас в том, что если мы делаем вот так очередь с задачами рассылщик, то у нас задачи могут быть разные.
[24:38.760 --> 24:43.760]  Одна выполняется за минуту, другая за сутки. Это может быть неприемлемо.
[24:45.760 --> 24:47.760]  А может быть и больше.
[24:48.640 --> 24:55.640]  Так, давай подожди. Кто, где, чего разбивает?
[25:06.640 --> 25:08.640]  Давай алгоритм конкретный.
[25:09.520 --> 25:11.520]  Ну ладно.
[25:11.520 --> 25:13.520]  Так.
[25:15.520 --> 25:17.520]  Так.
[25:31.520 --> 25:33.520]  Они не будут в порядке.
[25:34.400 --> 25:36.400]  Ну ладно.
[25:56.400 --> 25:58.400]  У нас проблема, ждут-то ладно.
[25:58.400 --> 26:00.400]  Мы для этого очередь и вводим.
[26:00.400 --> 26:02.400]  У нас проблема в том, что задача,
[26:03.280 --> 26:05.280]  она будет выполняться очень долго.
[26:05.280 --> 26:09.280]  Друзья Цукерберга будут самыми притесняемыми пользователями сети.
[26:11.280 --> 26:13.280]  Ну по бачам все правильно.
[26:13.280 --> 26:15.280]  Короче, приходит задача.
[26:15.280 --> 26:17.280]  Вот здесь она звучит.
[26:17.280 --> 26:19.280]  Вот этот вот пост, вот этот вот сервис наш, сервис постов.
[26:19.280 --> 26:23.280]  Он понятия не имеет, что там внутри у сервиса рассылок.
[26:23.280 --> 26:25.280]  Он ставит задачу.
[26:25.280 --> 26:27.280]  Вот пост, вот пользователь.
[26:27.280 --> 26:29.280]  Рассылай его друзьям.
[26:29.280 --> 26:31.280]  Все.
[26:32.160 --> 26:34.160]  Сколько этих друзей?
[26:34.160 --> 26:36.160]  Он не знает ничего.
[26:36.160 --> 26:38.160]  Он не знает, что длинная процедура или не длинная.
[26:38.160 --> 26:40.160]  Это его не касается.
[26:40.160 --> 26:42.160]  Он поставил задачу.
[26:42.160 --> 26:44.160]  Она прилетела в самую подходящую очередь.
[26:44.160 --> 26:46.160]  А потом начинает все обрабатываться.
[26:46.160 --> 26:48.160]  Первый воркер.
[26:48.160 --> 26:50.160]  Берет пост, берет пользователь.
[26:50.160 --> 26:52.160]  Дальше, ну что он ждет?
[26:52.160 --> 26:54.160]  Выяснить сколько у пользователей друзей.
[26:54.160 --> 26:56.160]  Где он идет?
[26:56.160 --> 26:58.160]  Он идет к сервису друзей.
[26:58.160 --> 27:00.160]  Он идет к сервису друзей
[27:00.160 --> 27:02.160]  и точно так же спрашивает.
[27:06.160 --> 27:08.160]  Сервис дружбы.
[27:08.160 --> 27:10.160]  Вот мне подсунули вот этого пользователя.
[27:10.160 --> 27:12.160]  Отдай мне всех его друзей.
[27:12.160 --> 27:14.160]  И тот ему говорит.
[27:14.160 --> 27:16.160]  Отлично, держи.
[27:16.160 --> 27:18.160]  Вот тебе миллиончик.
[27:20.160 --> 27:22.160]  Что делает этот ворк?
[27:22.160 --> 27:24.160]  Он ставит следующую, блин, задачу.
[27:26.160 --> 27:28.160]  Следующую очередь.
[27:30.160 --> 27:34.160]  Которой уже немножко по-другому.
[27:34.160 --> 27:36.160]  То есть, если здесь у нас задача звучала.
[27:36.160 --> 27:38.160]  Разошли вот этот пост
[27:38.160 --> 27:40.160]  друзьям вот этого пользователя.
[27:40.160 --> 27:42.160]  То есть, здесь задача уже может звучать.
[27:42.160 --> 27:44.160]  Разошли вот этот пост
[27:44.160 --> 27:46.160]  вот этому человеку.
[27:48.160 --> 27:50.160]  Но этому человеку это правильно?
[27:52.160 --> 27:54.160]  Пачка, конечно, пачка.
[27:54.160 --> 27:56.160]  Потому что если этому человеку,
[27:56.160 --> 27:58.160]  то мы просто другую проблему себе создали.
[27:58.160 --> 28:00.160]  Мы же сделали миллион задач.
[28:00.160 --> 28:02.160]  Например, пачка людей.
[28:02.160 --> 28:04.160]  По 100, по 1000.
[28:10.160 --> 28:12.160]  И здесь уже другой воркер.
[28:12.160 --> 28:14.160]  И здесь их может быть уже больше.
[28:24.160 --> 28:26.160]  Эта очередь у нас входящая
[28:26.160 --> 28:28.160]  с одним типом задач.
[28:28.160 --> 28:30.160]  Это очередь там, не знаю, внутренняя
[28:30.160 --> 28:32.160]  с другим типом задач.
[28:34.160 --> 28:36.160]  Например, так.
[28:38.160 --> 28:40.160]  И вот этот уже выполняет задачки,
[28:40.160 --> 28:42.160]  которые не кажутся максимально,
[28:42.160 --> 28:44.160]  ну, страшными.
[28:44.160 --> 28:46.160]  Ну, по 1000 штук, ну окей,
[28:46.160 --> 28:48.160]  потратим минуту, потратим, так не знаю,
[28:48.160 --> 28:50.160]  две минуты, три минуты.
[28:50.160 --> 28:52.160]  Это нормально.
[28:52.160 --> 28:54.160]  И тогда, когда придет Сукерберг,
[28:54.160 --> 28:56.160]  то у нас будет некоторую проблему,
[28:56.160 --> 28:58.160]  нагрузку, у нас появится здесь сразу много задачек.
[28:58.160 --> 29:00.160]  Одна задачка отсюда будет
[29:00.160 --> 29:02.160]  сконвертирована там, не знаю, в тысячу задачек сюда.
[29:02.160 --> 29:04.160]  Но это все равно довольно быстро переварится.
[29:04.160 --> 29:06.160]  Но это переваривается,
[29:06.160 --> 29:08.160]  в всяком случае, примерно равномерно.
[29:08.160 --> 29:10.160]  То есть это не будет...
[29:10.160 --> 29:12.160]  А до этого у нас была последовательная
[29:12.160 --> 29:14.160]  рассылка всему этому миллиону.
[29:14.160 --> 29:16.160]  А сейчас мы это делаем
[29:16.160 --> 29:18.160]  в то количество потоков.
[29:18.160 --> 29:20.160]  Сколько у нас здесь воркеров?
[29:20.160 --> 29:22.160]  Ну, ты можешь воркеров поставить 100.
[29:26.160 --> 29:28.160]  Потому что у тебя задача одна.
[29:30.160 --> 29:32.160]  Понимаешь?
[29:32.160 --> 29:34.160]  Она просто огромная.
[29:34.160 --> 29:36.160]  Тебе нужно засплитить.
[29:36.160 --> 29:38.160]  На кусочки, ты ее сплитишь на кусочки
[29:38.160 --> 29:40.160]  и рассылаешь каждый кусочек отдельно.
[29:40.160 --> 29:42.160]  Ты сделаешь из него маленькие
[29:42.160 --> 29:44.160]  ратируемые задачи.
[29:44.160 --> 29:46.160]  А вот этот паттерн как называется?
[29:46.160 --> 29:48.160]  Мы его проходили.
[29:48.160 --> 29:50.160]  Мы его проходили.
[29:54.160 --> 29:56.160]  Конвейер, господи.
[29:56.160 --> 29:58.160]  Обычный, самый обычный конвейер.
[30:02.160 --> 30:04.160]  Когда вы берете задачи, например,
[30:04.160 --> 30:06.160]  или какие-то данные,
[30:06.160 --> 30:08.160]  и начинаете их выполнять,
[30:08.160 --> 30:10.160]  обрабатывать несколько этапов,
[30:10.160 --> 30:12.160]  на каждом этапе обрабатывается своя обработка.
[30:12.160 --> 30:14.160]  Давай.
[30:18.160 --> 30:20.160]  Вот так.
[30:22.160 --> 30:24.160]  Можно попробовать смешивать
[30:24.160 --> 30:26.160]  данные с задачей,
[30:26.160 --> 30:28.160]  чтобы на каждом этапе
[30:28.160 --> 30:30.160]  обрабатывать одну паттерн,
[30:30.160 --> 30:32.160]  чтобы он не сидел и отдал
[30:32.160 --> 30:34.160]  сумки какой-то.
[30:34.160 --> 30:36.160]  Можно.
[30:36.160 --> 30:38.160]  Как решить эту задачу?
[30:38.160 --> 30:40.160]  Во-первых, нужно прийти
[30:40.160 --> 30:42.160]  к менеджеру и сказать,
[30:42.160 --> 30:44.160]  нужна ли какая-нибудь гарантия
[30:44.160 --> 30:46.160]  по отправке этого письма?
[30:48.160 --> 30:50.160]  У тебя могут быть разные ответы.
[30:50.160 --> 30:52.160]  У тебя может быть ответ, например,
[30:52.160 --> 30:54.160]  если банк-клиент,
[30:54.160 --> 30:56.160]  какой-нибудь банк
[30:56.160 --> 30:58.160]  высылает тебе письмо
[30:58.160 --> 31:00.160]  о том, что твои деньги списались,
[31:00.160 --> 31:02.160]  ты должен сделать это прямо сейчас.
[31:02.160 --> 31:04.160]  Это нельзя ждать.
[31:04.160 --> 31:06.160]  А я не знаю, пока
[31:06.160 --> 31:08.160]  что-то пройдет.
[31:08.160 --> 31:10.160]  И очевидно, что это разные будут сервисы рассылок
[31:10.160 --> 31:12.160]  для банковской истории
[31:12.160 --> 31:14.160]  и для вот этой.
[31:14.160 --> 31:16.160]  Или разные очереди.
[31:16.160 --> 31:18.160]  А может тебе менеджер сказать,
[31:18.160 --> 31:20.160]  да пофиг, через сутки,
[31:20.160 --> 31:22.160]  через три часа или через час,
[31:22.160 --> 31:24.160]  не важно.
[31:24.160 --> 31:26.160]  Менеджеры пейзбука, насколько я понимаю,
[31:26.160 --> 31:28.160]  сказали так, что же нет никакой гарантии,
[31:28.160 --> 31:30.160]  когда это письмо придет о том,
[31:30.160 --> 31:32.160]  что кто-то тебе что-то написал или прокомментировал.
[31:32.160 --> 31:34.160]  Может прийти сразу через час,
[31:34.160 --> 31:36.160]  через два, через несколько дней.
[31:38.160 --> 31:40.160]  Но если
[31:42.160 --> 31:44.160]  скажут,
[31:44.160 --> 31:46.160]  в течение часа.
[31:46.160 --> 31:48.160]  Что у нас меняется?
[32:06.160 --> 32:08.160]  Менеджер сказал, что письмо
[32:08.160 --> 32:10.160]  о новом сообщении, о новом посте
[32:10.160 --> 32:12.160]  гарантированно должно прийти в течение
[32:12.160 --> 32:14.160]  часа.
[32:24.160 --> 32:26.160]  А менеджер приходит и говорит,
[32:26.160 --> 32:28.160]  это полная хер.
[32:28.160 --> 32:30.160]  Давай переделывать
[32:30.160 --> 32:32.160]  в течение часа.
[32:32.160 --> 32:34.160]  Как вообще это сделать?
[32:42.160 --> 32:44.160]  Нет.
[32:44.160 --> 32:46.160]  Нет.
[32:46.160 --> 32:48.160]  Я не справился,
[32:48.160 --> 32:50.160]  поэтому выполнять уже задача
[32:50.160 --> 32:52.160]  не получилось.
[32:52.160 --> 32:54.160]  Не получилось.
[32:54.160 --> 32:56.160]  Давайте так,
[32:56.160 --> 32:58.160]  смотрите, вот у нас есть два варианта
[32:58.160 --> 33:00.160]  этой подзадачи.
[33:00.160 --> 33:02.160]  Первый вариант подзадачи,
[33:02.160 --> 33:04.160]  те сообщения должны быть
[33:04.160 --> 33:06.160]  отправлены в течение часа
[33:06.160 --> 33:08.160]  даже для Цукерберга.
[33:12.160 --> 33:14.160]  Не помогут тебе приоритеты,
[33:14.160 --> 33:16.160]  потому что для Цукерберга тоже.
[33:18.160 --> 33:20.160]  Если менеджер говорит,
[33:20.160 --> 33:22.160]  что любое сообщение
[33:22.160 --> 33:24.160]  в течение часа должно быть отправлено
[33:24.160 --> 33:26.160]  о любом посте, хоть там
[33:26.160 --> 33:28.160]  100 Цукербергов,
[33:28.160 --> 33:30.160]  то вы занимаетесь математикой.
[33:30.160 --> 33:32.160]  Вы вычисляете производительность
[33:32.160 --> 33:34.160]  каждого вортера, производительность своей
[33:34.160 --> 33:36.160]  сети и так далее.
[33:36.160 --> 33:38.160]  И вычисляете, что может произойти.
[33:38.160 --> 33:40.160]  Сколько Цукербергов одновременно могут
[33:40.160 --> 33:42.160]  записать посты.
[33:42.160 --> 33:44.160]  Смотрите статистику, сколько это было раньше,
[33:44.160 --> 33:46.160]  берете какой-то максимум,
[33:46.160 --> 33:48.160]  увеличиваете его в 5 раз,
[33:48.160 --> 33:50.160]  делите на производительность одного вортера
[33:50.160 --> 33:52.160]  и получаете нужное количество вортеров.
[33:52.160 --> 33:54.160]  То есть, если менеджер
[33:54.160 --> 33:56.160]  идиот, то вы решаете задачу
[33:56.160 --> 33:58.160]  в лоб.
[33:58.160 --> 34:00.160]  Вы приходите к нему и говорите,
[34:00.160 --> 34:02.160]  без проблем, говно вопросно, пожалуйста,
[34:02.160 --> 34:04.160]  мне нужно 100 серверов
[34:04.160 --> 34:06.160]  под вортеры.
[34:06.160 --> 34:08.160]  Когда вы так скажете, менеджер говорит,
[34:08.160 --> 34:10.160]  ну слушай, ладно,
[34:10.160 --> 34:12.160]  давай так, давай всем
[34:12.160 --> 34:14.160]  гарантированно, Цукербергов можно
[34:14.160 --> 34:16.160]  помурыжить.
[34:16.160 --> 34:18.160]  Да. Как будете делать?
[34:26.160 --> 34:28.160]  А как ты это сделаешь?
[34:30.160 --> 34:32.160]  А? Мы вот здесь,
[34:32.160 --> 34:34.160]  вот на вот этом этапе мы сняем здесь
[34:34.160 --> 34:36.160]  бакс, херак и миллион друзей пришел.
[34:36.160 --> 34:38.160]  Да.
[34:50.160 --> 34:52.160]  Например, да.
[34:54.160 --> 34:56.160]  Да. Либо как-то
[34:56.160 --> 34:58.160]  играться с очереди приоритетов,
[34:58.160 --> 35:00.160]  либо отдельная очередь для Цукерберга.
[35:06.160 --> 35:08.160]  Нет.
[35:08.160 --> 35:10.160]  Не надо, я кажется, Цукерберга.
[35:10.160 --> 35:12.160]  Вот просто очередь для больших ребят.
[35:12.160 --> 35:14.160]  Очередь для нормальных.
[35:14.160 --> 35:16.160]  Для этих.
[35:16.160 --> 35:18.160]  Ну, для популярных
[35:18.160 --> 35:20.160]  и для неинтересных
[35:20.160 --> 35:22.160]  скучных подписчиков.
[35:22.160 --> 35:24.160]  А?
[35:24.160 --> 35:26.160]  Две очереди
[35:26.160 --> 35:28.160]  и у тебя вот на эту работает, например.
[35:28.160 --> 35:30.160]  Я не знаю. 70%.
[35:30.160 --> 35:32.160]  А на эту
[35:32.160 --> 35:34.160]  30.
[35:36.160 --> 35:38.160]  Не, вот эти 70
[35:38.160 --> 35:40.160]  работают только на эту.
[35:40.160 --> 35:42.160]  И берут задачи только отсюда.
[35:42.160 --> 35:44.160]  А вот эти 30 работают только с вот этой.
[35:44.160 --> 35:46.160]  30% воркеров, да.
[35:48.160 --> 35:50.160]  Не, не, не. Не со всеми.
[35:50.160 --> 35:52.160]  Ты правда.
[35:52.160 --> 35:54.160]  Вот так.
[35:56.160 --> 35:58.160]  Может.
[35:58.160 --> 36:00.160]  Может. Давайте сделаем
[36:00.160 --> 36:02.160]  их поумнее.
[36:02.160 --> 36:04.160]  Что если вдруг его очередь
[36:04.160 --> 36:06.160]  не уста, то помочь соседу.
[36:08.160 --> 36:10.160]  Цукербергу.
[36:10.160 --> 36:12.160]  Или наоборот.
[36:12.160 --> 36:14.160]  Если Цукерберг улетел
[36:14.160 --> 36:16.160]  на Марс и не постит ничего,
[36:16.160 --> 36:18.160]  связь нет. Берем, работаем с обычным.
[36:22.160 --> 36:24.160]  Простая задача, да, письма
[36:24.160 --> 36:26.160]  разослать.
[36:26.160 --> 36:28.160]  Но, в принципе, если вы
[36:28.160 --> 36:30.160]  логику поймете, оно вот
[36:30.160 --> 36:32.160]  все вот из таких вот, есть хайлот,
[36:32.160 --> 36:34.160]  он из таких кусочек создает.
[36:34.160 --> 36:36.160]  Очередь, воркер, опишечка,
[36:36.160 --> 36:38.160]  очередь, воркер, опишечка.
[36:38.160 --> 36:40.160]  Много воркеров, много
[36:40.160 --> 36:42.160]  серверов под API и так далее.
[36:44.160 --> 36:46.160]  Что вы будете делать, если, например,
[36:48.160 --> 36:50.160]  запросов к сервису рассылщиков
[36:50.160 --> 36:52.160]  очень много. И вот этот вот
[36:52.160 --> 36:54.160]  веб-сервер, который
[36:54.160 --> 36:56.160]  у нас задачки принимает, который API
[36:56.160 --> 36:58.160]  во внешний мир выставляет, он не справляется.
[36:58.160 --> 37:00.160]  Давайте сюда еще.
[37:00.160 --> 37:02.160]  Масштабируйте.
[37:02.160 --> 37:04.160]  То есть, как бы, принцип один и тот же.
[37:06.160 --> 37:08.160]  Масштаби...
[37:08.160 --> 37:10.160]  Газотонтальное масштабирование.
[37:16.160 --> 37:18.160]  Так.
[37:22.160 --> 37:24.160]  Едем дальше.
[37:24.160 --> 37:26.160]  Давайте зажимаем.
[37:26.160 --> 37:28.160]  Давайте зайдем
[37:28.160 --> 37:30.160]  в область баз данных, немножечко
[37:30.160 --> 37:32.160]  в ней...
[37:32.160 --> 37:34.160]  помученец.
[37:34.160 --> 37:36.160]  Итак, базы данных.
[37:36.160 --> 37:38.160]  Все, что вот мы сейчас
[37:38.160 --> 37:40.160]  с вами проходили, это было...
[37:42.160 --> 37:44.160]  Как сказать?
[37:46.160 --> 37:48.160]  Это было масштабирование
[37:50.160 --> 37:52.160]  бэкэн.
[37:52.160 --> 37:54.160]  Масштабирование
[37:54.160 --> 37:56.160]  бэкэнда. Да, еще что-то.
[37:56.160 --> 37:58.160]  У нас есть с вами некая
[37:58.160 --> 38:00.160]  общая для всех часть,
[38:00.160 --> 38:02.160]  которая называется
[38:02.160 --> 38:04.160]  хранилища данных.
[38:04.160 --> 38:06.160]  И вот с ним мы сейчас с вами будем
[38:06.160 --> 38:08.160]  участвовать. Обычно в роли хранилища данных
[38:08.160 --> 38:10.160]  выступает какая-нибудь база.
[38:10.160 --> 38:12.160]  Не знаю, MSQL, PostgreSQL,
[38:12.160 --> 38:14.160]  Oracle, что-нибудь еще и так далее.
[38:14.160 --> 38:16.160]  Понятно, MSQL
[38:16.160 --> 38:18.160]  проект, не суть важна.
[38:18.160 --> 38:20.160]  И те бэкэнды ходят
[38:20.160 --> 38:22.160]  к нему.
[38:24.160 --> 38:26.160]  Нам нужно с вами
[38:26.160 --> 38:28.160]  понять...
[38:28.160 --> 38:30.160]  Все бэкэнды ходят к нему.
[38:30.160 --> 38:32.160]  И если бэкэнды мы с вами разобрались, как масштабировать,
[38:32.160 --> 38:34.160]  нужно просто стремиться к тому, чтобы
[38:34.160 --> 38:36.160]  было как можно меньше
[38:36.160 --> 38:38.160]  общих частей.
[38:38.160 --> 38:40.160]  Нужно стремиться к тому, чтобы они не хранили
[38:40.160 --> 38:42.160]  состояние, они не менялись.
[38:44.160 --> 38:46.160]  Чтобы запрос-то было не важно, на какой из бэкэндов
[38:46.160 --> 38:48.160]  прийти. Не было никакой там, не знаю,
[38:48.160 --> 38:50.160]  внутренней истории.
[38:50.160 --> 38:52.160]  Как быть с базами данных?
[38:52.160 --> 38:54.160]  Они будут писать в одну базу данных.
[38:54.160 --> 38:56.160]  И она в конце концов сдохнет.
[38:56.160 --> 38:58.160]  Она не перестанет справляться.
[38:58.160 --> 39:00.160]  Нам ее тоже нужно масштабировать.
[39:00.160 --> 39:02.160]  То есть тоже
[39:02.160 --> 39:04.160]  научиться базу данных
[39:04.160 --> 39:06.160]  держать на нескольких серверах.
[39:08.160 --> 39:10.160]  Распределенная база данных.
[39:10.160 --> 39:12.160]  Как они устроены?
[39:12.160 --> 39:14.160]  Понеслась, сейчас будем
[39:14.160 --> 39:16.160]  все это изучать.
[39:16.160 --> 39:18.160]  Сначала место слов.
[39:18.160 --> 39:20.160]  Ключевые.
[39:22.160 --> 39:24.160]  И
[39:26.160 --> 39:28.160]  сейчас скажу
[39:28.160 --> 39:30.160]  еще одно слово.
[39:32.160 --> 39:34.160]  Еще одно слово,
[39:34.160 --> 39:36.160]  которое называется
[39:38.160 --> 39:40.160]  А что вы имеете в виду под бэсь?
[39:48.160 --> 39:50.160]  Да. Нет.
[39:52.160 --> 39:54.160]  Нет.
[39:56.160 --> 39:58.160]  Итак.
[39:58.160 --> 40:00.160]  Что это?
[40:04.160 --> 40:06.160]  Про транзакционность.
[40:06.160 --> 40:08.160]  Да, все верно.
[40:08.160 --> 40:10.160]  Ашечка, про что?
[40:10.160 --> 40:12.160]  Атомарность.
[40:12.160 --> 40:14.160]  Что это значит?
[40:14.160 --> 40:16.160]  Трантакция полностью
[40:16.160 --> 40:18.160]  либо выполнена, либо не выполнена.
[40:18.160 --> 40:20.160]  Трантакция состоит из нескольких кусочков.
[40:22.160 --> 40:24.160]  Из нескольких запросов.
[40:24.160 --> 40:26.160]  Она либо полностью выполняется, либо полностью не выполняется.
[40:26.160 --> 40:28.160]  И
[40:28.160 --> 40:30.160]  Консистенция. Что значит?
[40:30.160 --> 40:32.160]  Не противоречивое состояние.
[40:32.160 --> 40:34.160]  Да. Если транзакция выполнена,
[40:34.160 --> 40:36.160]  она выполнена окончательно.
[40:36.160 --> 40:38.160]  И так далее.
[40:38.160 --> 40:40.160]  То есть база данных
[40:40.160 --> 40:42.160]  согласована как до, так и после транзакции.
[40:42.160 --> 40:44.160]  Ай.
[40:48.160 --> 40:50.160]  Трантакция выполняется
[40:50.160 --> 40:52.160]  может выполняться параллельно
[40:52.160 --> 40:54.160]  в своем кусочке.
[40:54.160 --> 40:56.160]  Как реализуется
[40:56.160 --> 40:58.160]  Ай.
[40:58.160 --> 41:00.160]  Она как раз реализуется с помощью вот этой вот фигни.
[41:00.160 --> 41:02.160]  Эта штука
[41:02.160 --> 41:04.160]  расшифровывается как
[41:04.160 --> 41:06.160]  Multiversion Concurrency Control.
[41:06.160 --> 41:08.160]  И обеспечивает
[41:08.160 --> 41:10.160]  вам то, что у вас каждая
[41:10.160 --> 41:12.160]  транзакция
[41:12.160 --> 41:14.160]  выполняется в своей копии
[41:14.160 --> 41:16.160]  базы данных.
[41:16.160 --> 41:18.160]  Реально это конечно же не копия.
[41:18.160 --> 41:20.160]  Но там сложнее конечно история,
[41:20.160 --> 41:22.160]  не просто снапшоты.
[41:22.160 --> 41:24.160]  А-а-а-а-а, вот
[41:24.160 --> 41:26.160]  отсюда следует одна из проблем.
[41:26.160 --> 41:28.160]  Если вы вовремя
[41:28.160 --> 41:30.160]  транзакцию не закрыли,
[41:30.160 --> 41:32.160]  не закрываете,
[41:32.160 --> 41:34.160]  то через какое-то время у вас все будет очень грустно.
[41:34.160 --> 41:36.160]  Самая ошибка
[41:36.160 --> 41:38.160]  новичка.
[41:38.160 --> 41:40.160]  Если ты не закрыл вовремя транзакцию,
[41:40.160 --> 41:42.160]  соответственно вот база данных,
[41:42.160 --> 41:44.160]  которая поддерживает транзакционность,
[41:44.160 --> 41:46.160]  продолжает следить за тем,
[41:46.160 --> 41:51.420]  была своя изолированная копия. Другие нормальные ребята, которые умеют программировать, транзакцию
[41:51.420 --> 41:57.300]  закрывают, база данных изменяется. Твоя версия конкретная, не закрытая, транзакция постоянно пухнет,
[41:57.300 --> 42:00.700]  пухнет, пухнет, пухнет, пухнет. База данных тратит все больше, больше, больше ресурсов.
[42:00.700 --> 42:09.740]  Не факт, может быть это там постоянно ты на горшечке написал такой весь модный и транзакцию не закрывает.
[42:09.740 --> 42:25.240]  Бесит вечно. Тайм-аут по транзакции, может быть, да, хорошо, если есть таких гавриков с неверной
[42:25.240 --> 42:31.960]  работой транзакций много, то все вообще грустно. Вообще транзакции довольно стрёмные. Первое,
[42:31.960 --> 42:39.880]  что смотрят ребята, которые по базам данных работают, консультируют, это транзакции,
[42:39.880 --> 42:43.840]  нет ли открытой транзакции, не висит ли не закрытой транзакции, все ли там нормально,
[42:43.840 --> 42:57.080]  это самое ключевое. Так, Лады, Д, что означает? Да, если мы ответили, слово пацана, если ответили,
[42:57.080 --> 43:10.280]  что записали, значит записали. Так, капте аремы. Я понимаю, что выберете два из трёх. Рашутовый.
[43:10.280 --> 43:20.400]  Консистентность, наступность. Разберёмся, что означает, давайте разберёмся с вот
[43:20.400 --> 43:39.520]  этого волшебной буквой QP. Partition Tolerance, то есть, грубо говоря, если вот эта распределённая
[43:39.520 --> 43:46.240]  система хранения состоит из нескольких узлов, то она устойчива к тому, что какая-то из вот этих
[43:46.240 --> 43:56.200]  связей пропадёт. Или какой-то пакет не дойдёт. Теперь внимание, вопрос. Вот это, в принципе, реализуемо.
[43:56.200 --> 44:16.680]  Не, у тебя вот здесь два компьютера объединённых сетью. Unix, компьютеры, надёжная сеть. У тебя есть
[44:16.680 --> 44:35.920]  гарантия, что пакет будет пелен. Нет. Короче, выдержать, то есть, как бы не выдерживать пешечку, то есть,
[44:35.920 --> 44:44.240]  как бы выбросить её из разговора. Вы всегда должны о ней помнить. Любая система, которая будет
[44:44.240 --> 44:52.960]  разрабатываться, и буквка P будет по умолчанию. И выбор у вас, на самом деле, либо вот этот, либо вот этот.
[44:52.960 --> 45:00.960]  P будет, потому что вы в интернете. Если вы хотите убрать эту P, то у вас что? Вот эта штука вырождается
[45:00.960 --> 45:13.280]  в один сервис. Вся распределённость пропадает. То есть, у вас либо, ну, потому что если у тебя
[45:13.280 --> 45:21.080]  частей нет, то и, собственно говоря, выдерживать и думать над тем, чтобы у тебя эта штука работала.
[45:21.080 --> 45:35.280]  Но это у тебя вся база отвалилась. То есть, у тебя нету коммуникации внутри твоей системы.
[45:35.280 --> 45:49.960]  Приведите пример с ТА. Ну, консистентность и датук.
[45:49.960 --> 46:08.240]  Подгрес на одной машине. Ну, на одной машине, да. Нет, на все три. Все три ты не выполнишь. Если ты на одной машине,
[46:08.240 --> 46:15.400]  то ты автобантом не выполняешь. У нас получается что? А, да. Если у тебя кладётся машина, то всё.
[46:15.400 --> 46:25.840]  Ты не можешь гарантировать ашечку. Нет, если кладётся машина, и у тебя сервис не отвечает во мне.
[46:25.840 --> 46:33.120]  P — это внутренняя история. То есть, как бы, система продолжает работать, чтобы у вас внутри не происходило.
[46:33.120 --> 46:38.880]  Если у вас один блок вылетел, там, не знаю, канал вылетел между ними, связь разрубилась и так далее.
[46:38.880 --> 46:45.360]  Чисто внешне это всё равно выглядит надёжно. Вот это, собственно говоря, за это отвечает ашечка.
[46:45.360 --> 46:53.880]  Если ты на одной машине, то ты ашечку не выдержишь. Короче, это, на самом деле, ключевая история картеарима,
[46:53.880 --> 47:04.560]  потому что она нас будет ограничивать. Ну, например, мы пишем, вот, допустим, у нас есть один сервер,
[47:05.560 --> 47:14.560]  мы на него больше не справляемся. Мы ставим второй. Как работает картеарима?
[47:14.560 --> 47:27.560]  Газ данных — первая, газ данных — вторая. Теперь, если я пишу, вот, раньше у меня было всё вот так,
[47:27.560 --> 47:38.560]  а теперь мне нужно записать два места. Вариант, как конкретно нас ограничивает картеарима, вот, как она конкретно просто тупо работает.
[47:38.560 --> 47:46.560]  Смотрите, если я беру, вот, мне пришёл сюда запрос, я после этого пишу, я сразу отвечаю пользователю, окей,
[47:46.560 --> 47:55.560]  вот это первый шаг, вот это второй шаг, потом я иду сюда, третий шаг и до записываю данные.
[47:56.560 --> 48:07.560]  Если я так сделаю, что у меня нарушено? Консистентность. То есть, вот в этот момент, в момент два с половиной,
[48:07.560 --> 48:16.560]  информация в этой базе данных и в этой базе данных разная. Консистентность не выполняется. Окей, тогда я сделаю не так.
[48:16.560 --> 48:24.560]  Я сделаю сначала вот так, а потом отвечу пользователю о том, что я всё записал. А в этом случае что у меня не работает?
[48:26.560 --> 48:37.560]  Атомарность. То есть пользователь ждёт, пока я обработаю и разложу информацию, а если там их несколько,
[48:40.560 --> 48:46.560]  и т.д. Вот, собственно говоря, вот она, вот картеарима очень тупая и простая, вот она примерно так работает.
[48:46.560 --> 48:52.560]  Вы всегда будете выбирать, либо вы заставляете пользователя ждать, но тогда всё гарантировано,
[48:52.560 --> 49:01.560]  либо вы придумываете какие-то ощущения, пользователь не ждёт, но тогда и информация не консистентна.
[49:01.560 --> 49:06.560]  То есть некоторое время база данных в несогласованном состоянии. Где-то одна информация, где-то другая.
[49:06.560 --> 49:14.560]  И отсюда пошли все вот эти вот механизмы, как они называются у нас, да, поезд консенсусов и т.д.
[49:14.560 --> 49:19.560]  Что происходит, когда вот здесь одна информация, здесь другая, связь разорвалась, потом восстановилась,
[49:19.560 --> 49:24.560]  здесь один слепок баз данных, здесь другой, как найти истину и т.д.
[49:29.560 --> 49:42.560]  Ну а если здесь не два, а 2 и 1, 2 и 2, 2 и 3, доступность означает, что ты получаешь ответ в течение код определённого времени.
[49:42.560 --> 49:45.560]  Ну да, то есть это конечное время, это не бесконечное время.
[49:45.560 --> 49:52.560]  В этом как раз вся фишка и в этом как раз критика кафти аремы, потому что она на самом деле немножко так умалчивает эту историю.
[49:52.560 --> 49:58.560]  На самом деле для нас доступность имеет смысл в жестко ограниченном временном промежутке.
[49:58.560 --> 50:01.560]  Не знаю, 5 миллисекунд, нет ответов, ну всё.
[50:01.560 --> 50:04.560]  Итак, соответственно понеслась.
[50:04.560 --> 50:07.560]  Теперь способы масштабирования баз данных.
[50:07.560 --> 50:13.560]  Самый простой вытекает из вот этой вот схемки и из нашей кафти аремы.
[50:13.560 --> 50:15.560]  Называется репликация.
[50:15.560 --> 50:21.560]  Его суть, у нас есть некая мастер-база данных, есть плейбы.
[50:24.560 --> 50:29.560]  Да, это уже не политкорректно, но мы сами в России, поэтому будем так говорить.
[50:29.560 --> 50:32.560]  Была буча, я не знаю, чем она закончилась кстати.
[50:32.560 --> 50:35.560]  Переминовали, не переминовали, что словами.
[50:35.560 --> 50:36.560]  А?
[50:36.560 --> 50:38.560]  Во что?
[50:38.560 --> 50:46.400]  уже не политкорректно, но мы с вами в России, поэтому будем так говорить. Была
[50:46.400 --> 50:50.320]  буча, я не знаю, чем она закончилась стать, переименовали, не переименовали, что
[50:50.320 --> 51:18.360]  словами. Мы запись ведет на русском языке, никто из нас не послушает. Общая логика
[51:18.360 --> 51:31.640]  заключается в том, что мы пишем сюда, отчитаем. Что это нам дают? И где это работает? Это работает
[51:31.640 --> 51:36.880]  в проекте, где чтений из базы данных гораздо больше, чем записей, то бишь практически во всех
[51:36.880 --> 51:44.360]  интернет-проекте. В любом интернет-проекте записей меньше, чем чтений, причем иногда в
[51:44.360 --> 51:50.480]  разы. Поэтому просто-напросто построив вот такую структуру и сделав там, не знаю, несколько слоев,
[51:50.480 --> 52:06.360]  вы себе в несколько раз увеличиваете производительность системы. Вот здесь есть,
[52:06.360 --> 52:13.480]  здесь уже варианты зависит от того, как ты настроишь эту репликацию. Есть такая настройка
[52:13.480 --> 52:23.800]  ждать, пока не будет получен ответ с каждого из слоев, но обычно делают не так. Обычно мирится
[52:23.800 --> 52:31.480]  с тем, что некоторое время эта информация будет до слоев докатываться. Есть специальный механизм
[52:31.480 --> 52:41.200]  у всех баз данных, он называется врайт и хед лог, через который эта репликация происходит. Не суть.
[52:41.320 --> 52:51.120]  Что нам делать? Вот мы настроили эту репликацию. Пользователь написал пост, делает refresh,
[52:51.120 --> 52:59.920]  а поста нет. Не докатилась информация, он читает отсюда, опишет сюда. Что делать?
[52:59.920 --> 53:02.520]  Какие варианты предложить?
[53:02.520 --> 53:14.040]  Нет. Это из прошлого века. Сейчас так нельзя.
[53:14.040 --> 53:25.240]  Не можем мы ждать ответа, все-таки слишком долго. Мы должны пользователю, первое правило,
[53:25.240 --> 53:28.560]  мы пользователи должны сразу дать ответ. Ждать не можно.
[53:28.560 --> 53:41.960]  Первое. Толстый клиент. Решить проблему с задержки толстым клиентом. То есть у вас,
[53:41.960 --> 53:52.520]  опять же, если мы возьмем Facebook, он так делает. Попробуйте отправить сообщение. Ну, во всяком
[53:52.520 --> 53:57.600]  случае, у меня такого было не раз. Отправляешь сообщение человеку, оно пишет, что вроде как
[53:57.600 --> 54:03.400]  ушло. И только через некоторое время Facebook через минуту пишет, что-то не получилось,
[54:03.400 --> 54:14.600]  красненький подсвечит. Телеграмм так же делает. Выкачивать по умнее. Эти ребятки делают, во всяком
[54:14.600 --> 54:18.000]  случае раньше делали это, я сейчас не знаю. Но короче, суть заключается в следующем. Что он на
[54:18.000 --> 54:25.800]  самом деле делает вид, что он отправил и пытается отправлять. Ждет какого-то там ответа, еще что-нибудь.
[54:25.800 --> 54:30.560]  То есть, короче, толстый клиент может просто после этого сразу показать. Это первый вариант,
[54:30.560 --> 54:48.480]  второй вариант. Что еще можно сделать? Часто делает. Ну, это толстый клиент, да. Еще варианты?
[54:48.480 --> 55:01.080]  Ну, давай-давай-давай. Ну, и выбирай, да. То есть, в одном-одна информация, в другом-другая.
[55:01.080 --> 55:09.120]  Ну, не-не-не, это еще хуже. Мы на клиент перекладываем задачу как-то разобраться в том бардаке,
[55:09.120 --> 55:21.920]  который мы натворили на сервере. Почти. Часто делается такая история, что если мы изменили данные,
[55:21.920 --> 55:32.040]  мы читаем их не со слейва, а с мастер. Это редко происходит. Мастер выдержит. Если, ну, например,
[55:33.040 --> 55:42.040]  один к десяти у нас по отношению записей к чтению. Ну, будет раз в десять раз читаться с мастером.
[55:42.040 --> 55:55.240]  Короче, читаем с мастером. Нет, мастер-то обновил данные сразу в себя. Не, погоди, мы сейчас, это мы
[55:55.240 --> 56:01.680]  боремся сейчас с нагрузкой. Тем, когда это перестанет влезать на одну машинку, мы чуть попозже поговорим.
[56:01.680 --> 56:19.000]  Да? Ну, смотри, это на самом деле даже делается, знаешь, где это делается? Это делается, вот у тебя,
[56:19.000 --> 56:23.920]  вот мы сейчас с вами архитектуру рассматриваем на уровне серверов и так далее. А у тебя есть точно
[56:23.920 --> 56:29.680]  такая же архитектура на уровне приложений. У тебя там точно также несколько слоев. Одна функция вызывает
[56:29.680 --> 56:38.640]  какой-то набор других функций и так далее. Внизу у тебя лежит общение с базой данных. Иногда используют
[56:38.640 --> 57:03.440]  ОРМ-ки так называемые. ОРМ это зло. Почему ОРМ зло? Это, во-первых, ОРМ-ка это слой, который отвечает за работу с базой данных.
[57:03.440 --> 57:13.840]  Ты вызываешь функцию, ты не пишешь запрос, ты вызываешь функцию. Ну, например, отбери из такой-то таблицы по таким-то полям.
[57:13.840 --> 57:20.720]  И ОРМ-ка сама конструирует нужный запрос. То есть она от тебя скрывает всю базу данных. Ты не знаешь,
[57:20.720 --> 57:28.720]  какая она у тебя есть. То есть некий слой сработает с базой данных. Это очень удобно для тупых простых
[57:28.720 --> 57:37.280]  запросов. Подними объект, ну, например, вместо того, чтобы сделать SQL запрос в базе данных про пользователя,
[57:37.280 --> 57:47.200]  потом получить все эти данные, расшифровать каждый из полей, создать объект и все это заполнить данными из SQL-запроса.
[57:47.200 --> 57:56.560]  Ты вызываешь просто-напросто метод ОРМ-ки. Верни мне пользователя по такому-то методу. И она все делает для тебя.
[57:56.560 --> 58:03.120]  Это хорошо. Это удобно. Но минус в том, что ты не контролируешь ничего. То есть если какой-то сложный запрос,
[58:03.120 --> 58:13.120]  ОРМ его сконтролирует не в факт, что в оптимальный способ. Я к чему говорил? А, я говорил, что вот эта вот проверка
[58:13.120 --> 58:20.720]  происходит на уровне ОРМ. То есть вот идет выполнение запросов. И мы знаем, что сейчас мы пишем в базу данных.
[58:20.880 --> 58:29.680]  ОРМ-ка знает, что мы писали в базу данных. Это означает, что и чтение, если в рамках выполнения вот этой же программы
[58:29.680 --> 58:36.320]  будут еще и чтение из базы данных, то она будет читать из мастера. Вот и все. То есть приложение вообще может не знать о том,
[58:36.320 --> 58:39.280]  что мы вот этот способ используем.
[58:39.840 --> 58:51.840]  Так. Это у нас... Здесь бывают еще другие способы репликации. Бывает мастер-мастер репликации, еще что-то.
[58:51.840 --> 58:57.840]  То есть какие-то там сложные. Для нас не суть важна. Общий принцип заключается в том, что пишем в одно место, читаем из нее.
[58:57.840 --> 59:07.840]  Это касается не только баз данных, это касается любых хранищ. Видео. Точно так же. Кладем на один сервак.
[59:08.400 --> 59:18.400]  Потом раскладываем еще на десять. И поэтому какое-нибудь популярное видео будет сразу доступно с нескольких серверов.
[59:18.400 --> 59:26.400]  Для чего это нам нужно? Для того, чтобы повысить пропускную способность. Что мы будем делать?
[59:26.960 --> 59:46.960]  Она внутри баз данных? Нет. УРМ это еще твоя сейчас. Это твое приложение. УРМ формулирует SQL-запросы или любые другие запросы,
[59:47.520 --> 59:53.520]  которые идут в базу данных. И репликация, она уже вот здесь.
[59:53.520 --> 01:00:01.520]  Ну, значит, репликация вот этих. Вот эти процессы. Вот эти. Они вот здесь.
[01:00:01.520 --> 01:00:11.520]  А вот этот процесс, откуда читать? Отсюда или отсюда? Он может контролироваться вот этим.
[01:00:12.080 --> 01:00:24.080]  Так. Хорошо. Нагрузка разобрались. Что мы с вами будем делать, если мы не влезаем на одну машину?
[01:00:24.080 --> 01:00:32.080]  Мы построили такую красивую штуку. У нас один мастер, четыре слоева. Слоева на разных машинах.
[01:00:32.080 --> 01:00:36.080]  А данных стало слишком много.
[01:00:42.080 --> 01:00:50.080]  Давай, что такое шардирование? Второй ключевой механизм. Первая репликация, второе шардирование. Что это за хрень?
[01:00:50.640 --> 01:00:54.640]  Какая проблема?
[01:01:08.640 --> 01:01:14.640]  Окей. Согласен. Сейчас обсудим эту проблему.
[01:01:15.200 --> 01:01:25.200]  Итак, общая история. У нас есть кусок, который слишком большой и на одну тачку не влезает.
[01:01:25.200 --> 01:01:33.200]  Мы его берем и по какому-то принципу делим. На разные тачки.
[01:01:33.200 --> 01:01:37.200]  Какие это могут быть принципы?
[01:01:37.760 --> 01:01:45.760]  Пользователи. У нас пользователи. По какому принципу будете делить пользователей?
[01:01:46.320 --> 01:01:58.320]  Ну, подожди. Вот у тебя база данных пользователей.
[01:01:58.320 --> 01:02:04.320]  Анкета. Ты делаешь сайт-бодушечка.
[01:02:10.320 --> 01:02:14.320]  По географии. Первый вариант. Мальчики и девочки. Второй вариант.
[01:02:14.880 --> 01:02:18.880]  А не знаю. География.
[01:02:22.880 --> 01:02:26.880]  Дальше.
[01:02:26.880 --> 01:02:30.880]  Хорошо, я чего?
[01:02:31.440 --> 01:02:43.440]  Ну, что вы могли бы с этим делением?
[01:02:51.440 --> 01:02:57.440]  Хорошо. А теперь предложение.
[01:02:58.000 --> 01:03:04.000]  Согласен.
[01:03:04.000 --> 01:03:08.000]  Ключ какой-то.
[01:03:08.000 --> 01:03:12.000]  Айди пользователь.
[01:03:16.000 --> 01:03:20.000]  Рафиши. Ребят, рафиш от анкеты. Это извращение немножко.
[01:03:20.000 --> 01:03:26.000]  Как вы вычисляете это? А если вам анкета неизвестна, вам ее поднять нужно.
[01:03:26.560 --> 01:03:30.560]  Так. Лады. Гео. В чем плюс-минус?
[01:03:36.560 --> 01:03:40.560]  Да, окей. Можно разбросать по разным регионам. Полегче будет.
[01:03:40.560 --> 01:03:44.560]  В чем колоциальный черный минус, который перечеркивает все плюсы?
[01:03:44.560 --> 01:03:48.560]  У нас в Москве они резиновые.
[01:03:48.560 --> 01:03:52.560]  У вас будет неравномерное распределение.
[01:03:53.120 --> 01:03:57.120]  То есть вы замучаетесь равномерно раскидывать это все по регионам.
[01:04:01.120 --> 01:04:05.120]  Да, возможно. А вот тебе пришел пользователь.
[01:04:05.120 --> 01:04:09.120]  Как ты определишь его географическую принадлежность?
[01:04:09.120 --> 01:04:11.120]  Ну, здравия.
[01:04:11.120 --> 01:04:13.120]  Ненадежность.
[01:04:13.120 --> 01:04:15.120]  А?
[01:04:15.680 --> 01:04:17.680]  Ну...
[01:04:19.680 --> 01:04:23.680]  Короче, вы не подняв анкету, вы по гео не разделились.
[01:04:23.680 --> 01:04:25.680]  Поэтому не прокатывай.
[01:04:25.680 --> 01:04:29.680]  Но все равно сначала анкета, сначала какой-то айдишник нужен.
[01:04:29.680 --> 01:04:31.680]  Дальше. Ну, гендер совсем не прокатил.
[01:04:31.680 --> 01:04:33.680]  У нас их всего два.
[01:04:33.680 --> 01:04:37.680]  В прогрессивном западе их больше, но все равно они неравномерны.
[01:04:37.680 --> 01:04:41.680]  Так. Ключ, айдишечка. Ну, на самом деле почти одно и то же.
[01:04:41.680 --> 01:04:43.680]  Айдишка.
[01:04:44.240 --> 01:04:46.240]  Два айдишки.
[01:04:46.240 --> 01:04:48.240]  Выбираете айдишку и по какому-то принципу ее делите.
[01:04:48.240 --> 01:04:50.240]  По какому?
[01:04:50.240 --> 01:04:52.240]  А после у нас айдишка пользователя Login.
[01:05:04.240 --> 01:05:06.240]  Согласен.
[01:05:14.240 --> 01:05:16.240]  Согласен.
[01:05:16.240 --> 01:05:24.240]  Можно как хэши, можно просто сравнить с ручкой.
[01:05:24.240 --> 01:05:26.240]  Точно так же можно сравнить с ручкой.
[01:05:26.240 --> 01:05:30.240]  Не важно. В любом случае у вас есть некая функция.
[01:05:30.240 --> 01:05:32.240]  Которая ключевая, да.
[01:05:32.240 --> 01:05:36.240]  То есть некая функция кэширования.
[01:05:36.240 --> 01:05:40.240]  И вот здесь у вас этот идентификатор.
[01:05:40.800 --> 01:05:46.800]  А функция возвращает вам номер сервака, грубо говоря.
[01:05:46.800 --> 01:05:50.800]  Или IP-адрес сервака. Не важно.
[01:05:50.800 --> 01:05:54.800]  Вот это вот ключевая история.
[01:05:54.800 --> 01:05:58.800]  Вот она как-то должна быть написана.
[01:05:58.800 --> 01:06:00.800]  Вот эта штука.
[01:06:00.800 --> 01:06:02.800]  И здесь есть две вещи.
[01:06:02.800 --> 01:06:04.800]  Как она может быть написана?
[01:06:04.800 --> 01:06:06.800]  Это может быть функция от хэша.
[01:06:06.800 --> 01:06:08.800]  А как еще можно?
[01:06:09.360 --> 01:06:11.360]  А можно просто тупо таблицы.
[01:06:13.360 --> 01:06:15.360]  Огромная таблица.
[01:06:15.360 --> 01:06:19.360]  Соответствие ID пользователя.
[01:06:23.360 --> 01:06:25.360]  Какой-то огромный KBI.
[01:06:29.360 --> 01:06:33.360]  Называется центральный диспетчер.
[01:06:33.360 --> 01:06:37.360]  То есть так у нас какая-то функция.
[01:06:37.920 --> 01:06:39.920]  А так центральный диспетчер.
[01:06:39.920 --> 01:06:41.920]  В чем плюс, в чем минус?
[01:06:51.920 --> 01:06:55.920]  Так. К следующему разу две задачи.
[01:06:55.920 --> 01:06:57.920]  Первая.
[01:07:01.920 --> 01:07:03.920]  Вот те, кто здесь сидят.
[01:07:03.920 --> 01:07:05.920]  И вы вдвоем.
[01:07:06.480 --> 01:07:08.480]  Вы доказываете, что центральный диспетчер это хорошо.
[01:07:10.480 --> 01:07:12.480]  А все остальные доказывают, что вот такая вот функция это хорошо.
[01:07:12.480 --> 01:07:14.480]  А центральный диспетчер как-то.
[01:07:14.480 --> 01:07:16.480]  Правильно? Ответа нет.
[01:07:22.480 --> 01:07:24.480]  Это первая история.
[01:07:24.480 --> 01:07:26.480]  А вторая история. Хорошо.
[01:07:26.480 --> 01:07:28.480]  Мы поделили.
[01:07:28.480 --> 01:07:30.480]  Первые 5 букв на один сервак.
[01:07:30.480 --> 01:07:32.480]  Вторые 5 букв на другой сервак.
[01:07:32.480 --> 01:07:34.480]  Третий 5 букв на третий сервак.
[01:07:35.040 --> 01:07:39.040]  А потом первые 5 букв перестали влезать на первый сервак.
[01:07:41.040 --> 01:07:43.040]  И что сделали?
[01:07:45.040 --> 01:07:47.040]  У нас функция ломает.
[01:07:49.040 --> 01:07:51.040]  Она уже не такая красивая.
[01:07:51.040 --> 01:07:53.040]  То есть там уже получились исключения.
[01:07:57.040 --> 01:07:59.040]  Если бы мы брали кэш, то было бы еще хуже.
[01:07:59.040 --> 01:08:01.040]  Потому что при добавлении еще одного сервака,
[01:08:01.040 --> 01:08:03.040]  у тебя на него часть перельется сюда,
[01:08:03.600 --> 01:08:05.600]  часть перельется сюда, часть сюда, часть сюда, часть сюда,
[01:08:05.600 --> 01:08:07.600]  и все сервера будут переколбошены.
[01:08:09.600 --> 01:08:11.600]  Как вы сейчас этой базы берете?
[01:08:17.600 --> 01:08:19.600]  Ты с ума сошел?
[01:08:19.600 --> 01:08:21.600]  Ты отсюда сюда переложил, отсюда сюда переложил.
[01:08:21.600 --> 01:08:23.600]  У тебя пока все кем-то в граналии себе придет.
[01:08:23.600 --> 01:08:25.600]  А что делать пользователям?
[01:08:25.600 --> 01:08:27.600]  Они анкеты смотрят.
[01:08:27.600 --> 01:08:29.600]  Они даже, извините, у нас сервак выкупили.
[01:08:29.600 --> 01:08:31.600]  Мы перекладываем, понимаете, перед нашими.
[01:08:33.600 --> 01:08:35.600]  Короче, как вообще, в принципе,
[01:08:35.600 --> 01:08:37.600]  с этой больдой вторая задача для всех
[01:08:37.600 --> 01:08:39.600]  подумать, как вот этим
[01:08:39.600 --> 01:08:41.600]  мерить, что делать,
[01:08:41.600 --> 01:08:43.600]  когда у нас новый сервер добавляется
[01:08:43.600 --> 01:08:45.600]  в нашу
[01:08:45.600 --> 01:08:47.600]  шардируемую идеальную
[01:08:47.600 --> 01:08:49.600]  историю.
[01:08:51.600 --> 01:08:53.600]  Можно сказать, что
[01:08:53.600 --> 01:08:55.600]  некоторые люди, которые сидят в арте,
[01:08:55.600 --> 01:08:57.600]  будут относительно интересны к другому серверу,
[01:08:57.600 --> 01:08:59.600]  когда это не будут делать тогда.
[01:08:59.600 --> 01:09:01.600]  Это, видимо, в разном смысле,
[01:09:02.160 --> 01:09:04.160]  когда данные смотрят.
[01:09:04.160 --> 01:09:06.160]  Нет.
[01:09:06.160 --> 01:09:08.160]  То есть, вы замечаете, что это надо
[01:09:08.160 --> 01:09:10.160]  перенести, и он вытягивает.
[01:09:10.160 --> 01:09:12.160]  Хорошо.
[01:09:12.160 --> 01:09:14.160]  А по запросу,
[01:09:14.160 --> 01:09:16.160]  то есть, у тебя, тебе нужно
[01:09:16.160 --> 01:09:18.160]  перенести блок данных.
[01:09:18.160 --> 01:09:20.160]  Пользователь приходит
[01:09:20.160 --> 01:09:22.160]  из этого диапазона.
[01:09:22.160 --> 01:09:24.160]  Как он узнает, идти на новое место или на старое?
[01:09:28.160 --> 01:09:30.160]  Ну, ребят.
[01:09:30.160 --> 01:09:32.160]  У вас есть упрощенная схема?
[01:09:32.160 --> 01:09:34.160]  Предлагаю.
[01:09:34.160 --> 01:09:36.160]  Если
[01:09:36.160 --> 01:09:38.160]  у тебя
[01:09:38.160 --> 01:09:40.160]  задача,
[01:09:40.160 --> 01:09:42.160]  есть вот задача
[01:09:44.160 --> 01:09:46.160]  Это у тебя будет
[01:09:46.160 --> 01:09:48.160]  работать вот здесь.
[01:09:48.160 --> 01:09:50.160]  Это
[01:09:50.160 --> 01:09:52.160]  центральный диспетчер.
[01:09:52.160 --> 01:09:54.160]  А вот функции, как это будет работать?
[01:09:54.160 --> 01:09:56.160]  У тебя функция, она не хранит вот
[01:09:56.160 --> 01:09:58.160]  это соответственно. Я просто пользователь
[01:09:58.160 --> 01:10:00.160]  Выдаешь сервис?
[01:10:00.160 --> 01:10:02.160]  Остаток отделения на 10.
[01:10:04.160 --> 01:10:06.160]  А, ну да.
[01:10:06.160 --> 01:10:08.160]  А она стокнет.
[01:10:08.160 --> 01:10:10.160]  Вот помирает у тебя эта машинка, которая с этой штукой работает.
[01:10:10.160 --> 01:10:12.160]  А.
[01:10:12.160 --> 01:10:14.160]  А.
[01:10:26.160 --> 01:10:28.160]  Ну так, тебе идея.
[01:10:36.160 --> 01:10:38.160]  Ну, подожди.
[01:10:38.160 --> 01:10:40.160]  Ну, подожди.
[01:10:40.160 --> 01:10:42.160]  На тебя вернет два ответа, что ли,
[01:10:42.160 --> 01:10:44.160]  для какого-то пользования?
[01:10:56.160 --> 01:10:58.160]  Мы еще не переложили?
[01:10:58.160 --> 01:11:00.160]  Ну, погоди. У нас там терабайки.
[01:11:00.160 --> 01:11:02.160]  Нам перекладывать сутки.
[01:11:02.160 --> 01:11:04.160]  Разбежал такой, молодец.
[01:11:04.160 --> 01:11:06.160]  Два на три поменял, все заработал. Нифига.
[01:11:06.160 --> 01:11:08.160]  Они перекладывают сутки,
[01:11:08.160 --> 01:11:10.160]  а пользователи, скотины,
[01:11:10.160 --> 01:11:12.160]  в этот момент что-то пишут.
[01:11:12.160 --> 01:11:14.160]  И ты не можешь
[01:11:14.160 --> 01:11:16.160]  им сказать, ребята, извините,
[01:11:16.160 --> 01:11:18.160]  новый сервис.
[01:11:24.160 --> 01:11:26.160]  А вот те ребята, которые
[01:11:26.160 --> 01:11:28.160]  в течение этих суток
[01:11:28.160 --> 01:11:30.160]  писали,
[01:11:30.160 --> 01:11:32.160]  они пишут что туда и туда, да?
[01:11:32.160 --> 01:11:34.160]  А мы потом в старом перезапишем?
[01:11:36.160 --> 01:11:38.160]  Короче,
[01:11:38.160 --> 01:11:40.160]  давайте как-то по страннее,
[01:11:40.160 --> 01:11:42.160]  ребята, слишком много вопросов
[01:11:42.160 --> 01:11:44.160]  возникает в вашем одежде.
[01:11:46.160 --> 01:11:48.160]  Мы пишем и туда и туда, да?
[01:11:48.160 --> 01:11:50.160]  Или пишем только на новый?
[01:11:54.160 --> 01:11:56.160]  Хорошо,
[01:11:56.160 --> 01:11:58.160]  эти данные уже перенеслись.
[01:11:58.160 --> 01:12:00.160]  Но без вот этой таблицы
[01:12:00.160 --> 01:12:02.160]  ваша схема не работает.
[01:12:02.160 --> 01:12:04.160]  Либо вот такая таблица,
[01:12:04.160 --> 01:12:06.160]  либо ходить в два раза при миграции.
[01:12:06.160 --> 01:12:08.160]  В два места, так?
[01:12:10.160 --> 01:12:12.160]  Я не хочу ходить в два места
[01:12:12.160 --> 01:12:14.160]  на каждый запрос.
[01:12:22.160 --> 01:12:24.160]  Все, давайте.
[01:12:24.160 --> 01:12:26.160]  До следующего раза.
[01:12:26.160 --> 01:12:28.160]  У нас еще майские не начнутся в следующий раз?
[01:12:28.160 --> 01:12:30.160]  Да.
