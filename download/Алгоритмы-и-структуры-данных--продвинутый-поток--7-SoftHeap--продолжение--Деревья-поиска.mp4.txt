[00:00.000 --> 00:12.240]  итак мы обсуждаем мистическую мягкую кучу ну в прошлый раз она выяснила что она не такая уж и
[00:12.240 --> 00:21.200]  мистическая данная надеюсь она станет сегодня еще менее мистической ну не но она очень жесткая
[00:21.200 --> 00:26.880]  она никогда и не была в общем-то нет она очень вот она очень добрая да она же даже и как раз
[00:26.880 --> 00:31.920]  можно назвать жесткой структуру данных которые даже не требует которая даже не требует чтобы там
[00:31.920 --> 00:36.680]  ответ который выводит был правильный ну как можно такую структуру данных называть жесткой
[00:36.680 --> 00:44.160]  реально вот то есть ну давайте вспомним как бы это ашо но то что мы вообще хотим то есть мы хотим
[00:44.160 --> 00:54.840]  мистический черный ящик который ведет себя как абсолютно но как то есть как некая куча ну то
[00:54.840 --> 01:05.400]  есть обладает операциями там ставить элемент там что там будет здорово там получать минимум
[01:05.400 --> 01:10.120]  достать минимум
[01:10.120 --> 01:19.320]  вот а ну слить две кучи естественно
[01:19.320 --> 01:35.440]  так все или что-то у нас еще было а мы хотели удалять а ну в принципе не глобально можно удалять
[01:35.440 --> 01:42.200]  так сказать удалять по итератору ну да как мы помним как да как мы сейчас помним удалять это
[01:42.200 --> 01:53.880]  вообще это вообще бесплатно практически так ну давайте смотреть что там оно вот и мечта у
[01:53.880 --> 02:03.400]  нас была какая мечта у нас была в том что мы заведем мистический параметр epsilon там от нуля
[02:03.400 --> 02:10.720]  до одной второй где-то вот и получалось что insert вставка у нас будет работать за логарифом
[02:10.720 --> 02:26.640]  один делить на epsilon а все остальное за единицу вот такое вот мы себе неожиданно заявили так вот
[02:26.640 --> 02:33.840]  но правда вытекает ощущение что чем чем больше epsilon тем как бы меньше insert более того если
[02:33.840 --> 02:42.160]  epsilon 1 2 или 1 третья то это выглядит вообще как тоже вот единицы вот но казалось бы да у
[02:42.160 --> 02:47.320]  нас уже было ощущение что куча в которой все операции делаются за вот единицы невозможно в
[02:47.320 --> 02:54.880]  принципе вот но собственно да так и есть потому что до нас никто не сказал что экстракт мин будет
[02:54.880 --> 03:03.520]  доставать именно минимум но логично вот то есть что у нас вместо этого будет сделаться но напомним
[03:03.520 --> 03:10.360]  вариант то есть напомню что мы считаем что вот у нас есть каждый элемент x и у каждого элемента
[03:10.360 --> 03:19.120]  есть псевдоним вот даже нет мы даже по-другому называем вот есть ключик вот элементы называются
[03:19.120 --> 03:28.920]  обычно ключами а есть так называемый ck вот так вот как мы помним у нас идея в том что каждому
[03:28.920 --> 03:35.040]  ключу что внутри кучи у каждого ключа есть псевдоним это какой-то элемент который не меньше
[03:35.040 --> 03:44.680]  ключа смол если повезет он будет совпадать с ключом но если нет то нет и идея будет в том что
[03:44.680 --> 03:52.400]  вот что значит куча для того чтобы ей было как-то удобнее она будет доставать минимальный элемент
[03:52.400 --> 04:00.440]  именно по вот этому параметру они по какому-то ключу вот но что нам обеспечивает что это хоть
[04:00.440 --> 04:07.760]  насколько работает адекватно обеспечивает маленький там приятный вариант что если в
[04:07.760 --> 04:16.280]  кучу или все ее вот эти там мелдосоставляющие суммарно было добавлено не более чем n элементов то
[04:16.280 --> 04:29.640]  есть условно было не более чем n инсертов то тогда нам гарантируется что испорченных элементов у
[04:29.640 --> 04:37.560]  нас не сильно много то есть у нас не сильно много то есть не сильно много это не более чем
[04:37.560 --> 04:56.760]  epsilon n элементов с ck строго больше чем наш ключ не размер кучи 100 элементов да и у нас
[04:56.760 --> 05:08.800]  абсолютно верно да совершенно верно да то есть помните именно да то есть важный момент
[05:08.800 --> 05:15.960]  действительно именно n инсертов но ты именно n инсертов то даже то есть там сколько сколько
[05:15.960 --> 05:22.200]  из них было уже с кучей удалено тем или иным способом нас не интересует совершенно верно
[05:22.200 --> 05:31.640]  вот да но заметьте то есть замечаем что вот такой вот возникает trade-off в том плане что чем
[05:31.640 --> 05:37.400]  больше epsilon тем как быстрее работает куча но тем соответственно и больше испорченных элементов
[05:37.400 --> 05:46.280]  то есть условно там более широкими москами она эти элементы как-то портит а как вообще куча
[05:46.280 --> 05:54.680]  порчит элемент но вряд ли как бы было у нас камешек веса 57 да она его себе скушала а потом
[05:54.680 --> 06:02.480]  там пожевала пожевала потом как-то кто выплевывал и сказала о конфетка нет ну совсем наоборот вот
[06:02.480 --> 06:09.400]  как-то вряд ли то что достаточно испортила то что дали историку хэллоу ворлд она об том она
[06:09.400 --> 06:16.060]  возвращает там я не знаю там вася ты козел там вряд ли вот но таки как она их портит
[06:16.060 --> 06:22.880]  но как но она но на самом деле как бы да и портит это мы и так условно говорим она портит а за
[06:22.880 --> 06:31.480]  ли внутри себя она ничего не портит она просто но она просто начинает замечать что некоторые
[06:31.480 --> 06:39.560]  элементы для нее на одно лицо вот то есть это означает следующее что то есть реально
[06:39.560 --> 06:43.440]  для того чтобы у нее была поменьше асимптотика она старается сохранить чуть-чуть поменьше
[06:43.440 --> 06:56.120]  элементов вот но значит у каждого элемента то есть вот есть элемент ck вот и но на самом
[06:56.120 --> 07:08.800]  деле с ним связано связан целый лист элемент то есть лист конкретных элементов там вот сколько
[07:08.800 --> 07:16.960]  то там их будет там ну ка в это допустим ну про их бы то гарантирую что у всех этих элементов
[07:16.960 --> 07:26.400]  вот псевдоним вот такой вот то есть так вот охитно просто говорим что это у нас это все у
[07:26.400 --> 07:36.360]  нас на одно лицо вот соответственно ну это вот ну и как-то значит но идея будет тогда
[07:36.360 --> 07:42.400]  простая соответственно чем больше epsilon тем тогда там чаще она все элементы будет запихивать
[07:42.400 --> 07:51.040]  собственно в один господи как-то называть то нормально а то у меня в голове опять только
[07:51.040 --> 08:01.160]  слово автозак собственно крутится вот автобус да то же самое лимузин ух ты не лучше автобус тогда
[08:01.160 --> 08:18.000]  но вот ладно автобус так автобус чушь шикарно ладно так кошмар что мы тут обсуждаем вообще так
[08:18.000 --> 08:23.240]  но вот так же соответственно тем но тем более активно значит товарищи будут собственно
[08:23.240 --> 08:34.520]  оказываться в каких-то автобусах вот соответственно но теперь давайте вспоминать как же мы это пытались
[08:34.520 --> 08:42.440]  делать но первая идея который у нас возникало это то что но первая идея то есть мы конечно
[08:42.440 --> 08:51.200]  работаем на базе бенмельной кучи но ситры бенмельной кучи то есть мы тут неожиданно решили что у нас
[08:51.200 --> 08:57.480]  массивов не будет давайте ну глядя на автобус это сложно предположить но на самом деле помним это
[08:57.480 --> 09:04.080]  лист причем не в питонов самом смысле вполне себе в си штам то есть для чего это сделано это сделано
[09:04.080 --> 09:09.640]  для того чтобы два автобуса можно было легким движением руки превратить в один соответственно
[09:09.640 --> 09:17.560]  вот мы помним вот но как же хранится сама куча бенмельной кучи казалось бы викшины может быть
[09:17.560 --> 09:27.960]  детей сколько угодно вот но мы выкручиваемся там простым естественным скопках нет образом то
[09:27.960 --> 09:33.880]  есть мы говорим что у каждой вершины на самом деле есть два указателя указатель next и указатель
[09:33.880 --> 09:51.280]  child вот они вот такая красота то есть вот такие note то есть такие вот next и на каждой вершинке
[09:51.280 --> 10:00.040]  кроме самой последней там висят ну на самом деле вот под деревья детей то есть вот как-то так это
[10:00.040 --> 10:14.680]  примерно и выглядит причем что он вот причем заметим что это типа одни эти нот то есть что
[10:14.680 --> 10:24.720]  что мы тут еще что у нас тут еще есть то есть это все одни и те же вершины то есть это как бы
[10:24.720 --> 10:29.960]  вообще одна и та же вершина просто у нее вот в данном случае пятеро детей как мы это работаем
[10:29.960 --> 10:39.240]  но работаем по принципу что но вот работаем что это у нас типа самый ранговый ребенок но вот это
[10:39.240 --> 10:44.400]  чуть ранг поменьше и так далее до важный момент у каждой вершины то есть у каждой вершины такие
[10:44.400 --> 10:50.240]  у каждого экземпляра вершины есть ранг ну в идеальной бенмельной куче то есть если бы там вот
[10:50.240 --> 10:57.760]  не заморачивались то обычно если у нас тут ранг допустим 8 то это означает что у нас нет лучше
[10:57.760 --> 11:05.360]  где у нас был ранг 9 это означает что у нас тут под деревья 2 в 9 различных ключей вот помните
[11:05.360 --> 11:16.840]  да это в идеале вот но но вот но сейчас конечно такой вариант пропадает потому что из-за как вы
[11:17.200 --> 11:23.080]  особенности удаления от которых мы поговорим чуть позже вот но пока же мы говорим так что у нас
[11:23.080 --> 11:29.280]  действительно у каждой вершинки есть ранг причем более того соблюдается инвариант что у любой
[11:29.280 --> 11:35.920]  вершины любая вершина указывает на next и на child и они обязаны быть одинакового ранга строго
[11:35.920 --> 11:45.480]  меньшего чем наш но насколько меньше непонятно то есть может быть на там на 1 может быть на 2
[11:45.480 --> 11:52.800]  может быть на 3 там самые разные случаи бывают вот но главное что чайл да на чайл днx у нас
[11:52.800 --> 12:05.680]  смотрят в одну сторону вот и так но вот но соответственно где же хранятся сами ключи но
[12:05.680 --> 12:14.160]  сами ключи хранятся тут ну тут все очень просто тут у нас значит ссылки на автобусик вот он
[12:14.160 --> 12:36.040]  и с каждой вершины вот вот конкретно вот то есть вот такой так как выглядит у нас
[12:36.040 --> 12:42.200]  бенемиальное дерево и рангом этого бенемиального дерева мы считаем соответственно ранг корневой
[12:42.200 --> 12:54.600]  вершины вот но естественно но естественно у нас не все элементы хранятся в одном дереве вот так
[12:54.600 --> 13:01.440]  что он вот они у нас хранятся в целый последствии ну как положено бенемиальная куча бенемиальная
[13:01.440 --> 13:07.760]  куча это набор бенемиальных деревьев попарно различных рангов желательно еще и отсортированных
[13:07.760 --> 13:15.400]  помните да вот ну давайте вспомним чем у нас отличие но то есть чем у нас правда этот вот
[13:15.400 --> 13:24.840]  но этот набор деревьев отличается от обычной бенемиальной кучи ну они не совсем не совсем
[13:24.840 --> 13:30.360]  бенемиально хотя до при до момента с автобусами можно считать что это просто оригинальная
[13:30.360 --> 13:36.920]  реализация бенемиальной кучи на самом деле вот ну тут есть еще но вот ну хорошо да еще
[13:36.920 --> 13:51.560]  вот у нас есть действительно какой-то вот такой список и какая-то но вот но в каждом списке и
[13:51.560 --> 13:58.120]  что в каждом элементе этого односвязанного списка есть конечно же указатель на корень своего
[13:58.120 --> 14:09.240]  дерева может быть даже укрыт даже его ранг еще можно написать так но в нем есть конечно то что
[14:09.240 --> 14:18.120]  обычно в кучах так просто не хранят да то есть мы тут неожиданно решили завести из каждой вершинки
[14:18.120 --> 14:28.760]  указатель суффикс мин вот то есть важный момент то есть ну конечно в обычной бенемиальной кучи мы
[14:28.760 --> 14:38.080]  просто хранили указатель где находится минимум просто где из них там вот находится минимум вот
[14:38.080 --> 14:45.320]  но здесь мы идем более крутым способом мы заявляем что давайте то есть давайте для каждого элемента
[14:45.560 --> 14:51.560]  хранить где вот среди тех кто идет дальше находится минимум вот кто из дальше далее
[14:51.560 --> 15:03.840]  идущих минимален вот это оказывается нам дает некоторое удобство какое удобство это нам дает
[15:03.840 --> 15:19.200]  ну вот выясняется что в принципе такая фишка дает нам возможность то есть дает нам
[15:19.200 --> 15:28.240]  возможность сливать действительно за быстро но да и нот ну каким образом ну то есть слил нот
[15:28.240 --> 15:34.720]  ну идея оказывалась давайте тоже вспомним очень простая вот да ничего страшного что
[15:34.720 --> 15:38.240]  это сейчас все воспоминаю или можно сейчас не воспоминать и просто сразу дальше идти
[15:38.240 --> 15:48.240]  вот давайте ну давайте да но тогда и вот я попрошу из под стола вылезти а то знаете как-то
[15:48.240 --> 15:52.000]  я не до а то мне тоже очень честно хочется называется тоже так из под стола вещать но
[15:52.000 --> 16:00.120]  честно говоря я не уверен что лекция будет эффективно вот так вот значит но давайте
[16:00.120 --> 16:05.680]  значит давайте смотреть как значит и что нам дает суффикс мим вот зачем он нам нужен вот
[16:05.680 --> 16:13.280]  оказывается он позволяет делать мэлт казалось бы тоже самое слияние но гораздо эффективнее почему
[16:13.280 --> 16:22.160]  но потому что давайте вот если кратенько так вспомнить то есть оказывается то есть ну
[16:22.160 --> 16:29.440]  действительно у каждой кучи есть вот максимальный ранг под дерево ну допустим там тут 57 у соседнего
[16:29.440 --> 16:36.560]  дерева 179 ну допустим такое да ну сложно я понимаю до сложности такой представить реальной жизни но
[16:36.560 --> 16:44.120]  все-таки вот и тогда получается что тогда утверждается что мы слить эти две кучи можем
[16:44.120 --> 17:01.040]  за от 57 но 58 хорошо хорошо 58 плюс количество объединений деревьев почему так но в этом да вот
[17:01.040 --> 17:04.640]  мы в прошлый раз действительно обсуждали действительно тут возникают моменты но потому
[17:04.740 --> 17:11.560]  что тут действительно такая вот допустим у нас есть тут лист какой-нибудь такой вот какой-то
[17:11.560 --> 17:18.280]  вот такой там допустим то допустим вот тутran 57 допустим да то трап побольше то есть тут это
[17:18.280 --> 17:23.920]  не значит что тут где-то больше элементов где-то меньше тут их может быть вот т.е. нас интересует
[17:23.920 --> 17:29.200]  именно транс последнего на сам сп lavoro все какие-то вот такие вот такие и тут вот
[17:29.200 --> 17:35.600]  неожиданно там еще вот такие вот такие и тут вот рамка 179 условно вот
[17:35.600 --> 17:42.520]  но тогда утверждается следующее да то есть за от 50 то есть когда мы будем идти тут двумя
[17:42.520 --> 17:50.760]  указателями честно сливать столбиком вот то к чему нас это приведет это нас приведет к
[17:50.760 --> 17:58.880]  тому что соответственно здесь у нас будет то есть здесь мы там за 50 там от 58 соответственно
[17:58.880 --> 18:06.720]  тут что-то сольем сольем сольем сольем сольем вот и максимум что у нас тут вы максимум что от
[18:06.720 --> 18:12.240]  этого произойдет то есть у нас тут будет значит уже какой-то список и здесь еще какой-то может
[18:12.240 --> 18:19.920]  быть элемент ранга 58 может остаться случайно но например если тут 2 2 50 седьмых было например
[18:19.920 --> 18:28.160]  или там еще по какой причине вот но что будет происходить дальше но заметим что дальше максимум
[18:28.160 --> 18:35.920]  что может произойти это вот несколько идущих подряд вот там каких вот 58 59 60 и так далее но
[18:35.920 --> 18:40.840]  с которыми вот это то есть вот это дерево будет по одному сливаться но будет происходить тогда
[18:40.840 --> 18:44.800]  но тогда то есть сколько-то действующего произведет но каждое это действие будет
[18:44.800 --> 18:50.960]  превращать два дерева в одно то есть 58 50 седьмых там 59 но все-таки 9 60 60 и так до тех пор пока
[18:50.960 --> 19:00.200]  тут рамки идут подряд вот то есть вот поэтому я и говорю что реально то есть время работа реально
[19:00.200 --> 19:09.000]  время работы melda оно не превосходит значит единицы плюс минимального ранга ну минимального ранга
[19:09.000 --> 19:17.520]  максимально там как минимального максимума рангов в кучах вот так соответственно это нот
[19:17.600 --> 19:28.280]  и плюс еще количество так сказать объединение деревьев вот вот ну в этом месте мы там начинали
[19:28.280 --> 19:33.680]  вводить какие-то монетки но можно в принципе сейчас уже сказать что то есть заметим чем у нас
[19:33.680 --> 19:39.360]  приятно да у нас приятно тем что как мы уже знаем никогда там никакие операции там ранг корни особо
[19:39.360 --> 19:44.560]  не поменяют то есть при себе ну в том плане что если у вершины есть какой-то ранг он уже навсегда
[19:44.960 --> 19:52.720]  вот и мы не чувствуем но ты но то есть давно в нем конечно уже два в 57 вершин может и не быть
[19:52.720 --> 19:59.800]  случайно но как бы тем не менее называется она вот она такого ранга будет вот и тогда
[19:59.800 --> 20:07.600]  чему это нас приведет это нас придет с одной стороны но но с другой стороны заметим что
[20:07.600 --> 20:20.160]  сколько у нас вообще создается деревьев различных да вообще да но на самом деле да
[20:20.160 --> 20:27.320]  заметим что у нас на самом деле деревья создаются прям с нуля но только в то только в тот момент
[20:27.320 --> 20:33.680]  когда у нас появился insert да потому что как у нас делается insert мы создаем дерево ранга
[20:33.680 --> 20:41.680]  ноль из этого элемента там создаем ну там создаем даже такую пара там кучу из одного элемента
[20:41.680 --> 20:48.000]  с этим одним деревом а потом ее сливаем со всем остальным только в этом месте у нас
[20:48.000 --> 20:56.080]  создается куча новое дерево да и но новая кучу тоже не важно сейчас вот после этого деревья
[20:56.080 --> 21:01.960]  могут там то есть сами по себе деревья могут только сливаться но может еще быть так что
[21:01.960 --> 21:06.040]  внутри какого-нибудь дерева еще произойдет какой-нибудь безобразие там да может так
[21:06.040 --> 21:13.280]  случится что дерево когда-нибудь вообще и исчезнет кстати ну потому что если выяснить что из него
[21:13.280 --> 21:20.720]  там достали там допустим все элементы но хотя нет до этого мы доводить не будем вот на самом деле
[21:20.720 --> 21:26.120]  вот но тогда получается что но из этого следует важный момент то есть как бы есть у нас всего
[21:27.120 --> 21:33.080]  они могут только сливаться то тогда вы вынуждены заключить что слияние деревьев вот таких вот
[21:33.080 --> 21:41.800]  одинакового ранга будет суммарно в жизни не более чем n да и то не точная оценка их будет
[21:41.800 --> 21:57.160]  n-1 и то не более вот и что ж тогда происходит но вот тогда но тогда получается что с точки
[21:57.160 --> 22:03.320]  зрения амортизации на самом деле мы вот эти сами вот эту вот часть слиятельную можем не учитывать
[22:03.320 --> 22:09.360]  ну в прошлый раз мы это объяснили себе так что когда когда дерево создается мы кладем на него
[22:09.520 --> 22:16.200]  специальную там какую-нибудь отдельную там серобурмалиновую монетку которая занимается тем
[22:16.200 --> 22:22.400]  что которая отвечает за слияние то есть когда нужно слить два дерева то есть на каждом из них
[22:22.400 --> 22:27.200]  лежит по монетке мы тратим одну из них на то чтобы слить а вторую собственно кладем на свежее
[22:27.200 --> 22:39.600]  испеченное дерево логично да так было дело так воспоминается вот хорошо вот и так так на
[22:39.600 --> 22:43.640]  ситуацию но то есть мы себе это так можно так объяснять можно просто объяснять что их там
[22:43.640 --> 22:49.360]  суммарно то есть в принципе там там как старт статьи там там там больше скажешь скорее что ну
[22:49.360 --> 22:54.960]  тут понятно что слияние будет не более чем n поэтому да вот ну то есть нет то есть пока
[22:55.200 --> 23:03.400]  вот эту часть действительно амортизировано можно не учитывать вот но здесь все оказывается
[23:03.400 --> 23:09.600]  гораздо хитрее потому что то да потому что но он говорит что мэлт действительно теперь работа
[23:09.600 --> 23:17.840]  вот эта часть равно работает за от единицы почему но потому что тут мы начинаем ссылаться ну потому
[23:17.840 --> 23:25.800]  что есть же сведения о том что у нас если у нас там т от н равно там допустим там от единицы плюс
[23:25.800 --> 23:35.200]  там я не знаю логмин из там т от н и т от н минус м да то из этого следует что т от н там
[23:35.200 --> 23:49.360]  т от н равно от н вот чего чего следует
[23:49.360 --> 24:18.880]  так хорошо да давайте т от м плюс т от н минус м плюс
[24:18.880 --> 24:33.040]  там логарифом двоичный минимум а прям из н и м минус м да ну хорошо так так ну вот ну вот есть такое
[24:33.040 --> 24:37.920]  сведение оно очень известно его можно идти в литературе смотри там где-нибудь копайте там пятую
[24:37.920 --> 24:44.680]  страницу вон какой-нибудь там статьи вот этой вот но вот ну или ну или в любом уважающем себе
[24:44.680 --> 24:51.520]  в этом курсе есть такое домашнее задание естественно но соответственно там ну вы чем
[24:51.520 --> 24:57.160]  как угодно я ну кстати же не напишешь как бы ну как бы но в овощу этого вузе не учили что ли
[24:57.160 --> 25:04.200]  шоу надо шоу в науке делаете поэтому там приходится ссылаться на статьи вот но вот и
[25:04.200 --> 25:09.520]  какая-то другой вопрос по-хорошему но есть такое утверждение да возможно его даже можно доказать
[25:09.520 --> 25:26.440]  но возникает просто пить шоу ничего но вот нет ну нет на самом деле сейчас нет уране действительно
[25:26.440 --> 25:37.720]  не больше чем логарифа сейчас сейчас вот давайте разъяснить потому что да действительно да тут
[25:38.280 --> 25:43.960]  действительно не очевидно действительно как это вообще вот с этим связано чем более того даже
[25:43.960 --> 25:48.520]  есть более простой вопрос на самом деле как это почему-то вот было почему-то интуитивное
[25:48.520 --> 25:54.960]  ощущение что транги не происходит логарифма спрашивать так кто сказал если раньше бенемиальные
[25:54.960 --> 26:00.760]  кучи мы могли такое заявить потому что у нас как-то там оказывалось что в дереве ранга x 2 в степени
[26:00.760 --> 26:12.320]  x элементов ровно было но здесь как мы помним что-то так и такого уже нет потому что там оно потому
[26:12.320 --> 26:16.960]  что какие там чисто теоретически может уже там произойти на самом деле все что угодно
[26:16.960 --> 26:37.120]  да вот да да да да нам приходится действительно тут немножко выкручиваться и мы это делаем так
[26:37.120 --> 26:43.560]  что мы говорим что до ключей у меня может быть два степени x нет но память о них в моем сердце
[26:44.240 --> 26:49.480]  то есть говорим мы что то есть там что каждый declare то есть каждый вершины
[26:49.480 --> 26:57.440]  ранга x соответствует вот там можно сказать капсум пишем два степени x элемент как
[26:57.440 --> 27:03.880]  это соответствие передается но очень просто ну во первых мы говорим что у нас жила была одно
[27:03.880 --> 27:08.320]  вершина т. unrestr�� есть одна вершина Ранга 0 то вы говорим что она сама себе соответствует и
[27:08.320 --> 27:13.200]  хорошо, а дальше мы говорим, что когда мы объединяем два дерева одинаковых рангов,
[27:13.200 --> 27:17.720]  как мы их, кстати, объединяем, да, то есть объединяем очень просто, у нас
[27:17.720 --> 27:23.360]  создается новая вершинка, да, у нее там, но вот эти два дерева, к ней вешаются как child
[27:23.360 --> 27:28.600]  and next в зависимости от того, кто меньше, кто больше, и тогда это вершине начинает
[27:28.600 --> 27:32.880]  соответствовать объединение того, что соответствовал этому дереву и этому дереву,
[27:32.880 --> 27:37.040]  вот рамка тут становится на единичку больше, поэтому вот то, что нам надо,
[27:37.040 --> 27:43.560]  вот, то есть оказывается очень удобно, то есть на самом деле у нас есть два не пересекающихся
[27:43.560 --> 27:49.840]  дерева, а пересекающихся деревьев у нас особо нету, ну тут как всегда, да, что пересекающих
[27:49.840 --> 27:55.200]  деревьев не будет, деревья пересекаются, значит одно под дерево другого, вот, но если деревья не
[27:55.200 --> 28:00.240]  пересекаются, то оказывается, что им соответствует принципиально разное множество элементов,
[28:00.240 --> 28:06.560]  вот, вот так как элементов у нас всего-то n, то получается, что, ну, то получается действительно,
[28:06.560 --> 28:13.600]  что рамка у нас, то есть рамка у нас логарифмический и ему все еще соответствует 2 в 57 элементов,
[28:13.600 --> 28:21.880]  но просто как бы это уже не явно прям живущие 2 в 57 элементов, а там какая-то там память о них,
[28:21.880 --> 28:31.440]  да, да, да, ну, условно, да, прийти, да, просто дело в том, что, да, часть элементов мы уже там
[28:31.440 --> 28:37.880]  убили, ну, в смысле достали, то есть, знаете, вот такие 4 я помню, вот в этом году мы говорим,
[28:37.880 --> 28:42.600]  что-то про автобус и автозак, а в прошлом году мы говорили в этом месте про кладбище, ну,
[28:42.600 --> 28:46.960]  то есть условно, что два города объединяются и как бы их кладбище тоже как бы переходит на
[28:46.960 --> 28:53.440]  единый баллад, но что-то вот такое у нас там получалось, ладно, вот такое,
[28:53.440 --> 29:03.880]  ну, вот поэтому, да, поэтому рамки логарифмические, ну, значит, рамки у нас логарифмические и более того
[29:03.880 --> 29:09.720]  мы можем сделать вот действительно из этого важный вывод, то есть откуда это вообще берется,
[29:09.720 --> 29:16.840]  почему тут такой логарифм, потому что мы понимаем, что если у нас в дереве находится там m ключей,
[29:16.840 --> 29:24.840]  или светлых образов их, вот, то тогда мы гарантируем, что у нас тут количество деревьев,
[29:24.840 --> 29:29.560]  на самом деле, то есть тогда максимальный ранг не более чем логарифма m, ну, значит,
[29:29.560 --> 29:36.240]  их самих деревьев не больше, чем логарифм, логично, да, вот.
[29:36.240 --> 29:50.840]  Ну, это вот здесь мы говорим следующее, что мы себе воображаем все молды, да, их можно себе,
[29:50.840 --> 29:55.520]  ну, глобально за всю жизнь можно вообразить себе так, у нас есть m куч, ну, допустим,
[29:55.520 --> 30:01.200]  мы заранее как-то предсказали, какие элементы мы там куда хотим вставлять, то есть по факту это
[30:01.200 --> 30:06.560]  может сказать, как мы на самом деле можем создать заранее все эти элементы, там сделать из них куча,
[30:06.560 --> 30:11.720]  а потом их в каком-то порядке сливать, вот, то есть если взять это дерево вот слияние и смотреть,
[30:11.720 --> 30:17.720]  за какое время суммарно это все слияние происходит, то можно оценивать это слияние сверху вот таким
[30:17.720 --> 30:27.680]  вот образом, вот таким вот образом оно делается и получается нот, и можно его получается действительно
[30:27.680 --> 30:35.160]  оценивать сверху вот как-то вот так, но вот и отсюда вывести, что эти слияния суммарно оказывается
[30:35.160 --> 30:42.720]  работают за линию, вот, то есть вот такое вот удобство получилось, то есть вот так выясняется,
[30:42.720 --> 30:49.280]  что нот Meld работает за единицу, вот как в этом давайте подчеркиваем, как в этом помог нам
[30:49.280 --> 30:56.000]  именно суффикс-мин, но суффикс-мин нам помог действительно тем, что если мы тут вот слияние
[30:56.000 --> 31:01.480]  тут остановилось, то в принципе то, что получилось, можно подцепить вот к оставшемуся хвосту и,
[31:01.480 --> 31:11.120]  в общем-то, больше ничего не делать, ну вот такие хвост вообще не менять, но при этом на вот этой
[31:11.120 --> 31:16.080]  голове, то есть вот то, что у нас только что получилось, там суффикс-мин спокойно насчитывается,
[31:16.080 --> 31:22.480]  понимаете, да, вот, то есть вот оказывается очень, ну, то есть оказывается, то есть на самом деле,
[31:22.480 --> 31:31.560]  то есть все это может быть было для того, чтобы у нас там успешно поддерживался дед-мин, вот,
[31:31.560 --> 31:48.320]  понятно, да, как этот, нет, этот список это и есть куча, ну да, то есть, то есть можно сказать,
[31:48.320 --> 31:53.600]  что, то есть вообще можно сказать, что куча, это, то есть само общее классик куча вообще может
[31:53.600 --> 32:00.120]  храниться едва ли не указатель, просто только на эту голову и все, ну, почти конечно, вот.
[32:00.120 --> 32:06.280]  Как следующее определяется, короче? Следующий, ну, как бы это односвязанный список в каждом
[32:06.280 --> 32:13.760]  элементе, то есть одно дело куча, вот, в которой хранится указатель сюда, вот, в этом, в этой
[32:13.760 --> 32:18.440]  вершинке хранится указатель на следующую, то есть в ней хранится указатель на следующую,
[32:18.440 --> 32:23.400]  значит, указатель на свое дерево и указатель на суффикс-мин.
[32:23.400 --> 32:43.520]  Ну да, в смысле, нет, не совсем-то, ну, не да и нет.
[32:43.760 --> 32:53.280]  Потому что это не элементы кучи, это представители деревьев вот так, то есть
[32:53.280 --> 32:58.060]  это представители деревьев, то есть элементы лежат в деревьях, даже еще хуже,
[32:58.060 --> 33:06.200]  точнее, еще хуже элементы лежат в автобусах, автобусы лежат в деревьях, деревья лежат,
[33:06.200 --> 33:11.400]  то есть как там как там у каждого там каждое дерево лежит в некотором смысле вот в таком
[33:11.400 --> 33:19.080]  ящике точнее вот то есть вот так то есть тут это до элементов вы это просто так не добираетесь вот
[33:19.080 --> 33:33.880]  кто не защищен ну да ну можно и так сказать вот так вот тихо тихо тихо значит смотрите
[33:33.880 --> 33:43.760]  значит что у нас тогда значит что у нас теперь происходит значит что но то что у нас теперь
[33:43.760 --> 33:52.800]  соответственно происходит вот начиная вот это у нас был мэлт но теперь давайте вспоминать
[33:52.800 --> 33:59.560]  значит ну как у нас устроено удаление вот как у нас устроено удаление и экстракт мин ну удаление
[33:59.560 --> 34:05.040]  устроено по итератору вообще устроено предельно просто надо просто достать элемент из автобуса
[34:05.040 --> 34:13.640]  просто берем и достаем и ничего страшного все то есть типа вот но единственная проблема что
[34:13.640 --> 34:18.720]  некоторые автобусы бывают пустыми но как бы ничего страшного то есть как бы мы не будем
[34:18.720 --> 34:26.520]  торопиться уничтожать пустой автобус вот но вот с экстракт мином все сложнее потому что что
[34:26.520 --> 34:31.560]  нужно сделать экстракт мини но нужно просто вот по суффикс мину пойти значит найти этот
[34:31.560 --> 34:37.960]  дерево с минимальным псевдонимом в корне у этого элемента значит надо пойти в автобус и достать
[34:37.960 --> 34:46.360]  первые попавшиеся элементы его собственно и его но ты его из кучи ударить но в общем-то тоже
[34:46.360 --> 34:54.000]  все просто делается за от единицы вон тут всеми указателями все уверенно но магия начинается
[34:54.000 --> 35:02.680]  когда выясняется что в этом автобусе больше никого нет что мы тогда делаем и тогда начинается
[35:02.680 --> 35:13.080]  самая магическая операция этого всего вот потому что что пытается но потому что сифт в панике
[35:13.080 --> 35:21.240]  значит абсолютной панике пытается значит там понятно что автобус пустой пытается залезть
[35:21.240 --> 35:32.200]  себе по дерево и выкопать оттуда что-то ну давайте вспомним как он конкретно это делает вот давайте
[35:32.200 --> 35:32.680]  вспоминать
[35:45.680 --> 35:53.940]  вот но делает он так то есть условно говоря си этом давайте это какой-то сифт отвершины в
[35:53.940 --> 36:04.740]  что у нас получается жена вот то есть то есть ну легенда такая мы пришли в вершину в и
[36:04.740 --> 36:14.540]  говорим слушает тут проблема твой автобус пустой то есть следователь дать тебя то есть тебя как
[36:14.540 --> 36:22.980]  вершины в общем-то желательно чтобы не существовало вот но как но то есть такой вершины быть не
[36:22.980 --> 36:27.580]  должно то есть надо как-то автобус уничтожить но из но у тебя в под деревья кто-то есть поэтому
[36:27.580 --> 36:40.740]  надо что-то достать что делает по умолчанию вершина в по умолчанию вершина в говорить так
[36:40.740 --> 36:50.820]  значит вот у меня есть next так вот так вот у меня есть next вот давайте я рекурсивно что-то
[36:50.820 --> 36:57.460]  достану из него то есть что это означает то есть принципе значит после рекурсивного запуска
[36:57.460 --> 37:01.940]  значит это будет означать что там у нас есть какое-то относительно какой-то корректное
[37:01.940 --> 37:08.700]  дерево то есть в котором уже там действительно этот этот так сказать автобус ликвидирован по
[37:08.700 --> 37:18.980]  цепочке вот и тут образована вот и тут образовался какой-то вершин вот но мы тогда можем честно
[37:19.340 --> 37:24.580]  вот ты образовался у тебя тут нормальный автобус до но отличные задачи тогда мы идем по цепу значит
[37:24.580 --> 37:28.780]  тогда я к тебе присоединяюсь просто как бы то есть нас достанут а то есть как бы будет абсолютно
[37:28.780 --> 37:34.160]  тот же автобус то есть тут автобус какой-то вот давайте я к нему просто присоединить казалось бы
[37:34.160 --> 37:40.900]  мы так хотим сделать мы так делать не будет но вот но мы так будем делать аккуратно что может
[37:40.900 --> 37:47.260]  так оказаться может так оказаться что у нас в общем-то но вот что вот это вот это вот вершина
[37:47.260 --> 37:55.180]  этот псевдоним окажется больше ребенка такого у нас не бывает что же мы в
[37:55.180 --> 37:58.380]  таком случае сделаем но тут мы замечаем что в общем-то это деревья
[37:58.380 --> 38:02.140]  одинакового ранга
[38:08.700 --> 38:13.260]  вот а потому что на самом деле есть мистический вариант заключающийся в том
[38:13.260 --> 38:20.060]  что на самом деле как бы рамка этого дерева не поменяется то есть обратите
[38:20.060 --> 38:26.100]  внимание сифт то есть смотрите важный момент сифт он это немножко о
[38:26.100 --> 38:32.700]  перераспределении вершин внутри дерева но сам по себе сифт не удаляет никаких
[38:32.700 --> 38:39.020]  вершин то есть максимум что может сделать сифт это в идеальном мире
[38:39.620 --> 38:45.220]  все что может сделать это удалить пустой автобус это все что он может делать
[38:45.220 --> 38:59.180]  но вот но это уже техническая деталь но сейчас есть об идеологии сейчас мы об этом поговорим но
[38:59.180 --> 39:04.540]  просто идейно важно понимать следующее что сифт он просто перераспределяет вершины то есть
[39:05.260 --> 39:13.100]  перер derive с автобусами но как бы память и вершина остается то есть более того то
[39:13.100 --> 39:19.500]  есть на самом деле сифт вызваны от вершины на самом деле никак не изменяет 0
[39:21.500 --> 39:27.540]  нужно здесь соответствует вот эти два степени рамка тв каких-то вот ключей да ну то
[39:27.540 --> 39:34.220]  то самая та самая память да вот то есть так вот это память никак не нарушается то есть не из этой
[39:34.220 --> 39:41.620]  памяти не там никто не исчезает и туда никто не добавляется то есть но вот и как следствие то
[39:41.620 --> 39:52.380]  есть когда вы запускаете сифт от в то есть рамка ее не меняется от слова никак вот то есть там
[39:52.380 --> 40:04.380]  то есть это вот на самом деле важный момент вот то есть примерно вот поэтому оставляется остается
[40:04.380 --> 40:10.100]  и дворян шоу чайлд и некста одинаковые ранги и мы в этом месте прежде чем подключать подключаться
[40:10.100 --> 40:16.220]  к этому автобусу по ним и думаем что если чайлд оказался меньше чем next то на самом деле эти
[40:16.220 --> 40:25.220]  деревья можно и по свапать спокойненько и подключиться уже к бывшему чайлу вот понятно
[40:25.220 --> 40:35.500]  да правда есть маленькая оговорочка но оговорочка оговорчика из разряда что чтобы не было
[40:35.500 --> 40:40.620]  бесконечной рекурсии да потому что если сифт всегда вызывается от венекста то у нас получается
[40:40.620 --> 40:47.940]  бесконечная рекурсия в какой-то момент мы должны остановиться а в какой но очевидно да но не нет
[40:47.940 --> 40:55.740]  не совсем так но хотя да то есть действительно венекста может тупо не существовать да может
[40:55.740 --> 41:03.660]  быть такая ситуация что но вот то есть но по сути когда мы дошли до конца цепочки да мы дошли
[41:03.660 --> 41:09.420]  до конца цепочки но тогда в этом месте мы говорим что этот элемент мы удалили но у него в подделье
[41:09.420 --> 41:15.180]  больше никого нет тогда мы собственно в этом месте мы говорили что если тут вот пусто то мы
[41:15.180 --> 41:21.820]  вообще эту вершину объявляем плюс бесконечности но не меня ее ранга обратите внимание до важный
[41:21.820 --> 41:31.580]  момент это вершина как мы вот в общем случае уже обладать рангом 0 не обязана то есть может быть
[41:31.580 --> 41:37.660]  и там из нее уже просто достали просто достали все что можно то есть она там соответственно
[41:37.660 --> 41:45.340]  называется имеет какой-нибудь там ранг 7 и то есть ранг 7 но из нее там все до как бы там то есть
[41:45.340 --> 41:51.100]  это там сто сто два до там но все 128 элементов из нее уже достали убили там закопали там надпись
[41:51.100 --> 42:02.020]  написали и так далее вот вот и пришел ее черед вот мы тут тоже надпись написали вот чем сделали
[42:02.020 --> 42:08.940]  мы это для чего для того чтобы по крайней мере перейти тут в какую-то рекурсию то есть вернуться
[42:08.940 --> 42:17.180]  из рекурсии и шоб у нас тут то есть в этом месте у нас есть возможность немножко сон вот то есть
[42:17.180 --> 42:25.580]  этих детей чуть-чуть посвапать то есть можно их нот нот их можно посвапать а потом в будущем на
[42:25.580 --> 42:32.020]  самом деле этого ребеночка в принципе можно и удалить потому что у нас в принципе есть такая
[42:32.020 --> 42:37.700]  превышение в какой-то момент образовалось у нас есть ребенок на плюс бесконечность и там условно
[42:37.700 --> 42:44.660]  там какая-то еще вершина то мы обнаруживаем что можно в принципе плюс бесконечность убить это
[42:44.660 --> 42:51.380]  убить и вместо этого на самом деле аккуратненько вот слева и справа на самом деле подвесить вот это
[42:51.380 --> 43:03.980]  вот вот помните было дело да то есть можно вот сделать вот так но более того тут но более
[43:03.980 --> 43:09.660]  того на самом деле забегая вперед тоже приближаюсь практически то есть можно вообще оказаться что в
[43:09.660 --> 43:20.060]  какой-то момент у вершины окажутся два ребенка плюс бесконечность можем потому что да мы да в
[43:20.100 --> 43:26.600]  обычной биномиальной кучи конечно не может но мы здесь можем включить да но мы тут об этом начинаем
[43:26.600 --> 43:32.580]  включить миссию включать мистику потому что как бы потому что пока мы не включили мистику это
[43:32.580 --> 43:41.940]  просто такая оригинальная реализация биномиальные кучи вот да но правда единственное но от единственного
[43:41.940 --> 43:46.780]  оговорочка что почему это вот давайте думать почему этот экстракт мин вообще работает за единиц
[43:46.780 --> 43:55.180]  казалось бы там если нам не повезет с деревом то есть он там дерево будет ранга какого-нибудь то
[43:55.180 --> 44:01.860]  вообще говоря у нас тут может там при но то на самом деле мы тут можем гулять на самом деле сколько
[44:01.860 --> 44:08.380]  угодно почему у нас экстракт мин работает за единиц
[44:08.380 --> 44:18.920]  вот но на самом деле да тогда то есть вспоминаем то есть у нас еще более эпической идеи что на
[44:18.920 --> 44:24.700]  самом деле экстракт мины мы на самом деле оплачиваем будущими то есть это они были оплачены
[44:24.700 --> 44:31.420]  в инсортах то есть на самом деле по большому счету там нужно доказать то есть ну глобально
[44:31.420 --> 44:38.700]  надо доказать да что у нас есть у нас было встать сделано и инсортов да то суммарно все сработает
[44:38.700 --> 44:47.460]  за там лог 1 делить на эпсилон плюс количество вызовов конкретных операций ну мы там мелды из
[44:47.460 --> 44:55.260]  них мы уже правда смогли выкинуть условно вот но вот это но вот но сами себе эрейзер тоже пшенин
[44:55.260 --> 45:03.260]  какие потенциалы некие варианты в общем-то там пустота автобусов не влияет у нас чего ну где-то
[45:03.260 --> 45:10.260]  но где-то не вопитать это вообще не интересен да вот но теперь думаем да почему у нас аналога но
[45:10.260 --> 45:15.580]  аналога на самом деле здесь у нас очень простой потому что каждый раз когда вы вызываете сифт у
[45:15.580 --> 45:28.100]  нас как говорится там там в нашей куче уничтожается один автобус логично да вот но
[45:28.100 --> 45:33.580]  соответственно но то автобус от нас его n а ну да важный момент когда мы создаем элемент мы
[45:33.580 --> 45:42.020]  создаем не только новую вершину и новые кучу но еще и новый автобус вот так что раз автобус но
[45:42.140 --> 45:47.740]  так как у нас их всего уничтожается не более чем это получается хорошо вот нам очень хочется
[45:47.740 --> 45:56.180]  как чтобы это работало залогарифом один делить на эпсилам поэтому мы начинаем но поэтому мы
[45:56.180 --> 46:04.980]  начинаем уничтожать автобусы чуть-чуть быстрее очень сильно каким образом нет ну где-то сливая
[46:04.980 --> 46:13.780]  их но каким конкретно образом но идея очень простая что давайте попробую тут разные варианты
[46:13.780 --> 46:20.780]  есть значит отрите но вот один вот у нас будет вариант такой значит сифт от в значит он
[46:20.780 --> 46:26.420]  условно говорит ну я сейчас пишу условную фону я не буду сейчас писать прям полностью вот там
[46:26.420 --> 46:37.740]  но условно говорим так значит вызываем сифт от в next значит так сказать вот так это
[46:37.740 --> 46:47.420]  relax connect ну relax connect это ну релаксом в данном случае оказывается вот этот вот swap next
[46:48.420 --> 47:01.260]  вот хотя впрочем но хотя коннект может говорить еще рано потому что ну хотя но там как на коннект
[47:01.260 --> 47:08.460]  совсем автобуса здесь еще не происходит до этого но вот хотя нет релакс коннект здесь происходит
[47:08.460 --> 47:15.740]  потому что значит удачи казалось бы все мы все сделали обычный сифт на этом бы закончился но
[47:16.060 --> 47:26.780]  у нас куча необычная поэтому у нас неожиданно возникает мистическое условие то есть оно говорит
[47:26.780 --> 47:35.660]  там ну то есть вот ну пока давайте так и вспомним вот у нас есть if mystical condition то есть и вот то
[47:35.660 --> 47:43.820]  есть если от этой вершины выполнено мистическое условие то значит что мы делаем значит мы там
[47:43.820 --> 47:57.100]  условно говорим еще раз вызываем сифт от вы next вот но вот и дальше но вот и дальше пишем
[47:57.100 --> 48:11.300]  я так так что релакс коннект юнайт но потому что что делает потому что что делает релакс
[48:11.300 --> 48:19.060]  коннект он говорит так но во первых значит если чайл доказался меньше next swap это во
[48:19.060 --> 48:25.900]  первых а во вторых он говорит так но а во вторых пожалуйста что авто там ссылка на автобус от
[48:25.900 --> 48:32.100]  вершины в даже теперь копируем из ссылки на автобус от вы next поэтому я это называю релакс
[48:32.100 --> 48:41.900]  коннект понятно да но это делать предположение что вершины в автобус уже не существующие у нас не
[48:41.900 --> 48:50.060]  интересует понимаете да вот так вот здесь вы действует по-другому то есть если выполнено
[48:50.060 --> 48:54.620]  мистическое условие то мы говорим так так у вершины в есть какой-то автобус да и вот у этих
[48:54.620 --> 49:00.380]  решим так вот давайте вызовем сифт в предположении что для нее вот ей мы сообщаем что этого автобуса
[49:00.380 --> 49:11.820]  нет его уже опять быстро удалили на самом деле мы его никуда не удалили ну и да и звэй идет
[49:11.820 --> 49:18.020]  поэтому мы ее не теряем то есть из вн x она как бы тоже идет но мы ее игнорируем мы собственно и
[49:18.020 --> 49:22.940]  в основном систифте ее игнорируем потому что на самом деле это ссылка скорее всего не валидно
[49:22.940 --> 49:27.420]  потому что мы этот автобус уже когда-то убили то есть не умы скорее всего вызвали непосредственно
[49:27.420 --> 49:35.780]  перед запуском сифта собственно искорне вот значит вот такая радость получается вот да
[49:35.780 --> 49:42.380]  без пареньки вот значит соответственно мы тут вызываем еще значит соответственно какой-то
[49:42.380 --> 49:48.540]  локальный сифт и что мы после этого и вот и после этого мы говорим так отлично у нас тут есть автобус
[49:48.540 --> 49:55.860]  и у нас есть автобус тогда идея такая то есть давайте так вот этот вот автобус но тут тут уже
[49:55.860 --> 50:02.700]  ссылки есть на какой-то автобус давайте к этому автобусу подцепим наш ну почему бы нам его не
[50:02.700 --> 50:10.740]  подцепить да и после этого торжественно но вот и в ноте но и тогда ссылочку отсюда тоже на
[50:10.740 --> 50:19.820]  это же объединенные автобусы отправят то есть вот такая мистическая идея понятно да вот
[50:20.660 --> 50:28.300]  мы хотим нас кокто оперативно то есть как-то вот хлопать то есть то есть заметим прочить эту
[50:28.300 --> 50:41.260]  сифту нас это такая нелинейное то есть как бы обычный с
[50:49.820 --> 50:58.820]  чтобы у нас не инвалидировались все слухи, которые бежат по дереву, не прицепить наш автобус в конец.
[50:58.820 --> 51:06.820]  Да, да, да, конечно, конечно. Нет, безусловно, безусловно. Вот. Так что да, вот такая она.
[51:06.820 --> 51:09.820]  Так что в этом смысле да, вот такая красота получается.
[51:09.820 --> 51:15.820]  А вот мы что хотим для рангов Child и Next, чтобы у Childа было больше?
[51:15.820 --> 51:19.820]  Нет, смотрите, не путайте ранги с секеями.
[51:19.820 --> 51:25.820]  Значит ранги у Childа и Next должны быть одинаковые и строго меньше, чем у V.
[51:25.820 --> 51:32.820]  Вот. Ну вот, про ключи мы хотим, ну как бы тут у этих секей тут и секей тут они должны быть одинаковы,
[51:32.820 --> 51:40.820]  а у Childа секей должен быть больше, потому что это куча.
[51:41.820 --> 51:48.820]  Ну это куча на минимум, то есть мы хотим, чтобы дети были больше родителей. Тут по классике.
[51:54.820 --> 52:02.820]  Но скажем так, мы сливаем автобус, который у нас сейчас в вершине V, с тем, что мы еще достанем.
[52:03.820 --> 52:06.820]  У нас же они так равны.
[52:06.820 --> 52:15.820]  Не, а вот тут и прикол. Сейчас перед вот этим mystical condition они как бы равны, даже не равны, один и тот же автобус, да.
[52:15.820 --> 52:19.820]  Но просто фишка в этом смысле говорит такая, потому что что вообще говорит SIFT?
[52:19.820 --> 52:24.820]  SIFT приходит в вершину V и говорит, слушай, твой автобус больше не существует.
[52:24.820 --> 52:29.820]  Ну вот, пожалуйста, забудь о ссылках на него.
[52:29.820 --> 52:34.820]  Вот пусть ты и все твои next забудут о ссылках на этот автобус и выкупают нам новый.
[52:34.820 --> 52:38.820]  Вы говорите OK, и вы это делаете.
[52:38.820 --> 52:42.820]  Вот первый SIFT это вы next и вы говорите, так, хорошо, я нашел автобус.
[52:42.820 --> 52:48.820]  Что говорит второй SIFT? Второй SIFT вы своему next говорите, слушай, а забудь ты об этом автобусе.
[52:49.820 --> 52:56.820]  То есть он как бы делает вид, что этого автобуса не существует, что он типа там не существует больше.
[52:56.820 --> 52:59.820]  Там выкапывает из себя что-то новое.
[52:59.820 --> 53:02.820]  Ну если там, конечно, не плюс бесконечность.
[53:02.820 --> 53:09.820]  Но, говорим мы неожиданно, но сама вершина V об этом автобусе не забывает.
[53:10.820 --> 53:16.820]  Вот. То есть она об этом автобусе не забывает, но просто фишка нот.
[53:16.820 --> 53:21.820]  То есть она просто нот, то есть на самом деле она при этом подключается к автобусу next,
[53:21.820 --> 53:26.820]  но при этом в этот автобус она допихивает в конец еще свой старый автобус.
[53:27.820 --> 53:31.820]  Она допихивается в конец к next или уже после?
[53:31.820 --> 53:36.820]  Она удалит свой автобус у next и, возможно, придется после этого сводить.
[53:36.820 --> 53:41.820]  Да, и, разумеется, именно после свапа она будет подключаться.
[53:41.820 --> 53:46.820]  Но и здесь, да, вот в Relax Connect тоже подразумевается, что мы сначала, то есть прежде чем подключиться,
[53:46.820 --> 53:49.820]  мы должны аккуратно выяснить, к кому мы подключаемся.
[53:55.820 --> 53:57.820]  Ну вот, ну типа того, да.
[53:57.820 --> 54:00.820]  Главное, это не слишком часто делать.
[54:00.820 --> 54:02.820]  Потому что давайте себе вообразим...
[54:02.820 --> 54:07.820]  Ну прежде чем я оглашу, собственно, к чему равно mystical condition,
[54:07.820 --> 54:09.820]  вот давайте подумаем, что тут может быть.
[54:09.820 --> 54:12.820]  Потому что я могу в принципе сказать, что если...
[54:12.820 --> 54:13.820]  Вот давайте просто делаем...
[54:13.820 --> 54:16.820]  Вот что будет, если я буду делать это всегда?
[54:22.820 --> 54:24.820]  Ну вот насколько быстро?
[54:24.820 --> 54:27.820]  Вот давайте, скажите, вот я вызвал сифт от V.
[54:27.820 --> 54:28.820]  Сифт от V.
[54:28.820 --> 54:34.820]  Как вы думаете, чем этот сифт закончится, если у меня mystical condition будет работать всегда?
[54:49.820 --> 54:51.820]  Ну типа того, да.
[54:51.820 --> 54:55.820]  А когда мы объединяем пустой список с уже существующим?
[54:55.820 --> 54:57.820]  Нет, есть разница.
[54:57.820 --> 55:00.820]  Дело в том, что когда мы первый вот сифт вызывали, да,
[55:00.820 --> 55:04.820]  то есть как бы сифт просто нам сообщает, что дорогая вершина V.
[55:04.820 --> 55:09.820]  Там с глубоким сожалению сообщаем вам, что ссылка на ваш автобус больше не валидна.
[55:09.820 --> 55:14.820]  Поэтому как бы при вот этом Relax Connect вам просто не с чем объединять.
[55:14.820 --> 55:16.820]  То есть вы просто подключаетесь.
[55:17.820 --> 55:19.820]  Вот.
[55:19.820 --> 55:24.820]  Поэтому Relax Connect Unite, это как бы это вы ему навесил лапшу на уши,
[55:24.820 --> 55:27.820]  что как бы вам не с чем объединять, а вам на самом деле...
[55:27.820 --> 55:33.820]  А на самом деле вы тут себе это сохранили там, называется автобусик.
[55:33.820 --> 55:36.820]  А потом как бы все собрали, ну да, вот.
[55:36.820 --> 55:40.820]  Ну вот тут вы достаете из кармана, собственно, автобус и подцепляете его.
[55:40.820 --> 55:42.820]  Лимузин мне круче звучит.
[55:42.820 --> 55:44.820]  Ну ничего, лимузин, я не знаю.
[55:44.820 --> 55:46.820]  Ну тут...
[55:46.820 --> 55:48.820]  Не, ну ладно, да, ладно.
[55:48.820 --> 55:52.820]  Ладно, если у вас в кармане будет лимузин, то окей, конечно, да.
[55:54.820 --> 55:55.820]  Вот, ну неважно.
[55:55.820 --> 55:57.820]  Так что вот такая вот разница.
[55:57.820 --> 56:02.820]  Нет, ну давайте, да, вот может показаться действительно, что если у нас mystical condition,
[56:02.820 --> 56:04.820]  выполняется всегда.
[56:06.820 --> 56:07.820]  Ну вот.
[56:07.820 --> 56:08.820]  Ну он называется прям, да.
[56:08.820 --> 56:11.820]  Хочется вообще сказать, что едва ли не там...
[56:11.820 --> 56:14.820]  Что едва ли не вершина В у нас...
[56:14.820 --> 56:19.820]  То есть вообще там этот сифт приведет к тому, что у вас будет вообще одна вершина с полным автобусом.
[56:20.820 --> 56:22.820]  Там с автобусом на два в степени.
[56:24.820 --> 56:26.820]  Да, но есть подозрение, что да, это...
[56:26.820 --> 56:28.820]  Все-таки это не совсем так.
[56:28.820 --> 56:32.820]  Мы как-то вызываем сифт, но мы не вызываем сифт от Childe никогда.
[56:32.820 --> 56:33.820]  Нет, ну...
[56:33.820 --> 56:35.820]  Нет, ну почему, нет, ну...
[56:36.820 --> 56:37.820]  Не, оно не совсем так.
[56:37.820 --> 56:40.820]  Ну нет, от Childe мы его, ну когда-нибудь мы его можем и вызвать, на самом деле.
[56:40.820 --> 56:41.820]  Вот.
[56:42.820 --> 56:43.820]  Но...
[56:45.820 --> 56:46.820]  Нет, ну то есть, да.
[56:46.820 --> 56:47.820]  Ну для...
[56:47.820 --> 56:48.820]  Да, ну в принципе нет.
[56:48.820 --> 56:51.820]  Ну когда-нибудь мы его посвапаем, особенно когда это станет плюс бесконечностью, да.
[56:52.820 --> 56:53.820]  Вот.
[56:53.820 --> 56:54.820]  Но в принципе, да.
[56:54.820 --> 56:55.820]  Заметьте, что он все-таки не все так быстро.
[56:55.820 --> 56:59.820]  То есть тогда, если mystical condition true, то мы сифт вызываем просто два раза.
[57:00.820 --> 57:01.820]  Вот.
[57:03.820 --> 57:08.820]  То есть действительно просто два раза у нас действительно сколько-то автобусов значит объединяется.
[57:08.820 --> 57:12.820]  В ложном вызове сифта мы тоже можем сделать ложный вызов сифта?
[57:13.820 --> 57:14.820]  Конечно.
[57:14.820 --> 57:15.820]  Это...
[57:15.820 --> 57:18.820]  Это вот прям вот рекурсия работает как написано, да.
[57:19.820 --> 57:21.820]  Да, тот и прикол, что да-да-да-да-да.
[57:21.820 --> 57:25.820]  Каждый рекурсивный сифт тоже вызывает внутри себя какие-то сифты.
[57:26.820 --> 57:27.820]  Так.
[57:28.820 --> 57:29.820]  Да, действительно.
[57:29.820 --> 57:33.820]  Вот слета нам не очень понятно действительно сколько элементов у нас тут может быть.
[57:33.820 --> 57:36.820]  Чему вообще такой быстрый сифт вообще может привести?
[57:36.820 --> 57:37.820]  Но давайте подумаем.
[57:37.820 --> 57:40.820]  А если бы сифт у нас действительно без mystical condition работал?
[57:40.820 --> 57:41.820]  Да.
[57:41.820 --> 57:42.820]  Просто вот такие mystical condition true.
[57:43.820 --> 57:44.820]  Давайте подумаем.
[57:44.820 --> 57:47.820]  А за какую асимптотику это бы работало?
[57:49.820 --> 57:50.820]  Не больше, чем за равным.
[57:50.820 --> 57:51.820]  Чего?
[57:51.820 --> 57:52.820]  Не больше, чем за равным.
[57:52.820 --> 57:53.820]  То есть не больше, чем была по next?
[57:53.820 --> 57:54.820]  Ну, не совсем.
[57:54.820 --> 57:57.820]  Если бы mystical condition true у нас бы как бы дерево было.
[57:57.820 --> 57:58.820]  Так что можно...
[57:58.820 --> 58:01.820]  Так что в принципе мы вынуждены заключить, что он может изо два в степени работать.
[58:01.820 --> 58:02.820]  Ну-ка давайте внимательно подумаем.
[58:06.820 --> 58:07.820]  Чего?
[58:11.820 --> 58:12.820]  Ну да.
[58:12.820 --> 58:16.980]  ну-ка давайте вот гиматино ну-ка в гиматино подумаем
[58:16.980 --> 58:41.780]  не а точно а точно это точно нет но я не знаю а точно почему
[58:41.780 --> 58:49.060]  мы убьем именно все нет то хорошо мы удалим один да у нас там удалится один
[58:49.060 --> 58:52.820]  сикей да ну понятно что нет ну как бы если у нас мистикл
[58:52.820 --> 58:58.220]  кондицион был ифт фолс да то конечно да мы бы удалили просто один сикей один
[58:58.220 --> 59:03.860]  автобус там это уже выясняли но вот но есть и мистикл кондицион равно true то
[59:03.860 --> 59:07.980]  как больше не знать что он будет там и из себя тут выкачивать прям все он же
[59:08.580 --> 59:14.620]  бесконечности выкачивать он там один раз вызовет сифт и все нет а впрочем знаете
[59:14.620 --> 59:18.420]  что ладно я думаю на самом деле есть уникальный способ как это в этом всем
[59:18.420 --> 59:24.660]  спокойно там спокойно разобраться как это давайте это преимулируем но давайте я
[59:24.660 --> 59:28.420]  нарисую какой-нибудь вот эти вот сейчас нужен трейдов дерево должно быть
[59:28.420 --> 59:32.740]  достаточно большое чтобы было все видно но достаточно маленькое чтобы тут это не
[59:32.740 --> 59:40.860]  окопались до вечера поэтому я выбираю ранг 4 вот ну мне так кажется что нормально
[59:40.860 --> 59:49.260]  будет да так ну поехали значит изначально что у нас есть сейчас я пока рисую идеальное
[59:49.260 --> 59:57.460]  дерево там так у меня в корне находится сикей там 5 с каким-нибудь рангом 4 так
[59:57.460 --> 01:00:06.660]  а в общем давайте я так значит сейчас как мне-то это тут скажет так дерево немножко перекошено
[01:00:06.660 --> 01:00:15.380]  надо рисовать вот вот я думаю вот так примерно его надо рисовать ладно пусть тут будет пятачок
[01:00:15.380 --> 01:00:28.660]  будет пятачок будет пятачок ранг его 4 так вот вот так
[01:00:28.660 --> 01:00:40.900]  значит что у нас тут тянут так что у нас теперь значит ну здесь у нас достаточно так но здесь у
[01:00:40.900 --> 01:00:51.300]  нас все просто так здесь у нас будет какой-нибудь элемент 19 допустим так что у нас тут еще здесь
[01:00:51.300 --> 01:01:02.260]  у нас будет элемент какой-нибудь там 8 допустим так вот тут надо рисовать так значит 8 давайте
[01:01:02.260 --> 01:01:14.580]  рисовать вот так так на хиты тут 8 пока еще и так тут у нас соответственно 15 так что у нас теперь
[01:01:14.580 --> 01:01:26.380]  еще есть так теперь у нас надо вот сюда наверное отправить элемент 10 вот чтобы он был 10 и тут
[01:01:26.380 --> 01:01:39.420]  он будет 10 так значит давайте так так тут у нас будет элемент ну допустим 12 тут у нас будет
[01:01:39.420 --> 01:01:58.700]  допустим 13 13 и 14 так может больше не рисовать так так хотя ладно четвертое дерево уже не
[01:01:58.700 --> 01:02:04.380]  поместится поэтому придется больше ничего не рисовать давайте хотя бы вот на нем этот сифт
[01:02:04.420 --> 01:02:16.220]  поэмулируем значит давайте смотреть так значит она читала да что мы не нарисовали мы нарисовали
[01:02:16.220 --> 01:02:25.740]  автобусы так но пока пока у нас все хорошо как бы как бы у нас в автобусе пока в каждом
[01:02:25.740 --> 01:02:33.820]  автобусе лежит один элемент так вот здесь вот здесь вот у нас один элемент 19 вот здесь у
[01:02:33.820 --> 01:02:40.600]  нас лежит один элемент 8 дам вот здесь у нас лежит элемент 15 ну и так далее и тому подобное
[01:02:40.600 --> 01:02:58.460]  да значит вот тут 10. так тут 13 и тут так так ну что что-то я забыл 12 но да все правильно
[01:02:58.460 --> 01:03:05.300]  да в дереве ранга 3 должно быть в идеальном дереве должно быть 8 автобусов да это называется
[01:03:05.300 --> 01:03:14.580]  автопарк ранга 3 да 8 автобусов 8 комфортабельных автобус вот комфортабельных автобусов с
[01:03:14.580 --> 01:03:21.740]  индивидуальными местами там вот ой да точно не то что только личного водителя не хватает
[01:03:21.740 --> 01:03:31.460]  да так но поехали смотрите и тут мы говорим значит ну просто так сифт мы не вызываем мы
[01:03:31.460 --> 01:03:36.780]  сифт вызываем только в экстракт мини сначала нам приходит экстракт мины говорит так вот и
[01:03:36.780 --> 01:03:41.340]  говорит так минимум не сказали что минимум у вас в этом дереве где у вас так ну давайте так есть
[01:03:41.340 --> 01:03:47.140]  корень есть автобус так в нем есть элемент так элемент поздравляю ты минимум значит мы
[01:03:47.140 --> 01:03:56.420]  отправляем эту пятерочку и достаем ее и так ура автобус пустой так окей вот говорит о ребят а
[01:03:56.420 --> 01:04:07.020]  тут еще экстракт мин минимум же все еще у вас так ну давайте пойдем в автобус и он пустой так что
[01:04:07.020 --> 01:04:13.140]  в этом месте происходит внимание до вызовов сифта перед вызовом сифта происходит следующее значит
[01:04:13.140 --> 01:04:23.340]  этот автобус исчезает вот то есть эти все ссылки теперь не валит но то есть и так ладно ссылки
[01:04:23.340 --> 01:04:29.260]  может быть там то есть ссылки ведут куда то значит сифт теперь от этой вершины говорит так он
[01:04:29.260 --> 01:04:35.540]  интуитивно на самом деле то есть интуитивно на самом деле вот в сифт отве можно написать строчку
[01:04:35.540 --> 01:04:49.620]  там в там бас равно там нул птр то есть понятно строчка ни на что не повлияет можно написать
[01:04:49.620 --> 01:05:00.420]  можно нет но как бы вот интуитивно можно так делать нет же мы здесь то есть мы как бы
[01:05:00.420 --> 01:05:04.900]  обратить внимание вот то есть как бы это то есть вн как бы от этого от нашего автобуса
[01:05:04.900 --> 01:05:14.180]  отключится но не мы вот и получается так значит мы запускаемся значит отлично мы теперь значит
[01:05:14.180 --> 01:05:23.100]  этот указатель теперь у нас отправляется в крестик вот а мы говорим так идем в next и
[01:05:23.660 --> 01:05:30.940]  что мы делаем так идем в next так но у него тоже датчет этот указатель отправляем крестик значит
[01:05:30.940 --> 01:05:38.380]  значит крестик крестик крестик крестик ну пока в общем ничего интересного тут крестик и тут
[01:05:38.380 --> 01:05:44.500]  крестик но вот значит тут мы говорим что ой а у нас оказывается next больше нету значит что мы
[01:05:44.500 --> 01:05:49.860]  в этом месте делали мы в этом месте обычно заявляли что у нас тут плюс бесконечность какая-нибудь
[01:05:49.860 --> 01:05:57.500]  вот и теперь остается только детей вот но теперь говорим что у нас оказывается ребенок меньше
[01:05:57.500 --> 01:06:08.820]  поэтому мы что теперь делаем мы теперь сваппаем то есть мы просто берем и сваппаем вот значит тут
[01:06:08.820 --> 01:06:17.420]  19 тут это вот бесконечность с крестиком вот но собственно бесконечности в общем крестик навсегда
[01:06:17.420 --> 01:06:28.620]  останется крестиком а вот тут 19 останется 19 так и после этого так после этого что мы говорим так
[01:06:28.620 --> 01:06:33.580]  после этого казалось бы мы должны были просто а теперь смотрите какая фишка то есть мы теперь
[01:06:33.580 --> 01:06:40.460]  говорим что у раз значит мы подключаемся сюда да мы тоже объявляем себе 19 кстати что приятно
[01:06:40.460 --> 01:06:57.460]  вот да да погоди но вот и но вот и но ты в принципе да по-хорошему говоря мы в этом
[01:06:57.460 --> 01:07:04.620]  месте еще и ребенку удаляли помните да но хотя обычно в это хотя обычно мы ребенку удалять
[01:07:04.620 --> 01:07:12.700]  будем только вот на самом деле в конце да то есть ну просто да сейчас вы увидите почему то есть
[01:07:12.700 --> 01:07:29.820]  вот где-то вот тут в конце мы скажем там есть чайлд иф инф вот так ну давайте вот можно так
[01:07:29.820 --> 01:07:37.340]  написать в принципе вот но в наша нота но то есть это просто просто будет не очень удобно
[01:07:37.340 --> 01:07:41.540]  потому что если мы сейчас его удалим то как бы придется вот этот вот второй сифт типа вызывать
[01:07:41.540 --> 01:07:47.740]  от пустой вершины это не очень хорошо итак что же у нас происходит тогда происходит у нас теперь
[01:07:47.740 --> 01:07:55.700]  следующее так если это допустим истекал кондицион тру тогда мы вызываемся сифт отсюда то есть
[01:07:55.700 --> 01:08:04.100]  что делает сифт сифт неожиданно отказывается от ссылки на этот автобусик и пытается значит
[01:08:04.100 --> 01:08:13.100]  это он прям вот крестик но обнаруживает что детей у него нет поэтому у нас тут плюс бесконечность
[01:08:13.100 --> 01:08:22.460]  вот значит соответственно после этого что мы тогда делаем мы тогда получается возвращаемся
[01:08:22.460 --> 01:08:28.580]  так и говорим и у нас на самом деле происходит печальная ситуация которая кстати в будущем
[01:08:28.580 --> 01:08:32.540]  в коде мы должны учесть у нас две плюс бесконечности
[01:08:32.540 --> 01:08:59.140]  но вот нет ну не совсем нет ну нет ну не совсем так нет на самом деле как бы нет
[01:08:59.140 --> 01:09:09.060]  вот из этой вершины автобус уже не 19 чего а также как здесь потому что вот именно в этом
[01:09:09.060 --> 01:09:15.660]  заключается условность этого кода потому что обратите внимание вот мы чтобы сам начать тоже
[01:09:15.660 --> 01:09:21.140]  первое что делаем сифт венек я что-то не пишу но вот а по хорошему то должен сказать что если этот
[01:09:21.140 --> 01:09:27.660]  венек существует вот тогда соответственно то есть я что-то не расписывал свой я тут не расписывал
[01:09:27.660 --> 01:09:34.900]  что если венек не существует то давайте там пишем себя плюс бесконечность да вот и здесь то
[01:09:34.900 --> 01:09:41.940]  же самое то есть идея в том что если по результату срелакс коннект включает себя еще проверку такую
[01:09:41.940 --> 01:09:50.100]  что если выяснилось что там плюс бесконечность то значит мы ничего не делаем точнее мы уничтожаем
[01:09:50.100 --> 01:10:02.180]  этих детей вот чего уничтожаем детей что не так господи нашу вы еще не привыкли к этому вот
[01:10:02.180 --> 01:10:11.580]  вот но обратите внимание что получилось получилось маленькая приятная вещь получилась вещь что этот
[01:10:11.580 --> 01:10:20.140]  автобус пока по камере пока еще не убился ведь он еще жив но давайте посмотрим что будет что
[01:10:20.140 --> 01:10:28.060]  будет дальше значит выше нам сказали так в общем короче вот 19 вот собственно даже элемент так
[01:10:28.060 --> 01:10:40.380]  мы говорим так но с 19 у нас тут что-то не то потому что заметим что во первых мы заметим что 19 мы
[01:10:40.380 --> 01:10:46.540]  вынуждены посвапать с восьмеркой так ну свапать я буду сейчас вот более просто вот таким красивым
[01:10:46.540 --> 01:11:02.180]  образом вот таким вот вот вот 19 с двумя жмуриками крестиками так вот соответственно и вот так но
[01:11:03.180 --> 01:11:08.620]  говорит так молодец послабал а теперь иди сюда
[01:11:08.620 --> 01:11:23.980]  да да да да да да правильно мы должны делать релакс коннект и мы это сделаем вот вот так
[01:11:23.980 --> 01:11:33.180]  так ой да сколько всего мы сделаем должны вот и теперь с числой совестью делаем сифт
[01:11:33.180 --> 01:11:41.100]  который неожиданно ну который неожиданно говорит нам шо этого сифта больше нету этой
[01:11:41.100 --> 01:11:47.420]  ссылки больше нету этой ссылки больше нету но хотя давайте разбираться да тут у нас крестик
[01:11:47.420 --> 01:11:54.140]  мы отправляемся сюда этого нету этого нету но значит тут у нас образуется плюс бесконечность
[01:11:54.140 --> 01:12:05.600]  до восьмерочка превращается в плюс бесконечность да вот так ну что у нас здесь происходит но на
[01:12:05.600 --> 01:12:13.300]  самом деле дамы тут у нас тут тоже происходит какой-то свапчик то есть ну очень ладно если вкратце
[01:12:13.300 --> 01:12:18.180]  на самом деле заметить что мы мы уже что-то раньше как бы то есть это все эмулировали на
[01:12:18.180 --> 01:12:23.300]  самом деле думаю вы уже догадывает еще можно это просто промотать и сказать что тут будет
[01:12:23.300 --> 01:12:40.820]  просто 15 с двумя жмуриками вот вот ну потому что просто то же самое правда вот так значит
[01:12:40.820 --> 01:12:50.020]  что но вот так и вот мы наконец но вот идти и теперь что у нас тогда происходит хорошо да
[01:12:50.020 --> 01:12:58.740]  вот хорошо здесь 19 здесь 15 свапать никого не надо но тогда идея теперь простая значит
[01:12:58.740 --> 01:13:11.420]  мы берем вот эту восьмерочку pushback мы ее к 15 вот сюда и конечно же не забыла но вот и тогда
[01:13:11.420 --> 01:13:18.900]  ссылочку рисуем сюда да и конечно же не забываем прописать что тут 15 то есть обратите внимание
[01:13:18.900 --> 01:13:26.860]  кстати ровно в этот в это оказывается ровно в этот момент элемент 8 испортился потому что до
[01:13:26.860 --> 01:13:36.340]  этого момента как бы у него псевдоним был адекватный но вот в этот момент он и быть перестал вот так ну
[01:13:36.340 --> 01:13:43.260]  к чему это с принципе а да то есть я могу по эмулировать дальше что будет происходить значит
[01:13:43.260 --> 01:13:50.900]  но вот значит что но что у нас тут дальше но на самом деле да то есть дальше происходит
[01:13:50.900 --> 01:13:59.140]  следующий да возвращаемся в корень да приходится обоже это свапать и там что-то мы еще из листа
[01:13:59.140 --> 01:14:02.900]  достанем но в принципе я думаю уже этого достаточно убедиться в том что пока ими
[01:14:02.900 --> 01:14:13.140]  тотального уничтожения не происходит видно да вот но тотально но давайте так действительно мы
[01:14:13.140 --> 01:14:22.020]  да мы видим что тотального уничтожения не происходит вот но те но те но те но тем не
[01:14:22.020 --> 01:14:27.860]  менее конечно на какие-то объединения происходит куча конечно очень сильно подредится то есть там
[01:14:27.860 --> 01:14:37.060]  вот под деревья ранга один вообще сожмутся бедные вот ну вот но там уже что-то еще произойдет но
[01:14:37.060 --> 01:14:42.500]  внимание вопрос давайте вот это вот идея давайте пока подумаем идея на будущее вот мы не спрашиваем
[01:14:42.580 --> 01:14:49.340]  как бы сколько у нас элементов попорчено до но мы спрашиваем а какова асимптуйчика
[01:14:49.340 --> 01:14:55.540]  вот за какое суммарное время работают все такие сифты
[01:15:05.540 --> 01:15:07.140]  вот плюс от чего
[01:15:13.140 --> 01:15:21.900]  но на самом деле да то есть обратите внимание что если мы делаем два рекурсивных вызова то то есть
[01:15:21.900 --> 01:15:27.700]  каждый сифт может сделать следующее он может либо объявить вершину плюс бесконечности что
[01:15:27.700 --> 01:15:38.100]  происходит ну не более чем н раз правда но не она от н раз либо значит либо объединить два автобусов
[01:15:38.100 --> 01:15:45.660]  но вот но правда ладно теоретически но теоретически он правда еще но или он еще
[01:15:45.660 --> 01:15:50.220]  может объединить автобус плюс бесконечности то есть но это то же самое что примерно удалить
[01:15:50.220 --> 01:15:58.180]  бесконечность но тогда вот не но тогда возникает оказывается неожиданное мистическое ощущение
[01:15:58.180 --> 01:16:03.340]  что оказывается у нас тогда все такие сифты суммарно работают за линию
[01:16:08.180 --> 01:16:16.580]  но вот чувствуете нет если мы есть у нас мистикл кондицион от прям тру
[01:16:16.580 --> 01:16:25.340]  то есть это потому что оказывается что мы любое действие то есть оплачиваем соответственно то
[01:16:25.340 --> 01:16:31.020]  есть получается объединением автобусов или уничтожением плюс бесконечности или создание
[01:16:31.880 --> 01:16:40.020]  нет просто идти-то на этом у нас просто будет базируется идея то есть конечно ну вот то есть
[01:16:40.020 --> 01:16:45.020]  тут вот но на самом деле спрашивается как можно то есть это как бы дает асимпотику от единицы но
[01:16:45.020 --> 01:16:51.220]  зато слишком жирное объединение да видите то есть конечно объединять можно еще жирнее тетические
[01:16:51.220 --> 01:16:56.900]  то есть но потому что нет можно было бы как бы наглеть и то есть как бы совсем идеали если бы
[01:16:56.900 --> 01:17:03.620]  там вызывали сифт просто вот пока пока нам плюс бесконечность не выдали тогда это тоже бы
[01:17:03.620 --> 01:17:09.620]  оказывается суммарно золоть единицы бы работала но но это как бы совсем идей то есть мы с ума сошли
[01:17:09.620 --> 01:17:18.860]  это там все нам сказали автобуса больше нет мы запаниковали уничтожили весь парк вот как это
[01:17:18.860 --> 01:17:23.900]  да потому что логика такая что такое уничтожить автобус сделать так чтобы автобуса не было так
[01:17:24.060 --> 01:17:30.020]  мы сказали так уничтожить автобус он нам уничтожил подогнал другой так автобус есть есть уничтожить
[01:17:30.020 --> 01:17:42.140]  автобус ну вот и так далее ну вот да вот но мы так с ума сходить не хотим вот так о время 10.30
[01:17:42.140 --> 01:17:47.900]  поэтому видимо как конкретно мы хотим сходить с ума мы пойдем поймем после переговора и так
[01:17:47.900 --> 01:17:53.340]  значит соответственно мы убедились что оказывается да есть у нас сифт там мистическое условие работает
[01:17:53.340 --> 01:17:59.340]  всегда то тогда действительно у нас тогда вообще все операции начнут неожиданно работать за единицу
[01:17:59.340 --> 01:18:09.420]  и наоборот если она не будет работать никогда то получится абсолютно классе но то получится
[01:18:09.420 --> 01:18:17.340]  абсолютно классический логариф вот тоже неплохо так и где же баланс
[01:18:17.340 --> 01:18:29.260]  но баланс на самом деле вот где то есть на самом деле вот но идея возникает такое что
[01:18:29.260 --> 01:18:38.180]  от хочется то есть делать развилку допустим не каждый шаг а где-нибудь например каждые 5 шагов
[01:18:38.180 --> 01:18:45.300]  или каждый 10 шагов но например потому что как это выглядит да что потому что как бы
[01:18:45.660 --> 01:18:52.460]  вообразить себе эти собственно вызовы этого условий то есть у нас как бы мы тут шли рекурсивно
[01:18:52.460 --> 01:19:00.300]  шли шли шли шли но вот но здесь мы не просто пошли а еще и неожиданно вызвались второй раз
[01:19:00.300 --> 01:19:08.060]  вот но и здесь мы тоже там шли шли шли может быть остановились одну прям шли шли неожиданно
[01:19:08.060 --> 01:19:20.060]  разошлись тут шли шли и вот поразворачивались вот так вот я утверждаю что то есть я утверждаю
[01:19:20.060 --> 01:19:29.020]  следующее что вот если вот вот вообразить себе вот такое дерево да тогда я утверждаю что если
[01:19:29.020 --> 01:19:40.900]  длина каждой вот этой цепочки до развилки не превосходит мистической константе r то тогда тогда
[01:19:40.900 --> 01:19:53.140]  у нас в инсорт можно заявить что он работает за отр вот ну то есть в переводе говоря то есть там
[01:19:53.140 --> 01:19:58.420]  то есть все там эти сифты и так далее работают суммарно за отр ну плюс что-то там еще
[01:19:59.980 --> 01:20:02.300]  вот такая вот у меня неожиданная идея
[01:20:02.300 --> 01:20:24.620]  нет это конечно можно да но это рекурсивные запуски напоминают
[01:20:24.620 --> 01:20:44.100]  получается так да вот у нас с вами получилось так но вот а тут я нота если цепочка тут была
[01:20:44.100 --> 01:20:52.220]  не больше чем то тогда утверждается что все это будет работать за но за соответственно
[01:20:52.260 --> 01:21:02.140]  спрашивается почему но основная идея действительно высекает какая что каждый раз когда вы делаете
[01:21:02.140 --> 01:21:07.260]  ответвление это означает что вот этот лист который вы тут получите в результате этого
[01:21:07.260 --> 01:21:17.660]  рекурсивного запуска он будет слить с соседом ну хочется сказать следующее что вот да вообрази
[01:21:17.660 --> 01:21:23.740]  себе дерево рекурсивных вызовов сфта предположим что вот у нас получился какой-то
[01:21:23.740 --> 01:21:31.500]  вот дерево и выяснилось что у нас у каждой цепочки цену цепочки между развилками длина не
[01:21:31.500 --> 01:21:38.940]  превосходит я утверждаю что тогда сон вот что тогда суммарное время суммарное время
[01:21:38.940 --> 01:21:44.460]  работы именно время работы да мы сейчас как бы не обсуждаем там какие-то эпселности и так далее
[01:21:44.460 --> 01:21:50.860]  оно будет от рн но от рн там плюс калитам сколько раз вызвали там лишние операции
[01:21:50.860 --> 01:21:57.860]  того вот что мне почему-то хочется утверждать
[01:21:57.860 --> 01:22:05.340]  почему же я такое утверждаю
[01:22:05.340 --> 01:22:23.100]  вот так нету это нету эрот у нас нету там будет со скорей лога 1 динамитная
[01:22:23.100 --> 01:22:27.540]  все он там связанным с ним скорее но давайте тут почему же так утверждаю
[01:22:27.540 --> 01:22:50.260]  но да и что ну тут
[01:22:53.100 --> 01:22:59.860]  но да ну сформулирован так да согласен количество да то есть
[01:22:59.860 --> 01:23:04.300]  каждое разветление соответствует фактически там объединению двух автобусов
[01:23:04.300 --> 01:23:28.300]  но да но действительно заметил да что там побольше да то есть да то есть но тут важно
[01:23:28.300 --> 01:23:33.020]  еще добавить что разветвление все в те может не быть вообще теоретически но у нас как бы
[01:23:33.020 --> 01:23:42.420]  заметим следующее что да то есть то есть что у нас действительно фактически все ветки
[01:23:42.420 --> 01:23:47.300]  ниже разветвления там первого разветвления они на самом деле работают за от р умножено
[01:23:47.300 --> 01:23:51.020]  количество разветвлений а их у нас немного потому что каждый разветвление уничтожает
[01:23:51.020 --> 01:23:58.700]  один автобус вот а самое верхнее вот эта штука она уничтожает автобус потому что нам потому что
[01:23:58.700 --> 01:24:05.980]  у нас сифт это фактически приказ называется уничтож корневой автобус ну просто просто
[01:24:05.980 --> 01:24:14.580]  по сути сифта да то есть получается до каждой эти там эроперации уничтожают получается
[01:24:14.580 --> 01:24:22.700]  идеи на уничтожают это получается как-то вот уничтожают автобус в том или ином виде вот
[01:24:22.700 --> 01:24:30.380]  понятно да вот ну и ну или но вот ну потому что дать но там конечно так а ворка мужствами
[01:24:30.380 --> 01:24:34.900]  обсуждали что возможно здесь никакой автобус уничтожен не будет потому что вы подошла
[01:24:34.900 --> 01:24:40.100]  выяснится что тут больше ничего нет но во первых это вот тогда это скорее всего мы выясним там
[01:24:40.100 --> 01:24:48.900]  за за едва ли не за от единицы это во первых а во вторых что самое главное мы тогда тогда уничтожим
[01:24:48.900 --> 01:24:54.100]  вершину в этом месте а уничтожить там сделаем плюс бесконечность а это тоже делается там не
[01:24:54.100 --> 01:25:03.020]  более чем н раз так что это так не так интересно вот то есть тогда получается видите то есть
[01:25:03.020 --> 01:25:08.140]  можно вот получается как-то вот подгонять то есть получается чем больше мы сделаем и тем больше у
[01:25:08.140 --> 01:25:16.980]  нас как дольше у нас будет работать условно insert но возможно это нам как-то с вами поможет тут
[01:25:17.020 --> 01:25:24.200]  немножко поможет сделать сиять на автобусы немножко лучше ну в том плане что нам очень
[01:25:24.200 --> 01:25:31.380]  хочется чтобы что нам хочется напомним нам очень хочется чтобы у нас не очень много товарищей
[01:25:31.380 --> 01:25:38.040]  сидела в каких-то неадекватных автобусах в данном случае у нас адекватный автобус это
[01:25:38.040 --> 01:25:43.220]  когда то есть автобус можно уже считать не адекватном если в нем есть кто-то кроме тебя
[01:25:43.220 --> 01:25:53.680]  вот да то есть фактически дай-то такая линия до личная машина имени меня такое да но
[01:25:53.680 --> 01:26:02.280]  но как сказать нет ну не согнет лимузин он как бы еще и длинный на самом деле да
[01:26:02.280 --> 01:26:09.040]  то есть не забыть лимузин это ощущение мне скорее такое что несколько людей туда все-таки посадили
[01:26:09.040 --> 01:26:12.880]  потому что вы того но та потом этих людей все-таки по одному доставали вы там остались один но это
[01:26:12.880 --> 01:26:21.140]  все равно неадекватная ситуация вот значит но на самом деле так вот но одна из идей действительно
[01:26:21.140 --> 01:26:27.380]  как тут что посокращать возникает такая то есть значит в мистикал кондиционе значит значит ну
[01:26:27.380 --> 01:26:35.140]  во первых там и вводим мистическую константу r которая будет равна 2 плюс 2 логарифма 1 делить
[01:26:35.280 --> 01:26:52.080]  вот то есть вот такая вот еще возникает идея вот и в мистикал кондиционе
[01:26:52.080 --> 01:27:09.140]  так вот мистикал кондиционе на самом деле первое что высенька значит но вот ну там понятно что
[01:27:09.140 --> 01:27:16.340]  во-первых но пусть это мистикал кондицион это функция да значит иф там ранка тв оказался
[01:27:16.340 --> 01:27:22.480]  меньше или даже меньше либо равно р ретторн фоллс
[01:27:22.480 --> 01:27:40.200]  ранг но у вас на ли нали ранка как-то по-другому обозначается
[01:27:40.200 --> 01:27:54.200]  а безобразие как кошмар как все меняется вот да вот мы ваши времена мы уже матрица обращали
[01:27:54.200 --> 01:28:00.960]  но не вы умеете обращать матрицу но не значит такое рамка да ладно
[01:28:00.960 --> 01:28:15.440]  ну хорошо хорошо ладно так в ловом слухе ладно не суть важная суть значит ранка тв меньше
[01:28:15.440 --> 01:28:25.560]  либо равно эрот хорошо да вот но значит первая идея которая возникает мы начинаем то есть мы тут
[01:28:25.560 --> 01:28:32.880]  начинаем развлекаться с автобусами начинаем развлекаться с автобусами только если у нас
[01:28:32.880 --> 01:28:40.840]  ранг достаточно большой то есть пока ранг мне то есть пока ранг не небольшой мы вообще ничего не
[01:28:40.840 --> 01:28:48.320]  делаем понятно да и в принципе логично да то есть тогда это приводит тому что если куча будет
[01:28:48.320 --> 01:28:53.800]  работать так что у нас все деревья почему-то будут оказываться мелкого ранга то есть там ранка не
[01:28:53.800 --> 01:28:59.080]  происходит там ранга р то понятно что все честная биномиальная куча обеспечит вам нужную асим
[01:28:59.080 --> 01:29:15.320]  точку правда вот так но какие же нам еще нужны условия какие же нот ноты какие же нам еще нужны
[01:29:15.320 --> 01:29:21.320]  условия вот ну тут мне уже приходится расчехлить по галочку
[01:29:21.320 --> 01:29:48.320]  ну да но то есть а в сейфте вот это вызывать до по модулю ну в принципе
[01:29:51.320 --> 01:29:58.360]  мы можем на автобус положить эр-монет и оплатить ими те сейфты на которых мы не вызывали
[01:29:58.360 --> 01:30:05.960]  мистикл condition если мы не будем вызывать мистикл condition раз а потом вызовем то
[01:30:05.960 --> 01:30:18.080]  эффект будет такой вот что мы оплачиваем монетками тогда нету да тут как-то не совсем нету
[01:30:18.080 --> 01:30:23.120]  фейсвене то есть бы да я тетич не могла быть такая идея но видимо тогда просто тогда вот
[01:30:23.120 --> 01:30:29.200]  возникает сложность как тогда считать действительно кого мы там с кем мы что сделали потому что дальше
[01:30:29.200 --> 01:30:34.880]  на самом потому что тут условия на самом деле абсолютно мистическая просто сейчас я вот сейчас
[01:30:34.880 --> 01:30:47.560]  я его просто воспроизведу если бы не не там вот еще круче значит барабанная дробь
[01:30:47.560 --> 01:30:58.800]  так сейчас не было мысли при нет по идее могу общеткать и кан эту шпаргалку истинный кран
[01:30:58.800 --> 01:31:04.800]  в общем да нет могу вам просто сразу сказать если там есть у кого там комп случайно значит
[01:31:04.800 --> 01:31:10.000]  смотрите шпаргалка берется очень просто значит открываете википедию значит страничка софт хип
[01:31:10.000 --> 01:31:18.480]  там ссылка ссылка чизэля там пдфов тогда вы просто скачиваете статью вот и все так вот так
[01:31:18.480 --> 01:31:29.320]  вот условия написано следующее значит дальше тут будет написано такое ритор значит ритор
[01:31:29.320 --> 01:31:42.600]  ранг значит внимание до сюда ранг от в процент 2 равно равно 1 или или да тут прям кот носях
[01:31:42.600 --> 01:32:03.600]  написан значит либо ранг от вы чайл да меньше чем мы минус один то есть то есть тут он начинает
[01:32:03.600 --> 01:32:09.880]  сливаться весьма неожиданно то есть он говорит так то что было аккуратненько да чтобы сливать
[01:32:09.880 --> 01:32:18.320]  прям не всегда он говорит так значит давайте так сливаемся если ранг ребенка прям уже если
[01:32:18.320 --> 01:32:24.520]  ранку мини это не как мой минус один а прям еще меньше значит по любому сливаем а если у меня
[01:32:24.520 --> 01:32:33.720]  пока дерево идеально то я сливаю то как бы сливается условно каждый второй вот то есть как бы
[01:32:33.720 --> 01:32:43.160]  то есть если но точнее так если ранг нечетный то он сливается всегда вот ну при условии конечно
[01:32:43.160 --> 01:32:55.600]  вот понятно да вот но вот но соответственно если он чётные ну тогда смотрим если у него как бы
[01:32:55.600 --> 01:33:02.280]  если у него ребенок ранг минус 1 то мы слияние то мы как бы внезапно развил с развилками не
[01:33:02.280 --> 01:33:09.280]  балуемся вот
[01:33:09.280 --> 01:33:32.760]  да именно то есть вот такая вот значит вот такая вот неожиданная заява
[01:33:32.760 --> 01:33:46.880]  смотрите это но вот это гарантирует но нет смотрите нет это но это это гарантирует что
[01:33:46.880 --> 01:33:52.760]  действительно нет это гарантирует то что у тебя получается на достаточно больших на больших
[01:33:52.760 --> 01:33:58.480]  высотах развилка будет либо в тебе либо в ребенке вот а то но вот то есть как бы длина
[01:33:58.480 --> 01:34:06.520]  р возникает только вот из этого на самом деле вот да дальше что-то считается немножко магии хотя
[01:34:06.520 --> 01:34:09.960]  вот начинаешь думать что может быть выяснится что действительно если бы там какую-нибудь вот
[01:34:09.960 --> 01:34:15.160]  переменную рекурсивную передавали может этого бы хватало просто доказательства сложнее бы вот
[01:34:15.160 --> 01:34:23.920]  тут пока ничего не гарантируем но значит смотрите значит смотрите мистическая утверждение сейчас
[01:34:23.920 --> 01:34:31.160]  начинается прямо сейчас будут прям мистические утверждения так это мы себе вообразили это мы
[01:34:31.160 --> 01:34:56.640]  убираем убираем вот видимо такое ключевое у нас утверждение говорит следующее значит
[01:34:56.640 --> 01:35:10.960]  мистическое утверждение значит размер вот этого вот листа на который указывает вершина в
[01:35:10.960 --> 01:35:29.280]  он оказывается не превосходит максимума из значит один и два степени вот ранка тв пополам
[01:35:29.280 --> 01:35:45.760]  минус р пополам где ранка тв пополам округлено куда-то нет а я четная ладно я наврал тот округление
[01:35:45.760 --> 01:35:58.040]  там вот вот так вот а вот теперь обязана уточнил уточнил уточнил вот здесь тоже округление вверх
[01:35:58.040 --> 01:36:13.200]  красота благо дать вот почему-то почему-то заява такая ну в принципе да логично если
[01:36:13.200 --> 01:36:20.600]  ранка не превосходит в то в общем-то логично да потому что у нас на этот лист никто не посягает
[01:36:20.600 --> 01:36:26.760]  вот ладно правда есть маленькая оговорчика потому что кто-то так скажет что естественно
[01:36:26.760 --> 01:36:33.320]  тут надо уточнять что имеется в виду потому что дело в том что как бы на этот лист указывает
[01:36:33.320 --> 01:36:37.880]  вершина ранга в но в принципе никто не сказал что не указывают вершины на этот лист не
[01:36:37.880 --> 01:36:45.000]  указывают вершины большего ранга правда поэтому естественно тут имеется в виду максимальный
[01:36:45.000 --> 01:36:55.040]  ранг вершины на который этот лист указывает ничего да конечно ну то есть я как бы в бедняльной
[01:36:55.040 --> 01:36:58.640]  куче бы сказали что у нас нет вот этих вот экземпляров на самом деле есть только одна
[01:36:58.640 --> 01:37:03.440]  вершина нужного ранга и вот типа вот то есть или соответственно тоже то есть получается каждый
[01:37:03.440 --> 01:37:09.280]  лист имеет какой-то рак да если мы себе такой вообразим то кстати можем еще и понять что ранг
[01:37:09.280 --> 01:37:21.640]  листа на самом деле никогда не уменьшается вот соответственно и так но теперь давайте да как же
[01:37:21.640 --> 01:37:27.600]  нот как же такое доказывать но я не знаю сам мистический для меня просто как это увидеть как-то
[01:37:27.600 --> 01:37:32.800]  доказывать ну понятно видимо сейчас индукцию надо какую-то писать правда ну база очевидно
[01:37:32.800 --> 01:37:38.800]  если ранг вот такой то как бы без вариантов да то есть если ранг не происходит это ну вариантов нет
[01:37:38.800 --> 01:37:46.680]  но предположим что ранг не происходит тогда заметим что у нас размер листа по любому не
[01:37:46.680 --> 01:37:52.440]  более чем один потому что мы тут вообще никаких развилок не делаем но это классика знаете как-то
[01:37:52.440 --> 01:37:59.000]  как у астера было один водитель автобуса израсходовал сэкономил за месяц 89 литров бензина
[01:37:59.000 --> 01:38:05.240]  а второй вообще никуда не ездил и никого не возил поэтому сэкономил бензина в 30 раз больше
[01:38:05.240 --> 01:38:13.400]  угадать угадайте сколько израсходовал первый если там им выдают одинаково кончим понятно вот
[01:38:13.400 --> 01:38:19.000]  вот значит так значит соответственно если у нас эрто развилок никаких нет поэтому в общем-то
[01:38:19.000 --> 01:38:26.840]  размер листа не более чем один и тогда вот это все выполнено более того при ранге на самом деле
[01:38:26.840 --> 01:38:35.800]  видим что вот эта штука и единицы это одно и то же отлично говорим и так значит что тогда и так
[01:38:35.800 --> 01:38:44.760]  давайте то есть переходить тогда пусть у нас ранг значит пусть у нас там ранга тв равно допустим
[01:38:44.800 --> 01:38:50.980]  как так но давайте рассмотрим свойепт но какие у нас бывает случая бывает случаи когда
[01:38:50.980 --> 01:39:03.560]  к нен känод допустим когда но давайте предположим что ка у нас допустим делится на два но бывают
[01:39:03.560 --> 01:39:10.920]  informs destinations делится на два и когда к мне делятся на два такто тогда давайте думать то есть как
[01:39:10.920 --> 01:39:14.920]  как этот лист сформировался в вершине k, то есть помним,
[01:39:14.920 --> 01:39:18.920]  у нас каждый лист у нас формируется в тефте немножко
[01:39:18.920 --> 01:39:20.920]  с нуля, правда?
[01:39:20.920 --> 01:39:22.920]  Ну можно себе такое вообразить, правда?
[01:39:22.920 --> 01:39:24.920]  Вот.
[01:39:24.920 --> 01:39:27.920]  То есть давайте себе вообразим, как же он формировался?
[01:39:27.920 --> 01:39:31.920]  То есть мы тут вызвались, значит, вызвались из next,
[01:39:31.920 --> 01:39:34.920]  причем вызвались из next, мы видимо в тот момент,
[01:39:34.920 --> 01:39:38.920]  то есть вызвались из next, причем понимаем, что
[01:39:38.920 --> 01:39:45.920]  ранг от, значит, white child, видимо, меньше либо равен k-2.
[01:39:45.920 --> 01:39:47.920]  Логично, да?
[01:39:50.920 --> 01:39:51.920]  Вот.
[01:39:51.920 --> 01:39:53.920]  Но тогда что мы получаем?
[01:39:53.920 --> 01:39:57.920]  Тогда получается, мы вызвались рекурсивно от него,
[01:39:57.920 --> 01:40:01.920]  получили лист вот такого размера.
[01:40:01.920 --> 01:40:03.920]  Понимаете, да?
[01:40:03.920 --> 01:40:07.920]  То есть получили лист размера 2 в степени, получается,
[01:40:07.920 --> 01:40:10.920]  получается, k попало там, получается,
[01:40:10.920 --> 01:40:14.920]  там не происходящее там 2 в степени k-2 пополам,
[01:40:14.920 --> 01:40:17.920]  минус r пополам, это вот первый лист.
[01:40:17.920 --> 01:40:23.920]  Мы его себе записали и вызвали второй сифт, правда?
[01:40:23.920 --> 01:40:25.920]  Понятно, да?
[01:40:25.920 --> 01:40:27.920]  Вот.
[01:40:27.920 --> 01:40:30.920]  Но тогда получается, что второй сифт тоже выдал нам
[01:40:30.920 --> 01:40:33.920]  лист не более чем такой, поэтому получается, надо
[01:40:33.920 --> 01:40:36.920]  это домножить на 2.
[01:40:36.920 --> 01:40:39.920]  То есть получается, значит, в нашем листе не более
[01:40:39.920 --> 01:40:42.920]  чем вот столько элементов.
[01:40:42.920 --> 01:40:46.920]  Но на самом деле умножить на 2, это то же самое, как
[01:40:46.920 --> 01:40:48.920]  здесь прибавить единичку.
[01:40:48.920 --> 01:40:50.920]  Ну, прибавить единичку, это то же самое, как убить
[01:40:50.920 --> 01:40:52.920]  вот эту двоечку.
[01:40:52.920 --> 01:40:55.920]  Получается в точности 2 в степени k пополам, минус r
[01:40:55.920 --> 01:40:59.920]  пополам, кайфец, да?
[01:40:59.920 --> 01:41:01.920]  Вот, понятно?
[01:41:01.920 --> 01:41:03.920]  Вот.
[01:41:03.920 --> 01:41:07.920]  Так же получается, да, если k делилось на 2, то
[01:41:07.920 --> 01:41:09.920]  действительно никаких проблем нет.
[01:41:09.920 --> 01:41:11.920]  Вот.
[01:41:11.920 --> 01:41:14.920]  Но давайте попробуем еще второй аккуратненький
[01:41:14.920 --> 01:41:15.920]  нот.
[01:41:15.920 --> 01:41:17.920]  И теперь получается второй аккуратненький переход,
[01:41:17.920 --> 01:41:21.920]  если у нас k не делится на 2.
[01:41:21.920 --> 01:41:24.920]  Что у нас тогда получается?
[01:41:24.920 --> 01:41:27.920]  Так.
[01:41:27.920 --> 01:41:31.920]  Ну, нот, тогда у нас действительно возникают проблемы.
[01:41:31.920 --> 01:41:34.920]  Потому что shift тогда будет вызван заведомо-заведомо,
[01:41:34.920 --> 01:41:37.920]  и на этот ранг у нас никаких вот таких ограничений
[01:41:37.920 --> 01:41:40.920]  нет, правда?
[01:41:40.920 --> 01:41:42.920]  Вот.
[01:41:42.920 --> 01:41:44.920]  Но, правда, есть маленькая нот.
[01:41:44.920 --> 01:41:46.920]  Поэтому получая нот.
[01:41:46.920 --> 01:41:49.920]  Но здесь тогда получается, тогда размер у нас не
[01:41:49.920 --> 01:41:53.920]  происходит 2 на 2 в степени, но на этот раз k минус
[01:41:53.920 --> 01:41:57.920]  1 пополам, минус r пополам.
[01:41:57.920 --> 01:42:00.920]  Ну, k минус 1 пополам уже делится на 2, да?
[01:42:00.920 --> 01:42:04.920]  Вот.
[01:42:04.920 --> 01:42:05.920]  Да.
[01:42:05.920 --> 01:42:07.920]  Но, с другой стороны, что это такое у нас получается?
[01:42:07.920 --> 01:42:11.920]  Это равно, на самом деле, 2 в степени k плюс 1 пополам.
[01:42:11.920 --> 01:42:13.920]  Значит, минус r пополам.
[01:42:13.920 --> 01:42:16.920]  Но k плюс 1 пополам это в точности 2 в степени.
[01:42:16.920 --> 01:42:19.920]  То есть, k плюс 1 пополам это в точности k пополам
[01:42:19.920 --> 01:42:22.920]  округленный вех, потому что на этот раз мы пользуемся
[01:42:22.920 --> 01:42:24.920]  тем, что k нечетно.
[01:42:24.920 --> 01:42:27.920]  Понимаете, да?
[01:42:27.920 --> 01:42:29.920]  Так.
[01:42:29.920 --> 01:42:30.920]  Ну, что мы тогда?
[01:42:30.920 --> 01:42:31.920]  Ну, вот.
[01:42:31.920 --> 01:42:35.920]  Но тогда получается, что, ой, утверждение доказано.
[01:42:35.920 --> 01:42:39.920]  Вогезапно, да?
[01:42:39.920 --> 01:42:42.920]  Чего?
[01:42:42.920 --> 01:42:45.920]  Можете повторить, пожалуйста, для нечетного k?
[01:42:45.920 --> 01:42:47.920]  Значит, очень просто.
[01:42:47.920 --> 01:42:51.920]  Ну, для нечетного k мы вызвали 2 сифта.
[01:42:51.920 --> 01:42:52.920]  В худшем случае.
[01:42:52.920 --> 01:42:53.920]  То есть, вызвали 2 сифта.
[01:42:53.920 --> 01:43:03.920]  Каждый сифт дал нам размер не более чем вот такой.
[01:43:03.920 --> 01:43:06.920]  Но округление вверх мы здесь аккуратненько снимаем,
[01:43:06.920 --> 01:43:11.920]  потому что k минус 1 – это четное число.
[01:43:11.920 --> 01:43:13.920]  Но, соответственно, умножить на 2 – это то же самое,
[01:43:13.920 --> 01:43:14.920]  что прибавить здесь 1.
[01:43:14.920 --> 01:43:17.920]  Поэтому здесь просто получается k плюс 1 пополам.
[01:43:17.920 --> 01:43:20.920]  Но теперь заметим, что k плюс 1 пополам – это в точности
[01:43:20.920 --> 01:43:21.920]  пополам, округленные вверх.
[01:43:21.920 --> 01:43:22.920]  Все.
[01:43:22.920 --> 01:43:27.920]  То есть, вот такая вот, на самом деле, аккуратненькая
[01:43:27.920 --> 01:43:28.920]  оценка.
[01:43:28.920 --> 01:43:29.920]  А?
[01:43:29.920 --> 01:43:34.920]  А у нас условие так написано.
[01:43:34.920 --> 01:43:47.920]  Нет, то есть, я здесь рассматривал только случаи, когда
[01:43:47.920 --> 01:43:50.920]  у нас, как бы, наш список образовался с помощью
[01:43:50.920 --> 01:43:51.920]  mystical condition.
[01:43:51.920 --> 01:43:52.920]  То есть, через объединение.
[01:43:52.920 --> 01:43:57.920]  Потому что, если mystical condition не было, то тогда этот
[01:43:57.920 --> 01:44:00.920]  лист взялся из меньшего ранга и, как следствие,
[01:44:00.920 --> 01:44:01.920]  обладает меньшим размером.
[01:44:01.920 --> 01:44:14.920]  У child и next ранги одинаковые.
[01:44:14.920 --> 01:44:15.920]  Вот.
[01:44:15.920 --> 01:44:16.920]  Так что тут неглобально.
[01:44:16.920 --> 01:44:17.920]  Вот.
[01:44:17.920 --> 01:44:20.920]  Так что можно child, можно next.
[01:44:20.920 --> 01:44:23.920]  Так что вот такая получается радость.
[01:44:23.920 --> 01:44:26.920]  То есть, вот тут предлагается такая вот, предлагается
[01:44:26.920 --> 01:44:29.920]  вот такая вот не очень хитрая роспись.
[01:44:29.920 --> 01:44:30.920]  Вот.
[01:44:30.920 --> 01:44:33.920]  Но теперь возникает тогда вопрос.
[01:44:33.920 --> 01:44:34.920]  Хорошо.
[01:44:34.920 --> 01:44:38.920]  То есть, размер листа каждой вершины, там ранга больше
[01:44:38.920 --> 01:44:41.920]  чем r, он получается не более, чем вот такой.
[01:44:41.920 --> 01:44:45.920]  Но тогда, теперь, тогда это дает нам возможность
[01:44:45.920 --> 01:44:48.920]  попробовать каким-то образом оценить, а сколько у нас
[01:44:48.920 --> 01:44:51.920]  вообще испорченных ключей.
[01:44:51.920 --> 01:44:53.920]  Ну, заметим.
[01:44:53.920 --> 01:44:55.920]  Ну, заметим, что испорченные.
[01:44:55.920 --> 01:44:57.920]  Ну, в принципе, можно считать это простоты.
[01:44:57.920 --> 01:44:59.920]  Просто сказать, что, то есть, видимо, можно считать,
[01:44:59.920 --> 01:45:02.920]  что испорченными являются все ключи, которые вот все
[01:45:02.920 --> 01:45:05.920]  вот в эти листы попали.
[01:45:05.920 --> 01:45:08.920]  Понятно, да?
[01:45:08.920 --> 01:45:09.920]  Вот.
[01:45:09.920 --> 01:45:12.920]  Ну, давайте смотреть.
[01:45:12.920 --> 01:45:15.920]  Но теперь, но тогда получается, значит, внимание.
[01:45:15.920 --> 01:45:17.920]  Значит, сейчас просто немножко алгебры.
[01:45:17.920 --> 01:45:18.920]  Значит, суммируем.
[01:45:18.920 --> 01:45:20.920]  Так, значит, получается, суммируем ранги.
[01:45:20.920 --> 01:45:24.920]  То есть, суммируем k равно r плюс один.
[01:45:24.920 --> 01:45:27.920]  До, до чего мы суммируем?
[01:45:27.920 --> 01:45:32.920]  Ну, ранги у нас не более чем.
[01:45:32.920 --> 01:45:35.920]  Ну, давайте я вот напишу r, который у меня будет лог
[01:45:35.920 --> 01:45:36.920]  2n округленные вниз.
[01:45:36.920 --> 01:45:39.920]  Ну, просто для удобства.
[01:45:39.920 --> 01:45:40.920]  Так.
[01:45:40.920 --> 01:45:44.920]  Тогда получается, размер листа в каждой такой вершине
[01:45:44.920 --> 01:45:46.920]  у нас какой?
[01:45:46.920 --> 01:45:47.920]  Какой-то.
[01:45:47.920 --> 01:45:53.920]  Значит, не более чем 2 в степени вот это вот k пополам
[01:45:53.920 --> 01:45:58.920]  минус r пополам.
[01:45:58.920 --> 01:46:00.920]  Ну, теперь выескать вопрос.
[01:46:00.920 --> 01:46:04.920]  А сколько у нас может быть вершин ранга?
[01:46:04.920 --> 01:46:11.920]  Ранга k.
[01:46:11.920 --> 01:46:15.920]  Сколько у нас вообще в принципе в куче может быть вершин
[01:46:15.920 --> 01:46:18.920]  ранга k?
[01:46:18.920 --> 01:46:22.920]  Да, n делить на 2 в степени k, потому что напоминаю,
[01:46:22.920 --> 01:46:27.920]  как бы, как бы 2 в степени, 2 в степени k вершин или светлый
[01:46:27.920 --> 01:46:29.920]  образ их никто не отменял.
[01:46:29.920 --> 01:46:31.920]  Уж светлый образ точно.
[01:46:31.920 --> 01:46:33.920]  Вот.
[01:46:33.920 --> 01:46:38.920]  2 в степени k получается.
[01:46:38.920 --> 01:46:41.920]  Так.
[01:46:41.920 --> 01:46:42.920]  Так.
[01:46:42.920 --> 01:46:45.920]  Ну, давайте вот это вот суммируем.
[01:46:45.920 --> 01:46:50.920]  Но на самом деле это не более чем, но на самом деле
[01:46:50.920 --> 01:46:53.920]  вот это округление можно по идее сразу убить, правда?
[01:46:53.920 --> 01:46:57.920]  Ну, а симпатически его можно убить, потому что можно
[01:46:57.920 --> 01:47:00.920]  считать, что это там не более чем k пополам плюс 1.
[01:47:00.920 --> 01:47:03.920]  Это умножить нам не более, жить не более чем в 2 раза,
[01:47:03.920 --> 01:47:04.920]  правда?
[01:47:04.920 --> 01:47:06.920]  Ну, давайте я так вот для простоты напишу.
[01:47:06.920 --> 01:47:07.920]  Поэтому я пишу так.
[01:47:07.920 --> 01:47:13.920]  2n и сумма по всем k от r плюс 1 до вот этого вот r, допустим,
[01:47:13.920 --> 01:47:18.920]  большого, 2 в степени k пополам, минус r пополам, еще и
[01:47:18.920 --> 01:47:19.920]  минус k.
[01:47:19.920 --> 01:47:22.920]  Ну, поделить на 2 степень k, это вычесть k внутри степени,
[01:47:22.920 --> 01:47:24.920]  правда?
[01:47:24.920 --> 01:47:27.920]  Так.
[01:47:27.920 --> 01:47:32.920]  То есть, в переводе говоря, это нод, то есть давайте я
[01:47:32.920 --> 01:47:33.920]  так и напишу.
[01:47:33.920 --> 01:47:40.920]  2n, сумма по всем k нод, то есть 2n делить на 2 в степени
[01:47:40.920 --> 01:47:47.920]  r пополам, и тут мы суммируем по k от, значит, r плюс 1
[01:47:47.920 --> 01:47:52.920]  до r, 2 в степени, минус k пополам.
[01:47:52.920 --> 01:47:55.920]  Так.
[01:47:55.920 --> 01:48:00.920]  Так, ну, что мы здесь заметим?
[01:48:00.920 --> 01:48:04.920]  Ну, здесь заметим маленькую приятную вещь, что вот эта
[01:48:04.920 --> 01:48:08.920]  вот сумма, если я тут даже r заменю нод, так, ну, то
[01:48:08.920 --> 01:48:11.920]  есть на самом деле она не превосходит.
[01:48:11.920 --> 01:48:19.920]  2n на 2 в степени пополам умножить на 2, значит, 2 в степени
[01:48:19.920 --> 01:48:23.920]  минус r пополам, плюс 2 в степени, так вот, да, тут
[01:48:23.920 --> 01:48:29.920]  минус r пополам, минус r плюс 1 пополам.
[01:48:29.920 --> 01:48:32.920]  Так.
[01:48:32.920 --> 01:48:35.920]  Так, вот давайте внимательно посмотрим и подумаем, откуда
[01:48:35.920 --> 01:48:45.920]  я это взял.
[01:48:45.920 --> 01:48:50.920]  Вот действительно, откуда я это взял.
[01:48:50.920 --> 01:48:53.920]  Нет, ну, заметь так, это на самом деле геометрическая
[01:48:53.920 --> 01:48:54.920]  прогрессия.
[01:48:54.920 --> 01:48:57.920]  Только, к сожалению, ну, мы знаем, что если бы у нас
[01:48:57.920 --> 01:49:00.920]  была геометрическая прогрессия с шаром 1,2, то есть у нас
[01:49:00.920 --> 01:49:03.920]  есть прогрессия вида a плюс a пополам плюс a на 4,
[01:49:03.920 --> 01:49:07.920]  плюс a на 8, плюс и так далее, мы знаем, что это меньше
[01:49:07.920 --> 01:49:09.920]  либо равно 2a.
[01:49:09.920 --> 01:49:12.920]  Логично, да?
[01:49:12.920 --> 01:49:15.920]  Но здесь у нас, правда, здесь у нас шаг, правда, не
[01:49:15.920 --> 01:49:20.920]  одна вторая, а один делик на корень из двух.
[01:49:20.920 --> 01:49:23.920]  Ну, потому что у нас показатели степени, видите, они уменьшаются
[01:49:23.920 --> 01:49:27.920]  не на один, на каждом шаге, на одну вторую.
[01:49:27.920 --> 01:49:29.920]  Ну, тогда у меня идея такая, а давайте я просто выпишу первые
[01:49:29.920 --> 01:49:32.920]  два слагаемых и скажу, что тогда, то есть разобью эту
[01:49:32.920 --> 01:49:37.920]  прогрессию на, как бы, на, как бы, каждое второе
[01:49:37.920 --> 01:49:42.920]  слагаемое и каждое второе слагаемое.
[01:49:42.920 --> 01:49:44.920]  И тогда я просто выписал вот это и вот это.
[01:49:44.920 --> 01:49:51.920]  Вот все.
[01:49:51.920 --> 01:49:57.920]  Чего?
[01:49:57.920 --> 01:50:00.920]  А, да, да, да, хорошо.
[01:50:00.920 --> 01:50:01.920]  Давайте так сделаем.
[01:50:02.920 --> 01:50:05.920]  Так, значит, как-то это надо тогда.
[01:50:05.920 --> 01:50:07.920]  Минус r плюс 1 пополам.
[01:50:07.920 --> 01:50:09.920]  И тут r плюс 2.
[01:50:09.920 --> 01:50:11.920]  Спасибо.
[01:50:11.920 --> 01:50:13.920]  Вот, хорошо, хорошо, хорошо.
[01:50:13.920 --> 01:50:15.920]  Так, к чему надо?
[01:50:15.920 --> 01:50:16.920]  Ну вот.
[01:50:16.920 --> 01:50:18.920]  Ну и к чему нас это приводит?
[01:50:18.920 --> 01:50:21.920]  Ну, на самом деле, если прям подогнать, то получается,
[01:50:21.920 --> 01:50:23.920]  то есть n поделить на 2.
[01:50:23.920 --> 01:50:26.920]  Ну, давайте я тут 2 в степенеер пополам сюда вынесу.
[01:50:26.920 --> 01:50:28.920]  У меня тут образуется 2 в степенеер.
[01:50:28.920 --> 01:50:34.920]  Вот тогда образуется 2 умножить на 2 умножить на,
[01:50:34.920 --> 01:50:38.920]  значит, в скобочках 2 в степени 1 вторая,
[01:50:38.920 --> 01:50:49.920]  минус, конечно, плюс 2 в степени минус даже 1.
[01:50:49.920 --> 01:50:55.920]  Вот.
[01:50:55.920 --> 01:50:59.920]  Чего?
[01:50:59.920 --> 01:51:03.920]  Ну, в смысле, вот отсюда?
[01:51:03.920 --> 01:51:07.920]  Что-что?
[01:51:07.920 --> 01:51:09.920]  А, вот здесь?
[01:51:09.920 --> 01:51:12.920]  Ну, я просто сказал, что тут 2 в степени минус r пополам.
[01:51:12.920 --> 01:51:19.920]  Вот из этих слагаемых я просто сразу сюда вынесу.
[01:51:19.920 --> 01:51:22.920]  Вот.
[01:51:22.920 --> 01:51:30.920]  Так что получается вот такая вот штука.
[01:51:30.920 --> 01:51:35.920]  Вот эта скобка не будет.
[01:51:35.920 --> 01:51:39.920]  Ну, давайте так.
[01:51:39.920 --> 01:51:43.920]  Ну, кстати, да.
[01:51:43.920 --> 01:51:48.920]  Самое тупое, что, в общем, короче, это не происходит.
[01:51:48.920 --> 01:51:51.920]  8n делить на 2 в степенеер.
[01:51:51.920 --> 01:51:53.920]  Ну, давайте самое тупое, да.
[01:51:53.920 --> 01:51:55.920]  Равно n делить на 2 в степени r минус 3.
[01:51:55.920 --> 01:51:58.920]  Да, нет, я просто испугался, что у автора точнее оценка,
[01:51:58.920 --> 01:51:59.920]  потому что понял, что нет.
[01:51:59.920 --> 01:52:04.920]  Просто у автора, на самом деле, ровно такая.
[01:52:04.920 --> 01:52:07.920]  То есть он говорит, то есть он теперь говорит, заметим,
[01:52:07.920 --> 01:52:12.920]  что вот при вот таком mystical condition'е испорченных элементов,
[01:52:12.920 --> 01:52:16.920]  то есть элементах во всех, значит, автобусах там каких-то
[01:52:16.920 --> 01:52:19.920]  какого-то неадекватного ранга, значит, оказывается,
[01:52:19.920 --> 01:52:22.920]  не более чем n поделить на 2 в степени r минус 3.
[01:52:22.920 --> 01:52:27.920]  Но вам остается только аккуратненько подставить там в качестве
[01:52:27.920 --> 01:52:33.920]  r вот это и убедиться, что уж epsilon n там и не пахнет.
[01:52:33.920 --> 01:52:35.920]  Ну, даже давайте в этом убедимся.
[01:52:35.920 --> 01:52:37.920]  Может быть, потому что, на самом деле, по-моему,
[01:52:37.920 --> 01:52:39.920]  тут, возможно, даже с запасом немножко поработали.
[01:52:39.920 --> 01:52:45.920]  Смотрите, тут какая красота получилась.
[01:52:45.920 --> 01:52:50.920]  Вот, значит, давайте, то есть n делить на 2 в степени
[01:52:50.920 --> 01:52:59.920]  минус 1 плюс 2 округленные вверх логарифом 1 делить на epsilon.
[01:52:59.920 --> 01:53:03.920]  Ну, оцениваем сверху это как убираем вот это округление.
[01:53:03.920 --> 01:53:08.920]  Значит, это 2n поделить на 2 в степени 2 логарифма двоичных
[01:53:08.920 --> 01:53:11.920]  1 делить на epsilon.
[01:53:11.920 --> 01:53:16.920]  Это равно к чему?
[01:53:16.920 --> 01:53:18.920]  Это равно к чему?
[01:53:18.920 --> 01:53:24.920]  Это 2n поделить на 1 делить на epsilon и еще и в квадрате.
[01:53:24.920 --> 01:53:28.920]  То есть это, на самом деле, равно 2 epsilon квадрат n.
[01:53:28.920 --> 01:53:32.920]  Но это меньше либо равно epsilon n, потому что epsilon не
[01:53:32.920 --> 01:53:40.920]  превосходит 1 и 2.
[01:53:40.920 --> 01:53:45.920]  Но так вот, да, есть ощущение, что все там, что как бы, то есть запасец есть.
[01:53:45.920 --> 01:53:49.920]  Вот.
[01:53:49.920 --> 01:53:52.920]  Так что, ну, что я вам могу сказать?
[01:53:52.920 --> 01:53:56.920]  Мы, походу, победили.
[01:53:56.920 --> 01:53:59.920]  И это при том, что, более того, мы совсем, более того, автор
[01:53:59.920 --> 01:54:04.920]  настаивал на еще одной важной детали, которую мы сегодня проигнорировали.
[01:54:04.920 --> 01:54:06.920]  Значит, автор настаивает на важные детали.
[01:54:06.920 --> 01:54:11.920]  Когда мы делаем вот экстракт-мин, он говорит, вы сифт просто так не запускайте.
[01:54:11.920 --> 01:54:16.920]  Там требовалось условие, что прежде чем запускать сифт,
[01:54:16.920 --> 01:54:18.920]  проверьте, сколько детей у корня.
[01:54:18.920 --> 01:54:23.920]  Если детей меньше, чем его ран пополам, а убить-ка вы всех,
[01:54:23.920 --> 01:54:27.920]  то есть тогда лучше создайте, тогда, говорит, давайте из этих детей
[01:54:27.920 --> 01:54:29.920]  создайте кучу и вмешьте ее.
[01:54:29.920 --> 01:54:33.920]  Мы даже в прошлый раз с вами обсуждали, что, в общем-то, это тоже нам погоды не сделает.
[01:54:34.920 --> 01:54:43.920]  В тот момент, когда мы заказывали, что у нас все расстояние между развилками будет больше, чем Р.
[01:54:43.920 --> 01:54:50.920]  Ну, там, ну, догадайтесь, такое утверждение такое, что если у вершины ран больше, чем Р,
[01:54:50.920 --> 01:54:57.920]  то как бы развилка будет либо непосредственно в самой вершине, либо в ее ребенке.
[01:54:57.920 --> 01:55:06.920]  Да, то есть сам Р у нас возникнет, то есть у нас как бы длина Р только хвосты.
[01:55:06.920 --> 01:55:16.920]  Да, да, ну, то есть, то есть, возможно, это и сыкло, что, то есть, скорее всего, то есть, там, то есть, то есть, есть подозрение,
[01:55:16.920 --> 01:55:21.920]  что как угодно можно, может быть, даже на самом деле, если бы мы там, вот, как вы вот предлагали там, вот, действительно,
[01:55:21.920 --> 01:55:29.920]  если глубина рекурсии делится на Р, то давайте развилку делать, то есть, скорее, возможно, так тоже сработает,
[01:55:29.920 --> 01:55:34.920]  но просто это бы, ну, вот, ну, и желательно, вот, может быть, вот такую отсечку еще делать.
[01:55:34.920 --> 01:55:43.920]  Вот, ну, то есть, нет, то есть, фактически, да, то есть, нам там, то есть, такое, ну, возможно, там автор просто выбрал конкретную,
[01:55:43.920 --> 01:55:48.920]  собственно, потому что ее там проще доказывать, не знаю, ну, то есть, тут не знаю, тут как бы вещь такая,
[01:55:48.920 --> 01:55:56.920]  то есть, как бы тут многим людям сложно сказать, значит, каким образом автор к этому пришел, то есть, я вам даже больше скажу,
[01:55:56.920 --> 01:56:03.920]  там есть, то есть, на самом деле, глобально есть такой прикол, я вам сейчас скажу, что действительно структура считается в науке сложной,
[01:56:03.920 --> 01:56:11.920]  да, то есть, мы вроде даже не сильно застрелились, но она сложная, вот, то есть, там, то есть, более того,
[01:56:11.920 --> 01:56:19.920]  то есть, настолько сложной, что более того, там есть работы на тему того, называется soft hip более легкий вариант,
[01:56:19.920 --> 01:56:28.920]  то есть, более того, в прошлом году даже провелся эксперимент, то есть, просто на экзамене мне, называется,
[01:56:28.920 --> 01:56:36.920]  кто-то просто взял и просто кто-то расписал эту более простую версию, вот, так что было тоже очень интересно,
[01:56:36.920 --> 01:56:44.920]  вот, так что да, но если возвращаться к условию от автора, значит, автор требовал почему-то, что вот действительно надо,
[01:56:44.920 --> 01:56:51.920]  то есть, в севте обязательно надо следить за тем, что, как бы, если слишком мало детей, то, то есть, как бы, если слишком мало,
[01:56:51.920 --> 01:56:58.920]  то есть, если слишком мало детей у корня, то давайте расформировали дерево, потому что, вот, вот почему-то,
[01:56:58.920 --> 01:57:04.920]  а теперь, да, теперь, внимание, вопрос, потому что, честно говоря, вот, по доказанию ранее, я не очень понимаю,
[01:57:04.920 --> 01:57:16.920]  а зачем он это сделал, а? Нет, нет, в тупую пройтись, ну, потому что сифт-то, по-любому, будет работать за не менее,
[01:57:16.920 --> 01:57:23.920]  чем от всего этого списка, правда, пока я беру от next-го списка точно, поэтому идея такая, давайте в тупую пройдемся,
[01:57:23.920 --> 01:57:29.920]  ну и, как бы, по-любому, либо расформировали и потратим столько времени, либо запустим сифт и все равно потратим столько времени,
[01:57:29.920 --> 01:57:37.920]  то есть, это как бы бесплатно получается. Вот, но получается, что, но получается, вот такая вот радость,
[01:57:37.920 --> 01:57:47.920]  то есть, это и сыкло, что, но, то есть, в принципе, да, то есть, тогда надо чуть-чуть усложнить доказательства того,
[01:57:47.920 --> 01:57:53.000]  что мы вот единицы пошпотим мы доказывали только предположение что у нас деревья создаются
[01:57:53.000 --> 01:57:58.760]  только в инсекте а тут выясняется что нет дерева может быть расформирована другой вопрос там
[01:57:58.760 --> 01:58:03.680]  конечно доказательства тоже простое там поте был доказательство что отпилили вершину повесили
[01:58:03.680 --> 01:58:08.320]  монетку да и тогда получается что когда вы распорядите дерево у вас там ранг пополам монет
[01:58:08.320 --> 01:58:16.080]  как раз уже есть вот но соответственно там уже вроде как никаких проблем нет ну или ну или возможно
[01:58:16.320 --> 01:58:18.880]  собственно в процессе в процессе доказательства может они найдутся
[01:58:18.880 --> 01:58:23.160]  после честного я пока не очень понимаю где мы проворились если вообще проворились
[01:58:23.160 --> 01:58:42.880]  вот так ну и смотрите идея такая самый первый ну как бы у нас самая верхняя цепочка до первой
[01:58:42.880 --> 01:58:51.960]  развилки да она работает за отр но и она занимается тем что она как бы значит у тому удали там
[01:58:51.960 --> 01:59:00.320]  удаляет лист да теперь заметив каждый развилка до ближайших она получается работает как бы
[01:59:00.320 --> 01:59:07.280]  за отр до ближайших развилок да берет два листа и объединяет верхний уменьшает количество листов
[01:59:07.280 --> 01:59:13.720]  но уменьшение листов у нас суммарно может быть не более чем n-1 поэтому получается победили
[01:59:13.720 --> 01:59:19.280]  ну ладно там мелко оговор какая же дашу там не всегда конечно листы то есть иногда там как бы
[01:59:19.280 --> 01:59:25.480]  этот этот цепочка может вас привести к тому что тут плюс бесконечность но очевидно она вас если
[01:59:25.480 --> 01:59:30.520]  это и произойдет то это произойдет за от единиц и в этом месте там ну там можно как угодно можно
[01:59:30.520 --> 01:59:34.880]  там либо это считать там тоже какими-то допсиктивным автобусом либо лучше считать что просто это
[01:59:34.880 --> 01:59:41.880]  просто этого севта не было ну то есть типа потому что ну потому что как бы ну знаете
[01:59:41.880 --> 01:59:46.800]  так вот как деревья отрезков да вы там сделали два рекурсивных вызова но один из них это там
[01:59:46.800 --> 01:59:51.240]  все равно выбросился за от единицы потому что вы там вышли либо полностью вышли в аут либо попали
[01:59:51.240 --> 02:00:02.000]  внутрь отрезка да ну вот мы здесь примерно то же самое или нет так по нет ну нет я не спрашивал
[02:00:02.000 --> 02:00:07.000]  знаете лишь такой дерево отрезков как бы да но просто так понятно ли какая у меня тут ассоциация
[02:00:07.000 --> 02:00:18.240]  возникла или нет может вы дерево отрезков по-другому как-то пишите не знаю ну ладно так вот так то что
[02:00:18.240 --> 02:00:28.440]  есть ли еще вопросы по так есть ли еще вопросы по софт хиппу да нет наверное
[02:00:28.440 --> 02:00:40.200]  да он нужен чтобы сказать миностов и как бы и рандомного студента из топ-10 процентов да вот
[02:00:40.200 --> 02:00:50.040]  ну как повезет
[02:00:50.040 --> 02:01:02.680]  ну ну в нашем случае да ну значит может этом эпсилон уменьшить будет адекватно нет но это
[02:01:02.680 --> 02:01:10.680]  шаман ладно так ну что так нет я почему спрашиваешь еще плюс как бы дальше я хочу переходить
[02:01:10.680 --> 02:01:18.640]  к чему-то еще поэтому как бы как бы да это будущее чего-то еще вообще с этим связано не будет
[02:01:18.640 --> 02:01:35.840]  все вот вообще да все забыли выкинули убили все все чего задачи вряд ли нет написать это не
[02:01:35.840 --> 02:01:42.960]  сложно что-то есть код так что и более того как убить код там не сильно сложно на самом деле то
[02:01:42.960 --> 02:01:46.760]  есть в общем-то да то есть там то есть какой-то техникой побаловаться конечно придется то есть
[02:01:46.760 --> 02:01:52.760]  там мерзкие там немножко списочки но в общем-то код неубойный то есть как бы больше убойность тут
[02:01:52.760 --> 02:01:57.880]  в общем-то в доказательстве происходящего то есть почему почему это как это все работает но как
[02:01:57.880 --> 02:02:03.880]  выясняется то есть самое то есть как бы как это ни странно то есть это не то есть там доказать то
[02:02:03.880 --> 02:02:09.480]  есть там алгоритм использовав строящий миностов бы за быстро оказался не менее убойным если честно
[02:02:09.480 --> 02:02:19.120]  но по камере по камере его мне пока понять не удалось но но ничего все все придет так что так
[02:02:19.120 --> 02:02:23.960]  что возможно так что дай бог тут вот так что домой следующем семестре мы это алгоритм рассмотрим
[02:02:23.960 --> 02:02:33.960]  вот нет вспоминать его не придется вам придется на тока интерфейс то есть слава богу это алгоритм
[02:02:33.960 --> 02:02:43.240]  не использует глубокую внутренность софт хипа вот так штат так ну ладно как я думаю так так
[02:02:43.240 --> 02:02:50.280]  ну что что мы будем делать дальше что мы вчера а что мы будем делать дальше-то вообще
[02:02:50.280 --> 02:03:00.880]  вот к сожалению я боюсь по опыту прошлого года вы же не констатировать что есть причина не делать
[02:03:01.480 --> 02:03:10.880]  почти не волнуйся это не означает что не будет нет я просто но нет я просто объяснил ситуацию почему
[02:03:10.880 --> 02:03:15.840]  вот это просто причина причина одна просто как бы на основном потоке сейчас футилей никто не
[02:03:15.840 --> 02:03:25.680]  проходит нет и что нет ну нет проблема нет просто проблема оказалась такая что дело дело в том
[02:03:25.680 --> 02:03:32.800]  что дело в том что там между семестрами между потоками можно перевестись в чем более
[02:03:32.800 --> 02:03:35.640]  того есть прецедент когда из остановок продвинутый переводится в принципе
[02:03:35.640 --> 02:03:42.240]  чего это смех вызывает
[02:03:42.240 --> 02:03:54.000]  да нет ну не знаю вот но на самом деле нет ну как сказать на самом деле так и так в общем-то не
[02:03:54.720 --> 02:03:59.600]  так чтобы глобально происходит но как бы происходит но просто есть риск такой что если они сейчас будут
[02:03:59.600 --> 02:04:04.560]  проходить деревья мы будем проходить и фф это переведшись оттуда человек рискует фф так и не
[02:04:04.560 --> 02:04:13.200]  узнать поэтому в этом смысле синхронизация не волнуйтесь это значит то есть это будет как бы
[02:04:13.200 --> 02:04:19.160]  фф будет во всей его великой массе так что просто это просто скорее всего это будет не в первом
[02:04:19.160 --> 02:04:24.280]  семестре или пока имели не сейчас потому что если мы сейчас быстренько значит обсудим все
[02:04:24.280 --> 02:04:31.200]  деревья то в общем-то никто нам дальше в общем вот там там обсуждать и фф не помешает вот хотя
[02:04:31.200 --> 02:04:35.560]  конечно потерпеть стоит но с другой стороны тут есть на самом деле чем заняться сейчас в этом
[02:04:35.560 --> 02:04:52.440]  убедитесь так ну что ж ладно так сейчас мы будем ой так ну в принципе так так ну ладно
[02:04:52.440 --> 02:04:58.960]  но в принципе так на самом деле они за эту крыша с прошлого лада с прошлого перерез прошлой
[02:04:58.960 --> 02:05:04.000]  переменной прошло крыша мало времени но с другой стороны у нас переключение блока я хочу врубать
[02:05:04.000 --> 02:05:12.000]  ноут поэтому думаю там перерывчик хотя бы на 10 минут сделать смысл имеет сейчас будет
[02:05:12.000 --> 02:05:17.200]  сложно сконцентрируетесь да сейчас будет конечно сложно это сказать но сконцентрируется все равно
[02:05:17.200 --> 02:05:26.440]  стоит а то будет обидно на экзамене рассказать софтип но завалится на вл дереве почему чего ура
[02:05:26.440 --> 02:05:38.760]  у меня мечта я всегда мечтал поступить на фистех и завалиться на вл дереве это примерно когда там
[02:05:38.760 --> 02:05:43.800]  я не знаю прийти в казино со 100 долларов там все там все стирать потер со 100 долларами дойти
[02:05:43.800 --> 02:05:50.640]  до там дойти до миллиона и проиграть его с комбинацией пара двоек ну мечта такая я вот не знаю почему
[02:05:51.000 --> 02:06:08.080]  фистех казино да да да и в нашем интеллектуальном казино а мало кто знает но это так да так а можете
[02:06:08.080 --> 02:06:18.760]  свет свет выключить я думаю так проще быть вот так так но вот как всегда мы будем тут испорно
[02:06:18.880 --> 02:06:25.880]  использовать презентацию когда во-первых она есть вот когда она есть а во-вторых соответственно
[02:06:25.880 --> 02:06:35.200]  там есть какие-то базовые вещи которые можно быстрее обсудить нет просовки не презентации но
[02:06:35.200 --> 02:06:40.680]  в софт просовки есть статья нет ну мне вот практика оказалось следующее что я вот какое-то
[02:06:40.680 --> 02:06:45.840]  время действительно на лекторе делал презентации но оказывалось что для сложных вещей она не очень
[02:06:46.560 --> 02:06:53.660]  по одной простой причине что она сильно ускоряет темп как бы я буду рассказывать быстрее но как бы
[02:06:53.660 --> 02:06:58.920]  вам будет сильно сложнее понять то есть как бы то есть вы там будете переспрашивать о и можно ли
[02:06:58.920 --> 02:07:03.360]  еще на предыдущий слайд и там вот задавать вопросы то есть как показывает практика если бы делали
[02:07:03.360 --> 02:07:10.200]  все то же самое медленное на доске как бы эффект будет тот же вот а вот для каких-нибудь простых
[02:07:10.200 --> 02:07:17.840]  вещей, ну или там каких-то базовых, это в принципе вот презентация помогает, поэтому я ее иногда и
[02:07:17.840 --> 02:07:23.400]  использую. Вот, ну в общем есть разные версии. Если вам не нравится лекция с презентацией,
[02:07:23.400 --> 02:07:28.800]  в предыдущих поколениях можно найти версии тех же самых лекций, но без презентации. Вот вообще
[02:07:28.800 --> 02:07:40.280]  без презентации я все прям с нуля рисовал. Вот. А сейчас вот не хочу. Вот. Вот. Итак. Так,
[02:07:40.280 --> 02:07:53.640]  ну соответственно сразу. Да. Чем мы вообще будем заниматься? Да. Что такое суть? Это, значит,
[02:07:53.640 --> 02:08:05.120]  ошибка. Потому что на самом деле суть это как есть, только во множественном числе. Но на самом деле
[02:08:05.120 --> 02:08:15.400]  это такой древнерусский аналог английского are. А есть в данном случае как английский is. Вот. Да.
[02:08:15.400 --> 02:08:19.640]  Так что вот так. Вот так мы пришли к тому, что старые русские слова объясняются через английский.
[02:08:19.640 --> 02:08:26.960]  Да. Вот. Но суть в том, чем мы сейчас будем заниматься. Да. То есть мы сейчас будем попробуем
[02:08:26.960 --> 02:08:34.440]  залезть в СТЛ и понять как там может быть устроен сет и что с ним можно делать. Вот. То есть мы
[02:08:34.440 --> 02:08:41.120]  сейчас не будем говорить о графах. То есть мы будем хранить, то есть элементы в каких-то корневых
[02:08:41.120 --> 02:08:47.480]  деревьях. Преимущественно двоичных, хотя не всегда сразу предупреждаю. Вот. Но соответственно
[02:08:47.480 --> 02:08:53.080]  у нас будет понятно, что такое корневое дерево. Ну здесь. Вот. Да. Ну думаю, все понимают. По-хорошему,
[02:08:53.080 --> 02:08:58.040]  чтобы обычное дерево сделать корневым, нам нужно просто объявить корень и, в общем-то, дальше
[02:08:58.040 --> 02:09:04.520]  родители и дети появляются автоматически. Вот. Ну на всякий случай. Я как-будто когда-то лекцию читал,
[02:09:04.520 --> 02:09:09.400]  там у кого-то это вызвало вопросы, но думаю, это не у вас. Хотя кто-то сказал, я открыл википедию,
[02:09:09.400 --> 02:09:20.320]  там вообще по-другому написано. Вот. Так вот. Нет, нет, нет, нет. Нет, если бы, если бы в этом было
[02:09:20.320 --> 02:09:30.040]  дело, да. Если бы. Вот. Итак. Значит, в нашем рабочем определении мы будем считать, что корневое
[02:09:30.040 --> 02:09:36.240]  дерево это у нас, что это такое. Это у нас есть просто вершина. Значит в каждую вершину, кроме корня,
[02:09:36.240 --> 02:09:40.520]  входит ровно одно ребро, но из каждой вершины исходит произвольное число ребер. То есть,
[02:09:40.520 --> 02:09:45.680]  собственно, детей пока по умолчанию сколько угодно. И, значит, в каждую нот. Ну и, соответственно,
[02:09:45.680 --> 02:09:51.520]  важный момент, что в каждую вершину из корня существует простой путь. Вот. В принципе, то есть,
[02:09:51.520 --> 02:09:56.920]  в принципе, работает вот с таким определением, оказывается, удобно. Ну да. То есть, мы сейчас
[02:09:56.920 --> 02:10:00.960]  некоторое время поработаем с общими определениями, потому что нам нужно ввести пару понятий,
[02:10:00.960 --> 02:10:09.080]  которые в науке активно используются. Вот. Поэтому увы. Ну, значит, какие тут еще понятия? Ну, понятно,
[02:10:09.080 --> 02:10:14.480]  есть понятие ребенок и родитель. Также есть понятие предок и потомок. Значит, сразу тут
[02:10:14.480 --> 02:10:23.080]  обращаем внимание. То есть, там принципиально мы различаем понятие ребенок и потомок. То есть,
[02:10:23.080 --> 02:10:29.600]  как бы, чем отличается? То есть, ребенок это, если ты непосредственно ввестишь на ребре у вершины
[02:10:29.600 --> 02:10:35.600]  у потомок, это если ты ребенок, ребенок-ребенка, ребенок-ребенок-ребенка и так далее. Более того,
[02:10:35.600 --> 02:10:42.200]  также еще замечаем, что, то есть, более того, еще замечаем, что у нас каждая вершина является
[02:10:42.200 --> 02:10:48.200]  своим потомком и своим предком. Вот. Обратите внимание. Сразу здесь скажем, что вершина у предок
[02:10:48.200 --> 02:10:56.440]  если в совпадает с у, ну либо у предок родителя. Вот. Можно еще так определять. Вот. Значит,
[02:10:56.440 --> 02:11:04.200]  у нас будет понятие глубина вершины. Это расстояние от вершины водокорня. Вот. И есть высота
[02:11:04.200 --> 02:11:13.240]  дерева. То есть, высота дерева- это максимальная глубина среди всех его потомков корня. Вот. Так.
[02:11:13.240 --> 02:11:19.120]  Ну, тут вроде, так, тут вроде все понятно, да? Так есть тут что-то контр-интуитивное,
[02:11:19.120 --> 02:11:24.880]  что надо прокомментировать? Нет, пока вроде все понятно, да. Вот. Ну, в принципе, вот. Какое-нибудь
[02:11:24.880 --> 02:11:32.800]  типичное дерево может выглядеть примерно таким образом. Вот. Вот. Ну, то есть, да. Оно еще
[02:11:32.800 --> 02:11:37.960]  удовлетворяет там какому-то свойству кучи еще. Ну, еще. Или можно интерпретировать эти числа как
[02:11:37.960 --> 02:11:42.600]  индексы, их как-то хранить. Но, правда, в отличие от кучи мы не можем просто по вершине понять,
[02:11:42.600 --> 02:11:50.680]  где у нее дети. То есть, это придется в явном виде хранить. Вот. Но если мы рассмотрим такое дерево
[02:11:50.680 --> 02:12:01.920]  с такой нумерацией вершин, то сатэнот, то вопрос, как его обойти? Вот. Ну, как бы, да, мы не знаем,
[02:12:01.920 --> 02:12:12.440]  что такое пояс-глубину, как всегда. Но вообразить себе рекурсивный обход дерева мы можем. Вот. Ну,
[02:12:12.440 --> 02:12:18.600]  собственно, у произвольного дерева есть, собственно, два классических обхода. Это,
[02:12:18.600 --> 02:12:25.400]  давайте, преордер и постордер. Ну, здесь можно просто. Ну, имеется, то есть, вообразить себе,
[02:12:25.400 --> 02:12:31.200]  можно, рекурсивную функцию вида, что как мне обойти по дереву? Так, преордер. Значит, записываем
[02:12:31.200 --> 02:12:40.400]  саму вершину, а потом запускаемся рекурсивно от всех ее детей по очереди. Вот. То есть,
[02:12:40.400 --> 02:12:45.360]  в результате вершины выписываются вот в порядке. Получается мы один, значит, потом два. Значит,
[02:12:45.360 --> 02:12:51.280]  тут пять, там, девять, десять. Возвращаемся сюда, типа, шесть. Значит, там потом три, там, четыре,
[02:12:51.280 --> 02:12:57.480]  семь, один, с двенадцать ночем, как написано. Понятно, да? Это называется преордер. Можно сделать
[02:12:57.480 --> 02:13:06.160]  постордер. Что такое постордер? Это когда, наоборот, вы сначала дети, потом я. Вот. Ну,
[02:13:06.160 --> 02:13:11.040]  в принципе, да, я думаю, вы много где встречали подобного рода обходы. То есть, в принципе,
[02:13:11.040 --> 02:13:14.920]  да. Наверное, когда вы там для всяких мостов и точек сочинений считали всякие таймыны,
[02:13:14.920 --> 02:13:22.120]  то на самом деле вы просто буквально делали преордер-обход, на самом деле. А когда считали
[02:13:22.120 --> 02:13:29.640]  тайм-ауты, вы делали постордер-обходы, кстати. Вот. Там БВДАБ. Вот. Но мы это сейчас не будем
[02:13:29.640 --> 02:13:35.040]  называть таймынами, будем скорее обходами называть. Вот. Но есть еще, конечно, такое
[02:13:35.040 --> 02:13:42.360]  и нордер-обход. Потому что важный подвид дерева, конечно, такого корневого дерева, это для нас будет
[02:13:42.360 --> 02:13:48.720]  бинарное дерево. Но у него есть, конечно, принципиальное отличие. Смотрите. То есть,
[02:13:48.720 --> 02:13:52.200]  казалось бы, что такое бинарное дерево? Хочется сказать, что бинарное дерево – это просто такое
[02:13:52.200 --> 02:14:00.320]  дерево, у вершины которое, такое, что детей у каждой вершины не более чем два. Но это не совсем так.
[02:14:00.320 --> 02:14:08.120]  То есть детей, потому что мы тут не просто будем обозначать детей как left и right, а более это вот
[02:14:08.120 --> 02:14:11.720]  часто, как вы говорите, нам будет принципиально, что если у вершины одно дерево, нам будет
[02:14:11.720 --> 02:14:19.600]  принципиально это left или это right. Логично, да? Вот. Поэтому здесь, конечно, формально говоря,
[02:14:19.600 --> 02:14:23.600]  бинарное дерево – это не совсем вот корневое дерево в том смысле, в котором мы ранее обсуждали.
[02:14:23.600 --> 02:14:33.640]  Вот. Но у такого бинарного дерева, помимо преордер и постордера, есть инордер-обход. Он нам
[02:14:33.640 --> 02:14:40.040]  предлагает сначала обойти левое под дерево, потом обойти себя, потом правое под дерево.
[02:14:40.040 --> 02:14:47.720]  Вот. То есть, например, вот здесь у нас двоичное дерево, например, вот оно, вот под дерево вершины
[02:14:47.720 --> 02:15:00.800]  2, и получается тогда 9, 5, 10, 2, 6. Ну и здесь пока все просто. Вот. Значит, ну и тут, соответственно,
[02:15:00.800 --> 02:15:17.200]  можно сразу попробовать найти ошибку. Чего? Так, раз, еще. Вот, да. Да, тут еще звездочки нету,
[02:15:17.200 --> 02:15:28.720]  так что будьте аккуратны. Ай-ай-ай, подкол. Да. Вот. Вот. Но суть, тем не менее, остается. Значит,
[02:15:28.720 --> 02:15:34.480]  суть остается. То есть, если у вас есть такое двоичное дерево с поправленными там, понятно,
[02:15:34.480 --> 02:15:39.080]  каким образом, багами, то, соответственно, мы действительно обходим простым образом. То есть,
[02:15:39.080 --> 02:15:44.160]  в преордере сначала print, потом от left, а потом от right. В постордере сначала от left,
[02:15:44.160 --> 02:15:49.400]  потом от right, а потом от print, и в in-order print. То есть, по сути, просто куда между двумя
[02:15:49.400 --> 02:15:59.000]  ордерами, куда вставить print в этот стройный ряд двухрекурсивных запуск. Вот. Так что это,
[02:15:59.000 --> 02:16:03.000]  соответственно, просто такие вот понятия, просто которыми мы будем пользоваться. Пока вот это,
[02:16:03.000 --> 02:16:11.720]  как бы, по большому счету, там такая немножко терминология. Да. Да. Как его еще можно обходить?
[02:16:11.720 --> 02:16:17.840]  Ну, в принципе, существуют и другие обходы. Да, вот типа обход с помощью поисков ширину
[02:16:17.840 --> 02:16:22.760]  классического. Вот. То есть, ну, просто, то есть, просто выпьем. Ну, то есть, по большому счету,
[02:16:22.760 --> 02:16:28.080]  тут просто скорее, чтобы показать, что другие обходы тоже есть. Тут, в общем-то, ничего такого нет.
[02:16:28.080 --> 02:16:39.280]  Но приходит время работать. Мы сейчас будем, конечно, не просто с корневыми деревьями. То есть,
[02:16:39.280 --> 02:16:44.920]  мы сейчас не будем заниматься всякими там всякими безобразиями, там всякими там ЛСАшки
[02:16:44.920 --> 02:16:52.000]  какие-то искать или там ХЛДшки и прочее. Вот это вся гадость. Вот. То есть, пока мы займемся
[02:16:52.000 --> 02:16:59.920]  деревьями поиска. Вот. Значит, что это такое? Значит, как вы уже поняли, мы не хотим. Понятно,
[02:16:59.920 --> 02:17:04.840]  просто деревья в вакууме нас не интересуют. Нам, наверное, они для чего-то нужны. Мы будем хранить
[02:17:05.080 --> 02:17:12.440]  какие-то элементы и их искать. Как это будет? Вот, значит, у нас каждый решим наслабжена каким-то
[02:17:12.440 --> 02:17:20.240]  элементом. Мы его будем называть ключ, как всегда. Значит, вот вакуум. И будем говорить, что тогда
[02:17:20.240 --> 02:17:28.200]  у нас наше двоичное дерево Т, точнее, бинарное. Ну вот. Оно дерево поиска по этому ключу,
[02:17:28.200 --> 02:17:37.320]  если выполнены вот такие условия. То есть, обратите внимание, только для любой вершины.
[02:17:37.320 --> 02:17:44.440]  Ну вот. То есть, оказывается так. Рассмотрим любую вершину В, прям абсолютно любую. И в ней,
[02:17:44.440 --> 02:17:50.440]  оказывается, верно, что в левом под дереве ее все ключи меньше либо равны своего ключа,
[02:17:50.440 --> 02:17:59.840]  а в правом под дереве все ключи больше либо равны. Вот. То есть, в принципе, есть второе такое
[02:17:59.840 --> 02:18:05.800]  эквивалентное определение. Будем говорить, что Т является деревом поиска, если инордор обход
[02:18:05.800 --> 02:18:13.320]  выведет ключи просто в порядке возрастания. Ну, в смысле, не убывание. Вот. Ну, в принципе, да,
[02:18:13.320 --> 02:18:21.640]  легко по нот. Ну, в принципе, да, можно в качестве упражнения показать, что это одно и то же.
[02:18:21.640 --> 02:18:29.760]  Летающий колпачок. Вот. Ну, в принципе, такое относительно типичное двоичное дерево поиска
[02:18:29.760 --> 02:18:35.720]  может выглядеть вот таким вот образом. Вот. То есть, обратите внимание, видите, нам принципиально,
[02:18:35.720 --> 02:18:40.640]  где кто висит. То есть, нам принципиально скажем, что 13 это именно правый ребенок семерочки,
[02:18:40.640 --> 02:18:48.040]  а не левый, потому что 13 больше чем 7. Но, с другой стороны, 9 меньше 13, поэтому и 9 это левый ребенок
[02:18:48.040 --> 02:18:58.640]  13. Вот. Видите, да? То есть, в принципе, вот такое дерево. Вот. Ну, кстати, вот возникает интересный вопрос.
[02:18:58.640 --> 02:19:04.240]  А сколько всего деревьев вообще, а сколько всего двоичных деревьев поиска на элементах вообще
[02:19:04.240 --> 02:19:30.920]  можете построить? Если они различные, то. Ну, от одного даем. Так. Так, да, и что ж получается?
[02:19:30.920 --> 02:19:49.080]  Ну, да, вопрос, сколько может быть различных деревьев. Да, потому что, в принципе, да,
[02:19:49.080 --> 02:19:55.600]  если это воспринимать как задача по программированию, то можно написать рекурренту. Там просто так и написать.
[02:19:55.600 --> 02:20:07.840]  Давайте так. Как-то dp от n равно сумма по всем k равно от 1 до n. Получается dp от k-1. То есть, в левое под дерево
[02:20:07.840 --> 02:20:21.600]  отправляем k-1 вершину, а в правое под дерево n-k. Ну, можно и так. А побыстрее можно? Вот не за квадрат.
[02:20:21.600 --> 02:20:43.840]  Каким образом? А это что за самое fft такое? Массивно развернутый. Чего массивно? Нет, это просто
[02:20:44.080 --> 02:20:53.760]  только массив на массив получится сам же массив. То есть, нет, в принципе, нет, можно написать. Ладно,
[02:20:53.760 --> 02:20:59.280]  давайте так. Можно написать, конечно, что это такая есть производящая функция, конечно, dp от t. И
[02:20:59.280 --> 02:21:12.080]  получится там что-то типа dp от t. Получается равно чему? dp от t в квадрате, видимо, умножить на t и
[02:21:12.080 --> 02:21:29.840]  плюс один. Нет. Все нормально. Все правильно. Нет, ну как сказать, когда вы производящие функции,
[02:21:30.160 --> 02:21:42.000]  эти, да. Так, ну вот. А теперь осталось только выяснить чему равно dp от t, да. А это вы по
[02:21:42.000 --> 02:21:50.120]  производящей функции узнали, да? Ага, ну да. Да, кто-то может вспомнить, что по некоторым случайному в
[02:21:50.120 --> 02:21:57.240]  скобках нет совпадению. Почему-то количество правильных скобочных последовательностей с n пар
[02:21:57.240 --> 02:22:08.080]  скобок вычитается почему-то ровно по той же динамике. Внезапно, да? Вот. Не, ну, да, погодите.
[02:22:08.080 --> 02:22:18.680]  Ой, нет, с dp у нас там шоу, это отдельное шоу будет еще в свое время. Ну, что там? Как это? Ну,
[02:22:18.680 --> 02:22:27.880]  как меня, как это? Хиршберг, тотал, цес, там, я не знаю, что-то еще там веселое будет. Да,
[02:22:27.880 --> 02:22:35.080]  вот. Да, но на самом деле, если говорите, то есть да, то есть в принципе это очень похоже на
[02:22:35.080 --> 02:22:42.200]  скобочные последствия, в общем-то совпадение даже кажется еще менее случайным. Если заметить,
[02:22:42.200 --> 02:22:46.800]  что между двоичными деревьями и скобочными последствиями можно поставить вообще взаимно
[02:22:46.800 --> 02:22:53.520]  однозначные соответствия не сильно сложного вида. Смотрите. Ну, давайте тут вот так будет
[02:22:53.520 --> 02:23:05.440]  как-нибудь. То есть идея такая. То есть идея такая. Значит, можно сказать так. Значит, я сразу для
[02:23:05.440 --> 02:23:11.240]  код, для код каждой вершине будет соответствовать пара скобочек. Но поставлена она будет таким
[02:23:11.320 --> 02:23:19.940]  образом, что левая под дерево пойдет внутрь этой пары скобочек, а правая под дерево вовне. Вот. То
[02:23:19.940 --> 02:23:25.400]  есть вот здесь теперь мы идем вот, получается вот так. Так, ну одна вершина, это по-любому вот
[02:23:25.400 --> 02:23:34.880]  просто две скобочки, но здесь у нас соответственно получается пум-пум. Там пум-пум и пум-пум. То есть
[02:23:34.880 --> 02:23:39.720]  обратите внимание, то есть вот такое дерево рисуется получается вот так, а вот такое дерево
[02:23:39.720 --> 02:23:45.720]  рисуется вот таким вот. Казалось бы, просто казалось бы, чуть-чуть повернули, а вот
[02:23:45.720 --> 02:23:50.120]  насколько принципиально, разный смысл.
[02:23:55.320 --> 02:24:02.600]  Так, как мы строим? Нет, объекцию ставим так, ну просто, как построить по
[02:24:02.600 --> 02:24:07.840]  дереву скобочные последствия? Значит, берем корень, ставим скобочки, но
[02:24:07.840 --> 02:24:12.680]  внутрь, значит, делаем то, что получилось излево по дереву рекурсивно, и справа
[02:24:12.680 --> 02:24:21.040]  ставим то, что справа. Ну, если так в тупую за квадрат делать, то получается вот так.
[02:24:21.040 --> 02:24:28.640]  Вот. Так что вот такая радость.
[02:24:28.920 --> 02:24:36.920]  Вот. Ну вот, но в принципе, заметим, что механизм приятен тем, что он, в общем-то,
[02:24:36.920 --> 02:24:41.000]  действительно дает взаимную однозначность, потому что, в принципе, в правильных скобочных
[02:24:41.000 --> 02:24:44.600]  последствиях тоже понятно, что самая первая открывающая скобка будет у нас
[02:24:44.600 --> 02:24:50.080]  соответствовать корню, а закрывающая ей определяется однозначно. И дальше мы тут
[02:24:50.080 --> 02:24:54.760]  восстанавливаем однозначно. То есть отсюда и следующее, на самом деле, да. То есть двоичные
[02:24:54.760 --> 02:24:58.640]  деревья поиска, наверное, на элементах оказывается ровно столько же, сколько правильных
[02:24:58.640 --> 02:25:05.400]  скобочных последовательностей. Вот, но там отдельная песня, значит, сколько у нас
[02:25:05.400 --> 02:25:07.840]  правильных скобочных последствий, а самое главное как-то доказывать.
[02:25:07.840 --> 02:25:13.280]  Вот, но, кажется, но есть подозрение, что это у вас должно быть в курсе дискрана.
[02:25:13.280 --> 02:25:18.800]  Ну, там не очень, там не очень сложно, там метод отражения, там все дела. Можете там в
[02:25:18.800 --> 02:25:24.040]  Дикипедии, кстати, почитать, там замечательный метод, красивый такой очень. Вот. Дорогие будем
[02:25:24.040 --> 02:25:32.040]  сейчас на этом останавливаться. Вот. Значит, что у нас тут происходит? Тут происходит следующее.
[02:25:32.040 --> 02:25:39.600]  Значит, чем приятны такие деревья? Такие деревья приятны тем, что искать элемент в нём как-то
[02:25:39.600 --> 02:25:44.600]  становится очень естественно. То есть, допустим, мы хотим выяснить, есть ли у нас сейчас в дереве
[02:25:44.600 --> 02:25:52.160]  какой-нибудь элемент х. Как нам-то сделать? Ну, мы говорим, так, давайте пойдём в корень. Так, корень у
[02:25:52.160 --> 02:25:58.920]  нас, так, он больше, ой, он больше х. Так, значит, наверное, х, если есть у нас в дереве, то,
[02:25:58.920 --> 02:26:05.480]  наверное, только в левом под деревом, в правом быть не может, там ещё больше, правда? Значит, идём в левое
[02:26:05.480 --> 02:26:12.200]  под деревом. Так, в левом под деревом, там вершинка какая у нас, ой, она меньше х, значит, надо её в правое
[02:26:12.200 --> 02:26:16.760]  под дерево идти. Ну, и так далее, аккуратным спуском это делаем. Так, это надо расписывать подробнее,
[02:26:16.760 --> 02:26:31.560]  это понятно. Не слышу. Окей, да, все уже, да, все боятся сказать, что понятно, да. Нет, ну,
[02:26:31.560 --> 02:26:36.200]  на всякий случай скажу так, это, как бы, такие базовые простые понятия, да, то есть, если, если тут
[02:26:36.200 --> 02:26:41.000]  непонятно, лучше сразу переспрашивать, а то, потому что, как вы догадываетесь, дальше будет
[02:26:41.000 --> 02:26:51.480]  сложнее. Вот. Значит, теперь, как делать вставку? Ну, пока мы говорим, а просто, хотя бы, самой
[02:26:51.480 --> 02:26:56.200]  простой версии, которую хочется делать, то вставку делать очень просто. Мы просто идём, ищем этот
[02:26:56.200 --> 02:27:01.680]  элемент, и как только натыкаемся, пытаемся пройти куда-то дальше и понимаем, что дальше хода нет,
[02:27:01.680 --> 02:27:09.080]  мы просто в этом место новый элемент и вешаем. В принципе, в общем-то, уже неплохо, да, то есть,
[02:27:09.080 --> 02:27:14.280]  мы получаем структуру данных, которую, вроде, можно адекватно добавлять и адекватно искать.
[02:27:14.280 --> 02:27:26.040]  Все это делается за от высоты дерева. Вот. Пока, вроде, просто, да. Пока, вроде, просто. Есть даже
[02:27:26.040 --> 02:27:31.240]  код. Ну, собственно, где по коду вы еще раз понимаете, действительно, с какой книжки я это взял.
[02:27:31.240 --> 02:27:44.440]  Вот. Ну, Кормана я уже анонсировал. Вот. Так что я, ну, так что, очень рекомендую. Вот. Так что, то есть,
[02:27:44.440 --> 02:27:49.160]  видим, действительно, поиск у нас вообще, видим, очень, действительно, очень тривиально устроен.
[02:27:49.160 --> 02:27:53.560]  Можно вообще, вон, с пять строчек, вот, красиво, кстати, реализовать. Да, единственное, я только вот
[02:27:53.560 --> 02:27:58.040]  оговорка сразу предупреждаю, что в Кормане там немножко, то есть, это, конечно, не сишный код,
[02:27:58.040 --> 02:28:03.520]  это такой более джавайный код такой. Ну, джавайный в том плане, что каждый х, это,
[02:28:03.520 --> 02:28:12.760]  вот, как бы, вершина, и здесь подразумевается, что вы работаете с ней по ссылкам. Вот. То есть,
[02:28:12.760 --> 02:28:16.840]  работаете по ссылкам, и, как бы, поэтому получается, вот это присваивание х равно х left,
[02:28:16.840 --> 02:28:26.520]  это как будто вы, типа, ссылку присвоили или указали. Вот. Чего? Вот. Ну, с инсертом тут,
[02:28:26.520 --> 02:28:34.560]  конечно, чуть посложнее, но, в общем-то, суть тоже, ну, там суть тоже не сильно. Вроде как страшная.
[02:28:34.560 --> 02:28:42.920]  Вот. Ну, то есть, понятно, какой-то там случай придется разобрать, что вы там вставляете в
[02:28:42.920 --> 02:28:52.800]  пустое там дерево или там что-то еще в этом вроде. Ладно. Вот. Что нам еще приятно? Ну,
[02:28:52.800 --> 02:28:58.560]  приятно, конечно, еще то, что можно достаточно легко в таком дереве искать минимум и максимум.
[02:28:58.560 --> 02:29:04.320]  То есть, как найти минимум? Просто тупо идем влево пока можем. Ну, и максимум тоже самое, но вправо.
[02:29:04.320 --> 02:29:11.520]  Так. Ну, теперь, да, есть, действительно, тут еще маленькая оговорочка. Да, то есть,
[02:29:11.520 --> 02:29:17.880]  это такая техническая функция, которая пригодится нам в будущем. Функция, вот, функция будет
[02:29:17.880 --> 02:29:28.080]  называться замени вершину У на вершину В. Ну, там просто идея заключается в том, что есть у нас в
[02:29:28.080 --> 02:29:35.880]  дереве Т вершина У, которая где-то там висит. Мне вот очень-очень-очень хочется, что вместо
[02:29:35.880 --> 02:29:42.880]  на месте этой вершины У висела вершина В. Вот. И эта функция просто буквально это и делает.
[02:29:42.880 --> 02:29:57.360]  Пока ни в чем. Нет, это не ключ, это вершина. Нет, это вершина, в том числе, кстати,
[02:29:57.360 --> 02:30:06.720]  со всеми поддеревьями, если что. Значит, вот, нет, У это вершина. Значит, П это родитель, да.
[02:30:06.720 --> 02:30:13.840]  Мы проверяем, если ты левый, то мы заменяем, если ты правый, то мы тоже заменяем. Да, но вопрос,
[02:30:13.840 --> 02:30:20.840]  кого мы заменяем. То есть, если У левый, то, как бы, то есть, У это левый ребенок своего родителя,
[02:30:20.840 --> 02:30:27.200]  то мы слева к нему подвешиваем В. Ну вот, нет, это там в будущем нам понадобится, пока, то есть,
[02:30:27.200 --> 02:30:37.240]  скажем так, просто, как бы. Чего? Ну, это понятно, да, но, как бы, это не язык Си, да, это язык,
[02:30:37.240 --> 02:30:44.840]  в котором это не проблема. Ну, то есть, какой-то там алгол, какой-то там лохматой версии. Вот,
[02:30:44.840 --> 02:30:50.600]  ну, по-моему, ну, или пока там, ну, модно у них там у всех тех тарьянов там, с скорманами там
[02:30:50.600 --> 02:31:01.360]  писать на каких-то подобного рода алголах. Вот. Я математик, я не хочу думать о каких-то
[02:31:01.360 --> 02:31:14.400]  технических вещах, я хочу, я хочу думать об идее, да. Вот, итак, ну, значит, удаление,
[02:31:14.560 --> 02:31:20.960]  вот теперь у нас задача удалить вершину из дерева. Но тут выясняет, что удалить-то ее не так просто.
[02:31:20.960 --> 02:31:29.440]  Точнее, у нас есть три уровня, такие три случая, как всегда, случай easy, случай medium и случай hard.
[02:31:29.440 --> 02:31:40.480]  Случай easy, если нам повезло и мы должны удалить лист, ну, тогда мы ее, соответственно, берем и
[02:31:40.480 --> 02:31:48.240]  удаляем. Вот, но нам фантастически повезло, но если выяснилось, что у вершины есть дети,
[02:31:48.240 --> 02:31:57.240]  ну, точнее, ребенок, в смысле один, то тоже никаких проблем нет. То есть, как удалить,
[02:31:57.240 --> 02:32:01.560]  то есть, если у вершины есть только, скажем, там, левый ребенок, как тогда ее удалить? Да,
[02:32:01.560 --> 02:32:07.360]  очень просто, возьмите это левое ребенка и напрямую подвести к родителю. Так, это понятно,
[02:32:07.360 --> 02:32:19.960]  что происходит? Вот, или надо порисовать? Вот, хорошо. Так, ну, что еще? Ну, и давайте еще
[02:32:19.960 --> 02:32:26.760]  минимальный нот. Ну, в принципе, да, и уровень hard, если оба ребенка есть. Ну, это вот самый
[02:32:26.760 --> 02:32:32.320]  сложный случай, но тоже решаемый, потому что идея такая, а давайте возьмем, у вершины У пойдем
[02:32:32.320 --> 02:32:37.560]  в правое под дерево, найдем там самый левый элемент, то есть, минимальный. То есть, заметим,
[02:32:37.560 --> 02:32:43.440]  что это как бы следующий элемент по порядку. Ну, тогда идея такая, давайте этот самый левый,
[02:32:43.440 --> 02:32:53.920]  просто его на месте удаляем, его У подвесим. Вот, а, собственно, а вместо него самого там подвесим
[02:32:53.920 --> 02:33:04.800]  его, вот это правое под дерево. Так, да, тут уже без картинки сложно. Чего? Да, пожалуйста.
[02:33:04.800 --> 02:33:16.640]  Да, значит, смотрите, то есть, да, тут, то есть, тут идея такая, то есть, вы хотите тут попилить,
[02:33:16.640 --> 02:33:22.600]  попилить, шли-шли-шли-шли, и вот вам хотите удалить вершину В, и у нее там есть оба под дерево,
[02:33:22.600 --> 02:33:29.360]  тогда идея такая, давайте мы тут идем сюда, вот, допустим, так, это у нас вершина В, а это у нас
[02:33:29.360 --> 02:33:36.400]  неожиданная вершина У, у которой слева ничего нет, справа висит какое-то под дерево. Тогда, значит,
[02:33:36.400 --> 02:33:44.360]  предлагается так, предлагается, значит, эту вершину отсюда убрать, если, ну, вот, и подвесить
[02:33:44.360 --> 02:33:51.560]  вместо, на место ее подвесить, собственно, вот это под дерево. Значит, а вместо вершины В здесь
[02:33:51.560 --> 02:34:08.240]  подвесить вершину У. Вот так. То есть, вот так вот технологично мы работаем. Вот, также вот такая красота.
[02:34:15.200 --> 02:34:26.240]  Вот, вот, вот, кстати, учитывая вот, вот, вот, вот здесь нам как раз эта функция трансплант и нужна. Да, у нас нет
[02:34:26.240 --> 02:34:36.200]  утечек памяти, у нас пылесос, гарбат-коллектор. Вот, так что вот даже, даже, даже, ну, вот, то есть,
[02:34:36.200 --> 02:34:40.640]  если правильно написать функцию трансплант, даже код оказался не сильно сложным, обратите внимание.
[02:34:40.640 --> 02:34:52.560]  Вот. И так. Да, тут все понятно. Но какая проблема у такой реализации возникает? Проблема возникает в том,
[02:34:52.560 --> 02:34:59.920]  что высота дерева вполне может оказаться и, там, сопоставимый с количеством элементов. Да,
[02:34:59.920 --> 02:35:10.360]  потому что вот такое дерево называется бамбу-ча. Вот. Вот. Так. А, ну, это с вами обсуждали. Да, вот это вот
[02:35:10.360 --> 02:35:17.720]  пей фанта, будь бамбу-ча. Ну, услышали, да? Да ладно, нет. Нет, у вас там, нет, вы там внизу встали где-то, когда вам
[02:35:17.720 --> 02:35:23.200]  было там, Рудика, там, три-пять, там, по телевизору могла быть реклама такая. Дайте пей фанта, будь бамбу-ча.
[02:35:23.400 --> 02:35:29.040]  Вот это все. Ну, да, там приехал, там, привет, ко мне приехал мой брата, и брат спрашивает,
[02:35:29.040 --> 02:35:34.240]  что такое бамбу-ча? Там отвечает, бамбу-ча, это что-то там нежное, солнечное, там, вот, и там,
[02:35:34.240 --> 02:35:40.840]  показывает эту фанту красивую, там, с пузырьками, да. Так что, ну, может, это, то есть, но-то, вообще,
[02:35:40.840 --> 02:35:45.920]  были добрые времена, вот, когда реклама была такая хорошая по телевизору, да, какая-то добрая,
[02:35:45.920 --> 02:35:52.880]  вот, поэтому вот, поэтому это будем называть, это будет называться левая бамбу-ча. Вот. Да,
[02:35:52.880 --> 02:36:02.320]  как вы догадываетесь, бывает и правая бамбу-ча. Вот. Бамбу-ча на максимум. Ну, нет, не-не-не, это,
[02:36:02.320 --> 02:36:08.920]  нет, у нас нет понятия бамбу-ча на максимум, потому что у нас сейчас, как бы, мы не кучи обсуждаем,
[02:36:08.920 --> 02:36:16.720]  это дерево поиска. Да, оно очень похоже на кучу на максимум, да, да, она может быть и кучей на
[02:36:16.720 --> 02:36:23.400]  максимум, это да, но двоичная куча это немножко другое, да. Вот. Но на самом деле бамбу-ча это то,
[02:36:23.400 --> 02:36:30.040]  что хотелось бы избегать, потому что, как бы, хочется все-таки каких-то красивых деревьев,
[02:36:30.040 --> 02:36:35.240]  вот, то есть хочется как-то все-таки, чтобы высота дерева была поменьше. Ну, меньше логарифма,
[02:36:35.240 --> 02:36:45.240]  наверное, не получится, да, или получится. Нет, действительно, а может быть, можно сделать действительно
[02:36:45.240 --> 02:36:51.800]  какое-то крутое дерево, в котором высота прям еще меньше, там корень из логарифма, или логарифм из корня.
[02:36:51.800 --> 02:37:00.360]  Да, но двоичная, конечно, не получится. Да, причина очень простая. Заметим, что в одном из под деревьев
[02:37:00.360 --> 02:37:06.880]  будет хотя бы, хотя бы n пополам детей, то есть это потомков. Значит, у него тоже будет ребенок,
[02:37:06.880 --> 02:37:11.600]  который будет хотя бы n поделить на 4, ну и так далее. В общем, короче, путь, в общем, хотя бы
[02:37:11.600 --> 02:37:19.360]  логарифм, высота быть должна. Но, но хочется, а можно ли как-то вот сделать так, чтобы высота была,
[02:37:19.360 --> 02:37:24.920]  ну, идеально логарифм, конечно, да, совсем уж прям идеальное дерево, или двоичная куча, конечно,
[02:37:24.920 --> 02:37:31.920]  мы вряд ли сможем так поддерживать со всеми вставками, но хотелось бы, наверное, чтобы, как бы,
[02:37:31.920 --> 02:37:38.200]  все равно какая-то сбалансированность была, чтобы высота была как-то поменьше. Ну, с другой стороны,
[02:37:38.280 --> 02:37:44.960]  что нам нужно для того, чтобы высота была поменьше? Ну, наверное, нужно, чтобы у нас там одно под дерево
[02:37:44.960 --> 02:37:54.960]  не перевешивало другое. Ну, дальше, на самом деле, начинаются вариации, потому что, о, в предыдущей
[02:37:54.960 --> 02:38:01.480]  лекции, да, ну ладно, вот, потому что, значит, что нам хочется? В общем, если в конце концов,
[02:38:01.480 --> 02:38:06.120]  хочется действительно, чтобы у нас был какой-то баланс между то ли размерами, то ли чем-то еще.
[02:38:06.200 --> 02:38:12.000]  В общем, да, хочется, то есть, может быть, ввести в дерево еще какой-то мистический вариант,
[02:38:12.000 --> 02:38:16.560]  чтобы, соответственно, высота дерева сохранялась, была адекватной, но мы при
[02:38:16.560 --> 02:38:23.360]  этом не сильно страдали. Так, ну, вот, сколько, так, с какими способами это можно делать? Так,
[02:38:23.360 --> 02:38:38.160]  ну, мы с вами изучим сов дерево. Если бы такое существовало, конечно, да. Нет, ну, нет, я бы просто
[02:38:38.160 --> 02:38:42.800]  анонсирую. Шутки шутками, но факт остается фактом. Нас с вами ждет пять сбалансированных деревьев.
[02:38:42.800 --> 02:38:55.840]  Ну, потому что АВЛ красночерная, значит, то есть, плей Дикартова и, конечно, его величество Б дерево.
[02:38:55.840 --> 02:39:10.040]  Нет, Б, С дерево. Ну, да, да, да. И новинка этого года Х дерево. Да, да, да.
[02:39:10.040 --> 02:39:19.760]  Нет, хотя, да, хотя какая-то структура данных, хотя какие-то x-rays существуют. Правда, это не структура данных,
[02:39:19.760 --> 02:39:32.600]  а рентген какой-то. Ладно, значит, смотрите. Итак, начнем с, так, давайте начнем с тупничка. Ну,
[02:39:32.760 --> 02:39:41.720]  первая, прям первая историческая идея. Так, вот говорим. Вот говорим. Так, хорошо. Что такое сбалансированность?
[02:39:41.720 --> 02:39:49.680]  Так, давайте так, чтобы у каждой вершины высоты под деревья были одинаковы. Чего? Прям нельзя, да?
[02:39:49.680 --> 02:39:56.480]  А, типа дерево из двух вершин. Чего дерево из двух вершин? Чего высота один, высота ноль, а подру...
[02:39:56.480 --> 02:40:05.760]  Так, ладно, совсем идеально поровну нельзя. А давайте сделаем так, чтобы высоты двух под деревьев
[02:40:05.760 --> 02:40:15.280]  отличались в ту или иную сторону не более чем на один. Так, ну, вроде как, кажется, очень интересно.
[02:40:15.280 --> 02:40:25.120]  Давайте попробуем. К чему нас это приведет? Значит, у нас есть адальция. Ну, вот, значит, получается 68-й год и так далее.
[02:40:25.120 --> 02:40:37.320]  Значит, вот такая вариация. Да, так что AVL, как легко догадаться, это две фамилии. Да, вот, да. Итак, ну,
[02:40:37.320 --> 02:40:43.120]  начнем с маленькой простой теории. Маленькая простая теория говорит, что высота этого AVL-терева
[02:40:43.120 --> 02:40:49.320]  логарифом. Правда, логарифом, видимо, не по оставанию два, а по оставанию уже полюбившегося нам
[02:40:49.320 --> 02:40:59.360]  мистического числа. Вот. Вот. Ну, доказательства понятно тут. Достаточно просто доказать по индукции,
[02:40:59.360 --> 02:41:09.280]  что в дереве высоты H у нас вершин будет просто не меньше, чем H-те число Fibonacci. Вот. То есть,
[02:41:09.880 --> 02:41:14.600]  думаю, действительно нет смысла расписывать. Собственно, мы уже и не такое с вами расписывали.
[02:41:14.600 --> 02:41:22.280]  Ну, вот. Причем не только мы с вами, но и вы еще и сами тоже. Ну, вот. Так что тут, соответственно,
[02:41:22.280 --> 02:41:29.760]  да, можно формулу взять, можно самим доказать. Но теперь возникает вопрос хорошо. Как это вот?
[02:41:29.760 --> 02:41:35.080]  Хорошо. Классно. То есть, если мы умеем поддерживать вариант, что разность высот не превосходит один в
[02:41:35.080 --> 02:41:41.240]  ту или иную сторону, то тогда получается, что высота будет логарифом. Значит, если мы сейчас научимся
[02:41:41.240 --> 02:41:52.040]  делать все операции за ОАТАШ и при этом поддерживать высоты, то тогда мы победили. Логично, да? Вот. Как
[02:41:52.040 --> 02:42:01.280]  же мы это будем делать? А вот таким вот образом. Ну, то есть, идея будет такая. Вот как мы будем
[02:42:01.280 --> 02:42:06.080]  делать вставку. Очень просто. То есть, вставку мы будем делать предельно, тупо вот прям вот так же
[02:42:06.080 --> 02:42:13.520]  идем-идем-идем, навешиваем. А потом возвращаемся рекурсивно. В рекурсии в каждой вершине говорим,
[02:42:13.520 --> 02:42:24.840]  ой, если у меня слева и справа высоты стали отличаться на два, то давайте я сделаю мистический поворот.
[02:42:24.840 --> 02:42:35.760]  Вот. Какой я делаю? Вот. Я попытаюсь локально решить. То есть, вершина при этом будет смотреть
[02:42:35.760 --> 02:42:42.440]  только в детей и внуков. Как-то вот. И попробую как-то решить вопрос. Но правда,
[02:42:42.440 --> 02:42:53.120]  она будет... Значит, какие повороты она попробует сделать? Ну, у нас будет четыре варианта. Вот.
[02:42:53.120 --> 02:43:01.000]  Малая левая, малая правая, большая левая, большая правая. Вот. То есть, вот такие примерно повороты
[02:43:01.000 --> 02:43:04.600]  мы попытаемся делать. То есть, как это будет выглядеть? Ну, то есть, нам придется рассматривать
[02:43:04.600 --> 02:43:13.480]  случаи. Значит, самый простой случай. Вот, предположим, что у нас в какой-то вершине оказалось,
[02:43:13.480 --> 02:43:21.920]  что у нас у правой вершины высота на два, у правого поддерева высота на два больше, чем у левого.
[02:43:21.920 --> 02:43:34.800]  Предположим, что такое произошло. Что мы тогда делаем? Ну, тогда мы делаем малый поворот. А именно,
[02:43:34.800 --> 02:43:41.320]  ну, просто объявляем этого правого ребенка родителям. Значит, родитель становится левым
[02:43:41.320 --> 02:43:48.000]  ребенком. Вот. Какие проблемы? Как говорится, то чего? Родитель становится ребенком. Ну,
[02:43:48.000 --> 02:43:55.480]  как бы, ничего страшного, он же меньше. А, ну да. Вот. И переподвешиваем под деревья. Ну, видим,
[02:43:55.480 --> 02:44:05.320]  что с точки зрения инварианта двоичного дерева поиска ничего не поменялось. Видно, да? Вот. Так
[02:44:05.320 --> 02:44:10.840]  же, вот такое. Ну, в принципе, да, тут немножко кое-что не хватает, поэтому давайте, ой, а давайте,
[02:44:10.840 --> 02:44:18.320]  так, неужели свет придется включить все-таки? Или это видно? Это видно? Что тут на доске? Что
[02:44:18.320 --> 02:44:29.240]  тут на доске происходит? Да? Ай. Так. Программисты. Так.
[02:44:48.320 --> 02:44:59.400]  И так. Что у нас тут происходит? Значит, вот давайте проанализируем. Что же у нас такое? Вот и так,
[02:44:59.400 --> 02:45:04.760]  давайте попробуем. Вот пусть у нас есть вершина А, есть вершина В. Вот выяснилось, что у нее есть,
[02:45:04.760 --> 02:45:11.040]  я под деревья буду немножко по-другому рисовать. Буду их назвать А, Б, Г. Значит, такой поворот,
[02:45:11.040 --> 02:45:18.280]  значит нас интересует, когда здесь образовалась неожиданно высота H, и тут высота H плюс 2.
[02:45:18.280 --> 02:45:30.600]  Вот. Но, предположим, ну вот, но поворот, но это еще не все. Ну, казалось бы, да, вот,
[02:45:30.600 --> 02:45:37.480]  к чему нас приведет, если мы тут вот повесим В, повесим А, тут повесим Гамма. Ну и тут,
[02:45:37.480 --> 02:45:43.560]  соответственно, какие высоты будут у вот этих под деревьев? Будут ли они теперь отличаться
[02:45:43.560 --> 02:45:52.360]  не более чем на один? На самом деле не факт. Ну то есть нас интересует случай, вот как сказано,
[02:45:52.360 --> 02:45:58.800]  если у нас тут будет заведомо H плюс 3, а тут что-то от H плюс 3 до H плюс 4.
[02:45:58.800 --> 02:46:19.640]  Ну ладно, давайте тогда тут будет H плюс 1, а тут от H плюс 2. Вот. Тогда,
[02:46:19.640 --> 02:46:24.920]  когда мы делаем поворот, что мы видим? Значит, так, тут у нас получается H, тут у нас H плюс 1,
[02:46:24.920 --> 02:46:33.960]  значит, тут получается H плюс 2. Здесь у нас получается, вот, значит, получается от H до H
[02:46:33.960 --> 02:46:40.400]  плюс 1. И видите, получается, могут быть проблемы. То есть, если оказалось, что действительно у Гаммы,
[02:46:40.400 --> 02:46:46.880]  значит, оказывается высота строго меньше, чем у Беты, то этот поворот нам не помогает.
[02:46:46.880 --> 02:46:55.680]  Скажем так, это называется потому, что мы рассмотрели такой случай. Да. То есть,
[02:46:55.680 --> 02:47:03.880]  он не соответствует этому, вот почему. Да. То есть, чтобы этот случай работал,
[02:47:03.880 --> 02:47:08.920]  нам нужно гарантировать, что вот это под дерево имеет высоту не меньше, чем вот это. То есть,
[02:47:08.920 --> 02:47:17.480]  на самом деле, вот здесь должно быть H, H плюс 1. Вот. А здесь вот H плюс 1 должен быть прям без всяких
[02:47:17.480 --> 02:47:27.480]  вопросов и интервало. Вот. Тогда становится адекватно. То есть, тут как бы получается H,
[02:47:27.480 --> 02:47:37.440]  и тут вот H, H плюс 1. Тут получается, значит, высота H плюс 1, H плюс 2. Вот. Здесь получается
[02:47:37.440 --> 02:47:47.080]  H плюс 1, и это нас устраивает. Вот. Причем, кстати, на будущее нам еще важно заметить,
[02:47:47.080 --> 02:47:53.640]  что как бы получается, тут высота получается H плюс 3, а тут высота стала в результате этого
[02:47:53.640 --> 02:48:01.080]  поворота от H плюс 2 до H плюс 3. То есть, это нам просто для доказательства чуть-чуть потребуется.
[02:48:01.080 --> 02:48:11.160]  Вот. Это у нас такой случай малого левого поворота. Ну, малый правый, это тоже, это просто вот
[02:48:11.160 --> 02:48:17.760]  практически картинка в другую сторону, если там произошел аналогичный случай. Вот. Понятно, да?
[02:48:17.760 --> 02:48:26.520]  Но возникает вопрос. А что делать, если у нас все-таки вот этот вот BAT почему-то перевешивает H?
[02:48:26.520 --> 02:48:43.800]  Что происходит в этом случае? Ну, это не интересно. Вот. Получается немножко красоты.
[02:48:43.800 --> 02:48:55.480]  Ну, давайте посмотрим. Вот, допустим, вот действительно, как мы изначально нарисовали,
[02:48:55.720 --> 02:49:03.000]  то есть вот у нас жил был альфа с высотой H, жил был B с высотой H плюс 2. Почему? Потому что у него
[02:49:03.000 --> 02:49:13.720]  был C с высотой H плюс 1. А тут у нас под деревья, значит, с высотой, значит, у нас бета с высотой H,
[02:49:13.720 --> 02:49:30.680]  то есть H минус 1 H. И тут гамма с высотой H минус 1 H. И тут у нас получается дельта с какой высотой?
[02:49:30.680 --> 02:49:37.240]  Ну, соответственно, H. Вот прям жесткий случай мы рассматриваем. Да, почему мы рассматриваем
[02:49:37.240 --> 02:49:41.320]  жесткий случай? Потому что, естественно, больших поворотов мы хотим избегать в пользу малых,
[02:49:41.320 --> 02:49:48.280]  потому что, ну, малые повороты, они меньше. Ну, тупо, меньше переподвешивать. Ну, а как вы уже
[02:49:48.280 --> 02:49:53.960]  там забегая вперед, если вы там писали когда-нибудь дикартячки? Ладно, тупой вопрос. Давайте немножко
[02:49:53.960 --> 02:50:01.400]  физкультурки. Поднимите руки, кто когда-нибудь писал дикартовое дерево? Вот. Так, молодцы. А кто
[02:50:01.400 --> 02:50:09.640]  когда-нибудь писал дикартовое дерево по неявному ключу? Вот. А кто когда-нибудь писал персистентное
[02:50:09.640 --> 02:50:20.560]  дикартовое дерево? А уже не физкультурка, да? Да, отлично. Вот. Так, хорошо. А кто когда-нибудь писал
[02:50:20.560 --> 02:50:31.440]  дерево отрезков? А сливаемое дерево отрезков? О, а что это такое, да? Так, а кто когда-нибудь писал
[02:50:31.440 --> 02:50:50.520]  фенвика? Австречного фенвика? А персистентного фенвика? Откуда ты знаешь? Ух ты. О, ты знаешь,
[02:50:50.520 --> 02:50:57.520]  сложного персистентного фенвика? Персистентный фенвик, это же дерево отрезков. Нет, персистентный фенвик,
[02:50:57.520 --> 02:51:03.480]  пока для верфистины фенвика это словосочетание, которое я просто сгенерировал только что. То есть,
[02:51:03.480 --> 02:51:08.240]  наверное, ему можно придумать какой-то адекватный смысл с формулированным так. Так что это просто
[02:51:08.240 --> 02:51:14.920]  это. Так что это. Хорошо. Ладно, немножко разомнулись. Хорошо. Итак, значит, что же делать, если у нас тут
[02:51:14.920 --> 02:51:19.800]  с... Так вот, я просто к чему вспомню дикартовое дерево? Потому что в дикарту постоянно вы помните,
[02:51:19.800 --> 02:51:24.760]  что когда надо что-то куда-то переподвешивать, надо что-то везде пересчитывать, да? Потому что в
[02:51:24.760 --> 02:51:28.920]  каком-нибудь там будущем дикартовом дереве вы хотите пересчитывать там сумму на отрезке, да,
[02:51:28.920 --> 02:51:35.600]  вот это вот все безобразие. Вот. Там сумму на отрезке, там еще какой-то минимум, там еще какая-то
[02:51:35.600 --> 02:51:40.440]  гадость. То есть, постоянно. То есть, вот поэтому. То есть, это все жирно, поэтому хочется больших
[02:51:40.440 --> 02:51:53.320]  поворотов делать как можно меньше. Так. Ну и тут у нас высота, видимо, аж плюс три. Чего? Тут у нас аж,
[02:51:53.320 --> 02:52:02.480]  тут аж плюс два. Нет. В данном случае мы рассматриваем именно строго случай, когда тут аж. Нет,
[02:52:02.480 --> 02:52:10.440]  потому что если бы тут тоже был аж плюс один, это сюда бы тоже попадало. Потому что тут аж плюс
[02:52:10.440 --> 02:52:16.800]  один, тут аж плюс один тоже был бы кайф. То есть, как бы при равных аж плюс один, аж плюс один мы из
[02:52:16.800 --> 02:52:23.800]  малого и большого поворота выбираем малый. Так вот. Куда ж мы еще переподвешиваем? Ну тут у нас
[02:52:23.800 --> 02:52:33.680]  прям невиданный скачок. Как бы, как бы в корень под дерево неожиданно скачет внук. Вот. Вот родитель
[02:52:33.680 --> 02:52:44.880]  ждал своей очереди, а тут бабах, его внук обскакал. Нет, потому что внук просто очень жирный. Так. Вот.
[02:52:44.880 --> 02:53:01.040]  Ну да, как говорится. А про каким принципам в вашем королевстве? Так. Вот значит тут у нас аж,
[02:53:01.040 --> 02:53:11.880]  тут у нас аж минус один аж, тут аж минус один аж, и тут у нас аж. О, красота, красота. Да,
[02:53:11.880 --> 02:53:18.480]  что приятно. Да, тут у нас высота железобетона же аж плюс один, кстати, да. То есть, что приятно,
[02:53:18.480 --> 02:53:35.160]  она в результате этого даже уменьшилась. Откуда плюс два? А, да, да, да, да, да, да, да, да, да. Так,
[02:53:35.160 --> 02:53:38.760]  но все равно, видите, было аж плюс три, стало аж плюс два. Но правда аж плюс три было при
[02:53:38.760 --> 02:53:48.600]  неадекватном балансе. Вот. Ну, поэтому здесь надо аккуратнее. Ну вот, то есть вот предлагается
[02:53:48.600 --> 02:53:56.840]  такие вращения делать. То есть, ну вот, ну большое правое, ну понятно тут без комментариев. То есть,
[02:53:56.840 --> 02:54:04.000]  в результате вставка получается вот такой, значит алгоритм. Вроде не сильно сложный, да. То есть,
[02:54:04.000 --> 02:54:08.560]  проходим по пути поиска, то есть проходим по пути поиска, пока не находим место, куда надо
[02:54:08.560 --> 02:54:12.640]  вставить ключ. Его вставляем. После этого возвращаемся из рекурсии и в каждой вершине
[02:54:12.640 --> 02:54:18.800]  проверяем, что если разность высот под деревьев равна два, просто выполняем нужное вращение.
[02:54:18.800 --> 02:54:31.520]  Казалось бы, вот кайфец. Да, вот многие действительно считают, что никаких вопросов тут не возникает. Но,
[02:54:31.520 --> 02:54:39.000]  к сожалению, лично у меня возникает. Нет, почему залог? Ну потому что у нас высота дерева была
[02:54:39.000 --> 02:54:44.800]  корректная. Помните, у нас корректный инвариант, значит, адекватно. Тут она там, то есть мы тут
[02:54:44.800 --> 02:54:51.360]  работали за от тоже высоты дерева. То есть, она может там изменилась на сколько-то, но то все равно
[02:54:51.360 --> 02:54:55.880]  инвариант в итоге соблюлся, поэтому все равно в порядке. Мы все равно работали от старой высоты,
[02:54:55.880 --> 02:55:24.360]  поэтому все в порядке. Ну да. Ну тут надо да. Нет, ну как сказать? Нет, ну тут надо уточнять
[02:55:24.360 --> 02:55:28.800]  вопрос. Нет, вращение можно повернуть, потому что просто никто нам не мешает взять и сделать вращение.
[02:55:28.800 --> 02:55:41.480]  Да, именно. Потому что на самом деле действительно тут вытекает четкий вопрос, который меня лично
[02:55:41.480 --> 02:55:51.760]  возит до экзамена. А кто сказал, что у вас не возникнет ситуация, когда разность высот равна 3 или 4 или 57?
[02:55:51.760 --> 02:55:58.360]  И что? Только проблема в том, что вы еще какие-то поддеревья меняете, то есть вы еще какие-то
[02:55:58.360 --> 02:56:05.040]  повороты делаете. Может у этих поворотов тоже высоты как-то поменяются. Инвариант такой,
[02:56:05.040 --> 02:56:12.920]  наше поддерево починено и мы не трогали, а все что выше нашего мы не трогали. Да, ну может оно починено с какой-то
[02:56:12.920 --> 02:56:14.280]  принципиально другой высотой.
[02:56:14.280 --> 02:56:30.760]  А может же быть, что у тебя в начале была дерева, вот в вершинке А высота H плюс 3, осталась вершинка C, а вот H плюс 2, а у брата А была H плюс 4.
[02:56:30.760 --> 02:56:41.760]  У нас в текущей высоте корня вращаемого дерева, она изменится не больше чем на 1, изменится не больше чем на 1,
[02:56:41.760 --> 02:56:49.760]  потому что мы показали, изменится не больше чем на 1, уменьшится не больше чем на 1.
[02:56:49.760 --> 02:56:58.760]  Ну, по сравнению с тем струбичей, да, но тут уже правда, но как бы обойдите внимание, то есть для этого пришлось все-таки еще пару
[02:56:58.760 --> 02:57:07.760]  нитривиальных действий сделать. Как минимум нарисовать эти H. Значит, смотрите, то есть доказательство будет звучать, то есть действительно,
[02:57:07.760 --> 02:57:14.760]  аккуратное доказательство будет звучать так, что, то есть надо просто по индукции попробовать доказать, что после вставки,
[02:57:14.760 --> 02:57:22.760]  значит, утверждение такое, когда вы делаете, то есть после вставки, значит, таким вот образом высота дерева не уменьшается,
[02:57:22.760 --> 02:57:33.760]  это важно, и увеличивается не более чем на 1. Нет, именно после, ну, в результате, то есть жила была дерево высоты H.
[02:57:33.760 --> 02:57:42.760]  Я вот считаю, что после того, как мы вставим туда вершину и проверим вот это вот все, то высота дерева будет от H до H плюс 1.
[02:57:42.760 --> 02:57:59.760]  Вот, вот мы сейчас попробуем это доказать по индукции. Значит, как мы это будем делать? Ну, значит, смотрите, когда мы приходим в корень,
[02:57:59.760 --> 02:58:06.760]  мы думаем, куда вставлять, влево или вправо? Ну, давайте без ограничений обществе предположим, что мы вставляем вправое под дерево, да?
[02:58:07.760 --> 02:58:15.760]  Тогда мы замечаем, что высота этого вправо под дерево, она по предположению индукции не уменьшается и увеличивается не более чем на 1, да?
[02:58:15.760 --> 02:58:23.760]  Но заметим, что если разность высот между детьми корня при этом осталась не более чем 1 в ту или иную сторону,
[02:58:23.760 --> 02:58:31.760]  то тогда мы вынуждены заключать, что и у корня высота тогда получается не уменьшится и увеличится не более чем на 1, то что надо, правда?
[02:58:31.760 --> 02:58:39.760]  Так понятно, что я говорю? Так, непонятно. Ну ладно. Значит, хорошо, давайте то же самое, но нарисуем.
[02:58:39.760 --> 02:59:03.760]  Ну и смотрите, итак, то есть по идее как бы эта штука реализуется рекурсивно, то есть в том плане, что вы приходите в вершину,
[02:59:03.760 --> 02:59:10.760]  вы хотите добавить в нее какой-то х, да? И вот у нее есть левое под дерево и правое под дерево.
[02:59:10.760 --> 02:59:24.760]  И вы говорите, так, давайте, тут была высота какая-то h, тут была какая-то высота, ну, допустим, от h-1 до h-1, да?
[02:59:24.760 --> 02:59:42.760]  Понятно, да? Вот, но заметим следующее, что, значит, здесь после того, как вы вставили вместо h, у вас теперь высота стала от h до h-1.
[02:59:42.760 --> 02:59:54.760]  Но теперь заметим следующее, что если разность высот оказалась все еще не более чем 1 в ту или иную сторону, то тогда оказывается, что действительно,
[02:59:54.760 --> 03:00:02.760]  то тогда мы просто должны все, что мы должны сделать, теперь пересчитать высоту вот этой вершины, которая, очевидно, либо не поменялась, либо увеличилась на 1, согласны?
[03:00:03.760 --> 03:00:12.760]  Что? Нет, это я сказал в предположении, что тут разности высот адекватны. То есть тогда никаких проблем нет, все доказано.
[03:00:12.760 --> 03:00:21.760]  Это пока все, что я утверждаю. Вот, но может оказаться проблема, если с высотами возникли проблемы.
[03:00:21.760 --> 03:00:34.760]  Это могло быть только в том случае, если тут была высота h-1, там, тут была высота меньше, то есть тут h-1, а тут была высота h, которая торжественно превратилась в жесткий h-1.
[03:00:34.760 --> 03:00:59.760]  Вот. То есть вот такая вот красота. В этом случае тогда здесь высота становится по камере локально h+, то есть было h+, стало h+.
[03:00:59.760 --> 03:01:11.760]  И теперь все, что нам надо, это доказать, что в результате поворота, который мы сделаем, высота все еще будет либо h+, 1, либо h+, 2. То есть если это мы сделаем, мы победили.
[03:01:11.760 --> 03:01:21.760]  Мы по индукции предположили, что справа. Да, да, по индукции, по, ну, например, количеству вершин. Ну, нет, по высоте тут не аккуратно.
[03:01:21.760 --> 03:01:30.760]  Ну, хотя, ну, 8, ну, лучше по количеству вершин, так совсем надежно. Вот.
[03:01:30.760 --> 03:01:39.760]  Вот. Нет, понятно, это я, конечно, ловлю флешбек из кучи фибоначчи там, конечно, но все-таки. Вот. Значит, ну давайте разбираться.
[03:01:39.760 --> 03:01:49.760]  То есть как бы перед поворотом, ну, тут у нас правда получился сдвиг, то есть тут у нас правда исходно сдвиг, то есть исходно высота была h+, 3.
[03:01:49.760 --> 03:01:58.760]  Но как бы это не суть важна. То есть как бы нам сейчас надо просто убедиться, что после поворота высота будет либо h+, 3, либо h+, 2.
[03:01:58.760 --> 03:02:06.760]  Но мы в этом оба раза уже убедились. Видно, да? То есть просто вот даже картинку перерисовывать не надо.
[03:02:06.760 --> 03:02:13.760]  Вот. То есть мы уже в этом аккуратненько убедились, и это как раз и дает нам возможность заявить, что все в порядке.
[03:02:14.760 --> 03:02:23.760]  То есть вот видим, чтобы аккуратно доказать, что с высотой все в порядке, нужно еще вот пару нетривиальных действий проделать с точки зрения формальной математики.
[03:02:23.760 --> 03:02:29.760]  Чего? Последний шаг, что мы сказали? Ну последний шаг сказали так. Предположим, что надо делать поворот.
[03:02:29.760 --> 03:02:36.760]  Тут h+, 1, тут h+, 2. Ну давайте сдвинем еще h так, чтобы это было h+, 2 и h+, 3.
[03:02:36.760 --> 03:02:39.760]  Ну это просто для того, чтобы у нас тут картинки совпали.
[03:02:39.760 --> 03:02:48.760]  И заметьте, что мы сделаем либо вот этот поворот, и тогда у нас высота будет какая-то такая, либо вот этот поворот, и тогда у нас высота будет ровно h+, 2.
[03:02:52.760 --> 03:02:55.760]  Так что вот такая красота.
[03:02:56.760 --> 03:03:02.760]  Вот. Так что вот так у нас работает вставка.
[03:03:03.760 --> 03:03:08.760]  Вот как вы думаете, как же у нас работает удаление?
[03:03:12.760 --> 03:03:15.760]  Как оно тут может работать, действительно, как вы думаете?
[03:03:16.760 --> 03:03:23.760]  Чего? Ну, да, но идея действительно такая, да.
[03:03:24.760 --> 03:03:35.760]  Вот. Ну то есть по факту делаем вот как-то удаление, которое мы раньше обсуждали, но при этом там, видите, в одном месте там происходит не удаление, а просто замена.
[03:03:36.760 --> 03:03:46.760]  И все, что вам останется, но в какой-то момент реально какую-то вершину придется удалить, и под дерево ее, точнее то, что на месте ее будет уменьшиться ровно на 1.
[03:03:47.760 --> 03:03:57.760]  Но на самом деле вот именно, то есть как вы помните, то есть как бы, то есть там в худшем случае удаление будет так, то есть идем-идем-идем-идем-идем, хотим удалить эту вершину, но у нее два под дерево.
[03:03:58.760 --> 03:04:04.760]  Поэтому мы тут идем-идем-идем-идем-идем-идем, и вот это удаляем, это переподвешиваем.
[03:04:05.760 --> 03:04:17.760]  Вот. И начиная уже с этого момента, конечно же тут проходим, то есть делаем все это отступаем, то есть идем рекурсивно, и приходим и доходим до корни.
[03:04:19.760 --> 03:04:25.760]  Вот, понятно, да? Вот, ну делая абсолютно те же самые вращения.
[03:04:27.760 --> 03:04:32.760]  Ну вам только в качестве упражнений останется только показать, что тут действительно будет все адекватно.
[03:04:34.760 --> 03:04:35.760]  Вот, понятно?
[03:04:37.760 --> 03:04:52.760]  Ну то есть там условно, что сначала там, ну там доказать, что там, что если у вас удаление произошло где-то в под дерево, то как бы там, то в итоге высота как бы либо останется той же, либо уменьшится на 1 в результате всех поворотов.
[03:04:54.760 --> 03:04:57.760]  То есть получается вот такая вот надежная штука.
[03:04:57.760 --> 03:04:59.760]  Почему она работает за логарифом?
[03:05:00.760 --> 03:05:10.760]  Почему она работает за логарифом? Потому что, ну ключевой ответ такой, потому что мы работаем от высоты, которой она была перед вставкой или удалением.
[03:05:11.760 --> 03:05:19.760]  Вот, это во-первых, а во-вторых, значит перед непосредственно удалением соблюдался инвариант.
[03:05:20.760 --> 03:05:27.760]  А у нас в самом начале была теория о том, что если у двоичного дерева соблюдается вот этот инвариант, что разности высот адекватные, то это от логарифма.
[03:05:28.760 --> 03:05:29.760]  Ну не логарифом, но от логарифма.
[03:05:31.760 --> 03:05:33.760]  Вот такая вот красота.
[03:05:35.760 --> 03:05:42.760]  Вот, ну на самом деле, как мы с вами, видимо, в следующий раз убедимся, на самом деле с точки зрения всех олимпиадных задач этого достаточно.
[03:05:43.760 --> 03:05:47.760]  То есть вам не нужно знать, что такое дикартовое дерево, на самом деле нужно знать только это.
[03:05:48.760 --> 03:05:50.760]  Вот.
[03:05:51.760 --> 03:05:54.760]  И вот в следующий раз мы, видимо, и подробно обсудим, как это делать.
[03:05:55.760 --> 03:06:03.760]  То есть на самом деле сплит и бёж прекрасно поддерживает и АВЛ, и красно-чёрное дерево, и, конечно, в первую очередь Б-дерево, с которым мы и начнём.
[03:06:04.760 --> 03:06:11.760]  Это так, забегая вперёд. То есть на самом деле, как бы там, как бы с точки зрения теории, красно-чёрное, то есть дикартовое дерево не нужно.
[03:06:12.760 --> 03:06:18.760]  И вот сплей ещё куда не шло, он там нужен в одном месте. А чтобы линкат адекватный был.
[03:06:19.760 --> 03:06:20.760]  Да.
[03:06:21.760 --> 03:06:25.760]  Да, потому что если вы линкат напишите с АВЛ, то, соответственно, будет логарифм в квадрате.
[03:06:26.760 --> 03:06:29.760]  А если напишите со сплеем, то почему-то будет логарифм.
[03:06:30.760 --> 03:06:34.760]  Нет, ну не то чтобы почему-то, мы с вами даже ещё и распишем почему, собственно.
[03:06:35.760 --> 03:06:37.760]  Ну вот, но там красиво.
[03:06:37.760 --> 03:06:38.760]  Вот.
[03:06:39.760 --> 03:06:45.760]  Но это, видимо, в будущем. Пока же, вот такое у нас, пока же первое историческое дерево было вот такое.
[03:06:46.760 --> 03:06:48.760]  Ну, в принципе, идея на его может и хватить.
[03:06:50.760 --> 03:06:51.760]  Вот.
[03:06:53.760 --> 03:06:56.760]  Значит, идея на всё логарифм, казалось бы, что ещё надо.
[03:06:59.760 --> 03:07:00.760]  А всё?
[03:07:02.760 --> 03:07:04.760]  Презентация закончилась? Ничего страшного.
[03:07:04.760 --> 03:07:05.760]  Ничего страшного.
[03:07:06.760 --> 03:07:07.760]  У меня ещё есть.
[03:07:08.760 --> 03:07:09.760]  У меня ещё три есть, да.
[03:07:11.760 --> 03:07:12.760]  О.
[03:07:13.760 --> 03:07:14.760]  Да.
[03:07:15.760 --> 03:07:19.760]  Значит, потому что, смотрите, какие у нас проблемы возникли.
[03:07:20.760 --> 03:07:23.760]  Почему мы рассматриваем ещё какие-то деревья?
[03:07:24.760 --> 03:07:29.760]  Нет, формально говоря, на самом деле, в стандарте плюс-плюс, если его открыть, скорее всего, вряд ли будет возражать.
[03:07:29.760 --> 03:07:35.760]  Против того, чтобы вы подсунули в качестве СТД-сета, там, скажем, АВЛ-дерево.
[03:07:39.760 --> 03:07:41.760]  Прямо в явном виде написано, а ну-ка.
[03:07:45.760 --> 03:07:46.760]  Ага, ну вот да.
[03:07:47.760 --> 03:07:50.760]  Но, правда, чаще, почему-то считается, что реализуют скорее красночёрта.
[03:07:51.760 --> 03:07:52.760]  Вот.
[03:07:52.760 --> 03:07:53.760]  Но есть причины, на самом деле, почему.
[03:07:54.760 --> 03:07:56.760]  Чем вообще, давайте подумаем.
[03:07:56.760 --> 03:08:00.760]  Давайте подумаем, какой может быть недостаток в АВЛ-дереве вообще в принципе.
[03:08:02.760 --> 03:08:04.760]  Ну, первая причина, конечно, память.
[03:08:05.760 --> 03:08:08.760]  Потому что в каждой вершине вы в явном виде должны хранить высоту.
[03:08:13.760 --> 03:08:18.760]  Но, да, но, тем не менее, сколько-то байт на это потребуется.
[03:08:19.760 --> 03:08:24.760]  То есть, если предположить, что у вас там эта высота влезет в байт.
[03:08:25.760 --> 03:08:26.760]  Допустим, даже.
[03:08:27.760 --> 03:08:31.760]  То это всё равно означает, что на Н-элементов потребуется Н-байт лишней информации.
[03:08:40.760 --> 03:08:43.760]  Нет, ну скажем так, если вы храните деревья, то да, без указателей никак.
[03:08:44.760 --> 03:08:49.760]  Но помимо этих указателей, остальную память тоже хочет оптимизировать.
[03:08:50.760 --> 03:08:51.760]  Вот.
[03:08:52.760 --> 03:08:54.760]  Как бы, такие вот ещё балансики.
[03:08:55.760 --> 03:08:57.760]  Нет, тут ещё такие балансики.
[03:08:58.760 --> 03:08:59.760]  Но, на самом деле, есть ещё причины.
[03:09:00.760 --> 03:09:05.760]  Потому что тут ещё вопрос, что нам приходится делать логарифом вот этих вот вращений.
[03:09:06.760 --> 03:09:09.760]  Проблема, конечно, не в том, что нам там лень что-то кодить или в чём разбираться.
[03:09:10.760 --> 03:09:14.760]  Потому что эту проблему, конечно, Красночёрное Дерево не решит, забегая вперёд.
[03:09:15.760 --> 03:09:21.760]  Но проблема будет в том, что этих поворотов программа будет выполнять слишком много.
[03:09:22.760 --> 03:09:25.760]  То есть как бы это формально логарифом, но какой-то жирный нельзя сделать.
[03:09:26.760 --> 03:09:29.760]  То есть поворот – это перестраение дерева, перестраение каких-то итераторов.
[03:09:30.760 --> 03:09:37.760]  Особенно, если вы знаете, вот отдельная песня, как в STL реализуется вот этот итератор плюс-плюс в сете.
[03:09:38.760 --> 03:09:39.760]  Или итератор минус-минус.
[03:09:40.760 --> 03:09:44.760]  Ну вот, то есть там приходится... Вот видите, тут тоже трейдол.
[03:09:45.760 --> 03:09:51.760]  Потому что чисто теоретически, если нам плевать на константу по времени и по памяти, то есть вообще очень тупой вариант.
[03:09:52.760 --> 03:09:55.760]  А давайте для каждого элемента тупо хранить указатели на следующие и предыдущие.
[03:09:58.760 --> 03:10:03.760]  А если ещё и в каждой вершине вы храните ссылку на самый левый и самый правый в поддереве,
[03:10:03.760 --> 03:10:10.760]  то, в принципе, тогда при всяких переподвешиваниях и рекалькулейтах вы это всё будете переконнекчивать без проблем.
[03:10:12.760 --> 03:10:15.760]  То есть теоретически спокойно делается, но практически это жирно очень.
[03:10:17.760 --> 03:10:21.760]  То есть, помните, после STL он в этом месте начинает очень жёстко трейдофить.
[03:10:22.760 --> 03:10:27.760]  То есть как бы он говорит, что мы жертвуем тем, что плюс-плюс будет работать за О от единицы прям жёсткие.
[03:10:28.760 --> 03:10:34.760]  Если вы пробираетесь от beginning до end, то он будет работать за О от единицы в среднем, в амортизированном смысле.
[03:10:35.760 --> 03:10:39.760]  Но каждый конкретный плюс-плюс может работать за, дай бог, что благорифу.
[03:10:43.760 --> 03:10:45.760]  Я бы очень хотел в это верить.
[03:10:50.760 --> 03:10:55.760]  Но в этом месте решили, что лишние указатели с предподсчётом лучше не хранить – это мелочь.
[03:10:57.760 --> 03:10:59.760]  Чем может помочь красно-чёрное деревья?
[03:11:00.760 --> 03:11:05.760]  Красно-чёрное деревья могут помочь тем, что мы не храним никаких высот в дереве.
[03:11:06.760 --> 03:11:12.760]  А вместо этого, помимо стандартных лево-право-указателей, право-указателей и, видимо, указателей на родителя,
[03:11:15.760 --> 03:11:17.760]  мы будем хранить цвет.
[03:11:21.760 --> 03:11:23.760]  То есть каждая вершина у нас будет одного из двух цветов.
[03:11:24.760 --> 03:11:31.760]  Волею авторов эти цвета будут красный и чёрный.
[03:11:33.760 --> 03:11:39.760]  Остаётся загадкой, почему они не зелёные и серо-бурмалиновые, но они выбрали так.
[03:11:41.760 --> 03:11:43.760]  И так смотрите.
[03:11:44.760 --> 03:11:46.760]  Но, конечно же, будут инварианты.
[03:11:47.760 --> 03:11:49.760]  Инвариант будет жёсткий.
[03:11:54.760 --> 03:11:56.760]  Но не самые жёсткие.
[03:11:57.760 --> 03:12:00.760]  Каждая вершина у нас бывает красной или чёрной.
[03:12:01.760 --> 03:12:03.760]  Корень всегда чёрный.
[03:12:06.760 --> 03:12:08.760]  Так же каждый лист.
[03:12:09.760 --> 03:12:15.760]  Сразу говорим оговоречко, что вершина с ключом листом не является.
[03:12:16.760 --> 03:12:22.760]  То есть у нас листами могут быть только фиктивные нулечки.
[03:12:24.760 --> 03:12:30.760]  Это нам только для идеи нам нужно, в коде мы это вряд ли будем использовать, но подразумевать такое будем.
[03:12:32.760 --> 03:12:34.760]  Понятно, что все эти нулечки создавать не обязательно,
[03:12:35.760 --> 03:12:39.760]  на самом деле достаточно создать максимум одну такую вершину, да и то не обязательно.
[03:12:39.760 --> 03:12:46.760]  Ну и то, хотя иногда удобно её создать, чтобы было удобно смотреть, а какой цвет у моего ребёнка.
[03:12:47.760 --> 03:12:52.760]  И чтобы там не разбирать в случае, а он есть вообще? Нету, тогда чёрный.
[03:12:59.760 --> 03:13:01.760]  Ну а какие ещё инварианты будут?
[03:13:02.760 --> 03:13:05.760]  Все такие нулечки чёрные заведомо, корень чёрный.
[03:13:06.760 --> 03:13:13.760]  Значит ещё идёт, что в некотором смысле у нас нету двух идущих подряд красных узла.
[03:13:15.760 --> 03:13:21.760]  Ну в том плане, что если узел красный, то гарантируется, что оба его ребёнка чёрные.
[03:13:23.760 --> 03:13:28.760]  То есть как бы у чёрного ребёнка может быть какое угодно, но у красных ребёнки только чёрные.
[03:13:29.760 --> 03:13:32.760]  Вот, так что вот так вот.
[03:13:34.760 --> 03:13:40.760]  И конечно самый весёлый инвариант, внимание, для любого пути,
[03:13:41.760 --> 03:13:48.760]  значит если вы рассмотрите абсолютно любой путь от корня до нулечка, до нулечки,
[03:13:49.760 --> 03:13:54.760]  то количество чёрных вершин, которые вы там найдёте, будет абсолютно одно и то же для всех нулечек.
[03:13:54.760 --> 03:13:56.760]  Это от корня или от корня?
[03:13:57.760 --> 03:13:58.760]  От корня.
[03:13:59.760 --> 03:14:04.760]  Ну правда, от того, что это верно от корня, следует, что если вы корень замените на любую вершину в дереве,
[03:14:05.760 --> 03:14:08.760]  это тоже будет верно, если вы будете рассматривать нулечки в её потопках.
[03:14:10.760 --> 03:14:11.760]  Да, это одно и то же.
[03:14:12.760 --> 03:14:16.760]  Ну то есть для каждой вершины это будет другое число, но оно будет одно и то же.
[03:14:17.760 --> 03:14:21.760]  Ну я имею в виду в том плане, что вот смотрите, вот в этом красно-чёрном дереве,
[03:14:21.760 --> 03:14:27.760]  например, вот мы идём от корня, видим раз, допустим два, три, четыре, вот пойдём сюда,
[03:14:28.760 --> 03:14:35.760]  что будет раз, два, три, четыре, там пойдём куда-нибудь вот сюда, что будет раз, два, три, четыре.
[03:14:36.760 --> 03:14:38.760]  Да, именно чёрных, это важно.
[03:14:39.760 --> 03:14:46.760]  То есть как бы видите, то есть по чёрному у нас всё жёстко, а вот красные иногда влезают.
[03:14:47.760 --> 03:14:51.760]  Но видите, они влезают аккуратно.
[03:14:52.760 --> 03:14:59.760]  Они влезают аккуратно в том плане, что как бы на пути не может быть две подряд красные вершины.
[03:15:00.760 --> 03:15:07.760]  Так, ну понятно, да, это красный такой цвет, да, вот, соответственно.
[03:15:08.760 --> 03:15:13.760]  Вот, но тем не менее все чёрные высоты у нас одинаковые.
[03:15:14.760 --> 03:15:19.760]  Как бы это нам гарантирует, что высота всего дерева у нас логарифмическая.
[03:15:20.760 --> 03:15:25.760]  Хотя вот видите, что сбалансированность в смысле АВЛ-а у нас, конечно, уже никак не гарантируется.
[03:15:26.760 --> 03:15:35.760]  Потому что как бы при одинаковых чёрных высотах, видите, мы там одно дерево можем оставить как есть, а во второе понавешивать кучу красных.
[03:15:36.760 --> 03:15:40.760]  То есть высоты могут прям у под деревьев аж в два раза отличаться.
[03:15:40.760 --> 03:15:41.760]  Вот.
[03:15:42.760 --> 03:15:50.760]  Вот, но есть пара не очень сложных леммочек, которые нам гарантируют, что если у нас дерево состоит из N вершин,
[03:15:51.760 --> 03:15:58.760]  по крайней мере внутренних, не считая нулечек, то тогда у нас получается, что высота не превосходит двух логарифмов.
[03:15:59.760 --> 03:16:02.760]  Чёрная высота, black height.
[03:16:03.760 --> 03:16:04.760]  Вот.
[03:16:07.760 --> 03:16:08.760]  Вот.
[03:16:09.760 --> 03:16:16.760]  И так, то есть вот такая вот красота. То есть по дереве, к чёрному узлу Х, как можно легко проделать по индукции,
[03:16:17.760 --> 03:16:20.760]  содержится как минимум вот столько чёрных вершин.
[03:16:20.760 --> 03:16:30.760]  Ну просто потому что у него что у него есть? У него как бы либо есть два чёрных сына, либо один чёрный сын и там два чёрных внука,
[03:16:31.760 --> 03:16:32.760]  либо четыре чёрных внука.
[03:16:33.760 --> 03:16:41.760]  То есть две, три или четыре вершины, чёрные вершины, то есть разобьёмся по тему черного.
[03:16:41.760 --> 03:16:47.920]  и там два черных внука, либо четыре черных внука, то есть две,
[03:16:47.920 --> 03:16:52.360]  три или четыре черные вершины, то есть там черных, так сказать,
[03:16:52.360 --> 03:16:57.560]  потомка, каждый из которых является вершиной с черной высотой на единичку меньше.
[03:16:59.240 --> 03:17:00.640]  Отсюда, в общем-то, и по индукции.
[03:17:04.080 --> 03:17:05.840]  И это только черных, обратите внимание.
[03:17:05.840 --> 03:17:10.440]  Вот. Вот, но дальше тут.
[03:17:10.440 --> 03:17:16.160]  Полеем черную, тоже отсюда понятно, что тут высота, да, логарифум умножить на два,
[03:17:16.160 --> 03:17:19.240]  то есть по высоте тоже мы не то чтобы прям обгоняем АВЛ,
[03:17:19.240 --> 03:17:22.960]  потому что УВЛ логарифум по основанию ФИ, а как бы логарифум по основанию ФИ,
[03:17:22.960 --> 03:17:27.240]  это явно, он отличается от логарифум по основанию два меньше, чем в два раза.
[03:17:27.240 --> 03:17:33.440]  Ну почему? Потому что там, понятно, логарифум двойки по основанию ФИ явно меньше двух,
[03:17:33.440 --> 03:17:40.480]  потому что ФИ в квадрате это сколько там? Ну там 256, и это только нижняя оценка.
[03:17:40.480 --> 03:17:48.360]  Вот. Так что-то получается, что опять, если мы каким-то образом поддерживаем этот инвариант,
[03:17:48.360 --> 03:17:55.520]  то тогда высота у нас логарифмическая, все хорошо. Осталось только выяснить,
[03:17:55.520 --> 03:18:00.840]  как его поддерживать. Точнее, как делать ставки и удаления. Ну, как поиски делать,
[03:18:00.840 --> 03:18:06.360]  очевидно, да, вот как делать ставки и удаления. Так, ну на чем с халявочки?
[03:18:06.360 --> 03:18:15.560]  Значит, ну да, тут все очень просто. Добавим в дерево, как в обычную вставку,
[03:18:15.560 --> 03:18:23.760]  то есть делаем честно-честно-честно-честно. Когда вставляем вершину, внимание, делаем ее красной.
[03:18:23.760 --> 03:18:28.560]  То есть когда мы новую вершину вставляем, мы как бы вставляем ее как красной. Если у
[03:18:28.560 --> 03:18:34.440]  нее родитель при этом оказался черный, то вообще никаких проблем нету. Просто сразу. Неплохо, правда?
[03:18:34.440 --> 03:18:52.560]  Так, или вопрос? Так, понятно, что происходит. Ну, то есть, ну то есть вот да, то есть да,
[03:18:53.040 --> 03:19:03.840]  слово как обычно. Это понятно, да? Ну, типа да. Ну, на место листа. Да, но как бы имеется в виду так,
[03:19:03.840 --> 03:19:07.680]  то есть по факту, что просто если мы понимаем, что его нужно вставить вот куда-то, скажем,
[03:19:07.680 --> 03:19:12.240]  сюда, то мы просто вешаем сюда новую красную вершину, которую будет два этих черных листа.
[03:19:12.240 --> 03:19:30.240]  Вот мысленно мы вот так делаем. Вот, понятно? Вот. То есть опять же, то есть можно по факту,
[03:19:30.240 --> 03:19:39.680]  то есть мы тянула их черные, они у нас скорее мы их мысленно имеем в виду. Вот. Так, ну вот.
[03:19:39.680 --> 03:19:46.040]  Но какие у нас проблемы могут? Как вы сказали, если мы сделали новую красную вершину, то есть
[03:19:46.040 --> 03:19:51.800]  черными высотами никаких проблем нет. Проблема может быть только, если у нее родитель красный.
[03:19:51.800 --> 03:19:58.720]  То есть поэтому и говорим, если родитель черный, то проблем нет сразу. Вот. То есть типичная такая
[03:19:58.720 --> 03:20:07.600]  ситуация. Вот. Соответственно. А если у нас, ну вот, но что делать, если родитель красный? То есть мы
[03:20:07.600 --> 03:20:15.720]  красные, родитель красный. Непорядок. Это надо исправлять. Но если мы просто покрасим родителя
[03:20:15.720 --> 03:20:25.640]  в черный, то тогда у нас проблема с высотами. То есть, к сожалению, нельзя просто так взять и
[03:20:25.640 --> 03:20:29.840]  покрасить родителя в красный. Можно было с тем же успехом сказать, а давайте мы будем черные сразу.
[03:20:29.840 --> 03:20:41.000]  Но нельзя просто так взять и стать черным. Вот. То есть, к сожалению, тут. Ну да, да, в этой теме
[03:20:41.000 --> 03:20:52.200]  всегда так, да. Вот. Но ничего. Но ничего. Значит, у нас будет специальная функция вставка пофиксить,
[03:20:52.200 --> 03:21:01.960]  которая будет заниматься перекраской вершин и, возможно, какими-то поворотами. Значит, и так.
[03:21:01.960 --> 03:21:09.920]  Ситуация. Предположим, значит, инвариант. Значит, инвариант. У нас дерево, ну у нас дерево, в принципе,
[03:21:09.920 --> 03:21:15.040]  хорошее. Там все в нем хорошо, только кроме одного. Есть красная вершина, у которой есть красный
[03:21:15.040 --> 03:21:24.360]  родитель. Но это только один раз происходит? Да-да-да, только один раз. Все, да. Вот. Так что это вот
[03:21:24.360 --> 03:21:34.560]  типа считаем, что это единственная проблема. Так вот, значит, мы тогда это решаем проблему так. Да, ну
[03:21:34.560 --> 03:21:40.520]  вот, это вот мы нарисовали. Вот такая проблема, допустим. Ну, в принципе, из этой картинки виден и
[03:21:40.520 --> 03:21:54.320]  первый случай. Предположим, что нам фантастически повезло. Ой. Да, тут вот. Да, тут написан какой-то текст.
[03:21:54.320 --> 03:22:04.760]  Вот. Значит, смотрите. И предположим, что нам фантастически повезло, что не только мы родитель
[03:22:04.760 --> 03:22:16.360]  красный, но и дядя красный. Вот. То есть у нас такая хорошая индейская семья. Да. Но тогда, но тогда
[03:22:16.360 --> 03:22:22.960]  мы говорим, нет, ну дед-то, понятно, черный, но это временно. Тогда мы говорим, тогда мы говорим так,
[03:22:22.960 --> 03:22:31.600]  значит, что дорогие родитель и дядя, поздравляем, вы теперь черные. Так, ну у нас же проблема с черными
[03:22:31.600 --> 03:22:39.320]  высотами. Ничего. Дедушка, теперь ты красный. Так, ну у меня же и родитель красный. Теперь это твои проблемы.
[03:22:39.320 --> 03:22:47.040]  Вот. И да. И мы в данном случае, можно сказать, рекурсивно продолжаем решать проблему уже с этой
[03:22:47.040 --> 03:22:55.480]  вершины. Да, но тут сразу оговорка, что если оказалось, что если у нас дед оказался корнем,
[03:22:55.480 --> 03:23:03.080]  значит мы тупо его, вот к его-то мы уже можем покрасить черный. Да, обратите внимание. То есть
[03:23:03.080 --> 03:23:09.720]  инвариант черной высоты не нарушается от перекраски корня в любую сторону. Поэтому, если в какой-то
[03:23:09.720 --> 03:23:15.240]  момент проблемной вершиной стал корень, то мы просто корень перекрашиваем в черный цвет и
[03:23:15.240 --> 03:23:22.840]  заканчиваем работу. Вот. Но если дедушка все-таки еще не совсем корень, то значит, он становится
[03:23:22.840 --> 03:23:28.360]  красненьким и мы уже продолжаем. Но обратите внимание, вот что нам будет важно. Мы не сделали
[03:23:28.360 --> 03:23:37.240]  ни одного поворота. Мы просто перекрасили вершины. Да. Перекрасили деда, перекрасили папу,
[03:23:37.240 --> 03:23:43.520]  перекрасили дядю. В общем, хорошо. В общем, кто из нас ездит в лагерь, это называется. Вот. Но
[03:23:43.520 --> 03:23:49.880]  проблема в том, что дед так обрадовался, что, возможно, пойдет перекрашивать дальше. Будет
[03:23:50.280 --> 03:23:53.960]  пройти. То есть он так идет, идет, идет по поколениям. Значит, перекрашивает, перекрашивает,
[03:23:53.960 --> 03:23:58.520]  перекрашивает. В какой-то момент может вышло очередного дедушки. Там родитель черный. Тогда
[03:23:58.520 --> 03:24:06.360]  больше ничего делать не надо. Причем тут Кукук Слан не перекрашивает. Кукук Слан, он как бы,
[03:24:06.360 --> 03:24:18.560]  он убивает черные вершины. Мы здесь никого не убиваем. В софт хипе, ну как бы. Ну да.
[03:24:18.560 --> 03:24:28.960]  Нет. Смотрите, мы нет по-доброму. Мы нет. В софт хипе мы тоже никого не убиваем. Мы
[03:24:28.960 --> 03:24:33.800]  убиваем вершинки, но когда-то выясняем, что ключиков в них уже никого нет. Потому что мы
[03:24:33.800 --> 03:24:39.040]  специально, мы даже заранее храним все ключики не в самих вершинках, а в специально подогнанных
[03:24:39.040 --> 03:24:45.320]  автобусах. И как бы уничтожаем вершинку, когда поняли, что автобус пустой. То есть все аккуратней,
[03:24:45.960 --> 03:24:56.360]  то есть как бы все по технике безопасности. Ну по сути, нет, ну на самом деле это да,
[03:24:56.360 --> 03:25:00.440]  автобус был просто трамваем на самом деле, мы их просто подцепили на самом деле, можно так
[03:25:00.440 --> 03:25:08.120]  выяснить еще. Вот. Итак, идем дальше. Случай два. Предположим, неожиданно выяснилось,
[03:25:08.120 --> 03:25:18.520]  неожиданно выяснилось, что все-таки там дядя все-таки черный. Нет, ну не важно. Ну вот,
[03:25:18.520 --> 03:25:23.400]  на самом деле типичный случай для нас был бы вот такой. Но на самом деле, значит сразу оговоримся,
[03:25:23.400 --> 03:25:31.480]  мы, то есть нам тут сейчас начнется тогда принципиально, ну вот, а мы нашему родителю кто? Мы
[03:25:31.480 --> 03:25:36.640]  нашему родителю левый ребенок или правый? Ну не столько важно сами мы левый или правый,
[03:25:36.640 --> 03:25:45.440]  а сколько такие же мы родителю, как родитель деду. То есть образуют ли родители дедушка со мной
[03:25:45.440 --> 03:25:52.760]  зиг-заг или зиг-зиг? Да, это я, конечно, тоже там взял терминологию следующего дерева, но тем
[03:25:52.760 --> 03:26:01.520]  не менее. Вот. Но это обычно вот это называется зиг-заг, это зиг-зиг. Вот. Так, но первое,
[03:26:01.520 --> 03:26:07.800]  с чего мы начнем, это сведем случай зиг-зага к случаю зиг-зига за один простой поворот.
[03:26:07.800 --> 03:26:17.800]  Да, мы никаких проблем мы не решили, но просто вот теперь мы как бы, мы от родителей висим с той
[03:26:17.800 --> 03:26:25.240]  же стороны, что и родители на дедушке. Понятно, да? Да, то есть заметим, я тут рисую под деревья,
[03:26:25.240 --> 03:26:29.320]  они все черные. Почему я тут в явном виде не рисую вершину? Потому что обратите внимание,
[03:26:29.720 --> 03:26:38.160]  сюда мы здесь мы обрабатываем случаи, когда вот эта дельта является нулечкой. То есть, да, то есть
[03:26:38.160 --> 03:26:41.560]  как бы мы подразумеваем, что как бы эта нулечка существует. То есть мы как бы имеем в виду,
[03:26:41.560 --> 03:26:45.800]  что мы не имеем права с этой нулечкой ничего делать, то есть там отпиливать от нее детей и там вот это
[03:26:45.800 --> 03:26:50.800]  все, потому что может у нее детей и нету. То есть да, то есть как бы нам удобно считать, что дядя у нас
[03:26:50.800 --> 03:26:59.240]  есть. То есть да, он нулечка, но возможно, но тем не менее, но главное он есть. Вот, так вот, это был
[03:26:59.240 --> 03:27:04.720]  случай 2b, который сводится 2a. Ну да, в презентации написан текст, но как бы, вот лучше сразу картинку
[03:27:04.720 --> 03:27:13.440]  смотреть. Так вот, что мы теперь делаем? А теперь мы делаем маленькую мистическую вещь. Ну, мы
[03:27:13.440 --> 03:27:18.560]  делаем, после вот этого возможно малого поворота, мы делаем еще вот этот малый поворот.
[03:27:18.560 --> 03:27:29.440]  Ну, мы бейце по сути повернули, обратите внимание. И немножко перекраски, то есть бывший родитель
[03:27:29.440 --> 03:27:35.880]  теперь, но он остается нашим родителем в общем-то, но он теперь становится черным, а дядя становится
[03:27:35.880 --> 03:27:51.840]  красным. Дедушка, ну как бы, ну дедушка стал сыном родителя, ну нормально, вот. Вот, и да, а теперь
[03:27:51.840 --> 03:28:00.400]  немножко магии. Теперь заметим, что это все, потому что больше у нас никаких проблем нет, потому что
[03:28:00.400 --> 03:28:07.280]  было у нас, жили мы вот в поддереве с черной вершиной и остались в поддереве с черной вершиной. Были у нас
[03:28:07.280 --> 03:28:13.440]  проблемы только в этом поддереве и только вот с этими вершинами, и они ликвидировались. Ну и само
[03:28:13.440 --> 03:28:17.400]  собой никаких проблем с черными высотами, естественно, не испортилось, потому что была
[03:28:17.400 --> 03:28:22.720]  черная вершина и под деревья, альфа, бета, зама, дельта, и они в общем-то и остались, просто мы пути
[03:28:22.720 --> 03:28:31.920]  к ним немножко переписали. Потому что мы рассматриваем случаи, что дельта не красная. То есть
[03:28:31.920 --> 03:28:38.200]  это вот, то есть, случай два, это случай, когда дельта черная. Вот, но альфа, бета, гамма понятно,
[03:28:38.200 --> 03:28:51.160]  почему черная, потому что да. Чего? Да. Вот. Но тогда, смотрите, то есть, вот и на этом получается
[03:28:51.160 --> 03:28:55.720]  все. То есть, в чем преимущество приятное? То есть, ну да, код выглядит вот, получается,
[03:28:55.720 --> 03:29:00.520]  примерно вот таким же образом. Да, ну реального кода в два раза больше, потому что вам придется
[03:29:00.520 --> 03:29:06.880]  второй случай рассмотреть. Ну там, по сторонам на этот раз, да. Ну или там, на самом деле,
[03:29:06.880 --> 03:29:11.680]  может быть, еще теоретически там, как бы, можно попробовать там реализовать код так, чтобы избежать
[03:29:11.680 --> 03:29:18.120]  копипасты. Ну там, написать какую-нибудь функцию, которая будет там, скажем, то есть, написать
[03:29:18.120 --> 03:29:22.200]  функцию, которая будет по нулю выдавать левт, там по единице выдавать райт, и там иногда,
[03:29:22.200 --> 03:29:29.680]  там, можно там подсовывать инверс на ту функцию, чтобы она там мыслила наоборот. Но это, в общем,
[03:29:29.680 --> 03:29:38.320]  пока мелочи. Это видите, код не сильно сложный, но обратите внимание, ой, но это уже технические
[03:29:38.320 --> 03:29:46.240]  дела. Но пока, вот прежде чем мы пойдем дальше. Вот. Но здесь у нас просто идея возникает в
[03:29:46.240 --> 03:29:51.360]  следующем. Просто почему это круто? То есть, обратите внимание, то есть, раньше в ВВЛе мы делали
[03:29:51.360 --> 03:29:59.560]  вставку, и там мог быть логарифом вращений, в том числе и больших. Здесь, обратите внимание,
[03:29:59.560 --> 03:30:09.240]  мы сделали вставку за всего лишь максимум, если не повезет, два поворота. То есть, два поворота и
[03:30:09.240 --> 03:30:13.960]  какие-то локальные перекраски. Но это, как бы, по констанции, это, я думаю, это несравнимо, правда.
[03:30:13.960 --> 03:30:25.200]  Ну да, но лог перекрашивания и лог поворотов это, как бы, сильно разные логи, не правда ли. Вот.
[03:30:25.200 --> 03:30:29.080]  Поэтому, видите, то есть, тут, как раз, эти константы по памяти чуть лучше, так что получается хорошо.
[03:30:29.080 --> 03:30:37.320]  Ну, правда, да, там можно, правда, думать, а нельзя ли обойтись без хранения родителей. Но,
[03:30:37.320 --> 03:30:41.880]  чаще всего, обычно и в ВВЛе, и в красночерном, они нужны в одинаковых местах. Избавляемся мы
[03:30:41.880 --> 03:30:45.760]  от них по принципу, давайте, когда идем в рекурсию, просто выписываем весь рекурсивный путь.
[03:30:45.760 --> 03:30:54.560]  Ну вот, и тогда нам в явном виде родителей хранить вроде как и не надо. Не там, не там. Вот. Так что
[03:30:54.560 --> 03:31:01.680]  вот такая вставочка. Но, конечно, за эту красоту, ну, то есть, вот за красоту, что у нас мало поворотов,
[03:31:01.680 --> 03:31:06.720]  приходится, конечно, расплачиваться интеллектуальным образом. Поэтому сейчас,
[03:31:06.720 --> 03:31:11.680]  видимо, последнее, что мы сегодня сделаем. Так, но не надейтесь, что мы сейчас за две минуты
[03:31:11.680 --> 03:31:20.800]  сделаем, сразу предупреждаю. Но как бы, вот. Но это как последнее усилие. Это его величество удаления.
[03:31:20.800 --> 03:31:34.680]  Потому что, к сожалению, да, в отличие от ВВЛки, это не тот же самый случай. Почему? Ну, в ВВЛке как-то,
[03:31:34.680 --> 03:31:38.760]  да, у нас все одинаково получалось. То есть, мы там то ли удалили, то ли вставили. Ну, а потом
[03:31:38.760 --> 03:31:43.960]  проходимся, возвращаемся рекурсивно по пути, в который мы туда шли, и просто делаем какие-то
[03:31:43.960 --> 03:31:52.040]  локальные поворотики. Все одно и то же. То есть, как бы, дизбаланс решается одинаково. А тут
[03:31:52.040 --> 03:31:57.360]  заметим, что мы будем делать удаление. Но когда мы тут делаем удаление из обычного бинарного
[03:31:57.360 --> 03:32:02.040]  дерева, то тут будет принципиально другая проблема. То есть, раньше у нас была просто проблема,
[03:32:02.040 --> 03:32:07.960]  что у нас у красной вершины красный родитель надо пофиксить. А тут теперь другая проблема.
[03:32:07.960 --> 03:32:18.440]  Тут на этот раз у нас возникает проблема с черными высотами. Ну, точнее так, если вершину,
[03:32:18.440 --> 03:32:27.960]  которую мы удалили, мы удалили красную вершину, то никаких проблем нет. Чего? Чего как кого смержить?
[03:32:27.960 --> 03:32:36.720]  Не, погодите. Обычное деление у нас не подразумевало мёржить детей. Оно нас
[03:32:36.720 --> 03:32:44.200]  подразумевало подменить вершину. То есть, перекопируйте туда ключик, по сути. А ту вершину
[03:32:44.200 --> 03:32:49.440]  удалить. Поэтому, когда мы удаляем вершину, то есть, как бы, мы считаем, что там у неё не более
[03:32:49.440 --> 03:32:57.920]  чем одного ребёнка. Вот. Так вот, если мы её выпилили, если она была красной, то с черными
[03:32:57.920 --> 03:33:17.600]  высотами никаких проблем нет. Да, но нет, мы не с листом. Там не так. Ещё раз. Мы, значит,
[03:33:17.600 --> 03:33:24.000]  доходим до этой вершины, хотим её удалить. Но выяснять, что у неё двое детей. Тогда мы эту вершину
[03:33:24.000 --> 03:33:29.640]  как вершину не удаляем. Мы идём там вот это, в правое ребёнка находим там минимальный элемент и
[03:33:29.640 --> 03:33:44.520]  копируем ключик из него сюда. А потом удаляем вот эту вершину. Вот. А это идентично по случаю,
[03:33:44.520 --> 03:33:48.960]  когда мы удалили чёрные элементы, это проблема. Да, то есть, обратите внимание, я сказал,
[03:33:48.960 --> 03:33:54.600]  копирую ключик, то есть, я тут никакие цвета, я тут ничего не делаю. Вот. Так что нас вот
[03:33:54.600 --> 03:34:03.120]  интересует удалённая именно вершина. Но это проблема. Вот. То есть, действительно, если она
[03:34:03.120 --> 03:34:09.880]  чёрная, то у нас, оказывается, есть какая-то вот проблема, то есть, с балансом проблема. То есть,
[03:34:09.880 --> 03:34:15.480]  можно как бы объявить даже инвариант теперь проблемы. Что у нас с высотами всё хорошо по
[03:34:15.480 --> 03:34:21.080]  модулю одной вершины, у которой глубина, чёрная глубина, полностью корректная, по всем путям из
[03:34:21.080 --> 03:34:26.400]  неё идущим, но на единичку меньше, чем надо. То есть, по сути, существует вершина, что пути от
[03:34:26.400 --> 03:34:36.480]  корня до листа через неё на единичку меньше, чем от корня не через неё. Понятен вариант, да? Вот.
[03:34:36.480 --> 03:34:43.080]  И вы этот вариант должны как-то покрыть. Ну вот. А больше проблем нет. То есть, там условно корень
[03:34:43.080 --> 03:34:50.440]  чёрный, там у красных, у красной вершины всегда там чёрные дети. То есть, это всё нормально. Значит,
[03:34:50.440 --> 03:34:59.960]  поехали. Как делается delete fixup? Ну, тут вот. Ну, как всегда. У нас есть проблемный узел X.
[03:34:59.960 --> 03:35:07.720]  Вот. Получается условие одинаковой чёрной высоты и, соответственно, нарушен только в X. Ну, в общем,
[03:35:07.720 --> 03:35:18.640]  как мы уже сказали. Вот. И тут у нас случаев будет аж на 4. Итак, вот у нас проблемная вершина X.
[03:35:18.640 --> 03:35:26.440]  Она у нас, да. Сразу заметил, что она чёрная. Потому что, если выяснилось, что проблемная вершина
[03:35:26.440 --> 03:35:34.960]  красная, то мы её просто красим чёрной и говорим окей. Пологично, да? Вот. Потому что, поэтому
[03:35:34.960 --> 03:35:40.680]  проблемный узел X у нас всегда чёрный. Так, ну давайте смотреть. Предположим, что нам повезло. И
[03:35:40.680 --> 03:35:53.680]  оказалось, что наш брат красный. Спрашивает, что тогда делать? Ну, правда, не то чтобы мы победили
[03:35:53.680 --> 03:36:03.800]  от этого. То есть, на самом деле, мы делаем просто поворот, небольшую перекраску. Вот. Ну, и на самом
[03:36:03.800 --> 03:36:09.360]  деле ничего не поменялось. Потому что вершина X по-прежнему осталась проблемной, потому что мы
[03:36:09.360 --> 03:36:14.520]  в её под деревень ничего не сделали, обратите внимание. То есть, разница ли в том, что мы
[03:36:14.520 --> 03:36:22.560]  просто сказали, что у меня брат красный, быстро сводим к случаю, когда у меня брат чёрный. Да,
[03:36:22.640 --> 03:36:26.880]  но обратите внимание, что тут ни одной вершины, кроме этой, очевидно, красной быть не может,
[03:36:26.880 --> 03:36:34.280]  потому что все остальные вершины это либо её дети, либо её родители. Это значит, что брат нулечко,
[03:36:34.280 --> 03:36:41.640]  и он чёрный. Поэтому вот мы сводим к ситуации. То есть, второй случай, когда, как говорится,
[03:36:41.640 --> 03:36:54.680]  я чёрный, мой брат чёрный. Давайте устроим вечеринку. Вот. Значит, соответственно, и так поехали.
[03:36:54.680 --> 03:37:06.280]  И так, значит, начинаются случаи. Случай, который я назвал два чече. Вот, случай два чече.
[03:37:06.280 --> 03:37:27.120]  Так, да, давайте, давайте. Значит, вращаем, так, вращаем АВ, вот, и делаем перекраску,
[03:37:27.120 --> 03:37:35.680]  чтобы Б чёрный, А красный. Ну да, то есть, да, брат теперь С. Но с высотами, как видите,
[03:37:35.680 --> 03:37:39.600]  никаких проблем. С чёрными высотами проблем никаких. Ну, то есть, проблемы те же,
[03:37:39.600 --> 03:37:49.960]  что и были раньше. Вот. Так, сейчас понятно? Всё? Мы это сделали для того, чтобы свести,
[03:37:50.080 --> 03:37:57.520]  чтобы свести случай к другому случаю. То есть, как бы теперь мы переходим к случаю, что мой брат чёрный.
[03:37:57.520 --> 03:38:09.160]  Вот. Ну вот, и так возвращаемся к чече. Так, так, что у нас в чече? Ну, в чече говорит,
[03:38:09.160 --> 03:38:16.960]  что давайте не только мой брат чёрный, но у него дети чёрные. Вот. А родитель непринципиально кто?
[03:38:16.960 --> 03:38:26.160]  Потому что, значит, какая у нас идея? Ну, вот, идея такая. Давайте покрасим А, скажем,
[03:38:26.160 --> 03:38:36.360]  что теперь этот непонятно, кто теперь точно чёрный, а Б всё-таки красный. Вот. Соответственно. Ну,
[03:38:36.360 --> 03:38:44.760]  теперь заметим маленькую приятную вещь, что в принципе, ну, вот, теперь давайте какие тут
[03:38:44.760 --> 03:38:52.040]  случаи могут быть? Ну, тут два случая. Если А была красной, то у него была чёрная высота BH,
[03:38:52.040 --> 03:38:58.400]  ну, по модулю этого безобразия, и она в итоге стала BH. И тогда, получается,
[03:38:58.400 --> 03:39:03.440]  если она была красная, то надо просто её покрасить чёрной и больше ничего делать не надо. Мы победили
[03:39:03.440 --> 03:39:17.960]  вот прямо сейчас. Вот. Понятно, да? Да, нет, наверное. Да. Ну, то есть, смотрите, если она была красной,
[03:39:17.960 --> 03:39:25.000]  тогда тут чёрная высота была BH. И была только проблема Х, что тут вот плохо, да? Ну, тогда,
[03:39:25.000 --> 03:39:31.360]  но тут чёрная высота BH. Но если мы перекрашиваем эту вершину в красный цвет, тут по-любому высота
[03:39:31.360 --> 03:39:39.360]  BH минус один, правда? Вот. Но есть, ну, вот, тогда тут BH минус один и тут BH минус один. Тогда,
[03:39:39.360 --> 03:39:46.400]  если эту вершину перекрашиваем в чёрный, то высота снова становится BH. То есть, вот эта вершина,
[03:39:46.400 --> 03:39:51.480]  как была раньше BH, так и осталась BH, только теперь вершина Х перестала быть проблемной.
[03:39:51.480 --> 03:40:01.880]  Вот. То есть, вот такая вот радость. То есть, получается, если вот вершина А красная,
[03:40:01.880 --> 03:40:10.120]  то мы прямо сейчас решили вопрос. Если же она была чёрной, то тогда, то есть, если она и была
[03:40:10.120 --> 03:40:19.440]  чёрной, то тогда у нас тут BH, но был BH плюс один. То есть, получается, проблемной вершиной стала
[03:40:19.440 --> 03:40:35.840]  вершина А. И мы переходим дальше. Вот. Вот. То есть, получается, перекинулись на немножко выше.
[03:40:35.840 --> 03:40:47.880]  То есть, это если у нас вершина А была чёрной. Ну, поехали дальше. Случай два КЧ.
[03:40:47.960 --> 03:41:04.760]  Это ближний к нам племянник красный, дальний чёрный. Вот. Да, что мы тут делаем? Так,
[03:41:04.760 --> 03:41:14.520]  ну, тут мы делаем, конечно, немножко мяса. Вот. Значит, что мы тут делаем? Ну, на самом деле,
[03:41:14.600 --> 03:41:19.600]  опять же, как бы, то есть, мы тут немножко это перекидываемся случаями, потому что в случае два КЧ мы
[03:41:19.600 --> 03:41:26.840]  сводим к задаче два звёздочка К. Это будет последний случай. То есть, мы добиваемся случая,
[03:41:26.840 --> 03:41:39.640]  когда у нас красным является дальний племянник. Вот. Видно, да? Вот. То есть, как бы, если красным
[03:41:39.640 --> 03:41:45.200]  оказался именно ближний племянник, да, то, но дальний нет, то, значит, делаем немножко поворотов.
[03:41:45.200 --> 03:41:50.040]  То есть, делали чуть-чуть поворотов, чуть-чуть перекраски. Видите, тут тоже перекраска есть,
[03:41:50.040 --> 03:41:57.440]  да? И свели ситуацию, когда у нас, и свели ситуацию, когда у нас дальний племянник красный.
[03:41:57.440 --> 03:42:02.600]  А ближний непринципиально? Что? А ближний непринципиально. А здесь же у нас, здесь же у нас,
[03:42:02.680 --> 03:42:09.640]  ну здесь мы железно знаем, но вообще нам в этом случае непринципиально будет. Вот,
[03:42:09.640 --> 03:42:14.600]  как это будет работать, смотрите. Ну, мы просто не будем его трогать. То есть, смотрите,
[03:42:14.600 --> 03:42:22.200]  итак, ситуация два звёздочка К. Что же мы в ней делаем? Да, мы не знаем, кто у нас
[03:42:22.200 --> 03:42:31.120]  ближний племянник, и мы не знаем, кто у нас родитель. Значит, смотрите, идея такая. Значит,
[03:42:32.120 --> 03:42:37.640]  опять делаем поворот на АВ и делаем перекраску, в которой А становится чёрной,
[03:42:37.640 --> 03:42:48.120]  а В становится, внимание, тем, чем был корень до этого. Да, то есть, ну, С мы не трогаем вообще,
[03:42:48.120 --> 03:42:53.400]  да? Ну, то есть, под дерево С оно вот как было, так и остаётся, да, то есть, мы с ним ничего не
[03:42:53.400 --> 03:43:03.560]  делаем. Ну вот, а вот этот цвет, то есть, цвет А становится цветом В. Вот, и при этом Д мы тоже
[03:43:03.560 --> 03:43:11.360]  перекрасываем в чёрный. Ну, тогда я вот, и тогда, как легко убедиться по высотам, получается всё в
[03:43:11.360 --> 03:43:18.680]  порядке. То есть, была высота ВH плюс там, только там, чёрная ли это, и остаётся ВH плюс чёрная ли это.
[03:43:18.680 --> 03:43:35.480]  Вот. Так что вот такая красота. Вот, и получается, что проблем, смотрите, проблем никаких нет,
[03:43:35.480 --> 03:43:40.840]  а раз у нас, ну, вот, то есть, уже проблемы все порешены, значит, получается два звёзд
[03:43:41.200 --> 03:43:57.600]  это финальный случай, больше ничего делать не надо. Победа. Вот. Осталось только выяснить,
[03:43:57.600 --> 03:44:02.960]  ну, то есть, получается, вот такие четыре случая мы рассмотрели, осталось только выяснить,
[03:44:02.960 --> 03:44:08.840]  за какую асимптотику эти случаи вообще работают. А то, может быть, это бесконечная асимптотика,
[03:44:08.920 --> 03:44:26.080]  что-то они друг другу как-то едва ли не зацикленным образом сводятся. Ну, вот. Ну,
[03:44:26.080 --> 03:44:31.600]  и здесь давайте разбираться. Давайте посмотрим, за сколько это работает. Ну, тогда мы, давайте,
[03:44:31.600 --> 03:44:37.920]  слева справа налево. Случай два звёздочка К работает за от единицей, то есть, вообще, за один поворот.
[03:44:37.920 --> 03:44:48.240]  Видите, да? Случай два КЧ тоже работает за от единицей, правда, уже за два поворота. Ну,
[03:44:48.240 --> 03:44:57.280]  потому что один поворот плюс случай два звёздочка К, понимаете, да? Так, а что у нас здесь? Так,
[03:44:57.280 --> 03:45:08.240]  случай два ЧЧ. Так, вот, случай два ЧЧ, он нас перекидывает на вершину с большей чёрной высотой.
[03:45:08.240 --> 03:45:20.320]  Так, но какая, но какая, какой у неё реализуется случай? Вот какой-то. Так, а единичка? Ну, вот,
[03:45:20.400 --> 03:45:32.560]  с другой стороны, да, теперь мы видим, что, вот, так, но видим, что, что у нас делает единичка. Вот. Ну,
[03:45:32.560 --> 03:45:39.240]  вот, если у нас происходит единичка, то здесь кажется, что здесь мы просто сводимся к какому-то
[03:45:39.240 --> 03:45:44.200]  случаю, причём даже непонятно какому. То есть, брат, то есть, мы гарантируем только, что брат чёрный,
[03:45:44.200 --> 03:45:54.800]  а кто у нас дети, а чёрт его знает. То есть, получается, на, казалось бы, на случаях один и два ЧЧ возникает
[03:45:54.800 --> 03:46:06.360]  какой-то зацикл. Что же делать? Тем более, это вот такой зацикл, видите, что в случае один глубина,
[03:46:06.440 --> 03:46:13.560]  как бы, но, то есть, то есть, глубина даже ещё как-то изменяется. Ну, хотя, действительно, хотя ладно, по
[03:46:13.560 --> 03:46:18.440]  ассим-тотике вроде проблем быть не должно. То есть, конечно, мы не можем утверждать, что проблемная
[03:46:18.440 --> 03:46:23.160]  вершина всё время идёт как бы корню, корню, корню, но пока мы можем сказать, что в случае один у
[03:46:23.160 --> 03:46:31.120]  проблемной вершины высота не уменьшается, а в случае два ЧЧ у проблемной вершины получается
[03:46:31.120 --> 03:46:39.960]  высота чёрная строга увеличивается. То есть, получается, пока мы работаем внутри случаев два ЧЧ и один,
[03:46:39.960 --> 03:46:47.000]  то получается, что, значит, действительно, то есть, у нас два ЧЧ увеличивает высоту, один оставляет её
[03:46:47.000 --> 03:46:51.920]  неизменной, остальные случаи уже просто за вот единицы завершают работу. То есть, следует,
[03:46:51.920 --> 03:46:58.120]  это получается, что да, удаление за логарифом достигнуто. Но у нас есть более серьёзная мечта.
[03:46:58.120 --> 03:47:04.200]  Мы мечтаем сказать, что у нас тут количество поворотов будет от единичной.
[03:47:04.200 --> 03:47:15.160]  Ну, хотелось бы так сказать, правда. Ну вот, но с другой стороны, в чём действительно заметим,
[03:47:15.160 --> 03:47:21.360]  что в случае два ЧЧ, заметим, что в случае два ЧЧ сам по себе, конечно, поворотов не инициирует,
[03:47:21.360 --> 03:47:31.480]  он делает только перекраску, правда. А вот случай, а вот случай, соответственно, один, он у нас поворот
[03:47:31.480 --> 03:47:45.440]  таки делает. Вот. Но с другой стороны, давайте думать, а что он сделает? То есть, какой он
[03:47:45.440 --> 03:47:53.520]  на случай сделает? То есть, он на случай сводит к случаю два ЧЧ, но с важной оговоркой. Он нам
[03:47:53.520 --> 03:48:03.760]  делает не просто случай два ЧЧ, а случай два ЧЧ, который в редакции, когда вершина окрасная.
[03:48:03.760 --> 03:48:15.040]  Видите, есть маленькая оговорочка. Случай два ЧЧ с красным родителем, это случай, когда мы прямо
[03:48:15.040 --> 03:48:27.680]  сейчас за ноль поворотов завершим работу. То есть, вывод очень простой. То есть, получается, если мы
[03:48:27.680 --> 03:48:42.720]  попали в первый случай, то получается, мы победили за нот. Ну, точнее так, мы победили, то есть, мы
[03:48:42.720 --> 03:48:49.440]  пойдем либо в случае два ЧЧ и победим в хорошей редакции, победим за, получается, дополнительно ноль
[03:48:49.440 --> 03:48:59.280]  поворотов. Либо пойдем в один из этих двух случаев и победим за не более чем два поворота, правда. То
[03:48:59.280 --> 03:49:07.320]  есть, получается, из этого мы делаем вывод, что в случае один мы делаем не более чем три поворота.
[03:49:07.320 --> 03:49:19.720]  Вот, остается в случае два ЧЧ. А что в случае два ЧЧ? А в случае два ЧЧ вообще никаких поворотов
[03:49:19.720 --> 03:49:27.040]  нету. То есть, просто другая проблема. И получается, мы либо будем идти в два ЧЧ, два ЧЧ, два ЧЧ,
[03:49:27.040 --> 03:49:33.400]  два ЧЧ, либо перескочим в другие случаи и сделаем не более чем три поворота. Да, то есть,
[03:49:33.560 --> 03:49:39.400]  официально заявлено, что там будет не более четырех поворотов, но на самом деле получается три. То
[03:49:39.400 --> 03:49:44.920]  есть, получается нот. То есть, по факту получается, что ключевым являются случаи два ЧЧ в черной
[03:49:44.920 --> 03:49:51.000]  редакции. То есть, именно в этом нот. То есть, когда тут все прям черные, да, вот совсем прям вот
[03:49:51.000 --> 03:49:57.240]  толпень черных, да, мы тут начинаем их прореживать, там вот всяких правых детей чуть-чуть красными,
[03:49:57.240 --> 03:50:01.560]  значит, покрашивать. А потом в какой-то момент мы натремся на более содержательные случаи, но там
[03:50:01.560 --> 03:50:14.640]  мы уже локально за три поворота порешаем вопрос. Два звездочка К. Значит, давайте два звездочка К.
[03:50:14.640 --> 03:50:29.480]  Ну, тут все просто. Поворачиваем А, Б. Это раз. Да. Особенно если вы меня напомните,
[03:50:29.480 --> 03:50:32.560]  просто эта презентация может оказаться у вас там, собственно, в группе ВКонтакте.
[03:50:32.560 --> 03:50:41.720]  Вот. Так что если вы там это сейчас в паньке перерисовываете, то как бы это не санат.
[03:50:41.720 --> 03:50:46.120]  Хотя нет, это полезно на самом деле, потому что когда вы что-то такое перерисовываете,
[03:50:46.120 --> 03:50:48.960]  записываете, значит у вас там в памяти откладывается, готовится к экзамену,
[03:50:48.960 --> 03:50:58.040]  будет сильно проще. Потом. Да, та самая амортизация. Вот. Ну, как бы, да, знаете, потом выяснилось,
[03:50:58.040 --> 03:51:01.480]  что зато я к экзамену не буду готовиться. Почему? Потому что на самом деле я ходил на лекции,
[03:51:01.480 --> 03:51:09.440]  в каждой лекции по чуть-чуть готовился к экзамену. Да. Вот. Так что вот такая красота. Так что вот это
[03:51:09.440 --> 03:51:28.960]  вот красно-черное дерево. Да, кот у него, конечно, вот это. Это половина. Вот. Вот. Ну вот. Да. Ну,
[03:51:28.960 --> 03:51:35.680]  то есть на самом деле, да, можно, конечно, думать, но я что-то уже усомнился. Это вот. Как бы, да,
[03:51:36.320 --> 03:51:40.120]  а то не знаю. Да, автор презентации утверждает, что в ВЛ деревьях на самом деле не надо хранить
[03:51:40.120 --> 03:51:48.960]  высоту, надо хранить лишь поддерживать именно разность. Высота 1, 0 или минус 1. Ну, вот,
[03:51:48.960 --> 03:51:53.320]  похоже, да. Вот, видимо, автору презентации тоже показалось похоже на правду. Я вот что-то
[03:51:53.320 --> 03:51:59.480]  уже сомневаюсь. Ну, да, вот что-то не знаю. Ну, то есть, хотя может и правда, я не знаю.
[03:51:59.480 --> 03:52:10.400]  Господи, спросить бы этого автора. Ну, для этого это сложно. Кто? Ну, скажем так, я. Там шесть лет
[03:52:10.400 --> 03:52:20.920]  назад. Там такая маленькая деталь. Ну, там так. Нет, на самом деле, если говорить об авторских
[03:52:20.920 --> 03:52:24.520]  правах, то есть, как я сказал, то есть, на самом деле, как бы текст вот в таком виде, это почти
[03:52:24.520 --> 03:52:31.800]  наверное писал я. Если там вот какие-то слайды. Да, но это вот, да, но это, честно, там какой-то
[03:52:31.800 --> 03:52:36.960]  принскрин из Кормана. Ну, не из Кормана, а там, по-моему, там где-то в техе набил просто код. Там
[03:52:36.960 --> 03:52:44.040]  используют такой же шаблончик, как у них. Вот. Да, вот картинки. Ну, да, вот картинки. Картинки,
[03:52:44.040 --> 03:52:50.680]  картинки. Ну, вот. Но, в принципе, если вы видите там. Ну, вот. Но если там брать какие-нибудь другие,
[03:52:50.680 --> 03:52:55.760]  там, то есть, вот, вот. Какие-то вот такого рода, например, слайдики. Вот такого. Да, то есть,
[03:52:55.760 --> 03:53:00.560]  скорее всего, вот, видите, они целые на самом деле. Да. То есть, честно скажу, то есть, я их брал,
[03:53:00.560 --> 03:53:04.920]  на самом деле, из презентации моего великого предшественника. Вот. Которого зовут Степан
[03:53:04.920 --> 03:53:11.960]  Мацкевич. Если вы будете работать в Яндекс.Таксии, скорее всего, вы с ним пересечетесь. Вот. Ну, вот.
[03:53:11.960 --> 03:53:15.760]  Ну, впрочем, ну, я не знаю. По крайней мере, на мой взгляд, ну, в общем, честно скажу, я с ним,
[03:53:15.760 --> 03:53:21.280]  правда, уже давно не, давно, к сожалению, не пересекался. Поэтому, где он сейчас, я не знаю. Вот.
[03:53:21.280 --> 03:53:27.240]  Но после. Так что вот. Вот. Так что это была АВЛ-дерево. Так, это была красно-черная. Думаю,
[03:53:27.240 --> 03:53:31.000]  там, в дальнейшем и деревьями займемся в следующий раз. Все, на сегодня все.
