[00:00.000 --> 00:07.960]  Собственно говоря, сегодня я ставлю себе цель усадить
[00:07.960 --> 00:08.960]  на сам алгоритм.
[00:08.960 --> 00:11.280]  И потом станет понятно вообще, зачем я что-то
[00:11.280 --> 00:12.280]  тут доказывал.
[00:12.280 --> 00:13.840]  Давайте вспомним пару определений.
[00:13.840 --> 00:17.640]  Так, были на семинарах шифридус-автомат?
[00:17.640 --> 00:18.640]  Давайте так.
[00:18.640 --> 00:19.640]  Шифридус-автомат.
[00:19.640 --> 00:20.640]  Прекрасно.
[00:20.640 --> 00:27.640]  Что там у нас?
[00:27.640 --> 00:34.520]  Эпсилон, альфа-а и эпсилон-эпсилон-эс.
[00:34.520 --> 00:36.320]  Напоминаем, что вообще происходит.
[00:36.320 --> 00:40.680]  Автомат, конечно, разбирает свою грамматику.
[00:40.680 --> 00:44.880]  Это что-то, что можно доказать, в принципе, вашим инструментариям
[00:44.880 --> 00:47.320]  довольно быстро и просто.
[00:47.320 --> 00:50.000]  Дальше говорим, что вывод в ровном станке в том правосторонний.
[00:50.000 --> 00:55.120]  Это тоже сейчас не буду заоценивать внимание.
[00:55.120 --> 00:58.600]  Проблема этого автомата была в недетерминированности.
[00:58.600 --> 01:00.320]  Делает шифридидидюс.
[01:00.320 --> 01:03.000]  Поэтому мы с вами решили, что давайте у нас будет не
[01:03.000 --> 01:06.560]  просто одно дерево вывода, а это будет настолько хорошее
[01:06.560 --> 01:10.840]  дерево вывода, что оно будет определяться своим
[01:10.840 --> 01:14.440]  префиксом, который мы прочитали, и к буквам, которые мы
[01:14.440 --> 01:15.440]  подсмотрели.
[01:15.440 --> 01:17.360]  Ну, это ровно было при лекограмматике.
[01:17.360 --> 01:18.360]  Для чего это было нужно?
[01:18.600 --> 01:20.440]  Автомат есть свое видение мира.
[01:20.440 --> 01:24.040]  Вот он считает, что сейчас находится в ситуации, а,
[01:24.040 --> 01:31.600]  стрелка, бета1.бета2, то есть автомат ждет, пока дочитается
[01:31.600 --> 01:34.760]  текущее правило, текущее под дерево.
[01:34.760 --> 01:35.760]  Рисуем картинку.
[01:35.760 --> 01:45.120]  А, бета1.бета2, что он его дочитает, он поднимется
[01:45.120 --> 01:47.560]  наверх, дочитает вот это правило, поднимется, дочитает
[01:48.240 --> 01:49.240]  вот это правило.
[01:49.240 --> 01:52.040]  И мы с вами попытались доказать, что эти ситуации ведут себя
[01:52.040 --> 01:54.520]  достаточно согласованным образом.
[01:54.520 --> 01:56.160]  Коя какая-то мы еще вернемся.
[01:56.160 --> 01:59.560]  Значит, напоминаем, что LRK-ситуация – это объект из правила
[01:59.560 --> 02:02.120]  с отмеченной позиции какого-то слова, из кавбукф или меньше.
[02:02.120 --> 02:04.760]  Слышишь, что такое допустимость?
[02:04.760 --> 02:07.000]  Допустимость означает, что такая ситуация, в целом,
[02:07.000 --> 02:08.000]  возможна для алгоритма.
[02:08.000 --> 02:10.200]  То есть он действительно может дойти до момента, когда
[02:10.200 --> 02:14.000]  у него в стейке будет что-то похожее на правчесть этого
[02:14.000 --> 02:15.480]  правила и то, что было до этого.
[02:15.520 --> 02:17.880]  Ну вот здесь нарисовано дерево, осталось его просто
[02:17.880 --> 02:18.880]  выписать.
[02:18.880 --> 02:23.680]  Значит, ситуация допустима для префикса гамма, я потом
[02:23.680 --> 02:25.320]  буду дописывать, чему он равен, когда мне это будет
[02:25.320 --> 02:26.320]  нужно.
[02:26.320 --> 02:31.640]  Если существует вывод, из S3 со звездочкой выводится,
[02:31.640 --> 02:37.200]  значит тут единичку допишу, альфа1аw, поскольку будет
[02:37.200 --> 02:39.280]  правосторонний, а это сам правый интерьер, раскрываем
[02:39.280 --> 02:45.280]  его за один шаг, альфа1бета1бета2w.
[02:45.280 --> 02:48.560]  Точка стоит вот здесь, вот вам гамма.
[02:48.560 --> 02:51.280]  То есть ситуация допустима, если вот это существует.
[02:51.280 --> 02:55.320]  Если посмотрим на работу такого автомата, то он разбирает
[02:55.320 --> 02:57.800]  вывод в обратную сторону, то есть он вначале собирает
[02:57.800 --> 03:00.720]  себе stack, потом сворачивает его, в конце он свернет
[03:00.720 --> 03:04.240]  в S, и S снимет, кажется, что он завершился.
[03:04.240 --> 03:05.960]  То есть вывод, который мы тут строим, разбирается
[03:05.960 --> 03:11.680]  в обратную сторону, восстанавливается в обратную сторону.
[03:11.680 --> 03:13.840]  Значит остается вопрос, как построить вот эти допустимые
[03:13.840 --> 03:14.840]  ситуации?
[03:14.920 --> 03:15.920]  Давайте начинать строить.
[03:15.920 --> 03:19.480]  Значит я сейчас, наверное, расскажу конструкцию и
[03:19.480 --> 03:21.280]  сразу попутно докажу теря мокрекности.
[03:21.280 --> 03:23.840]  Так, где мне это все записать?
[03:23.840 --> 03:24.840]  Давайте вот здесь.
[03:24.840 --> 03:28.920]  Вывод хочу оставить, давайте тогда вот тут.
[03:28.920 --> 03:32.840]  Начнем строить с V, K, G от Epsilon.
[03:32.840 --> 03:35.400]  Что вообще может происходить на пустом стейке?
[03:35.400 --> 03:37.840]  Ну, поскольку у нас грамотика пополненная, то бишь в ней
[03:37.840 --> 03:42.040]  есть правило S-3 в S, и с S потом все выводится, то одна
[03:42.040 --> 03:44.200]  ситуация, очевидно, всегда будет допустима.
[03:44.200 --> 03:45.200]  Что такое?
[03:50.640 --> 03:52.760]  То, что такая ситуация допустима всегда, это
[03:52.760 --> 03:53.760]  вот этот вопрос.
[03:53.760 --> 03:58.360]  Ну, существует вывод, который выводит из S-3 в S-3 за 2 шагов,
[03:58.360 --> 04:00.960]  S-3 раскрывается в S, префикс пустой.
[04:00.960 --> 04:01.960]  Почему?
[04:01.960 --> 04:05.400]  До S-3 пустое слово, в правиле до точки пустое слово.
[04:05.400 --> 04:07.400]  Это V, K, G от Epsilon.
[04:07.400 --> 04:08.400]  Да нет?
[04:08.400 --> 04:09.400]  Прекрасно.
[04:09.400 --> 04:10.400]  Теперь давайте посмотрим.
[04:10.400 --> 04:13.520]  Пусть у нас есть в общем случае какое-то такое правило.
[04:13.520 --> 04:23.520]  А, стрелка, альфа, точка, так, что-то у нас B, бета, какое-то
[04:23.520 --> 04:24.520]  U.
[04:24.520 --> 04:30.480]  Поскольку эта штука допустима, напишем для нее вывод, S-3
[04:30.480 --> 04:31.480]  выводится звездой.
[04:31.480 --> 04:35.240]  Так, мне тут не нравится обозначение.
[04:35.240 --> 04:38.760]  Поставлю B1, B2, ну, чтобы альфа была вне.
[04:38.760 --> 04:51.400]  Альфа 1, A, W за 1 шаг, альфа 1, бета 1, B, бета 2, U.
[04:51.400 --> 04:53.480]  Точка стоит вот здесь, стоит вот здесь.
[04:53.480 --> 04:54.480]  Вот у нас префикс.
[04:54.480 --> 04:57.400]  Пока говорим, что он пустой, в будущем я скажу, что на
[04:57.400 --> 05:00.880]  самом деле это работа для любого V, K от любого префикс.
[05:00.880 --> 05:03.320]  Что хочется здесь сделать интуитивно?
[05:03.320 --> 05:06.640]  Хочется вот этот вот B как-то раскрыть, чтобы протащить
[05:06.640 --> 05:07.640]  вывод дальше.
[05:07.880 --> 05:08.880]  Это опять предпочет.
[05:08.880 --> 05:09.880]  Формально.
[05:09.880 --> 05:14.040]  Говорим, что у нас есть какое-то правило B, V это маленькое.
[05:14.040 --> 05:15.040]  Давайте это право тут применим.
[05:15.040 --> 05:17.680]  Оно уже сходит допущенность, да, вывод был, вывод остался.
[05:17.680 --> 05:18.680]  Записываем второй вывод.
[05:18.680 --> 05:24.640]  Или давайте я дальше напишу его в таком виде, S-3 выводится
[05:24.640 --> 05:31.920]  звездой, альфа 1, бета 1, B, вот, и дальше W.
[05:31.920 --> 05:34.920]  Смотрите, бета 2 возможно из этих терминалов.
[05:34.920 --> 05:35.920]  Что мы хотим сделать?
[05:36.000 --> 05:37.720]  Мы хотим открыть букву B.
[05:37.720 --> 05:40.920]  Открыть букву B нельзя, пока она не самая правая.
[05:40.920 --> 05:43.120]  Стало бы, давайте вот здесь выведем какое-нибудь слово.
[05:43.120 --> 05:47.440]  Это можно делать, потому что у нас все терминалы везде
[05:47.440 --> 05:50.440]  порождающие, какие-то тегетериальные вещи я буду опускать.
[05:50.440 --> 05:53.960]  Здесь мы дождемся, пока она все раскроется, а букву
[05:53.960 --> 05:54.960]  B мы не открываем.
[05:54.960 --> 05:55.960]  Вот он написал.
[05:55.960 --> 05:59.360]  Вот эта звездочка означает, что мы дошли сюда и дождались,
[05:59.360 --> 06:02.000]  пока B будет самоправой.
[06:02.000 --> 06:03.000]  Открываем его.
[06:03.080 --> 06:08.080]  Альфа 1, бета 1, это W.
[06:08.080 --> 06:10.080]  Префикс поменяться не должен.
[06:10.080 --> 06:12.080]  Значит, точка стоит все еще тут.
[06:12.080 --> 06:13.080]  Вот у нас префикс.
[06:14.080 --> 06:16.080]  Только тут не альфа, тут гамма.
[06:16.080 --> 06:19.080]  С точки зрения вот этого правила, надо было разбить
[06:19.080 --> 06:22.080]  правила вот здесь, чтобы префикс остался вот этой
[06:22.080 --> 06:23.080]  вот гаммой.
[06:23.080 --> 06:24.080]  Вот я тут написал.
[06:24.080 --> 06:26.080]  В сути не этого правила, чтобы префикс не поменялся,
[06:26.080 --> 06:28.080]  мы же тоже самое WKG строим.
[06:28.080 --> 06:30.080]  Мы поставим точку в начале.
[06:30.080 --> 06:32.080]  Стало быть наша ситуация имеет вид.
[06:32.160 --> 06:35.160]  B, стрелка, точка, это.
[06:36.160 --> 06:39.160]  А что находится после запятой?
[06:39.160 --> 06:42.160]  После запятой находятся те кабу, в которые возникают
[06:42.160 --> 06:45.160]  в словах, в выводах, сразу после интервала, который
[06:45.160 --> 06:46.160]  мы открываем.
[06:46.160 --> 06:47.160]  Либо после его правила.
[06:47.160 --> 06:48.160]  Было U.
[06:48.160 --> 06:50.160]  Было U.
[06:50.160 --> 06:51.160]  Вот он U.
[06:51.160 --> 06:52.160]  Что стало?
[06:52.160 --> 06:53.160]  Давайте посмотрим.
[06:53.160 --> 06:55.160]  Вот этот вывод здесь написан.
[06:55.160 --> 06:57.160]  После B вот это W.
[06:57.160 --> 06:58.160]  W откуда взялся?
[06:58.160 --> 07:00.160]  Если вам говорили, что вот этот вывод отсюда.
[07:00.160 --> 07:01.160]  Вот отсюда взялся.
[07:01.240 --> 07:02.240]  Это понятно?
[07:03.240 --> 07:04.240]  Ну прекрасно.
[07:04.240 --> 07:05.240]  Стало быть мы пишем здесь W.
[07:05.240 --> 07:06.240]  Это First.
[07:08.240 --> 07:09.240]  B это 2U.
[07:12.240 --> 07:14.240]  А теперь финальное утверждение.
[07:14.240 --> 07:16.240]  Как построить WKG от Epsilon?
[07:16.240 --> 07:20.240]  Для этого нужно взять вот такую ситуацию.
[07:20.240 --> 07:21.240]  После чего?
[07:21.240 --> 07:24.240]  Пока ситуация добавляется новой, нужно брать каждую
[07:24.240 --> 07:26.240]  ситуацию такого вида, если точка перед большой
[07:26.240 --> 07:27.240]  буквой.
[07:27.240 --> 07:29.240]  И смотрят все правила, которые превращают эту
[07:29.320 --> 07:30.320]  букву в что-то.
[07:31.320 --> 07:32.320]  Так, и добавлять.
[07:33.320 --> 07:34.320]  Так, я тут написал.
[07:34.320 --> 07:35.320]  Да, вот.
[07:37.320 --> 07:41.320]  Добавлять ситуации вида B, стрелка, точка, это запитает
[07:41.320 --> 07:45.320]  W, согласовывая W как First от остатков правил и остатков
[07:45.320 --> 07:46.320]  условий.
[07:47.320 --> 07:48.320]  Давайте тогда вот здесь вот этот факт докажем,
[07:48.320 --> 07:50.320]  что это будет ровно WKG.
[07:50.320 --> 07:51.320]  WKG от Epsilon, только оно.
[07:51.320 --> 07:52.320]  Да?
[07:52.320 --> 07:53.320]  С первой строчкой.
[07:53.320 --> 07:58.320]  S4 выводит α1, а W не должно быть α1, а 1.
[07:58.400 --> 08:03.400]  Смотрите, у вас U это первая K-буква W.
[08:03.400 --> 08:06.400]  Здесь, да, у меня кризия обозначений.
[08:06.400 --> 08:07.400]  Дайте я напишу, вы маленькая.
[08:07.400 --> 08:08.400]  Вы маленькая равно First.
[08:08.400 --> 08:10.400]  Смотрите, у вас U это может быть сколько угодно большим.
[08:10.400 --> 08:12.400]  Вас только K-буква интересует.
[08:12.400 --> 08:13.400]  Увидели?
[08:13.400 --> 08:14.400]  Прекрасно.
[08:14.400 --> 08:15.400]  Да, давайте здесь.
[08:15.400 --> 08:18.400]  Я вот тут поставлю место, тут буду заниматься теоремой,
[08:18.400 --> 08:19.400]  а там буду заниматься практикой.
[08:19.400 --> 08:20.400]  Вот.
[08:20.400 --> 08:23.400]  Меня можно здесь подслеживать.
[08:23.400 --> 08:25.400]  Теорема здесь расписана в конспекте.
[08:28.400 --> 08:32.400]  Так, напоминание сказал.
[08:41.400 --> 08:43.400]  Так, ну давайте смотреть.
[08:43.400 --> 08:45.400]  Значит, в одну сторону.
[08:45.400 --> 08:49.400]  Если у нас вот такая ситуация, вот была допустима.
[08:49.480 --> 09:01.480]  А, стрелка, β1, точка, B, β2U.
[09:01.480 --> 09:04.480]  Допустима для...
[09:04.480 --> 09:08.480]  Давайте сразу, в общем случае, для какого-то префикса с гаммой.
[09:08.480 --> 09:11.480]  Из того, что я написал, в принципе, сразу следует,
[09:11.480 --> 09:16.480]  что вот эта ситуация B, стрелка, точка, это, В,
[09:16.560 --> 09:28.560]  где В взят как ферст, отчего β2U допустима тоже для WKG от гамма.
[09:30.560 --> 09:34.560]  Но это в целом либо необходимость, либо достаточно.
[09:34.560 --> 09:35.560]  Сейчас я на сходу не скажу.
[09:35.560 --> 09:40.560]  Вот мы говорим, что наш алгоритм, то, что он добавляет WKG,
[09:40.560 --> 09:42.560]  оно все будет допустим.
[09:42.560 --> 09:44.560]  А сейчас понять, а что если есть какие-то допустимые
[09:44.640 --> 09:46.640]  ситуации, которые у вас сюда не попали?
[09:48.640 --> 09:50.640]  Смотрим подсказку.
[09:58.640 --> 10:00.640]  Значит, пусть.
[10:02.640 --> 10:04.640]  Да, я сейчас начинаю доказывать.
[10:04.640 --> 10:05.640]  Что?
[10:05.640 --> 10:06.640]  А, смотрите.
[10:06.640 --> 10:08.640]  Как построить WKG?
[10:08.640 --> 10:12.640]  Если я возьму вот такую ситуацию и буду всякий раз,
[10:12.720 --> 10:15.720]  когда имею ситуацию вот такого вида в алгоритме,
[10:15.720 --> 10:18.720]  то есть перебираю все ситуации, пока множество меняется.
[10:18.720 --> 10:20.720]  Для каждой такой ситуации, вот она тут написана,
[10:20.720 --> 10:22.720]  добавляю такую ситуацию.
[10:22.720 --> 10:25.720]  И далее, пока множество ситуации меняется, мы всякий раз
[10:25.720 --> 10:27.720]  ищем такие, добавляем такие.
[10:27.720 --> 10:30.720]  Утверждается, что если я дойду до момента, когда
[10:30.720 --> 10:35.720]  новостей не появляются, то это будет WKG и только они.
[10:35.720 --> 10:37.720]  Что мы пока доказали?
[10:37.720 --> 10:38.720]  Алгоритм корректен.
[10:38.720 --> 10:41.720]  То есть, если он что-то добавил в WKG при помощи замыкания,
[10:41.800 --> 10:43.800]  ну а прежде всего это замыкание.
[10:43.800 --> 10:45.800]  Значит, он там действительно должно быть.
[10:45.800 --> 10:47.800]  Это вы видели?
[10:47.800 --> 10:48.800]  Ага.
[10:48.800 --> 10:50.800]  Значит, осталось понять, а если мы имеем что-нибудь,
[10:50.800 --> 10:51.800]  что мы тут должны добавить?
[10:51.800 --> 10:53.800]  Верно ли, что мы это найдем?
[10:53.800 --> 10:55.800]  Давайте посмотрим.
[10:55.800 --> 10:56.800]  Так.
[10:56.800 --> 10:58.800]  Сейчас я сформулирую какое-то утверждение, потом посмотрю,
[10:58.800 --> 11:00.800]  какая тут должна быть индукция по какому параметру,
[11:00.800 --> 11:02.800]  и скажу, что эта индукция была сверху.
[11:02.800 --> 11:04.800]  Значит, смотрим, пусть у нас ситуация.
[11:04.800 --> 11:05.800]  Пусть.
[11:05.880 --> 11:21.880]  А, стрелка, β1, точка, β2, у лежит WKG от ε.
[11:21.880 --> 11:23.880]  Пусть такая ситуация допустима.
[11:23.880 --> 11:25.880]  Посмотрим, какой у нее есть вывод.
[11:25.880 --> 11:27.880]  Так.
[11:27.880 --> 11:30.880]  Давайте разбирать два случая.
[11:30.960 --> 11:31.960]  Два случая.
[11:33.960 --> 11:34.960]  Бета 1.
[11:41.960 --> 11:46.960]  Я здесь говорю, что корректность, все, что добавляю, все хорошее.
[11:46.960 --> 11:48.960]  Теперь я беру призвольную ситуацию какую-то.
[11:48.960 --> 11:50.960]  Хочу сказать, что она у меня появится.
[11:50.960 --> 11:52.960]  Что?
[11:52.960 --> 11:54.960]  Это призвольная ситуация.
[11:55.040 --> 11:58.040]  Так.
[11:58.040 --> 12:00.040]  Что?
[12:00.040 --> 12:04.040]  Смотрите, пока здесь от ε мы построим для ε,
[12:04.040 --> 12:06.040]  потом мы скажем, что как построить для какой-то другой строки.
[12:06.040 --> 12:08.040]  Нужно принести все точки и снова замкнуть.
[12:08.040 --> 12:10.040]  Вот этот факт, он настолько крутой,
[12:10.040 --> 12:13.040]  что замыкание совершает корректность в принципе для любого префикса.
[12:13.040 --> 12:15.040]  Поэтому тут пишу не ε, а сразу пишу γ,
[12:15.040 --> 12:17.040]  потому что это просто вера для любого префикса.
[12:17.040 --> 12:19.040]  Вот, пока здесь мы написали здесь ε,
[12:19.040 --> 12:21.040]  значит, что это мы до ε доказываем,
[12:21.040 --> 12:23.040]  потом мы это скопируем и докажем для γ.
[12:23.120 --> 12:25.120]  Такс.
[12:29.120 --> 12:31.120]  Вот, ну.
[12:31.120 --> 12:33.120]  Отложу.
[12:33.120 --> 12:35.120]  Что будет получаться?
[12:35.120 --> 12:37.120]  Давайте напишем для нее вывод.
[12:39.120 --> 12:41.120]  Что у нас тут?
[12:41.120 --> 12:45.120]  С штрих выводит α1Аw.
[12:49.120 --> 12:51.120]  За многое мы это скопируем и докажем для γ.
[12:51.200 --> 12:53.200]  За много шагов.
[12:53.200 --> 13:01.200]  И за один шаг выводит α1β1.
[13:03.200 --> 13:05.200]  Так, ну что у нас тут есть парни интересных фактов.
[13:05.200 --> 13:07.200]  Например,
[13:07.200 --> 13:09.200]  вот это пустое слово.
[13:11.200 --> 13:13.200]  Это тоже пустое слово.
[13:13.200 --> 13:15.200]  Но пока еще вы окажете это, если он строится.
[13:15.200 --> 13:17.200]  Вот.
[13:17.200 --> 13:19.200]  Надо понять, что мы эту ситуацию предсказали.
[13:19.280 --> 13:23.280]  Все ситуации возникают как предсказания друг друга.
[13:23.280 --> 13:25.280]  Ну, давайте посмотрим предыдущий шаг.
[13:25.280 --> 13:27.280]  Вот здесь.
[13:27.280 --> 13:29.280]  Как эта буква А получилась?
[13:31.280 --> 13:33.280]  Вот.
[13:33.280 --> 13:35.280]  Утверждается, что был какой-то шаг до нее,
[13:35.280 --> 13:37.280]  значит, по длине вывода будет.
[13:37.280 --> 13:39.280]  На самом деле, вот этот вывод, силу пустоты всяких строк,
[13:41.280 --> 13:43.280]  имеет вид
[13:43.280 --> 13:45.280]  просто Аw
[13:45.280 --> 13:47.280]  и тут просто β2у.
[13:47.360 --> 13:49.360]  Все по слову слову уже доказываем.
[13:49.360 --> 13:51.360]  Так, ну что тут сказать?
[13:51.360 --> 13:53.360]  Смотрим, здесь последний шаг.
[13:53.360 --> 13:55.360]  s' выводит.
[13:55.360 --> 13:57.360]  Ну пусть здесь за n шагов, значит,
[13:57.360 --> 13:59.360]  как я сказал, индукция по длине вывода.
[13:59.360 --> 14:01.360]  За n-1 шаг.
[14:03.360 --> 14:05.360]  Здесь будет не терминал.
[14:05.360 --> 14:07.360]  Почему не терминал?
[14:07.360 --> 14:09.360]  Потому что если бы тут был терминал, он бы здесь в рефексе остался.
[14:09.360 --> 14:11.360]  Мы предполагаем, что мы вывели центральный начальник.
[14:11.360 --> 14:13.360]  Ну, так как у нас есть контекст свободы,
[14:13.360 --> 14:15.360]  вот этот терминальный буквы тут в начале никуда бы не делось.
[14:15.440 --> 14:17.440]  Ну что там у нас?
[14:17.440 --> 14:19.440]  У какой-нибудь.
[14:19.440 --> 14:21.440]  За один шаг оно выведет А.
[14:23.440 --> 14:25.440]  В маленькое, у маленькое.
[14:25.440 --> 14:27.440]  И потом из А выведется то, что нам нужно.
[14:29.440 --> 14:31.440]  А у нас было у здесь.
[14:35.440 --> 14:37.440]  У меня у было вот тут точно.
[14:39.440 --> 14:41.440]  Это как бы в одну сторону теоремы.
[14:41.520 --> 14:43.520]  Я у буду писать, давайте так договоримся,
[14:43.520 --> 14:45.520]  что я буду писать у всегда, когда он стоит после запятой.
[14:45.520 --> 14:47.520]  Вот на этом сойдемся.
[14:47.520 --> 14:49.520]  У это всегда второй аргумент ситуации.
[14:49.520 --> 14:51.520]  Значит здесь, да.
[14:59.520 --> 15:01.520]  Я прошу, да.
[15:01.520 --> 15:03.520]  Спасибо, что вы мне указали.
[15:03.520 --> 15:05.520]  Я здесь просто пишу, потому что здесь везде только первые буквы важны.
[15:05.520 --> 15:07.520]  Конечно w осталось.
[15:07.520 --> 15:09.520]  Что нужно сделать?
[15:09.600 --> 15:11.600]  Следующий шаг.
[15:11.600 --> 15:13.600]  Как эта буква А появилась?
[15:13.600 --> 15:15.600]  Было какое-то правило B куда-то и буква А стояла в начале.
[15:15.600 --> 15:17.600]  Мы говорим, что эта ситуация допустима.
[15:17.600 --> 15:19.600]  Так, ну где-то это сейчас напишу.
[15:23.600 --> 15:25.600]  Так, где вы мне написать?
[15:25.600 --> 15:27.600]  Вот это мне, наверное, не нужно.
[15:27.600 --> 15:29.600]  Тут такая будет TMP доска.
[15:35.600 --> 15:37.600]  Так, что у нас там получается?
[15:37.680 --> 15:39.680]  С штрих за n-1 шаг.
[15:41.680 --> 15:43.680]  B w штрих за 1 шаг.
[15:45.680 --> 15:47.680]  A w штрих.
[15:49.680 --> 15:51.680]  Вот так вот.
[15:53.680 --> 15:55.680]  И потом β2.
[15:57.680 --> 15:59.680]  Что-нибудь вот такое.
[15:59.680 --> 16:01.680]  Основная суть.
[16:01.680 --> 16:03.680]  Берем предыдущее правило.
[16:03.680 --> 16:05.680]  Или же тут ситуация была допустима.
[16:05.760 --> 16:07.760]  Стрелка.
[16:07.760 --> 16:09.760]  Там была буква А в начале.
[16:11.760 --> 16:13.760]  Поскольку у нас буква B здесь была в начале буква А,
[16:13.760 --> 16:15.760]  буква А находилась в начале этого правила.
[16:15.760 --> 16:17.760]  Здесь точка.
[16:17.760 --> 16:19.760]  И там что-то было.
[16:19.760 --> 16:21.760]  Потом это что-то как-то раскроется вот здесь в слово,
[16:21.760 --> 16:23.760]  пока B не станет самой правой.
[16:27.760 --> 16:29.760]  Так, и здесь.
[16:29.760 --> 16:31.760]  Что у нас там было?
[16:31.760 --> 16:33.760]  Обозначим как w.
[16:33.840 --> 16:35.840]  Лежала w к а g от epsilon.
[16:35.840 --> 16:37.840]  Более того, не просто лежала,
[16:37.840 --> 16:39.840]  еще и было туда добавлено в предыдущих шагах.
[16:39.840 --> 16:41.840]  Так, давайте проявим всякую согласованность.
[16:41.840 --> 16:43.840]  Здесь,
[16:43.840 --> 16:45.840]  первый k-букф это u.
[16:47.840 --> 16:49.840]  Откуда вот эти вот k-букф взялись?
[16:49.840 --> 16:51.840]  Они взялись из правой части правила
[16:51.840 --> 16:53.840]  вот здесь, вот эта вот гамма,
[16:53.840 --> 16:55.840]  которая открыла свое слово.
[16:55.840 --> 16:57.840]  И то, что было вот тут.
[16:57.840 --> 16:59.840]  Откуда взялись вот эти k-букф u?
[17:03.840 --> 17:05.840]  Какая-то часть букв открылась
[17:05.840 --> 17:07.840]  на этапе до буквы B.
[17:07.840 --> 17:09.840]  Потом буквы B раскрылись по какому-то правилу.
[17:09.840 --> 17:11.840]  Вот у нас a, потом гамма.
[17:11.840 --> 17:13.840]  Потом гамма раскрылась, так чтобы
[17:13.840 --> 17:15.840]  буква a была самой правой.
[17:15.840 --> 17:17.840]  Здесь еще одно слово появилось.
[17:17.840 --> 17:19.840]  Вот это ровно то и знаете,
[17:19.840 --> 17:21.840]  что у нас w, u,
[17:21.840 --> 17:23.840]  это first
[17:23.840 --> 17:25.840]  от гамма v.
[17:27.840 --> 17:29.840]  Довольно простая индукция.
[17:29.840 --> 17:31.840]  Да, нет?
[17:31.920 --> 17:35.920]  Почему у вас в один шаг B что-то превращается в a?
[17:35.920 --> 17:37.920]  Смотрите, я здесь за один шаг
[17:37.920 --> 17:39.920]  раскрываю...
[17:39.920 --> 17:41.920]  Да, я понял, о чем вы говорите.
[17:41.920 --> 17:43.920]  Здесь на самом деле с гаммы и потом нужно еще
[17:43.920 --> 17:45.920]  за много шагов эту гамму убрать.
[17:45.920 --> 17:47.920]  Вот.
[17:47.920 --> 17:49.920]  Потом a стала самой правой
[17:49.920 --> 17:51.920]  и потом a уже раскрылась как β2.
[17:51.920 --> 17:53.920]  Вот так вот.
[17:53.920 --> 17:55.920]  Да, я это сказал, но не написал.
[17:55.920 --> 17:57.920]  Что на самом деле,
[17:57.920 --> 17:59.920]  здесь у нас гамма, но мы ждем,
[18:00.000 --> 18:02.000]  пока не выводится буква.
[18:02.000 --> 18:04.000]  Отсюда и ферст вылез,
[18:04.000 --> 18:06.000]  что вот этот вот ферст гамма w,
[18:06.000 --> 18:08.000]  это все префисы выводимых слов.
[18:08.000 --> 18:10.000]  Вот они выводимые слова.
[18:10.000 --> 18:12.000]  Вот здесь какое-то слово вывелось.
[18:12.000 --> 18:14.000]  Стало быть, как бы трудно находиться,
[18:14.000 --> 18:16.000]  попали в ферст.
[18:16.000 --> 18:18.000]  Мы построили WKG от Epson.
[18:18.000 --> 18:20.000]  Алгоритм работает в линейное время.
[18:20.000 --> 18:22.000]  То же самое, что вы делаете.
[18:22.000 --> 18:24.000]  Вы говорите, что старые ситуации вы обрабатываете
[18:24.000 --> 18:26.000]  и не трогайте больше.
[18:26.000 --> 18:28.000]  Добавили новые.
[18:28.080 --> 18:30.080]  Это те, кто будут его писать,
[18:30.080 --> 18:32.080]  те потом будут об этом думать.
[18:32.080 --> 18:34.080]  Это как реализовывать?
[18:34.080 --> 18:36.080]  Взяли ситуацию в очередь,
[18:36.080 --> 18:38.080]  добавили новые ситуации.
[18:38.080 --> 18:40.080]  В этой ситуации больше не смотрите.
[18:40.080 --> 18:42.080]  Ну и все.
[18:42.080 --> 18:44.080]  Теперь,
[18:44.080 --> 18:46.080]  как строить другие WKG?
[18:46.080 --> 18:48.080]  Здесь я, наверное,
[18:48.080 --> 18:50.080]  вот это сотру,
[18:50.080 --> 18:52.080]  а то, что ниже оставлю,
[18:52.080 --> 18:54.080]  оно мне пригодится.
[18:58.080 --> 19:00.080]  Хотим сказать WKG
[19:00.080 --> 19:02.080]  от каких-то х.
[19:10.080 --> 19:12.080]  Какие ситуации точно лежат?
[19:12.080 --> 19:14.080]  Давайте посмотрим на WKG
[19:14.080 --> 19:16.080]  от х поменьше.
[19:16.080 --> 19:18.080]  Тут все х – это как терминал,
[19:18.080 --> 19:20.080]  так и сигма и он.
[19:20.080 --> 19:22.080]  Я пока напишу такое слово,
[19:22.080 --> 19:24.080]  потом объясню, что оно значит.
[19:24.080 --> 19:26.080]  Посмотрим на все ситуации WKG
[19:26.160 --> 19:28.160]  х1, х1-1.
[19:30.160 --> 19:32.160]  Давайте напишем
[19:32.160 --> 19:34.160]  на нашу промежутщую доске,
[19:34.160 --> 19:36.160]  какое тут возникает.
[19:36.160 --> 19:38.160]  Что у нас может быть?
[19:38.160 --> 19:40.160]  s'α1aw
[19:42.160 --> 19:44.160]  α1 так
[19:44.160 --> 19:46.160]  β
[19:46.160 --> 19:48.160]  Немножко сотру.
[19:48.160 --> 19:50.160]  Мы всегда были проблема
[19:50.160 --> 19:52.160]  с топологией доски.
[19:52.160 --> 20:07.280]  бета 2 и здесь w. Точка стоит вот тут. Значит вот это x1, xn. Давайте предположим, что у нас
[20:07.280 --> 20:17.840]  вот здесь ситуация имела такой вид. Бета 1, точка xn, бета 2. Вот взяли, предположили. То есть пусть у меня
[20:17.840 --> 20:24.280]  точка стоит перед xn большим. Что это означает? Что я могу взять тот же самый вывод. Абсолютно тот
[20:24.280 --> 20:33.280]  же самый. Все то же самое. И подниму точку дальше. Я напишу вот этот xn и скажу, что вот это, это то
[20:33.280 --> 20:43.880]  же самое, что а1, бета 1, xn, точка, бета 2, w. Эта ситуация будет допустима. Это очевидный факт,
[20:43.880 --> 20:48.720]  что если у вас был вот такой вывод, и этот вывод поразался ситуацией с xn, вот она прямо стояла
[20:48.720 --> 21:00.480]  после точки. Значит вот такая ситуация. А, стрелка, бета 1, xn, точка, бета 2, w. w такое же абсолютно.
[21:00.480 --> 21:11.800]  Вывод вообще не поменялся. Допустима для префекции x1, xn. То же самое называется go to. go to от
[21:11.800 --> 21:17.400]  какого тоже ситуации? Отночает. Просматриваем список ситуаций. Если видим ситуацию с точкой
[21:17.400 --> 21:24.440]  перед xn, протаскиваем точку через xn, добавляем ситуации внутрь go to. Добавили ситуации,
[21:24.440 --> 21:31.480]  после этого что-то замкнули. То, что мы поняли здесь, вот здесь. Что замыкает, это хорошая
[21:31.480 --> 21:39.920]  операция. То есть если я возьму и принесу точку в этой ситуации, согласую w и бета 2, u, то это все
[21:39.920 --> 21:44.240]  будет допустимо. Теперь сильное утверждение. Оказывается, ничего другого допустимого нет.
[21:44.240 --> 21:53.960]  Сейчас этим мы разберемся. Как работает go to, понятно? Да? Не важно, что такое. x' призвали строки.
[21:53.960 --> 21:59.960]  Еще раз, go to, это как бы скан верли. Протащили точку, замкнули. Ну, скан и предик на самом деле.
[21:59.960 --> 22:12.600]  Так, да, нет? Прекрасно. Так, а сейчас вот будет теперь посложнее. Да? Смотрите, в теории вы говорите,
[22:12.600 --> 22:17.080]  что можно построить для всех строк. Там строк бесконечно много, поэтому w и k житы тоже бесконечно
[22:17.080 --> 22:24.000]  много. Это в теории. Вот такой вот факт, тут что, по xn тому. Он верен. На врачке что происходит?
[22:24.000 --> 22:28.520]  На врачке происходит примерно то, что я сказал в прошлый раз. Смотрим на ситуацию. Что такое ситуация?
[22:28.520 --> 22:34.000]  На самом деле, это не строка. Вот подливы вы понимаете, что строку вы в ходе не напишете. Это карта
[22:34.000 --> 22:38.920]  шестерех элементов. Какое-то правило, то есть число правила. Правило номер пять, правило номер шесть,
[22:38.920 --> 22:44.840]  номер семь. Точка в позиции. Это ограничивается размером этого правила. И слово, которое
[22:44.840 --> 22:47.800]  ограничивается нам в сигме в степени k. Вот что-нибудь такое. Несмотря на k плюс один,
[22:47.800 --> 22:52.080]  тут еще какие-то константы. Конечно, нам много в зависимости от грамматики. То есть, если вам дали
[22:52.080 --> 22:59.120]  грамматику, ситуации, то есть грамматику число k, конечно, много. Дальше. Поскольку ситуации, конечно,
[22:59.120 --> 23:03.760]  много, множество ситуаций тоже, конечно, много. То есть рассматриваем два в степени множества ситуаций.
[23:03.760 --> 23:11.320]  Стало быть, различных v, k, g будет, конечно, много. Экспоненциально много, но конечно много.
[23:11.320 --> 23:15.960]  А отсюда следует принципу Дерехлея или что-то вроде этого, что для каких-то префекций ситуации будут
[23:15.960 --> 23:20.800]  совпадать. Вот это там силы слабости леоралгоритма, что он считает какие-то префекции на стреке одинаковыми.
[23:20.800 --> 23:26.280]  Отвечаем на ваш вопрос дальше. Вы посмотрели вкажет эпсилон. Вы видите везде, где стоят точки, говорите,
[23:26.280 --> 23:33.800]  что значит можно получить при помощи go2 новые префиксы какие-то. Пошли здесь по b, здесь еще как-то
[23:33.800 --> 23:39.120]  прошли. То есть везде точки сдвинули. Это будут какие-то новые ситуации, новых префиксов. А дальше
[23:39.120 --> 23:45.280]  простой bfs. Протащили все точки, замкнули. Смотрим на новые множество ситуации. Можно ли там
[23:45.280 --> 23:52.240]  точить точки? Примерно было на семинаре, поэтому я сейчас оставлю себе право, возможно, показать его. Давайте покажу
[23:52.240 --> 23:59.440]  вот так вот пару шагов на одной простой грамматике. Что? Да-да-да, вы смотрите все достижимые префиксы просто.
[23:59.440 --> 24:05.280]  Вот утверждается, что таким алгоритмом, поскольку у вас все зациклится, вы построите все v для всех
[24:05.280 --> 24:14.360]  префиксов. Ну, давайте пример. s'v, s, s, a, s, b. Я рекомендовал этот пример всем семинаристам,
[24:14.360 --> 24:28.600]  может, не все его построили. v1 же от 0, от эпсилон. s'.s, запятая эпсилон. Дальше предсказываем s.sa,
[24:29.080 --> 24:36.760]  sb. Так, здесь эпсилон. И потом эта ситуация само себя предсказывает. Поэтому вот эта вот буква еще тут
[24:36.760 --> 24:46.440]  появится. Но я надеюсь, что вы это семинарию уже сделали. s. тут тоже эпсилон, а. Ну вот мы построили сами vk.g от 0.
[24:46.440 --> 24:55.800]  От эпсилон. Как мы дальше делаем? Смотрите, вот можно p.s перейти. Значит, мы говорим, у нас будет v1.z от s.
[24:55.800 --> 24:58.660]  Если мы сейчас позволим его не строить, сказав, что
[24:58.660 --> 25:00.260]  тут надо продвинуть точку здесь и придвинуть точку
[25:00.260 --> 25:02.980]  вот здесь, и давай туда в этой ситуации.
[25:02.980 --> 25:04.380]  Замыкать тут чьи-то будет нечего, потому что когда
[25:04.380 --> 25:05.900]  он придвинет точку, у вас не будет встать новый
[25:05.900 --> 25:06.900]  буквес.
[25:06.900 --> 25:10.020]  Когда у вас будет точка вот тут, вы скажете, что
[25:10.020 --> 25:16.180]  у нас есть еще в, сейчас вот, в, 1g, атес а.
[25:16.180 --> 25:19.580]  Тут точка будет встать вот здесь, там еще что-то предсказывается.
[25:19.580 --> 25:22.020]  И вот это значит, что вот здесь, в этом примере, я
[25:22.020 --> 25:23.660]  рекомендую вообще дома проделать семь ситуаций,
[25:23.800 --> 25:25.400]  семь, множество ситуаций, вернее, семь состояний.
[25:25.400 --> 25:30.360]  То есть на практике вы там как-то исчерпали все, а
[25:30.360 --> 25:32.920]  сегодня конечно страшнейшее, но это же все предподсчет,
[25:32.920 --> 25:33.920]  какая разница.
[25:33.920 --> 25:36.520]  Так, это на доске оставлю.
[25:36.520 --> 25:41.520]  Так, давайте, наверное, а ну вот, здесь уберу.
[25:41.520 --> 25:50.520]  Еще раз вопрос.
[25:50.520 --> 25:58.300]  Смотрите, на стеке не только правой части правил лежат,
[25:58.300 --> 25:59.300]  в этом проблема.
[25:59.300 --> 26:02.460]  Допустим, вот здесь, если вы посмотрите, то у вас
[26:02.460 --> 26:04.620]  кажется, я точно не помню, это всего 10 часов утра
[26:04.620 --> 26:09.940]  рассказывал, вроде как вот такие вот два стека,
[26:09.940 --> 26:10.940]  они эквивалентны.
[26:10.940 --> 26:13.340]  Я сейчас не буду доказывать всякие факты о том, что
[26:13.340 --> 26:15.980]  эти два стека эквивалентны, то у них там суффиксы совпадают,
[26:15.980 --> 26:16.980]  потому что это нам не нужно.
[26:16.980 --> 26:17.980]  Это такое наблюдение.
[26:18.440 --> 26:21.480]  Возможно, это не правда, проверьте здесь, когда будете
[26:21.480 --> 26:24.800]  строить, что у вас какие-то ножи совпадают, и вы будете
[26:24.800 --> 26:26.800]  замечать, как это все выглядит.
[26:26.800 --> 26:27.960]  Вот, это семярский материал.
[26:27.960 --> 26:34.960]  Еще какие-то вопросы.
[26:34.960 --> 26:56.940]  Давайте посмотрим, вот такое докажем, что если А-стрелка
[26:56.940 --> 27:08.620]  бета-1, бета-2 у допустимо, то есть лежит vk x1 xn.
[27:08.620 --> 27:16.020]  Значит, как выглядит алгоритм?
[27:16.020 --> 27:21.460]  На первом шаге протаскиваем все точки, на каждом следующем
[27:21.460 --> 27:23.620]  шаге делаем замыкание.
[27:23.620 --> 27:25.260]  То есть, когда я говорю индукция по шагам алгоритма, я имею
[27:25.260 --> 27:29.700]  в виду, что вначале мы продвинули все точки, потом замкнули
[27:29.700 --> 27:32.620]  все ситуации, потом замкнули замыкание всех ситуаций,
[27:32.620 --> 27:34.460]  и вот так вот ходили вот такими слоями.
[27:34.460 --> 27:36.340]  То есть, предыдущий шаг алгоритма означает, что у нас вывод
[27:36.340 --> 27:37.340]  просто на один короче.
[27:37.340 --> 27:39.700]  Так, вот это получилось, давайте поставим для него
[27:39.700 --> 27:40.700]  вывод.
[27:40.700 --> 27:41.700]  Посмотрим.
[27:41.700 --> 27:56.820]  Нужно позвать вывод, в какой момент она сюда попала,
[27:56.820 --> 27:57.820]  бывают два случая.
[27:57.820 --> 28:01.620]  Она сюда попала с двигом точки, это мы там разобрали.
[28:01.620 --> 28:08.760]  Ну, давайте посмотрим, она сюда попала при помощи
[28:08.760 --> 28:09.760]  с двига точки.
[28:09.760 --> 28:13.520]  Значает, что точка стояла, вот тут стоит xn, вернее.
[28:13.520 --> 28:15.760]  Я вот тут не буду писать.
[28:15.760 --> 28:22.640]  Ситуация имеет вид, а стрелка бета 1, xn, точка бета 2, запятая
[28:22.640 --> 28:23.640]  u.
[28:23.640 --> 28:25.480]  То есть, если она сюда попала при помощи с двига точки,
[28:25.480 --> 28:27.760]  а не при помощи замыкания, то очевидно, точка была
[28:27.760 --> 28:30.760]  тут, стала вот тут.
[28:30.760 --> 28:31.760]  Была допустимая ситуация.
[28:31.760 --> 28:36.640]  Значит, все вот того, что алгоритм для предыдущего
[28:36.640 --> 28:39.960]  плейфикса отработал нормально, допустимая ситуация такого
[28:39.960 --> 28:49.800]  вида, а стрелка бета 1, точка xn, бета 2, u, она была допустима,
[28:49.800 --> 28:50.800]  была добавлена.
[28:50.800 --> 28:58.480]  Начинаем какой-то вывод, с штрих, что у нас там со
[28:58.480 --> 28:59.480]  звездой.
[28:59.480 --> 29:12.480]  Альфа, a, w, альфа, бета 1, xn, бета 2, w.
[29:12.480 --> 29:16.520]  Ну и там first от u совпадает с first от w.
[29:16.520 --> 29:19.160]  Значит, мы говорим, что вот эта ситуация была допустима,
[29:19.160 --> 29:20.720]  значит, для него был вывод, она была добавлена.
[29:20.720 --> 29:26.400]  Поэтому вот эта новая ситуация тоже допустима.
[29:26.400 --> 29:28.560]  То есть мы добавили что-то, что должны были добавить.
[29:28.560 --> 29:29.560]  Вот.
[29:29.560 --> 29:31.040]  Значит, второй шаг.
[29:31.040 --> 29:39.040]  Пусть она была добавлена как замыкание, значит, здесь
[29:39.040 --> 29:42.280]  как go to, значит, как замыкание.
[29:42.280 --> 29:50.880]  А теперь обращаемся к тому, что он сказал в начале
[29:50.880 --> 29:53.560]  семинара, в начале лекции.
[29:53.640 --> 29:56.160]  Если какая-то ситуация была допустима, замыкание
[29:56.160 --> 29:58.240]  не меняет допустимость для любого префекса гамма.
[29:58.240 --> 30:04.280]  В нашем случае гамма – это вот наш х и инексан.
[30:04.280 --> 30:06.920]  Вот такая вот корректность.
[30:06.920 --> 30:08.760]  Давайте теперь поймем, что мы исчерпаем все в нашей
[30:08.760 --> 30:09.760]  допустимой ситуации.
[30:09.760 --> 30:21.360]  Здесь пока можно задать какие-то вопросы, но здесь
[30:21.360 --> 30:23.200]  совсем тривиальная индукция.
[30:23.240 --> 30:24.680]  Но все-таки не задайте вопросы, чтобы было понятнее.
[30:34.440 --> 30:35.840]  Сейчас я позволю себе списывать.
[30:35.840 --> 30:37.840]  Я напоминаю, конспектом можно будет пользоваться,
[30:37.840 --> 30:39.840]  потому что сход это сложно установить.
[30:42.040 --> 30:45.040]  Теперь уже пишем ту самую ситуацию, бета1.beta2.
[30:53.200 --> 31:05.040]  Что-то хочу доказать.
[31:05.040 --> 31:20.840]  Ага, и правильно построено v, k, g, x1, xn-1.
[31:21.480 --> 31:24.480]  Предполагаем, что на первой шаге мы сделали все правильно.
[31:24.480 --> 31:27.080]  И предполагаем, что вот эта ситуация допустима, то
[31:27.080 --> 31:28.080]  есть ее нужно добавить.
[31:28.080 --> 31:34.960]  Вот эта ситуация допустима, что вообще тут может возникнуть.
[31:35.080 --> 31:47.080]  Так, значит, она допустима.
[31:47.080 --> 32:01.080]  Так, для, значит, тут у нас, да?
[32:01.200 --> 32:03.200]  Я хочу сказать одну из двух вещей.
[32:03.200 --> 32:05.200]  Что она либо пуст, либо не пуст.
[32:05.200 --> 32:08.200]  Вот если у меня вот здесь пусто, то она получена
[32:08.200 --> 32:09.200]  при помощи замыкания.
[32:09.200 --> 32:11.200]  А если она не пуст, то получена при помощи двигаточки.
[32:11.200 --> 32:13.200]  Давайте предположим.
[32:13.200 --> 32:17.200]  Допустима для x1, xn.
[32:17.200 --> 32:19.200]  Вот, я немножко тут замкнула, здесь.
[32:19.200 --> 32:21.200]  Давайте проверять.
[32:21.200 --> 32:23.200]  Значит, первая.
[32:25.200 --> 32:26.200]  Бета1 не пуст.
[32:26.200 --> 32:28.200]  Давайте посмотрим, что тут возникнет.
[32:28.320 --> 32:32.320]  С штрих.
[32:32.320 --> 32:34.320]  Значит, допустим начать с вывода.
[32:34.320 --> 32:38.320]  Альфа1, А, W.
[32:38.320 --> 32:39.320]  Много шагов.
[32:39.320 --> 32:41.320]  Тут один шаг.
[32:41.320 --> 32:42.320]  Альфа1.
[32:42.320 --> 32:44.320]  Значит, А раскрываем, как бета1.
[32:44.320 --> 32:48.320]  Бета2, W.
[32:48.320 --> 32:52.320]  Вот это равно x1, xn, так?
[32:52.320 --> 32:54.320]  Бета1 не пуст.
[32:54.320 --> 32:56.320]  Значит, что у нас с бета1 последнее?
[32:56.440 --> 32:59.440]  Xn, это последнее бета1.
[32:59.440 --> 33:01.440]  Давайте напишем, что бета1.
[33:01.440 --> 33:03.440]  Это бета-штрих на xn.
[33:03.440 --> 33:07.440]  Ну, бета-штрих уже может быть пустой.
[33:07.440 --> 33:10.440]  Значит, здесь тогда я говорю, что вот это, просто как
[33:10.440 --> 33:18.440]  строка, равно А1, бета-штрих, xn, бета2, W.
[33:18.440 --> 33:20.440]  Тогда...
[33:20.440 --> 33:22.440]  Значит, и точка стоит вот тут.
[33:22.440 --> 33:24.440]  То бишь вот тут.
[33:24.560 --> 33:26.560]  Я говорил правило вот здесь.
[33:26.560 --> 33:28.560]  Давайте тогда мы поставим точку вот здесь.
[33:28.560 --> 33:30.560]  И рассмотрим ситуацию.
[33:30.560 --> 33:38.560]  А, стрелка, бета-штрих, точка, xn, бета2, W.
[33:38.560 --> 33:40.560]  Спасибо вам за комментарий.
[33:40.560 --> 33:42.560]  Вот ровно это и нужно сделать.
[33:42.560 --> 33:44.560]  Значит, теперь мы говорим, что вот эта ситуация допустима
[33:44.560 --> 33:46.560]  для этого префикса.
[33:46.560 --> 33:48.560]  Почему?
[33:48.560 --> 33:50.560]  Берем тот же самый вывод и говорим, что меньше в нем один шаг.
[33:50.560 --> 33:52.560]  Тогда сфотографируйте.
[33:52.680 --> 33:54.680]  Там, наверное, xn или W?
[33:54.680 --> 33:56.680]  Нет, именно U.
[33:56.680 --> 33:58.680]  Сейчас, дайте я проверю.
[34:00.680 --> 34:04.680]  Да, U это то, что находится после буквы A.
[34:04.680 --> 34:06.680]  Вот.
[34:06.680 --> 34:08.680]  U находится вот здесь.
[34:08.680 --> 34:10.680]  Вот он.
[34:10.680 --> 34:12.680]  Вот эти вот буквы.
[34:12.680 --> 34:14.680]  W.
[34:14.680 --> 34:16.680]  Так, ну и...
[34:16.680 --> 34:18.680]  Поскольку эта ситуация тут допустима,
[34:18.800 --> 34:20.800]  на первом же своем шаге,
[34:20.800 --> 34:22.800]  при построении WKG от x1xn,
[34:22.800 --> 34:24.800]  эту ситуацию заберет.
[34:24.800 --> 34:26.800]  Отлично.
[34:26.800 --> 34:28.800]  Значит, второй шаг.
[34:28.800 --> 34:30.800]  Бета, один, пуст.
[34:32.800 --> 34:34.800]  Так, а вот немножко сложным будет.
[34:38.800 --> 34:40.800]  Значит, я сейчас буду говорить по одной строке,
[34:40.800 --> 34:42.800]  и после этого ждает согласие,
[34:42.800 --> 34:44.800]  что все согласны, что это действительно верно.
[34:44.800 --> 34:46.800]  Давайте вот это вот уберу.
[34:46.920 --> 34:48.920]  Если кто-то это конспектирует,
[34:48.920 --> 34:50.920]  я это все когда-то сам законспектировал,
[34:50.920 --> 34:52.920]  поэтому...
[34:52.920 --> 34:54.920]  Потом можете этим пользоваться.
[34:57.920 --> 34:59.920]  Проблема Валерия именно в том,
[34:59.920 --> 35:01.920]  что здесь очень много разных букв,
[35:01.920 --> 35:03.920]  которые обозначают разные вещи.
[35:03.920 --> 35:05.920]  Значит, α...
[35:05.920 --> 35:07.920]  Там что у вас α1, да?
[35:07.920 --> 35:09.920]  Вот это x1xn есть.
[35:09.920 --> 35:11.920]  То есть мы говорим,
[35:11.920 --> 35:13.920]  что пусть у меня так получилось,
[35:13.920 --> 35:15.920]  что мы перейдем до этого шага.
[35:15.920 --> 35:17.920]  Значит, берем
[35:17.920 --> 35:19.920]  s'
[35:19.920 --> 35:21.920]  со звездой.
[35:21.920 --> 35:23.920]  α, а, w.
[35:23.920 --> 35:25.920]  Значит, правый.
[35:25.920 --> 35:27.920]  Это правый вывод.
[35:27.920 --> 35:29.920]  Что означает, что это правый вывод?
[35:29.920 --> 35:31.920]  Что когда-то сам правый не терминал.
[35:31.920 --> 35:33.920]  И α это x1xn.
[35:33.920 --> 35:35.920]  Значит, тут α1.
[35:35.920 --> 35:37.920]  Хочется сказать,
[35:37.920 --> 35:39.920]  что xn ты
[35:39.920 --> 35:41.920]  на каком-то шаге появился.
[35:43.920 --> 35:45.920]  Но это почему-то правда.
[35:57.920 --> 35:59.920]  То есть
[35:59.920 --> 36:01.920]  рассмотрим.
[36:01.920 --> 36:03.920]  Первый или последний
[36:03.920 --> 36:05.920]  надо проверить.
[36:09.920 --> 36:11.920]  Последний.
[36:11.920 --> 36:13.920]  А, ну, с другой стороны,
[36:13.920 --> 36:15.920]  да, поскольку мы сейчас а раскрываем,
[36:17.920 --> 36:19.920]  здесь в выводе
[36:19.920 --> 36:21.920]  как это вообще
[36:21.920 --> 36:23.920]  может быть устроено?
[36:23.920 --> 36:25.920]  Там из штрих вылезает какую-то альфу.
[36:25.920 --> 36:27.920]  Ну, чтобы не было альфы, давайте так.
[36:27.920 --> 36:29.920]  Гамма тоже заняты все.
[36:29.920 --> 36:31.920]  Какой там дельта 1?
[36:31.920 --> 36:33.920]  Какое-то вычисление
[36:33.920 --> 36:35.920]  не терминалов и не терминальных букв.
[36:35.920 --> 36:37.920]  Потом вот этот не терминал
[36:37.920 --> 36:39.920]  как-то раскрылся
[36:39.920 --> 36:41.920]  и стало еще больше букв.
[36:41.920 --> 36:43.920]  И потом вот так вот раскрывалась,
[36:43.920 --> 36:45.920]  потом буква вылезла.
[36:45.920 --> 36:47.920]  Хочу сказать, что у меня был какой-то шаг,
[36:47.920 --> 36:49.920]  на котором появился xn.
[36:49.920 --> 36:51.920]  Последний шаг,
[36:51.920 --> 36:53.920]  где
[36:53.920 --> 36:55.920]  в строке
[36:55.920 --> 36:57.920]  появился
[36:57.920 --> 36:59.920]  xn.
[36:59.920 --> 37:01.920]  Я надеюсь, что я объяснил,
[37:01.920 --> 37:03.920]  почему такой шаг есть.
[37:03.920 --> 37:05.920]  Здесь это
[37:05.920 --> 37:07.920]  в любом случае немножко опущу,
[37:07.920 --> 37:09.920]  не совсем такие строгие вещи.
[37:09.920 --> 37:11.920]  Вот.
[37:11.920 --> 37:13.920]  Но то, что у нас, если перечислять
[37:13.920 --> 37:15.920]  вот такие строки,
[37:15.920 --> 37:17.920]  в какой-то момент xn появится в последний раз.
[37:17.920 --> 37:19.920]  Вот xn просто тут есть.
[37:19.920 --> 37:21.920]  Если на предыдущем шаге,
[37:21.920 --> 37:23.920]  он на предыдущем шаге уже был.
[37:23.920 --> 37:25.920]  Посмотрим еще один предыдущий шаг.
[37:25.920 --> 37:27.920]  Вот найдем первый момент, когда он появился.
[37:27.920 --> 37:29.920]  И запишем этот вывод.
[37:29.920 --> 37:31.920]  Самый поздний.
[37:31.920 --> 37:33.920]  Я хочу получить ситуацию,
[37:33.920 --> 37:35.920]  где у меня xn стоял вот тут
[37:35.920 --> 37:37.920]  и свести к этому случаю.
[37:37.920 --> 37:39.920]  А потом замкнуть все до конца.
[37:39.920 --> 37:41.920]  Вот что сделать, да?
[37:41.920 --> 37:43.920]  Вот непосредственно предыдущий.
[37:43.920 --> 37:45.920]  Смотрите, что у вас могло возникнуть.
[37:45.920 --> 37:47.920]  У вас тут могло возникнуть x1, xn и какой-то b.
[37:47.920 --> 37:49.920]  И b вывел a.
[37:49.920 --> 37:51.920]  А b мог и на c появиться.
[37:51.920 --> 37:53.920]  Было x1, xn, c.
[37:53.920 --> 37:55.920]  Потом c перешло в b, b перешло в...
[37:55.920 --> 37:57.920]  Вот я хочу вот это все промотать назад.
[37:57.920 --> 37:59.920]  Это на самом деле
[37:59.920 --> 38:01.920]  произошло в алгоритме.
[38:01.920 --> 38:03.920]  В теории это нельзя, потому что это какая-то странная индукция.
[38:03.920 --> 38:05.920]  В теории мы говорим, насмотрим последний шаг,
[38:05.920 --> 38:07.920]  где он возник. То есть последнее правило,
[38:07.920 --> 38:09.920]  породившее его.
[38:09.920 --> 38:11.920]  Утверждаю, что для этого важно,
[38:11.920 --> 38:13.920]  чтобы вывод был правым.
[38:13.920 --> 38:15.920]  Вот что...
[38:15.920 --> 38:17.920]  Ровно xn, да.
[38:17.920 --> 38:19.920]  Вот ровно здесь.
[38:19.920 --> 38:21.920]  Чтобы префикс рос.
[38:21.920 --> 38:23.920]  Вот для чего нужен правый вывод.
[38:23.920 --> 38:25.920]  Давайте пока так скажем.
[38:25.920 --> 38:27.920]  Найдем место вывода, где xn появился.
[38:27.920 --> 38:29.920]  Сейчас, чтобы обозначить,
[38:29.920 --> 38:31.920]  мне было коллизии.
[38:31.920 --> 38:33.920]  Прямо все отсюда спешу.
[38:33.920 --> 38:35.920]  Так, s'
[38:35.920 --> 38:37.920]  вводится звездой.
[38:37.920 --> 38:39.920]  α'
[38:39.920 --> 38:41.920]  b, y.
[38:41.920 --> 38:43.920]  А новый вводит.
[38:43.920 --> 38:45.920]  α'
[38:45.920 --> 38:47.920]  γ, xn
[38:47.920 --> 38:49.920]  Δ, y.
[38:49.920 --> 38:51.920]  И оно выводит как-то со звездочкой.
[38:51.920 --> 38:53.920]  Че у нас тут?
[38:53.920 --> 38:55.920]  α,
[38:55.920 --> 38:57.920]  а, w.
[38:57.920 --> 38:59.920]  Значит,
[38:59.920 --> 39:01.920]  α'
[39:01.920 --> 39:03.920]  γ,
[39:03.920 --> 39:05.920]  x1,
[39:05.920 --> 39:07.920]  xn-1.
[39:09.920 --> 39:11.920]  Так.
[39:11.920 --> 39:13.920]  Че тут написано?
[39:17.920 --> 39:19.920]  Да-да-да-да.
[39:19.920 --> 39:21.920]  Я тут n написал просто очень криво.
[39:21.920 --> 39:23.920]  Смотрите. Было правило b.
[39:23.920 --> 39:25.920]  Что с ним случилось?
[39:25.920 --> 39:27.920]  Вот он вывел свой xn.
[39:27.920 --> 39:29.920]  Попутно вывел что-то назад и что-то вперед.
[39:29.920 --> 39:31.920]  Возможно, xn появился не само.
[39:31.920 --> 39:33.920]  Кто-то еще с ним вместе появился.
[39:33.920 --> 39:35.920]  Вот я говорю, что у меня было правило.
[39:35.920 --> 39:37.920]  Я сейчас запишу.
[39:37.920 --> 39:39.920]  Где бы это дописать?
[39:39.920 --> 39:41.920]  Тот факт хороший, вот этот факт плохой.
[39:45.920 --> 39:47.920]  Значит, b-стрелочка.
[39:47.920 --> 39:49.920]  Че у нас там?
[39:49.920 --> 39:51.920]  γ,
[39:51.920 --> 39:53.920]  xn,
[39:53.920 --> 39:55.920]  δ.
[39:55.920 --> 39:57.920]  Так, я сейчас закончу стереом 5-10, потом сделаю перерыв
[39:57.920 --> 39:59.920]  и потом как раз за пол-лекции
[39:59.920 --> 40:01.920]  расскажу, почему алгоритм работает,
[40:01.920 --> 40:03.920]  и как вообще нужно в простак уходить.
[40:09.920 --> 40:11.920]  Вот мы как-то получили этот xn.
[40:11.920 --> 40:13.920]  А потом
[40:13.920 --> 40:15.920]  в этот кусок вывода.
[40:17.920 --> 40:19.920]  Давайте его напишу здесь.
[40:19.920 --> 40:21.920]  α,
[40:21.920 --> 40:23.920]  γ,
[40:23.920 --> 40:25.920]  xn,
[40:25.920 --> 40:27.920]  δ,
[40:27.920 --> 40:29.920]  у со звездой выводит α,
[40:29.920 --> 40:31.920]  а, w.
[40:31.920 --> 40:33.920]  Здесь напишу только
[40:33.920 --> 40:35.920]  правее
[40:37.920 --> 40:39.920]  xn.
[40:39.920 --> 40:41.920]  То есть,
[40:41.920 --> 40:43.920]  что тут нужно говорить?
[40:43.920 --> 40:45.920]  Нужно говорить, что я пускал вместо xn?
[40:45.920 --> 40:47.920]  Вот.
[40:47.920 --> 40:49.920]  Потом из пуска
[40:49.920 --> 40:51.920]  δ, у,
[40:51.920 --> 40:53.920]  возможно в δ, у были не терминалы.
[40:53.920 --> 40:55.920]  Весь этот вывод,
[40:55.920 --> 40:57.920]  xn вообще не трогает.
[40:57.920 --> 40:59.920]  Потому что если бы
[40:59.920 --> 41:01.920]  xn как-то раскрылся,
[41:01.920 --> 41:03.920]  то мы говорим, что xn появился в правиле
[41:03.920 --> 41:05.920]  после него, поскольку это последняя встреча
[41:05.920 --> 41:07.920]  xn в правилах.
[41:07.920 --> 41:09.920]  Значит, вот здесь у меня xn не появлялся на этом месте.
[41:09.920 --> 41:11.920]  Вот Борис правильно сказал,
[41:11.920 --> 41:13.920]  что нам важен xn на позиции,
[41:13.920 --> 41:15.920]  в начале слова.
[41:15.920 --> 41:17.920]  Этот вывод пилим на две части.
[41:17.920 --> 41:19.920]  Мы находим момент, где появился xn,
[41:19.920 --> 41:21.920]  где его сгенирировали,
[41:21.920 --> 41:23.920]  а дальше,
[41:23.920 --> 41:25.920]  кусок, который после него дошел до
[41:25.920 --> 41:27.920]  α, а, w,
[41:27.920 --> 41:29.920]  так что xn никак не трогался после этого.
[41:29.920 --> 41:31.920]  Вот ровно это правило,
[41:31.920 --> 41:33.920]  в этой ситуации нам не нужна.
[41:33.920 --> 41:35.920]  Давайте генирировать, какая ситуация из него
[41:35.920 --> 41:37.920]  будет следовать.
[41:39.920 --> 41:41.920]  B стрелка, γ,
[41:41.920 --> 41:43.920]  xn,
[41:43.920 --> 41:45.920]  δ, v,
[41:45.920 --> 41:47.920]  допустимо.
[41:47.920 --> 41:49.920]  Так, для чего?
[41:49.920 --> 41:51.920]  Для
[41:53.920 --> 41:55.920]  v, k, g, xn, xn-1.
[42:01.920 --> 42:03.920]  Тут еще нужно аккуратно
[42:03.920 --> 42:05.920]  проверить,
[42:05.920 --> 42:07.920]  как вот этот v
[42:07.920 --> 42:09.920]  маленький связан с q.
[42:09.920 --> 42:11.920]  Мы просто тогда здесь скажем,
[42:11.920 --> 42:13.920]  что вот
[42:15.920 --> 42:17.920]  где стоят точки?
[42:17.920 --> 42:19.920]  Одна точка стоит
[42:21.920 --> 42:23.920]  α' вот тут,
[42:23.920 --> 42:25.920]  а,
[42:25.920 --> 42:27.920]  и потом a открывается
[42:27.920 --> 42:29.920]  куда?
[42:29.920 --> 42:31.920]  α, β,
[42:31.920 --> 42:33.920]  w точка стоит вот тут,
[42:33.920 --> 42:35.920]  в начале правила.
[42:35.920 --> 42:37.920]  Вот этот v маленький
[42:37.920 --> 42:39.920]  так, здесь w.
[42:43.920 --> 42:45.920]  Так, я сейчас, возможно, тут
[42:45.920 --> 42:47.920]  не скажу, как они согласуются,
[42:47.920 --> 42:49.920]  или...
[42:51.920 --> 42:53.920]  Так, значит, возьмем вот этот вывод
[42:55.920 --> 42:57.920]  и вот здесь.
[42:59.920 --> 43:01.920]  Значит, i, b открылся вот так,
[43:01.920 --> 43:03.920]  точка стоит вот здесь,
[43:03.920 --> 43:05.920]  а,
[43:05.920 --> 43:07.920]  б открылся вот так,
[43:07.920 --> 43:09.920]  точка стоит вот тут.
[43:09.920 --> 43:11.920]  Что после него находится?
[43:11.920 --> 43:13.920]  После него находится вот этот вот y.
[43:15.920 --> 43:17.920]  Что?
[43:17.920 --> 43:19.920]  Нет, вы видите, что v равно y?
[43:19.920 --> 43:21.920]  Я хочу сказать, что... Очевидно, что v равно first от y,
[43:21.920 --> 43:23.920]  это да. Я хочу сказать, как вот этот v
[43:23.920 --> 43:25.920]  связан вот здесь.
[43:25.920 --> 43:27.920]  Давайте пока это опущу, может, после перерыва скажу.
[43:27.920 --> 43:29.920]  Ну, а дальше мы просто должны сказать,
[43:29.920 --> 43:31.920]  что после вот этого xn,
[43:31.920 --> 43:33.920]  вот эта ситуация,
[43:33.920 --> 43:35.920]  где точка стоит после,
[43:35.920 --> 43:37.920]  она допустима вот здесь,
[43:37.920 --> 43:39.920]  но она не просто допустима,
[43:39.920 --> 43:41.920]  она еще и будет добавлена на первом же шаге.
[43:43.920 --> 43:45.920]  А потом
[43:45.920 --> 43:47.920]  нужно зависеть от момента, когда появляется a.
[43:47.920 --> 43:49.920]  Давайте тогда сейчас сделаем перерыв на 5 минут.
[43:49.920 --> 43:51.920]  Я сейчас тут сложу все обозначения
[43:51.920 --> 43:53.920]  и к концу перерыва все это сделаю.
[43:53.920 --> 43:55.920]  Причем поскольку будет a, w, вот здесь,
[43:57.920 --> 43:59.920]  а y это что-то, состоящее
[43:59.920 --> 44:01.920]  из маленьких букв,
[44:01.920 --> 44:03.920]  поскольку вот тут b
[44:03.920 --> 44:05.920]  раскрывался сюда.
[44:05.920 --> 44:07.920]  Вот b раскрылся. Значит, стало быть,
[44:07.920 --> 44:09.920]  y это строка из маленьких букв тут.
[44:09.920 --> 44:11.920]  Поскольку delta y
[44:11.920 --> 44:13.920]  приводит a, w,
[44:13.920 --> 44:15.920]  это означает, что здесь
[44:15.920 --> 44:17.920]  применяется правило вида, вот правый интерьер,
[44:17.920 --> 44:19.920]  открывается что-нибудь. Более того,
[44:19.920 --> 44:21.920]  то есть di открывается как di плюс 1 и tti.
[44:21.920 --> 44:23.920]  И tti тоже из маленьких букв состоят.
[44:23.920 --> 44:25.920]  Отсюда следует, что у нас
[44:25.920 --> 44:27.920]  действительно вот этот v
[44:27.920 --> 44:29.920]  это first
[44:29.920 --> 44:31.920]  от y, и оно согласовано с u,
[44:31.920 --> 44:33.920]  потому что y в будущем
[44:33.920 --> 44:35.920]  вот здесь
[44:35.920 --> 44:37.920]  di плюс 1
[44:41.920 --> 44:43.920]  Да.
[44:43.920 --> 44:45.920]  u это будет first от всех t
[44:45.920 --> 44:47.920]  и еще в конце на y.
[44:47.920 --> 44:49.920]  То есть мы говорим, что вот delta
[44:49.920 --> 44:51.920]  это такая строка, в которой сидим в большом не терминале
[44:51.920 --> 44:53.920]  и маленькие буквы.
[44:53.920 --> 44:55.920]  В будущем это не открывается в другой не терминал,
[44:55.920 --> 44:57.920]  в третий-четвертый не терминал, вот так оно открывалось.
[44:57.920 --> 44:59.920]  И здесь согласовано
[44:59.920 --> 45:01.920]  u, который находится вот тут,
[45:01.920 --> 45:03.920]  и v,
[45:03.920 --> 45:05.920]  который находится вот здесь как first от delta y.
[45:05.920 --> 45:07.920]  Надеюсь, объяснил.
[45:09.920 --> 45:11.920]  Что? Смотрите, у вас здесь
[45:11.920 --> 45:13.920]  у, не у, у.
[45:13.920 --> 45:15.920]  Это строка из маленьких букв, из терминальных букв,
[45:15.920 --> 45:17.920]  поскольку у нас b открывалась.
[45:17.920 --> 45:19.920]  w это тоже строка из маленьких букв, поскольку a открывалась.
[45:19.920 --> 45:21.920]  И мы знаем с вами, что вот этот вывод
[45:21.920 --> 45:23.920]  не трогать ничего
[45:23.920 --> 45:25.920]  от x и на дальше, вот здесь сюда.
[45:25.920 --> 45:27.920]  Стало быть, из delta y вводится a w.
[45:29.920 --> 45:31.920]  В дельта вначале стоит не терминал
[45:31.920 --> 45:33.920]  какой-нибудь, и все, что с ним
[45:33.920 --> 45:35.920]  происходит, это он открывается в другой не терминал,
[45:35.920 --> 45:37.920]  а с ним после него буквы идут.
[45:37.920 --> 45:39.920]  Другого спроса никакого нет.
[45:39.920 --> 45:41.920]  Что?
[45:45.920 --> 45:47.920]  Здесь строка a.
[45:47.920 --> 45:49.920]  Я помню, о чем вы говорите.
[45:49.920 --> 45:51.920]  Внутри дельта мы говорим,
[45:51.920 --> 45:53.920]  что здесь какой-то не терминал, который каждый раз открывается.
[45:53.920 --> 45:55.920]  Здесь все-таки в тетах может быть не терминал.
[45:55.920 --> 45:57.920]  Спасибо.
[45:57.920 --> 45:59.920]  Ключевой момент в том, что
[45:59.920 --> 46:01.920]  a возникает как открывание
[46:01.920 --> 46:03.920]  первого же не терминала вот здесь.
[46:03.920 --> 46:05.920]  Вот.
[46:07.920 --> 46:09.920]  Теперь с конспектом.
[46:09.920 --> 46:11.920]  Все, я правильно сказал.
[46:11.920 --> 46:13.920]  Так.
[46:17.920 --> 46:19.920]  Проверяем.
[46:23.920 --> 46:25.920]  Вот.
[46:27.920 --> 46:29.920]  И что тогда надо здесь увидеть?
[46:29.920 --> 46:31.920]  Надо видеть тогда, что ситуация
[46:31.920 --> 46:33.920]  с a,
[46:33.920 --> 46:35.920]  точка, вот здесь возвращаемся,
[46:35.920 --> 46:37.920]  точка beta2 будет добавлена
[46:37.920 --> 46:39.920]  после m плюс одного замыкания,
[46:39.920 --> 46:41.920]  где m от количества выводов такого вида.
[46:41.920 --> 46:43.920]  То есть я говорю, что я нашел
[46:43.920 --> 46:45.920]  вывод тра пылс и ксен.
[46:45.920 --> 46:47.920]  Сказал, что правда для него была добавлена,
[46:47.920 --> 46:49.920]  поскольку оно было два на первом же шаге.
[46:49.920 --> 46:51.920]  После этого сказал, что здесь
[46:51.920 --> 46:53.920]  все выводы начинаются с большой буквы,
[46:53.920 --> 46:55.920]  не с маленькой.
[46:55.920 --> 46:57.920]  Значит, они будут другое предсказать.
[46:57.920 --> 46:59.920]  Здесь какие-то m шагов,
[46:59.920 --> 47:01.920]  и вот за m таких предсказаний,
[47:01.920 --> 47:03.920]  таких замыканий я получу из вот этой ситуации
[47:03.920 --> 47:05.920]  вот эту ситуацию.
[47:05.920 --> 47:07.920]  Вот здесь.
[47:07.920 --> 47:09.920]  Вот это есть вопросы?
[47:09.920 --> 47:11.920]  Да нет?
[47:11.920 --> 47:13.920]  Надеюсь, понятно.
[47:13.920 --> 47:15.920]  Ну и теперь давайте сам алгоритм уже
[47:15.920 --> 47:17.920]  разберем чуть-чуть.
[47:17.920 --> 47:19.920]  Да?
[47:19.920 --> 47:21.920]  Смотрите.
[47:21.920 --> 47:23.920]  Я говорю, что пусть такая ситуация допустима.
[47:23.920 --> 47:25.920]  Если beta1 был не пуст,
[47:25.920 --> 47:27.920]  то я просто точку туда придвину и все.
[47:27.920 --> 47:29.920]  То есть beta1 пуст.
[47:29.920 --> 47:31.920]  Эта ситуация появилась как какое-то замыкание.
[47:31.920 --> 47:33.920]  Я говорю тогда, я должен отследить момент
[47:33.920 --> 47:35.920]  с замыканием чего она была.
[47:35.920 --> 47:37.920]  Это на практике, в теории.
[47:37.920 --> 47:39.920]  В теории отследил момент, когда у меня
[47:39.920 --> 47:41.920]  ксен появился.
[47:41.920 --> 47:43.920]  Вот этот тут ксен.
[47:43.920 --> 47:45.920]  Вот он появился.
[47:45.920 --> 47:47.920]  После этого, сколько он появился,
[47:47.920 --> 47:49.920]  после происходило,
[47:49.920 --> 47:51.920]  это префис не трогало.
[47:51.920 --> 47:53.920]  Еще что-то происходило, тут был какой-то не терминал,
[47:53.920 --> 47:55.920]  еще что-нибудь.
[47:55.920 --> 47:57.920]  Оно выводилось, выводилось, выводилось.
[47:57.920 --> 47:59.920]  Первый не терминал в ажот открывался.
[47:59.920 --> 48:01.920]  ДИ в ДИ плюс 1 ТТИ.
[48:01.920 --> 48:03.920]  Я говорю, что если таких шагов
[48:03.920 --> 48:05.920]  было М, то через М замыкание
[48:05.920 --> 48:07.920]  я получу из
[48:07.920 --> 48:09.920]  вот этой ситуации.
[48:09.920 --> 48:11.920]  Вот здесь видите, точка при дельте стоит.
[48:11.920 --> 48:13.920]  И вы поняли, что в дельте находится первый сил
[48:13.920 --> 48:15.920]  не терминальный, который открывается.
[48:15.920 --> 48:17.920]  Если у меня таких замыканий,
[48:17.920 --> 48:19.920]  по правилам, которые в этом выводе участвуют,
[48:19.920 --> 48:21.920]  я получу вот это вот правило,
[48:21.920 --> 48:23.920]  А, сцелка точка B2.
[48:23.920 --> 48:25.920]  Значит, здесь
[48:25.920 --> 48:27.920]  поймите идею, что нужно просто
[48:27.920 --> 48:29.920]  посмотреть, как эта штука была предсказаться.
[48:29.920 --> 48:31.920]  А формальности вы все
[48:31.920 --> 48:33.920]  при конспектном посмотрите перед экзаменом
[48:33.920 --> 48:35.920]  и когда будет это дело писать.
[48:35.920 --> 48:37.920]  Это сейчас на вид вот так вот здесь сложно
[48:37.920 --> 48:39.920]  понять именно строго.
[48:39.920 --> 48:41.920]  Поймите интуитивно.
[48:41.920 --> 48:43.920]  Так, теперь давайте
[48:43.920 --> 48:45.920]  посмотрим.
[48:45.920 --> 48:47.920]  Значит, итак.
[48:47.920 --> 48:49.920]  Управляющий лир таблицы называется парой с двух функций.
[48:49.920 --> 48:51.920]  Функция действия и функция перехода.
[48:53.920 --> 48:55.920]  Чего у нас тут?
[48:59.920 --> 49:01.920]  Значит, мы хотим запустить МП-автомат принос свертка.
[49:01.920 --> 49:03.920]  Делать вот действия
[49:03.920 --> 49:05.920]  перехода.
[49:05.920 --> 49:07.920]  Отвечаем на вопрос, что делать?
[49:07.920 --> 49:09.920]  Начнем примерно вот состояние.
[49:09.920 --> 49:11.920]  Так, дальше
[49:11.920 --> 49:13.920]  вот состояние. Вот посчитали мы все ВК
[49:13.920 --> 49:15.920]  уже от какого-то префикса.
[49:15.920 --> 49:17.920]  Сказали, что их конечно много.
[49:17.920 --> 49:19.920]  Давайте их занумируем и скажем, что
[49:19.920 --> 49:21.920]  вот это состояние,
[49:21.920 --> 49:23.920]  то есть у нас штука большая, состояние
[49:23.920 --> 49:25.920]  анализатора.
[49:25.920 --> 49:27.920]  Штука большая и
[49:27.920 --> 49:29.920]  строка, я напишу звездочка K,
[49:29.920 --> 49:31.920]  это строки длины K и меньше.
[49:33.920 --> 49:35.920]  Множество из четырех элементов.
[49:35.920 --> 49:37.920]  Первая, значит, shift,
[49:37.920 --> 49:39.920]  вторая, reduce по этому правилу,
[49:39.920 --> 49:41.920]  отказ и принятие.
[49:43.920 --> 49:45.920]  И второе,
[49:45.920 --> 49:47.920]  это функция перехода.
[49:47.920 --> 49:49.920]  Из кул в
[49:49.920 --> 49:51.920]  n объединить сигма,
[49:51.920 --> 49:53.920]  переходим в кул.
[49:53.920 --> 49:55.920]  Функции перехода мы сами уже построили.
[49:55.920 --> 49:57.920]  Ну как мы построили?
[49:57.920 --> 49:59.920]  Из состояния какого-то
[49:59.920 --> 50:01.920]  по маленькой буквы переходим в go to от этой буквы.
[50:01.920 --> 50:03.920]  То есть, если здесь
[50:03.920 --> 50:05.920]  ВК для
[50:05.920 --> 50:07.920]  x1, xn-1,
[50:07.920 --> 50:09.920]  а тут у меня xn,
[50:09.920 --> 50:11.920]  то тут у меня ВК от x1, xn.
[50:13.920 --> 50:15.920]  Считайте, что это какой-то такой вот
[50:15.920 --> 50:17.920]  mp-автомат здесь.
[50:17.920 --> 50:19.920]  Уже обычный, то есть он ходит по состояниям.
[50:19.920 --> 50:21.920]  Вот он, переход.
[50:21.920 --> 50:23.920]  Состояние по букве переходим в состояние.
[50:23.920 --> 50:25.920]  Давайте поговорим о функции действий.
[50:27.920 --> 50:29.920]  Да, да, да.
[50:31.920 --> 50:33.920]  Функция перехода, функция действия.
[50:33.920 --> 50:35.920]  Функция перехода, куда идти,
[50:35.920 --> 50:37.920]  шифт, редюс, отказ, принятие.
[50:39.920 --> 50:41.920]  Давайте вспомним, откуда
[50:41.920 --> 50:43.920]  вообще такие ситуации возникали.
[50:45.920 --> 50:47.920]  Эти вот множества замкнутые.
[50:47.920 --> 50:49.920]  ВК какие-то.
[50:51.920 --> 50:53.920]  Еще раз,
[50:53.920 --> 50:55.920]  построили все ВК.
[50:57.920 --> 50:59.920]  Занумировали их.
[50:59.920 --> 51:01.920]  Их конечно много, мы поняли, почему их конечно много.
[51:01.920 --> 51:03.920]  Это состояние
[51:03.920 --> 51:05.920]  анализатора.
[51:05.920 --> 51:07.920]  Так? Все.
[51:07.920 --> 51:09.920]  Теперь я говорю,
[51:09.920 --> 51:11.920]  переход и состояние
[51:11.920 --> 51:13.920]  какого-то по букве.
[51:13.920 --> 51:15.920]  Это go to из этого состояния по этой букве.
[51:15.920 --> 51:17.920]  Go to это предлетие m5-10.
[51:17.920 --> 51:19.920]  Функция действия.
[51:19.920 --> 51:21.920]  Как мы говорили, состояние это то,
[51:21.920 --> 51:23.920]  где по мнению анализатора мы находимся.
[51:23.920 --> 51:25.920]  В каком правиле?
[51:25.920 --> 51:27.920]  Что мы знаем?
[51:27.920 --> 51:29.920]  Из s, вот он,
[51:29.920 --> 51:31.920]  a, beta1, beta2.
[51:33.920 --> 51:35.920]  Давайте поймем две вещи.
[51:35.920 --> 51:37.920]  Первое. Если вдруг мы какое-то дерево дочитали,
[51:39.920 --> 51:41.920]  не надо делать никакие переносы.
[51:41.920 --> 51:43.920]  Если вдруг точка находится в конце,
[51:43.920 --> 51:45.920]  сверху поднимаемся наверх.
[51:45.920 --> 51:47.920]  Если вдруг здесь где-то, вот эта точка находится тут,
[51:47.920 --> 51:49.920]  и мы тут раскрыли, где-то точка находится в конце
[51:49.920 --> 51:51.920]  пониже по дереву, надо все равно подниматься наверх.
[51:51.920 --> 51:53.920]  То есть,
[51:53.920 --> 51:55.920]  правило, нельзя переносить букву
[51:55.920 --> 51:57.920]  не из текущего под дерево.
[51:59.920 --> 52:01.920]  Пишу здесь.
[52:01.920 --> 52:03.920]  А, стрелка,
[52:03.920 --> 52:05.920]  бета, точка,
[52:05.920 --> 52:07.920]  у.
[52:07.920 --> 52:09.920]  То есть, мне пришло на вход.
[52:09.920 --> 52:11.920]  Q и у.
[52:11.920 --> 52:13.920]  Что делать?
[52:13.920 --> 52:15.920]  Вот идем по ситуациям.
[52:15.920 --> 52:17.920]  И видим такую ситуацию.
[52:17.920 --> 52:19.920]  А, стрелка, бета, запятая у.
[52:19.920 --> 52:21.920]  Что надо делать? Есть какие-то идеи?
[52:21.920 --> 52:23.920]  Вот у вас.
[52:23.920 --> 52:25.920]  Вы знаете, что вы какую-то ситуацию
[52:25.920 --> 52:27.920]  дочитали до конца?
[52:27.920 --> 52:29.920]  Да?
[52:31.920 --> 52:33.920]  Смотрите, автомат переноса свертка.
[52:33.920 --> 52:35.920]  Автомат переноса сверта
[52:35.920 --> 52:37.920]  переносит на стэк при правильном исполнении
[52:37.920 --> 52:39.920]  только в случае, когда текущие правила
[52:39.920 --> 52:41.920]  еще не дочитаны. Если текущие правила
[52:41.920 --> 52:43.920]  дочитаны, он сворачивает, он не переносит.
[52:43.920 --> 52:45.920]  Почему? Потому что тут у него стоит правая часть
[52:45.920 --> 52:47.920]  какого-то правила, он поставит сюда
[52:47.920 --> 52:49.920]  букву, то он эту бету не свернет.
[52:49.920 --> 52:51.920]  Стэк устроен так, что нельзя обратиться к стэку,
[52:51.920 --> 52:53.920]  пока вы это не снимете.
[52:53.920 --> 52:55.920]  Потому что правильность
[52:55.920 --> 52:57.920]  автомата переноса сверта нужно было понять во время семинара.
[52:57.920 --> 52:59.920]  Правец исполнения
[52:59.920 --> 53:01.920]  подозревает, что переносит только
[53:01.920 --> 53:03.920]  букву, которая нужна текущему правилу.
[53:05.920 --> 53:07.920]  Буква из текущего под дерево.
[53:07.920 --> 53:09.920]  Ну, что у нас здесь получается?
[53:11.920 --> 53:13.920]  Мы хотим сделать свертку.
[53:13.920 --> 53:15.920]  Это редьюз. Вот он.
[53:15.920 --> 53:17.920]  И это
[53:17.920 --> 53:19.920]  вот этого правила.
[53:19.920 --> 53:21.920]  И мы согласуем, что то, что мы видим в слове,
[53:21.920 --> 53:23.920]  вот каретка,
[53:25.920 --> 53:27.920]  как мы видим в слове,
[53:27.920 --> 53:29.920]  это ровно то, что
[53:29.920 --> 53:31.920]  в стучении анализатора
[53:31.920 --> 53:33.920]  должно там находиться. Вот оно у в конце.
[53:33.920 --> 53:35.920]  Значит, это редьюз.
[53:35.920 --> 53:37.920]  Дальше.
[53:37.920 --> 53:39.920]  А, стрелка, бета 1,
[53:39.920 --> 53:41.920]  точка А, маленькая, бета 2,
[53:41.920 --> 53:43.920]  запятая В.
[53:43.920 --> 53:45.920]  Давайте с вами поработаем. Что бы вы хотели тут делать?
[53:49.920 --> 53:51.920]  Вот этого нет, вот это вот.
[53:51.920 --> 53:53.920]  Да.
[53:53.920 --> 53:55.920]  Здесь есть А маленькая, но
[53:55.920 --> 53:57.920]  надо проверить, что у нас...
[53:57.920 --> 53:59.920]  Шифт. А теперь давайте условия писать.
[53:59.920 --> 54:01.920]  Здесь мы видим У.
[54:01.920 --> 54:03.920]  Вот нам в слове пришло У.
[54:03.920 --> 54:05.920]  А здесь мы видим, что вот после точки
[54:05.920 --> 54:07.920]  находится А, бета 2, да еще и В.
[54:07.920 --> 54:09.920]  Поэтому мы говорим, что
[54:09.920 --> 54:11.920]  У равно first
[54:11.920 --> 54:13.920]  от А,
[54:13.920 --> 54:15.920]  бета 2 и В маленького.
[54:15.920 --> 54:17.920]  Так, а теперь глаза сюда.
[54:17.920 --> 54:19.920]  Сейчас будет магия.
[54:23.920 --> 54:25.920]  Давайте с вами дальше
[54:25.920 --> 54:27.920]  работаем.
[54:27.920 --> 54:29.920]  Смотрите, вот я вам сказал три случая.
[54:29.920 --> 54:31.920]  Точка в конце,
[54:31.920 --> 54:33.920]  точка перед маленькой буквы,
[54:33.920 --> 54:35.920]  где еще точку вы можете поставить?
[54:35.920 --> 54:37.920]  Перед терминалом. О!
[54:37.920 --> 54:39.920]  А,
[54:39.920 --> 54:41.920]  стрелка,
[54:41.920 --> 54:43.920]  бета 1, точка В,
[54:43.920 --> 54:45.920]  бета 2 В.
[54:45.920 --> 54:47.920]  И пусть она все согласована.
[54:47.920 --> 54:49.920]  У равен
[54:49.920 --> 54:51.920]  first, В,
[54:51.920 --> 54:53.920]  бета 2, В.
[54:53.920 --> 54:55.920]  Что бы вы хотели делать?
[54:55.920 --> 54:57.920]  Шифт или редюс?
[55:01.920 --> 55:03.920]  Смотрите, я сказал, что нужно делать шифт,
[55:03.920 --> 55:05.920]  тогда, когда вы читаете
[55:05.920 --> 55:07.920]  вот эту подель, вы дочитали до конца,
[55:07.920 --> 55:09.920]  точка тут поставилась, редюс, поднялись наверх.
[55:09.920 --> 55:11.920]  Тут?
[55:15.920 --> 55:17.920]  Я согласован, это значит,
[55:17.920 --> 55:19.920]  что мы все согласованы.
[55:19.920 --> 55:21.920]  Что будете съедать?
[55:23.920 --> 55:25.920]  Вы хотите
[55:25.920 --> 55:27.920]  посмотреть, что там в В было?
[55:27.920 --> 55:29.920]  Давайте я напишу шифт, пока не пишите
[55:29.920 --> 55:31.920]  ничего.
[55:31.920 --> 55:33.920]  Вы предполагаете, что
[55:33.920 --> 55:35.920]  В, вот он В, в дереве,
[55:37.920 --> 55:39.920]  открывается как-то где-то внизу,
[55:39.920 --> 55:41.920]  еще где-нибудь как-то,
[55:41.920 --> 55:43.920]  и в конце точка будет перед маленькой буквы,
[55:43.920 --> 55:45.920]  то есть вы спутитесь по дереву вниз.
[55:45.920 --> 55:47.920]  Нет, нет, нет.
[55:47.920 --> 55:49.920]  Вы не можете.
[55:49.920 --> 55:51.920]  У вас шифт не двигает точку сквозь В.
[55:51.920 --> 55:53.920]  Шифт двигает букву маленькую на стэк.
[55:53.920 --> 55:55.920]  Понимаете, что здесь
[55:55.920 --> 55:57.920]  это просто способ понять, что делать.
[55:57.920 --> 55:59.920]  Ставить букву на стэк или не ставить.
[55:59.920 --> 56:01.920]  Автомат переносит свертку, никто не отменял,
[56:01.920 --> 56:03.920]  он все еще работает так, как он работает.
[56:03.920 --> 56:05.920]  Ставим букву на стэк, сворачиваем правую часть.
[56:05.920 --> 56:07.920]  Просто здесь подсказывает автомат переносит свертку,
[56:07.920 --> 56:09.920]  что это шифт или редюс.
[56:09.920 --> 56:11.920]  То есть у автомата есть мнение о мире,
[56:11.920 --> 56:13.920]  что вот я сейчас читаю правила А,
[56:13.920 --> 56:15.920]  то есть я буду сворачивать.
[56:15.920 --> 56:17.920]  Тут есть мнение, что я сейчас читаю вот это правило,
[56:17.920 --> 56:19.920]  никакое другое.
[56:19.920 --> 56:21.920]  Делаю шифт здесь.
[56:21.920 --> 56:23.920]  Хочется сделать шифт.
[56:23.920 --> 56:25.920]  Почему?
[56:25.920 --> 56:27.920]  Я читаю сейчас правила B1, точка B2.
[56:27.920 --> 56:29.920]  У B это висит какое-то дерево внизу.
[56:29.920 --> 56:31.920]  Вот оно.
[56:31.920 --> 56:33.920]  Какое-то дерево висит.
[56:33.920 --> 56:35.920]  Где-то там есть точка перед маленькой буквы,
[56:35.920 --> 56:37.920]  мы ее и шифтим на самом деле.
[56:37.920 --> 56:39.920]  Понятно дело, что поскольку у нас замыкание так устроено,
[56:39.920 --> 56:41.920]  что здесь находится что?
[56:41.920 --> 56:43.920]  Согласованы все слова,
[56:43.920 --> 56:45.920]  то есть если мы здесь замкнули,
[56:45.920 --> 56:47.920]  то вот эта часть согласована вот здесь.
[56:47.920 --> 56:49.920]  Вот там везде ферсы совпадают.
[56:49.920 --> 56:51.920]  Я не буду сейчас додаваться подробностей.
[56:51.920 --> 56:53.920]  Это будет шифт, кроме одного случая.
[56:53.920 --> 56:55.920]  Нарисую пример.
[56:55.920 --> 56:57.920]  Из S выводится вот A.
[56:57.920 --> 56:59.920]  Из A выводится
[56:59.920 --> 57:01.920]  β1,
[57:01.920 --> 57:03.920]  B, β2,
[57:03.920 --> 57:05.920]  тут находится В.
[57:05.920 --> 57:07.920]  А что, если у нас
[57:07.920 --> 57:09.920]  над β висит пустое дерево,
[57:09.920 --> 57:11.920]  пустое слово?
[57:11.920 --> 57:13.920]  Тут висит 100 терминалов, с которыми висит пустое слово внизу.
[57:13.920 --> 57:15.920]  У каждого.
[57:15.920 --> 57:17.920]  Тогда
[57:17.920 --> 57:19.920]  ваш вот этот ферст реализуется вот здесь.
[57:19.920 --> 57:21.920]  Это буквы,
[57:21.920 --> 57:23.920]  которые будете шить, находятся вот здесь.
[57:23.920 --> 57:25.920]  Что вы взяли?
[57:25.920 --> 57:27.920]  Вы шифтили буквы, которые находятся в тягущем по дереве.
[57:27.920 --> 57:29.920]  И вот это все сломалось.
[57:29.920 --> 57:31.920]  А что надо делать в таком случае?
[57:31.920 --> 57:33.920]  Надо делать редьюз.
[57:33.920 --> 57:35.920]  Поэтому мы говорим,
[57:35.920 --> 57:37.920]  что мы делаем не по ферсту.
[57:37.920 --> 57:39.920]  То есть давайте явно запретим такие конструкции.
[57:39.920 --> 57:41.920]  То есть мы говорим,
[57:41.920 --> 57:43.920]  такое правило голосуется
[57:43.920 --> 57:45.920]  за перенос,
[57:45.920 --> 57:47.920]  только если
[57:47.920 --> 57:49.920]  из B не вводится пустое слово.
[57:51.920 --> 57:53.920]  Возможно из B вводится там, не знаю,
[57:53.920 --> 57:55.920]  B выводится
[57:55.920 --> 57:57.920]  β штрих альфа.
[57:57.920 --> 57:59.920]  А отсюда вводится β2 штриха
[57:59.920 --> 58:01.920]  альфа альфа штрих.
[58:01.920 --> 58:03.920]  И там еще что-нибудь и все.
[58:03.920 --> 58:05.920]  Но в конце самый правый терминал
[58:05.920 --> 58:07.920]  открывается в пустое слово.
[58:07.920 --> 58:09.920]  Запрещаем такие выводы.
[58:09.920 --> 58:11.920]  То есть мы говорим, делай ферст, делай шифт,
[58:11.920 --> 58:13.920]  только если в выводе вот этого.
[58:13.920 --> 58:15.920]  Что такое ферст?
[58:15.920 --> 58:17.920]  Выводим все слова и проверяем их префиксы.
[58:17.920 --> 58:19.920]  Делай шифт, если ты выводишь все слова
[58:19.920 --> 58:21.920]  только такими выводами,
[58:21.920 --> 58:23.920]  в которых у вас нету такого
[58:23.920 --> 58:25.920]  случая, что первый самый не терминал
[58:25.920 --> 58:27.920]  в пустое слово превратился.
[58:27.920 --> 58:29.920]  А как называются такие выводы,
[58:29.920 --> 58:31.920]  которые ферст и запрещают
[58:31.920 --> 58:33.920]  первому терминалу превращаться в пустое слово?
[58:33.920 --> 58:35.920]  Если кто-то понимает все,
[58:35.920 --> 58:37.920]  еф.
[58:41.920 --> 58:43.920]  Вот если у вас еф
[58:43.920 --> 58:45.920]  уровной, еф,
[58:45.920 --> 58:47.920]  а б, бета2в,
[58:47.920 --> 58:49.920]  это означает,
[58:49.920 --> 58:51.920]  что у вас здесь б, пустое слово не откроется.
[58:51.920 --> 58:53.920]  Это означает, что у вас здесь будет маленькая
[58:53.920 --> 58:55.920]  буква. Та самая буква,
[58:55.920 --> 58:57.920]  которая будет в слове, и вы ровно и нас таки положите.
[58:57.920 --> 58:59.920]  Поэтому
[58:59.920 --> 59:01.920]  вы когда пишете в теории, вы пишете, что
[59:01.920 --> 59:03.920]  это правило,
[59:03.920 --> 59:05.920]  только если у вас не ферст, а еф
[59:05.920 --> 59:07.920]  совпали, тогда это шифт.
[59:07.920 --> 59:09.920]  Если еф не совпал, то это
[59:09.920 --> 59:11.920]  правило ничего не дает.
[59:11.920 --> 59:13.920]  На практике что делать? На практике
[59:13.920 --> 59:15.920]  такого правила не рассматривайте вообще.
[59:15.920 --> 59:17.920]  Почему? Мы с вами поняли, что если у нас есть такое правило
[59:17.920 --> 59:19.920]  и все не терминалы у нас порождающие,
[59:19.920 --> 59:21.920]  это правило в стиле замыкания приведет вас
[59:21.920 --> 59:23.920]  к одному из двух случаев.
[59:23.920 --> 59:25.920]  Ну, собственно говоря,
[59:25.920 --> 59:27.920]  где оно было написано?
[59:27.920 --> 59:29.920]  Либо такому, либо такому.
[59:29.920 --> 59:31.920]  Поэтому когда вы пишете аллер, вы смотрите,
[59:31.920 --> 59:33.920]  вот это редюс, это шифт.
[59:33.920 --> 59:35.920]  А вот это
[59:35.920 --> 59:37.920]  выбрасывается.
[59:37.920 --> 59:39.920]  Увидели?
[59:39.920 --> 59:41.920]  Поэтому везде в теории у меня написан еф, а не ферст.
[59:43.920 --> 59:45.920]  Сейчас еще раз. На практике
[59:45.920 --> 59:47.920]  в этой ситуации
[59:47.920 --> 59:49.920]  сигнализируйте. Потому что
[59:49.920 --> 59:51.920]  если оно у вас есть,
[59:51.920 --> 59:53.920]  и все не терминалы у вас порождающие, то у вас
[59:53.920 --> 59:55.920]  нету бесценных символов в грамматике.
[59:55.920 --> 59:57.920]  Ну, если вы применяете
[59:57.920 --> 59:59.920]  грамматику для...
[59:59.920 --> 01:00:01.920]  Ну, я сейчас говорю, если вы применяете
[01:00:01.920 --> 01:00:03.920]  лр-грамматику с предыдущей силой, то вы странный,
[01:00:03.920 --> 01:00:05.920]  так не надо делать.
[01:00:05.920 --> 01:00:07.920]  Смотрите, значит,
[01:00:07.920 --> 01:00:09.920]  тогда я говорю, в теории
[01:00:09.920 --> 01:00:11.920]  эта ситуация голосует за шифт
[01:00:11.920 --> 01:00:13.920]  только в одном случае. А теперь давайте посмотрим,
[01:00:13.920 --> 01:00:15.920]  а почему у меня бывает такое,
[01:00:15.920 --> 01:00:17.920]  что если у меня редюс, то редюс
[01:00:17.920 --> 01:00:19.920]  по одному правилу, еще шифтов рядом нет.
[01:00:19.920 --> 01:00:21.920]  А если шифт, то никаких редюсов нет.
[01:00:21.920 --> 01:00:23.920]  Давайте подумаем, в каком случае
[01:00:23.920 --> 01:00:25.920]  будет шифт и редюс одновременно. Вот эти ситуации
[01:00:25.920 --> 01:00:27.920]  у вас конфликтовали. Это означает,
[01:00:27.920 --> 01:00:29.920]  что у вас для у верно, что у тут совпал,
[01:00:29.920 --> 01:00:31.920]  а еще уровень first
[01:00:31.920 --> 01:00:33.920]  от a,
[01:00:33.920 --> 01:00:35.920]  бета, 2, в.
[01:00:35.920 --> 01:00:37.920]  В таком случае
[01:00:37.920 --> 01:00:39.920]  для вот этого самого у будет конфликт.
[01:00:39.920 --> 01:00:41.920]  Вот это редюс, а это шифт.
[01:00:41.920 --> 01:00:43.920]  Или у вас будет а, стрелка,
[01:00:43.920 --> 01:00:45.920]  бета с точкой у, и там
[01:00:45.920 --> 01:00:47.920]  а1, бета, 1, у. То есть какие-то ситуации.
[01:00:47.920 --> 01:00:49.920]  Напишу, в каком случае.
[01:00:51.920 --> 01:00:53.920]  Кто конфликтует?
[01:00:53.920 --> 01:00:55.920]  Идем сюда.
[01:00:55.920 --> 01:00:57.920]  Я уже вижу себя в зале и понимаю,
[01:00:57.920 --> 01:00:59.920]  на что намек.
[01:00:59.920 --> 01:01:01.920]  А, стрелка,
[01:01:01.920 --> 01:01:03.920]  бета. Поскольку шифты не конфликтуют,
[01:01:03.920 --> 01:01:05.920]  а не как бы шифты, конфликтуют редюсы.
[01:01:05.920 --> 01:01:07.920]  Вот такая ситуация.
[01:01:07.920 --> 01:01:09.920]  И а, штрих,
[01:01:09.920 --> 01:01:11.920]  бета, 1,
[01:01:11.920 --> 01:01:13.920]  точка, бета, 2,
[01:01:13.920 --> 01:01:15.920]  в,
[01:01:15.920 --> 01:01:17.920]  уровно, е,
[01:01:17.920 --> 01:01:19.920]  от бета, 2, в.
[01:01:19.920 --> 01:01:21.920]  Ну, сейчас
[01:01:21.920 --> 01:01:23.920]  казалось, что теперь у меня каждая ситуация
[01:01:23.920 --> 01:01:25.920]  вместо что-то голосовать.
[01:01:25.920 --> 01:01:27.920]  Пусть так получилось, что вот это голосуют за редюс,
[01:01:27.920 --> 01:01:29.920]  а вот это голосуют за шифт.
[01:01:29.920 --> 01:01:31.920]  Либо за другой редюс.
[01:01:31.920 --> 01:01:33.920]  То есть вот это разные ситуации какие-то.
[01:01:33.920 --> 01:01:35.920]  И у совпало
[01:01:35.920 --> 01:01:37.920]  с е, в, бета, 2, в.
[01:01:37.920 --> 01:01:39.920]  Понятно, почему такие ситуации конфликтуют?
[01:01:39.920 --> 01:01:41.920]  Потому что вот эта ситуация,
[01:01:41.920 --> 01:01:43.920]  либо точка в конце, тогда это
[01:01:43.920 --> 01:01:45.920]  просто две разные ситуации.
[01:01:45.920 --> 01:01:47.920]  Либо точка перед маленькой буквой, тогда это шифт против редюса.
[01:01:47.920 --> 01:01:49.920]  Либо точка перед большой буквой,
[01:01:49.920 --> 01:01:51.920]  но поскольку у нас е, нормально устроено,
[01:01:51.920 --> 01:01:53.920]  вот этот у, они попали вместе,
[01:01:53.920 --> 01:01:55.920]  вот он, е от q, у.
[01:01:55.920 --> 01:01:57.920]  Вот этот вот у совпадет вот здесь,
[01:01:57.920 --> 01:01:59.920]  и это будет шифт.
[01:01:59.920 --> 01:02:01.920]  Вопрос-то, почему такие ситуации конфликтовать
[01:02:01.920 --> 01:02:03.920]  не буду? Есть какие-то идеи?
[01:02:05.920 --> 01:02:07.920]  Теперь 5, 9.
[01:02:09.920 --> 01:02:11.920]  То, что мы доказывали.
[01:02:11.920 --> 01:02:13.920]  Увидели?
[01:02:13.920 --> 01:02:15.920]  Ну, давайте так, сайте чек.
[01:02:15.920 --> 01:02:17.920]  Первый ряд вы увидели?
[01:02:19.920 --> 01:02:21.920]  Вы не увидели? Вы теперь 5, 9 не помните,
[01:02:21.920 --> 01:02:23.920]  или вы это не понимаете?
[01:02:25.920 --> 01:02:27.920]  Ну, саму телему еще вам вспомните.
[01:02:27.920 --> 01:02:29.920]  Так, второй ряд.
[01:02:29.920 --> 01:02:31.920]  Вы понимаете, что происходит?
[01:02:31.920 --> 01:02:33.920]  Да.
[01:02:33.920 --> 01:02:35.920]  5, 9 перечитайте потом,
[01:02:35.920 --> 01:02:37.920]  вы здесь что происходит, понимаете?
[01:02:37.920 --> 01:02:39.920]  Почему это две конфликтует?
[01:02:39.920 --> 01:02:41.920]  Ну, еще раз.
[01:02:41.920 --> 01:02:43.920]  Почему эти две конфликтует, понятно?
[01:02:43.920 --> 01:02:45.920]  Ну, потому что это reduce,
[01:02:45.920 --> 01:02:47.920]  это shift.
[01:02:47.920 --> 01:02:49.920]  Георгий, ты понял?
[01:02:49.920 --> 01:02:51.920]  Это что теперь?
[01:02:53.920 --> 01:02:55.920]  Теперь 5, 9 говорили, что
[01:02:55.920 --> 01:02:57.920]  есть такая ситуация, а такой ситуации не будет.
[01:02:57.920 --> 01:02:59.920]  Вот все, ровно она,
[01:02:59.920 --> 01:03:01.920]  ничего другого там не было.
[01:03:01.920 --> 01:03:03.920]  А почему
[01:03:03.920 --> 01:03:05.920]  9, 9 перечитают, вот тут объяснил,
[01:03:05.920 --> 01:03:07.920]  потому что вот эти ситуации конфликтует.
[01:03:07.920 --> 01:03:09.920]  Вот их тут написал в общем случае,
[01:03:09.920 --> 01:03:11.920]  и будет ровно информировка телепедия,
[01:03:11.920 --> 01:03:13.920]  магия.
[01:03:13.920 --> 01:03:15.920]  Так, теперь давайте побуду алгоритма.
[01:03:15.920 --> 01:03:17.920]  Ради чего вообще все это строилось?
[01:03:17.920 --> 01:03:19.920]  Мне сегодня сказали символисты,
[01:03:19.920 --> 01:03:21.920]  что жаловаться не могут алгоритм,
[01:03:21.920 --> 01:03:23.920]  потому что нет алгоритма.
[01:03:23.920 --> 01:03:25.920]  Вот сейчас появится алгоритм,
[01:03:25.920 --> 01:03:27.920]  а у него будет жаловаться.
[01:03:27.920 --> 01:03:29.920]  Так.
[01:03:29.920 --> 01:03:31.920]  Давайте посмотрим.
[01:03:31.920 --> 01:03:33.920]  Есть stack.
[01:03:33.920 --> 01:03:35.920]  Давайте
[01:03:35.920 --> 01:03:37.920]  говорим, что у нас состояние 0.
[01:03:37.920 --> 01:03:39.920]  Это
[01:03:39.920 --> 01:03:41.920]  v, k, j от эпсилон.
[01:03:41.920 --> 01:03:43.920]  Что будем делать?
[01:03:43.920 --> 01:03:45.920]  Вот наше слово.
[01:03:45.920 --> 01:03:47.920]  Корректно находится вот тут.
[01:03:47.920 --> 01:03:49.920]  Шаг номер 1.
[01:03:49.920 --> 01:03:51.920]  Смотрим k букв, либо меньше букв,
[01:03:51.920 --> 01:03:53.920]  если в конце слова.
[01:03:53.920 --> 01:03:55.920]  Сейчас учтите, что у вас доллары в конце всегда есть,
[01:03:55.920 --> 01:03:57.920]  нельзя сказать меньше букв.
[01:03:57.920 --> 01:03:59.920]  Говорим, состояние 0,
[01:03:59.920 --> 01:04:01.920]  k таких букв, идем в функцию f.
[01:04:01.920 --> 01:04:03.920]  Пришли в функцию f,
[01:04:03.920 --> 01:04:05.920]  смотрим f от q, u.
[01:04:05.920 --> 01:04:07.920]  Это что?
[01:04:07.920 --> 01:04:09.920]  Здесь не смотрим на ситуации.
[01:04:09.920 --> 01:04:11.920]  Мы заранее в предпочтении уже написали,
[01:04:11.920 --> 01:04:13.920]  что f от q, u это либо ruse, либо shift.
[01:04:13.920 --> 01:04:15.920]  Теперь запомните один факт.
[01:04:15.920 --> 01:04:17.920]  О природе ситуации можно забыть.
[01:04:17.920 --> 01:04:19.920]  У вас lr разбор.
[01:04:19.920 --> 01:04:21.920]  Это q как некоторое множество,
[01:04:21.920 --> 01:04:23.920]  и u как слово.
[01:04:23.920 --> 01:04:25.920]  Потому что lr
[01:04:25.920 --> 01:04:27.920]  это lr на стероидах.
[01:04:27.920 --> 01:04:29.920]  Устроен так, что он забудет про то,
[01:04:29.920 --> 01:04:31.920]  что тут ситуации.
[01:04:31.920 --> 01:04:33.920]  Он перестанет как-то по-хитрому
[01:04:33.920 --> 01:04:35.920]  и получит снова q и u.
[01:04:35.920 --> 01:04:37.920]  И никаких ситуаций тут не будет.
[01:04:37.920 --> 01:04:39.920]  Поэтому запомним, что на это предпочту это.
[01:04:39.920 --> 01:04:41.920]  Мы в этой функции явно написали,
[01:04:41.920 --> 01:04:43.920]  что f от q, u, 1, u, 1 это shift.
[01:04:43.920 --> 01:04:45.920]  f от q, 2, u, 2 это ruse.
[01:04:45.920 --> 01:04:47.920]  И забыли про то, как устроены q.
[01:04:47.920 --> 01:04:49.920]  Это уже не ситуация, просто числа.
[01:04:49.920 --> 01:04:51.920]  Смотрим сюда.
[01:04:51.920 --> 01:04:53.920]  f от q это что?
[01:04:53.920 --> 01:04:55.920]  Если это shift,
[01:04:55.920 --> 01:04:57.920]  берем эту букву.
[01:04:57.920 --> 01:04:59.920]  Нужно прийти не только, чтобы одна буква совпала,
[01:04:59.920 --> 01:05:01.920]  а все буквы совпали.
[01:05:01.920 --> 01:05:03.920]  k-буква совпала, делаем shift.
[01:05:03.920 --> 01:05:05.920]  Пишу a.
[01:05:05.920 --> 01:05:07.920]  На стеке появилась маленькая буква.
[01:05:07.920 --> 01:05:09.920]  Иду в функцию g.
[01:05:09.920 --> 01:05:11.920]  Где он тут написан?
[01:05:11.920 --> 01:05:13.920]  Не написан.
[01:05:13.920 --> 01:05:15.920]  Вот написан.
[01:05:15.920 --> 01:05:17.920]  Из 0 по a иди в 1.
[01:05:17.920 --> 01:05:19.920]  Иду в 1.
[01:05:19.920 --> 01:05:21.920]  Что ты там сделал?
[01:05:21.920 --> 01:05:23.920]  f shift это буква на стеке.
[01:05:23.920 --> 01:05:25.920]  По буквам можно перейти.
[01:05:25.920 --> 01:05:27.920]  Пишем reduce.
[01:05:27.920 --> 01:05:29.920]  b2, c3.
[01:05:31.920 --> 01:05:33.920]  Пусть мне говорят взять reduce
[01:05:33.920 --> 01:05:35.920]  по вот такому правилу.
[01:05:35.920 --> 01:05:37.920]  Я стираю все буквы, еще и всю историю.
[01:05:37.920 --> 01:05:39.920]  Вот оно.
[01:05:39.920 --> 01:05:41.920]  Увидели?
[01:05:41.920 --> 01:05:43.920]  И говорю.
[01:05:43.920 --> 01:05:45.920]  Резавтра вот reduce это вот эта буква.
[01:05:45.920 --> 01:05:47.920]  Она поется на стеке.
[01:05:47.920 --> 01:05:49.920]  И состояние 0
[01:05:49.920 --> 01:05:51.920]  по букве a.
[01:05:51.920 --> 01:05:53.920]  Я пойду в состояние
[01:05:53.920 --> 01:05:55.920]  4.
[01:05:55.920 --> 01:05:57.920]  Резавтра работает shift.
[01:05:57.920 --> 01:05:59.920]  Это появление на стеке маленькой буквы.
[01:05:59.920 --> 01:06:01.920]  Я пойду взять переход.
[01:06:01.920 --> 01:06:03.920]  Резавтра работает reduce, это переход по большой буквы.
[01:06:03.920 --> 01:06:05.920]  Я пойду взять переход.
[01:06:05.920 --> 01:06:07.920]  И так вот действует.
[01:06:07.920 --> 01:06:09.920]  Смотрите.
[01:06:09.920 --> 01:06:11.920]  Что это автомат переноса свертка?
[01:06:11.920 --> 01:06:13.920]  Берет правую часть, пишет левую часть.
[01:06:13.920 --> 01:06:15.920]  Смотрим сюда.
[01:06:15.920 --> 01:06:17.920]  У нас в правой части между ними еще числа находятся.
[01:06:17.920 --> 01:06:19.920]  Мы храним на стеке еще и состояние.
[01:06:19.920 --> 01:06:21.920]  Кто будет это писать?
[01:06:21.920 --> 01:06:23.920]  Смотрите тут.
[01:06:23.920 --> 01:06:25.920]  Это пары.
[01:06:25.920 --> 01:06:27.920]  Это написали, что это стек из 0a1b.
[01:06:27.920 --> 01:06:29.920]  Вот так не надо делать.
[01:06:31.920 --> 01:06:33.920]  Это стек пар.
[01:06:33.920 --> 01:06:35.920]  Сняли 6 символов.
[01:06:35.920 --> 01:06:37.920]  Что?
[01:06:37.920 --> 01:06:39.920]  Ну тут разбивается.
[01:06:39.920 --> 01:06:41.920]  Так.
[01:06:41.920 --> 01:06:43.920]  Ну еще раз.
[01:06:43.920 --> 01:06:45.920]  Вам просто нужно хранить вот эти вот пары.
[01:06:45.920 --> 01:06:47.920]  С3, b2, a1.
[01:06:47.920 --> 01:06:49.920]  Вы строите всю историю.
[01:06:49.920 --> 01:06:51.920]  Смотрите правую часть правила.
[01:06:51.920 --> 01:06:53.920]  Поскольку это reduce и все согласовано,
[01:06:53.920 --> 01:06:55.920]  она будет на стеке находиться.
[01:06:55.920 --> 01:06:57.920]  Что?
[01:06:57.920 --> 01:06:59.920]  Еще раз.
[01:06:59.920 --> 01:07:01.920]  Смотрите.
[01:07:01.920 --> 01:07:03.920]  Я говорю, что я сделал shift.
[01:07:03.920 --> 01:07:05.920]  Поставил букву.
[01:07:05.920 --> 01:07:07.920]  Появление буквы на стеке,
[01:07:07.920 --> 01:07:09.920]  это повод взять переход.
[01:07:09.920 --> 01:07:11.920]  Я говорю, вот был в 0.
[01:07:11.920 --> 01:07:13.920]  По букве a перешел в 1.
[01:07:13.920 --> 01:07:15.920]  Увидели?
[01:07:15.920 --> 01:07:17.920]  Да.
[01:07:17.920 --> 01:07:19.920]  Вот эту букву, которую я получил,
[01:07:19.920 --> 01:07:21.920]  пишу на состоянии.
[01:07:21.920 --> 01:07:23.920]  Когда делаю reduce, я стираю всю историю.
[01:07:23.920 --> 01:07:25.920]  Пишу результат reduce.
[01:07:25.920 --> 01:07:27.920]  То есть большую букву у нас.
[01:07:29.920 --> 01:07:31.920]  Вы не видите abc.
[01:07:31.920 --> 01:07:33.920]  Вы видите, что надо делать reduce по этому правилу.
[01:07:33.920 --> 01:07:35.920]  А алгоритм гарантирует, что на стеке будет abc.
[01:07:41.920 --> 01:07:43.920]  Два n букв.
[01:07:43.920 --> 01:07:45.920]  Да, да, да.
[01:07:45.920 --> 01:07:47.920]  Но по этой стеке буква a.
[01:07:47.920 --> 01:07:49.920]  Буква a по линии на стеке, это по взять переход.
[01:07:49.920 --> 01:07:51.920]  Делаем переход из 0 в акт по 4.
[01:07:51.920 --> 01:07:53.920]  Когда мы видим
[01:07:53.920 --> 01:07:55.920]  reduce по правилу
[01:07:55.920 --> 01:07:57.920]  s-s.$,
[01:07:57.920 --> 01:07:59.920]  если мы его свернем,
[01:07:59.920 --> 01:08:01.920]  вывод окончен.
[01:08:01.920 --> 01:08:03.920]  А теперь давайте сейчас вот две строки.
[01:08:03.920 --> 01:08:05.920]  В одну строку крест, в другую строку полнота.
[01:08:05.920 --> 01:08:07.920]  Так, понимаете, как это работает?
[01:08:11.920 --> 01:08:13.920]  Смотрите.
[01:08:13.920 --> 01:08:15.920]  Если вы стерли учетное число символов,
[01:08:15.920 --> 01:08:17.920]  число торчит на стеке.
[01:08:17.920 --> 01:08:19.920]  Поставили большую букву.
[01:08:19.920 --> 01:08:21.920]  Из этого числа по двух взяли переход.
[01:08:21.920 --> 01:08:23.920]  Не из этого числа.
[01:08:23.920 --> 01:08:25.920]  Из вот этого числа.
[01:08:25.920 --> 01:08:27.920]  Сейчас покажу почему.
[01:08:31.920 --> 01:08:33.920]  Такая вот мини-лемма.
[01:08:33.920 --> 01:08:35.920]  Да.
[01:08:35.920 --> 01:08:37.920]  Как у нас вообще работает?
[01:08:41.920 --> 01:08:43.920]  Смотрите, вы смотрите на зерещи.
[01:08:43.920 --> 01:08:45.920]  Первое. Вот.
[01:08:45.920 --> 01:08:47.920]  Харедка находится вот тут.
[01:08:47.920 --> 01:08:49.920]  Что видно в слове? Вот это видно.
[01:08:49.920 --> 01:08:51.920]  В каком стадии мы находимся?
[01:08:51.920 --> 01:08:53.920]  Вот в этом находимся.
[01:08:53.920 --> 01:08:55.920]  В 3,
[01:08:55.920 --> 01:08:57.920]  под такой строке,
[01:08:57.920 --> 01:08:59.920]  найдет reduce.
[01:08:59.920 --> 01:09:01.920]  Мы заранее, вот здесь,
[01:09:01.920 --> 01:09:03.920]  на этапе предподсчета,
[01:09:03.920 --> 01:09:05.920]  написали, что из состояния 3
[01:09:05.920 --> 01:09:07.920]  по строке u
[01:09:07.920 --> 01:09:09.920]  делаем reduce по правилу i.
[01:09:09.920 --> 01:09:11.920]  Ну вот я этот reduce и делаю.
[01:09:11.920 --> 01:09:13.920]  Я не проверяю,
[01:09:13.920 --> 01:09:15.920]  чтобы на стеке находиться то, что нужно,
[01:09:15.920 --> 01:09:17.920]  потому что теория это гарантирует. Вопрос.
[01:09:17.920 --> 01:09:19.920]  А если у вас
[01:09:19.920 --> 01:09:21.920]  ничего не сделать?
[01:09:21.920 --> 01:09:23.920]  Не shift, не reduce?
[01:09:23.920 --> 01:09:25.920]  У вас в каждой ячейке
[01:09:25.920 --> 01:09:27.920]  есть одно из четырех значений.
[01:09:27.920 --> 01:09:29.920]  Shift, если shift, reduce, reduce.
[01:09:29.920 --> 01:09:31.920]  Приняйте, если это свертка по правилу
[01:09:31.920 --> 01:09:33.920]  3 с точку,
[01:09:33.920 --> 01:09:35.920]  если вы свернули сюда, вот кончился.
[01:09:35.920 --> 01:09:37.920]  Это приняйте. Вы не делаете все до конца.
[01:09:37.920 --> 01:09:39.920]  Если ничего из этих трех, то отказ.
[01:09:39.920 --> 01:09:41.920]  Вы говорите, что это невозможно.
[01:09:41.920 --> 01:09:43.920]  А зачем нам вообще
[01:09:43.920 --> 01:09:45.920]  что-то кроме цикров
[01:09:45.920 --> 01:09:47.920]  состояния на стеке?
[01:09:47.920 --> 01:09:49.920]  Мы же его не используем. Мы же его кушаем, а потом отбрасываем.
[01:09:51.920 --> 01:09:53.920]  Хорошее наблюдение.
[01:09:53.920 --> 01:09:55.920]  Кажется, что он не нужен, да.
[01:09:55.920 --> 01:09:57.920]  А, ну, на самом деле он нужен в теории,
[01:09:57.920 --> 01:09:59.920]  потому что поставили сюда что-то, а потом
[01:09:59.920 --> 01:10:01.920]  что-то перешли.
[01:10:01.920 --> 01:10:03.920]  Но да, можно не хранить.
[01:10:03.920 --> 01:10:05.920]  Называется stack состоянии.
[01:10:05.920 --> 01:10:07.920]  Но это, понимаете, для реализации. Я рассказываю теорию,
[01:10:07.920 --> 01:10:09.920]  как ее кнут написал, так и рассказываю.
[01:10:09.920 --> 01:10:11.920]  Но блин, очень классно.
[01:10:11.920 --> 01:10:13.920]  Так, члемма.
[01:10:13.920 --> 01:10:15.920]  По ходу работал гритм,
[01:10:15.920 --> 01:10:17.920]  но вот он собирает выводы.
[01:10:17.920 --> 01:10:19.920]  Если мы их будем собирать, давайте скажем, что вот x.
[01:10:19.920 --> 01:10:21.920]  Альфа
[01:10:21.920 --> 01:10:23.920]  это наш stack.
[01:10:23.920 --> 01:10:25.920]  Вот это stack.
[01:10:25.920 --> 01:10:27.920]  X это то, что нам осталось прочитать.
[01:10:27.920 --> 01:10:29.920]  И п выводит w на каждом шаге.
[01:10:35.920 --> 01:10:37.920]  Ну, члемма.
[01:10:37.920 --> 01:10:39.920]  Если мы набрали какой-то вывод p при помощи действия алгоритма,
[01:10:39.920 --> 01:10:41.920]  то можем этот вывод использовать,
[01:10:41.920 --> 01:10:43.920]  чтобы вывести из stack
[01:10:45.920 --> 01:10:47.920]  остатка
[01:10:49.920 --> 01:10:51.920]  все слово.
[01:10:51.920 --> 01:10:53.920]  Понятно, что написано.
[01:10:53.920 --> 01:10:55.920]  Берем stack, приклеиваем к нему то, что мы не прочитали,
[01:10:55.920 --> 01:10:57.920]  и при помощи именно этого вывода
[01:10:57.920 --> 01:10:59.920]  можно вывести w.
[01:10:59.920 --> 01:11:01.920]  Это будет совсем тривиальный факт.
[01:11:01.920 --> 01:11:03.920]  Давайте посмотрим. Это верно на любом шаге индукции.
[01:11:03.920 --> 01:11:05.920]  У нас p пустой,
[01:11:05.920 --> 01:11:07.920]  альфа пустой,
[01:11:07.920 --> 01:11:09.920]  x и w равны.
[01:11:09.920 --> 01:11:11.920]  Верно.
[01:11:11.920 --> 01:11:13.920]  Если мы взяли shift,
[01:11:13.920 --> 01:11:15.920]  то мы взяли букву отсюда,
[01:11:15.920 --> 01:11:17.920]  принесли ее на stack.
[01:11:17.920 --> 01:11:19.920]  При приклеивании все равно будет альфа и х,
[01:11:19.920 --> 01:11:21.920]  оно не поменялось.
[01:11:21.920 --> 01:11:23.920]  Тоже верно.
[01:11:23.920 --> 01:11:25.920]  Следующий факт.
[01:11:25.920 --> 01:11:27.920]  Если был reduce,
[01:11:27.920 --> 01:11:29.920]  вот был альфа и х.
[01:11:29.920 --> 01:11:31.920]  Что сделал reduce?
[01:11:31.920 --> 01:11:33.920]  Ну, это так вот.
[01:11:33.920 --> 01:11:35.920]  Альфа штрих бета и х.
[01:11:35.920 --> 01:11:37.920]  Он взял бета, поменял его на а.
[01:11:37.920 --> 01:11:39.920]  Stack стал альфа штрих а х.
[01:11:39.920 --> 01:11:41.920]  Так?
[01:11:41.920 --> 01:11:43.920]  Что? Смотрите, я сказал,
[01:11:43.920 --> 01:11:45.920]  что мы здесь собираем вывод по номерам.
[01:11:45.920 --> 01:11:47.920]  Вот пока работает алгоритм, мы этот вывод набираем.
[01:11:47.920 --> 01:11:49.920]  Вот этот вывод хотим применить.
[01:11:53.920 --> 01:11:55.920]  При помощи этого вывода,
[01:11:55.920 --> 01:11:57.920]  именно этого, не какого-то другого,
[01:11:57.920 --> 01:11:59.920]  а именно этого вывода.
[01:11:59.920 --> 01:12:01.920]  Еще раз.
[01:12:01.920 --> 01:12:03.920]  Был альфа штрих бета,
[01:12:03.920 --> 01:12:05.920]  стал альфа штрих а.
[01:12:05.920 --> 01:12:07.920]  Очевидно, что за один шаг
[01:12:07.920 --> 01:12:09.920]  получаю из а бета.
[01:12:09.920 --> 01:12:11.920]  Почему получаю?
[01:12:11.920 --> 01:12:13.920]  Потому что у меня reduce был ровно по этому правилу.
[01:12:13.920 --> 01:12:15.920]  Вот он здесь и написан.
[01:12:15.920 --> 01:12:17.920]  При добавлении того шага вывода
[01:12:17.920 --> 01:12:19.920]  из этой строки выводится w.
[01:12:19.920 --> 01:12:21.920]  Понятно?
[01:12:21.920 --> 01:12:23.920]  Илья?
[01:12:23.920 --> 01:12:25.920]  Еще раз.
[01:12:25.920 --> 01:12:27.920]  На нулевом шаге все верно.
[01:12:27.920 --> 01:12:29.920]  Что?
[01:12:29.920 --> 01:12:31.920]  На нулевом шаге все верно.
[01:12:31.920 --> 01:12:33.920]  Stack пустой, слово полное.
[01:12:33.920 --> 01:12:35.920]  Ничего не происходило.
[01:12:35.920 --> 01:12:37.920]  Можно просто?
[01:12:37.920 --> 01:12:39.920]  На каждом шаге алгоритма.
[01:12:39.920 --> 01:12:41.920]  Если взять текущий stack,
[01:12:41.920 --> 01:12:43.920]  вот этот stack,
[01:12:43.920 --> 01:12:45.920]  клей к нему остаток слова.
[01:12:45.920 --> 01:12:47.920]  То есть у нас каретка тут находится.
[01:12:47.920 --> 01:12:49.920]  То, что мы еще не шифтили, склеили.
[01:12:49.920 --> 01:12:51.920]  Возьмем вывод, который мы построили до этого шага.
[01:12:51.920 --> 01:12:53.920]  Вот мы делали что-то в алгоритме.
[01:12:53.920 --> 01:12:55.920]  Каждый reduce добавляет в вывод новое правило.
[01:12:55.920 --> 01:12:57.920]  Берем этот вывод.
[01:12:57.920 --> 01:12:59.920]  Применяем этот вывод.
[01:12:59.920 --> 01:13:01.920]  Можно вывести w. W это исходное слово.
[01:13:01.920 --> 01:13:03.920]  Поняли? Прекрасно.
[01:13:03.920 --> 01:13:05.920]  На нулевом шаге это верно?
[01:13:05.920 --> 01:13:07.920]  Да. Если мы делали shift, это верно?
[01:13:07.920 --> 01:13:09.920]  Буква отсюда-сюда прискочила.
[01:13:09.920 --> 01:13:11.920]  Ничего не поменялось.
[01:13:11.920 --> 01:13:13.920]  Вывод не поменялся. Просто буква была тут, стала тут.
[01:13:13.920 --> 01:13:15.920]  Но они же склеены все равно.
[01:13:15.920 --> 01:13:17.920]  А на reduce вот оно, что происходит.
[01:13:17.920 --> 01:13:19.920]  Был beta, стал a.
[01:13:19.920 --> 01:13:21.920]  В обратную сторону был a, стал beta.
[01:13:21.920 --> 01:13:23.920]  Вот он вывод.
[01:13:23.920 --> 01:13:25.920]  Я отсюда пришел сюда, а здесь по индукции дальше довел.
[01:13:25.920 --> 01:13:27.920]  Увидели?
[01:13:27.920 --> 01:13:29.920]  Увидели?
[01:13:29.920 --> 01:13:31.920]  Прекрасно.
[01:13:31.920 --> 01:13:33.920]  Отсюда следует, что если у нас алгоритм взял принятие,
[01:13:33.920 --> 01:13:35.920]  то у него последний шаг вывода был s' vs.
[01:13:37.920 --> 01:13:39.920]  Что у нас происходит в конце?
[01:13:39.920 --> 01:13:41.920]  Стэк у нас просто s.
[01:13:41.920 --> 01:13:43.920]  Слово у нас значительно до конца.
[01:13:43.920 --> 01:13:45.920]  При помощи wdp вводится дубль o.
[01:13:45.920 --> 01:13:47.920]  А алгоритм корректен.
[01:13:47.920 --> 01:13:49.920]  А алгоритм сказал, что есть вывод, то есть вывод реально есть.
[01:13:49.920 --> 01:13:51.920]  В обратную сторону.
[01:13:51.920 --> 01:13:53.920]  Пустил, алгоритм дал отказ.
[01:13:59.920 --> 01:14:01.920]  То есть вот у меня был какой-то стэк.
[01:14:05.920 --> 01:14:07.920]  Была какая-то цепочка.
[01:14:07.920 --> 01:14:09.920]  Давайте так. Вот слово.
[01:14:09.920 --> 01:14:11.920]  Это мы прочитали, это мы подледели.
[01:14:11.920 --> 01:14:13.920]  Так получилось, что алгоритм говорит,
[01:14:13.920 --> 01:14:15.920]  отказ, ничего не хочу делать.
[01:14:15.920 --> 01:14:17.920]  Что это означает?
[01:14:17.920 --> 01:14:19.920]  Что в этой ситуации нельзя делать ни шит, ни редьюз.
[01:14:19.920 --> 01:14:21.920]  Давайте подумаем,
[01:14:21.920 --> 01:14:23.920]  что это может означать.
[01:14:23.920 --> 01:14:25.920]  Ага.
[01:14:25.920 --> 01:14:27.920]  Если бы что-то можно было сделать,
[01:14:27.920 --> 01:14:29.920]  была бы допустима такая ситуация.
[01:14:29.920 --> 01:14:31.920]  Мне нужно минуту записать все правильные, гениальные мысли.
[01:14:43.920 --> 01:14:45.920]  Давайте посмотрим.
[01:14:47.920 --> 01:14:49.920]  Поскольку у тебя ничего сделать,
[01:14:49.920 --> 01:14:51.920]  у нас нет допустимых ситуаций.
[01:14:51.920 --> 01:14:53.920]  У нас нет такой ситуации.
[01:14:53.920 --> 01:14:55.920]  А, стрелка.
[01:14:55.920 --> 01:14:57.920]  Либо бета с точкой у.
[01:14:57.920 --> 01:14:59.920]  Либо а, стрелка.
[01:14:59.920 --> 01:15:01.920]  Я буду пользоваться аннотацией, которая через е,
[01:15:01.920 --> 01:15:03.920]  она мне удобнее сейчас будет.
[01:15:03.920 --> 01:15:05.920]  Бета 1, точка бета 2.
[01:15:05.920 --> 01:15:07.920]  Запятая в.
[01:15:07.920 --> 01:15:09.920]  Так что вот эти к букв
[01:15:09.920 --> 01:15:11.920]  согласованы либо с у, либо с бета 2 в.
[01:15:11.920 --> 01:15:13.920]  Вот нет такого.
[01:15:13.920 --> 01:15:15.920]  Что это означает?
[01:15:15.920 --> 01:15:17.920]  Это означает, что я не могу вывести никакое слово,
[01:15:17.920 --> 01:15:19.920]  у которого есть к букв таких,
[01:15:19.920 --> 01:15:21.920]  и не важно, что находится после.
[01:15:21.920 --> 01:15:23.920]  То есть, если я беру слово,
[01:15:23.920 --> 01:15:25.920]  которое я прочитал
[01:15:25.920 --> 01:15:27.920]  и которое я подсмотрел вместе, суммарно,
[01:15:27.920 --> 01:15:29.920]  то не существует такого никакого суффикса,
[01:15:29.920 --> 01:15:31.920]  который можно было доклеить сюда, чтобы оно вывелось.
[01:15:31.920 --> 01:15:33.920]  Почему?
[01:15:33.920 --> 01:15:35.920]  Если бы существовало,
[01:15:35.920 --> 01:15:37.920]  то есть, если бы было...
[01:15:37.920 --> 01:15:39.920]  Давайте тут обозначим.
[01:15:39.920 --> 01:15:41.920]  Тут у.
[01:15:41.920 --> 01:15:43.920]  Если существует такое слово,
[01:15:43.920 --> 01:15:45.920]  w' us,
[01:15:45.920 --> 01:15:47.920]  которое можно вывести,
[01:15:47.920 --> 01:15:49.920]  то оно означает, что либо вот это и так,
[01:15:49.920 --> 01:15:51.920]  либо это будет допустимо. По определению,
[01:15:51.920 --> 01:15:53.920]  вы вот есть, ситуация допустима.
[01:15:53.920 --> 01:15:55.920]  Я сейчас позволю себе не писать вот это все
[01:15:55.920 --> 01:15:57.920]  через согласование слов.
[01:15:57.920 --> 01:15:59.920]  Понимаете, почему ситуация будет допустима? Да, нет?
[01:15:59.920 --> 01:16:01.920]  Вы, да, вы, да, вы?
[01:16:03.920 --> 01:16:05.920]  Вы?
[01:16:05.920 --> 01:16:07.920]  Нет, еще раз.
[01:16:07.920 --> 01:16:09.920]  Такое суффикс, это слово Вадима.
[01:16:11.920 --> 01:16:13.920]  Пишем вот это слово.
[01:16:13.920 --> 01:16:15.920]  s'
[01:16:15.920 --> 01:16:17.920]  w' us.
[01:16:17.920 --> 01:16:19.920]  Так?
[01:16:19.920 --> 01:16:21.920]  Ну, мы знаем, что на шаге назад
[01:16:21.920 --> 01:16:23.920]  это все было верно.
[01:16:23.920 --> 01:16:25.920]  Ну, что там получается?
[01:16:25.920 --> 01:16:27.920]  Из s' выводится...
[01:16:29.920 --> 01:16:31.920]  Так.
[01:16:31.920 --> 01:16:33.920]  В прошлой слаге отказа им какой-то
[01:16:33.920 --> 01:16:35.920]  вывод существовал.
[01:16:35.920 --> 01:16:37.920]  Затом alpha a w,
[01:16:37.920 --> 01:16:39.920]  alpha beta 1,
[01:16:39.920 --> 01:16:41.920]  beta 2 w.
[01:16:43.920 --> 01:16:45.920]  Значит, по соку...
[01:16:47.920 --> 01:16:49.920]  Так, мы это посворачивали.
[01:16:49.920 --> 01:16:51.920]  Так, давайте посмотрю.
[01:16:59.920 --> 01:17:01.920]  Вывод этого слова.
[01:17:01.920 --> 01:17:03.920]  Да.
[01:17:05.920 --> 01:17:07.920]  Это мы вот рассмотрели.
[01:17:07.920 --> 01:17:09.920]  Тогда мы говорим, что для стека
[01:17:09.920 --> 01:17:11.920]  alpha, beta 1, beta 2
[01:17:11.920 --> 01:17:13.920]  допустима хотя бы одна из таких двух ситуаций.
[01:17:13.920 --> 01:17:15.920]  Там либо точка к цели, либо точка не в конце.
[01:17:17.920 --> 01:17:19.920]  Но может быть, допустима еще ситуация,
[01:17:19.920 --> 01:17:21.920]  когда здесь нету ефа.
[01:17:21.920 --> 01:17:23.920]  Вот.
[01:17:23.920 --> 01:17:25.920]  А тебе даже
[01:17:25.920 --> 01:17:27.920]  этого даже сейчас не нужно.
[01:17:27.920 --> 01:17:29.920]  Допустима либо это, либо это.
[01:17:29.920 --> 01:17:31.920]  Ну, вот вывод слова.
[01:17:31.920 --> 01:17:33.920]  Возьмем это слово в последнюю встречу этой ситуации.
[01:17:33.920 --> 01:17:35.920]  Допустим. Всего принятия LRK
[01:17:35.920 --> 01:17:37.920]  я буду откатываться в этом выводе
[01:17:37.920 --> 01:17:39.920]  до момента...
[01:17:39.920 --> 01:17:41.920]  Слово начало разбираться.
[01:17:41.920 --> 01:17:43.920]  Значит, тут вывод происходил. Мы смотрим вывод, который
[01:17:43.920 --> 01:17:45.920]  сгнился на шаге, до которого мы взяли отказ.
[01:17:45.920 --> 01:17:47.920]  Ну, вот он тут.
[01:17:47.920 --> 01:17:49.920]  alpha a w, alpha beta 2 w.
[01:17:49.920 --> 01:17:51.920]  Вот оно все работал.
[01:17:51.920 --> 01:17:53.920]  Я утверждаю, что если бы был вывод,
[01:17:53.920 --> 01:17:55.920]  он бы был именно такой.
[01:17:55.920 --> 01:17:57.920]  Сейчас давайте это по-нормальнее скажу.
[01:17:57.920 --> 01:17:59.920]  Если тут какой-то другой вывод,
[01:17:59.920 --> 01:18:01.920]  который получает такой же стэк,
[01:18:01.920 --> 01:18:03.920]  то это нарушение LRK определения.
[01:18:03.920 --> 01:18:05.920]  Вот.
[01:18:09.920 --> 01:18:11.920]  Да, то есть у нас
[01:18:11.920 --> 01:18:13.920]  полноточие тоже подзаклинило.
[01:18:13.920 --> 01:18:15.920]  Вообще факт, который здесь
[01:18:15.920 --> 01:18:17.920]  я либо сейчас, либо потом
[01:18:17.920 --> 01:18:19.920]  еще что-то сделаю,
[01:18:19.920 --> 01:18:21.920]  звучит так.
[01:18:21.920 --> 01:18:23.920]  Что если у меня алгоритм дал отказ,
[01:18:23.920 --> 01:18:25.920]  это означает, что не существует такого суффикса,
[01:18:25.920 --> 01:18:27.920]  что w штрих, который мы уже прочитали
[01:18:27.920 --> 01:18:29.920]  вкупе с k буквами,
[01:18:29.920 --> 01:18:31.920]  которые мы добавили,
[01:18:31.920 --> 01:18:33.920]  еще вообще, не важно что,
[01:18:33.920 --> 01:18:35.920]  оно вообще выводимо.
[01:18:35.920 --> 01:18:37.920]  Как это надо доказывать?
[01:18:37.920 --> 01:18:39.920]  Это надо доказывать тем,
[01:18:39.920 --> 01:18:41.920]  что если бы был вывод, мы бы его записали,
[01:18:41.920 --> 01:18:43.920]  он бы уйден на какую-то допустимую ситуацию.
[01:18:43.920 --> 01:18:45.920]  Допустимая ситуация была бы здесь
[01:18:45.920 --> 01:18:47.920]  и бы уйден на какое-то действие.
[01:18:47.920 --> 01:18:49.920]  Если сейчас я с этим не разберусь,
[01:18:49.920 --> 01:18:51.920]  то я это потом оформлю,
[01:18:51.920 --> 01:18:53.920]  возможно добавлю в конспект, но в конспекте кажется это было.
[01:18:53.920 --> 01:18:57.920]  Вон, это остается один момент.
[01:18:57.920 --> 01:18:59.920]  Момент остается в том,
[01:18:59.920 --> 01:19:02.020]  почему алгоритм вообще работает.
[01:19:02.020 --> 01:19:04.020]  Мы доказали две вещи, первое,
[01:19:04.020 --> 01:19:06.020]  если алгоритм доработал до конца вывод-квампасарbecause он правильный,
[01:19:06.020 --> 01:19:08.020]  это да.
[01:19:08.020 --> 01:19:10.020]  То, что сейчас пытался доказать,
[01:19:10.020 --> 01:19:11.920]  я сейчас попробую с Вами разобраться.
[01:19:11.920 --> 01:19:13.920]  Если он доработал до конца и дал отказ,
[01:19:13.920 --> 01:19:15.920]  это правдая отка, действительно отказ.
[01:19:15.920 --> 01:19:18.320]  Остался один случай.
[01:19:18.320 --> 01:19:20.320]  Что если алгоритм не работает до конца?
[01:19:20.320 --> 01:19:22.320]  То есть он бесконечно долго крутится,
[01:19:22.320 --> 01:19:24.920]  крутится, не читая слова. Но мы это делаем, что от
[01:19:24.920 --> 01:19:28.620]  чтений шифтов линейное количество. Стало быть,
[01:19:28.620 --> 01:19:32.520]  у него очень много редьюсов. Так, значит, здесь нужна
[01:19:32.520 --> 01:19:37.320]  теория. Сколько до конца лекции остается? Пять минут.
[01:19:37.320 --> 01:19:42.320]  Значит, здесь нужна теория, которая гласит, что mp-автомат,
[01:19:42.320 --> 01:19:46.320]  который детерминирован, что означает? Что у него
[01:19:46.320 --> 01:19:48.420]  из двух любых ребер всегда может быть одно. Смотрите
[01:19:48.420 --> 01:19:51.720]  определение у меня в конспекте, я это там дописал. Детерминированный
[01:19:51.720 --> 01:19:55.720]  mp-автомат может конечность много раз. То есть мы имеем
[01:19:55.720 --> 01:19:59.720]  какое-то число для автомата, число c. Так, что если автомат
[01:19:59.720 --> 01:20:04.720]  двигается больше, чем c раз, не меняя своего стека,
[01:20:04.720 --> 01:20:08.720]  то есть вот мы дали отсечку. Если автомат c раз прошел
[01:20:08.720 --> 01:20:12.720]  так, что стек не ушел меньше, чем c, то может быть бесчечно
[01:20:12.720 --> 01:20:16.720]  долго. А дальше следите, это сейчас подсказка доказательности
[01:20:16.720 --> 01:20:18.720]  линейного слр на экзамене, если оно у вас попадется.
[01:20:18.720 --> 01:20:20.720]  На курсах его конечность не доказывает, потому что
[01:20:20.720 --> 01:20:22.720]  это сложный факт. Но вы говорите, что у вас бывают
[01:20:22.720 --> 01:20:27.720]  три типа шагов. Первый, это шифты, их линейно. Второе,
[01:20:27.720 --> 01:20:30.720]  отследим редюсы, которые укорачивают стек в последний раз.
[01:20:30.720 --> 01:20:33.720]  То есть мы смотрим, когда редюс в последний раз стал
[01:20:33.720 --> 01:20:38.720]  стек длины 5, потом длины 4, длины 3, длины 2. Их тоже
[01:20:38.720 --> 01:20:42.720]  линейно. И между ними есть не больше, чем c редюсов,
[01:20:42.720 --> 01:20:45.720]  которые могли подняться и купить обратно до 5. Вот этот
[01:20:45.720 --> 01:20:50.720]  факт, это глава 2 книги А. Хульмана, там это расписано.
[01:20:50.720 --> 01:20:53.720]  Я сегодня пытался доказать, но, видимо, у меня не успею.
[01:20:53.720 --> 01:20:56.720]  А дальше, что вы должны сделать? Описывайте, что на самом
[01:20:56.720 --> 01:20:59.720]  деле подглядывание k символов для автомата переноса
[01:20:59.720 --> 01:21:02.720]  свертка описывается mp-автоматом. Вот подумайте,
[01:21:02.720 --> 01:21:05.720]  как это сделать. То есть нам нужен автомат, который
[01:21:05.720 --> 01:21:08.720]  ориентируется на k-бух вперед, при том, что обычный
[01:21:08.720 --> 01:21:10.720]  автомат не имеет ориентируется на k-бух вперед.
[01:21:10.720 --> 01:21:13.720]  Потом вы говорите, что он детерминирован в силу того,
[01:21:13.720 --> 01:21:16.720]  что у вас как раз таки тут. Либо shift, либо reduce.
[01:21:19.720 --> 01:21:22.720]  Детерминирование автомата интуитивно. Если у вас есть
[01:21:22.720 --> 01:21:27.720]  два ребра, то у них либо слова разные, либо, потому
[01:21:27.720 --> 01:21:30.720]  что снимается стека разная. То есть я всегда знаю,
[01:21:30.720 --> 01:21:33.720]  у меня снимается стека a или стека b. Поэтому два
[01:21:33.720 --> 01:21:36.720]  ребра, у которых есть аа, и просто а снимается с
[01:21:36.720 --> 01:21:38.720]  стека, они конфликтуют. Вот не понятно, первый либо
[01:21:38.720 --> 01:21:41.720]  или второй. Это так, вот идея для чего буду доказывать.
[01:21:41.720 --> 01:21:45.720]  Потом открываем лаву 2. Теорема кажется 2.10. О том,
[01:21:45.720 --> 01:21:48.720]  что для каждой дмп автомата существует такая константа.
[01:21:50.720 --> 01:21:53.720]  Такая, что нельзя оставить стеку на какой-то позиции.
[01:21:55.720 --> 01:21:57.720]  И ходить больше, чем с rs, число не зависит от цвета слова,
[01:21:57.720 --> 01:22:00.720]  только от грамматики зависит. И потом доказываем, что
[01:22:00.720 --> 01:22:03.720]  у нас здесь есть n шагов шифтов, n reducers, которые уменьшают
[01:22:03.720 --> 01:22:07.720]  стек, и между ними еще cn reducers, которые стек не уменьшают.
[01:22:08.720 --> 01:22:09.720]  Что-то такое.
[01:22:10.720 --> 01:22:14.720]  Так, давайте тогда вот момент вот с этим, я оставлю это,
[01:22:14.720 --> 01:22:17.720]  распишу, пришлю в чат. Вот, это какой-то факт, на котором
[01:22:17.720 --> 01:22:20.720]  сейчас нужно обначить много букв. Я сейчас помню, что
[01:22:20.720 --> 01:22:22.720]  в конспекте этого не написано. Тогда на этом, наверное,
[01:22:22.720 --> 01:22:25.720]  всех отпущу. Если есть вопрос, следите спрашивать.
