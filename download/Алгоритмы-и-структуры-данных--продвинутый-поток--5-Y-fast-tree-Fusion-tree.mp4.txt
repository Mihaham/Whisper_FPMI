[00:00.000 --> 00:13.780]  так вот, ну давайте вспоминать, что у нас в прошлый раз было, да-да-да, и кореевуха, да-да-да, ну да,
[00:13.780 --> 00:20.220]  про линкад мы промолчим, да, хотя нет, про линкад как раз не хочется молчать, линкад крутая вещь на
[00:20.220 --> 00:32.620]  самом деле, да, ну это да, ну как бы это у вас еще можно сделать еще, ну да-да-да-да, вот, ну давайте
[00:32.620 --> 00:36.340]  вспоминать, да, мы говорим о целочисленных алгоритмах, потому что чувствуем мы как раз-то
[00:36.340 --> 00:45.260]  ближе к великому атомик хипу вообще, чем называется, чем казалось, да, более того, в атоме хипения
[00:45.260 --> 00:51.140]  неожиданно появится выход на как-то более классический алгоритм, чем что-то там какие-то
[00:51.140 --> 00:57.540]  абстрактные там, то есть в частности мы научимся искать миностов за линию, ну предположение, естественно,
[00:57.540 --> 01:03.260]  что все там веса всех ребер это там целые числа, вот, то есть оказывается это более-менее на халяву
[01:03.260 --> 01:07.580]  будет, так что видим, так что, видимо, после этого всей целочисленности, видимо, следующие цели,
[01:07.580 --> 01:17.420]  там надо будет срочно пройти миностов, вот, что? Нет, ну как-то нет, что такое графчики, мы уже знаем,
[01:17.420 --> 01:23.380]  потому что мы уже искали кратчайшие расстояния в них, да, но осталось еще тоже их научиться искать
[01:23.380 --> 01:29.540]  за линию, но это сильно сложнее, к сожалению, потому что там, там помимо атомик хипа, придется еще
[01:29.540 --> 01:34.780]  там себе там мозг взрывать на тему некоторой теории, называется миностов будет за линию искаться
[01:34.780 --> 01:42.220]  более-менее на халяву, ну по сравнению с этим уж точно, вот, но там все выплывут, там даже Тарьян выплывет,
[01:42.220 --> 01:51.060]  вот, то есть как-то, знаете, как приятно было читать в конце этой, в конце статьи про атомик хипа,
[01:51.060 --> 01:55.860]  то есть казалось бы там Фредмон Виллор, да, казалось бы хоть где-то без Тарьяна, да, казалось бы,
[01:55.860 --> 02:01.100]  а потом, а потом в конце мы благодарим Боба Тарьяна за, там, как-то, как они выразились,
[02:01.100 --> 02:08.540]  стимулейтинг дискашнс, стимулейтинг дискашнс, вот, и, в общем, и, короче, за то, что он наткнул нас носом задачу про миностов,
[02:08.540 --> 02:16.060]  вот, но да, но потому что дело в том, ну, почему, ладно, подробнее расскажу ближе к делу, а пока,
[02:16.060 --> 02:23.740]  давайте, о чем мы остановились, мы тут пытаемся реализовать какой-то мистический черный ящик,
[02:23.740 --> 02:33.400]  который умеет делать операции какие, ну, в первую очередь, я даже тут прям во главу угла напишу,
[02:33.400 --> 02:45.420]  саксессор предсессор, вот, саксессор предсессор, причем более того, в какой-то момент нам даже
[02:45.420 --> 02:49.580]  становится более-менее все равно, потому что помните, у нас этот интерес, прикол, что нам более-менее все
[02:49.580 --> 02:55.580]  равно, что искать, потому что мы будем искать приблизительный элемент рядом, если он не с той стороны,
[02:55.580 --> 03:01.900]  мы пойдем по списку в следующий, вот, значит, есть саксессор предсессор, какие у нас еще операции есть?
[03:01.900 --> 03:18.140]  Ну, не совсем, не совсем, вот то, что у нас в прошлый раз было, теоретически у нас было, инсерт дилит тоже был.
[03:18.140 --> 03:29.020]  Ну, не только, не только, нет, там не в этом дело было, там, на самом деле, то есть, ну, давайте сейчас
[03:29.020 --> 03:34.540]  смотреть, какие у нас ассимтуетики есть, что нам еще интересно, ну, теоретически интересно еще,
[03:34.540 --> 03:47.060]  конечно, память, вот, но так-то да, но все равно иногда бывает мечта все-таки сделать получше,
[03:47.060 --> 03:58.180]  потому что, вот, мы с вами обсудили xfast, вот, давайте вспоминать, вот, давайте вспоминать,
[03:58.180 --> 04:01.540]  вот, саксессор предсессор у нас за какой симпточку работал?
[04:01.540 --> 04:13.740]  Вот, лог v, да, мы по этим битам там и хитрялись бин поиск делать, да, там бин поиск в хэшмапах,
[04:13.740 --> 04:21.060]  вот этих всех. Ну, вот, ну, как умяли, там проблема, что вот инсерт, к сожалению, работал за, вот,
[04:21.060 --> 04:32.140]  вот, видимо, да, оат, оат, да, ну, память, если была за оат v, это была бы мечта, конечно, ну, вот,
[04:32.140 --> 04:40.940]  но да, память у нас, соответственно, оат nv, да, или там, оат лог, вот, ну, вот, но сегодня, ну, вот,
[04:40.940 --> 04:46.580]  но мы неслучайно в прошлый раз закончили на одном конкретном виде корнячки, потому что у нас,
[04:46.580 --> 04:55.500]  значит, теперь, значит, мы попробуем чуть-чуть повысить ставку, ну, вот, и повысим мы ставку,
[04:55.500 --> 05:04.180]  вот, на что, то есть, это, ну, вот, вот, давайте смотреть, ну, о, ну, вот, действительно, очень хочется,
[05:04.180 --> 05:10.700]  чтобы действительно, может быть, ну, вот, чтобы, с одной стороны, у нас саксессор предсессор был
[05:10.700 --> 05:22.180]  за там какой-нибудь лог w, ну, вот, очень бы хотелось, чтобы, во-первых, памяти было оат n, а во-вторых,
[05:22.180 --> 05:29.780]  а во-вторых, давайте посмотрим, то есть, не получится ли у нас еще и вставку удаления допилить
[05:29.780 --> 05:58.100]  за логариф, вот, а вдруг, вот, да, нет, нет, тут, тут, и тебе будет, ну, то есть, а симпатика-то,
[05:58.100 --> 06:04.820]  может, и такая, то есть, да, если в one md boss и поверить в эти все хэш-мапы, да, ну, вот, то, конечно, да,
[06:04.820 --> 06:11.660]  но, тем не менее, называется, мы пойдем другим путем, вот, типа, Фреддман пошел другим путем,
[06:11.660 --> 06:20.580]  кто мы такие, чтобы ходить не тем же, вот, ну, а теперь, вот, возникает вопрос, ну, вот, вот,
[06:20.580 --> 06:26.460]  теперь возникает такой интересный вопрос, вот, действительно, там, как упихать, действительно,
[06:26.460 --> 06:42.900]  память nw в оат n, ну, смотря, что такое та же идея, вот, ну, нет, нет, вот тут сразу скажу,
[06:42.900 --> 06:48.660]  на самом деле, сегодня идеей x-fast 3 нам не понадобится, все, вот, мы можем просто себе
[06:49.260 --> 07:08.980]  у нас есть черный ящик, который умеет вот так, ну, типа того, да, вот, ну, давайте смотреть, да,
[07:08.980 --> 07:15.260]  может, на insert и delete мы на всякий случай, конечно, вопросик поставим, в идеале, конечно, да,
[07:15.260 --> 07:23.940]  ну, вот, давайте думать, ну, какая тут идея возникает, ну, возникает, на самом деле, идея,
[07:23.940 --> 07:29.420]  действительно возникает, идея, которая у нас была уже раньше, но не совсем такая, а возникает идея
[07:29.420 --> 07:39.060]  такая, что, наверное, если мы хотим хранить в структуре меньше памяти, наверное, надо в структуре
[07:39.060 --> 07:54.900]  хранить меньше элементов, вот, но как же это сделать, ну, да, можно, можно сжать, а можно, как всегда,
[07:54.900 --> 08:24.260]  значит, вести boobin, ну, да, ну, нет, нет, мы храним n на w дичей к памяти,
[08:24.260 --> 08:37.700]  каждый дичей рассчитается от единицы, да, вот, то-то и оно, то-то и оно, вот, значит,
[08:37.700 --> 08:46.380]  смотрите, вот, х1 меньше, х2 меньше, х3, вот, вообразим себе, что у нас тут хранится вот такое
[08:46.380 --> 08:55.780]  вот нечто, там массивчик какой-то отсортированный, да, вот, там меньше, я даже его как-то, но меньше,
[08:55.780 --> 09:06.100]  кстати, ну, естественно, мы его себе так вообразим, вот, ну, вот, но на самом деле, конечно, мы, мы все
[09:06.100 --> 09:11.220]  равно будем хранить там в некотором смысле, действительно, этот вот и опять двусвязанный список,
[09:11.220 --> 09:15.700]  то есть, где там по каждому элементу мы там легко получим там предыдущий следующий, это для нас
[09:15.700 --> 09:29.100]  проблемой не будет, да, ну, поддерживать будем, это нам, конечно, будет, нет, он не циклический,
[09:29.100 --> 09:35.060]  там xn, все нормально, нет, циклическая цепочка строгих неравенств, это вообще что-то подозрительное,
[09:35.060 --> 09:47.980]  вот, вот, значит, смотрите, так вот, итак, мы введем бубен и разобьем на блоки, на блоки по бубен
[09:47.980 --> 09:58.940]  элементов, вот, разобьем, значит, по соответствии бубен элементов и более того, мы даже хитро заведем
[09:58.940 --> 10:11.260]  очень интересные числа, мы заведем числа, допустим, вот, r0, r1, r2, r3, ну и так далее, но r там,
[10:11.260 --> 10:18.740]  условно, n поделить на бубен, ну, точнее так, это называется rk, k там приблизительно равно n
[10:18.740 --> 10:29.780]  поделить на бубен, да, количество блоков, блоки, более того, эти блоки мы тоже назовем, там даже s1,
[10:29.780 --> 10:38.260]  s2, s3 и так далее, sk, ну, в общем, я даже немножко набрал, что в каждом блоке будет по бубен
[10:38.260 --> 10:44.060]  элементов, ну, во-первых, n не обязана делиться на бубен, вдруг n простое число, правда, да,
[10:44.060 --> 10:50.340]  во-первых, чуть-чуть подгоним, а во-вторых, мы и поддерживайте вариант, будем, что в каждом блоке у нас
[10:50.340 --> 10:59.300]  будет, ну, что-то в духе от, ну, как всегда, давайте, вот, тут константы мы потом подгоним, если что,
[10:59.300 --> 11:08.540]  но давайте, как всегда, от одного, от одной второй бубна до двух бубнов, а r и t, да, внимание, это
[11:08.540 --> 11:17.700]  важно, r и t это число, то есть r и t такое число, которое вот меньше либо равно всех, значит,
[11:17.700 --> 11:25.020]  s, там меньше, чем, допустим, s и плюс первых, но при этом, ну, вот так, даже подгоню тут,
[11:25.020 --> 11:36.100]  r и t нет, ну, то есть, на самом деле, это да, на самом деле, это будет число из множества, но на самом
[11:36.100 --> 11:39.940]  деле, нас интересует, что это вот какое-то число, да, даже не принципиально, что оно конкретно
[11:39.940 --> 11:54.380]  обязательно из множества, точнее, к двум соседним блокам, потому что r и t это разделитель, но, то есть,
[11:54.380 --> 11:58.900]  смотрите, то есть, дело в том, что всех числов s и там меньше, чем всех числов s и плюс первым,
[11:58.900 --> 12:12.180]  ну, от одного, количество, количество блоков, ну, r даже, да, вот, можно сказать, ну, актуальных
[12:12.180 --> 12:19.700]  r, на самом деле, даже k-1, я бы сказал, вот, то есть, вот такая вот красота, то есть, r и t это
[12:19.700 --> 12:23.900]  разделитель, то есть, я, конечно, тут немножко неформально написал, что множество меньше либо
[12:23.900 --> 12:28.220]  равно числа, но, я думаю, вы понимаете, что имеется в виду, вот, ну, я тут могу написать
[12:28.220 --> 12:38.660]  какие-нибудь максимум, минимум, но это все уже мелко, так вот, идея такая, значит, так вот,
[12:38.660 --> 12:48.860]  значит, я буду использовать в качестве черного ящика вот этот вот xfast, вот, но чит у меня будет
[12:48.860 --> 12:57.940]  заключаться в том, что, соответственно, я буду хранить нот, то есть, да, я буду хранить,
[12:57.940 --> 13:12.620]  соответственно, все эти ноты в xfast-е именно, именно r и t, да, вот, так что храним r и t, ну,
[13:12.620 --> 13:30.580]  вот, так вот, значит, r и t, значит, храним, то есть, r и t храним в xfast-3 и, соответственно,
[13:30.580 --> 13:48.100]  что нот, а каждый, каждый по отдельности, внимание, с и, каждый с и в двоичном, да, так и хочется
[13:48.100 --> 13:58.660]  написать в dd, короче, храним, но я напишу в ddp, в двоичном дереве поиска, короче, да, ну,
[13:58.660 --> 14:08.500]  как-то, ну, каком-нибудь, который работает за логарифом, s это блок, то есть, это не элемент,
[14:08.500 --> 14:20.060]  это множество, вот, да, какой-то он же это проговорил, да, я не знаю, какой-то он, я не знаю,
[14:20.060 --> 14:30.420]  кто, вот, очень просто, ну, и когда я говорю, что множество меньше либо равно числа, я имею в виду,
[14:30.420 --> 14:44.420]  что все числа этого множества меньше либо равны этого числа, ну, да, да, ну, вот, ага, ну,
[14:44.420 --> 14:58.820]  а все, тем не менее, ну, то есть, так, то есть, ладно, я бы, ну, вот, ну, то есть, можно привести такую
[14:58.820 --> 15:03.340]  аналогию, которая нам периодически тоже, знаете, вот, начнем подгружать в памяти, помните такую
[15:03.340 --> 15:10.460]  структуру данных, как b дерево, так вот, на самом деле, так вот, если бы у нас было b дерево, у которого
[15:10.460 --> 15:20.020]  есть вот k, вот, таких вот детей, то вот, r могли бы быть ключами вверши, то есть, смысл,
[15:20.020 --> 15:30.340]  нет, ну, это так, но это просто вот аналогия для того, чтобы понимать, действительно, что такое s,
[15:30.340 --> 15:36.380]  что qr, как они связаны, только для этого, ну, и для, ну, и потому, что в каких-нибудь в этих там,
[15:36.820 --> 15:43.260]  там fusion деревьях, там это b дерево или еще или там светлый образ его могут понадобиться, вот,
[15:43.260 --> 15:53.340]  значит, смотрите, что у нас сейчас тут будет, ну, вот, ну, давайте для начала попробуйте угадать,
[15:53.340 --> 16:06.900]  чему будет равен boobin, прям вообще без вариантов, нет, ну, действительно, конечно, если мы хотим,
[16:06.900 --> 16:11.300]  чтобы у нас x-фаз, действительно, был, но, действительно, адекватной памяти, то, наверное,
[16:11.300 --> 16:20.340]  памяти надо быть в w, ну, я вам так скажу, в реальности будет w, ну, ладно, если понадобится,
[16:20.340 --> 16:27.820]  в каты не надо, там, видите, ну, понятно, да, нет, понятно, что в с этой, да, да, да, но, знаете,
[16:27.820 --> 16:33.940]  нет, с этим, ой, с этим мы еще, у нас там будет и w в квадрате, и w в степени 1 четвертая,
[16:33.940 --> 16:43.820]  там и 11 w в степени 1 пятая, ну, здесь, а здесь и не надо, нет, смотрите, нет, идея просто такая,
[16:43.820 --> 16:49.780]  чем нам помогает w, то есть, если boobin у нас w, то, пока и меряем память, в которой мы можем это
[16:49.780 --> 16:57.300]  хранить, она действительно o от n, почему, потому что erac у нас асимпатически o от n поделить на,
[16:57.300 --> 17:06.900]  n поделить на boobin, именно, нет, память, нет, нет, памяти, смотрите, у нас памяти, смотрите,
[17:06.900 --> 17:14.620]  у нас хранится kr, ну, там плюс-минус, да, k, поэтому память у нас k на w, ну, так как k это асимпатически
[17:14.620 --> 17:27.700]  n поделить на boobin, то, то есть, n поделить на w, то n поделить на w, множество w равно n, вот, да,
[17:27.700 --> 17:32.620]  еще, да, то есть, мало того, что заметим, что каждое конкретное ddp мы храним за линейное время,
[17:32.620 --> 17:44.140]  помните, да, хранить за время это хорошо, конечно, да, вот, ну, хранить, да, хорошо,
[17:44.140 --> 17:50.540]  храним за линейную память действительно, но и что самое приятное, запрос там поиска каких-нибудь
[17:50.540 --> 18:07.260]  саксессоров-предесессоров у вас тоже великолепно будет работать за вот требуемый лог w, да, это готовая
[18:07.260 --> 18:14.420]  структура, так она будет устроена, вот, по крайней мере, вот, да, пока нет инсортов и дилитов и прочих
[18:14.420 --> 18:19.100]  саксессоров-предесессоров, ну, хотя, да, давайте начнем с саксессоров такой, с разминочки, да,
[18:19.100 --> 18:26.780]  саксессор-предесессор, как тут искать саксессора-предесессора, ну, в общем, сначала за лог w мы найдем подходящую r,
[18:26.780 --> 18:33.340]  с помощью ее найдем подходящий блок, в котором надо искать ответ, ну, а найдя блок мы просто отправимся в
[18:33.340 --> 18:43.820]  двоичное дерево поиска и за тот же самый лог w найдем само число, тут пока все просто, или нет?
[18:43.820 --> 18:56.140]  Что? Ну, практически, да, нет, ну, точнее так, блок-то вы быстро поедете, что вы найдете там
[18:56.140 --> 19:01.380]  какой-то нот, то есть вы там, допустим, найдете, дали вам какой-то х, вы находите у него там,
[19:01.380 --> 19:08.660]  допустим, upper bound, да, какой-то вот он upper bound, значит, наверное, если х есть, то он лежит вот в этом
[19:08.660 --> 19:17.300]  блоке, все, ну, вот, точнее так, ну, если х есть, ладно, если вы ищете саксессора, например, то и он как бы лежит
[19:17.300 --> 19:28.660]  либо в этом блоке, либо минимум вот в этом блоке, хотя, ну, да, если еще подобные мелочи добавить, то да,
[19:28.660 --> 19:39.620]  нам становится вообще, нет, нет, нет, нет, нет, нет, нет, нет, нет, вовсе не обязательно, и сейчас вы увидите почему,
[19:39.620 --> 19:47.180]  потому что смотрите, да, потому что, смотрите, тут же еще одна красивая фишка, хорошо, саксессор,
[19:47.180 --> 20:03.220]  предсессор, мы уже поверили в блок w, да, потому что у нас в x-фасте саксессор, предсессор с блок w работает, вот,
[20:03.220 --> 20:09.820]  обратите внимание, зачем мы это делали, у нас есть крутая структура данных, которая вот с саксессора
[20:09.820 --> 20:15.100]  предсессора, она круто ищет, да, она тут страдает со всем остальным, но вот относительно страдает,
[20:15.100 --> 20:23.820]  конечно, вот, но зато саксессора предсессора она прям вот, вот, и мы этим пользуемся, поэтому,
[20:23.820 --> 20:28.980]  то есть когда мы ищем саксессора предсессора в этой структуре, мы за вот эту асимптотику находим
[20:28.980 --> 20:36.780]  там этого саксессора предсессора, то есть там upper bound, lower bound там среди эрог, понимаем в какие блоки
[20:36.780 --> 20:46.100]  вообще надо смотреть, ну вот, точнее скорее в какой блок, и в этом блоке уже за там, уже в двоичном
[20:46.100 --> 20:55.020]  керебе поиска ищем, собственно, lower bound, upper bound, вот, но так как в каждом из них w элементов,
[20:55.020 --> 21:05.220]  то опять же из лог w мы никуда не делись, вот, так что вот такая вот, такая вот штука, пока мы не
[21:05.220 --> 21:13.700]  начинаем делать insert и delete, так, еще тут какие-то вопросы есть? Тут пока все понятно,
[21:13.700 --> 21:20.580]  потому что может быть, да, пока вот, как искать саксессор предсессор, поняли, ну и как структура
[21:20.580 --> 21:30.220]  устроена тоже, да, хорошо, вот, нет, ну не волнуйтесь, пока, ну вот, ну а теперь дальше, ну в принципе,
[21:30.220 --> 21:36.220]  в общем-то, да, дальше вступает в дело, наверное, то есть вот этот вот отрезок, наверное, вызывает
[21:36.220 --> 21:47.380]  какие-то ассоциации с прошлой лекции, правда? Ну давайте вспоминать кодовое слово корнячка,
[21:47.380 --> 21:55.500]  вот, помните, вот, мы не случайно в прошлый раз рассмотрели такую задачу, как жил-был массив,
[21:55.500 --> 21:59.220]  мы хотим его вставлять, удалять и там искать какую-то там какую-нибудь сумму на отрезке,
[21:59.220 --> 22:04.260]  но при этом вот хотим это делать корнячкой, здесь мы будем делать буквально то же самое,
[22:04.260 --> 22:10.260]  да, я не буду пересказывать как делать корнячку, я вместо этого расскажу как тут, ну вот, а идея
[22:10.260 --> 22:16.700]  очень простая, мы просто, то есть хотим мы делать insert, но все очень просто, мы по экам
[22:16.700 --> 22:22.300]  сориентируемся в какой блок надо вставлять, вот, за логарифом сориентируемся куда надо вставлять и
[22:22.300 --> 22:35.860]  вставляем, да, в дерево поиска, да и да, ну вот, ну да, то есть пока, то есть некоторое время,
[22:35.860 --> 22:51.580]  пока мы тут никуда не вышли за пределы этого отрезка, ну да, ну не совсем,
[22:51.580 --> 22:57.660]  bin-поиск раз вы понимаете куда вставлять, а вот как-то уже там вставка, это уже двоичное дерево поиска,
[22:57.660 --> 23:20.260]  нет, ну почему, ну как бы тут, спокойно, ну это можно назвать bin-поиском, наверное, где-то,
[23:20.260 --> 23:26.740]  но как-то понятно, это всегда у нас неразрывно связано с bin-поиском, да, ну и потом в конце концов
[23:26.740 --> 23:33.900]  спуск по дереву, это ли не bin-поиск, да ладно, господи, двоичное дерево поиска, это структура,
[23:33.900 --> 23:41.260]  которая создавалась, чтобы узаконить bin-поиск, да, это дерево bin-поиска на самом деле,
[23:41.260 --> 23:52.860]  так вот, значит, ну хорошо там вставку, мы сейчас не будем обсуждать, как делать вставку в ВВЛ,
[23:52.860 --> 24:00.140]  мы это уже обсуждали, вот кому сложно можете красно-черное вставить, да, вот, значит,
[24:00.140 --> 24:19.740]  неважно, черный ящик умеет, и это хорошо, вот, далее, вот, значит, смотрите, но, конечно же,
[24:19.740 --> 24:26.660]  в какой-то момент начинается, что у нас расширяется, что у нас отрезок может расшириться,
[24:26.660 --> 24:35.460]  ну в принципе он может стать очень-очень-очень большим, два бубен плюс один, что делать,
[24:35.460 --> 24:47.620]  вот стал у нас отрезок жирным, да, ну естественно, как это, да, вот тут нам пришло время таки в этот
[24:47.620 --> 24:56.100]  х-фаст сделать вставку, то есть придется тут попилить, попилить налево, попилить слева, тут бубен
[24:56.100 --> 25:10.020]  элементов, да, будет справа бубен элементов и новая r-ка, да, правильно, поэтому я говорю бубен здесь,
[25:10.020 --> 25:33.100]  бубен здесь и один новый элемент, да, вот, ну как сказать, не совсем обязывались, вот, вот,
[25:33.100 --> 25:38.340]  ну и потом, даже, и потом, это не особо проблема, думаю, если в одном из этих нож будет бубен плюс один
[25:38.340 --> 25:48.860]  элемент, то мы не расстроимся, так что есть, вот, так что и, ну как мало, нет, w это какая-то
[25:48.860 --> 25:54.780]  бесконечно растущая функция, да, мы верим, да, что она растет, будет расти бесконечно в истории,
[25:54.780 --> 26:01.900]  да, ну вот, ну, да, человечество вымрет, а w будет расти, да, вот, так вот, значит, короче,
[26:01.900 --> 26:08.140]  достаем это r, я его назвал r2,5, почему я назвал r2,5, потому что, да, приходит время разбить
[26:08.140 --> 26:17.780]  блок на два, и это означает, придет время вставить новую r-ку в великий xfast, вот, и придется,
[26:17.780 --> 26:28.940]  правда, на эту штуку, сколько времени потратить, да, придется потратить w, но, как говорится,
[26:28.940 --> 26:49.220]  уже догадываетесь, где тут победа, да, да, вот, да, вот в этом-то и ставка. В данном случае, да,
[26:49.220 --> 26:55.660]  мы, раз уж мы и insert делаем за OAW, то и пилить деревья мы будем за OAW, да, здесь мы не
[26:55.660 --> 27:02.740]  заморачиваемся, то есть, там, тотальная перестройка, там, собственно, ничего страшного, не та перестройка,
[27:02.740 --> 27:09.220]  ну вот, перестройка только одного блока, а не вот это вот швы, там, каждый корень, кореньской
[27:09.220 --> 27:16.820]  операции. Ну, короче, когда пилим блок, просто мы плюем, и просто, значит, в этом блоке, там,
[27:16.820 --> 27:22.500]  находим медиану, там делим этот блок на два, и в каждом блоке, там, заново это делим, там,
[27:22.500 --> 27:34.660]  свое это, там, AVL-ку строим. Ну или, ну или, ну или, там, да, пожалуй. То есть, в этом месте это
[27:34.660 --> 27:42.100]  будет работать за OAW. Значит, ну, основная идея, за какой это будет работать, то, что у нас,
[27:42.100 --> 27:47.260]  видите, пока у нас, пока, пока у нас нет дилитов, вот, предположим, что у нас нет вообще дилитов,
[27:47.260 --> 27:54.020]  да, тогда мы замечаем следующее, что изначально у нас все блоки размера бубен, в смысле W, да,
[27:54.020 --> 28:01.860]  и до следующего сплита, чтобы с отрезком произошел сплит, нам нужно в него, конкретно в него сделать
[28:01.860 --> 28:07.340]  хотя бы W инсертов. То есть, поэтому, если мы просто каждый инсерт в блок, там, дает нам, скажем,
[28:07.340 --> 28:13.540]  там, монетку или, там, при желании две, если хотите, вот, то тогда у вас накапливается два W,
[28:13.540 --> 28:20.660]  там, монет, чтобы выполнить вот этот вот разбиение блоков и амортизировано это будет даже
[28:20.660 --> 28:26.660]  за OAW от единицы работать. Нет, это от LOGW у нас это не убьет, потому что рядовые операции работают
[28:26.660 --> 28:35.140]  за LOGW. Ну вот, но, по крайней мере, сами вот эти вот распилы, да, но распилы у нас амортизацию дают.
[28:35.140 --> 28:47.700]  Ну, значит, мы копим монетки. Значит, каждый раз, когда мы, да, на каждом блоке лежат монетки.
[28:47.700 --> 28:56.140]  Каждый раз, когда в блоке появляется новый элемент, мы кладем в него, мы кладем на него монетку.
[28:56.140 --> 29:05.020]  После, ну вот, и когда, ну вот, и утверждение, что так как у нас, что к тому моменту, когда блок
[29:05.020 --> 29:16.300]  придется пилить, на этом блоке скопится, там, от, от, от, там, тета от W монеток. Ну, тогда, вот,
[29:16.300 --> 29:24.140]  но, нет, в лучшем случае, нет, в лучшем случае ровно W, потому что у нас-то сейчас будет два,
[29:24.140 --> 29:29.820]  сплит нужен, когда у нас их станет два бубен плюс один, а пока у нас при инсерте их изначально,
[29:29.820 --> 29:42.420]  да, так что, так что, да, так что, да, тут в этом смысле круто, да, вот, а получилось, да, вот.
[29:42.420 --> 29:49.540]  Ну, вот, так что, соответственно, если бы у нас не было инсерта, если бы не было дилита, то мы бы
[29:49.540 --> 30:00.220]  действительно все победили, да, пожалуй, да, тот вопросик мы стираем, а вот с дилитом, конечно,
[30:00.220 --> 30:06.100]  еще, еще что-то остается, но с другой стороны, ставка как вектор, видите, то есть, не случайно мы
[30:06.100 --> 30:12.260]  себе снизу тоже ограничили, то есть, нам надо, чтобы и до, так сказать, мелко, до того, когда
[30:12.260 --> 30:16.500]  отрезок станет слишком маленьким, нам пришлось поработать, и когда он станет слишком большим,
[30:16.500 --> 30:28.580]  придется поработать, ну да, так что делать, но давайте поймем, а что делать, если наш отрезок
[30:28.580 --> 30:41.640]  слишком маленький, вот, ну, дальше, но тут вот, вот сейчас нужно, конечно, проявить определенную
[30:41.640 --> 30:59.640]  аккуратность, да, давайте, давайте, давайте, давайте, смотрите, чего забить, куда забить,
[30:59.640 --> 31:10.520]  если забить, дилита не будет, значит, смотрите, так вот у нас был маленький отрезок, вот он стал,
[31:10.520 --> 31:20.860]  допустим, вот пришло время, и он стал, одна-вторая бубна, я даже, даже для красоты, пожалуй, знаете,
[31:20.860 --> 31:30.820]  я тут еще вот так напишу, вот, что, типа, одна-вторая бубен, все, мы его зупили, надо что-то делать, но что
[31:30.820 --> 31:46.780]  предлагается делать, ну да, давайте, возьмем какой-нибудь соседний блок, совершенно верно, да,
[31:46.780 --> 31:53.940]  совершенно верно, совершенно верно, вот, но если соседний блок есть, то тогда, значит, если их за
[31:53.940 --> 32:01.780]  о от бубен опять же объединить, да, соответственно, да, залог w, соответственно, выпилив, соответственно,
[32:01.780 --> 32:08.860]  вот эту вот эрку, да, нет, даже неправильно, лучше правильно его так написать, да, за о от w, да,
[32:08.860 --> 32:17.020]  выпилив эту штуку из х-фаста, она с устраивает, что вот за от w, вот, и дальше в результате у нас
[32:17.020 --> 32:26.780]  появится блок, в котором количество элементов, соответственно, равно от бубен до двух с половиной бубнов,
[32:26.780 --> 32:42.680]  вот так, да, на самом деле, вот так, да, ну вот, вот, ну и что нам тогда предлагается, ну понятно, да,
[32:42.680 --> 32:50.080]  что, ну вот, понятно, что если получилось слишком много, то надо распиливать, причем, как бы,
[32:50.080 --> 32:54.320]  нас не устраивает сказать, что если у вас там получилось два бубна, значит, оставим как есть,
[32:54.320 --> 32:59.760]  почему нас это не устраивает, потому что тогда амортизация при инсерте перестанет работать,
[32:59.760 --> 33:04.240]  то есть, если мы сейчас создадим большой блок, возможно, на следующем шаге придется его пилить
[33:04.240 --> 33:13.600]  обратно, это нам не нужно, вот, поэтому мы сделаем по, чуть-чуть поаккуратнее, значит, мы скажем,
[33:13.600 --> 33:19.880]  что дальше мы это будем распиливать, если у нас будет, ну, например,
[33:19.880 --> 33:42.680]  я не знаю, мне что-то хочется 1.75, я не знаю, почему. Понял, сказал Барман и написал вот это,
[33:42.680 --> 33:52.600]  вот, вот, ну давайте, хорошо, пожалуйста, давайте ровно так ровно, значит, тогда, если у нас больше
[33:52.600 --> 34:05.120]  чем 5 третих бубнов, то тогда мы этот блок мы снова делим пополам, но на этот раз пора, вот,
[34:05.120 --> 34:11.800]  и тогда получается, что либо у нас, значит, получился блок размера от бубна до 5 третих бубна,
[34:11.800 --> 34:24.320]  ой, оптимально, что такое оптимально, ой, боже мой, ну тогда, то есть, тогда уже можно подкручивать,
[34:24.320 --> 34:29.440]  тогда же, если что-то пошло, то тоже можно вместо одной, второй и двух другие константы подгонять,
[34:29.440 --> 34:43.000]  если 5 третих бубнов, то, значит, либо, значит, у нас тут это было по 5 третих бубен, и тогда,
[34:43.000 --> 34:49.040]  значит, при, так сказать, объединении, а потом распили пополам, у вас тут будет от, значит,
[34:49.040 --> 35:00.000]  где-то 5 шестых бубен, значит, 5 шестых бубен, ну да, ну, точнее, так, круто, ну, это 5 третих,
[35:00.000 --> 35:10.360]  ну да, но там, точнее, так, от 5 шестых бубен до, ну, до, вот, если это пополам поделить,
[35:10.360 --> 35:23.400]  то до 5 четвертых бубен, короче, вот так, да, это если распил произошел, если распила не произошло,
[35:23.400 --> 35:35.760]  то там все просто, 5 третих, вот, там просто будет большой блок размера 5 третих, то есть,
[35:35.760 --> 35:42.660]  таким образом, при такой штуке мы себе гарантируем следующее, что если произошло, там,
[35:42.660 --> 36:02.980]  инцет или дилит, инцет или дилит, согласен, да, согласен, безусловно, да, то есть, в переводе,
[36:02.980 --> 36:07.500]  но тогда, в переводе говоря, теперь можно сформулировать такое просто глобальное утверждение,
[36:07.980 --> 36:15.580]  что если с отрезом, с каким-то блоком произошел инцет или дилит, то мы гарантируем, что в результате
[36:15.580 --> 36:25.260]  этого инцета и дилита появились блоки 1 или 2, размеры которых лежат на отрезке от 5 шестых до 5
[36:25.260 --> 36:41.580]  третих бубна, вот, то есть, заметим, что этот отрезок строго вложен вот в этот отрезок и его не касается,
[36:41.580 --> 36:50.420]  то есть, это означает следующее, что глобально говоря, что до того как, ну понятно, что с каждым
[36:50.420 --> 36:56.500]  отрезком, конечно, то есть, конечно, неверно, что, то есть, хочется, конечно, сказать, что с отрезком теперь
[36:56.500 --> 37:02.340]  произойдет какое-нибудь безобразие, там, слияние или распил, теперь получается только через тета от
[37:02.340 --> 37:09.860]  бубен операции, да, вот, да, но важно это, что сам инициирует, потому что любой отрезок может,
[37:09.860 --> 37:16.220]  там, любой красивый вообще гармоничный отрезок может быть в любой момент объединен со своим
[37:16.220 --> 37:23.980]  обнищающим соседом, вот, но ничего страшного в этом нет, на самом деле он не такой уж и обнищавший,
[37:23.980 --> 37:30.900]  да, деньги у него есть, да, нам придется, конечно, пенсию проиндексировать немножко,
[37:30.900 --> 37:36.260]  потому что, обратите внимание, раньше мы тут шли от бубна до двух бубнов, то есть, можно по одной
[37:36.260 --> 37:41.260]  монетке класть, да, а теперь у нас задача, что теперь вот у нас тут за треть бубна надо,
[37:41.260 --> 37:45.460]  чтобы все накопилось, поэтому там пенсию, как минимум, придется тут поднять в три раза,
[37:45.460 --> 37:56.380]  так, пять шестых, а, и тут одна треть, кстати, вот, да, да, да, кайфец, да, все. А это мы гарантируем,
[37:56.380 --> 38:03.260]  что после всех сплитов и мержей все получившиеся в результате блоки будут по размеру вот где-то
[38:03.260 --> 38:24.140]  в этом отрезке, но тогда нет, вы сказали так, если размер до пяти третих бубна, он остается на
[38:24.140 --> 38:32.300]  месте, нет, не бубн, а блок, если блок был в результате вот этот мерженный блок оказался размера
[38:32.300 --> 38:39.020]  меньше чем 5 третьих, меньше либо равно, то нас-то устраивает, да, тогда размер будет от одного до
[38:39.020 --> 38:45.300]  пяти третьих, а если он больше чем 5 третьих, да, бубна, то мы распиливаем на два и получается два
[38:45.300 --> 38:51.100]  блока размера от пяти шестых до пяти четвертых бубна, в общем, в совокупности получается глобальное
[38:51.100 --> 38:57.900]  утверждение, что, в общем, в результате этого объединения у нас оба блока, там, блок, или
[38:58.900 --> 39:06.660]  два блока и размера они будут от пяти шестых до пяти третьих, вот, поэтому да, тут вот расстояние
[39:06.660 --> 39:11.340]  теперь, то есть получается теперь, что, то есть идея такая, что каждый раз, когда вы в блок
[39:11.340 --> 39:18.060]  добавляете или удаляете элемент, в чем, заметьте, когда им и когда добавляете, и когда удавляете,
[39:18.060 --> 39:25.220]  обратите внимание на это, да, но вот и когда добавляете, когда удаляете, то выкладете монетку,
[39:25.220 --> 39:32.100]  поэтому мы гарантируем, что когда блок, так сказать, сам инициирует у себя либо объединение
[39:32.100 --> 39:43.940]  с соседом, либо самосплит, то тогда в нем будет лежать уже theta w монетка, вот, это нот, поэтому
[39:43.940 --> 39:55.340]  вот, поэтому получается, что и вот, и инстакт, и дилит у нас получился, да, амортизировано, да,
[39:55.340 --> 40:08.620]  да, амортизировано, да, с хэшпапом внутри х фаста, да, нет, ну, на практике-то да, ну,
[40:08.620 --> 40:17.340]  ну, на практике у нас и w64, да, но это, конечно, уже не та константа, которую можно уже захотеть
[40:17.340 --> 40:30.860]  сооптимизировать, потому что мы там хэшмапе хранили, какие вершины в боре вообще есть,
[40:30.860 --> 40:38.740]  то есть мы в явном виде бор не хранили, а хранили там все, да, только храним не деревца, а храним
[40:38.740 --> 40:45.740]  то-то те вершины, которые там реально есть и в хэшмапе, да, и это позволяло нам там, да,
[40:45.740 --> 40:52.940]  поэтому это хэшмапа не хэшсет, да, вот, правильно, и дальше там начинался бинпоиск, да, бинпоиск
[40:52.940 --> 41:00.460]  по хэшмапу, да, красота, вот, так что вот, так что вот такое вот, так что такая вот красота,
[41:00.460 --> 41:05.100]  то есть в принципе это уже, то есть y-фаст уже как-то стал, да, чуть поприличнее, чем x-фаст,
[41:05.100 --> 41:13.460]  вот, но, соответственно, да, ну, вот, ну, собственно, да, видимо, несложная структура
[41:13.460 --> 41:21.140]  оказалась, но, как говорится, сейчас будет чуть-чуть сложнее, вот, хорошо, значит, мы поверили в y-фаст,
[41:21.140 --> 41:39.500]  мы много чего, да, но раз ли в этом, нет, ну, как сказать, я не могу сказать, что мы вот это
[41:39.500 --> 41:46.580]  сейчас улучшим, потому что, значит, теперь следующая ставка, значит, так, ну, значит, теперь я могу это
[41:46.580 --> 42:06.700]  все стирать, потому что далее y-фаст мы продолжим использовать как черный ящик, не знаю, видимо,
[42:06.700 --> 42:25.220]  видимо, видимо, он красивший. Вот, а еще разные подходы, а еще разные подходы изучать,
[42:25.220 --> 42:40.980]  ну, вот, то есть как бы, да, мы ее уже проходили частично, но я не знаю, мне вот это с блоками
[42:40.980 --> 42:46.220]  нравится конструкция, я не знаю, нет, я понимаю, да, что мы не проходили там какой-нибудь условный,
[42:46.220 --> 43:03.020]  там это называется 5Demo, там вот это все, да, ну, вот, да, да, да, безусловно, безусловно, вот, так что думаю,
[43:03.020 --> 43:16.140]  вот, но теперь, соответственно, значит, следующий номер нашей программы, значит, ну, вот, значит,
[43:16.140 --> 43:44.820]  значит, будет у нас вот такая красота, значит, Fusion 3, но мы с вами все-таки не по Википедии учимся,
[43:44.820 --> 43:52.700]  да, нет, ну, мало ли, может, конечно, полегко окажется, что все это из Википедии, но, по-моему, вот этого всего Википедии,
[43:52.700 --> 44:05.060]  ну, в Викиконспектах, да, нет, что-то, нет, вот, да, значит, ну, вот, значит, ставочка теперь такая,
[44:05.060 --> 44:11.220]  значит, Successor, Predecessor, но, правда, тут, конечно, оговорочка придется, что нам придут, что мы,
[44:11.220 --> 44:20.300]  возможно, ограничимся немножко статической версией, вот, ну, вот, в статической версии, значит,
[44:20.300 --> 44:35.500]  если вот брать статик, вообще есть, вот, ну, нет, хотелось бы, но я пока не должен, ну, вот, ну, вот,
[44:35.500 --> 44:41.980]  но здесь, в общем, оставляя мечта, нет, смотрите, теперь оставляя мечта, чтобы тут был log n,
[44:41.980 --> 44:53.020]  только log по основанию w, ну, как бы, да, то есть, если w растет, то, как бы, этот log прификсирован
[44:53.020 --> 44:58.660]  mn уменьшается, поэтому, то есть, как я уже говорил, то есть, это, в принципе, комбинация игр к фасто,
[44:58.660 --> 45:04.340]  ну, или там, дерево для босса, вот, и Fusion 3 позволяет вам вообще там делать какие-нибудь
[45:04.340 --> 45:14.500]  successor и predecessor за время корень из log n, помните, да, вот, то есть, поэтому, поэтому такая приятная
[45:14.500 --> 45:18.380]  штука, то есть, как бы вы, то есть, казалось бы, у вас есть какое-то w, но оказалось,
[45:18.380 --> 45:24.620]  грамотно им воспользовавшись, вы ухитряете придумать себе симпатику, которая от w не зависит,
[45:24.620 --> 45:38.460]  вот, то есть, уже так неплохо, но, соответственно, да, с памятью, конечно, у нас будет больно,
[45:38.460 --> 45:56.060]  да, а, ну, инсертов, дилитов у нас нет вообще, так, ну, вот, ну, по памяти, ой, ну, даже, вот даже интрига,
[45:56.060 --> 46:04.100]  сколько у нас там, уложимся в УАТ, или не уложимся, статическая структура,
[46:04.100 --> 46:14.300]  пока до successor, predecessor не подойдет, так-то, да, у нас есть фешмапа, да, вот, то есть, как бы,
[46:14.300 --> 46:19.940]  к сожалению, не по, то есть, successor, predecessor, да, к сожалению, successor, predecessor это не возьми
[46:19.940 --> 46:26.260]  элементы, не просто возьми элементы из сета, просто возьми там, lower bound, upper bound, то есть,
[46:26.260 --> 46:30.260]  как бы, да, то есть, когда-то они, то есть, я не знаю, когда-то давно наука его называла successor,
[46:30.260 --> 46:36.740]  predecessor, хотя он сейчас актуальней, конечно, lower bound, upper bound его называть, наверное, вот,
[46:36.740 --> 46:44.180]  но давайте смотреть, вот, давайте делаем вставочки, сколько нам вообще тут памяти потребуется,
[46:44.180 --> 46:55.060]  ну, пока, ну, я не знаю, просто я боюсь, что УАТ может не уложиться, впрочем, давайте
[46:55.060 --> 47:02.100]  смотреть, давайте смотрите, за счет чего, сейчас будет такой, еще один достаточно традиционный
[47:02.100 --> 47:06.700]  метод, да, то есть, в принципе, у нас уже данный, как этот метод, вида, что давайте возьмем какие-нибудь
[47:06.700 --> 47:13.460]  блоки размера log w и там будем с ними что-то делать, да, и там что-то делать как-то адекватно и за счет
[47:13.460 --> 47:18.740]  этого у нас все сократится в log w раз, ну, напоминаю, да, помните, log n по основанию w это log n
[47:18.740 --> 47:28.940]  поделить на log w, да, помните, вот, так вот, значит, наша ставочка, что такое fusion tree, это b дерево,
[47:28.940 --> 47:44.580]  это, значит, у нас ставка, значит, вот, я прям так и напишу, fusion tree is b tree,
[47:44.580 --> 48:01.380]  правда, есть одна проблема, ну, правда, да, что-то, правда, что нужно, чтобы задать b дерево,
[48:01.380 --> 48:10.860]  да, параметр t бы не помешал, то есть, смотрите, сколько у нас веток будет, так вот, ну, вот, с,
[48:10.860 --> 48:22.820]  вот этим вот, так вот, параметр t будет w в степени 1 на 5, точно 1, да, а, ну, да, там,
[48:22.820 --> 48:35.500]  из вариантов, да, 1 на 5, там, как говорится, увидим почему, в общем, такое шоу. Нет, все очень просто,
[48:35.500 --> 48:45.500]  все 4 это 2 в 6, так что 2 в степени 6 в пятых, ну, что-то там между 2 и 4, да, так что конкретно тут, да,
[48:45.500 --> 48:51.900]  конкретно в нашем случае 2-3 дерева вполне подойдет, да, ну, а что, может, он писал кто-нибудь в сервисе,
[48:51.900 --> 49:09.660]  это 2-3 дерева, ну, знаете, как это, да, да, да, я был, кошмар, да, я был, да, я был в
[49:10.260 --> 49:24.780]  кроватке, да, и у меня была каруселька с хипами, да, да, да, да, да, нет, нет, на самом деле я боюсь,
[49:24.780 --> 49:30.740]  что не совсем, потому что то, b дерево, это было бы 2-3-4 дерева, а 2-3 дерево, это, по-моему, там,
[49:30.740 --> 49:44.140]  потому что это что-то допиленное, я не готов, в общем, да, там уминали обеими ногами. Так,
[49:44.140 --> 49:56.140]  ребят, так, ребят, все, так, ребят, все, мы уже это переросли в сервис, вот, какая разница,
[49:56.140 --> 50:01.460]  ну, там, в конце концов, все равно ее там никто на 100 баллов и не решил, там, у Гайнулина было время,
[50:01.460 --> 50:08.460]  он набрал 91, как раз 91, это то, что можно было набрать без 2-3 дерева, ну, вот там выжил,
[50:08.460 --> 50:16.860]  вот, не важно, в общем, так вот, а у нас будет вот b дерево с вот таким вот крутым, значит, фактором
[50:16.940 --> 50:27.180]  t, но давайте ставить, какова тогда высота дерева будет? Да, мы помним, что высота у нас дерева,
[50:27.180 --> 50:37.780]  это log tn, вот, но в нашем случае это, там, если уж проделать эти мистические операции log,
[50:37.780 --> 50:47.780]  там, double, поставить double 5n, это равно log n поделить на log w, там, 1 пятое, да, это тоже самое,
[50:47.780 --> 50:59.860]  что 5 logarithm of n поделить на log w, в общем, короче, ну, короче, t от log wn, вот, вот, все, да,
[50:59.860 --> 51:07.060]  вы, да, вот, ну, мало ли, вот, нет, я понимаю, что вы там все писали егэ, но вдруг кто-то там,
[51:07.060 --> 51:18.980]  да, вдруг там это кто-то через это, через все распроходил, да, вот, вот, так вот, так вот,
[51:18.980 --> 51:24.500]  все было бы ничего, то есть, можно, конечно, казалось бы, да, вот, обсуждение на этом,
[51:24.500 --> 51:29.620]  можно, казалось бы, закончить, все, высота log wn, у нас все операции, там, делаются,
[51:29.620 --> 51:40.500]  там, от высоты, ура, до свидания, ну, вот, но только вот, все, да, но есть одна, да,
[51:40.500 --> 51:48.420]  есть одна маленькая проблема, да, да, к сожалению, операция делается за t log tn, там, эти всякие,
[51:48.420 --> 51:57.220]  вот, ну, вот, а так w, да, то есть, к сожалению, то же самое, только на w умножить, а это нас
[51:57.220 --> 52:04.620]  не устраивает, даже если это w в степени 1 на 5, это все равно больше, чем 1, вот, вот, что делать,
[52:04.620 --> 52:14.340]  значит, смотрите, значит, какая идея, ну, идея в языке это очень простая, просто, значит,
[52:14.340 --> 52:23.580]  нам с вами нужно научиться, значит, нужно с вами научиться искать, соответственно,
[52:23.580 --> 52:30.620]  upper bound, lower bound, тоже в какой-то вот статической версии, то есть, у нас будут эти все, то есть,
[52:30.620 --> 52:35.100]  у нас в вершине стоят вот эти разделители, да, и нам нужно в них тоже искать lower bound и upper bound, да,
[52:35.100 --> 52:45.940]  в вершине, ну, хорошо, хорошо, ну, смотрите, то есть, откуда у нас берется вот это вот t восьмом
[52:45.940 --> 52:51.820]  точке на log tw, да, потому что мы помним, что если мы делаем какой-нибудь successor, predecessor или
[52:51.820 --> 52:59.460]  просто элементарный search, то что мы делаем, то мы говорим, что мы говорим, вот у нас есть вершина,
[52:59.460 --> 53:10.980]  да, log tn, да, согласен, то, значит, у нас есть вот эти вот товарищи r1, r2, r3 и так далее, да,
[53:10.980 --> 53:26.020]  и, ну ладно, не r, там, допустим, плюс-минус t, вот, ну, помните, оно же там не фиксировано, да, вот,
[53:26.020 --> 53:34.220]  вот, так вот такая, помните, да, борода такая, вот, мы, значит, среди этих r-ок найти, должны
[53:34.220 --> 53:39.620]  найти вот по нашему x между какими r-ками он находится и, собственно, отправится в соответствующие
[53:39.620 --> 53:47.900]  дерева, кодовое слово, найти, между какими r-ками он находится, нет, то дерево, нет, ну, допустим,
[53:47.900 --> 54:00.740]  нет, ну, не важно, нет, знаете, время построения дерева нас сейчас не особо волнует, потому что,
[54:00.740 --> 54:05.420]  ну, в конце концов, мы можем эти все, все ключи, нам же, раз дерево статическое, то есть, все ключи
[54:05.420 --> 54:11.180]  нам даны заранее, поэтому, что мы в таком случае делаем, ну, давайте отсортируем эти числа, за какую
[54:11.260 --> 54:34.460]  точку мы умеем сортировать? Да. Нет, нет, радикс, сам себе радикс это nw, nlog w это кирпатик sort, вот, а лучше,
[54:34.460 --> 54:35.200]  ну, а лучше мы, как флаз, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, а лучше вы как флаз, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да да, да, да, да да, да, да, да, да, да, да, да да, да, да, да, да, да да, да, да, да, да да, да да, да, да, да, да да да, да, да, да да, да, да да, да да да, да, да да да, да
[55:04.460 --> 55:09.140]  Не, ну что, N? Не, ну 8. может это не очень, но тем не менее.
[55:09.140 --> 55:15.140]  Н log N поделить на log W.
[55:15.140 --> 55:18.140]  Ну да, N log N поделить на log W.
[55:18.140 --> 55:21.140]  Ну ладно, пусть даны пока вот это все равно.
[55:21.140 --> 55:27.140]  Нет, ну тут дальше можно задуматься, а можем ли мы отсортировать log W чисел.
[55:27.140 --> 55:32.140]  Вот это W биток за от их количества.
[55:32.820 --> 55:41.820]  Но я подозреваю, конечно, что...
[55:41.820 --> 55:43.820]  Нет, наоборот.
[55:43.820 --> 55:47.820]  Ну что-нибудь подобное видеть, потому что тут вся наука на самом деле сейчас будет об этом.
[55:47.820 --> 55:54.820]  То есть если у нас элементов не слишком много, то есть там логарифом в какой-нибудь степени, то мы все можем сделать за 1.
[55:54.820 --> 55:57.820]  То есть у нас...
[55:58.500 --> 56:03.500]  А вот ситуация, потому что у вас будет какая-нибудь ситуация в духе, что у вас есть структура данных,
[56:03.500 --> 56:10.500]  которая хочет вставлять, удалять, искать саксессор-предсессор или искать минимум еще в Atomic Hippie будет.
[56:10.500 --> 56:16.500]  И ставка у нас будет такая, мы очень хотим, и предположим нам фантастически повезло,
[56:16.500 --> 56:20.500]  что элементов не более чем log N в какой-нибудь степени.
[56:20.500 --> 56:25.500]  Тоже вот 1.5 или 1.4.
[56:26.180 --> 56:32.180]  Это имеет отношение к W, потому что, помните, у нас же вообще предположение...
[56:32.180 --> 56:36.180]  То есть у нас же N и W не совсем независимы друг от друга.
[56:36.180 --> 56:41.180]  То есть мы помним, что N на самом деле должно быть меньше, чем 2 в степени W, например.
[56:41.180 --> 56:44.180]  Или то же самое, что log N меньше, чем W.
[56:44.180 --> 56:52.180]  Поэтому мы понимаем, что log N может быть достаточно серьезным.
[56:52.860 --> 56:56.860]  Если у нас элементов мало, то хочется, чтобы это было за O от единицы.
[56:56.860 --> 56:59.860]  Не за O от мало, а за O от единицы.
[56:59.860 --> 57:03.860]  И потом на этот логарифм мы будем везде делить.
[57:03.860 --> 57:09.860]  Основная идея Atomic Hippie именно такая, а сегодня мы явно до этого доживем.
[57:09.860 --> 57:15.860]  Не полностью, полностью не обещаю.
[57:16.540 --> 57:22.540]  Идея такая, но если мы в тупую эти эрки храним...
[57:22.540 --> 57:27.540]  Построение там, это уже вопрос второй, и я автора в статьи тоже не сильно волновал.
[57:27.540 --> 57:33.540]  Может я не прав, могу прислать статью.
[57:33.540 --> 57:38.540]  Хотя вроде это не статья, это конспект.
[57:38.540 --> 57:42.540]  Ну, конспект. Ну, не важно.
[57:43.220 --> 57:46.220]  Ну, кстати, это есть, более-то там есть ссылка на эту статью.
[57:46.220 --> 57:49.220]  И там даже есть еще, вот, кстати, есть уж отличие, что да, есть динамическая версия,
[57:49.220 --> 57:53.220]  в которой ко всем этим осим-точкам придется добавить log log N.
[57:53.220 --> 57:57.220]  Вот, красота.
[57:57.220 --> 58:00.220]  Log N, не log W.
[58:00.220 --> 58:03.220]  Именно log log N.
[58:03.220 --> 58:06.220]  А вот, по ходу, за столько же.
[58:06.900 --> 58:10.900]  Что?
[58:10.900 --> 58:14.900]  Нет, log log N, заведомо, лучше, чем log log N.
[58:14.900 --> 58:18.900]  Вот.
[58:18.900 --> 58:22.900]  Вот.
[58:22.900 --> 58:24.900]  Это другой пример.
[58:24.900 --> 58:27.900]  Так, значит, смотрите, эрка миша.
[58:27.900 --> 58:30.900]  Ну, теперь вот, единственная наша мечта, теперь, что
[58:31.580 --> 58:35.580]  Соксессор-предесессор, конечно, для этих эрок, хочется считать за O от единицы.
[58:35.580 --> 58:39.580]  То есть, если мы научимся его считать за O от единицы,
[58:39.580 --> 58:42.580]  то тогда что у нас произойдет?
[58:42.580 --> 58:45.580]  Тогда мы, соответственно, действительно будем в каждой вершине работать за O от единицы.
[58:45.580 --> 58:48.580]  И таким образом, этот log N действительно поделится на log W.
[58:48.580 --> 58:51.580]  И никакие вот дополнительные вещи домножаться не будет.
[58:55.580 --> 58:57.580]  Вот, понятная идея.
[58:57.580 --> 59:00.580]  То есть, таким образом, по большому счету,
[59:01.260 --> 59:04.260]  нам требуется с вами сделать следующее.
[59:04.260 --> 59:07.260]  Нам с вами потребуется сделать,
[59:07.260 --> 59:12.260]  то есть, нам с вами потребуется сделать вот тот же самый черный ящик.
[59:14.260 --> 59:18.260]  То есть, такое вот, ми, так сказать, мини-фьюжн-три такое, да?
[59:18.260 --> 59:21.260]  Чтобы никаких инсортов и дилитов не было.
[59:21.260 --> 59:24.260]  Но при этом, что все работает за O от единицы,
[59:24.260 --> 59:28.260]  но в предположении, что N, значит, там меньше либо больше,
[59:28.940 --> 59:32.940]  значит, там меньше либо равно, чем W в степени 1 на 5.
[59:34.940 --> 59:36.940]  Секунду.
[59:36.940 --> 59:38.940]  Да.
[59:38.940 --> 59:41.940]  У нас, мы решаем тренируемую версию,
[59:41.940 --> 59:44.940]  потому что у нас бы дерево полностью заблокировано,
[59:44.940 --> 59:47.940]  и в каждой вершине не более, чем t элемент.
[59:48.940 --> 59:50.940]  Ну, почему-то.
[59:50.940 --> 59:53.940]  Потому что надо было доходить до 2-й, 3-й подержки.
[59:53.940 --> 59:54.940]  Именно это и спаси.
[59:54.940 --> 59:55.940]  Ну да.
[59:55.940 --> 59:57.940]  Нет, ну по большому счету, да.
[59:58.620 --> 01:00:00.620]  Ну, на самом деле, да.
[01:00:00.620 --> 01:00:02.620]  Ну, там оно будет не происходить W,
[01:00:02.620 --> 01:00:05.620]  потому что, понятно, брейчен фактор может быть, на самом деле,
[01:00:05.620 --> 01:00:07.620]  одна вторая там на W и так далее.
[01:00:07.620 --> 01:00:08.620]  Вот.
[01:00:08.620 --> 01:00:10.620]  Ну, как всегда, мы, как говорится, мы это,
[01:00:10.620 --> 01:00:14.620]  верные рыцари асимптотики, собственно, не заморачивайте.
[01:00:17.620 --> 01:00:19.620]  Да, да, да, да, да, да, да.
[01:00:19.620 --> 01:00:21.620]  Мы не только рыцари, но еще и зануды.
[01:00:21.620 --> 01:00:23.620]  Да, да, да, мы помним об этом.
[01:00:23.620 --> 01:00:24.620]  Обязательно, обязательно.
[01:00:24.620 --> 01:00:25.620]  Без этого никуда.
[01:00:25.620 --> 01:00:27.620]  Но в данном случае, но это не к этому случаю.
[01:00:28.300 --> 01:00:29.300]  Вот.
[01:00:32.300 --> 01:00:33.300]  Так что вот.
[01:00:33.300 --> 01:00:34.300]  Хорошо.
[01:00:34.300 --> 01:00:35.300]  Значит, далее.
[01:00:37.300 --> 01:00:38.300]  Вот.
[01:00:38.300 --> 01:00:39.300]  Значит, итак.
[01:00:39.300 --> 01:00:44.300]  Значит, за счет чего мы попытаемся себе облегчить жизнь?
[01:00:55.300 --> 01:00:56.300]  Именно.
[01:00:56.980 --> 01:00:57.980]  То есть, вот такая.
[01:00:57.980 --> 01:00:59.980]  То есть, у нас, в принципе, вот такая ставка.
[01:00:59.980 --> 01:01:02.980]  То есть, мы говорим, что если мы умеем решать
[01:01:02.980 --> 01:01:04.980]  завод единицы до вот какого-то n,
[01:01:04.980 --> 01:01:06.980]  то вот до какого-то момента,
[01:01:06.980 --> 01:01:08.980]  то тогда мы можем, как бы,
[01:01:08.980 --> 01:01:11.980]  тогда вот высоту дерева мы можем брать не log n,
[01:01:11.980 --> 01:01:13.980]  а log n поделить на, собственно,
[01:01:13.980 --> 01:01:16.980]  log того, что у вас тут реально будет.
[01:01:18.980 --> 01:01:20.980]  То есть, вот такая оптимизация.
[01:01:20.980 --> 01:01:22.980]  Можно один вопрос?
[01:01:22.980 --> 01:01:23.980]  Э.
[01:01:23.980 --> 01:01:24.980]  Э.
[01:01:25.660 --> 01:01:29.660]  Мы считаем память, мы считаем количество w видных ячеек.
[01:01:29.660 --> 01:01:31.660]  Да.
[01:01:31.660 --> 01:01:33.660]  Но w не константа.
[01:01:35.660 --> 01:01:37.660]  Какого константа?
[01:01:37.660 --> 01:01:39.660]  Ну, потому что ты можешь менять систему.
[01:01:39.660 --> 01:01:42.660]  Почему мы не считаем количество zbit?
[01:01:43.660 --> 01:01:44.660]  Ну, вот.
[01:01:44.660 --> 01:01:46.660]  Потому что zbit ему надо будет быть.
[01:01:46.660 --> 01:01:47.660]  Подожди.
[01:01:47.660 --> 01:01:48.660]  Ты вообще понял, что ты ответил?
[01:01:48.660 --> 01:01:49.660]  Сейчас.
[01:01:51.660 --> 01:01:53.660]  Да, мы работаем быстро с w-видных ячеек.
[01:01:54.340 --> 01:01:55.340]  Правильно.
[01:01:55.340 --> 01:01:56.340]  Это хорошо.
[01:01:56.340 --> 01:01:59.340]  Но если у нас система, для которой w...
[01:02:01.340 --> 01:02:02.340]  Сейчас.
[01:02:02.340 --> 01:02:04.340]  Если мы считаем w не константой,
[01:02:04.340 --> 01:02:08.340]  то n bit-ов и n w bit-ных чисел
[01:02:08.340 --> 01:02:11.340]  это разные ассинтотики по памяти.
[01:02:15.340 --> 01:02:17.340]  Ну, хороший вопрос, конечно, действительно.
[01:02:18.340 --> 01:02:20.340]  На самом деле, хороший вопрос.
[01:02:20.340 --> 01:02:21.340]  Называется так.
[01:02:22.020 --> 01:02:24.020]  Ну, к сожалению, более продвинутого ответа,
[01:02:24.020 --> 01:02:25.020]  чем так жизнь сложилась.
[01:02:25.020 --> 01:02:26.020]  К сожалению, я ответить не могу.
[01:02:26.020 --> 01:02:28.020]  У нас здесь какая-то наука.
[01:02:28.020 --> 01:02:29.020]  Я так понимаю.
[01:02:29.020 --> 01:02:30.020]  Есть.
[01:02:30.020 --> 01:02:31.020]  Считаем.
[01:02:31.020 --> 01:02:32.020]  И оптимизируем.
[01:02:32.020 --> 01:02:34.020]  Пытаемся оптимизировать w раз.
[01:02:34.020 --> 01:02:36.020]  Считаем, что w это охренеть как много.
[01:02:37.020 --> 01:02:39.020]  Забиваем на него память.
[01:02:39.020 --> 01:02:43.020]  Ну, потому что это будет единица памяти.
[01:02:43.020 --> 01:02:44.020]  Такая.
[01:02:47.020 --> 01:02:49.020]  Это же не константа.
[01:02:49.700 --> 01:02:52.700]  Они ее, точнее, мистически делают не константой.
[01:02:52.700 --> 01:02:54.700]  Нет, она же константа.
[01:02:54.700 --> 01:02:56.700]  Она константа как минимум в том плане,
[01:02:56.700 --> 01:02:58.700]  что с точки зрения времени
[01:02:58.700 --> 01:03:00.700]  мы с ними работаем за 1.
[01:03:03.700 --> 01:03:04.700]  Вот.
[01:03:04.700 --> 01:03:05.700]  То есть, тут такое.
[01:03:05.700 --> 01:03:07.700]  Нет, я понимаю, что по времени,
[01:03:07.700 --> 01:03:09.700]  если мерить память в байтах,
[01:03:09.700 --> 01:03:11.700]  то от того, что мы увеличили w,
[01:03:11.700 --> 01:03:13.700]  количество байт от этого меньше не стало.
[01:03:13.700 --> 01:03:14.700]  Да.
[01:03:15.700 --> 01:03:16.700]  Но тем не менее.
[01:03:16.700 --> 01:03:17.700]  Так вот.
[01:03:18.380 --> 01:03:19.380]  Значит, смотрите.
[01:03:19.380 --> 01:03:21.380]  Значит, что у нас в этой науке?
[01:03:21.380 --> 01:03:22.380]  Значит, дальше идет.
[01:03:22.380 --> 01:03:25.380]  Итак, значит, n меньше либо меньше w в степени 1 на 5.
[01:03:26.380 --> 01:03:28.380]  Итак, значит, смотрите.
[01:03:29.380 --> 01:03:30.380]  Ну вот.
[01:03:31.380 --> 01:03:33.380]  Но теперь придется копнуть уже в самете.
[01:03:33.380 --> 01:03:35.380]  То есть, сейчас мы будем очень жестко
[01:03:35.380 --> 01:03:37.380]  пользоваться тем, что это целые числа.
[01:03:37.380 --> 01:03:40.380]  Даже не просто целые числа, а битые числа.
[01:03:42.380 --> 01:03:44.380]  Причем, смотрите, как интересно.
[01:03:44.380 --> 01:03:46.380]  Сами в чисел у нас
[01:03:47.060 --> 01:03:49.060]  очень-очень-очень сильно меньше,
[01:03:49.060 --> 01:03:51.060]  чем количество бит в этих числах.
[01:03:53.060 --> 01:03:54.060]  Что это значит?
[01:03:55.060 --> 01:03:57.060]  А значит, это маленькую приятную вещь.
[01:03:57.060 --> 01:03:59.060]  Что на самом деле, если мы хотим
[01:04:00.060 --> 01:04:02.060]  там, допустим, сравнивать как-то
[01:04:02.060 --> 01:04:04.060]  между собой эти числа, хотя бы между собой,
[01:04:05.060 --> 01:04:07.060]  то на самом деле нам для них
[01:04:07.060 --> 01:04:09.060]  не надо хранить все биты.
[01:04:10.060 --> 01:04:12.060]  Ну потому что, помните, вообще два числа,
[01:04:12.060 --> 01:04:14.060]  если прям в тупую сравнивать,
[01:04:14.060 --> 01:04:16.060]  то мы это делаем как бы типа
[01:04:16.740 --> 01:04:18.740]  за от единицы, то есть за от w.
[01:04:18.740 --> 01:04:20.740]  Идем первые биты сравниваем,
[01:04:20.740 --> 01:04:22.740]  то второй, третий и так далее.
[01:04:23.740 --> 01:04:25.740]  Нет, понятно, что в реальном компьютере
[01:04:25.740 --> 01:04:27.740]  это будет за от единицы делать.
[01:04:28.740 --> 01:04:30.740]  Но теперь мы попробуем
[01:04:30.740 --> 01:04:32.740]  воспользоваться тем,
[01:04:32.740 --> 01:04:34.740]  что у нас, что на самом деле,
[01:04:34.740 --> 01:04:36.740]  если у нас чисел w
[01:04:36.740 --> 01:04:38.740]  в степени 1 на 5,
[01:04:38.740 --> 01:04:40.740]  то на самом деле,
[01:04:40.740 --> 01:04:42.740]  чтобы сравнивать числа,
[01:04:42.740 --> 01:04:44.740]  по крайней мере, между собой,
[01:04:45.420 --> 01:04:47.420]  нужно от них знать только порядка w
[01:04:47.420 --> 01:04:49.420]  в степени 1 на 5.
[01:04:49.420 --> 01:04:51.420]  Да нет, 1 на 5.
[01:04:51.420 --> 01:04:53.420]  А вот почему.
[01:04:53.420 --> 01:04:55.420]  Потому что, смотрите, вот жили были
[01:04:55.420 --> 01:04:57.420]  наши длинные относительно числа.
[01:05:05.420 --> 01:05:07.420]  Нет, мы алгоритм себе вообразили.
[01:05:07.420 --> 01:05:09.420]  Сейчас вы увидите, что я имею в виду.
[01:05:10.100 --> 01:05:12.100]  Просто размышляем.
[01:05:18.100 --> 01:05:20.100]  То есть мы замечаем следующее.
[01:05:20.100 --> 01:05:22.100]  Если мы рассматриваем, то мы замечаем,
[01:05:22.100 --> 01:05:24.100]  что некоторое время все эти числа,
[01:05:24.100 --> 01:05:26.100]  у них первый бит одинаковый,
[01:05:26.100 --> 01:05:28.100]  второй бит одинаковый,
[01:05:28.100 --> 01:05:30.100]  и в какой-то момент
[01:05:30.100 --> 01:05:32.100]  произошло чудо.
[01:05:32.100 --> 01:05:34.100]  Какие-то биты тут
[01:05:34.100 --> 01:05:36.100]  неожиданно стали
[01:05:36.100 --> 01:05:38.100]  нулем, а какие-то единицы.
[01:05:40.100 --> 01:05:42.100]  Значит, мы говорим, что
[01:05:42.100 --> 01:05:44.100]  этот бит
[01:05:44.100 --> 01:05:46.100]  интересный для нас.
[01:05:51.100 --> 01:05:53.100]  Дальше, действительно,
[01:05:53.100 --> 01:05:55.100]  если мы вот так рекурсивно идем,
[01:05:55.100 --> 01:05:57.100]  то дальше тоже мы замечаем,
[01:05:57.100 --> 01:05:59.100]  что, допустим, некоторое время 0, 0, 0,
[01:05:59.100 --> 01:06:01.100]  1, 1, 1.
[01:06:10.100 --> 01:06:12.100]  Ну, типа того.
[01:06:12.100 --> 01:06:14.100]  И теперь тогда мы вот утверждаем,
[01:06:14.100 --> 01:06:16.100]  что вот этот бит будет интересным.
[01:06:16.100 --> 01:06:18.100]  Да, он по-любому будет интересным.
[01:06:18.100 --> 01:06:20.100]  У нас не будет понятия
[01:06:20.100 --> 01:06:22.100]  интересный бит для конкретных каких-то там чисел.
[01:06:22.100 --> 01:06:24.100]  У нас просто есть понятие интересное.
[01:06:28.100 --> 01:06:30.100]  Да, заметим, что
[01:06:30.100 --> 01:06:32.100]  этот бит от этого
[01:06:32.100 --> 01:06:34.100]  интересным не становится.
[01:06:34.100 --> 01:06:36.100]  Спасибо за замечание, это очень важно.
[01:06:39.420 --> 01:06:41.420]  Ну, смотрите, дело в том, что
[01:06:41.420 --> 01:06:43.420]  вообразить себе
[01:06:43.420 --> 01:06:45.420]  это нужно примерно следующим образом.
[01:06:45.420 --> 01:06:47.420]  В общем, короче,
[01:06:47.420 --> 01:06:49.420]  бит является интересным,
[01:06:49.420 --> 01:06:51.420]  если на соответствующей высоте,
[01:06:51.420 --> 01:06:53.420]  если бы строили битовый борт,
[01:06:53.420 --> 01:06:55.420]  то на этой высоте происходила бы развилка.
[01:07:03.420 --> 01:07:05.420]  Тут вот как интересно будет.
[01:07:05.420 --> 01:07:07.420]  Тут будет 0, 0, 0, 1, 1, 1,
[01:07:07.420 --> 01:07:09.420]  0, 1, 11 .
[01:07:09.420 --> 01:07:11.420]  Тогда я объявляю, что этот бит
[01:07:11.420 --> 01:07:13.420]  тоже будет интересным.
[01:07:13.420 --> 01:07:15.420]  Потому что вот тут теперь раздел пошел.
[01:07:15.420 --> 01:07:17.420]  Тут пошел раздел и вот тут раздел пошел.
[01:07:34.140 --> 01:07:36.140]  Тут нам сейчас придется
[01:07:36.140 --> 01:07:41.900]  страдать и чуть-чуть вот так сколько у нас там времени то нормально у нас по
[01:07:41.900 --> 01:07:58.700]  времени да вот ну вообще 5 но не ваш хотя хотя да нету значит смотреть ну
[01:07:58.700 --> 01:08:02.700]  тут нет ну я даже так закончу праймере то лекция на том что я просто скажу
[01:08:02.700 --> 01:08:07.580]  программу действия потом мы ее будем успешно реализовывать следующие две пары
[01:08:07.580 --> 01:08:14.740]  нет но может и меньше я не знаю значит значится поехали значит ну вот то есть
[01:08:14.740 --> 01:08:20.020]  вот такие вот у нас биты вот мы их даже там как-нибудь назовем кстати так
[01:08:20.020 --> 01:08:23.580]  сейчас уточню даже в каком порядке в каком порядке мы их назовем на всякий
[01:08:23.580 --> 01:08:36.140]  случай ну вот хотя нет нормально нет но это нет пока это важное определение то
[01:08:36.140 --> 01:08:40.380]  есть это вот будут у нас такие интересные биты то есть ну там где-то у
[01:08:40.380 --> 01:08:44.500]  нас еще явно будет там какие-то пары интересных бит то есть у нас будут вот
[01:08:44.500 --> 01:08:54.820]  эти вот интересные биты очень вот интересные биты они для но вот то есть
[01:08:54.820 --> 01:09:00.820]  они будут соответственно так и назовем b 0 b 1 b 2 и так далее и количество этих
[01:09:00.820 --> 01:09:07.420]  бит у нас будет там r это будет последний бр минус 1 r там соответственно можно
[01:09:07.420 --> 01:09:14.060]  сказать строка меньше чем соответственно строка меньше чем дабл и
[01:09:14.060 --> 01:09:26.380]  в степени 1 5 логично да то есть даже не от а вот прям строк ну давайте вот пусть
[01:09:26.380 --> 01:09:44.140]  они вот так да в степени 1 5 в случае чем подгоним константу всегда а потому что
[01:09:44.140 --> 01:09:50.900]  скажем ну потому что смотрите потому что каждому интересному биту вот в вот
[01:09:50.900 --> 01:09:58.500]  этом вот дереве на котором висят м-листов да нет а в степени 1 5 ну потому что мы
[01:09:58.500 --> 01:10:05.100]  тут сказали что я то есть на самом деле да правильно там было на письмо нет нет
[01:10:05.100 --> 01:10:28.260]  там скажет так сейчас увидите там будет причина почему это именно 1 5 но вот не
[01:10:28.260 --> 01:10:32.860]  так смотреть самое интересное значит смотрите то есть нам понадобится не столько
[01:10:33.020 --> 01:10:40.740]  интересные биты нам понадобится из каждого из этих чисел делать вот так сказать скетч ну потому
[01:10:40.740 --> 01:10:46.380]  что заметим следующее что есть у нас вот эти числа там допустим там какой-нибудь x это будет
[01:10:46.380 --> 01:10:56.980]  x нулевое это x первая это индекс если что да ну потому что в дереве с n листами внутренних
[01:10:57.980 --> 01:11:20.100]  мало кто знает но ну если не знаю какая дискетка у вас была наверное где я тут dfs
[01:11:20.100 --> 01:11:26.340]  пользуюсь я помню что мы не знаем dfs мы там ничего не знаем вот минус новым узнаем явно
[01:11:26.340 --> 01:11:41.860]  скоро вот да как говорится идея заключается в том что как говорится я прогрю меня проглючила
[01:11:41.860 --> 01:11:51.260]  вот только вот так вот так вот дело в том что значит почему я сейчас пишу сверху потому что
[01:11:51.260 --> 01:11:57.700]  снизу я хочу индексировать биты соответствующего числа логично так так так так так так давайте все
[01:11:57.700 --> 01:12:10.660]  это уберу мы все равно отсюда уйдем так смотрите сейчас красота будет значит будет у нас такая
[01:12:10.660 --> 01:12:20.620]  маленькая приятность приятность будет заключаться в том что то есть действительно заметим что каждому
[01:12:20.620 --> 01:12:30.820]  x то есть если у нас есть вот число x которая состоит из там соответственно w битов то мы ему
[01:12:30.820 --> 01:12:45.900]  можем поставить то что будем называть sketch sketch от x а видите почему я там индексы сверху
[01:12:45.900 --> 01:12:57.500]  поставил так вот значит теперь у каждого и по каждому x я поставлю следующие значит
[01:12:57.500 --> 01:13:06.140]  меня на самом деле будут интересовать только x значит x вот и один очень короче говоря интересные
[01:13:06.140 --> 01:13:25.340]  вот ну ой как сказать как сказал штирлиц как-то трудно ответить на ваш вопрос до конца честно
[01:13:25.340 --> 01:13:29.140]  пас так и тем честнее я вам отвечу тем больше мужицом могу вам показаться
[01:13:29.140 --> 01:13:40.620]  x число бит w битовое число это его бит
[01:13:40.620 --> 01:14:00.980]  так вот значит смотрите значит давайте теперь значит на значит на уровне идеи значит просто
[01:14:00.980 --> 01:14:10.380]  интерес будет такой нам очень захочется ну просто в идеале было бы неплохо так хочется научиться
[01:14:10.380 --> 01:14:19.500]  то есть но опять заметил что пока имели сами вот эти вот иксы да можно сравнивать по скетч вот
[01:14:19.500 --> 01:14:28.220]  вытекает такое мистическое утверждение то есть если я вот беру именно числа вот оттуда да то
[01:14:28.220 --> 01:14:41.700]  тогда x это меньше чем x житое тогда и только тогда когда скетч от x этого меньше чем скетч
[01:14:41.700 --> 01:14:53.820]  от x жито вот такая красота
[01:14:58.220 --> 01:15:01.620]  вот так вот
[01:15:01.620 --> 01:15:18.620]  ну хорошо хорошо если так ну да ну да так в данном случае да и это хорошо меньше n
[01:15:18.620 --> 01:15:29.740]  которая меньше хорошо пожалуйста вот то перс заметим но здесь вот есть очень тонкий момент то есть
[01:15:29.740 --> 01:15:38.020]  это верно только для конкретных иксов да то есть помните да что интересные биты они брались из
[01:15:38.020 --> 01:15:49.700]  того что у нас есть конкретное n минус один число правда да даже не минус один даже вот вот поэтому
[01:15:49.700 --> 01:15:55.900]  тут начали но но тем не менее значит у нас будет мечта у нас будет мечта хранить эти скетчи в этом
[01:15:55.900 --> 01:16:05.620]  что ноты то есть каким-то образом действительно эти скетчи хранить и попробовать за отъедение
[01:16:05.620 --> 01:16:12.340]  и пробовать за там как-то от единицы но даже там в игре фасте хранить их конечно не получится
[01:16:12.340 --> 01:16:18.260]  потому что игре фаст это прощаю от единицы сразу там будет логарифом там видимо логарифом всего
[01:16:18.260 --> 01:16:25.420]  чего угодно но не единиц вот но тем не менее очень хочется создать действительно такие вот маленькие
[01:16:25.420 --> 01:16:33.980]  числа и в них вот ближайший x искать то есть просто к сожалению неверно что да вот то есть но нам
[01:16:33.980 --> 01:16:39.580]  бы конечно очень хотелось бы действительно найти то есть помните да вот по заданному какой-нибудь
[01:16:39.580 --> 01:16:48.140]  произвольному но от балды там я не знаю игроку то есть мы хотим найти там допустим такое к что
[01:16:48.140 --> 01:16:56.860]  x катая меньше либо там допустим меньше игрока меньше чем x в степени там там меньше либо
[01:16:57.860 --> 01:17:11.980]  ну хотелось бы что-то такое правда да это верхний индекс это это наша мечта да ну зачем мы все это
[01:17:11.980 --> 01:17:18.340]  вообще забабахиваем да то есть напоминает что мы вообще хотим по игроку за от единицы находить
[01:17:18.340 --> 01:17:28.580]  между какими и сами он лежит помните да это наша мечта вот вот ну и соответственно действительно
[01:17:28.580 --> 01:17:35.740]  мы действительно хочется применить такую красивую идею что соответственно это просто надо просто
[01:17:35.740 --> 01:17:55.140]  сравнивать по скетчам yeah that's the problem yeah yeah unfortunate да да да а еще надо это
[01:17:55.140 --> 01:18:02.380]  говорить более однотонным голосом и тогда по нот и тогда это будет пучить как максимально
[01:18:02.380 --> 01:18:12.660]  пафос надо вот но вот но вот то есть да к сожалению у нас да вот такая проблема
[01:18:12.660 --> 01:18:21.740]  но тем не менее то есть очень ну просто если-то идея в том что очень хотелось бы сводить задачу
[01:18:21.740 --> 01:18:28.780]  к поиска лавербаунда но там в нашем случае а пербаунда к задачу а пербаунда к а пербаунду
[01:18:28.780 --> 01:18:38.900]  на скетчах чего но это пока но вот но тут но тут проблем но тут как всегда две проблемы во
[01:18:38.900 --> 01:18:42.740]  первых как это делать на скетчах то есть как бы на скетчах почему идея ну потому что идея в том
[01:18:42.740 --> 01:18:48.180]  что да у нас совсем что скетчи у них теперь еще и бит дабл и в степени 1 5 поэтому есть надежда
[01:18:48.180 --> 01:19:00.380]  что мы что мы умеем это делать круто но вот но тут я вам даже ладно давайте так для интереса я
[01:19:00.380 --> 01:19:05.500]  вам даже эту интригу спалю как мы это будем делать и так представьте себе что у нас все
[01:19:05.500 --> 01:19:10.980]  иксы мелкие у нас все иксы то есть у нас все иксы имеют размер там не более чем дабл и в степени
[01:19:10.980 --> 01:19:20.740]  1 5 мелкие да именно иксы именно иксы то есть и так вот давайте все отчеркнем это все то есть
[01:19:20.740 --> 01:19:30.660]  это как бы да просто то есть это так для затравочки да чтобы просто понять не волнуйтесь там все все
[01:19:30.660 --> 01:19:36.180]  в итоге сойдется давайте все представим что эти все там 0 меньше либо равно x 0 меньше x 1 меньше
[01:19:36.180 --> 01:19:45.780]  и так далее меньше x n минус 1 и все они тоже меньше чем дабл и в степени 1 5 и нам очень и нам
[01:19:45.780 --> 01:19:53.420]  вот задан вот какой-нибудь игрок и мы очень хотим найти действительно такое ка вот перепишу так и быть
[01:19:53.420 --> 01:20:02.900]  так вот если прям чист то есть что значит что они очень мелкие это означает маленькую про эту
[01:20:02.900 --> 01:20:12.020]  вещь что я их в принципе могу хранить в одном дабл юбитом числе прям все но я с конкретинировать
[01:20:12.020 --> 01:20:26.500]  например даже так да но на самом деле я вам так забирать вперед скажу к сожалению да да да нет
[01:20:26.500 --> 01:20:30.940]  но там в 2 5 но там вот вы увидите почему там 1 5 то есть для того что я сейчас говорю в принципе
[01:20:31.540 --> 01:20:38.820]  могло одной второй хватить но как бы просто там много еще проблем будет поэтому там придет то
[01:20:38.820 --> 01:20:43.660]  есть конкретно вот этот скетч нам еще и там не там хранить на науке не уверена что это возможно
[01:20:43.660 --> 01:20:50.140]  в принципе но вот да вот реально да прямо до такой степени да наука реально реально подозревает что
[01:20:50.140 --> 01:20:58.300]  это может быть невозможно в принципе искать там искать скетч как-то адекватно видимо по там
[01:20:58.300 --> 01:21:03.300]  Ну, видимо, там имеется в виду, что предположим, что вы хотите искать скетч, и вам там заданы какие-то произвольные к бит.
[01:21:03.300 --> 01:21:07.300]  Да, но мы-то не будем.
[01:21:07.300 --> 01:21:14.300]  Но, как бы, поэтому мы себе, если мы скетч добавим там несколько более удобных для нас бит, то нас это устроит.
[01:21:14.300 --> 01:21:16.300]  Вот, и мы их и добавим.
[01:21:16.300 --> 01:21:21.300]  И будет у нас теперь не w в степени 1-5, а w в степени 4-5, но это вот уже...
[01:21:21.300 --> 01:21:27.300]  Значит, смотрите, смотрите, сейчас все будет.
[01:21:27.300 --> 01:21:31.300]  Так вот. Не, не паникуйте.
[01:21:31.300 --> 01:21:33.300]  Так вот, смотрите.
[01:21:33.300 --> 01:21:35.300]  Значит, как тогда их искать?
[01:21:35.300 --> 01:21:42.300]  У нас это есть. Давайте представим себе, что все они имеют фиксированную длину.
[01:21:42.300 --> 01:21:45.300]  А, да, я неправильно написал.
[01:21:45.300 --> 01:21:49.300]  Правильно написать 2 в степени w в степени.
[01:21:50.300 --> 01:21:53.300]  Вот, да. Во-первых, да, мы это имеем в виду.
[01:21:53.300 --> 01:21:56.300]  То есть давайте я представим, так вот, идея будет такая.
[01:21:56.300 --> 01:22:02.300]  Мы запишем, так вот, мы запишем великую маску.
[01:22:02.300 --> 01:22:07.300]  Теремия фирма.
[01:22:07.300 --> 01:22:10.300]  Теремия фирма. Маска.
[01:22:10.300 --> 01:22:16.300]  Теремия фирма. Маска. Великая. Теремия фирма. Маска.
[01:22:16.300 --> 01:22:21.300]  Так вот, значит, идея такая.
[01:22:30.300 --> 01:22:32.300]  Вот.
[01:22:34.300 --> 01:22:37.300]  Значит, смотрите, значит, идея такая.
[01:22:37.300 --> 01:22:43.300]  Я создам великую маску, где запишу вот такое число.
[01:22:43.300 --> 01:22:45.300]  Вот.
[01:22:45.300 --> 01:22:47.300]  Даже мало как-то.
[01:22:47.300 --> 01:22:51.300]  Ну, я говорю, в будущем их будет w в степени 4,5.
[01:22:51.300 --> 01:22:53.300]  Поэтому там придется...
[01:22:53.300 --> 01:22:55.300]  Кого-то.
[01:22:55.300 --> 01:22:57.300]  Ну, число. Вот.
[01:22:57.300 --> 01:23:01.300]  Это для нас просто очень важно.
[01:23:01.300 --> 01:23:03.300]  Так, ну вот и так далее.
[01:23:03.300 --> 01:23:05.300]  Вот.
[01:23:05.300 --> 01:23:07.300]  То есть вот такая вот у меня масочка.
[01:23:07.300 --> 01:23:09.300]  А.
[01:23:11.300 --> 01:23:13.300]  Да.
[01:23:13.300 --> 01:23:16.300]  Но в данном случае их n, которые не превосходят.
[01:23:16.300 --> 01:23:20.300]  Совпадение пока случайное.
[01:23:20.300 --> 01:23:22.300]  Вот. Так вот.
[01:23:22.300 --> 01:23:27.300]  Значит, как мы теперь будем искать апербаут?
[01:23:27.300 --> 01:23:31.300]  Значит, смотрите.
[01:23:31.300 --> 01:23:34.300]  Значит, ну еще, значит, смотрите.
[01:23:34.300 --> 01:23:36.300]  Нет, смотрите, тут сейчас фишка будет такая.
[01:23:36.300 --> 01:23:38.300]  Ну, во-первых, так.
[01:23:38.300 --> 01:23:40.300]  Я еще введу такой.
[01:23:40.300 --> 01:23:43.300]  Маск 1 равно 1,0,0.
[01:23:43.300 --> 01:23:46.300]  Тоже вот их будет w.
[01:23:46.300 --> 01:23:47.300]  Вот.
[01:23:47.300 --> 01:23:49.300]  Одна пятая бит.
[01:23:49.300 --> 01:23:54.300]  То есть 1,0,0,1,0,1,1,0.
[01:23:54.300 --> 01:23:56.300]  Вот.
[01:23:56.300 --> 01:23:58.300]  Но это уж совсем уж полностью.
[01:23:58.300 --> 01:24:00.300]  Так вот.
[01:24:00.300 --> 01:24:02.300]  Теперь. По каждому игроку.
[01:24:02.300 --> 01:24:04.300]  Теперь, если мне приходит запрос игрок.
[01:24:04.300 --> 01:24:06.300]  Тоже мелкое число.
[01:24:06.300 --> 01:24:09.300]  В противном случае у него за 1 апербаунт ищется.
[01:24:09.300 --> 01:24:11.300]  Теперь я делаю так.
[01:24:11.300 --> 01:24:13.300]  Смотрите, какую магию я делаю.
[01:24:13.300 --> 01:24:15.300]  Значит, я по игроку.
[01:24:15.300 --> 01:24:19.300]  Создаю великий маск игр.
[01:24:19.300 --> 01:24:21.300]  Да.
[01:24:25.300 --> 01:24:27.300]  Там запрет подсчет.
[01:24:27.300 --> 01:24:29.300]  Так.
[01:24:29.300 --> 01:24:31.300]  Ладно, давай я сначала скажу чуть ряд.
[01:24:31.300 --> 01:24:33.300]  Потом будем думать, как это.
[01:24:33.300 --> 01:24:35.300]  Идея такая.
[01:24:35.300 --> 01:24:37.300]  Ноль игрок.
[01:24:37.300 --> 01:24:39.300]  Ноль игрок.
[01:24:39.300 --> 01:24:42.300]  Да. Каждый игрок мы записываем как w.
[01:24:42.300 --> 01:24:44.300]  Соответственно, бит.
[01:24:48.300 --> 01:24:50.300]  Подзадача.
[01:24:50.300 --> 01:24:52.300]  Очень слабенькая.
[01:24:52.300 --> 01:24:54.300]  Никак не относящийся.
[01:24:54.300 --> 01:24:56.300]  Где фонарик?
[01:24:56.300 --> 01:24:58.300]  Сами чипы маленькие.
[01:24:58.300 --> 01:25:00.300]  Пока что у нас там мало интересных бит.
[01:25:00.300 --> 01:25:01.300]  Что-то такое.
[01:25:01.300 --> 01:25:03.300]  Здесь у нас задача простая.
[01:25:05.300 --> 01:25:07.300]  Да.
[01:25:16.300 --> 01:25:19.300]  Вот. То есть по каждому игроку я могу создать вот такую штуку.
[01:25:19.300 --> 01:25:22.300]  Но на самом деле я могу создать ее за o от единицы.
[01:25:22.300 --> 01:25:28.300]  Нет, я это могу создать за o от единицы, потому что легко видеть, что я на самом деле y тут просто на что-то домножил.
[01:25:28.300 --> 01:25:30.300]  О, точно.
[01:25:30.300 --> 01:25:32.300]  Там.
[01:25:32.300 --> 01:25:34.300]  Да, на что-то раз оно всегда фиксировано, что приятно.
[01:25:34.300 --> 01:25:36.300]  Да.
[01:25:38.300 --> 01:25:40.300]  Ну, я бы сказал так.
[01:25:40.300 --> 01:25:42.300]  Примерно маска 1, только без, по-моему, последнего блока 0.
[01:25:42.300 --> 01:25:44.300]  Я бы сказал.
[01:25:44.300 --> 01:25:46.300]  Ну, что-то в этом роде.
[01:25:48.300 --> 01:25:50.300]  Так вот.
[01:25:50.300 --> 01:25:52.300]  В чем приятность?
[01:25:52.300 --> 01:25:54.300]  Идея теперь такая.
[01:25:54.300 --> 01:25:56.300]  Что будет,
[01:25:56.300 --> 01:25:58.300]  если я из
[01:25:58.300 --> 01:26:00.300]  маска
[01:26:00.300 --> 01:26:02.300]  вычту
[01:26:04.300 --> 01:26:06.300]  Старыми анекдотами разговариваешь.
[01:26:06.300 --> 01:26:08.300]  Вот.
[01:26:10.300 --> 01:26:12.300]  Вот.
[01:26:12.300 --> 01:26:14.300]  Значит, из этой маски,
[01:26:14.300 --> 01:26:16.300]  глобальной маски,
[01:26:16.300 --> 01:26:18.300]  я вычту маски.
[01:26:18.300 --> 01:26:20.300]  Да, ну вот.
[01:26:20.300 --> 01:26:22.300]  Но, во-первых, давайте внимательно посмотрим,
[01:26:22.300 --> 01:26:24.300]  что произойдет.
[01:26:24.300 --> 01:26:26.300]  Уже кто-то догадывается.
[01:26:26.300 --> 01:26:28.300]  Ну, давайте его снимать.
[01:26:28.300 --> 01:26:30.300]  Не очень.
[01:26:42.300 --> 01:26:44.300]  Вот так.
[01:26:44.300 --> 01:26:46.300]  Значит, смотрите,
[01:26:46.300 --> 01:26:48.300]  что у нас дальше произойдет.
[01:26:50.300 --> 01:26:52.300]  Нет, смотрите.
[01:26:52.300 --> 01:26:54.300]  Не, ребят, не волнуйтесь.
[01:26:54.300 --> 01:26:56.300]  У нас с вами, так как у нас
[01:26:56.300 --> 01:26:58.300]  после перерыва тоже наши пары,
[01:26:58.300 --> 01:27:00.300]  задержали сейчас, можем потом пару
[01:27:00.300 --> 01:27:02.300]  чуть позже начать. Это не проблема.
[01:27:02.300 --> 01:27:04.300]  Нет, зачем?
[01:27:04.300 --> 01:27:06.300]  Вот.
[01:27:06.300 --> 01:27:08.300]  Значит.
[01:27:08.300 --> 01:27:10.300]  Да.
[01:27:10.300 --> 01:27:12.300]  Да.
[01:27:12.300 --> 01:27:14.300]  Но даже если бы оно было больше,
[01:27:14.300 --> 01:27:16.300]  то тогда лавербаунт и пербаунт вы с полпинка нашли.
[01:27:16.300 --> 01:27:18.300]  Правда?
[01:27:18.300 --> 01:27:20.300]  Так что это не идея.
[01:27:20.300 --> 01:27:22.300]  Так что интересный игрок, это, конечно, игрок,
[01:27:22.300 --> 01:27:24.300]  который не более, чем W.
[01:27:24.300 --> 01:27:26.300]  Так вот.
[01:27:26.300 --> 01:27:28.300]  Если мы это вычтем,
[01:27:28.300 --> 01:27:30.300]  значит, заметим, что, вот я тут
[01:27:30.300 --> 01:27:32.300]  не случайно нарисовал вот эти блоки,
[01:27:32.300 --> 01:27:34.300]  то есть, заметим, что при вычитании,
[01:27:34.300 --> 01:27:36.300]  то есть, в каждом блоке это вычитание будет
[01:27:36.300 --> 01:27:38.300]  независимо происходить. Правда?
[01:27:38.300 --> 01:27:40.300]  Ну, то есть, условно, если вы тут
[01:27:40.300 --> 01:27:42.300]  будете вычитать, скажем, вот в этом блоке
[01:27:42.300 --> 01:27:44.300]  побитого, то там никакие переносы
[01:27:44.300 --> 01:27:46.300]  на следующий блок не повлияют. Правда?
[01:27:46.300 --> 01:27:48.300]  И более того, а что интересно,
[01:27:48.300 --> 01:27:50.300]  если Y,
[01:27:50.300 --> 01:27:52.300]  то есть, заметим, что,
[01:27:52.300 --> 01:27:54.300]  если Y, вот пока вот в некоторое
[01:27:54.300 --> 01:27:56.300]  время, Y будет больше, чем вот эти
[01:27:56.300 --> 01:27:58.300]  X. Да?
[01:27:58.300 --> 01:28:00.300]  То есть, будет происходить тогда, в этот момент,
[01:28:00.300 --> 01:28:02.300]  тогда у вас вот эта единичка при
[01:28:02.300 --> 01:28:04.300]  вычитании замениться на ноль. Правда?
[01:28:04.300 --> 01:28:06.300]  Но это если Y больше.
[01:28:06.300 --> 01:28:08.300]  А если в какой-то момент Y стал
[01:28:08.300 --> 01:28:10.300]  меньше либо равен этого X,
[01:28:10.300 --> 01:28:12.300]  то тут единичка останется на месте. Правда?
[01:28:14.300 --> 01:28:16.300]  Тогда,
[01:28:16.300 --> 01:28:18.300]  если вы у этой штуки
[01:28:18.300 --> 01:28:20.300]  возьмете AND,
[01:28:20.300 --> 01:28:22.300]  собственно, маска 1,
[01:28:24.300 --> 01:28:26.300]  вот, то,
[01:28:26.300 --> 01:28:28.300]  то у вас, обратите внимание,
[01:28:28.300 --> 01:28:30.300]  то тогда у вас останутся,
[01:28:30.300 --> 01:28:32.300]  то есть, тогда все это будет там,
[01:28:32.300 --> 01:28:34.300]  что тут при вычитании произошло, будет
[01:28:34.300 --> 01:28:36.300]  зачищено, останутся только вот
[01:28:36.300 --> 01:28:38.300]  эти единички. Причем,
[01:28:38.300 --> 01:28:40.300]  обратите внимание, те
[01:28:40.300 --> 01:28:42.300]  единички, которые, то есть,
[01:28:42.300 --> 01:28:44.300]  единички останутся, причем там и только там,
[01:28:44.300 --> 01:28:46.300]  где были
[01:28:46.300 --> 01:28:48.300]  иксы, которые больше или
[01:28:48.300 --> 01:28:50.300]  равны игрокам. То есть,
[01:28:50.300 --> 01:28:52.300]  да.
[01:28:52.300 --> 01:28:54.300]  Но тогда идея такая. Тогда остается вам
[01:28:54.300 --> 01:28:56.300]  в этом числе
[01:28:56.300 --> 01:28:58.300]  найти самую первую единичку,
[01:28:58.300 --> 01:29:00.300]  то есть, самую старшую единичку.
[01:29:06.300 --> 01:29:08.300]  Там по-разному.
[01:29:08.300 --> 01:29:10.300]  Но там по-разному.
[01:29:10.300 --> 01:29:12.300]  Но на самом деле
[01:29:12.300 --> 01:29:14.300]  мы уже в прошлый раз поверили в этом месте, что
[01:29:14.300 --> 01:29:16.300]  нет, ребят, на самом деле операция
[01:29:16.300 --> 01:29:18.300]  найти старший бит и так уже
[01:29:18.300 --> 01:29:20.300]  там верится, что она умеет завод единицы?
[01:29:20.300 --> 01:29:22.300]  Да. Верится, верится, верится.
[01:29:22.300 --> 01:29:24.300]  Во-первых,
[01:29:24.300 --> 01:29:26.300]  есть отдельная статья,
[01:29:26.300 --> 01:29:28.300]  как это делать завод единицы.
[01:29:32.300 --> 01:29:34.300]  Это, во-первых.
[01:29:34.300 --> 01:29:36.300]  Во-вторых, есть
[01:29:36.300 --> 01:29:38.300]  статья еще, в которой рассказывается, как
[01:29:38.300 --> 01:29:40.300]  это делать завод единицы.
[01:29:40.300 --> 01:29:42.300]  Да.
[01:29:48.300 --> 01:29:50.300]  Да. Ну и в-третьих, да.
[01:29:50.300 --> 01:29:52.300]  Ну и в-третьих, так как их сортированы, то
[01:29:52.300 --> 01:29:54.300]  по факту у нас действительно всего
[01:29:54.300 --> 01:29:56.300]  n вариантов там, ну n плюс
[01:29:56.300 --> 01:29:58.300]  минус 1 вариантов того, чего у нас там реально может
[01:29:58.300 --> 01:30:00.300]  оказаться.
[01:30:10.300 --> 01:30:12.300]  Ну да, но правда у нас
[01:30:12.300 --> 01:30:14.300]  вот как раз близкий шанс, как раз это
[01:30:14.300 --> 01:30:16.300]  без нее обойтись.
[01:30:22.300 --> 01:30:24.300]  Нет, вот сейчас мы им пока не пользуемся.
[01:30:24.300 --> 01:30:26.300]  Обратите внимание, да?
[01:30:26.300 --> 01:30:28.300]  Да.
[01:30:28.300 --> 01:30:30.300]  Ну и в-третьих,
[01:30:30.300 --> 01:30:32.300]  у нас есть
[01:30:32.300 --> 01:30:33.300]  параллельно
[01:30:33.300 --> 01:30:35.300]  параллельно
[01:30:35.300 --> 01:30:37.300]  параллельно
[01:30:37.300 --> 01:30:39.300]  параллельно
[01:30:39.300 --> 01:30:41.300]  Обратите внимание, да?
[01:30:41.300 --> 01:30:43.300]  То есть это пока так, это прикидочная технология.
[01:30:43.300 --> 01:30:45.300]  Вот.
[01:30:45.300 --> 01:30:47.300]  Но пока же, да, то есть обычно
[01:30:47.300 --> 01:30:49.300]  верят, что это можно либо завод единицы найти,
[01:30:49.300 --> 01:30:51.300]  либо просто, скорее всего, в современные компьютеры умеют
[01:30:51.300 --> 01:30:53.300]  это искать завод единицы тем или иным способом.
[01:30:53.300 --> 01:30:55.300]  С точки зрения
[01:30:55.300 --> 01:30:57.300]  компьютеров
[01:30:57.300 --> 01:30:59.300]  вообще уже не очень хорошо говорить
[01:30:59.300 --> 01:31:01.300]  о единицах. В смысле,
[01:31:01.300 --> 01:31:03.300]  что такое вот единиц,
[01:31:03.300 --> 01:31:05.300]  когда они перестают быть наукой, начинают быть
[01:31:05.300 --> 01:31:07.300]  компьютерами?
[01:31:07.300 --> 01:31:09.300]  Ну нет, реально,
[01:31:09.300 --> 01:31:11.300]  от единицы времени, то есть вот
[01:31:11.300 --> 01:31:13.300]  единицы контактов процессора.
[01:31:19.300 --> 01:31:21.300]  Ну да. Нет, вот там понимаете,
[01:31:21.300 --> 01:31:23.300]  в чем проблема? Нет, там дальше
[01:31:23.300 --> 01:31:25.300]  начинается, что
[01:31:25.300 --> 01:31:27.300]  алгоритмы что-то такого
[01:31:27.300 --> 01:31:29.300]  вида еще бывают, что на самом деле
[01:31:29.300 --> 01:31:31.300]  что как бы для каждого конкретного n
[01:31:31.300 --> 01:31:33.300]  вы делаете схему, да?
[01:31:33.300 --> 01:31:35.300]  Ну там сталкивались с какими-то такие схемами.
[01:31:35.300 --> 01:31:37.300]  В смысле,
[01:31:37.300 --> 01:31:39.300]  сортировка сетьми
[01:31:39.300 --> 01:31:41.300]  или что-то такое? Ну, может быть.
[01:31:41.300 --> 01:31:43.300]  Но там просто нет. Суть в том, что
[01:31:43.300 --> 01:31:45.300]  алгоритм устроен так,
[01:31:45.300 --> 01:31:47.300]  что там, скажем, что у вас какое-то деревце,
[01:31:47.300 --> 01:31:49.300]  условно.
[01:31:49.300 --> 01:31:51.300]  То есть у вас там, скажем,
[01:31:51.300 --> 01:31:53.300]  на вход у вас подаются какие-то нолики,
[01:31:53.300 --> 01:31:55.300]  единички.
[01:31:55.300 --> 01:31:57.300]  И там
[01:31:57.300 --> 01:31:59.300]  в каждой вершине с ними что-то делается,
[01:31:59.300 --> 01:32:01.300]  я не знаю, ссор, например,
[01:32:01.300 --> 01:32:03.300]  или какой-нибудь
[01:32:03.300 --> 01:32:05.300]  или там что-нибудь еще в этом роде.
[01:32:05.300 --> 01:32:07.300]  И получается результат,
[01:32:07.300 --> 01:32:09.300]  0 и 1. Или даже не один результат,
[01:32:09.300 --> 01:32:11.300]  а несколько результатов.
[01:32:11.300 --> 01:32:13.300]  Вот так вот.
[01:32:13.300 --> 01:32:15.300]  Ну вот, утверждение.
[01:32:15.300 --> 01:32:17.300]  Наука умеет
[01:32:17.300 --> 01:32:19.300]  ну, то есть, допустим, у вас
[01:32:19.300 --> 01:32:21.300]  дано, допустим, n,
[01:32:21.300 --> 01:32:23.300]  и вам очень хочется там найти какой-нибудь
[01:32:23.300 --> 01:32:25.300]  старший бит у него.
[01:32:25.300 --> 01:32:27.300]  Так вот, утверждается, что наука умеет
[01:32:27.300 --> 01:32:29.300]  построить последовательный схем,
[01:32:29.300 --> 01:32:31.300]  то есть для каждого им построить схему так,
[01:32:31.300 --> 01:32:33.300]  чтобы высота этих схем
[01:32:33.300 --> 01:32:35.300]  была
[01:32:35.300 --> 01:32:37.300]  от единицы.
[01:32:37.300 --> 01:32:39.300]  В смысле, не превосходила какой-то константы.
[01:32:41.300 --> 01:32:43.300]  То есть там...
[01:32:43.300 --> 01:32:45.300]  То есть, наоборот, как раз аппаратная,
[01:32:45.300 --> 01:32:47.300]  потому что для каждого конкретного w
[01:32:47.300 --> 01:32:49.300]  по сути вы будете...
[01:32:51.300 --> 01:32:53.300]  Ну, количество...
[01:32:53.300 --> 01:32:55.300]  Количество вершин зависит от w,
[01:32:55.300 --> 01:32:57.300]  но время работы будет зависеть
[01:32:57.300 --> 01:32:59.300]  в первую очередь от глубины,
[01:32:59.300 --> 01:33:01.300]  потому что на одной и той же глубине
[01:33:01.300 --> 01:33:03.300]  все электричество будет одновременно работать.
[01:33:05.300 --> 01:33:07.300]  Так вот, а вот тут
[01:33:07.300 --> 01:33:09.300]  а вот тут став.
[01:33:09.300 --> 01:33:11.300]  Прям глобально константа.
[01:33:11.300 --> 01:33:13.300]  То есть существует c,
[01:33:13.300 --> 01:33:15.300]  то есть для любого w.
[01:33:15.300 --> 01:33:17.300]  Там вот смысл
[01:33:17.300 --> 01:33:19.300]  примерно такой,
[01:33:19.300 --> 01:33:21.300]  кодовая фраза, вот встретите
[01:33:21.300 --> 01:33:23.300]  какую-нибудь аббревиатуру ac0,
[01:33:23.300 --> 01:33:25.300]  это вот типа алгоритм там вот
[01:33:25.300 --> 01:33:27.300]  лежит в ac0, там вот что-то такое.
[01:33:29.300 --> 01:33:31.300]  Так что поэтому верим в этот старший бит,
[01:33:31.300 --> 01:33:33.300]  но поэтому старшему биту мы здесь, соответственно,
[01:33:33.300 --> 01:33:35.300]  очень легко ориентируемся,
[01:33:35.300 --> 01:33:37.300]  где же у нас встретился первый х.
[01:33:37.300 --> 01:33:39.300]  То есть более того, заметим
[01:33:39.300 --> 01:33:41.300]  на будущее, что, в общем-то, если у вас
[01:33:41.300 --> 01:33:43.300]  что на самом деле мы этот скетч
[01:33:43.300 --> 01:33:45.300]  можем чуть-чуть увеличить,
[01:33:45.300 --> 01:33:47.300]  ну то есть просто проблема будет в том, что
[01:33:47.300 --> 01:33:49.300]  если нам просто задали вот эти вот биты,
[01:33:49.300 --> 01:33:51.300]  то есть допустим мы там взяли
[01:33:51.300 --> 01:33:53.300]  иксы, их там они уже посорчены как-нибудь,
[01:33:53.300 --> 01:33:55.300]  и по этим иксам мы восстановили себе
[01:33:55.300 --> 01:33:57.300]  интересные биты, да, нам очень хочется их хранить.
[01:33:57.300 --> 01:33:59.300]  Но, к сожалению,
[01:33:59.300 --> 01:34:01.300]  рандомные биты, видимо, с рандомными битами
[01:34:01.300 --> 01:34:03.300]  так не получится, чтобы прям скетч
[01:34:03.300 --> 01:34:05.300]  было удобно за вот единицы доставать.
[01:34:05.300 --> 01:34:07.300]  Вот, поэтому
[01:34:07.300 --> 01:34:09.300]  нам придется подобавлять
[01:34:09.300 --> 01:34:11.300]  к этим битам еще какие-то биты,
[01:34:11.300 --> 01:34:13.300]  и у нас там
[01:34:13.300 --> 01:34:15.300]  получится так называемый
[01:34:15.300 --> 01:34:17.300]  супер скетч.
[01:34:17.300 --> 01:34:19.300]  А мы будем вычислять
[01:34:19.300 --> 01:34:21.300]  эти хорошие интересные биты?
[01:34:21.300 --> 01:34:23.300]  Там-то биты вычислять будем,
[01:34:23.300 --> 01:34:25.300]  но нет функции,
[01:34:25.300 --> 01:34:27.300]  которая число переводит
[01:34:27.300 --> 01:34:29.300]  в его скетч. Да,
[01:34:29.300 --> 01:34:31.300]  но будет супер скетч.
[01:34:31.300 --> 01:34:33.300]  А как мы будем искать
[01:34:33.300 --> 01:34:35.300]  интересные биты?
[01:34:35.300 --> 01:34:37.300]  За вот количество, да,
[01:34:37.300 --> 01:34:39.300]  нет, а будет, на самом деле, супер скетч,
[01:34:39.300 --> 01:34:41.300]  который тут будет очень
[01:34:41.300 --> 01:34:43.300]  интересно. То есть, на самом деле, он
[01:34:43.300 --> 01:34:45.300]  будет хранить себе те же самые биты,
[01:34:45.300 --> 01:34:47.300]  но только между ними могут там, будут
[01:34:47.300 --> 01:34:49.300]  вставляться какие-то нолики.
[01:34:49.300 --> 01:34:51.300]  Мы скипнули интересный вопрос.
[01:34:51.300 --> 01:34:53.300]  Как мы интересные биты находим за вот количество часов?
[01:34:53.300 --> 01:34:55.300]  Или за,
[01:34:55.300 --> 01:34:57.300]  за что нам их можно находить?
[01:34:57.300 --> 01:34:59.300]  Какая нота?
[01:34:59.300 --> 01:35:01.300]  Ну, в HD.
[01:35:01.300 --> 01:35:03.300]  Да, в HD.
[01:35:03.300 --> 01:35:05.300]  Вообще не могу про все битам дать.
[01:35:05.300 --> 01:35:07.300]  Нет, тут я отвечу просто.
[01:35:07.300 --> 01:35:09.300]  Скорее всего, тут ответ простой.
[01:35:09.300 --> 01:35:11.300]  Мы просто не сильно заморачиваем,
[01:35:11.300 --> 01:35:13.300]  за какое время мы это будем строить.
[01:35:15.300 --> 01:35:17.300]  Нет,
[01:35:17.300 --> 01:35:19.300]  по большому счету, нет, на самом деле,
[01:35:19.300 --> 01:35:21.300]  после сортировки, на самом деле,
[01:35:21.300 --> 01:35:23.300]  интересно, там это все легко делается,
[01:35:23.300 --> 01:35:25.300]  но там интересные биты, если нам плевать на порядок,
[01:35:25.300 --> 01:35:27.300]  они находятся за n log w.
[01:35:29.300 --> 01:35:31.300]  Ну вот,
[01:35:31.300 --> 01:35:33.300]  за n log w пошли.
[01:35:35.300 --> 01:35:37.300]  Не, посмотри,
[01:35:37.300 --> 01:35:39.300]  у двух соседних элементов
[01:35:39.300 --> 01:35:41.300]  найти интересный бит,
[01:35:41.300 --> 01:35:43.300]  ну, по крайней мере, бит, который их различает,
[01:35:43.300 --> 01:35:45.300]  очень просто, ты взял к сорту.
[01:35:45.300 --> 01:35:47.300]  Вот, поэтому можно прям
[01:35:47.300 --> 01:35:49.300]  после того, как элементы отсортированы,
[01:35:49.300 --> 01:35:51.300]  просто честно их найти.
[01:35:51.300 --> 01:35:53.300]  Да, некоторые биты будут лишними,
[01:35:53.300 --> 01:35:55.300]  да, но ничего страшного.
[01:35:59.300 --> 01:36:01.300]  Для каждых двух соседних
[01:36:01.300 --> 01:36:03.300]  для каждого длечающего дни,
[01:36:03.300 --> 01:36:05.300]  сказали, что он
[01:36:05.300 --> 01:36:07.300]  добавим его в множество интересных.
[01:36:07.300 --> 01:36:09.300]  Что этого хватит,
[01:36:09.300 --> 01:36:11.300]  потому что они отсортированы.
[01:36:11.300 --> 01:36:13.300]  Нет, ну они заранее не отсортированы,
[01:36:13.300 --> 01:36:15.300]  но если мы уже n log w времени потратили на сортировку,
[01:36:15.300 --> 01:36:17.300]  то, наверное, вот...
[01:36:17.300 --> 01:36:19.300]  Они должны быть, ну, условно лишнили бы
[01:36:19.300 --> 01:36:21.300]  дерева, а сортированы поэтому,
[01:36:21.300 --> 01:36:23.300]  поэтому нет.
[01:36:23.300 --> 01:36:25.300]  Я про сортировку не спрашиваю.
[01:36:25.300 --> 01:36:27.300]  А про что ты спрашиваешь?
[01:36:27.300 --> 01:36:29.300]  Просто, что если оно дано
[01:36:29.300 --> 01:36:31.300]  просто ровно чисел,
[01:36:31.300 --> 01:36:33.300]  как достать интересные биты?
[01:36:33.300 --> 01:36:35.300]  Ты, вроде, сказал, что можно взять соседние
[01:36:35.300 --> 01:36:37.300]  и взять в них отличающиеся биты.
[01:36:37.300 --> 01:36:39.300]  Ну да.
[01:36:41.300 --> 01:36:43.300]  Вот, да, очень удобно.
[01:36:43.300 --> 01:36:45.300]  Вот.
[01:36:45.300 --> 01:36:47.300]  То есть нет, поэтому я просто заранее говорю,
[01:36:47.300 --> 01:36:49.300]  что как бы сразу предупреждаю, что заметим,
[01:36:49.300 --> 01:36:51.300]  что вот эта технология нам дает, по идее,
[01:36:51.300 --> 01:36:53.300]  некоторый запас.
[01:36:53.300 --> 01:36:55.300]  То есть она нам даст запас,
[01:36:55.300 --> 01:36:57.300]  потому что если мы научимся
[01:36:57.300 --> 01:36:59.300]  по всяким...
[01:36:59.300 --> 01:37:01.300]  То есть заметим,
[01:37:01.300 --> 01:37:03.300]  что в некотором случае, в смысле,
[01:37:03.300 --> 01:37:05.300]  у нас тут будет не w в степени 1,5,
[01:37:05.300 --> 01:37:07.300]  а w в степени 4,5.
[01:37:07.300 --> 01:37:09.300]  Ну вот.
[01:37:09.300 --> 01:37:11.300]  То есть суперскетч увеличит.
[01:37:11.300 --> 01:37:13.300]  Да, ну вот. Но правда, единственная
[01:37:13.300 --> 01:37:15.300]  проблема, что просто,
[01:37:15.300 --> 01:37:17.300]  как мы уже сказали, вот эта проблема
[01:37:17.300 --> 01:37:19.300]  все равно даже суперскетчем не решится.
[01:37:19.300 --> 01:37:21.300]  То есть, ну вот.
[01:37:21.300 --> 01:37:23.300]  Но, как бы, поэтому да.
[01:37:23.300 --> 01:37:25.300]  Для нас будет такой черный ящик.
[01:37:25.300 --> 01:37:27.300]  Данные относительно мелкие.
[01:37:27.300 --> 01:37:29.300]  Числа размера w в степени даже 4,5,
[01:37:29.300 --> 01:37:31.300]  но их мало.
[01:37:31.300 --> 01:37:33.300]  Там w в степени 1,5.
[01:37:33.300 --> 01:37:35.300]  И наша задача, соответственно, их каким-то образом
[01:37:35.300 --> 01:37:37.300]  собственно куда...
[01:37:37.300 --> 01:37:39.300]  Наша задача в них уметь искать
[01:37:39.300 --> 01:37:41.300]  лавербаунт, опербаунт.
[01:37:41.300 --> 01:37:43.300]  То есть будет у нас...
[01:37:43.300 --> 01:37:45.300]  Вот мы это уже научились делать,
[01:37:45.300 --> 01:37:47.300]  потому что выяснилось, что это вот таким вот образом
[01:37:47.300 --> 01:37:49.300]  красиво делается.
[01:37:49.300 --> 01:37:51.300]  А вот как же, ну вот.
[01:37:51.300 --> 01:37:53.300]  Но как же действительно с этим всем справляться?
[01:37:53.300 --> 01:37:55.300]  Вот это мы, пожалуй, уже после перегрыва и поговорим.
