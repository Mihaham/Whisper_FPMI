[00:00.000 --> 00:09.520]  Что у нас происходит? Происходит примерно следующее. С хреш-функциями мы с вами закончили,
[00:09.520 --> 00:16.800]  а графом пока переходить чуть-чуть рано, но мы это сделаем ровно на следующей лекции. Начнем
[00:16.800 --> 00:23.040]  говорить про графы, про BFS, DFS, про DX3, про DIN, и так далее. В общем, много всего нас ждет
[00:23.040 --> 00:32.560]  впереди. Сегодня будет такая более теоретическая, скорее, тема, чем практикализуемая, с которой мы
[00:32.560 --> 00:38.320]  как раз-таки будем разбираться и просто теоретически смотреть и думать, типа вот это тоже
[00:38.320 --> 00:45.200]  существует, это очень прикольно. Кто-нибудь когда-нибудь слышал что-нибудь про Фибоначи? Надеюсь,
[00:45.200 --> 00:55.640]  все слышали. Правда? А про Фибоначеву кучу кто-нибудь слышал или пирамиду? Нет. Вот, видите? А вот
[00:55.640 --> 01:03.360]  сегодня будет именно такое. Мы с вами поразбираемся с тем, что есть. Кроме того, кто из вас был на ДОП
[01:03.360 --> 01:10.320]  семинарии Булат? По амортизационному анализу. Ага, значит, смотрите, объясню, что будет
[01:10.320 --> 01:18.160]  происходить после того, как мы разберем пирамидки. Мы поговорим с вами достаточно сжато про амортизационный
[01:18.160 --> 01:22.880]  анализ, потому что Булат с вами еще раз про это говорил. Третий раз повторяться не самое классное,
[01:22.880 --> 01:29.200]  так как вас немного там было, то я очень кратко пройдусь, потому что там происходит. Это вам
[01:29.200 --> 01:34.840]  понадобится с точки зрения реализации вектора и вообще почему вектор так работает. Вот, когда
[01:34.840 --> 01:42.200]  вы до этого дойдете? Возможно, это будет очень скоро. Есть запись, я знаю. Я знаю, что есть запись,
[01:42.200 --> 01:49.080]  но заставлять вас смотреть запись чего-то дополнительного, возможно, немножко жестоко,
[01:49.080 --> 01:56.240]  вот, поэтому лучше... Я вам кратко это расскажу, а дальше вы сами решите, если вам будет недостаточно,
[01:56.240 --> 02:01.320]  вы посмотрите. Если достаточно, значит, на экзамене спокойно ответите. Вот, все просто.
[02:01.320 --> 02:11.680]  Окей, а давайте тогда начинать. Смотрите, сегодняшняя тема называется пирамиды. Куча
[02:11.680 --> 02:17.600]  разных пирамид мы будем сегодня рассматривать, ну как куча. Всего их будет две, вот, а третью вы
[02:17.600 --> 02:24.240]  уже знали. А третья, какие пирамиды будут рассмотрены, ой-ой, сейчас, будут рассматриваться
[02:24.240 --> 02:32.160]  вообще, в принципе, сегодня. Ну, бинарная пирамида — это то, что мы проходили с вами еще в прошлом
[02:32.160 --> 02:38.440]  семестре, это где у нас было построение пирамиды, это где мы доказывали хипсорт, смотрели,
[02:38.440 --> 02:43.200]  насколько это все работает и так далее. И у нас сегодня будет бинемиальная пирамида и фибоначева
[02:43.200 --> 02:50.300]  пирамида. Это две очень интересные структуры данных сами по себе, которые могут позволять делать
[02:50.300 --> 02:55.220]  какие-нибудь вещи. И для того, чтобы их сравнивать между собой, вот мы как раз-таки попробуем с вами
[02:55.220 --> 03:01.420]  оценить время операции каждой из тех, которые здесь есть. Гет минимума, вставки элемента,
[03:01.420 --> 03:10.100]  экстракта минимума, уменьшение какого-то ключа и мерджить между собой пирамидки. Вот, такие вещи
[03:10.100 --> 03:16.980]  часто нужны, часто встречаются, поэтому это основные такие функции, которые нам необходимы. Вот,
[03:16.980 --> 03:23.180]  как-то так. Вот, смотри, тут стоят вопросики. Кто мне готов сходу сказать,
[03:23.180 --> 03:29.580]  насколько это работает в худшем случае и получить от меня хотя бы почет и уважение,
[03:29.580 --> 03:41.940]  давайте так типа назову. Плюс бал не обещаю. Да, минимум сверху. За единицу что? Get mean, I insert.
[03:47.620 --> 04:00.100]  За логариф. Хорошо, экстракт. Тоже за логариф. Декриз. А это уменьшение ключа. Ну, то есть у нас
[04:00.100 --> 04:06.900]  есть какие-то элементы в пирамиде, мы берем и уменьшаем ключик. Нам надо установить за логариф.
[04:06.900 --> 04:20.300]  А мерч? А? Мерч пирамиды, в которой есть m элементов и n элементов. Вот, минимум n. Не,
[04:20.300 --> 04:31.100]  не подходит. Давайте еще. Вот единицы. Очень сложно мерчить пирамидки за вот единицы. Вот m
[04:31.100 --> 04:35.580]  плюс n. Это если мы будем перестраивать всю пирамиду. А можно ли что-нибудь придумать еще?
[04:35.580 --> 04:49.860]  Что еще раз m log n? Почему? Да, можно вставлять каждый элемент поочередно. То есть здесь,
[04:49.860 --> 04:54.620]  в зависимости от того, что захотите, можно реализовывать и так, и так. Да, в худшем случае
[04:54.620 --> 05:04.540]  все это работает вот за столько. Мы сегодня дойдем с вами в конце до того, что у нас фибоначевая
[05:04.540 --> 05:15.620]  пирамида сможет делать почти все эти операции, да, от единички. Кроме одной. Кто не знает ответ
[05:15.620 --> 05:35.940]  какой? Юнион? Нет. Не юнион. Еще? Декриз? Еще? Мерч? Еще? Гетмин очень странно не за вот единички
[05:35.940 --> 05:42.980]  делать, если честно. Пирамида для этого сделана все-таки. Хорошо, пусть это будет такой небольшой
[05:42.980 --> 05:48.180]  интригой, который в конце будет понятно, что с этим делать. Но перед тем, как вообще перейти к
[05:48.180 --> 05:53.460]  фибоначевой пирамиде, сначала поговорим о биномиальной пирамиде. Это такой предвестник
[05:53.460 --> 05:58.820]  фибоначевой пирамиды, которая ляжет в основу всего остального, что мы будем понимать. Но
[05:58.820 --> 06:04.060]  перед тем, как говорить о пирамиде, мы поговорим о дереве. Что такое биномиальное дерево? Смотрите,
[06:04.060 --> 06:09.620]  биномиальное дерево, оно задается немножко рекурсивно. Примерно следующим образом. Биномиальное
[06:09.620 --> 06:16.380]  дерево, ранга 0, это одна вершина. Биномиальное дерево, ранга K, это когда у нас есть корень,
[06:16.380 --> 06:27.620]  и к нему присоединены биномиальные деревья, рангов 0, 1 и так далее, K-1. Просто. То есть,
[06:27.620 --> 06:32.900]  мы к дереву подцепляем всех его сыновей вот таким вот образом, чтобы у них ранги были различны.
[06:32.900 --> 06:43.140]  Ок? Понятно? Вот. Чиселки, которые тут указаны, 0, 1, 2, 3, это как раз вот те самые ранги,
[06:43.140 --> 06:49.460]  которые здесь присутствуют. Если говорить чуть-чуть альтернативно, то как можно представить еще
[06:49.460 --> 06:57.060]  какое-нибудь биномиальное дерево, ранга K? Можно сказать, что это просто два присоединенных друг
[06:57.060 --> 07:10.140]  к другу биномиальных дерева, ранга K-1. Это понятно почему? Да? Вы очень сложно реагируете.
[07:10.140 --> 07:31.940]  BK-1 относится к вершине тоже. Давайте еще раз, смотрите. Вот. Вот это все, это BK-1. BK, ну,
[07:31.940 --> 07:36.660]  это как раз биномиальное дерево, ранга K-1. И я к нему присоединяю еще одно такое.
[07:41.140 --> 07:50.140]  Корню, если вот это является биномиальным деревом, ранга K-1, то вот здесь присутствуют все сыновья
[07:50.140 --> 08:05.180]  от 0 до K-2. И плюс я добавил еще одного сына, K-1. Понятно? Теперь стало понятнее? Вы хотя бы
[08:05.220 --> 08:19.180]  говорите. Мне страшно. Биномиальное дерево, ранга какого-то вот K-1, это ранга K-1. Смотрите,
[08:19.180 --> 08:26.580]  давайте еще раз. Возвращаемся сюда. Что такое ранга 0? Это одна вершина. Ранга K рекурсивно
[08:26.580 --> 08:32.860]  задается друг от дружки. Фактически здесь мы воспринимаем ранг, это как что? Количество
[08:32.860 --> 08:45.460]  детей. Видите это? Сколько у корни есть детей? Давайте посмотрите еще раз на этот пример,
[08:45.460 --> 08:59.820]  что вас в нем смущает или не смущает. Еще раз, я очень плохо слышу. Можно?
[09:02.860 --> 09:10.980]  Не интуитивно. Это согласен, нужно было обвести. Да, тут прошу прощения. Но фактически это делается
[09:10.980 --> 09:17.460]  вот таким вот образом. Таким образом мы можем вывести некоторые свойства в действительности.
[09:17.460 --> 09:23.620]  Что мы можем сказать про это биномиальное дерево, которое есть? Мы можем сказать,
[09:23.620 --> 09:30.860]  что если у нас есть ранга K данное дерево, тогда количество вершин в нем это 2 в степени K.
[09:30.860 --> 09:42.500]  Просто? Хорошо, ладно, предположим. Если вы не задаете вопросы, я считаю, что вы все понимаете,
[09:42.500 --> 09:51.660]  все хорошо. Ок. И я могу сказать, что глубина дерева BK это либо K плюс 1, либо K в точности. Все
[09:51.660 --> 09:56.540]  зависит от того, как вы считаете. Иногда их считают по ребрам, иногда по вершинам. Существует
[09:56.540 --> 10:04.580]  реберная высота, существует вершинная высота. Здесь как вы захотите, так и сделать. Почему
[10:04.580 --> 10:12.020]  это так? Ну это опять же в силу того построения, которое там есть. Потому что вот даже если глянуть
[10:12.020 --> 10:18.700]  на вот этот вот кусочек, то если высота вот этого это там K минус 1, то высота всего станет K.
[10:18.700 --> 10:24.740]  Ну оно увеличивается на 1 благодаря вот этой вот корню,
[10:24.740 --> 10:33.060]  которой у меня есть. Вот. И это работает со всеми, что у нас происходит. Таким образом мы можем
[10:33.060 --> 10:38.740]  сказать, что у нас K это всегда логарифм двоичный от N, потому что у нас количество вершин такое.
[10:38.740 --> 10:48.380]  То есть глубина логарифмична. Хорошо это? Скорее хорошо. Любой пирамиды и любого дерева это
[10:48.380 --> 10:56.500]  действительно хорошо. Теперь что такое пирамида? Смотрите. Вот то, что здесь написано, это не
[10:56.500 --> 11:02.500]  является еще определением пирамиды. А первоначально, перед тем как перейти к пирамиде, давайте в каждом из
[11:02.500 --> 11:08.300]  деревьев будем поддерживать свойства пирамиды. Что такое свойство пирамиды? Ну свойство пирамиды
[11:08.300 --> 11:20.780]  это когда любой потомок не меньше, чем его предок. Помните такое в пирамидах? Было? Было. Вот. Ну как бы
[11:20.780 --> 11:32.620]  тут нарисовано просто дерево, которым есть это свойство. Какого оно ранга? Три. Три. Хорошо. Да,
[11:32.700 --> 11:40.780]  это просто дерево ранга три, в котором мы еще добавили какие-то числа. А вот что такое пирамида сама
[11:40.780 --> 11:51.140]  по себе? Смотрите. Биномиальная пирамида это структура данных, которая состоит из бинарных
[11:51.140 --> 12:01.140]  деревьев с уникальными рангами и указателя на минимальный элемент. Смотрите, в чем суть? Суть
[12:01.140 --> 12:11.420]  примерно в следующем. У вас есть некоторые деревья различных рангов. Каждом из них вы поддерживаете
[12:11.420 --> 12:26.020]  свойства пирамиды. Вы связываете все эти деревья вот таким вот списком. У вас здесь есть какие-то
[12:26.020 --> 12:31.900]  элементики. Согласны, что сверху стоят минимумы из каждого, который есть? Ну не знаю там какие-нибудь
[12:31.900 --> 12:46.060]  числа. Давайте 0, минус 1, 5, 6. Вот. И у вас еще будет указатель на минимальный элементик. И вот это
[12:46.060 --> 12:55.260]  все в купе называется биномиальной пирамидой. То есть это не просто кусочек этого всего, а именно
[12:55.260 --> 13:06.580]  все вместе. Да. Лучше всего делать ранги по возрастанию, так будет просто проще, когда мы увидим,
[13:06.580 --> 13:12.420]  типа когда мы будем делать мерч между ними. Так в общем это не принципиально, но будет в силу
[13:12.420 --> 13:22.140]  реализации удобнее так. Вот. И ранги, самое главное, заметьте, что они уникальны между собой. Нельзя
[13:22.220 --> 13:30.060]  делать одинаковые ранги. В биномиальной пирамиде нету одинаковых рангов у вершинок. У всех деревьев,
[13:30.060 --> 13:43.140]  которые есть. Ну смотри, что такое биномиальное дерево ранга 2? Как вы нарисовались?
[13:52.580 --> 14:05.580]  Вот так. Вот. Вот это будет ранга 3 уже. Это все является деревьями. Деревьями какого-то ранга. Мы
[14:05.580 --> 14:12.740]  все эти деревья между собой еще объединяем в список кладем, грубо говоря. Ну вот это вот
[14:12.740 --> 14:25.060]  какой-нибудь односвязанный список. Вот. У нас все связано между собой. Сверху лежат минимумы. Мне
[14:25.060 --> 14:30.980]  из любой пирамиды всегда нужно уметь доставать минимальный элемент. Для того, чтобы быстро
[14:30.980 --> 14:35.620]  достать минимальный элемент из любой этой пирамиды, я хочу знать минимум среди всех этих
[14:35.620 --> 14:41.460]  деревьев. Вот минимум это есть указатель, который мне должен указывать сюда. То есть у меня должен
[14:41.460 --> 14:51.700]  быть указатель на минимальный элемент? Нет. Нет. У тебя все вот это связано называется пирамиды.
[14:51.700 --> 15:01.540]  Каждое по отдельности это дерево. В каждом дереве корень минимальный элемент. Но тут может быть 0,
[15:01.540 --> 15:09.260]  тут минус 1, тут 5, тут 8. У тебя есть указатель, который указывает на самый маленький. На минус 1.
[15:09.260 --> 15:23.220]  Еще раз дерево не строится так. Дерево строится по правилу пирамиды. Вот так. Никакого слева
[15:23.220 --> 15:30.300]  справа здесь нет. У тебя здесь даже уже три потомка. А может быть К потомка. Нельзя ходить влево-вправо.
[15:30.300 --> 15:45.060]  Ну в плане типа у корней могут быть разные значения. Где именно лежит минимум я не знаю.
[15:45.060 --> 15:55.780]  Окей. Вот это есть пирамида. А теперь смотрите. У меня дано какое-то число N. N это количество
[15:55.780 --> 16:02.500]  элементов моей пирамиды. Могу ли я по этому числу N понять, как выглядит моя пирамида с точки
[16:02.500 --> 16:14.180]  зрения рангов моих деревьев? Да. Правильно. Спасибо. Да. Это в действительности разбиение на
[16:14.180 --> 16:19.780]  степени двойки. Разбиение на степени двойки единственно. Поэтому представление единственное.
[16:19.780 --> 16:24.540]  Внутри они могут конечно перемешивать с точки зрения элементов там как угодно. Вот здесь у меня
[16:24.540 --> 16:36.220]  сколько элементов сейчас? Три, четыре, семь, восемь. Восемь, один, двенадцать. Тринадцать. Тринадцать
[16:36.220 --> 16:46.460]  элементов. Вот. Ну для тринадцати вот отдельное разбиение. Да. У нас не бывает неполных. У нас
[16:46.460 --> 16:53.060]  каждое дерево оно является определенным рангом. Вот. То есть у вас когда есть определенное количество
[16:53.580 --> 17:00.100]  каких-то элементов вы точно можете построить биномиальную пирамиду в единственном виде с точки
[17:00.100 --> 17:08.100]  зрения рангов. Да, это правда. И мы можем это использовать между собой. С чем? Для того, чтобы
[17:08.100 --> 17:13.380]  понимать, что у нас всегда будет в результате при любых мерджах и так далее какая-то одна
[17:13.380 --> 17:19.740]  общая структура понятная нам, которая нам необходима. И теперь какие есть операции для биномиальной
[17:19.740 --> 17:28.100]  пирамиды? Ну первое это get минимум. Как мне взять минимум? У меня есть указатель. И это я могу
[17:28.100 --> 17:34.500]  вытащить этот минимальный элемент. Не вытащить в плане экстракт сделать, а просто понять какой у
[17:34.500 --> 17:40.340]  меня элемент минимальный за от единички. Поэтому указатель. Согласны? А теперь давайте смотреть,
[17:40.340 --> 17:46.980]  что нам делать дальше. Как нам жить с мерджем? Вот у меня есть две биномиальные пирамиды. Как
[17:46.980 --> 17:54.260]  вообще с ними что-то делать? Здесь у меня есть такая пирамидка и будет еще какая-нибудь. Мне
[17:54.260 --> 18:00.900]  надо их слить между собой для того, чтобы получить опять одну биномиальную пирамиду. Вот. А я предлагаю
[18:00.900 --> 18:06.980]  отталкиваться сначала со следующим вопросом. У вас есть два каких-нибудь дерева одинаковых рангов?
[18:06.980 --> 18:16.700]  Вот у вас есть дерево, не знаю, ранга там пять и вы хотите его слить еще с одним деревом ранга
[18:16.700 --> 18:36.620]  пять. Что мне делать? Ну вот у меня здесь один, здесь пять. Дальше что? Да, и я получаю вот таким
[18:36.620 --> 18:49.900]  вот образом тебе дерево ранга шесть. Согласны? Окей, хорошо. Это первое. А дальше как из этого
[18:49.900 --> 19:10.940]  получить, что я хочу склеить две пирамиды? Да, все правильно. Смотрите. Повторю на всякий случай,
[19:10.940 --> 19:18.900]  если вдруг не услышали. Когда у вас есть биномиальные пирамиды, вот их ранги это по факту
[19:18.900 --> 19:23.780]  в какой-нибудь степени двойки. Вы можете это использовать для себя. Для себя в каком плане? Ну,
[19:23.780 --> 19:31.220]  представьте, что у меня есть, не знаю, биномиальная пирамида фактически с нулевым первым и третьим
[19:31.220 --> 19:41.860]  рангом. У меня есть третий, не знаю, там второй и нулевой. Вот когда вы складываете вот эти
[19:41.860 --> 19:50.100]  чиселки, толбик, вы как их складываете? Вы складываете и переносите что-то в больший разряд. Вот,
[19:50.100 --> 19:58.140]  и получаете фактически ровно как с двоичными числами, что вы сложили два одинаковых разряда,
[19:58.140 --> 20:03.540]  получили следующий. Фактически здесь будет ровно это же. Вам необходимо просто взять это и
[20:03.540 --> 20:09.860]  перестроить под это, то есть соединять их между собой корректно, тогда вы получаете новые пирамиды
[20:09.860 --> 20:15.100]  и после этого переходите к следующему уже рангу и смотрите, что происходит там и так далее. И в
[20:15.100 --> 20:22.620]  зависимости от этого у вас происходит сложение. Грубо говоря, вот здесь вот у меня есть 0.1.3 и 0.1.2. Вот,
[20:22.620 --> 20:30.780]  ранги у пирамид. У первой 0.1.2, у второй 0.1.3. Что я делаю в начале? Я складываю две пирамиды,
[20:30.780 --> 20:36.380]  мерджу между собой, ранга 0. Я это умею, мы только что показали, как это сделать. Соединить
[20:36.380 --> 20:44.420]  меньшую, соединить больше к меньшей, присоединить. Я получаю пирамида ранга 1. Дальше у меня есть две
[20:44.420 --> 20:50.740]  пирамиды ранга 1 и еще третья получилась. Но я могу сложить хоть те, хоть те, тут без разницы. Но
[20:50.740 --> 20:56.980]  предположим, что я соединю те пирамиды, которые у меня были изначально. Получу пирамиду ранга 2.
[20:56.980 --> 21:04.340]  Таким образом, у меня есть уже пирамида ранга 1, есть пирамида ранга 2, которая у меня, грубо говоря,
[21:04.340 --> 21:10.700]  в уме где-то находится. И у меня еще две пирамиды ранга 2 и ранга 3. Значит, у меня есть две пирамиды
[21:10.700 --> 21:19.300]  ранга 2. Я их также складываю между собой, получаю пирамиду ранга 3. И я ее складываю еще раз с деревом
[21:19.300 --> 21:27.740]  ранга 3. Не пирамида, дерево, sorry. Вот. И тогда, когда я сложу две по три, получу четыре. Таким
[21:27.740 --> 21:37.540]  образом, у меня получится биномиальная пирамида, в которой будет только лишь ранг 1 и ранг 4. Понятно,
[21:37.540 --> 21:47.140]  что я делаю? Представляете, как это реализовывать? Не понятно, что я делаю? Очень неинтуитивно. Ну,
[21:47.140 --> 21:54.380]  давайте на каком-то примере разберем. Не знаю. Но это и должно быть представлено, как в степени двойки.
[21:57.740 --> 22:10.540]  Давайте порисуем пирамидки. Ну, в принципе, сейчас я думаю, ну, давайте даже нарисуем пирамиду ранга
[22:10.540 --> 22:20.500]  3. Может, у нас что-нибудь получится. Арите, первая пирамида. Ну, называйте числа. Что я могу тут
[22:20.500 --> 22:26.860]  сказать? Называйте числа, будем складывать на примерах. Сейчас, давайте. А, ну, хорошо. Давайте
[22:26.860 --> 22:52.260]  я сначала нарисую всю пирамиду. Что у нас там? 0, 1, 3. И 3. Такая вот пирамида. И мы ее складываем
[22:52.260 --> 23:17.820]  с другой пирамидой. Раз. Теперь называйте числа. Три вижу. Семь. Девять. Да, не забывайте,
[23:17.820 --> 23:22.380]  что это должно все-таки... Здесь пирамидки сохранить. Минус один.
[23:22.380 --> 23:45.020]  Четыре. Дальше. 57. Ну, давайте что-нибудь не такое. Ну, ладно. Очень хочется, пожалуйста. Дальше.
[23:45.020 --> 24:06.580]  Не могу. Два. Да что ж такое-то? Четыре. Девять. Так могу. Ты серьезно? Десять. Хорошо. Десять.
[24:06.580 --> 24:20.060]  Окей. Сохраняется тут свойство пирамиды везде? Сохраняется. Давайте сюда. Ладно,
[24:20.060 --> 24:36.300]  я вас понял. Один. Три. Восемь. Два. Семь. Три. Девять. Хорошо. Отлично. Что здесь будет... Да.
[24:36.300 --> 24:52.940]  Вот это и вот это по отдельности. Да. Еще раз. Сами кусочки – это деревья. Ну,
[24:52.940 --> 24:57.980]  одинарная может быть. Да. Никто не спорит. Вот этот кусок, грубо говоря, может быть,
[24:57.980 --> 25:16.540]  потому что разложение у нас может быть такое. Да. Да. Обязательно. У нас поддерживается
[25:16.540 --> 25:25.180]  свойство пирамиды везде одинаково. Да. Да, это в определение зашито. Ну, давайте их складывать
[25:25.180 --> 25:34.220]  между собой. Что я вначале делаю? Смотрю вначале на самый минимальный, ну, любые ранги. И получаю
[25:34.220 --> 25:39.780]  вначале здесь следующее. Ну, возможно, мне тут доски не хватит. Ну, ладно. Я получаю здесь что?
[25:39.780 --> 25:49.980]  Пирамиду, ранга, ну, дерево. Ранга один. Один. Три. Согласны? Получаю такое дерево. Теперь смотрите,
[25:49.980 --> 25:58.700]  у меня есть 7,9, 3,8, 1,3. Какие сложимы между собой? Ну, давайте вот эти сложимы, ровно как там
[25:58.700 --> 26:07.580]  на примере, чтобы вы могли ассоциацию построить себе. Хорошо. Я складываю 7,9 и 3,8. Что к чему
[26:07.580 --> 26:17.900]  подвешиваю? Вот. Получаю здесь у меня 7, здесь у меня остается 9, а сюда уходит...
[26:17.900 --> 26:34.980]  Извините, да, это уже я. 3, сюда уходит 8, сюда уходит 7 и 9. Согласны?
[26:35.060 --> 26:44.580]  Отлично. У меня получилась пирамида, ранга два. И здесь... Отлично, мне их нужно сложить между
[26:44.580 --> 27:06.540]  собой. И то где? Получается два. У нее остается все также 7, 3, 9. И дальше мы просто дописываем
[27:06.540 --> 27:25.180]  этот кусок. 3, 8, 7, 9. Согласны? Отлично. Забываем теперь. Это пирамида какого? 3. Вот это мне
[27:25.180 --> 27:29.820]  нужно сложить вот с этим. Это неприятно к ней. Ну, в смысле, переписывать это не прикольно. Но
[27:29.820 --> 27:40.500]  итогом у меня будет следующее. Давайте я напишу 1, 3, а вот здесь сейчас будет много вершинок. Минус один у
[27:40.500 --> 27:55.260]  нас наверху, поэтому я для него повторяю все, что у меня здесь есть. Это там что 2, 5, 4, 57,
[27:55.260 --> 28:16.180]  а 4, 9, 10. И вот сюда уходит вот эта двойка, все что у нас было. 2, 7, 3, 3,
[28:16.180 --> 28:29.700]  9, 8, 7, 9. Вот это у меня получилось две пирамида связанные между собой.
[28:29.700 --> 28:50.180]  Показатель у меня в конце будет вот сюда. Понятно, что происходит? Да. А, в смысле это? Да,
[28:50.180 --> 29:01.580]  конечно. Честь вопроса. Теперь стало понятнее, откуда у меня появилось вот это вот все. Да?
[29:01.580 --> 29:09.580]  Понятно, как получилось пирамида ранга 1 и ранга 4. Можно.
[29:09.580 --> 29:25.980]  Никак. То есть нет такого, что вот здесь все элементы должны быть меньше, чем что-то еще нет.
[29:25.980 --> 29:31.180]  Они просто между собой существуют. У вас есть указатель на минимум. Указатель на минимум очень
[29:31.180 --> 29:36.700]  легко в плане merge понять, какой должен быть минимальный элемент. Вы постоянно понимаете,
[29:36.820 --> 29:41.620]  вы постоянно проходите по вершинам и смотрите минимальные элементы. Вы осознаете, что у вас
[29:41.620 --> 29:46.660]  находится сверху. Так что здесь все достаточно просто и понятно с точки зрения реализации.
[29:46.660 --> 30:03.940]  За сколько это будет работать, как вы думаете? А? Максимум из ранга. А если у нас N вершинок,
[30:03.940 --> 30:12.060]  имеется в виду? За log N, да. Ну, почти за log N, а log N вот этого и log N вот этого сложить получите.
[30:12.060 --> 30:17.740]  Вот. Потому что вы должны пройтись по всем. А степеням двойки здесь, по всем степеням двойки
[30:17.740 --> 30:22.180]  здесь, грубо говоря, в худшем случае. Но это максимум, что вы можете сделать. Потому что,
[30:22.180 --> 30:26.940]  когда у нас N вершин, я точно знаю, какое у нас разложение в степени двойки. Максимальное их
[30:26.940 --> 30:33.940]  количество логарифм. Вот. Поэтому, да, если у вас в дереве P1 там N1 элементов, в дереве P2 N2
[30:33.940 --> 30:39.900]  элементов, то вы получаете, что у вас весь этот мерч работает за от логарифм N1 плюс логарифм N2.
[30:39.900 --> 30:56.780]  Просто? Почему? Выглядит красиво. Не знаю. Вот. А теперь смотрите, как мне реализовать все остальные
[30:56.780 --> 31:12.180]  структуры, все остальные операции, которые у меня есть через мерч. Ноль. Ранга ноль. Да,
[31:12.180 --> 31:19.420]  добавление элемента просто. Мы просто добавляем сюда пирамидку ранга ноль. Она уже может
[31:19.420 --> 31:25.420]  являться пирамидой. Можно дерево сказать, можно пирамидой. Как удобнее здесь. Вот. Мы мерчим их
[31:25.420 --> 31:31.660]  между собой, получаем общую пирамиду, все хорошо. Все просто. За сколько работать будет?
[31:31.660 --> 31:42.900]  За лог. Да, за логарифм N просто. А то дерево, куда мы добавляем? Потому что логарифм единички,
[31:42.900 --> 31:53.180]  но все-таки нолик. Вот. Это правда. Все достаточно просто и понятно. А теперь смотрите. Вопрос в
[31:53.660 --> 32:03.340]  уменьшении ключа в нашем дереве. Наши пирамиды, я бы сказал. Вот у меня есть конкретный, не знаю,
[32:03.340 --> 32:13.100]  какой-нибудь. Вот я хочу девять уменьшить. Вот я знаю, что я уменьшаю девять, я прямо на него
[32:13.100 --> 32:18.140]  указываю, представляю, где он и так далее. За сколько у меня будет работать уменьшение? Как
[32:18.140 --> 32:32.140]  его сделать? Ну да. А как мне это сделать? Просто сделать сифтап, да. Для восстановления
[32:32.140 --> 32:39.220]  корректности это аналогично просто бинарной пирамиде. Нам достаточно сделать сифтап,
[32:39.220 --> 32:45.420]  потом, если что, сделать еще один сифтап. Все будет хорошо. У меня вопрос. Что-нибудь может
[32:45.420 --> 33:10.180]  нарушить такая вещь? Минимум нарушится? Ну подождите. Смотрите, я уменьшу это на 5, на 6.
[33:15.420 --> 33:34.620]  Так, они поменяются местами. Ага, вот. Это важный момент здесь, это правда. Что нам стоит делать в этом
[33:34.620 --> 33:50.260]  случае? Менять местами неприкольно. Просто менять указатель. То есть нам нужно пройтись по всем
[33:50.260 --> 34:02.180]  нашим вершинкам. Отлично. Да, все правильно. Нам достаточно просто посмотреть на минимальный,
[34:02.180 --> 34:07.020]  который был, на тот, который стал, если вдруг мы дошли до корня. И тогда в этом случае, если что,
[34:07.020 --> 34:15.540]  поменять этот указатель. Просто? Вроде просто. Понятно, что я сделал? Или непонятно, чего делать?
[34:15.540 --> 34:24.740]  Или вообще непонятно, что мы тут делаем? Давайте так. Это тоже принимается. Мотивация не ясна. Ну
[34:24.740 --> 34:34.300]  почему не ясна? Смотрите, я хочу, чтобы вот эта табличка выглядела лучше. Ну пока,
[34:34.300 --> 34:46.420]  пока может быть и нет. Хотя смотрите, за сколько мерч работает? За сумму логарифмов. А у нас уже,
[34:46.420 --> 34:55.180]  да, у нас было до этого не было суммы логарифмов. Улучшилось ли? Ну, улучшилось. Окей, с декриз понятно.
[34:55.180 --> 35:03.860]  А что нам делать с удалением? Вот я экстракт Мин делаю. Как вы думаете? Мы это обсуждали в мерде.
[35:03.860 --> 35:11.940]  Ну давайте еще раз. Смотрите, мы каждый здесь складываем между собой, за вот единицы получаем
[35:11.940 --> 35:20.380]  новую пирамиду. Согласен? Сколько здесь, если у меня здесь вот n1 элементов, сколько здесь может
[35:20.380 --> 35:32.100]  быть деревьев? Не больше, чем логариф. Ну, аналогично здесь. Ну, складывая вот это все,
[35:32.100 --> 35:52.940]  получил логариф. Как удалять? Экстракт Мин, да. Все правильно. Смотрите, что нам сейчас только что
[35:52.940 --> 36:15.260]  сказали. Сказали нам следующее. У нас есть вот это. Есть у нас эта пирамида. Я удаляю вот этот минимум.
[36:15.260 --> 36:23.380]  Что я могу сделать? Давайте рассмотрим две различные пирамиды. Первая пирамида,
[36:23.380 --> 36:31.220]  только то, что я сейчас выделил, а вторая пирамида будет состоять из тех кусочков,
[36:31.220 --> 36:40.620]  которые были здесь. Догласны с тем, что вот в этих пирамидах, ну вот в этой пирамиде все
[36:40.620 --> 36:45.980]  ранги различны. Да, потому что они были предыдущие тоже различны. Догласны ли вы,
[36:45.980 --> 36:54.180]  что здесь все различны? Это тоже логично, значит было бы странно. Вот, это тоже различны между
[36:54.180 --> 37:00.020]  собой. Ну и тогда мы получаем, что у нас есть раз пирамида, два пирамиды. Мы мерджим две пирамиды,
[37:00.020 --> 37:10.420]  получаем пирамиду. То есть то, что касается экстракт-мин, я здесь просто экстракт написан,
[37:10.420 --> 37:18.460]  но суть такая же. Я просто беру, разделяю эти пирамиды между собой и мерджаю. И этого достаточно,
[37:18.460 --> 37:27.820]  чтобы это сделать. То есть смотрите, все построено на одном лишь мерджа. Ну get-min не построено на
[37:27.820 --> 37:34.120]  мерджа, хорошо. Там типа все просто. Все остальное построено на мерджа, поэтому все достаточно
[37:34.120 --> 37:45.660]  очевидно и понятно работает между собой. Сколько будет работать экстракт? Ну у меня вот в начальной
[37:45.660 --> 38:01.100]  пирамиде было n элементов. А? Хорошо. А rank может быть больше логарифма?
[38:01.100 --> 38:21.300]  Или может? Почему не может быть логарифм rank меньше логарифма? Почему всегда rank меньше логарифма?
[38:21.300 --> 38:31.580]  rank я имею в виду, который вот здесь у меня k есть. Ну можно так, но действительно смотрите,
[38:31.580 --> 38:41.660]  у нас здесь n элементов. Мы с вами доказывали, что rank равен логарифму n. У нас не может быть
[38:41.660 --> 38:48.820]  здесь больше, чем n элемент. Согласны? В начальной пирамиде было n элемент. Очень вряд ли их
[38:48.820 --> 38:56.820]  вообще стало n-1. Вот. Поэтому здесь грубая оценка. Здесь за логарифм, здесь за логарифм. Ну здесь
[38:56.820 --> 39:04.740]  точнее n элементов, здесь с n элементов. Максимум, который возможен. Ну значит мердж работает за два
[39:04.740 --> 39:31.780]  логарифма n. Согласны? Вот. Ну получается логарифм. Да. Лучше всего да. Здесь скорее вопрос не о памяти,
[39:31.780 --> 39:52.820]  а о скорости. Вот. Да. Да. Ну, например, 3. У дерева нет 2 по деревьям. Смотрите, вот у нас,
[39:52.820 --> 40:01.700]  вот это дерево. Ну такой треугольник, конечно, получился, но все же. Это дерево. Дерево ранга
[40:01.700 --> 40:09.900]  4. Ну вот там вот 3 получилось, значит ранга 3 была. Если я удалю корень, сколько у меня появится
[40:09.900 --> 40:25.740]  под деревьев? Вот. Чего вопроса? Уходите от мысли, что в дереве всего 2 потомка. Поздно. Первый
[40:25.740 --> 40:42.980]  семестер закончился. Вот это. Ну нужно воспринимать чуть-чуть это по-другому. Можно. Вот здесь
[40:42.980 --> 40:52.940]  будут 4 ребенка. Да, если мы удаляем минус 1. Вот здесь 4 мерджа. Не, мы не каждая по дереву,
[40:52.940 --> 41:02.300]  мы между собой их связываем. Они ж являются, они ж. Да. Ну у них же у всех разные ранги. Разные. Ну
[41:02.300 --> 41:07.460]  нет, я их связывать могу очень быстро, это несложно с точки зрения реализации. Здесь вопрос
[41:07.460 --> 41:14.660]  скорее реализации. С точки зрения смысла все просто. Поэтому это получается пирамида. Там пирамида,
[41:14.660 --> 41:26.300]  все хорошо. Вопросы? Теперь все понятно про пирамиду биномиальную. Отлично. Получаем уже такую
[41:26.300 --> 41:35.940]  табличку. Поинтереснее стало? Ну чуть-чуть поинтереснее стали. А теперь мы переходим к фибоначевой
[41:35.940 --> 41:43.420]  пирамиде. Что это такое и как вообще с этим жить? Я понял, что из-за того, что я делаю презентацию,
[41:43.420 --> 41:49.780]  я достаточно быстро рассказываю. Поэтому, либо я просто не рисую так много, как это делают на доске,
[41:49.780 --> 41:56.700]  иначе было непонятно. Но вы если что останавливаете, пожалуйста. Про фибоначевую пирамиду. Смотрите,
[41:56.700 --> 42:04.180]  ну сначала мы определим, что такое фибоначевое дерево. Смотрите, фактически это то же самое,
[42:04.180 --> 42:14.420]  что биномиальная, но есть один нюанс. Фибоначевое дерево ранга 0 это одна вершина. Фибоначевое дерево
[42:14.420 --> 42:21.300]  ранга K это корень, к которому присоединены фибоначевые деревья ранга больше либо равных нуля,
[42:21.300 --> 42:33.420]  больше либо равных единиц и так далее. То есть у него K детей, но эти ранги могут быть больше либо
[42:33.420 --> 42:41.900]  равны чему-то. То есть если у тебя есть там, не знаю, 5 детей, то это не означает, что 0, 1, 2 и так далее идет.
[42:41.900 --> 42:50.580]  Почему? Потому что у вас в фибоначевом дереве могут быть помеченные деревья. Помеченные деревья
[42:50.580 --> 42:59.060]  означают следующее, что у вас не будет какого-то одного ребенка. То есть оно фактически выглядит
[42:59.060 --> 43:06.860]  ровно так же как было. Как было у нас? У нас было следующее, что если у меня это ранга K, то у него
[43:06.860 --> 43:25.100]  есть 0, есть 1, есть 2, ну деревья и так далее. K-1 и все это является тоже биномиальными деревьями.
[43:25.100 --> 43:31.820]  Было такое? Только что было. Что означает помеченное фибоначевое дерево? То есть смотрите,
[43:31.820 --> 43:37.900]  деревьями фибоначи не только являются вот эти вот кусочки, но представьте, что одного сына просто
[43:37.900 --> 43:45.980]  забил. Ну все, минус один сын, грустная история, но что поделать? Такое тоже бывает с деревьями.
[43:45.980 --> 44:00.780]  Важное уточнение. Нет, сейчас, это неправильно. Больше либо равно K-2. Почему? Это не больше
[44:00.780 --> 44:09.380]  либо равно K-2? Оно сделано здесь больше либо равно K-2 для чего? Потому что количество детей K-1.
[44:09.380 --> 44:19.060]  Ранги сами по себе различны, но вот типа один из них может быть выкинут. Какой вот этот вопрос?
[44:19.060 --> 44:32.500]  Понятно, то есть у меня становится уже не K детей, а K-1. Я выкинул любого рандомного сына у этого
[44:32.500 --> 44:47.140]  дерева. Да. Одного. Два нет. Здесь мы считаем, что да. Ранги не совпадают. То есть та же самая
[44:47.140 --> 44:51.660]  фибоначевая пирамида. Ой, господи, пибоначевая пирамида, извините. А то же самое биномиальное
[44:51.660 --> 44:59.940]  дерево, просто где некоторые деревья могут не иметь одного какого-то ребенка.
[45:02.500 --> 45:10.020]  Понятно? Это вот такой вот прикол здесь добавлять. Сейчас будем понимать, для чего вообще это все сделано
[45:10.020 --> 45:19.780]  и зачем мы можем так делать. Какое есть интересное свойство для фибоначевого дерева? Ну смотрите,
[45:19.780 --> 45:31.620]  минимальное количество элементов в фибоначевом дереве ранга K, если оно равно NK, то оно больше
[45:31.620 --> 45:43.500]  либо равно, чем FK. F это фибоначевое число. Число фибоначевого. Понятно? То есть для ранга K у нас есть
[45:43.500 --> 45:51.860]  FK. Ну как это сделать? Ну это сделать достаточно просто по базе ну как бы нулевого ранга. Одна
[45:51.860 --> 46:02.500]  вершина первого ранга. Почему у меня там написано 1? Потому что может быть помеченное дерево, все
[46:02.500 --> 46:10.780]  правильно. То есть смотрите, что такое фибоначевое дерево ранга 1? Это либо вот это, либо вот это,
[46:10.780 --> 46:18.180]  потому что вот эту связь я убил. Я могу избавиться от одного стына. Вот я избавился. Да.
[46:26.180 --> 46:35.220]  По сути, да. Нет. Но это если выкинуть именно максимально, не обязательно он выкидывается.
[46:40.780 --> 47:02.540]  Сейчас еще раз. Подожди. Давай еще раз. Допустим у нас есть дерево ранга K минус 2. K плюс 2. Есть.
[47:11.780 --> 47:20.460]  У него должны быть все дети. Есть ребенок ранга K.
[47:30.340 --> 47:39.660]  Но это будет еще одно ранга K. Вот здесь смотрите, оно считается, что это различные сами по себе
[47:39.660 --> 47:52.900]  деревья вот в нашей голове будут. Мы убрали это все. А? Ну фактически, если относиться к рангу именно
[47:52.900 --> 47:59.100]  по количеству детей, то это обязательно такое произойдет. Если убирать именно такие, то да. Вот.
[47:59.100 --> 48:08.060]  Такое возможно. Вот. Ну а теперь смотрите, что касается перехода. Переход здесь достаточно простой.
[48:08.060 --> 48:19.740]  Вот у меня есть какое-нибудь дерево ранга K. У него много-много детей. Ну и вот только что как раз то,
[48:19.740 --> 48:28.340]  что ты нам рассказывала, я и сделаю здесь. То есть у меня есть ранга K минус 1, который я помеченный
[48:28.340 --> 48:34.820]  могу сделать и из него что-нибудь выкинуть. И это получится дерево ранга K минус 1. Ой, K минус 2.
[48:34.820 --> 48:44.300]  Ну то есть я из него еще что-нибудь повыкидываю. Вот. А есть все остальные. То есть я именно вот
[48:44.300 --> 48:56.040]  этот кусок убираю. Оставляется здесь K минус 2. Sorry. И вот этот кусок. Вот. Я утверждаю, что одно из них
[48:56.040 --> 49:01.960]  имеет ранга K минус 1, другое фибоначиваем деревом ранга K минус 1, другое фибоначиваем деревом
[49:01.960 --> 49:11.800]  ранга K минус 2. А эти фибоначивают числа по предположению индукции. Н. Количество вершин.
[49:11.800 --> 49:34.360]  Количество вершин в дереве ранга K. Да. Смотрите, я должен подпереть снизу. А согласны ли ты,
[49:34.360 --> 49:40.840]  что если я уберу большее количество вершинок, то как бы я подпираюсь снизу? Ну вот. Еще есть
[49:40.840 --> 49:52.440]  вопросы? Утверждение следующее, что если у меня есть фибоначивое дерево ранга K, то вот я K
[49:52.440 --> 49:58.400]  зафиксировал. То есть если в нем сказать, сколько количество элементов, то есть количество вершин N,
[49:58.400 --> 50:12.000]  K, оно будет больше либо равно, чем фибоначивое число KT. Понятно? У тебя в дереве ранга K
[50:12.000 --> 50:19.280]  количество вершин будет больше, чем KT и число фибоначи. Ты не можешь сделать его с меньшим
[50:19.280 --> 50:27.880]  количеством вершин. Понятно? Отлично. Теперь смотрите. Ну как бы фибоначивое число можно
[50:27.880 --> 50:34.600]  ограничивать, ну тут здесь написано 3 вторых в степени K-2. Но это все достаточно просто,
[50:34.600 --> 50:40.400]  хотите докажите. Ну как бы я говорю, что это больше либо равно, чем 3 вторых в степени K-2.
[50:40.400 --> 50:49.400]  K, напомню, это ранг. Это число фибоначи. Ну как бы и что мне тут сделать? Ну вот это, вот это я
[50:49.400 --> 51:05.120]  могу еще и прибить тем, что N-KT. Ну для чисел фибоначи есть такой прикол. Давайте назову это так.
[51:05.120 --> 51:15.600]  Вы можете погуглить, посмотреть, как это доказывается отдельно. Вот у нас есть вот такая вот вещь. Значит,
[51:15.600 --> 51:26.320]  у меня что там K-2 будет, ну если я прологрифмирую обе части, то?
[51:26.320 --> 51:39.360]  K-2 там будет меньше либо равно, чем там логарифм трех вторых N-KT.
[51:42.560 --> 51:51.160]  Ну я получаю здесь, что K у меня зависит логарифмично от количества элементов. Это пока понятно? То есть
[51:51.160 --> 52:00.240]  у меня ранг зависит от элементов с помощью логарифма. Красиво, красиво, очень полезная
[52:00.240 --> 52:07.280]  вещь на самом деле. Сейчас будем дальше доказывать. И сейчас мы встретимся с тем, о чем мы будем еще
[52:07.280 --> 52:14.360]  потом чуть-чуть попозже поговорим. Это называется амортизационный анализ. Он здесь опять нам пригодится.
[52:14.360 --> 52:21.040]  Но перед этим, что такое вообще фибоначевая пирамида? Ну вот мы с деревьем сейчас посмотрели,
[52:21.040 --> 52:30.120]  прозбирались. Фибоначевая пирамида это набор из фибоначевых деревьев и указательный минимальный
[52:30.120 --> 52:40.760]  элемент. Причем корни всех деревьев не должны быть помечены. То есть корни выглядят как биномиальные
[52:40.760 --> 52:47.680]  пирамида. Вопрос, что там внутри, вот это уже другой вопрос. Там может быть что-то уже помеченное.
[52:47.680 --> 52:57.400]  Вот. И свойство пирамидов каждой из этих кусочков тоже должно поддерживаться. Какой здесь есть важный
[52:57.400 --> 53:02.600]  нюанс? Чем отличается от биномиальных пирамид?
[53:10.760 --> 53:18.200]  Мы можем повторяться. Рангами мы можем повторяться. То есть ранги у фибоначевых здесь деревьев внутри,
[53:18.200 --> 53:27.120]  у каждого это может повторяться. То есть у пирамид биномиальных мы требовали, чтобы ранги были различны.
[53:27.120 --> 53:33.600]  Здесь нет такого. Здесь мы можем, смотрите, здесь у меня фибоначевая пирамида 1, фибоначевая 2,
[53:33.600 --> 53:42.520]  фибоначева 2, дерево ранга 2, 3 и 3. Могу так сделать? Да могу. То есть с фибоначевым пирамидом такое
[53:42.520 --> 53:52.200]  возможно. И здесь очень просто понимать, что вообще с этим всем делать. Нам нужно сделать какие-нибудь там
[53:52.200 --> 53:58.080]  операции на фибоначевой пирамиде. Ну get минимум, как сделать? Но у меня есть указатель на минимум, я
[53:58.080 --> 54:06.320]  все так же сделаю get минимум, завод единички. Согласны? Merge. Я не знаю, вы прочитали или нет?
[54:06.320 --> 54:22.080]  Прочитали. Что там написано? Конкатинация списка. Что это значит? Просто сливая между собой. Да,
[54:22.080 --> 54:29.800]  смотрите. С Merge мы делаем следующее, что у меня есть первый список, есть второй список, давайте
[54:29.800 --> 54:38.760]  их построим друг за дружкой. Получили наш ответ. Вот. С Merge эти два восхитительных, две восхитительные
[54:38.760 --> 54:44.160]  пирамиды. За сколько это будет работать? За единицу. Я думаю вы понимаете, что список добавить к списку,
[54:44.160 --> 54:56.280]  все просто. Еще раз. Сохранение минимума. У тебя есть указатель там, указатель там. Найти
[54:56.280 --> 55:07.800]  минимум между ними несложно. Вот здесь, смотрите, хотелось бы, да, но это тоже можно реализовать
[55:07.960 --> 55:24.360]  завод единички. Подумайте над этим с точки зрения реализации. Обязательно ли это такой вот прям
[55:24.360 --> 55:30.720]  тотальный список? Или это массив указателей какой-то? Или это указатели, где у меня есть нулевые,
[55:30.720 --> 55:39.240]  первые ранги и так далее. Подумайте над этим на досуге. Назову это так. Вот. А что касается
[55:39.240 --> 55:47.240]  insert? Ну, insert делается аналогично. Добавьте фибоначевую пирамиду ранга ноль и вы получите
[55:47.240 --> 55:55.200]  радость из того, как это получилось. Работает завод единички уже лучше, чем предыдущая. Заметьте,
[55:55.200 --> 56:04.440]  то есть в предыдущем, смотрите, insert не работал завод единицы, merge не работал завод единицы,
[56:04.440 --> 56:14.920]  getmin тоже работает завод единицы. У нас осталось что? Декриз и экстракт. Можно.
[56:14.920 --> 56:37.760]  Как мы что? Ну, смотрите, а merge понимаешь? Ладно, давайте сейчас. Вот у вас есть две фибоначевые
[56:37.760 --> 56:45.880]  пирамиды. Ну, давайте вот эту просто добавим сюда в конец. Я получу такой список из шести. Могу я
[56:45.880 --> 56:52.440]  сделать это завод единички? Ну, вообще это никак не влияет. Вот здесь мы поддерживали это для того,
[56:52.440 --> 56:58.200]  чтобы складывать их правильно, merge между собой правильно. А вот здесь, ну, здесь никак не влияет.
[56:58.200 --> 57:08.840]  Это первое. Ну, а как сделать insert? Ну, что такое? Ты добавляешь одну вершинку. Ты
[57:08.840 --> 57:19.280]  добавляешь одну вершинку, это фибоначевая пирамида ранга ноль. Ну, да. Добавь. Вот. Тоже
[57:19.280 --> 57:29.200]  работает завод единички, да? Не за что. Можно. Как добавить список к списку? Да. То есть,
[57:29.200 --> 57:33.760]  фактически, это списки, просто связанные между собой. Ну, вот это все является какой-то
[57:33.760 --> 57:47.800]  ноды связанной. Ну, добавить быстро, это самое важное. Хорошо. А понятно, что я сделал? Вот. А
[57:48.120 --> 57:53.640]  теперь давайте, знаете, фибоначевая пирамида не построена на каких-то гиперумных вещах,
[57:53.640 --> 58:01.000]  кроме того, что это. Вот. Ну, типа, для того, чтобы прийти к тому, что это, это, ну да, это один свой
[58:01.000 --> 58:10.240]  прикол. А вот предположим, что я должен сделать, да, decrease. Вот как самое быстрое сделать decrease?
[58:10.240 --> 58:21.240]  Вот самое простое, что у вас приходит в голове. Представьте, не знаю, что у вас есть пирамидка,
[58:21.240 --> 58:28.560]  ну, там что-нибудь еще. Вам надо удалить вот этот элемент. Что я сделать можно? Как это сделать
[58:28.560 --> 58:37.600]  быстро? Да, я просто возьму, отрежу этот кусок. Ну, я же могу делать одинаковые ранги. И вот этот
[58:37.600 --> 58:43.760]  кусок вынесу в новый. У меня появится, ну, грубо говоря, было там, не знаю, 5 пирамид. О, 5 деревьев.
[58:43.760 --> 58:54.280]  Стало 6. Ну, в чем-то принципиально проблема? Нет. Это другой хороший вопрос. У тебя такой же был?
[58:54.280 --> 59:00.600]  Отлично. Это правильный вопрос. Что делать с тем, что оно помечено? То есть, смотрите, если вдруг
[59:00.600 --> 59:08.400]  вот это его родитель не является помеченным, тогда в этом случае я говорю о том, что я просто вот
[59:08.400 --> 59:20.720]  этот кусок вытягиваю, сюда ставлю и помечаю вершинку. А вот есть вот этот? Ну, перенесу. Перенесу
[59:20.720 --> 59:25.560]  и что-нибудь с этим должен буду сделать. Нужно подумать, что тут делать. Но в действительности
[59:25.560 --> 59:31.080]  удалять помеченные не самая лучшая идея. Вот. Вопрос следующий. А что делать, вот типа,
[59:31.080 --> 59:36.960]  если у меня родитель помечен? Ой, не, это долго. Давайте самое, самое простое, что есть. Давайте
[59:36.960 --> 59:43.680]  вот тут отрежем. И это перенесем туда. Но у него что же тут есть? Продолжение какое-то, правильно?
[59:43.680 --> 59:55.200]  Вот это? Продолжаешь дальше. Корень не может быть. Корень не может быть помеченным. Если
[59:55.320 --> 01:00:02.560]  мы удалим и корень станет помеченным. Как ты это при себе представляешь? Есть очень простое решение
[01:00:02.560 --> 01:00:11.040]  в этом плане. Всё такое можно делать. Но в действительности там не будет таких случаев.
[01:00:11.040 --> 01:00:21.600]  На самом деле, когда вы просто отрезаете какой-то кусочек, который вы хотите удалить,
[01:00:21.600 --> 01:00:31.480]  мы же удаляем здесь, правильно? Тут всё удаляем. Вот, точнее, уменьшаем, sorry, не удаляем, а здесь
[01:00:31.480 --> 01:00:37.680]  у меня уменьшается. Вот. Для того, чтобы поддерживать, я неправильно говорил, простите,
[01:00:37.680 --> 01:00:44.640]  не для удаления, а для уменьшения. Я же не хочу восстанавливать здесь всё правильно относительно
[01:00:44.640 --> 01:00:51.240]  удаления, а к удалению мы сейчас вернёмся. Забудьте, что я сейчас говорю. С точки зрения уменьшения,
[01:00:51.480 --> 01:00:58.080]  когда я хочу уменьшить что-то, мне нужно восстанавливать правильно пирамидку, правильно? Я просто
[01:00:58.080 --> 01:01:03.800]  рисовал одно, говорил другое, могло быть немножко диссонанс. Вот я хочу здесь уменьшить, там, не знаю,
[01:01:03.800 --> 01:01:10.800]  минус пять сделать. Мне фактически нужно повышать эту вершинку, делать сифтап. Это долго, это неприкольно.
[01:01:10.800 --> 01:01:19.000]  Поэтому я просто отрезаю кусок и туда кладу. Вот. Но если вдруг у меня помечено, я выше иду и там
[01:01:19.000 --> 01:01:27.040]  отрезаю, потом выше иду и там отрезаю, и так далее. Вот. То есть, я как бы уменьшаю ключик, отрезаю
[01:01:27.040 --> 01:01:35.840]  этот кусок от своего поддерева, вставляю в конец списка. Хорошо, ну хорошо. Помечаю родители, не
[01:01:35.840 --> 01:01:43.320]  могу пометить родителя, значит, родителя тоже отрезаю, добавляю в конец списка, всё хорошо,
[01:01:43.440 --> 01:01:50.320]  уменьшаю только ранг у него на единичку. Из-за того, что я уменьшаю ранг на единичку, у меня всё
[01:01:50.320 --> 01:01:57.720]  получается корректно, потому что у меня родитель, когда переходит вверх, ну, у него теряется сын.
[01:01:57.720 --> 01:02:07.160]  Согласны? Этот кусок теряется. Могу я уменьшить на единицу ранг? Я уменьшаю на единицу ранг.
[01:02:13.320 --> 01:02:24.200]  Нет, у нас было только вот такое. В этом и суть, понимаете? Оно снизу ограничено, не сверху.
[01:02:24.200 --> 01:02:35.200]  Поэтому дерево ранга ка, может быть, ребёнок ранга ка. Никто не ограничивает здесь. Да. Нет,
[01:02:35.200 --> 01:02:43.000]  мы идём вверх. У меня есть указатель, что я делаю меньше этот элемент. Я отрезаю этот кусок,
[01:02:43.880 --> 01:02:49.640]  помеченный или нет. Если не помечено, то всё хорошо, я просто его помечаю. Если оно помечено,
[01:02:49.640 --> 01:02:54.320]  то я такой. Значит, я не мог отрезать просто так кусок. Ну, давайте тогда отрежу его тоже,
[01:02:54.320 --> 01:03:01.320]  потому что он ненужный, и уберу пометку, и сделаю ранг на меньшую единицу. Могу, так могу и так далее.
[01:03:01.320 --> 01:03:10.400]  Если я ранг уменьшаю, я могу сделать эту пометку? Так его самого я не уменьшаю, у него сколько было
[01:03:10.400 --> 01:03:16.480]  детей, столько осталось? А, если он был до этого помечен, то хорошо, типа сделаю ранг меньше на
[01:03:16.480 --> 01:03:25.440]  единицу и пометь. Почему? Можем. Просто я этот кусок буду уменьшать. То есть смотри, у этого было
[01:03:25.440 --> 01:03:33.040]  сколько детей, если он помечен? Ну, не знаю, там ка минус один. Я отрезаю ещё один, ставил ка минус два.
[01:03:33.040 --> 01:03:41.720]  Могу я его выкинуть вверх и сказать, что у него ранг теперь не ка минус один, а ка минус два? Могу.
[01:03:41.720 --> 01:03:48.640]  Чего моя проблема? Чего? У меня всё, что должно быть в моём дереве, это вот это. Ну, у меня
[01:03:48.640 --> 01:03:52.840]  стало меньше детей, согласен, что если до этого у него был ранг ка минус один, ну, уберу я одного
[01:03:52.840 --> 01:03:58.280]  ребёнка, останется то же самое. Больше ебровно ка минус два будет уже всё. Будет такой? Будет,
[01:03:58.280 --> 01:04:07.280]  конечно. Сомнительно, но окей, да? Вот такой примерно. Вот, это хорошо. А сколько таких
[01:04:07.280 --> 01:04:16.880]  деревьев? Много. Согласны, что у меня слишком большой список получается? Есть такое. Неприкольно.
[01:04:16.880 --> 01:04:30.000]  Ну, смотрите, типа, с одной стороны, декриз работает за сколько? За ранг. Давайте оценим.
[01:04:30.000 --> 01:04:36.300]  Смотрите. Вводим ваш любимый метод потенциала. Давайте оценим, за сколько будет это работать.
[01:04:36.300 --> 01:04:43.600]  Сколько раз мы вверх будем подниматься и как тут жить? Давайте введём потенциал, это количество
[01:04:43.600 --> 01:04:49.720]  деревьев в моей вот этой цепочке, плюс два умноженные на количество помеченных деревьев.
[01:04:49.720 --> 01:04:57.760]  Могу я так сделать? Могу. Чему у меня равно амортизационное время? Оно равно реальному
[01:04:57.760 --> 01:05:08.200]  времени, плюс потенциал после и минус потенциал до. Согласны? Согласны. Вначале я такой, я прошёл
[01:05:08.200 --> 01:05:16.640]  и вот типа дельта деревьев выкинул вверх. Вот типа вот это вот всё это дельта, то есть один плюс
[01:05:16.640 --> 01:05:23.040]  вот этот вот кусок дельты, помеченных мной родителями, которые были помечены. Согласны?
[01:05:23.040 --> 01:05:34.680]  Перехожу вверх. Вот. Это время t. Один плюс дельта. Дальше сколько у меня стало деревьев? В начале
[01:05:34.680 --> 01:05:41.480]  у меня было t, я ещё сверху добавил дельту и плюс один вот этот кусок, который я сам выкинул вверх.
[01:05:41.480 --> 01:05:53.920]  Согласны? Отлично. Сколько у меня было помеченных деревьев? Было помеченных м большое. Сколько я
[01:05:53.920 --> 01:05:59.680]  выкинул помеченных деревьев и убрал метку? Ну согласны, что дельту? Вот я шёл вверх только на
[01:05:59.680 --> 01:06:09.840]  дельту этих вершин. Отлично. То есть минус дельта и плюс один, потому что у меня ещё что? Да, потому
[01:06:09.840 --> 01:06:17.280]  что я там ещё добавил помеченное дерево. Вот. Ну как бы 2m минус дельта плюс один. Чудно. А что было
[01:06:17.280 --> 01:06:23.120]  до этого? Ну в самом начале было t плюс 2m. Ну там минус 2m, это в кобочке надо было взять,
[01:06:23.120 --> 01:06:32.640]  я простите, тут не взял. Вот. Ну всё. Всё это вычитаем, получаем 4. Амортизационная константа.
[01:06:32.640 --> 01:06:44.760]  Константа? Правильное замечание. Вот нужно думать, что делать с этим дальше. Ну то есть амортизационное
[01:06:44.760 --> 01:06:51.360]  время декриза от единички. Давайте так. Показала вам, что от единички? У нас что осталось? Какая ещё
[01:06:51.480 --> 01:07:02.120]  операция? Да. А? У фии минус первого нужны скобочки, это правда, да, я сказал это. Экстракт у нас
[01:07:02.120 --> 01:07:07.400]  остался. Смотрите, если бы всё… Согласны ли вы с тем, что экстракт вряд ли будет работать за вот
[01:07:07.400 --> 01:07:16.480]  единица? Была бы какая-нибудь киллерфича, типа, в виде этой афибоначевой пирамиды, почему? Я могу
[01:07:16.480 --> 01:07:23.160]  сказать, что она работает не меньше, чем за логарифм. Как вы думаете, из-за чего? Худший случай. Ладно,
[01:07:23.160 --> 01:07:29.320]  амортизационную могу показать. Она работает на самом деле не меньше, чем за логарифм и за
[01:07:29.320 --> 01:07:35.000]  сортировки. Сортировка, построенная на сравнениях, не может работать быстрее, чем за НЛГН. Помните
[01:07:35.000 --> 01:07:42.440]  такое было? Этот вот нижний барьер, который у нас есть. Если бы вдруг у вас фибоначева пирамида умела
[01:07:42.440 --> 01:07:52.720]  всё делать быстрее, то есть всё за у от единички, то у вас была бы сортировка за у от Н. Ну,
[01:07:52.720 --> 01:07:58.720]  потому что у вас всё в фибоначевой пирамиде работал бы за у от единицы. Ну, вы же минимумы
[01:07:58.720 --> 01:08:04.800]  вытаскиваете просто и получаете сколько? Н минимумов за у от единицы. Ну, было бы за у от Н
[01:08:04.800 --> 01:08:11.360]  тогда эта сортировка. Что странно. Такого быть не может. Поэтому хотя бы за логарифм, потому что
[01:08:11.480 --> 01:08:18.640]  Н экстрактов, вот эти вот, которые у вас будут, они должны давать логарифм. То есть НЛГН минимум. Вот
[01:08:18.640 --> 01:08:24.200]  как работает экстракт. Мы, кстати, даже с вами сегодня амортизационный анализ не успеем. Какой
[01:08:24.200 --> 01:08:32.320]  кошмар. Ладно, ничего страшного, мы придумаем. А с экстрактом фибоначевой пирамиды. Смотрите,
[01:08:32.320 --> 01:08:38.760]  как работает экстракт в этой фибоначевой пирамиде. Мы удаляем вершину и делаем мерч просто,
[01:08:38.760 --> 01:08:48.080]  как в биномиальной пирамиде. Вот. Ну, все достаточно просто. Удаляем, ну, как бы вот ровно то,
[01:08:48.080 --> 01:08:55.320]  что у вас было вот в биномиальной пирамиде. Вы раз, два, мерчите. Их мерчить можно подряд. За у от
[01:08:55.320 --> 01:09:02.120]  единички. Согласна? А теперь смотрите. Для того, чтобы это не вырождалось все вот в эту большую
[01:09:02.120 --> 01:09:07.920]  такую цепочку, как только у вас встречается экстракт, вы же все равно будете проходиться по всем
[01:09:07.920 --> 01:09:14.720]  элементам для того, чтобы минимум найти. Согласна? Ну, потому что вам нужно вот протыкаться. Ну,
[01:09:14.720 --> 01:09:23.360]  вы не знаете, минимум будет лежать здесь, здесь, здесь, здесь, здесь, здесь или здесь. Вам нужно
[01:09:23.360 --> 01:09:29.400]  пройтись по всему. То есть это как минимум у от н. Вы не можете быстрее просто делать. Хотя,
[01:09:29.400 --> 01:09:35.840]  в действительности это не у от н можно делать, а быстрее. Но у от н имеется в виду n это количество
[01:09:35.840 --> 01:09:44.520]  пирамиды. Не у от н вершинок. Ну, если мы не будем их как-то склеивать, то да. Так вот,
[01:09:44.520 --> 01:09:49.880]  вторым этапом вы все равно проходите по этим пирамидам. А давайте пирамида одинакого ранга
[01:09:49.880 --> 01:09:58.640]  склеивать. Ну, деревья между собой очень легко склеивать и делать из них ранг побольше. Согласна?
[01:09:58.640 --> 01:10:06.040]  За счет этого вы их постоянно укрупняете. То есть с помощью экстракта у нас идет укрупнение нашей
[01:10:06.040 --> 01:10:14.240]  пей вот этой вот вещи, которая есть. То есть как только у вас не будет жуткого вырождения между
[01:10:14.240 --> 01:10:24.280]  собой в такую вот цепочку. Понятно? Понятно, что я делаю с точки зрения склеивания. Ну, это на самом
[01:10:24.280 --> 01:10:33.680]  деле легко хранить с точки зрения вектора с указателями на пирамида одинакого ранга. То есть
[01:10:33.680 --> 01:10:44.080]  в В0 у вас лежит какой-нибудь вектор, в котором там находятся указатели на все пирамиды ранга 0.
[01:10:44.080 --> 01:10:50.760]  Склеить между собой пирамида ранга 0, а потом добавить это в В1. И так дальше. То есть вы это
[01:10:50.760 --> 01:10:57.080]  легко сделаете. И будем это делать. А теперь вопрос. Сколько будет работать экстракт? И что с
[01:10:57.080 --> 01:11:05.440]  этим делать? Ну, мы введем все тот же потенциал. Оставим его ровно таким же. И экстракт как будет
[01:11:05.440 --> 01:11:14.200]  считаться? Ну, смотрите. Вот что такое T, что такое D? D это количество вот здесь. T это первоначальное
[01:11:14.200 --> 01:11:23.120]  количество деревьев. D это сколько остается в том, где мы удаляем этот минимум. Вот. Ну, мы их
[01:11:23.120 --> 01:11:29.080]  склеиваем между собой, и нам нужно пройтись, найти минимальный указатель, который есть. Согласны? То
[01:11:29.080 --> 01:11:38.680]  есть это 1 плюс T плюс D. 1 удалить, T по всему пройтись, D еще и тут пройтись. И там, и там
[01:11:38.680 --> 01:11:53.920]  пройтись, найти минимум в вершинке. Так? Согласны? Узнали? Не знаю. Вот. Теперь смотрите. Пусть у меня
[01:11:53.920 --> 01:12:02.800]  остался T деревьев. После того, как я прошелся T, я подразумеваю, что... Ну, я их склеил между
[01:12:02.800 --> 01:12:09.920]  собой все. Поэтому у меня остался какой-нибудь там T штрих. А количество маркированных? Ну, 2M. У меня
[01:12:09.920 --> 01:12:15.600]  как были маркированы, так и остались деревья. Согласны? Ничего я здесь критического с ними не
[01:12:15.600 --> 01:12:24.080]  сделал. У меня все равно в... Здесь вот помеченные не могло быть. Если тут были помеченные,
[01:12:24.080 --> 01:12:29.040]  ну, они остались и так далее. Мы их соединили, все хорошо. То есть количество помеченных деревьев
[01:12:29.040 --> 01:12:35.000]  осталось такое же. Ну, и вот здесь у меня тоже не хватает скобочек, если что. Тут уж простите. Вот.
[01:12:35.000 --> 01:12:48.120]  T минус 1 — это то, сколько было. Плюс D плюс 2M. Это как раз то количество деревьев, которое стало. Вот.
[01:12:48.120 --> 01:12:58.840]  Сейчас я правильно посчитал? Да. Да. Вот. Phi минус 1. Ну, T минус 1 плюс D. Количество
[01:12:58.840 --> 01:13:05.400]  деревьев. Вот. Все это сложив, я с вами получу, что у меня будет это все равно просто T штрих.
[01:13:05.400 --> 01:13:17.520]  А T штрих — это что? А T штрих — это количество деревьев, которые у меня здесь есть. Да? А теперь вернемся
[01:13:17.520 --> 01:13:37.800]  вот сюда. Согласны ли вы, то у меня количество элементов в дереве ранга K не больше, чем f от K?
[01:13:37.800 --> 01:13:51.720]  Да? Был такое. Логарифм мы с вами получали? Получали. Чудесно. Вот. Поэтому количество, на самом деле,
[01:13:51.720 --> 01:13:56.720]  вот этих деревьев, которые есть, вы же смёрзете все, что у вас будет, у вас все также получится
[01:13:56.720 --> 01:14:04.600]  в степени вот эти двойки. Ну вот, у вас получится логарифм N. И экстракт работает амортизонно
[01:14:04.600 --> 01:14:13.720]  за логарифм. И если мы по итогу посмотрим на все, что у нас есть, то у нас есть фибоначевая пирамида,
[01:14:13.720 --> 01:14:20.920]  которая делает почти все за единичку, кроме удаления элемента. Удаление элемента работает
[01:14:20.920 --> 01:14:26.760]  за логарифм. Все остальное работает за U от единицы. Но декриз, важно понимать, работает амортизонно
[01:14:26.760 --> 01:14:32.840]  за U от единицы. Как вы думаете, вы хоть где-нибудь когда-нибудь встречали фибоначевую пирамиду?
[01:14:32.840 --> 01:14:43.520]  Ой, ладно, там может быть, но очень вряд ли. На самом деле, фибоначевая пирамида очень имеет
[01:14:43.520 --> 01:14:51.560]  огромнейшую константу. Очень-очень большую. И на каких-то адекватных данных фибоначевая пирамида
[01:14:51.560 --> 01:14:57.040]  не умеет давать хороших результатов. То есть, вот эта U от единички, она большую константу имеет,
[01:14:57.040 --> 01:15:03.560]  ну извините, вот эта вот C, которая у вас будет, если вы реализуете ее, вы увидите. И биноминальная
[01:15:03.560 --> 01:15:10.400]  пирамида работает объективно лучше в этом плане. То есть, в контесте у вас не будет такого, что вам
[01:15:10.400 --> 01:15:14.520]  нужно будет фибоначевую пирамиду полностью реализовывать именно в том плане, что она умеет
[01:15:14.520 --> 01:15:27.120]  работать категорически долго. А? Ну это другой вопросик. Все может быть. Вот. Поэтому фибоначевая
[01:15:27.120 --> 01:15:35.200]  пирамида это такой прикольный покемон в мире алгоритмов, я бы назвал, который в действительности
[01:15:35.200 --> 01:15:44.160]  очень важен с точки зрения такой теоретической части алгоритмов. То есть, да, такие вещи
[01:15:44.200 --> 01:15:49.800]  существуют. С точки зрения асимптотики это работает достаточно быстро, с точки зрения практики это
[01:15:49.800 --> 01:15:56.360]  работает не очень быстро. То есть, важно здесь основать, что существуют и такие вот вещи. Но
[01:15:56.360 --> 01:16:04.120]  иногда к результатам этого мы вернемся. Мы вернемся в этом в графах. Я вас прошу, за сколько что будет
[01:16:04.120 --> 01:16:10.880]  работать, вы должны мне будет рассказать. Потому что в одном из алгоритмов это будет интересно и
[01:16:10.880 --> 01:16:18.360]  полезно. Во всем остальном в действительности это больше такая теоретическая часть, которую я думал,
[01:16:18.360 --> 01:16:26.880]  что я расскажу еще в прошлом семестре, но я вам там провел контроль. Вот. Поэтому в этом семестре вот
[01:16:26.880 --> 01:16:35.840]  отдают дань, уважение тому, что есть. И, если не ошибаюсь, эту пирамиду придумал когда-то Тарьян.
[01:16:35.840 --> 01:16:45.600]  Так что как-то так. Да, у нас время подходит к концу, к амортизационному анализу. Значит,
[01:16:45.600 --> 01:16:54.320]  я вернусь на следующей лекции, возможно. Я очень кратко пробегусь на тему того, что у вас происходит
[01:16:54.320 --> 01:17:03.200]  вообще в мультипликативной схеме. Так, ты хочешь уйти, все понятно. В мультипликативной схеме
[01:17:03.200 --> 01:17:10.480]  о расширяющейся массива, динамически расширяющейся массива. Булат вам это показывал. Вы можете это
[01:17:10.480 --> 01:17:16.280]  посмотреть. И если на следующей лекции вы мне скажете все, что все было понятно и нам это не нужно,
[01:17:16.280 --> 01:17:27.080]  то это один вопрос. Если скажете, что если вас будет, да это, веду немножко хаоса,
[01:17:27.080 --> 01:17:32.560]  40 процентов из вас скажут, что вы этого не видели. Если будет один человек, то будет грустно,
[01:17:32.560 --> 01:17:41.560]  конечно, но там уж прикинем как-нибудь 40 процентов. А то мы это быстро с вами разберем. В любом случае,
[01:17:41.560 --> 01:17:47.280]  если что, есть и моя лекция, еще записанная на лектории тоже, где вы можете это глянуть. Она
[01:17:47.280 --> 01:17:53.120]  давно была уже сделана, но суть останется все равно такой же. На этом, в принципе, все. Давайте
[01:17:53.120 --> 01:17:55.520]  сделаем фото и закончим.
