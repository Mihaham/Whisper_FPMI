[00:00.000 --> 00:16.000]  В прошлый раз мы делали фанкшн и делали его через виртуальные функции, в этот раз мы делаем ене, будем делать уже без виртуальных функций.
[00:16.000 --> 00:29.000]  Наверное, даже чтобы замотивировать, зачем этим всем заниматься, надо посмотреть еще раз на этот фанкшн и подумать, где здесь может тормозить.
[00:29.000 --> 00:32.000]  Где здесь перв проседает?
[00:37.000 --> 00:46.000]  Вот тут сейчас есть два таких крупных места, где перв проседает. Фундаментальных.
[00:46.000 --> 00:50.000]  За счет чего?
[00:50.000 --> 00:55.000]  Вот, а как работает виртуальный диспатчинг? Напомните мне кто-нибудь.
[00:55.000 --> 01:00.000]  Ну, у нас в типе есть указатель на виртуальную таблицу.
[01:00.000 --> 01:02.000]  В типе, в плане?
[01:02.000 --> 01:05.000]  Ну, в риалте.
[01:05.000 --> 01:10.000]  Да-да-да. То есть прямо в каждом объекте перед этим объектом лежит указатель на виртуальную таблицу.
[01:10.000 --> 01:12.000]  Да.
[01:12.000 --> 01:15.000]  Собственно, можно пройти по идее...
[01:19.000 --> 01:23.000]  Ну, это детали. А что главное лежит в виртуальной таблице?
[01:23.000 --> 01:28.000]  Указатели на виртуальную таблицу.
[01:28.000 --> 01:36.000]  Ну да. Просто обычные указатели на функции, которые показывают, что нужно вызывать для этого объекта в качестве виртуального метода.
[01:36.000 --> 01:42.000]  То есть вот тут мы дергаем какой-то кал, кол.
[01:45.000 --> 01:50.000]  И что происходит? Мы на самом деле из вот этого вот объекта storage...
[01:50.000 --> 01:53.000]  Окей, тут даже еще больше неэффективностей.
[01:53.000 --> 01:57.000]  Во-первых, мы загружаем из памяти указатель storage.
[01:57.000 --> 02:05.000]  Дальше мы по нему проходим, и туда, где он указывает, там где-то лежит указатель на виртуальную таблицу.
[02:05.000 --> 02:07.000]  Виртуальную таблицу.
[02:07.000 --> 02:13.000]  Его тоже нам нужно загрузить. Загрузили, значит, storage загрузили.
[02:13.000 --> 02:15.000]  Загрузили vtable.ptr.
[02:15.000 --> 02:23.000]  А пройдя уже vtable.ptr, нам нужно еще и загрузить сам указатель на функцию call.
[02:23.000 --> 02:28.000]  Итого три операции load.
[02:28.000 --> 02:31.000]  А кос у всех тут был, правда?
[02:31.000 --> 02:34.000]  Помните, там есть move из памяти, он дорогой.
[02:34.000 --> 02:37.000]  Вот три операции загрузки чего-то из памяти.
[02:37.000 --> 02:40.000]  Каждый из них по крышу промахивается, в принципе.
[02:40.000 --> 02:42.000]  Почему я так говорю?
[02:42.000 --> 02:47.000]  Потому что сама функция может быть не в кэше.
[02:47.000 --> 02:48.000]  Раз промах.
[02:48.000 --> 02:51.000]  А storage мы куда-то на кучу унесли.
[02:51.000 --> 02:55.000]  Она вообще где-то в стороне от всего происходящего.
[02:55.000 --> 02:56.000]  Это два промах.
[02:56.000 --> 03:01.000]  Ну и vtable.ptr тоже может быть далеко не в кэше и три промах.
[03:01.000 --> 03:06.000]  Ну и всего там, если вспомнить аналогию, которая, кажется, вам приводил,
[03:06.000 --> 03:12.000]  то там типа 300 условных единиц занимают все эти путешествия,
[03:12.000 --> 03:16.000]  а мы хотим меньше.
[03:16.000 --> 03:20.000]  Из этих трех разыминований можем мы выкинуть какие-нибудь?
[03:20.000 --> 03:23.000]  И как?
[03:23.000 --> 03:36.000]  Было предложение еще на прошлый тайм сохранять указатель на функцию сигнатуры white-noid?
[03:36.000 --> 03:38.000]  Ну какую-то, да.
[03:38.000 --> 03:41.000]  И называть ее?
[03:41.000 --> 03:42.000]  Ну вот.
[03:42.000 --> 03:45.000]  Стоится на предложение развучено, это прям вот здесь,
[03:45.000 --> 03:49.000]  хранить какой-то указатель на функцию.
[03:49.000 --> 03:54.000]  Ну непонятно, какой сигнатуры, наверное, такой.
[03:54.000 --> 03:55.000]  Ну да.
[03:55.000 --> 03:58.000]  Вот, и тогда, чтобы сделать оператор круглые скобки,
[03:58.000 --> 04:02.000]  нам нужно всего одну загрузку чего-то не прогретого не в кэше.
[04:02.000 --> 04:09.000]  Ну тогда уж даже не void, а red.
[04:09.000 --> 04:10.000]  Ну red, да.
[04:10.000 --> 04:12.000]  То есть каким-то таким образом это делать.
[04:12.000 --> 04:16.000]  Ну это сильно лучше может быть, особенно с условием,
[04:16.000 --> 04:20.000]  что сам объект function, с которым мы работаем,
[04:20.000 --> 04:23.000]  он, наверное, тоже будет в кэше.
[04:23.000 --> 04:28.000]  Ну то есть это резонное предположение, когда вы пишете какой-то класс абстракцию,
[04:28.000 --> 04:33.000]  что пользователь вашего класса сам позаботится о том, чтобы этот объект был в кэше.
[04:33.000 --> 04:38.000]  И все поля, которые у вас в этом классе, можно считать они прогреты.
[04:38.000 --> 04:42.000]  А вот если что-то у вас на кучу вынесено и там где-то лежит,
[04:42.000 --> 04:45.000]  ну это никто прогреть не сможет за вас.
[04:45.000 --> 04:51.000]  Вот, а еще есть неэффективность, помимо того, что в операторе круглые скобки.
[04:53.000 --> 04:58.000]  Которая гораздо на самом деле хуже, чем вот то, о чем сейчас говорили.
[05:01.000 --> 05:03.000]  Лямда это нормально.
[05:03.000 --> 05:07.000]  Лямда это просто краткий синтаксис для того, чтобы определить еще один класс
[05:07.000 --> 05:10.000]  с оператором круглые скобки и какими-то полями.
[05:10.000 --> 05:14.000]  Ну вот нью на свободные функции, это конечно да, как-то неэффективно,
[05:14.000 --> 05:19.000]  но я бы больше даже сказал, что вообще нью это неэффективно.
[05:19.000 --> 05:24.000]  Вот удивительный факт, что аллокаторы оказывается очень медленные бывают.
[05:27.000 --> 05:33.000]  Ну это прекрасная идея, но когда речь идет о кросс-плате,
[05:33.000 --> 05:35.000]  то там сразу беды начинаются.
[05:35.000 --> 05:39.000]  Вот здесь мы там смогли тесимолок подкрутить, а здесь не смогли.
[05:39.000 --> 05:42.000]  Вот его просто авторы не портировали на эту платформу.
[05:42.000 --> 05:47.000]  Либо иди сам портируй, либо стандартные локаторы этой платформы используй,
[05:47.000 --> 05:53.000]  либо свой пиши, ну или еще какой-нибудь сторонний джемолок, еще что-нибудь.
[05:53.000 --> 05:57.000]  В общем, на самом деле это просто неэффективно.
[05:57.000 --> 06:01.000]  Ну или еще какой-нибудь сторонний джемолок, еще что-нибудь.
[06:01.000 --> 06:06.000]  В общем, народная мудрость гласит, что если можете без аллокаций написать,
[06:06.000 --> 06:08.000]  то лучше писать без аллокаций.
[06:08.000 --> 06:14.000]  А можем ли мы, внеся некоторое ограничение на то, что вот здесь происходит,
[06:14.000 --> 06:22.000]  конкретно где-то вот здесь внеся ограничение, обойтись без аллокаций на куче?
[06:27.000 --> 06:31.000]  Ну нам не известно комплайлтами размер нашего объекта,
[06:31.000 --> 06:34.000]  поэтому мы можем его засунуть в наш стэк.
[06:34.000 --> 06:40.000]  Ну не в стэк, а как бы inline, это вот лучше, прямо inline в наш объект.
[06:40.000 --> 06:46.000]  Но это, конечно, правда. Давайте скажем, что он не больше 64 байт.
[06:46.000 --> 07:04.000]  Вот это прекрасная идея, потому что практика показывает, что огромное количество...
[07:04.000 --> 07:08.000]  Ну вот тут про указатели на функции сказали, что когда мы запихиваем
[07:08.000 --> 07:11.000]  какой-нибудь указатель на функцию или указатель на член класса,
[07:11.000 --> 07:14.000]  то мы там неэффективно все это тратим.
[07:14.000 --> 07:21.000]  Но практика показывает, что в принципе такие типы, такие TypeRace контейнеры,
[07:21.000 --> 07:28.000]  они используются для всяких колбеков, для передачи какой-нибудь колбека,
[07:28.000 --> 07:33.000]  трансформации чего-нибудь в какую-нибудь там штуку, посещающую что-то
[07:33.000 --> 07:38.000]  или обрабатывающую что-то. И все эти вещи обычно маленькие.
[07:38.000 --> 07:44.000]  Ну вот очень редко бывает так, что вы в лямбду и вот сюда запихиваете много-много-много байтов
[07:44.000 --> 07:50.000]  чего-то там непонятного. В большинстве случаев вы просто this туда захватите,
[07:50.000 --> 07:56.000]  и все, это 8 байт. Соответственно, кажется весьма резонным предположением,
[07:56.000 --> 08:02.000]  что в большинстве случаев тут мало байт, и нет никакой нужды это все на кучу выносить.
[08:02.000 --> 08:07.000]  Надо это все впихать прямо вот в inline память.
[08:07.000 --> 08:14.000]  Ну и сразу, чтобы так сказать не быть голословным, давайте...
[08:14.000 --> 08:33.000]  Да нет, надо просто гранулярность каша смотреть.
[08:33.000 --> 08:42.000]  Это 4 байта, да. Нет, это не про фолдшеринг, а про то, что у вас просто данные в память
[08:42.000 --> 08:47.000]  загружаются по кашлении. Ну сейчас, что я говорю.
[08:47.000 --> 08:52.000]  Даже за 1 байту, это не так.
[08:52.000 --> 08:57.000]  Это не про фолдшеринг, а про то, что у вас просто данные в память
[08:57.000 --> 09:02.000]  загружаются по кашлении. Ну сейчас, что я говорю.
[09:02.000 --> 09:08.000]  Даже запрос 1 байтика прочитать из непрогретой памяти, он по дороге к процессору
[09:08.000 --> 09:14.000]  с собой захватит вот такой регион в Эль 3, вот такой регион в Эль 2, вот такой там
[09:14.000 --> 09:20.000]  в Эль полтора какой-нибудь, и в Эль 1 у вас долетит, во всяком случае, хотя бы 64 байта
[09:20.000 --> 09:28.000]  окружающие вот этот вот 1 байтик. Ну я бы сказал наоборот, больше, чем 64 байта
[09:28.000 --> 09:35.000]  делать бессмысленно, если мы как-то смотрим на это как чистый такой оптимайз
[09:35.000 --> 09:42.000]  всего подряд. Но вот тут другой ответ есть. Вот вы пытаетесь число придумать, а
[09:42.000 --> 09:48.000]  ребята из Electronic Arts сказали, не будем мы числа придумывать, вот у них замечательный
[09:48.000 --> 09:56.000]  шаблон, есть fixed function. На работе у нас им обмазано примерно все. Заметьте, он
[09:56.000 --> 10:02.000]  принимает int и type name. Ну type name это понятно что, это вот самая наша сигнатура,
[10:02.000 --> 10:14.000]  ой, это не тот VS Code, да. Вот, type name это вот эта штука, сигнатура. А что за int?
[10:15.000 --> 10:24.000]  Тут самый inline размер, ну и если мы сейчас чуть-чуть поскролим, видимо вот это.
[10:30.000 --> 10:39.000]  Сейчас надо найти, где этот size and bytes устанавливается, вернее используется.
[10:45.000 --> 10:54.000]  Жесть, что так много? Давно этот код не читал, ну вот, не удается мне найти, сейчас.
[10:58.000 --> 11:04.000]  А, ну конечно мы здесь этого не найдем, да, потому что нам нужно на самом деле вот
[11:04.000 --> 11:21.000]  сюда, ну ладно, давайте, да, internal, вот. Там просто fixed function это обертка,
[11:21.000 --> 11:26.000]  и опять же на следовании используется, приватная, кстати, как вы в принципе в slice
[11:26.000 --> 11:32.000]  уже делали. Вот, где здесь...
[11:43.000 --> 11:47.000]  Function detail наследуется от function base detail.
[11:47.000 --> 11:56.000]  Да, без навигации по коду, конечно, очень неудобно, но кажется, кажется, вот сейчас
[11:56.000 --> 12:07.000]  вот здесь где-то должно найтись, и да, е-мое.
[12:15.000 --> 12:22.000]  Нету, да? А вот function storage, вот же он.
[12:26.000 --> 12:35.000]  Внимание, так сказать, на экран. Ну, тут еще какой-то класс используется, хитрый,
[12:35.000 --> 12:42.000]  но кажется, это в целом не весь размер объекта, то есть в придачу к этому тут еще что-то
[12:42.000 --> 12:48.000]  хранится, какой-то указатель, ну вот хоть что-то, поэтому выставлять его надо, наверное,
[12:48.000 --> 12:54.000]  не 64, если мы хотим там, чтобы все в кошелинью вылезло, но тут даже не в этом суть, даже если
[12:54.000 --> 13:01.000]  мы в кошелинью не влезаем, вот этот класс, он вполне разумный. Мы можем прям ну просто
[13:01.000 --> 13:05.000]  под все use-кейсы, которые у нас в кодовой базе есть, подогнать нужный размерчик,
[13:05.000 --> 13:11.000]  и если мы там этот колбэк не просто передали куда-то, а еще и храним, то хранить хочется
[13:11.000 --> 13:17.000]  как можно меньше байтов, и вот такой класс прекрасно помогает и работает. Ну, еще раз
[13:17.000 --> 13:27.000]  повторюсь, что это просто другой класс, нежели STD Function, вот 32 вы сказали, и лямбду,
[13:27.000 --> 13:35.000]  который больше 32 байт внутри, в захвате вы передать не сможете. Вот.
[13:35.000 --> 13:42.000]  Статик и серд будет? Да, статик и серд будет, просто скажут вам, не компилируюсь,
[13:42.000 --> 13:52.000]  а можно по-другому. И вот у стандартной Function, если вы в какую-нибудь реализацию
[13:52.000 --> 14:00.000]  STD C++ или C++ полезете, там на самом деле тоже можно найти вот такую забавную конструкцию,
[14:00.000 --> 14:07.000]  где какое-то хранилище байтиков прямо внутри класса Function, но оно работает хитрее,
[14:07.000 --> 14:15.000]  и вот никакого дополнительного параметра нету. И этот Function работает и для размеров больших,
[14:15.000 --> 14:22.000]  и для маленьких. Ну, можно посчитать сам размер и сделать специализацию, если размер меньше.
[14:22.000 --> 14:28.000]  Нет, как мы сделаем специализацию? Да, специализацию сделать мы не можем.
[14:28.000 --> 14:34.000]  Давайте еще раз поймем почему, потому что тип лямбды нам известен только в этом конструкторе.
[14:34.000 --> 14:41.000]  Сделать специализацию всего класса Function не получится. Конкретная любая специализация Function
[14:41.000 --> 14:48.000]  должна уметь и на куче хранить, и как бы внутри себя. Ну и несложно догадаться,
[14:48.000 --> 14:54.000]  как это сделано на самом деле. Ну вот Union. Здесь оно кажется тоже про это,
[14:54.000 --> 15:02.000]  но там вот этот вот интерфейс публичный немножко хитрый. Просто делается Union из
[15:02.000 --> 15:18.000]  либо storage, либо массив байтиков какой-то, причем уже фиксированный. Что-нибудь такое.
[15:18.000 --> 15:40.000]  Повод использовать Union вместо варианта есть, потому что вопрос в количестве байт.
[15:40.000 --> 15:59.000]  Да, мы же собрались здесь делать 64 байта, соответственно нам... Нет, в рантайме нужно следить за
[15:59.000 --> 16:08.000]  типом во всяком случае. Не факт, мы могли бы использовать у варианта его индекс для слежки,
[16:08.000 --> 16:15.000]  что у нас там сейчас лежит. Указатель на кучу или прям сырые байты. Но я говорю, это неэффективно,
[16:15.000 --> 16:23.000]  потому что у варианта по-моему size t используется. Вот если я не вру, то там по стандарту говорят,
[16:23.000 --> 16:30.000]  что должен много-много вариантов уметь поддерживать. Ну и это size t это максимально жирно,
[16:30.000 --> 16:42.000]  когда у нас всего два варианта. Зачем брать какие-то бусты, когда ты сам можешь взять и сделать здесь
[16:42.000 --> 16:59.000]  bull on hip. Ну 2.1 тебе не поможет, потому что... Да, тут как бы еще не получится что-то запихнуть.
[16:59.000 --> 17:10.000]  Нет, ну эта идея правильная, ее можно развить. Я слышал, да, что Rast все умеет хорошо распихивать,
[17:10.000 --> 17:19.000]  но удачи им с аби-стабильностью, аби-совместимостью и прочим-прочим. Ну то есть вот как вы
[17:19.000 --> 17:29.000]  игру устанавливаете, у вас там иногда заново ставится какой-нибудь Microsoft, CPP, Visual C++,
[17:29.000 --> 17:36.000]  Redistributable, тыры-пыры. И все жалуются, какого черта у меня на компе 30 версий Microsoft Visual C++.
[17:36.000 --> 17:46.000]  Ну от чего это как думаете? Ну да, у них нестабильная аби была у Microsoft долгое время,
[17:46.000 --> 17:52.000]  и несмотря на то, что стандарт особо не менялся, они такие, мы обновили C++ Redistributable,
[17:52.000 --> 17:57.000]  вот наш стандартный билетек теперь умнее и круче, но аби сломали, поэтому пересобирайте все свои игры,
[17:57.000 --> 18:02.000]  либо это. Говоря, не были какие-то серьезные проблемы, потому что стандартный билетек,
[18:02.000 --> 18:11.000]  она не весит в гигабайты. А Visual C++ Redistributable весит в гигабайты? Ну в Rast такая же проблема,
[18:11.000 --> 18:17.000]  сколько весит все эти ваши крейты, которых вы там подключаете, и особенно с мономерфизацией,
[18:17.000 --> 18:24.000]  ну там как бы если на Rast будут активно писать приложения такие, ну как по типу офисных,
[18:24.000 --> 18:30.000]  которые там на каждый компьютер ставятся, вроде Excel и прочее, то это очень быстро все взорвется,
[18:30.000 --> 18:35.000]  мне кажется. То есть какие-нибудь сервера, никаких проблем, весь сервер закинули, окей,
[18:35.000 --> 18:45.320]  а вот если что-то там для юзеров, то ну начнет немножко пригорать у них от размеров всех этих
[18:45.320 --> 18:53.520]  бинарей. Ну в общем-то мы в сторону отошли. Мы о чем говорили? О том, что не хочется 8 байт целых,
[18:53.520 --> 18:59.000]  когда нам нужен один булевый флаг. Ну сказали, можно просто сюда Bool подпихать. А вот если вы
[18:59.000 --> 19:03.520]  внимательно слушали курс Concurrency, там был еще прикол такой, что если у вас есть указатель,
[19:03.520 --> 19:11.600]  то вообще-то там есть битики свободные. Ну тут то же самое можно сделать. А мне кажется,
[19:11.600 --> 19:16.520]  на любой архитектуре так же будет. Да, это не совсем связано с архитектурой такого типа, это зависит сильно
[19:16.520 --> 19:33.520]  от компа. Ну да, ну как бы всегда можно как-то что-то придумать. Вроде да, можно же еще выровнять
[19:33.520 --> 19:46.400]  руками адрес, просто взять и выровнять. Нет, вот здесь
[19:46.400 --> 19:52.920]  ну как бы да, но вот здесь ничего не получится сохранить, потому что в ней юниона нужно хранить.
[19:52.920 --> 20:09.000]  Это здорово, но мы тогда от вот этого charbytes тоже отъели один байтик. Ну как бы все, мы этот байтик
[20:09.000 --> 20:14.720]  не можем использовать. Я говорю, что вот здесь во всяком случае, вот если мы будем использовать не как
[20:14.720 --> 20:22.400]  здесь написали виртуальный перлиморфизм, а руками будем делать, то у нас вне этого юниона во всяком
[20:22.400 --> 20:29.440]  случае что-то будет. И вот в это что-то мы как раз и можем попытаться запихать. Не факт, что получится,
[20:29.440 --> 20:38.640]  но может. Вот, то есть поняли две идеи. Во-первых, мы хотим вместо вот этих вот виртуальных прыжков
[20:38.640 --> 20:45.240]  по памяти туда-сюда, туда-сюда сделать все максимально вот прям плотно и близко к сердцу,
[20:45.240 --> 21:01.000]  что называется. Нет, давай мы сейчас писать начнем, и тогда про конкретные имплементации уже поговорим.
[21:01.000 --> 21:08.040]  Сейчас основные идеи, во-первых, избавиться от локации, ну и да, я кажется тоже не договорил,
[21:08.040 --> 21:15.080]  что здесь у нас, конечно же, будет флаг из onHip такой примерно, и вот здесь мы будем его либо
[21:15.080 --> 21:21.160]  устанавливать true, либо false. Если мы на кучу вымещаем, то храним в этом юнионе просто там указатель
[21:21.160 --> 21:28.760]  вот туда, на что-то, что через нее выделено, иначе прямо в этих байтах храним. Вот, это одна идея,
[21:28.760 --> 21:34.360]  и вторую тоже, кажется, сказал. Ну, вроде все. Надо... Да.
[21:34.360 --> 21:46.360]  Почему вы вот эту логику, с тем, как мы храним наш сторож, не отдать кому-то другому, скажем, аллокаторам?
[21:46.360 --> 21:49.360]  Почему вы не перевожите эту историю?
[21:49.960 --> 21:59.960]  Потому что пытались научить аллокаторы хранить данные прямо внутри классов, которым они относятся,
[21:59.960 --> 22:06.920]  но получилось из этого какая-то мегауродливая шняга. Ну, ты, конечно, в правильном направлении
[22:06.920 --> 22:14.120]  мыслишь, что надо бы тут все пообобщать, вынести, навести там декомпозицию, но сегодня мы этого делать
[22:14.120 --> 22:22.640]  не будем. Это вы можете домашки сделать, развлечься вот в Авдовль. Вот, да, ключевые слова для тех,
[22:22.640 --> 22:29.120]  кто сейчас так в полухо слушает и потом будет гуглить заново. Вот эта вот называется идея с юнионом
[22:29.120 --> 22:43.120]  из какого-то буфера и указателя на кучу называется, сейчас, SBO, да, small buffer optimization.
[22:43.120 --> 22:50.120]  Вы, возможно, где-то слышали вот это вот, small string optimization, но идеи в принципе везде одинаковые.
[22:50.120 --> 22:55.120]  Ну, в нашем случае это, наверное, правильнее называть small function optimization.
[22:55.120 --> 23:01.120]  Ну, короче, вот все эти слова, они про одно, что вы вот такой юнион делаете и в рентайме решаете.
[23:01.120 --> 23:06.120]  Будем либо прямо сюда пихать или на кучу выносить. Вот.
[23:12.120 --> 23:18.120]  Вот эту проблему мы отдельно фиксим. Это два независимых направления для развития.
[23:18.120 --> 23:23.120]  Одно это сделать small buffer optimization, чтобы не так часто на кучу выделять.
[23:23.120 --> 23:29.120]  Другое направление для развития – это вместо виртуальных вызовов использовать прямо указатели на функции.
[23:29.120 --> 23:36.120]  Сейчас мы это все будем писать просто. Все, закончили со вступлением и мотивацией, что это и зачем это.
[23:36.120 --> 23:41.120]  Будем творить.
[23:41.120 --> 23:48.120]  Так, ну, с классом N, кстати, будет гораздо проще.
[23:48.120 --> 23:57.120]  Наверное, мы даже мудро поступили, что решили вот эти все, ну, простой случай function разобрать.
[23:57.120 --> 24:05.120]  Наоборот, сложный случай... Кто здесь простой, кто сложный.
[24:05.120 --> 24:11.120]  В общем, вот с этим всем не нужно будет нам морочиться, что ARX, их там распаковывать, что-то там придумывать.
[24:11.120 --> 24:15.120]  Function мы с этим разобрались и хватит.
[24:15.120 --> 24:21.120]  С сцене у нас вообще ничего нет. Нам фактически единственное, что нужно...
[24:21.120 --> 24:26.120]  Они единственное. Давайте сразу начинаем с вопроса.
[24:26.120 --> 24:31.120]  Какие функции мы будем стирать?
[24:32.120 --> 24:37.120]  Что? Что такое Get?
[24:37.120 --> 24:44.120]  Публичный интерфейс вот такой. Вы можете сделать...
[25:01.120 --> 25:07.120]  Какой из операторов присваивания?
[25:07.120 --> 25:14.120]  Нет, ну, копирование или Mova?
[25:14.120 --> 25:17.120]  Окей, оба.
[25:17.120 --> 25:20.120]  Конструктор.
[25:20.120 --> 25:26.120]  Копирование Mova, наверное, имелся в виду.
[25:26.120 --> 25:33.120]  Ну вот да, я тоже так считаю. На самом деле тут невозможно сказать, что мы вот просто вот эти конкретные функции прямо стираем.
[25:33.120 --> 25:37.120]  Потому что в сигнатурах этих функций уже зашит наш тип.
[25:37.120 --> 25:41.120]  Поэтому мы будем чуть-чуть другие какие-то функции стирать.
[25:41.120 --> 25:49.120]  Но по смыслу да, нам нужно что-то, чтобы копировать.
[25:49.120 --> 25:57.120]  Копировалка какая-то, что-то, чтобы Mova, и деструктор. Что-то еще нужно?
[26:02.120 --> 26:08.120]  Ну вот про доступ надо подумать. Каждый раз, когда мы получаем доступ к объекту STDN, внимание важно.
[26:08.120 --> 26:14.120]  Давайте внимательно на интерфейс посмотрим, потому что, кажется, многие из вас не работали с Энни.
[26:14.120 --> 26:23.120]  Это хорошо на самом деле, но вот есть функция ЭнниCast. Ей мы передаём конкретный тип, который хотим попытаться достать.
[26:23.120 --> 26:28.120]  Да не придется нам TypeID использовать.
[26:28.120 --> 26:36.120]  В смысле? Ну тут тоже возможно сейчас я покажу хак, а может не покажу, а может вы сами догадаетесь.
[26:36.120 --> 26:45.120]  Ну да, тут правильный Аркадий сказал, что мы вот так пишем, а дальше в рантайме этот ЭнниCast каким-то образом смотрит.
[26:45.120 --> 26:55.120]  Конкретно в этом Энни лежит ли там Инт или не лежит? Если лежит, возвращает на него ссылку, а если не лежит, кидает исключение.
[26:55.120 --> 27:07.120]  Что? А ну да, прямо специальное исключение есть. STD BadCast. Возможно мы с ним даже поиграемся, а может и нет.
[27:07.120 --> 27:17.120]  Ну давай сюда посмотрим.
[27:17.120 --> 27:31.120]  Ещё, чтобы совсем смешно было, давай C добавим. Это там будет строка buy.
[27:31.120 --> 27:42.120]  И сюда moveNim C. И опять же попробуем вывести, даже в B moveNim, чтобы ещё смешнее было.
[27:42.120 --> 27:51.120]  И попробуем вывести B. Вот это должно работать. Кажется, здесь нужно как-то уметь копировать.
[27:51.120 --> 28:01.120]  Здесь может нужно как-то уметь move, а может как-то и не нужно. Впрочем, это в детали имплементации утыкается.
[28:01.120 --> 28:10.120]  Ну вот вектору нужно вообще использовать move... Да, блин, какой пример привести?
[28:10.120 --> 28:17.120]  Unique pointer. Когда вы Unique pointer мываете, тип, который внутри лежит, нужно мывать?
[28:17.120 --> 28:27.120]  Нет, давайте здесь также сделаем. Поначалу. То есть move штуку пока нам не надо. Потом увидим, если понадобится.
[28:27.120 --> 28:34.120]  Осталась копировалка, она очевидно нужна. Мы тут прям копируем-копируем, нужно уметь это делать.
[28:34.120 --> 28:43.120]  И деструктор, конечно же, тоже нужен, потому что у нас там будет, видимо, что-то на куче.
[28:43.120 --> 28:56.120]  Надо его как-то очистить, поэтому деструктор храним. Всё или что-то ещё?
[28:56.120 --> 29:07.120]  Ну, мне тоже кажется. Давайте пока на этом остановимся, но надо решить сигнатуры.
[29:07.120 --> 29:15.120]  Где бы их написать? Давайте здесь напишем.
[29:15.120 --> 29:30.120]  Сейчас, может быть, нам, наверное, нужен будет какой-то всё-таки класс, оборачивающий тип, чтобы...
[29:30.120 --> 29:37.120]  Ну, зачем-то. Нам нужно, чтобы Anycast, шаблонным параметром, умел кидать исключения.
[29:37.120 --> 29:43.120]  Но, кажется, хорошим кандидатом будет StaticCast к ссылке.
[29:43.120 --> 29:50.120]  Давай пока не думать просто про Anycast.
[29:50.120 --> 30:02.120]  Давайте сигнатурами того, чему стираем, определимся. И что это вообще за функция?
[30:02.120 --> 30:07.120]  Как ты вызвав какую-то функцию void?
[30:07.120 --> 30:13.120]  Ага, вот так хорошо. Но с дестроером, очевидно, он будет там...
[30:13.120 --> 30:18.120]  Ну, наверное, просто дилит вызывать, да? А может и деструктор.
[30:26.120 --> 30:31.120]  Ну, давайте вот так.
[30:31.120 --> 30:36.120]  Вот это я у вас хочу спросить. Что интуитивно эти функции будут делать?
[30:36.120 --> 30:42.120]  Что делает копер? Он берёт значение ванкова из космовой звёздки и копирует по адресу void.
[30:42.120 --> 30:47.120]  А дестроер вызывает деструктор по адресу void.
[30:47.120 --> 30:52.120]  Сейчас, ты сигнатуру хочешь написать?
[30:52.120 --> 30:57.120]  Ну, давай сейчас.
[30:57.120 --> 31:05.120]  Так, вопрос. Какие preconditions на вот эти вот указатели?
[31:05.120 --> 31:07.120]  Alignment?
[31:07.120 --> 31:10.120]  Да не alignment. Ну, ты их проговорил, но не явно.
[31:10.120 --> 31:12.120]  Типы должны быть одинаковые.
[31:12.120 --> 31:15.120]  Типы должны быть одинаковые. А что это, просто указатели куда угодно?
[31:15.120 --> 31:16.120]  Нет, на объект.
[31:16.120 --> 31:18.120]  И from и to?
[31:18.120 --> 31:23.120]  И from и to, да. На to может не лежать.
[31:23.120 --> 31:30.120]  Вот, а давай конкретно, потому что мы же в runtime не сможем понять, под to лежит объект или не лежит.
[31:30.120 --> 31:40.120]  Ну, а если мы новые any копии конструируем от другого?
[31:40.120 --> 31:48.120]  Да нет, ну, с этим всем справимся сейчас.
[31:48.120 --> 31:55.120]  Нет, ещё раз, вот по to мы говорим, там лежит объект? Мы требуем, чтобы...
[31:55.120 --> 32:06.120]  Вот. Зачем я на английском пишу? Я заработался.
[32:06.120 --> 32:15.120]  Ну, мы же тут учебой занимаемся, а не работаем.
[32:15.120 --> 32:30.120]  У меня мозги как-то отформатированы, уже писать комментарии на английском.
[32:30.120 --> 32:34.120]  Ну ладно. Вот это важное решение, да?
[32:34.120 --> 32:40.120]  В этом месте легко запутаться, когда вы половина кода своего контейнера замечательного написали,
[32:40.120 --> 32:46.120]  думая, что вот в этом аргументе должен быть объект, а вторую половину кода думая, что его там нет.
[32:46.120 --> 32:51.120]  В итоге запускайте, ну и, конечно, у вас там всё ломается, крашится, улетает.
[32:51.120 --> 32:58.120]  Окей, это мы зафиксировали. Ну и как мы собрались вообще жить, да?
[32:58.120 --> 33:05.120]  Храним копии. По-моему, у меня какое-то более удачное название было в прошлом году.
[33:05.120 --> 33:13.120]  Это не копи-конструктор, потому что копи-конструктор, у него другая сигнатура, кажется, что.
[33:13.120 --> 33:24.120]  Ну да, ну в целом пусть копия будет.
[33:24.120 --> 33:31.120]  Ну да. Ну сейчас мы ещё развлечёмся с этим. Окей, то есть вот такая шняга получается, да?
[33:31.120 --> 33:41.120]  Нет. Мы определились с тем, у чего мы стираем типы, нам надо написать конструктор, да?
[33:41.120 --> 33:49.120]  Конструкторы все. Вот function мы, помните, вообще не парились про копирование, мувы.
[33:49.120 --> 33:54.120]  Вот теперь пришла пора париться. Ну, но первый конструктор он не про это.
[33:54.120 --> 34:24.120]  Первый конструктор у нас про то, что мы собрались инициализировать
[34:24.120 --> 34:41.120]  Да нет, нормально. Ну вот тут можно лямду прям бахнуть, на самом деле.
[34:41.120 --> 34:49.120]  Да нет, прекрасно. Знакомьтесь с оператором плюс. Унарным оператором плюс.
[34:49.120 --> 34:54.120]  Да, он не явно кастит лямду. Ну явно скорее.
[34:54.120 --> 34:56.120]  Да вообще лямды, у которых нет захвата.
[34:56.120 --> 35:00.120]  Нет, он как раз и не явно кастит это в коде у нас, как явно кастит.
[35:00.120 --> 35:01.120]  Ну да.
[35:01.120 --> 35:06.120]  Формально он не явно кастит указатель, с которым предъявлено плюс как нового.
[35:06.120 --> 35:10.120]  Ну короче, такую шнягу в коде вы можете когда-нибудь где-нибудь встретить.
[35:10.120 --> 35:15.120]  Плюс и лямда. Это значит, я хочу, чтобы эта лямда стала указателем на функцию.
[35:15.120 --> 35:18.120]  А вот этот плюс, он насколько и диаметр чему нужен?
[35:18.120 --> 35:21.120]  То есть я буду с комментарием писать?
[35:21.120 --> 35:25.120]  Зависит от того, с кем ты работаешь.
[35:25.120 --> 35:28.120]  Ну, лучше, конечно, объяснять такие приколы.
[35:28.120 --> 35:32.120]  Ну, вот так.
[35:36.120 --> 35:38.120]  Я не расслышал. Ну ладно.
[35:38.120 --> 35:43.120]  А ощущение, что уже код написанную читать за словарем?
[35:43.120 --> 35:47.120]  Да нет, просто надо должную эрудицию иметь.
[35:47.120 --> 35:52.120]  Как эти старости, философы, всякие латынь должны были знать обязательно,
[35:52.120 --> 35:56.120]  чтобы трудами своими обмениваться, читать статьи научные.
[35:56.120 --> 35:58.120]  Вот тут так же.
[35:58.120 --> 36:01.120]  Но при этом, говоритель на латыни уже никто не умел.
[36:01.120 --> 36:03.120]  Ну, не древность, а старость, имеется в виду.
[36:03.120 --> 36:08.120]  И не писал особо никто, кроме вот научные статьи какие-то.
[36:08.120 --> 36:12.120]  Ну, у нас C++ похож на латынь чем-то.
[36:12.120 --> 36:15.120]  Так, давайте не будем все-таки лямбду.
[36:15.120 --> 36:17.120]  Пока не будет понятно, почему.
[36:17.120 --> 36:22.120]  Но действительно, тут был совет, что давайте отдельно заведем шаблонную функцию,
[36:22.120 --> 36:28.120]  которая будет статик, которая будет сигнатуру иметь ровно как наш копьер.
[36:32.120 --> 36:37.120]  Но на этот раз мы внутри нее знаем T.
[36:42.120 --> 36:46.120]  Импульс.
[36:46.120 --> 36:48.120]  А что она делает?
[36:48.120 --> 36:51.120]  Возьмем импульс.
[36:51.120 --> 36:55.120]  По объекту, разминованному afro.
[36:55.120 --> 36:57.120]  Ни U2, а каст.
[36:57.120 --> 36:58.120]  Кстати, каст.
[36:58.120 --> 37:00.120]  K, const, D, звездочка, afro.
[37:00.120 --> 37:02.120]  Разминование.
[37:02.120 --> 37:05.120]  Разминовать это нужно.
[37:05.120 --> 37:07.120]  И...
[37:07.120 --> 37:08.120]  Ага.
[37:08.120 --> 37:11.120]  Ой, получается, еще moof тоже.
[37:11.120 --> 37:14.120]  Отвечать moof или не moof.
[37:14.120 --> 37:17.120]  А статик каст не работает.
[37:17.120 --> 37:20.120]  Ну разве не...
[37:20.120 --> 37:24.120]  Нет, здесь const, каст. Тут const, каст не нужен, все нормально.
[37:24.120 --> 37:28.120]  Нет, я говорю про статик каст, мне кажется здесь...
[37:28.120 --> 37:29.120]  Почему нет?
[37:29.120 --> 37:31.120]  Теп потерял скобку.
[37:34.120 --> 37:37.120]  Вроде хватает скобок. Что происходит?
[37:37.120 --> 37:41.120]  Ну давайте не будем страдать фигнёй и сделаем...
[37:43.120 --> 37:46.120]  Const add.
[37:46.120 --> 37:50.120]  Причем ему надо указать, да, что мы const, вроде да.
[37:50.120 --> 37:52.120]  Вот так вот.
[37:52.120 --> 37:57.120]  Чуть не компилировалось, а это нормальная функция.
[37:57.120 --> 38:00.120]  Ну да, обернули, чтобы было красивше.
[38:00.120 --> 38:03.120]  На самом деле там какие-то причины есть глубокие.
[38:03.120 --> 38:08.120]  А плейсмент new тоже, кажется, нужно инклюдить, да.
[38:08.120 --> 38:11.120]  Да, плейсмент new, он как бы...
[38:11.120 --> 38:14.120]  Там хитрости какие-то вот...
[38:14.120 --> 38:17.120]  Да-да-да, ну вот я лучше вот так.
[38:17.120 --> 38:20.120]  Да, окей.
[38:20.120 --> 38:23.120]  Ну и здесь, соответственно...
[38:23.120 --> 38:26.120]  Ну я не знаю, как это делать.
[38:26.120 --> 38:29.120]  Ну я не знаю, как это делать.
[38:29.120 --> 38:33.120]  Да, окей. Ну и здесь, соответственно...
[38:33.120 --> 38:37.120]  Ну нужно заклинание некоторое написать, да, что мы берём вот этот шаблон
[38:37.120 --> 38:41.120]  с типом T, причем...
[38:41.120 --> 38:44.120]  Reference или...
[38:46.120 --> 38:50.120]  Вот так вот, да. Подставили нам, не подставили.
[38:50.120 --> 38:53.120]  To remove const, to allow reference?
[38:53.120 --> 38:57.120]  Да. Всё убрать, типа const, to allow reference, всё.
[38:57.120 --> 39:00.120]  И пихнули, запомнили копир.
[39:00.120 --> 39:03.120]  Ну, по аналогии, destroyer.
[39:03.120 --> 39:06.120]  Тут давайте уже просто с скоростью света.
[39:08.120 --> 39:11.120]  Так...
[39:11.120 --> 39:14.120]  Так...
[39:16.120 --> 39:19.120]  Да, конечно.
[39:19.120 --> 39:22.120]  А он не должен выводить шаблоны?
[39:22.120 --> 39:25.120]  А он умеет выводить тип.
[39:25.120 --> 39:28.120]  То есть тут какая сигнатура? Шаблон...
[39:28.120 --> 39:31.120]  Чего тогда не умел выводить?
[39:31.120 --> 39:34.120]  У конструктора add сигнатура вот такая.
[39:34.120 --> 39:37.120]  Вот Dp, а он выводит, что ты играли.
[39:37.120 --> 39:40.120]  Он каждый отможен, надеюсь, если бы...
[39:40.120 --> 39:43.120]  Ну я не знаю, красивший или так.
[39:43.120 --> 39:46.120]  Ну, он вот так стало более красиво.
[39:46.120 --> 39:49.120]  Ну ладно.
[39:49.120 --> 39:52.120]  Ну да.
[39:52.120 --> 39:55.120]  Ну, похоже на правду.
[39:55.120 --> 39:58.120]  И мы их сохранили, и... Ещё нет.
[40:06.120 --> 40:09.120]  Сейчас...
[40:09.120 --> 40:12.120]  Как это?
[40:13.120 --> 40:16.120]  Сейчас, кажется, у нас всё, конечно,
[40:16.120 --> 40:19.120]  будет работать.
[40:19.120 --> 40:22.120]  Так, внимание, вопрос.
[40:22.120 --> 40:25.120]  А дату как мы заполним?
[40:25.120 --> 40:28.120]  Ну, вот в дату что пихаем?
[40:28.120 --> 40:31.120]  А, дату можно выделить?
[40:31.120 --> 40:34.120]  Дату пока что выделим.
[40:34.120 --> 40:37.120]  Ну, СБО мы тоже сегодня попытаемся написать.
[40:37.120 --> 40:40.120]  Но пока просто, да, пока мы просто делаем new.
[40:40.120 --> 40:43.120]  Ну, опять надо вот это вот заклинание кастовать.
[40:43.120 --> 40:46.120]  Можно просто юзинг сделать.
[40:46.120 --> 40:49.120]  А где?
[40:49.120 --> 40:52.120]  Ну ладно, действительно можно.
[40:52.120 --> 40:55.120]  Шаблонный юзинг, а просто индистрайл.
[40:58.120 --> 41:01.120]  Я не понял, где ты хочешь юзинг вписать, но...
[41:01.120 --> 41:04.120]  Вот так.
[41:04.120 --> 41:07.120]  И, увы, наш Т.
[41:07.120 --> 41:10.120]  Нет, форвардим, конечно же.
[41:10.120 --> 41:13.120]  Хотя это, конечно, всё фигня какая-то.
[41:13.120 --> 41:16.120]  Но форвардим, окей.
[41:16.120 --> 41:19.120]  Кажется, мы запомнили всё, что нам нужно.
[41:19.120 --> 41:22.120]  По крайней мере, мы так предполагаем.
[41:22.120 --> 41:25.120]  С первого раза обычно ничего не получается,
[41:25.120 --> 41:28.120]  но давайте пробовать.
[41:28.120 --> 41:31.120]  Мы хотим копий конструктор.
[41:31.120 --> 41:34.120]  Как написать копий конструктор?
[41:34.120 --> 41:37.120]  А, а вот тут мы и можем, наверное, распрали...
[41:37.120 --> 41:40.120]  Нет, не можем, потому что сейчас...
[41:40.120 --> 41:43.120]  Копируем копию.
[41:43.120 --> 41:46.120]  А вот хоть памяти выделить мы не знаем.
[41:52.120 --> 41:55.120]  Так, копия от...
[42:04.120 --> 42:07.120]  Ну вот, да.
[42:07.120 --> 42:10.120]  Теперь хочется что-то с датой сделать,
[42:10.120 --> 42:13.120]  но ничего не работает.
[42:19.120 --> 42:22.120]  Это умная мысль, действительно.
[42:22.120 --> 42:25.120]  Тут конструктор нет.
[42:25.120 --> 42:28.120]  Тут много сейчас очень вариантов будет.
[42:28.120 --> 42:31.120]  Давайте с таким пока доживём.
[42:31.120 --> 42:34.120]  На что мы наткнулись, да?
[42:34.120 --> 42:37.120]  Мы хотим память под ещё одну шнягу выделить.
[42:37.120 --> 42:40.120]  Мы не умеем, да? Сколько памяти?
[42:40.120 --> 42:43.120]  Ну, по-разному можно с этим справиться.
[42:43.120 --> 42:46.120]  А я предлагаю сделать максимально тупо.
[42:46.120 --> 42:49.120]  Нет.
[42:49.120 --> 42:52.120]  Сказать, что копия у нас никуда-то,
[42:52.120 --> 42:55.120]  а плейсмент не вызывает.
[42:55.120 --> 42:58.120]  А просто не вызывает.
[42:58.120 --> 43:01.120]  Ну а почему нет? Самый простой вариант.
[43:08.120 --> 43:11.120]  По-моему, вполне нормально.
[43:11.120 --> 43:14.120]  Ну, с такой сигнатурой тоже можно доехать кое-куда.
[43:14.120 --> 43:17.120]  Потому что как альтернатива,
[43:17.120 --> 43:20.120]  мы могли бы сейчас отдельно стереть тип
[43:20.120 --> 43:23.120]  или запомнить размер могли бы.
[43:23.120 --> 43:26.120]  Мы могли бы отдельно стереть тип
[43:26.120 --> 43:29.120]  для какого-нибудь конструктора ещё одного.
[43:36.120 --> 43:39.120]  Давайте пока так.
[43:39.120 --> 43:42.120]  А как это помогло?
[43:42.120 --> 43:45.120]  Мы теперь сказали, что у нас копия,
[43:45.120 --> 43:48.120]  прям копирует from и возвращает новый объект.
[43:48.120 --> 43:51.120]  А это значит что?
[43:51.120 --> 43:54.120]  Что мы вот здесь, в копий-конструкторе,
[43:54.120 --> 43:57.120]  не позабыли?
[43:57.120 --> 44:00.120]  Просто копиер вызовем.
[44:00.120 --> 44:03.120]  От чего от адра даты? Всё.
[44:09.120 --> 44:12.120]  Ну, конструктор копирования сложился чётенький.
[44:12.120 --> 44:15.120]  Давайте за 30 секунд
[44:15.120 --> 44:18.120]  move конструктор.
[44:18.120 --> 44:21.120]  Копер.
[44:21.120 --> 44:24.120]  Копер.
[44:24.120 --> 44:27.120]  Что делаем?
[44:27.120 --> 44:30.120]  Ну,
[44:30.120 --> 44:33.120]  я бы сказал
[44:33.120 --> 44:36.120]  заменяем на
[44:36.120 --> 44:39.120]  nullptr.
[44:39.120 --> 44:42.120]  Почему?
[44:42.120 --> 44:45.120]  Потому что в какое состояние после move придёт вот этот адр?
[44:45.120 --> 44:48.120]  Валидное не нашли в салающейся.
[44:48.120 --> 44:51.120]  Ну, valid button specified.
[44:51.120 --> 44:54.120]  Вот это вот всё.
[44:54.120 --> 44:57.120]  Какое у нас валидное состояние может быть?
[44:57.120 --> 45:00.120]  Наверное, вот это всё лишнее.
[45:00.120 --> 45:03.120]  Пока рано.
[45:03.120 --> 45:06.120]  Да, давайте скажем, что дата nullptr
[45:06.120 --> 45:09.120]  это состояние пустой n.
[45:09.120 --> 45:12.120]  Тут опять же много вариативности.
[45:12.120 --> 45:15.120]  Мы действительно
[45:15.120 --> 45:18.120]  здесь впишем exchange.
[45:22.120 --> 45:25.120]  И всё хорошо, в принципе. Окей.
[45:27.120 --> 45:30.120]  Ну, накапливается, если у вас много кода
[45:30.120 --> 45:33.120]  использует этот тип.
[45:33.120 --> 45:36.120]  Где exchange? Attility вроде.
[45:36.120 --> 45:39.120]  Окей.
[45:39.120 --> 45:42.120]  Давайте destructor.
[45:45.120 --> 45:48.120]  Потому что какая разница?
[45:48.120 --> 45:51.120]  Нам нужно перевести адр в
[45:51.120 --> 45:54.120]  любое валидное состояние.
[46:10.120 --> 46:13.120]  Так, а в чём проблема?
[46:13.120 --> 46:16.120]  У нас объект на куче живёт.
[46:16.120 --> 46:19.120]  Мы просто указатель на куче украли у другого.
[46:27.120 --> 46:30.120]  Смотрите, представьте, что это был вектор всё.
[46:30.120 --> 46:33.120]  Мы просто у другого вектора спёрли указатель на данные.
[46:33.120 --> 46:36.120]  Вот эта дата станет nullptr,
[46:36.120 --> 46:39.120]  а у нас дата появилась.
[46:45.120 --> 46:48.120]  Дестроит на nullptr?
[46:48.120 --> 46:51.120]  Делит nullptr же работает у нас, правда?
[46:57.120 --> 47:00.120]  Ну, сейчас можно сделать, можно не сделать.
[47:06.120 --> 47:09.120]  Я был прав.
[47:11.120 --> 47:14.120]  Короче, в destructor что пишем?
[47:25.120 --> 47:28.120]  Делит дата, да?
[47:29.120 --> 47:32.120]  Проиграли.
[47:33.120 --> 47:36.120]  Ну, потому что, да, тип нужно знать.
[47:39.120 --> 47:42.120]  На самом деле мы и destroy хотим поменять,
[47:42.120 --> 47:45.120]  чтобы он не просто удалял и оставлял как есть.
[47:45.120 --> 47:48.120]  Мы начали умничать,
[47:48.120 --> 47:51.120]  а надо было по-простому пока сделать.
[47:57.120 --> 48:00.120]  Потому что это undefined behavior, насколько я знаю.
[48:00.120 --> 48:03.120]  Если мы выделяли память через new и t,
[48:03.120 --> 48:06.120]  то надо delete тоже через t,
[48:06.120 --> 48:09.120]  потому что там могут быть всякие перегруженные операторы,
[48:09.120 --> 48:12.120]  какие-то странности.
[48:12.120 --> 48:15.120]  Короче, давайте симметрично.
[48:15.120 --> 48:18.120]  Через new выделили, через delete удалили. Всё, всё.
[48:18.120 --> 48:21.120]  Что?
[48:21.120 --> 48:24.120]  Ну, это же не destructor я написал, а destroyer.
[48:24.120 --> 48:27.120]  Он уничтожитель.
[48:27.120 --> 48:30.120]  Анигилятор давайте назовём.
[48:34.120 --> 48:37.120]  Вот, так совсем хорошо.
[48:40.120 --> 48:43.120]  Просто аннигилировали нашу дату, да?
[48:43.120 --> 48:46.120]  Запустили код, скрашилась. Почему?
[48:46.120 --> 48:49.120]  Наш код скрашилась.
[48:49.120 --> 48:52.120]  Наш. Ну, наш. Кто ещё код писал?
[48:52.120 --> 48:55.120]  А, ну ещё, почему же дату почистить 0pd?
[48:55.120 --> 48:58.120]  А, нет, какая разница?
[48:58.120 --> 49:01.120]  Какая разница? Объекты уже всё.
[49:01.120 --> 49:04.120]  Ну, вот прям в этой строчке краш.
[49:04.120 --> 49:07.120]  А, мы не проверили 0pd?
[49:07.120 --> 49:10.120]  Да, листок нет.
[49:10.120 --> 49:13.120]  Да, вот этот аннигилятор прекрасный.
[49:13.120 --> 49:16.120]  Он может быть на самом деле любой фигнёй и как-то не очень хорошо, наверное.
[49:16.120 --> 49:19.120]  Сейчас может быть.
[49:19.120 --> 49:22.120]  Он может быть 0pd. Почему не может быть?
[49:22.120 --> 49:25.120]  Мы тут пока не до конца класс дописали.
[49:25.120 --> 49:28.120]  Я гипотетическую ситуацию вам сказал.
[49:28.120 --> 49:31.120]  Прямо в текущем коде кажется, что он всегда валидный будет.
[49:31.120 --> 49:34.120]  Но, короче, из опыта на это обязательно попадётесь.
[49:34.120 --> 49:37.120]  Забудете, что у вас аннигилятор бывает 0PTR.
[49:37.120 --> 49:40.120]  Поэтому я предлагаю вот так просто писать.
[49:40.120 --> 49:43.120]  Вот конкретный оператор Bool сделать,
[49:43.120 --> 49:46.120]  чтобы понимать, валидный мы или нет.
[49:46.120 --> 49:49.120]  И когда вот такие вещи делаете,
[49:49.120 --> 49:52.120]  проверяйте.
[49:52.120 --> 49:55.120]  Тут же проверка даты, а не длитра.
[49:55.120 --> 49:58.120]  Даты, а не длитра.
[49:58.120 --> 50:01.120]  Ну да. Нет, смотри, либо наш объект Eni
[50:01.120 --> 50:04.120]  в валидном состоянии, у него хороший копир,
[50:04.120 --> 50:07.120]  хорошие аннигиляторы, хорошая дата.
[50:07.120 --> 50:10.120]  Сейчас.
[50:10.120 --> 50:13.120]  Давайте я откачу, не Destroyer больше.
[50:13.120 --> 50:16.120]  Destroy add по 0PTR это нормально.
[50:16.120 --> 50:19.120]  Да, но там может не быть Destroyer.
[50:19.120 --> 50:22.120]  Но если там нет Destroyer,
[50:22.120 --> 50:25.120]  то почему мы сравниваем с 0PTR дату?
[50:25.120 --> 50:28.120]  Потому что...
[50:28.120 --> 50:31.120]  Да, мы говорим, что у нас критерий
[50:31.120 --> 50:34.120]  того, нормальный ли у нас класс,
[50:34.120 --> 50:37.120]  это дата не 0PTR. Вот если дата не 0PTR,
[50:37.120 --> 50:40.120]  то вариант соблюдён, что копир правильный,
[50:40.120 --> 50:43.120]  Destroyer правильный и дата правильная.
[50:43.120 --> 50:46.120]  Мы его наводим и соблюдаем везде в коде.
[50:46.120 --> 50:49.120]  Давайте, чтобы у меня...
[50:49.120 --> 50:52.120]  Ну вот да.
[50:52.120 --> 50:55.120]  Нет, я имею в виду, что...
[50:55.120 --> 50:58.120]  Это как-то тогда не последовательно,
[50:58.120 --> 51:01.120]  но сейчас у нас текущий вариант кода такой,
[51:01.120 --> 51:04.120]  что у нас Destroyer не может быть в валидном состоянии.
[51:04.120 --> 51:07.120]  Это абсолютно неважно, потому что мы этот код
[51:07.120 --> 51:10.120]  собрались развивать. Нам надо писать код такой,
[51:10.120 --> 51:13.120]  и мы проверяем.
[51:13.120 --> 51:16.120]  Да, почему?
[51:16.120 --> 51:19.120]  Потому что мы имплементацию Destroyer
[51:19.120 --> 51:22.120]  можем поменять. Destroyer в каком-то моменте
[51:22.120 --> 51:25.120]  начнёт быть 0, и давайте так оставим пока.
[51:25.120 --> 51:28.120]  Потом сыграет, не сыграет, не знаю.
[51:28.120 --> 51:31.120]  Что нам тогда гарантирует сейчас, что у нас не может быть
[51:31.120 --> 51:34.120]  как бы такого этапа развития, что у нас копытаем
[51:34.120 --> 51:37.120]  дату 0, а Destroyer не 0?
[51:37.120 --> 51:40.120]  Это вариант, который у нас будет всегда.
[51:40.120 --> 51:43.120]  Если наш класс,
[51:43.120 --> 51:46.120]  вот этот вот оператор ExplicitBull
[51:46.120 --> 51:49.120]  вернул труд для него, значит он полностью
[51:49.120 --> 51:52.120]  валидный. Всё внутри него валидное.
[51:52.120 --> 51:55.120]  Вот это давайте всегда говорить, что ровно так,
[51:55.120 --> 51:58.120]  а не как иначе.
[51:58.120 --> 52:01.120]  Да непонятно,
[52:01.120 --> 52:04.120]  какой ассерт бахнуть.
[52:04.120 --> 52:07.120]  Ассерт?
[52:07.120 --> 52:10.120]  Нет, если дата валидная,
[52:10.120 --> 52:13.120]  то она указывает на объект некоторого
[52:13.120 --> 52:16.120]  типа T, а Copy и Destroyer
[52:16.120 --> 52:19.120]  указывают на специализации
[52:19.120 --> 52:22.120]  вот этих шаблонов для такого же типа T.
[52:22.120 --> 52:25.120]  Вот этот вариант у нас.
[52:25.120 --> 52:28.120]  Типы T, которые вот здесь стёрты, вот здесь
[52:28.120 --> 52:31.120]  и вот здесь, они не отличаются.
[52:31.120 --> 52:34.120]  Давайте дальше поедем. Вы к каким-то мелочам
[52:34.120 --> 52:37.120]  придрались, но это так, просто
[52:37.120 --> 52:40.120]  написали и написали.
[52:40.120 --> 52:43.120]  Оператор присваивания у нас ещё горит.
[52:43.120 --> 52:46.120]  Как его пишем?
[52:46.120 --> 52:49.120]  Может вообще сейчас всё переписывать придётся,
[52:49.120 --> 52:52.120]  потому что мы не продумали, и
[52:52.120 --> 52:55.120]  оператор присваивания у нас не получится.
[52:55.120 --> 52:58.120]  Можно писать в лог, просто Destroyer и оператор.
[52:58.120 --> 53:01.120]  Какое первое действие в операторе?
[53:01.120 --> 53:04.120]  Нет, неправильно.
[53:07.120 --> 53:10.120]  Вот это первая строчка в операторе присваивания.
[53:10.120 --> 53:13.120]  Всегда.
[53:13.120 --> 53:16.120]  Ой, блин, ну придумали идиом.
[53:16.120 --> 53:19.120]  Давайте сейчас без хитрых идиом всё в лоб
[53:19.120 --> 53:22.120]  писать, чтобы максимально понятно было.
[53:23.120 --> 53:26.120]  Дис.
[53:26.120 --> 53:29.120]  Отлично.
[53:29.120 --> 53:32.120]  Если в дис у нас уже что-то было,
[53:32.120 --> 53:35.120]  надо...
[53:37.120 --> 53:40.120]  Надо, конечно же, удалить
[53:40.120 --> 53:43.120]  то, что у нас раньше лежало.
[53:52.120 --> 53:55.120]  Сейчас у нас же нет кое-какого варианта,
[53:55.120 --> 53:58.120]  если мы delete пройдёмся по дате,
[53:58.120 --> 54:01.120]  то она у нас не станет птр,
[54:01.120 --> 54:04.120]  и поэтому если мы буквально так напишем,
[54:04.120 --> 54:07.120]  то у нас потом вызовется...
[54:07.120 --> 54:10.120]  Нет, возможно.
[54:10.120 --> 54:13.120]  А, нет, да-да-да, окей.
[54:13.120 --> 54:16.120]  Хорошо, это не важно.
[54:16.120 --> 54:19.120]  Теперь вызываем копер азот дата и
[54:20.120 --> 54:23.120]  присваиваем на дате.
[54:23.120 --> 54:26.120]  Да, остальные понимают, что происходит.
[54:26.120 --> 54:29.120]  Хорошо, я надеюсь, это правда.
[54:29.120 --> 54:32.120]  Ну и забыли вот это сделать.
[54:32.120 --> 54:35.120]  Окей, то же самое, но с move.
[54:38.120 --> 54:41.120]  Ну, кажется, вот эти две строчки копируем, да?
[54:41.120 --> 54:44.120]  Мы просто удалили.
[55:12.120 --> 55:15.120]  Да? Всё просто, всё хорошо.
[55:20.120 --> 55:23.120]  Мне нравится, как у меня код стайл гидит,
[55:23.120 --> 55:26.120]  просто то-то там, то-то тут.
[55:26.120 --> 55:29.120]  Очень сложно.
[55:30.120 --> 55:33.120]  Ладно, как-то так.
[55:33.120 --> 55:36.120]  Ну, окей.
[55:36.120 --> 55:39.120]  Кажется, мы справились совсем,
[55:39.120 --> 55:42.120]  кроме одного.
[55:42.120 --> 55:45.120]  Anycast.
[55:45.120 --> 55:48.120]  Просто последний для нас фронтир, да?
[55:53.120 --> 55:56.120]  Да шо вы начинаете сразу TypeID свой?
[56:03.120 --> 56:06.120]  Нам надо проверить,
[56:06.120 --> 56:09.120]  решит ли в этом нашем Any то,
[56:09.120 --> 56:12.120]  что мы ожидаем.
[56:17.120 --> 56:20.120]  Шаблонные и виртуальные?
[56:20.120 --> 56:23.120]  Сейчас и просто виртуальные запрещены
[56:23.120 --> 56:26.120]  на этом семинаре.
[56:26.120 --> 56:29.120]  Давайте сейчас
[56:29.120 --> 56:32.120]  копер и дестроер в принципе сравнивать можем.
[56:32.120 --> 56:35.120]  Давайте для удобства нам
[56:35.120 --> 56:38.120]  нужно вытащить тип.
[56:42.120 --> 56:45.120]  Я запутался, какой у нас код стайл.
[56:51.120 --> 56:54.120]  Да, мы будем вот здесь основной код
[56:54.120 --> 56:57.120]  писать, без исключений.
[56:57.120 --> 57:00.120]  Ну, так удобнее просто, да?
[57:00.120 --> 57:03.120]  Чтобы там фронтать, ничего не пришлось.
[57:03.120 --> 57:06.120]  Нам здесь проверить, что
[57:06.120 --> 57:09.120]  в void звездочки дата лежит
[57:09.120 --> 57:12.120]  ровно такая шняга,
[57:12.120 --> 57:15.120]  которая соответствует вот этому t.
[57:27.120 --> 57:30.120]  Берем копер для этого t.
[57:30.120 --> 57:33.120]  Все.
[57:36.120 --> 57:39.120]  Вот оно сравнение.
[57:39.120 --> 57:42.120]  Надо только
[57:42.120 --> 57:45.120]  собраться силами и все,
[57:45.120 --> 57:48.120]  мне удалось написать буквы.
[57:48.120 --> 57:51.120]  Поняли, что произошло, да?
[57:51.120 --> 57:54.120]  Так как я сказал, что у нас вариант,
[57:54.120 --> 57:57.120]  что если дата валидна,
[57:57.120 --> 58:00.120]  то она указывает на объект типа t,
[58:00.120 --> 58:03.120]  а копер и дестроер соответствуют
[58:03.120 --> 58:06.120]  копер импл и дестроер импл
[58:06.120 --> 58:09.120]  для такого же t.
[58:09.120 --> 58:12.120]  Соответственно, мы можем
[58:12.120 --> 58:15.120]  по тому, что в копер лежит
[58:15.120 --> 58:18.120]  копер импл для t,
[58:18.120 --> 58:21.120]  сделать вывод, что void звездочка
[58:21.120 --> 58:24.120]  действительно указывает на объект типа t.
[58:27.120 --> 58:30.120]  Все.
[58:30.120 --> 58:33.120]  Единственная проблема,
[58:33.120 --> 58:36.120]  это то, что у нас тут...
[58:36.120 --> 58:39.120]  Опять, вот какой вариант был,
[58:39.120 --> 58:42.120]  если дата валидна, то тыры-пыры.
[58:42.120 --> 58:45.120]  Поэтому вот в таком виде оно скорее всего скрашится.
[58:45.120 --> 58:48.120]  А оно скрашится, знаешь, когда?
[58:48.120 --> 58:51.120]  Когда у нас дата скрашена 100,
[58:51.120 --> 58:54.120]  дата обгубилась, а копер остался в предыдущем.
[58:54.120 --> 58:57.120]  С другой стороны...
[58:57.120 --> 59:00.120]  С другой стороны, да, мы просто дату,
[59:00.120 --> 59:03.120]  которая 0 птр...
[59:03.120 --> 59:06.120]  Ну, вот это как бы кажется, что случайно сработало,
[59:06.120 --> 59:09.120]  поэтому я все-таки строго своим рассуждением буду следовать.
[59:16.120 --> 59:19.120]  Ладно, не будем, ладно, все, убедили.
[59:19.120 --> 59:22.120]  Фигня какая-то. Нормально.
[59:22.120 --> 59:25.120]  Ну...
[59:25.120 --> 59:28.120]  Окей.
[59:28.120 --> 59:31.120]  То есть в Anycast мы что сделаем?
[59:31.120 --> 59:34.120]  if авто птр равно
[59:34.120 --> 59:37.120]  Anycast kt
[59:37.120 --> 59:40.120]  return ptr
[59:40.120 --> 59:43.120]  else
[59:43.120 --> 59:46.120]  badcast
[59:52.120 --> 59:55.120]  Good.
[01:00:00.120 --> 01:00:03.120]  Нам заинклюдели? Заинклюдели.
[01:00:03.120 --> 01:00:06.120]  Отлично.
[01:00:06.120 --> 01:00:09.120]  Кажется, все.
[01:00:09.120 --> 01:00:12.120]  Скомпилировалось внезапно.
[01:00:12.120 --> 01:00:15.120]  Давайте попробуем запустить.
[01:00:15.120 --> 01:00:18.120]  Будет чудо
[01:00:18.120 --> 01:00:21.120]  Хеллоуинское, если оно заработает.
[01:00:26.120 --> 01:00:29.120]  Тут опять что-то не то мне показывают.
[01:00:29.120 --> 01:00:32.120]  Exit with code 0.
[01:00:32.120 --> 01:00:35.120]  Где консоль?
[01:00:35.120 --> 01:00:38.120]  А, вот.
[01:00:38.120 --> 01:00:41.120]  Выявила 42, hello, bye.
[01:00:41.120 --> 01:00:44.120]  Ну, да.
[01:00:44.120 --> 01:00:47.120]  Но я предлагаю не думать плохому.
[01:00:47.120 --> 01:00:50.120]  Убедитесь, что убе нету.
[01:00:50.120 --> 01:00:53.120]  Тесты лаундера пока расставлять нигде не надо.
[01:00:53.120 --> 01:00:56.120]  Пока у нас абсолютно строгий и правильный код.
[01:00:56.120 --> 01:00:59.120]  Мы просто стерли функции.
[01:00:59.120 --> 01:01:02.120]  Все хорошо.
[01:01:02.120 --> 01:01:05.120]  Нормально. Все.
[01:01:05.120 --> 01:01:08.120]  Почему вы так боитесь?
[01:01:08.120 --> 01:01:11.120]  Мы пока ничего хитрого не сделали,
[01:01:11.120 --> 01:01:14.120]  а вы уже боитесь, что у нас там...
[01:01:15.120 --> 01:01:18.120]  Не, не, не. Рано.
[01:01:18.120 --> 01:01:21.120]  Address und Define.
[01:01:21.120 --> 01:01:24.120]  У меня все продумано.
[01:01:24.120 --> 01:01:27.120]  Лик может быть.
[01:01:27.120 --> 01:01:30.120]  Да нет, адрес тоже лики умеет ловить.
[01:01:30.120 --> 01:01:33.120]  Все, чтобы мозги мне пудрить.
[01:01:33.120 --> 01:01:36.120]  Да, но лик более легковесный.
[01:01:36.120 --> 01:01:39.120]  Так, давайте
[01:01:39.120 --> 01:01:42.120]  от шуток к перерыву видимо.
[01:01:42.120 --> 01:01:45.120]  Перед тем, как мы сядем, это оптимизировать.
[01:01:45.120 --> 01:01:48.120]  А на перерыве предлагаю как-то в голове подумать.
[01:01:48.120 --> 01:01:51.120]  Как можно вот эту конструкцию, пока что получившуюся,
[01:01:51.120 --> 01:01:54.120]  оптимизировать по байтикам,
[01:01:54.120 --> 01:01:57.120]  по количеству лоудов.
[01:01:57.120 --> 01:02:00.120]  Ну и про СБО
[01:02:00.120 --> 01:02:03.120]  в голове начать подумывать.
[01:02:03.120 --> 01:02:06.120]  Как тут юнион припендюрить и чтобы все работало.
[01:02:06.120 --> 01:02:09.120]  А пока перерыв до 18.30.
[01:02:09.120 --> 01:02:12.120]  Ну что, придумали, как оптимизировать
[01:02:12.120 --> 01:02:15.120]  что-нибудь?
[01:02:15.120 --> 01:02:18.120]  Прекрасная идея.
[01:02:18.120 --> 01:02:21.120]  Давайте объединим копир и дестроер
[01:02:21.120 --> 01:02:24.120]  в одну и ту же функцию.
[01:02:24.120 --> 01:02:27.120]  Ты сказал один и тот же указать.
[01:02:27.120 --> 01:02:30.120]  В одну и ту же функцию.
[01:02:30.120 --> 01:02:33.120]  Нет, ну мы можем просто принимать важный момент.
[01:02:33.120 --> 01:02:36.120]  Вот будет звездочка и вот звездочка.
[01:02:36.120 --> 01:02:39.120]  Возвращать будет звездочка.
[01:02:39.120 --> 01:02:42.120]  Просто в одну и ту же функцию мы передадим 20 секунд ПТ
[01:02:42.120 --> 01:02:45.120]  и возвращаем ничего. Просто их поставим.
[01:02:45.120 --> 01:02:48.120]  Можно еще от каждого из них сделать текст
[01:02:48.120 --> 01:02:51.120]  на размер.
[01:02:51.120 --> 01:02:54.120]  И в качестве будет звездочка возвращать
[01:02:54.120 --> 01:02:57.120]  либо объект скопируемый.
[01:02:57.120 --> 01:03:00.120]  А можно создать клост-экспорт звездочка
[01:03:00.120 --> 01:03:03.120]  клост-экспорт паун.
[01:03:03.120 --> 01:03:06.120]  Клост-экспорт паун.
[01:03:06.120 --> 01:03:09.120]  Что-то вы какие-то накидываете мысли.
[01:03:09.120 --> 01:03:12.120]  Ключевая идея следующая.
[01:03:12.120 --> 01:03:15.120]  Напишем ИВ в рантайме.
[01:03:15.120 --> 01:03:18.120]  И будем делать трейдов.
[01:03:18.120 --> 01:03:21.120]  Что у нас здесь меньше памяти будет тратиться.
[01:03:21.120 --> 01:03:24.120]  Вот тут будет всего одна шняжка.
[01:03:24.120 --> 01:03:27.120]  И...
[01:03:27.120 --> 01:03:30.120]  То есть это меньше памяти.
[01:03:30.120 --> 01:03:33.120]  Всего одну штуку надо будет загружать.
[01:03:33.120 --> 01:03:36.120]  Всего один указатель надо будет загружать
[01:03:36.120 --> 01:03:39.120]  вот здесь, например, там где-нибудь.
[01:03:39.120 --> 01:03:42.120]  Вот здесь.
[01:03:42.120 --> 01:03:45.120]  Но трейдов, опять же,
[01:03:45.120 --> 01:03:48.120]  здесь джамп будет лишний.
[01:03:48.120 --> 01:03:51.120]  Не всегда это будет быстрее.
[01:03:51.120 --> 01:03:54.120]  Заметьте.
[01:04:03.120 --> 01:04:06.120]  Да.
[01:04:06.120 --> 01:04:09.120]  Да.
[01:04:09.120 --> 01:04:12.120]  Вот если мы здесь джамп поставим, то
[01:04:12.120 --> 01:04:15.120]  Бранч-предиктор, скорее всего, вообще никак не сможет понять,
[01:04:15.120 --> 01:04:18.120]  чем мы от него хотим.
[01:04:18.120 --> 01:04:21.120]  Это пайплайн.
[01:04:21.120 --> 01:04:24.120]  А как?
[01:04:24.120 --> 01:04:27.120]  Тебе нужно один указатель на функцию
[01:04:27.120 --> 01:04:30.120]  сохранить.
[01:04:30.120 --> 01:04:33.120]  Если у нас две разные функции, то мы уже научились.
[01:04:33.120 --> 01:04:36.120]  Это идея для оптимайза.
[01:04:36.120 --> 01:04:39.120]  Давайте действительно здесь какой-нибудь енам передавать
[01:04:39.120 --> 01:04:42.120]  и в рантайме делать и в свитч что угодно.
[01:04:42.120 --> 01:04:45.120]  Сейчас мне что-то не хочется так делать.
[01:04:45.120 --> 01:04:48.120]  Но эта идея понятная, простая.
[01:04:48.120 --> 01:04:51.120]  Я думаю, если захотите, сами напишите.
[01:04:51.120 --> 01:04:54.120]  Так делают, например, вот тут.
[01:04:54.120 --> 01:04:57.120]  Вот он, енам.
[01:04:57.120 --> 01:05:00.120]  И вот здесь разные опции.
[01:05:00.120 --> 01:05:03.120]  Дестракт-функтор, копия, move.
[01:05:03.120 --> 01:05:06.120]  И если включен RTTI, то там getType,
[01:05:06.120 --> 01:05:09.120]  gatefunk какой-то.
[01:05:09.120 --> 01:05:12.120]  Ну вот, function-manager,
[01:05:12.120 --> 01:05:15.120]  function-manager-base. Не поверите.
[01:05:15.120 --> 01:05:18.120]  Вот у них шаблонный конструктор.
[01:05:18.120 --> 01:05:21.120]  Тут он вообще не шаблонный.
[01:05:21.120 --> 01:05:24.120]  Потому что весь класс шаблонный.
[01:05:24.120 --> 01:05:27.120]  Function-manager-base.
[01:05:27.120 --> 01:05:30.120]  Он весь шаблонный.
[01:05:30.120 --> 01:05:33.120]  Вот тут эти статические функции.
[01:05:33.120 --> 01:05:36.120]  И ровно один такой вызов основной.
[01:05:36.120 --> 01:05:39.120]  То есть они говорят, что мы будем стирать ровно одну функцию.
[01:05:39.120 --> 01:05:42.120]  Вот этот вызов менеджера.
[01:05:42.120 --> 01:05:45.120]  И сюда запихивать кучу всяких аргументов.
[01:05:45.120 --> 01:05:48.120]  To, from и какой-то енам.
[01:05:48.120 --> 01:05:51.120]  В зависимости от енама уже либо копия, либо move,
[01:05:51.120 --> 01:05:54.120]  либо деструктора какой-нибудь.
[01:05:54.120 --> 01:05:57.120]  Ну и вот как-то так они живут.
[01:05:57.120 --> 01:06:00.120]  Где эта гадость инициализируется?
[01:06:09.120 --> 01:06:12.120]  Тут еще какие-то слои абстракции накручены.
[01:06:12.120 --> 01:06:15.120]  А, это еще другой менеджер.
[01:06:15.120 --> 01:06:18.120]  Еще третий менеджер.
[01:06:18.120 --> 01:06:21.120]  Ну, много деталей. Давайте на них не смотреть.
[01:06:21.120 --> 01:06:24.120]  Мы поняли, что так можно и будем делать сами по-другому.
[01:06:29.120 --> 01:06:32.120]  До него сейчас дойдем.
[01:06:32.120 --> 01:06:35.120]  Еще немножко про функции я хочу сказать.
[01:06:35.120 --> 01:06:38.120]  Откуда?
[01:06:40.120 --> 01:06:43.120]  Зачем?
[01:06:47.120 --> 01:06:50.120]  Сейчас дойдем.
[01:06:50.120 --> 01:06:53.120]  Чисто про вот сами эти функции.
[01:06:53.120 --> 01:06:56.120]  Вот мы поняли, их можно мержить друг в друга
[01:06:56.120 --> 01:06:59.120]  и в рантайме делать ИФы.
[01:06:59.120 --> 01:07:02.120]  Можно пойти чуть-чуть по другому пути,
[01:07:02.120 --> 01:07:05.120]  объединить их в структурку,
[01:07:05.120 --> 01:07:08.120]  назвав ее vtable.
[01:07:08.120 --> 01:07:11.120]  И это ровно он и есть.
[01:07:11.120 --> 01:07:14.120]  Виртуальная таблица функций.
[01:07:20.120 --> 01:07:23.120]  Сейчас.
[01:07:23.120 --> 01:07:26.120]  И, собственно, вот эти все прекрасные вещи,
[01:07:26.120 --> 01:07:29.120]  они тоже больше имеют отношение к...
[01:07:32.120 --> 01:07:35.120]  Ладно, как это все распутать?
[01:07:35.120 --> 01:07:38.120]  Давайте вот так. Эта структурка уедет вовне.
[01:07:43.120 --> 01:07:46.120]  Сделаем вот так.
[01:07:57.120 --> 01:08:00.120]  То есть за счет того, что эту структурку добавил,
[01:08:00.120 --> 01:08:03.120]  никакой indirection не появилось, ничего не сломалось.
[01:08:03.120 --> 01:08:06.120]  Все понимаем, да?
[01:08:07.120 --> 01:08:10.120]  Пока нет.
[01:08:10.120 --> 01:08:13.120]  Отличная идея.
[01:08:13.120 --> 01:08:16.120]  Только сейчас ничего компилиться не будет, да?
[01:08:16.120 --> 01:08:19.120]  Ой, сейчас надо будет поменять, да?
[01:08:19.120 --> 01:08:22.120]  Надо будет сделать вот так вот, вот этого и...
[01:08:25.120 --> 01:08:28.120]  Вот этого.
[01:08:33.120 --> 01:08:36.120]  Вот эта вот ровная идея, про которую я сейчас хочу сказать.
[01:08:36.120 --> 01:08:39.120]  Только...
[01:08:45.120 --> 01:08:48.120]  Да.
[01:08:54.120 --> 01:08:57.120]  Но тут структура, тут код style говорит, что надо не так,
[01:08:57.120 --> 01:09:00.120]  что-то я...
[01:09:00.120 --> 01:09:03.120]  А я сейчас прокомментирую,
[01:09:03.120 --> 01:09:06.120]  почему это может нам захотеться в некоторых исключительных случаях.
[01:09:09.120 --> 01:09:12.120]  Вначале давайте перепишем, чтобы я мог дальше уже с таким кодом...
[01:09:18.120 --> 01:09:21.120]  Вот так.
[01:09:21.120 --> 01:09:24.120]  Вот так.
[01:09:24.120 --> 01:09:27.120]  Вот так.
[01:09:28.120 --> 01:09:31.120]  Наверное, это можно было как-то быстрее
[01:09:31.120 --> 01:09:34.120]  заменами сделать.
[01:09:34.120 --> 01:09:37.120]  Но что поделать?
[01:09:41.120 --> 01:09:44.120]  Ура.
[01:09:44.120 --> 01:09:47.120]  Не ура.
[01:09:57.120 --> 01:10:00.120]  Ну вот, и если совсем аккуратно сделать,
[01:10:00.120 --> 01:10:03.120]  то, наверное, можно и не вот так жить,
[01:10:03.120 --> 01:10:06.120]  а сделать какой-нибудь wetable make
[01:10:06.120 --> 01:10:09.120]  и сравнивать уже так.
[01:10:09.120 --> 01:10:12.120]  Ну ладно. Короче, идея в чем?
[01:10:12.120 --> 01:10:15.120]  Давайте весь функционал, о котором мы размышляем,
[01:10:15.120 --> 01:10:18.120]  все-таки его как-то сгруппируем
[01:10:18.120 --> 01:10:21.120]  и будем вместе трэйчить.
[01:10:21.120 --> 01:10:24.120]  Ну и как правильно заметили,
[01:10:24.120 --> 01:10:27.120]  вернулись в беседу,
[01:10:27.120 --> 01:10:30.120]  я закончил переписывать тупой код,
[01:10:30.120 --> 01:10:33.120]  wetable.
[01:10:33.120 --> 01:10:36.120]  Просто сгруппировали все стертые функции.
[01:10:36.120 --> 01:10:39.120]  Теперь мы можем, как справедливо заметили,
[01:10:39.120 --> 01:10:42.120]  взять и сделать вот так.
[01:10:42.120 --> 01:10:45.120]  Вопрос только один, а где это будет храниться,
[01:10:45.120 --> 01:10:48.120]  вот этот вот замечательный wetable?
[01:10:48.120 --> 01:10:51.120]  Нет, звездочка.
[01:10:51.120 --> 01:10:54.120]  Ну да.
[01:10:54.120 --> 01:10:57.120]  Я не буду этого делать.
[01:11:03.120 --> 01:11:06.120]  Потому что мы не сможем поменять,
[01:11:06.120 --> 01:11:09.120]  да, мы хотим менять, на что мы указываем,
[01:11:09.120 --> 01:11:12.120]  а не то, на что мы указываем.
[01:11:12.120 --> 01:11:15.120]  Ну и куда мы будем указывать,
[01:11:15.120 --> 01:11:18.120]  я выберу...
[01:11:21.120 --> 01:11:24.120]  Inline, constexpr, static...
[01:11:24.120 --> 01:11:27.120]  constexpr же?
[01:11:27.120 --> 01:11:30.120]  Ну да, constexpr, static.
[01:11:40.120 --> 01:11:43.120]  Так.
[01:11:45.120 --> 01:11:48.120]  Ровно?
[01:11:48.120 --> 01:11:51.120]  Ровно.
[01:12:00.120 --> 01:12:03.120]  Ну он incomplete в этом контексте,
[01:12:03.120 --> 01:12:06.120]  поэтому надо это вынести вот сюда.
[01:12:09.120 --> 01:12:12.120]  Да, и теперь вот так еще.
[01:12:12.120 --> 01:12:15.120]  Ну в общем вот теперь скомпилиться.
[01:12:18.120 --> 01:12:21.120]  Да.
[01:12:21.120 --> 01:12:24.120]  Да, она не особо считается глобальной,
[01:12:24.120 --> 01:12:27.120]  она непеременная, это константа.
[01:12:27.120 --> 01:12:30.120]  Вот сюда кладем.
[01:12:30.120 --> 01:12:33.120]  Да, она теперь не static, она теперь inline.
[01:12:33.120 --> 01:12:36.120]  Потому что да, оно и по умолчанию будет inline.
[01:12:36.120 --> 01:12:39.120]  Короче, вот так.
[01:12:42.120 --> 01:12:45.120]  Кажется, там были какие-то правила
[01:12:45.120 --> 01:12:48.120]  про то, что шаблонные constexpr переменные
[01:12:48.120 --> 01:12:51.120]  автоматом inline давайте для безопасности оставим.
[01:12:51.120 --> 01:12:54.120]  Но идея ясна, да, теперь мы ухраним
[01:12:54.120 --> 01:12:57.120]  таблицу виртуальных вызовов,
[01:12:57.120 --> 01:13:00.120]  как и компилятор, когда компилируют
[01:13:00.120 --> 01:13:03.120]  виртуальные вызовы где-то в стране, в родате,
[01:13:03.120 --> 01:13:06.120]  а здесь запоминаем просто указатель,
[01:13:06.120 --> 01:13:09.120]  и мы по сути переизобрели
[01:13:09.120 --> 01:13:12.120]  виртуальные вызовы ручками.
[01:13:13.120 --> 01:13:16.120]  Почему это может быть хорошо?
[01:13:16.120 --> 01:13:19.120]  Потому что мы теперь можем обобщить этот код,
[01:13:19.120 --> 01:13:22.120]  чтобы он и вот так умел работать,
[01:13:22.120 --> 01:13:25.120]  и вот так в зависимости от шаблонного аргумента
[01:13:25.120 --> 01:13:28.120]  у нашего контейнера.
[01:13:31.120 --> 01:13:34.120]  Ну да, сейчас это писать не будем,
[01:13:34.120 --> 01:13:37.120]  но идея именно такая. А зачем?
[01:13:37.120 --> 01:13:40.120]  В каких случаях вообще вот такой вот дурацкий трюк,
[01:13:40.120 --> 01:13:43.120]  с тем, что мы на хуй ну там ferro data вынесли,
[01:13:43.120 --> 01:13:46.120]  он будет хороший?
[01:13:46.120 --> 01:13:49.120]  Когда она будет сильная?
[01:13:49.120 --> 01:13:52.120]  Вот тут экономия будет в два раза,
[01:13:52.120 --> 01:13:55.120]  и мы по-другому ее умеем экономить,
[01:13:55.120 --> 01:13:58.120]  когда у нас только копия и родилитер.
[01:13:58.120 --> 01:14:01.120]  Экономия будет, когда у вас много разных
[01:14:01.120 --> 01:14:04.120]  функций стерта.
[01:14:04.120 --> 01:14:07.120]  То есть виртуальные таблицы вызовов почему хранятся
[01:14:07.120 --> 01:14:10.120]  не прямо в объектах, а где-то там вдалеке,
[01:14:10.120 --> 01:14:13.120]  и объекты на них ссылаются?
[01:14:13.120 --> 01:14:16.120]  Потому что обычно у класса много виртуальных методов,
[01:14:16.120 --> 01:14:19.120]  ну там штуки две-три хотя бы.
[01:14:19.120 --> 01:14:22.120]  Если у нас всего один виртуальный метод,
[01:14:22.120 --> 01:14:25.120]  то наверное мы бы не виртуальную какую-то иерархию устроили,
[01:14:25.120 --> 01:14:28.120]  а просто STD-фанкшн написали, это было бы быстрее.
[01:14:28.120 --> 01:14:31.120]  Вот, и соответственно из таких соображений
[01:14:31.120 --> 01:14:34.120]  можно сделать свой какой-то TypeRace-контейнер,
[01:14:34.120 --> 01:14:37.120]  у которого в зависимости от количества стертых поведений,
[01:14:37.120 --> 01:14:40.120]  кто мне так яро пишет,
[01:14:40.120 --> 01:14:43.120]  в зависимости от количества стертых поведений
[01:14:43.120 --> 01:14:46.120]  разное поведение того, где витейбл хранится,
[01:14:46.120 --> 01:14:49.120]  инлайненный или где-то на кучу вынесенный.
[01:14:49.120 --> 01:14:52.120]  Надо как-то считать количество этих самых функций?
[01:14:52.120 --> 01:14:55.120]  Ну вот две у нас посчитали.
[01:14:55.120 --> 01:14:58.120]  Вопрос, когда их может быть больше,
[01:14:58.120 --> 01:15:01.120]  справедливый абсолютно вопрос должен напрашиваться.
[01:15:01.120 --> 01:15:04.120]  Спасибо от блог.
[01:15:04.120 --> 01:15:07.120]  Ну тут я опять отселась к этой замечательной библиотеке.
[01:15:13.120 --> 01:15:16.120]  Вот.
[01:15:16.120 --> 01:15:19.120]  Видите, что написано?
[01:15:19.120 --> 01:15:22.120]  Да.
[01:15:22.120 --> 01:15:25.120]  Вот в этой библиотеке их реализация Function
[01:15:25.120 --> 01:15:28.120]  умеет стирать несколько разных сигнатур
[01:15:28.120 --> 01:15:31.120]  вызова у одного и того же объекта.
[01:15:31.120 --> 01:15:34.120]  То есть вы туда закидываете такой класс,
[01:15:34.120 --> 01:15:37.120]  у которого несколько разных
[01:15:37.120 --> 01:15:40.120]  операторов круглые субтитры,
[01:15:40.120 --> 01:15:43.120]  которые вы можете изменить.
[01:15:43.120 --> 01:15:46.120]  Вот.
[01:15:46.120 --> 01:15:49.120]  И она запомнит несколько разных операторов круглые скобки.
[01:15:49.120 --> 01:15:52.120]  И всех их она запомнит.
[01:15:55.120 --> 01:15:58.120]  Авто-авто можно авто.
[01:15:58.120 --> 01:16:01.120]  Стереть нельзя.
[01:16:01.120 --> 01:16:04.120]  Ну и вот тут показывают, что давайте шаблонную лямду
[01:16:04.120 --> 01:16:07.120]  туда внимание впихнем.
[01:16:07.120 --> 01:16:10.120]  Ну у шаблонной лямды шаблонный оператор круглые скобки.
[01:16:10.120 --> 01:16:13.120]  И вот эта Function сама как бы инстанцирует
[01:16:13.120 --> 01:16:16.120]  этот шаблонный оператор круглые скобки от вектора
[01:16:16.120 --> 01:16:19.120]  и от сета, как здесь написано.
[01:16:19.120 --> 01:16:22.120]  И запомнит в своей виртуальной таблице все ссылки.
[01:16:22.120 --> 01:16:25.120]  Ну вот раз так можно делать,
[01:16:25.120 --> 01:16:28.120]  легко предположить, что тут вообще-то много чего разного
[01:16:28.120 --> 01:16:31.120]  может быть интересного, и тогда уже количество того,
[01:16:31.120 --> 01:16:34.120]  что вот здесь напихано, может вырасти.
[01:16:34.120 --> 01:16:37.120]  И вот тогда подобный прикол с тем, что мы в table умеем
[01:16:37.120 --> 01:16:40.120]  как онлайн хранить, так и выносить на кучу, он пригодится.
[01:16:41.120 --> 01:16:44.120]  Еще мотивирующий пример из другой библиотеки.
[01:16:50.120 --> 01:16:53.120]  Нет, ну через шаблонные аргументы.
[01:16:58.120 --> 01:17:01.120]  Да, у тебя тут просто две сигнатуры написаны.
[01:17:01.120 --> 01:17:04.120]  Ты знаешь, что ты хранишь все сигнатуры, которые тебя попросили,
[01:17:04.120 --> 01:17:07.120]  плюс какой-то копирователь и какой-то ломатель.
[01:17:10.120 --> 01:17:13.120]  Ты считай.
[01:17:19.120 --> 01:17:22.120]  Ну что-то такое, да.
[01:17:22.120 --> 01:17:25.120]  Короче, это в compile-time все делается. Тут runtime-overhead 0 на это.
[01:17:25.120 --> 01:17:28.120]  А другой мотивирующий пример.
[01:17:28.120 --> 01:17:31.120]  Я надеюсь, что кто-нибудь просто сядет
[01:17:31.120 --> 01:17:34.120]  и загорится желанием это написать руками.
[01:17:34.120 --> 01:17:37.120]  Any object. Очень смешной класс.
[01:17:37.120 --> 01:17:40.120]  Он точно так же, как вот that function,
[01:17:40.120 --> 01:17:43.120]  запоминает несколько разных поведений.
[01:17:43.120 --> 01:17:46.120]  Да, только как им пользоваться я не покажу.
[01:17:46.120 --> 01:17:49.120]  И вот эти поведения закодированы загадочными CPO.
[01:17:49.120 --> 01:17:52.120]  То есть это такой Any,
[01:17:52.120 --> 01:17:55.120]  в который мы закидываем любой объект,
[01:17:55.120 --> 01:17:58.120]  и он запоминает некоторые CPO для этого объекта.
[01:17:58.120 --> 01:18:01.120]  Вот в аудитории точно был один человек,
[01:18:01.120 --> 01:18:04.120]  который код на ренджах принес в спарте,
[01:18:04.120 --> 01:18:07.120]  вот он должен понимать, о чем речь идет.
[01:18:07.120 --> 01:18:10.120]  Все остальные, наверное, нет.
[01:18:10.120 --> 01:18:13.120]  А как замотивировать это?
[01:18:13.120 --> 01:18:16.120]  Наверное, никак. Что такое цепошки?
[01:18:16.120 --> 01:18:19.120]  Мы до них дойдем через раз где-то.
[01:18:19.120 --> 01:18:22.120]  Пока тут были доки, там, кажется, был пример.
[01:18:22.120 --> 01:18:25.120]  Нету, нету, нету.
[01:18:25.120 --> 01:18:28.120]  А, TypeRanger.
[01:18:28.120 --> 01:18:31.120]  Отдельный документ для нашего любимого.
[01:18:31.120 --> 01:18:34.120]  И тут, кстати, хороший врайтап
[01:18:34.120 --> 01:18:37.120]  по поводу того, что я рассказываю,
[01:18:37.120 --> 01:18:40.120]  вообще, в общем-то, в общем-то,
[01:18:40.120 --> 01:18:43.120]  что мы делаем.
[01:18:43.120 --> 01:18:46.120]  Ну, в общем-то, в общем-то,
[01:18:46.120 --> 01:18:49.120]  в общем-то, в общем-то, в общем-то,
[01:18:49.120 --> 01:18:52.120]  мы делаем врайтап по поводу того,
[01:18:52.120 --> 01:18:55.120]  что я рассказываю, вообще, в общем и целом,
[01:18:55.120 --> 01:18:58.120]  что куча параметров есть у того,
[01:18:58.120 --> 01:19:01.120]  как мы TypeRanger хотим делать.
[01:19:01.120 --> 01:19:04.120]  Ну, это мы вроде и в прошлый раз чуть-чуть проговорили.
[01:19:04.120 --> 01:19:07.120]  И вот у них замечательный и не Unique, и не Ref, и не Object.
[01:19:07.120 --> 01:19:10.120]  И с помощью некоторых загадочных CPO
[01:19:10.120 --> 01:19:13.120]  представляются поведения какие-то.
[01:19:13.120 --> 01:19:16.120]  Ну и, конечно, там Vtable может разрастись.
[01:19:16.120 --> 01:19:19.120]  Давайте закончим с этим.
[01:19:19.120 --> 01:19:22.120]  Вернемся через раз или два.
[01:19:22.120 --> 01:19:25.120]  Все, время для финалочки,
[01:19:25.120 --> 01:19:28.120]  для small buffer optimization.
[01:19:28.120 --> 01:19:31.120]  Пытаюсь понять процент спящих аудиторий.
[01:19:31.120 --> 01:19:34.120]  Не сильно большой.
[01:19:37.120 --> 01:19:40.120]  Давайте писать small buffer optimization.
[01:19:40.120 --> 01:19:43.120]  Как мы это будем делать?
[01:19:47.120 --> 01:19:50.120]  If constexpr size of t.
[01:19:50.120 --> 01:19:53.120]  Но вот здесь мы не знаем t.
[01:19:53.120 --> 01:19:56.120]  Мы можем сделать
[01:19:56.120 --> 01:19:59.120]  copier и deleter implementation,
[01:19:59.120 --> 01:20:02.120]  чтобы он...
[01:20:02.120 --> 01:20:05.120]  В принципе, даже не обязательно,
[01:20:05.120 --> 01:20:08.120]  но если мы хотим явно,
[01:20:08.120 --> 01:20:11.120]  там просто size-off принимать.
[01:20:11.120 --> 01:20:14.120]  Ну, я предлагаю начать с UNION.
[01:20:14.120 --> 01:20:17.120]  Кто-то в какой-то момент сказал,
[01:20:17.120 --> 01:20:20.120]  что в runtime не понадобится хранить.
[01:20:20.120 --> 01:20:23.120]  Он был прав.
[01:20:23.120 --> 01:20:26.120]  Все, это замечание. В тот момент мой мозг
[01:20:26.120 --> 01:20:29.120]  не дошел до этого момента, но да.
[01:20:29.120 --> 01:20:32.120]  Давайте начнем с того, что байтики выделим.
[01:20:32.120 --> 01:20:35.120]  А, планировать.
[01:20:35.120 --> 01:20:38.120]  RLINE 100.
[01:20:41.120 --> 01:20:44.120]  Вам плохо как это работает?
[01:20:44.120 --> 01:20:47.120]  Я не помню, почему.
[01:20:47.120 --> 01:20:50.120]  Прикейте на C++23.
[01:20:50.120 --> 01:20:53.120]  Будущее пришло.
[01:20:53.120 --> 01:20:56.120]  Не надо.
[01:20:59.120 --> 01:21:02.120]  Вот так сделаем.
[01:21:05.120 --> 01:21:08.120]  А, теперь мы модифицируем vtable,
[01:21:08.120 --> 01:21:11.120]  который сам выбирает чистить хипу.
[01:21:11.120 --> 01:21:14.120]  Как он с этим умеет?
[01:21:14.120 --> 01:21:17.120]  Да.
[01:21:17.120 --> 01:21:20.120]  Вот, вот.
[01:21:20.120 --> 01:21:23.120]  Да.
[01:21:23.120 --> 01:21:26.120]  Кто-нибудь еще понял, что молодой человек сказал?
[01:21:30.120 --> 01:21:33.120]  Давайте сначала думать, да.
[01:21:33.120 --> 01:21:36.120]  Как меняем сигнатуры того,
[01:21:36.120 --> 01:21:39.120]  чего мы стираем?
[01:21:39.120 --> 01:21:42.120]  Это неправда.
[01:21:42.120 --> 01:21:45.120]  Давайте с конца пойдем.
[01:21:45.120 --> 01:21:48.120]  В операторе присваивания.
[01:21:48.120 --> 01:21:51.120]  Если мы хранили в онлайн-буфере,
[01:21:51.120 --> 01:21:54.120]  нужно нам вызывать дилит?
[01:21:54.120 --> 01:21:57.120]  Нет.
[01:21:57.120 --> 01:22:00.120]  Нам нужно просто вызвать деструктор.
[01:22:00.120 --> 01:22:03.120]  Ну, давайте вот с этого начнем.
[01:22:03.120 --> 01:22:06.120]  Кажется, это несложно сделать.
[01:22:06.120 --> 01:22:09.120]  Давайте просто вот здесь,
[01:22:09.120 --> 01:22:12.120]  как уже тут кричат просто,
[01:22:12.120 --> 01:22:15.120]  и в констэксперсайзов.
[01:22:15.120 --> 01:22:18.120]  Давайте вот так напишу.
[01:22:23.120 --> 01:22:26.120]  Мне казалось, можно.
[01:22:26.120 --> 01:22:29.120]  Сейчас только 64.
[01:22:29.120 --> 01:22:32.120]  Давайте вынесем это все наружу.
[01:22:32.120 --> 01:22:35.120]  СССО?
[01:22:35.120 --> 01:22:38.120]  Я запутался в аббревиатурах.
[01:22:38.120 --> 01:22:41.120]  Какая из аббревиатур самая?
[01:22:41.120 --> 01:22:44.120]  А, нет, это другая аббревиатура.
[01:22:44.120 --> 01:22:47.120]  Small Buffer Optimization.
[01:22:47.120 --> 01:22:50.120]  Ну...
[01:22:50.120 --> 01:22:53.120]  Меня все овцем не шатает.
[01:22:53.120 --> 01:22:56.120]  Я не знаю.
[01:22:56.120 --> 01:22:59.120]  Я не знаю.
[01:22:59.120 --> 01:23:02.120]  Ну...
[01:23:02.120 --> 01:23:05.120]  Меня все овцем мешалось в голове в плане кодстайлов,
[01:23:05.120 --> 01:23:08.120]  поэтому...
[01:23:08.120 --> 01:23:11.120]  Все и одновременно. Именно так.
[01:23:11.120 --> 01:23:14.120]  Ну...
[01:23:27.120 --> 01:23:30.120]  Сейчас мы оставили за скобками вот эту вот идею,
[01:23:30.120 --> 01:23:33.120]  что VTable можно выносить в онлайн,
[01:23:33.120 --> 01:23:36.120]  а можно туда.
[01:23:36.120 --> 01:23:39.120]  Вот ее мы оставили.
[01:23:39.120 --> 01:23:42.120]  Это очень полезно, потому что у нас фиксированные размеры вот тейбла.
[01:23:42.120 --> 01:23:45.120]  Две функции.
[01:23:45.120 --> 01:23:48.120]  Я показал примеры. В Unifex и Function 2
[01:23:48.120 --> 01:23:51.120]  VTable имеет размер разный, в зависимости от шаблонных аргументов.
[01:23:51.120 --> 01:23:54.120]  У нас такого пока нет.
[01:23:54.120 --> 01:23:57.120]  Поэтому просто про VTable забыли.
[01:23:57.120 --> 01:24:00.120]  Ну, действительно, если мы хотим с VTable то же самое делать, то да.
[01:24:00.120 --> 01:24:03.120]  Тут просто будет еще один union, и дальше уже погнали.
[01:24:03.120 --> 01:24:06.120]  Сейчас мы хотим сами байты объекта,
[01:24:06.120 --> 01:24:09.120]  да, функционального объекта,
[01:24:09.120 --> 01:24:12.120]  или там какого-то. Вот их хотим научиться
[01:24:12.120 --> 01:24:15.120]  либо на кучу выносить, где мы new делали,
[01:24:15.120 --> 01:24:18.120]  либо в онлайне хранить.
[01:24:18.120 --> 01:24:21.120]  Ну, давайте по сути просто принимать union в 3 функция.
[01:24:24.120 --> 01:24:27.120]  И тогда мы, наверное, мембров
[01:24:27.120 --> 01:24:30.120]  нужно еще accessить.
[01:24:30.120 --> 01:24:33.120]  И адреса fb.
[01:24:33.120 --> 01:24:36.120]  И тогда можно передавать адреса просто мембров.
[01:24:39.120 --> 01:24:42.120]  Ну, адреса у всего этого будут одинаковые, да.
[01:24:42.120 --> 01:24:45.120]  Вот я сейчас думаю, как нам лучше обойти
[01:24:45.120 --> 01:24:48.120]  Stdlonder. Наверное, Аркадий
[01:24:48.120 --> 01:24:51.120]  говорит абсолютно дельную вещь.
[01:24:51.120 --> 01:24:54.120]  Давайте этот union вынесем
[01:24:54.120 --> 01:24:57.120]  вот даже куда-то пораньше.
[01:24:57.120 --> 01:25:00.120]  Union будет называться
[01:25:00.120 --> 01:25:03.120]  storage.
[01:25:06.120 --> 01:25:09.120]  И мы уже будем не...
[01:25:25.120 --> 01:25:28.120]  Пока это не трогаем.
[01:25:30.120 --> 01:25:33.120]  Storage не знает, в каком он состоянии.
[01:25:36.120 --> 01:25:39.120]  По байтам скопировать storage это
[01:25:39.120 --> 01:25:42.120]  нормально, но зачем?
[01:25:42.120 --> 01:25:45.120]  Не нужно.
[01:25:45.120 --> 01:25:48.120]  Да. Прямо внутри вот этой вот функции
[01:25:48.120 --> 01:25:51.120]  шаблонной мы понимаем, что у нас
[01:25:51.120 --> 01:25:54.120]  какой из кейсов был. Маленький был,
[01:25:54.120 --> 01:25:57.120]  или большой. И в специализацию прям вшиваем,
[01:25:57.120 --> 01:26:00.120]  и в storage либо
[01:26:00.120 --> 01:26:03.120]  inline используем,
[01:26:03.120 --> 01:26:06.120]  либо data.
[01:26:06.120 --> 01:26:09.120]  Да. Либо так.
[01:26:27.120 --> 01:26:30.120]  Давай ты выяснишь этот вопрос, а я
[01:26:30.120 --> 01:26:33.120]  пойду дальше в святом неведении и
[01:26:33.120 --> 01:26:36.120]  предположении, что я все-таки правильно
[01:26:36.120 --> 01:26:39.120]  помню, что здесь он не нужен.
[01:26:39.120 --> 01:26:42.120]  Пока не нужен. Все, с дестроем просто
[01:26:42.120 --> 01:26:45.120]  совладали, кажется. Вопрос.
[01:26:57.120 --> 01:27:00.120]  Конечно, хотим.
[01:27:00.120 --> 01:27:03.120]  Абсолютно правильная мысль.
[01:27:03.120 --> 01:27:06.120]  Но если ты дойдешь до того, чтобы
[01:27:06.120 --> 01:27:09.120]  реализовать...
[01:27:09.120 --> 01:27:12.120]  Я уже закрыл, да?
[01:27:12.120 --> 01:27:15.120]  LibUnifex.
[01:27:15.120 --> 01:27:18.120]  Если ты когда-нибудь в своей жизни дойдешь
[01:27:18.120 --> 01:27:21.120]  до того, чтобы написать все, что вот здесь
[01:27:21.120 --> 01:27:24.120]  вот описано в этом документе,
[01:27:24.120 --> 01:27:27.120]  AnyUnique, AnyRev, AnyObject,
[01:27:27.120 --> 01:27:30.120]  вот там такая мысль вот так зайдет.
[01:27:30.120 --> 01:27:33.120]  Но это жутко сложно,
[01:27:33.120 --> 01:27:36.120]  потому что просто так
[01:27:36.120 --> 01:27:39.120]  исторически сложилось, плюс и не самый
[01:27:39.120 --> 01:27:42.120]  дружелюбный язык.
[01:27:42.120 --> 01:27:45.120]  И конкретно эта штука, она как бы
[01:27:45.120 --> 01:27:48.120]  идейно не сложная, а написать это жуткое
[01:27:48.120 --> 01:27:51.120]  просто мороко.
[01:27:51.120 --> 01:27:54.120]  Ну не только boilerplate,
[01:27:54.120 --> 01:27:57.120]  куча всяких подхаков, хитростей.
[01:27:57.120 --> 01:28:00.120]  Тут все в шаблонах.
[01:28:00.120 --> 01:28:03.120]  Тайп-листы, кстати, используются, нами любимые.
[01:28:03.120 --> 01:28:06.120]  И это, кажется, это все фигня.
[01:28:06.120 --> 01:28:09.120]  Это не основной код, это просто какая-то оберточка.
[01:28:09.120 --> 01:28:12.120]  Вот тут все интересное.
[01:28:12.120 --> 01:28:15.120]  AnyHippo-located storage,
[01:28:15.120 --> 01:28:18.120]  TypeRs-built-ins, Vtable,
[01:28:18.120 --> 01:28:21.120]  Detail.
[01:28:22.120 --> 01:28:25.120]  Где Detail?
[01:28:27.120 --> 01:28:30.120]  Вот сюда и в Detail.
[01:28:33.120 --> 01:28:36.120]  TypeRs-built-ins.
[01:28:36.120 --> 01:28:39.120]  Ладно, это какая-то не то.
[01:28:39.120 --> 01:28:42.120]  VTableHPP.
[01:28:42.120 --> 01:28:45.120]  Тоже как-то мало.
[01:28:45.120 --> 01:28:48.120]  Где мой эффект вау, чтобы сейчас 1000 строк было в файле?
[01:28:48.120 --> 01:28:51.120]  Что-то неправильное происходит.
[01:28:51.120 --> 01:28:54.120]  AnyHippo-located storage.
[01:28:57.120 --> 01:29:00.120]  Ну да.
[01:29:00.120 --> 01:29:03.120]  Значит, домашню вам выкатываю из этого.
[01:29:08.120 --> 01:29:11.120]  Не, ну реально, как-то мало кодов.
[01:29:11.120 --> 01:29:14.120]  Ну сколько мы там, 4 файла по 200 строк?
[01:29:14.120 --> 01:29:17.120]  По 1000.
[01:29:17.120 --> 01:29:20.120]  Ладно, не так страшно, как мне память говорила.
[01:29:20.120 --> 01:29:23.120]  Не, ну там страшно.
[01:29:23.120 --> 01:29:26.120]  Не, не, не.
[01:29:26.120 --> 01:29:29.120]  Я подумаю, что такое домашню, но видимо не в ваш год уже.
[01:29:29.120 --> 01:29:32.120]  Это нормально.
[01:29:32.120 --> 01:29:35.120]  Просто тут очень-очень шаблонов много, очень много сущностей.
[01:29:35.120 --> 01:29:38.120]  И конечно запутаться легко в том, что происходит.
[01:29:38.120 --> 01:29:41.120]  Ладно, все, давайте допишем, допишем, допишем.
[01:29:41.120 --> 01:29:44.120]  Допишем, допишем, допишем.
[01:29:44.120 --> 01:29:47.120]  СБО.
[01:29:47.120 --> 01:29:50.120]  Чем мы остановились? Мы дестрой сделали?
[01:29:50.120 --> 01:29:53.120]  Дестрой должен работать.
[01:29:53.120 --> 01:29:56.120]  Так, а вот они пришли коду, что вот в одном месте
[01:29:56.120 --> 01:29:59.120]  алоцировать это все?
[01:29:59.120 --> 01:30:02.120]  Хорошо. Если ты захочешь писать свой уник object или any object,
[01:30:02.120 --> 01:30:05.120]  сделай, чтобы они рядом хранились и в каше одновременно прогревались.
[01:30:05.120 --> 01:30:08.120]  Сейчас мы таким заниматься не будем.
[01:30:08.120 --> 01:30:11.120]  Я сигнатуру не поменял, да?
[01:30:11.120 --> 01:30:14.120]  Такой просто вопрос.
[01:30:14.120 --> 01:30:17.120]  Мы написали тейпл.
[01:30:17.120 --> 01:30:20.120]  Думаю, мы чуть-чуть представим, что мы написали его в самом общем.
[01:30:20.120 --> 01:30:23.120]  То есть мы поддерживали, сколько угодно вертальных вызовов,
[01:30:23.120 --> 01:30:26.120]  но он тоже как-то активизирован.
[01:30:26.120 --> 01:30:29.120]  Есть ли профит от использования его в игре того,
[01:30:29.120 --> 01:30:32.120]  что язык его оставляет?
[01:30:32.120 --> 01:30:35.120]  Да, потому что ты можешь писать обобщенные коды,
[01:30:35.120 --> 01:30:38.120]  где этот две тейпл живет.
[01:30:38.120 --> 01:30:41.120]  Может в статической памяти, может прямо здесь,
[01:30:41.120 --> 01:30:44.120]  в онлайне, что там, он ближе к кэшу,
[01:30:44.120 --> 01:30:47.120]  быстрее загрузится и, ну,
[01:30:47.120 --> 01:30:50.120]  больше контроля, как обычно.
[01:30:50.120 --> 01:30:53.120]  Да, с точки зрения…
[01:30:53.120 --> 01:30:56.120]  Нет, то же самое.
[01:30:56.120 --> 01:30:59.120]  Ну, если ты за онлайн, что будет меньше?
[01:30:59.120 --> 01:31:02.120]  Ну, понятно, да.
[01:31:02.120 --> 01:31:05.120]  Да, кстати, товарищи,
[01:31:05.120 --> 01:31:08.120]  насчет Юниона,
[01:31:08.120 --> 01:31:11.120]  что мы будем делать вот с этой строчкой?
[01:31:11.120 --> 01:31:14.120]  Удалим ее и будем проверять нормально.
[01:31:14.120 --> 01:31:17.120]  Как?
[01:31:17.120 --> 01:31:20.120]  Ну, там где звездочка this.
[01:31:23.120 --> 01:31:26.120]  Но нужно завести
[01:31:26.120 --> 01:31:29.120]  еще одну всю эту функцию
[01:31:29.120 --> 01:31:32.120]  verifying.
[01:31:32.120 --> 01:31:35.120]  Нет, мы же не у объекта,
[01:31:35.120 --> 01:31:38.120]  который мы стираем, проверяем свойства,
[01:31:38.120 --> 01:31:41.120]  а что вот наша штука, наш объект Any
[01:31:41.120 --> 01:31:44.120]  содержит какой-то другой объект.
[01:31:47.120 --> 01:31:50.120]  Byte и Date.
[01:31:50.120 --> 01:31:53.120]  Ну, в дате мы не знаем, какой элемент
[01:31:53.120 --> 01:31:56.120]  Юниона активный.
[01:31:56.120 --> 01:31:59.120]  Ну, есть у кого-то стеснение и проблемы с Юнионами?
[01:31:59.120 --> 01:32:02.120]  Комплексы какие-то, в детстве Юнион покусал,
[01:32:02.120 --> 01:32:05.120]  мы сейчас шоковой терапией будем лечить.
[01:32:07.120 --> 01:32:10.120]  Ну, тут не нужен вариант, потому что мы на самом деле
[01:32:10.120 --> 01:32:13.120]  в Compel Time все знаем.
[01:32:13.120 --> 01:32:16.120]  Единственная проблема, мы реально не знаем,
[01:32:16.120 --> 01:32:19.120]  в операторе Bool кто из них активный.
[01:32:19.120 --> 01:32:22.120]  Вот к неактивному получать доступ нельзя,
[01:32:22.120 --> 01:32:25.120]  только к активному.
[01:32:25.120 --> 01:32:28.120]  Ну, попали в ситуацию, когда активный inline
[01:32:28.120 --> 01:32:31.120]  и это Byte какого-то объекта, который мы вообще не знаем.
[01:32:31.120 --> 01:32:34.120]  Что это за объект, какой у него тип?
[01:32:34.120 --> 01:32:37.120]  Который оказалось, что ноль, да.
[01:32:37.120 --> 01:32:40.120]  Все сломается.
[01:32:40.120 --> 01:32:43.120]  Вот поэтому возвращаемся к тому, о чем я говорил,
[01:32:43.120 --> 01:32:46.120]  а вы не понимали, о чем я.
[01:32:46.120 --> 01:32:49.120]  Будем через VTable проверять.
[01:32:49.120 --> 01:32:52.120]  Теперь копир будет таким аракулом того,
[01:32:52.120 --> 01:32:55.120]  есть валидин или наш Any или нет.
[01:32:55.120 --> 01:32:58.120]  Тогда нужно возвращаться в Move операторы?
[01:32:58.120 --> 01:33:01.120]  В Move надо.
[01:33:01.120 --> 01:33:04.120]  В Move надо.
[01:33:04.120 --> 01:33:07.120]  Да, вот тут уже ничего не работает.
[01:33:07.120 --> 01:33:10.120]  Вообще про Move забудьте, они все теперь сломаны
[01:33:10.120 --> 01:33:13.120]  чуть более чем полностью.
[01:33:13.120 --> 01:33:16.120]  Да.
[01:33:16.120 --> 01:33:19.120]  Нам бы с копированием разобраться.
[01:33:19.120 --> 01:33:22.120]  Давайте только...
[01:33:22.120 --> 01:33:25.120]  Я сейчас такой трюк тут проделаю.
[01:33:25.120 --> 01:33:28.120]  Я буду копировать в наш VTable значение
[01:33:28.120 --> 01:33:31.120]  вот этой constexpr переменной.
[01:33:31.120 --> 01:33:34.120]  Так.
[01:33:34.120 --> 01:33:37.120]  С копером что делаем?
[01:33:37.120 --> 01:33:40.120]  По сути, в VTable
[01:33:40.120 --> 01:33:43.120]  мы будем копировать
[01:33:43.120 --> 01:33:46.120]  значение вот этой constexpr переменной.
[01:33:47.120 --> 01:33:50.120]  По сути, в операторе...
[01:33:50.120 --> 01:33:53.120]  В конструкторе копирования
[01:33:53.120 --> 01:33:56.120]  нам нужно разобраться,
[01:33:56.120 --> 01:33:59.120]  насколько большой у нас объект.
[01:33:59.120 --> 01:34:02.120]  Если он большой, то мы хотим new сделать
[01:34:02.120 --> 01:34:05.120]  и в дату сохранить результат new.
[01:34:05.120 --> 01:34:08.120]  Если объект был маленький,
[01:34:08.120 --> 01:34:11.120]  то мы хотим запустить placement new
[01:34:11.120 --> 01:34:14.120]  от адреса вот этого inline
[01:34:14.120 --> 01:34:17.120]  или от адреса вот этого вот.
[01:34:17.120 --> 01:34:20.120]  Иными словами,
[01:34:20.120 --> 01:34:23.120]  теперь мы будем делать не вот так,
[01:34:23.120 --> 01:34:26.120]  теперь мы будем делать вот так.
[01:34:31.120 --> 01:34:34.120]  Обратно, да?
[01:34:34.120 --> 01:34:37.120]  Как сразу начали писать,
[01:34:37.120 --> 01:34:40.120]  к тому и вернулись.
[01:34:40.120 --> 01:34:43.120]  И это будет storage.
[01:34:44.120 --> 01:34:47.120]  Кто не понимает,
[01:34:47.120 --> 01:34:50.120]  что здесь надо написать?
[01:34:50.120 --> 01:34:53.120]  Ну, вот в копьер,
[01:34:53.120 --> 01:34:56.120]  который теперь выводит.
[01:34:56.120 --> 01:34:59.120]  Так.
[01:35:02.120 --> 01:35:05.120]  Ну а что в первой ветке пишем?
[01:35:05.120 --> 01:35:08.120]  Placement new.
[01:35:08.120 --> 01:35:11.120]  Ну, std construct art.
[01:35:11.120 --> 01:35:14.120]  Кто-нибудь, предиктуйте, пожалуйста.
[01:35:17.120 --> 01:35:20.120]  Третий раз, пусть надо брать этот...
[01:35:20.120 --> 01:35:23.120]  Ну, пока-пока сам не бывает.
[01:35:23.120 --> 01:35:26.120]  И кастовать звук.
[01:35:26.120 --> 01:35:29.120]  А то он уже скачет.
[01:35:29.120 --> 01:35:32.120]  А то он уже скачет.
[01:35:32.120 --> 01:35:35.120]  А то он уже скачет.
[01:35:35.120 --> 01:35:38.120]  А то он уже скачет.
[01:35:38.120 --> 01:35:41.120]  А то он уже скачет.
[01:35:41.120 --> 01:35:44.120]  А так скастуется?
[01:35:44.120 --> 01:35:47.120]  Да.
[01:35:49.120 --> 01:35:52.120]  Ну да, он и так.
[01:35:52.120 --> 01:35:55.120]  Ну, без разницы.
[01:35:55.120 --> 01:35:58.120]  Лишний амперсант не помешает.
[01:36:00.120 --> 01:36:03.120]  А, тут еще разуменовать, да?
[01:36:03.120 --> 01:36:06.120]  А то амперсант...
[01:36:08.120 --> 01:36:11.120]  Отлично.
[01:36:11.120 --> 01:36:14.120]  А вот тут куда теперь...
[01:36:14.120 --> 01:36:17.120]  Вот тут что теперь будет?
[01:36:17.120 --> 01:36:20.120]  Да.
[01:36:20.120 --> 01:36:23.120]  Да.
[01:36:26.120 --> 01:36:29.120]  Да.
[01:36:29.120 --> 01:36:32.120]  Окей, копьер поправили.
[01:36:32.120 --> 01:36:35.120]  Не до конца.
[01:36:35.120 --> 01:36:38.120]  Сигнатура, где она?
[01:36:38.120 --> 01:36:41.120]  Вот она.
[01:36:44.120 --> 01:36:47.120]  Так.
[01:36:47.120 --> 01:36:50.120]  Так.
[01:36:56.120 --> 01:36:59.120]  Прекрасно.
[01:37:00.120 --> 01:37:03.120]  Прекрасно.
[01:37:13.120 --> 01:37:16.120]  Ну, муф, да, надо сделать.
[01:37:16.120 --> 01:37:19.120]  Давайте думать.
[01:37:23.120 --> 01:37:26.120]  У нас был такой муф.
[01:37:26.120 --> 01:37:29.120]  Что с ним делать?
[01:37:29.120 --> 01:37:32.120]  Кто еще не спит?
[01:37:40.120 --> 01:37:43.120]  Как ты его здесь сделаешь?
[01:37:50.120 --> 01:37:53.120]  Нет, в смысле...
[01:37:56.120 --> 01:37:59.120]  Даже если бы мы его так написали,
[01:37:59.120 --> 01:38:02.120]  то это нас бы не спасло.
[01:38:02.120 --> 01:38:05.120]  Потому что в случае, если у нас на куче,
[01:38:05.120 --> 01:38:08.120]  то мы можем просто этот указатель поменять,
[01:38:08.120 --> 01:38:11.120]  и все будет хорошо.
[01:38:11.120 --> 01:38:14.120]  А что, если мы в онлайне хранимся?
[01:38:20.120 --> 01:38:23.120]  Копию не хочется.
[01:38:23.120 --> 01:38:26.120]  И его копировать дорого,
[01:38:26.120 --> 01:38:29.120]  и все-таки надо на этом...
[01:38:29.120 --> 01:38:32.120]  Ну, вот именно так получается,
[01:38:32.120 --> 01:38:35.120]  что надо пойти в VTable и запихать еще и мув-штуку.
[01:38:35.120 --> 01:38:38.120]  Которую мы до сих пор...
[01:38:42.120 --> 01:38:45.120]  Ну, я не очень понял,
[01:38:45.120 --> 01:38:48.120]  говоришь ли ты это с сарказмом, но да.
[01:38:48.120 --> 01:38:51.120]  Ну, вот...
[01:38:51.120 --> 01:38:54.120]  Тут как-то слои уже наслаиваются сарказмом на сарказмом.
[01:39:03.120 --> 01:39:06.120]  Да, не костыли, тут так и надо.
[01:39:06.120 --> 01:39:09.120]  Нам нужен муф.
[01:39:09.120 --> 01:39:12.120]  Муф будет отличаться только дурацким вписыванием.
[01:39:21.120 --> 01:39:24.120]  Что-что?
[01:39:24.120 --> 01:39:27.120]  Можно такое вопрос?
[01:39:27.120 --> 01:39:30.120]  Мы делаем, кстати, каст,
[01:39:30.120 --> 01:39:33.120]  в конец-то звездочка у массива,
[01:39:33.120 --> 01:39:36.120]  я уже ничего не понимаю,
[01:39:36.120 --> 01:39:39.120]  но у меня была голая мысль,
[01:39:39.120 --> 01:39:42.120]  возможно, неправильная,
[01:39:42.120 --> 01:39:45.120]  что можем делать каст...
[01:39:46.120 --> 01:39:49.120]  В смысле?
[01:39:49.120 --> 01:39:52.120]  Мы кастим указатель на байты
[01:39:52.120 --> 01:39:55.120]  к указателю на объект.
[01:39:55.120 --> 01:39:58.120]  Это не важно,
[01:39:58.120 --> 01:40:01.120]  чары и байты в этом плане эквивалентны.
[01:40:08.120 --> 01:40:11.120]  Может, я тут просто уже закодился,
[01:40:11.120 --> 01:40:14.120]  и тут надо Reinterpret бахнуть.
[01:40:14.120 --> 01:40:17.120]  Просто если не Reinterpret,
[01:40:17.120 --> 01:40:20.120]  мы делаем Access,
[01:40:20.120 --> 01:40:23.120]  там нужно еще и сгаланду оборачивать.
[01:40:29.120 --> 01:40:32.120]  Да, насчет Align.
[01:40:32.120 --> 01:40:35.120]  Формально говоря, у каждого T свой разный Align.
[01:40:35.120 --> 01:40:38.120]  На момент объявления вот этой штуки
[01:40:38.120 --> 01:40:41.120]  мы не знаем, какой у нас Align.
[01:40:45.120 --> 01:40:48.120]  64 больше не бывает.
[01:40:49.120 --> 01:40:52.120]  А в конструкторе
[01:40:54.120 --> 01:40:57.120]  говорим, что либо
[01:40:57.120 --> 01:41:00.120]  sizeft больше,
[01:41:03.120 --> 01:41:06.120]  либо...
[01:41:07.120 --> 01:41:10.120]  Меньше выбираем.
[01:41:11.120 --> 01:41:14.120]  Ну, тоже sbo-size.
[01:41:15.120 --> 01:41:18.120]  В принципе, пусть одинаковые будут.
[01:41:22.120 --> 01:41:25.120]  Ну, все закастылино.
[01:41:25.120 --> 01:41:28.120]  Alignment соблюден.
[01:41:28.120 --> 01:41:31.120]  Единственное, что...
[01:41:31.120 --> 01:41:34.120]  Ну, вот все-таки с нувом нужно как-то немножко аккуратно.
[01:41:34.120 --> 01:41:37.120]  Что сделать?
[01:41:37.120 --> 01:41:40.120]  Вот тут вот это вот, оно как бы особо не нужно.
[01:41:40.120 --> 01:41:43.120]  Тут на самом деле нужно просто
[01:41:45.120 --> 01:41:48.120]  так вот сделать, да?
[01:41:50.120 --> 01:41:53.120]  Ну, при этом, а зачем мы тогда вообще
[01:41:53.120 --> 01:41:56.120]  какой-то статик каст делаем, да?
[01:41:56.120 --> 01:41:59.120]  А зачем мы вообще тогда это стираем?
[01:41:59.120 --> 01:42:02.120]  Это же вообще стирать не нужно.
[01:42:02.120 --> 01:42:05.120]  Более того, давайте скажем, да, что просто.
[01:42:05.120 --> 01:42:08.120]  Вот так.
[01:42:16.120 --> 01:42:19.120]  Будет вот такой статик-кассерт смешной.
[01:42:26.120 --> 01:42:29.120]  Почему мы решили добавить?
[01:42:29.120 --> 01:42:32.120]  Потому что мы пишем move-конструктор.
[01:42:35.120 --> 01:42:38.120]  И предположили, что в other лежит тип,
[01:42:39.120 --> 01:42:42.120]  у которого размер меньше смалбухера.
[01:42:45.120 --> 01:42:48.120]  Он лежит тогда прямо в байтах,
[01:42:48.120 --> 01:42:51.120]  где вот этот вот any лежит.
[01:42:51.120 --> 01:42:54.120]  И у нас тоже есть эти байты.
[01:42:54.120 --> 01:42:57.120]  Соответственно, нам нужно в наших байтах
[01:42:57.120 --> 01:43:00.120]  какие-то байты, которые там лежат.
[01:43:00.120 --> 01:43:03.120]  Причем move-конструировать.
[01:43:03.120 --> 01:43:06.120]  Вот ровно этот placement-move-конструктор,
[01:43:06.120 --> 01:43:09.120]  вот это вот move-imple и стирает.
[01:43:16.120 --> 01:43:19.120]  А потому что если же второй случай, да,
[01:43:19.120 --> 01:43:22.120]  то есть тут какой ИВ был,
[01:43:22.120 --> 01:43:25.120]  что мы там меньше СБО или больше,
[01:43:25.120 --> 01:43:28.120]  во втором случае вот тут вот
[01:43:28.120 --> 01:43:31.120]  мы и так можем просто взять
[01:43:31.120 --> 01:43:34.120]  и вот эту дату вот так вот сделать.
[01:43:42.120 --> 01:43:45.120]  Как же ты прав, я сам себя запутал.
[01:43:51.120 --> 01:43:54.120]  Да, ты абсолютно прав.
[01:43:54.120 --> 01:43:57.120]  Дело уже не туда.
[01:43:57.120 --> 01:44:00.120]  Делаем так, да?
[01:44:05.120 --> 01:44:08.120]  Про это сейчас подумаем.
[01:44:11.120 --> 01:44:14.120]  Ну вообще же мы же вспомним, да,
[01:44:14.120 --> 01:44:17.120]  что мы теперь решили, что критерий того,
[01:44:17.120 --> 01:44:20.120]  что мы не пустые, это то, что
[01:44:20.120 --> 01:44:23.120]  копия у нас нулевой.
[01:44:23.120 --> 01:44:26.120]  Теперь нул ПТР в дату пихать,
[01:44:26.120 --> 01:44:29.120]  это бессмысленное действие.
[01:44:37.120 --> 01:44:40.120]  Давайте mover.
[01:44:41.120 --> 01:44:44.120]  Mover сделаем, здесь будет...
[01:44:44.120 --> 01:44:47.120]  Вот так.
[01:44:58.120 --> 01:45:01.120]  И за счет того, что мы всю структуру вынесли,
[01:45:01.120 --> 01:45:04.120]  у нас все работает без изменений, как-то приятно.
[01:45:04.120 --> 01:45:07.120]  И теперь здесь мы понимаем, что надо написать.
[01:45:07.120 --> 01:45:10.120]  Понимаем ведь?
[01:45:14.120 --> 01:45:17.120]  Чего?
[01:45:18.120 --> 01:45:21.120]  Ну да, просто позвать Mover.
[01:45:21.120 --> 01:45:24.120]  Причем вот так.
[01:45:27.120 --> 01:45:30.120]  Да, я специально обратите внимание,
[01:45:30.120 --> 01:45:33.120]  в Mover написал какую-то смешную шняжку
[01:45:33.120 --> 01:45:36.120]  с R-value ссылкой.
[01:45:36.120 --> 01:45:39.120]  Вот так.
[01:45:42.120 --> 01:45:45.120]  Что к чему кастить?
[01:45:48.120 --> 01:45:51.120]  Значит, я закодился
[01:45:51.120 --> 01:45:54.120]  и надо ринтерпедкаст.
[01:45:57.120 --> 01:46:00.120]  Mover конструктор сделали,
[01:46:00.120 --> 01:46:03.120]  давайте сделаем Mover оператор присваивания.
[01:46:03.120 --> 01:46:06.120]  Кто-нибудь скажите мне, что писать.
[01:46:15.120 --> 01:46:18.120]  Это Mover оператор присваивания.
[01:46:18.120 --> 01:46:21.120]  Соответственно, в всяком случае, Mover надо использовать.
[01:46:24.120 --> 01:46:27.120]  И в свою дату мы будем использовать Mover.
[01:46:27.120 --> 01:46:30.120]  Ну окей.
[01:46:31.120 --> 01:46:34.120]  Кажется, с горем пополам мы справились со всеми местами.
[01:46:34.120 --> 01:46:37.120]  Единственная сейчас проблема
[01:46:37.120 --> 01:46:40.120]  это то, что...
[01:46:42.120 --> 01:46:45.120]  Вот это вот не хватает.
[01:46:45.120 --> 01:46:48.120]  Чего?
[01:46:48.120 --> 01:46:51.120]  Вот это вот не хватает.
[01:46:51.120 --> 01:46:54.120]  Вот это вот не хватает.
[01:46:54.120 --> 01:46:57.120]  Чего?
[01:46:57.120 --> 01:47:00.120]  Чего-чего-чего?
[01:47:04.120 --> 01:47:07.120]  Да, вот здесь надо.
[01:47:07.120 --> 01:47:10.120]  И вот здесь надо сказать, что мы копию обнулили.
[01:47:10.120 --> 01:47:13.120]  А еще, заметьте,
[01:47:13.120 --> 01:47:16.120]  такую наглядную досаду у нас где-то память утекла.
[01:47:19.120 --> 01:47:22.120]  Ну ладно, это сложно заметить.
[01:47:22.120 --> 01:47:25.120]  Память утекла вот здесь вот где-то.
[01:47:27.120 --> 01:47:30.120]  Давайте посмотрим на этот код.
[01:47:30.120 --> 01:47:33.120]  И запомним, что здесь происходит.
[01:47:33.120 --> 01:47:36.120]  Мы в ветке для маленького буфера
[01:47:36.120 --> 01:47:39.120]  просто PlacementNew делаем в ту,
[01:47:39.120 --> 01:47:42.120]  под того, что было во фроме.
[01:47:42.120 --> 01:47:45.120]  А здесь мы просто передвигаем указатель.
[01:47:47.120 --> 01:47:50.120]  Ну и сейчас произошло много всего плохого сразу.
[01:47:50.120 --> 01:47:53.120]  Вот где-то вот тут.
[01:47:56.120 --> 01:47:59.120]  Адр пришел в плохое состояние.
[01:48:01.120 --> 01:48:04.120]  В обоих кейсах.
[01:48:04.120 --> 01:48:07.120]  И если СБО был, и если его не было.
[01:48:11.120 --> 01:48:14.120]  Давайте разбирать.
[01:48:14.120 --> 01:48:17.120]  Случай, когда СБО не было.
[01:48:17.120 --> 01:48:20.120]  То есть хранилось на куча.
[01:48:20.120 --> 01:48:23.120]  Мы вызвали мувер на Адере.
[01:48:23.120 --> 01:48:26.120]  А мувер сделал что?
[01:48:26.120 --> 01:48:29.120]  Присвоил.
[01:48:29.120 --> 01:48:32.120]  Но у этого Адера осталась ссылка
[01:48:32.120 --> 01:48:35.120]  на этот объект на кучу?
[01:48:35.120 --> 01:48:38.120]  Осталось.
[01:48:38.120 --> 01:48:41.120]  Ну дабл фри получается.
[01:48:41.120 --> 01:48:44.120]  В случае СБО мы сконструировали в ту новую штуку,
[01:48:44.120 --> 01:48:47.120]  мувнув то, что здесь было.
[01:48:47.120 --> 01:48:50.120]  В FromInline остался жить объект?
[01:48:50.120 --> 01:48:53.120]  Остался.
[01:48:53.120 --> 01:48:56.120]  То, что мы его мувнули, это не значит, что этот объект куда-то делся.
[01:48:56.120 --> 01:48:59.120]  И у этого объекта в том числе может быть
[01:48:59.120 --> 01:49:02.120]  что-то выделено на куче даже внутри.
[01:49:02.120 --> 01:49:05.120]  Мы же не знаем, какой Т.
[01:49:05.120 --> 01:49:08.120]  Мы после этого прекрасного мува
[01:49:08.120 --> 01:49:11.120]  занулим копир
[01:49:11.120 --> 01:49:14.120]  и решим, что все нормально.
[01:49:14.120 --> 01:49:17.120]  То есть какая-то на самом деле фигня будет.
[01:49:17.120 --> 01:49:20.120]  Поэтому я говорю, что надо стирать не функцию move, а relocate.
[01:49:20.120 --> 01:49:23.120]  Знаете, в чем отличие?
[01:49:23.120 --> 01:49:26.120]  Что?
[01:49:26.120 --> 01:49:29.120]  Можно swap.
[01:49:29.120 --> 01:49:32.120]  Тут на самом деле миллион.
[01:49:32.120 --> 01:49:35.120]  Пока с этим сами не поедем.
[01:49:35.120 --> 01:49:38.120]  Ну что?
[01:49:39.120 --> 01:49:42.120]  Пока с этим сами не поиграетесь.
[01:49:42.120 --> 01:49:45.120]  Не прочувствуете, насколько тут как угодно можно писать
[01:49:45.120 --> 01:49:48.120]  и какие разные результаты получить.
[01:49:48.120 --> 01:49:51.120]  Я предлагаю такое решение.
[01:49:51.120 --> 01:49:54.120]  Вместо того, чтобы делать move, делать relocate.
[01:49:54.120 --> 01:49:57.120]  Relocate от move отличается тем, что он еще и удаляет то,
[01:49:57.120 --> 01:50:00.120]  откуда мувнулось.
[01:50:00.120 --> 01:50:03.120]  То есть здесь я еще и удалю.
[01:50:03.120 --> 01:50:06.120]  Тут, кстати, неправильный каст.
[01:50:06.120 --> 01:50:09.120]  Еще и удалю вот это.
[01:50:12.120 --> 01:50:15.120]  Ну, мы, коли move-нули, все, там ничего нет,
[01:50:15.120 --> 01:50:18.120]  мы переместили.
[01:50:18.120 --> 01:50:21.120]  Здесь я сделаю exchange, как раньше было.
[01:50:25.120 --> 01:50:28.120]  Вот, и с таким relocate...
[01:50:28.120 --> 01:50:31.120]  И с таким relocate это уже будет просто работать.
[01:50:33.120 --> 01:50:36.120]  Потому что, что здесь мы из Ather
[01:50:36.120 --> 01:50:39.120]  полностью опустошили его хранилище
[01:50:39.120 --> 01:50:42.120]  и поставили там копир в 0 птр,
[01:50:42.120 --> 01:50:45.120]  сказав, что не валидная Эня,
[01:50:45.120 --> 01:50:48.120]  что здесь то же самое.
[01:50:48.120 --> 01:50:51.120]  Не здесь, а вот здесь.
[01:50:51.120 --> 01:50:54.120]  А вот здесь.
[01:50:54.120 --> 01:50:57.120]  А вот здесь.
[01:50:57.120 --> 01:51:00.120]  Не здесь, а вот здесь то же самое произошло.
[01:51:00.120 --> 01:51:03.120]  Я надеюсь, до вас
[01:51:03.120 --> 01:51:06.120]  чуть-чуть хотя бы донеслись мои слова сейчас,
[01:51:06.120 --> 01:51:09.120]  потому что уже чувствую все.
[01:51:09.120 --> 01:51:12.120]  Давайте напоследок проверим, работает ли оно.
[01:51:15.120 --> 01:51:18.120]  Не работает.
[01:51:21.120 --> 01:51:24.120]  Ну, пошли касты.
[01:51:24.120 --> 01:51:27.120]  Давайте все стать касты.
[01:51:27.120 --> 01:51:30.120]  Удалим касты.
[01:51:30.120 --> 01:51:33.120]  А теперь, кажется, нужно вландр оборачивать.
[01:51:33.120 --> 01:51:36.120]  Вот, например, access-показательный.
[01:51:36.120 --> 01:51:39.120]  А, в AnyCast у нас еще проблемы, да?
[01:51:45.120 --> 01:51:48.120]  В AnyCast все сломалось.
[01:51:48.120 --> 01:51:51.120]  А что-то не так пошло.
[01:52:01.120 --> 01:52:04.120]  Так.
[01:52:04.120 --> 01:52:07.120]  Тут у нас все нормально?
[01:52:07.120 --> 01:52:10.120]  Все нормально.
[01:52:10.120 --> 01:52:13.120]  И тут все нормально.
[01:52:13.120 --> 01:52:16.120]  Итока, да.
[01:52:16.120 --> 01:52:19.120]  Что не constexpr?
[01:52:19.120 --> 01:52:22.120]  Да не, не, не, все нормально уже.
[01:52:22.120 --> 01:52:25.120]  constexpr-переменные могут быть там
[01:52:25.120 --> 01:52:28.120]  ODR, Ust, все или как это называется.
[01:52:28.120 --> 01:52:31.120]  Нинственная проблема вот тут.
[01:52:31.120 --> 01:52:34.120]  Мы не знаем, что делать.
[01:52:37.120 --> 01:52:40.120]  Ну, что нам возвращать?
[01:52:40.120 --> 01:52:43.120]  Ссылку на inline?
[01:52:43.120 --> 01:52:46.120]  Да, ну, честно скажу,
[01:52:46.120 --> 01:52:49.120]  у меня нет ответа на этот вопрос.
[01:52:49.120 --> 01:52:52.120]  То есть, я писал function, а не any
[01:52:52.120 --> 01:52:55.120]  с подобными фокусами.
[01:52:55.120 --> 01:52:58.120]  Кажется, в прошлом году тоже у нас было.
[01:52:58.120 --> 01:53:01.120]  Наоборот.
[01:53:01.120 --> 01:53:04.120]  Ну, вот, да.
[01:53:04.120 --> 01:53:07.120]  Гениально.
[01:53:07.120 --> 01:53:10.120]  Да, что-то под вечер не соображаю.
[01:53:10.120 --> 01:53:13.120]  Ну, да.
[01:53:16.120 --> 01:53:19.120]  Кажется, здесь...
[01:53:19.120 --> 01:53:22.120]  Да, или в прошлом году тоже в такой последовательности было.
[01:53:22.120 --> 01:53:25.120]  И вот это я писал.
[01:53:25.120 --> 01:53:28.120]  Какие-то воспоминания возвращаются ко мне.
[01:53:28.120 --> 01:53:31.120]  Да, только зачем я все это снаружи пишу?
[01:53:31.120 --> 01:53:34.120]  Когда можно...
[01:53:34.120 --> 01:53:37.120]  Если меньше,
[01:53:37.120 --> 01:53:40.120]  то data.inline
[01:53:40.120 --> 01:53:43.120]  иначе data.hip
[01:53:49.120 --> 01:53:52.120]  О!
[01:53:55.120 --> 01:53:58.120]  Хоба!
[01:53:58.120 --> 01:54:01.120]  Ну, во-первых,
[01:54:01.120 --> 01:54:04.120]  смотрите, что тут на консоли вывелось.
[01:54:04.120 --> 01:54:07.120]  Это не похоже на int42,
[01:54:07.120 --> 01:54:10.120]  который я туда заложил.
[01:54:10.120 --> 01:54:13.120]  Ну, тут СБО сработал, да?
[01:54:13.120 --> 01:54:16.120]  Где я?
[01:54:16.120 --> 01:54:19.120]  Накосячил.
[01:54:19.120 --> 01:54:22.120]  Ищем ошибки в меньше-больше.
[01:54:23.120 --> 01:54:26.120]  Ищем ошибки в меньше-больше.
[01:54:34.120 --> 01:54:37.120]  Есть ошибка в меньше-больше.
[01:54:37.120 --> 01:54:40.120]  Если меньше, то inline.
[01:54:40.120 --> 01:54:43.120]  Меньше либо равно.
[01:54:47.120 --> 01:54:50.120]  И тут везде тоже.
[01:54:52.120 --> 01:54:55.120]  В таких случаях, кстати,
[01:54:55.120 --> 01:54:58.120]  лучше бы завести какую-то...
[01:54:58.120 --> 01:55:01.120]  Ну, вы поняли.
[01:55:01.120 --> 01:55:04.120]  Получится.
[01:55:04.120 --> 01:55:07.120]  Констэкспор был переменную,
[01:55:07.120 --> 01:55:10.120]  в зависимости от тега, говорит, use СБО или нет.
[01:55:11.120 --> 01:55:14.120]  Так.
[01:55:14.120 --> 01:55:17.120]  Умогло, не помогло.
[01:55:19.120 --> 01:55:22.120]  Давайте поставим здесь breakpoint.
[01:55:22.120 --> 01:55:25.120]  Вообще...
[01:55:25.120 --> 01:55:28.120]  Интересно.
[01:55:28.120 --> 01:55:31.120]  Я ожидал, что сейчас все заработает,
[01:55:31.120 --> 01:55:34.120]  и мы с поколением будем работать.
[01:55:34.120 --> 01:55:37.120]  Вот.
[01:55:37.120 --> 01:55:40.120]  Интересно.
[01:55:40.120 --> 01:55:43.120]  Я ожидал, что сейчас все заработает,
[01:55:43.120 --> 01:55:46.120]  и мы спокойненько разойдемся пораньше, в какой-то веке.
[01:55:46.120 --> 01:55:49.120]  Мы положили туда int 42.
[01:55:49.120 --> 01:55:52.120]  Пытаемся делать они каст.
[01:55:52.120 --> 01:55:55.120]  А вы положили туда-таки 42 или нет?
[01:55:55.120 --> 01:55:58.120]  Давайте посмотрим this.
[01:55:58.120 --> 01:56:01.120]  Что лежит в inline?
[01:56:01.120 --> 01:56:04.120]  Incomplete type.
[01:56:07.120 --> 01:56:10.120]  А.
[01:56:10.120 --> 01:56:13.120]  Не прокатило.
[01:56:13.120 --> 01:56:16.120]  Да?
[01:56:16.120 --> 01:56:19.120]  This.data.inline.
[01:56:19.120 --> 01:56:22.120]  Ampersand.
[01:56:22.120 --> 01:56:25.120]  Не выглядит похоже.
[01:56:25.120 --> 01:56:28.120]  Не выглядит похоже.
[01:56:28.120 --> 01:56:31.120]  Не выглядит похоже.
[01:56:31.120 --> 01:56:34.120]  Не выглядит похоже.
[01:56:34.120 --> 01:56:37.120]  Не выглядит похоже на 42.
[01:56:37.120 --> 01:56:40.120]  Не выглядит похоже на 42.
[01:56:40.120 --> 01:56:43.120]  Разминовать надо.
[01:56:43.120 --> 01:56:46.120]  Не выглядит похоже на 42.
[01:56:46.120 --> 01:56:49.120]  Мы конструктор не поменяли.
[01:56:49.120 --> 01:56:52.120]  Я понял, где все.
[01:56:55.120 --> 01:56:58.120]  Что мы тут делаем?
[01:56:58.120 --> 01:57:01.120]  Нет.
[01:57:01.120 --> 01:57:12.240]  Да, if constexpr то же самое.
[01:57:31.120 --> 01:57:59.440]  Так, иначе. Так. Ну это в начало. Да, разумеется.
[01:58:01.120 --> 01:58:16.320]  Была, не была. Не была.
[01:58:16.320 --> 01:58:36.320]  42 положилось. Да нет, сейчас получится.
[01:58:36.320 --> 01:58:49.040]  Нет, вы смотрите, да. Вискот-то нормальный вообще редактор. Он видит, что в утейбле лежит копия РИМПЛ для ИНТА.
[01:58:49.040 --> 01:59:06.280]  Мы шагаем. Так, если меньше, то дата inline, наш адрес.
[01:59:06.280 --> 01:59:35.200]  На шаг выше. Нормальный return value. А, так это мы уже прошли все, да? Получается, мы где-то дальше
[01:59:35.200 --> 01:59:52.360]  скрашились. На каком шашке? После move мы скрашились. Причем move это был move assignment и после
[01:59:52.360 --> 02:00:05.280]  move assignment что-то сломалось. Ну да, я себе копию разнули. Вот так надо было, да.
[02:00:05.280 --> 02:00:24.800]  Ну все, мы точно пришли к успеху. Все?
[02:00:24.800 --> 02:00:41.400]  Домашнее задание для Аркадия личное. Выяснить, где не хватает остатей лаундера. Скажи, где ты
[02:00:41.400 --> 02:01:08.920]  считаешь нужны студии лаундера? Когда мы дестрои делаем в принтер перед касте, дестрои ад, кажется, тут нужны лаундеры, потому что у нас типа, вот у нас доз, по-моему, это просто везде, где мы пытаемся в указатель,
[02:01:08.920 --> 02:01:35.440]  и потом обращаться, как указатель, на объект, который уже стартовал lifetime, там нужно студовал написать. Нет, мы просто знаем, что это активный член юниона. Мы же из юниона каждый раз заново его достаем. Да, но этот же член юниона это inline, который массив байтов, и мы не знаем, когда lifetime объекта стартовал.
[02:01:35.440 --> 02:01:48.960]  И здесь мы должны, кажется, декларировать, что это объект, который стартовал lifetime. Ну, короче, я помню, что есть свои смыслы.
[02:01:48.960 --> 02:02:00.960]  Проползал сейчас? Ну, я не помню. Проползал, это была та штука сейчас. В телеграмму скинул.
[02:02:00.960 --> 02:02:24.960]  Кажется, нам нужно интерпреткастить, когда мы пытаемся именно inline storage перевести указатель.
[02:02:31.960 --> 02:02:40.960]  Ну, по крайней мере, короче, открой inline storage. Там просто пример прямо написан.
[02:02:40.960 --> 02:03:06.960]  Это домашнее задание. Я вспомнил, там были какие-то изменения.
[02:03:06.960 --> 02:03:25.960]  Изменения? Изменения.
[02:03:26.960 --> 02:03:31.960]  Вопрос, в какой стандарт она вмешана? Кажется, в 20-й, да?
[02:03:45.960 --> 02:03:50.960]  Если честно, я искренне верю, что тут не нужен ландер.
[02:03:55.960 --> 02:04:06.960]  Нет, я с точки зрения стандарта. Меня в прошлом году, по-моему, убедили, мы внимательно это вычитали, и все было хорошо.
[02:04:06.960 --> 02:04:31.960]  Ландер нужен когда? Когда у нас был старый указатель на какой-то объект.
[02:04:31.960 --> 02:04:36.960]  Потом тип поменялся. Да, потом тип поменялся.
[02:04:36.960 --> 02:04:41.960]  И тут в данном случае у нас указатель на where.
[02:04:41.960 --> 02:04:49.960]  Мне казалось, что там пытаются об этом мыслить как по лайфтаймах объекта.
[02:04:49.960 --> 02:04:59.960]  То есть, это типа попытка назвать... Ну, короче, там был этот Тимур Дуглер, который рассказывал про start object lifetime width.
[02:04:59.960 --> 02:05:04.960]  Да, я тоже все это смотрел, разбирался, но потом я успокоился.
[02:05:04.960 --> 02:05:11.960]  Сейчас ландер моделирует поведение очень похоже на это start object lifetime width.
[02:05:11.960 --> 02:05:23.960]  Но моделирует в том плане, что он как бы говорит, что сейчас существует объект какого-то типа...
[02:05:32.960 --> 02:05:37.960]  Ладно, давайте на этом на сегодня закончим, наконец-то пораньше.
[02:05:37.960 --> 02:05:44.960]  Всем спасибо, что пришли, и все свободны. Вот эту вот бодягу с ландером можно тут гнуть еще час где-то.
[02:05:44.960 --> 02:05:52.960]  В итоге это скатится просто в вычитывание стандарта. Это уже как-то неинтересно.
[02:05:52.960 --> 02:05:59.960]  Самое интересное я показал. Дома вам придется сделать такое же в меру своей извращенности.
[02:05:59.960 --> 02:06:04.960]  Если захотите витейбла как-то выносить по-разному, пожалуйста.
[02:06:04.960 --> 02:06:09.960]  Смолбуфер тоже, пожалуйста. Вот как бы весь мир для вас открыт.
[02:06:14.960 --> 02:06:27.960]  Я решил забить на ландеры, мне стало немножко стыдно, поэтому я хочу сейчас явно проговорить еще для всех, если у вас вдруг какие-то проблемы с ними могут возникнуть.
[02:06:28.960 --> 02:06:33.960]  Ландеры надо писать каждый раз, когда мы из байтов получаем объект.
[02:06:36.960 --> 02:06:43.960]  Он говорит, а под этим указателем на байты на самом деле лежит какой-то объект.
[02:06:44.960 --> 02:06:48.960]  Зачем это отличается от стати каска?
[02:06:48.960 --> 02:07:01.960]  Сейчас будет не совсем точно и возможно уже даже не совсем правильное объяснение, но Clang умеет кашировать то, у кого он сделал виртуальный вызов для внутренних оптимизаций.
[02:07:01.960 --> 02:07:10.960]  Если вы положили в этот объект одну реализацию интерфейса, по вызыванию, как это Clang может инвариантными группами запомнить?
[02:07:13.960 --> 02:07:27.960]  Проще, не погружаясь в конкретику, когда мы, например, какие-нибудь релакиты зовем или что угодно, где мы обращаемся к СБО.
[02:07:27.960 --> 02:07:33.960]  Вот внимание, Лондер это только про СБО, про тех, кто особо продвинутый и будет сидеть и выписать.
[02:07:33.960 --> 02:07:43.960]  Каждый раз, когда мы к этому СБО обращаемся и делаем какое-нибудь копирование MOV или еще что-то, или даже Anycast, самое важное Anycast,
[02:07:43.960 --> 02:07:52.960]  Каждое это обращение, оно может быть на самом деле закашировано компилятором вовне.
[02:07:52.960 --> 02:08:01.960]  Мы достали указатель, указывающий на какой-то конкретный объект. У этого объекта какие-то данные лежат структурированные.
[02:08:01.960 --> 02:08:12.960]  Какие-то данные из этого объекта компилятор может закашировать у себя, и в рамках вашего отрезка кода вы можете поменять, что внутри Any лежит,
[02:08:12.960 --> 02:08:18.960]  а компилятор этого не заметит и подумает, что вот этот вот reinterpretcast, ну старый объект должен вернуть.
[02:08:18.960 --> 02:08:24.960]  Вот он выше вернул этот объект, значит и здесь тот же самый. Компилятор не понимает этого.
[02:08:24.960 --> 02:08:33.960]  Да, они прям реально кашируются. Еще там какие-то кейсы бывают, но...
[02:08:33.960 --> 02:08:47.960]  Да, это самая частая оптимизация компилятора. Увидеть, что мы два раза один и тот же код выполняем, чтобы получить одни и те же данные и закашировать их.
[02:08:47.960 --> 02:09:00.960]  А на самом деле, на самом деле данные отличаются, он этого не замечает и все ломается. То есть у вас типа протухшие данные на чтении появятся из кэша.
[02:09:00.960 --> 02:09:08.960]  Вообще-то reinterpretcast сам не делает этого. Потому что это исторически он этого не делал никогда.
[02:09:08.960 --> 02:09:17.960]  И вообще то, что такая проблема существует, заметили разрабы кланга, типа там за день до релиза C++17 и быстро прибежали, затолкали лондер.
[02:09:17.960 --> 02:09:24.960]  Теперь мы с ним живем. Это не самый хороший фикс, возможно другие фиксы более какие-то нормальные можно, но вот...
[02:09:24.960 --> 02:09:42.960]  Ну там вообще что-то странное, короче, да. Ну вот лондер нужно писать каждый раз, когда вы small-буфер, ваш small-буфер, получаете к нему доступ.
[02:09:42.960 --> 02:09:53.960]  То есть ветки, где просто на куче лежит объект, не надо ничего делать, потому что вы его потом удалите дилитом, честно, а потом через new создадите новый, и как бы проблем нет.
[02:09:53.960 --> 02:09:59.960]  А вот здесь это одни и те же байты всегда, и new и дилит не вызывались, и компилятор запутывается.
[02:09:59.960 --> 02:10:09.960]  Поэтому каждый раз, когда вы reinterpretcast'ите буфер с байтиками к конкретному объекту, зная, что там лежит объект, нужно позвать лондер.
[02:10:09.960 --> 02:10:20.960]  Здесь лежит на куче, это указательно какой-то объект на куче. Он был создан через new и будет удален через дилит.
[02:10:20.960 --> 02:10:40.960]  Проблем никаких не возникнет, это обычный C++. Здесь мы в каких-то конкретных байтиках inline когда-то давно создали объект, а теперь reinterpretcast'им эти байтики обратно к конкретному объекту, к типу.
[02:10:40.960 --> 02:10:59.960]  И вот здесь компилятор может подумать, что объект, который лежал в этих байтиках, не поменялся, а он мог поменяться, потому что кто-то мог позвать, присвоить вашему Any другой Any, где другой тип был, другой объект лежал, у которого там другие виртуальные функции были.
[02:10:59.960 --> 02:11:05.960]  Вот про это речь. Ничего не понятно, да?
[02:11:05.960 --> 02:11:22.960]  У нас в прошлый раз был storage, это либо указатель на кучу, где лежит какой-то тип, он может поменяться, но из-за того, что мы делаем всякие new и дилиты, компилятор понимает, что происходит.
[02:11:22.960 --> 02:11:49.960]  Ну просто в новые байты все попадает, как бы абстракция, new, delete, она от этого спасает. А вот когда мы руками эти байты менеджим, и у нас вот просто массив байт, и мы в него кладем то один объект, потом удаляем, кладем другой объект, потом третий, компилятор может закашировать что-то из старого объекта, как Аркадий сказал, указательные виртуальные функции.
[02:11:49.960 --> 02:12:05.960]  И не понять, что при новой загрузке, вот AnyCast новом, на самом деле должен прийти указатель на новый объект, у которого новые виртуальные функции, новые данные, и компилятор просто из каша их возьмет, типа оптимизирует так код, и все сломается.
[02:12:05.960 --> 02:12:26.960]  И вот Лондер говорит, нет, здесь новый объект лежит, ничего, никаких вещей не кашируй. То есть а-ля, я знаю, что лежит объект под этим адресом, и я хочу его получить. А вот это выражение, только reinterpretcast без Лондера, оно как бы игнорирует объектную модель, оно ничего не значит.
[02:12:26.960 --> 02:12:45.960]  Да, корректность не меняется, потому что имплементацию STD-Londer это просто, а, ладно, тут built-in-Londer, корректная имплементация STD-Londer, может быть, это просто return p.
[02:12:46.960 --> 02:12:49.960]  Может быть, return p это окей.
[02:12:54.960 --> 02:13:07.960]  Может у вас компилятор, который и так таких оптимизаций не делает, поэтому ему никакие метки не нужны, корректная имплементация вообще без всего. Ну вот в кланге эта оптимизация есть, поэтому тут built-in-Londer прямо используется.
[02:13:08.960 --> 02:13:13.960]  Вот дальше почитайте, пожалуйста, сами про этот Лондер, но общая идея, надеюсь, так приблизительно понятна.
[02:13:15.960 --> 02:13:20.960]  У меня есть вопрос, мы Лондер должны перед любым рейтингом кастиковой позвать или нет?
[02:13:25.960 --> 02:13:26.960]  В любом.
[02:13:29.960 --> 02:13:33.960]  Не ошибешься, но тебя закидают тряпками.
[02:13:34.960 --> 02:13:41.960]  То, к чему, от чего, ну короче, вот у тебя есть объект, который ты получил в результате рентепредкаста.
[02:13:41.960 --> 02:13:42.960]  Указатель.
[02:13:42.960 --> 02:13:50.960]  Вот если ты куда дальше передаешь указатель, там может вызваться виртуальный метод, то значить нужно писать Лондер.
[02:13:51.960 --> 02:13:55.960]  Мы же, наша оптимизация может не только при виртуальности взаимодействовать.
[02:13:56.960 --> 02:14:03.960]  Ты пишешь шаблонный код, обычно ты ни Лондер, ни рентепредкасты вне шаблонов не используешь.
[02:14:03.960 --> 02:14:09.960]  Если ты пишешь руками рентепредкасты без шаблонов, то тебя уже сразу расстреливать надо, да?
[02:14:09.960 --> 02:14:13.960]  А в шаблонах, ну понятное дело, что мог прилететь кто-то виртуальный.
[02:14:13.960 --> 02:14:18.960]  Ну да, то есть если в принципе это может быть вызвано виртуальным методом, значит нужно писать Лондер.
[02:14:18.960 --> 02:14:23.960]  Собственно поэтому и в Destroyer нужно писать Лондер, потому что он может вызвать виртуальный код.
[02:14:24.960 --> 02:14:28.960]  Да, в Destroyer это нужно.
[02:14:28.960 --> 02:14:35.960]  Вот здесь я кстати тоже написал, потому что мы могли бы продолбаться и закэшировать неправильную виртуальную эту
[02:14:35.960 --> 02:14:38.960]  и пройти через, ну паранойя, короче.
[02:14:38.960 --> 02:14:44.960]  Вот здесь по факту сломаться ничего не могло, чтобы соблюсти стандарт, по-моему, все равно нужно.
[02:14:44.960 --> 02:14:48.960]  А почему вот тут один рентепредкаст там не написан?
[02:14:48.960 --> 02:14:50.960]  Потому что это кейс на куча.
[02:14:51.960 --> 02:15:00.960]  Нет, ну здесь у нас в теории могло бы быть так, что у нас есть какой-то виртуальный метод перегруженный на R-Value.
[02:15:05.960 --> 02:15:10.960]  Проблема в том, что там еще и в двадцатых плюсах какие-то изменения к СТД Лондер были с разменением 17,
[02:15:10.960 --> 02:15:16.960]  Андрей нас покинул, ему приспичило, он прям заботил четко, как этот СТД Лондер работает, чертов.
[02:15:16.960 --> 02:15:21.960]  И вот он знает. Если вам очень интересно, вы можете либо сами почитать, либо у Андрея спросить.
[02:15:21.960 --> 02:15:28.960]  А я предлагаю, поверьте мне на слово, что только там, где вы к Смолбуферу обращаетесь, нужно писать СТД Лондер.
[02:15:28.960 --> 02:15:32.960]  Допустим, мы используем аллокатор, который ралансирует на стеге.
[02:15:41.960 --> 02:15:47.960]  Конкретный код, берем томик стандарта и вот конкретно смотрим, тогда можно сделать какие-то выводы.
[02:15:47.960 --> 02:15:55.960]  В этой домашке, когда вы дома будете ее решать, вот это вот про спая, вот там, если вы захотите до баллы написать СБО,
[02:15:55.960 --> 02:16:00.960]  в пишите Лондер везде, где вы рендер предкастите Смолбуфер.
[02:16:05.960 --> 02:16:08.960]  На сороковой строке нет Лаундера.
[02:16:14.960 --> 02:16:18.960]  Да, абсолютно правильно, здесь должен быть Лондер, а здесь его нет.
[02:16:25.960 --> 02:16:30.960]  Если что-то падает с какой-то непонятной ошибкой в рандайме, мы как-то можем...
[02:16:30.960 --> 02:16:31.960]  Это УБ.
[02:16:31.960 --> 02:16:39.960]  Я понимаю, что это УБ, мы как-то можем, не вчитываясь в каждую строчку, понять, чтобы где-то забыли Лондера.
[02:16:39.960 --> 02:16:43.960]  Нет, это С++, если ты с такой ошибкой столкнешься, ты...
[02:16:43.960 --> 02:16:49.960]  Сам компилятор помнит, что он куда-то это изположил.
[02:16:49.960 --> 02:16:57.960]  Это же, так как это Implementation Defined, по сути, запомнил это имя, то как это...
[02:16:57.960 --> 02:17:01.960]  Нет, нет, может какие-нибудь эти анализаторы...
[02:17:01.960 --> 02:17:08.960]  Черт знает, это настолько, настолько жуткая вещь, настолько жуткие дебри, что, скорее всего, всем без разницы.
[02:17:08.960 --> 02:17:16.960]  Вроде бы хотели же Start Lifetime as ST какой-то написать.
[02:17:16.960 --> 02:17:18.960]  Это про другое.
[02:17:19.960 --> 02:17:21.960]  Это точно про другое?
[02:17:26.960 --> 02:17:28.960]  Нет, это про другое.
[02:17:28.960 --> 02:17:34.960]  Потому что это стартует Lifetime нового объекта, а у нас здесь уже есть объект, который мы хотим получить.
[02:17:34.960 --> 02:17:41.960]  Я не помню детали, но может быть замысел в том, что мы когда конструируем, мы один раз стартуем Lifetime, и потом он не может...
[02:17:41.960 --> 02:17:45.960]  Да, мы когда-то выпадем что-то, мы можем стоптануть Lifetime, вот так играем.
[02:17:45.960 --> 02:17:47.960]  Да, да, да, да, я про это говорю.
[02:17:47.960 --> 02:17:51.960]  Это вот решение, оно на окоторе, где-то внутри.
[02:17:51.960 --> 02:17:54.960]  Ты такие вопросы задаешь, но без шансов.
[02:17:54.960 --> 02:17:59.960]  Потому что нам говорят, что там может что-то сломаться, а на окоторе, как бы, все должно ничего не сломаться.
[02:17:59.960 --> 02:18:05.960]  Честно, но они оба последуют стандарту, могут все сломать, в принципе.
[02:18:07.960 --> 02:18:09.960]  Согласны стандарты?
[02:18:12.960 --> 02:18:15.960]  А на это, на охотчеке запускается подкладка, да?
[02:18:15.960 --> 02:18:16.960]  Да.
[02:18:16.960 --> 02:18:18.960]  То есть сотни активизаций?
[02:18:18.960 --> 02:18:20.960]  Да.
[02:18:23.960 --> 02:18:26.960]  Можно, кстати, добавить задачу на G2C.
[02:18:26.960 --> 02:18:31.960]  Вроде, Шаланг 18-й уже поддерживает его без оговорок и с перегрузками.
[02:18:31.960 --> 02:18:34.960]  Поэтому, по сути, он его поддерживает.
[02:18:42.960 --> 02:18:44.960]  Ты можешь скачать и его собрать себе?
[02:18:44.960 --> 02:18:46.960]  Кто-то уже собрал его.
[02:18:46.960 --> 02:18:49.960]  А в их репертуаре он может даже собрать и есть?
[02:18:49.960 --> 02:18:53.960]  Ну, G2C не есть, но судя по их статусу, вроде, есть.
[02:18:54.960 --> 02:18:56.960]  Ну, там какая-то ограниченная оптальзия.
[02:18:56.960 --> 02:18:58.960]  Ну, в смысле, там не офигенно ограниченная.
[02:18:58.960 --> 02:19:02.960]  Там не учтет только про прогрузки и перегрузки.
[02:19:02.960 --> 02:19:04.960]  А, ну, может, я как раз гляну на этот вопрос?
[02:19:04.960 --> 02:19:05.960]  Ну, ты.
[02:19:05.960 --> 02:19:08.960]  Только там же такие можно только написать.
[02:19:11.960 --> 02:19:13.960]  Там типа смесь статических...
[02:19:13.960 --> 02:19:15.960]  Техно сбавлялся.
[02:19:22.960 --> 02:19:24.960]  Ну...
[02:19:30.960 --> 02:19:33.960]  Вот я в Lipsy.xx пытаюсь найти лондер. Не могу.
[02:19:39.960 --> 02:19:41.960]  Чего?
[02:19:43.960 --> 02:19:46.960]  Кажется, не совсем томный почталист.
[02:19:46.960 --> 02:19:48.960]  Да нет, том.
[02:19:51.960 --> 02:19:54.960]  А, все, я понял, почему я ничего не находил.
[02:19:54.960 --> 02:19:57.960]  Я думал, это значит... Да.
[02:19:57.960 --> 02:19:59.960]  Опа.
[02:19:59.960 --> 02:20:01.960]  Код.
[02:20:05.960 --> 02:20:07.960]  Так, так, так, так, так.
[02:20:07.960 --> 02:20:09.960]  Э...
[02:20:11.960 --> 02:20:13.960]  Э, нет.
[02:20:13.960 --> 02:20:15.960]  Нет.
[02:20:23.960 --> 02:20:25.960]  Ну...
[02:20:27.960 --> 02:20:31.960]  Нет, ну, смотрите, в unordered map используется лондер.
[02:20:37.960 --> 02:20:40.960]  Почему-то считаешь 14 стандартов, а не 17.
[02:20:40.960 --> 02:20:42.960]  Hash value type.
[02:20:43.960 --> 02:20:45.960]  Ну, больше, чем 4.
[02:20:45.960 --> 02:20:47.960]  А, ну, вот да.
[02:20:47.960 --> 02:20:49.960]  Да.
[02:20:49.960 --> 02:20:53.960]  Вот у них тут какой-то CC, это непонятно какие-то данные.
[02:20:53.960 --> 02:20:55.960]  И, ну, ничего непонятно.
[02:20:55.960 --> 02:20:57.960]  Вы знаете, хорошо читаем.
[02:20:57.960 --> 02:20:59.960]  Да.
[02:21:03.960 --> 02:21:05.960]  В мапе тоже самое есть.
[02:21:05.960 --> 02:21:07.960]  Какой-то config.
[02:21:11.960 --> 02:21:13.960]  Ну...
[02:21:21.960 --> 02:21:23.960]  Ну, не знаю.
[02:21:23.960 --> 02:21:26.960]  Ладно, предлагаю разойтись. Уже сидим 5 минут лишних.
[02:21:26.960 --> 02:21:30.960]  Поставьте лондер вот на SBO, если будете писать SBO.
[02:21:30.960 --> 02:21:32.960]  Еще лучше разберитесь.
[02:21:32.960 --> 02:21:36.960]  Ну, это вам, типа, один раз разобраться, потом забыть сразу.
[02:21:36.960 --> 02:21:38.960]  Оно в памяти не сохраняется.
