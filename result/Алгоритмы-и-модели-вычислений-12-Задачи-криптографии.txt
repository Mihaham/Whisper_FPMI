Так, давайте начинать.
Значит, сегодняшнюю лекцию я хочу посвятить основаниям
криптография.
Значит, в принципе, эта тема очень большая и при этом
практически важная.
Вот.
Так что я хочу так пройтись по верхам, да, осветить
некоторые ключевые моменты, да, еще некоторые основные
идеи.
Вот с тем, чтобы при желании это можно было изучать
подробнее, да, и как бы было ясно место этой области
и в теории, ну, и в практике, да, то есть в общем массиве
знания.
Какие вообще задачи называются криптографическими, да,
и что такое предмет криптография.
Ну, в самом общем виде можно сказать так, что есть некоторое
количество агентов, да, значит их может быть двое, может
быть больше.
Есть какие-то каналы связи между ними, да, значит там
двусторонние или односторонние.
Вот, и соответственно есть какая-то информация, да,
значит какая-то информация доступна публично какая-то
только каким-то отдельным агентам.
Вот, и в целом, да, значит есть понятие криптографического
протокола, да, ну или вообще протокола, значит обычно
протоколом называется совокупность алгоритмов, которые могут
как бы друг другу пересылать сообщения и соответственно
выход одного алгоритма может становиться входом другого
и после этого там что-то происходит.
Вот, поэтому, значит, протокол это совокупность алгоритмов.
Значит, протокол это набор алгоритмов, связанных между
собой, вот, ну, значит, связанных, ну, вот в каком-то таком
смысле, ну, при этом может быть так, что алгоритм
запускается много раз или несколько алгоритмов
запускаются на одной точке, да, то есть кто-то что-то
вычисляет, посылает это куда-то, там тоже что-то
вычисляет, посылает это в ответ с учетом того, что
было иного ответа, там что-то еще вычисляется и так далее.
Вот, ну и соответственно, если опять же в общем виде
говорить, то в итоге, значит, в итоге исполнения протокола,
в итоге исполнения протокола, да, как бы все, так сказать,
хорошие, все, да, даже неважно, хорошие или нехорошие,
я не буду так писать про хороших или нехороших,
значит, я, что так, значит, как бы вся предусмотренная
информация, вся предусмотренная информация должна достичь
получателей, значит, должна достичь предусмотренных
получателей, ну а соответственно, как бы не предусмотренная
информация не должна. Вот, то есть это, значит,
вот некоторые вопросы, значит, некоторые вопросы о передаче
информации, вот, то есть, ну то есть в итоге, например,
вот этот вот участник должен получить там что-то, что зависит
от того, что знает вот этот и знает вот этот, а при
этом вот эти оставшиеся двое не должны в район узнать
ничего, да, а эти двое не должны узнать друг про
друга, да, там что-нибудь, что-нибудь вот в таком духе.
Значит, это достаточно общий, достаточно абстрактное
определение, значит, давайте посмотрим на разные конкретные
примеры, примеры криптографических задач, да, то есть, то как
бы задача, значит, задача это постановка, что означает
предусмотренное и непредусмотренное, а дальше конкретный протокол
это, ну, конкретный набор алгоритмов, при котором
задача решается, так, вот примеры, примеры задач, так,
ну, значит, первая задача, самая классическая, это
шифрование, ну и, собственно, там на протяжении веков
понятия криптографии, я тоже не связывался с вопросом
шифрования, ну, то есть, никакие другие задачи не рассматривались,
да, значит, нужно каким-то образом передать информацию
нужному получателю так, чтобы никто ее не смог перехватить,
вот, ну и, соответственно, есть огромное количество
разных шифров, вот, ну и вообще, если смотреть на
историю, то можно сказать, что, значит, долгое время
было некоторое соревнование, да, значит, между криптографией
и криптоанализом, знаешь, соответственно, криптография
это понималась только как разработка шифров, как
передать информацию, чтобы перехватчик ее не смог прочесть,
а криптоанализ, это, наоборот, попытка взлома шифров,
разработка методов взлома шифров, вот, ну, вот, например,
какой простейший шифр, это шифр замены, что просто
я заменяю одни буквы на другие, и у меня предусмотрено,
что там буква А всюду заменяется на там, на букву D, а там
буква B всюду заменяется на букву U и так далее,
ну, а в общем, берется какая-то перестановка символов,
и все слова заменяются, вот, но вот этот шифр на самом
деле нестойкий, если писать на естественном языке тексты,
то он нестойкий просто потому, что разные буквы с разной
частотой встречаются в тексте, и после замены эта частота
сохранится в среднем, и, соответственно, можно на
основе частоты, а также понимания, как, в принципе,
слова там в русском языке или в каком-нибудь другом
устроенном, что там гласно-согласно бывают, и как-то чередуются
так более-менее, вот, на некоторых буквы слова не
может начинаться там, и так далее, да, в общем, с использованием
информации о языке можно достаточно длинный текст
просто взять и расшифровать, да, собственно, бывают там
какие-нибудь там пляшущие человечки, да, это тоже шифр
замены, и он был расшифрован вот на основании разного
рода таких соображений, вот, но он мог быть более
сложные какие-то, да, значит, более сложные какие-то
методы, вот, но хорошо, а что в целом такое шифрование?
Можно рисовать такую схему, значит, есть отправитель,
есть получатель и есть перехватчик, соответственно,
отправитель получает какое-то сообщение М, вот, возможно,
он получает какой-то ключ, значит, это сообщение,
и тут какой-то ключ, там, К, и на основании сообщения
и ключа отправитель производит шифр текст, вот, а также этот
шифр текст получает перехватчик, вот, а получатель получает
шифр текст, ну и, возможно, тоже ключ, может быть, тот
же самый, может быть, другой, значит, ключ К, и, соответственно,
он должен восстановить М, вот, вот эта вот задача
шифрования, да, что перехватчик, не зная ключа, по шифру
ничего не сможет понять, а получатель сможет при помощи
своего ключа получить, соответственно, исходное сообщение, вот,
есть очень важный вариант, когда перехватчик также
еще и ключ, вот этот вот получает, то есть, если еще К, но
не К штрих, перехватчик тоже получает, то тогда это
называется шифрование с открытым ключом, вот, ну и вот эта вот
концепция шифрования с открытым ключом, это довольно новая
концепция, значит, концепция второй плейн двадцатого
века, вот, а до этого на протяжении веков все строилось в ситуации,
что когда К штрих равно К, и держится в секрете, да,
если украли ключ, да, если украли ключ, то тогда, соответственно,
и все смогли прочесть, вот, вообще, на самом деле, последний
крупный успех криптоанализа, то есть взлома шифров, это
работа Тьюринга и его коллег во время Второй мировой
войны, значит, когда они расшифровывали нацистскую
машину Энигма, да, значит, вот она была довольно хитро
устроена, и при этом ее было довольно удобно использовать,
там была некоторая клавиатура и какие-то хитрые диски,
которые, соответственно, в общем, там каждая буква
заменялась на какую-то другую, но при этом это было
непостоянно в зависимости от положения в тексте, да,
то есть первый раз там буква заменялась там на букву
С, а второй раз там на букву F, и так далее, вот, соответственно,
и там прямо ключ представлял собой некоторый диск там
с какими-то дырочками, вот, и, соответственно, отправителя
и получателя, да, и как бы и у машины было два режима
шифровки и дешифровки в одной и той же машине,
вот, значит, там был рычажок переключить, и тогда, если с тем же
самым ключом набирать полученные сообщения, то она вместо
этого печатала исходный текст, вот, так что это, в общем,
было довольно удобно ее использовать, и с другой стороны,
там этих комбинаций дырочек было так много, да, что, в общем,
там просто так подобрать было невозможно, вот, но,
тем не менее, Тьюринг с коллегами нашли способ расшифровывать это,
да, значит, ну, это, в общем, интересная история, там было несколько,
даже фильм был, да, вот, то есть успех строился, во-первых,
на том, что они просто эту машину добыли себе и полностью
как она в принципе работает, вот, но, конечно, да, это означает,
что они узнали, какой алгоритм используется вот здесь, вот,
и какой алгоритм используется вот здесь, вот.
Закрытым, да, да, да, да, да, да, то есть там вот КАШ-3
равнялась Ка и представлял собой диск с дырочками, который
вставлял в специальное место и тогда, если тот же самый диск
и напечатать на клавиатуре полученный шифр текст, то тогда та же самая
машина выдавала исходное сообщение.
Это правда, да, да, то есть.
Так, подождите, давайте я сначала про Энигму немножко расскажу,
а потом про, значит, смотрите, там действительно частичный успех был,
когда у них получалось просто перехватывать эти ключи, один раз даже
на целый месяц перехватили и там месяц спокойно все читали, вот,
но как бы глобально там на самом деле, там на каждый день был свой ключ
и, собственно, эта вот группа сидела вместе под названием Bletchley Park
в Лондоне и просто каждое утро они получали несколько перехватов
и начинали расшифровывать, чтобы получить, какой именно там ключ
сегодня используется, ну и они использовали, во-первых,
некоторое понимание, как это работает, во-вторых, некоторое понимание,
как устроены сообщения, да, например, что там утром часто передавали
прогноз погоды, да, прогноз погоды довольно регулярно устроен,
да, даже более регулярно, чем обычный текст, соответственно, это сильно
сужало поиск, но кроме того, Тьюринг еще построил некоторую машину
для автоматического перебора, да, который вот позволял это все ускорить,
в общем, как правило, они там с утра за час понимали, какой сегодня ключ
и после этого просто перехватывали все сообщения и их читали, вот,
теперь действительно преимущество открытого ключа, действительно,
если они даже разные, то если вы и ка, и ка штрих перехватите,
то вы сможете прочесть, да, то есть, то это вообще для чтения только
ка штрих нужен, вот, но есть такое преимущество, что если у вас
ка равно ка штрих, то у вас сначала каким-то образом
должны этот один ключ получить, вот, и какая-то коммуникация должна быть,
но и соответственно, либо им как-то нужно встречаться и передавать,
либо каким-то образом заветно защищенный канал использовать, чтобы его передать,
вот, в общем, есть некоторая сложность с обменом,
которая будет узким местом, а если эти ключи разные,
тогда только получатель может сгенерировать пару ка и ка штрих,
и ка штрих вообще никуда не пересылать, храни только у себя,
а тогда ка вообще можно по открытому каналу передать, если мы не боимся,
что ка будет известен на перехватчику, да, тогда ка можно передать там по радио,
по открытому каналу, и соответственно, тогда кто угодно может зашифровать
сообщение, которое сможет прочесть только получатель, вот, вот это вот
концепция шифрования с открытым ключом, вот, это был определенный прорыв,
это 1978, кажется, год, да, соответственно, вот, широко известная аббревиатура RSA,
RSA это первые буквы фамилии авторов, Ривис, Шамир и Эйдельман, они придумали
некоторый конкретный способ шифрования, вот, и они объявили тогда, написали статью,
объявили, что вот, мол, мы зашифровали, кто сможет прочесть, то значит, там даже какой-то
приз был объявлен, вот, кто сможет прочесть, то значит, заломал, на самом том, что они тогда написали,
все-таки потом получилось взломать чисто за счет грубой силы, да, значит, за счет полного
перебора, потому что, конечно, у вас компьютеры гораздо быстрее стали работать, вот, но это
решается длиною ключа, то есть защититься от полного перебора можно за счет более длинного ключа,
вот, ну, значит, это вот первая, первая классическая задача, задача шифрования,
так, ну, дальше давайте, номер я напишу, обмен ключами, значит, вот отсюда видно, да,
что даже если мы хотим, да, значит, если мы хотим, чтобы был один ключ, да, то, соответственно, надо им
как-то обменяться, и вопрос, можно ли это сделать дистанционно, вот, ясно, что это нельзя пересылать
прямым текстом, тогда его перехватят и потом все прочтут, вот, но, может быть, можно как-то
долго друг другу что-нибудь пересылать, а потом на основании этого и на одной, и на другой стороне
что-то вычислить, что будет ключом, вот, а при этом тот, кто подслушивает, и это, значит, не смог бы сделать.
Вот, ну и вот это вот второй сюжет, он такой немножко странный, вот, а именно тоже довольно давно
придуман некоторый метод, вот, но почти никакой теории нету, да, то есть вот про шифрование есть там
подробная теория, при каких условиях оно возможно, там, то вот там доступно и так далее, вот, или там
есть теорема, что если там какая-то функция обладает какими-то свойствами, такой протокол надежен,
там и так далее, вот, но про обмен ключами ничего этого неизвестно, есть только один, ну не один,
на самом деле, но не несколько хороших примеров, вот, дайте я прям напишу, а дайте я сначала нарисую
схему, значит, вот есть две стороны, вот, и они вот долго друг с другом общаются, вот, а в итоге, значит,
в итоге они должны один тот же ключка лучить, вот, но есть такой протокол Диффи Хэлмана,
протокол Диффи Хэлмана, значит, есть две стороны, Алиса и Боб, значит, и есть, значит, они оба знают
пару из простого модуля и генератора, первообразного корня, что-то первообразный, первообразный корень,
знаете, да-да-да, порождающие мультипликативные группы, да, то есть, если мы возьмём этот, он же генератор,
да, значит, если мы его возьмём во всех степенях, то получим, соответственно, все остатки, ну, кроме нуля,
да, например, один не будет генератором, да, потому что один его степень это один, вот, а нужно только,
чтобы он в по-минус первой степени был единицы, а раньше не был, вот, значит, кроме того, Алиса откуда-то
ещё берёт число А, вот, а Боб откуда-то берёт число Б, значит, они могут там случайно генерировать, да, или просто
откуда-то взять секретно, вот, и тогда, значит, Алиса передаёт G в степени A по модлю P, вот, а Боб
передаёт G в степени B по модлю P, и тогда, соответственно, Алиса вычисляет ключ, как G в степени B,
ещё в степени A, вот, а Боб вычисляет G в степени A ещё в степени B, да, и получается одно и то же, да, и то и другое
будет G в степени A-B, но всё по модлю я уж не пишу, вот, и обе стороны это могут вычислить, да, потому что Боб
уже в степени A получила, а Боб у него есть, а Алиса, наоборот, уже в степени B получила, а А у неё есть, вот, а,
соответственно, перехватчик, значит, перехватчик, он может знать модуль генератор, он может знать вот эти вот G в степени A,
а G в степени B, вот, но предполагается, так, наверное, это непростой нужен модуль, да, нет, с простым, наверное, это может не
получиться, да, значит, давайте, секунду, наверное, там нужно, чтобы было произведение двух больших простых чисел,
вот, тогда это, для каких-то модулей это будет сложно, предполагается, что зная G в степени A и зная G в степени B трудно
посчитать G в степени A-B, вот,
так, но там есть теорема, есть теорема, когда есть первообразный корень, там,
там, там простой модуль, простой, простой, простой число в степени или два на простой число в степени,
нет, а дальше уже прям первообразного не будет, вот, в общем, короче говоря, может быть, и простое работает,
и надо смотреть, что написано, но, в общем, предполагается, да, предполагается, что нужно, чтобы трудно было, как бы,
корень извлечь, точнее, не корень, а, наоборот, логарифм дискретный решить, да, то есть, должно быть трудно,
должно быть трудно по G в степени A и G найти A, это задача логарифмирования, да, вот, логарифмирование по модуле,
это называется задачей дискретного логарифма, да, потому что иначе, если бы могли по G в степени A найти A,
тогда взломщик сам бы это посчитал после этого, вот, перехватчик точнее, вот, поэтому нужно, чтобы вот эта задача была сложной,
ну вот, на самом деле, тут даже есть обобщенный протокол Диффи Хелмана, это ситуация, когда у вас не обязательно это группа вычетов,
а какая-то группа, у которой есть генератор, ну и дальше тоже самое происходит, вот, соответственно, если у вас есть хоть какая-то группа,
в которой предположительно задача логарифмирования сложна, и более того, никакого другого способа тоже нет по G в степени A и G в степени B найти G в степени A-B,
то тогда вот этот протокол будет надежным, вот, ну вот, более-менее, это все, что известно про задачу обмена ключами, да, то есть, нет никакой общей теории,
что если есть там какая-то задача, то на основании нее можно построить такой протокол, нет, ну нужна именно конкретная структура группы, чтобы вот это так работало, так, хорошо, так, третий пример,
значит, третий пример это цифровая подпись, цифровая подпись, да, значит, есть вот такой канцеляризм, электронная цифровая подпись, и кажется, что это повторяется два раза одно и то же,
но на самом деле в этом есть некоторый смысл, что именно оба прилагательных используются, да, значит, а именно электронно означает на электронном носителя, да, то есть, например, если я, скажем, с тилусом на экране расписался в файле, то это будет электронная подпись, но не цифровая,
почему, да, значит, почему такое действие не очень надежное, да, что я просто с тилусом там в варде расписываюсь, но оно ненадежно тем, что можно эту картинку скопировать и вставить какой-нибудь другой текст, вот, поэтому хотя это часто применяется, да, но для серьезных вещей это вообще не подходит,
вот, а с другой стороны, да, бывает наоборот, значит, бывает там файлы, и там как будто внизу штанпик стоит, чтобы подпись с электронной подписью,
и этот штанг, конечно, тоже можно скопировать, но, может быть, там написано подпись с электронной подписью и дать какой-то ряд цифр, вот, и тогда, если этот файл напечатать, то вот этот ряд цифр будет цифровой подпися, но не электронной, да, чтобы его на бумажном носителе распечатали,
от этого электронным он быть перестал, но цифровым не перестал, значит, в чем же смысл именно цифровой подпися? Ну, смысл, на самом деле, в том, что она зависит от документа, да, если она зависит от документа, то если вы ее скопируете на другой документ, то тогда она перестанет быть действительной, вот.
Соответственно, но протокол цифровой подпися состоит из двух процедур, а именно процедуры подписи и процедуры проверки, вот, есть, значит, есть одна сторона, это подписывающий, подписывающий получает сообщение,
получает ключ, ключ К, и, соответственно, генерирует, ну, собственно, некоторую подпись, подпись С, вот, и дальше есть проверяющий, да, или верификатор,
который получает некоторую подпись С штрих, значит, получает тоже сообщение М, то же самое, тоже получает ключ, но, возможно, другой, значит, ключ К штрих, и возвращает 0 или 1, да, да, или нет.
Вот, ну и, соответственно, нужно, что если С штрих равняется С, то есть подпись именно под этим сообщением, тогда нужно, да, значит, нужно, чтобы вывести 1, вот, ну, а если подпись какая-то другая, то нужно вывести 0, вот, но, точнее, в принципе, это не обязательно, он может быть, верификатор дает 1 на каких-то других подписях,
но нельзя, чтобы взломщик, да, то есть тут еще есть взломщик,
значит, что получает взломщик, значит, взломщик получает некоторое количество корректных подписей,
да, потому что тут, тут предлагают, что нет шифрования, да, просто вот есть подпись под документом, да, то есть взломщик получает несколько, несколько корректных, корректных пар,
значит, M, I, T, S, I, T, на то взломщик может как бы научиться, да, научиться, как выглядит подпись вот таким-то документами,
вот, а дальше, значит, что он хочет, он хочет какое-то вывести M' и S', да, значит, такое, что M' не совпадает ни с одним из M'
значит, M' не совпадает ни с каким из M'
вот, но при этом, чтобы вот эту вот пару принял верификатор,
вот, если взломщик такое сделает, то это считается успешной атакой,
вот, но точнее можно несколько разных уровней атак рассматривать,
да, может быть, атака, что просто кто-то с улицы пришел, да, и пытается сгенерировать сообщение и подпись под ним,
да, это такая простая атака, может быть, однократная атака, когда он не несколько пар, а одну пару узнал и хочет чего-нибудь другое подписать,
вот, а может быть, вот такая самая сильная атака
да, значит, ну, и понятно, что на самом деле взломщик, наверное, хочет не что угодно подписать, а что-то, что ему нужно,
вот, но если он вообще ничего не может подписать, то, тем более он не может подписать то, что ему нужно,
вот поэтому то что здесь написано это самая сильная атака вот нужно чтобы вот это вот
принималась верификатором
да с ключами тоже есть вариант а значит может вариант что ключи к и к штрих
одинаковые и тогда не взломщику неизвестная и это называется подпись с закрытым ключом
вот и это подразумевает что вот эти контрагенты они как-то уже заранее связаны друг с другом
да и они друг другу хотят посылать
как бы верифицированные сообщения
вот а может быть так что он к штрих и знает
значит к штрих это если открытый ключ
вот открытый ключ
вот это подразумевает следующее да что вот подписывающие там где-то на личном сайте
публикует что вот мой открытый ключ и
с помощью него может проверять все про что говорят что есть что это я подписал
на и тогда верификатор там кто угодно может верифицировать
подпись под сообщением
значит зная к штрих но взломщика тоже знает к штрих и может пытаться при помощи к штрих что-то делать
вот
так ну вот значит это своя подпись есть похожая задача
аутентификация
значит то это то с чем мы все сталкиваемся когда никуда не логинимся
да там нужно доказать да что вы это вы да они кто-то кто пытается ломать ваш аккаунт
вот но тут соответственно
может считать что вот там есть
значит есть клиент есть сервер
вот соответственно клиент знает пароль
вот
ну а сервер тоже что-то знает вот но значит соответственно
вот они как так обмениваться каким-то сообщениями в итоге сервер должен пустить или не пустить
вот ну и тоже тут есть много разных
да то есть тут вопрос что что именно еще знает сервер если сервер тоже прям пароль знает то это называется аутентификация закрытым ключом
когда и у и у клиента и у сервера
соответственно есть пароль один и тот же и
опять что вопрос что может атакующий делать да например может ли атакующий вот это вот подслушивать
вот
там опять же есть несколько атак значит я сам проста так а просто
взломщик с улицы приходит пытается логиниться
вот а такой простой атаке может еще защититься тем что просто клиент посылает пароли вера проверяет что на свод赏ält тем что написано
вот но я слышу вот это вот только такой простой атаке может защититься да потому что более сложная когда
взломщик подслушивать что есть происходят и
тогда уже перейду текстом нельзя пароль передавать
нач forgive это подслушивает и соответственно потом пытается сам взлогиниться
Он подслушивает все сообщения, которые идут между клиентом и сервером.
Если среди этих сообщений будет пароль в прямом текстом,
то тогда взломщик его подслушивает и сможет потом залогиниться.
Поэтому пароль в прямом текстом лучше не пересылать.
Есть такая атака с подслушиванием, а еще есть еще более сильная атака.
Атака с фальшивым сервером, или то, что называется фишинговая атака.
Когда взломщик сам притворяет с сервером,
и соответственно сам беседует с клиентом,
и вовсе не обязательно по тому же протоколу, который сервер использует,
а может быть по какому-то другому.
А после этого этот взломщик пытается пойти на настоящий сервер и там залогиниться.
Идеальная система защищена от всех этих атак.
Но, к сожалению, идеальная система довольно ресурсоемки.
Они в теории есть и даже немножко на практике, но они ресурсоемки.
Поэтому, как правило, используется что-то промежуточное,
не пароль прямым текстом, но и не прям полномасштабная система,
которая абсолютно защищена.
Такая же история, на самом деле, при общении с банкоматом.
Давным-давно были карточки банковские только с магнитной полосой и без чипа.
Не знаю, вы, наверное, уже не заставили такое.
Но теоретически они и сейчас даже могут выпускаться, но вроде так никто не делает.
А магнитная полоса – это фактически пароль прямым текстом.
Это, наверное, про что-то зашифровано намагничиванием полюсов.
Какие-то данные.
И, соответственно, банкомат их просто там читает и понимает, кто кто перед ним.
И, соответственно, сколько можно денег выдать.
И тогда, тем не менее, даже когда чипов не было, был все-таки пин-код.
И это тоже…
Но пин-код как бы отделен…
В банкомате есть отдельно окошко, считывающее карточку,
и есть отдельно клавиатура для пин-кода.
Есть все-таки немножко разные устройства.
Но вообще я к чему клоню, что когда-то давно, больше 10 лет назад,
была такая атака на банкоматы.
На эту щель для карточки нацепляли специальный считыватель магнитной полосы.
И когда жертва вставляла карточку, то этот считыватель все там считывал.
И где-то у себя хранили.
А кроме того, была еще накладная клавиатура, которая запоминала пин-код.
И после этого…
Это мог быть даже настоящий банкомат.
После этого жертва, соответственно, вводила пин-код.
Может быть, даже получала какое-то обслуживание.
Но злоумышленник мог изготовить копию магнитной полосы,
и, зная пин-код, мог после этого сам прийти в банкомат
и снять все, что там осталось на карточке.
Была такая атака некоторое время популярна.
Но от нее довольно быстро защитились техническими средствами,
что просто переделали щели для карт, так что туда уже ничего нельзя приклеить.
И это сейчас сохранилось.
Можете замечать, что там обычно отверстия для картники такие вырезанные,
какие-то хитрые формы.
Это с того времени сохранилось более-менее.
Так чтобы на них ничего постороннего нельзя было нацепить.
Ну а глобально это ушло с внедрением чипов.
Чип это не просто информация, а он какие-то вычисления делает.
И вот чип с банкоматом как какой-то обмен сообщениями делают.
И даже если вы подслушаете эти сообщения,
то это еще не значит, что вы сможете воспроизвести.
Давайте сделаем перерыв.
Немножко задержал.
Пять минут перерыв, потом продолжим.
Дальше идет очень большой класс примеров,
которые в целом можно назвать безопасные многосторонние вычисления.
Я уже не буду так подробно на них останавливаться.
Потому что тут вообще трудно остановиться.
Потому что очень много разных примеров.
Ну например, какие могут быть задачи?
Ну например, на
децентрализованной генерации случайных чисел.
Да, это может быть важно.
Например, если какую-нибудь там лотерею проводите через интернет,
то тогда получается, что нужно, чтобы все были уверены,
что там генерировано честно.
Например, распределенная генерация случайных чисел.
Мы уже в прошлый раз обсуждали много разных проблем с генераторами.
Но также есть проблема доверия.
Что если одна сторона генерирует случайные числа,
то может быть у нее просто плохой генератор.
Да, она не постаралась сделать хорошей.
А может быть она еще и жульничает.
И подкручивает случайные числа так, чтобы это ей было выгодно.
И соответственно, если стороны друг другу не доверяют,
то нужно как-то сделать так, что тем не менее,
если только одна сторона жульничает,
то у нее бы не получилось склонить в свою сторону.
Но если есть возможность одновременного обмена сообщениями,
то тогда можно сделать так.
Например, если один бит нужно сгенерировать,
то Алиса у себя бросает монетку, Боба у себя бросает монетку.
А потом они, не зная результатов друг друга,
посылают друг другу результаты своих монеток.
А итог в результат это их сумма, по-моему, до 2.
То есть их ксор.
И тогда, если они действительно не могут подглядеть друг другу,
то тогда, если одна из монеток случайная,
то другая, даже если она не случайная,
если она случайная, но не симметричная,
все равно при ксоре даст равномерную величину.
Понятно, что если у меня два бита ксорятся,
то если один из них случайный,
то второй же, не важно, какой результат будет случайный.
Но это если они могут одновременно не подглядывать и послать,
а если они обязательно последовательно,
то там нужны дополнительные ухищрения.
Распределена генерация.
Есть такой интересный сюжет под названием Византийское соглашение.
Византийское соглашение
Византийское соглашение заключается в том,
что несколько сторон должны прийти к одному решению,
по крайней мере, те, из них, которые честные.
Что может быть много сторон,
и из них кто-то может быть нечестным,
и пытаться жульничать, не в соответствии с протоколом как-то себя вести.
Но, тем не менее, все остальные должны как-то договориться,
несмотря на то, что там кто-то мешает.
Не важно, о чем именно договориться.
В узком смысле Византийское соглашение
заключается в том, что там есть один начальник,
и он передает приказы,
и там есть два вида приказа.
А все связи только двусторонние.
И все подчиненные, общаясь друг с другом,
должны в итоге понять, какой был приказ,
даже если сам начальник нечестный.
Если начальник нечестный, то он может разные приказы рассылать,
но, тем не менее, все честные должны делать одно и то же.
Это Византийское соглашение.
Есть сюжет разделения секрета.
Разделение секрета – это ситуация, когда есть какой-то секрет,
и из него делается некоторое количество кусков,
то есть просто некоторое количество слов,
каких-то участков информации,
и нужно, чтобы никто один не мог из своего участка понять секрет.
Там никакие двое тоже не могли, даже если сговорятся.
А вот выше кого-то порога, наоборот, уже точно смогли бы.
Например, там никакие пятеро еще не смогли бы, а шестеро уже смогли бы.
Вот это вот разделение секрета.
У этого есть такая аналогия, такая топологическая.
Представьте, что у вас есть ворота, и есть некоторое количество замков,
и, например, нужно навесить три замка так, чтобы при открывании любого одного
ворота еще не открывались, а при открывании любых двух они бы открывались.
То есть смотрите, чтобы при открывании любого одного,
чтобы ключи, тем не менее, были разные,
при открывании любого одного ворота бы открывались.
Это легко, нужно цепочку из трех замков.
Они как бы дают такие замки на тросиках.
Тогда, соответственно, можно их в цепочку сцепить,
и тогда любой один будет открывать все.
Если нужно только все три ключа сразу,
тогда их нужно все три замка нацепить,
и тогда нужно будет обязательно все три открыть, чтобы открылось.
А вот чтобы при двух открывалось, а при одном еще не открывалось,
это нужно придумать какую-то такую-то топологическую штуковину,
как именно они должны быть зацеплены между собой.
Ну, подумайте, порисуйте.
Каждый замок – это просто окружность,
окружность с какой-то точки, где он смыкается,
но окружность гибкая.
Ну, дальше могут быть совсем близкие к практике сюжеты.
Например, электронные выборы.
Такая довольно спорная для практики тема,
но в теории что такое электронные выборы?
Это означает, что есть у вас большое количество входов,
и один вход – это один голос.
А голос – это выбор одного из низких вариантов,
например, в практическом случае.
А результат – это какой вариант, сколько раз выбран.
И в чем, собственно, основное противоречие электронных выборов?
Почему это с трудом получается реализовывать?
И все равно большинство реализаций работают или не работают на доверие.
Основная проблема в том, что нужно одновременно соблюсти тайну голосования.
Неизвестно, кто конкретно за что проголосовал.
И при этом, чтобы была заведом корректность подсчета.
И вот эти вот требования немножко противоречат друг другу.
Мог бы быть даже более сильное требование, например, невозможность принуждения.
Что означает невозможность принуждения?
Это означает, что нельзя раскрыть, что тайно голосование не просто не может человек с улицы прийти и подглядеть.
А даже сам избиратель, если хочет даже доказать, как он проголосовал, он не сможет проголосовать.
Это гораздо более сильно, чем просто это не видно.
В общем, реально получается, что эти проблемы доверия, они все равно никуда не деваются.
И все равно надо быть как-то уверенным, что там нужны программы запущенные и так далее.
Но также есть важная тема, это электронные платежи.
Ну или шире вообще какой-то распределенный доступ к базе данных.
Но с электронными платежами основная цель, чтобы не было возможна двойная трата.
Электронные деньги это просто какие-то записи в базе данных.
И, соответственно, если один раз потрачены эти деньги, то нельзя, чтобы второй раз те же самые деньги потратились.
Притом с бумажными деньгами или железными это происходит путем физической передачи носителя.
А с электронными физически ничего никуда не передается.
И можно каким-то образом устроить обработку информации так, чтобы двойной траты не было.
Ну и тут опять же есть решение централизованное типа платежных систем или банков.
Есть решение децентрализованное типа всякого блокчейна, криптовалют и так далее.
Ну и так далее. В общем, тут умные контракты могут быть, еще что-нибудь.
Тут действительно очень много разных примеров популярных и не очень популярных.
Так, ну хорошо, давайте я немножко опишу, как же это все связано с тем, что мы до сих пор изучали.
Связано на самом вот как.
Значит, более-менее можно это написать как теорема.
Значит, теорема.
Ну, я так неформально напишу.
Значит, если P равно NP, то криптография невозможна.
То криптография невозможна.
Ну, на самом деле это я немножко преувеличил.
Не то, чтобы совсем невозможно.
Да, но возможно только самая простая криптография.
Типа, ну например, может быть такое.
Шифрование тоже бывает, что там для расшифровки нужно взять какой-то текст, там какую-то книгу.
И с использованием того, что сообщили, и тексты из книги, восстановить то, что хотели передать.
Вот это вот шифрование с закрытым ключом.
Знаешь, шифрование с закрытым ключом.
Но при этом очень неэкономное.
Очень неэкономное.
А именно, например, вы каждую...
Например, номер буквы в тексте книги и номер букв в тексте шифра нужно сложить.
Но если получилось больше, чем число букв в алфавите, то взять по моделю.
И вот это будет буква исходного сообщения.
То есть мы тоже как бы складываем по каждому символу в отдельности код сообщения и код ключа.
Ну и тогда, соответственно, если шифрование это складывание, то дэш-шифрование будет вычитание.
А если это еще, по-моему, для 2, то можно тоже складывать.
Потому что, по-моему, на 2 плюс и минус это одно и то же.
Вот. Вот такое будет возможно.
Но тем не менее, представить себе, как это работает, как это могло бы работать.
Как могли бы работать кинетеэлектронные платежи, если у нас криптография только такая же, нужно складывать.
Но это работало бы так, что вы приходите в банк, и там вам дают флешку с одноразовыми ключами.
Вообще, на самом деле, лет 15 назад такое бывало, что не флешку даже выдают, а выдают карточку такую пластиковую, скрэч-карту, что называется.
Там можно ногтем стереть защитный слой, и там будет какое-то число из восьми цифр.
И это будет одноразовую пароль.
Или было такое, что можно на чеке напечатать, прийти в банкомат с карточкой и попросить.
И попросить меня, пожалуйста, одноразовую пароль напечатать.
Выдает чек там сколько-то.
Ну, в общем, если P равно NP, то, более-менее, ничего другого невозможно.
И, на самом деле, если P равно NP, то там восемь цифр, это не будет достаточно.
Реально нужно, если P равно NP, то нужно приходить в банк, получать флешку с закрытым ключом, и дальше каждый раз ее подключать к компьютеру, или по Bluetooth к телефону, чтобы заплатить удаленно за что-нибудь.
А если у вас ее украдут, то тогда нужно будет бежать в банк.
И попытаться успеть заблокировать.
В общем, какая-то немножко безрадостная картина.
Так что можно считать, что это правильная теорема.
Ее можно делать правильно, если точно сформулировать, что именно, я понимаю, под клиптографией.
И, в общем, для большинства формулировок это будет правильно.
Но, на самом деле, этого мало.
Но и P не равно NP тоже недостаточно.
С чем это связано?
Это связано с тем, что то, что P равно NP или не равно NP, это в любом случае просто сложность в худшем случае.
То есть, если P не равно NP, то в худшем случае взломщику придется считать сверхполинальное время.
Но это не то, что нам нужно для надежности.
Для надежности нас не устроит, что взломщик в 5% случаев не сможет взломать.
Нам, наоборот, нужно, чтобы 99% и 9% случаев не мог взломать.
То есть, получается, что, на самом деле, для клиптографии нужна некоторая сложность.
Не просто наличие сложных задач, а наличие сложных задач в среднем.
И вот это не умеют доказывать.
То есть, не умеют доказывать, что если P не равно NP, тогда и в среднем тоже есть сложная задача.
Вот. И более того, на самом деле, для криптографии нужны некоторые специально орденоструктурированные задачи, которые так называемы криптографические примитивы.
Значит, для криптографии нужны так называемые криптографические примитивы.
Ну, это такое тоже слова не очень четко определенные.
То есть, могут быть и нашихyk online, и Dev Accounting и S0 recursion.
Мы tan 05 как бы OG.
определенная да то есть могут и там и что-нибудь из вот этого называть примитивами вот но я имею
в виду более такие более теоретические вещи значит например значит например односторонняя функция
значит односторонняя функция но это тоже на свою картинку да есть x
есть x есть f от x и соответственно из x в f от x вычислить легко то есть дополнительное
время можно а из f от x в x вычислить трудно вот при этом смотрите ясно что если у нас там
функция f много склеивает то мы-то не сможем понять какой x там был в самом начале поэтому
вот это вот получить x это означает что любой там x штрих у которого значение в то же самое вот
вот это называется обратить функцию и вот эта задача решается трудно но опять же я сейчас не буду
остановиться на том что что именно это означает вот ну и тогда вот это вот легко понять что если
p равно np тогда вот такой штук не существует потому что это же как раз np задача найти прообраз
если прообраз есть можем проверить что он правильный вот эта задача из np задача поиска но мы
доказывали что если p равно np тогда задача поиска тоже быстро решается вот поэтому тогда такое
невозможно вот но к сожалению доказать что если p равно np тогда такая штука есть тоже никто не
умеет вот ну вот значит это вот односторонняя функция более-менее для всего нужна без нее без
нее вообще никакая критография невозможно кроме вот самый примитивный вот значит могут быть разные
варианты значит варианты можно может быть что это перестановка перестановка ну или биекция тогда
как раз для каждого f от x будет однозначно определено x но его тем не менее трудно найти
вот может быть но есть еще варианты что именно мы потрудно подразумеваем там есть много разных
вариантов вот еще вариант с секретом так но это в общем они могут быть вместе и по отдельности вот
а с секретом означает что если знать секрет то тогда обратить легко да то есть тут получается
вот так вот трудно без секрета а если знать секрет вот тогда легко
вот и вот это вот перестану функции там или перестановка с секретом это то что обязательно
нужно для криптографии с открытым ключом то есть это же можно сформировать как теорема
теорему да что для криптография с открытым ключом нужны односторонние функции с секретом
с кроней функции с секретом
так
вот на самом деле получается как бы несколько несколько градаций несколько
градаций разный гипотез да значит может быть может быть вообще что п равно np
может быть они не равны там но равны в среднем вот может быть есть односторонние функции но
не перестановки могут быть там не перестановки но не с секретом вот и вот для разного рода задач
нужны разные предположения вот так ну дайте еще немножко расскажу какие тут еще бывают примитивы
но бывает примитив который мы немножко в прошлый раз обсуждали значит это генератор
сердца случайных чисел значит идея в том что тут есть я вот так нарисую на есть как бы маленький
вот а есть большой g от x и соответственно вот это легко вычисляется дальше заполинальное
время значит причем и к случайной а еще есть y который тоже случайный и получается что вот
этот g от x он не будет случайно равномерный потому что ну тут всего точек как бы значений
возможных столько же сколько вы видели возможных значений то есть совсем не все которые тут есть а
тут все значит но тем не менее вот это вот да значит если отличитель
отличитель получает g от x и y то отличить он не сможет не не сможет отличить
но смотрите что значит не сможет отличить он получает какой-то вот какой-то элемент
а вот вот это множество вот это одинаковая но у них разные распределения значит здесь
это образ g от x здесь это произвольный y и он получает какое-то значит как какое-то
какое-то слово и должен сказать как он думает это слово вот отсюда пришло или вот отсюда
и нужно чтобы это не не не получилось сколько сколько-нибудь надежно делать да то есть
реально он будет говорить что пришло что пришлось генератора примерно в одном проценте случаев и
когда она на самом деле пришло из генератора когда на самом деле она случайная смотрите ну
например если там у генератора значение генератора всегда первый бит 0 тогда отличитель может
что если 1 бит 0, тогда есть генератор, а если 1 бит 1,
то тогда случайно.
Тогда здесь он будет всегда говорить, да,
здесь будет всегда говорить, что есть генератор,
а здесь только в половине случаев.
Но вот это вот отличение.
Это будет плохой генераторе, если у него всегда 1 бит 0.
Значит, или он может, не знаю там, если
доля, скажем, доля единиц близка к 1 и 2,
говорить, что ее случайная, а если далека, то
говорить, что есть генератор.
Если у генератора не соблюдается частотный закон,
тогда это будет плохой генератор, это отличительство
сможет отличить.
Вот.
Ну и вот, соответственно, нужно, чтобы никакой
отличитель отличить не смог.
Вот так.
Что бывает еще?
Бывает хэш-функция.
Хэш-функция.
Значит, тут как бы ситуация обратная,
с точки зрения размера кружков.
Значит, тут есть какой-то большой х
и какой-то маленький аж от х.
Вот.
Но нужно, чтобы было трудно.
Да, нужно опять, чтобы было легко посчитать.
А трудно найти коллизию.
Значит, трудно найти различные х штрих.
Трудно найти.
Различные х и х штрих.
Значит, такие, что
хэш от х сравняется хэш от х штрих.
Вот.
Ну и хэш-функция как раз очень активно
используется в самых разных областях.
Ну, например,
вот у меня еще осталась картинка с аутентификацией.
Значит, например,
некоторые, опять же, простые системы аутентификации
построены на хэш-функциях.
Что сервер хонит не пароль, а хэш от пароля.
И, соответственно, когда клиент вводит пароль,
то там на лету учисляется хэш и сравнивается
с тем, что хонит на сервере.
Значит, соответственно,
ну вот если вам сайт предлагает
как бы прислать пароль,
который у него хранится,
то это значит нехорошо.
Он хранит в явном виде пароль, и их можно украсть.
Вот.
А если он предлагает только
как бы сбросить пароль,
тогда это уже хороший,
относительно хороший сайт.
По крайней мере, он прямым текстом
пароль не хранит.
Вот.
Да, да, и тот ключевой момент.
Ключевая проблема, а где, собственно, его вычислять?
Значит, если на сервере,
то тогда перехватить можно.
А если на клиенте,
то какая гарантия, что он правильно вычислен?
Вот.
Но это как раз и причина,
в которой это не самый лучший подход.
Вот.
Ну вот.
В общем, это вот ряд примеров.
Дальше, как, в принципе,
об этом все можно рассуждать?
Может быть, несколько уровней.
Может быть, совсем такой
теоретический уровень,
что типа там теорема,
если есть односторонняя функция,
то есть надежный в таком-то смысле
протокол электронной подписи.
Значит, например.
Да, это нам совершенно не важно,
как именно выглядит односторонняя функция.
Вот.
Это такой самый абстрактный уровень,
то есть как, в принципе, что-то можно построить.
Дальше может быть уровень
как бы более конкретный,
который подразумевает
какие-то конкретные области математики,
которые используются при построении
вот этого всего.
То есть, например, могут говорить про
криптографию на основе
модулярной арифметики,
на основе электрических кривых
или на основе теории решеток.
Вот это три основных источника
примитива для криптографии.
Ну и тогда там может быть теория такая,
что, типа, если мы считаем, что
разложение на множители это сложная задача,
то тогда такой-то протокол
будет надежный в таком-то смысле.
Да, то есть это тоже теория,
где доказываются теория,
но уже про конкретные функции,
а не про какие угодно.
Вот.
Ну, значит, дальше могут быть
такие стандарты.
Стандарт может быть прописан,
что мы используем там ключ
такой-то длины
и используем там такую-то
хэш-функцию на основании всего.
Мы там строим такой-то протокол.
Вот.
И самый нижний уровень
это уже реализация стандартов,
то есть как конкретную программу написать,
чтобы она работала.
В общем, на всех
уровнях могут быть
какие-то интересные задачи.
Вот.
Да, что вам неинтересно,
содержательная и нетривиальная.
Нет для всех задач
есть теория на самом верхнем уровне.
То есть некоторые реализованы
только вот
максимум на втором уровне,
когда говорят,
что вот как Дифи Хелман,
что вот
придумали что-то такое,
как обмениваются ключами.
А как на основе произволенностной функции
обмениваться никто не знает.
Вот.
Ну еще у меня спрашивали о литературе.
Значит, что про
все это можно почитать.
Да, ну во-первых,
если кто из вас
пойдет на кафетную дисклетику математики,
то там я читаю целый курс.
В осеннем семестре,
на четвертом курсе
можно будет изучить
подробно.
Вот я там
какие-то тиремы доказываю.
Значит, есть конспект лекций
Верещагина.
Значит, ну, не знаю,
может я просто выложу текущий верс,
потому что он его постоянно обновляет.
Значит, Верещагин.
Вот, но это именно теоретический уровень.
Значит, Верещагин
лекции
по математической
криптографии.
Вот, а так есть много
разных конспектов.
Значит, есть
книга. Книги
тоже очень много. Значит, есть
например, кацелиндл.
Ну, что-то там
криптография. Не помню, как называется.
Значит, есть
Гальдвассер
Гальдвассер Белларе.
Есть двухтомник Галдрайха.
Галдрайх — это вот именно
по теории книга.
Если вам интересны теории, то
вполне можно Верещагина или Галдрайх
почитать.
Вот, Галдрайх так очень
крупулезно обо всем пишет, но немножко занудно.
Вот, есть
Ященко
Валерий Владимирович
с каким-то соавторами.
И там, кстати,
не помню тоже, как называется,
там есть
аннотированный список еще
разных других книжек.
То есть вы можете найти книжку Ященко
и там читать, какие еще бывают книжки.
Ну вот, наверное, хватит
с литературой.
Ну ладно, надеюсь, вам это понравилось.
Я вас это и заинтересовала.
Так что на сегодня все.
Спасибо за внимание.
