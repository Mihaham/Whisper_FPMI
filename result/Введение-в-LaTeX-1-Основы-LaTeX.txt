Рад всех приветствовать на первом занятии курса по теху. Чуть-чуть представлюсь. Зовут меня Даня,
я с четвертого курса по МАИ, тоже отсюда. Занимаюсь клубом теха уже, получается,
третий год. Это вторая итерация курса, в рамках которой мы хотим поправить всякие разные ошибки,
которые были в прошлом семестре. Ну и глобально наша цель такая, чтобы вы с нуля, даже если у вас нет
тихого уровня сейчас на входе, на выходе вы могли писать прям полноценную работу на техе,
там и для учебных целей, может быть и с нами как-то коллаборировать, если вам очень захочется. Ну,
в общем, постарайтесь как можно больше всего выбрать. И с техом возникает такая проблема часто,
что это в общем очень большое собрание технологий, которые запиханы все в одну систему, там много
пакетов, много людей вписало, в них бывает очень трудно разобраться с нуля самому. И скажем,
у меня была такая проблема в классе в 11-м, когда я только начинал всем заниматься и как-то
изучать. И вот надеюсь, что в рамках одного курса мы сможем осадить все так, чтобы у вас потом не
возникало вопросов и чтобы вы шли в Google уже с пониманием, что вам нужно, даже если вы туда идете.
Хорошо. Немножко про структуру курса, вообще какие конкретно будем вещи покрывать. Ну,
во-первых, то, ради чего мы все здесь в техе записывается всякая математика и хочется научиться
набирать формулы разности по несложности. Там довольно много разных приемов, будет несколько
уровней погружения, как мы будем в этом копаться. Но вот по отначанию, наверное, занятия третьего
с этим пунктом у нас точно будет все. Поговорим про управление оформлением документа. В этом,
наверное, фундаментальная преимущество тех, и перед там вордом или чем угодно еще, что он
позволяет буквально паре строчек кода изменить стиль всего документа. И в течение всей вашей
работы, когда вы что-то пишете, не задумываться о том, как это будет выглядеть, с пониманием,
что вы сможете это поменять очень малыми усилиями. И так, наверное, больше ничто не умеет. И об этом
мы поговорим, наверное, в следующем занятии. Поговорим про окружение и теоремы. Это техпсичная
вещь. Ну, наверное, когда вы читали какую-то литературу по математике, видели там блоки,
определение, номер такое-то, далее по тексту. Или там теорема такая-то, там такое-то. Это все
можно делать автоматически со своими наборами стиля для каждого такого блока текста именованного.
При этом мы будем много говорить на этом занятии и на следующем. И это, наверное, особенно важно в
контексте того, что если кто-то из вас хочет сделать какие-то конспекты, вот это прямо москав.
И хочется это пораньше осветить. Поговорим про всякие продвинутые штуки вроде создания своих
символов и команд. Да, так бывает, что тех умеет делать не все, что нужно нам, но он при этом дает
довольно гибкий инструментарий, которым можно пользоваться, если покопаться. Этым будет посвящено
следующее занятие и то, что чуть после него. Поговорим, как вставлять файлы, всякие картинки и
таблицы и управлять их с положением документа. Наверное, многие помнят боль в ворде, что происходит,
если двигаешь картинку, и там сразу летит все. И вот тех так не умеет. Ну, не умеет так сильно
все портить. И даже умеет настраивать так, чтобы не портилось вообще ничего и получался хороший
результат. Потом поговорим про водительские приложения, например, как делать всякую векторную
графику в техе. Это актуально для всякой геометрии, может быть физики и постоянно используется в таких
областях. Потом поговорим, как делать презентации вроде той, которую вы сейчас видите, она тоже на
техе сделана. Это будет, наверное, пятое занятие. И поговорим про что-то, что потребуется, если вам
вдруг хочется писать какие-то свои книги, то нам потребуется большое содержание, список литературы,
библиография. И вот такие тонкости мы сходим уже под конец курса. Вот, план примерно такой.
Да, тут еще есть слова о том, что, ну, как вообще курс будет устроен. В прошлом севесторе мы пытались
делать какие-то домашки. Ну, то есть, не прямо домашки, я рекомендовал там что-то записывать и
мне отправлять, чтобы я почитал и мог на какие-то начеты указать. Это как-то спроса не нашло. В целом,
по понятным причинам, у вас, наверное, так хватает домашек, да. Но хочется отметить, что в техе не
разобраться без практики. Нужно прям дофига писать, особенно на первых парах, чтобы потом у вас не
возникало ступора, когда вам нужно набрать какую-то команду и вы забыли, как она пишется. И, в общем,
ходить в Google на каждой строчке это очень некомфортно. Хочется этот этап преодолеть. И вот этой целью
нужно много техать. И вот есть у вас такая опция на халяву получить какой-нибудь фидбэк, если вы
будете сейчас что-то записывать, вы там пишите, я готов с вами это обсуждать и указывать, где можно
что-то улучшить, чтобы вам просто потом было легче, если вы захотите этим дальше заниматься. Вот. Ну
и у нескольких часткурсов, к которым, видимо, вы все состоите, раз вы сюда пришли, там тоже можно
спрашивать вопросы, я стараюсь его мониторить и как-то отвечать. Ну, и, соответственно, сегодня,
после лекции, видимо, у кого-то остались вопросы, как поставить тех и вообще начинать им что-то
делать. Вот, надеюсь, что мы сегодня после занятий все это дело покроем. Еще один вступительный слайд.
Еще один вступительный слайд о том, ну, к чему вообще преимущество теха. Тут перед вордом сказано,
но понятно, что это будет верно более-менее для любой системы, в которой можно писать какие-то
конспекты или какую-то литературу. Даже рукописные записи, наверное, ну, такая же закоммерция будет
выполняться. Ну, идея в том, что в техе есть некий порог вхождения, вот это вот первый пик,
на котором сильно выше, чем график ворда. Но чем более сложная задача вам нужно решить,
тем больше для этого подходит тех и тем меньше дополнительных усилий приходится для этого прилагать.
И вот, наверное, точка пересечения — это какие-то там документики в пару страниц,
вот после которых точно тех это ваш друг, и вы наверняка в этом в ходе учебы убедитесь.
Мантизовская часть закончилась, теперь давайте говорить уже по технические вещи. Правда ли,
что у многих здесь уже стоит прям среда разработки, вы готовы прямо сейчас что-то записывать?
Я рассчитывал на оверлип, но... Я когда записывал, я не понимаю, как тут сделать все. Я поставил
вайс-код, поставил мики-тех и все. Я писала текстутию и все. Я тоже. Ага. Хорошо,
тогда, видимо, интерактивную часть мы оставим на следующие разы. Сейчас, если у кого-то уже
получается, это здорово. У кого не получается, поговорим после занятия, но просто будут какие-то
примеры кода, которые хочется убедиться, что у вас тоже будут запускаться. Ну, в целом,
приятно создавать, что у вас запускается что-то, что показывается на презентации,
но при необходимости я буду писать просто у себя и показывать, как это выглядит. Думаю,
с этим проблемы не будет. Кстати, у меня тоже, да, вайс-код с миктехом, и в этом плане те,
кто поставили, вам будет немножко полегче, потому что проблемы у нас будут, скорее всего, одинаковые,
будем одновременно решать. Здорово. Самые основы. Вот как выглядит буквально Hello World на техе.
Вот такой набор кода. Есть пока загадочная для нас строчка document class, в котором какие-то
параметры, о которых пока предлагаю не задумываться, но вот они есть. Для тех характерно,
что в нем довольно много разных строчек, которые ты раз в жизни пишешь, а потом копируешь из
документов документ, особо не задумываясь. Вот это одна из таких, мы и попозже расшифруем,
но мораль примерно в том, что мы задаем как бы формат всего документа. Ну, бумага А4 понятно,
размер шеста понятно. Что такое article? Ну, об этом попозже. Это один из разных как бы классов
документа, которые влияют немножко на форматирование, немножко на набор заголовков,
но вот на тонкости, о которых мы пока не хотим задумываться. Ну и сам документ. В этом... Как
запустить компиляцию? У вас наверняка у многих редактор есть какая-нибудь или вот зеленый значок
play, как у меня, или что-то в таком духе, или какая-нибудь там, ну скажем, тут у вас есть в менюшке
там build и можно нажать на кнопку build. От редактора, конечно, зависит, нет общего рецепта, но...
Оставил ли ты расширение для теха в VS Code? Ну, вот если пройти в расширение VS Code вот сюда,
в extensions и ввести LaTeX, то вот... Ну, значит, с такой проблем мы тоже разберемся попозже. Она тут
должна быть. Ну, он... VS Code должен догадываться, что вы открыли прям теховый файл и делать и
по ссылке синтаксиса, и всякие там техспецифичные штучки типа того же play показывать. Если этого нет,
то это что-то странное, но мы с этим разберемся попозже. Ну, давайте я тоже тут напишу. Примерно
то же самое, что было в презентации. Будет, наверное, наглядно. Я в целом тоже иногда забываю,
как конкретно пишутся команды. Это как бы не порок. Ну и да. Давайте я немножко договорю,
закончу мысль, а потом продолжим обсуждение. Текстура документов в техе похожа глобально
на что-то, что, возможно, видели в ht-мейле. Что вот есть некие блоки, которые в ht-мейле называются
тегами. И вот в рамках блоков пишется какой-то контент, и по правилам всего блока он как-то
обрабатывается. Блок, который нам типично будет нужен всегда, это document. Просто все содержимое
документа пишется в нем. Ну, чтобы открыть блок, нужно сделать begin, фигурные скобки и название
среды. Дальше включится document. Ну и вот он сам за меня дополнил. И внутри него мы начинаем писать
что-то, что потом попадет в наш pdf, который соберется в итогом компиляции. Сделаем. Наверное,
так должно быть хорошо. Да, не пугайтесь, у меня стоит темная тема на всем. То, что у вас документы
с белым фоном и черным текстом, это совершенно нормально. Вообще-то у меня тоже просто я прикрутил
к ВСКоду штучку, которая инвертирует цвета на превью документа. Ну, так как-то приятнее выглядит,
если мы как сейчас сидим в темноте, например. Давайте я сделаю приближение. Ну, кто бы мог подумать,
наш текст перенесся в pdfник и приобрел какой-то симпатичный шрифт, который был техостроенный.
Нет, техкостропов вообще не чувствителен, это не питон, но в целом так просто любое документное
сочетание, если каждый следующий блок, который вложен в предыдущий, будет на еще одну табуляцию
дальше. Более того, их может быть даже несколько, в том плане, что они схлопнутся. Для тех,
любое повторение нескольких пробелов, нескольких новых строк, они все эквалентны,
они склопываются в одну новую строку и один пробел. Мы об этом попозже поговорим, когда это будет
более уместно. Ну, хорошо, с Hello World мы справились. Хочется теперь разобраться,
как писать на русском языке, наверное. И хотелось бы верить, что буквально такое изменение в коде
решит нашу проблему. Если мы просто напишем «Привет, мир», то все сработает.
Но да, возникает ошибка. Говорят, что уникодные какие-то символы, если не умею работать,
это нормально. По умолчанию тех поддерживает, ну, в виде маски кодировку или в общем что-то такое,
довольно узкий класс символов. И чтобы писать, ну скажем, на русском языке или там использовать
еще какие-то символы, которых по умолчанию в тех и нет, нужно указать явно ту кодировку,
в которую вы пишете файл, и ту кодировку, в которую вы ожидаете полученную PDF-ку. Это
два разных параметра. Они указываются вот такой командой. Пока опять не очень важно,
почему это именно так пишется, почему мы пишем use package, почему порядок фигурных скобок и
квадратных скобок. Ну вот есть такая мантра, к которой можно воспользоваться.
Потому что позволение, я просто скопирую свой документ, чтобы не перепечатать.
Ну опять же, если у вас уже стоит что-то теховое, наверняка оно предлагает всякое
автодополнение текста. И в частности, видит, если вы начнете писать use, он наверно подскажет
package, вы как-то сэкономите набранные символы. Сейчас разберемся, сейчас все это прокомментирую.
Сначала давайте проверим, что это расчел нашу проблему, что документ скомпилируется,
и что-то получится. Это старая ошибка, она уже не верна. Ура, получили привет мир. Что произошло?
Большая часть всего, что происходит в техе, прикручивается всякими расширениями,
которые называются пакетами. Что мы сейчас сделали? Мы подключили три пакета с помощью
команды use package. Очень характерное название. И что они делают? Пакет Babel — это штука,
которая нужна для работы с разными языками. Там в него включены всякие правила, вроде
как правильно ставить отступы между предложениями и словами. Есть разные типографские правила в
разных языках, и в него это собрано. Как правильно переносить слова на новую строку, где ставить
дефисы. Вот это все имеет Babel. Ну, естественно, я явно указываю, что я буду писать на русском языке,
чтобы он нужные правила подгрузил и дальше ими пользовался. Разумеется, на больших документах
возникают переносы слов. Ну, потому что, наверное, мне может пригодиться также информация
английского языка тоже, если я буду что-то на нем писать. Думаю, что от порядка ничего не зависит,
но если я оставлю только Russian, то, скорее всего, у меня пропадут правила английского языка и не
хочется так делать. Вот. Далее. Второй пакет фонд-энк. Это буквально фонд-энкодинг. Это
какая кодировка будет у текста, который получится на выходе в PDF. Чтобы эта кодировка не была не
очень важна, все время можно ее использовать. Я сам не очень в этом силен, но, видимо, это что-то
около юни-кода. Боюсь обмануть. Ну, а что происходит ниже? Это input-eng. Это кодировка входного
документа. Это какие символы вы используете, собственно, в теховом файле, который потом компьютеру
нужно будет как-то обработать. Вот. Та жалоба, которую мы видели на моем экране, что вот какие-то
юни-кодные символы, с ними не умею работать, она решалась именно что пакетом input-eng. Но если
включить только его, были бы другие проблемы. Нужно купить сразу все три. Ну и, в общем, мы явно
указали, что мы работаем с юни-кодом, и те должны быть к этому готов. Вот. Наверное, пока все понятно.
Хорошо. Стоит оставить также такой комментарий. Вообще говоря, то, что мы писали, вот, здесь вот
перед началом самого документа называется преамбулой. Вернусь обратно на слайд. Когда документ
становится большим, скажем, это какой-то там к аспект курса, то и то же самое. Там возникает куча
разных пакетов, но ваших кастомных обозначений. Мы поговорим о том, как все создается. В общем,
эта штука возрастается строг до 100 до 150, и становится ее как-то неуместно хранить в том же файле,
что и ваш основной текст. И хочется это как-то декомпозировать на файлы поменьше. И вот рекомендуется
для этого использовать команду input. Сейчас я покажу, как она действует. Мы подробно поговорим,
как декомпозировать большие проекты на файлы поменьше. Ну, попозже. Пока что просто вот то,
что касается преамбула. Почти всегда вы хотите, чтобы ваш документ принял такой вид. Чтобы все,
что до Begin Document было собрано в отдельный файл, который можно так и назвать преамбула. А чтобы
использовать тот код, который вы там написали в вашем основном файле, вы используете команду input.
И он прям видит нужный файлик. Можно с расширением точки тех, можно без него. Он догадается,
что других файлов у него нет в качестве кандидатов. И ничего не изменится. Ну,
собственно, этого мы и ожидали. Что произошло? Команда input, она буквально берет код из файла,
который вы указали в качестве параметра, и вставляет его сюда. И работает уже с тем,
что получилось. Ну, примерно как Define в C. Просто берут и подставляют код еще до стадии компиляции.
А что он говорит? Хорошо. Я могу утверждать, что я буквально в прошлой интервью этого курса
показывал на TechStudio, как это все устроено. И у меня все работало в таком же виде. Попробуйте
написать там тоже UTF-8. Это может, наверное, помочь. Если не поможет, будем разбираться тоже после
занятия. Еще вариант. Вы к TechStudio прикрутили, скажем, какую-то маленькую версию самого
дистрибутива теха. Вы как с линукса сидите? И вы настроили TechLife Base, правильно? Вот я подозреваю,
что в TechLife Base просто нет этих кодировок, и нужно их поставить отдельно. Вот. Ну, я думаю,
это гуглится. Должно быть несложно. Кстати, попозже разберемся. Пока можете или попробовать
написать UTF-8. И если поможет, то слава богу. А если нет, то, ну, значит, просто попишите на
английском в чине этого занятия. У нас не будет много русского текста. По крайней мере не будет
ничего, что критично требовало именно русский текст. В качестве примера от английского хуже не
станет. Хорошо. Здесь примерно то же самое, что я и сказал, что вот действительно преамблу рекомендуется
выделять в отдельный файл, и что мы впоследствии еще разберемся более подробно, как это устроено,
какие еще какие-то другие методы вставления кода из разных источников в одно место есть.
Честно, это не очень важно. Ну и хочется приступить к тому, собственно, что мы собираемся
больше времени делать, писать какие-то формулы, какую-то математику. И вот в техе есть два режима,
как это устроено. Есть два класса формул. Под формулой я здесь и далее буду понимать специальное
математическое окружение, в котором есть несколько другие правила, не как в обычном языке. Свои
команды, которых не было в обычном языке, и которые будут выкидывать ошибку, если потом применить вне
формулы свое начертание и слов и цифр. И вот есть два основных класса формул. Формул внутрисрочная,
которые заворачиваются в единичный доллар. Ну то есть среда формулы внутрисрочной помечается,
как все, что внутри денежных долларов, как на слайде. И давайте тоже в качестве примера
я напишу какую-нибудь формулу. Это должно сработать. Да, все так. В техе более-менее все
ограничители двусторонние. Все, что внутри долларов находится, будет считаться формулой.
Сейчас я немножко разберусь с зумаутом. Да, ура. Произвелся текст, который я ожидал. И как мы можем
видеть уже сейчас, текст, который написан обычным, и текст, который написан внутри окружение
формулы, отличается даже по начертанию. Ну появляется курсив. Отличия довольно много,
мы их еще увидим. Но вот первое, которое образуется в глаза, оно такое. Да, разумеется,
можно указывать буквально там для каждого символа, каким шрифтом он будет написан. Мы
об этом попозже поговорим, но не сегодня, пока нам это не пригодится. Ну думаю тут вопросу
быть не должно, все очень прозрачно. И сразу упомяну второй режим написания формул. Это режим
кажется, он называется выключенные формулы, по-научному говоря. Ну в общем, это формулы,
которые располагаются по центру новой строки, там вдалеке от всего текста. Они заключаются в
квадратной скобке, но не простые, а и кронированные бэкслэшем. Почему так? Ну видимо так исторически
сложилось. Считается, что обычные квадратные скобки нужны, например, для того, чтобы указать
аргументы функций. Мы об этом опять же еще поговорим. Или буквально обозначать сами себя. Считается,
что видимо такой юзкий за них более предпочтительен, поэтому для формул решили
завести значение именно кронирования квадратных скобок. Эквивалентный этому подход — это писать
удвоенные доллары вместо одинарных. Тоже кажется естественным, как будто усиленное окружение
формулы в сравнении с одинарными долларами. Но вот если попытаться погуглить, в чем разница,
вы скорее всего увидите, что разницы почти нет. А во-вторых, увидите какие-нибудь комментарии на
форму 2010 года, почему лучше делать квадратные скобки, а не двойные доллары. Мы не будем
этим заморачиваться. В латехе много всяких исторических вещей, много всякого legacy контента.
Ну вот если вы будете использовать квадратные скобки, вы точно ничего не поломаете. Вот такая
рекомендация. Да, ну и давайте тоже напишу еще какую-то формулу.
Ой, клавиша залипла, всякое бывает. Я могу перейти на новую строку, могу этого не делать.
Это окружение само сообразит, что его нужно выделить в новую строчку, центрировать все такое. Но
просто чтобы код был читаемый, я сам сделаю один enter. Не, не, не. Две точки это не влияет, влияет
именно что вот эти вот скобочки. Да, backslash и квадратная скобка. Да, об этом, наверное, стоило
поговорить пораньше. Мы подробно будем говорить про всякие там поведения строк в следующий раз,
но для теха одинарный enter ничего не значит. Он его считается за пробел. Чтобы сделать переход
на новую строчку, ну типа символ slash and поставить, нужно сделать два enter. И что характерно,
как я уже упоминал, много enter хоть столько, эквалентно одному. Много новых строк от этого
не станет. Может в этом убедиться. Я тоже попробую скомплировать так. Да, как видим, он буквально
сделал один переход на новую строчку и забил на все остальные slash and, которые я проставил. Это
бывает удобно. Скажем, вам хочется ну просто визуально декомбозировать ваш текст на какие-то
смысловые блоки и вам хочется, чтобы они друг от друга сильно отстояли в вашем исходном коде,
там строчки на три, но вам не хочется, чтобы это также оказывало влияние на ваш документ.
Возможно мотивация за этим такая, возможно другая, тут я не могу сказать, но во всяком случае
оно работает вот так. И мы можем убедиться, что действительно наша формула в квадратных скобках,
она оказалась на, во-первых, поскольку я тут замына делаю, не очень понятно, но если я покажу
весь документ целиком, то вот она по центру строки, она на новой строке и в общем так рекомендуется
выделять что-то, что довольно большого размера и требуется тебе какого-то особого внимания. Мы
еще поговорим, какие есть разные способы как-то вынести что-то важное на новую строчку и как
спровести к этому внимание. Поговорим о том, какие есть различия стилевые, между тем, что
происходит вот формуля второго вида и первого вида различия есть, но первоочередно, что стоит
запомнить, что вот есть формулы внутри строки, это доллары, а есть формулы на новой строке, это
квадратные скобки. Да, я не упомянул, я уже сделал тут какой-то верхний индекс, двойку,
это делается Zergoflex, но это просто вперед забежал, про это, разумеется, еще будет сказано. Да,
наконец-то. Как набирать всякое разное в техе? Вам часто в математике прикажется всякие спецсимволы,
которых нет на клавиатуре, ну скажем там число p или там знак умножения крестиком или квадратный
корень или интеграл, в общем, что угодно. Понятно, что это все на клавиатуре нет и хочется это как-то
набирать быстрее, чем просто накликать руками к какому-нибудь там редакторе. Быстрее, чем накликать
руками, это примерно теховские команды. У них, как правило, вот такой интерфейс, как вы уже заметили
в техе много выражений вида бэкслэш, какое-то слово, все это называется командами, и вот то,
что происходит после написания команды в фигурных скобках, называется ее аргументом, а то,
что в квадратных скобках, это, в общем-то, тоже аргумент, но как бы опциональный, то есть он может
там быть, может не быть, его наличие просто как-то меняет поведение команды, но при этом тех не
поругается, если вы вообще ничего там не укажете. Типичный, например, квадратный корень, мы про него
еще поговорим. Ну и вот, чтобы просто показать сразу много возможностей теха, то есть я не
призываю вас сразу писать, типа, такие вещи и все понимать, что происходит, ну просто такая
иллюстрация, что вот типичное написание больших форм, оно выглядит вот так. Давайте просто буквально
по символу разберем, что происходит. Вот есть команда int, которая рисует интеграл, вот буквально
символ int перевелся в интеграл. У него есть верхний и нижний предел интегрирования, в данном случае
плюс-минус бесконечность. Верхние и нижние пределы, ну они же верхние и нижние просто индексы предыдущего
символа, делаются как что-то после нижнего прочерка и что-то после циркум флекса. Почему оно
в фигурных скобках? Вообще-то в техе у любой команды может на вход подаваться аргумент из одного
символа. В таком случае фигурные скобки можно опускать, можно просто писать command, ну там символ
a, ну через пробел. Если без пробела, там подумать, что такое название, удлинённое на день символ,
ну ничего не сработает. Вот тут, наверное, нужен какой-то пример. Например, хочется написать
квадратный корень из числа 2. Я делаю окружение под формулу и пишу команду sqrt, square root. И вот,
чтобы нам показать, что именно попадет под этот символ корня, мы пишем что-то в аргументе этой
команды. Вообще-то должны были бы написать фигурные скобки, а в них двойку, ну явно указав,
что вот двойка – это аргумент команды sqrt. Ну действительно, так оно и есть, оно сработало,
но при этом, если бы я эти скобки убрал, ничего бы не изменилось. Причем, поскольку двойка – это,
ну не символ латиницы, то можно даже пробел не ставить, он всё равно сообразит. Ну лучше всё
время ставить пробел, чтобы было немножко понятнее. Одна символиная штука, он по умолчанию считает
аргументами. Если, конечно, команда, которая этому предшествует, она вообще требует аргумента.
У sqrt там железно написано, что вот без аргументов он не работает. Если я его уберу, то оно либо не
скомпилится, либо получится какое-то неопределенное поведение, в общем, мы этого не хотим. Давайте
посмотрим, почему нет. Ну и мечта, конечно, не сработает. Да, он просто не сработал, он говорит,
вот мне нужен аргумент, пожалуйста, а ты мне его не предоставил. Да, он как бы предположил,
что дальше должен быть аргумент и попытался вставить сам фигурные скобки, и у него ничего не
получилось. Главное, чтобы поругался, мораль такая, и просто потому что нужно было что-то написать.
Но при этом мы видели, есть такая штука квадратные скобки, в них заворачиваются аргументы опциональные,
если, конечно, у команды они есть. У корня такой аргумент есть, он указывает корень, в какой степени
извлекается из доленнего текста. Кстати, просто проиллюстрировать. Во-первых, аргументы могут
быть многосимволными, скажем. Ну, много цифр я напишу в одни фигурные скобки, ну вот он их все
сочет с аргументом и все завернутся в один квадратный корень. Ожидаемое проведение. Ну так вот,
если я захочу извлечь корень в какой-то другой степени, то я сделаю аргумент опциональный в
квадратных скобках, ну, в степени 3, например. И оно сработало, он поместил тройку там, где вы
обычно видели ее в всякой литературе. Насколько мне известно, да. Можем попробовать, сработает ли иначе.
Что-то мне, конечно, не должно. Да, он, ну как бы, если он начал партить обязательные аргументы,
он посчитал, что после этого команда вообще кончилась, и дальше квадратные скобки уже имеют
свое обычное значение, значение просто скобок в тексте. Поэтому нужно было стоять в другом порядке,
как изначально и было. Хорошо, разобрались. Чтобы их использовать просто так, их нужно
экранировать. Возможно, здесь мы что-то какие-то другие языки программирования, что вот есть
спецсимволы, в которых есть какое-то значение в коде, но если хочется, чтобы его не было этого
значения, нужно из символа экранировать. Вот та же самая история здесь, экранированная скобка,
ну и такая, и другая. Я их, опять же, заворачиваю в доллары, потому что считается, что это ну какое-то
матокружение, типа там символ множества, например. Скорее всего, вне долларов оно не сработает. Вот.
Вернемся к формуле, которую пытались мы разобрать. Что-то о чем происходило. Да, верхние и нижние
индексы. Они делаются нижним прочерком и циркуфлексом. Они тоже являются своего рода командами, которые к
символу, который перед ними прорисовывает индекс или снизу, или сверху. И прорисовывает он именно
то, что является аргументом этой команды. В данном случае, аргумент для нижнего прочерка – это
минус бесконечности, ну то есть минус backslash infty. Infty – это просто команда, чтобы нарисовать
бесконечность в техе. А аргументом для циркуфлекса является плюс инфти. Ну и вот он их, собственно,
взял в качестве аргументов и поставил верхними и нижними пределами. Как мы бы и ожидали. Ну хорошо.
Дальше число E. Ничего удивительного, просто символ E ему и соответствует. И вот хочется его в какой-то
степени написать. Ну, например, вот как здесь в степени минус x квадрат пополам. Возникает новая
штука степень, ой, новая штука дробь x квадрат пополам. Это делается командой freq, а слово fraction.
У нее аргументов обязательных два. Все это – частитель и знаменатель. Он берет частитель и знаменатель,
ставит их друг на другом, рисует черту. Вот все сделает эта команда. В данном случае, частителем
является x квадрат, знаменателем – 2. Так он их совмещает.
А крышечка является не разделителем аргументов. Это самостоятельная команда
crcflex. Тут, наверное, нужно грамотно объяснить. В общем, что нижний прочерк, что crcflex, он же крышечка,
сами по себе команды, которые принимают ровно один аргумент. Это парсится однозначно следующим
образом. Вот нижний прочерк, значит, дальше должен быть аргумент нижний прочерк. Он его прочитал,
все, команда кончилась, зарисовал нижний индекс. Чисается новая команда, крышечка читает ее аргумент,
зарисовал верхний индекс. Вот. Это не разделитель, это самостоятельная вещь.
А вот если аргументов много, то да. Стоит еще раз повторить, аргументы пишутся подряд,
но в правильном порядке. Порядка аргументов, разумеется, важна.
Которая точечкой – это команда backslash c dot. Точка по центру. Еще есть команда times,
которая делает крестик. Вот. Оба они сейчас на экране.
Хорошо. Кажется, левую часть уравнения мы разобрали. В правой части, в общем-то,
то, что мы уже видели. Команда квадратного корня, у которой аргументом несколько символов,
в данном случае это 2P. Они все завернуты в фигурные скобки, отвечающие данной команде.
Ну и, может быть, стоит прокомментировать, да, как команда backslash p рисует число p.
Есть ли вопросы по-разному? Квадратные.
Не-не-не. Интеграл, в данном случае это, ну типа, эта команда отрисовывает ровно символ
интеграла и больше ничего. А не все выражение вида интеграл чего-то там,
D, D что-то там. Это просто команда, рисующая вот такой значок, и уже после которой можно ожидать,
что у него будут какие-то верхние-нижние индексы, которые тоже самостоятельные команды,
к нему отношения не имеющие. Интеграл на этом уже кончился. Вот.
То есть эти фигурные скобочки можно ставить просто, без всего, и они будут как…
Да. Хотя, наверное, стоит еще дать такой комментарий.
Вообще-то фигурные скобки можно просто использовать, чтобы заворачивать штуки в блоке.
То есть сами по себе они вообще никакой семантики не имеют. Они имеют семантику,
когда отделяют друг от друга аргументы какой-то команды, которые весят много символов сразу.
Вот как мы, скажем, видели до этого, что вот у команды SQRT длинный аргумент, несколько символов.
Чтобы подать ему на вход целиком все эти символы, их заворачивают в один блок фигурных скобок.
И уже потом подают на вход. Если бы их не было, то ожидаемый эффект, он воспринят
аргументом SQRT только двойку. А дальнейшая, ну, просто идет само по себе и уже не
обрабатывается командой SQRT. Фигурные скобки без бэкслэша, без всего, без экранирования – это
просто собиратели символов в блоке, в рапках теха. Кстати, мы это уже видели, скажем, в
begin, document, end, document. Те же самые фигурные скобки, внутри которых уже пишется какой-то
набор символов, означающих, скажем, идентификатор среды, которую мы открываем, в данном случае документа.
Тут, думаю, что все. Я сейчас не ожидаю, что вы это все запомнили и готовы воспроизвести.
Это просто иллюстрация, ну вот, типичная из записей в техе, если вы пишете какой-то матан.
Кстати, мы забыли DX в интеграле. В следующий год я обязательно эту презентацию исправлю.
Да, теперь мы постараемся закрепить то, что происходило, и как это структурировать.
Вот про индексацию. Как я уже говорил, есть нижний прочерк, нижний индекс, есть циркумфлекс,
верхний индекс. Можно использовать только нижний прочерк, только нижний индекс.
Можно использовать только циркумфлекс, только верхний индекс. Можно их оба, можно в любом порядке,
в порядке, сначала верхний, потом нижний, можно наоборот,
можно делать много символов, он прямо тебе, пожалуйста,
double subscript, я так не умею, типа, попытка два раза
написать нижний индекс, ошибка. Если тебе захочется,
чтобы у тебя была, скажем, подпоследовательность
в xn, там, скажем, xnkt и тебе хочется, чтобы у тебя был
нижний индекс k, у числа n, делается это, да, и вам
нужно выделить вот этот nkt в качестве одного большого
аргумента, то есть x, нижний прочерк, далее большой
аргумент, чтобы в его нижнем индексе, а будет там nkt,
и его же внутри этих скобочек заново можно применять нижний
прочерк, потому что здесь он уже имеет значение, какой
будет нижний индекс у n. В принципе, это можно делать
неограниченно вниз, там будет лезинга вырастать, но
это не очень симпатично, лучше так не делать, лучше
стараться искать обходные пути.
— А, вопрос у нас. — Да.
— А как в subscript закинуть все русские символы? Оно
типа на русские символы рукает. — Да, с русскими символами
проблема, мы про них попозже поговорим. Если хочется
прямо сейчас это сделать, есть такая штучка — команда
текст. Она говорит, что вот то, что дальше, это не
формульные, а просто буквально текст, любой набор символов,
хоть русских, хоть английских, хоть знаки припинания. Вообще
я по поводу ее случайным образом. Да ну, не сработало.
Русская, может быть. А, я понял. Нам потребует еще
один пакет. Почему я ошибся? Потому что у меня тоже в
типичной работе есть прямвол на 100 строк, в который все
уже прописано, и которым нужно еще заново писать.
Есть какой-то пакет, который подключает русские символы
во всякую математику, но это прям экзотика, это практически
никогда не нужно, и сейчас я по этому сходу его названия
не помню, к сожалению. О, круто. Давайте попробуем.
Почему нет? Вот было сказано, что есть такой пакет math.txt.
Вот так, что ли? Как будто он его не обнаруживал, в плане
не пытался подсказать. А, math.txt. Сейчас посмотрим.
Ну, возможно, это оно. Ну, это уже какое-то рукомахание.
Нет, это все-таки не оно. В общем, этим вопросом я займусь
попозже и отвечу. Сейчас я дать ответ не готов.
Хорошо, давайте попробуем хотя бы без кириллицы. Это
отдельная проблема. Ага, как будто проблема даже не
в ней. Он не узнал даже команду текст. Проблема была даже
не в этом, а в том, что сама команда текст приезжает
с каким-то пакетом. Скорее всего, с каким-то из пакетов
от АМС, Американского Привидического Общества. Эти пакеты мы подключим
уже сегодня в конце занятия. Попробуй текст БФ.
Текст БФ – это просто ширина шрифта. Три скобочек.
Ничего, давайте не будем сейчас кладывать лишнего,
сделаем. В общем, да, проблема с русским языком есть. Она
решается. Мы ее попозже решим. Давайте, пожалуйста, потише.
Трудно говорить. Ну, вроде как с индексацией понятно.
Мы ее, как могли, осветили. Следующие – это всякие греческие
буквы. Как они пишутся буквально текстом. Берется
команда, ну, то есть, что-то, начинающееся с бакслеша,
и дальше выражение, обозначающее данную греческую букву.
Там альфа, бета, гамма, ро, тета. Ну, парочку примеров
я тут накидал. Что характерно, скажем, команды фи и эпсилон
дают непривычные нам фи и эпсилон, а немножко другое
их начертание. Мы эту проблему чуть позже решим.
Стандартные по умолчанию пишутся командами вар-фи,
вар-эпсилон, ну, то есть, типа, вариант написания.
Первые три символа еще добавляются. Мы потом это
исправим, но попозже. Кстати, такой вопрос на засыпку
я в прошлый раз задавал в прошлом году. А почему не
сработает команда альфа заглавной буквы, если я
ее напишу? Ну да, потому что это буквально заглавная
буква А из латиницы. Было бы странно, если бы под нее
еще была какая-то команда. Сэкономили это название,
его потом можно самим использовать под другие нужды.
Просто? Ну не знаю, если в виде греческих алфавит,
ну, часто там в классах школьных по физике висят греческие
алфавиты, там, да, обычно рисуют. Ну и есть вот кванторы,
вы все уже видели кванторы. Квантор общности, ну, который
переводит это команда for all для всех. Квантор существования
это команда exists. Тоже комментарии думаю излишне. Да, сама презентажка
я ее скину, она у вас будет, можете не переживать. Это
не пропадет. Немножко про дроби. У нас уже были дроби
в рамках одного примерчика их сотрат пополам. Вот,
Да, есть такая команда frac, которая означает fraction, чтобы
рисовать дроби. У нее два аргумента, 4 знаменатель.
Что можно тут пронаблюдать? Вот, есть честная дробь,
одна вторая. Буквально аргумент в скобках фигурных 1, потом
скобках фигурных 2. И вот он берет 1, 2, друг на другом,
нижняя черта, все как полагается. То же самое можно сделать
без фигурных скобок, поскольку аргументы односимпольные.
Пример прямо дальше. Вот такое выражение, frac и просто
пробил 3, 4, он его правильно распарсит. Что вот есть команда,
у которой два обязательных аргумента, и он датчик будет
искать по тексту. Ну, значит, берет следующие два символа
и в качестве аргументов использует 3, 4.
Можно было бы использовать фигурицу только в одном
месте. Скажем, это завернуть, а это не завернуть. Это тоже
бы сработало. Но зависит от тех, это просто эквивалентная
вещь. Блок из одного символа, это точно то же самое, что
один символ. Ну, и дроби могут быть вложенными. Вот
есть дроби, звук дробей друг на другом. Это совершенно
нормально. Это так же, как мы видели с этими нижними
индексами. Что вот есть xnk, t и в рамках одного, в рамках
нового блока, который уже является аргументом одной
команды нижнего индекса. Можно писать снова нижний
индекс. Тут то же самое с дробями, проблемы никакой
нет. Больше тут, кажется, ничего нового не появилось.
Мы рады, что символ обнажения, но его уже выспрашивали.
Вот он снова встретился, это c.dot, он призвоит точечку.
Есть куча разных бинарных операций, которые полезно
уметь рисовать. Вот эту парочку я перечислил. Вот есть
еще обнажение хрестиком. Есть ge greater or equal, больше
или равно. Меньше или равно le, less or equal. Да, есть еще
там dexland, lexland. Это более симпатичный вариант на
чертание, который характерен для русского языка. Мы при
этом поговорим в следующий раз, пока можно об этом
не заморачиваться. Ну и всякие другие символы.
Есть conco, слово congruent, есть sima, слово similar, есть
o plus, ну типа плюс в кружочке. Там нужен для прямой суммы,
тезерная сумма, все такое. Ну вот просто какой-то
набор команд, вот они есть. Вообще, команд очень много
в техе, надо к этому привыкнуть. Если вы хотите что-то нарисовать,
скорее, ну не нарисовать, произвести какой-то символ
из математики, скорее всего он существует в техе,
нужно погуглить, наверняка нужная команда найдется.
Есть что-то еще такое сайте, Detoxify. Блин, интернета нет.
В общем, есть такой сайт Detoxify, я скил на него ссылочку
в чат, в котором можно прям рисовать мышкой символ
и он попытается найти что-то наиболее похожее из теха,
что такой символ производит. Вот. Это бывает полезно.
А мы двигаемся чуть-чуть дальше. Следующий уровень
написания формул это использование операторов. Под операторами
в техе понимаются некие команды из математики,
которые пишут какой-то текст специальным шрифтом
и принимают в ход один аргумент. Ну вот, например,
всем вам точно уже известны операторы синуса, косинуса,
логарифма. Это все специально написано на английском
языке, которое потом принимает какой-то аргумент.
И вот есть некие правила начертания этих операторов.
Вот давайте сравним три записи. Есть просто написанная
в латиницей sin и x. Есть, не важно сейчас, что это значит,
есть некая команда masterm, которая присваивает синусу
специальный шрифт, а потом дорисовывает x. А есть прям
оператор синуса. Почему оператор? Потому что это команда.
Начинается с bx-l. Вот. Оператор это тоже команда. Есть прямо
оператор синуса, который принимает на ход аргумент
x. Все три результата, как видим, разные. И, как видим,
их симпатичность возрастает слева-направо. Писать
ни первый, ни второй варианта не рекомендуется вообще,
потому что если у вас есть какой-то оператор в тексте
и вы его не используете, значит, вы делаете что-то неправильно.
Ну согласитесь, в первом случае вообще сильно сливается
с x, ну потому что буквально они пишут один и тот же шрифт,
а это довольно странно. В втором случае нет пробела,
тоже как-то восприятие мешает. Кажется, что... Ну, не, шрифт
как раз-таки во втором зрителе случаи одинаковый. Они отличаются
именно что пробелом.
А обмах, этом ermy мы не сможем как-то пропилочевывать?
Сможем, но это такой костыль и непонятно, зачем таки
веселее предлагать, если можно делать просто вот буквально
sin x. Вот. Бывает такое, что операторы, которые вам нужны,
их нет в техе, можно делать свои. Скажем, в алгебре это
будет постоянно нужно, там возникают штуки типа размерности,
ранги и куча разных обозначений такого операторного вида,
и теха знает не все. Их легко вводить самому, мы это научимся
в следующий раз. Сейчас не будем грузиться.
Скопки. У нас такого еще, кажется, не встречалось.
В общем, помимо того, что в техе есть скопки, кто бы мог
подумать, скопки можно модифицировать в точки зрения их
размера. Тут куча примеров таки дана. Есть модификаторы
размера, это буквально тоже команды, у которых на вход
принимается один аргумент. И они тут все эти аргументы
односимвольные, поэтому я их еще в скопку не заворачиваю.
Просто пишу там какой-то модификатор и скопка.
Есть big, есть big-zoom-hg, есть left, и его парная команда right.
Да и вроде бы все. Что такое команды big разного вида?
Кажется, есть что-то big за главные буквы, тоже какой-то
свой эффект имеют, они на какой-то фиксированный
процент масштабируют символ. Не очень удобно. А вот
что удобно, так это парная команда left-right со скобочками.
Она смотрит на содержимое между этими скобочками и
выбирает оптимальный размер, чтобы это выглядело красиво.
Скажем, мы видим дробь P пополам, она довольно большая,
больше обычного текста. И поэтому скобочку нужно
явно растягивать. Насколько именно, нам как-то не хочется
считать. Вот эти два явно не залет. Обычная скобка
и скобка с модификатором big. А скобка с модификатором
big-zoom-hg уже слишком большая. А вот если хочется прям
оптимальную, пишем left-right, и само все выберет и красиво
рисует. Это везде нужно. Для Visual Studio можно сделать
свои макросы, которые позволят не писать каждый раз left-right.
Вот давайте, раз уж мы затронули тему макросов, я немножечко
скажу. Или вам еще нужно посмотреть на этот набор
кода. Тут чего интересного не происходит, просто разные
скобки, разного вида, них заворачивает sweep пополам.
Да, sorry, не уточнил. Да, есть команды, но это просто
квадратные скобки. А вот округление вниз, это квадратные
скобки, только нижняя черточка есть. Это L floor, левая такая
скобка, R floor, правая такая скобка. Ну floor от слова
округления вниз по-английски буквально. Да, и такие тоже
есть, это только верхняя черточка, без нижней. Бывает
полезно, в всяком там укрытой ча, вот такие числовые вещи.
Вот. Чисто давайте гальтабнусь, тут правда ничего интересного
больше происходить не будет. Вот макросы хочется показать.
Мы про них подробно еще поговорим, но вот так, в качестве спойлера.
Если, конечно, смогу это быстро найти, но кажется, должен.
Ну-ка, это чисто Visual Studio штучка.
Да, в Tech Studio это тоже можно делать. Вот, блин, я здесь это быстро найду.
Shortcos, может быть.
А как шрифт увеличить в документе?
Имеешь в виду в документе, который производится после компиляции?
Для этого проходим в преамбулу, и мы тут указывали 12 пунктов
размер шрифта, можно другой, там 14-16. Если не работает,
смотрите, не все размеры шрифтов поддерживаются по умолчанию
По анатекам можно погуглить, какие именно умолчания есть,
по-моему, 10, 12 и еще какой-то. Чтобы поддерживать нестандартные,
нужно подключить какой-то пакет, по-моему, X-Sizes.
Мы про него еще поговорим, но в следующий раз.
А в чем разница с Larch?
Ну, Larch и Bot.
А, смотри, это модификатор на чертание, про него тоже будем
говорить потом, очень много спойлеров. Он модифицирует только
конкретную строчку и конкретный блок. А если хочется сразу
в общем документы поменять, то тогда уже нужны такие вещи.
Да, к сожалению, сейчас еще макросов найти не могу.
В общем, у VSCode есть настройка, там можно сделать свой
JSON, которым прям набор макросов, и вот у меня стоит такая
настройка, что CTRL-SHIFT и девятка, то есть то, что с шифтом
дает просто левую скобочку, а вот CTRL-SHIFT-девятка дает
LEFT-скобочка и RIGHT-скобочка, и содержимое заворачивает
в них выделенное. Очень удобно. В 5 раз это покажу.
Sorry, немножко не подготовился.
Ну, видимо, когда про макросов будем говорить, там это и будет уместно.
Надеюсь, думаю, вопросов уже быть не должно.
Да, вот уже был вопрос про фигурные скобочки.
Можно ли их как-то нарисовать?
Была проблема в том, что это спецсимвол, мы ее решили тем,
что мы это экранировали. Это решается для всех таких штук.
В тех есть спецсимволы, которые хочется иногда рисовать,
тот же самый доллар или амперсант. Они свое значение имеют.
Кстати, к слову, какое? Ну вот доллар мы уже видели.
Это окружение формулы. Бэкслэш мы увидели.
Это вообще начало любой команды.
Да, вот бэкслэш. Нужно прям писать бэкслэш.
Развращается это с обычным бэкслэшом?
Ничем. Просто обычный бэкслэш зарезервированный под экранирование.
И поэтому, чтобы не было каких-то там не состыковок синтезиса,
решили сделать просто вот команду бэкслэш.
По-моему, эквивалентна ей еще команда сет минус.
Ну, то есть разность множеств.
Но это же тоже бэкслэш, по сути.
Потом скобки фигурные мы видели для чего.
Амперсант – это служебный символ, который нужен будет для рисования таблицы.
По таблице попозже поговорим.
Хэштег. Что-то я сходу подзабыл.
А, он указывает количество аргументов кословных команд.
Тоже пригодится потом.
Нижний прожиг мы видели. Почему он спецсимвол?
Потому что это спецсимвол нижнего индекса.
А процент – это комментарий в техе.
Все, что начинается с процента и далее считается комментарием и не компилируется.
Вот.
Но если нужен процент, мы его экранируем.
Это стоит запомнить.
Да, немножко форматирование текста.
Ну, во-первых, вы, наверное, часто видели во всяких там конспектах, что есть какие-то там главы, подглавы.
И хочется уметь это производить более-менее стимитизировано.
И можно, конечно, было бы сначала пойти разобраться, как устроены модификаторы начертания.
Ну, то есть, как сделать конкретный блок текста, скажем, жирным, большего шрифта и все такое.
И только этим пользоваться.
Это не очень удобно.
Есть специальные инструментарии, называются секцией, подсекцией, им подобные.
Есть еще под-под секции, sub-subsection.
Что они делают?
Эта команда применяет к тексту, который подан в качестве аргумента, нужный модификатор.
Ну, там делает его побольше.
Ну, знаете, как хедеры в HTML, там много разных хедеров.
И вот тут примерно такая же механика.
Но помимо того, что он применяет нужный модификатор начертания, он еще и собирает все такие штучки,
поданные на вход в разных секциях, в таблицу table of contents, содержание.
И потом мы сможем его отрисовать, и он нам отрисует, там, какая секция была на какой странице.
Мы это в следующий раз увидим.
И вот в частности по этому это полезно.
Еще один плюс у секций, sub-секций и прочего, стройная нумерация.
И чтобы, если вдруг не хотим нумерации, нам потребуется использовать команды section, sub-section и так далее, но со звездочкой.
В техе типично, что есть команда, а есть команда звездочка.
Здесь команда звездочка.
И они друг от друга отличаются каким-то минорным различиям поведения.
Делаем более-менее одно и то же.
В случае секций и прочего, звездочка говорит, вот, не нумеровать.
Давайте посмотрим на примере.
Я буквально скопирую этот текст, с ваших позволения.
Какой дотс?
Дотс? Ой, не уточнил. Дотс это буквально многоточие.
Ну, три точки.
Просто я, типа, сымитировать какой-то текст, мне было для него писать, я написал просто дотс.
И стоит отметить, тут встретились комментарии,
потому что мне хотелось как-то прокомментировать каждый из эффектов по отдельности.
Ну, эффект примерно следующий.
Команда section сделала мой раздел, прям большой шрифт, и дала ему номер один.
Считается, что секция, по крайней мере, в рамках класса документов article, в котором мы находимся,
мы пока не будем других находиться, и, наверное, вообще не будем других находиться.
Это самый удобный.
Здесь это главный элемент номерации, они просто по порядку идут.
Первый, второй, третий.
Подразделы номируются так.
Берется номер текущего раздела, и в рамках него номерация запускается с нуля.
Ну, с единицей, извиняюсь.
Вот такой эффект имеем.
Сейчас вопросик.
Да.
У меня сама section со звездочкой, а с obsession внутри без звездочки.
Он подтянет ближайшую сверху секцию, которая была номерованной.
Если их не было, будет нулевая вообще.
Т.е. типа 0.1?
Да, все так.
Хочешь, проверим?
Да, видишь, 0.1, 0.2.
Повтори просто вопрос.
Как это написать посередине страницы?
Есть модификатор начертания centering.
И есть штучка begin center, end center.
Ну, давайте, чтобы хоть что-то одно зафиксировалось.
Вот есть такая штука centering.
Что она делает?
Это модификатор начертания.
Он говорит все, что до конца блока, т.е. текущий фигурный скобок, пишется по центру.
Мы про них подробно еще поговорим.
Но тоже такой спойлер.
Такой вопрос возник.
Осторожнее, пожалуйста.
В общем, делается это вот так.
В плане, еще уровень ниже.
Делаешь sub-subsection.
Это тоже работает.
Если sub-sub-subsection, я не знаю.
Можно проверить, но что-то, мне кажется, вряд ли.
Как-то слишком глубоко.
Ну да.
Ну, т.е. это точно сработает.
Давайте скомпилирую, чтобы проверить.
Отлично.
А вот если я сделаю еще глубже?
Даже с тремя sub?
Да ну.
Да быть не может.
Ну нет.
Такого он уже не знает.
Ну и слава богу, на самом деле.
Если вам в документе потребовалась татуризация на 4 уровня,
это какой-то гигантский документ.
Не знаю, вы пишете книгу всего мира, может быть...
Цепные дроби.
Цепные дроби.
Для этого нужно как-то иначе это форматировать.
И точно это будут дроби, состоящие не из заголовков, а наверное...
Ну, в общем, как-то иначе они будут устроены.
А как делаешь, чтобы был не 1,1, а 2,1?
А, смотри.
Дело в том, что он подтягивает первое число в нумерации
как номер ближайшей сверху секции.
Если мы хотим в следующую секцию, мы делаем снова секшн.
И это уже будет вторая секция, и вот он уже будет за ней все нумеровать.
Все начиная с двойки.
А как можно сделать так, чтобы он не показал номер секции,
а однако же продолжал нумерацию?
Это уже более тонкие настройки нумерации.
Мы про них поговорим, когда будем говорить про счетчики, занятия через два.
Это не очень просто, но это возможно.
Сейчас я не готов на это отвечать, надо поговорить самому.
Могу позабыть.
Вот.
Но в целом это все очень гибкая система,
можно по-разному настраивать.
Можно сказать, чтобы была нумерация, скажем, не числами,
а типа латиницей, ABC, или римскими цифрами,
или как угодно еще.
Куча разных способов.
А можно начать ее, скажем, с десяти нумерации, а не с одного.
Это тоже мне очень трудно сделать.
И бывают необходимость так делать иногда.
Но мы при этом потом поговорим, не сейчас.
С этим, думаю, понятно, с этой частью, да?
Вот.
Модификатор начертания.
Как было обещано.
Да.
Как делать всякий там жирный шрифт, курсивный шрифт и все такое.
Есть команда TextBF, BoldFontBF, TextIt, Italic.
Первая команда принимает на вход один аргумент,
и все, что аргумент, делает жирным.
Вторая команда все, что аргумент, делает курсивным.
Результат видите на слайде.
При этом есть такая штука модификатора начертания.
BF Series and Shape.
Почему они именно такие обозначения выбраны, не очень понятно.
Лично для меня.
В общем, раз BF и там, и там.
Но вот эффект должен быть тот же самый, казалось бы.
Просто BF точно работает.
Просто BF.
Для меня это новость.
Но давайте, чтобы точно не поломаться, скажем, что вот такие модификаторы существуют.
Что такое модификатор начертания?
Модификатор начертания.
В отличие от команды, которая принимает аргумент, модифицирует аргумент.
Модификатор начертания модифицирует все, что находится в рамках данного блока.
Да, и просто BF, и просто It, оно все равно.
Круто.
Говорят, что в качестве модификатора можно писать не BF Series, а просто BF,
а вместо It Shape просто It.
Вот повторюсь, что делает модификатор.
Он все, что, начиная с его конца и заканчивая концом блока фигурной скобочкой,
применяет это вот к нему.
В данном случае вот здесь выделенное оказалось в блоке с двумя модификаторами,
и жирным, и курсивным.
Они оба к нему применились.
Понятно ли, что произошло?
Старого.
Мне, чисто идеологически, не очень нравятся модификаторы,
потому что у них какой-то непонятный синтексис.
Они модифицируют какой-то кусочек, начиная с себя, там, фигурной скобки,
я им никогда не пользуюсь.
Мне кажется, что команда почти всегда интуитивнее,
и почти все задачи они решают уж точно.
Единственное, что они не решают, это размер шрифта.
А, в этом плане.
Мы просто берем вот этот вот текстит с текстом и заворачиваем.
Это все в качестве аргумента?
Так тоже можно.
Вложенные функции вполне поддерживаются.
То же, что касалось индексов, то же, что касалось дробей.
Все то же самое.
Думаю, тут должно быть понятно.
И давайте посмотрим, что еще мы заказали сегодня.
Во, модификаторы размера.
Для этого есть разные команды.
Есть команда Par, команда New Line.
Они немножко отличаются.
Я про них в следующий раз тоже поговорю.
Так можно, но все-таки лучше делать двойные Enter.
Так читай мне.
Я видел работы, в которых все переносы строк делаются командами.
Это ужасно трудно читать.
Вроде бы два бэкслэша тоже работают.
Два бэкслэша.
Там немножко другой эффект.
Там есть разница.
Я вот это все упомяну в следующий раз, но тоже надо подготовиться.
Я сам не всегда помню, какие там отличия есть, но нюансы технически возникают.
Хорошо.
Модификаторы размера.
Я, к сожалению, не знаю, и кажется, что вообще не существует
способа модифицировать размер командами.
Только модификаторами.
Просто команда Larch, как раз она работает, она модифицирует размер.
Да ну.
Ну, типа...
Ну да, команда Larch.
И потом эти вот.
Что-то мне кажется, что она там сработала просто так же, как модификатор.
В каком-то конкретном специалистическом кейсе.
Ну я типа вообще все документы последние два года писал с этой командой Larch.
Нет, ты просто писал ее, и дальше ничего не делал.
Я писал ее вместе с Begin-документ.
И весь документ...
А, смотри.
В том и дело, что ты буквально использовал этот модификатор, но на весь документ.
То есть блок просто никогда не кончился.
Он шел до конца документа и весь документ модифицировал.
Я именно типа сначала писал Slash и Larch, а потом уже открывал скобочки.
Это интересно.
Это стоит отучить.
Возможно, у тебя какой-то клевый компилятор, который умеет чуть больше.
Ну да, и BF.
То есть BF, например, команды он не находит, но если просто написать, то и работает.
Возможно, у тебя правда какой-то клевый компилятор, который чуть-чуть больше умеет, чем обычно тех.
Но по умолчанию, как я всегда видел этот мир, все размеры шрифтов это модификаторы.
В общем, делается это всякими командами виды Larch, Small.
Есть команды еще там Normal Size, Footnote Size, Script Size.
Они гуглятся.
Вам скорее всего они будут редко пригождаться, потому что...
Ну типа обычный шрифт он вроде как почти везде нужен.
А где он не нужен, такая-то эзотическая ситуация.
Но модификаторы есть, и им можно пользоваться.
Да, вам они пригождались бы, если бы у нас не было средств от секций, сапсекций и прочего для заголовков.
Но мы их уже умеем производить более удобно.
И тут они как-то оказывается не нужны.
Может, поэтому для них нет хорошего интерфейса, не знаю.
Есть модификаторы начертания шрифта.
Вот буквально меняющий шрифт.
К счастью, тут я прям могу гарантировать, есть и модификаторы, и команды.
Радиться, вы уже запомнили, да?
Команда действует на аргумент, модификатор на все, что до конца блока.
Вот.
Есть вот такие вот модификаторы и команды, вот такие результаты.
Есть RM.
Это такой шрифт с засечками.
Он обычный, но...
Для чего это полезно?
Скажем, по умолчанию в математике, ну вот, формулах,
текст курсивный, чтобы это исправить, там нужно применить какой-то модификатор.
Вот в частности вот такой сработает.
Ну, там потребуется уже не прям он, а его версия Math RM,
которая для математики нужна.
Небольшая разница, про это потом поговорим.
В общем, это обычный шрифт.
Есть шрифт SF вообще без засечек, без всего.
Тоже бывает нужен.
Тоже есть у него версия, которая работает в математике, Math SF.
Поговорим попозже.
Есть вот такой непонятный шрифт, с которым я ни разу не пользовался,
но вот он в документации был, я решил его указать.
Я не знаю, зачем он может быть нужен.
Как будто какой-то он моноширинный, что ли.
Да, ну типа так, моноширинные печатные машинки.
Да, вот, да.
Есть SC.
Решифровать не могу, но в общем, это такой капитальный шрифт,
который берет все строчные буквы,
заменяет их на маленькие заглавные.
Ну, уменьшенные заглавные.
Вот видите, такой эффект.
Это прикольно, наверное, так можно выделять какие-то определения.
Ну, там какие-то ключевые слова, которые вам хочется сделать заметными.
Ни разу так не делал, но почему бы нет?
Неплохо звучит.
Да.
Боюсь, что никак.
Комментарий, он тоже, если угодно, модификатор.
Он работает до конца,
только не блок, а до конца строки.
Если написать на следующей строке без этого.
Да, да, да.
Без переноса.
Правильная мысль.
Мы уже поняли, что перенос прям строки на новую строку,
это два энтера.
Поэтому сделать один энтер – это не проблема.
Подложь-то та же самая твоя строка.
И с учетом уже того комментария все будет хорошо.
Быстро.
Так.
Я уже упоминал такая штука как окружение.
В контексте есть beginDocument и endDocument.
Все, что внутри – это документ.
И вот именно это подается к компилятору на вход.
Окружение бывает разное, глобальное.
Суть в том, чтобы инкапсулировать
какие-то модификаторы стиля
для всего большого блока текста.
И чтобы это было наглядно,
чтобы это было наглядно
завернуть его все в какое-то отдельное,
в какую-то отдельную среду.
Environment.
В общем, не трудно как-то по этому поводу что-то сказать.
Так просто будет нагляднее.
Например, будет понятно.
Тут буквально то же самое, что я сказал, написано.
Хочется нам как-то инкапсулировать
такую функцию,
центрировать текст.
Весь большой блок текста, в котором много строк,
он весь шел по центру.
Есть такая штука – среда, центр.
Все, что внутри нее, будет по центру.
Давайте проверим.
Я не уверен...
Наверное, это сработает даже с секциями внутри.
Давайте попробуем прямо с ними.
Огонь.
Сентеринг уберем, чтобы нас не смущали.
Мы теперь пытаемся жить без них.
Ну и без всяких модификаторов.
Правильный подход.
Что мы делаем?
Мы говорим Begin,
какая-то среда, в нашем случае центр.
Он даже мне ее подсказывает
и за меня закончит, и EndCenter
поставит.
Все эти дириметры здесь парные.
Begin, End.
И вот я утверждаю, все, что скомпилируется,
будет по центру.
Да, действительно все сработало.
Вот такой вот окружение Center, оно очень полезное,
чтобы там всякие ваши
какие-нибудь картиночки, которые вы вставляете,
какие-нибудь таблички.
Вот такие вещи центрировать.
Удобнее всего делать это Begin, EndCenter.
Мы про это еще поговорим, когда будут картиночки и таблички.
Ну вот, такая штука.
Еще есть окружение FlashRight.
Ему симметричная FlashLeft.
Это окружение, отвечающее за
выравнивание по правому и по левому краю, соответственно.
Функциональность абсолютно такая же.
Внутри
выравниваются так, как мы написали.
Окружение тоже можно комбинировать.
В плане друг друга вкладывать,
можно сделать Begin.
Разве что вот эти два вряд ли хорошо
скомбинируются, потому что они делают противоречащие функции.
Одно выравнивает по центру, а другое вправо.
Скорее всего это сломается.
Но бывают разные окружения,
которые друг другу можно вкладывать
с разными целями, чтобы совместить их функции.
Если не, конечно, совместимы.
В данном случае просто не совместимы.
Расмеры вроде я сейчас выдал, типа, Huge.
То есть можно, типа, в центр
в положение в Huge какой-нибудь, чтобы
размер вымаривать.
В плане... В центр...
Что я пишу? Есть еще какие-то скобочки дополнительные?
Я вот пишу Begin,
у меня еще выдает какой-то Huge,
Large, Abstract, Ray.
Сейчас посмотрим. Прямо в Begin, да?
Да, вот Huge.
Не, мне не предлагает.
Что-то мне кажется, это неправда.
Не, у меня работает.
Удивительно. В общем, видимо, есть еще и окружения,
которые делают
весь текст внутри, скажем,
очень большого шрифта, который Huge.
Прикольно.
Ну, мне такого никогда не прикаждалось, потому что
я вообще модификаторами шрифта очень мало пользуюсь.
Но вот, видимо,
можно пользоваться, по крайней мере, с какими-то компиляторами уж точно.
Не могу говорить сразу за все.
Про окружение у нас еще будет
много разговоров, у них много разных функций есть полезных.
Наверное, сейчас будет
про теоремы, как такое самое яркое
применение.
То, что я уже много раз упоминал,
вот есть такая штука там
теорема.
В контексте теха это следующее значение
имеет.
Какой-то блок текста, хочется предварить
фразой, вида, теорема, номер
такой-то, и
теорема номер такой-то выделить жирным шрифтом,
но при этом не хочется каждый раз
заново писать теорема,
еще и номер такой-то, чтобы там была согласованная номерация,
следить. Это некоторые усилия,
ведь не хочется заниматься, поэтому
люди придумали окружение,
которое называется теоремой.
Пока что мы не заморачиваемся, почему это так пишется.
Пишется это вот так.
Я сразу в представлении скопирую то, что тут написано.
Это тоже,
как я упоминал,
код их числа такого, который вы раз в жизни
копируете в преамбулу, а потом все время пользуетесь.
Поэтому в целом не очень страшно, если вы сейчас
не очень вникнете.
Но идея, даже не буду
в преамбулы писать, поскольку, как
мы помним, input, он просто подставит то, что там-сюда,
то есть это будут эквивалентные записи.
Что я напишу это здесь, что в преамбуле,
это будут эквивалентные записи просто для наглядности.
Что происходит?
Мы подключаем пакет
ams.fm. Это пакет
американского физического общества
ams, который заключен теоремом.
Ну, fm.
Синтаксис объявления теорем такой.
Пишется команда theorem-style,
у нее есть некоторые встроенные аргументы,
по-моему plane, note и remark, что-то такое,
разные есть. Ну, для примера plane.
Можно погулять, какие есть еще.
Более того, можно делать свои, это тоже потом поговорим.
Есть стиль plane.
Что это за стиль? Он говорит, что
теорема номер такой, это пишется жирным
и только им, а то, что
после, обычный текст пишется просто обычным
средством без модификаций. Разные вариации
говорят, что пусть это что-то пишется курсивым,
а это не курсивым, это жирным, а это не жирным,
разные комбинации есть.
Plane довольно удобен.
И дальше объявляется некоторое
количество окружений,
которые немножко разные и имеют функциональность.
То есть, они будут
предварять текст каким-то
своим текстом, который вот здесь
теорема, а вот здесь лемма, но просто
текст будет немножко разный. И в рамках
отдельной
теорем и отдельной лемм будет своя
номерация. Теорема в рамках вся поддерживает
одну и ту же голосовную номерацию. Давайте проверим.
Все так.
Про это тоже надо обязательно сказать.
Давайте проверим, что это вообще работает.
Ну, какие есть теоремы,
которые можно быстро записать?
Это которая про
дефантовое приближение?
У нее много теорем.
Да, конечно.
Это
аргументы дополнительные, я про них
говорю, когда будем это подробно изучать.
Это основальные вещи, которые регулируют
номерацию. Давайте пока не будем. Это довольно
запарная тема.
Пока в первом приближении вот так.
Ну, ладно, давайте не будем придумывать сложные
теоремы. Напишу два плюс два. Это же тоже утверждение
верное, правильно? Его можно назвать теоремой.
Отлично.
Годится. Даже
только больше нуля. Если мы, конечно, не в поле
из одного элемента.
Огонь. Что произошло?
Он предварил наш текст,
который, кстати, формульный. Предварил словом
теорема, присвоил какой-то номер
и написал все
правильным форматом. Мы могли бы
изменить, продублировать.
Я утверждаю, что получится теоремы
два и теоремы три, которые говорят то же самое.
Ну, потому что мы текст не меняли.
Но вот номерация осталась согласованной.
При этом
у нас есть окружение лемма, которое делает немножко
другое. Попробуем написать его.
Скажем, вместо теоремы посередине
напишем лемма. Кстати,
вообще, тут у меня полетела эта
индентация. Хочется ее исправить.
Он ругается на русский букв внутри теоремы.
Внутри теоремы? Сейчас.
Написать, что если в поле
больше одного элемента.
Этого такого быть не должно.
Ты точно подключил пакет, который был
про кодировки?
Нет, а который input tank?
Да.
И он...
И все равно жалуются.
Это очень странно. Мы разбираемся
после занятия. Давайте посмотрим, что хотя бы это работает.
Ну, ожидаемый эффект.
Вместо теоремы написали лемма.
Нумерация у них своя.
Все же начинается съединиться.
А теорема была по счету третья, стала вторая.
Потому что теперь она по порядку
просто вторая.
Эту номерацию тоже можно управлять.
Мы про это потом поговорим.
Но это тоже такая запарная вещь.
В первом приближении, если вы хотите
прямо сейчас идти, хоть какие-то реакции ваши,
то вам этого в принципе хватит.
Сделать окружение, скажем, теорема, лемма,
определение, замечание,
всякие такие штуки.
И можно идти писать, и все это будет работать.
Другое дело, что вам, возможно,
не захочется их нумеровать.
Как нумерацию отключить?
Делаем вместо New Serum New Serum со звездочкой.
Сейчас разберемся.
Вот.
Звездочка в данном случае меняется
по действующим образом.
Она говорит, что вот теперь это окружение ненумерованное.
Теперь будет только текст.
Ну, как-то правильно оформатированный, скажем,
журналистом. И все.
Больше ничего.
Хорошо.
Не уверен.
Надо поэкспериментировать.
Кажется, что нет.
Кажется, это не правда.
Я бы на твоем месте сделал два отдельных окружения.
Одно нумерованное, скажем, Serum Numbered,
а другое ненумерованное,
уже без звездочки.
И пользовался ими по отдельности.
Вот.
Тоже можно поэкспериментировать, но тебе глобально,
скорее всего, в рамках одного документа это не потребуется.
В рамках одного документа у тебя будут, наверное,
согласованы. Или все нумерованные, и все ненумерованные.
Этим ты можешь вправлять.
Ну, типа, сейчас не было цели показать
все ваши теории.
Их довольно много, они довольно сложные.
Сейчас не будем.
Пока просто такой пример.
Вот так можно.
Ну, и вот последнее, что на сегодня
хочется сказать.
Ну, только предположение, что, возможно,
кто-то из вас вообще потом ходить не захочет,
и ему хочется прямо сейчас идти, хоть.
Вот, в принципе, это какое-то терминум мы уже получили.
Вот просто какие-то замечания,
что еще вам может пригодиться.
Что есть куча пакетов американского
фитнес-общества, они полезные,
ими стоит пользоваться.
Ну, то есть, если вы их подключите,
вам хуже не станет.
Но, зато, многие функции, о которых мы будем дальше говорить,
у вас точно сработают.
Скажем, вот про теоремы мы говорили, вот он тут тоже,
в частности, в этом списке есть.
Если бы мы его не подключили, теоремы, скорее всего, не работали.
Еще есть нюанс.
Есть разные терешки, разные дефисы.
И вот мне
часто режут глаза, когда я вижу неправильные
терешки, неправильные дефисы, стоит, наверное, прокомментировать.
Русской типографики
есть длинная
терешка, у которой
не очень большие пробелы
между нее и словами. Эта терешка
отделяющая подлежащие сказуемые.
В техе она пишется вот так.
Кавычка и три дефиса.
Есть просто длинная терешка.
Она просто длинная, там пробелы по обычным правилам.
Есть терешка поменьше,
средняя. Ее указывает
каждый человек промежутки.
Или когда у вас там теорема двух авторов,
типа теорема Хана Банаха,
вот Хана Банаха пишется через
терешку из двух дефисов.
Или такая.
Есть просто дефисы,
которые как они есть, так они и есть.
Но в математике обычно
дефис имеет немножко другое значение, там он преобразуется в минус.
Это еще одно очертание,
которое раньше не было. Давайте проверим,
что вот действительно
все терешки,
они какой-то разный эффект
имеют.
Ну, вот так.
Блин, как же так?
А, потому что я этот
до беги-документ. Соря.
Это моя ошибка.
Этого, может, я думаю, не нужно,
в качестве примера.
Да. Нет.
Вот тут чуть-чуть меньше
пробелы.
Да, это вообще мелочь,
и вы можете вообще никогда не париться,
и писать просто длинную терешку,
тремя дефисами, ради бога.
Но вообще-то по правилам русского языка
терешка, которая именно между прочими
сказуемым, пишется вот так.
Про матрицу поговорим потом,
это довольно сложно.
Ну, и вот еще комментарий,
что есть правильные многоточие,
не ставить три точки подряд,
есть правильные кавычки,
это не кавычки, которые прямые,
которые на клавиатуре,
а два знака меньше, два знака больше.
Они в техе коллапсируют в кавычке.
Кажется, на сегодня все.
Больше ничего не планировал.
Да, огонь. Ура. Спасибо.
