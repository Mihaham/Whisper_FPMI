Так что сейчас мы будем изучать новую технологию проталкивания потока. Раньше мы проталкивали
блокирующий поток. Что же там в телефоне такого интересного? Вот, но сегодня у нас будет новая
технология. То есть мы это будем называть технологией Голберга. То есть проталкивание
предпотока, проталкивание предпотока или технология Голберга. Вот так мы ее будем называть.
Ну, как вы поняли, мы уже в прошлый раз обсуждали, что есть такой американский математик Эндрю
Владислав Голбер. Ну вот он предлагает принципиально альтернативный подход. То есть
забыли о всяких этих блокирующих потоках. Сейчас нам эти блокирующие потоки не понадобятся от
слова вообще. Просто принципиально другая технология, которая тем не менее тоже дает
хорошие результаты. На нашем уровне в общем они принципиально отличаться и не будут. Итак,
в чем же она заключается? Она заключается в следующем. То есть мы будем толкать поток по
новым правилам. Что я имею в виду? Обычно, конечно, метод Форда Фолкерсона говорит нам о том,
что поток надо толкать следующим образом. Мы в остаточной сети находим путь тем или любым способом
и проталкиваем по нему поток. Концепция блокирующих потоков говорила, что давайте строить,
что будем тоже новое правило вводить, давайте построим, будем строить слоистую сеть и в этой
слоистой сети искать там тем или иным способом блокирующие потоки и проталкивать их. То есть
в принципе, пока у нас все было так, что каждый раз, когда у нас поток меняется, поток меняется,
потому что мы нашли путь и толкнули поток. В блокирующем потоке тоже так происходило.
Вот, понимаете, да? Вот, или не понимаете? Так, понятно, про что я говорю? Так, есть кто живой вообще?
Ну, там, правда, да. Мы искали несколько путей, правда, тоже себя ограничивали. Здесь же впервые в
истории, в нашей пока не менее истории, конечно, мы не будем требовать, чтобы в каждый момент времени
в сети тек корректный поток. Но не пугайтесь, мы на самом деле сейчас навесим на себя кучу других
ограничений. Не, не, не, не, не в этом. Не, вообще не в этом деле. Нет, вообще не в этом дело. Дело
сейчас будет в другом. То есть мы будем разрешать себе, чтобы в какие-то локальные моменты времени
у нас в вершину больше втекало, чем вытекало. То есть можно даже просто сразу ввести определение.
Давайте сразу его введем. Определение. Предпоток. Да, предпоток f в сети, в сети g равно, давайте,
вот, vcst. Это там функция f, значит, как всегда, из e куда-нибудь. Ну, там такая, что, ну, давайте
вот мы и в этой парадигме будем писать, что первое, для любой, для любого ребра e верно, что 0 меньше
либо равно f от e меньше либо равно c от e. Ну, как и раньше, как и всегда у нас было, да. Но есть и второе
важное условие. Второе важное условие заключается, что для любой вершины v, которая не является и
с током, и с током верно, что? Всего верно. Да, сумма входящих, сумма, да, входящие звонки,
исходящие звонки, да, что сумма всех ребер, которые в нее входят, точнее, сумма потоков,
которые в нее входят f от e, она больше либо равна сумме f от e того, что выходит. То есть обратите
внимание, если вы сейчас вот откроете там у себя конспект на страничке, где написано определение
потока обычного, да, то скорее всего вы там увидите буквально то же самое, вот, по идее,
должно быть просто копипаста, за вычетом одного маленького момента. То есть вот в этом месте стоит
знак неравенства. Потому что если я напишу равенство, то это должно быть просто определение потока.
Ну, то есть как следствие, то есть любой поток является предпотоком, но, естественно,
не любой предпоток является потоком. Чего в t выполнено, чего? Ну, скажем так, у нас будет
так получаться. Вот так. Ну, можно, конечно, ну, вот, ну, не знаю, ладно, если хотите,
ну, можем на всякий случай там иметь в виду, что, может быть, t имеет смысл вычеркнуть, хотя на самом
деле мы не будем этим заниматься. Хотя, хотя надо подумать, действительно, вот, мы удалили t,
хорошо, если возить вопрос, поменяем, насколько принципиально поменяется определение? То есть
насколько нам принципиально, чтобы из t могло там, то есть насколько нам принципиально требовать,
чтобы на самом деле из t больше, принципиально требовать, чтобы из t больше в t втекало, чем вытекало?
Ну, в принципе, что это нам дает? Куда девается вода, которая вытекает из t?
Ну, есть вода, которая возвращается обратно, естественно, да? Ну, давайте так, как всегда, вот,
очень удобно воображать на уровне декомпозиции. Как бы предпоток тоже можно декомпозировать на
пути и циклы. Вопрос только в том, что пути могут, то есть пути в данном случае могут там заканчиваться
где угодно, а вот начинаться где угодно они не могут. Ну, вот, то есть начинаться они могут только
в с и т. В принципе, это определение говорит о том, что просто помимо классических путей, то есть
могут быть пути, если так писать, ну, откуда, могут быть из t в с или из t куда-нибудь. Ну, с другой стороны,
легко, ну вот, то есть разве что из t куда-нибудь. В общем-то, не то чтобы нам это глубоко выгодно,
на самом деле. Ну, по факту, в прочем, технология, на самом деле, которой я говорю, она будет добиваться
того, что мы в t, то есть, на самом деле, из t ничего доставать не будем. Понимаете, да? То есть, на самом
деле, просто в этом нет необходимости. То есть, обычно, если какая-то вода у нас будет забегать,
например, дошла до t, то, в общем-то, какой смысл ее оттуда доставать? Вот, у нас не будет никакого.
Ну, а теперь приходит момент такой. Ну, это, конечно, только определение. То есть, просто
предпоток. Да, вот можно себя определять, что, видимо, мы разрешаем какой-то в воде течь из t в с,
непонятно зачем. А, опять типа не дописал? Ну, да. А, ну, да, так, конечно, абстрактная, да. Ну,
да, как вы, да, как пишут, да, как пишут классики, это называется шапен, там етюды, тетрадь. Какая
тетрадь вообще? Какие чуды? Ну, етюды, тетрадь, чего, чего, непонятно, что ли? Вот, да. Вот.
Значит, соответственно, хорошо. Итак, но, значит, предпо... Да, то есть, у нас будет цель, что в
каждый момент времени в сети у нас будет не поток, а предпоток, и мы будем добиваться того,
чтобы этот предпоток стал потоком. Но добиваться мы будем тоже не просто так. Сейчас будет весело.
Для этого мы введем определение, значит, значит, мы введем такое требование, то есть у нас будет
такая функция высота. Ну, даже не определение, то есть мы введем, то есть частью концепции будет у нас,
значит, высота. Даже не определение, наверное, правильно написать. Нет, ну, просто определение
это как бы функция, которая там равна в квадрат пополам, например. Вот у нас высота h. Ну, вот. То есть,
допустим, мы введем такое понятие, как вот высота, значит, там такое z больше либо равно 0, я напишу.
Ну, потому что, да, мы живем в России, у нас 0 не является натуральным числом. Вот, поэтому пишу,
поэтому пишу целое положительное. Да, в какой-нибудь Франции я бы написал натуральное число и не парился бы,
но увы. Вот. Ну, хотя не знаю, конечно, увы или не увы, но вот. Так что, соответственно, значит,
то есть это такая вот, у нас будет, значит, такая функция, то есть каждая вершина будет
находиться на какой-то такой высоте, но со следующими условиями. Смотрите, h, значит,
высота и стока равна модуль v. Значит, высота стока равна 0. То есть, оба раза вот это вот жестко.
Жестко это означает, что высоты этих вершин раз и навсегда фиксированы. То есть, высоты
остальных вершин меняются. Высоты остальных вершин меняются. Меняются. Ну вот, меняются.
Ну вот, не уменьшаясь при этом, давайте подчеркнем. То есть, у нас вот так. Ну вот. Однако,
ну вот. Однако, если, однако, давайте так, смотрите внимательно. Для любого ребра в остаточной
сети такого, что, что? Такого, что c, остаточная пропускная способность, больше 0. То есть,
в переводе говоря, ненасыщенного ребра в остаточной сети. Обратите внимание,
еще раз, это остаточная сеть. Вот индекс f тут не случайно. Да, определяем абсолютно так же,
с оговоркой. Хотя, что тут договариваться. Сеть останется сетью. Вот. Ну то есть, как бы,
для любого ребра, ненасыщенного ребра в остаточной сети, верно, что высота конца этого ребра,
она не меньше, чем высота, чем высота стартовой вершины минус 1. Да, именно так.
То есть, в переводе говоря, у нас, как бы, то есть, ребра в остаточной сети могут идти на высоту,
то есть, спускаться на высоту ровно 1. Могут не спускаться, могут подниматься как угодно. Но,
они не могут спускаться на высоту аж минус 2, аж минус 3 и так далее. Я вам даже больше скажу,
скорее всего, в каждый момент времени такой цепи вообще не существует. Я имею в виду,
что у нас не существует функции высоты, которые действуют этим требованиям в некоторых сетях.
Например, если есть ребро из SFT, то мы уже проиграли. В принципе, да. Но,
с другой стороны, это лишь означает, что нулевой предпоток мы рассматривать не будем.
Тот же вопрос, с чего мы стартуем? Это никак не влияет, потому что у нас все равно
HTS всегда в, а HTT всегда ноль. Ну и что? Нет, это влияет. Да, но фишка в том, что с какого
предпотока я стартую тут фишка? А стартую я с такого предпотока, в котором я тупо насыщу все
ребра торчащие из S. А все вершины у меня изначально, кроме S, будут, естественно, на высоте ноль.
Да, тогда конкретно этот предпоток будет корректен. Да, мы будем с него стартовать и как бы дальше
добивать его, пока он не превратится в поток. Но когда он превратится в поток, когда избытки
всех вершин станут нулевыми. А вы уже догадываетесь, что такое избыток, да? Ну я могу тут просто сразу
в скобочках сделать определение. Ну да. Ну скажем так, давайте введем это слово, просто чтобы.
Избыток, он называется, ладно, мы его будем называть excess от V. Да, вообще его хочется
называть E от V, но так как у нас E это ребра, то excess от V, где V это, да ладно, для чего угодно можно
определить избыток, неважно. Это сумма F от E, минус сумма F от E. Тут мы говорим, что start равно V,
тут мы про финиш говорим, да. То есть сколько втекает, минус сколько вытекает.
Что это как-то не так на английский переводится?
Почему это X? Ну вот так. В русском языке есть слово excess. Не знаю, имеет ли он отношение к этому,
но хотя что-то похожее есть. На всякий случай я напоминаю, что все этапы CPC проходят на английском
языке. Я боюсь, что как бы авторы не старались, но они не смогут опуститься на уровне, что слово
excess для вас это сложно. Это я так просто предупреждаю, не смогут. Но потому что, особенно на финал
пройдете, там, знаете, там будут писать люди вообще, как бы не русскоговорящие. То есть там всякое
бывает, там есть кашелигия. Хотя, если вы собираетесь сливать финал, то, формально говоря,
вы противоречите правилам ECPC. Там написано, что там команды, которые как бы могут и хотят
участвовать в финале. Вот так. То есть там пойти и развлечься. То есть пойти там,
пройти на полуфинал, а потом его торжественно слить, это как бы фу-фу-фу. Это как бы нельзя. Да,
я не знаю, были ли прецеденты, когда там Вуздис квалифицирован за подобное. Ну,
позже. Ещё ему не было, но ему не дали дополнительную медаль, а если бы он сдавал нормально, то дали бы. Ну, типа там
13 команд решило сколько-то задач, а остальные меньше. Но Дураевский сдал все задачи вот эти,
которые решил на последнем часу в заморозку. И поэтому они не стали увеличивать количество
медалей, потому что сам долг. А так бы они увеличили, они бы сказали. Ну, правильно. Вот так вот. Да,
точнее не скажешь. Таковы правила, так что соответственно. На самом финале ходят все равно
легенды о том, что там у какой-то команды из ПВГ были проблемы, что там в условии все-таки вкралась
какая-то фраза, которая однозначно может быть понятна только носителем-носителем английского.
Ну вот, а если вы не носители, значит вам придется угадывать, что имели в виду авторы. Ну, там, скажем,
я знаю только про из ПБГУ, про другие истории таких я не знаю. Ну, я знаю, что хотя бы одна такая
история была, и там команда на этом очень сильно погорела. Вот, вернёмся к делу. Значит, вот у нас
такой эксцесс, мы будем им пользоваться. Так вот. Значит, смотрите. Во-первых, часть концепции,
у нас есть высота, она может быть изменена. Но, внимание, важный момент. Часть концепции. Дело в том,
что изменение предпотока. Вот. То есть там, ну давайте, ладно, уже напишем то, что я уже и так огласил,
давайте это зафиксируем. Изначально h от v там равно 0, где v не, там, где v, короче говоря, не s. Вот.
То есть изначально h равно 0, и мы, вот так скажем, насыщаем все ребра, торчащие из… так. Ладно. Не
будем в ВВД. Я не должен, конечно, такие слова писать на доске, прям прописывать, но, но да. Ну,
я мог бы там написать все ребра z, такие шо, z.start равно f, но, по-моему, если я вместо этого
напишу торчащие, то по смыслу мы ничего не потеряем, правда? Вот. То есть да, там, конечно, торчащие,
да. То есть это да, там всякие, там, там, торчун, там, жлыга, там, вот это, там. Или как-то, ну,
треугольника BC с пентифлюшкой на конце, там, вот это все. Ну, это отдельная песня, что это такое,
ладно. Вот. Вот. Значит, изначально так. А далее, ну, как мы уже сказали, это корректный припоток.
Вот. Далее. Пока нот. Далее изменяем предпоток. Изменяем предпоток и высоты.
Ну, вот пока хотя бы у одной вершины. Вершины В, ну, естественно, не являющиеся истоком, истоком.
Есть не нулевой эксцесс. Вот так. Ну, сразу давайте оговорим. Предположим, что мы там как-то
меняли предпоток и неожиданно выяснилось, что эксцесс у всех вершин теперь, то есть как бы все
инварианты относить на h и эксцессов сохранены. Ну, кстати, инвариант можно вообще теперь
прописать, что то есть поток является, то есть там функция F является предпотоком, если все эксцессы,
ну, кроме, там, истока, истока не отрицательны. Вот. Значит, сейчас мы это будем, ну, вот. Здесь у
нас не нулевой эксцесс. А теперь предположим, что у нас неожиданно обнаружился предпоток,
который удовлетворяет вот этим инвариантам с высотой, и при этом оказалось, что ни у одной из
вершин нет ни нулевого эксцесса, ну, кроме, кроме истока, исток. Что из этого можно вывести?
Что тогда про этот поток можно сказать? Возможно. Я утверждаю, что и не получится. Так,
ну, во-первых, так, утверждение номер раз. Это поток. Ну, вот этот предпоток, у которого все,
все избытки нулевые. Это очевидно. Нет, мы пока, нет. Вопрос был, что можно сказать, что можно
сказать о, вот, действительно, там, там, предпотоке, удовлетворяющем этим инвариантам, у которого все
эксцессы нулевые. Вопрос, вопрос был такой. Утверждение первое. Это поток. Ну, потому что
предпоток с нулевыми эксцессами, это прям вот поток прям в явном виде определение. А теперь
более интересное определение, утверждение. Этот поток максимальный. Внезапно, да? Ну, вот зачем
нужны аши? Я утверждаю, что инвариант на аш гарантирует, что поток максимальный.
Нет, нет, нет, нет. Вы пихнули ребра, и после этого все вершины, из которых есть, как бы,
в которые есть ребра из эса, стали с не нулевыми эксцессами. Нет, погодите. Ну, пока давайте,
я утверждаю, что если вот этот процесс закончился, то есть у нас есть предпоток с нулевыми эксцессами и
адекватными высотами, а мы поддерживаем вариант, что предпоток удовлетворяет
этим утверждением на высоту, то я утверждаю, что поток максимальный. Или давайте я сделаю
абсолютную, казалось бы, естественную переформулировку. Потому что поток у нас
максимальный, как известно, тогда и только тогда, когда в остаточной сети нет пути из С в Т,
по не насыщенным ребрам, да? Но я утверждаю, что если все эти инварианты выполнены для
какого-то потока, вот этот инвариант на высоту выполнен, то от С до Т вы тупо не дойдете.
Давайте, что нам говорить, то есть рассмотримся это какой-то пути из С в Т,
пусть он есть. Тогда каждый раз, пока когда мы проходим по хотя по одному ребру,
мы уменьшаем высоту, мы стартуем с высоты В и должны дойти до высоты 0.
Ну скажем так, хорошо, уменьшаем не более чем на 1, может быть уменьшим на 0,
можем уменьшить на отрицательную величину. Нет, уменьшаем. Нет, при проходе по ребру
высота может увеличиться на сколько угодно. Уменьшаем. Вот, высота, то есть если у нас была
высота какая-то 57, то как бы высота в начале ребра, то высота в конце ребра не менее чем 57-1,
то есть 56. То есть высота может уменьшиться, но не больше чем на 1, а может вообще не уменьшиться.
Вот, но тогда смотрите, дело в том, что если мы возьмем простой путь из С в Т, то очевидно,
мы на каждом шаге, то в этом пути будет не более чем В-1 ребро. Следовательно,
пройдя по этому пути, у нас высота будет не меньше чем 1. Она до 0. Всё. Денис живой?
Да. Вот, понятно? Ну вот. Можно ещё раз глобально, что мы сделали. То есть мы сказали,
что допустим, существует какой-то процесс, такой, что мы пихаем предпоток, так чтобы
этот вариант сохранялся с высотой. Да, и процесс неожиданно сошёлся. Если сошёлся,
тогда у нас всё хорошо. Тогда утверждается, что у нас в конце получится поток, причём максимальный.
А почему? То есть мы же поняли, что у нас такая функция высоты не всегда существует,
потому что... Ну, во-первых, мы стартовали с позиции, в которой она существует, и даже она
определена. Вот. То есть мы изначально сказали, что аж мы зафиксировали так и пихнули и насытили
все ребра, торчащиеся из С. То есть надо ещё потом доказать, что это тоже... Ну, мы это когда-то
успели доказать вообще. Нет, как мы будем пихать поток дальше, это отдельная песня. Не понял
вопроса. Мы сказали, что мы просто так делаем физически. Если вам так удобнее, давайте сначала
насытим все ребра, торчащиеся из С, потом введём высоту, если вам так удобнее. Да, просто. А после
этого вводим высоту, обнаруживая, что относительно такой высоты текущий предпоток корректен. Всё. То
есть даже исходной сети, конечно, действительно высоты такой может не существовать, но мы как бы
добились того, чтобы изначально она существовала. Чего? Ну, да.
Ну, мы просто доказали, что если у нас в конце предпоток превратился в поток и аш у нас относительно
аш он корректен, то значит этот поток максимальный. Вот мы только что доказали.
То есть просто не будет быть типа ненасыщенным ребром? По сути, да. Ну, просто вот это. То есть
оказывается, что у нас где-то будет разрез или там другое доказательство могло быть так. По
принципу дирихля на какой-то высоте между V и ноль не будет вершин. Тогда утверждается, что вершины
можно разбить на две части. Из там то, что выше этой высоты и то, что ниже. И через этот разрез
ненасыщенных ребр в остаточной сети нет, потому что... Вот. Понятно? Более того, в принципе забирая
вперед в каждый момент времени это будет так, как это непарадоксально, что в каждый момент времени
у нас пути из СВТ не будет. У нас будет какой-то предпоток, но как бы в любом предпотоке на самом
деле, удовлетворяющем условию высоты, вот верно, что как бы есть высота, на которой вершин нет
между V и ноль. Но это всегда верно, просто извиняюсь по принципу дирихля. Так, что-то в
итоге зависает. Ну вроде да. Что вроде да? Нет, мне уже страшно, что по-моему вообще не буду
у вас сочетание принцип дирихля вводит в ступор. Ну это, я не знаю, мне страшно, я не знаю.
Ну там тебе про рациональные числа ждать. Чего? Так, чего? Так. Так, ребят, а если остановить
ролик? Так, ладно, тогда ликбез. Если у вас реально такие словосочетания со словом принцип
дирихля, то это... Ну, откуда у вас тогда рациональные дроби там взялись? Так, давайте не путать. Так,
на всякий случай давайте, чтобы тут не путаться. Принцип дирихля. Это такая теория, мы решили
посадить KN плюс один кроликов в клетке, так чтобы в каждой клетке сидело не более чем N
кроликов. Тогда принцип дирихля говорит следующее. Найдется клетка, в которой кроликов не меньше,
чем K плюс один. Да, доказательства. Пусть это не так, тогда всего кроликов не более чем KN. Вот это
называется принцип дирихля. То есть, пожалуйста, давайте не путать там с функцией дирихля или там
какой-нибудь, может, там еще теоремой дирихля или там признак дирихля. Вот да, да, да, вам актуально
сейчас. Нет, дирихля как бы талантливый математик, как всегда. Вот, вот сейчас вспоминаем. Ну, просто
нет, просто лично для меня он был, если уж так говорить, актуален вообще, актуален в седьмом
классе. Поэтому, как бы, видимо, я подразумеваю, что просто для вас он тоже должен быть вот в таком
виде впитан в подкорку. Нет, у нас не было сходимости рядов, но хотя бы вот этот принцип с кроликами
и какие-то другие или сто через задачами на эту тему в седьмом классе был лично у меня. Ну,
я не знаю. Видимо, видимо, видимо. Нет, нет, если у вас был признак дирихля, то это, конечно,
круто, да. Но мы сейчас говорим о принципе дирихля, а не признаки дирихля. Не путайте.
В данном случае признак, там, принцип дирихля напрямую нам говорит о том, что в каждый момент
времени найдется высота между v и нулем такой, что на этой высоте вершин нет. То есть обычно это
стандартное рассуждение называется принцип дирихля. То есть я мог бы там сказать, потому что, если бы
это на каждый было, то их было бы не более v плюс один. В общем, просто обычно это шифруется как
принцип дирихля. Все. То есть я сказал принцип дирихля, собственно, у всех там это все автоматически
проводится. Вот так, по идее, это должно быть. Вот. Далее. Это был excess. Это было вот это. Так вот.
Но теперь следующая фишка. Хорошо. Да, если мы этот предпоток, если мы будем как-то пихать
предпоток и еще корректировать высоты так, что у нас все хорошо, что этот предпоток превратится
в поток, значит, значит, мы действительно победим. Но теперь фишка. Внимание. А теперь, а теперь вот
важный момент. Изменять предпоток и высоты разрешается исключительно с помощью функций push
и relabel. Вот. То есть мы сейчас себя будем очень жестко ограничивать. Релабел, да.
Ну, хорошо, в других версиях лифт. Релабел. Перепометить. Релабел. Это глагол. Релабел.
Это глагол. Релабел, которое слово надежное, это прилагательное. То есть оно пишется вот так.
Вот. Релабел. А тут relabel. От слова label. Отметка. Вот. В рекламе еще label бывает вот это все.
Или там в музыке там бывает вот это все. Да? А, вот типа, да. Как-то пользуясь прецедентом. А что,
у нас когда-то был такой прецедент? Да, был. Когда? Ну вот только что. Ну да, как-то так,
ну окей. Так вот. Теперь пришло время узнать, а что же это за мистические функции? То есть,
это не по принципу. Главное, чтобы у вас были две функции push и relabel, а что вы там напишете,
это ваше дело. Нет. Не совсем. То есть тут как бы концепция очень жесткая. Значит, смотрите.
Значит, смотрите. Внимание. Так. Ладно, я тут повыше напишу. Значит, это для нас важно.
Значит, внимание. Функция push. Я давайте все-таки тут маркером поярче напишу. Значит, итак,
функция push. От какого-то ребра в остаточной сети. Значит, сразу скажу. Требования. Ну,
требования, естественно, excess от E.start больше нуля. А, ну еще я, конечно, скажу,
что и требования, чтобы CF от E было больше нуля. А нет, это еще не все. Ну то есть я сразу скажу,
что цель push пропихнуть поток по ребру E. Но для этого нужно, чтобы, во-первых, был избыток,
который можно пихать. Ребро должно быть ненасыщенное. Ну как говорить, мы не вводили
формальное определение, что ребро существует в остаточной сети, если у него неналивая
пропускная способность. Потому что, строго говоря, как бы ребро с нулевой пропускной способностью
существует. То есть, как бы, да, знаете, там труба может засориться, но как бы неверно,
что если она забилась совсем, то она исчезает. Прямо вот растворяется. Ну вот все-таки. Формально
говоря, мы такого сказать не можем. То есть нам удобно, конечно, мыслить, что в некоторых случаях,
если у трубы пропускная способность 0, то ее нет, но тем не менее. Но это как бы с тем же успехом мы
можем говорить, что нам очень удобно мыслить, что у трубы пропускная способность 0, а по ней течет
поток минус 2. Да, но это тоже наши абстрактные удобства. Если вы это расскажете бабушке,
которая крутит руль на реальной водопроводной станции, то, как бы, называется там, я не знаю,
бабушке вы услышите поток слов, там нецензурным будет что-нибудь типа ироды окаянные, я не знаю.
Или что-нибудь еще, да. Да, ее речь будет насыщенная, но это совершенно не та насыщенность,
которая нам нужна. Это да. Как сказал бы классик, возможно, до изобретения этого всего. Вот. Но,
значит, у нас еще есть требования. То есть, казалось бы, да, это казалось бы просто логичное
требование, но есть еще требование, чтобы это ребро смотрело вниз. То есть, на этот раз нам
требуется, что высота конца этого ребра должна быть как высота начала. Только минус 1. А можно
просто писать, что строго меньше? Можно. Но мы будем писать вот так. Хотя, в принципе, да, можно.
То есть, мы знаем, что у такого ребра высота как минимум, там, высота финиша, это как минимум
старт минус 1, но вот мы требуем, что пушить мы будем только поток, который смотрит строго вниз.
Вот. Понятно? Ну, как мы это делаем? Вот. Да, то есть, надо было по-паскалевски писать,
типа, там, вар, там, бегин, вот это все. Спасибо, не надо. Как Блес Паскаль? Господи. Ну, Блес Паскаль,
вряд ли, какой дел на языке Паскаль. Ну, по той простой причине, что он умер, наверное,
лет за 100, 150 до появления этого языка программирования. И программирование, и программирование,
в принципе, да. Вот. Ну, да. Ну, да, как это говорят, да. Это называется композитор Танеев,
не присутствующий сейчас здесь, по главным образом, по той причине, что он умер в 1891 году. Да,
да. Ну, типа, да, тут то же самое. Так вот, что мы, как мы будем пихать поток? Сколько мы будем пихать?
Ну, естественно, сколько, сколько можем. А сколько мы можем пихнуть? Вот. Как бы вы сказали,
сколько потока мы можем пихнуть? Совершенно верно. Вот. Ну, вот. Ну, как всегда, значит,
тут у нас, что мы тут делаем? Фактически f от e плюс равно дельта f, f от, так сказать,
rev от e минус равно дельта f. Ну, давайте пометим так, что мы вот имеем в виду,
что по обратному ребру как бы что-то поменялось, да. Ну, и, конечно, чаще всего еще мы excess нам
придется хранить в виде конкретного массива дополнительного. Поэтому мы напишем, что
у обратного ребра поток минус дельта f. Ну, вот так. Ну, вот, тут минус равно дельта f.
Нет, стоп, что? А, я перепутал. Ну, короче, вот это требование cf от e больше нуля,
это эквивалент, потому что ребра не насыщенные. Да. Ну, как эквивалентное? По определению это,
по определению это оно и есть. У нас определение, ребро не насыщенное, есть у него положительная
остаточная пропускная способность. Вот. Ну, нет. Обратите внимание, дело в том, что вот это ребро
в остаточной сети лежит, обратите внимание, ведь index f не просто так, а в остаточной сети есть
обратные ребра. И по ним, что самое важное, тоже нужно пихать поток. Ну, скажем так,
c не изменяем, но cf автоматически изменяется. Ну, потому что, помните, у нас cf от e это обычно
c от e минус f от e. Так вот, c от e никогда не меняется, считая, что у нас обратные ребра все есть,
просто у них изначально пропускная способность 0. А f от e, конечно, активно меняется. Иногда
оно бывает даже отрицательным. Так, вот такой push. Забирая вперед, я скажу, что только эта
функция может менять предпоток. Ну, легко убедиться, что с точной зрения там каких-то
инвариантов она ничего не портит, правда? Нет, она ничего не портит. Особенно тут важно бывает,
иногда ошибки пишут, что кто-то пишет, что вот на самом деле вот этот инвариант верен только
для ребер, торчащих из вершин с избытком. Вот обратите внимание, вот этот инвариант не имеет
к избытку никакого отношения. Пуш не меняет высоты, но меняет предпоток. То есть по обратным
ребрам, конечно же, push может быть действительно применен, и нам придется это делать, потому что
далеко не всегда можно, потому что, скорее всего, тот поток, который мы изначально выкатили,
по максимуму из истока, возможно часть этого потока придется вернуть. Чаще всего так и будет,
потому что не так часто бывает ситуация, когда максимальный поток насыщает все исходящие из
истока ребра. То есть, в общем-то, часть этого потока как бы утечет в Т, часть вернется в С.
Не очень понятно, каким образом мы высоты контролируем? Вот. А у нас тут не случайно две
функции? Нет, ну давайте так. Сначала убедимся, что Пуш ничего не портит по высотам. Но это должно
быть достаточно очевидно, потому что все, что здесь может испортиться, это появится новое ребро.
Ну, ненасыщенное, да? Но это ненасыщенное ребро будет торчать вверх. Ну, из финиш в старт. То есть,
оно точно будет. Может оно было раньше, а может сейчас появится. Но погоды по инварианту оно не
делает. Вот. Ну здесь, смотрите, а на пакеком у нас будет релейбл. Релейбл
от В, которая не исток-исток. Она будет заниматься тем, что она будет поднимать вершину В. Ну,
какие требования? Ну, требования такие. Во-первых, эксесс от В больше 0. И второе
требование. Я напишу так. Из В нельзя сделать Пуш. Ну, сделать в смысле выполнить. Ну, я мог бы
тут написать, что для любого ребра, для любого ненасыщенного ребра и торчащего из В верно,
что высота конца не меньше, чем высота начала. Я мог бы так написать, но я не буду этого делать.
Вместо этого я напишу суть. Вот. Понятно? Так. Ну, в общем-то и все требования. Ну, а действие
очень простое. Выполняется за О от количества торчащих ребер. H от В присвоить 1 плюс минимум
из H от E точка финиш. Таких, что E лежит в остаточной сети. Значит, С от Е, СФ от Е, естественно,
больше 0. Ну и, конечно, Е точка старт равно В. Вот так. Больше 0. Строго больше. Это важно. То есть
важный момент. То есть мы как бы делаем что-то свершенное только если у нее есть избыток. То есть
если у вас есть избыток энергии, вы что-то делаете. Если у вас лишней энергии нет, вы ничего не
делаете. Думаю, знакомое состояние. В этом смысле все. Понятно? Вот. Отсюда автоматически следует,
что relabel строго увеличит высоту. Ну, потому что рассмотрим все торчащие, все ненасыщенные торчащие
с В ребра. Вы уверены, что relabel именно так пишется? В смысле? Потому что там E, а не L. Чего L? В конце последние
2 буквы. Ну, relabel. Нет, ну, смысла. Но есть слово label. Метко. Label пишется вот так. Можете
проверьте в Google Translate. Может, я с ума сошел, но если я уже настолько с ума сошел, вы узнаете.
Вот. Нет, ну, если вас оно смущает, пишите lift. Это тоже, в принципе, одно из стандартных
обозначений. А вот и нет. А вот и нет. Фишка в том, что вы поднимаете на такую высоту, ну,
опять вы поднимаете на максимальную высоту, на которую можно поднять без нарушения инварианта.
Это раз. А одновременно вы как бы, одновременно вы поднимаете на какую-то минимальную высоту такую,
что из вершины V становится возможным сделать push. Обратите внимание.
Хороший вопрос. А вот, на самом деле, очень правильный вопрос. А ведь, действительно,
а вдруг так случится, что вершина, у вершины есть избыток, одеть его некуда. Потому что оказывается,
что ненасыщенных ребер у нас, оказывается, из вершины не торчит. Вообще никаких не торчит,
только обратно, и оно насыщено. А, нет, оно не насыщено. Давайте подумаем, как же это может быть?
А, может, просто по обратному. Но, на самом деле, идея очень проста. Раз есть избыток, значит,
есть ребро, по которому вода в эту вершину втекает. Логично, да? Нет, это значит,
что обратное ребро не насыщено, потому что, как минимум, эту воду можно отменить. То есть,
мы тогда делаем так, чтобы она была ниже этой, а делаем на другой. Да, именно. И больше в нее
никогда ничего. Именно, именно, именно, да. То есть, более того, там вода может по одному и тому же
ребру туда-обратно гонять тоже кучу раз. Нет. А потом возвращаю. А потом отменяю. А потом возвращаю.
Именно, вот именно так это и работает. Какой шикарный алгоритм. Хуже, это не алгоритм,
это концепция. В том, что алгоритм — это то, что накладывает на себя вот это вот. То есть,
алгоритм будет заключаться в том, что вы просто делаете push и relabel до тех пор, пока можете.
То есть, вы изначально делаете аши вот такими, пускаете вот такой поток. Ну, предпоток, в смысле.
А потом каким-то образом делаете push и relabel до тех пор, пока не повесите.
Как всегда. Абсолютно в любом порядке. Какой вам заботы. А это уже другой вопрос. Как конкретно
вы будете находить для кого сделать push и для кого relabel, и когда это уже на усмотрение алгоритма.
Ну, типа того. Ну, здесь, для того, чтобы так сказать, нужно, конечно, сделать маленькую
оговорочку. Что если у какой-то вершины все еще excess больше нуля, то значит, из него можно
сделать всегда либо push, либо relabel. Ну, потому что, ну, тут определение у нас так написано,
что мы либо можем делать push, либо не можем делать push, но тогда мы делаем relabel. Но тогда мы
просто делаем relabel. То есть, поднимаем вершину на высоту, из которой push сделать можно. А что тут
доказывать? Давайте думать, какие проблемы вызовет. То есть, проблемы могут вызваться только с
ребрами, торчащими из самой вершины V, правильно? Да, то есть, идея финиш был больше либо равно,
и он стал еще больше. Ну, потому что, смотрите, потому что все, ну, потому что все финиши были
как минимум start-1. Что тут доказывать? Вот, push говорит о том, что найдется ребро, у которого
эта нижняя оценка выполнена. А если push нельзя, значит, ни одной такой вершины нет. Ну, просто,
как бы я тут написал, что из V нельзя выполнить push? То есть, это означает, что, ну, смотрите,
excess от V больше нуля выполнено. Вот, значит, получается, значит, получается, для всех ребер,
значит, для всех ненасыщенных ребр, торчащих из V, верно, что высота финиша больше, чем ashtark-то
минус 1. То есть, мы взяли минимум из этих финишей и прибавили 1. Нет, может быть, разная. Ну,
кто-то нас выше, кто-то выше, кто-то выше, кто-то ниже. Ну, то есть, в данном случае в релебре
глобально говорят, что ребра могут вести выше нас, там, на ту же высоту или на 1 ниже. То есть,
мы говорим, что если есть ребра на 1 ниже, то мы по ним можем делать push. Но если их нету,
то значит, тогда, получается, все ребра ведут на высоту не меньше нас. Ну да. Ну да.
Так что, нет, с чего мы будем доказывать? Нет, в смысле, ну, те ребра, которые вели из нас,
ну, просто этот же вариант и гарантирует. То есть, вот это вот утверждение гарантирует,
что из вершины Вене ненасыщенные ребра ведут в высоту не меньше, чем аж от В минус 1.
На самом деле, всегда есть ребро, которое ведет в ровную высоту. Да. В этом смысл релебра, да. То
есть, в принципе, это означает, что после релебра можно, ну, если вам это нужно, сразу сделать push.
Из этой же вершины по какому-то ребру остается его только найти. Вот, прятать. То есть, остается,
ну, то есть, остается только вот действительно придумывать, в каком конкретном порядке проверять
вершины ребра и находить действительно это. То есть, это уже алгоритм. То есть, это как бы концепция.
То есть, я бы сказал, даже концепция в данном случае получается такой инфраструктура. То есть,
она говорит, что мы, то есть, начало алгоритма зафиксировано, данные функции push и relabel,
дальше у вас есть право использовать push и relabel, но других способов не менять высоту,
не менять предпоток у вас нет. Вот. Но смотреть на сеть вы, естественно, можете хранить там какие-то свои
там какие-то числа там или информацию вы можете. Там, может быть, эти ребра там списки о каком-то
хранить и так далее. Понятно? Вот. Так что, то есть, как там, то есть, как эти алгоритмы, то есть,
ну, алгоритм может вообще быть. Давайте там пока, то есть, там алгоритм может быть вообще устроен так,
что мы там скажем. Прибегаемся по всем вершинам. Если находим вершину, у которой есть избыток,
например, больше 0, то мы прибегаемся по всем ребрам. Если находим ребро, по которому можно сделать push,
мы его делаем. Если пробежались по всем ребрам и не нашли, то делаем relabel. Все. Вот, в принципе,
уже, то есть, уже это, на самом деле, является алгоритмом концепции Голберга. Ну, есть, конечно,
более аккуратные. Вот. Мы даже этого не показали. Да, то есть, если, то есть, да, пока есть вероятность,
что если мы будем как-то неудачно выбирать push и relabel, он может не остановиться никогда. Так,
ну, давайте так. Это вы все переписали? Отлично. То есть, ну, просто мне придет сейчас это все стирать.
Вот. Значит, смотреть сейчас будет немножко, ну, вот. Ну, начнем мы действительно с простой магии.
Сейчас мы, то есть, на самом деле, сейчас вот мы уже заметили, да, что если у нас есть избыток,
да, вот ситуация. У нас есть избыток. И мы уже выяснили, мы только что выяснили, что, в принципе,
если у вершины есть избыток, то там не нулевой, то значит, из нее ведет куда-то не насыщенное
ребро, правда? Ну да, есть такое ощущение. Вот. Вот. Но, на самом деле, это утверждение, от этого
утверждения можно пойти дальше. Даже с другой стороны, смотрите. Итак, пусть у нас нашлась вершина
В, у которой там excess от В больше нуля. Это означает маленькую прятную вещь. Как мы уже, как мы уже
мы себе можем вообразить, предпоток можно декомпозировать, правда? На пути ведущие из С и циклы.
Так, понятно ли почему? Да, то есть, да, у нас теоретически могли быть пути какие-то там из ТВС,
но заметим, что у нас, очевидно, пуши устроены так. Ну, то есть, очевидно, там всякие пуши и релейблы у
нас устроены так, что, как бы, все попавшее в сток остается в стоке. Логично, да? Ну, ни пушь,
ни релейбл мы со стоком не делаем. То есть, как бы, вся вода, которая попала в сток, она там остается,
и это хорошо. Ну, потому что у нас, в общем-то, цель, чтобы как можно больше воды там и оказалось.
Ну, а теперь можно вообразить себе, что предпоток отличается, поэтому от потока будет тем, что в нём
будут циклы. А ещё что в нём будет? А ещё там будут, да, а ещё просто пути из С в куда-нибудь. Логично, да?
Но уже на уровне этой декомпозиции можно себе вообразить, что, наверное, если в вершине В есть
excess, то, наверное, в декомпозиции найдётся путь из стока В, правда? Потому что, например, если мы
вытянем цикл, то, в общем-то, избыток от вершины В никуда никак не поменяется. Логично, да? То есть,
можно на этом уровне доказывать. Вот, а можно как-то и более напрямую. В общем, важная лемма будет
такая. Ну, то есть из этой леммы получается следующее, что если excess от В больше нуля, то в остаточной
сети существует путь из С, из В, я сейчас по-другому теперь формирую, С по ненасыщенным
преобором. Ну, по большому счёту это путь по обратным к этому пути в декомпозиции. То есть,
можно доказать так, что, во-первых, мы сначала докажем теорему, ну ладно, можно потребовать от
вас их в качестве упражнения. Докажите, что предпоток это, то есть, предпоток можно декомпозировать
на пути из С в какую-то вершину и циклы. И, возможно, ну, правда, по нашему определению
получалось, что могут быть пути ещё из ТВС. Ну, в принципе, да, определение предпотока, в общем-то,
это не противоречит. Нет, ну, нашему не противоречило, но в нашем случае такого пути не бывает. Нет,
есть и более официальное доказательство. То есть, другое версие такое официальное доказательство
могло звучать так. Допустим, из ВВС дойти нельзя. Давайте запустим ДФС докуда-докуда можем, да? И пусть
у нас С куда-то не вошёл. Но тогда заметим, что суммарно, давайте просуммируем все эксцессы у
этих вершин. Не буду сейчас делать алгебрические выкладки, но суть такая. Сумма эксцессов от всех
этих вершин, очевидно, больше нуля, правда? Вот, согласны? Потому что ни одной вершины, кроме
истока, эксцесс меньше нуля быть не может. Потому что есть как минимум вершина В, у которой эксцесс
больше нуля. Запустим из вершины В ДФС по ненасыщенным ребрам остаточной сети. Просто докуда
можем? До вершины В мы дойдём, потому что мы из неё стартовали. Теперь заметим следующее, что суммарный
эксцесс у этого множества больше нуля. А теперь просуммируем, из чего состоит этот суммарный эксцесс.
Очевидно, он состоит из ребер, по которым поток течёт, отсекает в эту область, а также там как-то
учитываются ребра внутри этой области. Но внутри этой области каждый ребро учитывается два раза,
как исходящие, как входящие, и они убиваются. Поэтому суммарный избыток области это, по сути,
можно суммировать только по ребрам, идущим откуда-то извне. Но из этого следует, что в эту область,
получается, найдётся какой-то реброс F больше нуля. Всё, противоречие. Почему? Потому что к этому
ребру есть обратное, по которому мы могли бы пройти. Противоречие с определением ДФС.
А почему С не будет входить? Потому что мы так предположили. Мы предположили, пусть С не
входит. Тогда мы вот получили противоречие. То есть из этого следует, что С туда не просто может
входить, а будет входить. Прям железобетонно, как написали бы старые олбанцы. Вот. Олбанцы,
знаете, ну был когда-то много лет назад популярен олбанский язык, когда вот я примерно в вашем
возрасте был. Там олбанский язык. Там железобетон. Там вот эти слова. Там жизненно. Там вот это всё.
И так далее. Ну вот. То есть где-то там рядом ходил Оно Толе. Там вот это всё. И прочая мемаса на эту
тему. Вот. Соответственно. Вот. Так что получается С будет. То есть в принципе. Но самое важное для
нас заключается. То есть какое у нас самое важное отсюда следствие? Что это? Раз из любой
избыточной вершины существует путь в С по ненасыщенным ребрам, то простое следствие заключается в
следующем. Если excess от V больше нуля, то h от V меньше либо равно 2 модуль V минус 1.
Неужели и тут сложно?
А что спрашивают? Я утверждаю, что просто если excess вершиновое избыточное, то у неё высота не
может оказаться. Следствие следствие. Ну рассмотрим путь. Рассмотрим путь.
Следствие следствие просто из структуры релебла берётся. Что мы поднимаем только ненасыщенные
вершины. А следствие исходное берётся из простого соображения. Рассмотрим. То есть как бы полемия у
есть путь. Давайте по нему пойдем. Мы пройдем не более чем V минус 1 ребро и спустимся и уменьшим
высоту не более чем на. А здесь мы берем минимум из существующих каких-то. А это неважно. Но еще раз
рассмотрим путь из VVS. Пусть его длина k. Тогда я утверждаю, что если высота из
ходной вершины равна z, то тогда когда мы пройдем по этому пути мы окажемся на высоте не меньше чем z
минус k. Потому что проход по ненасыщенному ребру уменьшает высоту не более чем на 1. А может
увеличивать. То есть мы в конце окажемся в высоте не менее чем z минус k, но при этом мы окажемся на
высоте модуль V. Потому что напоминаю, мы пришли в исток, у которого мы высоту никогда не меняем.
Вот. Да, ну ладно, здесь давайте напишем, давайте еще аккуратное тогда напишем, что
е.start, ну давайте, чтобы совсем не равно s. Вот. Но на самом деле это и так следует,
просто потому что у нас для истока банально, по-моему, excess у нас определенно для всего,
поэтому лучше что-то надо написать, что е.start у нас не равно s. Важное уточнение. Да. То есть важный
момент, что мы высоту не трогаем. Но мы здесь уже написали, что у нас как бы вот это жестко. Но
как бы получается, что если у вас как бы модуль V это не менее чем z минус k, но отсюда следует,
что z был не более чем V плюс k, и на этом все. Доказали. Ну собственно, я надеюсь,
что она стала понятна, а не в смысле, что как-то там кто-то там какой-то умный дядя доказал.
Потому что до этого момента не хочется, чтобы у вас там что-то оставалось в виде умный дядя
доказал. Потому что хотелось бы, чтобы вот тут, чтобы все это было понятно, что как бы это не умный
дядя доказал, а как бы там умный дядя скорее придумал технологию, но внутри этой технологии все логично.
Ну чтобы еще раз подчеркнуть, что мы там релейблов из эса, что мы не делаем пушей из эса.
Правда оговорка. Можно показать, что мы и так их не делаем, потому что если ребра разноситились,
это означает, что у соответствующей вершины уже высота стала хотя бы V плюс 1.
Поэтому на самом деле это я могу в скобочке написать в скобочках.
Ну потому что у нас изначально все ребра, торчащие из эса, были насыщены. Что нужно,
чтобы они разноситились? Надо, чтобы конец этого ребра стал выше нас,
то есть стал высоты V плюс 1. Да, но чтобы по нему еще потом сделать пуш, надо, чтобы вот эта вершина
повысилась хотя бы на два. А релейблов из эса мы не делаем. Так что следовательно, вот это условие,
оно на самом деле излишне. Нет, мы не можем его сделать, потому что для этого нужно, чтобы высота
эса оказалась больше, чем V, а мы этого не можем добиться. Просто из других ограничений мы уже этого не
можем добиться. Так что вот такая радость. Смотрите, что происходит. На самом деле вот эта лемма,
то есть вот это важное следствие, что у нас высоты принципиально ограничены. Ну по-моему,
это уже ставит крест на надежность на то, что у вас там что-то может быть бесконечно, правда?
А, у нас только увеличивается. Ну потому что заметим, что пуши у нас сделаны так,
что у вас что-то убилось. Либо эксесс обнулился, либо ребро насытилось, правда? Ну,
потенциал тоже можно сделать, и мы его сделаем даже. Но в принципе уже становится очевидным,
что бесконечно вы бегать по пушам и релейблом не будете. То есть, короче, релейбл вызывается
не больше в квадрат раз? Нет, хотя нет. Хотя нет, это не очевидно. А с пушем релейбл вызывается не
больше в квадрат раз, так? Что еще раз? Релейбл вызывается не больше в квадрат раз, потому что у
нас у каждого может повыситься, ну, чуть даже чуть меньше. Как релейбл вызывается, ну релейбл,
ладно, пока еще, ладно, хорошо, пока мы еще формально ничего не доказали. То есть мы уже начинаем
подозревать, что бесконечность тут не пахнет, но формально мы еще ничего не доказали. То есть,
ну на самом деле да, то есть релейбл бесконечно вызываться не будет. Более того, я бы сказал,
что для каждой вершины релейбл будет вызван не более чем, даже не О от В, а там 2 В минус 1 раз.
И более того, что самое приятное, это для нас, кстати, сейчас вообще очень приятно будет,
что на самом деле суммарное время работы всех релейблов у нас какое? Если они даже реализовывали
прям вот так. Другой ответ это 2 В квадрат. 2 В, да ладно. Потому что каждая вершина увеличивается
не больше, чем 2 В раз. Да, ну вы прям за О от единицы понимаете, куда ее увеличить?
В куб или, если быть точнее, ВЕ. ВЕ, да, у нас вернется сумма как-то. Скорее всего, вы же будете
не по всем вершинам бегать, а по всем ребрам. Поэтому суммарно получится, что как бы если вы
из каждой вершины сделаете по одному релейблу, это будет за О от Е. А В раз ВЕ. То есть получается,
нет, почему это для нас круто? Потому что у нас есть пока мистическая оценка,
которую вообще пока никто не превзошел. То есть у нас пока чемпионский алгоритм поиска максимального
потока в произвольном графе работает за ВЕ. По-моему, да. Ну можете открыть википедию. Он там
утверждает, что чемпионский пока ВЕ 2015 год. Не, по-моему, там именно ВЕ. У нас был, значит так,
у нас есть ВЕ лог С и ВЕ лог В. ВЕ лог С это масштабирование, правда, поэтому не произвольный.
А произвольный был ВЕ лог В, это когда мы стали писать Деница с линкатом. Ну понятно, из этого
всего не следует, что нет алгоритма, который ищет поток быстрее. Но ВЕ говорит, что мы уже мысленно
считаем, что, наверное, уже ВЕ действия у нас есть. Это важно подчеркивать. То есть, как бы,
получается, суммарно все релеблы выполняются не более чем за ВЕ, забирая вперед. В общем-то,
вы сильно умнее релебл мы делать и не будем. Чего? Каждый релебл, по сути, когда вы будете
вызывать релебл, он будет буквально бегать по всем ребрам и искать вот минимум высот. Я слышал, что мы релебл делать не будем, мы умнее? Нет, более умно, да.
Более умно релебл делать не будем. Да, это называется, из фразы удали первые два слова. Вот это называется типичная вытранная станица.
Мы более умные. Более умные, чем вот так вот совсем прибираясь по ребрам, мы релебл делать не будем.
Сила запятых. Сила запятых вообще слушание предложения полностью. Нет, Ниша просто по-другому
проинтерпретировал. Мы будем действовать умнее и не будем делать релебл. А, даже так. Ну ладно, ну я понял. Ну, понятно, это уже другое.
А то как там говорили, потому что типичные примеры, да, потому что нет, с помощью, это пример выдирания
контекста, на самом деле, от учителя литературы. Потому что, знаете, есть такое стихотворение,
Маяковский написал такие бессмертные строки. Хорошо у нас в стране советов. Можно жить, работать можно дружно.
Все, В. В. Маяковский. Продолжение, да, опустим. Ну вот. Ну вот, то есть хорошие строки, можно прям,
действительно, едва ли не в метро, в метро просто вешать, радоваться вообще там. Но полностью
четверостишнее, ну тоже там это не полное стихотворение, но уже четверстишнее звучало так.
Хорошо у нас в стране советов. Можно жить, работать можно дружно. Только вот поэтов,
к сожалению, нету. Впрочем, может, это и не нужно. Вот. Чуть-чуть другое настроение очень сильно, да?
Вот. Но первые две строки все, да, факт остается фактом. Ну а так это называется, да, я памятник себе,
Александр Пушкин, еще так можно. Вот. Так вот. Так. Ну погодите, тут фишка технологии в том,
что вы до того, как вы начинаете думать, хотя бы что-то реализовать, выясняется,
что у вас там, оказывается, вы в принципе тут push и relabel не так много делаете. Потому что,
вот давайте я сейчас все вот это убираю. Пуши я оставлю, но про высоты мы вот в это все верим,
мы это помним, да? Да. То есть технологию помним. Потому что теперь давайте думать,
за какое время мы вообще делаем push и relabel? То есть, например, смотрим давайте. То есть давайте
смотрим теперь relabels мы делаем. То есть получается O от V квадрат раз. Ну потому что из каждой вершины
мы делаем не более чем O от V relabels. То есть relabels суммарно O от V. Я имею ввиду сколько relabels.
Ну вот, а вот суммарно они работают, конечно, не за V квадрат на E, а за суммарно O от V. Да,
O от торчащихся неребер, да, ну плюс один может быть. Ну да-да-да, но скорее всего да,
видимо, можем поверить, что у нас нет вершины, с которых ничего не торчит. Да, потому что если из
вершины ничего не торчит, можно ее сразу вытянуть. Ну да, наверное. Так что такая радость у нас
происходит. Происходит? Происходит. Это было, значит, суммарно O от V. Ладно, тут запятую я поставлю,
а то за это втискивать. А теперь смотрите, push. А теперь когда мы возьмем push, то на самом деле push
бывают два типа. Насыщающий и не насыщающий. Ну насыщающий, естественно, это когда delta F
равно C от E. Ну то есть насыщающий — это если насытилось ребро. Нет, не обязательно. Нет,
если вас убилось ребро, это не значит, что убился избыток. Вот если не насыщающий, то,
нет, скажи так, если не насыщающий, то гарантированно убился избыток. Да, наоборот,
это означает, что relabel мы из этой вершины сейчас делать не можем. То есть обратите внимание,
то есть это наоборот. Так что вот такая радость. Я тут не буду писать, что не насыщенная это
прям обязательно, когда XS убился, потому что в принципе вот это условие, то есть убитый XS и
насыщенное ребро, это в принципе могло произойти единовременно. Ну вот, да, ну поэтому я просто
тут писать не буду, что у вас не возникало путение, что бывает либо такое, либо такое. Они пересекаются.
То есть насыщающая в проталкивание может убить XS, а может и не убить. Потому что, смотрите,
из каждой вершины, значит, у нас вызывается там не более чем 2V relabel, и каждый relabel работает
за O от количества торчащих из вершины V ребер. А, не более чем 2V relabel, потому что каждый раз высота будет? Да, потому что каждый relabel строго увеличивает высоту.
Вот, так что вот такая красота. А теперь внимание, вопрос, сколько бывает насыщающих?
Пушей. Ну, давайте подумаем. Рассмотрим одно конкретное ребро. Сколько раз по нему можно выполнить насыщающий push?
Если оно не будет раз насыщаться? Что оно не будет? Нет, ну что, оно может, как всегда, оно может насытиться, потом мы пихнули поток в обратную сторону, потом насытили его еще раз.
Да. Может такое быть, правда? Да, жалко. Правда, что? Нет, почему жалко? А что для этого нужно? Наверное, нужно relabel на другой вершине, которую она видит.
Ну да, то есть, на самом деле, заметим следующее. Если вы сделали по ребру насыщающий push, то для того, чтобы вы по этому ребру сделали хотя бы push еще раз, то вы должны вот эту вершину поднять хотя бы на 2, и потом еще, то есть, ну там, пихнуть поток, а потом еще эту вершину поднять, чтобы этот push сделать.
То есть, получается, от насыщающего push до следующего любого push есть увеличение высоты обеих этих вершин хотя бы на 2.
И к чему это нас приводит? Это нас приводит к тому, что каждое ребро может быть насыщено не более чем в раз.
Вот, то есть, я так. Не более чем в модуль v раз на каждом ребре. Вот я так скажу.
Суммарно, то есть, суммарно получается O от VE. Ну, на самом деле, кто-то может напишет точнее. 2 VE.
Почему 2? Потому что ребер у нас, потому что в остатке сети ребер у нас напоминаю 2E, а не E.
Вот, и по каждому из этих ребер push будет. То есть, точнее, вполне может быть.
То есть, эти пока все впритык, то есть, насыщающих push по-любому VE.
Более того, да, между relabels вообще push насыщающих в принципе не более чем E, правда, получается.
Вот, понятно?
Да нет, наверное.
Ну, вроде да.
Но нет, это между relabels каких?
Это вообще ситуация. Предположим, что между relabels глобально вообще.
Ну, в плане между двумя соседними relabels.
Ну да, рассмотрим два соседних relabels между разными вершинами.
VE, поэтому это плохо.
Ну, это пока еще плохо, но тем не менее.
Ну, вообразить себе такое можно, что в этом процессе насыщающих push будет.
Каждое ребро может только исчезнуть и до relabels не появится.
Скажем так, вот эта оценка, она сильно лучше.
Чего?
Вот эта оценка сильно лучше, чем между relabels.
Ну, конечно, да.
Осталось только оценить количество ненасыщающих push.
И вот тут уже начинается интересность.
То есть, если мы excess запомнили?
Чего?
То есть, ненасыщающие это значит, что мы пустили меньше, чем capacity.
Значит, мы просто excess.
Значит, мы убили excess.
То есть, гарантируем.
То есть, это я мысленно пишу.
Гарантируем, что это ребро тоже может убить excess.
То есть, я так напишу.
mb excess от v перешел в ноль.
Но это mb.
Ну, естественно, там v равно e.start, конечно.
Но тут mb, а тут точно.
Вот.
То есть, вот еще такой вот красота.
Вот.
Так что, вот еще такая разница есть.
Ну, теперь мы возьмем top-roll.
Можно ли, исходя из этого, как-то оценить ненасыщающие push?
Да, второй курс.
Вы уже умираете.
И это при том, что у вас сегодня пар не было.
Чего?
О, обратно, exactly.
Да, первая пара, да-да-да.
и это при том, что у вас сегодня пар не было.
Да, первая пара, да-да-да.
Господи, я уже...
У нас excess не может стать большим влиянием с того уровня.
Почему? Вполне.
Ну, excess, правда, не исходя не у ребра, откуда вода идет, а куда вода идет.
То есть фишка в том, что вполне могло произойти, что...
Вот.
Для этого даже не обязан быть насыщающий push в этом проблема.
Ну да. Нет, он точно не насыщающий.
Нет, я имею в виду push, который вернет нам excess больше нуля, не обязан быть насыщающий.
Ну, смотря у кого.
Если excess у стартовой вершины больше нуля, значит он точно насыщающий.
У нас push устроен так, что либо ребро насытилось, либо excess убился у стартового.
Так, я имею в виду, что...
У нас могло у той вершины, откуда мы их встретим, обновиться, а у нас, наоборот, стать больше.
А, ну у входящей вершины...
Нет, я восстанавливаю. У входящей вершины точно стало больше нуля.
Но вопрос в том, что до этого могло как быть больше нуля, так и равно нулю вполне могло быть.
А еще это могло быть вершина S.
Сейчас, а если мы сделаем цикл длины В, и...
И что?
И скажем, что у нас excess больше нуля на какое-то вершине, а на остальных ноль.
Но цикл длины В это...
Апропостные способности очень большие.
И тогда мы будем просто ходить по этому циклу и каждый раз насыщать на единичку.
Но по всему-то мы не пройдем, мы же из SST пушей не делаем.
И релеблов тоже.
Я бы даже сказал, как бы вы там не подгоняли высоты на самом деле, а как бы по этому пути вы из S в теги дайте.
Окей, на В минус две вершины.
Пожалуйста.
Только главное понятие только да.
Ну как сказать, нет, теоретически, да, у вас может быть так, что у вас есть какая-нибудь цепочка...
Какой-нибудь такой цикл, из которого есть цепочка, в которой ведет цепочка из S.
Да.
Тогда...
Ну вот.
Но просто там...
То есть по идее, конечно...
Ну по идее, конечно, да, можно...
То есть там действительно эту воду можно пытаться там действительно гонять по этому циклу.
То есть гонять.
Просто...
Но заметим, что вот эта вершина, по которой вода в этот цикл пришла, она выше, чем V плюс один, не подымется.
Ну потому что будет вот это обратное...
Потому что это будет обратное ребро в S.
Да.
Пока оно не насытится, а чтобы его насытить, вам скорее всего, видимо, придется всю эту воду из этого цикла изобрать.
Поэтому да, вполне вероятно, что этот цикл вы будете там постепенно повышать, гоняя, циркулируя по нему воду, да.
Но просто до бесконечности она не подымется.
Это будет так работать.
Так.
Ну ладно.
Можно об этом думать, но, по-моему, не пришло ли нам время устроить перегов.
Итак.
Ну давайте думать.
Как же у нас устроены ненасыщающие пуши?
Вот что можно сказать про ненасыщающие пуши?
Ну хотя бы что-нибудь можно сказать?
Додавляется новую элементную структуру данных.
В какую структуру?
Пуши добавляют новую элементную структуру данных.
Чего?
В какую структуру данных?
Учёшь инструкцию данных.
В какую кучу?
Нет, серьёзно, ребята, хватит записать.
Пуш, извиняюсь, ничего никуда не добавляет, пуш пускает
поток по какому-то ребру.
Какая структура данных, ребята, вы чего?
Так что эти попроще.
То есть, заметим, что пуш является ненасыщающим,
если оказалось, что вот эта вот достаточная пропускная
способность внезапно осталась не нулевой.
Как это может произойти?
Это означает, что избыток оказался строго меньше.
То есть, это означает, что в результате этого пуша
вершина перестала быть избыточной.
Раз вершина перестала быть избыточной,
ну а теперь возникает вопрос.
Вот давайте хоть как-то попробуем оценить.
Допустим, рассмотрим ситуацию между двумя соседними релейблами.
Ну там какую-то последовательность пушей.
То есть, заметим, что ненасыщающий пуш привел к тому,
что у нас какая-то вершина потеряла избыток.
Согласны ли вы с тем, что до ближайшего релейбла
эта вершина избыточной снова не станет?
Да нет, наверное.
До следующего чего?
До следующего релейбла.
Что мы рассматриваем про диспозицию между двумя соседними релейблами?
Вот каждая идея такая.
То есть, релейблов у нас в квадрат.
Давайте посмотрим, сколько у нас может быть ненасыщающих пушей.
Ну да, действительно, никто, к сожалению, не сказал.
Да, вершина могла перестать быть избыточной,
но мы тут же могли выполнить какой-нибудь пуш,
который, наоборот, в нее воду вернул откуда-то сверху.
Да, поэтому, конечно же, никаких гарантий на то,
что эта вершина хотя бы до ближайшего релейбла не станет эксцессом,
то есть не станет избыточной, собственно, не произойдет.
Хотя, в общем, даже непонятно, причем тут релейбл,
потому что релейбл будет применяться не к этой вершине.
Нет, может быть, понятно, причем тут релейбл,
может быть, мы сделали из нее пуш,
а потом сделали релейбл к той вершине, в которую делали пуш,
и ее подняли и вернули в воду обратно, разве что.
Но нет, такого мы делать не будем.
И дальше получается следующее.
Получается проблема, действительно.
Правда, интуитивно, очевидно, что между соседними релейблами
вода, очевидно, идет только вниз.
Логично, да? Ну, в некотором плане.
Ну, вот и какая-то вопрос.
А какой из этого вывод можно сделать?
Ну, в принципе, можно сделать вывод, что у нас кашада,
то есть если ребро насытилось, то оно, конечно, до ближайшего релейбла
не разносытится уж точно, правда?
Так, логично?
Так, или что-то вы уже на это как на черную магию смотрите?
Если ребро насытилось?
Ну, если ребро насытилось, то до ближайшего релейбла оно не разносытится.
Логично, да?
Вот.
Это, конечно, да.
Но из суммарных, да.
Но с ненасыщенными, конечно, не факт.
Потому что проблема в том, что это означает, что между релейблами
каждый ребро насыщается не более чем один раз.
Но ненасыщающих пушей между релейблами может быть, к сожалению,
сколько угодно.
Вот.
Ну, вот и какая-то вопрос.
Можно ли все-таки как-то попытаться это оценить?
То есть как бы это вот действительно оценить тот факт, что у нас
сверху, что у нас вода течет как-то только сверху вниз?
Более того, я даже два раза громко звал.
Ну, вот, печально.
Там перерыв 15 минут был.
Так что, соответственно.
Вот.
Ну, давайте смотреть.
Значит, оказывается, что можно...
Вот тут кто-то упоминал и исчез.
А жаль.
Потому что оказывается, что можно ввести мистический потенциал.
Потенциал х будет равен к чему?
Сумме h от v по всем вершинам, которые не исток-исток
и с ненулевым эксцессом.
Вот.
То есть вот такой вот потенциал.
А теперь давайте подумаем.
Как...
А теперь давайте подумаем.
Как этот потенциал меняется?
То есть как каждый из этих операций меняет потенциал?
А мы сейчас находим количество ненасыщающих пушей.
Да.
Мы ищем количество ненасыщающих пушей.
Вот.
Да.
Заметим, что...
Да.
Этот потенциал приятен тем, что ненасыщающих потенциал...
То есть тут как бы мы прибавляем что-то неприятное.
Что ненасыщающих потенциал...
То есть тут как бы мы прибавляем что-то непревосходящее минус 1.
Потому что у нас из потенциала такжественно вылетела какая-то...
какой-то потенциал h.
То есть минус h точно, но может быть плюс h минус 1 в том конце.
Потому что вершина, в которую мы пускали, она неожиданно стала избыточной.
Поэтому тут точно не более...
То есть заведомо уменьшится.
И, конечно, что важно с точки зрения маркетизационного анализа, уменьшится как минимум на 1.
Но у нас целочисленный потенциал, поэтому все очевидно.
Вот.
К чему это нас дальше приводит?
Адвег, давайте остальное смотреть.
Насыщающий потенциал.
Какие изменения у нас...
Как можно оценить изменения насыщающего?
Чего?
Да, уверен.
Ну да.
Да, то есть фишка в том, что насыщающий к чем отличается?
Оно отличается тем, что, в принципе, да, финишная вершина точно попадет в потенциал,
а вот стартовая могла оттуда и не выпадать.
То есть может excess в ней остался.
Поэтому оказывается, что push может и увеличить потенциал.
Но гарантировано не более чем на 2v-2.
Давайте вот аккуратненько напишем.
А гарантировано...
Сейчас.
Гарантировано, что если у нас excess от v больше 0, то h от v больше 0.
Ну, гарантируется, что h от v больше либо равно 0 всегда.
Да, но если h от v будет равно 0, то у нас не уменьшится на минус.
У нас вообще не изменится.
Чего не изменится?
Потенциал не насыщающий.
Ну да.
Но я говорю, что если вы сделали насыщающий push, то потенциал к нему прибавилось не более чем 2v-2.
А вот если не насыщающий и высота вершины была 0, то из него не выйдет ничего.
И утверждение неверное.
Не совсем.
Нет, не совсем.
Дело в том, что во-первых, ты не мог сделать push из вершины высоты 0.
Да.
Вот.
Ты сделал высоту хотя бы 1, и эта высота убилась, потому что...
Вот.
То есть другой вопрос, что вершина, в которую вода притекла, она могла попасть в потенциал, но ее высота на 1 уменьшится.
Поэтому тут минус 1.
Вот.
Так.
Почему не насыщенный push не больше, чем на минус 1?
Чего?
Почему не насыщенного push не больше на минус 1?
Для не насыщенного?
Ну еще раз.
Потому что не насыщающий push точно выкинул вершину v из потенциала.
Потому что, напоминаю, мы суммируем не все вершины, а только вершины с не нулевым избытком.
Это важно.
То есть если там у него была высота 57, например, то значит, тогда не насыщающий push эти 57 из суммы выкинул.
Но, возможно, он добавил 56 из вот вершины v, которую вода притекла.
Вот.
А, возможно, и не прибавил.
Но в конечном счете, как минимум, единица довычилась.
Вот.
Такая красота.
А теперь давайте подумаем, как на потенциал влияет relabel.
Ну он увеличивает.
Я так скажу.
То есть если у нас relabel увеличил высоту вершины с 57 на 179, то потенциал, тем самым, увеличился на 122.
Логично, да?
Да.
Вот.
Но, заметим, что суммарно по каждой вершине потенциал увеличился не более чем на 2v-1.
Правда?
Да.
Я могу сказать так.
Суммарно, тут потенциал увеличивается.
Там плюс не более чем.
Модуль v-2, ну на столько вершин, да?
Умножить на 2 модуль v-1.
Там было замечание, что, по идее, потенциал, ну вот, у нас, если excess больше 0, то потенциал h не больше, чем 2v-1.
Но в тот момент, когда excess стал влево, у нас могла произойти еще одна итерация, и потенциал мог увеличиться еще на единичку, ставить 2v.
Не мог.
Высота, у нас есть следствие-следствие, что вершина не могла стать выше 2v-1 никогда вообще.
Ну вот, скажем так.
Откуда оно берется еще?
Откуда следствие-следствие?
Да.
Ну просто потому, что вершина увеличивает высоту только в тот момент, когда она избыточна.
Ну да, она могла быть избыточной с высотой 2v-1.
Да.
И увеличив еще раз высоту, она станет больше, чем 2v-1.
Не могла.
Вот это утверждение гарантирует, что не могла.
Почему?
Потому что сам по себе relabel не изменяет ее избытор.
Релабел не изменяет ее избытор.
Релабел.
Ну да, то есть, если вы увидите, что столовая пафетная при этом аксцесс все еще больше 0.
Да, именно.
Поэтому высота никуда не делится.
То есть, можно вот это, если писать точную оценку.
Но, думаю, вы уже догадываетесь, к чему я клоню, да?
Догадываетесь?
Ну, оценить, наверное.
Ну, теперь смотрите.
То есть, как из этого оценить количество ненасыщающих пушей?
Вот это.
Потенциал изначально, кстати, равен чему?
0.
Конечно, 0.
У нас изначально все вершины на высоте 0 находятся.
Кроме и стока, у которого, который мы в потенциале так и так не считаем.
Вот.
Ну, и т тоже.
На всякий пожарный.
Но, правда, vs, на самом деле, excess всегда будет отрицательным, формально говоря, поэтому.
Вообще, формально верны интеллектуальные утверждения.
Сумма всех excess'ов по вообще всем вершинам всегда равна 0.
Ну, причина предельно тупая.
Потому что, когда вы подтолкнули единицу потока по ребру, вы как бы уменьшили excess в стартовой вершине, увеличили excess в финишной.
Так что сумма excess'ов, если прям вот брать вообще вообще вообще по всем вершинам.
Это может быть.
У нас же excess не отрицательный.
Везде, кроме и стока.
Мы это прописывали.
То есть, у нас как бы, то есть, везде, кроме и стока.
То есть, как вообще мы такого потребовать не можем.
Правда, по такой тупой причине.
Но фишка в том, что у нас, то есть, это означает, что у нас вода может, то есть, как бы, что вообще говорит поток, да?
Поток говорит, что вода нигде не скапливается и ниоткуда не появляется.
Так вот, предпоток, это мы разрешили воде скапливаться,
но появляться она может все еще только из истока.
Неформально может быть себе так понять.
Вот.
То есть, такое, на самом деле, еще такое мелкое замечание, которое немножко тут, может быть, там где-то рвет шаблон.
Но, тем не менее.
Вот.
Ну, тогда, смотрите, потенциал у нас ноль.
Меньше нуля он стать не может.
Ну, в начале ноль стать не может.
Но каждый ненасыщающий пуш его уменьшает.
А увеличивается он суммарно на вот это вот все.
А вот это вот все у нас чему равно?
То есть, суммарно здесь потенциал О от В квадрат, а здесь получается О от В в Е раз.
То есть, давайте, я тут тоже так напишу.
Суммарно.
Там меньше либо равно.
Там на два В Е давайте я аккуратно напишу.
На два В минус два.
Да это я прям совсем в тупую оценивать.
Ну, потому что я тут мог написать суммарно не О от В Е, а два В Е мог написать.
Вот.
Ну, тогда из этого всего, ну, то есть, если это все аккуратно просуммировать, то из этого следует, что
то есть, ненасыщающих пушей.
То есть, прям вот, вся гема.
Ненасыщающих пушей не более чем, ну, можно даже прям оценить 4 В квадрат Е.
Или даже там вот, если по-корминовски писать, то вообще В плюс Е будет вот так.
Ну, можно через ложку, но вообще прям можно 4 написать.
То есть, неплохая такая концепция, да?
То есть, более того, внутри этой концепции, уже на уровне самой концепции,
заметьте, мы еще не предложили ни одного алгоритма толком,
а уже, как бы, становится понимание, что тут речь идет даже не просто о зацикливании,
но даже о какой-то неполиномеральности.
Неполиномеральности?
Да.
Ну, может вы там эти пушие релейблы будете пихать, там, я не знаю, за два в степени В.
Ну, в плане, наоборот, полиномеральности.
Нет, не идет речь о неполиномеральности.
Кошмар, неужели мой русский язык такой сложный?
Паш не знает, а вообще?
Можно вопрос?
Ну, вообще понятно, да.
А почему у вас еще сумма не больше, чем 2ВЕ?
Ну, потому что мы...
Ну, у нас ключевая идея была такая, что насыщающих пушей по одному и тому же ребру
может быть не более, чем В.
Именно В, даже не 2ВЕ, а В.
Но ребер у нас всего в достаточной сети 2Е.
Следовательно, сумма на пушей насыщающих не более, чем 2Е.
То есть 2ВЕ.
Вот я тут могу написать.
Два...
Что скобочка?
Два минус два?
Да.
Два минус...
Ну, вот это вот два минус два, да, множили на все.
На не насыщающие пуши.
То есть 2ВЕ.
Это для потенциала, да.
Вот.
Вот.
То есть в принципе уже...
Вот.
В принципе, то есть на самом деле теперь, если у нас будет какой-то супероракул,
который будет нам в каждый момент времени с небес по факсу присылать, где делать
пуши или релейбл, то в общем-то мы получим уже алгоритм за не такую плохую симптомику.
Уже в квадрат Е.
Дениц.
Дениц.
То есть это вас уже приветствует Дениц.
А теперь давайте...
Вот давайте попробуем почесаться на эту тему.
Давайте попробуем почесаться на эту тему.
А как вообще изобрести оракул?
Как изобрести оракул?
То есть как-то вот вообще как изобрести алгоритм, который будет нам реально за
лог единицы там давать информацию на тему того, там делать ли там пуши или релейбл?
Но за лог кажется можно в куче хранить.
В куче что хранить?
Ну вершины с эксцессами и репра какие-нибудь.
А прям в куче обязательно хранить?
В мягкой куче.
В мягкой?
А зачем тебе тут поможет мягкость?
Нет, ну можно сделать массив, в котором типа сначала с нулем, потом с единицей,
потом с зелёй, потом с зелёй и поддерживать указательный конец.
Если эксцесса изменяется не больше чем на один, то сработает.
Но это неправда.
Это неправда, да.
Нет, но это и неважно в общем-то.
Нет, в принципе можно завести как бы что у нас было в БФСе там с ВК очередями, да.
То есть давайте просто каждую вершину там, ну хотя нет, хотя нет.
Ну хотя нет, вершину с каждым эксцессом мы конечно не похраним, потому что заметим,
что мы здесь нигде не утверждаем, что эксцессы хотя бы целые.
Даже пропускные способности могут быть сколь угодно иррациональными.
Это для нас не проблема сейчас.
Но на самом деле да, можно хранить что-то в куче там в сете.
Но идея на самом деле такая.
А зачем в сете?
Смотрите.
Если нам в каждый момент времени, вот давайте представим себе,
что нам нужно тупо в каждый момент времени.
Ну стэк плохо.
Нет, стэк очередь почему плохо?
Потому что из неё не так просто достать элемент.
Нет, если она в середине лежит.
Ну, а действительно.
Нет, я имел в виду совсем тупую структуру данных,
в которую можно добавлять, удалять быстро.
Я имел в виду двусвязный список.
Но можно в принципе в очередь пихать.
Потому что заметим, что если мы храним просто в очередь всех вершин,
у которых эксц больше 0, то надо только поддерживать информацию о том,
что мы хотим добавить вершину в очередь.
А надо её добавлять или уже не надо?
Ну скажем так, совсем в такую не получится,
потому что у нас мог попортиться эксц у вершины,
которая уже лежит в очереди.
Нет.
Заметим, что когда вы делаете пуш, то эксц у вершины,
то есть на самом деле обнулиться эксц может только то вершина,
из которой вы делаете пуш.
Максим, что могло произойти, вот эта вторая вершина,
в которую пришёл пуш.
Вот может быть у неё наоборот появился не нулевой эксц.
Ну точнее он стал не нулевым.
Но тогда это означает, что вам нужно добавить,
этой вершины нет в очереди, её надо добавить.
Поэтому в принципе очереди хватит.
То есть если всё, что вам надо, это чтобы аракул вам говорил только,
а есть ли какая-нибудь это не нулевая вершина?
Ой, там есть, а какая?
Ну вот тогда да.
Ну почему нет? Ну не совсем.
Тогда мы из этой вершины за пробежегание по торчащим ребрам
сделали либо релейбл, либо пуш, если там получилось.
Нет, в принципе такое может быть.
Но это уже неплохо, потому что в принципе,
особенно если предполагать, что кратных ребр нет,
это уже алгоритм ЗВ купье.
Кратные ребра, очевидно, можно столкнуть в одну.
Ну да.
Но в принципе возникает такая.
Почему по квадратке?
Нет, потому что мы же пока ищем,
можно ли сделать пуш прямо за честно, не за единицу.
А почему это уже неплохо?
Ну уже хотя бы какой-то алгоритм.
Но тем более, что теперь давайте допиливать его дальше.
А как пытаться искать вообще ребра, из которых вообще можно делать пуш?
Ну давайте, какие у вас идеи будут дальше?
Какое из?
Условия равенства?
Ну да.
Но идея такая.
А давайте подумаем, можем ли мы для каждого...
Давайте так.
Действительно, давайте для каждой вершины хранить список ребер,
по которым вот прям буквально можно сделать пуш.
Ну да.
Ну если только excess больше нуля, конечно.
Давайте думать, как это сделать?
А нам не нужно хранить для тех, у которых тоже ноль,
чтобы когда он стал не ноль, нам не нужно было тратить кучу времени.
А когда он стал ноль?
Ну вот он стал ноль, а потом стал не ноль.
В этот момент, по-моему, все это стало интересно.
Нет, ну в этом смысле да.
Но это я имел в виду, что мы говорим, что можно сделать пуш,
то есть выполнены все условия, кроме может быть excess.
То есть храним все ненасыщенные ребра, ведущие в вершины с меньшей высотой.
Вот давайте думать, можно ли это адекватно поддерживать?
Ну заметим, что пуш в этом плане влияет только на два ребра,
и в явном виде можно проверять.
То есть естественно, для каждого ребра мы храним,
что если ты в списке, если да, то где.
Да, на этот раз, кстати, нам потребуется уже не стек и не очередь,
это реально список.
Понимаете, да?
Ну это чисто для удобства.
Нет, в будущем, забегая вперед, естественно,
никто никакие такие списки писать не будет,
мы пока себе просто воображаем это.
Список, вот это удобен тем, что из него, из любого места
можно за вот единицы удалить и не париться.
То есть просто удобно.
То есть хорошо, то есть пуш в этом плане как бы погоды не делает.
Но погоду делает relabel.
Потому что там в связи с relabel, там наоборот,
то есть количество ребер, по которым из этой вершины может идти пуш,
естественно, увеличивается и прилично.
Да, но заметим, что нам по барабану.
То есть сами эти ребра мы как бы в том же,
то есть понятно, что relabel мы делаем тупым проходом,
и в рамках этого тупого прохода мы список этих ребер составляем.
Понимаете, да?
Вот.
А заметим, что других ребер, кстати, у нас...
А, ну правда знаете, что еще могло произойти?
Могло так случиться, что ребра, ведущие в вершину V...
Обратно и мы отработаем.
Нет, ну да, театр, погодите.
Но там могло так случиться, что в вершину V вело хорошее ребро,
по которому можно сделать пуш.
Но вы сделали relabel, и это ребро пушевость потеряло.
Его надо тоже удалить.
Это все еще проверяется.
Но заметим, что мы просто зачет будем делать не за от
количества исходящих ребер,
а за от количества исходящих ребер, включая обратное.
Ну по большому счету, скорее всего, вы в любом случае
это в сети так делать и будете.
Но очевидно, что суммарно VE от этого в этом месте,
в relabel не денется никуда, правда?
Ну у нас relabel в V, и каждый relabel за V.
То есть V-кларат E как раз.
Нет, все еще, в общем relabel суммарно VE работает,
потому что каждый V будет работать за,
просто теперь не количество ребер исходящих из нее,
а за количество ребер исходящих,
плюс количество ребер входящих в нее.
Сейчас, мы же оценивали.
Нет, мы оценили, что суммарно relabel работают за VE.
Нет, это для нас важно.
Нет, стоп.
Сейчас.
Вот, у нас тут написано, видите, суммарно VE.
Не V-кларат E, а именно VE.
Мне казалось, что это, конечно, цитера.
Нет.
Я утверждаю, что суммарно в серии label работают за VE.
Это важно.
Да, ладно, вроде похоже.
Вот.
То есть, и от того, что мы будем пробегаться не только
по исходящим ребрам, но и по входящим VE,
оценка от этого не поменяется.
Потому что факт-факт остается фактом.
По каждому ребру мы пробежимся не более чем в раз.
Ладно, в данном случае просто V превратится в 2V.
Потому что мы можем пробежаться как по исходящему, так и по входящему.
Вот.
Такая вот радость.
Понятно?
Да.
Отлично.
Так что жил был вот такой VE, и жила была вот такая радость.
Вот.
Вот.
Но тогда, слушайте, это к чему нас приводит?
Это нас приводит к тому, что, поздравляю, мы изобрели
аракул, который будет говорить нам за от единицы, что делать.
Потому что сначала мы в первом аракуле говорим, находим
вершину с эксцессом больше нуля.
А потом во втором аракуле, значит, просто находим,
если в списке пушевых ребер хотя бы один, если есть,
просто достаем любой и делаем push.
А если нет, то, значит, делаем relabel.
То есть все вершины мы еще храним по их эксцессам?
Нет, мы с этого начали.
Мы храним список, поддерживаем список, даже очередь, всех
вершин, у которых эксцесс сейчас больше нуля.
Да.
Эксцесс больше нуля, а это равно долю.
Ура.
Красота благу дать.
Если высота вершины у нас изменилась, у нас не может
быть такой, что нам много придется операции сделать?
Да.
Но мы сам по себе relabel, но это высота у нас меняется
только в relabel, а внутри relabel мы можем делать это много
операций, потому что мы делаем там много операций для
того, чтобы высоту найти.
Мы все равно пробегаемся по всем ребрам.
Так давайте просто в этой пробежке еще себе запишем
что-нибудь.
Так что поздравляю.
У нас появился алгоритм, просто уже сразу просто
слету практически, который работает за v2e.
И обратите внимание, этот алгоритм еще и достаточно
примитивный.
Ну, с точки зрения концепции, потому что мы изобрели
концепцию, доказали, что там по-любому пушей будет
там не более чем v2e и придумали алгоритм, который просто
ищет пушей relabel за единицу, мы и аракул изобрели по
сути.
Но при этом у нас на самом деле есть ресурс, куда это
оптимизировать.
В первую очередь он, конечно, касается ненасыщающих
пушей.
Потому что есть подозрения, что на самом деле из-за них
в общем-то это v2e идет.
Вот эти v2e, как бы непонятно куда их девать.
Ну, по крайней мере, в меньшей степени непонятно.
Но v2e, конечно, тут выглядит чем-то жирным, это можно
удалять.
Но на самом деле тут можно просто как-то аккуратно
мыслить.
Но надо просто действительно как-то аккуратно делать
и добиваться того, чтобы у нас было как-то вот было
красиво.
Вот.
Ну и конечно действительно у нас есть действительно
алгоритмы.
Сейчас вот попробуем придумать может даже не один алгоритм,
который работает за, которые сейчас будут искать поток
за v3.
Не умираете?
Вот.
Тут хорошо, тут сейчас совсем весело будет.
Сейчас будет кубический алгоритм без этой трехиндийской
радости.
Предположим, что нет квадрата, но по факту это будет v2e,
то есть v3e.
То есть, ну как всегда, с точки зрения алгоритма как
бы первое, что вы можете сделать, это убить кратные
рубра.
В данном случае даже за v2e.
Хотя мы уже обсуждали, можно и за v2e убить квадратные
рубра на самом деле.
Но это в качестве упражнения.
Как убить квадратные, как убить кратные ребра за v2e.
Квадратные ребра, да.
Значит, смотрите.
Сейчас мы введем в эту технологию новинку.
В общем, новинка предельно логичная.
Новинка предельно логичная.
По сравнению, если вы помните, как мы в итоге удаляли
что-то из динеца.
Динеца.
Помните, давайте вспомним, мы в динеца тоже пытались
наверное думать, как хранить какие-то ребра, которым
надо что-то перебирать и так далее.
Ну, то есть, помните, там у нас было сначала решение,
что мы должны как-то удалять ребра, потом выяснилось,
что их реально удалять не надо, помните, да.
То есть, там выяснилось, что на самом деле просто
надо хранить указатель, на каком ребре мы сейчас перебираем.
Так вот, здесь, в принципе, та же идея.
То есть, заметим, что пусть мы, например, попытались
дойти, то есть, обзоружили избыточную вершину и попытались
выполнить из нее что-то.
Мы пробежались по ребрам, нашли какое-то ребро, потом
можно сделать пуш, и его сделали.
А теперь предположим, что мы в следующий, еще один
какой-нибудь пуш хотим сделать.
Заметим, что, как бы, до релейбла ближайшего, вот
по этим ребрам бегать бесполезно, правда.
Потому что, как бы, если эти ребра были плохие, с точки
зрения, с точки зрения пуша, то они, в общем-то, хорошими
не могли стать.
Ну, они могли, конечно, там, то есть, максимум, что они
могли, это разносытится, но тогда это ребро, собственно,
вело не вниз, а куда-то вверх, понимаете, да.
Ну, а если там высота уже изначально была, вела куда-то
не вниз, то до релейбла она не вниз вести ебу, и тут
без вариантов.
Вот.
Поэтому, значит, оказывается, то есть, поэтому мы вводим,
значит, такую штуку ИТ от В, то есть, итератор от В.
Понимаете, да?
Я даже его вот так буду помечать.
То есть, который будет указывать на какое-то текущее ребро
в списке ребер.
Абсолютно по барабану оно насыщено, не насыщено,
там есть в остаточной сети, нет в остаточной сети, да.
Понимаете, да?
Вот.
А это пока не алгоритм.
Это обновление концепции.
То есть, я бы сказал так, сейчас мы будем вводить,
то есть, я бы сказал так, сейчас мы на самом деле сделаем
концепцию более высокого уровня.
Мы запретим себе пользоваться push-ами и relab-ами.
А мы себе разрешим пользоваться только функцией discharge.
Discharge.
Допустим.
Вот.
Итак, функция discharge от В.
Вот.
Требования.
Ну, требования очевидны.
Excess от В все еще больше нуля.
Excess от В.
Excess от В.
Но он должен быть...
Да.
Вот.
Discharge, да.
Что, Google Translate согласен?
Значит, действие очень простое.
Ну, идея на оно говорит так.
While.
Значит, it от V.valid.
Ну, помните, у нас такой джавайско-питоновский итератор.
С next и valid, да?
Да.
Значит, смотрите.
Пока итератор валид, говорит так.
Значит, если may push от, так сказать, звездочка it от V.
То, что мы делаем.
Хотя нет, я наврал.
Мы делаем relab.
Нет.
Я наврал.
Более того, можно его по-другому даже писать.
While excess от V больше нуля.
And...
А, нет.
Да, while excess больше нуля.
Да.
Ладно.
Да.
Вот такой я вру.
Да.
Значит, смотрите.
То есть, по идее, на самом деле, по-хорошему говоря, видимо, из требований excess от V больше нуля мы его тоже убьем, на самом деле.
То есть нет, на самом деле.
То есть, интуитивно мы хотим такое требование, но реально мы будем вызывать иногда discharge для вершин неexcessовых для того, чтобы, если excess равно нулю, то discharge сразу выбросил с криком все.
Да.
С другим криком он не выбрасывается, потому что discharge ничего не возвращает.
Так вот.
Пока работаем, пока excess больше нуля.
Значит...
Ну, во-первых.
Если...
Так.
Ну, начнем с того, что если у нас этот итератор validin вообще, и T от V точка valid,
на ребро.
Какое-то ребро, торчащее из вершины V.
Нет.
Нет.
Любое, абсолютно.
И вот тут-то мы начинаем проверять.
Если...
Смотрите.
Я здесь очень хитро делаю.
If may push...
Ну, я так напишу.
Вот, допустим, у меня есть функция.
May push от этого ребра.
Так, что я делаю?
То я делаю push.
А T, V это итератор по ребрам?
Да.
По всем?
Это да.
По списку ребер, торчащих из вершины V.
Вообще всех.
Которые только из нас в сети были.
И насыщенным мы заранее не знаем.
То есть, may push включает в себя эту проверку, что ребро
не насыщенно, по высотам все адекватно, ну и по эксессу
все нормально, но это и так.
Очевидно.
Понятно, да?
Вот.
А если push нельзя сделать, то что мы сделаем?
То и T от V точка go next.
Обратите внимание.
Видите, мы не все...
То есть, я тут не пишу форек специально.
То есть, я go next делаю из ребра только в тот момент,
когда я убеждаюсь, что из ребра уже push не сделаешь.
И это очень важно обратить внимание, потому что может
так...
Потому что если я вот этот push оказался не насыщающим,
то тогда, возможно, по этому ребру нам еще придется
сделать push.
И тогда...
Да.
Но если я тут сделаю next, то мы сделаем next и только
после этого выбросимся.
А я этого не хочу.
Да.
Вот.
То есть, если push стал насыщающим, то да, я на следующей
итерации вайла просто убедюсь в этом и сделаю go next.
Вот.
Так вот.
А что делать, если итератор не валиден?
Догадываетесь?
Relabel?
Конечно.
Relabel от V.
Значит, relabel от V.
И что теперь надо сделать?
Ну и, соответственно, it от V равно, там, условно,
begin от V.
То есть мы утверждаем, что ребра, которые мы уже насытили,
до следующего relabel нам не понадобится?
Да.
Интересно.
Но это действительно так.
Ну потому что, смотри.
Я верю, что это так, если...
Нет.
Ну давай так.
Давайте подумаем.
А как это?
Я утверждаю, что да.
Допустим, мы нашли ребро, которое сейчас нам не подходит.
До relabel я утверждаю, что оно нам не подойдет.
Потому что что могло поменяться с этим ребром?
Ну почему оно нам могло сейчас не подойти?
Либо насыщенное.
Да, либо оно насыщенное, либо не подходит по высотам.
Но если оно нам не подходит по высотам, то нам нашу вершину
по-любому придется relabelить, чтобы подошло.
Да.
Ну вот.
Да.
Если по высоте все окей, но оно насыщенное, то раз
насытится оно может только, когда мы сначала вот эту
вершину подымем и сделаем тут из нее push.
Но тогда потом придется эту вершину тоже relabelить.
Да, согласен.
Удобно, правда?
Все.
Радость.
То есть на самом деле, если вы там напишите этот алгоритм,
а вы в принципе там в домашнем задании...
Господи, опять я анонсирую домашние задания.
В домашнем задании у нас будет.
Да будет.
Да будет оно, будет.
Я сразу предупреждаю.
Большое такое по объему.
Ну вот.
Ну в принципе, а кстати, если вот напишете вот этот
алгоритм, то на самом деле вы убедитесь, что пишете
он очень просто на самом деле.
Ну потому что я вам практически вот основной код, я написал
весь...
Ну практически все, потому что, ну как сказать, там
могут быть задачи, где вам придется все-таки какого-то
продвинутого Диница, например, в сочетании пихать.
Но в целом...
Но если вы там просто абстрактный поток ищете, то
В куба вам скорее всего хватит.
Ну то есть это может не работать только из-за корзенова.
Ну точнее работать хуже.
То есть, нет, ну чисто теоретически, да, Диниц вас может обогнать
из каких-то вот корневуха корзановских соображений.
Да.
Ну вот.
А те алгоритмы, которые я сейчас скажу, они будут
железо-бетонно работать за куб.
Ну я пока еще не сказал, пока я сказал только, что
у нас есть супердисчарки.
Сейчас можно еще раз вот подвещать у нас...
Да.
И как бы мы его...
Он один...
Ну то есть как бы он один на все...
На весь наш алгоритм.
Ну не кстати, для каждой вершины он свой.
Ну в смысле, когда дисчарш новый начинается, у нас...
Да.
Да, то есть каждый дисчарш начинается с того места,
где закончился предыдущий, да.
Почему еще раз у нас не может быть такого, что нам потом понадобится еще раз?
Ну он базируется на утверждении, что до ближайшего...
Пока не произойдет...
Что если мы какое-то ребро насытили, или оно по другим причинам нам сейчас не подходит,
то пока вершина В не увеличит высоту,
там ничего не поменяется.
Вот мы только что вот обсудили, можем обсудить еще раз.
Да, пока.
Давайте.
Потому что вот по ребру нельзя сделать пуш.
С эксцессом у нас...
Там с эксцессом у нас пока все было в порядке, да.
А пуш мы сделать не смогли. Почему?
Ну либо по высоте не подходило, но если нам по высоте не подходит,
то как бы эта вершина ниже не станет конец.
Поэтому начало должно стать выше.
А для этого нужен relabel.
Вот.
И вторая причина, почему мог быть fail, это то, что ребро насытилось.
Но чтобы ребро разносытилось, мы должны пустить поток по обратному ребру.
А для этого вот эта вершина должна стать выше нашей.
Потом мы сделали по этому ребру, пустили поток,
а потом эту вершину подняли для того, чтобы тут пуш стал валиден.
Поэтому получается, что это ребро до ближайшего relabel рассматривать нет смысла.
Ну вот.
Поэтому, когда мы делаем relabel, мы, естественно,
итератор ставим в начало, равно как и, обратите внимание,
ну, тут нет ужды пояснять, наверное,
что просто когда вы инициализируете алгоритм,
вы вот эти вот итераторы, очевидно, тоже инициализируете бединами.
Логично, да?
Ну, в самом начале, когда вы там еще высоты нулем ставите, вот это все, да?
Просто добавляется еще вот эта штука.
Вот.
Так вот.
На самом деле discharge это такая вещь, что на самом деле можно придумать такое это.
То есть можно, так сказать, проталкивать только discharge.
Можно взять технологию Rollberg и сказать,
мы запрещаем себе пользоваться даже pushами и relablами,
но вместо этого разрешаем себе пользоваться discharge.
Ну, по большому счету, discharge вообще он занимается,
то есть функция discharge в таком виде, она очень удобна.
Она занимается тем, что она обнуляет discharge вершины.
Excess.
Это какая?
Да, excess, да.
Она обнуляет excess вершины, да.
То есть видите, она вот просто while excess больше нуля работает.
Удобно, да?
Вот.
То есть в принципе уже может быть,
то есть как бы уже такой алгоритм, в котором оракуловость поддерживать сильно проще.
Алгоритм называется, пока есть хотя бы одна вершина с избытком,
возьми ее и сделай из нее discharge.
Ну надо еще поддерживать себе вершину.
Ну да.
Да, но заметьте, теперь нам не надо поддерживать ребер,
то есть фактически, а теперь надо поддерживать только вершину,
а это делается легко.
Да.
Ну там ладно, push, ну там, ну как?
Ну так легко.
В push, конечно, придется лазить, но или там.
Ну да, но просто, но да, то есть там,
то есть куда-то там, видимо, унаследоваться от push какого-то придется, видимо,
но это не глобально.
Вот.
Да, это вообще очень прикольно, на самом деле, на наследованиях писать, на самом деле, красиво.
Ну, потому что, то есть как бы, то есть пишем по торге дальше,
то есть концепция говорит о том, что у вас есть push relabel и абстрактный метод run,
а потом вы от него наследуетесь и, значит, делаете run, использующий только push relabel
и больше в сеть не лазящей.
То есть это как можно сделать?
Вы можете саму сеть у вот этого алгоритма, который,
ну, который там, от которого вы наследуетесь там,
просто хранить где-нибудь в привате и к доступу к нему иметь
только через запоследованные методы, которые там вы пропишете в самом алгоритме.
То есть вот очень удобно.
То есть это называется супер безопасно просто.
Вот.
Ну и так, если бы с вами совсем еще и там,
требовали бы писать как-то пишут идеально, можно писать идеально,
то можно вот в эту сторону думать.
Вот. То есть как бы сначала у нас разрешается только push relabel
и доступ к сети какой-то redonly,
а теперь у нас будет только discharge.
И redonly и доступ к сети.
И нет, и redonly и доступ к push relabel.
Ну, да нет.
Нет, именно к сети.
Ну, понятно, это и есть redonly и доступ, да.
Ну, можно, наверное, ну, можно, наверное, пытаться что-то поддерживать.
Но теперь у вас есть какая-то вопрос, что делать?
Ну, смотрите, а теперь если мы будем,
аракул нам будет подсказывать за вот единицу, что нам делать?
Что будем делать?
Ну, будем делать discharge.
Это да.
Это да.
Ну, вряд ли дольше.
Ну, давайте внимательно подумаем.
Вы же видите, мы же по сравнению с,
мы же делаем не только push relabel,
мы делаем кучу лишних действий.
Мы прибегаемся по куче лишних ребер.
Ну, каждое лишнее ребро окупится в конце в relabel,
мы просто под отца подкрутим чуть-чуть.
Ну, монетки положим.
А, можно и так сказать.
Ну, да, то есть правильный ответ.
Сколько discharge мы делаем?
Ну, суммарно действия в discharge мы делаем.
Да, хочется сказать, что...
То есть, так, сколько раз мы просматриваем в discharge каждое ребро?
Ну, на один relabel...
Ну, не знаю.
Количество push и плюс количество ребер.
Ну, не совсем.
Количество вершин.
То есть, мы, да, хочется сказать,
что мы каждое ребро просмотрим на каждой высоте не более одного раза.
Плюс количество push.
Да, но по факту это не так.
Причем плюс количество, я бы сказал, ненасыщающих push.
Ну, пофиг.
Да.
Ну, потому что, нет, как только мы ребро насытили, мы от него уходим.
Ну, сейчас или чуть позже.
То есть, может быть, конкретно сейчас мы от него не уйдем,
потому что у нас еще excess закончился,
но как только он появится, мы быстренько уйдем.
То есть, это, знаете, как в американском футболе.
То есть, после перерыва перед второй четвертью, соответственно,
да, то есть, если вам нужно было сделать панд,
ну, как бы перерыв будет, но первое, что вы сделаете,
этот панд сделаете, но от этого никуда он не денется.
А, ну все понятно тогда.
Вот.
Ну, такая типичная.
Так бы сразу и сказали, да?
Ну вот.
Ну да.
Так что, соответственно, да.
Вот.
Значит, что тут еще?
Вот.
Ну, тогда, то есть, правильно, ve, плюс вот, да,
но ненасыщающих push у нас в квадрате,
у нас получается тоже v2e.
Потому что каждое ребро мы...
Хотя нет, каждое ребро мы, кроме push мы просматриваем,
получается, e раз.
Вот.
Получается v раз, так что суммарно получается ve,
плюс количество ненасыщающих push.
Такая асимпточка уже у этого алгоритма.
Неплохо такие, да?
То есть, получается там...
То есть, сейчас у нас тупой алгоритм.
Здесь сейчас o от ve, там, плюс количество ненасыщущих push.
Да.
А их?
Ну их, да, их v2e, ну вот, соответственно.
Но давайте подумаем, как бы нам так сделать,
чтобы было хорошо?
Как бы нам так сделать, чтобы было хорошо?
Хорошо.
Чтобы нам так сделать, чтобы было хорошо.
Давай.
Почему предыдущий алгоритм не работал за o от ve?
У нас relay бы все работали за o от ve,
насыщающие push работали также за o от ve.
Нет, насыщающие push за o от v2e.
Нет, за ve работали, нет?
Мы же написали суммарно за o от ve.
Если у нас ve, тогда у нас уже есть алгоритм за ve.
Значит, быстрее мы не избавляемся от этого магического факта,
потому что алгоритм работает быстрее.
Нет, я не хочу доказать, что этот алгоритм работает быстрее.
Ну да.
Ну потому что дисчарч, смотри, единственная проблема,
почему мы, ну потому что в принципе кажется,
что мы каждое ребро просматриваем такими проходами v1, ну ладно, 2v.
Да.
Вот, но маленькая проблема.
Дисчарч может остановиться на этом ребре и долго на нем стоять.
Потому что дисчарч от этого ребра может приводить к тому,
что мы будем делать ненасыщающие проталкивания и на этом заканчиваться.
Не понятно.
Может быть, вы не были долго...
Ну вы смотрите, вот говорите, excess от v больше 0.
У вас это ратор сгрыгнуть на ребро.
Можно ли сделать по этому ребру push?
Ух ты, можно.
А какой?
Ой, и тут выясняется, что оказывается excess у вас 1,
а push там 179.
То есть там способность 179.
Ну окей, вы эту единицу протолкнули, но с этого ребра никуда не ушли.
Ну потому что...
Ну excess стал равным.
Да.
И дисчарч на этом остановился.
То есть это пример дисчарча, который никуда с этого ребра не ушел.
Более того, когда появился новый excess,
дисчарч слово вызвал, то есть вызвался от вершины v.
И какой у тебя теперь excess?
1.
А у меня способность 178.
Значит съел еще 1 и опять никуда не ушел.
И так далее.
То есть получается, что...
Да, то есть как бы уйти...
То есть верное утверждение, что дисчарч обрабатывает ребро v раз.
Верное утверждение, что дисчарч уходит с ребра не более, чем v раз.
Ну 2 v раз.
Вот.
Но не уходит он столько раз, сколько мы делаем не насыщающий push.
Потому что в любом ином случае мы с этого ребра прямо сейчас,
ну или там, так сказать, в следующей четверти уйдем.
Вот.
Поэтому получается...
Поэтому асимптотика получается точная v.e. плюс количество не насыщающих push'ей.
Но я про то, что не насыщающих push'ей у нас по идее 2x2e.
Да.
Да.
Более того, это я и не буду доказывать, что этот алгоритм работает быстрее, чем 2x2e.
Но главным образом, потому что я не уверен, что это правда.
Нет, может быть, это и правда, если вы прям рандомно как-то вершины достаете.
Но там все алгоритмы далее будут базироваться на том,
что вы просто в правильном порядке будете использовать вершины.
Вот.
Вот, например.
Вот знаете, да, у меня сейчас там...
Вот так.
Как же это вот, например, сделать, да?
Ну, на самом деле, да, есть у меня три алгоритма,
но сейчас у меня в голове бродит прям четвертая мысль.
Вот идея у меня такая.
Вот прямо сейчас у меня есть сеть с excess'ами, да?
А давайте я выполню excess, то есть выполню discharge'и от всех этих вершин?
Просто по очереди.
Но не просто по очереди, а в порядке убывания высоты.
Ну, не возрастание.
Вот такая вот у меня идея.
То есть на самом деле, как вы думаете, за сколько я это сделаю?
Вот, нас это интересует с какой точки зрения.
То есть у меня будет сейчас такой эпический алгоритм,
пока есть вершины с excess'ами.
То есть у меня есть вершины с excess'ами.
У меня есть вершины с excess'ами.
Пока есть вершины с excess'ами.
Говорим мы, пробежимся по всем вершинам,
выпишем все вершины, отсортируем их по высоте.
Мы это можем сделать за O от V.
Ну, у нас подсчет там каким-нибудь, да?
А дальше мы их отсортировали по убыванию высоты,
дальше просто пробегаемся по каждой из этих вершин
и тупо делаем дисчаки.
Тогда заметим следующее, что у нас есть три части алгоритма.
Саби по себе эти сортировки,
и дисчарчи, которые делятся в свою очередь на не насыщающие пуши,
и все остальное.
Так, вообразили себе происходящее, да?
Так вот, все остальное работает за V, как мы уже выяснили, да?
Вы учитываете то, что вот это вот V от reflex express'а?
Мы не знаем сколько раз мы это повторять будем?
Так, мы не знаем.
Вот поэтому...
Да, вопрос сколько фаз будет, да.
То есть фактически, да, каждую фазу мы...
Но теперь хочется заметить следующее,
что каждую фазу мы делаем получается за O от V плюс дисчаки.
Нет, O от V лог V.
А, сортировку можно...
Сортировку мы делаем подсчетом.
Можем даже просто завести вектор векторов на все высоты
и записывать туда эксцессные вершины.
Поэтому, боже упаси, тут сортировать за V лог V.
Сейчас V плюс количество... ну, плюс урокы дисчарчей.
Ну, V плюс время дисчарчей, за которые вы будете их делать.
Ну а в дисчарчах, смотрите, глобально в дисчарчах как бы все,
кроме не насыщающих пушей делается за V, глобально, правда?
Поэтому, по большому счету, кроме V, нас интересует только,
сколько мы будем делать фаз и сколько мы сделаем не насыщающих проталкиваний.
Но, правда, заметим маленький приятный факт.
На каждой фазе, в каждой вершине мы сделаем не более,
чем одно не насыщающее проталкивание.
Можно даже точнее сказать.
Обратите внимание, есть маленький приятный факт.
Каждый дисчарч делает не более одного не насыщающего проталкивания.
Да, именно.
Потому что это единственный пуш внутри дисчарчей,
в котором XS может стать равен нулю.
То есть, проталкивание может оказаться еще и насыщающим сверху.
Ну да, по большому счету, да, мы на каждую фазу, получается,
делаем O от V и делаем не более, чем V дисчарчей.
Поэтому, по большому счету, надо теперь просто оценить количество фаз.
И замножить это на V, и вот вам прибавить VE, и вот вам и оценка.
Теперь возникает вопрос.
Сколько?
Ну да, потому что честно говоря, почему мне хочется утверждать,
что этот алгоритм работает за куб?
Потому что у меня возникает жуткое подозрение.
Такое маленькое подозрение.
Что, наверное, на каждой такой фазе уж рилей был хотя бы один довозильник.
Ну, коль и так, то хорошо.
Вот.
Потому что, действительно, у нас высоты меняются не более, чем V квадрат,
тогда получится V куб.
Но возникает вопрос, а так ли это?
Вот как доказать?
Вот действительно.
Если мы сейчас докажем мистический факт,
что на каждом таком проходе хотя бы один рилей будет случиться,
то мы тем самым докажем, что у нас не более, чем V квадрат фаз.
Теперь вопрос, как это доказать?
По убыванию.
Я даже по убыванию.
Чего?
По невозрастанию, формально говоря, да.
Короче, по убыванию.
Так.
Ну вот как же это доказать?
Это правда?
А почему нет?
А что было за условия, что высота изменения не больше, чем V квадрат?
Ну да.
Высота каждой вершины не более, чем 2V минус 1.
Следовательно, как бы рилейблов, то есть увеличение высоты хотя бы одной вершины,
у нас суммарно не более, чем V квадрат.
Вот.
Поэтому и фаз получится не более, чем V квадрат, получится кубик.
Так.
Ну вот.
Но, к сожалению, в конкретно таком алгоритме,
когда мы сортируем вершины success больше нуля,
не особо понятно, почему, собственно, нам хорошо.
Потому что почему не может быть так, что у вас excess избыточная является только одна вершина на высоте 2007?
Да.
Тогда вы как бы фаза будет заключаться в том, что вы как бы все посортируете,
а потом вы из этой вершины сделаете там push и у вас будут excess на высоте 2006.
На следующей фазе вы их там, получается, пихнете с высоты 2006 на 2005, ну и так далее.
И никаких рилейблов нету.
Потому что вы все excess распределяете.
То есть, а мы хотим сказать, что на каждой фазе хотя бы одна вершина.
Да.
Очень бы этого хотелось.
Спрашивается, как же это сделано.
Ну вот.
Так что получается, что текущий алгоритм не фурричит.
А можно ли его допилить до фурричащего?
Сейчас.
Да, да, да.
Который у нас там час?
Так, 16.57.
Так, ну да, лекция у нас, так занятие у нас получается заканчивается в 18.45 получается, да?
Вот.
Так что нет, что-то лекция на этом как-то еще не заканчивается.
Что же делать?
Ура!
Это произошло.
В потоках стало настолько страшно, что дети стараться стали просить геометра.
Да, ну давайте, да.
Итак, действительно геометра.
Алгоритм фурчено по строению диаграммы Воронова.
Да.
Заян Лорда.
Да, вот это будет действительно, ой, я предупреждаю, да.
Чего?
О, как же.
Ну как?
Ну как?
Чего?
О, как же.
Ну как?
Не могу гарантировать, что прям супер полная, конечно, но...
Чего?
Фурчено нет.
Не-не-не, это сканлайновый.
Не, это вот скан, да, типа это, скан-параблы вот это вот.
Да, скан, да, как-то скан там, нет, это, ну да, скан-директриса, во.
Ну как, есть сканлайн, а в данном случае это будет скан-директриса.
Но там просто, что такое парабола, да?
Ну давайте, сдавший Матан, что такое парабола?
Сдавший линал.
Это АЧФ кривая второго порядка, у которой дельта равна 0, по-моему, и еще там на Сигу какой-то.
Ой-ой-ой, это...
Ну, короче, гамма, по-моему, равна.
Это другой.
Это другой определение.
Нет, есть более простое.
Значит, парабола, это геометрическое место точек.
Равно удаленных от заданной точки, называемой фокусом, и заданной прямой, названной директрисой.
Все так.
Ну вот, так вот, там алгоритм, фактически, можно сказать, скан-директриса.
То есть у вас идет такая вот директриса, и у вас там какие-то точки она замела.
И утверждается, что если между каждой из этих точек, точек этой прямой, провести параболу, то если объединить то, что там будет со стороны точки, то в этой зоне диаграмма Воронова уже построена и не поменяется.
Вот. А там эти, то есть там линия, такая береговая линия, такой красивый набор парабол, эти точки будут там по прямой куда-то ехать и иногда натыкаться друг на друга.
Не знаю, я это написал, но у меня уже на десяти точек не работает по точности.
Ну это другой вопрос.
И как это чинить, я не понимаю.
Ну как чинить? Писать рациональных числа, господи.
Ну и, конечно, на питоне сразу, да. Ну там или с длинной респетикой, да. Ну просто длинная респетика.
У нас уже есть рациональные числа.
Это правда.
Ну да. Нет, ну а что там, на самом деле в большинстве алгоритмов, кстати, приказ, на самом деле просто заведите, что у вас все координаты находятся в какой-нибудь поле, например, рациональных чисел.
Или если вам не нравится там расширение поля рациональных чисел, он там корнем из двух каких-нибудь.
Не за мне.
Нет, мне нравится, у меня кандидатская на таком написана, да.
Именно поэтому вы не должны участвовать в опросе на эти темы.
Почему?
Не, ну по всякому чему бы.
Не заинтересованное лицо.
Ну я в принципе заинтересован в том, чтобы вы знали геометрию.
Ну что делать?
То есть как бы геометрия это, к сожалению, это очень важная часть алгоритмов.
Поэтому как бы я, мой долг показывать вам, что, как сказал бы, там в другом контексте, вон она стремна, вона поэтичная и мелодийна.
Соответственно.
Вот.
Так что нот.
Но я надеюсь, мы в этом убедимся.
То есть видишь я вам еще и код, да, как я еще передаю, как пишется геометрия на питоне, да.
Ну ладно, пишется закринелым сишником, но это другой вопрос.
Вот.
Можно вопрос?
Как ты не понял, чем этот алгоритм кардинально от предыдущего отличается?
Ну пока получается ничем.
Только тем, что мы еще кучу лишних действий делаем.
Может там еще и долгая асимптотика испортилась.
Можно еще раз, что у нас происходит, то есть мы...
Нет, асимптотика не использовалась.
Вы думали функцию изчаришь?
Ну почему бы нет, мы делаем кучу лишних сортировок.
Может мы ради этого одного несчастного пуша делаем УАТВ лишних действий.
А, УАТВ, да.
Вот. То есть нет, алгоритм сейчас он строен так.
Мы берем все вершины с эксцессами, сортируем их по за УАТВ, по неубыванию высоты.
И из каждой из них в этом порядке делаем дисчаки.
Но это не работает.
Вот, выяснилось? Нет, это работает, но как бы выяснять, что асимптотика даже не ухудшилась.
Почему она работает? То есть мы мечтали, что на каждой фазе у нас делается релейбл,
но, к сожалению, мы убедились, что это может быть не так.
Как же добиться того, чтобы на каждой фазе релейбл был?
Непонятно.
Да ладно, все понятно. Вот у меня тупая идея.
А почему мы сортируем только вершины с эксцессом больше нуля?
А давайте золотой отсортируем все вершины вообще по высоте.
То есть да, и пробежимся по ним, и сделаем дисчарч, ну там, выбрасываяся с эксцесса тв равно нулю.
Тогда я утверждаю, вот теперь я утверждаю, что в процессе этого прохода релейбл будет.
Что мы еще раз изменили?
Все?
Мы изменили то, что сортировать мы стали и пробегаться не только по вершинам с эксцесс больше нуля, но вообще по всем вершинам.
Вот мне почему-то кажется, хотя это, возможно, не является официальным алгоритмом, поэтому где-то, возможно, я вас обманул.
Вы пока ничего не доказали.
Вот поэтому давайте следите внимательно за руками, а то, знаете, будет обидно, если я вам сейчас докажу алгоритм, потом через неделю я пойму, что он неправильный и буду вас этим парить на экзамене.
Так что, как всегда, вы уже люди опытные, вы уже знаете, что мне верить нельзя, так что давайте внимательно.
Ну, фишка, на самом деле, такая, что в процессе этого, да, хочется, потому что интуитивно думать, что как бы у вас вершинки как-то расположены сверху вниз, и вода в процессе получается идет только сверху вниз.
Но это, конечно, не так.
Почему?
Ну, потому что вполне вероятно, что вы тут опустили, что вы тут, значит, тут действительно все насытили, то есть там обнулили excess, спустили тут excess, тут спустили, а тут вот стали из этой вершины спускаться.
Но выяснилось, что там ребер не хватает, поэтому вы неожиданно выполнили disk charge и поднялись выше.
Понятно, да?
То есть вот такая неожиданная идея.
Что еще раз?
Выполнили relabel.
Ну, просто что вы тут шли-шли по этому списку, на этой высоте прошли, на этой высоте прошли, а на этой высоте вот взяли вершину, да, но прежде чем у нее вода кончилась, у нее ребра кончились.
Тогда мы неожиданно сделали relabel и вернули воду на эти высоты.
Ну, может быть такое, да?
Ну, на самом деле, само по себе это ничего, да, но это, в принципе, говорит о том, что relabel произошел.
Что?
Что?
Ну, если эта вершина тут поднялась, то relabel произошел.
А теперь давайте посмотрим, что происходит, если relabel прошлись по всему списку и relabel не произошло.
Как такое вообще может быть?
Идем по этой высоте, вся вода спустилась вниз.
Пробежались по всем этим вершинам, всю воду тоже спустили вниз.
Значит, спускаем, спускаем, спускаем, у нас два варианта.
У нас два варианта.
Либо где-то relabel все-таки произошел, либо у нас весь excess куда-то.
Потому что, заметим, excess у нас, эти push и excess никуда не девают, они просто спускают вниз.
То есть мы там, знаете, сверху вот так вот давим.
Чем мы обычно давим в этой ситуации?
Ну да, видимо прессом каким-то, да?
То есть такой пресс.
Значит, давит у нас excess, как бы прижимается, прижимается, прижимается, но у нас правда есть сливное отверстие, называется stock.
Какое совпадение-то, да?
Вот.
Вот, и у нас два варианта.
Либо мы где-то сделали relabel, кто-то не выдержал и взорвался.
Взлетел, в смысле, там.
Да, либо мы всю эту воду аккуратно слили в stock и, в общем-то, на этом алкаритм закончился.
Потому что если мы весь excess слили в stock, то мы победили.
Ровно в этом месте.
Да.
Тогда, получается, все фазы, кроме, может быть, последней, как мы делаем вывод, получается, relabels в себе содержат.
Последние фазы, когда все excess стали равными нулю и мы слили всю воду stock.
Ну, получается так, да.
У нас разница в том, что мы, типа, могли в сессии быть нулем, но когда мы спустили тогда сверху воду, мы стали не нулем.
Да.
Нет, ну, нет, проблема в том, что просто из этой вершины мы тогда тоже попытаемся железно сделать диски arch.
А раньше на предыдущих фазах мы бы этого не делали, потому что она у нас в список не попала.
Да, то есть, просто проблема в том, что он в начале не был нулем, но потом стал.
Вот.
Чего мы?
Да.
Да, то есть, заметим, что фишка в том, что в процессе все вершины, все вершины, все может меняться.
То есть, проблема в том, что, конечно, высоты, конечно, в процессе могут меняться, они там могут сортировку эту нарушать.
Но, как бы, нас это не волнует.
То есть, как бы, вот это, то есть мы как бы, то есть у нас пресс либо спускает вниз, либо кто-то взрывается и взлетает вверх.
Более того, может так случиться, что вершина взлетела в...
А, хотя нет, не может.
там хотя нет и она взлетела век мы там куда-то попихали воду но как бы ничего
страшного с этого не произошло вот так что такая радость нет это не
официальный алгоритм по моему но я за или это это алгоритм я то ли придумал то
ли называется вспомнил из подсознания только что но если вы боитесь сейчас я
вспомню на этот раз реально вспомню то что есть в кормене официальный
алгоритм
смотреть нет а что вы хотите от формальности
ну хорошо можете еще раз повторить я скажу где ну утверждение такое нет но утверждение
такое что когда вы идете по вершинам в порядке бывания высоты то это пусть
не было тогда я утверждаю что просто все вершины остаются на тех же высотах только
excess у них равен нулю то есть после того как вы сделали discharge от вершины это
как бы ну excess у него по любому равен нулю так вот утверждается что если
релейбла там не будет на этой фазе то в общем-то этот excess ничем кроме нуля
больше и не будет потому что мы дальше будем рассматривать вершины не выше нас
тогда предположим что мы прошлись по всем вершинам то есть мы вот проходит
прошлись по 57 вершинам допустим и релейблов не произошло тогда у этих 57 вершин значит
соответственно excess остается нулевым у всех не только у последней но и у всех остальных
вот но тогда получается предположим что мы сделали полный проход и релейблов не
произошло тогда получается что ни у одной вершины вообще excess нет то есть получается
могла произойти такая фаза без релейблов могла но она одна и она последняя так что
поздравляю мы выиграли тогда получается следующее что у нас фаза что у нас есть
фаз один одна последняя плюс количество релейблов но не более чем количество релейблов а именно
суммарное количество релейблов у нас в квадрат следовательно у нас было в квадрат фаз и
сами по себе то есть и получается все это работает за ну может так сказать за в куб
плюс суммарное время конкретно дисчарчи вот но дисчарджи у нас равно дисчарджи у нас
работают за по факту от ве плюс количество дисчарчей количество пуши которые да но такой
пуш на в каждом дисчарже не более чем один то есть вот это вот общее утверждение на самом деле
это вот можно оценивать сверху как от ве плюс количество вызовов дисчарки вот так я еще напишу
а вызовов вызовов у нас в куб количество фас на в буквально ну вот и все то есть фас в квадрат
значит дисчархи мы вызывали в окуп но если еще и подгонять что нет кратных ребер то потом
вообще победили то есть мы вообще сразу умнички вот так что такая радость красивая вот так
что есть вот такой красивый алгоритм спуска нот так сказать алгоритм ужимания вода там
придавливание воды прессом на это уже даже не проталкивание потока просто просто уминание
потока да да упихивание да да упихивание потока сток то есть либо пихолка порвалась либо соответственно
вот это вот либо все пихнули вот как-то так так что это был такой это был наш первый алгоритм
завыкуб слющайте другой алгоритм значит официальный алгоритм который предлагает
корман называется поднять в начало аюшки
делаем
мы не учитываем за сколько делается сам релайбом мы просто считаем сколько раз мы вызовем
мы при чем тут нет мы уже все учились что как бы суммарно все эти дисчарки работают
плюс сколько дисчарки раз вообще вызывались сюда входит даже вот эти дисчарки которые
пришли выяснили что excess от в равно нулю и ушли вот все это мы уже отдельно выяснили это не
зависит от алгоритма потому что да у нас не больше в квадрат фас а в квадрат фас у нас потому что
там фазы считаются на каждой фазе кроме последний есть релайбл логика такая значит смотрите
слющайте другой алгоритм
другой алгоритм может звучать так
смотрите красиво сейчас возможно сейчас будет красиво то есть алгоритм такой запишем все
вершины в список изначально в рандомном порядке значит идей теперь такая значит типа ваил ну пишем
там ваил тру значит сейчас другой алгоритм все забыли предыдущий сейчас вот новый алгоритм
здесь ваил тру идем слева направо по списку этих вершин и делаем дисчарча делаем делаем делаем
делаем делаем делаем делаем опа и тут неожиданно обнаружилось что в процессе этого дисчарча был
сделан релайбл вот понятно да так вот что мы делаем мы перетаскиваем эту вершину в начало
списка и начинаем заново мы видимо останавливаемся да останавливаемся как только выяснилось
неожиданно что мы прошлись по списку и релайблов не было мы останавливаемся мы уже доказали что
ну не совсем мы доказали что если мы остановились то мы действительно нашли не факт а но хотя да а вот
нет ну но формально говоря не факт потому что могло так случиться что тут вот есть вершина на
высоте 57 у которой мы там запихнули весь там весь excess допустим да без релайблов а потом
но потом сделали тут тут какой-нибудь высота 58 из которой мы пихнули там excess сюда дополнил условно
да и в принципе тогда само по себе это еще не означает что мы победили это алгоритм поднять
начало там конкретных авторов я не назову да но как бы алгоритм описан в кормане поэтому можно
его считать официально в кормане описан я сильно сомневаюсь что автором является хотя бы кто-то
из четырех авторов корма но соответственно хотя но нет да но кстати да но там нет да но но
проблема в том что то но проблема в том что там нет тарьяна там кормон лейзерсен ривисты штайн
так что вы как это же никакой тарьян к этому учебнику руку не прикладывал почти наверное там
есть какая-нибудь благодаречка там задолго и плодотворные беседы но автором книжки он не
является вот просто по вот в каком-то списке по каком-то списку изначально он сформирован
рандомно а в процессе он видоизменяется вот так капсом как повезет но изначально у нас и по
возрастанию побывали потому что все вершины вообще нулевые может так ну может так показаться
за сколько мы сказали что работает одна фаза в предыдущем но одна фаза работает
за от ве плюс сколько дешевле мы сделали конечно но по факту мы за вот вы отсортировали все вершины
по высоте по не убывание потом пробежались и вы и в каждой вершине в один раз вызвали диск чач
но там будет от от ве плюс время диск чачей то есть получается если мы доказали что фаз
фаз всего в квадрат то тогда получается время алгоритма в куб плюс суммарное время все
которые нам потребовались а суммарное время вообще в сердце тяже у нас так и так вот такое вот
какой алгоритм вот этот или сейчас давайте возвращаемся в предыдущем алгоритм щас сейчас
все скажу да то есть это не совсем тривиальная идея но я утверждаю следующее пусть у нас
на самом деле в процессе этого алгоритма то есть на самом деле то есть там все тут
действительно не тривиально пока не выяснится маленькая приятность приятность звучит так то
нет пусть в процессе есть ребро в и где тут у него остаточная пропускная способность
больше нуля вот так я напишу да то есть есть ребро то есть читать это надо так и
прям текстом писать но пусть в процессе идет ребро от из ув с пропускной способностью больше
нуля остаточной да это я говорю про новый алгоритм тогда как сказал бы классик нет не так
именно там и поняли что надо собирать квн да были я Александр Васильевич ну и так далее вот это
все да да нет нет ладно мне не получается так вот тогда короче говоря позиция в списке вот
этом великом списке от у меньше чем позиция в списке а тв про новый тогда переключается мы
но мы уже новый алгоритм рассматриваем да под названием алгоритм новый нет он там будет как
поднять в начало потому что когда мы наткнулись на ревейбл то на вершину с ревайлом то мы ее
поднимаем в начало мы делаем пуши ну то есть мы идем делаем 10 10 10 как только 10 изменил
какую-то вершину мы как бы перетаскиваем вершину в начало и начинаем заново вот вот утверждается
но есть у нас вот такое утверждение что оказывается все ребра про котором реально
можно сделать пуш а нет я наврал да и да да и по да и по этому ребру можно сделать пуш
ну то есть без требования правда я вот так говорю что без требования допустим
excess от в больше 0 нет но на самом деле включает ну хорошо давайте да то есть на самом деле да я
да то есть нам недостаточно что да просто это изначально не так вот допустим что вот на ребро
то есть как бы у него есть пропускная способность больше нуля остаточная и
по высоте тут тоже все в порядке то есть ашат у равно ашат в плюс один да excess от у мы не проверяем
ну условия нет не только условия на ашке и условия на пропускную способность да но оно как бы осталось
условия на ашке говорит что ашат у равно ашат в плюс один где вы тут видели условия на
релайбл в смысле что подразумевает чего ну понятно что если высота какой-то вершины больше нуля
значит какой-то релайбл когда-то был просто потому что у нас изначально ну и ну нет туда нету я
изначально у вас нет ребер по которым можно сделать пуш да кстати интересный факт в этой
концепции в принципе изначально нет ребер по которым можно сделать пуш вы изначально вынуждены
сделать у конь вершины какой-нибудь релайбл то есть как бы все вы начнете по-любому с релайбл
а вот что вы будете делать дальше это вопрос вот так вот но почему же обстрел вот это вот
перспективе будет верно ну давайте подумаем ну пусть у нас на перед началом очередной фазы это
все верно да тогда заметим что пока у нас нет релайбла все удобно хорошие ребра назовем такие
ребра хорошими как смотрели слева направо так и остались правда нет это в самом самом самом начале
я сказал сейчас в начале итерации они в начале всего алгоритма то есть пусть мы сделали 179
итерации вот делаем 180 то есть пусть перед началом 180 итерации как бы все ребра реально вот
хорошие ребра слева направо смотрели понимаете да но заметим что в результате пока не в результате
пуша хорошее ребро не появится хорошие вы появляете ток в результате релайбла правда поэтому
до релайбла хорошие ребра только переставали быть хорошими ну если они насыщались и вот
произошла ситуация вот взяла и произошла релайбл перешел сюда то есть мы неожиданно в какой-то
вершине сделали релайбл тогда мы из этого можем сделать маленький гордый вывод нет хуже ну нет
могли ли из нее в результате релайбла появится хорошие ребра они могли появиться нет это не
нет ну для нас важно сейчас они могли появиться боль того не могут вести как сюда так сюда но
это мы лечим тем что перетаскиваем вершину в начало более круто возникает более круто на
самом деле тут другой факт а что если в эту вершину из этих вершин вели хорошие ребра
и тогда этот перетаскивание собственно нарушит нам вариант могли вести нехорошие но после
прибавления стать хорошими но может и так стать потому что те которые были хорошие мы прибавили
кашки и они точно стали плохими но не факт может мы же мы же их не пихнули может они оставят как
были хорошими так как до релайбла не могли стать оставаться но в любом вот ну да я тут так я не
знаю возможно я не понимаю что имеешь в виду что как бы либо бы все правильно но на самом
деле все еще более очевидно либо мы с тобой говорим о разных вещах я имею в виду те ребра которые
по которым можно было сделать пуш в этот момент после релайбла по ним уже нельзя сделать пуш
потому что нас изменилось разных способов но на самом деле да но могли бы явиться какие-то новые не
могли но тут фишки такая да на самом деле я утверждаю что после релайбла в эту вершину
хороших ребер не ведет то есть могли испортиться какие-то хорошие ребра кто в нее вели раньше но
после релайбла они естественно все испарились почему потому что раньше они вели вниз на 1 а тут
вершина это увеличилось и ребра теперь ведут не вниз более того в принципе на самом деле если
после релайбла вершину ведет хорошие ребра вот сверху то тогда получается что до релайбла это
ребро было еще более сверху то есть разница по высот была больше чем 1 и смотрела вниз а такого
у нас не бывает просто на этапе определения технологии но получается уже победили да все
то есть не сильно сложно да ну да все а дальше делаем как в нашем лагарике потому что мы знаем
что все пуши направо значит эксцессы все идут из какой-то вершины нашу вершину которая мы в
начало мы нашу подняли но стало ну и чего но теперь она ведет как вы
чего ну смысле вот это ребро в неправильном направлении но мы это мы полечили перетащив
эту вершину в начало мы доказали что таких ребер нет но если перед релайблом было такое
ребро то после релайбла оно перестало быть хорошим но тогда если если оно после релайбла
смотрит вниз на 1 то перед релайблом и смотрела вниз на 2 3 или так далее а таких ребер у нас
не существует в природе да просто смотрите определение технологии там на этапе определения
технологии пишут что таких ребер не бывает и эксцессы тут вообще ни при чем просто у нас все
ненасыщенные ребра смотрят вниз не более чем на один то есть там вот туда вот совсем глубоко они
не смотрят вот примерно вот такая вот диспозиции я ция
вот так пуши обратно и ребро пуши обратный ребро и чего
но ребро обратное ребро не может быть хорошим потому что оно смотрит вверх там все учтено
это все предусмотрели все да так ну что тут еще есть
но и это еще не все но там была идея не могли когда вы делаете пушь появляется обратное
ребро может оно но вот но то есть оно появилось оно стало ненасыщенным но хорошим оно от этого не
стало то есть оно приблизилось к хорошести но как бы нужно сделать что-то еще то есть как бы
что-то еще это и это что-то еще тут придется пострадать а то да а то знаете бывает это грустная
история там всякие ой так что сколько времени то вообще так это мы должны закройки а пол шестого
ну нет я просто начинаю прикидывать что но вот что вам рассказывать за оставшееся время ну на
самом деле нет ну как сказать нет у меня как бы на самом деле есть еще два алгоритма которые
ну они тупее пишутся
алгоритм 4 но я нет я вам так скажу по-хорошему говоря как следующие два алгоритма не должен
вам рассказывать то что они у вас там в домашнем задании в качестве теоретической задачи ну вот
ну хочу ли вам давать еще две теоретические задачи учитывая что я еще предыдущие не
проверил да так что да давайте лучше поведать лучше повеселимся я вам расскажу их сразу нет
по этой локе вам должен видимо ход как у марма хишвара но этих трех индусов с блокирующим потоком
то нет тоже выкуп но сильно более радостный выкуп я вас уверяю так вот ладно включайте третья алгоритм
правильно ли я понимаю что утверждается что на алгоритме за ве на поток в целом
чего я понимаю что алгоритм потоком за ве настолько убойный что немцам можно умереть
ну скорее всего да честно что я его не ботал я не знаю может он простой нет да но это учитывая
сколько там шагов было сделано до него как-то да чем более того насколько мне известно принципиально
других концепции относительно вот отличных от того что мы вот сейчас с вами обсудили на самом деле
нету да нет ну там нет более но там что-то более аккуратное там будет наверно но я не знаю то
есть я догадываю только что как бы и пока у нас вроде алгоритмы базируется либо на этом либо
на блокирующих потоков чем по моему чемпионской все-таки с блокирующими потоками работают ну вот
но возможно там какие-нибудь дополнительные у пехоны есть вот ну там всякая возможна потому
что там на самом деле как бы есть потому что если верить в современные алгоритмы то возможно
современные алгоритмы начинают быть все-таки вероятностами каким-то вот то есть это как бы
тоже на самом деле отдельно веселый чемпионат все-таки там по вероятности круче конечно если
вы придумаете как искать поток заве плюс е без вероятностей но звучит невозможно ну почему
просто но без е не получится вам считать ребра надо не можно не считывать ответ просто 228
337 всегда если ну нету если вы докажете эту мистическую серию вот да ну да правда правда будет
это к сожалению не о потоках а казуистики надо значит включайте алгоритм алгоритм звучит так
нет я вам сейчас дошкод напишу вот так лст нет ладно не лст ку да очередь такая
да только не путать скушка пода куточка пушь от в
чего
тут не сложно относительно всего остального сейчас вообще не сложно вот
не
То есть фишка такая, мы заводим очередь и поддерживаем
вариант, что в каждый момент времени все вершины, у которых
excess больше нуля у нас находятся в очереди.
Excess у нас никогда не бывает отрицательным, это мы на базе
предпотока прописали.
Но видите ли, здесь я пишу про start, а здесь я пишу про
finish.
Ниже перед тем как мы прибавили дельта f, да это плюсик, он
мог быть, мог быть, а ну хорошо, ладно, не-не-не, все еще проще.
Так, давайте так, нет, лучше просто проверить, что это
финишная вершина, она не исток и несток, да, спасибо
за замечание, да, это очень важно.
Нет, самый тупой, где мы просто ищем финишную
вершину и делаем дискчатч, он во квадрате, и мы ничего
лучше не доказали.
То есть мы придумали две примочки, в первой примочке
в каждый раз мы прибираемся по вершинам в порядке убывания
высоты, потом была примочка хранимых в листе, и как
только делали relay, там дельтат делал relabel, добавляем, перетаскиваем
вершину в начало и идем заново.
А это новая идея, третья.
Она называется так, запикиваем в очередь все вершины с
эксцессом больше нуля и больше того в будущем поддерживаем
этот список.
То есть поддерживаем, обратите внимание так, что я тут написал,
по сути я написал так, если у вершины появился не нулевой
избыток, пихнуть ее в конец очереди, да, это очень важно,
именно в конец.
Вот, пятая.
Вот, так вот такая красота.
Так, ну давайте думать.
Да, как сказали бы в шоу, может быть я ошибся.
Как это алгоритм работает?
Ой, как называется?
Чтобы я знал.
Алгоритм Сочи.
Да, какой-то алгоритм Сочи.
Я хочу по цифрам запоминать.
Ну да.
Нет, пожалуйста, не надо на экзамене по цифрам.
Ну господи, назовите это алгоритм номер три.
Ну шо?
Я не помню, какой номер три.
Ну, у нас было три алгоритма, первый, второй и третий,
логично.
Ну хорошо, алгоритм про очередь.
Вот, да, так понятно, хотя бы.
То есть алгоритм СЗВ Куб, да, сортировка по высоте,
поднять в начало, с очередью и будет еще одна.
Даже не знаю, там как назвать, я вообще не знаю.
Ну это было бы слишком круто, если бы вот это еще часть
кого-то называлось.
Ну может, я не знаю, кто-то это придумал.
Арнольд.
Шварцейнер.
Не-не-не, ну у нас нет принципа Арнольда, не принцип Шварцейнера.
У Шварцейнера в этом месте принципов нету, да.
Ну да, не буду я отвечать.
Так, чего-чего-чего, это вы над точно алгоритмом думаете?
Нет, если у вас тут сейчас гомиобор, то есть вылезет,
это вообще весело будет, да.
Зачем изучать топологию, правильно, она может возникнуть
на алгоритмах, да.
Ну по-разному, знаете, всякое бывает.
А потом как выяснится.
На квали, геометы натуральные.
Ну это да.
Ну вот, внимание, вопрос.
Почему тут вообще это может произойти?
Что алгоритм может работать дольше, чем ЗМВ-куп?
Мало релейблов.
Ну, кажется, да.
Нет, очень хочется, конечно, так и сказать, что, наверное,
если бы мы доказали, например, что между релейблами
вершина вызывается не более чем один раз, то это, конечно,
был бы кайф.
Но есть одна проблема.
Это не так.
Потому что тут же мы же вершину изначально пихаем
в рандомном порядке, правда?
Ну и даже если бы мы их пихали не в рандомном порядке,
они потом рандомизируются.
И поэтому там непонятно, почему нельзя.
Сейчас из вершины мы очистили, а потом пришла вершина
сверху и там вернула и не нулевой эксцесс.
Не, нам же просто нужно, чтобы между релейблами
расстояние было от В.
Может нам, скажем так, может нам нужны и это.
Но на самом деле, да, если вы решали эту задачу
там дальше написано указание.
И там предлагалось рассмотреть потанцевал.
Потанцевал звучит так.
Ну, короче, вы его уже видели.
О.
Ладно, бро, этот потанцевал вы видели.
А вот этот не видели.
Ну, кто-то у нас жужжит.
Сейчас я прошу про синюю.
Эй, ну, у меня пары.
Ага, все понял хорошо.
Пока.
Вот.
Чего?
Это сейчас о чем?
Классно.
А любовь тут при чем?
Понятно.
Вот.
Чего?
Да.
Вот.
Ну, давайте смотреть.
Ну, вот.
Что вы жути, я не понял вообще.
Да, Миша просто свое импультирует.
То есть, потанцевал не больше, чем папа.
Ну, вообще, да.
Но тут фишка не в этом.
Ну, вот.
Вот.
Вот.
Вот.
Фишка, на самом деле, в другом.
Собственно, как этот потенциал...
Ну, вот.
То есть, давайте подумаем.
Как этот потенциал вообще изменяется?
Не факт.
Он, к сожалению, он скотин такая...
Нет, он скотин такая бывает и уменьшается.
Ну, это не важно, насколько он уменьшается.
Ну, то есть, он может уменьшаться.
В верхней вершины сделали дисчат.
И вот.
Вот.
Тогда, в принципе, да.
То есть, тогда и без релейбла.
Тогда, как бы, потенциал уменьшился.
Вот.
Но фишка...
Ну, вот.
Поэтому исследовать тут надо не это.
Тут выясняет вопрос.
Насколько суммарно этот потенциал мог увеличиться?
За все время?
Да.
Ну, в квадрат?
Сейчас.
Нет.
Ну, видимо, во в кубе.
Ну, не очень.
Не очень большой в квадрат.
Нет.
Там меньше, кажется.
Да.
Ну, в свой дот.
Ну, я-то хорошо суммарно.
Ну, смотри.
Если у тебя...
Ну, утверждение такое.
В высоте этой вершины появился релейбл, который увеличил
эту вершину с 57 до 179.
Тогда я утверждаю, что потенциал увеличился от этого не больше
чем на 122.
Ну, да.
То есть, в квадрат.
То есть, суммарно получается, потенциал увеличивается
не более чем на в квадрат.
Нет.
Ну, вообще-то говоря, без релейбла он разве не увеличивается?
Ой, наоборот.
Короче, может ли он увеличиваться без релейбла?
Так, он не увеличивается без релейбла.
Вот.
Но он без релейбла, он увеличиться не может.
Почему?
Ну, потому что, если вы делаете, например, пуш, то что может
появиться?
Пуш с высоты 2007.
Тогда все, что у вас может произойти, у вас может
исчезнуть вершина на высоте 2007 и может появиться вершина
на высоте 2006.
Но потенциал был не меньше, чем 2007 и как бы там больше
от этого стать не может.
То есть, это очень удобно.
Так вот, теперь, значит, оценка тут более хитрая, кстати,
может вообще.
То есть, надо подумать.
Может быть, на самом деле, неожиданно выяснится, что
самый первый алгоритм у нас на самом деле работал.
Потому что фишка на самом деле такая.
Знаете, как мы будем рассматривать?
Вот помните, у нас был БФС?
Ну, нет, БФС.
БФС.
Хуже.
По-моему.
А, нет, в прошлом семестре, да.
Да-да-да.
БФС был в прошлом семестре, равно как и ДФС.
А, ну да, в первом семестре мы фуриатиной баловались.
Да-да-да.
Так вот, идея такая, смотрите.
Вот у нас, смотрите, вот я сейчас нарисую.
Пусть это изначальная очередь.
Заметим, что алгоритм устроен так, что мы пробежим...
Если вот очередь изначальная была такая,
то мы пробежимся по всем вот этим вершинам.
Понимаете, да?
Теперь.
Но за то время, пока мы будем по ним пробегаться,
у нас набегут еще.
Да?
Так вот, давайте называть это там фаза 0.
Это фаза 1.
Это фаза 2.
Ну и так далее.
То есть следующая фаза это те, которые стали большими?
Ну, то есть фаза и плюс один, это те, кто были добавлены в очередь во время фазы и.
То есть, может быть, кстати, вершина вполне может быть и в этой фазе, и в этой фазе вполне.
Ну потому что мы ее тут подисчарчили,
а потом из этой вершины неожиданно в нее все равно excess пришел.
Но я утверждаю, что в каждой фазе каждая вершина поучаствует не более чем один раз.
Утверждение, в каждой фазе каждая вершина участвует не более чем один раз.
Ну еще раз, фаза 0 это то, что было добавлено в очередь изначально вот здесь.
Фаза 1 это то, что было добавлено в очередь, пока мы обрабатывали вершины вот эти вот фазы 0.
Фаза 2 это то, что будет, когда мы закончим с фазой 1.
Вот.
Хорошо, если у нас вершина лежала допустим, ну то есть мы сначала.
Ага.
Еще раз такое утверждение, что в каждой фазе не более одного раза встречается.
Я утверждаю, в каждой фазе каждая вершина встречается не более чем один раз.
Ну теперь фазы делятся на два типа.
Первый тип фазы. Внутри ее произошел хотя бы один релейбл.
Таких фаз у нас очевидно не более чем в квадрат.
Логично, да?
А теперь внимание, вопрос. Что происходит в тех фазах, когда релейбла не произошло?
И зачем я?
Все стекает куда-то вниз.
И к чему это приводит?
Да.
Утверждение, если на фазе не произошло релейбла, значит потенциал на фазе уменьшился.
Почему?
Потому что рассмотрим самые ноты.
Хотя нет.
Стоп.
Уменьшился ли?
Точно не увеличился.
Да, он не увеличился.
Но это, конечно, да.
Но мы могли взять потенциал равен нулю, и он тоже не увеличится.
Это не очень интересно.
Сразу релейбл сделать?
Но тут фишка такая.
Очень хочется сказать рассуждение, что у нас есть самая высокая вершина,
то есть самая большая высота, на которой есть эксцесс,
и за время этой фазы со всех этих вершин вода стекет куда-то вниз.
Остается только один маленький вопрос.
А кто сказал, что эти вершины в эту фазу попадут?
Что?
В этой фазе будут все вершины, которые на момент начала фазы будут...
Да.
То есть на самом деле помним, мы очередь создавали не просто так.
Мы поддерживали, что в каждый момент времени в очереди находится все, из чего есть эксцесс.
Поэтому на момент начала фазы тут находятся ровно те и только те вершины, которые находятся в этой фазе.
Поэтому на момент начала фазы тут находятся ровно те и только те вершины, из которых эксцесс больше нуля.
Это означает, что ко всем им дисчарч просто в рандомном порядке применен будет.
Да.
И это означает, что вода...
То есть это означает, что мы из всех верхних дисчарч вызовем,
и если там не было релейблов, то значит просто вода...
То есть здесь избытка не будет, он переместится куда-то вниз, а выше не станет.
Так что вот такая красота.
То есть смотрите, как получается.
На самом деле этот алгоритм должен быть очень похож на начальный.
Ну ладно, договорим, что фаз у нас тогда релейблов в квадрат,
а без релейблов у нас потенциал меняется, но он суммарно увеличивается не более чем на в квадрат.
Ну на 2 в квадрат.
Тогда получается, что и второй фаз тоже был не более чем у от в квадрат,
значит фаз всего от в квадрат, значит поздравляю, у нас в куб опять ура.
Понимаете, да?
А теперь давайте вспомним, что у нас был за алгоритм самый первый.
Когда-то давным-давно, час назад, полтора.
Что мы делали?
Мы сортировали по убыванию высот.
Да, мы сортировали по убыванию высот.
То есть мы стремились, чтобы этот потенциал стремительно уменьшался.
То есть просто суть та же.
Но на самом деле суть у этих алгоритмов одинаковая.
Просто на каждой фазе тут берутся вершины.
То есть по факту мы этот алгоритм могли заменить.
Вайлтру, возьми, выпиши все вершины, у которых excess больше нуля,
и по очереди пропихни.
То есть самая-самая первая версия, которую мы не доказали,
на самом деле прекрасно работала.
То есть главное просто, чтобы выписать список,
а потом по нему пробежаться и сделать все дисчарки.
Причем нам абсолютно плевать, в каком порядке.
То есть на самом деле доказательство абсолютно такое же.
То есть приводит это к нашему четвертому алгоритму,
который вообще квинтэссенции этого всего.
То есть на самом деле,
то есть на самом деле вот алгоритм 4,
это вообще сейчас просто в три строчки напишу, смотрите.
В общем, пока у кого-то есть избыток, хоть у кого-то, да,
дальше прям тупо пишем.
Дальше прям тупо пишем.
For v, просто пробегаемся по всем вершинам.
Просто хоть прям фориком от 1 до n, дисчарч от v.
То есть как убедились из предыдущих фаз,
даже этот алгоритм уже на самом деле работает в закуп.
Ровно по тем же причинам, по тому же потенциалу.
То есть в принципе вы тут можете даже внутри каждой фазы
даже рандом шафлить, в принципе.
Ну, если так вам там это таймлимита вообще девать некуда.
Вот, но суть.
Не очевидно, потому что мы там брали только вершину,
которая больше 0.
А здесь разницы никакой.
Мы доказали, что у нас не более чем v квадрат фаз.
Значит у нас вызовов дисчарч и v куб.
Вот.
Ну, просто дисчарч, который вызвался от xс,
он просто сразу выбросился с криком опа.
Да, опа халява.
Вот, так что получается четвертый алгоритм.
То есть на самом деле первый алгоритм, да, видимо,
не особо рассказывал, просто потому что на самом деле
это еще более сложная версия вот этого вот.
Хотя-то, то есть там вот.
Ну, то есть видимо, идея на видимо,
видимо придумывался он так, но как бы выразился
в итоге вот в это вот.
Ну, пишется это совсем.
Ну, то есть получается вам нужно написать xс.
Пуш релейбл и дисчарч.
Ну, по модуле этого, в смысле, да.
Нет, в смысле, надо писать сеть, ну, правильную сеть,
надо написать пуш, написать релейбл, написать дисчарч с фитераторами,
написать, ну, это я практически весь код написал содержательно.
Кроме самой сети.
Ну, все равно там не очень сложно.
То есть там по сравнению с молхотовым кумаром и чешварем
на самом деле ничего сложного, ладно.
Так, ладно, есть ли тут какие-то вопросы?
Чего?
Ну, во-первых, непонятно, что было раньше, технология Голберга или это.
Во-вторых, алгоритм молхотов кумару и чешвариш пишется не очень.
Ладно, давайте, сейчас тогда у нас осталось не сильно много времени,
сейчас мы второго перерыва делать не будем, я вас просто,
сейчас я просто расскажу о алгоритмом молхотов этих индусов,
а потом мы поговорим про любовь.
Так, вопрос.
А что вот из этого на практике работает лучше всего?
Ну, по ситуации.
Я имею в виду относительно каких-то константов.
Ну, я бы сказал, что по константе это, конечно, должно быть лучше.
Ну, мне так кажется.
Так, конечно, надо тестировать, потому что дальше зависит от того еще,
потому что молхотра может выигрывать за счет того, что там каждая фаза,
как мы сейчас убедимся, там работает просто за В квадрат плюс Е,
поэтому буквально там алгоритм работает за Куб, ну в смысле за Куб плюс В Е.
Вот, но количество фаз может быть не В, оно может быть меньше по корзановским причинам.
Ну, это все корневуха корзановским.
Поэтому, в принципе, молхотра может работать быстрее асимпатически.
Но по константе, то есть этот, конечно, тут Кубик,
но тоже, конечно, может быть не самый железобетонный, конечно, но в принципе тоже.
Но, как вы видите, тут пишется проще, и константы тут особо негде терять.
Вот, понятно?
Значит, смотрите.
Итак, возвращаемся в концепцию блокирующих потоков.
Так, давайте, это я все ликвидирую.
Вот, хотя по сравнению с блокирующими потоками не могу сказать, что это все безобразие, на самом деле.
То есть, как я уже сказал, это прикол, как мы вот, мы тут делали разбор первого контеста,
выяснилось, что там есть задача на бинпоиск и поток,
причем сеть там такая, что как бы, ну там, то есть как это, 200 вершин 200 в квадрате.
Вот, но кто-то на самом деле просто написал вот это.
Вот, очень удобно.
Вот, так что в принципе такая.
То есть, на самом деле, как ни странно, то есть это в олимпиадах использоваться может.
Вот, а может и не использоваться.
Да, как правила практики конкретно, конкретно там, видимо, то есть там если аккуратно написать,
то там как бы доказательно день с масштабированием зайдет, естественно.
Ну, хотя день с масштабированием хуже будет, потому что он работает за VE локце при E равно V квадрат.
Это получается V куб локце.
То есть получается это в локце хуже, чем вот это за тупой V куб.
Вот.
Ну там просто учитывая, что там надо еще на бинпоиск домножать, поэтому получается проблема.
Значит, идем дальше.
Итак, убираем технологию Голберга.
Вот.
Вот.
Вот.
Так так так так так так так так так, так так так как так так так так, так так так так, так так так так так, так так так так так, так.
Ага.
Угу.
Мы выяснили, что сортировать ашки не надо.
Мы выяснили, что?
Что в нашем эфирном алгоритме сортировать ашки не надо.
Сортировать...
Ну, на самом деле нет необходимости.
Просто прибегайтесь по всем вершинам тупо,
и на самом деле будет еще круче.
И дальше вспоминаем блокирующие потоки.
Помнишь про блокирующие потоки?
Давайте еще раз вспомним.
Что такое концепция блокирующих потоков?
Это когда вы строите...
Пока у вас есть путь от СТ, вы строите там
BFS-ом слоистую сеть.
Ну, BFS запускаете
по всем ненасыщенным ребрам в остаточной сети.
И в ней ищете
блокирующий поток. То есть поток
такой, что
в этой именно слоистой сети
пути от СТ в Т нет.
В слоистой в том плане, чтобы
путь из слоя в слой вот так ходил.
Вот. Воспомнили?
Нет, просто если вы сейчас не воспомнили, то
то, что я буду дальше рассказывать, это черная магия.
Так, воспомнили?
Так, ладно, воспомнили.
Или уже умерли в телефоне, да?
Понятно.
Вот.
А жаль, сейчас весело будет.
Вот.
Значит, смотрите.
Итак, жил-был BFS, ищем блокирующий
поток.
Значит, идея такая.
Помните, у нас в теоремах Корзанова был
еще один потенцивал.
Помните, какой?
Даже 3.
Был входящий потенциал.
Помните?
P IN от V, это значит
сумма всех вот там
ну, допустим там
там, допустим, C от E входящих.
То есть E только финиш равновое.
То есть был
аналогичный исходящий потенциал.
И, соответственно, был просто
потенциал вершины как минимум.
Минимум из
P IN от V и P OUT
от V.
Вот. Было дело.
Так вот.
Алгоритм работает
что-то диницевское в нем есть,
но сейчас
будет очень хитрый.
Смотрите, вот, по идее, что такое потенциал?
Вот давайте считать этот потенциал,
относить на пропускные способности прямо сейчас
в вот этой вот слоистой сети.
Так вот. Идея такая.
Значит, Малхотра, Кумар, Вахишвари.
Каварат.
Смотрите. Давайте рассмотрим такие потенциалы.
А к ним еще добавим потенциал,
что
значит P от S
это будет типа только исходящий потенциал.
Ну, здесь мы считаем, что
входящий потенциал V
равно плюс бесконечность.
Да?
Ну вот. И P от T тоже присвоит P IN.
Ну, потому что, по сути, что такое в данном случае
потенциал? Сколько воды может через меня
протекать? Да?
Понимаете, да?
Вот.
Топерича.
Так вот. Идея у меня такая. Значит, я возьму теперь все вершины.
У меня идея такая.
Беру вершину V.
С минимальным потенциалом.
Внимание. С минимальным.
Ну, может проходить.
Так вот. Идея такая.
А давайте-ка добьемся того, что
через нее больше ничего протекать не может.
То есть, пусть этот вот этот
P от V
ну, V0 давайте.
P от V0, значит, минимум.
И тогда
идея такая.
Вот.
Ну, пусть это равно, допустим, Z.
Так вот. У меня теперь задача
добиться того, чтобы у меня
в этой слоистой сети появился поток,
который через эту вершину перегоняет
Z единицу.
Как я это буду делать?
А просто жадненько.
Смотрите.
Я просто найду
ребра, по которым я могу вот в следующий
слой пихнуть суммарно
там,
то есть, суммарно Z воды.
А я найду такие ребра,
потому что у меня столько потенциала есть.
Теперь из этих вершин.
Вот в каждую из этих
вершин вот сколько-то втекает.
Но я утверждаю, что как бы у них
потенциал не меньше, чем Z,
а эти все числа не больше, чем Z.
Значит, получается, что как бы по столько воды
дальше мы протолкнуть как-то жадным образом
можем.
Чего?
Нет, потому что у них потенциал всех
больше либо равен Z.
То есть, поэтому проталкиваем, просто жадно.
Жадно в плане
просто, ну, по смыслу это будет,
забегая вперед, просто как в динице.
Ну, то есть, у каждой
вершины будет указатель
на ребра, да, и мы прям будем жадно
проталкивать до тех пор, пока это не кончится.
Нет, ну, не совсем.
Подход диницевский, но как бы
применять его будем не в тупую,
там чуть более умно.
Вот, то есть, тут вода
вообще может и в одну и ту же вершину, кстати,
скопиться, но суммарно в эти
вершины все равно пришло ровно
Z воды, не меньше, не больше, а ровно Z,
правда? Ну и так далее.
Что ж там?
Сейчас, чего еще раз?
Сейчас, добежим.
Ну, вот,
вот такая вот идея.
Значит, этот будет Z идти-идти-идти,
но правда кончится тем, что он как бы придет
в слой с T и выяснится, что
как бы мы, то есть, окажется,
что мы протолкнем воду еще
не только в T, но и
во все эти вершины.
Ну, чтобы этого избежать,
мы сделаем предподсчет сразу.
Мы вытянем все
вершины, из которых
нельзя попасть в T.
То есть, оставим и только
по ним будем искать потенциал. То есть, если
по ребру нельзя пустить воду, мы ее просто вытянем
сразу. Понимаете, да?
Вот, то есть, поэтому
тогда это приведет к тому, что этих вершин,
вот этих вот всех вершин нету, и на самом
деле вода в итоге просто стечется
в T. То есть, мы так Z
запихали в T, просто же одним образом.
Как было правильно заявлено,
то есть, нам еще нужно, чтобы из V,
чтобы из SW пришло Z, но мы
это делать будем абсолютно так же,
только, так сказать, по задним
ребрам.
В потенциале, я как я уже говорил, мы сейчас в потенциале
считаем ребра только слоистой сети.
Это важно.
То есть, у нас задача в слоистой сети пихнуть блокирующий
поток. Вот мы этим и занимаемся.
То есть, аналогичным образом
толкаем назад, только
уже по, так сказать, ребрам.
Ну, не совсем обратным, но вот.
Мы уверены, что мы можем
ровно Z потолкнуть?
Ну, получается вот, ну, после того, как мы удалили
все лишнее, да.
То есть, не может быть так, что
где-то сзади
ускоренец ты по нему не сможешь?
Неа, потому что
в каждом сзади у нас будет,
там, допустим...
Смотрите,
на каждый уровень пришло ровно
Z потока, Денис.
Нет, ну, вы меня спросили про сзади,
я говорю сзади.
То есть, в каждом сзади.
Значит, то есть, из этой вершины
мы хотим вытечь сколько-то потока, что не
происходит Z. Но мы знаем, что потенциал
этой вершины не меньше,
чем Z. Поэтому, значит,
в нее входят какие-то ребра Z.
Поэтому там назад можно еще пихать.
Но тут все просто, тут просто все придет
в С, потому что в этой зоне,
в этой доле тут вообще других вершин
нету. Вот, понятно?
Вот, так что
вот такая красота получается.
Вот.
Итак, вот мы это сделали.
Причем, обратите внимание, сделали мы
это, в принципе, за...
За сколько мы это сделали?
Я утверждаю, что мы, как и...
Ну, если делать как в Диннице, да, то есть
там, у каждой вершины есть
указатель, правда, указатель не только
по таким ребрам, но и по таким, да,
то получается мы каждое такое
проталкивание делаем за O от V,
плюс количество удаленных ребр.
Правда?
Ну, та же самая идея,
правда?
Ну, теперь, если мы при каждом
проталкивании аккуратненько пересчитываем
потенциалы,
то получается, смотрите, эту вершину
мы убили,
как сказал бы экскурсовод из Тайвания,
из Таиланда.
Вот, вы знаете, да, это вот
рама восьмого здесь
убили.
Да.
Вот.
Да, здесь вот то же самое, да, вершину, значит
потенциал здесь мы убили, то есть она
заплокирована, то есть мы блокируем как бы
целую вершину, но теперь
ничто нам не мешает повторить эту
операцию. То есть давайте теперь переберем
еще все остальные вершины
и выберем минимальный потенциал
у них. Он может оказаться
даже ноль, значит мы ее обрадуемся и выкинем
сразу.
Ну и получается, сделаем так в
раз.
Почему?
Пересчитываем потенциалы?
А мы пересчитываем?
Ну, конечно.
Нет, мы
делаем так, мы пересчитываем потенциалы,
также мы аккуратно, да,
мы убиваем, внимание, тут важный момент,
мы выкидываем вершину
в В, и что самое главное, выкидываем
все торчащие в нее
и из нее ребра.
Понятно, да?
То есть прям все вот это выкидываем,
да, и потенциалы
уже там пересчитываем с учетом этого.
То есть видите, гадостно это пишется,
потому что вам реально придется это делать.
Нет, но возможно, после этого у нас еще появились вершины,
в которых тоже Т не достижена.
Но тогда это у вас
учтется в потенциале.
Потому что, а, на самом деле, кстати,
можно было эти вершины, знаете, почему не учитывать?
Потому что если у вас найдется вот такая вершина,
или вот такие, то у вас просто
тупо найдется вершина в последнем
слое, у которой потенциал равен нулю.
И она просто, а ее вы просто автоматически
выкинете.
То есть на самом деле, да.
То есть как бы, да.
То есть как бы, то есть просто найдут
потенциал, поэтому специально тут делать
ничего не надо, оно само.
А, нет, стоп.
Кажется, это неправда.
Потому что у нас может быть
типа ст путь куда-то,
а там цикл.
У вас в слоистой сети цикл?
Чего?
Да, мы все это делаем, напоминаю, в слоистой сети.
То есть мы блокируем
вершины, потом блокируем
по одной после того, как у нас все вершины
заблокируются. Кстати, если у вершины
потенциал 0, это и есть, значит, что она заблокируется.
Значит, это и будет означать, что то, что мы нашли,
это блокирующий поток.
Вот.
То есть получается, суммарно, значит, это мы делаем в rs.
Получается, одна фаза работает
за v квадрат плюс количество удаленных
ребер, то есть от v квадрат
плюс e.
Ну а так как мы это делаем не более, чем в rs,
то в итоге
мы получаем наш любимый
кубецкий.
Ну, писать
его сильно гадостнее, чем push relabel.
Но каждое проталкивание
вот этого потока, вот это жадно, мы делаем
за v плюс количество удаленных ребер.
Потому что как мы проталкиваем? Как в динейце мы
заводим указатель на еще актуальные
ребра, да?
То есть мы там говорим, что
хотим пихнуть через меня
179 единиц потока.
Итак, смотрим на ребро. Сколько у тебя тут стоит?
57. Так.
57 осталось 122. Идем в следующее ребро.
Так, ты у нас...
Так, у тебя просто используется
0. Выкидываем, идем дальше.
Так, ты... А я вообще не из слоистой сети!
Выкинули, идем дальше.
Так, а у тебя... Ты тут куда надо показываешь?
Да, сколько у тебя? 100.
Так, отлично. Пихаем 100, остается 22.
Ты адекватный? Да.
Сколько у тебя? 25. Так, пихнули 22,
останавливаемся.
Вот.
Ну, это классическая технология динейца.
Вот.
То есть все эти пихалочи мы
прям вот аккуратненько делаем.
И тогда это получается работает за O от V
плюс сколько мы ребра так убили.
Мы же каждый раз проходим,
когда мы вот одну вершину ударяем,
мы каждый раз проходим слева-направо.
То есть... Нет, мы проходим
от нее слева-направо
и потом справа-налево по
ребрам ведущим наоборот.
Да, но какие-то ребра останутся...
Ну, какой-то путь останется неубитым.
Да, но это ты сделал только...
У нас не было цели заблокировать все,
у нас была цель заблокировать одну вершину.
Ну, да. Мы это сделали.
За V плюс количество
удаленных ребер, сколько мы там удалили?
Да.
Но мы еще же какие-то ребра...
Мы не все ребра, которые
потрогали, удалили.
Все. У нас была Элька вот эта.
Нет.
Нет, у Эль это количество
ну это расстояний отvoT.
Да.. Но мы же сейчас тоже проходим это расстояние.
Мы не проходим это расстояние.
Мы, на самом деле, по всем вершинам пребегаемся
в явном виде в порядке возле там..
Прямо по всем, по всей доле,
по всей доле, по всей доле,по всей доле
То есть не по всей доле?
Не по всей, но там, другое вопрос.
В некоторых долях, в некоторые вершины пришло 0-1
потока и мы из них ничего не делаем.
Но пробегаемся, мы «по всем»
Там легче просто пробегаться к Mormon
ods добавляное scape.
чем там думать. Ну, то есть можно, конечно, это сделать, конечно, тоже как в БФСе, конечно, но там, то есть, как бы, если какая-то вершина узнала, что в нее что-то пихнули, давайте добавим ее в очередь. Да, можно и так, но как бы, а симпатической эффективности это не добавит.
Вот это О от В плюс Е удаленное, это за сколько мы делаем итерацию целую?
Это мы сколько, за сколько мы блокируем одну вершину с минимальным потенциалом?
Вот, то есть, да, то есть, в нее входит нахождение вершины этой за О от В, убийство этой вершины, точнее так, вот проталкивание этого потока, который блокирует, и ликвидация этой вершины со всеми ребрами и пересчете еще потенциалов.
Ну, не за О от В, а за В плюс количество удаленных ребр, потому что в Диннице у нас, как известно, мы проходим, убиваем несколько ребр и проталкиваем там воду, и еще осталось какое-то одно последнее.
Вот, поэтому тут не В, а В плюс количество удаленных ребр. Но, как бы, каждый ребр, если оно удалилось, то как бы до следующего БФС, в общем, аж уже вышестоящего в концепции блокирующих потоков, у нас оно не появится, как известно.
Вот, поэтому получается, что когда мы это просуммируем по всем В вершинам, мы же удалять будем не более чем В вершин, ну, как не более, мы, наверное, В минус две вершины и будем удалять, куда же мы денемся, да?
Вот, то получается, что суммарно это будет работать за В квадрат плюс сколько там ребр удалено, а суммарно удалено ребр не более чем все коих Е, поэтому получается, один фаза блокирующего потока работает за В квадрат плюс Е, ура.
Ну, если у нас, если нам больше не надо, то да, ну, значит, как бы это проталкивание в этом месте остановится в этой вершине.
Ну, через будущие вершины, да, и что?
В плюс Е.
Ну, потому что ты сначала из этой вершины протолкнешь все Z, что тебе надо, протолкнул, да?
Значит, ты знаешь, что в этой вершине тебе нужно протолкнуть Z1, в этой Z2, в этой Z3, отсюда толкаем Z1, возможно, где-то остановившись, потом толкаем тут Z2 и остановившись Z3, то есть вся вода теперь находится здесь.
Пробираемся по этим вершинам, тоже толкаем сюда и так далее, то есть мы как бы слева направо все толкаем, то есть в будущем через эту, то есть может быть тут какое-то ребро,
через которое мы сначала из этой вершины привет передадим, потом из этой вершины привет передадим и так далее, да, но это просто в разных В плюс Еудах учтется.
Так что получается такой, идейно и несложно алгоритм, то есть там, то есть как бы там в домашнем задании это было бы, вам бы намекнули на этот потенциал и сказали бы, что там, что заметим, что можно за ОАТВ плюс там Е удаленное, значит, там протихнуть столько воды и из этого сделать кубический алгоритм.
Вот, то есть вот такой вот алгоритм, то есть он вообще как видите, то есть описывается он действительно очень просто, как я уже сказал, там реальная статья Малхотра, Кумара и Хешваря, да, ну ладно, тогда я уже могу исполнить фамилии, там фамилии такие, там Малхотра, Кумар и соответственно Махия-Шваря.
Вот, ну стандартный алгоритм, волка Ш рассказывает иногда кому-то зачем-то, вот, ну я не знаю, просто я помню, мне рассказывали, на тот момент, это все, что я помню про то, как вы тогда рассказывали, я его узнал сильно позже.
Вот, ну как-то, ну всегда там, вот с алгоритмом Муконина вот красиво было на самом деле, потому что я помню, волка Ш, ему в группе Р рассказывал Капелевич, ну ладно, он не его, а алгоритм МакРейта, я вообще ничего не понял.
На поверху оказалось, что ничего не понял вообще практически никто, там кроме одного человека, который, возможно, тупо знал или что-то еще в этом роде, ну и в какой-то момент вечером дополнительно алгоритм рассказывал Станкевич.
Честно скажу, я тоже ничего не понял, но количество акцептов по задачи увеличилось до десяти.
Вот, но я про алгоритм ничего не понял, так и так до второго курса ничего не понял.
Нет, а на втором курсе просто лекции вел Виталий Борисович Кольштейн.
И вот и была лекция, где он, собственно, рассказывал Муконина.
Ну вот, но он рассказал вообще очень четко, так что я все понял с нуля.
С нуля, с третьей попытки.
Ну, фишка такая, я за первые две попытки не понял, насколько я помню, не понял даже, а что мы вообще строим.
Ну, все равно у вас отложилось.
Так что нет, ничего там, там без шансов было отложиться, там вообще просто чуть-чуть такое.
Там, насколько я помню, там так было, что вообще ничего не понятно было, что мы вообще делаем, а тут вот выяснилось, что…
То есть не было такого, что я как бы до пятой минуты понял, а потом дальше там аут и потом сублимация суберега, нет.
То есть, по-видимому, там как-то так получилось, что вообще не понял, что происходит.
Вот.
И это было, ну вот.
Ну вот, то есть с тех пор я так и рассказываю, то есть как бы поэтому, поэтому этого, ну этого Уконина вы в свое время еще услышите.
Ой, блин, не надо.
Черт его знает.
Я думаю, где-то на там, ну на сколько-то старше меня, но не на сильно много.
Там 4-5, там где-то нет, по-моему.
А что?
Нет, ну это нормально, там знаете, что в ЛКШ преподаватель ездит там в 11 классеньке иногда.
Так что нет, это нормально.
Ну и не только туда.
Ну в те времена, конечно, там только, по-моему, единственное, там ЛКШ было единственным, это выездным лагерем, в котором учили ауроритму.
То есть сейчас понятно, уже там, называется, этих лагерей там уже огромное количество.
Это да.
Вот.
Не, ну что рассказывать там.
Называется мало ли, там кто-то из вас таких даже работал, в общем-то, так шучу.
Вот.
Значит, соответственно.
Ну а так же получился вот такой вот квадрат плюс е.
Сколько у нас?
Индусы чем-то лучше Гольштейна?
Индусы?
Ну в каком смысле индусы лучше Гольштейна, я не понял.
Так, проедите.
Ну алгоритм двух индусов он чем-то лучше, чем то, что у нас было до этого?
С точки зрения потоков, да.
Потому что то, что рассказывал Гольштейн, это алгоритм построения суффиксного дерева.
Я ими задул, как его?
А, Голберга?
Так, давайте не путаем Голберга и Гольштейна.
Это разные люди сильно.
Один Андрей Данн, один как бы Эндрю Вячеслав, другой Виталий Борисович.
Не путать.
Вот.
Ну их всегда сложно перепутать.
Ну я не знаю, может и несложно, я как бы Голберга никогда не видел.
Вот.
А Виталия Борисовича видел, соответственно.
Да.
Вот.
Так что.
Соответственно.
Вот.
Нет, ну как лучше.
Лучше как бы, по симпатике как бы идентичные, но как бы дальше все возненькое.
То есть дальше упирается, видимо, как напишете.
То есть, как по мне, Голберг пишет это сильно проще.
То есть этот, возможно, доказывается проще.
Хотя, то есть доказывается проще, но пишется гадостно.
Тот может доказываться сложнее, но пишется...
Так что вот такая красота.
Вот.
Так, ну что, восемнадцать двадцать.
Ну что, рассказывать вам о любви?
Или расскажем через неделю?
Через неделю.
Давайте через неделю.
Эх, типичные фистехи, откладывают любовь на потом.
Да, да, да.
Ну, пожалуй, да ладно.
А любви это, я так понимаю, геонетрия?
Если бы.
Нет, ну на самом деле это правильно будет через неделю, потому что смотрите, потому
что у нас осталось еще порассказывать.
Потому что что я должен вам рассказать?
Я вам должен рассказать алгоритм Штормвагнера, Венгерочку,
ну вот, причем алгоритм, ну вот, и, соответственно, ну дерево Гамариху, естественно,
и Минкост.
Вот.
Нет, обычно, если хватает время, как раз я заканчиваю,
то есть разговором любви я заканчиваю весь поток.
Там просто шикарный алгоритм, на самом деле.
Вот.
Ну там, знаете, просто сейчас у нас что такое любовь?
Это когда вот у нас есть просочетание, да, мы там максимально ищем, да.
Как говорила Елена Владимировна, любви нет, а людей по парам бить как-то надо.
И рассказывала после этого Порсоч.
Ну вот.
Но так вот.
Но, как говорится, она рассказывает Порсоч, потому что она рассказывает алгоритмы для детей.
А там более взрослый алгоритм.
Там более продвинутые вещи, на самом деле.
Там не по двое, да?
Нет.
Нет, нет, нет.
Не в этом смысле.
Не, не волнуйтесь.
Так, стоп, стоп.
Так, чтобы у вас не было ожиданий не в ту сторону.
Нет, там все гетеросексуально, все нормально.
Там, то есть цель будет такая.
Нет, там все то же самое.
Правда, раньше людей надо было бить по парам, теперь их надо поженить.
Нет, жать и соцветить – это другое.
Так, нет.
Ну, в принципе, можно просто в олипиадах этого смысла никакого особо нет.
Нет, в принципе, поймут.
Нет, там ничего непонятного, ничего неприличного нет.
Там, наоборот, очень красиво, на самом деле.
Потому что выяснится, что…
Ну, потому что, что такое алгоритм?
То есть, когда n мужчин и n женщин хотят пожениться.
Никто не понял, с кем.
Нет, там просто более…
Нет, ну там просто цена…
Нет, ну я могу рассказать, можете даже подумать сами.
Может, вы сами придумаете на самом деле алгоритм.
Так, вот спрулирую задачу, вот думайте.
Значит, ситуация такая там, более предназначительная.
N мужчин и n женщин хотят пожениться.
Вот, но на кем?
Ну, на самом деле, как бы, взрослые люди понимают, что, в принципе, любой мужчина может жениться на любой женщине.
В принципе.
Вот.
А если у них этот… там же есть резус-фактор…
А если уже у них есть…
Спокойно.
Нет, ну пожениться можно, там другое…
Нет, другой вопрос, что да.
То есть, да.
Ну, скажем так.
Ну, там такие факторы опускаем, но оказывается следующее, что у каждого…
Что понятно, у каждого мужчины есть, конечно, свой список приоритетов.
Что там, условно говоря, там…
Условно, там Лена лучше Василиса, там Василиса там лучше Ани и так далее.
То есть, у каждого мужчины есть просто отсортированный список.
То есть, мой первый при этом больше всех любует ее, потом вот люблю ее, потом потом и так далее.
Более того, естественно, у женщин тоже такое есть.
Тоже так список мужчин в порядке убывания, так сказать, приоритетов.
По-моему, вы эту задачу давали в каком-то контесте потоков в лошадь?
Нет, не давал.
У меня нет задачи на это.
Я знаю только лошадь.
Нет, я мог это рассказывать случайно, да, потому что это смешная вещь, но как бы…
Нет.
Но задача у меня такой нет.
Погодите, погодите.
Но я еще не договорил задачу.
Значит, вот такая ситуация.
По-моему, как бы, жениться можно как угодно.
Ну вот, но как бы понятно, что есть коллизия.
То есть, понятно, если бы, допустим, первые приоритеты приводили к совершенному поросочетанию,
все бы уже поженились и не парились.
Но понятно, что у нас там есть какие-то зациклы.
Я могу там, условно, пожениться на Лене, но Ане мне нравится больше.
Но Ане там нравится Петя, Петя нравится Василиса, ну и так далее.
А Василисе нравится я, поэтому вот мы все страдаем.
Ну, условно, как-то так.
Значит, что делать?
Тут, значит, мы решили, значит, собраться, позвать на помощь государству.
Слушайте, давайте, помогите нам, пожалуйста, сделать что-нибудь.
А он говорит, нет, ну мы можем вам императивно приказать,
что давай, ты там, ты женись на это, это, это, ты выходи замуж до этого и все.
Все, прям императивно приказать.
Но какие проблемы могут быть?
Ну какие у нас главные проблемы с семей?
Семей? Измена?
Ну конечно, измена.
Давайте думать.
Счастье, это как бы все, это понятие относительное.
Отдача в итоге минимизировать количество измерений.
Понятно. Нет, ну сфагулируем так.
Бывают, ну в конце концов, каждый себе там счастье и несчастье,
но как бы семья может быть несчастливая.
И на самом деле не потому, что они там неудачно поженились,
а потому что, я не знаю, у них там дом сгорел, я не знаю.
Ну там, случайно.
Ну, на него там, ну у них там, на него.
Ну, бывает там, на дому, ну там, на дому пал кирпич и он сгорел.
Ну бывает такое, да.
Я люблю Аню.
А, Аню.
О господи.
Нет, ну вот.
Поэтому давайте минимизируем факторы, которые у нас уже из этой информации.
Что такое измена?
Значит, измена может быть такая.
Жил, был, значит, почему?
Как бы, почему?
Ну, смотри, вот ситуация.
Да, может так случиться, что скорее всего там условный Петя женится не на самой своей любимой какой-нибудь, да?
То есть она там женится на условной там Лене, а Маше ему нравится больше.
Приведет ли это к измене?
Само по себе нет.
Да, вот.
Да, если Маша захочет.
А теперь возникает вопрос.
А теперь возникает вопрос.
Захочет ли Маша?
Так, она посмотрит, ага.
Ну, Маша, нет, понятно, что у нее там муж тоже может быть там не самый лучший.
Ну, в ее голове, конечно, да?
Но тут возникает проблема.
Если он окажется лучше Пети, то, наверное, она смотреть на Петю не будет.
Вот.
А если вот Петя был уже упоминавшись ранее Арнольдом, вот тогда могут быть проблемы.
Владимиром или Арнольдом?
Ну, не важно.
Ага, да.
Давайте еще Виталия вспомним, да-да-да.
Вот.
То есть еще раз, значит, что?
То есть в принципе там на самом деле там мужчина А может изменить с девушкой Б,
если девушка Б для него лучше, чем его текущая жена,
и для девушки Б, значит, мужчина А лучше, чем ее текущий муж.
Вот это.
То есть это называется потенциальная измена, да.
Вот.
Так вот, задача.
Значит, поженить мужчин и женщин так, чтобы вот таких вот потенциальных измен не было.
Вообще не было.
Вообще.
Видимо сказать, если это невозможно.
Да.
Ну, давайте скажем так.
Ладно, я открою страшную тайну.
Это всегда возможно.
Нет, ну не совсем теория игр.
Еще раз.
Ну ситуация такая.
То есть Петя, значит, Петя и Аня могут потенциально там изменять друг-другу,
то есть совершать непотребство.
Если в личном списке, если условно Петя любит Аню больше, чем свою жену,
и Аня любит Петю больше, чем своего мужа.
То есть условно, если Петя любит Аню больше жены, но Аня своего мужа любит больше, чем Петю,
то как бы это не интересно.
Или наоборот.
Если Аня безответно любит Петю, который там бесконечно влюблен в свою жену,
то тоже не интересно.
То есть как бы да, мечта, несовершенство мира, но неизмена.
Вот.
Вот такая ситуация.
но вот и вот собственно задача надо придумать надо предложить какой-то алгоритм действий
какой но просто который построит как-то про сочетание без по крайней мере такого рода измен
вот такая красота
так что видимо я думаю потоки мы закончим тем что я просто расскажу просто очаровательный
алгоритм который может иметь просто в каком-то месте в какой-то степени иметь место даже в
реальной жизни нет у поровну да ну да конечно ну как сказать это это эквалента тому что как бы
какая самая худшая жена какая никакая то есть лучше как лучше хоть какая-нибудь жена чем никакая
нет такого такого мы предполагаем что нет чего положительный положительный все как бы все как бы
все мы находимся то есть ладно но вот нет ладно нет ну как сказать я могу но вот так что
соответствует ладно так что такая радость вот так что такая задача можете даже придумать
может даже придумать алгоритм на самом деле потому что я сразу скажу там продвинутых вот
этих вот алгоритмов там не надо просто задача к слову пришлась и как бы проходить мы не могу вот не
всегда хватает времени чтобы рассказать но я надеюсь что в следующий раз времени хватит вот так
что соответственно так что вот поддержали интригу так что соответственно приходить в следующий раз
