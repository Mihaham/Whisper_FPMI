Так ну окей, давайте начнем. Собственно у нас закончились сортировки и куча, вот,
контест закончился и поздравляю вас, нового контеста сегодня не будет, и завтра не будет,
и даже послезавтра. Да, у нас как минимум неделя перерыва от контестов, чтобы вы могли
все-таки наконец-то порешать другие предметы. Вот. Да, у вас есть целая неделя, надо то,
чтобы потом сделать матан и прочее. Окей, а теперь о чем мы с вами будем говорить? Мы
будем с вами говорить о деревьях поиска в ближайшие несколько занятий. Так сказать,
мы продолжаем играть на тематике сортировок. Единственное, мы все усложняем и усложняем и
усложняем. Собственно, что такое дерево поиска? Давайте вернем на определение. Дерево поиска,
и мы поначалу будем говорить только о бинарных деревьях, быть может потом у нас останутся силы
и на не бинарные. Это что такое? Это корневое, в скобочках бинарное дерево,
в котором для любого узла x верно, что слева, ну или в левом поддереве, если у нас бинарное
дерево. Вот для не бинарных пока что не будем обобщать. Что слева элементы меньше x, а справа
больше x. Давайте нарисуем пример простенький, что-нибудь типа такого.
Например, такое дерево, оно является деревом поиска, потому что если вы посмотрите в любой узел,
то в левом поддереве элементы все меньше, чем элемент в данном узле, а в правом все больше.
Ну и так верно для любого узла. Собственно, зачем нам это надо? Вообще в идеале, почему мы стремимся?
Наша цель построить некоторую структуру данных, которая будет удовлетворять следующему протоколу,
назовем это так. Операция. Время работы.
Операция будет типа find, проверить есть ли элемент множества за логорифом.
Собственно, вот вы писали там в куче декрестки, вам нужно было что-то типа удаления по значению,
поиска по значению, вот это оно. Дальше это insert, добавить элемент множества, тоже за логорифом хотим.
И erase, то есть удалить элемент из множества по значению, тоже за логорифом хотим. Вот к
этому мы будем стремиться. Ну к этому мы придем и будем приходить разными способами.
Окей, ну давайте обсудим все эти операции. Давайте начнем с операции find. Вот как делать
плоскость в таком дереве. Да, если вы равен, то возвращаем там какой-нибудь флажочек, что он есть,
все. То есть у вас есть указатель на корень и дальше уйдете либо влево, либо вправо в зависимости
от значения элемента. Ну, например, давайте напишем реализацию, что ли. Такую псевдокодовскую.
Окей, мы смотрим просто что лежит в ноде. Ну, в какой-то момент времени понятное дело,
что там у листовых узлов нет детей, вот они будут указывать на noopter. То есть если мы на noopter,
там return false. Вот, иначе мы действительно находимся в алином узле и нам надо проверить. То есть if,
ну там ноды, какая-нибудь структурка будет, в которой есть поле value, ну или elem. То есть
если его значение равно равно value, то return true. Вот, окей. Ну и дальше, как вы уже сказали,
либо влево, либо вправо пойти. Если, понимаете, вот такое соотношение, то есть наше значение,
которое мы ищем, например, мы ищем девятку, она меньше десятки, значит она где-то вот здесь
должна находиться. То верни что? Верни find от левого под дерево и того же значения.
Ну иначе верни от правого.
Ну все, как бы элементарный алгоритм. За сколько он работает?
Ваше дерево может быть бамбуком. Ну, выродится прямую ветку. Вот, и выстав у него будет линейный.
В идеале, конечно, мы хотим, чтобы выстав был алгоритмический, тогда все будет хорошо. Вот.
Время от аш, где аш то высота дерева. Окей, ну find это легко, давайте insert обсудим.
Здесь я уже, наверное, код писать не буду, просто поясню словами. Вот я хочу вставить
девятку. Что мне делать? Вот, допустим, я добрался до узла, у которого там детей нет. Например,
вот я девятку хочу вставить, я вот пришел в семерку и вижу, что справа нет ребенка. Ну да,
абсолютно логично. Я просто припишу девятку. То есть у нас спуск аналогичен find, только если
пытаемся пройти по нуптер, то подвешиваем новый лист. Ну, собственно, не трудно догадаться тогда,
как построить пример, чтобы у вас дерево выродилось в ветку. Ну да, и все, вы будете каждый раз подвешивать
1, 2, 3, 4, 5 и у вас дерево превратилось в нечто, во что ему не стоит превращаться. Вот. Но опять же
insert работает за оатаж, потому что у вас просто спуск и подвешивание листа. Теперь разберемся
с ирейсом. Вот тут уже будет интереснее. У него будет три случая. Первый случай, что удаляемый
элемент, ну первый случай самый простой, что удаляемый элемент одет детей. Удаляемый
элемент без детка просто. Вот. В таком случае ваша жизнь крайне проста, вы просто самоудаляетесь.
Например, вы хотите удалить девятку, вы ее нашли и такие, ну все, меня нет. Как бы самый простой
случай. Окей. То есть если бездетный, просто удалить лист. Вот. Случай второй, он уже чуть
сложнее и осложняется он наличием ребенка, но одного пока что. То есть удаляемый.
Элемент имеет одного ребенка.
Ну вот, например, ситуация с узлом 11. Как его удалить?
Просто вот так вот сделать. И все. Здесь все. Ну не прям уж просто, потому что не просто вы перейти
и что-то переподвесить уже. Связываем родителя удаляемого элемента и его ребенка.
Вот. Третий случай, это когда вы обременены целыми двумя детьми. Вот. Что тогда по-вашему надо сделать?
Ну сейчас. 8,6 какой-нибудь, не знаю. Вот такое вот дерево вы хотите удалить пятерку.
Кого? Куда? К чему подвешивать четверку? Почему четверку? Хорошо, вот вы хотите уговорить
мне подвесить четверку, да? Сейчас я чуть-чуть поправлю дерево, извините. Как я вам подвешу четверку,
если у нее тоже может быть два ребенка? Ну 9, какая разница? Направду похоже? А, ну тут
что-то должно быть больше. Сейчас. Здесь так, здесь так и здесь так. Вот, вроде на правду похоже.
Кого? Вот это вот сюда вот? Так это же неправда, у вас тогда 10,9 будут будто бы меньше 8. Почему девятку?
Ой, тройки тоже нет детей, что? Вот. То есть смотрите, очень хочется сделать, что на самом деле.
Хочется сюда посадить кого-то, кто в этих поддеревьях не нарушит порядок, если их слапнуть.
Ну кто это такой? Это либо наименьший элемент больше данного, вот если мы его сюда посадим,
то все будет хорошо. Либо наибольший элемент меньше данного. Вот как найти вот эти вот элементы?
Ну вот да. А почему у этого узла не может быть двух детей? А один ребенок может быть? Ну вот да.
Да, есть так как известный анекдот про физиков и математиков, которые чай себе наливают.
Не знаете анекдот? Грустная история. Вот. Но анекдот типа в том, что вот спрашивают,
ну вот физика спрашивает, ну как заварить, у физика спрашивают, как заварить чай.
Ну он говорит, там наливаю воду в чайник и кипячу.
Какая разница? Да не все одинаково мысли. Вот. Ну короче, суть анекдота в том, что вот спрашивают,
вот если чайник пустой, что делать? Вот говорят, ну налью воду, закипячу, да. А если в чайнике уже
есть вода? Ну физик говорит, ну просто поставлю кипятиться и все. Математик говорит, что я вылью
воду сначала, потом налью, потому что я свел задачу предыдущую уже, которую умел решать. Вот.
И скептид-чайник. Здесь мы примерно тем же будем заниматься. То есть алгоритм в случае Ирейза
такой. Шаг первый — это найти
наименьший элемент больше данного. Ищется, да, он гениальным алгоритмом. То есть что значит
элемент больше данного? Значит он где-то в правом поддереве. То есть нам нужно спуститься на один раз
вправо. Хорошо, как найти из них наименьший? Идти влево до упора.
1 шаг вправо и 100 шагов назад. И влево до упора. Вот. Ну тогда утверждается, что у этого узла не больше
одного ребенка. Не больше одного ребенка.
Свапаем значение и удаляем. То есть схематически 1 шаг вправо, 1000 шагов влево. Меняйте девятку с
восьмеркой местами. Вот. Ну и теперь вырезайте вот этот узел. Ну у него может быть максимум один
ребенок. Возвращаемся к второму случаю. Либо случай 1, либо 2. Вот такая вот простенькая
структурка. Опять же, насколько и рейс работает? Ну да, от высоты, потому что вы один раз тут спустились
что-то, нашли узел, посмотрели, есть ли у него там дети, если даже их оба. Вы там дальше спустились,
но вы явно спустились не дальше, чем на высоту, чем один раз. Время и рейс.
Вот аж. То есть мы с вами построили структуру, которая умеет find, insert и рейс, но здесь вместо
log n стоит высота. Какая-то загадочная буква аж, которую мы пока что не умеем оценивать. И в целом
выясняем, что в плохом случае, если нам подают insert в отсортированном порядке, то высота будет
линейная. То есть как бы все совсем грустно, мы вырождаемся, даже не знаю, это не массив, это список
какой-то. Вот. Собственно, вторую половину лекции мы потратим на то, чтобы построить дерево, которое
будет аж от log n составлять. Вот, а первую половину мы пока что будем дальше развлекаться с деревьями,
и что с ними можно делать. Вот, в частности, мы с вами обсудим вопрос, как корректно подчищать
память за деревьями, потому что я понял по чату, что вы не умеете это делать.
Ладно, будем считать, что это чистая доска. И у нас сейчас с вами будем говорить об обходах дерева.
Вот, их есть три штуки. Давайте просто напишем функцию.
И она будет выглядеть так, что если мы в NullPTL,
то просто закончим выполнение свое. Вот, если мы не в NullPTL, мы будем делать следующее.
Дальше у нас будет запуск от левого дерева, от дерева.
Дальше мы зачем-то еще раз выведем элемент.
Так, и остер, да, дерево? Блин, что новое рисовать что-то?
Ладно, дальше будет запуск от правого по дереву.
И снова выводим элемент.
И заканчиваем функцию. Собственно, я не зря их пометил 1, 2 и 3, потому что это три разных обхода.
Вот, есть когда ставят перед всеми рекурсийными визами, есть когда между ними, есть когда после всех.
Давайте нарисуем какое-нибудь дерево, чтобы проиллюстрировать моему примеру.
Не знаю, думаю 15 мне точно хватит в форне.
Ладно, я пишу. Ну, выглядит достаточно страшно, как по мне, давайте без этого, без этих звуков.
Вот, и сейчас мы будем с вами разбираться, что будет, если оставить только один из трех сяутов в каждом случае.
Что будет получено, где у нас массивы выведутся.
Вот, давайте, если у нас сяут стоит только где строчка 1, как будем расширять его?
Мы будем расширять его, если у нас будет только один из трех сяутов.
Вот, давайте, если у нас сяут стоит только где строчка 1, как будем массив получать?
Это 13. Ну, то есть, да, сначала то, что в корне, дальше будет 10, потому что мы будем расширять его,
дальше снова отлево, отлево, дальше мы поймем, что у нас нет детей, мы упрыгнем сюда и запустимся от правого ребенка.
Снова нет детей, мы выпрыгнем, десятки уже были, выпрыгиваем, идем вправо ребенка,
25, 20, 19, 21 и 30. Вроде бы всё. Что будет, если где цифра 2?
Мы будем расширять его, если у нас будет только один из трех сяутов, то есть, что будет получено, где у нас массив будет?
Вот, давайте, если у нас будет только один из трех сяутов, то, что будет получено, что мы будем расширять его,
что будет, если где цифра 2?
то есть вы сначала уйдете до конца влево
когда у вас не будет левого сына, вы выведете элемент
дальше у вас нет ни левого, ни правого сына, вы не запускайте, поднимайте вверх
выводите элемент
и обрабатываете правого сына. его тоже нет, снова идете сюда
10
выводите десятку
идете в право сына обрабатывать
вывели 13, потому что у нее нет детей
дальше снова вернитесь в корень 15
и пойдете обрабатывать право ребенка
я думаю, уже многие догадались, что будет в итоге
вы получили отсортированный массив из элементов, которые лежат в дереве
но это, казалось бы, логично
потому что
вы говорите себе, что вот все, что меньше 15, сначала выведем
я выведу все
что меньше 15 сначала
выведу 15, потому что все, что больше 15
и так вы для каждого узла гарантируете себе это
ну и давайте для
гармонии третий случай выпишем
вот что делать, если у нас вся вот вообще здесь стоит
выводите, мы будем, когда закончили, уже обрабатывать под дерево
то есть мы сначала спустились самое левое
не обнаружили детей, вывели
дальше поднялись вверх, попытались обработать правого сына, его нет
вывели элемент
дальше сюда
попытались обработать правого сына, а он есть
поэтому 13, 10
дальше поднимаетесь сюда
смотрите, есть ли правый сын, он есть
окей, тогда выведем 15 потом
идем сюда обрабатывать этого чувака, у него есть дети, да
идет влево, идет влево
добрался до узла, вывел его
добрался до двадцатки, видит, что есть правый сын
выводит его
затем только сам элемент
и поднимается вверх
видит, что снова есть правый сын, идет сюда
25 и 15
будто бы бесполезно
но на самом деле
не то чтобы это прям бесполезно, давайте я выпишу их название
preorder
inorder
давайте через def пишу
и postorder
здесь будто бы в порядке возрастания элементов
а preorder и postorder, их названия порождены тем, что вы пишете либо
перед всеми рекурсивными визами, либо после
понятно, зачем нужен inorder-обход, если у вас есть дерево, вы можете вывести отсортированный массив
внезапно это очень удобный способ дебага
если у вас есть дерево, когда вы пишете свое дерево в поисках
делаете его inorder-обход и у вас массив не отсортирован, то
сто процентов у вас что-то не так в вашем дереве идет
зачем нужен postorder-обход, как вы думаете?
ну вот он хорош тем, что вы сначала обработали всех детей, а потом уже себя
когда вы будете писать деструктор, страшное для вас слово, которое вы может еще не знаете
штука, которая чистит память в дереве
вы будете здесь писать, назовете ее clear-функцию
и здесь будете вместо вот этого вот seout писать delete от ноды
и у вас все очистится спокойно
здесь очень простой способ удаления
с точки зрения кода, с точки зрения интуиции он не очевиден
а preorder-обход я не знаю зачем нужен, если честно
он просто есть для гармонии
он нам вроде как нигде не нужен будет
у нас с вами вторая часть, и мы с вами
будем на самом деле вот эту лекцию, оставшую эту половину лекции
следующую лекцию, еще может быть еще следующую лекцию
будем с вами строить разные деревья поиска
в которых высота будет логарифм или около того
и смотреть в каких ситуациях нам то или иное пригождается
собственно окей
и первое дерево это будет самое простое
и все то, что самое простое, оно нигде не применяется
это AVL дерево
там у него есть три автора
собственно AVL это их первая буква
буква их фамилии
в чем смысл AVL дерева?
давайте назовем за определением
AVL дерево
это такое дерево поиска
что для любого узла х
вот такая вот величина дельта от х
по модулю не превосходит единичке
где дельта от х
это разность
высоты левого по дереву и правого по дереву
а что высота?
это левый ребенок
это правый ребенок
вот такое вот интересное дерево
давайте для начала докажем, что если такое дерево можно построить
то его высота будет логарифмической
если говорить о ремо
высота аж AVL дерева
составляет от логарифма n
где n это число элементов
вот
окей
ну как это доказывать?
ну как это доказывать?
ну как это доказывать?
окей
ну как это доказывать?
здесь вот такую интересную величину
s от h это
минимальное число
элементов
ну или вершин, как вам угодно
узлов, вершин в AVL дереве
высоты
h
мы сейчас будем с вами оценивать эту величину
ну давайте выводите, с чего она состоит
вот у вас есть дерево
и вы знаете, что высота h
представим, что здесь под дерево
у него есть левый и правый ребенок
очевидно, что у одного из них
хотя бы высота h-1
но чтобы у всего дерева была высота h
допустим, у левого
насколько очевиден факт, что s от h
растет с ростом h?
ну значит, тогда
если мы хотим достичь минимальной оценки, то здесь мы можем себе позволить
высоту поменьше, чем h-1
но какую?
вот h-2 можем
и в целом мы здесь можем себе позволить высоту h-2 и h
и h-1, извините
высоту h сюда нельзя, потому что дерево было бы высоты h
плюс 1 просто
поэтому можно все, что меньше h, то есть h-1, h-2
а h-3 нельзя по этому определению
тогда у вас дисбаланс высот будет равен 2
ну и так, мы хотим минимальности
из этого следует, что
есть вот такое вот соотношение
вот, такая вот рекурренция интересная
ну почему плюс 1?
потому что вот у вас есть один узелок, который их связывает
это понятно?
вот сейчас нам нужно как-то
оценить, как себя ведет вот s от h
за эту великую рекурренту
что?
ну вот очень похоже на фибоначи будто бы, да?
число фибоначи они вот так вот записывают
с такой рекуррентой
то есть там нет плюс 1, вот вопрос будет ли это плюс 1
влиять на что-то
хорош
можно и логарифм вычесть и вообще высоту нулевой получить
ну да, методы
нет, настолько явно обманывать я вас не могу на алгоритмах
ну давайте я докажу, что
с ссс от h
так сейчас будет великий подгон
это что-то типа
короче я поставлю равно, вот
потом если окажется что-то не так, я переделаю
что это число фибоначи
что-то вот такое вот, h плюс 2 и минус 1
давайте докажем по индукции
что по индукции
давайте базу проделаем
дерево нулевой высоты
это что такое
ну сколько пустых деревьев существует
ну дерево высоты 0, в нем 0 элементов
поэтому 0
да, видимо вот я вас тут и обманул
минус 1 должно быть
дальше s от единицы
сколько может быть элементов дерева высоты 1
ну 1 да, это корень просто его
не, ну а что звучит
да
ну что подгоним
так s от 2
к чему равно
ну видимо 2
что
не, мы базу подгоняем
я хочу сейчас понять откуда надо брать числа, чтобы все сошлось
так, ну а числа фибоначи
f первая
блин, плохо
да
ща, надо подогнать
то есть нам нужно все-таки их сдвинуть
щас
аж плюс 2 все-таки
да
ну ладно, я поверю вам
в смысле нет
у вас единицы накапливаются кучу раз
при каждом рекуссивном наборе
я, к сожалению, ничего не понял
но вот это похоже на правду
и видимо это похоже на то, что вы сказали
к сожалению, это невозможно распарсить
в устной речи
потому что, скажем так, это надо видеть
а слышать этого мало
вот, ну вот
так
а слышать этого мало
короче, я поверю, что
давайте договоримся на экзамене, что это правда
так будет проще всем нам жить
давайте доказывать, докажем по индукции
база очевидна
вот так вот напишем
и все
я развязываю себе руки
в этом плане
ну на самом деле да
давайте распишем s от h, что это такое
это s от h минус 1
плюс s от h минус 2 плюс 1
пользуемся индукцией
вот здесь раскрываем по этой формуле
в смысле переход
и вот это слагаемо по этой формуле
типа f h плюс 1
минус 1
плюс f h
просто f h будет
минус 1 плюс 1
типа f h плюс 1
плюс f h
плюс 1
ну внезапно вот это вот
это f h плюс 2
доказали, вау
я считаю, что это было самое сложное доказательство в курсе
где?
это минус
он просто слился с доской
здесь надо
ну не знаю, она уже даже отсвечивает от остатков маркера
вот здесь надо по хорошему доску
это очистить просто, ну ладно
вот доказали
вопрос в студию
надо ли выводить вам формулу чисел Фибоначчо?
о господи
ладно, ну я сошлись на основную теорему рекуррентных соотношений
ну в смысле
теоремой доказывать не буду, само очевидно
я выведу просто числа Фибоначчо из нее
кого?
я формулу думаешь помню?
ладно, окей, я напишу, что теорема BD
я сейчас напишу скорее всего какую-нибудь улажу
но вы простите меня
что числа Фибоначчо
это фи в степени n
что не такое?
в каком там формуле?
вот
где фи?
это корень из 5 минус 1 пополам
ставлю голову на отсечение, что здесь есть ошибка
вот, но
ну это не особо важно
скажем так
ну вот типа минус фи это что такое?
ну это что-то отрицательное, но при этом оно в степени минус m
вообще маленькое какое-то, да?
ну давайте напишем так, может так будет правильно
ну ладно, неважно
правильно?
ничего себе, я помню
ну из этого следует в частности
что fn равно от фи в степени n
или логарифм fn
от фи что ли?
сейчас, если возьму логарифм отсюда и отсюда
ну это забываем, очевидно
я получаю n лог фи
вот n
ну это похоже, да
ну это 1 делить на фи будет
вот первая из второго получается через 1 делить на фи
вот корень из 5 минус 1 пополам
и корень из 5 плюс 1 пополам, оно
вы получаете одно из другого, выполняя 1 делить на х
вот
ну нам важно, короче говоря, что числа f иначе растут экспоненциально
вот это самое главное из этого всего дела
то есть
f от h
от фи в степени h
вот
ну из этого что тогда следует?
из этого следует, что h
что-то типа
ну мы сами знаем, что
если s от h равно o от phi от h
давайте даже так напишем
мы же не на дискретках, чтобы мучиться
напишем вот так вот, очень сильная оценка
вот, и мы знаем, что n оно
число элементов, n маленькое
оно очевидно больше либо равно, чем s от h
что равно фи в степени h
приблизительно
откуда следует, что h
равно от лог n
вот так вот
безумно строго
достаточно для алгоритмов
вот мы с вами доказали
что если такое дерево можно как-то строить быстро
то его уста будет хороший
давайте разберемся с тем, как его строить
а что, звучит?
ну такие вещи
помнить наизусть вообще страшно
есть вещи, которые лучше помнить наизусть, чем формула Бене
вот
ну окей
собственно, вопрос-то
пробьем в чем? Пробьем в том, что у нас есть
в том, что у нас есть
вот ваш прекрасный дерево в форме шапки
или паруса
вот вы к нему подвесили элемент
наивно
проблема в том, что у вас здесь
может оказаться у его родителей
дисбаланс высот теперь
ну или не у его родителей, а у его деда
ну типа у деда здесь не было детей
ну типа у деда здесь не было детей
вот у него был один ребенок, все было хорошо
теперь у него появился внук и деду стало плохо
ну да, у нас
в деревьях поиска у нас будут с вами такие
родственные связи, назовем это
и просьба не ржать слишком громко
окей
собственно нужно как-то это все сбалансировать
вот деду нужно дать спокойствие
выполнить что-нибудь такое
типа давайте это x, y, z
вот хочется будто бы вместо
деда поставить отца
и сделать деда молодым
снова ребенком
что-нибудь такое сделать хочется
вот, и такие вот операции, они называются повороты
вот
вообще это все будет называться балансировкой
вот у разных деревьев поиска она по-разному проходит
у кого-то это повороты, например у АВЛ
или красночерного дерева
у кого-то там за счет других вещей, типа у дикартового дерева будет
что там балансировка вообще из нее откуда берется
мы доказывать даже скорее всего не будем откуда она берется
как факт это
окей теперь
что мы сделаем с вами
рассмотрим как можно балансировать
а именно здесь мне придется подглянуть
потому что там какие-то очень красивые картиночки
и они у меня закрылись
сейчас минутку
вот
давайте рассмотрим вот такую вот ситуацию
это узел А
это узел В
это узел С
даже не так, здесь будет не узел, а целое поддерево
В
и у него будет два ребенка Q
и R
и треугольничками целые поддеревья
сейчас мы расставим высоты
то есть первый случай у нас будет дельта от А
равно чему
аж минус три минус вот эта вот штука
блин, это сложно, помогите
минус два, да, по-моему
когда вы допустим сюда всунули узел новый
и этому стало плохо
у него нарушилась внутренняя гармония
и мы будем рассматривать сами сейчас две ситуации
то есть баланс вот этого правого ребенка
либо минус один, либо ноль
то есть все хорошо, у этого чувака, у этого все плохо
что тогда предлагают сделать
предлагают вам сделать такой вот поворот
он называется малый левый
поворот
и получаете вот такую вот штуку
это П
вру, нет, не так
здесь будет А, у него будет П
у него будет Q
и здесь у него будет R
но казалось бы
будто соотношения в плане сравнения элементов
не ухудшились, не изменились никак
почему? потому что все элементы Q
они должны быть больше А и меньше B
а не меньше B, потому что в левом поддереве
но аналогично П и R рассматриваются
П был самым маленьким и остался, R был самым большим и остался
давайте расставим высоты
у П высота была h-3
у Q h-2, у R h-2
тогда какая здесь высота?
в смысле h?
h-1, да, вы берете максимум из этих двух и прибавляете единичку
тогда здесь h
и как видите у вас
дисбаланс устранился, все узлы сбалансированы
почему здесь может быть
минус 1?
потому что если здесь минус 1 дисбаланс, значит здесь высота h-3
а если здесь высота h-3
значит здесь будет h-3, значит здесь h-2
значит здесь h-1 и вообще все прекрасно
они вообще поровну будут
в плюс-минус 1 еще
вот, отлично
угадайте в словосочетании малый-левый поворот
сколько слов можно менять
и получите все наборы поворотов, которые в этом есть дереве
малый можно менять на большой, а левый на правый
всего два на два-четыре комбинации
все четыре поворота есть
и они нужны будут для балансировки
сейчас разберу большой-левый
воспользуюсь гениальной фразой, что правый зеркально
давайте я объясню
почему левый
потому что вы вращаете в этом направлении
относительно вот этого вот ребра
то есть вы берете вот это вот ребро
и прокручиваете его вот так вот
в этом направлении оно у вас вместо такого остается таким
потому что будет большой сейчас
сейчас увидите, вы куда торопитесь
видите, я чищу доску, у меня сейчас картинка большая будет
ну большой поворот
я спойлерную сразу, он состоит из двух маленьких
или малых
а-та-та-та
я снова воспользуюсь подсказкой
потому что здесь еще хуже картинка будет
чем тогда
это A, это P
это B
это D
это B
это C
это здесь 1, здесь 2
здесь 3
B, Q, R, S
здесь h-3, здесь h-1
высота у этого, потому что мы все еще рассмотрим
в случае дельта от A равно минус 2
только теперь дельта от B будет равно 1
а-та-та
а-та-та
а-та-та
а-та-та
ну здесь уже не важно, какая высота
главное, чтобы здесь хотя бы у одного было аж минус 3
вот
и все это под действием большого
левого поворота
большой
левый поворот
что получится?
сейчас
что-нибудь типа такого
T, сюда B
сюда A, сюда P
сюда Q
сюда R
сюда Q
сюда R, сюда S
давайте расставим высоту
h-3, Q h-3
R
h-4, h-3
здесь h-2, здесь h-2
h-1
ну видите, дисбаланса нет нигде, мы исправили эту проблему
окей
как, собственно, этот поворот выполняется?
ну внезапно он состоит из двух поворотов, как я вам сказал
здесь есть малый правый вокруг этого ребра
первым шагом выполняется
то есть у вас C встает в корень этого подерева вместо B
а дальше выполняется вторым шагом
здесь малый левый поворот
то есть у вас C сначала сюда пробросилась, а потом еще сюда
мы храним высоты под деревьев
в узле
нода хранит еще высоту, да
ну и что мы тогда сравниваем?
вот смотрите, у вас есть узел, да
вот вы находитесь в каком-то узле
у каждого узела знают высоту своего поддерева
вы смотрите влево ребёнка высоту, вправо ребёнка высоту
смотрите, ну и вы читаете одно из другого
у вас получается дельта от A
если оно равно минус 2, вам нужно применять либо малый левый
либо большой левый
дальше идете вправо ребёнка и спрашиваете, какой у тебя дисбаланс, чувак
он говорит, либо это, либо это
либо 1, либо остальное
не тем, что здесь дельта от B, либо минус 1, либо 0
а тут единичка
и нам приходится по-разному с ними разбираться
то есть если бы у вас здесь была единица, то у вас здесь было бы что-то типа
h-2, здесь h-3, допустим, да
и если бы вы сюда переставили, у вас было бы здесь h-3
и вы бы не избавились бы дисбаланса так просто
то есть вам нужно вовлекать на один уровень больше
глубже лезть в структуру, чтобы ее поменять
вот
это все, конечно, классно
балансировка делается не просто одним из четырех видов поворотов
а на самом деле делается она следующим образом
берем
самый нижний
затронутый узел
ну вот, например, при удалении, когда у вас там два ребенка есть
вы же там делаете 1 шаг вправо и 1000 шагов влево
нужно вот это вот, самый нижний брать его
далее
вызываем
от него один из поворотов
при необходимости, естественно
рекурсивно повторить от родителя
вот
давайте я нарисую картинку какую-нибудь, чтобы было понятно
вот ваше прекрасное дерево
вот у вас есть какой-то путь до координата узла х
вы хотите сделать и рейс от х
дальше у него есть там левый сын
и правый сын
и вот здесь
у вас есть один сын и правый сын
в котором, вот этот узел, у которого есть путь
до узла z
у которого нет правого ребенка
тут нет левого, извините, правого может быть
вот тогда вам нужно сделать
вызвать от z повороты, если они вам необходимы
и дальше рекурсивно по всему этому пути вверх пробежаться
сделать эти повороты
соответственно, у вас после поворотов высоты в под деревьях обновляются
вам может
раньше не надо было делать поворота, а теперь стало надо
вот
за сколько это работает?
все повороты работают за 1
просто немножко большие
большие от 1, потому что вам нужно здесь какие-то указатели
переподвешивать, а указатели это всегда не быстрая история
вот
а раз вам нужно просто подняться вверх на высоту
то время работы
под лог
n
вот такая вот история
то есть мы с вами научились
что происходит? вы делаете вставку и удаление
как в наивном дереве поиска, о котором мы обсуждали на первой половине лекции
дальше вы вызываете от самого нижнего затронутого узла балансировку
вот
и утверждается, что все время будет все корректно
но как это можно доказывать? доказывать это нужно по индукции
пустое дерево корректно
оно удовлетворяет определение AVL дерева, согласны?
ставить один элемент и вызвать от него балансировку
все будет хорошо
то есть у вас в каждый момент времени дерево
перед следующим запросом будет
в органическом состоянии
в кондиции
теперь нужно понять, а что будет
если мы сделали какую-то операцию и дерево стало не в кондиции
почему оно станет внезапно здоровым?
давайте это докажем
вот у вас путь до элемента X
самый нижний затронутый элемент
где у вас мог измениться баланс?
только в этом под деревья, правда?
во всех остальных местах все хорошо
вот в этом под деревья может быть все плохо
а во всех остальных местах все хорошо
давайте мы здесь поправим поворотами
потому что здесь с ниже тоже все хорошо
так и в этом узле все плохо
потому что вы здесь что-то покрутили
у вас высоты изменились
например, было h, а стало h-1
и у вас баланс изменился, у вас высоты изменились
поэтому этому чуваку может стать плохо
то есть у вас плохо вот в этом под деревья
ну вы пофиксили поворотом и здесь все хорошо
дальше, может быть снова чоку стать плохо
тогда вы утверждаете, что вот в этом под деревья
все фиксируется за счет поворота
и так далее, и у вас все фиксируется во всем дереве
когда вы дошли до корня
конечно
алгоритмисты это великие обманщики, это большой логен
мы проходим логен
мы спускаемся логен
дальше балансируем здесь от единицы
высоту
сколько мы спустились, столько и поднялись
поэтому все логен работает
почему это?
ну...
сейчас
вот если здесь delta от b равно 0
если здесь delta от b равно минус 1
то здесь h-3
то в куб было бы h-3
здесь было бы h-2
здесь было бы h-1
и высота поменялась бы
то есть вам не нужно делать дальше повороты
если у вас delta от a равно минус 2
и delta от b равно 0
тогда действительно вам больше не нужно делать поворотов
потому что у вас высоты не изменятся
ну да
у вас будет на семинаре подробная задача
доказать, что там будут вот единицы поворотов
во вставке
при рейзе это неправда
но сначала вы будете доказывать, что если у вас в какой-то момент времени
вы поднимаетесь по этому пути
и выяснили, что вам здесь не нужно делать поворотов
то и выше не нужно будет делать поворотов, но это очевидно
дальше вы будете доказывать, что если у вас вставка элементов
достаточно от единиц поворотов сделать
но это на семинаре останется
окей, ладно, тогда сколько у нас времени осталось?
10 минут целых
впервые что лекцию раньше закончить
или что-нибудь еще рассказать?
да
да
да
еще раз
вы храните в узле высоту под дерево
вы спрашиваете у узла
какая высота под дерево левого ребенка
какая высота под дерево правого ребенка
у вас же дельта от х
это h от xl
минус h от xr
вы спрашиваете у xl и у xr какие у них высоты
они вам отвечают
раз с ним ответили вы можете посчитать дельту
в зависимости от ситуации у вас будут разные
давайте сразу скажем
что малый правый поворот
если у вас будет дельта от а равно 2
и дельта от b 0 или 1
все будет симметрично с точностью до знака
ну и большой правый
дельта от а равно 2
дельта от b равно минус 1
давайте тогда обсудим с вами
еще одну вещь
я так понял, что вы все полюбили
поиск катой порядковой статистики
в контесте
давайте научимся искать ее за логорифом
есть дерево поиска
мы хотим искать каты
по возрастанию элементов
смотрите, что вам нужно сделать
на самом деле достаточно хранить
храним
число
элементов
в поддереве
ну круто храним
и что теперь
допустим уничтожим катую порядковую
у него есть левый ребенок
есть правый
назовем эту пункцию cnt от x
ну cnt по узлу будет возвращать
на сколько у него элементов по дереве
вот мы просто спрашиваем
чувачок
cnt от x
точка l больше k
если выясняется, что да
то есть в левом ребенке элементов больше, чем k
то значит нам нужно идти в левое поддерево
потому что справа все элементы больше
а здесь меньше
да
идем влево
дальше спрашиваем вопрос
cnt от x совпадает с k
если да
то
вернем x
ну и последний вопрос
мы его даже не задаем
если мы до него дошли
то вызываем
от
x.l поиск
от правого зала мы запускаем
k-x.l-1
статистику
как на это можно смотреть
на самом деле
давайте я нарисую
где-нибудь здесь дерево
что-то страшное
а где именно
я задаю вопрос
я ответ не слышу
спрашиваю если да, то иду в левое поддерево
мы хотим найти катую порядковую
статистику
в дереве поиска
вам нужно построить структуру данных
и найти катую порядковую
вот такая вот задача
она у вас будет в контесте следующем
она будет с наворотами
там будет еще побольше запросов
вернем x
статистика найдена
иначе мы вызываемся от правого ребенка
только ищем уже не катую порядковую в нем
а катую размера левого поддерева
минус 1
как на это можно смотреть
допустим у вас есть массив
я буду очень оригинален
пускай будет 10 элементов
я построю на нем какой-нибудь дерево поиска
вообще какое-то произвольное
потому что строить AVL это думать надо
тройку пихну
сюда двойку, сюда единичку
четырку, пятерку
сюда еще шестерку
такое дерево прекрасное
очевидно оно не AVL
например из этого узла
а еще здесь из этого узла
а я еще десятку никуда не всунул
вот теперь вроде все
что делал Quick Select
он вам искал pivot
и дальше делали partition
разделяли элементы на меньшее
меньшее влево, большее вправо
допустим мы в качестве пивота выбрали семерку
тогда все меньше элементы влево
все большее вправо
дерево поиска является некоторым деревом
Quick Select
дерево Quick Select
является построением одной из веток дерева поиска
такая глубокая идея
вы взяли семерку, то есть выбрали pivot в качестве корня
и зафиксировали его в качестве корня
все что меньше отправили влево, все что больше отправили вправо
и вызвались рекурсивно от одной из половин
Quick Sort что делает?
только он вызвался рекурсивно от обеих половин
дальше он выбрал pivot
этот и этот элементов в соответствующих подмассивах
допустился рекурсивно от их детей
то есть по сути перед вами
портировочное дерево в некотором плане
на них на дереве поиска еще может смотреть вот так
а дальше Quick Sort
просто вводит и нордер обход
это все, что он делает
поэтому это не какой-то гениальный алгоритм
который типа вау, как до этого можно было дойти
я так думаю, что дошли с помощью этой штуки
возможно я неправ и обижаю автора
то есть у вас поиск катой порядковой
это спуск по дереву
если у вас AVL дерево стало логарифмическое
еще вы на семинаре будете обсуждать запросы
по типу, наименьший элемент больше x
x подается в запросе
или наибольший элемент меньше x
но это все будет уже на семинаре
у вас будет одна большая задача написать дерево поиска
который умеет все это делать
ну еще пару слов скажу
о сетей мапе
сет и мап внутри содержит дерево поиска
на самом деле
единственный нюанс, там не AVL дерево, а красно-черное дерево
красно-черное дерево оно прекрасно
во-первых
это в смысле все случаи
когда оно прекрасно
тем, что у нас было 4 вида поворотов
в красном дереве при удалении
7 разных видов ситуации может возникнуть
и там как бы авторов надо уважать
за то, что все это разобрали
я не думаю, что мы будем в курсе разбирать
красно-черное дерево если честно
потому что я устану 7 случаев удаления
слушать на экзамене
потому что в среднем делается меньше
переносов указателей в нем
ну типа проверить if это легко
поменять указатели местами это сложно
потому что это надо лезть в оперативную память
это долго, но это физически уже причина
алгоритмически там тоже будет луген
так, ну все, тело мы на сегодня на сегодня закончили
