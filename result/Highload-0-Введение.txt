Соответственно, я вам сегодня рассказываю про себя, я вам рассказываю про то, про что
этот будет этот курс. Мы с вами там, я не знаю, немножечко разминаемся, я вам показываю,
как примерно будет проходить занятие и расходимся. Всё, поехали. Значит, первое. Меня зовут Олег Бунин.
Я нифига не преподаватель. Вообще ни разу. Я предприниматель в области IT. У меня своя компания,
которая некоторое время назад занималась разработкой сайтов, крупных сайтов, больших,
то есть высоконагруженных, как раз то, про что мы с вами будем говорить. Многими сайтами,
которые мы разрабатывали, вы пользуетесь. То есть, Спортсру, Рия Новости, мы писали кусочки под
Олимпиаду. Мы даже консультировали Павла Дурова, когда он стартовал в 2007 году. Мы рассказывали,
консультировали, помогали ему преодолеть нагрузки, выдержать какой-то, ну не знаю,
рост посещаемости. Тогда еще очень маленький, смешной. 20-30 тысяч человек. Это был первый
бизнес. Второй бизнес связан с конференциями. Мы организуем и проводим IT конференции. В том
числе для разработчиков высоконагруженных проектов, высоконагруженных систем. То есть,
весь наш курс про архитектуры сложных проектов. Кому нужно пойти? В обязательном порядке. То есть,
у вас есть, у вас два варианта. Либо сюда, либо Project Management. Первый, если вы собираетесь
выросли в технаря, то строго сюда, строго к нам. В технаря я имею ввиду, если вы собираетесь
стать программистом, разработчиком, техническим директором, то собираетесь пойти по технической
линейке. Есть такие? Вы знаете, чего хотите? Нет. Кто знает, чего хочет? Чего хотите? Нет, ну по
жизни. Чем заниматься? Разработчик все прислез. Даша, еще кто? Ну, определились?
Короче, если разработчиком, то сюда. Если предприниматель, продукт, вот что-то такое,
управление проектами. Это не учебная тревога, нет? Ладно, едем дальше. Второй фактор для выбора,
который вам нужно будет учесть. Я здесь, я буду не скромен. Вот этих курсов дофигище по управлению
проектами. Таких курсов нет. Таких книг написано, по-моему, две или три штуки.
Архитектор высоконагруженных систем, по-моему, есть один платный курс у отуса, все. Больше нет.
Вы нигде этому не научитесь. Вы научитесь проектировать подобные системы, сидя за спиной у
человека, который умеет это делать. Вот я, собственно говоря, так учился. Я учился, сидя за спиной у Игоря СССВ,
20 лет назад. Кто знает Игоря СССВ? Если идете по высоконагруженному системам, нужно распечатать
иконочку иконостасы в уголок. Это наш гуру. Человек, который очень много чего сделал в России. Он
разработал NGNX, на котором работает примерно 90% российских сайтов и где-то 40% международных.
Вы нигде не научитесь разработке высоконагруженного системы. Еще хуже, вы нигде не научитесь думать,
как архитектор. Вот здесь и про это весь наш курс. Мы с вами будем пытаться... Смотрите,
что состоит разработка высоконагруженных систем. У вас есть несколько процессов. Вам приходит
заказчик и говорит. Слушайте, я хочу социальную сеть для туристов. Туда будут с одной стороны
приходить локальные гиды. Вот, например, там, не знаю, какой-нибудь Анталия, Турция, еще откуда-то,
не знаю, Испания. Локальные гиды, они будут публиковать информацию, например, про какие-нибудь,
не знаю, места. А с другой стороны, мы будем нагонять туда пользователей. И вот пользователи
будут искать свои локальные места, что им нравится, что им не нравится, выбирать и так далее.
Спроектируй мне, пожалуйста, как мне это сделать. И ваша задача будет, как архитектора, как именно
разработчиков высоконагруженной системы, написать техническое задание, которое потом программист
реализует. Вот вы пока будете маленькими сепелитетами с программистами, вам умные дяди будут спускать и
говорить, что делать. Вот эти умные дяди, они вот это все знают. Они будут описывать, что делать. И
здесь есть несколько составляющих вот в этом проектировании. Первое, это придумать некую логическую
схему. Как что, где расположить, как данные хранить, как хранить пользователей, как хранить информацию
об конкретных местах, куда можно ходить, как картинки хранить, как видосики хранить, как
балансировать нагрузку и так далее. Для каждого из вот этих блоков будут выбираться различные
инструменты. Вот эти инструменты, они меняются со временем. Выпускаются новые, не знаю, запускаются новые
базы данных, там не знаю, Click House вышел, еще что-то вышло и так далее, и так далее, и так далее. То есть,
ну как бы, здесь прогресс. Мы вот туда, в конкретные настройки и конкретные системы, не полезем
вообще. Мы сами принципы будем разбирать. То есть, моя задача и задача всего курса будет научить вас
думать как архитектор. Если вы научитесь думать, как архитектор, вы как бы, выйдете через два sleeps
три года, начнете работать, дорастетесь до архитектора, до технического директора, начнете
заниматься вот тем самым, чем мы с вами занимаемся. Будем заниматься, проектировать какие-то aspect
инструменить будут уже другие. Вам будет не важно, какие будут инструменты. Вы будете работать с тем,
что есть, сейчас. Что что есть на рынке, что принято в данной конкретные кампании, что на
на самом деле инструменты чаще всего выбираются под компанию, под конкретную
компанию. И не важно, что какой инструмент лучше. В компании есть
разработчики, которые умеют с Postgres работать. Ну все, у вас будет такая база
данных, хоть вы тресните, хоть вы лично любите. Итак, Highload нигде
научитесь с Project Management научиться. Много есть мест. Я уверен, что МФТИ выбрал
лучшего преподавателя по управлению проектами, но тем не менее таких курсов
много. Вот, собственно говоря, два фактора вам нужно будет выбрать между этими
двумя курсами. Как мы с вами будем работать? Мы с вами, у нас полгода, мы за эти
полгода сделаем примерно следующее. Для начала мы с вами просто изучим, ну
штук 20 архитектурных паптернов. Что это такое? Это прием. Вот я поставил
задачу, то есть специальную сетку сделать для туристов, и вы начинаете думать
какие там есть функции. Например, хранение фоток, есть – есть. Как сделать memorizationmans?
Есть определенные приемы, подходы к тому, как хранить бинарные данные.
Много, много, много однородных данных – как их хранить?
Их там нужно распределить на несколько серверов, как это сделать?
По какому принципе их распределить на несколько серверов? Как они должны там
с друг другом взаимодействовать? Что делать, когда и эти распределенные сейверы
кончится. То есть мы с вами пойдем
таким по изучать вот такие вот подходы или но с нагрузкой не справляется сделали хорошо
данные распределили а с нагрузкой сервак не справляется что делать но очевидно разделить
на два как не любую программу можно разделить надо то есть даже вот сейчас кто слышал про облака
овочной системы все подобное наверняка облако же не является панацей вы не можете вкинуть
любую программу в облако где она запустится и заработает облако точно так же как любой
состоит из конкретных серверов и у этих конкретных серверов есть конкретно ограничение по конкретно
ну то есть вы не сможете натыкать себе я не знаю хочу сервак на миллиард процессоров и не знаю
миллиард терабайт памяти не получится сколько бы у вас денег не было не получится не будет
работать то есть даже в облаке когда вы пишете под облако вы должны понимать как облако внутри
работает чтобы написать корректную программу вот именно этим мы с вами будем пытаться учиться
именно это будем пытаться учиться понимать как работает внутри облак как работает внутри сервак
вот мы запустили программу на c++ отлично мы знаем как она работает все окружение вокруг нее как
она взаимодействует я набираю в браузере вы как он наверняка отвечает с плюс плюс на программу как
запрос на нее доходит что при этом проходит какие метаморфозы как и так далее так далее так
далее то есть мы сами пытаемся понять принципы вот этой всей работы принципы распределения
нагрузки принципы построения архитектуры принципы хранения данных и так далее так далее вот изучаем
20 паттернов после чего некоторое время тренируемся
придумываем все проект вот ту самую туристическую сетку и начинаем раскладывать причем большинство
паттернов кстати не то что я вам буду рассказывать то есть мне больше нравится не когда я что-то
рассказываю вы записываете а когда вы сами придумываете я поставлю например ну возьмем
какую-то конкретную задачу вот много данных нужно сохранить столько данных сколько не
влезает на один сервак как будете делать вы будете мне придумывать я буду задавать
уточняющие вопросы вы будете отвечать на уточняющие вопросы я буду еще при том то есть как бы
связь с исходной задачей научить вас думать улавливайте да то есть моя задача научить вас
думать именно поэтому когда вы столкнитесь с новой задачей мы сами не рассматриваем раз
и придумайте решение дальше изучили паттерны тренируемся на нескольких спректируем туристическую
социальную сетку не знаю что угодно спректируем придумаем способ как роскомнадзору заблокировать
телеграмм или наоборот как телеграмму надежно уйти от роскомнадзора чтобы он не придумал
то есть без проблем и то и и в одну сторону и другую сторону можем придумать можно придумать
подумать знаете что не знаю каждым провайдере стоит система ссорм
в каждом провайдере стоит небольшая коробочка через на небольшой коробочек небольшой ящичек
через который фильтруется трафик проходит весь трафик который проходит чем-то когда нет
возможности в россии выйти в интернет минуя скан федеральной службы безопасности как это
работает давайте попробуем спроектировать как это как это могло бы работать как за этим всем
следить потому что там что трафик колоссальный следить за всем нам не нужно так далее то есть
вот какие-то короче потренируемся немножечко а потом экзамен экзамен происходит в виде вы
разобьетесь на команду я вам дам спроектировать проект вы приносите архитектуру если она хорошая
отл плохая по второму кругу правильных ответов проблема в чем такого экзамена правильных ответов
нет в смысле что любую как бы любую задачу можно жить несколькими способами и вам придется
показать как вы думали когда вы решали ту или иную задачу вот собственно все вопросы по форме
вот такой такие у нас будут занятия проходить они будут очно с утра
длиться будет в 10 45 начинаем не знаю в 12 12 30 заканчиваем максимум больше не надо
каждую неделю я вам пришел у вас есть главный старостая главарь вождь кто-нибудь ступ
ко мне в телеграмме
делаем группу для экстренных случаев не зная карантин закрыли фт и на карантин еще
чего-нибудь еще чего-нибудь еще чего-нибудь перенос и так далее
группа не но можно и по обсуждать без проблем я нормальный чувак со мной можно
поговорить можно задать вопросы так далее то есть тюго постучитесь просто-напросто чтобы
просто создать чатик и все дальше решим
ну все по технической части все вопросы по технической части
нет
да нет ну может быть домашнюю придумаю но да да иначе это не работает ребят мне
нет задачи вам данные передать вы по большому счету сможете видосики
смотреть с прошлого раза или еще откуда-нибудь у меня задача поменять вам мозг но смысл чтобы
научились думать как архитектор вот такая задача она не очень простая и она решается
исключительно взаимодействие но вот смотрите как сохранить количество картина которая не
влезает на один сервак валяйте понеслась ваше окей два делаем два сервака по какому
принципу мы раз то есть как бы вот у нас сейчас один мы поняли о том что мы не влезаем в этот
один что мы делаем окей хорошо мы разделили у нас есть мета данные так есть картинки
что понимается под методами но я не знаю владелец пользователь название какой-нибудь
описание вот вот те методы дальше разбили все равно на одном серваке все еще дальше как разбить
а хорошо я ты приходишь ко мне это не знаю владельцу компании и говорю хорошо держи
бабки покупай себе сервак ты купил второй сервак у тебя есть второй сервак он пустой дальше
хорошо добавили туда столбец который указывает на какой-то конкретный серваков есть по капустам
и сюда еще ничего не переложили половину картины кладем
я не знаю давайте 10 терабайт вот у нас здесь были много серваков много диск
вот 10 терабайт здесь картинок дальше 12 через две недели придется все равно решать
проблемы новые картинки на новые картинки на новые картинки на новый сервак хорошо чем плохое
решение нет но мета данные куда такие картинки на двух все новые картинки складываются сюда
ну во-первых да то есть у тебя вот этот сервак будет перегружен этот сервак будет недогружен
но мы мы купим себе от ручку на полгода хорошо еще пока ничего нет
вот уже третий сервак вот так началось да вот денег один раз сразу понеслась хорошо мета
данные перенесли на третий сервак дальше что
так еще раз подождите мы делаем что-то с этими 20 терабайтами которые здесь есть сейчас
на основе чего вы будете принимать решение делить или не делить маловато будет вот у
тебя есть здравый смысл давай
бинго ты не спросил у меня а что у нас вообще за сайт как к нему люди ходят потому что если
например это какая-нибудь социальная сеть типа фейсбука то картинки устраивает моментально
если ты только новое сюда переложишь подожди смотря какой паттерн доступа совершенно верно
да то есть смотри если это социальная сетка или новости то люди будут ходить всегда к последним
новостям последним картин и скачать последние картинки в этом случае можно вообще не
перекладывать старые можно с этого момента начать писать новые как сюда например так и сюда
потом уже перенести но в том плане что смотри все равно твоё решение то есть мы про это будем
говорить много раз ваше решение относить того какую архитектуру выбрать зависит к сожалению от
стёртого управления проект то есть вот чего захотят чего придумают продад вот они придумают
такой проект пользователи делают то-то делают это так принять картинки так смотрят на них так
то есть вы это все выясняете мы с вами будем еще проговаривать огромный составлять опросник
потому что нам нужно спрашивать у руководителя проекта то есть у прода у продакта наш контрагент
продакт то есть продакт это главный по части по идее да то есть вот что делает что делается с
проектом что проект делает а мы главные по реализации то есть нам про то говорит я хочу вот
это мы говорим они пига себе это невозможно технически не придумали еще технологии давай вот
здесь вот делаем вот так и все будет хорошо ну то есть как бы мы главный за реализацию вот и
наша реализация зависит от исходных данных я тебе могу на придумывать много различных схем
когда тебе нужно что переносить данные сюда что не переносить и так далее может они вообще
никогда не будут пользоваться может можно удалять или архивировать может можно выносить на какой-то
не знаю отдельный сервак пейзбуке ты не докрутишь никак вообще там не знаю до странички которая
была год назад но активного пользователя не знаю фронт ленту ты не докрутишь никогда ну блин хоть
так не старайся доступ не доступ к посту который был год назад ты можешь получить легко только если
это твой пост вот твой пост и ты и вы как архитектор начинаете уже думать так окей
значит нас разные паттерны доступа то есть в одном случае пользователи смотрят чужую ленту в
смысле свою ленту из чужих постов а в другом случае они смотрят свои посты если свои посты то я
должен уметь смотреть на меня знаю на год назад а если чужие то мне достаточно это мне знаю одного
дня назад и у вас начинается пляска вокруг метод данных они будут рано например вот именно так
будут проходить наши занятия в принципе вот в виде такой дискуссии вы не будете что-то отвечать
я буду заваливать а думали вы об этом подумали вы об этом но вы будете думать менять схему я буду
опять ее заваливать разрушать и вообще принципе так очень полезный процесс сначала придумать
потом посмотреть как она сломается или что будет через год или что должно случиться чтобы она
поломалась тогда так очень важный пункт еще еще про что нам с вами нужно договориться
у вас были сетевые технологии
семи уровня моя модель оси
да да да да да да да да да вот этот цепь что-нибудь помнить
клеом лады нам с вами нужно будет перед тем как мы сами перейдем первой теме первая тема это что
нужно будет первая тема я собрал про домашки я придумал домашку на следующий раз следующий раз
давайте попробуем придумать опросник вот пришел к нам заказчик продакт и хочется делать какой-то
сайт какой-то проект мы кстати говорим только про интернет сайты говорим про что угодно даже
любой айтишный проект и он хочет сделать крутой айтишный проект что мы должны у него спросить
вот домашка на следующий раз будет такая какие вопросы мы должны ему задать постарайтесь знаете
чтобы подумать не конкретный список вопросов составить какую-то схему придумать этого этого
вопроса опроса да то есть что вы будете в принципе не знаю пустить про кематики то есть что это
такое то есть вот ну как бы я хочу сделать туристическую сеть бегает к вам продакт с горящими
глазами вам нужно его опросить и понять что это будет за проект а сейчас немножечко еще
подготовительной работы так у нас есть ваш ноутбук у нас есть первая на котором работает сайт
контакт допустим для простоты сейчас они связаны
толстеньким каналом вот вы на клавиатуре набрали бы каком что произошло
давайте
вы бы каком набирайте в браузере да браузер пошел в днс да что такое днс не все знают
в интернете нету у серваков имен в интернете есть у серваков адреса набор цифр
вот айпи некий айпи адрес это называется айпи адрес либо 4 цифрки 4 бита либо 6 4 байта либо 6
для того чтобы сделать запрос к вк ком браузер сначала должен понять какой у него айпи адрес
он не может сделать запрос к вк ком он может сделать запрос конкретный айпи адрес и так
первое что делает браузер идет в днс и спрашивает днс это какая операционный
системы в нашем случае операционный систем это операционная система реально скорее всего она
тоже пошла куда-то в интернет просто куда-то в другое место каким-нибудь глобальным серверам
днс что днс в общей сложности представляет собой не из себя некую иерархию да то есть и пользователь
подключается к одному если этот сервак не знает он идет выше если он не знает он идет выше и
кто-то в этой системе знает какой у этого конкретного адреса айпишка какая у него
и так мы получили айпи адрес дальше
давай по детальней нужно сделать запрос вот что перед тем как сделать запрос делай или как
конкретно он делает окей еще детально что значит устанавливать соединение как конкретно браузер
устанавливать соединение браузер не умеет это делать запрос в операционную систему о том что
дорогая операционная система мне нужна установи пожалуйста связь вот таким вот эти адрес что
делает операционная система получив такой запрос
ну мак адрес
давайте мы это все объединим в том что просто отправляет формирует запрос и отправляет его
сетевой карт который дальше фигачит его в интернет нам достаточно для наших целей сетевую карту
на самом деле происходит примерно следующее да то есть этот запрос как он разбивается
в тсп и пакетики каждый пакетик там сколько я не помню там 1400 байт заворачивается в
этой пакетике операционной системы то есть вот как раз этот семи уровня модель оси я бы прочитать
одна страничка википедии ребят разбивается на эти пакетики каждый пакетик передается по сетеву
отправляется искать путешествовать по интернету каждый раз когда мы когда мы доходим за сервака
есть точно такая же сетевая карта она делает обратный процесс собирает эти пакетики относящиеся
к одному запросу в единое целое распаковывает расшифровывает и передает уже выше так покей
хорошо допустим передали в операционную систему еще здесь произошла установили
соединение отправили мы установили соединение да пока нам ответили сюда на той стороне есть потом
мы поэтому соединение пока потом что мы сделали а ну упаковали в каком да и отправили туды а да
и нам что лежит на в каком что-нибудь еще браузер сделал до этого не но он еще пока ничего не
получил погоди чего делает зачищает я думаю что он еще сходит кэш локально
то есть локальный кэш
браузер как правило папочка на диске в которой лежат палите да он проверит нет не там случайно
вы как вам да и если есть то можно ли его показывать то есть не просто проверят что он
там есть но что там есть он там честно настоящий и свеженький его можно показать если есть забирает
отсюда он даже сюда не пойдет то есть вот этот шаг у нас на самом деле первый а может не знаю
а может наоборот может даже вот так это 3 лады хорошо разобрали на пакетике отправили через
отправили сетевую карту сетевая карта преобразовала это в электрический сигнал не знаю или вай-фай или
радиоволн еще что-то долетела это на сервак на серваке есть тоже сетевая карта сетевая карта
слушает воткнутую в нее проводочек бац там сигналики электричество собрала пакет дальше
думаешь я думаю что это происходит чаще я не думаю что она ждет да я думаю что пришел пакет
собрала поняла но понимаешь что сетевая карта не понимает смысла смысла да то есть вот того что
собрала передала дальше ну допустим неважно не суть то есть как бы на каком уровне то есть что-то
накопилось она готова передать кому она передает операционную систему что делает операционная
систему какой порт где ты видишь порт я не вы
вы
Вы его поняли? Да. Давайте еще раз. Одна? Нет, ну ты правильно сказал про порты. Давайте их
добавим сюда. Что такое порт? Там не одна программа. Проблема-то в чем? У вас даже в вашем
лаптопе, вот здесь, не одна программа пользуется персональной системой. Вы когда почту скачиваете,
не знаю, если у вас локальный почтовид, не знаю, Outlook, нажимаете скачать почту, вы же при этом
параллельно в браузере что-то смотреть сможете. И как-то операционка разбирается, потому что вот
это на самом деле кусочек почты, а вот это вот кусочек странички. А еще видосики можно смотреть
на YouTube. А вот это вообще видео. Операционная система разбирается. И так вот, для этого придуман
механизм, нам в двух словах было достаточно понять, неких портов. То есть когда мы говорим о том,
что вот есть некий порт, то есть у этого IP адреса появляется несколько портов. 80-й для HTTP,
443-й для HTTPS, 20-й для SSH и так далее. Это не физическое хрень, это некая конструкция,
абстракция операционной системы, которая говорит ей о том, что если пакет пришел на этот порт,
то отдай его какой-то конкретной программе. И конкретные программы просто-апросто начинают
эти порты слушать, они на них как бы подписывают. Ну, например, база данных может подписаться на
один порт. Не знаю. Веб-сервер может подписаться на другой порт. Допустим, мы послали первый запрос,
у нас приходит на веб-сервер. Операционная система поняла о том, что пришел запрос,
поняла о том, что запрос на 80 или 443-й порт, что это веб-сервер надо ему передать. На будущее
просто знайте, что механизмов слушания вот этих портов, их много разных. Бывают синхронные,
бывают асинхронные, еще какие-то, еще какие-то. Нам сейчас неважно, на данный момент неважно.
Это вот стипенсует с программистом, им важно. Нам сами нет. И так вот, мы поняли, операционная
система поняла. Поняла. Это к веб-серверу. Дальше. Давай.
Как он понимает? Расшифровывает пакет и смотрит, что там внутри.
У тебя в пакете? На портов на самом деле там дохричь. 64 тысяч, что ли, что-то такое.
Вот. Но не суть, Паш, подождите. Во-первых, у вас вот здесь не будет одновременно ВККом,
Ютьюбы, да? А вот здесь браузер, конечно, в картах может быть. Но браузер получает пакет,
расшифровывается, смотрит, что внутри. Откуда это? Там пачка заголовок. То есть даже когда
ты смотришь видео, смотришь видео, ты же... В большинстве случаев, в большинстве случаев это
нечестный бровоткаст, то есть нечестное стримовое обещание. В большинстве случаев это набор пакетиков,
которые склеиваются в маленький кусочек видео. Этот кусочек видео показывается и запрашивается
следующий кусочек видео. То есть на самом деле, когда ты смотришь Ютьюб... Ютьюб, не знаю, но
большинство стриминговых сервисов, не знаю, когда ты смотришь, ты смотришь много-много-много маленьких
10-секундных видео или там же даже трех секундных видео. Вот. А как их склеиваются? Как они склеиваются
в это видео? По информации из пакета.
Послушателям, да. Потому кто будет обрабатывать?
Подожди. Это сервак. Это... Это этот. Это ноутбук. Вот здесь мы пока на стадии о том, что мы поняли,
что... Сейчас дойдем. Что веб-сервер... Как веб-сервер обрабатывать. Вот здесь браузер.
Принимает решение о том, в какую кладку кинуть то, что пришло. На основе информации из пакета.
Из вот этого пакетика, который здесь летает по сети. Итак, вот. Давайте, поедем дальше.
Операционная система поняла. Итак, нужно вызвать веб-сервер. Это его запрос. Дальше.
Подожди, подожди, подожди, подожди. У нас пока операционная система получила пакет. Поняла, что это
веб-сервер. Ей нужно веб-сервер этот пакет передать. Хорошо. Она... Как она это делает? То есть веб-сервер
это какая-то программа, которая работает по какому-то из, ну, не знаю, несколько возможных порядков.
Она передает ему информацию о том, что вот это пакет твой. Веб-сервер, как правило, многопоточный.
Допустим так. Допустим, веб-сервер устроен так. Он слушает отдельный поток, он слушает новое
подключение. Он увидел, что новое подключение запустил у себя поточек именно для этого
подключения, так? Запускает поточек для... Передает пакет ему. Вот странный чувак хочет
посмотреть в ВК.Ком, говорит он. Запускай Абраватор. Дальше.
Окей. Понеслась. Одобрили подключение. Подключение установилось. Дальше. Браузер формирует запрос
непосредственно на содержание этой странички. Отправляет в ВК.Ком. Потому что аму дошло сюда.
Нужно обрабатывать дальше. Здесь у нас начинается нюанс. Смотря, зависит от того, как мы вот эту
штуку с вами написали. И что это такое? Бывают разные ситуации. Эта штука может, например, может
обработать запрос как-то сама. Может куда-то сходить. Может запустить вашу программу. И в большинстве
случаев происходит именно так. Вы веб-сервер не пишете. В Nginx не пишете. Просто говорите о том,
что, чувак, дорогой Nginx, точнее, когда придет запрос на ВК.Ком, запусти вот эту программулину и
передай все данные. Вот здесь у вас программа. C++-ники, скорее всего, строятся прямо внутрь вот
этого. Ну, у них там, они любят посложнее. А нормальные ребята, C++-ники, C++-ники и так далее, они напишут
настоящую программу. Я один раз устраивался на работу в Яндекс. Меня спросили, а как вы сделаете?
Вы смотрите, слушайте, нам нужна такая штука. Нам нужно данные собирать с пользой. Ну, просто
емейлы собирать. Тогда еще можно было, без всяких зашкаров, собирать емейлы и говорить пользователю
спасибо. Как вы это сделаете? Я начал думать, ну, блин, это же Яндекс. Ну, наверное, у них как-то там,
не знаю, все очень круто устроено. Наверное, они как-то напишут что-нибудь мощнее сквозь систему.
Короче, правильный ответ был, чувак, мы на PHP скрипт напишем и запустим его. Даже в Яндекс. Почему?
Потому что это самый простой вариант решения, самая простая задача, простой решение. Не надо ничего
городить. Написали скрипт, обрабатывать будет моментально, заточить невозможно. Все, пишем.
15 минут работы. Поэтому не смотрите с высока на простые человеческие радио. И так вот, то есть,
возможно, разные варианты. Кто-то должен ваш запрос обработать. Скорее всего, это не веб-сервер.
То есть, веб-сервер на сервере, программа веб-сервер на сервере предназначена для того,
чтобы вот эти запросы управлять ими, аркестрировать, обрабатывать, вызывать нужные обработчики.
Скорее всего, будет вызван какой-то внешний скриптик или какая-то внешняя программа ваша,
которая получит уже вот этот весь самый запрос, обработает его, сходит куда-нибудь в базу данных,
вернет его веб-сервер и веб-сервер его вернет обратно. Вот на вот этой простой схеме такие,
видите, сложности. Где может что-то пойти не так? Здесь их дофигище.
Окей, первая проблема. Еще проблема.
Ну, мы пока в рамках одной машины находимся, да. Ну, это ты большие,
даже на уровне вот этой схемки. Например. Да, то есть, это один способ нас задосять.
Это лечится, да. То есть, например, вот эти же PHP-потоки, которые обрабатывают запросы их,
тоже нужно несколько выпустить. Один работает с вот этим, другой работает с вот этим потоком веб-сервера.
То есть, у нас кончится место под потоки веб-сервера, у нас может кончиться место под вот эти PHP-истории и так далее, да.
То есть, у нас проблемы, за всем нужно следить. Ну, за всем следят архитекторы, системные администраты,
когда работают со всем этим думают. Вот как сделать так, чтобы или смотреть, например,
такая ситуация. Вот у нас вот этот вот поход в базу данных занимает, не знаю, секунду.
Ну, это недопустимо много, но допустим. А вот работа вот здесь, она очень быстрая.
Она сразу с вами начинается, сразу дисбаланс. Нам нужно вот этих вот историй больше, чем вот этих.
Ну, понимаете, да. То есть, если они начинают, то есть, вот один поток веб-сервера может работать
сразу несколькими потоками отсюда. Или, например, такая картинка. А что делает вот этот поток,
пока наша PHP считает? Простая. Ну, может быть, ей чем-нибудь полезно нагрузить на это время?
Ну, какая-то вот начинается, да. В NGINX возможности управлять. NGINX вот эта конструкция, это NGINX.
Или это Apache. Вот таких много на самом деле. Вот у Гошечки свои, там еще какие-то есть. Или такая
конструкция. Смотрите, у нас вот пошел запрос, мы поняли, что это нужно вызвать вот этот скрипт.
А мы его заново запускаем? Каждый раз? Можно нет. Да. И ситуация, когда мы его не каждый раз
запускаем, называется протокол fast CGI. А если мы его каждый раз будем запускать, то просто CGI.
Это отличные истории, сейчас уже есть более новые. Но общая схема, она все время примерно такая.
Пользователь делает запрос, он проваливается сюда, проходит до сетевой карты сервака,
там собирается, операционная система смотрит кому этот запрос предназначается, вызывает
кому. Кому, как правило, это веб-сервер. Веб-сервер смотрит на... обычно он смотрит на вот эту вот
часть, которая вот здесь идет после названия. Называется URI. Вот это все называется URU, а вот этот
конкретный кусочек называется URI. Смотрит, по нему определяет, какой скрипт вызвать или какой-то,
не знаю, внутренней программы, внутренний кусочек модуля, модуль запустить и так далее.
Вызывает его, передает ему все, что представил браузер, ждет ответ и отдает. А вот, например,
как вы поступите? Смотрите, наш запрос-то маленький был, дай VK.com, а страничка VK.com может занимать,
не знаю, ответ может занимать 200 килобайт. Вот посчитала вот эта штука, насчитала 200 килобайт
от VK.com. Правило передала веб-серверу первые 10 килобайт. Ну, постепенно начала передавать.
Вы сразу начнете обратно ее отправлять в пользу или подождете? А что зависит? Вот чем
хороши и плохи оба варианта? Окей. Сразу отдавать хорошо тем, что быстрее пользователь увидит,
быстрее начнет браузер обрабатывать запрос, им уже нужно все еще построить, дом дерева построить и
так далее. А чем плохи варианты? Давай сразу. Почему? Сетевое соединение все равно одно,
мы по нему фигачим. Отрисовать я, возможно, почти точно не смогу, пока страничка не загрузится.
Ничего. Ну, пока весь HTML как минимум не дойдет до меня. Я даже не приступлю к этой
истории, но не важно, я уже все равно начну ее обрабатывать хоть как. Это все равно быстрее,
давайте сразу быстрее. Но это плюс, чем минус. Если будем ждать, будем более равномерно загружать.
Да без разницы. У тебя же не один такой, у тебя, там не знаю, 200 пользователей одновременно
обрабатывается. Раз на раз. В среднем будет одна. Да не, не будет. Какая разница? У тебя за секунду
обрабатывается 200 запросов. Ты в миллисекунду отдашь по 10, что ты отдаешь в миллисекунду 200.
Такой же, да такой же. Проблема в том, что если мы начинаем отдавать сразу, у нас вот эта цепочка
раз, два, три, встает намертво. Мы никаких вот этих вот историй о том, что у нас один поток веб-сервера
работает с двумя, тремя PHP, мы уже не сможем сделать. А если мы начали отдавать, а если PHP начинает
подтормаживать и генерирует две секунды, три секунды, четыре секунды, все это время вот этот вот канал
у нас как бы стоит в растопырку. Веб-сервер, кусочек веб-сервера занят. Канал между ними занят.
Что осталось сделать до злоумышленника? Найти у вас страничку, которая долго считается,
и отправляйте 200 одинаковых запросов. И он положил ваш серва. То есть буферизация вот здесь вот нужна
скорее с точки зрения безопасности. Веб-сервер забывает отправил в PHP запрос. Это у нас веб-сервер,
это у нас upstream так называемый, куда мы отправляем запросы. Отправил запрос и
забыл про него до тех пор, пока он не будет полностью сформирован. Когда он полностью сформирован,
он его принимает, буферизует у себя и только после того, как он полностью скачал к себе,
начинает отдавать. Обычно работают вот так, так просто тупо безопаснее.
Так, едем дальше. Итого, мы отдали сюда вот эту 200 килобайтную HTML. Браузер ее получил. Дальше
что он делает? Там рановато. Там только HTML. Ни картинок, ничего. Он ее парсит, строит дом
дерева и запрашивает все необходимые пайлы, которым нужно запросить для того, чтобы на
рисовать. Если вы откроете любую страничку, вы видите там заголовки в пачку CSS файлов,
стилевых файлов, пачку JavaScript файлов и так далее. Это все скачивается до того,
как он начинает что-нибудь рисовать. CSS файл управляет тем, что такое HTML. Видели HTML когда-нибудь?
HTML просто некая симантическая разметка. А как она выглядит? Как она выглядит?
Описывается в CSS файлах. Проширение просто-напросто. Итого, браузер распарсил, обнаружил,
что нам нужно скачать 5 JavaScript файлов, 10 стилевых и 154 картинки. Он начинает их скачать.
Обычно в этот момент браузер уже не достаточно одного соединения с первоком. Он, как правило,
восстанавливает несколько соединений с каждым доменным именем. В том 4 или 8 типа такого, да,
и фигачит в 4 или 8 потоков одновременно. Как минимум потому, что они могут просто лежать
на всех серверах картинки, на одном CSS, на другом JavaScript, на третьем. А почему ограничивает 4 или 8?
Просто для того, чтобы как раз пропускную способность сетевой карты вот здесь,
чтобы не переборщить. Самого себя не убить. Итого, запрасывает первый JavaScript,
понеслась. Точно такой же процесс. Возможно, на другой сервер пришел. Определилось,
что такое JavaScript, где он лежит, надо ли вызывать PHP или можно прям вообще с диска забрать. Бывают
же такие запросы. Нам с диска забрали, отдали, сформировали ему, скачали мы 5 JavaScript, 10 CSS.
Что я забыл? Перед тем, как скачивать первый CSS, что он сделает? И первый CSS, и второй CSS,
и второй CSS. Хорошо. Каждый файл проверяется. Каждый файл отдельный. И вы можете для каждого
файла задать разные параметры каширования. Где сдаются параметры каширования? Как это происходит?
Да? То есть вот когда вот здесь ваш PHP или кто-то, неважно, C, C++, сервак и так далее, генерируют
ответ, он его точно так же упаковывает и говорит, слушай, я тебе сейчас буду возвращать картинку,
не знаю, лога png, картинка изменялась тогда-то, размер у нее такой-то, запиши ее, пожалуйста,
навечно. И отдаёт такой запрос, да? То есть отдаёт не только логу png, но и весь набор параметров.
Так что тебе параметр. Браузер, когда их получит, поймет, ага, хорошая картинка,
можешь закашировать навечно. Кашируют навечно. Что такое JavaScript? Знаете.
Клё, как вы поменяете лога, если его нужно поменять? А вы его закашировали навечно.
Другое имя сделай.
Всё верно.
Картинка лога png вечно. Когда нам нужно поменять картинку, мы сделаем лого-1png и это будет уже новая
картинка. Обычно, на самом деле, знаете, как есть, блин, что же это за доскатка? Делают даже так,
лого png, знак вопросно, вер равно 1, вер равно 2, вершин, вер равно 3 и так далее. Для браузера это
всё разные картинки. Можно вот эту цифру поменять вообще чуть ли не автоматом. Можно так настроить
выкатку своего боевого решения о том, что у тебя при изменении в герте, вот эта цифра имплементируется на единичку.
Ну и всё. И так сделать для всех картинок. Поэтому, когда у вас, например, что-нибудь заглючило,
какая-нибудь страничка в интернете заглючила, вы добавьте туда что-нибудь там, не знаю, вер равно new
или что-нибудь, ну просто киши сбросите. Как у вас в браузере, так на самом деле и вот здесь,
потому что вот здесь, мы про это не говорили, но здесь везде киши, вот здесь кэш, вот здесь кэш,
здесь тоже кэш, у базы данных тоже кэш, у файловой системы тоже кэш, везде всё закэшировано напрочь,
иначе это вообще работать не будет никогда. Везде всё кэшируется на разных уровнях. Какими-то кэшами
мы можем управлять, например, у нас вот здесь мы можем управлять кэшом в нашей программе. В
операционной системе тяжеловато, тяжелей, но операционная система тоже всё кэширует, всё что
может. Все ваши запросы в базу данных, сетевые запросы, всё что может она кэширует и точно
также буферизует. То есть вот здесь мы можем принять решение, мы сразу отдаем ответ от PHP или
нет. А операционная система по этому вопросу уже подумала и её уже настроили, и мы на это, как правило,
не влияем. И скорее всего она как раз всё кэширует и всё буферизует по максимум. Пока
кто-нибудь там не знает, пока запрос полностью отсюда не придет, никуда он не пойдет.
Ну давай, что можно кэшировать. Операционная система у нас управляет всем железным компьютером.
Всю коммуникацию с железом компьютера ты можешь управлять. Ну во-первых, смотри, работа с дисками,
с дисками всё кэшируется. Когда ты считываешь один байт с диска, ты же реально, ты же понимаешь,
что ты считываешь не один байт. Ты считываешь вот какой-нибудь такой огромный кусток, да,
она кладется в память, тебе дается байт. Вот этот кусток не выбрасывается или выбрасывается,
но не сразу. Операционная система кэширует диски, операционная система кэширует, буферизует
работу с сетевой структурой, естественно. Естественно, иначе бы это всё не работало.
Итого, JavaScript, возвращаясь к нему. Наша HTML страничка, которую мы показываем, состоит из самого
HTML, суть из стилевых файлов CSS, которые показывают как оформлять эту суть, да, то есть как выглядит
заголовок. В HTML написано вот это заголовок. В CSS написанный заголовок выглядит так, огромные
буквы красного цвета. Браузер это всё понимает, соединяет и показывает. JavaScript, это на самом деле
не к сожалению, к счастью, потому что JavaScript позволяет нам делать такие вещи в браузере.
JavaScript это программа, которую браузер запускает у себя. То есть мы с вами можем на серверной
стороне создать какую-то программу, отдать её браузеру, и браузер её запустит и будет выполнять.
У вас в каждой откладке каждого браузера работает адовое количество JavaScript программ.
Современная, когда вы сидите в ВКонтакте, в Фейсбуке, не знаю, у вас же в тиктоке, вы где сидите?
Но когда приходит новый комментарий, у вас же страница не перегружается, а комментарий
появляется, или когда приходит новое сообщение, или новое поп-апчик где-нибудь всплывает. Это всё JavaScript
программы. Знаете, как мы раньше делали, 20 лет назад? Мы страничку перегружали для того, чтобы
обновить что-то. Полностью ты сидишь, а в фигах страница перезагружается. И там тебе письмо.
Вот сейчас же такого нет. Почему? JavaScript программка запустилась и постоянно сама JavaScript
программка, работающая вот здесь в браузере, в каждой конкретной нашей вкладке тоже может делать
запросы к серваку, получать оттуда ответы какие-то, как их обрабатывать. Например, она может делать
запрос, а не появился новый писем или новых комментариев к моему посту. Появилась, говорит
сервак, держи, вот для новых комментарий. Ага, отлично, отображают. И JavaScript программка заставляет
браузер нарисовать этот новый комментарий. И браузер на лету нарисует. У вас что-то там
раздвигается, появляется комментарий, лайк появляется и так далее. Вот, примерно так. Это
штука работает. Показали, то есть браузер не успокаивается никогда. А может и JavaScript
программка может и не постоянными, в смысле не запросами делать, а попытаться создать постоянное
соединение. Например, просто слушать. Как только здесь что-то появится, говорит она, пришли мне
сразу. Вариантов много. Вот примерно так вот это происходит. То есть, когда вы откройте любой
сайт, откройте ВК. Кто может пользоваться режимом неотладки, это режим разработки в браузере.
Нормально, все программисты. Ну короче, для тех, кто не пользовался, это очень интересно. Поищите,
запустите и наберите vk.com. Посмотрите, сколько запросов делает ваш браузер к серверу vk.com. Там,
по-моему, 700, что ли, для того, чтобы отобразить одну страничку. А потом просто посидите на этой
страничке и вы увидите, что они постоянно общаются. Ваш браузер с ВК постоянно общается,
без перерыва. Ну, почти с любым сайтом. Постоянно что-то скачивает и так далее. Ладно,
нам последнее осталось. Вот это вот, ведь на самом деле никогда не просто провод. Что на самом деле
здесь у нас? Агаунд Робина, это уже ближе к нам вот здесь. Нам добраться нужно вот здесь,
мы не знаю, в Москве, а вот здесь, не знаю, в Питере стоит. Как доберемся? Ну да, все верно. То есть там на
самом деле цепочечка выстраивается между вашим ноутбучком и большим количеством серваков.
Вот это тут маршрут. И вам можно посмотреть. Трис роут называется программка. Опять же,
если любопытно, выполните ее. В Винде есть. В Винде она Трис РТ называется. Набирайте Трис РТ,
БК Ком и увидите весь путь, который делает. Он, по-моему, проскочит про серваков. 30 он проскочит.
И, к сожалению, каждый из этих серваков тоже может влиять на то, что мы можем делать,
а что мы не можем делать. Потому что где-то может быть кэш, где-то может быть сорн, где-то может
быть еще что-нибудь, где-то может быть какая-нибудь отдельная история и так далее. То есть мы это все,
но это мы все будем учитывать, когда будем сами что-нибудь проектировать. Вот, я для чего вот это
все нарисовал. Это очень упрощенная схема, но мы на нее будем очень-очень сильно опираться.
То есть, прочитайте осищную модель. Это поможет. То есть, как бы вот отсюда, от браузера, вот до
сюда все наши 7 уровней оситы и происходят. Здесь у нас канальный, да, самый нижний. Физический,
да, физический. Здесь у нас, если я не ошибаюсь, представление, по-моему, или приложение. Приложение,
да. Ну вот, а здесь обратная ситуация. Отсюда до сюда они собираются в обратном порядке.
Вопросы по вот этому маленькому, маленькому кусочку? Нет вопросов? Ну тогда расходимся,
в следующий раз встречаемся и... Давай.
Там себя не похвалишь.
Вопрос, то кем ты хочешь быть. Если ты хочешь быть технологием,
какого уровня технологием ты хочешь быть? В любой компании, которая занимается большими проектами,
есть человек, который вот это все понимает. Если хочешь быть просто разработчиком,
у тебя стоит задача. Так, ну подожди, ну давай я поработаю немножко вашим личным психологам.
Так, я стираю это все, да. Смотри, это на самом деле, знаете, что это, мы вот так, сейчас я вам
расскажу кусочек из того, как мы проектируем. То есть мы делаем конференции для разработчиков,
и как мы понимаем, какую конференцию сделать следующей, как мы нашу линейку продуктов расширяем.
Вот рассмышления точно такие же. Вот ты программист. Вырослив ты программистом,
пошел расстроиться программистом. У тебя какие варианты дальнейшего развития? Вопрос по жизни.
Окей. Middle. Senior. Дальше. Вот здесь вот начинается развилка, и вам в какой-то момент
придется для себя решить. Первый вариант – это тимлит. То есть ты становишься, начинаешь управлять
людьми, другими программистами управлять людьми. Нет-нет-нет, это оба нормальные вертикальные,
в смысле оба роста вверх. Есть второй вариант. Ты начинаешь расти в экспертном смысле. То есть
здесь начинаешь расти в управленческом смысле, а здесь ты становишься экспертом. И вот здесь у тебя
архитектор. Вот здесь у тебя, я не знаю, ДВОПС. Понимаете? А? Согласен. Согласен. Согласен.
Скорее всего ДВОПС – это прямо вот сюда. Архитектор. Тимлит. Это то же самое. Например, у нас есть одна
конференция для вот этого уровня, для вот этого, для джинок у нас нет. У нас есть одна конференция
сюда, одна конференция сюда, одна конференция сюда. То есть ты в какой-то момент будешь
выбирать. Ты пойдешь управлять людьми или ты пойдешь управлять как бы системами, процессами.
То есть вот этот человек управляет системами, проектирует архитектуру, принимает решение о том,
как она будет работать, принимает решение о том, как она будет разрабатываться и так далее. А Тимлит
управляет людьми. Он вытирает сопли джунам, он как бы, не знаю, как бы веселит их, проводит с ними
one-to-one. То есть это другая работа. Да. Наверху они смыкаются опять. Кого? Если мы говорим про
техническую составляющую, они смыкаются в технического директора. То есть как бы в технического
директора можно вырасти как из Тимлита, так и из Тимлита. Но ему нужно и то и другое. То есть он
должен быть и управлять людьми уметь, и уметь в архитектуру. Но ты в любой момент, естественно,
можешь как-нибудь выскочить, не знаю, в продукт пойти или, я не знаю, в курьеры. Как угодно, да. Вот,
мы с вами, вот эта линейка. Мы с вами вот примерно вот так. То есть вот курс, который мой, он вот такой.
Курс, который, альтернатива, он вот такой. Ну вот как бы думайте. Я ответил на твой вопрос. Не надо отчаиваться.
Архитекторы менее востребованы еще в Product Manager. Я согласен, в Product Manager нужно больше.
Но хороших архитекторов ты вообще не найдешь сейчас на рынке. И хороший архитектор зарабатывает
кратно больше, чем Product Manager. Слушай, ты знаешь сколько сейчас программист зарабатывает? Ты же бешеный.
Ну, не знаю, ну, сотни тысяч рублей. То есть в Москве ценники уже там, не знаю, 300, 400, 500, 700. Могут занимать
сеньоры за милую душу. Эксперт, вот этот. 700, 800. Есть проблемы. Product, если я не ошибаюсь, все-таки поменьше.
Они тоже нужны, но все-таки они поменьше зарабатывают. И на самом деле ты зря. Одному хорошему проекту среднего
размера нужно один архитектор, один продукт. То есть они как бы такие. Ладно, еще вопросы? Нет? Ну, пошли.
