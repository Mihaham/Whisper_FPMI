всем доброго дня значит вас тут очень много я не знаю видели ли вы когда-нибудь друг друга
на нашем курсе который называется технология программирования в этом году практически даже
не удвоение а количество людей которые будут проходить курс два с половиной раза больше чем
в предыдущие разы вот почему такое произошло это произошло по той причине что теперь
весь фуфумаид проходит этот курс кроме направлений в т значит давайте подумаем почему вот как вы
думаете теперь курс проходит большее количество раз людей чем предыдущие потоки вот он на самом
деле важный вот и так или иначе вы будете сталкиваться с знаниями которые будут на этом
курсе и в будущем обучение и не поверите на практики когда вы будете работать в сфере
идти вот поэтому этот курс именно про так сказать промышленное использование кода войти мы с вами
на лекциях будем говорить про разные так сказать лучшие практики у всех были как минимум один
семинар или еще кого-то не было семинаров ну у кого-то еще не было семинаров на семинаре
будут рассматриваться технические темы плюс дополнительно мы с вами будем рассматривать
темы связанные с организации кода значит это паттерны проектирования на лекции мы тоже
отчасти буду смотреть давайте наверное представлюсь меня зовут пайл охтямов я собственно лектор
курса по технологиям программирования ну и по некоторым другим курсам тоже собственно сразу
такое ограничение скажу чтобы вы понимали значит еще раз уточню значит у нас есть чат часа ссылку
его покажу значит там нужно будет в одной ссылке будет слово драйв поменять на слово чат это для
тех кто еще не присоединился к чату нашего курса по идее ссылки мы должны были распространить вот
сразу скажу не бойтесь писать чат просто давайте договоримся следующее что нас очень много поэтому
старайтесь писать грамотно то есть грамотно по сути изложения потому что иначе это превратится в
некоторый хаос дополнительно кстати мы с вами и будем рассматривать некоторые вопросы коммуникации
потому что как ни странно в сфере идти код пишут не 80 и не 90 процентов времени а зачастую большую
часть времени отводится на коммуникацию потому что все-таки по это по а взаимодействие между
людей должно проходить между людьми для того чтобы строить это по давайте сразу определенные ссылки
значит полезные ссылки значит все материалы которые будут у нас на курсе будут располагаться
на гугл диске ссылка я не знаю задних парт видно или нет если не видно я постараюсь в следующий
раз увеличить шрифт в общем ссылка ахпл ru tp 2024 драйв если вас еще нету до сих пор в чате то
вы можете в этой ссылке драйв заменить на чат и вы попадете в чат наш и дополнительно мы будем
сдавать все домашние задания через систему ахчекру значит тут приходил иван в перерыве
бедно разруливающие все заявки просьба почитайте в основной информации о том как заполнять
заявку на регистрацию на курс почему мы это делаем нас 400 плюс человек опять же подчеркну
теперь очень важный момент который очень будет сильно влиять на вашу оценку причем причем
достаточно буквально deadline по заполнению форм будет 20 февраля в 20 59 мск значит я надеюсь что
большинство из вас уже заполнила эту форму но для того чтобы мы начали эффективно собственно
проходить задание нам нужно всех зарегистрировать это условие настолько требовательное что те кто
не зарегистрируется на курс до 20 февраля 2059 мы поставим пересдачу извините но такие будут
требования вот потому что нам нужно разруливать этот курс значит у нас с вами будет 24 группы у
нас всего значит всего будет 12 семинаристов и порядка 20 22 ассистентов которые будут помогать
вы проверки домашних заданий вот значит это что касается таких вещей по значит в чате мы
специально организовали процесс таким образом чтобы вы видели собственно кто является лектором
семинаристом или ассистентом к ним можно задавать вопросы значит давайте теперь расскажу все-таки
про что мы узнаем с вами на курсе во-первых в практической точки зрения курса мы будем
говорить с вами про ликбез разработчика кто знает как расшифровывать слово ликбез да
ликвидация безграмотности то есть мы с вами будем как раз рассматривать аспекты связанные именно с
промышленной разработкой значит дальше мы с вами поговорим про основы проектирования программного
обеспечения оно же сокращается как по после этого мы с вами рассмотрим методологии разработки
по и более того вы попробуйте эти методологи разработки по на практике потому что у нас
с вами будут проектные задания которые можно будет делать либо самостоятельно либо в небольших
командах и мы с вами будем учиться писать промышленный код не олимпиадный то есть в процессе
код ревью мы будем детально обращать внимание на практике использования промышленного кода ну
и в отчасти значит на сегодняшней лекции мы уже некоторые практики с вами посмотрим вот это
важно давайте сразу я пойму следующую вещь кто писал из вас код который располагается больше
чем в одном файле программы ага ну уже достаточно много это радует вот значит мы с вами должны
понять что тот код который мы обычно пишем на там курсов программирования на c плюс плюс или там
какие-то алгоритмы структуры данных это совсем не совпадает с тем как работает промышленный код
то есть алгоритмы они полезны они важны а программирование на c плюс плюс тоже естественно
важный курс но на самом деле не поверить на практике скорее всего вот те зазубренные знания по курсу
программируем на c плюс плюс вам понадобится на уровне синьора где-то вот там понятно что зачастую
эти практики мне совсем будут нужны главное чтобы ваш код был читаемым понимаемым и поддерживаем
и про это мы тоже сегодня с вами поговорим значит касательно того что мы будем делать с вами на
занятиях на лекциях мы с вами будем узнавать лучшие практики из промышленной среды я постараюсь
это донести и будем понимать почему на работе используется методология x а не методология y на
семинарах будут рассматриваться инструменты разработки значит первые несколько семинаров
будут посвящену тому как работать баше знакомится с линуксом и дополнительно мы с вами посмотрим как
работает система контроля версии он же гид собственно и дальше мы с вами на семинарах будем разбирать
например шаблоны проектировать сразу скажу что часть связана с шаблонами проектирования
программирования они будут отчасти на семинарах отчасти на лекциях почему так сделано потому что я
буду говорить про некоторые технологии собственно и показывать сразу на паттернах каким образом они
реализовываются просто чтобы вы понимали как это можно реализовать на практике собственно
система оценивания давайте сразу скажу 40 процентов это технические задания они будут появляться
наверное сегодня или завтра мы добавим нулевое техническое задание чтобы вы познакомились каким
образом работать системой системы проверки каким образом она работает значит дальше будет 40
процентов состоять из проекта это как раз проект который мы с вами будем писать по факту первый
такой промышленный код он будет на 30 эти 40 процентов развиваются на два процента значит 30
процентов это вы пишете сам программный код а 10 еще вы внедряете те технические задания которые
у вас были вы свой собственный проект потому что мы как раз будем смотреть про технические задания
не то как просто взять и реализовать а для того чтобы их внедрить на практике то есть по факту
можно считать что технические задания вот технический стэк который мы с вами проходим это
основная часть работы наши наши в этом семестве мы по факту являемся на лекции таким сопутствующим
материалом для понимания того а зачем же мы все это проходим и 20 процентов это контрольные
работы значит я вижу что нас очень много поэтому нам нужно будет придумать как организовать процесс
контрольных работ я думаю что мы с этим справимся возможно что аудитория будут проводиться еще и в
соседней аудитории то есть как-нибудь мы возразделим вот контрольные работы первая контрольная
работа точно будет по материалам лекции вторая контрольная работа будет по совместному материалу
лекции и семинаров и посмотрите внимательно важный пункт чтобы понятно в сумме сколько
получается 100 процентов да понятно что можно допустим решить все технические задания и ничего
не сделать по проекту и написать контрольную наполовину и получить оценку хор 5 кажется да
поэтому чтобы такого не было разнообразие мы для каждого из пунктов водим блокирующий балл то есть
что означает в прошлых годах блокирующий балл такие были 15 технические задания 10 проект
и 5 контрольные то есть если вы все пороги автоматически проходите вы уже получаете вот
вот понятно что больше нужно сделать да и еще в чате поднимался вопрос раз уж это было объявлено
публично и с плюсом к этим ста процентам есть еще 10 процентов которые являются активностью либо
на семинарах либо на лекциях то есть в принципе я буду на лекциях отмечать тех людей которые
часто задают вопросы и пытаются коммуницировать со мной и на семинарах тоже семинаристы будут
отмечать активность то есть можно получить еще сверх балл то есть не надо переживать что вот
допустим десятку получить нереально на самом деле вполне реально и введение как раз 110 процентов в
прошлом году это показала так давайте посмотрю да значит теперь касательно те темах лекционных
занятий это draft опять же темы могут варьироваться мы с вами будем говорить про проектирование по по
паттерны проектирование дальше мы научимся с вами на базовом уровне разбирать диаграммы то
есть это язык общения программистов независимости от кода после этого мы с
вами рассмотрим какие же типы парадигмы языков программирования существует и дальше мы пойдем
в интересную тему это методология разработки по вот давайте представим себе что вот нас здесь
я не знаю сколько порядка 400 человек и вот представьте себе что вы работаете в компании под
названием и вам нужно каким-то образом наладить какой-нибудь там взять какой-нибудь стартап
организовать ну потому что стартап организовать с меньшими людьми но это по факту уже ну компания
которая средняя на рынке айти по количеству людей вот в принципе компании 400 человек может
сделать достаточно хороший продукт именно такой технически хорошей и вот как организовать
разработку так чтобы каждый из вас что-то делал и при этом не свихнуться от процесса управления
мы про это будем говорить потом очень важная тема которую обычно забывают и она специально
здесь включена это тестирование программного обеспечения то есть мы с вами поймем что яндекс
контест это не панацея всех болезней и что тестирование на самом деле происходит в реальной
жизни совсем по-другому после этого мы перейдем с вами к теме под названием сетевая инфраструктура
да у нас будет небольшой блок курса по сетям почему это важно я общался значит недавно
стимлидом в одной команде в компании в яндексе и он спрашивает я спросил его а какой skill set
набор умений необходим для того чтобы человек успешно внедрился в компанию и он мне как раз
сказал что у людей достаточно сильно проседают в сети то есть понимание того грубо говоря что
происходит когда в адресную строку в браузере вбиваете ссылку и нажимаете на enter на самом
деле там происходит огромное количество вещей под капотом дальше мы с вами будем говорить про
инфраструктуру и архитектурные паттерны тоже рассмотрим это на лекции и будем рассматривать
еще и анти паттерны проектировать то есть каким образом не стоит все это делать и дополнительно
возможно мы с вами поговорим про такую тему как роскомпиляция то есть почему это важно
потому что сейчас есть такое понятие как интернет вещей умные холодильники умные часы умные
устройства камеры и так далее и они работают по другому принципу нежели наши обычные компьютера
это тема лекционных занятий они могут варьироваться но в целом вот на лекциях мы будем говорить про это так
давайте я здесь остановлюсь это организационные моменты были есть ли вопросы все такие молчок
хорошо
вы контрольной значит будут некоторые задачи именно практическими по тем мы будем с вами
рассматривать разные метрики качества по и там будет задача все посчитать метрику качества по
либо будет тема такая что образно говоря вот вы производите технологию x хотите внедрить продукт
y вот какой методологи разработки вы собираетесь использовать вот и поясните плюс и минус понятно
что сразу скажу что в этих контрольных мы не будем именно четко вот типа где есть субъективные
вопросы нам мы не будем четко спрашивать корректного ответа потому что корректного
ответа может не быть мы будем просить вас пояснить ваши мысли если ваши мысли выглядят
здравыми то почему бы и нет вот потому что как ни странно в сфере it не все так объективно как
изначально это может показаться так давайте еще вопросы хорошо давайте тогда двигаться дальше
давайте начнем с затравки значит проектирование по мы с вами будем проектировать программные
обеспечения и вот смотрите нам нужно с вами к примеру создать систему которая будет там не
знаю ежемесячно давайте заходить миллион пользователей давайте подумаем что нам для этого нужно будет
да хорошо нам нужна база данных вопрос одна машинка или очень много машин да
что еще да который справляется с высокой нагрузкой согласен
да географическая диверсификация согласен то есть нам нужны серверы в разных точках мира
да какой тип нагрузки у нас будет у нас будет пиковая нагрузка или так сказать распределенная
во времени нагрузка да да какой уровень безопасности данных мы должны обеспечивать
безопасности и приватности данных вот допустим есть такое понятие как 152 федеральный закон да
значит вы не поверите когда вы откроете любую страницу вы увидите типа мы обеспечиваем серверы
по 152 фэзе то есть нам если нужно внедрить какой-то проект нам нужно читать спецификацию и
сертификацию которая нам необходимо обеспечить допустим если мы говорим про 152 фэзе то там
есть четыре уровня доступа к данным вот и какие-то недостаточно общие но допустим если вы храните
какие-нибудь у вас а-ля проект в сфере медицины то понятно что персональные данные пользователей
вот именно там у человека забрали кровь грубо говоря и она идентифицируется этим человеком
конечно же использовать нельзя то есть вообще ни в каком виде их нельзя распространить из
данной надо обезличивать еще да настроит способ взаимодействия между этими машинами
да типы клиент серверного взаимодействия то что у нас будет работать на клиенте что у нас
будет работать на сервере еще что необходимо учитывать это обновление системы потому что я
не знаю сталкивались ли вы наверное с сферой игр вот сейчас из-за того что очень жатые бюджета
и очень жатые сроки возникло такое понятие как патч первого дня слышали про такое что когда
только как только игра выпускается она выпускается с багами не сырая и поэтому там через день или
через два выпускается патч которые правят ну какое-то подавляющее количество исправлений
потому что грубо говоря когда мы выпускаем игру или любой проект у нас сначала есть какие-то
закрытые тестирование мы рассылаем игру достаточно раньше то есть на самом деле игра готова за
некоторое время до ее выпуска значит сразу скажу перевод выпуск релиз это одно и то же вот я буду
если какой-нибудь жаргонный термин у меня проскакивает пожалуйста останавливайте и
я постараюсь рассказать что этот жаргон означает в общем очень много что нам нужно да это вот такой
открытый вопрос и мы видим сразу большое количество аспектов которые нам нужно рассмотреть поэтому
давайте начнем с плохих советов значит плохие совета вы наверное все знаете что такое айде ну
или по крайней мере пользовались и это интегрированная среда разработки собственно плохой совет запускаем
проект на миллион пользователей через айде ну звучит смешно да то есть сразу скажу что когда
вы запускаете кнопочку run на самом деле под капотом происходит некоторая магия и желательно
бы разбираться в этой магии вот запускать через командную строку тоже можно но есть проблема и
как раз про это будут в семинаре там вы командной строке про башка договорится вы запускаете в
командной строке у вас компьютер отключается да или вы просто закрываете эту вкладку с
командной строкой у вас система на миллион пользователей падает понятно что так не стоит
делать так ну писать код на коленке на самом деле иногда это происходит но желательно детальное
проектирование всей этой системы еще один плохой совет да к сожалению которым редко пренебрегают
написано сами разберитесь то есть вы даете инструкцию да и говорите ну нет инструкции в
общем вот вам интерфейс пожалуйста тыкайтесь смотрите вам далее давайте в качестве примера
задание по мотану да что означает писать задание по мотану на коленке вы такие садитесь не делаете
его за месяц за два начинаете делать садитесь начать вы последние там не знаю в последнюю
ночь это еще хорошо и вы такие идете просто уже на пару по мотану сдавать задание и вот вы пишете
код реально на коленках просто потому что предыдущую с предыдущей пары еще люди не вышли вот и вы
пытаетесь судорожно написать код точнее не кота задания для того чтобы его сдать или пока вас
там не вызвали там преподаватель сказал что образно говоря мы сдаем тетрадки в конце пары и
вы сидите на паре пишете типа судорожно хотя с учетом того что сейчас в принципе у всех ноутбуки и
можно сидеть в любом месте то так или иначе скорее всего вероятно в буквальном смысле код реально
пишется на коленке потому что просто садимся и пишем код на него на этих коленках тут это образно
сказать образное насказание я ответил на вопрос вот поэтому важно именно иметь документацию более
того в некоторых сферах вы не поверите вот есть такие достаточно строгие требования по
сертификации с которым я статнулся где нужно весь код который вы используете сторонней
прокомментировать каждую строку кода это вот самые требования строгие требования по сертификации
которые могут возникать и последний пункт не защищаем систему собственно сейчас есть достаточно
большое уязвимость количество уязвимости которые можно реально внедрить и допустим вот недавно
на днях вышла там достаточно большая проблема уязвимости выяснил с которой грубо говоря
пользователь может получить права супер пользователя который может выполнять все действия если кто
знаком это было найдено в докере вот такая уязвимость или другая уязвимость которая была
достаточно на слуху я не помню то ли год то ли два назад есть система для логирования данных то
есть вы заходите вы заходите на страницу на какую-то и у вас сразу там появляется какая-то
информация давайте может быть если хотите я сейчас эксперимент покажу смотрите значит сейчас
я открою команду строку открою новую еще и сделаем так теперь нам нужен экспериментатор который
возьмет и зайдет на сайтах чекру вот прямо сейчас заодно протестируем нагрузку
о пошли пошли пошли запросы то есть вот все как только вы заходите у вас запрашивается какая-то
страница в интернете да и вот эти все действия реально идут да к сожалению тут ip адрес не
отслеживается но по факту реально еще отслеживается ваш ip адрес которого вы зашли на это
о проводим нагрузочное тестирование более того видите здесь есть информация о том с какого
браузера вы зашли это сохраняется это используется допустим для бана вашей страницы допустим если
вы пытаетесь каким-то ботом зайти на сайт да кстати тут видно что у большинства из вас
страницы закашированные потому что здесь 304 код возврата то есть вы не выполняете
вообщем интересный эксперимент да вот и собственно в этой библиотеке нашлась уязвимость ну не в
это в аналоге библиотеке для ларгирования нашлась уязвимость который можно было зайти от
супер пользователя и начать выполнять любой код системе ее поправили это самая критичная
уязвимость которая была за последнее время все давайте я остановлю этот экран вот то есть все
равно защищать систему надо потому что если допустим какие-то данные утекут это судебное
разбирательство прямо сразу вот это что касается плохих советов и вот мой любимый пример вот
смотрите вот такой вот прибор он называется глюкометр он измеряет уровень сахара крови
вопрос почему документация у этого маленького безобидного устройства может достигать 50 страниц
да риск ошибки очень большой особенно когда мы работаем с кровью то есть мы забираем кровь
у определенного человека да есть достаточно опасная болезнь заражение крови и не дай бог
допустить поэтому там именно указывается каким образом палец прокалывать каким образом забирать
это все дело пишется что пожалуйста проводить это все дело сваткой аккуратно вот и так далее
значит это глюкометр у лактометра который измеряет уровень молочной кислоты в крови лактоза там
документация еще больше потому что несколько режимов работы есть вот поэтому это очень важно
ну и собственно понятно что еще вот если у нас есть такая система на миллион пользователей да она
скорее всего должна быть достаточно большой и мы с вами явно должны видеть архитектуру этой
системы да поэтому зачастую мы делаем некоторые эскиз значит это допустим эскиз того как выглядит
автомобиль мы с вами видим что я не знаю у кого были уроки черчения или сейчас это уже было да но
собственно чтобы машина поехала нам нужно построить этот эскиз чтобы мы с вами реально видели типа
соотношения по сторонам потому что когда мы это с вами все будем собирать и внезапно машина может
не не завестись вот понятно что первое это эскиз дальше у нас возникает модель то есть маленький
маленький прототип который мы тестируем на он не в полной нагрузке то есть образно говоря если
мы говорим с вами про по о не про по про классическую с тем что такое модель машины это прототип который
там для которого высчитывается аэродинамика процессов там автомобиль едет либо мы говорим что
у нас если мы хотим запроектировать самолет то мы должны предварительно этот самолет не
выпускать в промышленное использование а провести испытания в аэротрубе наверное вы слышали сейчас
что сейчас есть проблемы у компании боинг критические проблемы что у них несколько самолетов уже
попало в крупной авиакатастрофа то есть у них есть колоссальные проблемы в последней миссией
с которыми они пытаются разобраться вот если мы говорим про эскиз то это архитектура самой
системы мы рисуем а в качестве модели мы можем взять ту же самую маленькую маленькую систему и
допустим мы запускаем ее не на тысячи машин а на двух трех смотрим каким образом какую нагрузку
мы с вами можем переварить вот или если мы говорим про какую-то небольшую систему то вот таким
образом может выглядеть эскиз в программном обеспечении это так называемый диаграмма классов
давайте сразу прошу все ли знают здесь что такое класс так у кого-то уже был c плюс плюс у всех
до классов дошли вот хорошо это эта сущность вы которой значит мы можем выделить некоторые
общие элементы в классе могут быть поля и у класс может выполнять некоторые роли посредством методов
этого класса вот здесь в принципе мы с вами сразу видим что это за по как вы думаете тут есть
аккаунт класс значит от него наследство кредит аккаунт да скорее всего это что-то связано с
банковской сферой значит вот такие диаграммы называются и мы будем разбираться каким образом
их можно строить допустим мы с вами видим что у организации вот смотрите я сейчас покажу у
организации есть адрес адреса и адресов может быть либо 0 либо 1 то есть мы на диаграмме в коде
мы бы написали что это у нас объект типа ну нан там нил разные языки программирования а вот здесь
мы в схематическом виде видим что у пользователей либо существует организация либо не существует
организация вот а вот этом мы здесь видим что это тип кинам перечислителя то есть это либо дом
либо офис вот давайте посмотрим например и скажем значит хорошие это прототип нет а как мы это
поняли на смотрите у нас есть вот центральный объект сразу скажу что этот объект называется
университет и тут от него какие-то большие количество связи так вот знакомьтесь это первый
антипатор в проектировании так называемый божественный объект или еще его называют
то есть это сущность которая по факту существует везде то есть система без нее не работает как
понять что перед нами находится год обжиг на самом деле это можно понять по названию классов вот
смотрите если класс называется система программа что-нибудь еще давайте синонимы какие-нибудь
ну да допустим мэйн да собственно если у нас есть класс мы он нужен только для того чтобы
запустить программу больше ничего он не должен делать вот если мы говорим что у нас система
икс да то класса икс не должно быть или он должен быть достаточно маленький только для старта
приложения да тут честно это просто для визуализации нужно вот и давайте посмотрим как раз на примеры
систем которые у нас могут быть значит вот так выглядит линукс сразу скажу что линукс это не
операционная система это ядро и вот обычно когда у нас система большая ее сначала делят на наборы
компонент либо модули больших либо сервисов а потом каждый из компонентов или сервисов делят
на классы объекты значит вот так выглядит ядро линукс у нас с вами есть интерфейс для системных
вызовов то есть для того чтобы выполнить действия какие-то это может быть либо управление процессами
вашими программами либо переключение памятью либо работа с файловой системой либо управление
с устройствами по идее на семинарах должны были показать что в линуксе устройство это файл и
сетевое взаимодействие потом для каждой из вот этих частей то есть это большая система
с набором плагинов это называется сейчас я вспомню по-моему монолит с подключением модулей я
могу ошибаться то есть это такая монолитная система и вот видно типа какие при фичи
имплементированная и дальше указано каким образом поддерживается каждый из этих компаний то
есть вы можете вот каждый из этих функциональности подключить свой собственный плагин или дополнение
ну и дальше вот тут вот указано типа а куда это спускается на уровень железа то есть видите
диаграмма явно говорит за себя типа каким образом устроена система вот и по хорошему высоком
уровне вот этот вот эскиз должен напоминать нам о том собственно а типа вообще где мы находимся
и что мы делаем вот такой пример другая примера систем начата это локальная система это гид и
в ней тоже на самом деле все расположено по определенным папкам значит здесь у нас с вами
есть ссылки на определенные либо объекты либо на там либо на сказать там ветки если вы понимаете
о чем я то есть и при этом видно что каждый тип объектов имеет свой собственный вид то есть
они раскрашены в разные цвета для визуализации то есть мы сразу видим там допустим каким образом
объекты между собой связан то есть тут видно видна определенная цепочка то есть сразу видно что
все работает по папочкам все разложено все отлично причем так понять что в архитектуре все плохо это
делается так что если у вас есть определенное количество ну под компонент и вас между разными
компонентами проводится достаточно большое количество стрелок такое быть не должно то есть
внутри одного компонента должно быть как можно больше стрелочек вот значит еще одна система это
чисто для демонстрации это система для мониторинга она называется прометеус прометей если говорит на
русский язык и она позволяет собирать как раз данные от разных источников от разных серверов и
говорить допустим что если у нас есть какая-то нештатная ситуация то вам приходит либо
уведомление в какой-нибудь messenger либо вам приходит звонок да реально бывает такое что в больших
компаниях есть такое понятие как дежурство то есть когда человек его назначает дежурным и после
этого значит он говорит он должен разбирать все нештатные инциденты то есть проблемы которые
случились системы допустим там не знаю как какой-то из под компонентов сбоит либо на него переставили
достаточно большую нагрузку эта система позволяет на это все оперативно реагировать и видно что вот сам
сервер это центральная часть вот этого всего процесса но при этом ведь есть разные способы того
каким образом могут заливаться данные в этой системе то есть сразу видно что кто-то может
подключиться извне как программируемый интерфейс при помощи специального языка и есть система
которая умеет отправлять уведомления а вот это вот левая часть этой диаграммы показывает о том
каким образом мы можем подключать разные системы к этой к этой основной части то есть это так
называемая графическое представление нашей диаграммы ну и последняя система на самом деле
как ни странно это самая популярная система которая пользуется на у нас в стране вы тоже
кстати с ней взаимодействует как ни странно угадайте где я пока слайд презентацию опущу
а еще да в интернет магазинах вы видели наверное люди ходят со сканерами и пикают товары кто-нибудь
видел вот в них стоит 1s версия приложения значит что еще есть вы не поверите где
вы взаимодействуете в личный кабинет смотрели в fti а знаете что там под капотом там под капотом
1s управление организателем организа управление образовательными организациями или какой-то
из под компонентов 1s почему собственно эта система достаточно популярна потому что у
1s есть так называемая платформа поверх которой можно создавать разные приложения при помощи
конфигуратора чтобы вы понимали насколько большая система код платформы я могу ошибаться но
в какое-то время были замеры он состоит из 18 угадаете чего строк кода миллионов строк кода
вот насколько большие программы вы писали так две тысячи ну две пять тысяч да а тут весь
продукт большая платформа 18 миллионов строк кода то есть это прямо очень очень много и вот тут
есть как раз система 1s ERP управление организациями и вот в ней есть достаточно большое количество
под платформ и вот по факту каждый из них либо делает связь внутри друг друга либо наследует
какие-то особенности друг друга то есть куда сейчас не ткни везде 1s да тем более они заняли
монопольное по факту положение на рынке в тот момент когда другие компании ушли у нас из сферы
так хорошо давайте тогда будем решать мы будем двигаться последовательно или будем с перерывами
на 5 минут все хорошо давайте тогда без перерыва значит давайте поговорим что такое архитектура
программного обеспечения значит первое первое такое определение это абстрактная структура
программного обеспечения которая вот представляется вот таком виде как мы это
показали это называется архитектура либо это специальная дисциплина которая изучает создание
систем для программного обеспечения вот и давайте поговорим про некоторые критерии хороший
архитектур то есть что у нас должно быть значит первое что у нас должно быть это критерии
эффективности системы опять же мы это будем еще специфицировать я пока что просто скажу
смотрите первое что нам нужно это надежность нашей системы и в чем заключается надежность это
составные пункты это отказа устойчивость то есть представьте себе что у вас часть системы
отвалилась при этом по каким-то причинам там либо дата центр сгорел либо электричество отключили
либо хакеры проникли вот то есть насколько у вас система в вот таком режиме способна
существовать нам кажется сейчас это абстрактный но вот кстати кейс недельной давности кто помнит
что было в прошлый вторник ру зона интернета отвалилась наверное помните этот сценарий то
есть когда сайты в домене точка ру не загружались собственно сбой который привел к отказу всего
интернета вот поэтому такие крупные компании например netflix значит у них есть специальная
технология называется хаос манки которая заключается в том что внутри самого netflix вот
это большая экосистема с наборами серверов ходят такая маленькая обезьянка и ломает сервера
в случайном порядке просто берет и отключает там 10 процентов серверов значит чтобы понимали
как выглядит обезьянка был советский мультик я не знаю видели нет где мама обезьяна это за
маленькими ребенками охотила не охотилась и наблюдала вот наверное вспомните этот мультик
вот вот по факту вот вот эти маленькие обезьянки то как внутри netflix все устроено ну ничего они
переживают сын огромными это огромные нагрузки посмотрим это как запустится второй сезон какой
какой последний популярный сериал у этих и граф кальмаров вспомнил да то есть они выдерживают
достаточно большие нагрузки при этом когда это все происходило в российских сервисах все
намертво ложилось то есть намертво падала и все вот мой кейс там недавний ну как недавний год
назад я не смог нормально посмотреть финал чемпионата мир по футбол просто серверы падали из-за
нагрузки вот это значит не исправление с нагрузкой отказываются то есть насколько система может
выдерживать непреднамеренное падение узлов вторая вещь это восстанавливаемая система то есть если
у нас система упала все-таки насколько быстро она восстановится в своем оперативном режиме то
есть иногда восстанавливают то есть если восстанавливаемость несколько минут это идеальный
кейс несколько часов это уже проблемно несколько суток это уже беда для бизнеса то есть есть
прямо требования которые есть и если у вас система допустим недоступна какое-то время вы начинаете
платить компенсацию другим компаниям то есть это прямо есть в юридических документах и
следующая вещь это зрелость то есть насколько компания уже давно на рынке зарекомендовала
себя как хороший продукт которым пользуется вот в качестве зрелости подходит 1s потому что у
них во первых и бизнес модель хорошая достаточно и вообще продукт который достаточно долго на
рынке находится правда ее под капотом иногда ругают типа а почему опять это 1s глючит и так
далее но в целом ей пользуется вторая вещь это безопасность то есть насколько наши данные
спокойно хранятся третья это производительность системы и вот смотрите я хочу сказать про
производительность вот сразу что мы обычно подразумеваем под производительностью да смотрите
количество операции выполняем в секунду только если мы про алгоритмах это измеряем мерах асимптотики
алгоритмов то есть сколько операции за секунду мы с вами делаем здесь же возникают другие метрики
допустим одна из метрик она называется rps это количество запросов в секунду которая выдерживает
сервер или количество пользователей которые выдерживает наш сервер если мы говорим про
игры то как измеряется производительность в какой метрике pps количество кадров в секунду то есть
вот эти вот метрики они позволяют нам отслеживать насколько наша система производительная более
того мы можем смотреть на среднюю нагрузку загрузку нашей системы то есть насколько у нас цпу
занято или количество оперативной памяти следующий факт это масштабируемость то есть
насколько наша система является масштабируемым значит тут бывает два типа масштабирования первое
масштабирование это вертикальное масштабирование что это означает это скорее всего пока ваш кейс вот у
вас был ноутбук в котором 4 гигабайта оперативной памяти 4 ядра вы берете и покупаете новый компьютер
себе 8 гигабайт оперативной памяти 8 ядр увеличили ресурсов два раза кажется все замечательно но
вопрос как вы думаете увеличение ресурсов два раза таким же образом по какой зависимости будет
идти то есть если мы график построим то есть это у нас ресурсы а это у нас цена как вы думаете
какой порядок функцию будет экспонента да то есть вы не можете это расширять вот бесконечно долго
потому что просто есть ограничение на железо поэтому так на одном компьютере вы не вытянете
систему с миллионом человек а есть другой способ называется горизонтальной масштабирование а что
если вместо одного сервера которые два ядра 2 гига 4 ядра 4 гига вы поставим второй третий
четвертый пятый и так далее и если у нас идет какой-то запрос сайта то мы ставим специальный
узел который называется балансировщиком и перенаправляем нагрузку на случайный сервер
понятно что тогда вот эти вот все сервери должны действовать как одно целое точнее они должны
дублировать друг друга по функциональности но здесь есть проблема если вы хотите хотите хранить
каким-то образом данные то понятно что данные нельзя хранить на каждом из компьютеров по
отдельности то есть нужна еще отдельное отдельное хранение но тогда его нужно распределять между
несколькими серверами то есть это как раз алгоритмы на внешних данных есть такое понятие и это
хороший способ если мы говорим про какую-нибудь базу данных да или допустим там делает какой-то
другой тип хранения баз данных образно говоря если интересно вы берете делаете алфавитный
каталог у вас есть и ключи от а до я и вы говорите что данные допустим по букве а хранятся в одном
месте по букве б будут храниться в другом сервере с в третьем да и в четвертом и так далее то есть
вы их разделяете на разные серверы это называется шардирование данных вот и таким образом их
можно раскидывать друг с другом вот то есть немножко выходим за предел одного компьютера да кстати
где используются зачастую алгоритмы поиска в виде бинарного дерева они обычно используются в базах
данных только там используется обычно не классическое красно-черное дерево или овл дерево там
используется б дерево слышали такую структуру данных ну вот это немножко модифицированное
дерево поиска которая именно предназначена для построения поисковых индексов вот так
есть ли вопросы по этому пункту для поискового индекса то есть для поиска информации быстрой
ну тут зависит от того что такое внешние данные так давайте двигаться дальше гибкость системы что
такое гибкость системы это означает что вы в любую часть системы можете внести изменения
которые не затронут собственно другие части системы далее быстрое нахождение ошибок то есть
у вас система настолько адаптивно что вы можете зайти в любую часть и быстро понять где у вас
находятся ошибки если что ее модифицировать либо даже возможность заменить на какую-то более
новую совершенную версию дальше что такое гибкость еще системы это настройка системы вот пример вы
играете там не знаю заходите на какой-то сайт да и у вас есть настройки допустим у вас есть разные
части приложения которые вы можете активировать нам допустим куда как далеко ходить заходим на
сайт контакта в контакте ru нет это раньше он назывался контакте ru сейчас вики и точка ком и у
вас лев в верхнем меню есть пункт с основным меню вы можете зайти вы настройки и поменять
те пункты меню которые у вас могут использоваться вот или допустим у самих так сказать администраторов
есть возможность того каким образом будет вести себя система то есть допустим что вы там не
можете создавать какие-то права легко можно разграничить права пользователей и так далее вот
если мы говорим про конкретного пользователя если у вас есть ход кейм то это замечать то есть
потому что есть такое социологическое исследование которое проводят следующее вы можете управлять
каким-то действием при помощи мышки а можете при помощи клавиатуры так вы думаете где быстрее
будет проходить работа клавиатура то есть соответственно если мы работают с клавиатурой у
нас должны быть так называемые горячие клавиши классический пример горячих клавиш контрол с
вставить более того если вы зайдите в какие-нибудь google презентации или к системе гугла у них там
все из того что система достаточно большая сайт там получается так что у вас просто есть
контрол с контрол в и вы не можете правой кнопки мышки нажать копировать и вставить там это
запрещено просто вот это раз и второе допустим под задачи вы можете переориентировать пользователя
и сказать вот допустим вот для твоих задач нужно только вот эта часть функционала вы берете
ее настраивайте перед тем как зайти в это все дело если вы откроете допустим какую-нибудь среду
работки тоже самый visual studio код либо там пай чарм вы берете заходите первым момент времени
на первый заход вас спрашивают включить в им или не включить вам в им для того чтобы для более
продвинутых кто привык работать в текстовых редакторов кабанной строке вы могли сделать
это подключение понятно что система достаточно большая и ее можно там для больших тем должно
быть огромное количество переконфигурации потому что иначе это будет доставлять огромные проблемы
так опять пример с университетом гибкая ли система нет конечно же вот потому что здесь
необходимо понимать собственно какие изменения надо вносить то есть мы хотим внести изменения
в группу скорее всего нам нужно будет внести изменения в университет а дальше вот все по
цепочке растянется то есть нам нужно локализовать участок изменения нашей системы расширяемость
системы что это означает это означает можем ли мы добавить новый функционал нашу систему
достаточно легко и значит как нужно организовывать систему в плане расширяемости чем вероятнее
изменения в нашей системе тем меньше условия мы должны в тем меньше усилий мы должны выносить
в это и вот как раз здесь есть два голубя да получается он спрашивает какие антонима к слову
расширяемость это значит ограниченность сопротивляемость не эластичность не гибкость
антигибкость то есть если у нас с вами мы пытаемся добавить новый функционал и при этом все остальное
летит и не начинает работать значит что система не расширяемая пример вот представьте себе что
вам нужно привязать кнопку для обновления статуса в базе данных то есть допустим какой-нибудь
простую поменять фамилию да кажется что у вас поменять фамилию это не очень сложно но у вас
возможно всем система настолько большая и не гибкая что придется переписывать весь код или вы
так сказать изменили в одном месте у вас сломалась другом месте в общем этим грешат крупные компании и
вот система не гибко не расширяемая это вот пример у вас есть какая-нибудь там большая функциональность
да вы значит и вы пытаетесь извините что там пример там про давайте давайте пример про дом
расскажу вот вы пытаетесь в доме образно говоря провести бой в старом доме пытаетесь провести
новую систему отопления или новую проводку и вот получается так что вам не понятно куда эту
проводку вставлять да и вот в итоге если посмотреть на старые советские дома в некоторых домах
вот допустим в моем доме в котором я живу проводка идет по улице просто потому что больше
ее некуда в дом строить то есть дом не предназначен для модификации для расширяемости вот то есть
пример значит дополнительные критерии которые у нас могут быть это тестируемость мы и поддерживаемость
кода мы про это будем говорить в лекциях по тестированию и сопровождаемость то есть каким
образом это можно говорить мы про это буду говорить в лекциях по непрерывные поставки так это что
касательно критерии хорошая архитектура если мы говорим про критерии неудачной архитектуры то
есть такое понятие, как жесткость. То есть меняем код в одном месте,
меняем код в другом месте. То есть у нас получается система настолько
жесткая, что она не подвержена изменениям. Меняем код в сотом месте. То есть у нас изменение
идет по цепочке. И эта большая проблема получается, да, это я это забегал на вперед,
в итоге получается, что система не адаптирована никаким образом под изменение.
Следующая часть хрупкость. Собственно, как вы думаете, почему вот эта система является хрупкой?
Перед к нему провод, все перестанет работать. То есть представьте вот себе вот систему,
кстати, вот в одной из атеторий ГК, система хрупкая, потому что я не могу подключить
проектор. Потому что там получается один проектор подключается к одному экрану,
потом первый экран подключается ко второму. В общем, они взаимодействуют с собой. А у меня
ноутбук такой, что он не умеет поддерживать трансляцию на два экрана. Все, система хрупкая,
приходится транслировать презентацию экрана через зону. Неудобно. Это иллюстрирует
замечательный, замечательный термин, так сказать, эфоризм, афоризм в сфере IT работает не трош.
Понятно, что так лучше не надо делать. Каким образом это можно сделать? Это можно сделать
переорганизацию структуры. Возможно, не нужно такой набор узлов делать в одном компьютере.
Если вы посмотрите, откроете информацию о том, как устроены стойки в дата-центре,
то они устроены не таким образом. Что такое дата-центр? Это набор такое большое-большое здание,
в котором стоят большое количество серверов, и они объединены между собой. Когда вы обращаетесь
на тот же Яндекс.ру, какой-то сервер в дата-центре Яндекса начинает обрабатывать ваш запрос,
или достаются данные оттуда. Следующий критерий неудачной архитектуры — это неподвижность.
Собственно, получается так, что, допустим, вы писали что-то на одной платформе, вы хотите
перенести свои данные, допустим, на другую платформу или портировать ваш код на другую
платформу. Как вы думаете, с чем удобно путешествовать с рюкзаком либо с набором тяжестей?
Ну, конечно, с рюкзаком намного проще путешествовать, а набор тяжести его еще
перетаскивать нужно. Это так называемый, я бы так сказал, legacy-код, если мы говорим в сфере IT.
И вот классический пример legacy-систем — это, как ни странно, Windows. Потому что Windows сколько
лет на рынке? Microsoft уже много лет на рынке, а до сих пор некоторые функциональности остались с
MS-DOS. И даже они недавно все-таки в какой-то степени отказались от Windows API. Был раньше
такой механизм. И реально, код писать под Windows — это был суще ад. Графический интерфейс. То есть
там все подобный стиль, который вот совсем неудобен для разработки. Сейчас это, к сожалению,
все прошло. Так, это что касательно архитектуры. Опять же, мы образно поговорили про критерии
хорошей и неудачной архитектуры, чтобы вы понимали, на какие аспекты стоит обращать внимание.
Давайте вопрос по этой части. Что, пока слишком много теории, да? Давайте к практике перейдем.
Давайте поговорим про практические принципы и поймем, каким образом можно отвязываться от
этих составных частей. И здесь возникают первые два технических понятия, которые можно использовать.
Первое — это cohesion. Что такое cohesion? Это сопряженность. То есть насколько у нас с вами
объекты внутри одного модуля lay класса связаны между собой. И есть такое понятие как coupling —
связанность. Это насколько объекты связаны между собой в разных модулях. Что такое модуль? Это class,
можно представлять. Либо file, которым вы храните. И есть такой принцип под названием high cohesion,
low coupling. Это означает, что у нас есть высокая сопряженность внутри одного модуля. То есть
те функции и те объекты, которые у нас с вами находятся в одном классе,
они выполняют максимально схожую роль, и они сильно связаны между собой функционально.
Что такое coupling? Это насколько вы вызываете один код из другого класса и другого объекта.
Вот скажите, вот помните диаграмму, вот эту тяжелую про университет? Да? Скажите, что у него было с
coupling? У него был высокий coupling или низкий coupling? Да, у него был явно очень высокий coupling,
который нужно разрешать. И мы видим с вами здесь на диаграмме у нас есть четыре части. Первое,
это у нас что здесь? У нас здесь high cohesion, high coupling. Это называется gut object. То есть у нас
получаются объекты внутри одного класса, каким-то образом связаны, сильно связаны, но при этом объект
никаким образом не разделены. Дальше у нас есть low cohesion, high coupling. Это вы взяли систему и
неправильно выстроили в ней границы. То есть у вас получается какая-то куча мала. То есть есть
функциональность поделена цветом. То есть у нас красные, зеленые и желтые между собой сильно
не перемешиваются. Это low cohesion, low coupling. То есть объекты совсем никаким образом между собой
не связаны. И вот это идеальная структура. У нас с вами идеальная связь. Красные вызывают зеленые,
зеленые общаются с желтыми, а желтые вызывают красные. Опять же лучше от циклических зависимости
избавляться. То есть обычно стрелки должны быть направлены из одной стороны в другую. Вот,
это называется ориентированный от циклических граф. У нас мы должны получать на выходе. И при
этом выделяют разные типы coupling. Их выделяют обычно семь штук от худшей к лучшей. Здесь есть
разные границы. Я про них, наверное, не буду говорить. Я расскажу про самые худшие и самые
лучшие случаи. А самый худший – content coupling. Вы пишите функцию и вы такие думаете. Так,
мне нужно написать быстро код на коленке. Пишем код на коленке. Так, у нас здесь код,
который делает, допустим, не знаю, забивает какую-нибудь транзакцию, проводит какую-то
транзакцию. В принципе, вот мы берем код, делаем простую часть, делаем CTRL-C, CTRL-V в другое
место. То есть мы делаем copy-paste. Это означает, что у нас просто два модуля, которые находятся в
разных местах, содержат один и тот же участок кода. То есть чем это плохо? Давайте подумаем.
Чем плохо copy-paste? Да, если надо менять, то надо сразу менять в нескольких местах. То есть
есть риск того, что не поменяем это все в разных местах. Вот. Значит, еще есть такой stem-комплект,
тоже хочу сказать. Это когда у нас два класса связаны между собой следующим образом. У нас
с вами есть какой-нибудь класс B, и внутри него объявлено поле вида класса A. То есть у нас
получается такая неявная связь. То есть мы именно говорим, что один может вызывать второй. И самый
лучший это data coupling. Это означает следующее, что у нас с вами два класса общаются между собой
посредством только необходимых данных. То есть у них есть общий набор данных, который необходим
для управления, и мы передаем только этот необходимый набор данных. Здесь еще есть интересный
coupling. По-моему, это common. Я точно сейчас не вспомню, какой. По-моему, common coupling. Собственно,
это когда у вас два разных объекта обращаются к одной глобальной переменной. Почему, как вы
думаете, плохо использовать глобальные переменные в коде? Умирает многопоточность. То есть мы это
никаким образом распараллелить не можем. Потому что если кто-то изменил одну часть, то второй
получает изменения в этой части. Причем эти изменения могут быть несогласованными друг с другом.
И это большая проблема. То есть у нас такой якорь висит, который мы должны держать. Тут есть разные
уровни coupling. Я, наверное, пришлю потом ссылку, связанную с тем, каким образом эти coupling связаны.
У cohesion на самом деле есть такая же связь. И, собственно, главная цель на высоком уровне
cohesion. Так, давайте посмотрю презентацию. Ставил про cohesion? Нет. Про cohesion не ставил. Это стараться
делать так, чтобы у нас модули выполняли какую-то единую функцию. То есть там есть тоже разные
уровни. Есть соблазн. Собственно, первый соблазн, который есть, это у вас какие-то есть функции. Вы
не понимаете, куда их привязать. И вы создаете так называемый utility class. То есть это класс,
который выполняет какие-то функции. Причем эти функции между собой не связаны. Поэтому если вы
будете писать какой-нибудь код, пожалуйста, будьте аккуратны с файлами под названием utils.py.
Или utils.cpp. Или, если мы говорим про джаву, то это utility.java. Потому что именно в этих классах
обычно зашивается корень всех проблем. А что это за utility? Какие-то инструменты,
при этом что они делают, не понятно. То есть стараемся именно разделять. В том числе,
если мы говорим про cohesion, то cohesion в ООП-шных языках это класс. Если мы говорим про функциональные
языки, такие как Python, это наборы файлов. То есть старайтесь делать так. И это мы, кстати,
будем внедрять. Мы будем стараться максимально вас просить не писать код в одном файле, а
пользоваться механизмом импортов либо инклудов. Потому что если правильно разделить зависимости,
то у вас будет меньше проблем. Более того, вы сможете задетектировать одну важную вещь. Она
называется циклическая зависимость. То есть для того, чтобы работал класс A, должен работать класс B.
А если работает класс B, то должен работать класс A. И в итоге у нас все ломается в этом месте.
Вот. Как понять, собственно, какой у нас cohesion, какой у нас coupling? Вообще есть строгая математическая
формальная определение, каким образом замеряется cohesion и каким образом замеряется coupling. Но я не
хочу грузить этим. Тем более это нужно там на каких-то более продвинутых вещах. Собственно,
что мы делаем? Мы строим диаграмму компонентов. То есть это то, что я изначально показывал вам в
примерах систем. А потом внутри с нее строим диаграмму классов. Собственно, представьте себе,
что у нас есть вот такой клубок. Мы поставим его разделить на какие-то большие компоненты. Это
называется декомпозиция. То есть вычленяем слова, которые соответствуют определенной части. Мы это еще
с вами будем смотреть, когда мы будем говорить на лекции про unified modeling language. А потом мы
понимаем, ага, мы декомпозировали этот объект. И теперь мы видим с вами, что эти объекты между
собой на самом деле общаются через центральную точку. Поэтому, чтобы не городить большое количество
связей, почему бы нам не поставить медиатора, который будет общаться между ними? Но главное в этом
деле, чтобы этот медиатор сам не стал божественным объектом. То есть не стал управлять всем. Как это
делается в случае университета? Вот. Каким образом, собственно, происходит разбиение системы? Значит,
у нас есть какая-то большая система. Потом мы ее разделяем на некоторые подсистемы или пакеты.
Пакеты, чтобы вы понимали, те, кто знают в java, те понимают, что должно понимать, что такое пакеты.
Чтобы вы понимали, у вас как это работает. C++ это аналоги namespace. Либо это наборы папок. То
есть в одной папке у нас по факту находится один пакет. А дальше внутри пакетов мы еще это все дело
разбиваем на классы. То есть мы открываем проекты такие сразу понимаем, ага, значит это у нас про
транзакции. Это, допустим, про личный кабинет. Это про профиль. Это, допустим, про вычисление каких-то
данных. То есть по факту структура проекта должна сама за себя говорить. То есть не все находится в
коде. Иногда что-то находится за пределами кодов в структуризации наших данных. Собственно,
давайте пример. Некоторая система. Это система Убера. Мы видим с вами, что здесь. Мы видим с
вами грав взаимосвязи между классами, между компонентами. Видите, то есть система достаточно
большая и, в принципе, люди каким-то образом пытаются в ней разобраться. Здесь видно,
что есть какие-то прям центрально связанные компоненты. Я не знаю, вот тут вот она. И есть
другие взаимосвязи между объектами. То есть это не прямо между собой так жестко связано,
а именно по составным частям, в принципе, можно выделить под компоненты. Вот, собственно,
каким образом можно избавляться от явной связи в каплик? Для этого есть как раз так называемый
закон Диметра. Значит, что он говорит? Он говорит следующее, что если B связан с классом A,
а C связан с классом B, то по факту A не должен знать никаким образом AC. То есть
антитранситивность должна в коде соблюдаться. То есть зачем это делается? Потому что по факту,
если у нас есть уже связь между A и B, B и C, то связь между A и C будет изличной. Вот. Каким образом
это можно в коде организовать? Чтобы было понимание A и B, B это friend A, можно считать,
что B это поле класса A. Экземпляр поля класса A. Ну, собственно, его можно вот так вот написать.
То есть здесь явно видно, что у нас нарушается закон Диметра, потому что myObject это объект 1.
Дальше у myObject есть объект под названием never, это 2. Дальше never знает от talks 3,
to 4, 5, stranger. То есть у нас тут получается объект первого класса знает об объекте пятого класса.
Понятно, что это не очень хорошо. Даже вы в коде можете посмотреть свой код, если у вас только
не язык R, в котором точка это как подчеркивание, то если у вас находится много точек, подумайте,
как это разделить. Собственно, практические требования по тому, как это можно разделить.
Собственно, давайте представим себе, что у нас есть класс me, у него есть имя и есть функция под
названием grid stranger. И что у нас здесь происходит? Мы с вами вызываем функцию grid stranger,
потом говорим hello. То есть видите, у нас f. Давайте я сейчас покажу. То есть у нас есть me, это f,
это у нас stranger. А дальше мы вот этого friend вызываем функцию here. То есть по идее мы должны
сказать friend, пожалуйста вызвать у friend функцию, которая все сделает нам под капотом, а не возвращать
объект типа stranger. Собственно, каким образом это можно решать? Первая вещь, которую мы можем
сделать для этого, это попробовать поднять ответственность вперед. Смотрите, что мы делаем.
Нам по факту что здесь нужно? Давайте прочитаем. Мы должны получить имя нашего stranger. И все. Поэтому
вместо того, чтобы вызывать функцию get stranger, мы меняем эту функцию на get stranger name, которая
возвращает объект name. То есть мы получаем имя и дальше мы говорим f get stranger name и функцию
меняем. То есть мы не у объекта stranger вызываем функцию here, а мы говорим следующее. Пожалуйста,
достать это сообщение вот до stranger. То есть получается у нас такая вот прямо развилка. То есть у нас
теперь получается f, объект типа me вообще не знает про stranger ничего. Или другой метод. Мы можем
отправить ответственность в другую сторону. И здесь даже будет более приятный код, потому что нам не
придется действовать глухому телефону. Мы по факту делегируем ответственность на friend сделать все. То
есть что говорим мы? Мы должны познакомиться со stranger. Он говорит, окей, доставь, пожалуйста,
приветствие по такому-то имени. Дальше friend идет и доставляет это приветствие. И вот этот вот сложный
код, который у нас был вот здесь вот в трех строках, он переносится на friend. То есть таким
образом мы можем разрешать приводить к выполнению законной деметрии в двух случаях. То есть либо мы
переносим ответственность на первого объекта, либо мы наоборот отклоняем, делегируем ответственность на
другие объекты. Это в качестве примера. Понятен ли этот сценарий? Хорошо. В чем достоинство
законной деметрии? Он позволяет уменьшить связанность нашего кода. Далее мы скрываем информацию о
структуре нашего объекта. То есть по факту мы можем наши поля сделать приватными. То есть здесь
с этим могут быть проблемы с приватностью полей. И дополнительно мы можем с вами увеличить
так сказать cohesion, потому что мы явно указываем обязанности класса. То есть мы можем посмотреть,
а потом понять, что этот класс какой-то слишком большой, он выполняет большое количество обязанностей.
Почему бы нам его не разделить на несколько других классов? Так, и здесь на самом деле даже большие
молодцы, потому что мы практически всю тему прошли. Следующий раз мы с вами будем говорить про вот
эти вот абриатуры. Solid это принципы проектирования систем на уровне классов. То есть мы поймем каким
образом с точки зрения ООП нужно устраивать связь классов. Следующая вещь это dry. Это по-моему один
из таких важных принципов. Он расшифровывается как do not repeat yourself. Не повторяйте, пожалуйста,
себя. Следующая называется kiss. Это расшифровка как kitted, simple, stupid. И последняя вещь это
yagni. Вам этого не надо. То есть не городите сущности, не улучшайте код до тех пор, пока вам этого не надо.
Вот, значит, здесь у меня есть последние полезные ссылки, по которым можно посмотреть информацию.
