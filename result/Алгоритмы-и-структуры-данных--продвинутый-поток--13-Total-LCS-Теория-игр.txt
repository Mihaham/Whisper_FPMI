Ну вот, мы с вами говорим немножко про другие вещи, а именно про динамическое
программирование. Что мы говорим про динамическое программирование? Ну, в первую очередь мы сейчас,
конечно, решаем задачу о наибольшей общей подпоследовательности, но для разминочки мы
воспомним немножко другое, а именно задачу о наибольшей возрастающей подпоследовательности. Ну,
думаю, сталкивались с такой задачей, да? Ну, действительно, да, это действительно классическая
задача, в которой там стандартная динамика решается за квадрат, наверное, даже с постановлением
ответа, не правда ли? Вот, разумеется. Вот, но возникает вопрос, можно ли оптимизировать это
решение до N лог N? Да, вопрос даже не можно или нельзя, а вопрос, сколько способов вы знаете?
Ну вот, да, я тоже, и вот, ой-ой-ой-ой, кошмар, да, НВП со сплей деревом, замечательно, да, а может
лучше? Ну, так же, как с декартией. Нет, хотя тут давайте разбираться, потому что, на самом деле,
есть подозрение, что, когда говорим, что, ну понятно там, как делать с ДО, могут возникнуть
принципиально разные решения, на самом деле. Вот, потому что давайте скажу, что сейчас первым пришло в
голову мне. Нет, бинпоиск это другой способ, не будет. Значит, смотрите, итак, что мы делаем?
Значит, нам очень-очень, ну, вот, ну, здесь, значит, какие у нас варианты есть? Есть вариант такой,
значит, вот у нас есть массивчик какой-нибудь там, а1, а2, там, а3 и так далее. Вот, нам очень хочется
насчитать какую-то динамику вида ДПИТ, равно там, значит, там, один плюс максимум там, по всем
ж меньше и и ажи ты меньше аи, там ДПЖТ. Так, вроде, ну, думаю, динамика, вроде, никого сильно не
удивляет, да, конечно. Вот, ну, давайте, короче, вопрос, как искать? Ну, идея такая, а давайте, ну,
в стандартный способ, давайте перебирать и от 1 до n, и для каждого и и до ДПИ так честно искать,
но возникает какая идея? А вот какая-то идея, но раз мы, у нас не только ж меньше и и ажи должно
быть меньше аи, так давайте перебирать, а перебирать эти числа не в порядке возрастания
индекса, а в порядке возрастания самих чисел аи. Да, вот такое вот неожиданное решение. То есть,
давайте просто вот в порядке возрастания аи перебирать. Ну, а во всех ДП, которые не вычислены,
писать минус бесконечность. То есть, это приведет к тому, что ДПЖТ будет вычисляться, конечно,
достаточно рандомно, то есть, там, тут будет появляться один, тут там будет появляться,
тут какая-то двойка будет появляться, может, тут тройка, тут еще один, там и так далее, потом тут
где-то еще тройка появится, но фишка в том, что, но фишка будет в том, что на самом деле вот этот
вот максимум ДП при условии того, что везде, где не написано, написано минус бесконечность,
приводит к тому, что вам просто нужно найти максимум на префексе, а это можно сделать уже
там деревом отрезков, а в данном случае даже фенвиком, потому что максимум на префексе,
элементы у вас только увеличиваются очень удобно, вот, но обычно, вот, ну, обычно, как мне кажется,
если говорят, что там написать ВП с деревом отрезков, то подразумевается, вот, примерно,
что-то подобное, или может быть, у вас есть другие версии, другие, какие, нет, не подразумевается.
Ну, хотя, хотя, возможно, это нас приведет немножко к другому, просто ко второму способу,
в прочем, да, не-не-не-не, ну, потому что второй способ обычно говорят, что он никакого отношения
к ДО не имеет, то есть, кто-то и прикол, что там, для этого способа нужно писать там дерево отрезков,
или фенвикам, вот, то есть, ну, там, фенвик, она вспоминает какие-то эти битвы, операции непонятные,
вот, хотя, второй способ, на самом деле, звучит так, то есть, на самом деле, второй способ звучит так,
мы идем слева направо, то есть, на этот раз ДПИТ, мы прямо в порядке возрастания ИИ вычисляем,
но, на самом деле, вот эту формулу можно переписать по-другому, вместо этого можно написать,
что ДПИТ равно, на самом деле, один плюс, там, максимум из таких, ну, допустим, к, вот, что
существует, значит, g меньше i, там, а jt меньше, соответственно, аитова, такое, что ДП jt равно k,
вот это экзотично немножко написал, да, то есть, ну, хотя, делаю я абсолютно то же самое, то есть,
я перебираю все, все жишки, которые меньше i, у которых ажитое меньше, чем аи, и среди них нахожу
максимальное ДП, но, в общем, тоже, в общем, ладно, ничего нового я не писал, как это
непридоксально звучит, вот, зачем же я так заморучился, то есть, я что-то переписал, так, идея у меня такая,
давайте я попытаюсь для каждого потенциального к хранить минимальное ажитое, то есть, минимальное такое
ажитое, соответственно, у которого в соответствующей ДП шка равна к, то есть, вот такая неожиданная,
в скобках нет идеи, назовем мы ее, господи, как мы ее назовем-то, не будем заморачиваться,
то есть, давайте скажем, что bkt, где k у меня равно там от 0 до n, это будет минимальное такое ажитое,
в каждый момент времени, что ж меньше и ДП житое равно к, вот, понятно, да, а еще для удобства мы, конечно,
заявим, что а0 у нас будет считаться минус бесконечностью и ДП0 у нас будет равно 0,
ну, чтобы совсем корректно было, вот, понятно, вот, значит, что можно, по идее, про эту бэшечку сказать,
ну, возникает жуткое ощущение, что, ну, особое мистическое утверждение заключается в том,
что для любого k меньше n, верно, что b от k меньше, чем b от k плюс 1, внимание, вопрос,
где ошибка в этом утверждении, либо равно, или да, да, ну, тогда будет верно, но не точно,
вот как бы это максимально точно написать, как вы думаете,
нет, как плюс один на месте,
но я утверждаю, что это утверждение надо дописать,
нет, никаких проблем нет, понятно, что минимум пустого множества, естественно, равен плюс
бесконечности, но с другой стороны, ничего страшного, как бы kt может быть меньше плюс
бесконечности, это как бы никаких противоречий нет,
тут вопрос уточнения немножко в другом, хотя близко, да, совершенно верно,
да, совершенно верно, вообще утверждение звучит, конечно, так, ведь вполне вероятно,
особенно для маленьких i, если i маленькая, а k большое, то понятно, что эти b просто равны
плюс бесконечности, такой дпшки просто еще нет, вот, но вот, в результате это приводит нас к
следующему, то есть на самом деле, так как пассив b возрастающий, то каждое новое дпит,
то есть для каждого нового дпитого на самом деле там можно найти подходящий индекс просто
бинарным поиском, потому что, то есть просто следствием является так, что дпит, то есть равно
получается один плюс максимальное такое k, чтобы kt меньше, чем аит, или даже вот,
даже если равно, я по-другому напишу, минимум таких k, чтобы от k больше либо равен аитам,
то есть вот такая вот красота, ну естественно, да, то есть это если вот b определено именно для
i, видите, то есть на самом деле вот я массив b определил для вот фиксированного индекса i,
но с другой стороны, как только вы дпит посчитали, то массив b обновить для i плюс один очень просто,
правда, вот, согласны, вот, где, вот здесь, но плюс бесконечность будет больше либо равно,
в чем проблема, нет, смотрите, мы специально для этого себе прописали, что а нулевое равно
минус бесконечности, автоматически объявляется, что там b нулевое, конечно, тоже равно минус
бесконечности, вроде автоматически всего этого следует, вот, так что такое k всегда будет существовать,
пусть даже нулевое, вот, то есть более того его еще апдейтить достаточно просто, потому что есть
еще такое просто мистическое утверждение, которое на самом деле может иногда поразить,
поразить, называть там кого-нибудь на какой-нибудь математике, потому что еще есть такое утверждение,
я еще такое добавлю, пусть у вас оказалось, что значит 1 меньше либо равно g1 меньше g2 меньше g3 меньше,
но я в таком виде сформулирую меньше g1 меньше либо равно n и оказалось, что dp от g1 равно dp от g2 равно
и так далее равно dp от g1, тогда утверждаю я а g1 больше либо равно а g2 больше либо равно и так далее
больше либо равно а g l, но если вдуматься в утверждение, оно становится очевидным просто
через пересчет динамики, но правда в итоге из этого появляется, знаете, теория, которая на
самом деле может, то есть если это может быть на дискретке, может случайно на занятии возникнуть,
можно олимпиадах по математике кто-то такую даже встречал, значит задача дана последовательности с
pq плюс одного числа, докажите, что существует либо возрастающая p plus 1 последовательность,
либо последовательность длины p plus 1, либо невозрастающая длины q plus 1,
знакомая задача, в таком виде не сталкивался, ну вот, а там используется, ну бывает,
ну можно и так сказать, кстати, интересное следствие, да, действительно, да, из этого в принципе
следует, что в любой последовательности длины n и c попарно различных чисел, либо возрастающая,
либо убывающая последовательность длины q и n найдется, такое приятное как неушное свойство,
но я вот формулирую именно для p q plus 1, так надо записать или условия понятно, так есть кто живой
вообще, то есть еще раз, то есть когда у нас есть, я хотя бы запишу, красивая сериала зараза, конечно,
то есть просто сериала, пусть n равно p q plus 1, все p q не обязательно простые, то есть я так
просто красивые буквы подобрал, тогда в последовательности, значит, там соответственно
а1 и так далее, а n нод найдется, то есть я как-то сформулировать сериал так, чтобы испариться от
слова либо я что-то русским языком не владею, хотя бы шо.
ну либо да нет, как бы хочешь, хочешь это либо, но слово либо оно не точно, потому что оно как бы
жестко говорит, потому что слово либо формально подразумевает, что найдется либо то, либо то,
одновременно не найдется, а это заведомо чушь. найдется, ну давайте или найдется или, ну тоже как-то
не кузяло, ну вот, ладно, придется так писать, верно, хотя бы, а да нод, и следующих утверждений,
утверждение, значит первое, да, найдется, даже уже не найдется, а существует, стоит
возрастающая под последовательность длины больше, но длины п плюс один, существует не возрастающая
под последовательность, возрастающая под последовательность длины q плюс 1, вот такое утверждение,
но как сказать, все числа могут быть равны, и тогда убывающий, не убывающий, не возрастающий не
существует, не, я лично, я не оговаривался, вот, нет, согласен, если бы эти числа были попарно
различные, тогда да, конечно, но вот мы сформулируем в чуть более общем виде, вот, да, но на самом деле,
знаете, такая вот, знаете, вот есть так, вот в олимпиадах по математике есть такой набор задачи,
которые на самом деле там олимпиадик по информатике решить на раз, ну вот, а какой-нибудь олимпия,
какой-нибудь не меньше отношение к информатике может несколько зависеть, вот, потому что на самом
деле, пока олимпиадик пытается придумать олимпиадик по информатике, заявляет, посчитаем вот эту
динамику, вот, ну он просто в этих терминах мыслит, да, и тогда что мы обнаружим, либо у нас, либо у нас
обнаружится ДП, ДП п плюс один, либо у нас окажется, что все ДП не превосходят П, но тогда по,
тут информатика случайно знает такое словосочетание, принцип тирихле, ну, ну, бывает такое,
встречаются такие информатики, да, которые знают это словосочетание, да, вот, так вот, найдется такое
значение ДП, непонятно, кстати, какое заранее, но, тем не менее, найдется, которое встречается хотя бы
П плюс один раз, логично, да, но вот тогда по этому утверждению, значит, оно нам, там по нему получаем
не возрастающую подпоследовательность, все, вот, так что, как говорится, занимайтесь олимпиадами по
информатике, выигрывайте юмор, да, не обязательно, ну, да, разные значения гарантируют, как бы,
не возрастание, но там, сколько она строго, непонятно, вот, ну, легко привести, кстати, да, если в N равно PQ,
то достаточно легко привести пример, когда нет ни того, ни другого, естественно, ну, там, понятно, там,
что-нибудь там, вот, так что, да, хотел вспомянуть, потому что, конечно, как-то без этой маленькой
жемчужинки, как-то, называется ими-ними, вот, ну, а теперь кто-то возникает, ну, если возвращаться к
программированию, то тут возникает вопрос, как это закодить, вот, вот тут мы немножко поговорим,
как закодить, потому что, на самом деле, если побежать это кодить прям по улучшению, давайте
честно писать бинпоиск, то, конечно, можно написать кодосопоставимый с деревом отрезков,
ножом, потому что дерево отрезков снизу пишет, может быть, даже едва ли не столько же строчек,
сколько бинпоиск какой-нибудь, хотя, ладно, этот бинпоиск, конечно, мало пишет, но на самом деле
конечно у этого конкретно, да, у конкретного этого бинпоиска, конечно, на самом деле реализация
оказывается очень проста, вот, то есть настолько проста, что я сейчас даже просто могу на доске
и написать, значит, что же у нас тут получается, ну, да, но вот, ну, просто так и пишем, что b присвоит
там, соответственно, минус бесконечность, плюс бесконечность, плюс бесконечность и так далее,
плюс бесконечность, ну, там, как вы уже договаривались, dp нулевое равно нулю, значит, дальше пишем,
for int и равно один и меньше либо равно n плюс плюс и, ну, допустим, у нас там массив а в один
адексации живет, вот теперь как найти dp, очень просто, значит, dp и t равно lower bound,
вот, ну, допустим, у нас все в векторах, тогда будем b.begin, b.end и, соответственно,
minus b.begin, вот dp и t посчитали и, конечно же, b.dp и t равно a.it, вот, и теперь будет какой-то вопрос,
как найти, собственно, ответ на задачу, как найти длину под последовательность, ну, еще одной простой
строчкой ans или даже int ans равно звездочка max element от dp.begin dp.end, вот, то есть,
типичный пример того, как str позволяет вам сократить код просто в несколько раз,
так, ну, уже обсуждали, наверное, стрельда, нет, ну, придется пояснить, ладно, нет, ну,
на всякий случай, то есть, надо, может быть, напомню для, может быть, кого-то из телезрителей,
я не знаю, вот, в том плане, что lower bound, это не только метод в сете, но и алгоритм,
то есть, алгоритм, который передается на вход массив в виде двух итераторов, ну,
или, кстати, если был массив, я бы написал b.b plus n, например, да, вот, и который в нем бинпоиском
пытается найти вот этот элемент a.it, но если быть точнее, минимальный элемент, который не меньше
его, но важный момент, возвращает он, естественно, итератор, то есть, он возвращает не сам элемент,
а итератор на него, поэтому, чтобы получить его индекс, я просто из него вычитаю b.begin.
Вот, а чтобы найти максимальный элемент, то есть, на самом деле, у нас в Estelle алгоритм на
это тоже есть, то есть, там, вот специальный вот этот вот форик, там, три строчки писать не надо.
Может. Бинпоиск. А, да, да, да, да, ну, да, да, да, ну, знаете, нет, ну, как сказать,
понимаете, да, как говорится, да, но все такие идеи мы отправляем в Индию, как говорится,
да, чтобы познакомиться с настоящим гуру программирования, который проверяет
истинность булевской переменной, там, кодом вида if fl.toostring.length меньше либо равно 4.
Меньше либо равно, потому что если флаг какой-то булев.
Ну, я не помню там, как у него конкретно флаг был. Ну, в Олимпиадах вряд ли, но какие-то примеры там
на всяких мемасах такие ходят. Задача у вас булевая переменная, да. Хочется проверить,
истинная ли она. Пишем. Переводим ее в строчку. Вычисляем длину этой строчки. Ажа. Да, там,
джавайный, по-моему, код, но он как бы не догадался, что в джаве то существует там if fl,
то есть в джаве это так тоже можно. Не знаю. Не, это было дотчат, дотчат gpt. Ну, окей, ну может
быть, может быть. Ну, я не знаю, с вот этим вот нас будет захватывать. Ну, удачи.
Ого. Да-да-да-да. А потом, видимо, код сломается, потому что правильный перевод на русский будет
в истину. Или совсем настоящий хацкер, и там старожилы перейдут на улбанский. Нет, там будет
подлянка. Длина правды будет 4. Правда, почему-то эти 4 буквы будут вот такие,
но это уже и код меньше либо равно тоже сломается, потому что как будет false.
Так, господи, господи, ваше господи, жизни не нюхали, улбанский не учили. Кошмар, да. То есть
там слово упячка вам, видимо, ничего не говорит. Там упячка. Ну да-да-да, господи, был я первокурор,
у меня на шкафу там плакат висел со всеми этими словами этого безобразия. Может там 4 общаги где-то
и висит. Ой, да-да-да, со всеми онотолями там всякими и вот это все. Нет, ну господи,
ладно. Ну в конце концов, мало ли. Ладно, значит, это если говорить про наибольшую
подпоследовательность, хотелось ее просто упомянуть, потому что есть. Значит, смотрите,
к чему еще можно вернуться? Еще, конечно, можно вернуться к наибольшей общей подпоследовательности.
Вот, но здесь тоже давайте немножко еще прозминается, ну даже не столько прозминается,
что-то там у меня еще просто пару задач есть, хочется рассказать. А задача такая, даны две
последовательности. Гарантируется, что каждый элемент, что каждая последовательность состоит
из попарно-различных чисел. Вот каждый из последствий состоит из попарно-различных чисел.
Внимание, вопрос. Закройте нот. Как бы найти NOP? Естественно, не за квадрат.
Так, вычислить. Нет, давайте не путать это NOP, расстояние хэйбинга. Так, ну-ка, давайте-ка.
Да, метод 4-х русских не предлагать.
Да, вот все решение. Можно даже особо не сжимать. То есть, давайте там
переменуем элементы так, чтобы первая последовательность была просто как 1, 2, 3, 4 и так далее. А во второй
последовательности тоже поставим, если элемент есть в этой последовательности, то заменим его на
индекс, если нет, то уберем, все равно не на что не влияет. И тогда после этого задача вас ведется к
найдите NWP. Все, как вы только что. Вот эти вот не сильно сложные коды.
Да, мы предполагаем, что в каждой последовательности все элементы попарно-различны, хотя самое
веселее, что достаточно, чтобы только в первой. Нет, на самом деле это совершенно верно, совершенно верно.
Вот, да теперь высказывайте вопрос. Хорошо, ну мы NWP, ну это да. Ну вот, ну на самом деле просто
я сейчас вспоминаю, потому что когда-то много лет назад, на самом деле у этой задачи еще второе
решение было с помощью деревоотресков. Ну, по факту то же самое. Ладно, повысим планочку.
А что делать, если дубликаты есть, но гарантируется, что каждый элемент встречается в последовательстве не
более чем три раза. Нет, в случае K, конечно, но как бы белка, типа вот пусть будет 3, хотя можно.
Не меняться, просто давайте мы вектор хранительного числа в втором массиве не только одно число, а все три, например,
и будем через них всех пересчитываться. А что нахит хранить все три?
Даже если есть равные элементы, то у тебя все равно он найдет ответ, корректно, если даже будет равный элемент.
Если ты также пронумеруешь в первом массив 1, 2, 3, 4, N, то из всех равных элементов ты будешь хранить через всех них,
которые у тебя совпадают. В втором массиве для индекса будут хранить K, какими он может быть значениями в первом массиве.
Нет, там да, да, вылазит, да, но да, то есть да, действительно, оказывается, да, правда, тут, правда, нужна некоторая аккуратность.
Потому что, да, идея действительно оказывается такая, что если у вас, допустим, тут какая-нибудь там, там какой-нибудь у вас тут
Абабац случился, ну вот, а у вас тут какая-нибудь там, еще что-нибудь, там какая-нибудь Аббацца, ББ, вот, то действительно хочется, конечно, сказать,
что давайте на каждое место, каждые Ашечки писать прям честно индексы, в которых она встречается первая в первом массиве.
То есть давайте так и писать, там 1, 3, 5, я буду в один индексации писать, Б, пишем там 2, 4, 2, 4, 1, 3, 5, там соответственно, что там еще?
С, там 6, 1, 3, 5, 2, 4, 2, 4. И хочется в этой последовательности просто найти наибольшую возрастающую, как в прошлый раз.
Да, но теперь еще фишка, что нам бы желательно из каждого вот этого блока, конечно, брать не более одной чиселки.
Поэтому, конечно же, на самом деле так писать не надо, а, конечно, все эти индексы надо писать в такой маленький технический нюанс в порядке убывания.
Да, прям вот так вот в наглое.
Вот, да, есть вот такое красивое решение, работает оно, получается, за nk квадрат лог n.
Ладно, вру.
Согласен, согласен.
Ну, если у вас, ну, к, это вот этот констант, который в нашем случае тройка.
Ну, потому что, если мы гарантируем, что в первом массиве каждого индекса не более чем k раз, то мы на месте каждого элемента во втором массиве поставим не более чем k индексов.
Получается nk.
Вот.
Так что вот, в принципе, вот, то есть иногда, да, но то правда заметить, что это означает, наоборот, что различных элементов в строке оказывается очень много.
Вот.
Это вы хотите работать не в случайных данных?
Ну, да.
Ну, типа того, да.
Но, правда, в случайных данных еще и с большим алфавитом, что характерно.
Потому что, да, если у вас там буква строчится tsa и beta, то, в общем-то, это неприменимо.
Вот.
Да, поэтому русский лучше, да.
Да, чуть-чуть буквально.
Вот.
Титайский бог.
Ладно.
Хорошо.
Ладно, повысим планочку.
Вот, повысим планочку, обсудим алгоритм, который на прошлом четверть финале мог бы вам даже очень сильно помочь.
Да.
Не, ну, на этом уже не интересно, да, но.
Ну, мало ли.
Нет, ну, как сказать.
Потому что кто-то прямо вот.
Ну, вот.
То есть, да.
Значит, потому что...
Потому что, на самом деле, чем отличается еще задача nop?
Она отличается тем, что в ней еще как-то надо желательно восстановить ответ.
Казалось бы, это...
Ну, казалось бы, это несложно, да.
Ну, потому что технологии восстановления ответа в задаче nop2.
То есть, либо вы параллельно с массивом dp храните, собственно, какой-нибудь массив pr,
где для каждого элемента храните, откуда вы максимум взяли, да.
Либо, пользуясь тем, что вариантов у вас там было небогато, собственно, там идете по самому массиву dp
и прямо на каждом шаге перевычисляете, откуда вы этот максимум взяли.
Вот.
Но оба этих варианта требуют допамяти от n2.
Я бы сказал т, а, т квадрат, правда?
Вот.
А теперь внимание, вопрос.
А как бы восстановить эту nop за oatn дополнительной памяти?
Ну, даже не восстановить, а просто задача.
Найти nop, причем не длину nop, не вот эта вот ваша 42, а саму nop.
Ну вот.
И при этом потратить oatn памяти.
Да.
Причем, да, обратите внимание, да, смотрите, как вы в прошлый раз убедились,
быстрее, чем zn2, в общем случае, эту задачу по времени решить нельзя в принципе.
Ну, да.
Там вроде типа можно, если пока без ответа, мы можем хранить последний слой.
Да.
Да, вот это да, действительно да.
А как делать оптимизацию?
Походу к конечку как можно?
Нет, нет, нет, смотрите.
Да, но начнем действительно с такой идеи.
Вы помните, что nop считается динамикой какой?
Вида dp it jt равно, условно говоря, 1 плюс dp i-1 j-1.
Если оказалось, что a it равно b jt.
Да, и там максимум из dp it j-1, там запятая dp i-1 j, соответственно, иначе.
Вообще вот так было, да?
Вот, замечаем, да, динамика подозревает то, что на самом деле хранить можно всего лишь два слоя.
Логично, да?
То есть как бы понятно, тот, который вы пересчитываете и предыдущий.
На самом деле это страшную тайну, можно хранить один.
Да.
Потому что можно бежать, просто когда вы именно с первым слой превращаете в it, вы можете сказать, что просто там какая-то житая переменная равна максимум из того, что было в ней раньше.
А хотя нет, вот это вам пригодится.
Ну да, вот это вот классика.
Да, проблема.
Черт.
Да нет, справа налево идти нельзя, потому что dp it jt нельзя пересчитать, потому что нету dp it j-1.
А если слева направо идти, то как бы у вас...
Да, хотя на самом деле заметим, что когда вы просто пересчитываете dp it jt, вы старое значение сохраните, потому что оно потребуется для следующего.
Так оно потребуется только для следующего, то в общем-то от единицы вам память гарантирована.
Ну да, согласен с таким выражением лица в принципе, но в принципе можно.
Господи, да вот.
Да, ну если стандартные такие технологии, в общем-то в задаче-рюкзаке там возникают похожие технологии.
Вот, ну кстати, да, давайте еще можно, кстати, воспомнить, давайте быстренько еще и задачу о рюкзаке вспомнить, потому что сейчас она будет немножко родственницей.
Ну давайте вспомним, о чем у нас задача о рюкзаке вообще заключается.
Ну задача о рюкзаке можно там...
Как бы ее сформулировать?
Нет, там просто есть разные постановки.
Ну ладно, давайте так возьмем постановку.
Что сразу вор?
Да, да, да, а там лежат анслитка в золото, замечательно.
Ну да, да, да, да.
Ну вот, хорошо.
Ну ладно, давайте так.
У нас есть N товаров.
Хотя тут нет, просто разные...
Ну ладно, у нас есть N товаров и каждый из них сколько-то весит.
А еще каждый товар сколько-то стоит.
А у нас есть, в соответствии с названием, рюкзак.
Это мистический рюкзак, у него есть только одно ограничение.
Мы можем утащить все что угодно суммарного веса, не более чем W большое.
Причем на объем нам начхать.
Как всегда.
И вот спрашивается, какой там...
Хочется утащить, конечно, набор товаров в этом рюкзаке максимальной ценности.
Суммарный.
Ну вот, сформулируем задачу так.
Но как решается такая задача?
Ну такая задача решается в общем тоже.
Есть, конечно, решение за два в степени N.
Но здесь, конечно, хитрый том, что если W требует большим, то заполеном от N,
без учета W, это тоже человечество подозревает, что задача не решается.
Вот опять же, человечество опять highly likely в этом месте.
Но если W оказывается не сильно большим,
то у нас оказывается замечательная динамика D,P,E,T,W маленькая.
То есть E,T у нас от нуля до N, W у нас от нуля до W большого.
Что это такое?
То есть максимальная стоимость под множество первых...
Под множество.
Но товаров с индексами меньше либо равно E и суммарным весом.
Допустим W.
Ну там несколько динамик можно написать, то вроде в самой классической является вот такая.
И тогда что же я тут должен написать?
Ну очевидно, что D,P,E,T,W это равно максимум.
То есть у нас два варианта.
Либо брать E,T элемент, либо не брать.
Если не брать, то получается D,P,E,T,W.
А если брать, то D,P и минус первое W минус W,E,T.
Ну там не буду сейчас писать эту уговорку на тему того, что если там W и больше, чем W.
Но в принципе давайте упомянули, что вот такой рюкзак тоже есть.
Да, да, да, спасибо.
Да, плюс конечно же АИ, а то без этого что-то.
Так, ну спрашивается.
Ну, то есть решение работает за O от N на W.
Но возникает вопрос, сколько памяти нам надо?
Да, если предчислить эту D,P прям вот в таком виде, то конечно да, тут без вариантов.
А можно ли насчитать эту динамику быстрее?
Да, можно действительно насчитать за W.
Причем на этот раз за W, а не за 2W, как в прошлый раз.
Хотя в прошлый раз мы это сделали за N плюс 1 памяти.
По сути, здесь получается буквально за W, потому что если мы бежим фориком справа налево,
то как раз мы пересчитываем очередую D,P через себя и предыдущие, которые еще не пересчитались.
Так, ну знакомая техника, да?
Я так просто на всякий случай упомяну, чтобы вдруг кто-то не сталкивался.
Но там просто есть еще прикольная модификация такая.
А какую задачу мы решим, если мы случайно в этом форике будем лежать не справа налево, а слева направо?
Наверное, когда мы уже много раз обратили эту тюрьму.
Да, совершенно верно.
Тогда оказывается, что у нас может быть постановка, когда каждого товара неограниченное количество экземпляров.
Тогда оказывается, просто делаете то же самое не справа налево, а слева направо.
Но там действительно разные постановки могут быть.
Вот.
Ну, собственно, да.
Больше вроде ничего нет.
Все.
Так, хорошо.
Есть еще какие-то вопросы?
Ну, тут нет.
Заметим, почему эту задачу в этом месте упомяну.
Потому что они в этом плане родственницы, в том плане, что восстанавливать ответы здесь и здесь как бы очень легко,
пока вы не потребуете уезжать память.
Потому что, скажем, в условном рюкзаке восстановить собственно под множество будет проблематично.
Вот.
Но, как всегда, как так часто бывает, технология фокуса одна и та же.
Технология такая.
Вот мы заметим, что сами по себе слои динамики мы можем насчитать за линейное число памяти, правда?
Тогда смотрите.
Тогда у нас классический алгоритм звучит так.
Значит, классический у нас алгоритм будет звучать так.
Но я буду его говорить на примере NOP, но в рюкзаке будет просто все аналогично.
Вот.
Ну, значит, допустим, у нас есть вот последовательность А и вот последовательность Б.
И мы тут воображаем типа таблицу ДП, да?
Так вот идея такая.
Давайте просчитаем эту всю таблицу ДП, храняя только последний слой.
Но такая неожиданная фишка.
Насчитаем мы при этом ее только до середины последовательности А.
То есть идея такая, да?
То есть идея такая.
То есть давайте вот насчитаем, как положено в NOP.
Насчитаем длины NOP для всех префиксов последовательности Б и префиксов последовательности А
под линей не происходящих пополам.
Ну, только длины.
Ну, по сути так, всю табличку насчитываем, но храним только последний слой.
Вот.
То есть вот эти вот значения.
Да.
То есть по сути задача найти NOP между половинкой А и всеми префиксами Б.
А теперь идея такая.
А теперь давайте сделаем то же самое с суффиксами, но в другую сторону.
То есть наоборот, я насчитаю NOP между второй половинкой А и всеми суффиксами Б.
То есть делаем то же самое, просто форики бегут в другую сторону.
То есть вот такое.
То есть мы такое делаем по сути разделяй и властвуй.
Потому что что это разделяй и властвуй нам дает?
Дает нам практически то, что на самом деле...
Да, вот так вот.
Да, то есть идея просто такая, что как найти теперь NOP между А и Б на уровне длины?
Очень просто.
Надо найти какие-то два элемента, находящиеся вот так вот по диагонали, сумма которых как можно больше.
Вот.
И вот, допустим, мы ее нашли.
И, более того, она не обязана быть даже в середине.
Давайте я где-нибудь еще вот тут...
Ну, скажем, вот здесь их найду.
Тогда идея такая.
А теперь давайте я рассмотрю.
Типа вот...
Вот. То есть возьму как-то вот так.
А теперь у меня идея такая.
Идея такая.
А теперь я запущусь рекурсивно от первой половинки...
Теперь найду просто NOP рекурсивно от первой половинки Ашки и вот этого префикса строки Б.
И второй половинки Ашки и вот этого вот суффикса Б.
Ну, а где они должны быть?
Вот.
То есть вот идея такая.
То есть я просто запущусь...
Ну как рекурсивно?
Рекурсивно, естественно, передам только константное число индексов.
То есть по факту у меня там будет мистическая функция LARA LBRB,
которая будет возвращать условно...
Ну, которая будет как-то искать подпоследовательность.
Она возвращать она ее не будет, чтобы лишний раз не копировать.
Но там просто идея будет то, что по факту...
Ну, просто заметим, что F будет реально находить ответ, когда выяснится что-либо у A, либо у B длина 1.
Что она в этом месте сделает?
Она в этом месте скажет, что...
Так, например, в Ашке один элемент остался.
Давайте по B пробежимся и посмотрим, есть ли он.
Если есть, то мы его записываем.
Если нет, то возвращаем пустую последовательность.
Но идея будет в том, что давайте записывать его в какой-нибудь там глобальный вектор с ответом.
И тогда в конце просто NOP получится.
Маленькое количество элементов запустить стандартный за квадрат памяти.
Ну нет, у нас, нет, нам хочется чтобы память была линейная.
У нас в этом цель.
Вот...
Ну, понятно, да, что если...
Ну нет, понятно, что если там размер A стал непровосредить константы, то можно по-честному.
Но с другой стороны в данном случае можно просто доединиться, довести, но то и не получается,
когда у нас будет такой же объект.
честно, но с другой стороны, в данном случае можно просто доединиться, довести и уже не париться.
А теперь мистическое утверждение. Вам может показаться, что этот алгоритм разработает
за n на v налог. Да, как минимум, потому что у вас тут логарифм это глубина рекурсии,
но глубина рекурсии здесь безусловно логарифм. Но теперь у меня мистическое утверждение. Я
утверждаю, что этот алгоритм работает не за nv лог, а вполне себе за nm, то есть мы не потеряли 8 точки.
Ну да, что делать, если какой-нибудь злой экзаминатор не поверит в это на экзамен?
Тогда можно рассказать следующее. Чего? Ну, формально можно писать реку... Нет, я вам так скажу,
можно писать рекурренту. А можно заметить следующее, что смотрите, на первом уровне рекурсии мы все
считали за nm, правда? На втором уровне рекурсии мы все посчитали за вот столько, то есть за вот это
плюс вот это. Заметим, что я утверждаю, что площадь вот этой штуки равна буквально по nm пополам,
потому что она равна n пополам, он может на вот это плюс вот это, а это n, правда? То есть как бы в два
раза меньше. На следующем уровне у нас произошло что-то подобное. Вот как-то так. Да, видите,
то есть вот тут деление пор... То есть, видите, важно, что по h деление всегда поровно. То есть
на третьем уровне рекурсии у нас тут получается n поделить на 4 умножить на m, потому что высоты
всех этих прямоугольников n делить на 4 и так далее. То есть получается там nm плюс n пополам m
плюс n делить на 4 m плюс и так далее. И это не превосходит 2nm. Вот. То есть это называется алгоритм
Хиршберга. Вот фамилия вот такая. В принципе, вот такая достаточно стандартная технология,
как вот в некоторых случаях оптимизировать память. Вот. Так что, как видите, что тут можно,
что в рюкзаке можно. Вот как бы на прошлом четвертинале неожиданно для многих там
что-то в задаче потребовали применить такую технологию. То есть там что-то часть народа была
почему-то жутко не в восторге от этого. Ну не знаю, потому что да. Ну как всегда, видимо,
чьё-то чувство прекрасного было почему-то очень сильно оскорблено. Ну вот. Но с другой стороны,
что делать? У нас Олимпиада не только по математике, но и по информатике тоже. Программировать
тоже надо уметь. Да. Так что в конце концов в финале 2000 года могли дать задачу на Флойда
вообще. Буквально. Дан Графт на 100 вершин. Найдите кратчайшие пути. Нет, реально там даже думать
не надо просто вот. Ну это да. Это, видимо, потом на разборе рассказали, что оказывается есть алгоритм
Флойда. Да. Ну если случайно в вашем университете такой не изучали. Но это был далекий 2000-й год.
Нет. Ну что делать? Ну вот. Так что вот. Так что вот такое. Так что это у нас называется
метод Хиршберга. Так что здесь вот восстанавливать ответ можно вот таким вот нехитрым образом. Так,
есть ли тут еще какие-то вопросы? Ваидин. Ух ты. Хотя, ну вот. Хотя,
самое смешное, что... Хотя Лада это называется, да, помои, да. Хотя следующие зваки будет
помогите товарищу, да. Потому что Лада. Что-то слет у каждого вроде из мелочей. Я вроде рассказал
вроде все, что хотел. Вроде больше ничего не забыл. Поэтому, видимо, приходится переходить
сразу к кульминации и обсуждать задачу ТОТА ЛОЛЦС. Вот. Но здесь. Ну, на чем? Постановка задачи. Ну,
в принципе, она, конечно, написана в условии задачи. Ну, а давайте я еще формулирую так. Итак,
в чем она? Значит, что мы сейчас попытаемся с вами сделать? Что мы сейчас с вами попытаемся сделать?
А сделать мы с вами попытаемся следующим. Мы попытаемся найти следующее. Значит, задача такая.
Дады две строки S и T. И нам говорят, скажите, пожалуйста, то есть нам хочется найти для любых,
то есть нам хочется для любых IJ таких, что 1 меньше либо равно I, меньше либо равно J,
меньше либо равно модуль T. Хочется найти NOP между строкой S и соответствующей под строкой строки T.
Ну, давайте подумаем, кстати, найти именно как к счастливке.
По последовательности. Нет, под строки это как бы из другого блока алгоритмов.
Вот спрашивайте, с какой симпатикой такой можно найти?
Ну, в идеале, конечно, да, NM квадрат. Потому что если мы возьмем просто суффикс,
просто переберем все суффиксы строки T и для каждого суффикса просто найдем NOP между S и
всеми префиксами этого суффикса. Ну, можно совсем в тупую на самом деле, даже за S и T в кубе даже можно.
Просто тупо перебирать все строки и запустить черный ящик. И более того, может, он даже сейчас
придется это сделать. Почему? Потому что как решается эта задача? Задача решается простым методом
вида. Напишем тупое решение, сгибеем какой-нибудь рандомный тест и посмотрим на получившуюся табличку.
Вот, что пиши. Нет, значит, поэтому теперь, поэтому ваша задача на ближайшие 20 минут.
Да, достать ноутбук, значит, во-первых, первое достать ноутбук, значит,
закройте эту задачу за септотику, значит, там, соответственно, послать в тестер,
получить ВА на тривиальном тесте. Лучше ТЛ. Нет, ВА не надо. Не, ну, получите ВА. Да, значит,
соответственно, да. А потом после этого я попрошу вас, ну, а потом после этого мы посмотрим на
табличку и, собственно, попробуем найти какие-нибудь закономерности. Так, ну, давайте
внимательно смотреть. Значит, вот у нас мы тут сгирели, так сказать, рандомный тест и у нас
получилось вот это. Справивается. Какие закономерности можно заметить? Ну, конечно,
самое тупое, что можно здесь заметить, это то, что числа в каждой строке не убывают и более того,
каждый следующий либо равно предыдущему, либо на один больше. Но не то, чтобы это неожиданность.
Да, и даже то, что посталп сам снизу вверх происходит тоже самое, в общем-то, тоже нас шокировать
не должно. Да, но вот задача, когда же они действительно, то есть, когда единичка прибавляется,
а когда нет. И вот выясняется, что в каких-нибудь соседних рядах это происходит не то, чтобы прям
совсем в рандомных местах. Да, ну, в некоторых рядах это не происходит. А если это все-таки
произошло, то почему-то оказывается следующее, например, что вот у нас было равно, равно, равно,
и вот тут стало больше. И тут мы неожиданно замечаем, что дальше будет тоже равно. То есть,
даже дальше тоже будет неравенство. И можно даже еще здесь добавить. Ну, потому что подразумевает,
что здесь нолик стоит. Вот такая вот мистическая вещь. Более того, да, замечаем, что практически
это везде происходит. Вот здесь тоже вот равенство, и все, пожалуйста, меньше, меньше, меньше, меньше,
меньше. Вот. А вот если у вас уже в последнем столбце стало прям строго меньше, то тут
прям везде дальше будет строго меньше и вообще не паримся. Вот. Такое у нас верно в строке.
Ну, очевидно в принципе, что в столбцах это тоже автоматически выполняется. То есть,
если так прибежаться по столбцам, то получается вот тоже примерно то же самое.
равно. Равенство, равенство, равенство, равенство, равенство, равенство, равенство, равенство, равенство,
ой неравенство, ой неравенство. Нет, ну тут... Нет, ну как линии? Пока хочется просто посмотреть
хотя бы на строки,úsто и понятно почему. Почему там эти равенства и неравенство,
не расположены рандомно. Почему сначала одно, потом другое? Ну или там только одно.
Спрашивается один вот. Почему же это так? Вот. Ну это называется просто, но это на самом деле
очевидно. Надо просто пропонимать, как говорится, что такое NLP, что мы на самом деле делаем. Ну
что мы делаем, когда ищем NLP? Ну естественно, ищем максимальное расстояние в ориентированном
графе, правда? Ну конечно. То есть действительно все очень просто. То есть мы строим граф следующего
вида. Так какие у нас там, допустим, строчка была, да? Y, X, X. Там Y, Z, там X. Так, что там? А, Y,
X. Ну ладно, сильно много рисовать не буду. Думаю, сути так будет понятно. Тут, допустим,
X, X. Y, Z. Там X, Y, Z, X. Вот. Вот. Чего? Вот. То есть на самом деле, смотрите, давайте построим вот,
ну короче говоря, вот такую сеточку. Вот. Ну и вот такую, соответственно. Так вот, вот так,
вот так, вот так, вот так, вот так, вот так. Вот. То есть вот такая вот сеточка.
Вот. Давай. Ну в общем, короче говоря, не будут ориентировать все ребра, думаю,
суть, вы поняли. Самое главное еще я скажу, что у этих всех ребр вес 0. А еще я сделаю маленькую
читерскую вещь. В клеточках, которые соответствуют одинаковым буквкам, я еще нарисую диагональку и
скажу, что это диагональка веса 1. Да, 1. Совсем 1. Ну вот, это вот будет как-то вот так. Вот это
будет вот так, вот так, вот. И вот так вот, конечно. Ну тут повторяем операцию. Вот. Значит,
х и как, и как. Что там еще? Х, х, х, х. Вот. Так что получается такая вот красота. И замечаем,
что чтобы найти NOP, надо просто найти длиннейшее расстояние от вот этой точки до вот этой. Логично, да?
4, 5, 5, 6. Ничего. Они на 1 меньше, чем то, что выше. Конечно. Не, ну пройдите. Тут, ладно,
доставить бинпоисков никаких не надо. Нет, не, ребят, смотрите, все гораздо проще. На самом деле,
как бы суть у нас алгоритма заранее, скажу, сведется на самом деле к тому,
чтобы просто найти так называемые критические точки. Критической точкой будем называть квадратик
2 на 2 вот такого вида. Да, это продвинутый поток, все дела, понятно. На основном такого не
рассказывают почему-то. Вот. Так. Так, что там еще? А, ну где тут еще такие точки? А, ну вот еще
такая точечка и так. А, и все в принципе. Ну на самом деле, заметим следующее, что если нам кто-то
с небес по факсу пришлет набор критических точек, то табличку мы даже без всяких бинпоисков
спокойно восстановим, правда? Потому что по сути критическая точка это в каждом ряду или в
каждом столбце как угодно вам просто скажут, где прекращается неравенство и начинается равенство.
Вот. Ну или наоборот. Но спорулируем так. Ну утверждение такое, если, например, если тут
ряды равны, то где-то эта критическая точка существует обязательно. Может быть, она существует вот
здесь в виде 1, 1, 1, 0. Вот. Ну здесь и понятно, я там не беру всякие тривиальные случаи, когда там
первый символ во второй строке вообще не лежит, допустим, вот это все. Вот. Если мы в это верим,
то мы понимаем, что если последние элементы не равны, то тут не равен никто уже и никому. То есть
там просто берем копипастим, прибавляем один, радуемся. А если равны, то значит надо просто
знать до какого момента равны. Вот. Но это если мы в это верим. Теперь, собственно, пришло время
понять, собственно, а откуда мы, собственно, это берем. Так. Ну воображаем себе вот это постоянно,
воображаем себе вот этот граф. Так вот, что это за граф, понятно, да? Ну вот просто написали
строчку одну, строчку вторую. Вот это вот строка и строка Т. Честно, нарисовали все вертикальные
горизонтальные ребра, сказали, что они веса ноль, и в клеточках, соответственно,
одинаковым буквам нарисовали ребра веса один, диагональная. То есть теперь, чтобы найти
НОП, надо просто идти длиннейший путь отсюда-сюда, и диагональные ребра, по которым он проходит,
собственно, будут соответствовать НОПшечке. Понята логика, да? Так. Поэтому нет, просто это
я специально уточняю, потому что сейчас я это все сотру и буду рисовать что-то более абстрактное.
Да, я сейчас побольше нарисую. Это наша цель. Нет, наша цель решить задачу за СТ, да. Нет,
я понимаю, что там асимптотика, конечно, с целью запутывания, там, может быть,
какая-нибудь. Ну да, в оригинале, да, как запутать, немножко занисти асимптотику,
чтобы... А то есть написали бы пять тысяч, значит понятно, надо думать за квадрат,
поэтому множество идей сужается. Ну вот, но правда, тем не менее, команда Петрозаводского
университета эту задачу как-то сдала. Ну да, утверждается, что да, вот реально,
сгенерили тест, посмотрели на табличку, реально нашли закономерность и придумали,
откуда она взялась. Ну вот, команда была Петрозаводск-СУ-1, если не ошибаюсь,
то Сунков Федулин, Йофи или что-то в этом роде. Ну может, второй состав, правда, да.
Так что, соответственно, вы должны, правда, констатировать, что, насколько я помню,
Йофи, я помню, через некоторое время потом на читерство поймали, но представители этой команды, вот.
Чего? А Филипфи, ну, наверное, да, хорошо. Как вы видите, я не разбираюсь в Петрозаводском
ACPC, к сожалению, да. Ну да, Петрозаводска-СУ-1, у них медали ACPC даже есть свои годы. Ну, в конце концов,
не совсем случайно, на самом деле, Куля, самые культовые ACPC-шные сборы проводятся именно в
Петрозаводске, да, при наличии там каких-то других городов, которые можно там из различных уголков
России добираться сильно удобнее. Там есть Москва, там, например, там, я не знаю, или там Новосиб,
там ЕКБ, что-то вроде там. Ну вот, а почему-то Петрозаводск. Да, ну, правда, не Мурманск,
правда, ну вот. Как бы не Мурманск, но и не Питер. Вот так скажем, да. Вот, нет, в самом контесте,
да, больше это никто не сдал, да. Ну, ГГГ, да. Нет, ну не в этом смысле. Задача супер. Значит,
смотрите, сейчас я буду это рисовать. Значит, я сейчас не буду рисовать весь граф, я его себе
буду воображать, что тут как бы внутри что-то есть, там какая-то начиночка. Вот.
Вот какая-то вот начиночка.
Ну, то как-то вот так вот, и вот так вот.
Ой, я попал, классно. Вот, давайте смотреть теперь. Значит, идея такая, вот мы поняли, да,
что такое NOP между S и T. Это как длиннейший путь из угла в угол. А теперь внимание, вопрос,
что такое NOP между строкой S и T и TGT? Ну, только не от 0 до NG. Да, но нет. Ну ладно,
формально нет. Ну, вот скорее да. Ну ладно, у нас будет от и-1 даже. Ну, под строка от и-1
включить на каждый символ надо пройти, поэтому. Ну, как сказать, вот тут мы ждем от нулевого до
м-того, да, чтобы пройти под строку длины м, да. Поэтому от и-1 надо пройти G- и-1. Поэтому получается,
что надо от этого 0 и-1 дойти куда-то там до вот этого NG. Что? В смысле полуинтервал? Нет,
почему полуинтервал с нуля? Нет, у нас индексация с единицы, если что, да. Ну,
с нуля было бы от и-1 даже. Ну, давайте у нас индексация с единицы, поэтому от и-1 даже. Так вот,
значит, теперь давайте думать, а что такое вообще вот эта критическая точка? Ну, критическая точка
это когда мы ищем под строку от, значит, тут у нас и, тут у нас и-1, тут у нас, соответственно,
G, тут у нас G плюс 1. Ну, дальше, это критическая точка, просто рассмотрим такой квадратик. Что нам
нужно по сути доказать? Нам нужно доказать, что вот G был квадратик, и в нем, и надо показать,
что в нем не бывает. В нем не бывает, чтобы вот тут было равенство, а тут было неравенство,
правда? Ну, я утверждаю, что если мы вот докажем, что вот такого не бывает,
да, если мы докажем, что такого не бывает, то из этого и будет следовать, что в каждом
ряду вот сначала неравенство, а потом равенство. Или что то же самое вот для нас по столбцам,
на самом деле, по столбцам на самом деле нам сейчас будет удобнее. По столбцам надо доказать,
что не бывает так, что у нас тут вот знак меньше, а тут знак равно. Кто сказал, что мы их добавили?
Когда мы идем вниз, мы их, наоборот, удаляем. Мы один добавили, один прибавили. Заметим,
что обе диспозиции на самом деле примерно одинаковые, то есть на самом деле плохой
случай по вертикали соответствует плохому случаю по горизонтали на самом деле. Ой, нет или не соответствует.
Ну ладно, да-да-да-да, это неважно. То есть здесь х, а здесь может быть х плюс 1. А нет,
погодите, когда мы идем наверх, меньше точно не будет, правда? Но х плюс 1 здесь быть не может,
потому что тогда тут будет х плюс 2, и это слишком далеко. Поэтому тут пишем х, тут пишем х плюс 1,
и получается плохой случай здесь. То есть плохой случай по горизонтали, плохой случай по вертикали,
это одно и то же. Значит, смотрите, давайте представим, что это произошло в точке и и плюс 1,
и ж ж плюс 1. Давайте эти длиннейшие пути попытаемся изобразить. Изображаем. Путь
соответствующий и ж, он на самом деле ведет нас куда-то вот сюда. Да, это у нас для и ж. Вот этот
вот путь нас ведет в следующую точку, это для и ж плюс 1. Видно, да? Так, вот а ты плюс 1 ж нас ведет вот так.
Ну вот, и почему странно, все нормально, что не так. Вот, то есть, ну давайте так,
я лучше, чтобы их не писать для и ж, я напишу так, давайте я напишу, что это вот а, б,
с, д, вот так вот, да, и честно там изображу, кто тут а, кто тут б, кто тут с, кто тут д, то есть это вот
получается а, там б, с, д. Видно, да? Я нарисовал очень сематично, потому что могут ли эти пути
пересекаться, конечно. Более того, они очень часто даже просто имеют какие-то просто общие
наложения, просто общие участки. Да, более того, б и с пересекаться обязаны хотя бы по одной
итогике, это важно. Вот, мы ее даже отметим. Итак, возникает вопрос. Ну вот, нам очень хочется,
чтобы у нас оказывается было получается а меньше b, то есть вот здесь был знак меньше, а вот здесь
был знак равно. Мы пытаемся показать, что этого не бывает. Вот это, кстати, видите, то есть это
соответствует неравенствовам в одном столбце, видите, да? То есть если я все неравенства в одном
столбце возьму, то как бы у меня получатся просто эти тролли, и получается будут идти вот как-то
вот так. Видно, да? То есть вот так вот, потом вот так вот, ну и так далее. И хочется сказать,
что мне не бывает, что мне где-то идет меньше, а потом идет неожиданно равно. Вот давайте,
вот почему же такого не бывает? Вот давайте, ну-ка подумайте, потому что на самом деле вот,
глядя на эту картинку, на самом деле можно придумать почему.
Ну, как сказать, в некотором смысле,
ответ, конечно, перед глазами. Ну, безусловно, безусловно. Нет, у b не меньше, чем...
Так, ну картинка, и что? Ну хорошо, пишем, и что? Ладно, действительно, можно заметить,
что a больше либо равно c. Так, b больше либо равно d. Да, можно в принципе это заметить, да.
Чего?
И что? Так, чего b плюс c? Ну да. Ну да, да, да, да, да, да.
Да, все было. Да, лакчика открывается предельно просто. Потому что заметим,
что когда мы ищем длиннейшие пути, у нас возникает естественное неравенство треугольника. Ну,
как всегда, неравенство треугольника заключается, ну, просто прямое следствие того,
что длиннейший путь больше либо равен, чем любой путь, правда? То есть в данном случае можно
писать, что a это больше либо равно, чем b1 плюс c2. Почему? Потому что a это длиннейший путь
между этой и этой точкой, а b1 плюс c2 это длина какого-то пути между этими же точками, правда?
Вот, также верно, что d больше либо равно, чем c1 плюс b2. Да, но из этого получается да,
a плюс d больше либо равно b плюс c. Да, то есть, видите, важный такой принцип. То есть в таких
вот случаях, вот я его называю, крест не может быть больше полозив. Да, именно. Но мы ищем длиннейшее
путь и не кратчайшее, поэтому да. То есть вот крест не может быть больше полозив. А противоречие
выключается в том, что если у вас a меньше b и c равно d, то тогда b плюс c будет больше, чем a плюс d.
Ну, просто вот это плюс это у вас получается больше, чем это плюс это, а этого не бывает. Вот. То есть мы
по сути можем здесь расставить знаки только таким образом, чтобы полозия не оказалась меньше креста.
Вот. То есть в принципе отсюда, то есть в принципе отсюда следует, что получается вот такие, знак
меньше и тут знак равно идти не могут. То есть из этого мы выводим, что действительно тут есть что-то
равно равно, потом будет равно, потом с какого-то момента знак меньше и пойдет меньше.
Хотя, конечно, отдельная песня. А пойдет ли когда-нибудь знак меньше? А может всегда будет равно?
Нет. Знаете, где будет знак меньше? Вот прямо вот в этой вертикали. Потому что здесь заведомо
будет знак меньше по одной простой причине. Потому что длина здесь кратча длиннейшего пути
равна чему? Нулю. А здесь? Да, минус бесконечности, конечно. Ну, знак того, что этого пути тупо нет.
Вот. Поэтому можно считать, что знак меньше есть всегда. То есть и нам интересно хранить,
где впервые появляется знак меньше. Кстати, он может появиться и прямо здесь. Удобно, правда?
То есть в принципе отсюда, то есть на самом деле это уже доказательство того,
что закономерность, то есть закономерность это не случайность, она действительно всегда
имеет место. Остается только для каждого из этих ребер найти вот этот вот первый момент,
когда возникает знак меньше. И тогда мы просто очень легко табличку восстановим, правда?
Понимаете, да? Понимаете, да. Вот. Так, что там у нас еще? Наоборот. Сначала равно,
потом меньше. Ну, на самом деле мы сейчас смотрим по вертикали. То есть мы сейчас вот эти вот знаки
равно меньше. Это на самом деле там вот этот и вот этот знаки. Да. Тут скорее такое. Ну, тут
ну не совсем так. Там вот просто по строчкам. По строчкам как бы это будет сложнее. Ну,
там по строчкам. Ну, просто что у вас там как-то. То есть по строчкам просто неравенство будут
просто не сверху, а снизу на самом деле. Вот. Ну окей. И так, то есть для такого ребра нам
хочется такую штуку найти. То есть для каждого, то есть для горизонтального ребра внизу хочется
найти такие троллей и найти первый троллей, когда здесь находится знак меньше. Ну, теперь,
значит, как же его искать? Ну, идея оказывается бенпоиском. Да, замечательно. Ну, правильно. Да,
все в этом мире ищется бенпоиском. Да, кроме того, что ищется ахкарасиком. Так. Ну, да. Ну,
да, все. Да, мы помним, да. Как бы динамика являются все алгоритмы и репербаста. Мы помним, да.
Ну, вот. Ну, на самом деле, заметим следующее, что я вот эту вот интересную величину могу рассмотреть
не только для ребра на нижней, на вот, собственно, внизу рамочки, но и на абсолютно произвольном
горизонтальном ребре внутри таблички, правда? То есть по сути я могу здесь ввести такое понятие
аж от ижи. То есть что это за понятие? Я беру ребро, которое ведет меня из клеточки, из точки ижи,
в точку ижи плюс один. Да. Строю. Ладно, даже вот Х игрок я тут нарисую хорошо. Вот. И получается,
вот. И тоже типа мысленно рисуем вот эти вот троллей, троллей, троллей, троллей, троллей. Тут
будет равенство, равенство, равенство. Вот. И в какой-то момент впервые будет знак меньше,
вот нам жутко интересно, когда он впервые появится. То есть если я научусь искать такую
штуку аж от Х игрок для всех их сыгрок. Понятно, да? Как же ее искать? Ну, как у нас водится в
динамике? Ну, так давайте обсчитывать уже все, что можно. У нас же помимо горизонтальных еще
вертикальные ребра есть. А теперь давайте подумаем, как это будет выглядеть для вертикальных ребров.
Вот. Да, про Аш мы все поняли. А теперь давайте посмотрим на вертикальные ребра. Вот. Ну, действительно,
давайте вот введем вот такие троллей. Да? Какие тут вообще знаки будут? Какие тут знаки вообще
будут? Что? Какие симметрики? Что такое симметричные знаки? Да. Ой. А если внимательно на картинку посмотреть?
Вот. Да. Начнем с того, что никаких знаков меньше тут вообще нет. Да. Да. То есть путь
до сюда он не меньше, чем путь до сюда. Ну, потому что можно дойти до сюда и плюс 0. Поэтому тут есть
только знаки равно и знаки больше. Но возникает вопрос. В насколько рандомном порядке эти знаки
могут появляться? Так. Ну, вот что нам надо отсеки? Ну, да. Ну, вот. Да, прям точно.
Ну, да. Нет. Ну, давайте, как всегда, у нас крест не может быть больше полози. Давайте. Какие надо
знаки поставить, чтобы крест оказался больше, чем полози? Да, конечно. Вот, собственно, равно и
больше. Да, именно тогда вот крест оказывается больше. Значит, получается равно и больше в таком
порядке стоять не могут. Значит, вывод. Действительно, сначала идут знаки больше, потом знак равно.
Заметим, что знак равно рано или поздно возникнет просто вот в этой вертикали, потому что будет 0,0.
Вот. Соответственно. Так. Что же у нас тут теперь? Получается. Вот. Ну, получается, соответственно,
вот еще что. Вот. Значит, получается тут больше. И соответственно, в каком месте появляется этот
знак равно, мы теперь можем насчитать, засчитывать тоже как v от x. То есть вот теперь у меня идея такая.
Да. Вместо того, чтобы насчитать просто m значение, я насчитаю 2nm значение. Осталось только выяснить,
как же я их насчитаю. Ну, как всегда. Примерим стандартный метод и будем думать. Вот. Ну,
нередко так у нас задачи решаются, правда? Вот. И так. Ну, давайте. Давайте на это внимательно
смотреть. Значит, я утверждаю. Ну, утверждает следующее. Если я хочу рассмотреть какую-нибудь точку
x игрок. Да. Я утверждаю, что если я знаю ашечку здесь и вэшечку здесь, то я могу насчитать
вэшечку здесь и ашечку здесь. Нет, не обязательно. Нет, аш и вэ между собой могут быть не связаны
слова никак. Вот это вот. Х игроковое. Да. Но это вот место, где там впервые появится знак меньше. А вэшка
это где впервые появится, наоборот, знак равно. Вот. Но давайте предположим, что это клеточка там
какая-нибудь. То есть давайте это x игрок, это x игрок плюс один, это x плюс один игрок, а это x
плюс один игрок плюс один. Вот такая идея. Вот. Приводит это нод. Но давайте попробуем подумать.
Значит, как по аш и вэ попробовать насчитать аш и вэш. Вот. Это можно сделать следующим образом.
Значит, смотрите. Так давайте я тут немножко сотру. Вот так вот. Тут нам, в общем-то.
Вот. И давайте себе этого образим. Значит, будем сравнивать. Ну, как бы, если проводить, собственно,
4 троллей, вот этих вот, да. Вот. Ну, давайте. Что такое аш? Это когда мы сравниваем. Значит,
тут прибираемся по к. К равно у нас 0, 1, там 2 и так далее, м минус 1, да. Вот она, м. Значит,
к у нас вот такое. И давайте посмотрим. Теперь мы пытаемся сравнить расстояние от точки 0 к,
то есть там, то есть от 0 к до x игрока. Это ладно, 0, 1, 2, ну вот. Придется сравнить
с расстоянием от 0 к до x игрок плюс 1. Вот. И тут у нас получается 0, 1, 2, там и так далее,
м. Значит, как будет это расстояние выглядеть? Как мы уже поняли? Сначала будет равно равно равно.
Потом неожиданно возникнет в позиции аш, возникнет знак меньше, и он будет уже навсегда. Видно, да?
Это это я просто определение аша написал, правда? Теперь я напишу определение v. То есть 0 к x игрока
против чего? d от 0 к x плюс 1 игрок. Как мы уже поняли, она будет у нас идти как больше,
больше, больше, больше, больше, больше, больше, потом в какой-то момент станет равно. Вот. Но нам
придется рассмотреть два случая. Какие два случая нам придется рассмотреть? Нам придется
рассмотреть случаи, когда v больше, чем аш, и когда v меньше, чем аш. Видно, да? Вот давайте такой
случай рассмотрим. Предположим, что оказалось, что аш меньше, чем v. Теперь, так, ну давайте
рассмотреть. Давайте попробуем про аш-3 что-нибудь написать. То есть, ну, точнее, так, что мы можем
вообще сказать? Какие тут расстояния вообще могут быть? Ну, вообще, заметим, да, следующее, что, ну,
как бы, какие мы сейчас расстояния вот в каждом столбце рассматриваем. То есть, у нас есть клеточка,
и как получается, и рассматриваем вот такие тралейчики. Правда? Ну, еще вот такой. Вот. И вот,
допустим, мы попали вот в этот столбец. Мы попали в этот столбец, и что происходит? И мы тут
неожиданно видим, что у нас вот здесь происходит равенство, а вот здесь происходит неравенство.
Видно, да? То есть, получается, сюда расстояние равно l, сюда расстояние равно l, здесь оно равно l
плюс 1, а здесь оно равно, а чему оно тут может быть равно? Да, только l плюс 1. Ну, вот. ДП-шка,
как она пересчитывается? Она либо максимум из этих, если символы неравны, а символы равны,
то вот это вот плюс 1. Правда? Но все варианты нам говорят, что тут только l плюс 1. Давайте,
то есть, тут может быть только l плюс 1, а это означает, что тут железобетонное равенство. То есть,
если вот тут равенство, а тут знак такой, то здесь тоже знак равенства, знак вот такой. Вот. То есть,
получается, мы тут получается просто честно знаки и копии пасти. То есть, получается,
пока тут идет равно и больше, то и здесь будет равно больше, равно больше, равно больше, равно больше.
Понятно, да? Ну, понятно, здесь я имею в виду, давайте уж напишу. 0 к x, значит, да, плюс 1,
и как s, d от 0 до k, x плюс 1, и как плюс 1. Это вот одно и второе.
Вот. Вот. Вот. Значит, теперь давайте рассмотрим симметрический случай, когда у меня тут знак
меньше и знак равно. Вот. То есть, когда тут не l, l, l, а когда вот тут, а когда вот тут оказалось,
значит, тут оказался знак меньше, тут оказался знак равно. Но, в общем, ничего принципиально не
поменялось. Значит, вывод тут l, тут l плюс 1, тут l. Но тогда вывод, что здесь опять l плюс 1,
и тогда опять получается, что знакик, честно, копии пастится. Так. Ну, кстати, заметим,
что независимо от того, кто больше h или v, а на краях будут ровно эти ситуации. Видите, да?
Ну, и теперь давайте посмотрим. Так, если тут произошла ситуация, когда у вас тут l,
когда у вас тут знак меньше и тут знак меньше. Так, но здесь, заметим, тогда тоже l плюс 1,
но тогда копии пасты нет, потому что обнаруживаются два знака равенства. И тогда мы видим, равно равно,
равно равно. Видно, да? Вот. Вправивается. Ну вот. Но тогда мы выводим, что раз тут h здесь,
ну давайте я даже так напишу, h здесь, а v здесь, то тогда мы выводим, что, оказывается,
h' и v', это абсолютно те же самые h и v, только по-свапанные. Поэтому можно прям, прям при
впечатлении dp так прям и написать, если h меньше либо, там, меньше либо равно v, то значит просто h'
равно v, v' равно h. Все. Внезапно, да? Теперь мы смотрим второй случай, когда неожиданно h оказался
больше. Тогда это означает, что у нас вот такая, имеет место вот такая ситуация. То есть h оказался
здесь, v оказался здесь. Ну вот эти я стирать не буду, потому что здесь, в общем-то, анализ не
изменился, правда? А вот посередине возник очень интересный случай. То есть, возможно, самый
интересный из всех. То есть, когда у вас, оказывается, тут два равенства l, l, l. Внимание,
вопрос. А что здесь? И от чего это зависит? Ну да, то есть, здесь я могу написать вот так, l плюс
равен ли x плюс первый символ строки s? Там y плюс первому символу строки t. Ну или там с
плюс-минус единичками подгоните там. Ну, по-моему, так. Ну в один индоксации так. Видно, да? То есть,
потому что если они равны, то значит тут будет два неравенства. То есть, тут будут два неравенства,
и тогда hv опять послапаются. Или, значит, этой ситуации не произойдет, символы будут неравны.
Ну вот. И тогда тут опять будет два равенства, два равенства, и hv на этот раз просто скопи пастятся.
Ну вот и все задача. Вот. Все. А что-то даже несложно оказалось.
Про что? Нет, когда h было меньше, чем v, они всегда свапались. Ну там, посмотрите, вот это вот
равно больше всегда превращается в равно больше. Меньше равно превращается в меньше равно. Еще мы
выяснили, что, на самом деле, если тут стоят знаки там, то, допустим, меньше-меньше, больше-больше,
то они железобетонно превращаются в равно-равно. Вот. И тогда это приводит к тому, что, действительно,
там h и v свапаются. А вот если тут равно-равно, то тут может быть два варианта, то есть тут уже
зависит от того, равны ли, то есть есть ли в этом квадратике диагональка. Вот. Так что вот такая
красота. Ну вот. Ну да, то есть на самом деле зря эту задачу в контесте дал. Нет, ну совсем халявный,
ну скажи так, они действительно халявные, учитывая, что там задача вывешена, так вот, форсис.
Ну, это да. Чего? А, даже та? Да, ну да, понятно, да.
Ага. Сейчас. Не, погодите, сейчас. А бенпольск вообще не... Сейчас, а бенпольск не слишком долго
работает. Там, если бы в каждое... Ну, давайте так, нет, погодите, вот как вы бенпольском
собираетесь это искать? В явном виде квадратик вычислить?
Мы знаем предыдущую строку. Теперь нам нужно понять, как выглядит следующая строка,
которая на один выше. Мы просто бенпольском находим вот этот момент, то есть мы делим пополам,
смотрим какое там значение. Если оно точнее, чем предыдущая, тогда запускаемся от правого,
если равно, то от левого. Да, но просто для того, чтобы запустить, то тебе по сути,
все равно тебе придется вычислять логарифом этих вот чисел, а каждая чиселка вычисляется
за nm. То есть получается ты nm log тратишь только на один бинт. Так что не знаю там какой.
Ну, на вот этом сведении, да, уже просто легче вот это написать уже.
Равно-равно в смысле? Если h меньше, чем v, то у вас случая равно-равно никогда не будет. Нет,
а если случай h меньше v, это означает, что тут начался знак меньше, а тут не начался,
а тут еще продолжаются знаки больше, поэтому случая равно-равно нет. Нет,
у вас остаются там всякие мелочи, я вам их оставлю, то есть в качестве там как,
собственно, там базовые значения писать вот эти вот, чтобы там что-то вычислить. Нет,
а на самом деле, знаете, про задачу я думаю так, потому что на самом деле надо было вам дать не
эту задачу, а на самом деле, как легко догадаться, у нее есть задача на паркик.
Нет, не в этом плане. Нет, там задача найдите nop между всеми суффиксами строки t и всеми
префиксами строки s. Делается это, конечно, действительно быстренько. Нет, у нас нет,
задача-напарник, ну просто потому что у нас как бы все это мы забабахали для того,
чтобы найти вот эти ашки. А теперь можно еще задуматься, а какую информацию можем выковырить из
вот этих вот штук. И, собственно, там получаются задача-напарник с идентичными рассуждениями.
Так что, может, я ее даже и добавлю в контест. Нет, вам-то это в профит в любом случае. Но вам
профит может есть. Как бы, если я уже фиксирую правила, тем больше я вам добавлю задачи,
тем больше у вас вариативность. Задача на фенвика? Любая задача там на фенвика, господи.
Да, ну правда, да, да. Конечно, нет, ну там есть, там сертифики. Нет, ну сформулировать так,
там бывают задачи, где как бы какие-нибудь типа там есть там без деревоотресков дикартовых деревьев
вы не обойдетесь в принципе. Чего? Деревоотресков нет? Ну для шестого, да, конечно. Нет,
просто если это дерево, нет, а если там была задача, то деревоотресков дикартовых деревьев просто. Вот,
то есть нет, там просто по деревоотрескам имеется в виду, что обойтись без всяких дикартещек вообще.
То есть чистое это. Ну да, хотя ладно, да, там, хотя бы, ну вот. Ну, то есть, там условно говоря,
там как бы, да, в общем ладно, не суть. В каком втором? Ну, смотрим, если h тут, то значит,
что мы имеем? Равно-равно. Тогда здесь получается l, l, l, а тут что? Ответ, как повезет, есть вот этот
диагональ или нет? Чего? h, v не будут равны пока друг другу. Но они иногда бывают равны друг другу?
Как повезет. Нет, ну они как повезет. Тут два случая есть. Потому что если символы,
потому что если диагональка есть, то тут будет l плюс один и два неравенства. Ну, там будет что-то
типа там пум-пум и пум-пум. И тогда значит вот h3 сюда, v3 сюда. Или диагональки нет. А если диагональки
нет, тогда у нас оказывается тут равно-равно и тогда просто оказывается, что h и v тупо пипастятся.
Вот и все. Правильно, входит такие звезды шоу-бизнеса и им говорят, смотрите, вот есть 20 палочек.
Каждый игрок должен брать от одной до трех палочек. Но тут внимание, кто заберет последнюю
проиграл. Да, и вот так и быть. Как говорится, мэтры очень любезны, поэтому первым ходит гость.
Так вот, вы знаете, в том сезоне в эту игру смог выиграть только Александр Добогаров.
Так, ну ладно, бесполезно спрашивать. А Ермольника не знаете? Замечательно. Кошмар.
Кошмар. Господи, Добогаровы знают Ермольника? Нет, господи, ну как это вообще? Господи.
Понятно. Нет, вы вот... Ну окей. Ну вот, но как выяснилось, судя по тому, как играл Добогаров,
ну есть, иногда было чей, что иногда мэтры, по-моему, явно поддавались откровенно, но в случае
Добогарова явно было видно, что он знал. Вот. Ну да, то есть, я не знаю, то есть, в более
современных версиях Форд Боярда там вообще там, называется в этой игру, там мэтр очень старался
не выиграть. Просто максимально старался, только единственное, что там довели уже по количеству
палочек, уже просто довели там, по-моему, до семи. То есть, уже там до семи, чтобы уже там,
чтобы девушка уже хоть что-то сообразила. Вот, потому что там мэтр очень старался. Да. Так,
но давайте подумаем. Но давайте подумаем. Казалось бы, а как тут вообще надо играть? Казалось бы,
сложная игра с огромным количеством комбинаций. Вот. Но играть просто. Ну, во-первых, давайте
предположим, что двадцатой палочки никакой нет. И сведем задачу к более классической ситуации,
когда прыгает тот, кто не может сделать ход. Ну вот. Ну, как тогда задача решается? Ну,
да. Ну, действительно, конкретно в данном случае действительно все просто. Надо просто забрать
три палочки, а потом каждый ход следующего противника дополнять до четырех. Тогда,
после вашего хода, будет составиться сначала шестнадцать, потом двенадцать, потом восемь,
потом четыре, потом ноль. Кайф. Так, ну, думаю, это понятно, да? Вот. Правда, возникает идея,
что может быть это... Ну, правда, бывают более сложные случаи. Это я сказал один, два, три. А
если, допустим, можно за один ход брать, ну, скажем, там, я не знаю, два, четыре или семь палочек.
Так, вот их нет. Ну, вот давайте немножко разомнемся на эту тему. Да, естественно,
мы... Но тут вот оказывается идея, что давайте решим задачу, оказывается динамикой неожиданно.
Казалось бы, какой динамикой? А простой. Давайте для каждого количества палочек от нуля до н
попытаемся решить задачу. То есть попытаемся понять, кто выигрывает при правильной игре.
Ну, например, так и пишем, что если у нас ноль или одна палочка, то заведомо выигрывает вторую
первую сразу не может сделать ход. Но мы эту ситуацию будем называть проигрышной. Да, у нас такое вот
интересное определение будет, что мы будем считать, что игра... То есть будем называть игру выигрышной,
если она или проигрышной, если она выигрышной, проигрышной для того игрока, кто в этой позиции
делает ход. Вот, соответственно, значит, вот и видим. Значит, тут проигрыш. Если у нас две палочки,
то тут, конечно, автоматически выигрыш, потому что остается только взять две палочки и не париться.
Да и во-первых, во-второй тоже возьми две палочки и не парься. В четверочке ситуация чуть поинтереснее.
В четверочке впервые у вас появляется возможность ошибиться. Да, то есть вам приходится, то есть вы
можете взять четыре палочки выиграть, но можете взять две палочки и выиграть противник. Но тем не менее,
вы выиграть можете. Так, а что будет на пяти палочках? Да, тоже выигрыш, но тоже с
возможностью ошибки. А на шести палочках? Вот, а то тут проблема, действительно. Оказывается,
мы можем взять либо две, либо четыре палочки, но оба раза мы приходим к пробежу. Да, хорошо. Так,
что можно взять на семи палочках? Да, ну вот смотрите, только один из трех ходов ведет к победе.
Ну это да, то есть как-то в шахматы есть выражение, точный ход. Вот здесь прям вот такая неожиданная
ситуация, точный ход. Ну да, нет, ну конечно тут не очевидно, это ж не ним какой-нибудь. Так,
вот, значит восьмерочка, хотя ладно в них, вот восьмерочка. Так, ну здесь, так, ну здесь конечно
проще, здесь аж два из трех ходов ведет к победе. Так, а что у нас для девяточки? Да, три хода и все
две палочки, это значит плохо, четыре палочки, плохо, семь палочек, плохо. Так, а что у нас на десяти
палочках? Да, вот это да, вот это вообще не тревеля, два плохо, семь плохо, четыре хорошо.
Вот, ну давайте, да, сейчас породить. Здесь как-то ничьих не бывает, потому что игра рано или поздно
закончится. Что важно, независимо от действий игроков игра когда-то закончится. Значит тут у нас
да тоже выигрыш, а в двенадцати у нас что? Проигрыш. А в тринадцати? Победа. Так,
победа, главная победа. Так, а четырнадцать? А пятнадцать? Ой, ой, и тут мы неожиданно что-то начинаем
подозревать, что что-то зациклилось. Как странно, что-то с какого-то время что-то вот ВВП какое-то
пошло. Да, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
ВВП, ВВП, ВВП.
Но вы когда-нибудь пробовали грабить БАД без полицейской формы? Вы что, ребята?
Соответственно...
А вот, значит, смотрите.
Но, как и странно, они почему-то соблюдают какой-то кодекс, согласно которому они ходят по очереди.
Все более того, только на соседнюю клеточку.
Но, на самом деле, это в разные постановки задачи бывает.
Бывает постановка задачи, когда оба ходят только на соседние клеточки.
Бывает, когда у полицейского еще возможность пойти по диагонали.
Вот.
Значит, грабитель выигрывает, если ему удастся соскочить с острова.
Соскочить значит просто с клеточки шагнуть в аут.
Вот.
Ну, понятно, полицейский выигрывает, если он окажется с грабителем в одной клеточке, в той или иной.
А они обязаны двигаться каждый раз?
Или они могут где-то походу, где-то походу остановиться?
Обязаны... Ну, в каких-то вариантах обязаны двигаться, допустим.
Ну, полицейский может забираться в какой-то клеточке, а он продолжается...
Он может просто в трени с бренчем.
Ну, он...
Давайте более простая форма.
Да, давайте так. Вертолет еще не изобрели, поэтому да.
Конечно.
Ну, Манхеттен, да.
Ну, Манхеттен изобрели до появления...
Все-таки до появления вертолета, да.
Но потом это неважно, потому что потом изобрели ГТА и выяснилось, что у грабителя тоже есть вертолет при желании.
Может и на Манхеттене, конечно, но...
Так вот.
Ну, что тут сделать?
Ну, конкретно в данной ситуации, конечно, все достаточно просто.
Да, тут полицейский достаточно быстро приходит в единственную дырку и, в общем-то, все.
Ну, там должен быть постоять.
Нужно будет время двигаться где-то.
Ну, на самом деле нет.
Он может спокойно двигаться по направлению к грабителю и не паниковать.
Если, конечно, только ему не повезет с цветом.
Потому что есть, конечно, тут одна...
Потому что есть одна маленькая подляночка.
Потому что если они ходят только в соседние клетки, то на самом деле есть такой интеллектуальный случай взаимного цукцванга.
Ну да.
Ну да.
Означает он, что любой ход ухудшает вам позицию.
То есть вам невыгодно ходить.
То есть если в игре ГО, например, есть функция пас, то в шахматах у вас паса нет.
Вот.
И оказывается следующее.
Вот здесь действительно цуксанг.
Потому что, оказывается, если грабитель куда-то ходит...
Но то, как бы сюда-сюда он пойти не может, полицейский, потому что его мгновенно поймает, правда?
Вот.
Ну и в данном случае тогда, в общем-то, мат практически понятен.
То есть тут какой-нибудь ГП, значит, грабителю остается только убегать.
Полицейский, значит, идет за ним по пятам.
Значит, ГП.
Ну и шо?
Ну знаешь, как это...
Знаешь, как это...
Знаешь, это раздоровок клиента, раздоровок клиента с таксистом.
Знаешь, это таксист.
Да мне не хами.
А то я сейчас достану монтировку.
И посмотри спокойно.
Не смогу выворачиваться от пуль.
Ну что, да.
Ну там, знаете, типичный диалог там.
Вызывайте такси, таксист приедет.
Здравствуйте.
Мне нужно срочно захватить мир.
Таксист.
Это на Ленинском.
Вот это на русском.
Садись.
А ты кто по знаку зодиака?
Неразговорчивый водолей.
Ну вот, ну и так далее.
Так, ну ладно, тем временем.
Тем временем, пока мы критично таксисты, у нас это по-полицейски съел грабителя.
Никто не знал, что актер теперь реально хотел съесть.
Понятно.
Понятно.
Кешмар, за что тогда?
Мало кто знает, но Анатолий Попалов очень хотел скушать Клару Румянова.
Да-да-да, замечательно.
Ладно.
Но я просто привожу пример к такой задаче.
Потому что я тут, конечно, дал такую расстановку.
Но бывает тупая ситуация.
Когда, если бы в этой ситуации первым ходил полицейский, то грабитель, конечно, от него всегда убегал.
Но в том плане, если полицейский придет сюда, то грабитель идет сюда.
Полицейский идет сюда, грабитель сюда.
Полицейский идет сюда, грабитель сюда, ну и так далее.
Полицейский тут просто далеко не отходит и получается интеллектуальная ситуация, что полицейский грабителя поймать не может.
но грабителю главное просто сюда куда не пойти по душе своей вот но и с другой
стороны сильно в аутом все равно не убежит потому что полицейский вы
прикрывает проход получается да мы будем считать но получается ну как вы
сказали грабитель побеждает если он в аут уйдет в аут полицейский побеждает
если они с грабителем оказались в одной клетке не происходит ни того ни
другого но значит никто не выиграл это вообще ничья то есть это вот типичный
пример то есть такой такой ничейной ситуации бывает и более интеллектуальная
конечно ситуация действительно но то есть просто более типичная ситуация
когда тут вот действительно грабитель туточки то есть они тут сидят за очень
очень очень очень очень очень длинным столом вот ну да можно двигаться по циклу
там ну там как знаете там как бы интеллектуально так то есть отрите
тут интерес получается такой смотрите полицейский гарантирует себе не проигрыш
то есть он гарантирует себе проигрыш потому что у него есть он может так туда
сюда ходить то есть это просто может ли он поиграть на выигрыш но если очень
длинный стол то скорее всего как только он там то есть вот то как бы есть риск
что просто чем дальше он придет тем больше грабитель может ему там
симметрично начать отвечать как но там нет там дальше будет нет более
интересно тут вы даете задачу думать а если у полицейского этом есть опции
ходить по диагонали на самом деле там для кстати маленьких вот этих вот
промежутков там ответ не такой тривиальный как может показаться нет ну
нет ну как нет ну конкретно в таком случае да потому что в общем-то да то
есть если там полицейский дошел куда-нибудь до середины или там даже до
двух третьей то грабитель просто повернулся и пошел в другую сторону и
тогда если полицейский там будет дурачок и побежит за ним ну тогда как
каким-то будет называться поздравляю если полицейский одумается побежит к
выходу ну грабитель походит походит подумает и пойдет вот да ну бывает такие
то есть самые разные игры бывают но конечно тут вот чего нету там уже дальше
надо тогда формулировать ладно значит вместо того чтобы это ну то есть самые
разные на самом деле игры есть вот значит смотреть
где давать но давайте вот графа мы перейдем потому что пока я так
сформулировал просто это что-то красивое вот но обычно сводится это кеша к единому
стандартному виду то есть на самом деле все эти игры можно описать единым образом
то есть дан ориентированный граф
то есть дан какой-нибудь ориентированный граф какой-нибудь вот такой вот вот и в
какой-то вершине находится фишка играют два игрока каждый игрок двигает фишку
по ребро так чаще чем из вершины проигрывает тот кто не может делать ход
заметим что конкретный граф конечно порождает на самом деле даже не одну
игру целых модуль вы Модульвый игрок потому что как бы и фишка с пышно как бы
поставить фишку в каждую вершину тоже новая игра более того даже оказывается
что когда игрок двигает фишку он как бы переходит из игры в игру можно еще так
говорить ну то есть получается игра а то что следится с конкретной позицией в
игре. То есть вот на самом деле такие игры мы можем изучать. Так, но тогда приходит время,
конечно, формализовать еще пару понятий. Давайте формализуем. А именно, что такое выигрышная игра?
Да, мысль позитивна. То есть игра выигрышная,
если у первого игрока, то есть того, кто ходит сейчас, есть выигрышная стратегия. То есть у него
есть какой-то план, придерживаясь которого он выиграет, независимо от того, как будет действовать
второй игрок. А что такое выигрышная игра? Это скорее свойство, а не определение.
Мы будем называть игру проигрышной. Вот смотрите, мы так сделаем. Если у второго игрока есть выигрышная
стратегия. У второго игрока есть выигрышная стратегия. Вот красота, красота.
У игрока есть такая стратегия. Так, но еще у нас появились нечейные игры. А теперь вот вопрос
на засыпку. Но это не позитивно. Просто непонятно, а как это? Что такое? Вот как доказать, что нет стратегии?
Может продолжаться, да, но может продолжаться, а может и не продолжаться. Нет, это да, но это мы
же тут с помощью стратегии каких-то говорим, потому что исходы игр, даже выигрышная игра может
закончиться проигрышем первого игрока, если он будет играть по левому. А вот это уже да,
позитивно, в смысле весело, то есть, да, вот это позитивно, да. То есть, как бы да, если выигрышная игра
выигрышна, если первое может выиграть, проигрышная, если второе может выиграть. Выиграть в смысле
независимо действhey первого игрока, а другого игрока, а игра нечейная, если оба независим magazина
друг от друга могут не проиграть, про выигрыш не говорим, но как-будто не проигрыш, если у обоих
игроков есть непроигрышная стратегия, в данном случае гарантируется, хотя на самом деле
заметим следующее, что это не так принципиально, потому что предположим, что вершины одни и те же,
а наборы ребер у каждого из игроков разнятся, тогда давайте просто граф раздвоим,
ну да нет, скопируем вершины, но не ребра, и пусть ребра будут вести из одной копии графа в другую,
то есть мы будем добиваться того, что первый игрок будет ходить так скажем из верхней половины
в нижнюю, а второй из нижней в верхнюю, почему это абсолютно эквивалентно, нет это эквалентно,
тоже ситуация, когда как бы ходы не зависят от того, кто ходит в вершине, просто тут граф просто
строится таким образом, что просто в конкретную вершину на самом деле просто там один из игроков
попасть не может в принципе, ну типичная ситуация с двудольным графом, ну вот то есть в принципе,
то есть да, это на самом деле, то есть с такой точки зрения не так страшно, хотя конечно есть
бывают более продвинутые игры, действительно в которых это становится прям даже уйти принципиально,
но да, нет это да, это да, боюсь такого уровня мы не дойдем, но мы пока просто начнем вот с
простого, вот собственно есть граф, вот хочется для каждой вершины понять она выигрышная,
проигрышная, нечейная или еще есть какие-то варианты, почему пара вершин,
нет смотрите, у нас одна фишка, у нас играют два игрока, полицейский грабитель сводится к этой
задаче просто тем, что мы строим граф на всех возможных конфигурациях в игре, да, то есть там
получается конечно да, н квадрат, м квадрат еще и на два, потому что надо помечать кто конкретно
ходит, но суть одна, то есть на самом деле все игры, ну на самом деле практически там многие
детерминированные по крайней мере игры сводятся вот к этому вот, даже всякие там шахматы, шашки го,
но теперь есть какая-то вопрос, а бывают ли вообще игры, надо конечно говорить соформально,
что мы рассматриваем в первых детерминированные игры, то есть видите ходы тут от случая никак не
зависят, во-вторых они равноправные, потому что из вершины можно, то есть то куда можно пойти
из вершины не зависит от того, какой игрок ходит, вот сейчас, ну да, равноправные или симметричные,
да, ну вот, а так есть там какие-то еще умные слова на эту тему, ладно, слета не помню, неважно,
вот это важно говорить, что бывают игры, в которых у вас там допускается ходить по каким-то
вероятностям или там что-то еще делать, ну там бывают игры в которых надо очки, конечно,
набирать еще, а не просто вот, да, но там еще отдельная песня, конечно, еще бывают игры,
в которых выигрывает тот, кто не может сделать ход, но как вы сами понимаете это в общем-то не сильно
портирует, то есть на самом деле не сильно принципиально, добавление этого там лишнего отростка,
так вот возникает вопрос, так бывают ли вообще игры, кроме этих трех, то есть бывают какие-то
игры которые не являются выигрышными проигрышными линичейными да все победили и это не нища не почему
одновременно потому что надо выиграть не выигрышные не проигрышать и не ничьи это это как я как во как
одновременно быть выигрышной нечейно если первые гробы я точно могу выиграть а вторую
это круто а я заведомо могу не проиграть нету наш сказали проигрывает только и может сделать
ход вы зафиксировали но вот но вот осталось только выяснить почему если кто-то выиграл
значит что второй проиграл данный случай да но почему нету на самом деле ну слета
слета на самом деле не факт из определения напрямую пока я следствие не вижу если игра
так давайте не путать понятия кто-то мог кто-то выиграл и есть выигрышной стратегии
что может он выиграть потому что противник да потому что там прошло противник лох там
я не знаю а на самом деле был бы он не лохом он бы мог и выиграть ну условно оптимально да как то
но что значит вот тут непонятно все кстати что такое
стратегии одного игрока у другого есть стратегии
я тебе говорю описание выигрыши стратегии если есть если у игрока мы тоже первые если
у игрока один есть стратегия для каждой стратегии игрока два когда у него выигрывает
я считаю что тебя нет
как мы пересчитываем конкретное состояние через предыдущие
ну что такое предыдущие состояния если игра в циклический
ну не факт
если вершина находится в цикле, это не значит, что она обязательно ничейная
как минимум
ну как максимум у нас пока фундаментальный вопрос, а бывают ли вообще другие вершины?
почему?
вот почему
извините, для меня это не является автоматическим переходом
ну да, но лично у меня это все, то есть если я знаю стратегию противника, я могу его завалить, а если я не знаю стратегию противника, может он пользуется тем, что я что-то не знаю
это игра как с открытым
и что?
и тем не менее
а тем не менее, надо будет у меня поймать там плейфишу в шахматы, потому что постоянно там выигрыши проходят за счет того, что противник что-то не знал, а я знаю
потому что шахматы игрок не может действовать оптимально
почему это не может?
заключается в способности человека
так ты не обязательно с человеком играешь
нет, но компьютер тоже не может иметь
но компьютер тоже, как выясняется, может на компьютере найдется какая-нибудь любая нейросетка
он же не умеет всех обучить
я могу заприкатить
ну не можешь
почему?
ты посчитай, сколько тебе состояний
слушай, слушай, он не логачит
потому что ты знаешь, что он будет еще как-нибудь про это, посчитай, сколько состояний
мне нравится, потому что есть только позиции
чего?
у нас нет неправильной стратегии, значит буквально по определению у второго игрока существует стратегия
у другого игрока существует стратегия, что при любых наших ходах
мы не сможем не проиграть
почему это?
неправильной стратегии связано wi-fi
что при любой стратегии две-, мы умеем не проиграть
мы берем к этому冷 центрам, получаем что существуют стратегия второго игрока чтобы не сможем проиграть
то есть существует свою IM wurden
то есть существует свою imagery
ну нет, тут есть тонкий обман
У меня есть стратегия, придерживаясь которой, я вообще не знаю, как будет второй игрок играть, не проигрываю.
Независимо ни от чего.
Контрапозиция звучит так, какая бы ни была у меня стратегия заранее фиксированная, второй игрок сможет ее обвалить.
Но казус заключает в том, что второй игрок для этого должен знать эту стратегию.
Нам надо доказать, что хотя бы у одного игрока есть непроигрышная стратегия.
Что такое стратегия? Это оборужение состояния?
Нет, ну подожди.
Согласны вы с тем, что хотя бы у одного игрока есть непроигрышная стратегия?
Нет.
Ну смотри, предположим противное.
Тогда у игрока нет непроигрышной позиции.
У первого.
Тогда у него если не проигрышная, то она проигрышная.
Значит у второго игрока есть выигрышная стратегия.
Чего-чего-чего-чего-чего-чего-ка?
Нет, если она не является проигрышной, это не значит...
То есть если у второго игрока...
Вот не очень понятно, почему из-за того, что у второго игрока нет проигрышной стратегии, следует, что у первого игрока есть непроигрышная стратегия.
Чего вот он?
Ну вот мы только что вот обсуждали, если что-то нет на самом деле.
Поэтому, видите, тут вот какие-то...
Но это значит, у меня есть стратегия такая, что если я буду и придерживаться, то как бы не играл второй игрок вообще, то я заведомо не проиграю.
Нет, ну я не знаю.
Нет, ну как бы нет, мы решим эту проблему, просто мы не будем пытаться доказывать, исходя из формулировочных, экзовистических соображений каких-то там.
И как-то верим, ну очевидно же, что если у меня нет стратегии, значит у него есть.
А вот извините, не очевидно.
Или попытаться как-то это довести, конечно, можно, если очень формально тогда говорить, а что такое вообще стратегия.
В принципе, но там еще и поверить, что там не окажется выгодно, что, скажем, на пятом ходу из этой вершины выгодно ходить сюда, а на восьмом туда.
И тогда у нас какой-то шоу начинается, ну вот и исходя из того, что я могу обвалить каждую твою стратегию, это не значит, что это игра выигрышная.
То есть может это означает, что ты плохо играешь в шахматы.
Ну вот на самом деле.
Поэтому давайте так, но вместо этого, поэтому как бы будем мыслить позитивно.
То есть вместо нот попытаемся действительно выжить максимум из того, что есть, хотя у нас и более того у нас есть какие-то позитивные принципы.
Принцип номер один.
Смотрите, предположим, что возникла ситуация.
Так давайте, как много маркеров у меня.
Возникла ситуация, когда у меня есть какая-то вершина, из которой есть ходы в какие-то другие вершины.
И хотя бы одна из этих вершин оказалась разведанна проигрышной.
Ну то есть мы уже знаем, что она проигрышная.
Ну вот, ну а что в остальных нас в общем-то сейчас даже не интересует.
Кстати, какие-то ребра могут даже в эту вершину самовести.
Тогда из этого следует, что это вершина какая?
Выигрышная.
Потому что если в этой вершине у второго игрока есть выигрышная стратегия, то в этой игре у первого игрока есть выигрышная стратегия, вида «пойди сюда, а дальше выиграй как второй игрок».
Логично, да?
Если мы дополнительно наложим ацикличность.
Я проявлю. Зачем нам ацикличность?
Этот принцип верен и в циклических графах тоже.
Вот. То есть это отдельно.
Ну давайте, я просто вложу понятие.
Это называется принцип выигрышности.
Ну как называется? Будем его так называть.
Вот. Раунд второй.
Раунд второй звучит так.
А теперь предположим немножко другую ситуацию.
Предположим, что выяснилось, что у вершины есть несколько ходов и все эти ходы ведут в выигрышные игры.
Да. Это «п».
Да, это «п», причем полный.
Вот. Как часто в таких случаях говорят.
Ну хотя нет, никого «п» нет, просто выигрывает тот.
То есть это проигрыш на «к».
Вот.
Ну для нас нам не важно.
Просто другой человечек выиграет. Ничего страшного.
Ну мы, конечно, относимся с первым игроком, поэтому нас, конечно, это чуть-чуть расстраивает.
Вот.
Более того, кстати, да, это называется принцип выигрышности.
Кстати, отметим, что этот принцип применим, когда этих переходов ноль.
Кстати.
Потому что если ходов нет, то про них можно сказать все, как угодно.
То есть если ходов нет, то можно сказать, что на каждом ходу вам купят кокодила.
Ну конечно, да, ходов нет.
Поэтому купят кокодила, там действительно придет дед Мороз.
Там действительно.
Это называть вас в этот экзамен.
Ну и так далее, да.
Вот.
Ну ладно, уже о чем вы мечтаете.
Ну вот.
То есть вот такие есть два принципа.
Их можно применять.
Так вот, в принципе есть такой жалобный принцип.
Так вот, в принципе есть такой жадный метод.
Жадный метод называется, а давайте применять эти принципы пока можем.
Просто жадно.
Ну первое, давайте вот на этом графе посмотрим.
То есть, ну во-первых, начнем с того, что у нас тут вот, конечно, все стоки,
ну вершины, из которых нет ребер, автоматически проигрышные.
Ну а автоматически выигрышными становится все, что в них, все из чего в них можно попасть.
Так.
Так.
Что-то там у нас еще появилось.
Так, появился у вас еще что-нибудь?
Да, здесь вот одна вершинка.
Да, вершинка проигрышная.
Да, вот это вот дальше.
Оба ребра будут выигрышать.
Она проигрышная.
Так, что у нас там дальше?
Раз, две, вешки поигрышные.
Так, две, вешки поигрышные.
Вон три.
Как говорится?
Три, три.
Пиши три.
То в ней надо очень точно ходить.
Сейчас.
То есть видите, в ней, хотя нет, не в ней.
Ладно, не так.
Нет, ну не совсем.
Вот смотрите, здесь надо не ошибиться.
Ладно, здесь, ну здесь тупняк, тупняк.
Значит, тупняк, тупняк, тупняк.
И вот здесь надо не ошибиться, потому что можно вот сюда пойти.
Если хотите, случайно шанс 25%.
Да, точно.
А если противник ходит невероятно, то конечно да.
Хорошо.
Так, ну это по-моему еще не все.
Так, что там у нас еще есть?
Нет, кстати, не все.
Вот еще проигрышная вершина, кстати.
Так.
И автоматически.
Ой.
И видите, оказывается, что наличие циклов вообще не требует от вас, чтобы игры, чтобы там появлялись какие-то игры, кроме выигрыша.
Выигрышных и проигрышных.
Ну, в принципе, как же было сказано, если игра ациклическая, самый простой для анализа случаи.
Если игра ациклическая, то игра ациклический, то все игры выигрышные и проигрышные.
Правда?
И более того, простым ДФСМЗВ плюс Е вы еще легко поймете, кто какая.
Да.
Понимаете, да?
Ну, например, даже не обязательно ДФС запускайте и все.
То есть как понять, кто я?
Как понять, кто я?
Так ходим по всем вершинам, возвращаем рекурсивные результаты.
Если все выигрышные, значит я проиграл.
Если хоть кто-то проигрышный, я выигрышный.
Все.
Все психологи.
Дорогие курсы тысячи долларов.
Ну, конечно, да.
Пойти в детей, посмотреть на них, узнать результат.
Все.
Нет, самое смешное, что некоторые психологи ровно это и говорят.
Знаете?
Как-то знаете, потому что некоторые психологи или эзотерики, знаете, так и говорят.
Как мне понять, какая у меня судьба?
Как говорится, возьми своих близких, подставь перед собой.
Все.
Вот это она.
Вот там.
Нет, мы с вами занимаемся не эзотерикой, а программированием.
Программированием, да.
Гаданием по одной точке.
Гаданием по одной точке?
Этим даже статистика не занимается.
О, господи.
О, господи.
Ближайших соседей.
Ладно, идем дальше.
Ну, давайте посмотрим.
Хорошо.
С этим графом, конечно, выяснилось проще.
Давайте подумаем.
Какие хотя бы нечейные игры?
Какой цикл?
Ну ладно.
Ну ладно.
На самом деле есть какая-то суперинтеллектуальная игра.
Она называется луп.
Вот.
То есть это очень интеллект.
Да, это суперинтеллектуальная игра.
Нет, есть, конечно, более продвинутая игра.
Смотрите.
Вот подленькая такая игрушечка есть.
Так, я прошу прощения.
Значит, далее, далее, далее, далее.
Итак, вот есть такая вот еще интеллектуальная игра.
Она называется сейв.
Да.
У нее есть маленькая подлянка.
Она выигрышная.
Вот.
Ну, скажем так.
Ну, как бы, да, есть выигрышная стратегия.
Ну, в общем-то, да.
Ну, то есть это просто такие примеры.
Это какие-то, по крайней мере, на текущем уровне развития это достаточно тупые примеры какие-то.
Чемпионат мира, конечно, по этим играм не приведешь.
А мы не разве уже доказали, что если мы не смогли таким образом жадно найти, в какое состояние мы бы решили, то она точно нечаянная?
Пока еще не доказали.
Пока еще не доказали.
Ну, сейчас докажем.
Вот действительно.
А теперь давайте себе представим.
А теперь давайте себе представим, что для какой-нибудь абстрактного графа мы действительно забабахали вот эту жадность, применяли принципы жадно-жадно-жадно-жадно.
И вот выяснилось, что наступил момент, когда мы ни для какой вершины ни один из принципов применить не можем.
А вершины-таки остались.
Ну вот.
Сейчас внимательно, потому что давайте смотреть, как доказывать.
Потому что теперь мы сейчас просто конструктивно докажем, что...
И так у нас получается есть какие-то выигрышные вершины.
Там есть какие-то вершины проигрышные.
И внезапно есть какие-то вершины, к которым принцип почему-то не применяется, несмотря на все наши усилия.
Мы назовем их вершинами множества х.
Пока.
Теперь мистическая теория.
Все эти вершины ничейные, ровно в этом конструктивном смысле.
Вот теперь вопрос. Как же доказать, что игра ничейная?
Игра ничейная.
Заметим следующие.
Заметим пару свойств.
Заметим, что из х в проигрышные вершины ребер нет.
А выигрышные могут и быть.
Равно, как и ребра в другие вершины множества х, или даже в самого себя любимого.
То есть вот какая-нибудь вот такая.
Нет, такого не бывает.
А вот такое вполне возможно. Бывает даже вот такое.
Но важный момент.
Так как мы к х принцип применить не можем, то верно-неожиданное свойство.
То есть с каждой вершины можно сходить в вершину из х.
Но потому что если все ребра вели выигрышные вершины, то это был бы принцип проигрышности.
То есть как бы нет ни одного ребра в проигрышные вершины, и не все ребра ведут в выигрышные.
Но давайте просто исходя из этого свойства выведем какие-нибудь стратегии.
Вот например давайте докажем.
Здесь оказывается удобно для второго игрока доказать, что здесь есть непроигрышная стратегия.
Он точно не выиграет.
Он точно не выиграет.
Если он выиграл, значит у него есть путь в п.
А путь в п?
Нет, подожди, подожди, подожди.
Нет, это неправда.
Потому что у нас есть множество х, про которые мы ничего не знаем.
Так вот, так, ребят, у вас какая-то психологическая ошибка.
Вы по вашим формулям высказали, что вы доказываете, что игра проигрышная, исходя из того, что она проигрышная.
Можно.
Пусть второй.
Да, и так вот.
Пусть второго нет.
Чего второго?
Первый куда-то сходил.
Он сходил в выигрыш, что ли?
Второй игрок выиграл.
Либо он сходил в х.
И сам точно может сходить в х обратно.
Победа.
У нас есть непроигрышная стратегия.
Но не совсем так.
Ну потому что, смотрите, диспозиция такая, что пусть мы изначально стартуем с позиции х.
Если первый игрок пошел в выигрышную позицию, то тогда все, мы просто не проигрываем, тупо побеждая.
Если противник пошел в х, то выясняется, что у нас тоже есть ход в х.
Что мы и делаем.
То есть наша стратегия просто говорит, что если мы попали в разведанную выигрышную вершину, то мы разведанно выиграем.
А если мы попали в х, то мы тупо ходим в х.
Это стратегия непроигрышная.
Почему?
Потому что пока мы ходим по х, у нас всегда есть ход, мы не проигрываем.
А если у первого игрока сдают нервы, он переводит нас в разведанную выигрышную вершину, то мы выигрываем.
Все. Значит, ура.
Второй игрок не проиграл.
Остается только доказать, что первый игрок в х тоже не проигрывает.
Да, но идея простая.
Да, он делает ход в х и дальше не проигрывает как второй.
Да, поэтому это кратчайший путь получается такой.
Доказательство можно формулировать много, но кажется, вот это получилось самое короткое.
Так что получается вывод, что все х на самом деле не чейны.
И таким образом мы убеждаемся, что действительно никаких игр, кроме вот этих, вот на самом деле конструктивно нет.
Поэтому на самом деле шахматы это не интересная игра.
Потому что на самом деле мы сами доказали, что в шахматах есть оптимальная стратегия.
Мы только теперь, начиная с этого момента, можем вообще вводить такое понятие, как играют оптимально.
Потому что до этого момента, что такое оптимальная, это вообще непонятно.
Чего?
Ну оптимальная, ну говорить так, что если игра выигрышная, то мы как бы действуем согласно выигрышной стратегии.
Ну а если не чейны, то согласно не чейны.
Ну хотя бы как минимум.
То есть как бы из выигрышной позиции мы ходим.
Во-первых, только в проигрышную, но и этого недостаточно.
Потому что мало кто знает, что если у вас стратегия просто из выигрышной позиции, из зеленой позиции ходить в кратчай.
То вы можете не выиграть.
Да, потому что есть такая интеллектуальная ситуация.
Смотрите.
Вот, смотрите.
Вот, но если тут побегать по ретроанализу.
Ладно, ретроанализ мы еще не знаем, сейчас узнаем.
То, ну короче, если по применять принципы, то окажется выигрышность-проигрышность вот такая.
То теперь подлянка.
Если предположим, что у вас стратегия просто А, АБК, ходим в любую проигрышную вершину.
Тогда окажется, что начинать с этой позиции можно тупо не выиграть.
Потому что если вы ходите все время сюда, то значит потом через три хода возвращаетесь, ходите опять сюда и так вечно ходите по кругу.
То есть есть подлянка.
То есть на самом деле, чтобы выиграть, надо ходить не просто в проигрышные позиции.
Вот.
А мы уже все их разведали.
Они все разведаны.
Вот.
А что такое предыдущий этап?
Ну, несмотря на то, как мы брали АБК.
Ну, хотя, да, если мы, конечно, для каждой вершины еще какой-нибудь таймстэнт повесим там типа.
То есть в какой момент мы ее пометили, то, конечно, да, можно помещать.
Можно помещать.
Можно ходить в вершину с меньшим таймстепом.
Правда тогда в эти какие-то вопросы, почему у проигрыша.
Там.
А, ну, да, тогда у проигрывающей будет уменьшать таймстеп вынуждено, потому что проигрышная такая появляется позже всех выигрышных, в которые мы можем пойти.
Да, потому что можно, в принципе, так.
Да, в принципе, да, уже на этом уровне действительно можно.
Но просто это был момент, что есть аккуратность, потому что.
Да, в принципе, уже на этом уровне действительно можно, но это был момент, что есть аккуратность,
потому что, знаете, может кто-то из вас сталкивался с такой игрой, знаете, потому что обычно это
тесто связано вот с чем еще. Обычно для каждой выигрышной проигрышной игры еще хочется вычислить,
а сколько ходов она будет длиться. Ну в каком смысле? Тут длиться она может быть сколько угодно,
потому что вот тут первый игрок может затягивать, оттягивать удовольствие сколько он хочет. Но
классическая ситуация говорит так, что обычно выигрывающий игрок хочет выиграть как можно быстрее,
а проигрывающий наоборот хочет оттянуть неизбежное. Вот, хочется тогда вычислить сколько будем играть.
Но тогда оказывается, что, смотрите, давайте посмотрим, как эти принципы после тогда в
этом случае применяются. Сейчас мы будем применять просто более аккуратно, хотя делать мы по большому счету
будем такое. Мы будем говорить так, что, наверное, сначала мы принцип выигрышности применить не можем
в принципе, потому что у нас нет ни одной проигрышной вершины, правда? Поэтому у нас такая тупая идея.
Давайте, если у нас получилось применить какой-то принцип, мы будем его применять, применять,
применять до тех пор, пока можем. Ну такая типичная диспозиция. Если что-то получается,
давайте просто выжимать, это просто так тупо и делать. Вот тупо, тупо так и делаем. Вот когда
перестанет работать, тогда начнем репучисать. Вот будем применять принцип проигрышности.
Вот и что получится. Возьмем просто фактически все стоки. Назовем это множество P0. Почему P0?
Потому что старту из этих вершин и краб будет длиться ноль ходов. Логично, да? Логично, да.
Значит, P0. Далее. Хорошо. Принцип проигрышности применить больше нельзя. Теперь давайте применять
принцип выигрышности. И у нас появляются свежеразведанные выигрышные вершины. Что мы
про них знаем? Про каждую из них мы знаем, что из них есть хотя бы одно ребро вот в этот вот слой
P0. И могут быть еще какие-то ребра. Могут быть между собой ребра, могут быть там ребра куда-нибудь
назад, ну и так далее. Но эти вершины мы назовем V1. Почему мы их назовем V1? Потому что опсимальные
говни будут длиться ровно один ход. То есть первый год может выиграть прямо за один ход.
Хорошо. Применяли принцип выигрышности, да применялись. Применяем принцип проигрышности.
Действительно оказалось, что появились новые проигрышные вершины. Что это за новые проигрышные
вершины? Это такие вершины, из которых ребра торчат, хотя бы одно из каждой вершины торчит,
но все они ведут выигрышные вершины. То есть заметим, что здесь все жестко. В том плане,
что ребер между собой нет, ребер куда-то в аут нет, ребер в P0 нету. Вот как-то так. Это называется P2.
Так, да применялись. Теперь появляется неожиданно V3. То есть новые выигрышные вершины,
у которых нет ребер в P0, но есть в P2. Вот видите. Давайте я придумал еще. Давайте я зеленым красным
буду рисовать основные ребра, а коричневыми я буду рисовать те, которые еще теоретически могут
быть. То есть тут вот, например, в P1 могут быть ребра между собой, могут быть куда-то назад,
вот сюда могут быть, там куда-нибудь вот сюда могут быть или куда-нибудь совсем далеко. Значит,
из этих обязательно есть такие ребра, но значит есть еще ребра. Вот в V1 ребра вполне могут быть,
равно как и куда-нибудь назад и между собой, конечно, сколько угодно. Вот. Этот слой мы называем V3.
Это называется V3. Что дальше? Ну дальше опять проигрыш и дальше получается P4. Почему именно
4? Да, вот из этих решений я забыл сказать, мы гарантируем, что можно выиграть за 3 хода,
потому что он будет просто как бы нельзя проиграть потом за 0 ходов, но зато можно
проиграть за 2, видно, да? То есть ну там по индукции по сути получается. Вот. Дальше у нас
получается слой P4, который говорит так, что у нас все ребра ведут куда-то в V1 и V3, но хотя бы,
но при этом хотя бы одно ребро в V3 обязательно есть. Вот как-то так. Вот. Вот. То есть могут быть,
ну вот. То есть могут быть, конечно, вот такие вот ребра. Нет, таких не бывает. Нет. Вот. Так. Вот
такие бывают. Вот. Ну, в общем-то и так далее. Смотрите. То есть таких слоев можно таких
несколько построить. Слоем строим, строим. И бабах! У нас что-то исчезло. Что у нас исчезло?
Ну, то есть выяснилось, что принцип в какой-то момент закончился. Ну, тогда это означает,
что у нас тут осталось множество х, которое, как мы уже выяснили, является нечейными вершинами.
В принципе, заметим, что как уже легко теперь по индукции доказать, что тогда номер слоя указывает,
сколько и сколько времени будет длиться оптимальная игра, правда? Вот. Так что вот такая красота.
Вот. Но эта же идея дает нам возможность реализовать это еще и за более быструю симптомику.
За какую? Ну, получается, за В плюс Е. А кто, кстати, знает, каким образом это делать за В плюс Е? Нет,
поднимите руки, кто знает. Я понимаю, что кто-то существует. Так, повыше руки, а то как-то да.
Ну, вот. Ну, значит, смотрите. Хорошо. Так. Ну, вот. Да, давайте вспоминать. То есть, на самом деле,
идея такая. То есть, идея такая практически БФСТ. Базируется она на том, на следующем,
что мы будем все вершины, про которые мы только что узнали, что они выигрышные и проигрышные,
закидывать в очередь. А потом каждую вершину мы будем доставать из очереди и обрабатывать. Что
значит обрабатывать? Ну, говорим, вот если мы достали из очереди, ну, сначала мы начнем с того,
что запихнем в очередь все стоки, объявив их проигрышными вершинами. А дальше, когда мы
достаём проигрышную вершину, мы просто перебираем все ребра, внимание, ведущие в неё, то есть все
входящие ребра. Ну, да, все входящие ребра, короче. Вот. И, соответственно, все вершины,
которые там есть, помечаем, что они выигрышные, если они еще не добавлены, в очередь добавляем.
Логично, да? Здесь все просто. Но если мы достали из очереди, тогда заметим, что когда мы так
обработаем слой П0, у нас в очереди останется ровно В1, правда? Но теперь фишка. Когда мы
обрабатывать, достаем выигрышную вершину, мы тоже перебираем все входящие ребра, но мы их
мысленно удаляем. Ну, в знак того, что если это ребро есть, то по нему все равно игрок ходить
не будет, потому что он проигрывать не хочет. Ну, то есть и по этому ребро плохое. Но если при этом
мы удалили, то есть просто честно, то есть прибираемся по вершине, удаляем ребро. Если выяснилось,
что мы у вершины удалили только что последнее ребро, то есть больше у нее ребра нет, значит мы
ее объявляем проигрышной и такжественно добавляем в очередь. То есть обратите внимание, какая-то
вершина из В4 может быть уже наполовину ограблена, потому что, исследуя вот эту вершину,
мы убили вот это ребро, но это еще не убили, поэтому она еще непонятна. Может вообще так,
случится, что мы прежде чем вершину объявить выигрышной, у нее пару ребров убьем. Вот как раз вот в этой
вот ситуации, если скажем вот такое ребро есть, а такое вполне может быть. Вот, так что получается,
что если мы просто умеем за вот единицы удалять ребра, ну и перебирать входящие, то в общем-то
мы легко это завэплески реализуем, правда. Но правда, да, остается только заметить, что как удалять?
Да, хотя по большому счету, на самом деле, можно не удалять, а можно просто помещать,
сколько у нас плохих ребер из-за вершины токсид. И как только это количество совпало,
в принципе с количеством ребер из-за вершины, значит все, мы ее объявляем проигрышной. То есть
поэтому не нужно писать этих ваших там каких-то там двусвязанных списков, там каких-то там
связывать ребра друг с другом, не, никому это не надо. То есть получается достаточно простая
модификация БФСа. Да, ну извините, конечно, мы пока еще так и не знаем, что такое БФС,
хотя, да, хотя знаете, нет, тут просто как сказать, просто нет, ну как сказать, ладно,
на БФС, как бы я, на самом деле, просто отдельная песня, но я просто сейчас что-то уже, видимо,
в этом семестре не хочу рассказывать, потому что я, честно говоря, в следующий раз вместе с
добиванием теории игр, хотя, честно скажу, там самое интересное только там, самое интересное
только впереди будет на самом деле, по теории игр, но потому что это, ну как сказать, у нас,
мы будем сами решать три задачи. Уровень Easy, уровень Medium, уровень Hard, уровень Easy только что
решили. Дан один граф, миллион вершин, два миллиона ребер, мы его решили. Да, заодно и выяснив,
что шахма-то неинтересная игра, потому что на самом деле у какого-то игрока есть тупо стратегия,
или у обоих игроков есть нечейная. Да-да-да-да-да-да. Ну, то есть так, мы показали следующее,
что любая игра подобного вида, она как бы разрешима в принципе, если у нас есть бесконечная
числа ресурсов. Ну вот, от количества позиций, ну да, ну да, даже нет. Другой вопрос, что в шахма-то
количество позиций очень большое, поэтому, к сожалению, там перебрать их не удалось. Хотя,
конечно, Каспаров предсказывает, то есть Каспаров это называется судный день шахмат,
что наступит время, когда шахматы просто будут решены. Вот, то есть это конечно да, а то сейчас
по этой игре есть профессиональные люди, которые только этим занимаются и этим на всю жизнь себе
зарабатывают. В общем, даже речь идет не только о тренерах, а в первую очередь о том, то топ-10,
топ-20 игроках, собственно, которых там все смотрят и, собственно, да, это собственно очень
успешные богатые люди. Но там, правда, отрижается, начинается достаточно быстро наступает момент,
когда там все, мягко говоря, не так хорошо. Но, с другой стороны, там люди с рейтингом 2600 продолжают
колесить по миру, участвовать в турнирах, правда, при этом. Вот, нанесу. Да, вот, но суть другом. Да,
хочется, но бывает позиций слишком много, хочется как-то это анализировать. Но есть, конечно, такое
понятие, как сумма игр. Что такое сумма игр? Это когда у вас есть одновременно два графа в каждом по фишке
и на каждом ходу вы выбираете, где двигать фишку и двигаете. Проигрывает тот, кто не может сделать
ход нигде. Вот, как бы, уровень medium это научиться складывать две ациклические игры. Но у нас будет
еще уровень hard. Научиться складывать циклические игры. Вот. Так что, соответственно, и это все,
видимо, нас ждет, ну, видимо, по предварительной договоренности в субботу. Так, ну, я надеюсь,
камеру там никто не свистит. Я надеюсь. Вот. Ну или, в случае чего, придется пользоваться лекциями
предыдущих поколений, да. Вот. Так что вот, значит, это мы сделаем. Ну и, соответственно, там еще останется
только еще добить. Я думаю, видимо, надо будет просто ДП по профилю обсудить еще в конце. Ну,
скажи так, потому что вещь такая. То есть, как бы, ДП там по профилю, по изломному профилю не все
знают, поэтому, как бы. Ну, уже, видимо, нет. Не, ну, скажи так, можно и таки на это? Ну, скажи так,
право, это не очень интересно уже. Скажи так, ладно, если у вас тут тот по тот или у ЦСО, оказывается,
вы уже решать умеете. 100 тысяч чего? Ну, ну, там нет, но это хотя бы что-то новое для вас. Ну,
если вы, может, вы в локешах, конечно, уже там все бы там все сплэли, там бы деревья со сплетами
мержами написали, я не знаю. Ну, да. Как говорится, да, да, да. Как говорится, да, и в результате у
групп нашлось пересечение тех, кто сдал хеш таблицу. Так что вот, ладно, ну, вот это будет,
но я не знаю, честно, я сейчас в сумму как-то начинать сейчас не хочется, чтобы была связанность,
поэтому на сегодня все. Да, все, на сегодня все. Всем спасибо.
