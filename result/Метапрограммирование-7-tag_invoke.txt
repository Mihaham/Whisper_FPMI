Ну окей, давайте, ладно, тег-инвок так тег-бук, так, нам нужен экран, и попробуем начать с конца,
так сказать, с мотивировки. Попробуем толкаться от совершенно практичной задачи. Вот в языке
Rust есть такой смешной, ну концепт не концепт, ну понятие, итератор. Тут этот рейтн называется,
но нам это не важно. И главное, что делает какой-либо тип итератором, это вот такая забавная функция next,
которая принимает по ссылке тип, вот этот вот итератор, меняет его как-то, ну передвигает
вперед, очевидно, и возвращает либо значение, лежавшее под ним сейчас, либо ничего, да, то есть
вот этот option, это тот же самый std option, и вот это ничего, понятное дело, приходит, когда мы
дошли до конца. Ну и идея в том, что мы будем писать циклы вроде while value равно next от итератора,
делать что-то. Вот представим, что нам в плюсах захотелось такую же штуку сделать, да, объявить
некоторый концепт итератора, у которого есть функция next, и с которой мы можем работать.
А как это можно моделировать? Ну, самый наивный подход это opa использовать, да,
просто попросим, чтобы у t был next, который нам вернет optional от, ну чего-то на самом деле. Вот я
сейчас не хочу фокусироваться на том, что каждый итератор еще и должен знать, что он возвращает,
поэтому скажем, что он какой-нибудь std any возвращает, вот чисто чтобы не париться,
да, с таким же успехом int можно написать или еще что-нибудь.
В чем проблема такого подхода? Если мы
используем какую-то стороннюю библиотеку или даже библиотеку std, то этот концепт нам не
подходит. Мы не можем внутри стд итератора какого-то взять и определить новую функцию next.
Печаль беда, но хотелось бы иметь такую возможность сделать какой-то концепт в
терминах удобных нам функций и потом адаптировать как бы к этому концепту сторонние классы какие-то,
которые в принципе поддерживают такой же функционал, но при этом работают несколько иначе другой
интерфейс. Ну раз методы не подходят, наверное стоит использовать функцию как это не freestanding,
в общем просто функцию. Ну и как правило, итераторы в плюсах следуют все-таки известному
соглашению. Да, у них есть оператор плюс-плюс, у них есть оператор разыминования и мы в принципе
можем сделать дефолтную имплементацию для таких итераторов. Правда в отличие от раз-то в плюсах
мы не можем понять дошел ли итератор до конца или нет. Вот это такое небольшое отличие,
небольшая проблемка, но ничего, мы на него сейчас немножко забьем. Мы скажем, что если нам пришел
произвольный класс T, то мы как бы по дефолту будем делать плюс-плюс, вернее что будем делать
return T++. Сначала разыминовывает и возвращает результат, а потом увеличивает. И вот это в принципе
будет работать и все хорошо. Но если нам дали какую-то библиотеку, у которой совсем другой
интерфейс. Предположим, что в какой-то сторонней библиотеке нужно делать it.advance и it.get. То есть
суть та же, но интерфейс другой и нужно как-то адаптировать. Мы конечно можем написать обертку,
но это не очень приятно повсюду искать эти обертки, тем более что сама библиотека их не ожидает.
Окей, это все намекает на то, что вот эту функцию next нам хочется кастомизировать в зависимости от
того, какой шаблонный аргумент пришел. То есть вот это дефолтная имплементация, а мы хотим делать
какие-то перегрузки, не перегрузки, в общем какой-то языковой инструмент применить, чтобы получить
кастомизацию. Ну и да, перегрузки я уже сказал. Самое очевидное, что приходит голову. А что если мы
перегрузим? Но вот чтобы продемонстрировать, почему это не работает, давайте здесь объявим функцию
next twice. А да, мы наверное хотим все-таки, чтобы вот так отработал. Мы же все-таки его увеличиваем. Вот,
соответственно next twice, что оно будет делать? Оно будет принимать данные класса iterator,
и будет делать next at t. Давайте даже скажем, что это не в нашей библиотеке, а вот где-то в пользовательском
коде встретилась такая функция. Ну и конечно пользователь вот так делает. У нас же в Молибе объявлен next.
Окей, здорово. После этого так получилось, что у нас перегрузка появилась. Как мы эту перегрузку
сделаем? Мы конечно же внутри namespace и мы должны ее создавать. Перегрузки только в одной области
видимости считаются для функций, как мы видели на примере второй домашки. Соответственно, окей,
делаем перегрузку, которая будет работать с чем. Ну нам тип какой-то, конечно же, да.
К сожалению, придется немножко пописать.
Скажем, что ничего не делают.
И возвращает, не знаю, ноль. Все это не важно. Вот, и здесь мы кастомизируем для adder.idr,
посылки его принимаем и делаем то, что хотели.
И ко всему прочему мы сделаем вот так вот.
К чему все это клонится?
К тому, что если мы next.twice сейчас вызовем adder.idr, вроде как все хорошо, да?
Опа, а как же так вышло? То есть, да, оно даже не попробовало найти вот эту нашу перегрузку,
которая бы сработала, а почему-то пошло вот сюда, в дефолтную. Ну и тут мы это еще
увидели, да, потому что плюс-плюса нет. Ну а что если в этой библиотеке все-таки оператор
плюс-плюс есть, но который делает вообще что-то другое. То есть, конечно, для операторов это
немножко с натяжкой такого ожидать. Например, делает std award. Но если мы теоретически смотрим,
что это произвольная кастомизация произвольного чего-то, то вот такая штука произойти могла и
привело бы это к чему? К тому, что мы запускаем, да, кажется постфиксный оператор вот так
объявляется у нас. Вот, вызвался дефолт. Ну и вызвался, конечно же, плюс-плюс вот этого
ad-reader, и все заобортировалось. Это немного неожиданно, это даже очень неожиданно. То есть,
мы как бы перегрузку сделали, она как бы есть, но почему-то компилятор даже не пытается ее
использовать или найти. А причина этому очень простая. Если мы вспомним про dependent имена и
откроем вот эту статью, то здесь написано, что не ADL lookup для dependent имен идет только по тому,
что видим из точки определения шаблона. Вот это ключевое. То есть, когда мы внутри шаблона next
twice пытаемся понять, о какой перегрузке mylibnext идет речь, мы имеем право искать только определения,
которые видны из точки определения нашего шаблона. То есть, вот отсюда. А к этому моменту у нас ровно
одна mylibnext видна, а вот эта еще не была определена. Вот так странно работают плюсы,
и поделать с этим мы ничего не можем. То есть, бессмысленно вообще даже пытаться предоставлять
с точки зрения библиотеки пользователям возможность кастомизировать какие-то вызовы
с помощью перегрузок функций. Потому что тут немножко искусственно, а мы можем представить,
что вот это вот includeUser, один из include, вот это library.include, а вот здесь другой include
пользователя. То бишь, в зависимости от того, в каком порядке вот этот include и вот этот include
идут в файле пользователя, у нас либо будет виден вот этот next, либо не будет. То есть,
все зависит от того, что раньше определили. Вот этот шаблон или вот эту перегрузку функции next.
Ну это абсолютно недовлетворительно. Но, к счастью, есть второй пунктик. Среди правил
лукапа. Да, понятно же всем, почему имя dependent, вот это вот next. У нас dependent expression,
потому что его тип, ну это есть по определению dependent. А next, оно как бы рассматривается не
в изоляции, а вместе с аргументами. Вот, соответственно, отсюда прилетают зависимости,
и next тоже считается зависимым в рамках этого шаблона. Вот, а есть второй пункт вот в этом
объяснении. Когда идет argument-dependent-lookup, у нас рассматриваются все функции, которые видны и
из места определения шаблона, и из места инстанциации шаблона. Но ADL, мы про него,
кажется, уже не раз говорили, это lookup, namespace, в котором лежит функция, в зависимости от namespace
аргумент. Соответственно, чтобы он вообще работал, нам нужно вызывать функцию без namespace,
то есть он квалифает. И если в namespace, где лежит t, определенная вот такая вот функция,
то она найдется. Ну, давайте адаптируем вот это вот все. Это будет namespace user, в котором будет
определен ad-reader. И, соответственно, next, который уже не считается перегрузкой, они лежат в разных
namespace, соответственно, не перегружают друг друга. Но ADL сможет найти теперь этот next,
потому что t, какой у нас будет вот в этом вызове, да, user ad-reader. Соответственно,
вот такой типу t вот в этом вызове. И в namespace-и ассоциированным user мы будем
пытаться найти функцию next и, ура-ура, найдем ее. И вот это сейчас заработает.
Да, действительно, кастомайз запустилась. Но теперь мы делаем...
Да, заключим вектор. Делаем вектор и пытаемся делать next-advice от... Да, tail-value у нас
ничего не выйдет. Теперь tail-value и... И что же произойдет?
А произойдет... Да, у нас требуется итератор, конечно. Нет, да, все правильно, все правильно.
Вернись к консолям. Смотрим, почему концепт не удовлетворился.
Да, да, да, да, да, да, мы забыли или не забыли, где оно, или next-adt. А, да, вот, мы потребовали,
чтобы next-adt работало в концепте. Нет, что-то не так.
Ладно, я хотел продемонстрировать не это, поэтому давайте уберем концепт.
Держим, вот.
Ничего не произошло.
Это интересно.
Окей, уберем вот это, хоть какую-то из функций next-advice он же вызвал.
Так, это сюрприз.
А, конфликты имен меня обманули. Да, у нас вызвалась функция std next внезапно,
потому что в namespace std тоже есть функция next и ничто ей не помешало вызваться.
Да, да, на всякий случай, std next, вот она есть, она делает похожую штуку, но не совсем. Вот,
нам как-то не хочется, чтобы она вызывалась, поэтому давайте вместо std-шного итератора все-таки
очередную структурку закастеляем.
Просто что-то, чтобы оно было. Так, окей, вот теперь сюрпризов быть не должно,
и у нас будет итер, и мы хотели бы, чтобы у нас дефолтная имплементация вызвалась,
но она, конечно, не вызовется, потому что дефолтная имплементация у нас лежит вот в этом вот namespace
и mylib, а мы как бы итер определили вне namespace и mylib. Очень жаль. Ну, конечно, написать mylib
2.next мы не можем, потому что это вернуло нас бы к старому варианту, и вот отсюда берется вот эта
вот техника, про которую в прошлый раз говорил, делать using на какую-то конкретную функцию. Там
было using std swap, теперь нам нужно написать вот такой using, и это привнесет вот это вот next в
список перегрузок, которые мы будем рассматривать, и это нам все еще не сломает на самом деле вот эту
перегрузку, которую нам ADL находит. Запускаем, и оно работает ровно так, как мы ожидали. Для
кастомного типа, где с помощью ADL находится специализированная версия, мы находим ее. Для
общих типов находится дефолтная версия. Вот. Собственно отсюда берется нужда везде в шаблонном
коде, где вы используете std swap, std begin, std end делать вот такую хитрую технику, но это конечно
же неудобно. И вот ровно отсюда берются неблоиды, которые, собственно, единственное, что делают,
это оборачивают вот эту вот, вот эти две строчки в удобную готовую функцию. Ну, как мы помним,
неблоиды в прошлый раз они были какими-то объектами странными. Нужно понять, почему. Если мы
просто скажем, что айда определю в глобальном namespace функцию next.
И туда вот эти вот штуки оберну и сделаю next.t. Ну, конечно, у нас будет ambiguous. Вот этот next,
который мы привнесли сюда из mylib, он точно так же выглядит, как другой next. И из-за этого
получается конфликт. Компилятор не может понять, пытаемся ли мы рекурсирно запустить самого себя,
здесь return, конечно, или мы пытаемся из mylib взять next. Так что такое не пройдет. Мы можем поменять
название вот этого next, на какое-нибудь подчеркивание, и сказать всем, айда использует только вот это. И это
тоже сработает. Но это не очень удобно, когда нужно хранить в памяти, что вызывая, нужно там одно
название функции делать. А кастомизируя, нужно использовать другое название функции, просто next.
Ну, эти названия примерно. На деле бы мы, наверное, все-таки функцию для кастомизации назвали как-то
более кривые и неприятно, а общую функцию как-то более красивую. Ну и это нас не лишает еще одной
проблемы. Если кто-то забылся и кастомизировал вот это next подчеркивание, то это нам все планы ломает.
Вот если здесь сделать вот так. Ну да, конечно, идея в том, чтобы этот next тоже поместить в
какой-нибудь namespace, потому что, ну не хорошо глобальный namespace засорять всякими своими
функциями. Хорошо бы все класть в namespace. Вот, и кто-то забыл и сделал вот так вот. У нас
вновь ничего не работает. Оба раза дефолтная должна вызваться, что у нас все еще в оборот кидает.
Беда, неприятно, очень легко отстрелить себе ногу, хочется лучше. И вот ровно из-за этого
не bloid это не просто вот такие функции обертки с юзингами, а те самые хитрые структурки с
принимающий temp% и говорили, что вот он уже делает неквалифицированный вызов next.
Что не так? Да, и вот здесь мы ловим этот самый redefinition,
которого нас спасет хитрый трюк с этим самым inline namespace. Вот этот вот inline namespace это
достаточно непонятная штука, но в сухом остатке он просто подмешивает содержимое того,
что было снаружи во внешний namespace и спасает нас от вот этого вот конфликта. И теперь,
когда мы делаем myLeaveNext, да, происходит что-то не то, а кажется нужно что-то вот такое сделать
возможно. Сейчас давайте лучше. Я посмотрю, потому что я опять забыл. Слишком много тонкостей.
Секунду.
Да, странно, странно. Да, почему-то это работает чуть иначе, но так как это лютая магия, я не думаю,
что нам стоит задумываться об этом. Нам нужно сделать вот так.
А почему?
Так, давайте на секундочку прерву демонстрацию и поточним по своему коду. Тяжело без двух мидоров,
конечно. Да, почему-то действительно вот ровно так не получится у нас.
Нам таки придется сделать вот так, то есть разделить объявление этой структурки,
и объявление этой переменной. Вот, теперь у нас next лежит в namespace myLeave из-за того,
что мы внутри InlineNamespace объявили. Секундочку.
Дефолт лежит внутри Detail, но при этом при вызове отсюда мы видим, так как лежим в том же namespace,
вот этот вот дефолт. Более того, если вдруг где-то в родительских namespace объявлена другая
функция next, например, кто-то случайно объявил в глобальном namespace next, а вот этот next его спрячет.
Ну и, может быть, сделать вот так, и убедиться, что все будет ток.
Вот, соответственно, вот этот вот using, который у нас там раньше был myLeave, он не нужен, мы и так
видим этот next, за счет того, что мы используем переменную теперь next вместо... что не так?
А, да, конечно, я опять забыл эту штуку. Да, за счет того, что мы используем переменную вместо обычной
функции. Мы выключили ADL, вот, а, видимо, зашедовать вот эту штуку так просто не получится.
Там предлагают вот так сделать, но это не помогает. Ладно, неважно. Вот, и, собственно, это profit,
и это то, как работают точки кастомизации в библиотеке ranges. Вновь на нее посмотрим.
Size. Точно такой же inline namespace, правда, именованный, но это ничего не дает. Точно такие inline constexpr
переменные, тип которых указан вот здесь, но вместо такого дефолта одного, как мы сделали,
в ranges есть несколько дефолтов для различных стандартных контейнеров, и они с помощью
constexpr разбирают все кейсы. Да, только это, я не туда смотрю, кажется. А, это проверка noexcept.leon.
Нам нужно смотреть сюда на оператор, круглые скобки, который делает то же самое. Если это
сишный массив, то просто использовать какие-то лютые шаблоны, которые по сишному массиву получают
размеры. Так, если есть метод size, то используем его. Если с помощью ADL, то есть вот этот вот
ключевой момент, что у нас здесь с помощью ADL находится функция, он здесь даже более аккуратно
обработан с помощью проверочки. Если с помощью ADL что-то находится, то мы используем это. Ну,
еще какой-то дефолтный случай, который просто с помощью begin& и минуса вычисляет размеры.
Соответственно, вот это можно считать основным дефолтом. По дефолту мы просто вычитаем
begin&, но также имеем возможность кастомизировать в своем namespace вот эту функцию size и даже еще
какие-то дефолты, сделанные хитрые. Ну, даже как метод можно сделать. В общем-то, комитет пришел к
выводу, что именно так правильно делать точки кастомизации в библиотеках и никак иначе.
Так, что дальше? А дальше нужно задуматься о следующем. Когда мы вот этот вот next используем
здесь, мы как бы предполагаем, что у нас нет глобальной функции next. На самом-то деле, если кто-то
в другой библиотеке, в другом inclusive какую-то другую next объявит, это может очень сильно нам
попортить все планы. Она может случайно подойти в какой-то момент, непонятно почему, непонятно
зачем. И это неприятно. Особенно неприятно для стандартной библиотеки, в которой чем больше таких
точек кастомизации, как мы видели, их тут уже прилично, на самом деле их еще больше, тем больше
мы вот таких глобальных имен, которые используем в ADL, прямо резервируем. Имя begin зарезервировано
в глобальном namespace, и ничего begin нельзя объявлять. И особенно это шокирует людей, которые
начинают на плюсах писать. Они решили у себя просто какую-то простую олимпиадную задачку,
решая написать функцию там begin. Но что могло пойти не так? А что-то пошло не так. Она нашлась с
помощью ADL в каком-то вызове стандартной библиотеки, произошел взрыв. И это плохо. Это плохой
дизайн языка. Мы как бы резервируем все больше и больше с каждым новым фичей ключевых слов,
которые вроде как... А почему они зарезервированы? Это же даже не ключевые слова языка, а просто
какие-то функции стандартной библиотеки, которые просто так работают, хитро, что любой шаг вправо,
шаг влево, и мы их ломаем. Вот. И соответственно за этим и нужен Tag&Walk. Tag&Walk это супер
простая идея. Мы резервируем не много имен, мы резервируем одно. И это имя будет называться
ровно так. Tag&Walk. То бишь теперь отдельная точка кастомизации будет, да, так форматировать
правильно. Которая будет называться Tag&Walk. И нам нужно вот эту штуку. Вот. Тут мы с помощью ADL
одно единственное зарезервированное имя Tag&Walk будем использовать, но так как мы через одно это
единственное имя хотим пробросить как бы любой вызов к чему угодно вообще, где угодно, нам нужно
как-то на основе аргументов выбирать из сотен разных перегрузок, потому что мы собрались как бы
вот все функции, которые там были, begin, end, size и прочее, все их пробрасывать через этот Tag&Walk.
А это значит, что у этого Tag&Walk будет столько перегрузок, сколько суммарно перегрузок у каждой
из этих функций. И это может быть очень много, это может быть очень больно. Но сначала вопрос,
а как вообще отличить какую перегрузку мы хотим? Ну, для начала на уровне, какую из функций мы
собрались вызывать? Метод, который мы уже видели, использовать теги. С помощью тегов мы будем
использовать произвольный тип tag, который нам должны передать, а также аргументы, которые мы
дальше принимаем, ну их может быть сколько угодно. Раз уж мы любую точку кастомизации пропускаем,
лучше бы мы умели сколько угодно много аргументов пропускать. И, соответственно, да, давайте скажем,
что все по ссылке передается, чтобы лишних копирований не было, хотя они скорее всего
оптимизируются. И мы здесь хотим заформить. Возвращаем мы уже теперь, конечно, что угодно.
Все вот эти вот функции различные begin and size. Возвращаемые типы у них разные, количество
аргументов разное, поэтому здесь мы это отразим. Раз уж мы через один и тот же вызов пропускаем
произвольное число аргументов, произвольный возвращаемый тип. Но вот в прошлый раз
особо неподробно это проговорил. Вот так нам написать не подойдет. Нам нужно именно
явно написать decal type от вот этого выражения. Вот. Зачем? Это сложный вопрос. Я вновь забыл на него
ответ. Ну, помним, что это как бы вот так вот у нас работает SFINAE. Если бы написали decal type
от auto, то SFINAE бы не было. Но случай, когда у нас с помощью ADL не находится тег-н-воука,
и мы хотим какую-то другую перегрузку оператора круглой скобки, кажется нету.
Боюсь наврать, но вот я почти уверен, что такого кейса нету, поэтому мы все-таки вот так сделаем.
Авторы статьи рекомендуют что? Вот они рекомендуют все-таки, а нет, это fcpo, это ok.
Да, а как они рекомендуют сам тег-н-воук? Определить? Никак не рекомендуют.
Окей, здорово. Нет, нигде нет. Что ж такое? Беда. Ну, мы можем подойти альтернативно,
посмотреть как единственной имплементации рабочей определяется тег-н-воук. Ну вот,
они здесь тоже делают такой decal type. Ну вот непонятно, зачем они это делали? Такой оператор круглой
скобки есть всего один у этой структурки, другая перегрузка из SFINAE выбраться не может. Очень
странное поведение. Видимо надо на него забить ехать дальше. Код. Все пропускаем через тег-н-воук.
Да, пока так и задумано, только назвать его нужно вот так. И теперь вот в этих вот
неблоидах вроде next, которые мы все еще оставляем вот такими хитрыми с объектом,
который на самом деле вызывается, чтобы отключить ADL, который может нам случайно попортить все,
мы вызываем тег-н-воук. Ну а дефолт мы можем, по примеру, ренджей, например, стелем. Что если
тег-н-воук сработает, это можно проверить, например, вот так. То используем его. Если не сработает,
то используем, например, вот это. И скажем, что это дефолт. Объект полностью еще остается,
чтобы отключить ADL. И вот этот вот итератор мы все-таки в конце передвинем вниз, чтобы он
использовал именно вот этот объект. Окей. Да, я думаю, даже вот это требование теперь лишнее,
что вернулось что-то с AMS. Мы просто хотим, чтобы вот этот вызов через точку кастомизации работал.
Вот. Как теперь кастомизировать? Теперь у нас ADL идет не через главальное имя Next, а главальное
имя тег-н-воук. И вот это уже позволит более, так сказать, тоненько кастомизировать с помощью ADL,
цпо, потому что раньше нам приходилось в namespace определять такую функцию next. И, ну,
по-хорошему мы хотим, чтобы в любом пользовательском коде весь доступ к этому next шел через вот этот
объект. А если мы вот так вот определяем этот next, то, ну, кто-то случайно через него может
пойти. Это раз. А два, таких next может очень много в namespace накопиться, и хотелось бы как-то
экономить место, если этот next относится только к вот этому other Iter и больше ни к чему другому.
И вот тут как раз выезжает секретная техника с френдами. И, соответственно, мы теперь не next,
а тег-н-воук кастомизируем. Но вот здесь нужно написать тип тега, про это сейчас скажу. Вот.
А что делает такое странное объявление френда шаблонного еще и с определением? Оно вставляет
просто такую функцию в окружающий namespace, то есть namespace-user. Но чем это лучше, чем то,
что было раньше? А тем, чтобы как определенные френды их нельзя вызвать напрямую никогда,
только через ADL. Соответственно, это ровно то, что нам нужно. Мы собираемся их вызывать только
через ADL, посредством тег-н-воука, а в глобальном namespace нам их иметь совершенно не обязательно.
И когда точек кастомизации становится вот примерно столько, неприятно класть их в глобальный
namespace. Более того, кладя их в глобальный namespace, они начинают участвовать в
overload-сетах различных. Конечно, они чаще всего будут не подходить и выкидываться,
но это нам неприятно, потому что это замедляет время компиляции. Такие штуки будут использоваться
только когда они найдены ADL, соответственно, меньше overload-сет, меньше нагрузка на компилятор,
всем лучше. Теперь про какой здесь тип поставить, как получить тип вот этой структурки. Мы можем,
конечно, к нему явно обратиться, но это не очень здорово. Нам бы хотелось через next его выразить,
и вот если мы его выразим через next, что получится? декл-тайп от mylib-next,
но не все, потому что этот декл-тайп нам скорее всего вернет конст-ссылку. Соответственно,
нужно написать remove-svref от вот этого, но очень много букв, поэтому предлагается определить helper,
который за нас будет делать вот эти две вещи, так это называется, пропозали remove-svref и декл-тайп от cbo.
Соответственно, теперь мы можем написать
next, и это должно работать, и это не работает.
Кстати, я вот так хотел. Оно не смогло замачить наш overload.
В этом overload ожидает создатель персант.
Она пришло что?
А, вот где я доложал, да, беда.
Нет. Давайте уберем на всякий случай mylib, и все-таки используем forward.
Оно не нашло для итера, вот этого итера, который мы хотели чтобы в default шел.
А, то есть не сработало вот это вот фишечко.
Давайте подсмотрим, да, там есть небольшая жуть, чтобы ее избежать,
мы сделаем так, нет, даже не так, мы объявим helper, который проверяет получится ли сделать
тег-инвок с конкретными аргументами, конкретными типами аргументов. И этот helper, конечно же,
нужно делать в том же месте, где и сам тег-инвок, чтобы ADL у нас происходил точно так же.
Соответственно, по аналогии с тем, что там было. Так, так, так, так. Да.
Мы можем даже лучше. Да, я путаю два разных reflinks, на которые ссылаюсь. Мы можем сразу
за-abuse-it, и просто использовать вот такую штуку. То есть в SVSTD есть шаблон, который точно правильно
написан и никаких проблем нет, который проверяет получится ли запустить какой-то функтор или
функциональный тип с какими-то аргументами. В нашем случае это вот этот тег-инвок, его операторы
круглые скобки. Аргументы это tag и test. И соответственно, здесь мы будем проверку ровно с помощью этого
helper производить. CPU у нас будет так. This. Да, так, конечно, не выйдет. Просто впишем. И так. Так, так.
Теперь вы не туда.
Что ж такое?
Mancon still value. Carvalue. Почему же это value? Потому что надо все формулировать. Да.
Still value. Очень странно.
Кажется, проблема
в том, что мы вот здесь показали те, кто на самом деле даем персант, и умирало оно ровно от этого.
Да, оно умирало от этого, но почему-то оно все равно не хочет.
А вот мы и узнали, для чего там декл-тайп так был написан. Да, важная деталь оказывается. Вот
эта функция, которую у нас std-invocable использует, она ведь написана с помощью концептов точно так же,
как мы раньше это писали. Вот я сразу написал requires, ла-ла-ла, и это не сработало. Я начал
паниковать и накручивать всякие модные фишки, но не надо было. Вернем как было и поймем,
что тег-ин-вок-оператор круглой скобки, ну концепт что проверяет? Что такое выражение валидно. Он
не проверяет, скомпилируется ли вся функция. Он проверяет, только скомпилируется ли ее declaration.
И его не волнует то, что вот здесь уже внутри, когда мы пойдем вычислять, вернее инстанцировать
сам шаблон. Мы не найдем вот это вот тег-ин-вок, его волнует только declaration. А он, ну да,
он нормальный, с ним все хорошо. Поэтому мы делаем вот так вот и засовываем туда ровно то же
самое. Теперь вот это выражение часть declaration. И чтобы проверить, что вызов вот этого оператора
круглой скобки вообще корректен, нам нужно сходить и проверить, а корректен ли вызов тег-ин-вок
из глобального namespace, вызов с помощью ADL. Вот, и теперь если мы это запустим, уже будет все хорошо.
Вот мы все выяснили. И, кажется, я изложил все, что нужно по тег-ин-воку в достаточных деталях.
Есть только еще, ну да, есть еще детали. Ладно, детали здесь бесконечны. Вот такой метод кастомизации
с фронтами, как мы использовали где, вот здесь. Он, конечно, классный, когда вы свой код пишете.
Но когда вы хотите для чужой библиотеки сделать запускаемым, ну, кастомизировать точку для типа
из другой библиотеки, например, все того же. Вот такого типа, да.
Бит 2. Взять, пойти в std, вектор, итератор и объявить там фронта. Мы не можем. Соответственно, нужна какая-то
возможность, так, нужна какая-то возможность сделать шаблонные такие кастомизации для целого
набора типов. И такая возможность таки есть. Ну, конечно, в нашем случае, да, для std-вектора у нас
работает наш дефолт, который мы объявили. Ну, бывает, что не работает. И, да, ладно, ну, плохо,
плохо через std-вектор. Давайте просто представим, что вот этот атер итер лежит непонятно где,
и использовать вот это вот, мы, правда, не имеем. Как можно, куда можно еще положить функции теган
волк, чтобы они были видны. Вот в этот момент. Если мы положим их в... Вернее, не так. Плохо, конечно,
класть так, что они видны были бы вот здесь вообще для любого теган волка. Нам, наверное,
хочется более мелкогранулированного и мелкогранулированной кастомизации и
делать так, чтобы они видны были вот в этом контексте. Соответственно, да, здесь, наверное,
можно уточнить, что мы mylib теган волк используем, чтобы здесь это или не происходило. Это ведь
нам ничего не словно. Правда? Да, все нормально. Нет, не нормально. Что произошло? Наверное,
это вот эта штука. Да, в реквайерсе, конечно, нужно вот так делать. И так это работает. И что
произошло? Почему резко все сломалось? Теган волк.
Так, это супер странно. То есть здесь происходил ADL, и мы попадали в нужный теган волк через него.
А теперь мы идем в mylib теган волк, то есть используем эту переменную. Приходим сюда и делаем
модель здесь. И он не срабатывает. Вернее, не так. У нас получается проверить, что оно теган волк.
То есть для рыдра она теперь перестала находить
так. Как обычно, с такими сложными вещами происходит какой-то треш. Я был уверен,
что я разобрался со всем трешем, что может произойти, но он все равно происходит. Да,
никто не следит за тем, что происходит. Правильно, все уже отвалились. Я же закомментировал то,
что должно было находиться. Конечно, оно перестало находиться, если его убрал. Да, все нормально.
Паника отменяется. Да, customized запустился. Все хорошо. Так запускается default. Все отлично.
Так вот, речь шла о том, как сделать не во френде и внутри класса, а где-то снаружи. Потому что,
если мы на самом деле вот это все возьмем и просто где-нибудь объявим, не пойми где. Подмешивать
что-то в namespace от чужих библиотек мы считаем, что нехорошо. Поэтому, вероятно, мы объявили это в
своем namespace. Да, и теперь это не френд. И вот оно, конечно, теперь не найдется. Да, default. И вот
вопросик. Давайте придумаем способ, как подхачить, чтобы в этом месте тег инлок мог находить какие-то
штуки, объявленные не френдами. Где их объявить? Или даже более тонко, то о чем он начал говорить.
Как сделать, чтобы тег инлок, используемый в next.cpo находил что-то кастомное и как бы не френда,
а просто что-то в каком-то namespace определенное. У кого-нибудь есть идеи?
Я чувствую бесполезность спрашивать. Подайте голос, что еще здесь и как-то отзовитесь. Есть
понимание, что происходит. Мы еще живы, но очень много деталей. Ну да, поэтому я подумал дать
задачу, потому что не прочувствовав это самому на своей шкуре, плохо понятно. Ну окей, давайте я
тогда договорю и мы с этим постараемся закончить. И все-таки лучше разберем вторую домашку. А вот
этот TypeRager, который я в прошлый раз обещал, мне кажется уже нет смысла рассказывать. Очень
тяжело, очень сложно. Лучше его как-то в домашку дать. Так вот, как сделать кастомизации какие-то
глобальные, не связанные с каким-то конкретным типом или классом. Адаптеры, так сказать. Мы можем взять и
объявить какой-нибудь namespace customizations в MyLib, а там объявить структуру magic. Next.cpo мы
наследуемся структурке magic. И теперь нашей кастомизации мы будем лепить вот именно в этот
namespace. Где кастомизация? Вот кастомизация. То есть это как бы отдельно отведенный namespace,
который окей засоряет и класть туда больше функций, если конечно не жалко времени компиляции,
которая конечно замедлится. Вот. Теперь надо посмотреть, будет ли это работать. И это работает.
И вот вопрос. Как так выходит? Почему ADL вот в этом месте находит вот эту кастомизацию на
namespace и MyLib customizations? Все дело, конечно, в классе magic. Если его убрать, то работать оно не будет.
И лучше это, конечно, со ссылками цепи preference смотреть. Так. Вот здесь оно было. И нам нужен
VDL. И вот тут в VDL описана куча-куча разных вариаций того, где что, когда считается так
называемым ассоциированным множеством namespace и классов. Да, так оно немножко закрыто. Вот.
Ассоциированное множество namespace и классов для конкретного вызова. То есть для вызова,
ну, например, лежащего внутри вот этого tagging-book. Это целый списочек. Что нам интересно,
это классы аргументов и их базовые классы, а также namespaces, в которых они лежат. То бишь,
когда мы, вот у нас внутри этого tagging-book, внутри std-invoke происходит вот ровно тот же
requires tagging-book this10. И вот этот tagging-book по типу this, он видит тип next-cpo. У next-cpo есть
parent, а parent лежит на namespace-customizations. Поэтому namespace-customizations попадает в набор
ассоциированных namespaces и классов. И все перегрузки, которые там определены, они будут
участвовать в ADL. И поэтому вот эта кастомизация у нас найдется. Вот. Соответственно, два способа,
как делать кастомизации, это friend внутри класса, который вы определили, либо шаблон в ассоциированном
namespace с этим customization-point. Вот, соответственно, шаблон, он может быть здесь сколько угодно
сложным. Мы, например, можем произвести следующую магию. Да, скопируем вот это все, но теперь скажем,
что мы принимаем какой-то конкретный тег. Вообще любой тег. И на вход мы берем unicptr.att. Возвращать
мы будем тегом invoke от тега, который мы просто зафорвардим в memory. И звездочка
тега. То бишь, мы форвардим любые вызовы next, вернее даже не так, любые вызовы любого тега
над unicptr мы форвардим к вызовам того же тега над содержимым unicptr. И даже можно сделать
авто. И вот здесь уже точно нужно particle type, чтобы у нас лишняя перегрузка не взялась.
Да, этот шаблончик мы еще не завели, но я думаю завести стоит. Лучше его скопировать,
чтобы не тратить время. Шаблончик для определения типа. Да, он будет выглядеть точно так же,
как теган лукабл. Надо будет using. И вот эта штука. И теперь вот в том месте мы можем
использовать теган лук резал т, тега и т, но предположим по ссылке. И уже без декл тай.
Соответственно, если мы теперь сделаем unicptr, давайте даже.
То с этим юма тоже сможем запустить точку кастомизации.
Если мы конечно соберем синтаксис плюсов. А не соберем мы его где?
А, вот здесь. Да, наверное не стоит. Да, и таки работает.
Физов next для unicptr зафорвардился к вот этому теган луку, который в свою очередь зафорвардил
к содержимому. Ну и при желании мы даже можем здесь потребовать что-нибудь вроде
не same as тег от next. То есть что это делает? Это запрещает тегу быть вот этим вот.
тегом для next. И тогда, и тогда да, у нас не получится зафорвардить этот конкретно этот тег
next, зато все остальные теги будут спокойно форвардиться и работать. И в целом вся эта штука,
она дает огромное пространство для кастомизации и как бы инкрементальной такой кастомизации
только тех частей, которые вам нужны. То есть обернув какую-нибудь штуку, вы можете там большую
часть вызовов зафорвардить к обертке и только некоторые кастомизировать. И это по сути то,
как паттерн адаптер или даже прокси возможно, нужно делать с compile-time полиморфизмом в плюсах
по науке. Теперь нужно, когда все это включит стандарт. До этого никакого такого общего механизма
не было, но это было практически невозможно. Вот на этом давайте прервемся на 10 минут,
соответственно 50 продолжим. И давайте просто разберем домашку и разойдемся. И тогда за две
недели напложу еще домашек, чтобы все это не просто так было рассказано, а село в голове.
И тогда уже будут новые темы. Все, перерыв.
