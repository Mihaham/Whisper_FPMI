Добрый день! Я вижу, что у регулярных посетителей на носу не только очки, но еще и Новый год,
поэтому сегодня будет сказка. Сказка о красной сапочке, а также ее подруге корове.
Так, некий Новый год красной сапочке решили принести подарки, и Дед Мороз притащил этой красной
сапочке некую программу, некую сервис, и сказал, так, разложи, пожалуйста, этот файл,
этот файл в этот, этот в этот, а после этого еще выполнили несколько команд. Стоп,
сказала красная сапочка. Это кажется другой сказке. Я тебе не Золушка, чтобы разбирать,
что, где, в каком каталоге должно лежать. Может быть, мне нужно вообще разложить разные программы,
не то по разным каталогам, а хуже того, мне нужно будет потом их еще и удалить как-то. Может
быть, их нужно обновлять, а как я пойму, этот файл от какой программы? Нет уж, Дедушка,
ты давай, складывай все в мешок или в пакет. Говорит так, чтобы я просто пакет положил,
и оно все разложилось, разбежалось по елочке и полностью засияло. Подумал Дед Мороз, ну вроде
коллега подсвет в шапочки. Значит, нужно выполнять пожелания. Ну и сделал компанию Red Hat,
которая сделала Red Hat Package Manager для упаковки всяких программ. Ну что ж, посмотрим, как он
работает. Вот что может делать. У нас есть куча различных пакетов. Интересно, какие здесь установлены?
Сколько всяких разных пакетов? Что-то такое кеховское.
В этот пакет у нас входят вот такие вот файлы.
Вот с неким текстом.
Устроим на него кота. Вот обычный текст читается. Тут красная шапочка задалась важным вопросом.
Вот все эти подарки нам собираются повесить на елочку. Но вопрос, может быть, чтобы один подарок
работал, нужен другой? А то вдруг выяснится, гирлянду повесили, а электроэнергию к елочке
провести забыли. И без этого она не работает. Может быть, нужно для этого еще что-то. Может быть,
для электроэнергии нужно еще что-нибудь. Например, для дизельного генератора нам нужен еще нефтеперерабатывающий
завод. Для нефтеперерабатывающего завода нужна нефтяная вышка. Ну вот молодец красная шапочка попросила
гирлянду на елочку, получила нефтяную вышку в комплекте. Ну интересно, а что же такое потребует
наш пакет? Никто его не требует, он сам по себе. А вот что он требует сам.
Например, библиотеку для принесения подарков красной шапочки. А также какие-то части теха.
А что он предоставляет? Вот такие возможности.
Один руку пакет этого у нас не предоставляет. А какой пакет предоставляет нам
вот этот пакет. Вот этот пакет предоставляет нам возможности под названием теха. То есть
пакеты связаны какими-то отношениями, что какое-то требует чего-то. И в результате объединяются в некую
структуру бодибатическую. Как вы думаете какую? Да, ориентированный ациклический граф со зависимостими.
И чтобы что-то поставить, нужно выяснить, что этот пакет требует. А если он требует посмотреть,
кто это предоставляет. Этот пакет в свою очередь может что-то тоже потребовать. Взять эти пакеты,
сделать с ними топологическую сортировку и расставить их по нашей файловой системе.
Но это если пакет у нас уже скачан. А если же у нас этого пакета нет,
его нужно поискать в интернете. Но естественно, нужно поискать в интернете,
ткнуть на первую попавшуюся ссылку с рекламой, поставить первую попавшуюся ставкину,
которая может быть не сделает с вашим компьютером ничего плохого. Впрочем,
есть альтернативные варианты. Например, откуда вы ставите приложение на ваши телефоны.
Существуют какие-то места, которые вроде как доверенные, в которых и находится только
предложение, предназначенное для хороших вещей. Но правда какая вещь хорошая, а какая нет,
может быть разная. Например, вещь под названием топор. С точки зрения елочки, она крайне вредная.
Так что все, что гарантирует нам какой-то магазин приложений, это то, что соответствует
описанию, делать именно то, что описано. Ну и наш дедушка Мороз приехал и привез нам целый
РПМ-пакет подарков на тряшке, запряженной собаками. В соответствии с правилами дорожного движения
и с тем, чтобы они были заметны на дороге, на каждую собаку он наделся этот отражающий желтый жилет.
И вот скачет по дороге целая стая желтых собак и обновляет всеми елочки. А он имя правит,
он менеджер желтых собак, ну или Yellow Dog Update Manager. Yellow Dog Update Manager или YUM это оболочка
РПМ, потому что РПМ предоставляет самые базовые операции, а YUM пытается пройтись по всяким
репозиториям, найти и что-то узнать. Вот, например, на этой машине установлены всяческие репозитории.
Ну вот, например, где у нас растет вот эта репа.
Репа под названием EVPL и Extra Packages for Enterprise Linux растет у нас на Fedora Project
вот по этому адресу. Другой репозиторий. Вот по этому адресу. При этом мы проверяем
криптографически, что то, что мы скачали, это именно то, что исходит от него. У нас есть
его публичный ключик и с помощью него мы проверяем подписи. Потому что мы собираемся установить себе
программу, она будет как-то работать, что-то делать на нашем компьютере. Должи же мы хотя бы проверять,
что мы получили этот доверийного источника. А вот другая ссылочка.
Еще вместо доменного имени тут почему-то IP-адрес, даже соединение не шифрованное.
Ну а дело в том, что по этому адресу сети МФТ находится зеркало зеркала Яндекса. То есть
Яндекс сделал себе зеркало всяческих репозиторий. В нашей сети есть зеркало этого зеркала. Для того,
чтобы всякие сервера, обновления не копировали одно и то же много раз откуда-то извне, а все качали
по локальной сети. Потому что канал наружу все-таки ограничен. Можно конечно его расширять,
но на это требуются деньги. Но вряд ли студенты согласятся, чтобы интернет в общаге стал стоить
еще дороже. Поэтому лучше по возможности трафика экономить и качать все с локальных репозиторий.
Вот 8.9.5.9.6 это наш локальный. Ну некоторые настроены ламироваться на тус.org, но
в файле tchost, который просматривается до того, как обращаться ко всем DNS серверам,
у нас написано, что мир и цен тус.org у нас вот здесь, а не где-то в другом месте.
Ну сделаем DNS запрос, он находится где-то в другом месте,
но как видим обращение идет к локальному серверу.
Можем попробовать что-нибудь поставить. Ну какие предложения, что мы будем ставить?
Программы для каких целей?
Какой?
Ну, DNS тоже оболочка над УПМ.
Не вошли.
Какие еще версии?
Мы поискали во всяких репозиториях пакетик,
название которых есть слово emacs. Вот, например, дошли...
Несколько странное, хоть и у нас нет этого в названии пакета, но по крайней мере есть в кратком
описании. ВИЛАЙКЕМАКС. Некий гибрид ВИМАСЕМАКСОМ.
Ну что ж, не дожидейте, что это за гибрид пульдога со сарогом. Давайте его попробуем поставить.
Что он хочет сделать? Мы попросили поставить ВИЛИ. Он требует для этого ВИЛИ КОМОН, все это
собрано по трахитектуре x86.6.4 и берется из репозитория EPL. Ну что ж, нам предлагают скачать огромный объем 1,3 мегабайта, объем изменений 5 мегабайт.
Так, даже не знаю, даже не знаю, хватит нам места. Так, так, сколько у нас места?
Диск фримин с хьюн лейдеримом нам скажут. Так, 13 гигабайт на кореневой файловой системе. Должно влезть.
Устанавливается пакет.
Там есть сам ВИЛИ. Еще какие-то программы связанные с ним.
И документация.
Замечательно, мы можем открыть по этому программу.
Ну, ВИЛАЙК, да, похоже, новим немножко. Пока непонятно.
Грация включается.
Ну, это, скорее всего, спрашивает любителей Макса.
Возможно, как-то похоже. Но главное, что вот он поставился. Все необходимые файлы он раскидал по нужным местам. Запустил какие-то скриплеты. То есть, то, что нужно запустить какие-то команды после установки.
Ну, мы можем удалить. Проходимся по графу.
Мы, чтобы не забыли ВИЛИ КОММОН, поставим только потому, что от него зависит ВИЛЯ, и поэтому мы можем тоже его удалить. Ну ладно, поживем.
Если мы удаляем ВИЛИ, то у нас не остается ни одного пакета, который требует ВИЛИ.
Значит, мы можем его просто удалить. А то есть, не требует ВИЛИ КОММОН, значит, мы можем его просто удалить. И сохранимся аж целых 5 МБ дискового пространства.
Ну бывает, конечно, и побольше. Что у нас требует, например, ХТТПД.
Требует, чтобы что-то было, или чтобы что-то было конкретной версии.
Или там не меньше конкретной версии.
Ровно такой версии. Версии там не меньше какой-то. Или просто чтобы было.
Кто нам предоставляет вот этот разделяемый объект?
Нам представляет этот пакет TheLib версии 1.2.1.19, собранный под специально и предназначенный для нашей красной шапочкой Red Hat Enterprise Linux.
Для артефактуры Intel V686. Вот у нас есть.
Какие еще библиотеки он хочет? Например, он хочет математическую библиотеку, поддержку Луо, поддержку Perk Lompatibular Regular Expressions, Postx Threads, Security on Hanford Linux. Вот сколько библиотек требует нашего веб-серва.
Но сказка была бы не полной, если бы в красной шапочке не пришла ее подруга. Рова.
Кто же опознал, что это за подруга?
Вот такие пасхалочки иногда встраиваются.
Ну, например, как только появился формат ELF, exeql.link был в формат кто-то, сделал формат DWARF.
Ну, название GNOME было уже занято.
Аналогично у нас может быть такая же инфраструктура с пакетами, с зависимостьми между ними, публичными репозиториями. У того кладутся подписанные пакеты.
И инструменты, которые будут ими управлять.
Например, в мире Dibian distributives есть миллион пакетов DEP.
Вот сколько у нас всяческих пакетов тут стоит.
Что это за пакет такой?
Ну, например, инструмент для того, чтобы перехватывать то, что приложение делается с файлом системы и сетью, и случайно меняется какие-то битвы во вводе.
И записывают. Вот так сделали.
Искать баги.
А что будет, если мы возьмем и поменяем какие-то биты в входных данных? Как наши программы обработают?
А может она упадет? А может она выполнит произвольный код?
Аналогично.
Ну, вот версия.
Пакетик для разработки. Вот кто его делал. Занимает 179 килобайт английского пространства.
А что они так мало занимают?
Солидно большая крутая программа должна занимать десяток Blu-ray дисков.
Ну, во-первых, потому что они связаны друг с другом и используют стандартные вещи от стандартной библиотеки.
То есть реализуют только свою функциональность, но не тащат с собой копии стандартной библиотеки.
То есть он требует Lipsy 6.
Сколько пакетов со стандартной библиотекой из оси?
Ну, правда, здесь одна у нас есть. Во многих сущностях.
Например, собранная под AMD 6.4, под ARM, с поддержкой, плохо кто любит с поддержкой, 32-4-убитную, MIPS 32-4-убитную.
Она уже есть, используется многими программами.
Пакет Lipsy 6.
В принципе опциональный. Относится и к библиотекам.
Исходник. Огнули Lipsy. Разрабатывают его дебяновские мейнтейнеры. Основный размер 12.6 мегабайт.
По сравнению с теми килобайтами.
Рекомендуют поставить дополнительный пакет, но не требуют.
К сожалению, с некоторыми она конфликтует.
Либо такой пакет, либо другой. Вместе они пытаются, например, писать в один тот же файл.
Или запускаться. Либо то будет, либо та, либо другая.
Если его поставить, то поломается вот это.
При условии, что версии меньше какой-то.
Оставлено вручную? Нет. Откуда поставлено?
В зеркало, в зеркало и в еду.
В чем заключается отличие работы программы и отсутствия наличия рекомендованных пакетов?
Как они могут прийти в тайну?
Рекомендованных?
Ну, смотри.
Наша красная шапочка обрадовалась подаркам и решила приготовить деду морозу на огонь и ужин.
Нам нужно собрать пакет под названием селедка под шубой.
Вот реквирис. Селедка такой-то версии, свекла такой-то версии.
Селедка под шубой рекомендует салат оливье.
Нужна ли нам свекла, чтобы приготовить селедку под шубой?
Сможем ли мы приготовить ее без селедки?
Не сможем. Это требуется.
А сможем ли мы есть ее без оливья?
Да вполне сможем.
Ну, мы говорим, что те, кто готовит селедку под шубой, скорее всего готовят к тому же празднику, до которой оливье.
А вот, например, пакет пасхальный кулич рекомендует каштные яйца.
Если у нас есть каштные яйца, пасхальный кулич когда-то устанет и готовится быстрее быть более вкусным?
Не станет.
Но разработчики знают, что, скорее всего, вам это понадобится, поэтому сразу рекомендуем.
Но именно рекомендации не что более.
Вот, видим.
Тут есть еще две заполнительные записи.
Сам пакет с такой версией.
И еще парочку апдейтов к нему.
Вот.
Вот такие вот у нас пакеты.
Что у нас, ядра, что нет?
Апдейт весьма критичен. Говорит, что Command Line Interface нестабилен.
Еще у нас, говорится, всякие модули для ядра, например, для NVIDIA.
А нет у нас ядра. Как так может быть?
Пустой буд.
Как же такое случилось?
Значит, что-то ломает.
А у нас вот эта рубриотека Lipsy что-то ломает.
Как бы нам сделать так, чтобы она у нас стояла и то и другое, но не ломалась?
Чтобы они даже не знали друг от друга.
Итак, красная шапочка осознала, что вешать на елку синий и зеленый шарики не сочетается.
Почему она так решила, не важно.
Но у нее есть какое-то решение. У нее есть целый лес. Что же она сделает?
Главное, чтобы эти елки росли из разного корня.
Так есть у нас есть.
Но они стоят рядом, не сочетаются. Что же делать?
К счастью, она живет в цивилизованном лесу.
И в нем есть морской порт, есть морские контейнеры.
Поэтому мы елочку любить не будем. Мы ее аккуратно выкопаем, чтобы ее можно было посадить как крупномер.
Засунем стандартный морской 20-футовый контейнер.
Прокроем его.
И другую елочку синим шариком тоже.
Вот у нас 2 отдельных контейнера.
Один с одной елочкой, другой с другой.
Чтобы посмотреть, нужно открыть этот контейнер, заглянуть, потом закрываем и смотрим следующий.
В таком случае они одновременно растут. Никто их не трогает.
Они полностью изолированы друг от друга.
Всякие процессы роста и веточки на них растут независимо.
Аналогично что-то у них общего.
Только то, что они на земле. Только ядро земли у них общее.
Аналогично. У нас здесь использована виртуализация.
И на базе параллес сервер, как раз единый сервер, физический, разделён намного.
У них есть общее ядро, поэтому ядра нет в каждом контейнере.
В каждом контейнере есть своя файловая система, свой корень файловой системы, свои процессы.
Изнутри контейнера не видны все процессы и файлы других.
Снаружи ядро они видны, но модифицированное ядро позволяет такое разделение, виртуализацию.
Мы в каждом контейнере можем ставить что захотим и оно замнимше.
Вдруг дерево залезло некое животное,
которое стало шептать наши красные шапочки страшные слова.
Ты зря слушаешь всяких рекомендаций, что менеджер пакетов должен быть только один,
который контролирует все пакеты в твоей системе.
Попробуй что-нибудь ещё и ты узнаешь, какие бывают добрые пакеты.
Вот такой фрукт поставишь себе.
Что же это за зверь такой забрался на нашу ёлочку?
Тут было предположение, что змей. Интересно, какой змей у нас тут заводится?
Ну и у него тоже есть свой менеджер пакетов.
Возможно он где-то ещё тоже вводится.
Вот какие пакеты поставил наш ПИП.
Теоретически оба менеджера пакетов могут работать одновременно в системе.
По крайней мере до тех пор, пока они будут пытаться изменять те каталоги, которые пытаются менять другие.
В WarLib RPM находится база данных RPM, которая по крайней мере не должна повредить.
Возможно сами пакеты разложенные по системе тоже не должны повреждаться другим менеджерам пакетов, если он здесь вдруг работает.
Что же у нас умеет ПИП?
Например, может проверить по зависимости между пакетами.
Проходится по графу и убеждается, что у нас нет никаких зависимостей, которые ведут отсутствующий пакет.
Допустим, красивый суп №4, он же Beautiful Soup.
Вот такая библиотека.
Куда она ставится, они могут не подраться.
Аналогично, у нас та же функциональность, что за пакет мы можем попробовать что-нибудь.
К сожалению, теперь больше не поддерживает поиск.
Увы, мы не смогли его поставить, но нам подсказывают.
Мы можем поставить от имени отдельного пользователя, поскольку это не системы библиотеки, а дополнительные пакетики.
И использовать только от конкретного пользователя, не мешая другим пользователям.
Вот такая вот типа контейнеризации, только на уровне петонских пакетиков и для конкретного пользователя.
Но это у нас как раз настоящий физический сервер, поэтому у него есть ядро.
У него есть заполненный каталог BOOT, все уже полностью живое и натуральное.
Полностью растет наша елочка корнем из гидрозивли. Даром, что она железная.
А можно ли ставить как-то без пакетиков?
В принципе можно, если ваш разработчик софта не позаботился о том, чтобы все это упаковать в пакетик.
То, например, вы выкачиваете архивчик и в ручную ставите. Обычно конфигурую make-make-install.
То есть когда запускаем конфигура, он генерирует make-file.
В принципе так тоже можно, но какие возникают проблемы?
Проблема прежде всего в том, что вы не можете проверить, какой файл к чему относится.
Зачем нам понадобился этот файл? Можно ли его снести?
Хорошо, нам нужно что-то обновить. А ничего у нас не поломается от этого?
Нам нужно поставить что-то, оно не работает без чего-то. Мы узнаем, потому что он не запустится, а документацию, что оно от чего зависит, нет.
Наличие связи позволит автоматически подгрузить какие-то зависимости.
Есть дестрибутивы в линуксе, в которых нет зависимости. В качестве менеджера пакета используется архиватор TGZ.
Слить много файлов в один, как бы на магнитную ленту записать и сжать.
Просто распаковывая файлы, в принципе, работает. Ногу поставил пакет, не запустил, не работает. Оказывается, зависимости нет.
А зависимости не предусмотрено. Есть, впрочем, еще версии.
Например, есть дистрибутивы, в которых вы все ставите из исходников. Вы просто скачиваете исходные тексты, компилируете себя.
Конечно, получается замечательная система, быстрая. Вы скачиваете самые свежие исходные тексты, не дожидаясь пока кто-нибудь их закращает в пакетике.
Ну а в чем проблема? Никто не проверял, как они совместимы. А также компиляция будет долгой.
То есть сборка системы может занять несколько суток, когда вы вообще абсолютно все собираете из исходников.
Ну, может быть, вы, эти исходники, перед этим как-то слегка правите под свои задачи.
Полностью конфигуруемая, полностью ваша система, и вот так построен дистрибутив Gen2.
Тоже в принципе имеют право на жизнь, но как-то ограничено в применении.
Ну, у App тоже есть свои репозитории. То есть просто ссылки, откуда нам брать пакеты и какие ветки брать.
То есть хотим ли мы брать несвободные пакеты, пакеты-контрибуторов основные, там старые.
Ну вот по этим ссылкам мы хотим, или не очень хотим, это все настраивается.
Ну, аналогично настроены на местный репозиторий.
Ну, плюс такой мини-фаервол для блоки или мини-энтблок, прямо от ITC-хоса написано.
То есть для того, чтобы все это собрать, нужно и самому собрать пакетик, нужно, естественно, все исходники.
Нужно описать spec-файл со спецификацией, что у нас.
Причем из таких мелочей Vim автоматически подсказывает формат spec-файла, то есть что нам написать в качестве названия, версии, номера релиза, описание.
Откуда взялось, что требуется для сборки, что требуется для запуска.
Например, компилятор нам требуется для сборки, но для запуска он не требуется.
Что нужно, чтобы подготовиться к этой операции, до установки, как установить, ну и как поставить.
Ну вот, возможный пример на примеры того же tmux.
Указываю, что библиотека у нас будет здесь, указываю опцию обойтись безразделяемым библиотек.
То есть заходим в разные каталоги, делаем какие-то операции необходимые, указываем флаги для компиляции,
по которым уже будет сгенерирован make-файл.
То есть конфигура, make и make-install.
