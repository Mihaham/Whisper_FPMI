В прошлый раз мы закончили на просочетании, а именно мы обсудили, откуда берется алгоритм Куна.
Мы его довели полностью. А также нашли максимальное независимое множество и минимальное покрытие.
Вот. Что у нас, соответственно, из этого еще можно сделать?
Ну, конечно, дальше идет теремия Дилварта, но для этого, конечно, нужно обсудить еще одну веселую задачу.
Что нам потребуется в теремии Дилварта?
А потребуется вот что. Давайте себе представим, что у нас есть с вами ациклический рига.
Пока, соответственно, просто ациклический.
То есть никакие ноты. Ну, естественно, они могут слопываться там, как угодно.
Вот.
Значит, хочется разбить вершины на минимальное количество путей.
Ну, вот, например. А то я сейчас вот какое-нибудь первое попавшееся разбиение возьму.
Вот такое вот. И в чем именно разбиение, что важно? Каждая вершина должна попасть ровно в один.
Вот, например, здесь я могу разбить еще вершину между верхним и центром.
Ну, хорошо.
Вот, например, я могу этот граф разбить на четыре пути.
А хочется оно как можно меньше.
Как можно меньше, это три.
Ну, да. Ну, как минимум, в данном случае, да, заметим, что если мы эту вершинку перетянем сюда, эту вершину подсыпем сюда, можно три.
Ну, два, наверное, меньше. Да, два, наверное, не получится.
Почему? Да, просто потому что у нас тут три столько.
Это первое замечание.
Ну, вот. Да.
Но на уровне обычных лайф... то есть обычно просто так не получится, конечно.
Потому что из того, что там, скажем, если у вас там, допустим, кайстоков и эйстоков, то, наверное, вот это вовсе не означает, что максимум из них, это и есть максимальное количество цепей.
Ну, там понятно, там могут быть всякие вот эти вот интеллектуальные там визуальные случаи.
Вот такого вот вида.
Ну, вот. Вот внимание к вопросу. Как же есть качество минимальное количество пути?
Точнее, как всегда, в нашем случае, называется свести задачу к какой-нибудь известной.
Уже.
Ну, что такое разбиение на пути?
Что же? Это вот когда в каждую вершину входит не больше одного и выходит не больше одного.
Да.
Еще, в принципе, под это определение подходят циклы, но у нас циклов по определению нет, так что вообще отлично.
Нам нужно сделать что-то, чтобы в каждую вершину можно было разрешить пустить не более одного ребра, и с каждой вершины разрешить выпустить не более одного ребра.
Что такое у нас уже было?
Да. Что же это было? Как подзывалось?
Ну, в смысле, мы можем сделать вдоль неграф.
Да, совершенно верно.
А еще можно просто сказать, что если у нас есть какой-то независимый множество, то понятно, что каждая вершина лежит в разном...
А, нет.
Это не совсем.
Здесь надо оговориться. Здесь, безусловно, верно, что если у вас найдется независимое множество, в общем, независимое в том плане, что между какими-то двумя вершинами не существует пути.
На этот раз именно пути, обратите внимание, даже не ребра.
То, действительно, меньше, чем столько вершин не получится.
Нет, ну понятно, что это еще как-то не... там, блядь, для этого точная оценка, но тем не менее.
Но замечание такое сделать можно.
Да, ну здесь же, действительно, оказывается, что это дает возможность к просочетанию.
Да, оказывается, в чем двудольный граф?
Да, где тут двудольный граф?
Ну, идея очень проста.
Вот давайте я перенумирую эти вершины A, B, C, D, E, F, G, H, I, G и превращу его в двудольный граф.
То есть каждую вершину я раздваиваю.
Раздваиваю.
В принципе, мы уже когда-то делали раздваивание вершин для того, чтобы у нас было ограничение на то, сколько воды проходит через конкретную вершину.
Вот такая вот, вот и так далее.
Но я не буду здесь, может, рисовать полный граф, думаю, суть будет понятна и так.
Ну вот, но идея будет следующая.
То есть если у меня есть верброн A, B, то я приведу в этом графе вербро из A штрих в B 2 штриха, но не наоборот.
Ну вот, ну соответственно, дальше я так приведу B, C.
Что я еще приведу?
Ну еще я так приведу, видимо, AD, DB, вот, что там дальше, DH, ну и так далее и тому подобное.
Значит, чем это нам поможет?
А поможет нам это вот чем.
То есть мы можем заметить, что набор ребер, вот, внимание, набор ребер, которые составляют эти пути, он соответствует порассочетанию вот в этом графе.
Ну потому что такой набор путей, да?
Это набор путей, это означает, что в каждую вершину входит не более одного ребра и выходит не более одного ребра, а в точности порассочетание здесь.
Что приятно и наоборот.
Любое порассочетание здесь, это набор путей здесь.
Но теперь, но теперь, оказывается, вот, можно заметить еще более мощное.
Заметим, что чем меньше, что так как нас интересуют пути, покрывающие все вершины, то можно заметить, что чем больше ребер участвует в этих путях, тем меньше количество путей.
Да, казалось бы, с какой стати.
А идея очень проста.
У нас вершины в этих путях делятся на два множества.
Те, в кого ребро входит, и начало путей.
То есть получается, что количество ребер в этих путях, это количество вершин минус количество путей, одно количество ребер.
Или, точнее, количество путей плюс количество ребер в них равно к количеству вершин, то есть константе.
То есть следует на, чем больше количество ребер в путях, тем меньше количество путей.
И получается, что минимальное количество путей просто соответствует максимальному порассочетанию здесь.
То есть вели даже не к потоку, а к порассочетанию.
Вот, понятно?
Ну тут все равно.
Так что вот такая вот простая, но, тем не менее, интересная идея, важная.
Вот.
Но, оказывается, из нее можно доказать уже просто продвинутый математический факт.
Как говорится, глубоко математический, по крайней мере, это окажется, когда начинаешь писать его определение.
Потому что тут же начинают появляться такие слабосочетания страшные, как частично упорядоченные множества.
Знакомые слабосочетания?
Конечные частично упорядоченные множества, это, конечно, да.
Да, слабо слишком.
Ну, слабо для кого?
Ну, не знаю.
Для доказавшего великую терминферма, наверное, слабо, конечно.
Но с другой стороны, иногда так пафосно звучит.
Знаете, это, хочешь так как-то козырнуть, выходите по отворту, а ты нота, нота.
Я изучаю математику, и что?
А ты знаешь о такой частичном упорядоченном множестве?
Не очень пафосно.
Нет?
Не знаю.
Ну, кому так?
Вот.
Нет, ну.
Так вот.
Так, ну ладно.
Ну, хорошо.
Тогда давайте просто скажем, что вот оно есть, оно конечное.
У него есть оператор меньше, так сказать.
Он там транзитивен и все такое.
Вот.
Так вот.
Ну, значит, здесь тогда можно ввести еще пару определений.
Ну, во-первых, действительно, цель, это что такое?
Ну, по сути, это последовательность А1, А2 и так далее пока.
То есть все эти элементы лежат в А.
И причем верно, что А1 меньше А2, меньше А3, меньше пум-пум-пум, меньше АК.
Ну, вот в этих вот те.
И есть неожиданно другое определение.
Антицель.
На этот раз это множество.
Вот.
Здесь наоборот.
Никакие элементы не сравнимы.
То есть неверно, что какой-то из этих элементов, хоть какой-нибудь из этих элементов меньше хоть какого-то.
Вот такая вот идея.
Ну, и конечно же, как всегда, частично упрямочено и множество, хоть и несколько, хоть и несколько.
Ну, и конечно же, как всегда, частично упрямочено и множество хочется покрыть минимальным числом цепей.
А также хочется найти максимальную антицель.
Да.
Ну, чем отличается частично упрямочено и множество от обычного ациклического ориентированного графа?
Отличается оно маленькой приятной вещью.
Ну, вот.
Ну, а с точки зрения цепи, то что означает?
Означает это маленькую приятную вещь.
Если у вас есть цель, и вы решили вытянуть из нее вершинку, то цель от этого не перестает быть целью.
Да.
Потому что...
Такой-таки.
А дальше еще.
Вот.
Который мы и переходим.
Значит, что же это такое?
Ну, мистическая церема.
Да.
Дилворса.
Дилворта.
Дилворта.
Я ее церемой Дилворта называю.
Ну, в историках по Катечея она была Дилуорсом.
А, она была в историках по Катечее?
Да.
Я даже на сценарии доказывал так, что с Кёнига.
Да.
Я пытался доказать, что ничего не вышло.
А потом нашел по индукции.
По индукции.
Да, там есть такая часть индукции, но через Кёнига самая наглядная.
Ну, вот.
Ну, давайте, давайте.
Ладно, давайте это мы все-таки обсудим.
Это было на прошлом занятии.
А, вот.
Ладно.
Ну, терема.
Так, ладно.
Заключается.
Ну, вот.
Давайте.
Ну, напишем так.
Минимальное число цепей в покрытии.
Ладно.
Ну, вот.
Ровно.
Ну, вот.
Размеру.
Ну, лучше вот длине, конечно, хочется для антицепи, но как-то.
Вот.
Размера максимальной размеру.
Да.
Антицепи.
Да.
Вот такое.
Антицепи.
Ну, то есть опять у нас действительно какое-то число, что вот у нас одно число, вот у нас второе число.
Вот.
Хочется доказать, что они ровные.
Ну, ладно.
Давайте иксы все-таки.
Поле традиционно, что.
Вот.
Так.
Ну, действительно.
Начнем с того, что.
То есть действительно.
Чтобы доказать равенство, надо доказать, что одно из них больше либо равно, другое меньше либо равно.
Кажется, в одну сторону очевидно.
Какое?
Язык с ноги.
Кто?
Мы тут демпликации доказываем.
Ну, мы просто поставим.
Ну, теперь хотя бы антицепи.
Да, конечно.
Это здесь антицепи.
Потому что заметим, чем приятна антицепь тем, что никакие две вершины в одной цепи лежать не могут.
Да.
Следовательно, на каждую потребуется как минимум одна цепь.
Может быть потребуется еще больше?
Нет.
Ну, какое здесь?
Ну, оказывается нет.
И более того, собственно, эту антицепь оказывается.
Ну, то есть смотрите, вот минимальное число цепей мы уже находить с вами научить.
То есть надо просто построить соответствующий двудольный граф и найти в нем парасочетание.
Вот.
Теперь давайте, оказывается, что с помощью этого же парасочетания на самом деле можно найти и максимально антицепи.
Ну, как же мы это делаем?
Значит, ну, используя тот же самый вот лайфхак, который мы обсудили, то хорошо.
Пусть куплю я хочу.
Вот.
Да вот.
Тогда что у нас получается?
Значит, мы с вами знаем, что у нас число х, это что такое?
Число х это равно количество вершин, минус, так сказать, π от g штрих.
Так, ну что, удается расшифровать, что это за заклинание я тут написал?
Мы знаем π функция, g штрих, ампустроение.
Ну, помните, да, в прошлый раз мы объявляли, что π это максимальный размер просочетания.
Ну а g штрих, почему я пишу штрих, это вот тот самый двудольный граф, который мы тут построили.
Вот.
Ну, помните, вот.
Ну, короче, повторяться это 5 минут назад было, да.
Вот.
Да.
Вот действительно.
То есть, в переводе говоря, да, вот нам очень хочется найти какое-то вот максимальное просочетание.
Но заметим следующее.
Теперь заметим следующее.
Вот хочется рассмотреть максимальное независимое множество в этом вдольном графе.
Какой у него размер?
Его размер, очевидно, ну не очевидно, как в прошлый раз выяснили, равен количеству вершин в графе g штрих.
Видите, вот с индексом g штриха, внимание, пишу.
Соответственно, минус размер максимального просочетания.
Было дело, да?
Вот.
С другой стороны, да.
Ну, это я просто написал общий факт.
Просто.
А конкретно в данном случае, да, я беру словное, это вот действительно 2 модуль v минус p от g штрих.
Ну, вот так что, вот такая вот красота.
Вот.
Ну, теперь вот что интересно.
На самом деле я вот запишу это вот в каком.
Я это пишу в виде модуль v плюс x.
То есть смотрите, то есть у нас в каждой доле есть v вершин, а независимое множество, если вот мы рассмотрим это независимое множество, оно у нас размера v и плюс еще и x.
А что это значит?
А значит это следующее.
Смотрите, ведь в независимом множестве, да, вот каждая, вот у нас есть вот эти вот вершины у нас на самом деле разбиваются на пары.
Вот эти вот h штриха, 2 штриха.
И с каждой парой у нас в независимом множестве может быть 0, 1 или 2 вершины.
Вот.
Еще одна глубокая обыск.
Ну, я утверждаю, что количество пар, которые вот тут именно независимое множество входит, таких вот пар, как минимум x.
Можете в максимальное независимое множество входить одна вершина из пары?
Можете.
Почему не для 5 вторую?
Ну, мало ли, может она там, ну может она как раз с кем-нибудь там связана вот с тем, кого еще сюда взяли.
Мало ли?
Ну вот.
Вот.
Здесь действительно, то есть вот этот факт, что вот таких пар взято как минимум x просто по принципу деревле на самом деле.
Ну, потому что заметим, что у нас, если у нас, например, там скажем, количество единичек у нас, допустим, равно k1, а количество пар k2, то всего у нас вершин, соответственно, k1 плюс 2k2.
Единичек это k1 что ли?
Единички это кто?
Ну, количество пар, из которых независимое множество попало ровно одно.
А, хорошо.
Ну вот, ну это равно вот, модуль v плюс там плюс x.
Вот.
Но при этом заметим, что, так как количество пар у нас, ну k1 плюс k2 меньше либо равно модуль v, ну потому что k1 плюс k2 не происходит в принципе количество пар.
Ну вот.
Ну отсюда автоматически, ну и вот сюда этого автоматически означает, что k2 больше либо равно x.
Ну или вот, ну или еще себе, можно это даже вот как-то вот вообразить.
Например, что вы, когда будете набирать независимое множество, вы сначала из каждой пары, если нужно, возьмете по одной вершины, а потом из, ну, по одной вершины, а потом из некоторых, в некоторых пар возьмете и вторую.
И тогда, так как на первом шаге вы возьмете не более чем v вершин, то значит на втором вы будете вынуждены взять как минимум.
Вот.
В общем, разной степени тут вот, можно либо формально доказывать, либо вот увидеть, и все, в общем, все можно, а суть одна.
Ну что это значит? Вот. Итак, у нас есть x пар.
Вот есть у нас эти x пар, скорее всего больше и не будет.
Но что, но смотрите, у нас есть x пар, и они образуют независимое множество.
Вот допустим, вот у нас вот v' v2' пара, и какая там пара f' f2'.
И эти четыре вершины лежат в независимом множестве. Что это значит?
Это значит, что такого ребра нет и такого ребра нет.
Ну, а таких ребр не было в принципе.
Это означает, что в исходном графе вершины b и f были тупо несравнимы.
То есть, по сути, это означает, что эти x и соответствующий этим парам x вершины в исходном графе образуют антицепи.
Ну, собственно, теорема доказана.
Вот, потому что мы вот построили, вот, потому что просто мы нашли минимальное число цепи x и просто нашли соответствующую антицепь.
Вот. Вот и вся теорема.
Так. Все. Нет каких-то вопросов?
Есть. Вот у нас есть граф в удольной в каждом v вершин, в каждой доле.
И мы говорили, что если у нас есть независимое множество размеров v' x, то найдутся x пар вершин таких, что в каждой из этих пар обе вершины попали в независимое множество.
Все. Вот эти кашки были для того, чтобы доказать это утверждение.
Вот. Можно его доказать так, можно его доказывать по-другому.
Могу повторить доказательство про кашки.
Ну вот. Ну, я, то есть, формально я расписываю так, смотрите.
Вот рассмотрим наше независимое множество.
Плюс k1 это количество пар вершин, таких пар, что из этой пары в независимое множество попала ровно одна вершина.
Пара вершин называется вершина из соответствующей по построению вершины во второй доле.
Да, вот это пар. В доле сетричной.
Ребро? Нет, не ребро.
Нет, пар, ну просто напоминаю, да, как мы искали минимальное число цепей.
Напоминаю, мы раздвоили вершины.
Ну вот. Так вот. Я парой называю а штриха, два штриха.
Вот b штрих, b б штрих. Я вот эту пару называю.
То есть пар b штрих, понятное дело.
Да. Так вот.
Так вот, k1 из каждой пары, значит, я взял, могу, взят в независимое множество ноль, одна или две вершины.
Вот k1 это с каких паров взята одна вершина.
В k2 сколько взятов, из каких пар взяты обе.
Итак, для меня, с одной стороны, я знаю, что количество вершин всего в независимом множество, это k1 плюс 2k2, и это v плюс x.
Но с другой стороны, я замечаю, что k1 плюс k2 не превосходит v. Почему?
Ну просто потому, что это не происходит общего числа пар.
Секундочку, k2 это мы одному вершину взяли?
Две.
Две, в общем-то, да.
А, логично.
Потому что две, да.
На самом деле, да, тут еще, после еще ввести k0, ну просто из каких пар мы не взяли ничего.
Вот.
И тогда можно заметить, что k0 плюс k1 плюс k2 будет супер равно модуль v.
Но это в точности количество пар.
Поэтому мы и пишем, что k1 плюс k2 не превосходит модуль v.
Но если прибавить к этому числу k2, то оно начинает быть неожиданно v плюс x.
Но отсюда мы вынуждены заключить, что k2 это, наверное, как минимум x.
Вот, да.
Так что всем приятно этот доказательство тем, что оно теперь эту максимальную антицель может позволить вам просто найти просто конструктивно.
Ну, в принципе, это вообще теряется.
То есть как вот тут так интересно.
Можно ли как-то заказывать по индукции?
А на самом деле, может и не надо.
Так, ну что, есть ли тут какие-то вопросы?
Нет?
Хорошо.
Так, ну что ж, ладно, тогда пойдем дальше.
Ладно, с просочетаниями разобрались.
Ну, теперь пришло время вернуться к решению задач на потоке.
Да.
В смысле, наконец?
Ну, просто хотели еще в прошлый раз начать решать.
Хотели, да.
Ну, тут просто да, тут просто да.
Значит, смотрите.
Вот.
Ну, начнем мы, пожалуй, с тоже задачи, которые у вас будет на ревью.
Так вот.
Ну, давайте немножко о мотании.
Да.
А, вот у вас это, задачи как раз, да.
О больном, так сказать.
Ну, вот.
Ну, правда, задача там не то, чтобы прямо о мотании.
На самом деле, она применима к любому курсу, в котором есть модули.
Которые надо прочитать.
Значит, потому что условия задачи заключаются в следующем.
Значит, есть профессор.
Он хочет прочитать курс в следующей.
А, все знают.
Некоторые лекции нельзя читать до других.
Не, не, не, не.
Для каждой лекции нужно что-то прочитать еще.
Да, сейчас давай.
Ну, понятно.
Ну ладно, ты встану в службу.
Ну ладно, ты встану в службу.
Или все встанут в службу.
Не все.
Значит, смотрите.
Значит, смотрите.
Нет, ну ты вряд ли встанувался, если ты с потоками не встанувался.
О, значит, вряд ли.
Ну, точнее, мог встануваться, потому что в домашнем задании задачи уже вышли.
Нет, он точно его открывал.
О, да.
Открывал-то, да, но не задачи.
Ну да, открывал, да.
Как в таком случае, да.
Так вот.
Ну, я что-то нарисовал.
Ну и ситуация такая.
Есть, по идее, сколько-то тем.
Ну, редкий случай.
У профессора, оказывается, время начтения лекции неограничено.
То есть, количество лекций можно почитать в сколько углов.
Потому что дело в том, что у каждой лекции есть ее полезность.
Вот.
Но проблема в том, что она бывает как положительная, так и отрицательная.
Вот.
Ну, казалось бы, давайте прочитаем все полезные лекции, прочитаем и выкинем все бесполезные.
Но есть еще один маленький нюанс.
Дело в том, что для...
Ну, тут надо аккуратно сформулировать.
Дело в том, что требуется.
То есть, для понимания каких-то лекций требуется, чтобы были какие-то другие лекции.
То есть, более формально это звучит так.
Существует несколько пар УВ, про которые мы говорим буквально следующее.
Лекция В будет непонята, если она будет прочитана, а лекция У при этом прочитана не будет.
Причем нам не важно, она будет прочитана до лекции В или после, обратите внимание.
Вот.
Но вот именно важно, то есть, для нас недопустимо, чтобы вершина В была прочитана, а У нет.
Вот.
Ну, то есть, если вершина В...
Ну, то есть, условно говоря, если это будет лекция по продвинутым интегралам в начале семестра,
а в конце мы прослушаем лекцию про то, что такой предел последовательности, то все в порядке.
Типичный.
Нет, на самом деле, это достаточно типично, потому что вы еще не сталкивались с таким понятием, как лабы по физике.
И не сталкиваемся.
Да?
Счастливые люди.
Просто, как сказать это?
ПМИ появилось, когда я учился на втором курсе.
Поэтому, я помню, мы в 2009 году учили физику так же, как Фаффей.
Только лабовый бетон.
Нет, у нас не было лабового бетона, хотя мы старались.
Нет, ну, потому что там многие всякие анализы очень удобно было бы делать на бетоне, на самом деле.
Вот.
Что такое непонятно?
Ну, ты послушал лекцию про Лебего и не понял.
Так, погнали спокойно.
Ну, вот я говорю, формально, не понято, то есть, имейте в виду, что для того, чтобы лекция В была понята,
необходимо, чтобы в этом курсе была прочитана лекция.
Нам нужно будет выбрать множество лекций, такое, чтобы все лекции понятны.
Не так, что если ты там не послушал, у тебя полезность сложная.
Да, нет, просто нужно будет выбрать множество, так чтобы все были понятны.
Да, это вот важно.
Причем, соответственно, такая проблема может быть, что у ИВ могут быть и так,
то есть, иногда, поэтому оказывается, что бесполезные лекции читать надо.
То есть, даже слово «бесполезная», наверное, не совсем правильное.
Неприятная.
То есть, скорее, неприятная, деморализующая.
Знакомая.
Ну, там, такие сложные, там, бредные, вот это все.
Вот.
И вот возникает интеллектуальная задачка.
Как же нам теперь, значит, выбрать под множество лекций, так, чтобы суммарная их,
чтобы, во-первых, они все были поняты, а во-вторых, тогда их суммарная вот полезность была как можно лучше.
И все-таки такая веселая задача.
Там, случайно, не нужно все-таки попросить оскещенности?
Нет.
Ладно.
Вот, на самом деле, оказывается, нет.
Да, это вот действительно подлая задача, потому что начинаешь хочется там думать над какими-то цепочками там и так далее, но нет.
Нет.
Хочется, типа, что-то экстра такое.
Ой, ну, экстра.
Не-не-не, погоди, для ментпоста мы дойдем.
Вот.
Значит, какие же тут идеи?
Нет, на самом деле, идея просто решает абсолютно стандартно.
То есть, как вы помните, у нас есть два способа решать задачи на поток.
Построить сеть, в которой сам, найти максимальный поток и по этому потоку что-то сделать.
Или построить сеть, найти в нем минимальный разрез и по минимальному разрезу что-то сделать.
Вот прямо сейчас мы попробуем воспользоваться вторым способом.
Да, вот это просто классика, на самом деле.
Вот.
В чем сделаем это?
Самым тупым образом.
Ну, то есть, скажем, что у нас вершины в сети будут те же самые, а также у нас будет и сток.
Ну и допустим, сток.
Давайте вот зафиксируем.
Чем у нас будет разрез?
Ну, то что будет символизировать разрез?
Каждый конкретный разрез будет у нас символизировать следующее.
Будет символизировать.
Ну, давайте он будет символизировать, например, что здесь у нас в этой доле раззеленый будет, значит, эти лекции, чьи ноты.
Это будет читаемые ноты.
Значит, эти лекции, чьи ноты.
Это будут читаемые лекции.
Ну вот.
А в доле t будут...
Как их назвать-то?
Нечитаемые.
Нечитанные.
Ну, вот, да, со временем еще.
Нечитаемые.
Опущенные.
Да, пропущенные лучше, да.
Ха-ха-ха.
Хотя, да, особый жанр опущен или нет.
Ха-ха-ха.
Каждый раз нот они.
Что такое? Вы опускаете лектора там, что ли?
Не, вот, как я опускаю всех.
Ха-ха-ха.
Так вот.
Это читаемые лекции.
Да, скорее пропускаемые.
Ну ладно.
Значит, итак.
Что теперь хочется?
Ну, хочется действительно построить таким образом ребра.
С одной стороны, чтобы стоимость...
Чтобы предпочитая способность разреза была в точности...
Разнат полезности выбранного множества.
Но совсем так, конечно, не получится.
Да, потому что идея-то, в общем-то, могла бы быть очень простой.
То есть, для этого мы просто в каждую...
То есть, в идеале хотелось бы, да?
То есть, каждое ребро...
То есть, просто проводим, действительно, вершину В, ребро в способности 17.
Если она...
Ну вот.
М-м-м.
Ну вот.
А, ну вот. Хотя нет.
Не совсем так.
Если бы хотели, чтобы у нас стоимость была в точности хорошей нашей стоимости,
то тогда, конечно, это было бы легко сделать,
если бы мы просто рисовали бы ребро в сток, скажем так.
Если вершина взята, то у нас прибавляем 17,
если не взята, то не прибавляем.
Но есть одна маленькая проблема.
Мы ищем максимальную полезность, а не минимальную.
Понимаете, да?
Что же делать?
Найти минимальную.
Ещё, наверное, нужно было бы отрицательные проводить.
Погоди, погоди.
Ты не беди.
Даже если у нас была такая идея, мы все равно пришлось отрицательные проводить.
Ну, давай постепенно будем решать проблемы.
Сначала начнём с того, что...
Да, первая идея.
Потому что задача простая, но сложно накрученная.
То есть много мелких шашков надо сделать.
Один шажок, например, придётся сделать, чтобы свести к минимальному разрезу.
То есть получается так.
Мы хотим сказать, что сначала мы берём все лекции.
Допустим, берём все лекции.
А потом...
И потом вычитаем те, кто их не взяли.
То есть не набрали лекции и просуммировали, а сначала взяли всё, а потом что-то поменьше выкидывали, но так, чтобы было хорошо.
Вот.
То есть теперь надо, наоборот, выкинуть минимальное количество лекций.
То есть лекции минимальной полезности, чтобы было хорошо.
Ну, что такое хорошо, мы ещё поговорим.
Пока же, действительно, теперь заметим, что мы теперь, наоборот, хотим не выкидывать.
Тогда вот действительно проводим всё-таки вот это ребро.
И теперь у нас получается, что если мы вершину решили выкинуть, то значит мы потеряли 17.
Если решили взять, то не потеряли, и это хорошо.
Но есть одна маленькая заговорка.
У нас могут быть вершины в стоимости минус 5.
И тогда нам предлагается нарисовать вот такое же ребро пропустной способности минус 5.
Отлично.
Вот.
Да, но маленькая проблема.
Но оказывается, вот.
Высекают такие маленькие проблемы, что у нас пропустой способности отрицательных нет.
Помните, да?
Вот.
То есть действительно есть маленькая проблема, что у нас вся наука построена на том, что пропустой способности не отрицательные.
Вот.
Но на самом деле, насколько это страшное ограничение?
Так вот, оказывается, это не такое страшное ограничение.
Потому что, смотрите, на самом деле, что можно сделать.
Ну вот.
Потому что, ну на самом деле так.
То есть если у вас есть отрицательное ребро, торчащее из устока.
В общем случае, да.
То на самом деле, решить его к проблему достаточно просто.
То есть дело в том, что если у вас вот, допустим вот представим себе, что у вас есть сеть.
И ну вот там какая-то абсолютно произвольная сеть, там бла-бла-бла-бла-бла-бла-бла.
И из устока торчит отрицательное ребро.
Так вот.
На самом деле, справиться с этой проблемой очень просто.
С такой проблемой, какую проблему нам там решить?
Мы пытаемся свести, мы хотим все еще искать минимальный разрез, но в таком графе мы этого сделать не...
Мы не можем это сделать с помощью максимального потока.
Да-да.
То есть еще раз, в принципе, определение минимального разреза не ко мне зависит от положительности отрицательности ребра.
А вот потоки очень зависит.
Поэтому нужно продолжить находить...
Нужно найти способ находить минимальный разрез, даже если у нас есть отрицательные ребра.
Ну правда, оговорочка, что мы будем пользоваться тем, что они все-таки не застол.
Да, к сожалению.
То есть произвольная отрицательная ребра, к сожалению, мы проблемами все-таки не решается.
Ну и по крайней мере, мне неизвестно как.
Я спрашивал, что у нас есть отрицательные ребра.
Чего?
Попробуйте, давайте обратную сторону.
Все ребра, входящие в сток, ничего не делают.
Ну и забьем.
Но оно имеет смысл, это ребро, в смысле.
Оно убегает на ответ как-то.
А если ты его поставишь обратно в сток, оно перестанет влиять на отрицательность.
Нет, на самом деле не влияет.
В минимальном разрезе ребро не учтется так или иначе.
Ну ни в каком разрезе ребро, ведущее в сток, не учтется.
Ну да, из-за стока ребро минус пять может учесться.
А если ты его вернешь обратно, то он пропадет.
Напоминаем, что в стоимости разреза участвуют в точности ребра, которые ведут именно из доли S в именно долю D.
Не наоборот.
Вот.
Напоминаем, да.
Так вот, минус пять.
Что же делать?
Так вот, оказывается идея, как свести эту задачу, поиску минимального разреза, когда этого ребра нет.
А очень просто.
Давайте проведем кратное ребро пропускной способности пять.
Что у нас поменяется?
Ну тогда поменяется, ну тогда заметим, что минимальный разрез, конечно, может измениться.
В том плане, что если у тех разрезов, когда вершина оказалась в доле S, не поменялось ничего.
А у тех разрезов, когда эта вершина была в доле T, разрез увеличился на пять.
Понимаете, да?
Ну то есть у нас проблема, что у некоторых прибавилось пять, а у некоторых нет.
А у некоторых это каких?
Ну у тех, у кого эта вершина в доле S.
Поэтому, чтобы это компенсировать, мы просто добавим ребро пропускной способности пять.
Сейчас точно...
А, что?
Секундочку, я не понял.
Что мы в итоге добавили?
Мы добавили два ребра.
Стоимость 5 из истока в эту вершину и из этой вершины в T.
А мы не хотим эти два выкинуть?
Это другой вопрос.
Пока я говорю, что от добавления, что поменялось?
Поменялось только одно, что стоимости всех разрезов теперь в этой сети увеличились ровно на пять.
Поэтому минимальный разрез остался минимальным.
Но теперь заметим, что мы теперь можем эти кратные ребра схлопнуть, ну а в этом случае просто их уничтожить.
Вот получается такой фак.
Который позволяет решить...
То есть, если у вас в сети случайно оказались ребра, торчащие из истока с отрицательной способностью, то это не проблема.
Ну, аналогичным образом, естественно, если у вас есть ребра, ведущая в сток, и они тоже имеют отрицательные способности, то это тоже не проблема.
К сожалению, да.
То есть, если бы это было ребро не связанное со стоком и стоком, то так проблема не решится.
Так вот.
Так, ну вот.
То есть, можно это интерпретировать.
Вот с точки зрения сети решение можно интерпретировать таким образом.
А с нашей точки зрения, кстати тоже, с точки зрения задачи lot-аналиста, это можно интерпретировать еще таким образом.
То есть, альтернативная интерпретация такая.
В смысле, что такое вот это минус пять?
минус пять. Мы сказали, что у нас вместо вот этого ребра, по сути, мы просто
проводим... Какое ребро? Мы просто проводим вот такое ребро, оп, вот так.
То есть в результате, то есть это вот можно интерпретировать, что вот мы построили
тут вот такие ребра и сделали тот хак, а можно даже в терминах мотонали, задачи
мотонали сказать. Что давайте скажем наоборот, что мы сначала, что мы сначала
решили взять все полезные лекции и не взять все бесполезные. И после этого мы
решили что-то менять. Ну что можно менять? Во-первых, можно выкинуть полезную лекцию и
потерять на этом, а во-вторых, можно взять бесполезную лекцию и тоже на этом
То есть вот эти ребра, собственно, это для нас и идентифицируется, вот, и символистики.
То есть вот, ладно. То есть вот так или иначе, да, мы научились делать так, чтобы вот у
любого разбиения сумма прописной способности была в точности по разбиению.
Ну а теперь возникает вопрос. У нас, помнится, не любое разбиение можно взять.
Да, ну, иначе, правда, иначе и так надо было просто взять все полезные, выкинуть все
бесполезные и еще думать о чем тут вообще, про какие-то там сети что-то говорить.
Ну, у нас есть вот некоторые пары У и В такие, что нам запрещено читать лекцию В,
не читая лекцию К.
То есть у нас разрез не имеет права проходить между У и В.
Как бы ему запретить?
То есть нельзя делать так, чтобы было В лежит вдоль С, а У лежит вдоль Т.
Как бы ему это запретить?
Вот, как запретить, чтобы вот ситуацию, давайте вспоминать задачу про ярости команды.
Ну, у нас там не запрещено, помните, у нас была ситуация, что иногда запрещается, чтобы
там товарищ В, Петя был программистом, а Вася был тестировщиком.
Потому что там Петя будет жутко плакать, помните?
Помните? Было дело?
А, как говорится, да. Или это была другая лекция с другим составом участников?
Ну, она точно была с другим составом участников, но...
Ну, нет, тебя-то не было, я помню.
Тебя помню.
Вот.
Но тогда, но тогда там просто, тогда мы эту проблему решали очень просто.
Огромная бесконечность.
Нет, ну тогда говорили, что, ну, там у нас была не бесконечность, то есть там мы просто говорили,
что давайте, вот, не этот, что говорили, вот В и У, давайте, то есть в таком случае мы
проводим ребро пропускной способности, вот, насколько он будет плакать,
и тогда получалось, что если действительно такое разбивание произошло,
значит, этот плач учтен, если нет, то где?
Ну, а нам нужно прям не уровень плача, а запретить.
Ну, то есть, что такое, что такое нельзя?
То есть, что такое вот совсем нельзя?
Это означает, что на самом деле можно, просто сразу это будет бесконечно.
Вот.
Поэтому, то есть, просто мы добавляем, поэтому в данном случае мы просто рисуем
такое ребро плюс бесконечность.
То есть, если нам нужно запретить какие-то конкретные расположения вершин по долям,
то мы просто соединяем ребро пропускной способности плюс бесконечность,
вот еще один полезный хак в построении сетей.
Вот. А ну вот, собственно, и все.
То есть, теперь заметим, что просто, то есть, мы будем искать минимальный разрез,
но при этом у нас оказалось теперь, что стоимость разрезов,
которые нас не устраивают, будет равна плюс бесконечности.
Поэтому минимальный будет найден среди, естественно, небесконечностей.
Так что вот такая вот приятная классика.
Такой вот достаточно классический, сколько у нас там времени.
Когда придумываете?
Вот.
И вот, тебе это стало быть на лекции рассказывали когда-нибудь?
Я не помню, как это, то ли я это неделю придумывал, то ли я мне кто-то подсказал.
Ну, в общем, это было больно.
Вопрос, что это вопрос на любое задание?
Нет, нельзя.
Это вопрос, почти любого задания на графе нестандартной.
А ну ладно, это вопрос вообще любого задания на потоке, в принципе.
Принципиально либо задачи вопрос, как это придумывали?
Ну, нет. Ну не знаю, конкретно тут, ну я не знаю.
Лишь, ну, пasst, в какой-то момент дошло, что задача.
В какой-то момент на контестинге в этот момент дошло, что задача на потоке
можно решать иведение вcoivings-meets, и разрезу этих потоков.
Я просто рассказываю, как я делаю.
Сейчас я ровно поэтому уже на второй лекции подробно рассказываю.
Потому что есть вот такой метод.
То есть попробуем построить сеть с подобного рода ребра.
Как это придумать с нуля, ну не знаю.
В принципе, если думать о том, что разрез должен быть ответ, то это не важно.
Я предлагаю это как метод решения задач.
Применим вот такой шаблон.
Я не очень люблю придумывания таких задач.
Потому что некоторые олимпиадники очень продвинутого уровня, так честно говорят.
Я когда вижу задачу, я просто перебираю в голове шаблоны, как можно решать задачу.
Если ни один не подошел, значит я не умею решать эту задачу.
Обжиг.
Ну вот все.
Это очень продвинутого уровня.
Я просто немного перебираю.
Может быть.
Есть подозрения?
Нет, ну есть такое ощущение.
Никто не сидит, явно не перебирает возможные варианты решения задачи.
Это не явно.
И по дороге еще что-нибудь перебирают нечаянно.
Ну плюс-минус, да.
Ну есть такое подозрение, да.
Чем подходит приятель?
Ну по камере конструктиве.
Сразу говорит, что такое подготовка, что надо делать.
На самый главный, как оптимально решать задачи на контестах.
О да.
Ну то есть я не знаю.
На самом деле на контестах, где действительно надо скомбинировать несколько там уже известных реальных идей,
тогда он начинает выигрывать.
А если подойдут в какой-нибудь контест, в котором надо придумывать что-то новое,
тогда...
Челые рассказы.
...могут быть правдя.
Нет, он по-разному.
А здесь, кажется, чего-то еще не хватает.
Чего тут еще не хватает?
Как это?
Тут хватает уже всего.
Мы некоторые вещи не записали, а просто рассказали.
Какие вещи?
Сначала сложить все отрицательные,
потом что-то вычислить.
Нет, это я проговорил.
Я говорю, рассказали, но не написали.
Рассказать-то рассказали.
Нет, почему? На самом деле все написано.
Ну то есть да.
То есть имея в виду, что вы решили взять все...
Изначально взять все хорошие лекции,
выкинуть все плохие, а потом думать, как подгонять.
То есть после этого...
Тут все нарисовано.
То есть если лекция бесполезная,
то значит ребро в сток.
Если лекция полезная, то ребро из стока.
И если кто-то кого-то блокирует,
то плюс бесконечность ребра.
Так что в этом смысле.
А, сейчас мы же...
А, там же вычиталось...
Там же итоговый ответ
это просто сумма всех
вот этих вот штук,
минус...
Итоговый ответ будет в итоге
сумма всех полезных штук,
минус разрезы.
Так что можно так.
Но на самом деле я все-таки не случайно
попытался это интерпретировать
именно здесь, потому что сейчас это нам пригодится
в сильно более сложные задачи.
То есть я не знаю, как на контесте
порешали задачу МАТА, если она кажетовалась
когда-нибудь на контесте.
Ну, именно на контесте, а не как сразу учебная задача.
Ну вот. То вот следующую задачу
ну, как в 2010 году, на полуфинале
никто не решил.
Сейчас раскатаем.
Ну вот.
А мы сейчас, возможно, сейчас даже
именно решим.
А не что?
А не я просто расскажу.
Было задача на парсочетание
с кодом там? Возможно.
Возможно, только я не скажу.
Ага.
Не помню.
Код бы замолк какой-то,
надо нажимать кнопки,
и если какой-то код стоп, надо еще один код, чтобы припытать код.
Нет, ну честно, я
еле не готов. Я слышал, но не понял.
Ладно. Задача.
Задача!
Там неориентированный граф.
Блин.
Так, к вопросу о нетривиальных задачах
в неориентированных графах, да?
Значит, задача такая.
Значит, есть краф, есть вершины,
есть, как всегда, там, N вершины,
M ребер там, ну, сразу скажу там,
вершины там 100, ребер 1000.
Давайте он планарный будет дальше.
Ну, это... Гиперграф.
Ну, давайте, ладно.
Нет, в смысле, что можно в нем потом будет скайдинг ваг.
Ой, кайф.
Правда?
Классно.
Так, ну, пока же.
Так.
Так вот.
Хочется
найти в этом графе
подграф.
Вот.
Ну, в котором будут какие-нибудь вершины
в штрих и ребре, и штрих.
Такие, что
модуль E штрих
поделить на модуль
E штрих
как можно больше.
Нет, нет, нет.
Нет, нет, нет.
Краф абсолютно
происходный, да.
Да, плотность ребер
определенная вот таким образом,
как можно больше.
Ага, ага.
Вот.
Ну, валент, в покином программировании задача
известна под, естественно, логичным названием
Hard Life.
Как назвалась
дэшка на персистенте 2-3
дерева?
Что ты сказал?
Не понял.
Да что-то тоже очень такого рода.
Где андерзадача?
Да.
Тут персистента 2-3 деревьев не было.
Ну, короче, я не помню.
По-моему, я слышал где-то эту задачу.
Ну, так.
Боял очень известный.
Правда, я говорю, это 10
год.
Наши веры.
А то и раньше.
А, нет, 10 в районе.
Нет, это не 10.
В 10-м году таких задач не было в полуфинале.
А где-то раньше были.
Она точно с полуфинала, но вот какого-то
такого лохматого года.
То ли девятого, то ли восьмого.
Вот.
Мне это напоминает задачу о цикле
максимального среднего веса.
И о том, что забинаем ответ.
А, ну, начать можно с этого, да.
И вычтем
среднее из каждого чего-то.
Ну, давайте
представить, все по порядку.
Давайте упомяну перед этим, что в спортивном программировании
известно как Hard Life.
А в МАУТе она известна под более цивильным
названием
Maximal Density Subgraph.
Это я просто беру
словосочетание, по которому вы кстати там
соответствующую коротенькую статью
от уже полюбившегося нам
Эндрю Вячеслава Голдберга.
Кстати, он не Вячеслав,
ну ладно.
Вот.
Я просто открыл статью,
он там почему-то
Эндрю Владислав.
Первую букву я запомнил.
Вот.
Да, он Владислав.
Ну, не важно.
Ладно, главный он Андрей.
Вот.
Это главное.
Вот.
И там можно найти коротенькую статью
собственно с описанием
на самом деле простого решения этой задачи.
Ну, как простого.
Ну, потому что идея та же.
Надо это свести к поиску
минимального разреза
минимального разреза в сети.
Подграб не похож на минимальный разрез
вообще никак.
У нас в прошлой речи
было какое-то подмножение.
Ну, смотрите. Казалось бы никак
не похож.
Но давайте внимательно подумаем.
Вот допустим,
что мы хотим провести разрез.
Вот давайте я даже
просто не так
сделаю.
Вот давайте вот попробуем
действительно это выяснить.
А то мало ли.
А то, кстати, с тех пор действительно
уже начинают встречаться там всякие задачи,
в которых это как под задачи используется.
Ну, как начинают там.
Я помню, я такую задачу еще в 14 году
разбирал.
Вот.
Ну, то есть просто все это вот.
Просто всем интересный паян.
Вот.
Так вот.
Значит, вот допустим, давайте у нас есть
как всегда доля ССТ.
И вот мы допустим говорим, что
вот это вот множество вершин
мы
типа берем.
То есть здесь вот.
То есть как у нас это часто бывает.
Тут берем.
А тут не берем.
Вот.
Ну, нужно, чтобы разрез был
равен собственно
отности.
Ну, вот давайте тут.
Во-первых, разрез, а во-вторых, давайте
начнем все, конечно, с того, что да.
Как-то редкий случай, да, мы тут
напомню, применяем бинпоиск
по ответу.
Вот сюда.
Ну, заметим.
Ну, кстати, заметим, что это не должно нас сильно пугать.
Потому что это, кстати, валидных чисел, которые
тут могут быть, и всего
сколько?
Вот.
Нет, их, на самом деле, е умножить
на в.
Кстати.
Вот. Ну, и чисто теперь
поэтому там, на самом деле, можно
после определенного
числа интеракции вы уже можете понять, что там
причем вот эти вот числа отличаются
друг от друга как минимум на 1 деликатовый квадрат.
Это еще даже не точная
не оценка.
Ну, вот. Ну, там действительно, там
либо вы уже аккуратненько находите
конкретное число, либо там используете
дерево штормопрока, ну, в общем.
Вот. Понятно. В общем,
в общем и прочее ваше там
называется шоу, это че проходили?
Ничего этого.
Ничего себе.
А тут, например, у Теренодилорта проходили,
а дерево штормопрока нет?
Как так? Интересно.
Ну ладно, ничего. Ничего.
Но это моя, но это отдельная
песня. Сейчас мы поговорим
о другом. То есть, нет, дерево штормопрока
конечно стоит хорошо обсудить.
Теперь вот внимание, вот для нас сейчас будет
интересно следующее. Причем, смотрите, блин, поиск у нас
будет именно вот в таком, вот в каком виде.
Нам жутко интересно.
Может, значит,
дано число С.
Справивается.
Существует ли
под граф, у которого
плотность, внимание,
именно, строго
больше.
Но заметим, это, ну тут
такой нот.
Ну тут действительно, если чуть-чуть
попреобразовывать, то это будет эквивалентно
тому, что С модуль
В штрих минус
модуль Е штрих
меньше нуля.
Ну мы что-то хотим что-то, но
поэтому теперь наша задача понять
может ли найти под граф,
у которого
вот это
меньше нуля.
И каким-то образом это
надо свести к
сети.
Ну то есть идея будет такая,
то есть нужно построить сеть, найти
в ней минимальный разрез, если
он окажется меньше нуля.
Но желательно, чтобы разрез
оказывался
чему-то подобному.
Если он окажется меньше нуля, значит окей.
Если он окажется ноль, ну ноль
наверно всегда можно как-нибудь будет взять, но тем
не менее.
Ну вот, если он окажется ноль или более, то
соответственно.
Вот. Правда, конечно,
даже в что-то случае шить такой разрез
отрицательно.
Ну вот, как мы уже сказали, по модулю того,
что если у нас отрицательные ребра будут
только торчать из устока или вести в сток,
то это нас устроит.
Начать можно с того, что
из каждой вершинки ребра
весом ц в сток.
Когда каждую вершинку мы добавляем, разрез
добавляет ц.
Действительно. Уже что-то.
Да, давайте. Действительно, проведем.
Действительно, вот у нас.
Ура, мы использовали ц. Уже успех.
Да, и хорошо использовали.
А теперь надо,
теперь у нас важный момент.
Теперь нам надо как-то проследить,
как учитываются ребра.
Так, вот тут ц, ц, ц,
ну и так.
Ну я, в общем, все
рисовать не буду, но суть, я думаю, понятна.
Так, ну теперь смотрите,
то есть на самом деле, какие
а теперь вот очень интересно, какие ребра должны
быть учтены? Вот здесь.
Внешне, к сожалению.
Каким-то образом.
Внешне даже.
Ну, то есть должны быть, нет, ну не только.
Во-первых, учтены ребра пересекающие.
Сейчас.
А, учтены.
А, вот эти ребра все должны быть учтены.
Все, которые именно в доле с.
Да.
А вот эти все ребра учтены быть
не должны быть. Да.
Сейчас придумаем.
Сема откуда проводим еще раз?
Из каждой вершины в сток.
Да.
Это буквально будет значить, что если
наша вершина оказалась в доле с,
то разрез задел еще столько
ребер веса с.
Да, да, да, да.
Во.
Значит, соответственно.
Значит, как же теперь
эти ребра учесть?
Ну, конечно же,
напрашивается идея.
Ну, во-первых, понятно, что, наверное,
придется единички рисовать, да?
Вот этих ребра, да?
И что тогда?
Да, хотя, действительно, что тогда?
Мне кажется, что эти ребра вообще в потоке
не участвуют как-то. Ну, да.
Ну, мы можем как бы вместо того, чтобы
вычитать е-штрих, привалять все остальное.
Это то же самое.
Вот, тогда у нас уже приправились ребра, которые
пересекаются разрезом.
А еще хотелось бы как-то прибавить ребра,
условно, которые справа от разреза лежат.
Да, ведь действительно.
Идея такая.
Вместо того, чтобы что-то вычитать,
хочется, конечно,
минус один.
Но идея оказывается такой, что
действительно,
чтобы вычесть все вот эти ребра,
действительно, нам нужно
на самом деле вычесть, можно сказать,
вычесть все ребра и прибавить те ребра,
которые не вычитываются.
То есть, которые все остальные.
Вот, понимаете, да?
То есть, так сказать, это
эквивалентно тому, что
c, значит, v-штрих,
минус
просто все ребра,
плюс
e, так сказать, 2 штриха,
где вот e2 штриха будет,
это равно e без
e-штрих. Это должно быть
меньше, чем
минус e.
А, нет, не должно.
Это все еще меньше. Да, все еще ноль, да.
Но теперь можно и ел бы. Да.
При очень большом желании можно еще
и перенести, но, правда, это уже
ну, то есть, понятно, что теперь надо вот
то есть, теперь надо, как,
ну, теперь
оказывается, ну, теперь, на самом деле,
насколько этот хрен
называется стал слаще речь?
Вообще. Ну, да, вообще, нужно такое же по...
Да, потому что теперь, да,
раньше надо было учитывать вот это, теперь надо учесть
все вот этого
и вот этого. Ну, допустим... Ну, хотя бы
если мы тут единичку нарисовали,
так,
единичку нарисовали, то, хорошо,
разрез учли.
Разрез учли.
Вот, то теперь возникает
такое внимание и вопрос.
А как же нам учесть
все?
Ну, вот, как же нам, на самом деле, теперь
учесть все ребра здесь?
Вот.
То есть, по сути, давайте
переформируем для этого так. Нам нужно
учесть все ребра,
так или иначе,
связанные
с
долей.
Вот, как же их учесть?
Что такое связанное?
Это означает, что инциденты
хотя бы одной из
долет, да? Все формально
говорим.
А может,
может, обеим нам тоже учтем?
Ну, давайте,
а вот действительно подумайте чуть-чуть.
Уже
на каждом христиане мы зайдем в
и пройдем из стока
в...
Так, на ребре?
Сейчас идея у нас как-то договорит.
Подумаем.
Сейчас.
Я просто...
Нам же надо учесть...
Кто-то хочет из стока провести ребро?
Да, типа, если провести
из стока
в ребро, в каждое ребро.
Ну да, там
не начнется там всяких проблем
в духе, что там... Мы можем, к сожалению, взять эту
вершину и унести ее с собой.
Поэтому нужно, чтобы там
был вес ночи, чтобы
каждое действие как бы ребро сразу так бы
не болело.
А вот как бы это запретено здесь?
А почему бы не сделать здесь веса по 0,5?
Тоже плохо.
Ну, потому что там, если
векшина сюда зайдет, сюда не зайдет, да.
Так.
Век.
Нет, по самом деле не век.
Сейчас, секунду, да просто в каждую вершину,
если провести ребро размера 1,
что произойдет?
Тогда мы... Тогда
количеству предпочитающих разрез добавится
количеству вершин. А, вершин, господи.
Можно за каждое ребро прибавлять к
какой-нибудь концам что-то, но...
Секунду, а что если привести в каждую вершину ребро размер
этот, его степень?
Ага, ооо.
Так, давайте.
Вот, допустим, мы вот вершину В
проведите... Да нет.
А вот давай смотреть внимательно.
Мы что-то учтем полтора раза,
но это отлично.
Сейчас, погоди. Вот давайте внимательно смотреть.
Давайте вот как в каждую вершину
проведем вот ребро ее степени.
А, это хорошо, потому что
каждый ребро справа будет
учтен два раза, каждый который пересекает
один раз за то, что пересекло, и еще один за степень,
окажется, кто слева ноль.
То есть, с точки зрения доказательства
это еще идеально.
Как это просто попало, да.
Да, ну вот оказывается это и все.
Че ты иди как-то? Че это никто не решил?
Не, оно что-то странное.
Вот, да, вот ты... Мы это проговорим все-таки.
Значит, вот давайте
значит, давайте теперь проговорим.
Значит, наша была цель, да? Ну, то есть, вот это вот
ну, давайте вот сведем. Значит, мы свели задачу к тому,
что вот нам нужно научить
мы строили сеть,
в которой хотели учитывать
вот это вот все.
Видим, да?
Значит, как мы построим теперь сеть, у которой
любого разреза, действительно,
пропускная способность будет в точности
в точности что? С
умножить до количества вершин в доле С
плюс количество ребер,
которые как-то связаны
с долей Т. То есть, либо
пересекают разрез, либо
находятся целиков в доле Т.
Ну, что же у нас тогда получается?
Нам не нужно теперь 2C проводить?
Да, на самом деле, сейчас нужно будет.
Значит, ну, давайте так. Идея оказалась
следующей. Значит, как мы строим сеть?
Значит, встроим на самом деле
мы сеть.
Значит, вот как.
Что мы, значит, чтобы
учесть вот каждую вершину со стоимостью
С, проводим вот такое ребро.
Видите, да?
Видите? Тогда, если вершина взята
в разрез, то добавлено ребро
С в разрез. Круто.
А если нет, не дано.
Как учесть ребра?
Ну, во-первых, как учесть
ребра?
Значит, все эти ребра
мы сделаем с той способностью
ну, ну, пока 1.
Тогда в разрезе у нас
учитываться, ну, естественно, не иритированы
мы их в обе стороны.
Тогда получится, что мы
тогда вот эти вот ребра,
которые пересекают разрез,
учтены по одного раза.
Чтобы учесть все остальные ребра,
заметим, что у каждой вершины
на самом деле просто есть вот
вершины В, связаны вот количество ребр
и мы сразу говорим, что
если вершина В
теперь находится вдоль Т, то
тогда
связанные с ней вот
дегатвы ребр, по-любому
будут, соответственно, нам
интересно.
Чтобы это учесть, мы проводим вот такое
ребро дегатвы.
Но теперь оказывается, что нужные нам
ребра, правда, вот маленькая оговорка,
учтены, но учтены
вот эти ребра теперь учтены ноль раз.
Вот ребра, которые находятся в этой доле.
Но теперь оказывается, что ребра,
которые пересекают разрез,
они учтены теперь не один раз,
а два.
Почему? Потому что они учтены
как вот это ребро в разрезе,
так и одна из единичек
из дегатвы учтена здесь.
Но с другой стороны, замечем, что
если ребро лежит целиком
вдоль Т, то оно тоже учтено
два раза, как единичка с одного конца
и как единичка с другого.
Вот.
Поэтому все, что нам остается,
это как-то вот этот конкретный
вклад от
дегатвы как-то
уменьшить в два раза.
Либо цевридж...
Ну то два раза, да.
Но самое тупое, что если мы хотим,
чтобы ребра суммарно учитывались один раз,
ну как сейчас кажется, идеи на проще,
действительно, просто везде 0,5.
0,5, 0,5 и так далее.
Тут 0,5.
И самое главное, дегатвы тоже пополам
обратите внимание.
Да, никаких единичек.
0,5, 0,5, 0,5.
Вот.
Ну и тогда это вот максимально точно.
То есть, конечно же, там,
ну у автора, конечно, в статье,
как говорится, то есть автор там предлагает
называется, конечно, скорее тут двойку ставить.
Но если совсем честно, автор, конечно,
не совсем в этой терминологии мыслил.
Ну, точнее, мыслил он может
и в этой терминологии,
тут стоит понимать, что у него была задача
дать задачу, рассказать решение.
И решение там по принципу
давайте построим сеть
и там вот, и там пишет
заклинание.
Вот. Что тут дег, но правда вот,
правда у нас, кстати, с вами немножко по-другому
даже получилось, потому что у него там
что-то...
у него там что-то было M,
минус что-то там, плюс еще что-то там,
и так далее.
Нет, внутри сети.
Так.
Так, сколько у нас там времени?
А, три минуты. А, вот давайте я вам
пусть покажу.
Мексинал.
Денсити.
Церковь.
Церковь.
Ну вот.
То есть, в принципе, сразу
то есть, в общем-то,
на статье, в общем, старая,
на самом деле, достаточно
уже видно, да?
Так, увеличить там
её надо?
Пока ты живёшь, ты да.
Вот так.
Вот, вот, вот, вот.
Ну вот.
Ну вот.
Ну вот.
Ну вот.
И он кайф.
Наконец-то
нормальное писание.
Ну, видите,
у него сеть вообще
немножко другая получилась
давайте расшифуем
новые вершины, это вершины старые плюс
сток и исток
е, н, это старые
ну Рёк да
что такое с штоком
ж, а вот тот самый
бинпоиск
значит
giving a guest j
нам вот очень хочется
так, значит вот, смотрите
в описании, у нас заброс
мы строим сеть и пытаемся понять
вот
то есть можно ли построить плотность
типа j или больше
ну и в данном случае вот он предлагает
ну то есть j тут с плюсом
но правда видите, то есть
то есть так
ну вот, то есть, ну видимо он может по-другому мыслить
потому что, ну например
бог скажет, что давайте скажем, что у нас
в доле t например, то что мы берем
а в доле с не берем
хотя странно
вот, видите
то есть вот, ну он там сразу уже может быть
съедает этот вот лайфхак с прибавлением
отрицательных стоимости, вот просто прибавляя
вот с s3, вот видите
прибавляя по m
вот, ну то есть
менять это по-видимому
по-видимому мы с вами просто придумали
другое решение, а m это что?
конечное время
ну и соответственно
ну и соответственно да, ну 2g
может догадались с какой примерной целью
ну просто видите, то есть построена так вот
устроим вот такую сеть
и дальше
спасибо
ну нет, не страшно
это просто
в общем, просто теория
да, что
теория
то есть теория, что
это то, что надо
вот, теория, вода
доказательства
вот, как это придумать, ну
как это придумать, в научных статьях
сейчас вот такой вопрос опускается
а дальше еще 9 секунд
нет
а, связас
не-не-не, ну дальше вот
а, дельта, да-да-да, справедливо
да, дальше как раз говорилось о том, что бинпоиск
в общем-то до бесконечности делать не надо
то есть просто если у вас
ну то есть на самом деле, конечно, если вы делаете
бинпоиск на рациональных числах
то существует дерево штарино-брокко, которое там
позволяет вам делать это если не за логарифом
то за логарифом в квадрате уж точно
на самом деле
ну вот, ну правда
но в данном случае можно и
ну на самом деле
это да
где штари-брокко там
нет, в смысле здесь
а зачем вообще дерево
почему бы
не добиться точности
на н на n-1
это все равно типа логарифм
v плюс логарифм e там
и какую-то конструкцию
потом просто найти в ближайшее
рациональное число со знаменателем не больше v
да-да
который ищется с помощью дерево штарино-брокко
ну можно и без него, там есть
в смысле там
честно, много вариантов
ну так-то да, так-то да
ну в общем это и неважно
можно хоть это в эту
да-да
ну можно, ну по-разному
в конце можно заметить, что да, даблы
в общем-то точность тут
сильного значения не имеет
поэтому
не супер
ну и суть
это уже все такие мелочи жизни
научная статья
а вот m соответственно
а кстати мы же умеем
получать ответ
в смысле, можно даже не искать ближайшее
слово, можно просто
получить разрез
на какой-то итерации
типа посчитать количество
ребрик и сушим
на самом деле да
на самом деле
да
так, ну что
ладно, еще вопросы есть?
дальше дыркуем
ладно, ну думаю
я планировал так
можно пойти покушать, а тогда
по перерывам мы займемся
собственно технологией прихлоп
