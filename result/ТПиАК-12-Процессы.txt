Империруем обе, два исполняемых файла, запустили, запустили
вторую.
Что произошло?
Первая программа записала поверх второй.
Но это в каком порядке они сработали, зависит от
общего результата.
По один запустили, вторую запустили, одна завершилась,
вторая завершилась.
Осталось только то, что записал вторая, в прошлом
случае у нас был кусок от одного от другого, потому
что вторая записала более длинный пик.
То есть, не очень хороший метод, когда мы можем взять
и заселить данные соседа.
Значит, нужно искать какие-то другие варианты межпроцессного
взаимодействия.
Ну а зачем это нужно?
Вот у вас есть какая-то система, которая обходит
стоять нескольких процессов, и они между собой должны
как-то общаться.
В том числе, для того чтобы не писать одновременно
в один и тот же файл, или в область памяти не делать
какое-то действие вместе.
Кстати, некоторые из ваших анагруппников уже стали
устраиваться на всякие работы и на собеседованиях
и примерно это иначе спрашивать.
Мы поставим файл.
Вместо этого мы можем передавать друг другу
данные по некоторой трубе или файлу.
Эту абстракцию предлагает нам файловая система в
отличие от файла, где мы можем многократно прочитать.
Как только мы прочитали с другой стороны пайпа,
эти данные оттуда пропадают и читается только один
раз.
Берет и некоторую строчку, пытается создать файл.
Если операционную систему дает, тогда туда пишет.
Причем интерфейс ровно такой же, как работа с файлом.
Затем читает из этого файлового дескриптора и смотрит, что
произошло.
Опять слегка поругались.
Но это не так интересно, если программа общается
сама с собой.
Это полезнее, если общаются разные программы, но откуда
они лежали из две разных, они размножаются при помощи
форков.
При этом все файловые дескрипторы, включая Pipe, они наследуют.
После этого размножаемся, проверяем, что успешно размножились.
Один файловый дескриптор закрываем, ребенок закрывает
первый, родитель пишет первый, ребенок читает
из нулевого.
Отработал родителей, тем ребенок, и эти два процесса
работают параллельно.
Но чтобы их слегка анатомировать, делаем ту же самую задержку,
например, при помощи сканфа.
Обратите внимание до того, как мы с вами туда запишем.
Скомпинировали, запускаем.
Через некоторое время отработал и ребенок.
А вот теперь мы запустили программу и число пока
не вводим, чтобы посмотреть, что же у нас происходит.
Интересно, какие у нас есть процессы.
С именем аут.
Два процесса с номерами 30 на 3043 и 30 на 3044.
Что у нас есть в файловой системе ProDs про эти процессы.
Это не файлы на диске, это такой способ общаться
с ядром операционной системы, конкретно линуксом, и получать
какую-то информацию.
Какие у нас файловые скрипторы есть.
Процесс номер 31 на 3043 имеет несколько файловых
скриптов.
Нулевой, первый, второй.
Вспомните, а что же это за файловые скрипты такие.
Нулевой, первый, второй, которые обычно с процессом
связаны.
Стандартный поток ввода, стандартный поток вывода
и стандартный поток ошибок.
Все у нас связано с консолькой.
То есть, читая все с консолем, выводится в консольку.
А четвертый это pipe, это та самая труба, через которую
они общаются.
А из девайсов это терминал, давайте туда что-нибудь
напишем.
О, вот нам в терминалку пришло, а что это?
Да, в UNIX у нас все файл, левый процесс.
Хороший вопрос, а у нас есть еще один процесс.
Процесс номер 31 на 3044.
Как вы думаете, а в каких отношениях состоят эти
процессы?
31 на 3043, 31 на 3044?
Точнее так, 31 043 это родитель, 31 044 ребенок, по простому
принципу причинности.
Теоретически бывает, но в исходном тексте,
ребенок закрывает первый дескриптор, родитель закрывает
нулевой дескриптор.
Вот поэтому нулевой, первый, второй у них есть, а из новых
файловых дескриптов, третий, четвертый, из которых ребенок
оставил себе третий, родитель оставил себе четвертый.
Просто из исходного кода нашей программы.
Так, Аш, что будет, если мы в...
третий файл, ему что-нибудь напишем.
Да, на самом деле они оба ожидают ввода.
Итак, эволютирующая строчка вместо хэллоу вольт оказалась,
а что будет?
Вот мы написали его в pipe, в трубу вместо...
Точнее, мы написали первым, потом родитель, который
просто стоял и ждал, пока мы ведем число с scanf, написал
еще, но до этого ребенок прочитал первый, попавшись
из этой трубы, в данном случае то, что написали мы, и завершилось.
Запускаем еще раз.
Мы в прошлый раз писали ему третий хэллоу скриптер.
А если в четвертый?
Ну, то же самое, ребенок о, а в четвертый дальше хэллоу.
Кусочек остался, потому что мы читаем просто ровно
14 символов.
Поэтому мы прочитали вот этот кусочек.
Ну, точнее, ровно 14 байт.
А то, что эти байты можно интерпретировать как некий
текст, это уже наша проблема.
В принципе, существуют и двунаправленные пайпы,
но у люкса они обычно однонаправленные.
Однонаправленные есть, например, в Solaris.
Ну и как, удобно ли общаться через такую однонаправленную
трубу?
Ну и хорошо, делать две однонаправленные трубы
в одну сторону и в другую.
В принципе, для общения этого достаточно.
Главное, данные в одну и в другую стороны проходят,
а дальше реализую любую логику на них самостоятельно.
Какие еще абстракции нам могут пригодиться?
Помимо потока байтов.
Первых, нам охота общаться с неродственным процессом.
Не просто унаследовать файловый дискритик.
Мы можем сделать FIFO, в сокращении от First In, First Out.
Общаться через него.
Обратите внимание, как генерируется по имени файла.
Почему мы не можем позапустить программу повторно?
Потому что у нас уже есть файл.
Такой специальный тип файла, FIFO.
На диске он нигде не хранится, просто читает что-то.
Но оттуда можно читать и туда можно писать.
Как только прочитали, убираются.
А вот таким способом мы можем повторно удалить файл.
Помимо последовательной передачи данных, есть еще возможные варианты.
Например, мы хотим общаться в поизвольном доступе.
Мы умеем работать с оперативной памятью.
Помним про адресную арифметику.
Как только у нас есть адресная арифметика, мы можем на ней сделать свой аллокатор.
Который вы писали в контесте Илье Семировича.
И расположить любые данные, которые вам нужны.
Поэтому нам нужно, чтобы кусочек памяти между двумя процессами был общий.
Любой может читать, любой писать.
Ну а каким образом они будут значить кусочек у них общий?
Операционная система, благодаря поддержке со стороны процессора,
позволяет каждому процессу иметь свое отдельное адресное пространство,
которое не присыпляется с другими.
И то, что какой-то кусочек памяти у них у нас будет общий, это будет не совсем стандартное поведение.
Мы генеруем ключик из имени файла.
В сам файл ничего у нас не записывается. Делать все из имени.
Вспомните немножко алгоритм RCA, который вы вам рассказывали в прошлом семе.
Там аналогично генерируется ключик.
Самое главное, чтобы не обмениваясь самим ключом, две стороны сгенерируют один и тот же ключ.
Ну или, допустим, пару ключей для зашифровки и расшифровки.
Ну а затем, возможно, на основе этих ключей,
быстренько обменялись одноразовым ключом для симметричного шифрования,
дальше продолжили общение.
Здесь тот же самый принцип.
Из одного и того же имени файла генерируется один и тот же ключ.
И с помощью него можно будет взять и добыть кусочек памяти.
Ключ нам нужен для того, чтобы несколько программ,
запросивший этот кусочек памяти и желающий общаться друг с другом,
получили один и тот же кусочек в общей владении.
Заказываем, указывая размер, сколько нам нужно.
Для отчтения записи при отсутствии создаем,
если не удалось, то смотрим по переменной ErrorNumber.
Не может создать или не может найти.
После этого оттачиваем наш массив и кусочек памяти
и что-нибудь напишем.
В нулевой элемент считаем сколько
у нас.
Сколько записывается одна и вторая программа.
А еще вы должны понять.
Мы первые, кто нашли этот кусочек памяти или нет.
По умолчанию считаем, что первые.
Если мы не можем создать этот кусочек,
потому что он уже существует,
тогда мы не первые, кто-то этот кусочек уже использует.
А в нулевой элемент запишем суммарное количество.
Сколько запускалось первая программа.
Первый элемент массива сколько вторая.
После этого мы больше не хотим привязывать наш массив
к этому общему куску памяти.
Он будет существовать отдельно.
Вот она наша память.
И где же она лежит?
До этого мы можем воспользоваться командой ipsys.
Видим, что многие программы у нас здесь используют
разделяемую память.
Пабличка здесь немножко съехала.
12 байтов.
Это подозрительно.
Вот она у нас кусочки по 12 байтов.
Которым никто не приотачен.
В Unix time, то есть в дубе в секундах прошедших
с 1 января 1990 года.
Время доступа.
Время создания.
А вот эта, вот эта.
И можем взять удалить что-нибудь.
Мы можем удалить кусочек разделяемой памяти.
По своему ID-шнику.
Такого кусочка разделяемой памяти у нас нету больше.
Давайте снесём её второй.
Ну вот программа начала работать заново.
Снова создала кусочек разделяемой памяти.
Обратите внимание, даже после завершения программы разделяемая память осталась.
Да, может хочет генерировать ключик и по нему залезет ещё ко что-то.
Видите number of attach? Никто не приаттачен.
Вот вторая программа, которая генерирует ключик из того же имени файла.
Получается такой же кусочек и пишет ровно стол за кусок.
Мы можем её так же искусственно затормозить и прежде чем она отцепится от нашей оперативной
памяти с помощью SM detatch.
Искусственно замедлим провод с помощью сканфа.
Перекомпилируем, запускаем.
Прячем её в бэкграунд, нажатим CTRL Z и видим вот у нас кусочек разделяемой памяти.
Доступна всем на чтении запись.
Обратите внимание, как типичные кусочки разделяемой памяти, которые используются
процессами, которые у меня на ноуте запущены, право на чтение запись только для владельца.
Давать всем это небезопасно. Но зато мы хорошо видим, какой кусочек памяти точно наш с
небезопасными правами размером 12 байтов, и вот у нас одна программа к ней приаттательна.
Одна программа, которая в бэкграунде ждет, пока мы ведем число.
Вызовем ее на передний план. Введем число, программа перестала ждать.
Количество сегментов разделяемой памяти, но обратите внимание, в отличие от пифо,
которое у нас создавалось и дальше его создать было нельзя, мы можем спускать нашу программу
многократно.
Но поскольку ключик один и тот же, мы доступаемся к одному этому же кусочку оперативной памяти.
Теперь мы хотим чтобы
вся память была общая. Для этого у нас есть, помимо процессов, потоки. У процессов все раздельное,
а трэды это куча студентов живущих в общей жизни. У них все общие, вся оперативная память в них
общая. Все переменные общие, но только регистр разный. Вот наша основная функция.
Ждаем поток. Порсик Стрэд Креит. Выясняем кто мы такие. Что-нибудь вычисляем, присоединяемся и
ждем пока трэд завершится. Ну а в самом трэде просто увеличиваем переменную, которая у нас
глобальная и доступна всем. Что же у нас такое произошло? На нас компилятор ругается. На что
он на нас ругается? Что заголошный пал опять забыли?
Условь по трэд аж. Есть по трэд аж. На что он на нас ругается тогда? А не нашел у нас линковщик,
то есть компилитор и вот это все скомпилировалось в объектные файлы, но линковка не произошла.
Понимаем как мы делали библиотеку. Прилинковать библиотеку по трэду. Вот это уже действительно
библиотека, а не заголошный файл. Вот у нас родилось по два трэда. Каждый увеличил число.
Ну и в каком-то порядке не успели вылезти.
А что будет если мы не будем дожидаться окончания потока?
Какой-то из них успеет вывезти. Может скажет что 1, может скажет что 2.
То есть поведение у нас становится неопределенным.
Зависит от нет случайности как это трэду будут выполнять.
Ну а в этом примере мы используем разделяемую память и много раз у нее что-нибудь пишем.
Почему она много работает? Потому что там большой большой большой трэд.
А здесь мы тоже генерируем ключик из имени файла. Добываем унификатор разделяемой памяти.
Запускаем.
То есть операция у нас относительно долгая.
А если мы эти программки запустим параллельно?
Причем долго они не ожидают из-за ожидания ввода-вывода, а из-за вычислений. Мы сделаем большой большой цепь.
Запустили.
Запускаем снова.
Ну а смотрите программа 1 запустилась 6 раз, программа 2 5 раз. Итого сколько?
Почему-то 10. Почему? Как-то удивлены медсестра. Как же так? Что нам программа ругается?
Потому что у нас две программы пытались параллельно писать в один и тот же кусочек атеротивной памяти.
Ну и поведение языка неопределенное.
А когда у нас результат работы двух независимо работающих программ будет однозначно определен.
Вот допустим первая программа читает данные множество R1 и пишет множество V1.
Вторая программа читает данные R2 и пишет множество V2.
При каком условии на эти данные они друг другу гарантированно не переберутся и результат будет определенный независимо от пресса запуска.
Ничего? Хорошо проверяем. R1 и R2 пересекаются могут?
Значит V1 и V2 не пересекаются.
R1 и R2 могут?
То что они читают.
Хорошо R1 и V2 могут?
Р1 и V1 пересекаться могут?
Могут, но тогда уже программа сама разберется с ними.
Даже если вы запускаете одну результат от этого не изменится.
Он все равно будет определен.
R2 и V2 тоже.
А R1 и V2.
То есть мы не должны записывать то, что пишет другая программа.
Вот такое вот условие.
Ну и называется это условие Бенстайна.
Однозначности того как работает программа.
Теперь задачка похожа мне.
В жиль были у нас китайские философы.
И после очередного симпозиума решили поесть суши китайскими палочками.
У них есть большой большой круглый стол.
В основном сидят эти философы по кругу.
Перед ними лежат суши.
Между каждыми двумя философами лежит по китайской палочке.
Весно, что они едят двумя палочками.
Им нужно взять в правую руку палочку, в левую руку палочку.
И тогда они смогут ехать.
А как вы думаете, как могут развиваться события?
Так каждый философ берет палочку справа.
И ждет пока заводится палочка слева.
Бедные философы умерли от голода.
Хорошо, а как их наиболее быстро накормить?
Набираться с нуля или соединиться?
Не обязательно.
Но оно по крайней мере целое.
Иначе это будет слишком жестоко.
Возьмем какого-то философа, назначим его на левую.
Введем понятие направо.
Занумируем всех философов.
После этого могут ли поесть все чётные?
Дискриминация.
Дискриминация по принципу чётности.
Значит кто смог поесть?
Хорошо, чётные не смогут поесть, а нечётные.
Так, нечётные цапают палочку справа,
цапают палочку слева, едят.
После этого поели.
Считаю, что они съели не все суши.
Что остальные останутся не голодными.
Положили две палочки.
Что можно делать дальше?
Ну, допустим, все чётные, за исключением может быть
последнего, если изначально было нечётное число.
Допустим, четвертый сосед с нулевым.
Взяли по палочке и едят.
И наконец, третьим этапом, тот несчастный,
последний философ,
надеется, что так же съели не все суши и доедает.
Видим, что в худшем случае,
при эффективном алгоритме,
три времени обеда.
В худшем случае, без эффективного алгоритма,
у нас бесконечное ожидание.
Или демок.
Так и с взаимодействующими программами.
Если одна что-то захватила,
и при этом другая не даёт,
тогда демок.
А нужно ли вообще что-то захватывать?
Судя по примеру, вот с этой программой.
Имеет смысл хранить там посуду,
и при этом писать в неё эксклюзивно?
Вот смотрите, 6 плюс 5 равно 10.
Сломалось.
Из-за того, что мы параллельно писали,
что-то прочитали, данные изменились,
а мы тем временем записали.
Ну и данные оказались некорректны,
как у той медсестры.
Или мы писали параллельно файловую систему,
и записали данные на один и тот же кусочек нашего диска.
Ну или диска уже по современному СВ,
по прямоугольничке.
Запустим снова.
7 плюс 6, 12.
7 плюс 6, 13.
8 плюс 7, 14.
8 плюс 7, 15.
Они одновременно прочитали, одна изменила,
другая ещё не знает об этом изменении.
То есть есть какие-то места, которые критичные.
Вот я здесь копаюсь,
не мешайте.
Это такие специальные таблички,
которые вешают на электрощитную систему.
А когда проводка что-то делает,
не включать, обводы видят.
А возможно,
вы ездили на МЦД
и видели,
что переда почему-то,
несмотря на весь головолёт,
который сейчас,
умудряется не сталкиваться.
Как они догоняют друг друга,
то догнали бы друг друга,
сказали, что ты меня подрезал на рельсах.
Я тут пассажиров везу,
в лучшем традиции,
в маршруте.
Что же им мешает?
Там есть система централизации блокировки,
целая,
а элементом, который одним из элементов
является светофор.
А раньше,
когда эффективных
источников света не было,
использовался семафор.
Ну и название такое
сохранили.
Ну и название такое
сохранили.
Ну и название такое
сохранили.
Ну и название такое
сохранили.
Ну и название такое
сохранили.
Ну и название такое
сохранили.
Ну и название такое
сохранили.
Ну и название такое
сохранили.
В частности,
есть средство
межпроцессного взаимодействия семафор.
А в данный момент
все семафоры
у нас, ну никаких семафоров у нас
в 6-мине нету.
Ну а где можно использовать?
Например,
может быть вы
замечали,
как P-Judge
на больших контестах
не очень быстро проверял. А почему?
Ну нужно точно
замерить время исполнения программы.
То есть проверить, что никто
в это время никто ничего не делает
другой, не конкурирует с вами
за шину данных, не конкурирует с вами
за доступ к риску.
Поэтому используется
семафор, который запрещает
взаимодействовать,
запрещает запускать другую программу, пока
не тестировался первая.
Для
точности вы создаете
эти эксперименты.
Ну а поскольку уже
был звонок,
и скоро придет следующий лектор,
то семафоров уже в следующий раз.
Ну
на железных дорогах
да, такая вот
поворачивающаяся палка
сейчас на железных дорогах она уже
не используется.
Там сейчас современная автоматическая
блокировка с тональными цепями.
Благодаря ней более-менее приличные
интервалы, особенно метро.
В полторы минуты между
переданиями.
Но звание
в операционных системах
сохранилось в историческом режиме.
То есть
можно тебе ехать или нельзя.
Вот это уже будет
на следующий раз.
