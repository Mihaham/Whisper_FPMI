Сегодня мы говорим о решении нелинейного, в данном случае скалерного уравнения
методом Ньютона. Вот его формула. Я его немного ранее поучил как метод с выбором
оптимального интервационного параметра и как метод линеризации. Его еще называют на самом деле
методом касательных. Это откуда идет? Это касательная линеризация, понятие, понятно,
близкие. Положим, что у нас вот функция имеет вот такой вид. Мы выбрали какое-то начальное
приближение у ноль. Вот опустили перпедикулярно на нашу функцию. Это f от o. И проводим касательно до
пересечения с горизонтальной осью. Это будет первое приближение. Далее опять проводим перпедикулярно
до пересечения с функцией и ведем по касательным. Приближаемся к нашему решению, к нашему решению
со звездой. Мы его назвали на прошлой лекции сасонарной или неподвижной точкой. Но на самом деле
я напомню, да, действительно, точка z называется сасонарной или неподвижной, если вот такое
уравнение имеет место быть. Но если есть у нас последователь, с которой стремится к точке z,
ее называют предельной или притягивающей точкой отображением. Мы начали с понятия отображения.
Ну вот, поэтому мет мютный еще имеет третье название, мет касатель. Ну, в принципе, это,
конечно же, одно и то же, хотя вот названия разные. Так, идем дальше. Так, давайте чуть позже я вам
расскажу о том, что мы делаем в случае системы уравнений. Это пока о скалерном уравнении мы говорим.
А сейчас я для скалера уравнений, для простоты, как раз отвечу на тот вопрос, который вы мне
задали совершенно правильный, как раз о сходимости метда ньютна. Это очень важный вопрос, принципиально
важный. Поскольку мет ньютна действительно оказывается быстрее, мет да простой итерации. Почему?
Ну почему, сейчас я как раз расскажу, а потом вы мне, если вдруг я забуду, напомните о системе
уравнений, как мы будем решать систему уравнения мет на ньютна. Он тоже позволяет решать систему
уравнения. Алгоритм тоже как все гениальное, то есть не как все гениальное, но как гениальный метод
простой. Но, конечно, в вычислительном плане это не всегда просто. Его упрощали этот алгоритм,
поскольку если система высокого порядка, то она забирает много машинных ресурсов. Если не высокого
порядка, конечно, проблем никаких нет. На вашем персональном компьютере учебном вы можете там
решать, ну, по крайней мере, до десяти уравнений без проблем. Когда уже сотни уравнений там, уже
возникают проблемы с чистого учлителя технически. Так, идем дальше. Итак, вот что же нам нужно от
функции и от начального привлежения, чтобы мет ньютна сходился. На этот момент есть теорема,
есть теорема следующая. Здесь ее нужно будет доказать, но доказана, к счастью, быстро,
но вот суть ее крайне важна, крайне важна. Пусть наша функция, пусть будет скамерная функция,
просто можно доказать такую же теорему и для системы уравнений. Там просто придется брать
производные. Более сложный, я самый простой вариант предлагаю. Пусть эта функция имеет
первопроизводную, также она имеет величину вот такую обратную первопроизводную. Существует
обратная величина первопроизводной. Далее, вторая производная у нас ограничена некой
константой С2, но если я ничего дополнительно не оговариваю, я буду предполагать, что константы
имеют порядок по большой от единицы. Я напоминал вам, что если числа малые или большие, я буду
оговаривать, поскольку это сильно. Это производная и обратная от нее. Нет, это не производная обратная
функция. Это единица делить на f'. То есть это не обратная функция. И следующий момент, это уже
четвертые условия. Вот эта самая функция f' от у в минус первой степени. Модуль ее меньше не равен
тоже некой константе С1. То есть вот эта единица производной по модулю тоже ограничена некой константой.
Это еще не все. Если мы хотим получить быстрый террасонный процесс, мы должны быть готовы,
потому что обязательно будут какие-то подводные камни в виде ограничений. Но это все вычислительные
меды, которую бы мы не взяли, все имеют какие-то подводные камни. Их нужно хорошо знать, иначе вы
можете взять интегральные пакеты, заложить константы в стандартную программу и получить
там полный абсурд. Это очень просто делается. И следующее ограничение накладывается на начальное
приближение. Оно имеет такой вид. С1 на С2 квадрат на f' от у ноль меньше единиц. То есть это ограничение
на начальное приближение. Стоти говоря, вот в методе простой террасы я о таких ограничениях вам
не говорил. Но, правда, там ограничение есть другое и очень серьезное. Ограничение на производное,
которое должно быть строго меньше единиц. Это очень сильное ограничение на самом деле.
Вот. Ну, кстати говоря, в обратной функции. А вот положим, у нас интерракционный процесс,
и в правой части стоит функция с производной больше единиц. Что нам делать? Бросать или решать
это уравнение или как-то все-таки можно его решить? Я подсказку дал, точнее вы мне подсказку дали.
Пусть будет нет простой террасы без параметра. Просто ука плюс один равняется f от ука,
но производная этой функции больше единиц. То есть процесс расходится. Можете что-нибудь решать
это уравнение или нам поднять руки вверх, сказать мы решить не можем. Правильно, только какое? Я ж не
зря вот это подсказал насчет обратной функции. Слово сказал. Если производная прямой функция f будет
помочь для большей единицы, то производная обратной функции будет какой? Меньше единицы. Поэтому
берете другую последовательность с обратной функцией и решаете это уравнение. Не могу сказать,
что это всегда проходит, но по крайней мере для скалерных уравнений проблем нет. С1 в квадрате
это вот эта вот константа, которая ограничивает обратную величину от производной. Вот здесь давайте
я докажу. Доказательство к счастью очень такое короткое, но оно важное. Давайте я это покажу,
просто доказательств нам нужно будет в дальнейшем. Доказательства. И так у нас есть функция f ука
плюс один. Здесь у меня провода. У нас был перерыв, а вы промолчали. Будем считать,
что перерыв мы отработали. Давайте будем так считать. Понятно, что это как я уже писал,
это есть f от ука плюс некая дельта к. И опять давайте линеризуем эту функцию. То есть f от ука
плюс f3 от ука на дельта к и, естественно, плюс вот на этот раз я не буду пренебрегать. Вот
этим членом второго порядка малость, его большое. Как раз сейчас вот для того,
чтобы показать сходимость, нам нужна будет погрешность. Естественно, сходимость зависит
от того, как будет вести себя погрешность с каждой итерацией. Будет ли она расти,
убывать, либо она будет ограничена какой-то константной порядка у большой от 1. Это важный
момент. В методе Ньютона, как мы уже говорили, это мы полагаем просто равным нулю. Вот эту сумму f
плюс. И поэтому пишем, что модуль f от ука плюс один меньше не равен. Вот как раз наша погрешность.
Большой от дельта к квадрат. Это как раз оценка погрешности на k плюс первой итерации. Она нам
важна. Из нее мы будем исходить. Что такое эта погрешность? Понятно, что здесь будет вторая
производная деленной пополам. То есть мы меньше или равно пишем c2, поскольку c2 это ограничение
второй производной. Мы сразу можем это написать. А дальше, что дельта к в квадрате. Мы же знаем,
что такое дельта к. Это есть f от ука, делаем на f штрик от ука и все это в квадрате. Только давайте
я лишь не сутру, это уже мешает. И все это в квадрате. Вот что мы получили. На этом мы не
остановимся. Посмотрите, что мы еще можем. Как мы можем упростить это выражение. У нас же есть
ограничение на вот эту величину. Обратную производную. То есть мы можем взять что-то меньше
или равняется c2. Это что такое? c1 в квадрате и на f от ука. Вот что мы получили. То есть производная
функция на k плюс первой итерации, которая нам хотелось бы, чтобы побыстрее стремилась к нулю.
Вот так можно ограничить c2 на c1 в квадрате и на f от ука. То есть назначение функции на
к этой итерации. Ну конечно же, немножко можно еще упростить это выражение. Положив f от ука плюс
один, это считает, что это есть погрешность на k плюс первой итерации, ее можно обозначить rk
плюс один. Давайте напишем здесь наверху. rk плюс один, это есть модуль от f и k плюс один.
Естественно, это погрешность на k плюс первой итерации, которая отлична от 0. А что такое f от ука?
Это есть погрешность на k этой итерации. rk это есть модуль f от ука.
Поэтому мы переписываем наше соотношение в следующем виде. rk плюс один. Меньше не равняется.
Давайте так напишем c на rk в квадрате. t это будет произведение c1 в квадрате на c2.
Но посмотрите внимательно, это простенькое виду неравенства.
Вот именно по этой причине метанютная имеет такую огромную популярность. То есть и он имеет
квадратичную сходимость. То есть если мы говорим просто медленно простой итерации без выбора
итерационного параметра, без всяких хитростей, он имеет сходимость, вообще говоря, первого порядка.
Здесь сходимость второго порядка. Поэтому он сводится быстрее. Вот из-за этой двуечки, из-за квадрата.
Вот теперь здесь, кстати говоря, при выводе я использовал почти все наши предположения о наличии
первой производной, о ограниченности второй производной, о существовании единицы делить на производную и на ее ограниченность.
Я все использовал. Я только чего еще не использовал? Последнего условия, который я вам написал, его еще не было.
Оно принципиально, на начальной данной. Почти. Ну, я на самом деле почти доказал.
Вот это вот соотношение, это есть почти доказательство ограничения на начальное приближение.
Но давайте я все-таки доведу до конца, чтобы было все понятно. Как можно показать последние ограничения
на начальное приближение? Ну, давайте вот напишем такую последовательность, неравенность.
R1 меньше, R равняется C на R0 в квадрате. Начну сначала. Что в квадрате?
Откуда этот квадрат? Это есть ничто иное, как дельта К в квадрате. Дельта нам известна.
А, в самом правом смотрите. Смотрите, C2 оставляем, а единица делит на F шторих на УК по модулю.
Я стерк. Меньше равняется C1. Поэтому здесь появляется, я вместо вот этого квадрата этой величины поставил C1 квадрат.
А, вот здесь все правильно. Ну да, я пытался написать, но уже доски не хватило. Все правильно.
Квадрат этот я вот как бы сюда перенес. И дальше R2 у нас будет что меньше,
больше равняется C на R1 в квадрате. Это будет ничто иное, как C в кубе на R0 в четвертой.
Ну и так далее. Я могу продолжать эту последовательность дальше.
И если я захочу оценить погрешность наката итерации, ну, немного преобразовав выражение,
то у меня будет следующее. Это вы легко сделаете без меня. C1 на C на R0 в степени какой? 2 в степени К.
Вот такое выражение будет для погрешности наката итерации. Телец начальная погрешность R0.
2 в степени К. То есть на самом деле погрешность убывает довольно быстро, в чем есть преимущество метода Ньютона.
А теперь давайте развернем вот это. Так, значит, смотрите, 2 в степени К, да, абсолютно очевидно,
что C R0 должно быть строго меньше единиц, иначе у нас будет экспоненциальный рост ошибки.
Поэтому мы пишем C R0 должно быть меньше единиц. Что такое C?
C это есть C1 в квадрате на C2 и на модуль F от U0. Это все должно быть строго меньше единиц.
Вот вам ограничение на начальное приближение.
Ну, иногда говорят, что это главный недостаток метода Ньютона.
Это ограничение на начальное приближение. Ну, может быть, это так.
Я просто не хочу сказать, что в этом методе Ньютона есть недостатки, есть ограничения.
Скажем так, как в любом чистое методе, всегда есть ограничения.
Если кто-то вам приведет вычислительные методы, скажет, что он работает везде,
вы сразу можете сказать, что это неправда, даже не зная подробности.
Всегда есть ограничения.
Ну, на самом деле, для скалерных уравнений, конечно,
локализация начального приближения задача, как правило, простая.
Наверное, школьник может оценить начальное приближение для скалерного уравнения.
Для системы уравнения, особенно высокого порядка, это задача уже непростая.
Есть, в общем-то, существуют даже методы локализации начального приближения,
так чтобы его брать поближе к решению.
Чаще всего, если задача физики только из каких-то физических соображений делается,
это задача экономики, то из экономических соображений и так далее,
то, как правило, привлекаются какие-то соображения из данной подметной области,
как правило, потому что всегда тот же физик знает,
потому что температура плазмы лежит от Т0 до Т1,
низкая температура, высокая температура, до Т1, до Т2, и так далее.
То есть ограничение всегда на функции физик знает, экономист знает, и так далее.
Это очень сильно помогает для решения задачи локализации начального приближения.
Но кроме того, можно, конечно, и другими способами локализовать.
Ну, например, самый простой способ в школе,
вы, наверное, проходили либо там смотрели,
метод делений пополам, помните такой?
Его можно рассматривать как метод простой итерации
для нахождения корня линейного уравнения,
а можно рассматривать как метод локализации начального приближения.
Вы можете решить уравнение с помощью метода деления треска пополам,
но это будет метод простой итерации, он будет медленно сходиться и так далее.
Ну, можно, почему же нет.
Но проще его использовать как метод локализации начального приближения.
А потом уже решать метод Ньютона задачи.
Вот все проблемы.
Это то, что касается скалерного метода Ньютона.
А вот вопрос такой.
Ну, Ньютон леонеризовал функции,
но вы же люди уже, так сказать, взрослые,
да, вы можете вряд ли разложить не только до первого члена,
но и до второго, до третьего, до эндого.
То есть вы можете построить итерационный метод любого порядка сходимости.
Ну так, да? Почему бы нет?
То есть, как говорится, это очевидно и истинно, которое не требует доказательств.
Но почему-то в практике дальше второго порядка сходимости
в практике не идут. Почему?
Можно сточиться как-то.
Да, в машине надо все равно по...
Ой, нет, нет, суперконфьютор, для суперконфьютора нелинейное уравнение
это не проблема, это мелочь.
Вот.
Так, сейчас, ну вот, давайте смотреть внимательно.
А, погрешность, ограничение для второго порядка сходимости
на начальное данное, уже довольно жесткое ограничение.
Намного жестче.
Потом там требуется ограничение на первую, вторую производную, и так далее.
Там еще третья производная появится, если третьего порядка.
Так вот, естественно, не мог мимо этой задачи пройти
наш замечательный автоматик, оповнутый Львович Ебышов.
Он предложил метод энного порядка сходимости для решения этих уравнений.
Ну, давайте посмотрим, что...
Например, я вам напишу метод третьего порядка сходимости.
Это уже будет метод ньют, и это уже будет метод Ебышова.
Как и методы энного порядка сходимости, это метод Ебышова.
Ну, давайте вот напишу третьего порядка сходимости.
Не так.
УК плюс один, это есть УК, минус Ф.
Ну, вот для краткости часто пишут так.
Ф от УК, это просто ФК.
Ф штрих от УК, это просто Ф штрих К.
Ну, здесь давайте я напишу для краткости ФК.
На катаэтерации функции Ф штрих К, это производная катаэтерация.
Здесь следующее выражение.
Вторая производная в катой точке на квадрат функции ката КК
и на два Ф штриха первого производного куба.
Вот, пожалуйста, у ноль, естественно, начальное приближение.
Вот, пожалуйста, вам метод третьего порядка.
Это уже нет Ебышова.
Можно ли использовать?
Да без проблем.
Возьмите и используйте.
Только сначала найдите начальное приближение.
Возьмите простенькое какое-нибудь уравнение нелинейное.
И там найдите начальное приближение.
И решите.
Вы увидите, что действительно метод очень быстро сходится.
Быстрее нюкну.
Ну, проблема только в одном.
Конечно, для скалерного уравнения вы начальное приближение
и для этого метода Ебышова найдете без проблем.
Но для системы уравнений, чем больше уравнений в системе
нелиней, тем тяжелее искать начальное приближение.
По поводу скалерного уравнения давайте я, наверное, закончу.
Потому что приводить модернизацию метод нютным можно, но их
довольно много.
Я, пожалуй, что не буду.
Если вы знаете метод нютным, любую модернизацию вы без
проблем поймете.
А можете сами сделать даже ускорение.
Теперь давайте вопрос следующий.
Что будет, если у нас система уравнений?
Как мы получим метод нютный для системы уравнений?
Для системы уравнений.
Для системы уравнений.
Так, на этот раз уже у нас F от U будет векторная
функция.
То есть и U, и F у нас принадлежат н-мерному векторному линейному
пространству.
То есть это система уравнений.
Ну, которую с кадровой виде понятно можно писать
как F1, U1.
Уn равняется 0.
F2 от тех же переменных равняется 0.
И Fn.
От тех же переменных равняется 0.
Вот некая система уравнений.
Если сделать метод нютный, в данном случае проще всего
следует, конечно, ему как методу линейноризации
данных функций.
Давайте реализуем эти функции.
Значит, F1, ну я сразу ставлю итерационный индекс
K плюс 1.
Это что будет?
F1, K.
Дальше пойдут частные производные.
Вы это прекрасно знаете.
D, F1, U1.
Здесь опять же итерационный индекс K.
Здесь будет D, delta 1 на K.
Delta 1 это превращение первого, U1.
То есть первая независимая переменная.
Дальше будет F1, U1.
То есть первая независимая переменная.
Дальше D, F1, на D, U1.
Опять же K.
Здесь delta, K2.
Ну и плюс многоточие.
Здесь будет D, F1, по D, U, N, delta, N.
И тоже индекс K.
Индекс K.
Индекс K это раз.
Это мы линеризовали первую функцию.
Первый компонент нашей функции.
Ну точно так же мы делаем для второго компонента.
То есть это F2, K плюс D, F2, на D, U2.
Тоже индекс K.
На D, delta, K.
Только уже 2 здесь будет.
Нет, секундочку.
Здесь 1.
Здесь 1.
Здесь тоже 1.
Я немного торопился.
Ну плюс многоточие естественно.
И здесь тоже будет D, F2, по D, U, N, на D, U2.
И здесь значит delta, N, K.
Ну и то же самое.
Я уже не буду выписывать.
Вы можете выписать без проблем.
Для N компоненты.
Наши электрофункции.
То есть мы просто линеризовали все наши компоненты.
Наши электрофункции.
Все.
Ну и дальше, что мы должны сделать?
По логике медда ньютна.
Как линеризацию.
Уже подсказывайте.
Так, и что мы получим?
Положение верное, но до этого что мы должны сделать?
Написать вот здесь 0.
Вот так после этого мы будем делать то, что вы нам подсказали.
Сначала все линеризованные функции мы приравниваем к нулю.
С какой целью?
С этой целью, чтобы найти все вот эти приращения, которые я вам здесь выписал.
То есть что у меня здесь получилось на самом деле?
Система линей и алгебральтических уравнений.
И, конечно же, якобиант здесь будет использоваться.
Это вы совершенно правильно сказали.
То есть система уравнений.
Ну можно написать ее как A на дельта равняется минус F.
Вот так вот, да.
Дельта это наш электростолбец.
Функции дельта 1, дельта N.
Здесь все накаты итерации берется.
И F это тоже электростолбец.
F1, Fn и все это берется на накаты итерации.
А это как раз ваша матрица якобы N на N.
Квадратная матрица якобы N на N.
То есть матрица A это есть D, F и O, D, U, G на накаты итерации.
Все, вы можете решать эту систему уравнений.
Если она не высокого порядка, вы можете чуть ли не на руках решить.
Аналитически, второй, третий, четвертый порядок.
Но если там порядок какой-нибудь двадцатый и так далее,
конечно же вы будете прибегать к тем чистым методам, о которых мы уже говорили.
Там уже обязательно должны быть чистые методы.
На руках такие задачи не решаются.
Это что касается как решать такую систему методом линейной уравнения.
Например, как систему линейных уравнений.
Есть второй метод решения.
Он исходит прямо из формулы Ньютона.
Он исходит из формулы Ньютона.
Мы можем записать метод Ньютона для системы в следующем обзоре.
Мы можем записать метод Ньютона для системы в следующем обзоре.
Только здесь уже те укаты будут не вторая.
Как уката минус.
А здесь в следующем мы напишем величина обратной производной.
Только это уже будет обратная величина матрицы якобе.
У ком и у ноль чему-то равняется.
Если я вот так напишу метод Ньютона, то метод Ньютона тоже будет работать.
Только мне нужно будет искать обратную матрицу.
Вообще говоря, поиск обратной матрицы, это решение линейной системы уравнений N на N,
для высокого порядка это тоже довольно трудозатратное дело.
Иногда, когда с компьютерами ситуация плохая, люди начинают думать больше.
Так было неоднократно и в XVII веке, и в XX.
И вот наш основоположник линейного программирования, академик Конторович,
столкнулся с этой проблемой.
Как же решать системы нелинейного хранения в высоком порядке,
чем с компьютерами тогда было очень плохо.
Только-только начиналось появление компьютеров.
Первый компьютер это 1946 год, они как американцы сделали.
Наш инженер Брук, генконструктор, через два года сделал такой же подобный компьютер.
Кстати, он в политехническом музее, там есть лицензия на этот компьютер.
Первый садится компьютер.
А вот первый полосоэлектронный компьютер сделали в СССР.
Что он, я бы не знал.
Первый полосоэлектронный, то есть на лампах.
Эняк был частично механическим, а полосоэлектронный компьютер был сделан под
руководством академики Олебедева, кстати говоря,
одного из первых заведующих кафедров РТК, МПТИ.
В 1951 году, американцы его примерно через год сделали.
Там включился гениальный фон Нейман, но наши лебеди оказались ничуть не менее гениальными.
И в 1950-60-е годы наши компьютеры были ничуть не хуже американских, если не лучше.
Знаменитая машина БСМ-6, но не было решено большое количество, очень сложная задача.
Это не буду в историю даваться.
Что предложил Контарович?
Я кое-чего не написал.
Ф от УК.
Что сделал Контарович?
Поскольку не было компьютера, он долго думал, как же все-таки упростить чистое решение.
И здесь поставил следующую вещь.
А вот здесь поставил не УК, а У0, то есть начальное приближение.
Этот метод называется Ньютон Контарович.
Здесь вы можете улыбнуться, как просто.
Но чтобы доходить до такой простоты, нужно сначала подумать.
Поскольку первое, что приходит в голову, это начальное приближение.
Будет медно считаться и так далее.
Конечно, количество террас увеличилось, расчет помедленнее, но не намного.
Оказалось, что если У0 находится в рамках тех ограничений, которые я вам только что написал,
то метод Ньютона Контаровича сходится тоже довольно быстро.
Немного медленнее метода Ньютона, если бы мы здесь К ставили.
Но вычислять обратную матрицу приходится всего один раз.
Поэтому машина в время экономится так, что в общем-то нередко этот метод просто применяется как основной.
Нет Ньютона Контаровича.
То есть обратную матрицу на каждой террасе считать для высокого порядка, для высоких Н довольно дорого.
Поэтому Ньютон Контарович популярен до сих пор.
Ну и еще, чтобы не забыть, что я немного забыл по поводу скаверного уравнения.
Функция ведь может задана быть аналитически, она может быть задана по точкам, что, кстати говоря, чаще всего и происходит.
То есть экспериментаторы, скажем там, либо численки дают точки.
Ну правда, потом можно их интерполировать, функции между точками, мы об этом поговорим.
Интерполяция тоже, как вам странно не покажется, процесс непростой.
Там тоже есть свои проблемы, неустойчивости, погрешности и так далее.
Что можно сделать, если функция задана по точкам?
Ну, например, метод Ньютона к этому преобразуется следующим образом.
Метод называется методом секущих.
И для скаверной функции он будет выглядеть следующим образом.
УК плюс 1, УК здесь минус ФК.
Их знаменатели ФК минус ФК минус 1 делим на УК минус УК минус 1.
Метод секущих, то есть производная, берется с первым порядком проксимации.
Разумеется, этот метод будет медленнее метод Ньютона, но тоже будет быстрее метода простой итерации.
Сейчас сколько у нас времени осталось? Ещё есть.
Метод простой итерации.
Так, ну вот, это то, что касается метода Ньютона.
То, что касается метода Ньютона.
Ну, давайте какой-нибудь простенький пример приведем, чтобы кроме формы были живые числа.
Что последняя строчка?
А вот это что такое? Это приближенное значение производной функции с первым порядком проксимации.
Это метод секущих, то есть это уже не касательный, это уже секущий.
Так, ну давайте, ну вот, собственно говоря, в голову пришёл такой пример.
Давайте извлечём полный квадратный из какого-то числа А, которое больше ныряет здесь.
С помощью метода Ньютона.
Для этого мы должны построить некую функцию f от u в равную u в степени n,
минус f равняется 0.
То есть вот наша функция f от u это u в степени n,
только минус вместо f, привычка, здесь а нужно поставить.
Например, двойка.
Если мы будем применять метод Ньютона, то как будет эта функция выглядеть?
Вверху у нас будет u в степени n, kt, минус a, это будет числитель,
а знаменатель производная n умножить на u в степени n, минус 1, ну и у 0 чему-то равняется.
Ну, например, b.
Вот как будет выглядеть метод Ньютона для изучения корня n в степени x из положительного числа А.
Ну, если взять какой-нибудь совсем простой вариант, n равняется p, равняется 2.
То есть корень квадратный из двойки, короче говоря.
Ну, это что будет уn плюс 1, так здесь 1 вторая, 1 вторая уn плюс 2 делить на уn.
Ну, в качестве начального приближения, например, можете взять единичку,
тогда у первой будет 3 вторых и так далее.
Можно вручную посчитать без калькулятора, чему равен корень квадратный из двойки по этой формы.
Однажды в каком-то давно, в каком-то журнале типа «Наука и жизнь», то ли «Техника молодежи»,
я прочел, что корень квадратный умели извлекать еще древние египтяне,
то есть умели вычислять диагональ квадрата.
Но диагональ квадрата – это иррациональное число, это корень квадратный из двойки,
что якобы они строили какие-то свои итерационные процессы.
Ну, честно говоря, я сам этих папирусов не видел, поэтому гарантировать вам не могу, что это правда.
Но вот то, что в какой-то статье, однажды в каком-то популярном журнале,
такая информация проскочила, это я помню.
Ну, правда, всегда, конечно, есть доля скептиса к такой информации.
Но вроде бы есть там, приводили примеры, что корень квадратный умел,
а это число иррациональное.
Значит, какой-то итерационный метод должен был применять.
А, П, да-да-да, что такое П?
Значит, Н – это у нас степень, да?
Так, а что такое П?
Степень, да?
Так, а П, да, вы правы, это сейчас, секундочку, давайте я его исправлю.
Здесь А должно быть, а не П.
Правильно исправили. А, корень квадратный из двойки.
Корень квадратный из двойки.
И вот как можно его почитать.
Можно еще какой-нибудь пример привести, давайте, поскольку у нас уже времени осталось совсем мало.
Ну, например, функция х квадрат –е в степени х,
пусть сравняется f от х, равняется 0.
Ну, мет простой-то рации можно, например, так построить.
fк плюс 1 – это будет е в степени минус хк пополам.
Ну, там х0 равняется, например, 1.
Ну, несложно здесь вот привязывать корень, он будет лежать на отрезке 0.5 и 1.0.
Ну, например, 0.75, начальное приближение взять.
И оценить, разумеется, производные на этом отрезке нашей функции.
Ну, можете оценить, но я вам скажу заранее, что она меньше единиц.
То есть, с итерационным процессом у нас будет сходиться, хотя рекомендую это все проверить.
Если я возьму х отсюда извлекать, то есть возьму обратную функцию,
то у меня, естественно, модуль производной будет больше единиц.
То есть, итерационный процесс от обратной функции разойдется.
Поэтому я здесь сразу угадал эту функцию, которую можно брать для построения итерационного процесса.
Заранее скажу, что если, например, брать с точностью 10 минус 4 расчета,
то примерно там 6-7 итераций потребуется для достижения такой точности.
Если мы возьмем метод ньютона, хк плюс 1, это будет хк.
Здесь у нас что будет? х в квадрате к минус е в степени минус хк.
Ну и здесь, соответственно, 2хк плюс е в степени минус хк.
А вот это будет метод ньютона, ну и х0, естественно.
Если вы проведете итерации, там где-то будет 3-4 итерации, то есть примерно в два раза меньше,
по сравнению с методом простых итераций.
Конечно, можно привести какие-нибудь экзотические контрпримеры,
когда метод ньютона будет сходиться так же, как и метод простых итераций.
И так сразу сказать, когда это может быть, в каких условиях.
Метод ньютона мы производную правой части практически приравняли к нулю.
Поэтому если производная функция будет близко к нулю, то есть метод простой итерации будет сходиться быстро,
почти так же быстро, как и метод ньютона.
Производная функция должна быть меньше единиц, строго, для сходимости метод простых итераций.
Да, но она может быть малой, ну скажем, епсил, ну 001.
Тогда вот скорость сходимости метод простых итераций будет сопоставлена со скоростью методом ньютона.
Если производная, просто будет, ну конечно, ноль вряд ли функция будет иметь.
Ну если константа, ну как-то константа, в какой-то смысл решать уравнение с константой.
Конечно, она не ноль, но она может быть какой-то малой величиной.
Там 01, там 005, тогда и тогда скорости будут сопоставлены.
Ну давайте на сегодня мы закончим.
Сегодня и так у нас такой насыщенный был материал об одном из главных вычислительных методов.
Ну хорошо, тогда на сегодня до свидания.
