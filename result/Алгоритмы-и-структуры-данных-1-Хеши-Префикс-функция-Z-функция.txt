Давайте потихонечку начинать. Сегодня поговорим про простой линейный алгоритм.
На строках простой линейный алгоритм. Строкой я буду называть просто последовательно из каких-то элементов.
Часто я буду подразумевать, что все они лежат в каком-нибудь небольшом множестве.
Вот такая самая модельная пример, когда все используемые буквы, это просто маленькие латинские буквы, буквы от латинского алфавита.
Иногда это ограничение существенное, иногда не очень. В момент, когда это сыграют, я вернусь, пока можно считать, что, например, все буквы маленькие латинские, это нам ничего особенно не судит.
Нас задачу не упростит, не усложнит. И, значит, первая, давайте, первый метод, который позволяет многие задачи на строках решать, это криминальное феширование.
Ну и ей очень простая. Вместо того, чтобы хранить строку, мы хотим хранить число, а при том желательно не очень большое.
Но давайте объявим, что для вот такой строки ее хешем является следующее выражение.
S0 на p в степени n-1, plus S1 на p в степени n-2, plus и так далее, ну вплоть до последнего символа Sn-1.
Вот, и все это взято по какому-нибудь модулю m, так, чтобы это вместилось в какое-нибудь нормальное тип данных, типа n-та.
То есть, можно там m брать порядка 10 в девятке.
Здесь S, это вообще формальные буквы, ну понятно, там по какому числу, это, например, просто надо прикосновать чарк n-2, и здесь номер символа в аске таблицы.
Давайте напишем, что вот в этом выражении SE это либо под аске таблице, либо, ну, например, порядковый номер вот в этом алфавите.
Если мы знаем, что у меня алфавит суженный и состоит не из всех вообще возможных символов, а только вот из этого небольшого количества,
то можно их просто нумеровать, раз-два-три, и так далее, двадцать шесть, и сказать, что вот здесь вот подставляется порядковый номер этого символа вот в этом выражении.
Вот, это порядковый номер в алфавите.
Причем тут будет довольно важно, что у меня один индексация, то есть я не хочу нумеровать алфавитные символы с нуля,
ну потому что если я скажу, скажу, что A это ноль, тогда у меня если строка состоит только из одних H, то у него всегда нулевой хэш.
Ну это, наверное, не очень красиво, да, представьте, что у вас все S и H, тогда после конвертации они все будут нулями,
и тогда вне зависимости от длины строки у вас здесь будет написано ноль.
Ну, наверное, мы не хотим, чтобы уж такие простые строчки не различались нашими хэшами, поэтому у меня именно один индексация.
Давайте это подчеркну, что это всего один индексация.
Вот, такая не очень сложная вещь.
Ну и давайте с ее помощью решим задачу.
Задача о вхождении шаблонов текста.
Представьте, что у вас есть какой-нибудь шаблон P и текст T.
Ну на самом деле просто даны две строки, строка P и строка T, надо найти все вхождения P в T.
То есть всюду, вот если вы прикладываете это маленькое окошко в T во всех возможных позициях,
вот всюду, где символы в точности равны тому, что написано в P, надо найти все такие позиции.
Ну, например, нужно сообщить там, где они все начинаются, то есть надо вывести вот этот индекс, вот этот индекс,
ну если там еще где-то здесь вхождение, то вот этот индекс, вывести начало всех вхождений шаблонов текста.
Вот, ну решается очень просто.
Давайте посчитаем hash строки P, давайте посчитаем хеши всех подстрок T правильной длины, ну такой же как у P,
и сравним эти хеши на равенство с P.
Там, где получилось правильство хешей, мы будем считать, что у меня произошло вхождение строки P в T.
Значит, найдем хеши всех подстрок длины P в строке T.
Ну и там, где хеши совпали, будем считать, что получили вхождение P.
Там, где хеши не совпали, будем считать, что вхождение нет.
Вот, ну понятно, что это что-то довольно адекватное, потому что, смотрите, понятно, что если хеши, скажем, не совпали,
вот если я посчитал где-нибудь хеш здесь, давайте это назову там, не знаю, ну S какой-нибудь.
Вот, понятно, что если H от S не равно H от P, то S не равно P.
Ну тривиально, да, то есть если я взял две строки, и у них не совпали вот эти значения,
значит, как строки, они тоже, очевидно, разные.
Вот, в обратную сторону не обязательно, да, не обязательно, что из равенства H следует равенство строк.
Но мы будем считать, что это так.
Здесь мы считаем, что равенство хешей увеличивает равенство строк.
Ну понятно, как бы, да, ну уж вряд ли, наверное, вот такая вот такая стрёмная махина совпадает на двух разных строчках,
вряд ли тут будет одинаковый число, да, там какой-то модуль, непонятно, какой-то P.
Казалось бы, с чего будем быть равными на разных строках.
Ну, как бы, понятно, что такое вообще бывает, конечно, да, мы большое пространство строк погружаем в маленькое пространство остатка формулы L.
Понятно, что там будут коллизии, но мы хотим, как бы, что-то сделать.
Но мы хотим, как бы, верить, что их мало.
Вот, значит, почему их мало, да, почему есть надежда, что коллизий действительно не очень много.
Почему есть надежда, что коллизий, ну коллизий, как всегда, это не равенство строк, но равенство хешей.
Вот, почему таких штук мало.
Вот, ну, например, потому что, если взять M каким-нибудь достаточно большим числом,
ну, давайте я буду считать, что у меня P и T это строки какой-нибудь длинной порядка 10 в пятый, скажем,
а M какое-нибудь большое число порядка 10 в девятый.
Вот, дальше давайте скажем, что P выбирается случайно равной вероятности среди всех остатков по модулю M,
то выбирается случайно среди чисел 0, 1 и так далее, и минус 1.
Вот, ну и тогда ясно, что равенство хешей это на самом деле совпадение двух многочленов по модулю M в точке P.
А равенство хешей, х х равно h от P, это на самом деле совпадение значений двух многочленов,
совпадение значений двух многочленов степени не выше N в точке P.
Ну, мы знаем, что у многочленов ZM, у многочленов степени M ZM, ну, по крайней мере с тем простое,
корней не больше, чем N, да, потому что вроде бы есть в другом...
Сейчас, а у нас P это строка или это перемена?
А, пардон, коллизия, да, произошла у меня у самого.
Ну, я не буду уж исправлять, но вот здесь вот P это число, да, вот здесь P это строка.
Ну, окей, блин, а как это быстро? Давайте здесь когда быстро исправим, давайте здесь B, вот слов base.
Да, извините, что-то я подумал, так это не надо. Вот, точка B.
Вот вроде так. Ну и все, значит, а многочлены такой степени в таком вот конце могут совпадать
не больше, чем в N точках, значит, вероятность попасть в общую точку не совпадает,
то есть по факту мы находим корень такого многочлена в таком многочлене не больше, чем N корней,
значит, вероятность в него попасть это примерно N делить на M.
Вероятность попасть в корень примерно N, наверное.
Ну и как бы это в целом уже, что было сейчас, 10-4 это что-то уже более-менее адекватное.
Если мы там несколько раз возьмем, если мы возьмем несколько разных B, например,
то вероятность каждый раз попасть в корень будет умножаться, N делить на M в степени,
сколько раз мы взяли, если достаточно много раз посчитать hash в разных точках,
то вероятность коллизий будет все меньше и меньше экспенциально убывать.
Окей?
Ну все, значит, осталось показать, как эти хаши везде высчитать.
Ну понятно, для P мы как-нибудь посчитаем хаши, хэш точнее, мы просто поформуем.
Теперь давайте все разберемся, как посчитать хаши под строк T.
Ну тоже очень просто, давайте мы посчитаем хаши всех префиксов.
То есть строка T, давайте посчитаем хаши всех ее префиксов.
То есть преф IT это хэш для строки символа T0, T1 до T1.
Так, ну считается вроде тридеально, почти как префиксные суммы.
Значит, преф 0 это что, это просто T0, ну там по модулю M, если что.
Вот, а преф следующее получается с предыдущего,
доножением на P и прибавлением нового символа.
Просто на формулу посмотрели, заметили, что это верно.
У нас здесь M простой, да.
Так, я опять переспользовал P, да, извините.
А, M простой, ну вот здесь, да.
Чтобы вот это утверждение по количеству корней по модулю ZM было верно,
наверное надо, чтобы M было простым, да.
Да, да, спасибо.
Ну давайте.
Так, это понятно, да, всем, что эта штука считает хаши всех префиксов.
Ну а дальше, если посчитать хаши всех префиксов,
давайте научимся считать хаши любой подстроки.
Значит, как найти хаш подстроки?
Здесь большая T, вот есть подстрока ее стрельба по R index,
как найти ее хэш?
Ну тоже очень похожа на префиксную сумму,
давайте найдем префикс вот этого
и вычтем вот это, ну префикс вот, точнее хэш вот этого
с правильным префициентом.
То есть я утверждаю, что ответ это следующее.
f'-1 умножить на b в правильной степени.
Ой, сейчас скажу, значит это будет rt, f'-1, вот вроде бы в плохой степени.
В плюсах это неправильно отработано, там может от 30 нечислово звучит.
Ну блин, извините, я не буду писать код на плюсах, я вот так вот хочу.
Я не вдуюсь в детали реализации, в реализации я бы написал отдельный какой-то класс,
который делает все вычтения по модулю m, умножит по модулю m, потом вычет по модулю m
и не задумался бы, как она работает внутри.
А мы не хотим поделить?
Нет, а мы не хотим делить, потому что нам не надо учедить.
Давайте напишем вот это, что такое.
Что такое f'r?
Это s0 на p в rт, плюс s1 на p в r-1, плюс и так далее.
Дальше sl будет с коэффициентом что-то типа r-l, ну и так далее вплоть до sl.
Что такое f'l-1?
Это s0 на p в r-1, плюс s1 на p в степени r-2, плюс и так далее вплоть до sl-1.
Если я вот это умножу ровно вот на f...
Да что ж я так подешу, виноват.
Если я вот это умножу на b в правильной степени,
у меня вот эти вот товарищи сократятся все и останется то, что нужно в точности.
У нас же степень при s0 будет b в rт, а должна быть меньше.
Так я их вычту.
Нет, степень будет здесь b в rт, я вычитаю b в r-1 умножу на b в степени r-1.
Сейчас здесь будет b в rт, они как раз сократятся, а остается то, что нужно.
Ну все, мы победили.
Ну понятно, что там надо, чтобы это все работало супер хорошо,
надо предпочитать все степени b, завести отдельный массив, куда сохранить все степени b,
и дальше тогда я могу находить за единицу.
Все, мы получили алгоритм, который за время линейное по суледленных строках
находят все спаждения. Мы нашли хэш вот здесь,
мы нашли хэши всех префиксов здесь,
и затем для каждой строки правильной длины посчитали ее хэш за единицу,
ну и сравнили на равенство.
Все, это называется алгоритм равен акарбой, если вам это интересно.
В целом хэши довольно хороший инструмент,
позволяет решать много задач.
Ну вот, говорю, иногда с какой-то вероятностью он может ошибаться.
Причем здесь, в отличие от дикархового дерева,
проблема не в том, что мы можем долго работать,
а проблема в том, что мы как бы ответ можем неправильно вывести.
Ну так же, как в кэш таблицах было в конце первого семестра,
вот иногда мы можем ошибаться.
Ну там как бы, а если несколько раз запустить,
каждый раз выбирать новое b какое-нибудь случайное,
тогда вероятность ошибки будет все меньше и меньше,
поэтому мы надеемся, что почти такого никогда не происходит.
Есть задачи, которые без хэшей я не умею решать.
Ну там их мало, но они бывают.
То есть поэтому этот инструмент,
я вот сам довольно скептично отношусь к алгоритмам,
которые иногда ошибаются,
но иногда без них никуда.
Ну а если вам нравятся такие, то прямо еще супер.
Можно использовать.
Можно проверять просто по синтезу?
Мы нашли равенство с хэшей?
Ну, к сожалению, тогда синтетика испортится.
Ну конечно, но представьте, что у вас вот это вот из всех хэшек состоит,
и это из всех хэшек.
У вас везде хэши совпали,
и вы по факту в тупую просто проверяете все на равенство.
Многократно. Это будет по умножению на т.
Это, к сожалению, грустно.
Можно как-то выборочно проверять, конечно,
но это непонятно, как вероятность будет в общем.
Это сложно. Так не делают обычно.
То есть если только гарантируется, что коллизий мало,
что вхождения мало,
тогда их можно вручную все проверить.
А в общем случае непонятно.
Так, идем дальше.
Следующий алгоритм — это рефикс-функция.
Это определение.
Пусть есть строка,
опять есть 0 и так далее,
а сам у нас 1.
А рефикс-функция — это набор чисел P0, P1, Pn-1,
где P — это длина
наибольшего собственного суффикса.
Строки с нулевого символа купитой
совпадают у вас с рефиксом той же длины.
Вот, но суффикс-префикс, давайте на всякий случай напомним,
если есть строка, то суффикс — это несколько ее
последних символов,
префикс — это несколько ее первых символов.
Ну вот, префикс — это суффикс.
Собственный, значит, отличный от всей строки.
То есть нельзя взять в качестве суффикса всю строку,
потому что тривиально полный суффикс строки
тривиально равен полному префиксу строки.
Строка равна само себе, это нам не интересно.
Мы хотим следующий, кроме всей строки.
То есть на собственный суффикс равен равный префикс.
Например, если я нарисую какую-нибудь такую строчку,
аба-аба, то в ней, видимо, вот эта вот,
это максимальная такая строка,
и суффикс, и префикс одновременно.
Баба уже нельзя, а баба — это уже полная строка.
Ну и соответственно префикс функции,
просто массив удовельствия,
называйте префикс функции.
Ну давайте тривиально замечу,
что здесь получается всегда,
что P 0 — это 0.
Как бы мы ни старались,
потому что P 0 — это что такое?
Есть у меня строка из одного символа,
у нее, в принципе, единственный собственный суффикс —
это пустая строка.
Ну понятно, что пустая строка равна префику с той же длины,
она равна пустой строке.
P 0 будет нулевой всегда,
ну и нам это, наверное, еще понадобится.
Теперь давайте представим,
что мы каким-то образом волшебным научились
считать префикс функцию за быстро.
Как решить ту же самую задачу
о вхождении шаблонов в тексте?
Уже без хэшей,
с помощью префикс функции только.
Давайте решение задачи напишем опять.
Давайте...
Давайте построим следующую страшную строчку.
P — решетка T.
То есть мы склеим две наши строки,
паттерн и текст,
с помощью вспомогательного символа решетка,
где решетки больше нигде нет.
Свежий символ, которого больше нет нигде в наших строчках.
Дальше на этом безобразии
посчитаем префикс функцию.
Посчитаем P от S,
но префикс функции до этой строки.
И вот в этой строчке
префикс функции,
префикс функции до этой строки,
префикс функции до этой строки.
Давайте посмотрим, что это такое.
Ну понятно, что
всюду, где мы имеем вхождение P
в текст T,
скажем вот здесь,
если вот это равно вот этому,
то понятно, что вот в этой точке у меня
P и T
в точности равно глине P.
Ну более-менее по определению,
потому что если вот эти символы равны вот этим вот,
то есть мы имеем входение P,
то в этой точке, как минимум,
вот эти все символы в количестве вот таком,
равны вот этим символам.
Суффикс для такого состояния
это суффикс равен этому префиксу,
ну если здесь реальное хождение.
Ну а больше быть не может,
у меня пишка не может быть больше,
чем вот эта P, за счет этой решетки.
Потому что если
этот блок,
суффикс равный префиксу внезапно содержит решетку,
то значит эта решетка встречается где-то правее в моей строке, а это неверно.
Если предположить, что p больше, чем длина p, то она содержит решетку, значит где-то она входит правее, а это неверно.
Значит значение p никогда больше, чем p поднимется.
Ну вот, поэтому мы доказали на самом деле, что множество позиций,
где значение префикс функции совпадает с зеленой p, это множество окончаний всех вхождений p в t.
Вот, значит, собственно, ровно здесь заканчивается вхождение p в t.
И других позиций не бывает.
Ну, потому что p не может быть больше, чем p.
Если оно меньше, то понятное дело это сюда не входит, но если равно, значит вот как раз равенство.
А тем самым мы описали в точности множество всех вхождений.
Согласны?
Хорошо.
Значит нам осталось научиться эффективно находить рефикс функцию строки.
А задачу с ее помощью мы уже решили.
Так, теперь давайте научимся находить, собственно, префикс функцию.
Давайте я для удобства вот это вот безобразие назову супрефиксом.
Собственный суффикс, совпадающий с префиксом той же длины.
Я буду называть такие штуки супрефиксом.
То есть вот эти вот как раз блоки, суффикс, равный префикс, это у меня супрефикс.
Типа одновременный суффикс и префикс.
Причем собственный, то есть вся строка супрефиксом не считается.
Значит мне нужно в каждой позиции и для вот такой вот строки с нулевого по этой символ
найти просто самый длинный супрефикс.
И это в точности длина максимального супрефикса.
Давайте я это напишу.
И это длина наибольшего супрефикса строки символов с нулевого по этой.
Ну алгоритмы.
Давайте будем идти по строке слева направо и итеративно по одному начитывать отношение pi.
Давайте идти слева направо, посчитали pi 0, pi 1 и так далее pi и минус 1.
Хотим посчитать новый pi.
Пусть известные.
Как найти pi?
Ну если мы по списку предыдущего значения можем посчитать следующее,
то поскольку мы знаем сначала, что pi 0 это всегда 0,
значит мы можем посчитать все пишки.
Так, хорошо.
Как найти? Ну смотрите, вот есть, давайте я нарисую всю строчку,
кроме последнего символа.
Что мне нужно? Мне нужно найти максимальный супрефикс.
Вот это вот равно вот этому вот.
Самый длинный префикс, являющийся суффикс.
Замечание первое, если я у любого супрефикса строки всей
отброшу последний символ, Construction Symmetry Egg,
то я получу супрефикс строки на 1 поменьше.
Потому что что такое супрефикс большой строки?
Это вот это вот, равно вот этому.
Если я отброшу последний символ, то у меня и здесь отбросится символ,
и здесь отбросится символ.
Ну получу, супрефикс меньше под строки.
Все длинно на 1 поменьше.
Значит множество супрефиксов в предыдущей строке, потому что любой супрефикс большой строки порождает супрефикс меньшей строки длины на один поменьше
Давайте я сделаю следующее, на самом деле это будет очень простой
Давайте перебирать все супрефиксы, вот это предыдущие под строки
И проверять, правда ли, что следующий за ним символ вот здесь такой же как здесь
Ну и поскольку мы знаем, что один из супрефиксов, который мы ищем, ровно вот такой вид имеет, что после него стоит SI, то есть это такой супрефикс меньшей строки, который можно продлить вправо новым символом SI
Давайте я просто перебирать все супрефиксы буду, найду из них максимальный, который вправо проглевается, то есть вот здесь вот за ним стоит символ SI
И это будет в точности максимальный супрефикс новой строки
Давайте это запишем
Поскольку максимальный супрефикс, ну давайте сразу буду говорить, что новая строка
Новая строка это с нулевого по итой, а старая это с нулевого по и минус первой
Так вот, поскольку максимальный супрефикс новой строки
После удаления последнего символа становится супрефиксом старой строки
Значит, мне достаточно просто перебрать все супрефиксы старой строки и попытаться продлить их новым символом
То достаточно перебрать все супрефиксы старой строки
Ну и алгоритм на сами работает ровно так
Ну и он перебирает все супрефиксы старой строки в порядке убывания длины
И находит первый из них, то есть максимальный, который продлевается
То есть за префиксом которого идет ровно тот же символ, который продлевается символом SI
То есть я просто эти все супрефиксы буду перебирать в порядке убывания длины
И первый продлевающийся символом SI будет тем, что нужно
Так, теперь вопрос, как перебрать все супрефиксы
Ну смотрите, я знаю, что P-1 это максимальная длина супрефиксов для старой строки
Ну просто потому что вот, по определению на самом деле
Вот эта штука длина максимального супрефикса
Больше супрефиксов нет, значит это тот, с которого надо начать
Да, это максимальный супрефикс, максимальный супрефикс старой строки
Что дальше? Какой второй по максимальности супрефикс?
Давайте я нарисую старую строчку побольше
Вот представьте себе, что вот это вот было P-1
И P-1
Давайте рассмотрим второй по максимальности
Второй порядка убывания по длине супрефикс
Он какой-то вот такой
Ну тогда на самом деле понятно, что вот этот второй супрефикс
Это просто максимальный супрефикс для вот этой вот строки
Ну потому что мне нужно вот в этой строке
Оставить максимальный суп рефикс, который равен префиксу
Ну а поскольку вот это вот, это вот это вот
Поскольку это само по себе супрефикс
Значит мне нужно просто в нем внутри супрефикс опять найти максимальный суп рефикс
Потому что мне надо найти Alexis, равный префикс
Ну и поскольку это одна и та же строка
То мне нужно внутри вот этой одной строки найти опять такие 서фиксы, рав after gives
Да?
Давайте напишем, что второй по максимальности
Второй по максимальности, это ну какая у него будет длина получается, мне нужно для вот этой вот строки, длины вот такой bx индексивной минус 1, взять максимальный субрефикс, это получается что-то вот в таком вот стиле, и именно 1 минус 1.
Потому что еще раз, вот здесь вот эта вот строка, равная префиксу той же длины, мне нужно в ней найти максимальный субрефикс, но ее длина вот такая, значит последний индекс вот здесь, последний индекс, это bd минус 1 минус 1, ну если в ноль индексации живем, и мне нужно здесь взять опять такие значения b, потому что это хранит в себе максимальный субрефикс.
Да? Все, ну и так дальше, если я знаю, то есть если я знаю текущий наибольший субрефикс, то следующий по максимальности это его максимальный субрефикс, который у меня и так уже хранится функцией p.
То есть у меня вот есть вот эта вот строка, я ее приношу в начало, потому что это тоже самое, рефикс равен субрефиксу, и внутри него еще максимальный субрефикс с помощью значения функции p.
Ну вот так. Все. Такой нехитрый угаритель. Давайте его напишем.
Так, значит вот у меня есть какая-то строка, давайте я буду считать, что у меня есть string p, давайте я буду считать, что p — это ее длина.
Ну и у меня есть вектор p, куда я складываю ответ.
На массе значение префикс функции.
Так, еще хочу ввести переменную g равную 0 изначально.
Переменная g будет отвечать в точности вот за вот это вот значение. Сначала будет вот это, потом вот это, то есть g будет перебирать длину субрефикса текущего кандидата на тот субрефикс, который я хочу продлить новым символом.
Изначально 0.
Ну мы знаем, что p0 — это 0, поэтому значение p от 0 я явно считать не буду, а может здесь было бы прописать вот так вот его.
Дальше я перебираю си и от 1 до n.
В этот момент, смотрите, когда я захожу сюда, я буду сейчас поддерживать, что g хранит в длину максимального найденного субрефикса.
То есть на самом деле g будет просто равно вот этому вот, p и минус 1.
А вот в этот момент g равно p и минус 1.
Так, p и минус 1.
Теперь мне нужно найти вот этот максимальный субрефикс, который есть.
Я хочу найти тот, который можно продлить направо символом s.
Ну давайте тогда его уменьшать, пока он не продлевается символом s.
Я сделаю это так.
Пока g больше 0, то есть это материальный субрефикс, и он не продлевается тем символом, который нам нужен.
То есть это плохой субрефикс, то есть это как бы субрефикс старой строки, но не продлевающийся новым символом.
То есть s gтое не равно s itoе.
Но поскольку g — это длина субрефикса, то как раз s gтое — это следующий за ним символ.
Следующий вот за префиксом символ, который должен быть равен s.
Я просто делаю вот то преобразование на правой доске.
g равно p g и минус 1.
Давай сделаем перерыв и вернемся.
Вот этот вот цикл из двух строчек.
Я вот это делаю ровно то, что мне нужно.
Он перебирает все такие g, где g — это длина субрефикса старой строки.
Вот это вот старой строки с 0 по s минус 1.
Я перевираю все ее субрефиксы.
Максимальный, потом второй по максимальности, третий по максимальности и так далее.
Почему я делаю ровно вот это вот?
Ну, значит, для всех содержательных g, давайте я буду выбрасываться, когда g равно 0.
Если g положительно, то у меня получается сейчас рассматривать какой-то содержательный субрефикс.
Вот это вот равно вот этому вот.
Это текущий субрефикс, за которым...
Потому что если g — это длина, то следующий за ним символ — это как раз s g,
за которым не стоит то, что мне нужно.
Значит, этот текущий субрефикс длины g мне не подходит.
Мне же нужен субрефикс, продлевающийся направо символом s i.
А этот не продлевается, потому что у него справа стоит s g, не равный s i.
Значит, текущий субрефикс длины g мне не подходит.
Мне нужен следующий по максимальности, то есть длины чуть поменьше.
Но чтобы взять следующий по максимальности субрефикс, как я вот здесь вот показывал,
мне достаточно в строке m g взять просто максимальный субрефикс.
Ну а это в точности вот это вот, потому что g — это длина.
Соответственно, строка с 0 по ds g – 1 как раз имеет вот ту самую длину.
А это вот тот самый максимальный субрефикс, который у меня сейчас есть.
И я в нем нахожу опять максимальный субрефикс.
Я делаю просто такое преобразование.
Согласны?
Все.
Значит, теперь, когда этот файл закончился, у меня верно два условия.
Одно из двух точнее.
Либо g занулилось, либо s g равно s i.
Ну и если здесь в конце написать, что если s i равно s g,
то надо сделать плюс плюс g.
Давайте я не буду вводить твои вложности.
Плюс плюс g напишу.
Ну и в конце положить твердый g.
Конец.
Потому что как раз, да, у меня g сейчас это либо 0,
либо максимальная длина субрефикса, продолжающаяся на новый символ.
То есть как раз если оно продолжается, даже если же равно 0,
даже если оно продолжается, я увеличиваю текущую длину.
Ну потому что как раз за счет нового символа я могу продлить мой текущий субрефикс.
Мне нужно же увеличить.
Увеличиваю на 1.
Ну и кладу его в P.
Красиво.
Все.
Амбриктум закончился.
Очень простой в плане реализации.
Так, хорошо.
Ну, корректность мы доказали, вроде как.
Надо понять симптотику.
Вот я обсуждаю, что время работы этого алгоритма есть вот это.
Не очень сильно, на самом деле.
Вот.
Как это доказать?
Ну давайте просто на термин g посмотрим.
Смотрите, у меня есть одна глобальная g,
которая при входе, ну то есть мне нужно было, чтобы g,
при входе в очередную террацию, чтобы g было равно P-1,
но как раз если я с прошлой террацию закончил таким присвоением,
то как раз следующая террация g это в точности предыдущего значения P.
Поэтому здесь у меня g конфликтов нет, это ровно то же, которое мне нужно.
Ну понятно, что как у меня ведет себя g.
Она при каждом i, возможно, максимум на 1 увеличивается,
а каждая террация цикловая, ее уменьшает хотя бы на 1.
Даже возможных хотя бы на 2, или это бред.
Ну не важно, короче понятно, у меня был супрефикс дыны g,
я беру его максимальный супрефикс.
Понятно, что новое значение g меньше, чем старое.
Я уменьшаю, я иду по супрефиксам в порядке убывания дыны.
Значит каждая террация цикловая уменьшает g хотя бы на 1.
Каждая террация цикловая уменьшает g хотя бы на 1.
Вот.
Ну а каждая террация цикловой увеличивает g максимум на 1.
Каждая террация цикловой увеличивает g не больше, чем на 1.
Значит суммарно вайлов линейное количество.
А если g у меня может вырасти максимум на n, то есть у меня n это рацифора,
каждая в худшем случае увеличивает g на единицу,
значит максимально возможное значение g это как бы n-1.
А каждый вайл его уменьшает на 1.
Значит суммарно вайлов тоже o от l.
Вроде все.
Убедительно?
Ну блин, если не убедительно, наверное можно вести потенциал
фира внуши и что-нибудь с этим поделать.
Но зачем?
Кстати на сегодня линейн切节ная, а вот есть методом потенциалов appropriate.
И что есть с этим поделать, но зачем?
Ну, кстати, на самом деле интересно, а вот если методом бы это называть?
А, нет, там надо, чтобы дельта фид была.
Это упражнение надо?
Это упражнение для тех, кто не поверил.
А, в смысле?
Что?
Ну, мало ли.
Вот.
Так, вроде все.
Вот, и третий, значит, алгоритм, который хочется рассказать, это z функция.
Z функция.
Тоже это, ну, там, еще одна штука, которая позволяет находить все входения шкалонов в текст.
Так что, определение.
Пусть есть строка.
З функция, вновь, это массив чисел z0, z1, zk-1, где z и это, значит, ну, здесь как-то словами не очень получается написать.
Вот максимальная такая карта, что прибыль с длинной карты равен под строке с этой позиции длинной карты.
Такое формальное определение.
Так, ну еще давайте я насильно скажу, что z0 и z0.
Вот, значит, картинка.
Есть у меня вся большая строка s.
Что такое z и это?
Это максимальный блок вправо равный перетепицу той же длины.
Это вот как раз, максимальная такое к, что если вы вот здесь прочитаете k символов, то эти к символов то что нисти равно, то то, что написано в начале строки той же длины, а вот
эти вот k символыvationы тут к этим вот костим.
Иinf tel tags vo3, k максимально, значит.
Вот, то есть если префикс функции это k-гово, мы находили максимальную строчку влево,
равную префиксу той же длины, то теперь, наоборот, пишем villagers
максимальную строчку вправо, равную префиксу той же длины.
Если мы вдруг научились считать z-функцию, то давайте опять решим задачу по вхождению шаблонов текста.
Давайте мы опять построим...
Мне хочется опять построить эту строчку, прежде чем kt, найдем на ней z-функцию.
И я утверждаю, что опять-таки все позиции, где zt равно длине p, это в точности вхождение p в t.
Те позиции, где zt равно p по длине, это в точности такие позиции, что вот эти вот p-символов, идущие вправо, равны первым p-символам.
Но значит, в точности мы получили вхождение p. Все позиции, где zt равно p, это начало вхождения p в t.
Больше быть не может, zt быть больше, чем p не может, за счет как раз этой решетки.
Но опять то же самое. Если бы у меня выводы где-то z больше, чем p, то у меня вот эта штука где-то бы правее сначала в строке, а значит где-то решетка встречалась бы кроме этой позиции.
Такого не бывает. Значит у меня бывает максимум z равное p. Ну и понятно, что все вхождения дают такое значение, и наоборот, если значение такое, то значит мы получили вхождение.
Вроде привиально показали, что все позиции, где zt равно p, это есть начало вхождения p в t. Да? Хорошо.
Теперь давайте опять построим за линейное время z для строки s.
Так. Мы будем опять такие типы строки слева направо и насчитывать z0, z1, z2 и так далее слева направо.
Вот давайте пусть мы уже насчитали z0, z1 и так далее, z и минус 1. Давайте я еще вот эту вот штуку для удобства своего буду называть z-блоком.
Ну это как раз вот тут строка просто. На самом деле под строка разная префикция столь длинная. Я это буду называть z-блоком.
Так вот. Я нашел значение z функции на всех предыдущих точках. И давайте среди них я буду хранить координаты самого правого z-блока.
Среди всех найденных храним границы lr самого правого z-блока. То есть того, у которого правая граница максимально.
Да, ну потому что я когда нашел все вот эти вот z-ки, я нашел на самом деле много строк равных префиксу длины.
И вот среди всех таких уже найденных я буду хранить самый правый. Тот, у кого правая граница самая большая. lr максимально.
Ну пусть она у меня есть. Что делать дальше? Вот как найти z?
Ну давайте порисуем. Вот это будет у меня строка s0 по lr.
Пусть я предполагаю, что si где-то вот здесь вот. Внутри этого моего самого крайнего z-блока.
Тогда можно сказать, например, следующее. Смотрите.
Что такое z-блок? Это значит, что вот эта вот строка с lr symbol равна префиксу той же длины. Вот эта штука равна этой штуке.
Давайте я посмотрю на тот символ, который равен si, который соответствует si вот в этом префиксе.
То есть на самом деле это будет символ с номером i-l. Если я сдвину все вправо на l, то будет как раз этот символ совпадать вот с этим.
Но смотрите, для него я уже знаю значение z функции. Ну потому что он находится где-то левее, я уже знаю, чему равно z с индексом i-l.
И если это z с индексом i-l не большой и не вылезает за границы вот этого вот префикса, ну скажем, какой-то вот такой вот, тогда это и есть значение z3.
Потому что, смотрите, вот пусть я знаю z2-l, это вот такой вот z-блок равный префикс той же длины.
И эта штука не вылезает, даже не доходит до конца этого префикса.
Но тогда, смотрите, я знаю, что эта штука равна вот этой штуке, потому что у меня инвесторки равны, и это же все равно префикс той же длины.
А вот этот следующий символ уже, следующий символ, лежащий все еще в префиксе, уже не равен вот этому.
То есть я не могу продлить мой z-блок в точке i-l, не могу продлить направо. То есть этот символ не равен вот этому.
Значит, и в этой точке происходит то же самое. У меня сначала идет несколько символов равных префиксу,
а потом идет символ, вот этот символ равный вот этому вот, не равный тому, чем нужно продолжить z-блок.
То есть если у меня вот это вот все и следующий символ за ним все еще лежит в префиксе, то это равно вот этому и не равно вот этому.
Поэтому z-блок в точке i уже найден. Это в точности z-i-l.
Согласны?
Вот. Ну давайте, значит, напишу, да, если i внезапно попало в отрезок с l по r, и при этом, то есть я хочу написать условие,
что вот эта z-i-l приложенная в точке i не доходит до конца вот этого префикса.
Вот если вот это верно, то z-i равно z-i-l. Это просто формализовал то, что здесь не срывал картинку.
То есть если у меня i попало в отрезок, вот этот z-блок равный префиксу той же длины, если я смотрю значение z в точке i-l,
и это вот значение в точке i, то есть i плюс z-i-l, вот эта вот позиция, она все еще лежит внутри моего префикса.
То есть вот это поведение в точности такое же, как здесь. Эти строчки равны, поэтому эти символы равны, и оба не равны продолжению вот здесь вот этого префикса.
Поэтому больше, чем столько набрать нельзя, потому что эти символы уже не равны, да, вот эти символы не равны.
Ну а здесь все равно. Вот это вот равно, вот это вот равно, вот это вот.
Поэтому это точное значение z-i. Да?
Ну вот. А иначе, если так вышло, что z-i-l у меня очень большое... Давайте новую картинку нарисую.
Если у меня z-i-l очень большое, какое-то вот такое вот, выходящее за пределы моего префикса, то я могу лишь только сказать, что z-i,
по крайней мере, вот это вот r-r плюс 1.
То есть я точно знаю, что вот это вот равно вот этому вот, и равно вот этому вот, потому что это значение z-блока.
Значит, вот эта штука равна вот этой вот сдвинутой.
Но я не могу сказать, что то, что происходит уже вне префикса, вне вот этого максимального z-блока, я про эти символы ничего не знаю, на то равны они вот этим или нет.
Точнее, даже я знаю, что они не равны. А вот эта символ точно не равна этому вот.
Значит, ну я могу точно по крайней мере сказать, что все, доходящее до конца вот этого z-блока, вот это вот, это тоже настоящий z-блок.
Потому что все вот эти символы равны вот этим вот, и поскольку это значение z-блока в этой точке, то они же равны префиксу той же длины.
Иначе, я могу по крайней мере сказать, что z-i больше либо равно, чем, ну вот эта вот длина этой строки с i-того по этой символ.
То есть, больше, но очень короче.
А если у меня есть нижняя оценка на z-i, то давайте я просто ее туда положу, а потом вступую, пойду по символам слева направо, буду проверять, равны они или нет.
Ну то есть, я знаю тут нижнюю оценку, то есть я знаю, что такой префикс равен, точнее, вот это вот равно префиксу.
Давайте просто идти вправо по этим символам и соответственно по префиксу той же длины, ну и проверять, там они равны или нет.
И пока равны, я могу текущий z-блок увеличивать.
Все, весь алгоритм.
Так, давайте опять напишем.
Опять есть строка с, есть ее длина, есть вектор значения z-функции.
И мне еще нужно, вот если я в прошлом решении, если я в префикс функции хранил в предыдущем найденный максимальную субпрефикс, в переменной j, то здесь мне нужны глобальные переменные lper, ну в глобальном смысле, в рамках всех i, мне нужно поддерживать максимальный найденный z-блок.
Ну давайте скажем изначально, что его нет, его координаты минус один и минус один.
А потом в будущем я буду хранить там реальные координаты с самым правым z-блоком.
Так, ну z нулевое у меня будет ноль, я его не считаю, считаю все, начиная с и равно единиц.
Ну вот просто вот это давайте напишем сначала.
Сейчас, сейчас, сейчас.
Так, да, сейчас, надо, давайте подумаем.
Ну да, если l меньше равно i и i меньше равно r, то давайте z и положим изначально минимум из z минус l и r минус и плюс один.
Да, ну то есть как раз я вот это вот все учил.
Если у меня текущий i попадает в самый правый z-блок среди тех, которые у меня есть, то у меня есть два варианта.
Либо мне нужно просто туда положить z и минус l, если оно не вылезает за пределы вот этого вот префикса.
Либо если вылезает, то нужно положить количество символов до конца префикса по ср минус и плюс один.
Ну и минимальный из них будет как раз вот, как раз правильной границей.
То есть у меня либо вот этот, либо вот этот, ну из них минимальная, но если это меньше, то будет вот это, а если это меньше, то будет вот это.
То есть у меня сейчас в z и точно лежит какая-то нижняя граница на его правильном значении.
То есть либо вот это и это уже даже точно, либо это просто какая-то нижняя граница, возможно ответ больше.
Давайте пойдем пока можно следующий символ прочитать, и он будет равен тому, чем продолжается прессить.
То есть пока вот этот символ равен вот этому, давайте увеличим z.
Ну вот это и сделаем.
То есть пока i плюс z i меньше n i s z i t равно s i плюс z i t делаю плюс плюс z i.
Это вот в точности то, что я здесь нарисовал.
Если я нашел какой-то текущий z block длины z i в позиции i, то вот этот символ следующий за ним имеет номер i плюс z i.
А первый символ следующий за префиксом, который я должен проверять на равенство с этим, это просто z i.
Ну потому что это длина, значит в ноль индексации будет тот самый символ.
Следующий за префиксом.
Все, пока они равны, я вывечу.
То есть у меня после этой строчки в z i лежит какая-то нижняя граница на z i.
То есть я знаю, что ответ в этой точке хотя бы то, что там лежит.
Но дальше просто в тупую увеличу.
Пока можно увеличу.
Все, в конце нужно не забыть пересчитать lr.
Если я во время этого вайла нашел какой-то более правый z block, то есть я вот тут шел-шел-шел и нашел какой-то новый вот такой вот z block.
Если его правая граница правее чем старая правая граница, то мне нужно мою lr обновить.
Если i плюс z i минус 1 больше чем r, то мне нужно сделать что?
Мне нужно сказать, что при этом это i, а r это вот эта вот самая правая граница.
i плюс z i минус 1.
Конец.
Так, вопросы будут? По корректности.
Давайте еще раз повторю, что из вот этих рассуждений, которые мы здесь привели, следует, что после вот этого ifa у меня в z i лежит какое-то нижнее ограничение на настоящее значение z i.
Если там какое-то нижнее ограничение, то давайте просто втуку и потом слева-направо будем идти проверять, увеличивать до настоящего правильного значения z i.
Вы всегда либо close z block, либо...
Еще раз?
В нашей текущей позиции они всегда либо в z block, либо до него?
Нет, может быть правее, конечно.
Вполне себе, у вас мог закончиться этот блок lr и стать вот сюда.
Ну тогда просто это не сработает, будет z i равно 0, и я втуку и его насчитаю.
Это не страшно.
Вот.
Корректность вроде тогда понятна.
Значит опять, синтотика почему-то работает за линейное время вновь.
Потому что давайте посмотрим на r.
Я утверждаю, что каждая итерация цикловая, она сдвигает r хотя бы на 1.
Увеличивает, да, увеличивает r хотя бы на 1.
Почему?
Потому что
Итерация цикловая
могут происходить только в том случае,
если вот здесь вот в минимуме был выбран вот этот вот товарищ.
То есть это вот второй случай, который я здесь рисовал, да?
Когда у меня z и –l большой,
то есть у меня z и –l большой,
то есть у меня z и –l большой,
то есть у меня z и –l большой,
и оно вылезает за пределы вот этого префикса,
я его просто обрубаю концом предыдущего z-блока.
То есть я говорю, что вот это вот текущее мое значение z и.
А дальше, если что, я все вот эти вот символы перебираю просто,
и если они равны, то увеличу z.
Ну тогда понятно, что если я нашел символ равный тому, что чему нужно,
у меня r точно сдвинется, потому что вот у меня z-блок,
он раньше заканчивался в позиции r,
а теперь с каждой новой итерацией цикловая он сдвигается направо на 1.
Потому что я нашел символ, равный чему-то там, чему нужно,
у меня z-блок расширяется направо.
Ну все.
В случае, когда i не лежало в отрезке lr,
и здесь происходило увеличение,
ну значит у меня было lr где-то вот здесь,
и было где-то вот здесь,
и я направо вот так и иду, увеличиваю вот эти символы равно вот этим.
Ну значит опять-таки у меня r двигается хотя бы на 1,
то есть у меня после вот этой итерации lr будет вот такое.
Ну и каждая итерация val увеличивает правую границу на 1.
Все.
r всегда не больше, чем n-x1,
значит сумма вот таких итераций было линейное количество.
Ну все, а все остальное тут понятно,
просто for какой-то, if, if.
Проблема только в val,
но мы доказали, что суммарно в итерации val было линейное количество.
Можно еще раз спросить, почему если первое значение это не вот это,
то у нас, ну, увеличу хотя бы на 1.
Наоборот, со второй это не будет,
потому что у нас будет 1,
и у нас будет 1,
и у нас будет 1,
и у нас будет 1,
и у нас будет 1,
наоборот, со второй это меняет.
Вот давайте вспомним,
давайте вот первый случай, вот этот вот случай рассмотрим.
Когда i плюс z i минус l меньше, чем r минус l,
так, сейчас, дайте подумаю.
А тут другой, да? Ща, ща, ща, момент, момент, момент.
Потому что я с некрайним сам.
Угу, с некрайним сам.
Просто f должно был быть.
Да, там был неправильный раз, но щас вроде правильный.
Еще раз, смотрите, вот что происходит здесь.
Это значит, был у меня вот такой вот z блок,
вот это вот равно вот этому вот.
Я рассматриваю точку i,
ну и соответственно равну ей точку i минус l,
потому что после сдвига этого блока на l влево,
как раз получается та же самая строка, потому что это z блок.
Давайте рассмотрим значение z и минус l.
Вот оно.
Если следующий символ за вот этой вот строкой длины z и минус l
лежит все еще внутри этого префикса,
то я точно знаю, что верно вот это вот равенство.
Это соответственно происходит ровно в этом случае.
Когда прикладывание в этой точке z и минус l символов
оставляет меня левее вот этой правой границы.
Хорошо.
И в этом случае получается, если вот это произошло,
а вот это вот на самом деле означало бы,
что среди этих двух выбрался вот этот вот минимум.
Ну потому что вот как раз z и минус l здесь равны,
и r минус i плюс 1.
Соответственно, если минимум это вот это вот,
то дальше у меня ни одной итерации вала не произойдет,
потому что этот символ не равен вот этому вот,
и ни одного вала не произойдет.
Иначе, если ситуация противоположная,
и этот z блок очень длинный,
и если он уходит за границу префикса,
то я его обрубаю вплоть до этого символа
и кладу как раз r минус i плюс 1.
И только в этом случае может сдвигаться правая граница.
Так, вроде все отказали.
Так, у нас еще немного времени осталось,
давайте попробуем еще один алгоритм.
Сейчас.
Или немного, сейчас.
Так, давайте алгоритм Монайкера посмотрим.
Четвертый прикол сегодня.
Смотрите, задача такая.
Ну, напоминание.
Строка называется полиндромом,
если она равна развернутой себе.
А если записать справа-налево,
получится то же самое строка весь.
Задача такая.
В каком-то смысле найдите все под полиндромом строки.
Более формально давайте рассмотрим следующую картинку.
Вот у меня есть один ямок,
который, я думаю, в каком-то смысле ну,
этот ямок, я думаю, он должен быть под полиндромом.
Рассмотрим следующую картинку, вот у меня любой подполиндром это какая-то строка, у любого полиндрома есть центр, который либо находится в какой-нибудь букве, либо расположен между буквами.
Более того, понятно, что если для какой-то позиции, давайте позиции считать букву или промежуток между буквами, понятно, что если в какой-то позиции такой подстрока с центром в этой позиции длины k является полиндромом, то подстрока длины k-2 тоже является полиндромом.
Вот если есть центр, есть вот такой полиндром симметричный относительно этой точки, ну понятно, что если просто отрезать первый и последний символ, то останется полиндром в самом же центре.
Поэтому я могу определить следующее, я могу для каждой центральной позиции задать максимальную длину крыла в обе стороны такой, что у меня получается префикс.
Ну я раз я взял максимальную, то получается, что все более маленькие, получающиеся отбрасыванием символов с левой правой, тоже будут полиндромом.
В этом смысле, если я для каждой центральной позиции нашел максимальный полиндром в обе стороны, то я нашел вообще все полиндромы, описал точнее все полиндромы.
Это вот эти вот и все их вот так вот получающиеся под полиндромы, получающиеся отбрасыванием с двух сторон равного количества символов.
Ну и соответственно задача для каждой центральной позиции, то есть для каждой буквы или для каждого промежутка между буквами,
считая эту позицию центром полиндрома, найти максимальную крылу полиндрома.
А вот если здесь там х, то соответственно вот эти вот х символов должны быть равные при чтении вот в таком порядке.
Слева направо, справа направо.
То есть в каком-то смысле надо описать все полиндромы из центра в каждой точке.
Так, ну, наверное мы посмотрим, может мы не до конца его разберем, но идею я расскажу.
То есть идея первая. Вместо того, чтобы париться и раздельно рассматривать вот эти два случая,
когда центр полиндрома находится в букве или в промежутке между буквами, я сделаю сначала следующий трюк.
Давайте я на примере строки вот такой вот, его покажу.
Я вставлю просто какой-то фиктивный символ, типа решетки, между всеми символами, перед первым и после последним.
То есть я буду рассматривать вот такую строчку.
Тогда теперь все полиндромы, что такие, что такие, будут в качестве центра иметь символ.
Потому что вот здесь вот, если у меня центр был в промежутке между символами,
я туда вставил решетку, и эта решетка будет теперь центром полиндрома.
Значит теперь я свою задачу, ну, два раза упростил.
То есть мне не нужно отдельно рассматривать полиндромы четной или нечетной длины,
мне достаточно установить только полиндромы нечетной длины, когда центр ровно в символе.
В новой строке достаточно найти все полиндромы нечетной длины.
Нечетные длины, то есть такие, центр которых это символ строки.
Центр которых это символ.
А не вот позиции между символами, как было в случае четкого полиндрома.
Вот, все, то есть теперь у меня задача такая.
У меня есть вот такая новая строка, давайте я ее переназову, это моя новая С.
А новая строка С.
Мне нужно для каждого И, для каждой позиции И, найти такое максимальное значение прям И.
Что если рассмотреть вот эти МИ символов, начиная с И, заканчивая И, то вот это будет полиндром.
Надо найти такое максимальное МИ, что если в качестве М взять крыло полиндрома,
вот эту правую половину полиндрома, то это будет в точности полиндром.
Среди всех таких найти максимальное МИ.
Так, ну тут подсказывать хэши можно, конечно, делать хэшами, да.
Можно, ну смотрите, мы умеем считать, мы умеем, ну я не буду вообще подробно описывать,
но в общем можно бинп-уиском с помощью хэшей это сделать, это правда.
Потому что по факту мне нужно проверять подстрочки на равенстве,
мы можем проверить, что вот это вот равно развернутый вот это и вот.
Там с разворотом как-нибудь разберемся, но а на равенстве проверять мы умеем с помощью хэшей.
Вот это не спортивно.
Собственно, мы могли бы также Z функцию считать, бинп-уиском по значению Z,
проверять на равенстве подстрок.
Вот, теперь давайте спортивно это сделаем.
Делается очень похоже на Z функцию.
Давайте идти по строке слева направо и поддерживать текущий самый найденный,
фу ты, среди всех найденных самый правый подполиндром.
Давайте я иду по строке.
Нашел какой-то момент полиндром самой правой границы.
Храним полиндром самой правой найденной границы.
Полиндром самой правой найденной правой границы.
Ну и дальше какой-то очень похожий разбор случаев.
А именно, давайте считать, что внутри вот этого полиндрома,
самого правого полиндрома, который я нашел, находится наша очередная позиция E.
Вот она где-то здесь.
Где нужно найти максимальный подполиндром.
А у меня был максимальный подполиндром с центром вот этой точки.
Так, давайте как-нибудь...
Давайте я, поскольку это полиндром, то я могу вот эту картинку развернуть,
и, соответственно, E у меня отродится вот куда-то сюда.
Там это будет что-то в стиле, там, не знаю, 2G минус E.
Короче, симметричная позиция для точки E относительно центра вот этого полиндрома.
Добрый практик.
Вот, давайте посмотрим M в этой точке.
Если она более левая, то значение M мы в ней уже знаем.
Если этот полиндром маленький и не вылезает за границы большого полиндрома,
то значит, вот это вот и вот это вот два полиндрома, которые нельзя расширить влево-вправо.
Потому что, что это значит?
Значит, вот эти символы неравны, но поскольку это все один большой полиндром,
вот эти символы будут неравны.
Вот эти вот там. Здесь будет X, Y, а здесь Y, X.
Неравны. Значит, его проглевать нельзя.
Поэтому если M в точке какой-то противной, 2G минус E,
не вылезает за границы текущего найденного полиндрома, самого правого,
то мы в точности знаем M, оно просто равно вот этому вот.
А если вылезает, это простой случай, тогда можно просто присвоить и пойти дальше.
За единиц мы его нашли.
Вот эта картинка такая.
Это у меня был предыдущий центр.
Вот у меня есть текущий И.
Вот его отражение.
Доживенский.
Вот. И эта штука вылезает за границы полиндрома Эллера.
Ну тогда я его могу обрубить опять-таки.
Я могу его обрубить так, чтобы он помещался внутрь Эллера.
То есть я его могу обрубить вот здесь, ну соответственно, симметрично.
Где-то вот здесь он обрубится.
Я знаю, что это тоже по отличному полиндрому.
Который, возможно, можно расширять обе стороны.
И если я его нарисую в центре в позиции E, то у меня получится что-то вот такое.
И дальше, если я буду просто наивно перебирать вот эти вот точки,
как бы точку справа и точку слева текущего полиндрома,
если они равны, буду увеличивать.
Тогда работает даже самая идея, что в Z-функции.
Пока вот эти символы равны, я увеличиваю текущий M и E,
а значит, в частности, увеличиваю R.
Потому что если я проверю, что этот символ равен R и иду дальше,
то у меня после этого текущий найденный самый правый полиндром сдвинется вот сюда.
Потому что эта граница будет больше, чем R.
Поэтому то есть здесь для этого конкретного E может быть несколько итераций цикловаяла.
Пока вот эти символы равны, вот эти, вот эти и так далее.
Но каждый итераций цикловаяла сдвигает текущий найденный самый правый полиндром R.
Значит, суммарно, опять будет задание.
Все, вот такая идея.
Вроде все, кроме кода, я рассказал.
Всем спасибо за внимание.
