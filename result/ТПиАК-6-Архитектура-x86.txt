В прошлый раз мы смотрели на Assembler архитектура ARM,
которая у вас, в частности в телефонах, пришла пора посмотреть и на то, что у вас
также весьма распространено в ваших стопах, ноутах. Тоже весьма распространенная архитектура,
а именно x86, и в частности x86-64. Вот у нас процесса этой архитектуры AMD,
попробуем что-нибудь написать и скомпилировать это в Assembler на код.
Естественно нам интересно выяснить какое же здесь соглашение вызови, по аналогии с ARM.
Поэтому напишем простейшую функцию сложения чисел и посмотрим во что она превратится.
Видим, что здесь чего-то очень много страшного, поэтому может быть нам пригодятся оптимизации.
Вот наша функция, в которой мы наловили сложение и какие-то операции.
Что это у нас такое с процентиками может быть? Это у нас как раз регистры,
маленькие кусочки памяти, которые хранят наши данные. Интересный вопрос, что же за операция,
если она начинается со слова add? А в какую сторону идет присваивание? К тому, кто указан слева или
который указан справа? То есть вы считаете, что указан слева? То есть EDI добавляется к ECE,
затем к ECEX, а у нас вроде бы сложение всех несколько чисел в одну сумму. Проверили
кипотезу? Что-то у нас подозрительное. Другая кипотеза? Ну да, вариантов не особо много.
Добавить ECE, EDE и положить EDE. Добавить EDEX к EDE. То есть присваивание в местном синтаксисе
идет слева направо. А теперь вот так. Где оказался EDE? Теперь присваивание
идет справа налево. Так, в случае x86 у нас есть как минимум два варианта синтаксиса. Все действия
и соответствующие им машинные кд остаются ровно теми же самыми, но есть два варианта записи их
в форме удобной для чтения человека. То что было первое это аттензивный синтаксис. Он с
процентиками и с присваиванием слева направо. И интеловский синтаксис без процентиков и с
записью справа налево. Какой синтаксис вам нравится больше? Кто за интеловский? Кому он
больше понравился? Раз, два, три, четыре. Кто за аттенкишник? Раз. А дистанционные слушатели
у нас есть еще? А только в записи. Ну значит 4.1 в пользу интеловского. Оба синтаксиса имеют
правное существование, но поскольку разные направления присваивания, если вы будете
их использовать вместе, то вы просто запутаетесь. Хорошо фиксируем, что синтаксис используем интеловский
и присваивания справа налево. Исходя из этого можно ли сказать, где у нас возвращается код
возврата? В каком регистре? Перед тем, как выйти из функции, в какой присваивается последний? В ЯХ.
То есть происходит какая-то магия. Сейчас мы до нее доберемся. С регистром ЯХ. А где у нас аргументы?
В регистрах ЕДИ, ЕСИ, ЕДХ, ЕЦХ, Р8Д и какой-то Р9. Обращаю внимание, что в отличие от Арман,
где было все относительно просто и понятно, регистры имели вроде бы естественные названия.
Начиная с нулевого, просто по номерам, здесь название какие-то буквы. Но большая часть регистров
имеет название, начинающуюся на букву Е. По крайней мере пока мы работаем с интами. А если мы возьмем и поменяем все на
И регистры вроде бы те же самые, только буквка впереди Р. Отсюда делаем вывод, что Р у нас 4 бита, Е 32 бита.
А если у нас будет другой тип?
Схранили, скомпилировали. Судя по всему, просто используются младшие части регистров.
Как же они на самом деле устроены? Основной принцип, который ставили разработчики этой
архитектуры совместимы с предыдущими моделями. И здесь очень много наслоений предыдущего.
Вспомните, как мы писали свой маленький простой процессор-видеоэмулятор. У нас были регистры А,
А, Б, Ц, и Д с какими-то номерами. Примерно так было и было и в интернете. Допустим, был у нас регистр А. Затем появился
более хороший техпроцесс, можно делать транзисторы по-мельче, значит транзисторы
побольше, значит можно сделать сам регистр побольше. 16 бит. Вот у нас
16 битный АХ, но изображение совместимости работы 8 бит осталось и доступ к 8 битным остался. Значит,
у нас есть его старшая часть АХ 8 битная и АЛ 8 битная младшая. Всего это 16 битный регистр. Затем
закон УГУРО продолжал работать и делали наконец 30 битные.
Появился 30 битный регистр АХ, к его младшим битам есть доступ как к регистру АХ, к его младшим битам 8 как к регистру АЛ и старшим битам регистр АХ под названием АХ.
Те же самые 8, тем тоже самое сделали 16 битные архитектуры и появились вот такие регистры.
А вот этот один и не делали, но совместим уже со старым. Вот теперь у нас АХ.
Исходя из этого подумайте, насколько велик в битых регистр АХ БЛ? 8 бит.
Регистр СХ. Регистр ДХ. Регистр ЕСИ.
Начинается наездка. Сколько битный? Регистр РДИ.
Ну интересно, посмотрите как же здесь выполняются какие-нибудь арифметики и другие арифметические операции.
Вот он у нас был плюс. Заменяем. Компилируем.
Компилятор многие операции заменил на сложение, но для оптимизации логично.
Уножение.
Так оптимизирующий компилятор зачем-то закинул регистр Р9Д в АХ и только затем с ним начал делать операцию вложения.
Похоже на то, что этот процессор имеет разные регистры, не только по наименованию, но и по назначению.
То есть не все регистры равноправны. Может быть многие равны, но некоторые равнее других.
Как писал Хоро.
Дело в том, что как раз многие операции привязаны к конкретным регистрам, то есть они могут быть выполнены только с конкретными регистрами.
В данном случае как раз с регистром ЯХ, название которого происходит от аккумулятора регистр.
То есть куда и складывается весь результат.
Чем имут.
В чём имут?
А если у нас будет беззнаковый имут?
Тоже имут.
А если беззнаковый лонг-лонг?
Тоже имут.
А что будет с делением?
Тут произошло что-то более интересное.
Старое значение rdx было запихнуто куда-то, а именно в r10.
Rdx это похоже на один из аргументов.
В rax у нас лежит rdi.
И зачем-то делаем побитую операцию xor.
Что будет если xor-ить регистр сам с собой?
Обнуляем регистр таким странным образом.
Почему-то не занесение им константы, а побитую операцию.
Возможно это чем-то лучше.
А чем-то может быть в принципе лучше.
Ага, значит все команды были равны, но здесь некоторые равнее других.
То есть команды может быть дольше выполняются.
Может быть больше занимают в памяти.
То есть похоже это может быть и не риск архитектуры, а циск.
С инструкциями разной длины и разным времени в работу.
Rste у нас оказался еще одним аргументом нашего деления.
Поделили и в результате.
Затем мы опять что-то делим на r10, но в яx ничего не заносим.
Значит куда у нас попало частное?
В rx.
Возможно в результате деления у нас использовался еще какой-то регистр.
Раз мы вынуждены опять перед каждым делением обнулять edx.
Вот наше деление в столбик.
И остаток у нас.
Вот такое деление, при котором в отличие от арма, где мы не обнаружили прямого вычисления остатка.
В процессе вычисления частного заодно вычисляется и остаток.
Мы делим изначально как было устроено умножение.
Если мы перемножаем два числа размерности n, то какое число получаем?
У нас есть древние-древние процессоры, еще 8-битные.
И мы хотим реализовать умножение.
Умножили 8-битные на 8-битные, скорее всего у нас не влезло, значит старшую часть нужно куда-то запихать.
8-битные регистр не лезет, значит куда надо? В два.
Поэтому перемножили AL на BL, например.
И получилась пара регистров.
Старшая часть BL, младшая часть BL.
Дальше мы в этом процессе наконец-то делаем команду деления.
А если мы поделили некоторое число и хотим получить частные длины n и делитель был длиной n, то какое максимальное длины было бы делимое?
Делитель длины n, частная длина n, а число длины 2n мы храним в паре регистров.
Если мы делим, например, пару регистров dx и ax, делим на какой-то регистр, например bx.
Получаем в ax частное, а остаток куда деть?
Регистров у нас внезапно мало, их всегда не хватает, но все равно мы запортили младшую часть большого числа.
Если мы запортили младшую часть большого числа, значит dx уже смысла не имеет.
Значит остаток запихнем dx.
В этом нам важно, чтобы эта старшая часть была какой, чтобы нам удалось поделить, что у нас может пойти не так в определении.
Делить на ноль у вас вроде как учили целый год в курсе матана, но все-таки в целых числах делать это не желательно.
Допустим, это все-таки не ноль. Допустим, у нас будет один.
Каким будет размер частного, если делитель 1, а делимые длины n?
Поэтому, чтобы она влезла в один регистр, старшую часть нужно обнулить.
Поэтому у нас происходит вот такая подготовка к делению.
Да, конечно, это костыль, но исторически сохранившийся костыль приравнен теперь к несущей конструкции.
Это все еще пока у нас числа были беззнаковые.
Можем для простоты оставить деление всего лишь двух.
Итак, вычление у нас происходит опять-таки в rx.
Делим у нас было в rdi, делитель в rci первые два аргумента, а здесь происходит еще какая-то странная операция.
Перед делением.
Обращаем внимание, что числа знаковые.
Если мы заполним старшую часть нулями, что будет с числом?
А если мы делили отрицательное, оно вдруг стало положительным?
А чем тогда заполнить старшую часть, чтобы число осталось ровно таким же, но отрицательно, только более длинным?
Просто нулями не подходит. Давайте заполним не нулями.
Значение числа при этом изменится.
Нам нужно добавить ровно такое же число, чтобы оно стало нуливым.
Помним, что число у нас в дополнительном коде.
Было у нас такое число.
Можно дописать слева лидирующие нули, можно дописать слева лидирующие единички.
Если значение числа при этом не изменится, просто изменится его размер.
Допустим, если у нас было число минус один, добавили единичку, получили ноль.
То есть это минус один. Если оно стало длиннее, значение его не изменилось.
От того, что мы слева дописали единички.
Аналогично с другими отрицательными числами.
Поэтому вот у нас rdx.
Берем знаковый бит этого самого rx.
Берем этот бит и размазываем.
По всему rdx.
То есть ставим его всего либо нули, либо единичками.
В зависимости от этого старшего бита.
Такое странное деление, но так реализовали.
Как же здесь происходит ветвление?
Посоливаем за торнарником.
Посоляем.
Здесь мы сравниваем.
И куда попадает результат сравнения?
Пока не воедем. Раз мы его выложим, модифицируемся.
Вышли регистры. Результат выкинули.
При каком условии rdi больше, чем rsi?
Именно больше.
Нет, мы вот именно так сравнивали.
Rdi-rsi.
То есть у нас сброшен зиру флаг.
И еще какой флаг?
Тоже сброшен.
Если он не встал, значит у нас не получилось отрицательное число в результате этого вычитания.
И зиру флаг тоже не встал, нуль тоже не получился.
Не отрицательное и не ноль. Это что?
Положительное.
Как раз значит rdi строго больше, чем rsi.
Это вот парадекат greater.
И в зависимости от этого парадеката
Мы поставили al в единичку либо в нолик.
А старшую часть вы уже обнулили.
Сделаем чуть-чуть по-другому.
Мы сравнили.
В один регистр занесли одно, в другое другое.
И условно занесли в наш регистр edX при каком-то условии.
Что значит меньше или равно?
Если флаг знака или зиру флаг у нас стоят.
То есть если у нас случай равно или случай меньше, тогда...
Мы видим команду conditional move. Условно выполнен некоторую команду при некотором состоянии флага.
Этот move у нас безусловный, а этот условный.
Кроме того, этот move не поменял нам состояние флага.
А может ли процессор делать эти команды не совсем по порядку, а слегка распараллельно?
Сравнение и два присваивания у нас независимы. Их можно сделать параллельно.
А conditional move зависит от состояния флага, который будет поставлен в результате сравнения.
И вот как раз edX и ex.
Но это уже на откоп самому процессору. Во время исполнения может быть он смотрит чуть вперед и что-то исполняет раньше.
Но если он смотрит вперед и что-то исполняет раньше, то это не значит, что он смотрит вперед.
Но если он смотрит вперед и что-то исполняет раньше, то это не значит, что он смотрит вперед.
Но если он смотрит вперед и что-то исполняет раньше, то это не значит, что он смотрит вперед.
Но если он смотрит вперед и что-то исполняет раньше, то это не значит, что он смотрит вперед.
Конечно move мы видим, а тут у нас где-то должно быть еще одно сравнение.
Мы сравнили два регистра и возможно куда-то перешли.
В армии это называлось branch, а здесь у нас переход jump. Мы перепрыгнули на L7.
После чего позвали функцию push. После чего вернулись на метку L2.
Куда-то сходили и вернулись.
Загрузили регистр, взяли регистр, закинули туда аргумент.
И нам понравилась функция Lea. Пока еще временна магия.
Теперь пройдемся по массиву.
И просумируем все числа массива.
Все-таки в интонском синтексе.
Все-таки в интонском.
Возможно вариант без оптимизации будет более простым.
У нас есть обращение к памяти.
Начало массива плюс смещение.
Номер элемента, домноженный на что? На размер интон.
Вот для таких вычислений. Причем как правило размеры, типы данных, какое число?
Заранее известные и при этом степени двойки.
Значит можем ли мы такую операцию сделать быстрее, чем простое умножение? Сложиться с двигом.
Поэтому была предусмотрена отдельная команда сложиться с двигом.
В данном случае мы наносим адрес.
Адрес ЛЦ0 относительно РИП. РИП инструкцион поинтер. Сколько битный?
6-4 битный.
Относить на текущего положение смещение на метку ЛЦ0.
Как раз адрес нашей строчки в нашем исполняемом коде.
Заносится в РДИ и как раз становится аргументом функции ПУЦ.
Теперь посмотрим как же это выглядит все в машинном коде.
Поэтому мы не будем на этот раз останавливать компиляцию на этапе остального кода и посмотрим на машины.
Дезасаблировали.
И получили в каком сетоксисе с процентиками?
В оттенке?
Либо дезасаблировали.
Дезасаблировали.
Собственно минус Минтел.
И получили уже ставший нам привычным Интел с кодеситоксисом.
Видим здесь смещение относительно начала, коды команд и их расшифровку для чтения человека.
Команда у нас какого размера?
От 1 байта до как минимум 5.
И даже 7 байта.
Это характерный атрибут цискоархитектуры.
У нас разные команды.
Разного размера.
Ну хотя в принципе можно видеть, что все равно каждая команда в отдельности принимает конца количества аргументов.
Даже если мы их даем лучше.
Соответствует.
Мы в EIX заносим число.
То есть то, что нужно.
И в EIX заносим число.
Раз Ешки.
Они у нас сколько битные?
32 бита, то бишь 4 байта.
Ага, В занести.
В какой именно регистр?
Регистр номер 8 или регистр номер А.
Вот.
Куда занести.
А теперь само число.
Причем в каком порядке байтов?
Да, в лидл-энди.
То же самое.
Непосредственное число.
Ну сами команды имеют разный размер, поэтому вычислять где следующая команда сложнее.
Чтобы вычислить где следующая, нужно декодировать предыдущую.
А просто сказать сдвинься на 7 команд влево у нас не получится.
Даль на 7 команд вперед не получится.
Напишем кто-нибудь, что уже целиково и может запуститься.
И можем запустить это под отладчиком.
Например, отладчик ГДБ.
Было больше информации, добавим опцию минус G.
Ставим breakpoint на функцию main.
И R. Inforegisters.
Да, та самая команда, которую вы реализовали в своем процессоре.
Но программа еще не запущена, у нее еще нет регистра.
Запускаем.
Run.
Поскольку мы добавили опцию минус G, у нас появилась в исполнении в фаре отладочная информация.
В частности информация, какой код на C этим командам соответствует.
Мы не выполняем непосредственно код на C.
Но поставить метки, что вот у нас была такая команда носивка, она скомпилировала света, мы можем.
Inforegisters.
Ой, сколько у нас всяких регистров. Интересно, как получилось.
РАХ, РБХ, РЦХ, РДХ.
Вот четыре основных архиметических регистра.
АХ, аккумулятор, регистр.
ДХ, датарегистр.
К ним гвоздями прибыто деление.
И умножение.
То есть регистр у нас не общего назначения.
Это еще один признак цискархистектуры.
РСИ, РДИ.
Изначально Source Index, Destination Index.
Оно сейчас используется для передачи аргументов функций.
РБП, РСП.
Base pointer, stack pointer.
Base pointer используется как регистр, в котором хранится адрес, относительно которого мы как-то базируемся, что-то отчитываем.
Stack pointer, указатель на вершину стека.
А вот тут Intel надоело выдумывать название.
И они решили сделать по-простому.
Восьмой, девят, десятый и так далее до пятнадцатого.
Если продолжить назад, РАХ будет нулевой.
Также есть крайне важный регистр.
Instruction point.
В данном случае в 64-битной своей спостасе, который хранит, какую команду выполнит следующий.
То есть переход это фактически записи в Instruction point.
Ну а также регистр флагов.
В данном случае E-flags.
В случае 64-битности там ничего особо не добавили.
И какие флаги у нас сейчас установлены.
Parity flag.
Ну и interrupt.
То есть мы сейчас все постоянно прерываем.
Parity flag.
Также у нас есть сегментный регистр.
В частности код и сегмент, stack и сегмент.
В каком сегменте, поймите, что у нас лежит.
Сделаем шаг.
У нас что-то, возможно, поменялось.
Что-то в регистре было записано.
А х, например, показалось единичка.
Оттуда вернулся код вас рата из нашей функции.
Ну вот мы из функции вышли.
Ну поскольку архитектура достаточно древняя,
оброшая всяким софтом, существует и множество диалектов ассамблера.
То есть помимо разного синтактиса, еще и разные диалекты.
В частности, диалект у нас.
Мы написали нашу программу.
Как вы думаете, что она сделает?
У нее торчит наружу контакт, к которому можно подпаяться.
Контакт называется main.
Вот она, метка main.
Мы обнуляем регистр rx вот таким способом.
Потому что это короче, чем заносить туда константу.
И чуть-чуть быстрее работает.
Тут у нас инструкция работает разное время, занимает разное место в памяти.
В отличие от риск архитектуры.
Получили уже объектный файл в виде executable, unlinkable формат.
Мы его можем разобрать с помощью дампа.
Функция main состоящая из целой одной команды.
Длиной 3 байта.
Дальше мы можем отравить гнусный компилятор.
В составе которого много всего хорошего, в частности линковщика.
Он берет все наши объектные файлы.
Как радиодетали рассыпухой и спаивает их.
Тут был выход под названием main, тут есть вход под названием main.
Спаиваем и так далее.
Это линковка, а наша связывание.
Вот наша программа запустилась.
Это целиковая программа, написанная на нашем ассамбле Renas.
А как бы автоматизировать эту сборку?
С помощью каких инструментов?
Например, с помощью make.
Тест A это у нас цель.
Тест S исходный текст.
Скомпилировать ассамблем NASMA в формат executable and likable формат.
Всполняемый файл.
Попозже назовем его exec.
Чтобы его собрать нам нужен объектный файл.
Например, натравливаем линковщик.
Тест O у нас уже существует.
И первая цель в make файле, которая у нас получается по умолчанию.
Дата модификации объектного файла позже, чем исходного.
Если у нас исходный файл модифицируем позже, чем исполняемый.
Может ли исполняемый быть скомпилирован из этого исходника?
Если у нас время идет нормально, то не мог.
Значит его нужно перекомпилировать.
В противном случае зачем?
Тут как раз то, что в самом начале название нашего предмета, технология программирования.
Вот это вам пригодится, даже если вы забудете весь ассамблер.
А именно make файл.
Или возможно какие-то надстройки, которые позволяют их автоматически генерить.
Например, CMake или CMake.
Собрать исполняемый файл.
И поменяли дату риме, просто обновили.
И вот у нас уже полностью пересобирается наш объектный файл.
И из объектного файла линкуется исполняемый.
Если уж мы хотим так, то исполняемый файл должен получаться тот, который мы назовем.
Минус о, аутут.
То есть какой должен получиться результат работы.
Выбил только та часть моего файла, которая требуется.
Если у вас будет большой проект, на гигабайт так исходного кода.
И вы изменили там очень мало.
То обновление мейком вам поможет сильно сэкономить врига.
При этом у нас разные части собраны разными компиляторами.
И возможно нам потребуется не только исполняемый код, но и данный.
Мы хотим позвать принт.
Ей нужно передать аргументы.
Как мы их передадим?
Увы, линф неизвестен.
Что же мы делали? Обычно ради этого.
Говорили, что мы где-то друг в другом месте объявим.
Так и напишем.
Но почему-то не выявилось.
Объектный файл собрался.
Но не получилось. Почему?
Потому что по умолчанию мы пытаемся сделать динамический линкуемый файл.
А нас нам родил статический линкуемый.
Попробуем так.
Опять таки не вывел, а попробуем в еды.
Тоже вывел.
Пока не выводит.
Но поскольку уже звонок был, и сейчас приедет следующий лектор.
То чего же у нас там не хватает?
И как это исправить?
Это уже на следующий лектор.
