Сейчас у нас пятое занятие по теху, и сегодня основная
тема – это как рисовать, и цель – научиться рисовать
эффективно в нескольких смыслах.
В первом, чтобы сложные рисунки можно было не пытаться
как-то рисовать рукой, а как-то упрощать процесс
рисования.
А второе, чтобы можно было легко в паре строчек изменить
какие-то параметры рисунка, например, цвет всех смолгательных
линий или что-то такое.
В общем, все будет состоять из двух частей.
Сначала какие-то общие слова про тикс, во второй
части уже более сложные учисления, более сложные,
более удобные тем временем, и в конце рассмотрим какие-то
примеры.
Да, для того, чтобы тикс начал работать, как и с большинством
в техе, нужно подключить соответствующую либу,
вот, да, это либо тикс, вот, ну и все, уже можно прямо
рисовать в первой строчке.
Вот, самый простой рисунок, который я смог придумать,
выглядит примерно так.
Чуть позже мы рассмотрим, что здесь значит в этой строчке.
Вот, но, в общем, хочу обратить внимание, во-первых, на точку
запятой в конце.
Часто можно про нее забыть, и дальше будут какие-то
странные ошибки.
Вот.
Ну и про единицы измерений тоже стоит сказать.
То есть, в пойнтсах, в инчах, в каких-то еще единицах,
они все какие-то разные.
Ну, подробнее про них можно в Гугле посчитать, но, в
общем, все можно, ну, можно указать в разных единицах,
все длинные.
Вот, теперь ближе к синтезису.
У меня есть два вопроса.
Во-первых, правда ли, что тут нужен математический
режим?
Оно просто работает самостоятельно, без долгого, без ничего?
Какой режим нужен?
Математический.
А, нет, тут никакой математический режим не нужен, потому что
он не нужен.
Оно работает, ну, то есть, вот эта строчка, она скимпилится
просто в строчке как текст, как текст обычный, но, понятно
то, что, скорее всего, это будет обернуто в окружение
фиджа, потому что это какой-то плавающий объект, и вообще
это же какая-то картинка, и все-таки она для всех
картинок в техе, принято их окружать в окружение
фиджа.
Вот.
Поэтому, нет, математический мод тут вообще ни при чем,
и не нужен.
Окей.
Спасибо.
Тогда второй вопрос.
Точка запятой критична.
Поскольку мы пока что живем в варианте тигза, который
модификатор, который поможет от тигз до конца строки,
или это же будет важно, когда мы будем делать большие
картинки по много строкам, тоже будет точка запятой?
Вообще, когда мы будем делать, ну, чуть подробнее скажу,
но, в общем, да, как только мы зашли в тело тигза, тигз
начинает распарствовать все на своем языке, и у него
для, ну, для удобства ему все должно оказываться.
Точка запятой.
Вот.
Это также будет...
Ну, то есть, просто некоторые команды не могут даже помечать
одну строчку по своей длине.
Вот.
Но, чтобы понять, где закончится строчка, нужна точка запятой.
Ну, имеется в виду, вот, строчка синтезическая с точки
зрения тигза.
Да.
Теперь, в общем, самые основы, это вот эти две черточки,
которые были, это синтаксист, так называемый, пути.
Вот.
Собственно, это основной блок всех рисунков в тигзе.
Он стоит из точек и, ну, таких прямых.
Вот.
А теперь уже, да, мы поместили это в окружение тигз-пигзи,
потому что, ну, так, скорее всего, обычные рисунки у
вас будут начинаться, ну, будут в окружении тигз-пигзи.
Вот.
Дальше идет...
Строка начинается с команды, что нужно сделать.
Команда будет раздвинуть, например, расположить,
задать узел, потом мы посудим, что это еще что-то, или,
например, нарисовать.
Вот.
И вот.
Эта команда начинается нарисовать, и дальше указывается
путь.
И, соответственно, вот.
Сначала берется точка с координатами минус 1 на
5 по Х и ноль по Y, потом она движется сюда, потом сюда
и сюда.
Ну, и по пути, как бы, вот, ну, по пути оставляет
за собой рисунок.
Теперь, да, пару слов, пару слов про то, что уже мы говорили
как разные способы, вот, потому что, в общем, этот
способ гораздо предпочтительнее, потому что у вас не будут,
скорее всего, односрочных рисунков.
То есть все односрочные рисунки, которые будут
здесь, это вот просто самые-самые минимальные примеры
а все рисунки стоят там из 20-ти, срок из 30-ти может.
Соответственно, вот, ну, тут больше нечем сказать.
В общем, я иногда буду писать так, но подразумевается
вот так вот.
Да.
Ну, и, еще раз, каждая строчка, именно смысловая строчка,
заканчивается точкой за пятой.
Следующий шаг развития умения рисовать, это умение рисовать
круги.
Ну, то есть с прямыми уже разобрались и, в принципе,
не доставляет никаких трудностей, ну, чисто рисовать какие-то
полигоны, квадраты или что-то такое, вот, проблема уже
с кругами.
Вот, но для этого есть, есть команда circle, но это не команда
рисования, это уже команда в самой, самой, самой фигуры.
Вот, то есть мы опять начинаем, ну, тикс, то, что я говорил,
то, что он может опускаться, если мы находимся внутри
окружения тикс-пикчер, дальше мы начинаем рисовать,
и дальше, когда у нас была просто точка, просто точка
или кусок пути, то вот этот circle 10, ну, circle из скобочков
радиус рассматривается как кусок пути, вот, как
отдельная точка или там прямая, или две прямых, вот,
и рисуют соответственно кружок.
Вот, чтобы нарисовать эллипс синтаксис такой, а чтобы
нарисовать повернутый эллипс, например, можно нарисовать
обычный эллипс, но передать ему какой-то модификатор.
Модификаторы, поскольку они необязательно, как это
принято, передаются в квадратных скобках, вот, их расположение
обычно ни на что не влияет, но, в общем, принято располагать
их перед тем, как они начинают использоваться.
То есть мы хотим повернуть вот эллипс, мы хотим повернуть
эллипс и пишем перед эллипсом, поэтому повернуть 30.
Вот, как-то так.
Следующий еще довольно популярный пример, вот, ну,
насчет упрощения рисунков.
Например, нам нужно рисовать сетку.
То есть понятно, что прямые круги можно рисовать, ну,
какими-то способами, типа там, ну, поинты или что-то
подобное.
Вот, но здесь уже начинаем использовать какие-то упрощения,
какие-то готовые решения.
Вот, например, есть готовое решение для рисования
сетки.
Вот.
Опять-таки смотрим, что здесь происходит.
У нас есть несколько необязательных аргументов.
Они, ну, у них есть какие-то значения по умолчанию,
поэтому они необязательные, вроде единичка или что-то
такое.
Но можно их уточнять.
Вот.
Дальше, дальше идет команда grid, ну, то есть
нарезать сетку.
Вот.
Дальше идет размер сетки.
Вот.
Ну, подгоняется под, то есть размер – это, ну,
сколько, не больше, чем сколько она будет занимать,
и при этом пытается подгонять максимальное количество
шагов.
То есть, видите, здесь получается пять шагов, потому что
степ 0,4, а здесь 4, потому что степ 0,5.
В этой строчке у нас появилось что-то новое.
Перед командой мы получили координаты.
Вот.
Это означает, где мы должны нарисовать, в каком месте
он должен начать рисовать объект.
У каждого объекта вот эта точка, от которой он
рисуется разно, у круга это центр, у сетки я точно
не помню.
У точки, понятно, самоточка, потому что самоточка рисуется
вот так, как раз без всяких команд.
Вот.
Ну, дальше уже будем смотреть ближе к примерам.
Ну, а тут мы уже научились говорить, где рисовать.
Ну, вот, видимо, мы указываем левый нижний и правый верхний
угол.
А вот что было бы, если бы я сделал, скажем, х-степ
не кратный 2, но типа 0,3?
Да-да-да, если бы было 0,3, то он бы подобрал максимально,
ну, он бы заполнял пока может, а потом сдался.
То есть те прямые, которые по вертикали, они бы нарисовались
сколько можно, а горизонтальные бы кончились не на них,
а подальше, потому что вертикальный был на 1,8, а дальше были
еще горизонтальные.
Да, то есть если бы шаг был 0,3, то тут были такие зубцы
торчали.
Да, понял.
То есть она просто клипается.
Ну, то есть внутренне это устроено, она рисуется
больше чем нужно, потом клипается.
Вот.
Просто клипается.
Да, теперь немного про компетацию объектов.
Вот.
Вот пример, как она клипается, например.
Давайте теперь более сложный рисунок.
Здесь я, видите, вначале не пишу тикс, я здесь подразумеваю
то, что все вот это в окружении тикс-пикча.
Итак, сначала мы рисуем в корнях 0,0, кружок радиусом
10 пунктов нарисовали.
Дальше мы рисуем опять в том же, у эллипса тоже
берется центр за отчетную точку.
Рисуем эллипс 20 и 10 пунктов.
Дальше делаем то же самое, только повернуто на 3 градусов.
Вот этот повернутый эллипс.
Вот.
И дальше, смотрите, дальше мы рисуем сетку.
Вот.
Мы тут не указывали отдельно x-step, y-step.
Команда просто step задает и x-step, и y-step.
Ну, потому что нам уже квадратная сетка, это удобно.
Да, как было верно замечено, это крадиент левого нижнего
угла, это крадиент правого верхнего угла.
Вот.
Да, мы говорим, где рисовать.
Говорим, рисовать сетку.
Говорим, докуда ее рисовать.
Вот.
И еще у нас появились дополнительные параметры, необязательные.
Grey и everything.
Вот.
Это, как можно догадаться, то, что означает за стиль
рисования, ну, именно цвет и толщину.
Если сравнить с предыдущим слайдом, ну, даже не с предыдущим
слайдом, а просто с рисунками кругов и эллипсов, линии
стали потоньше и посерее.
То есть, они уже выполняют реальную функцию фона, и
так уже выглядит куда приятнее.
Да, и насчет, опять-таки, удобства рисования.
Такой сложный рисунок рисовать руками, ну, может быть,
довольно долго, особенно если мы до этого, например,
рисовали эти рисунки.
А здесь копирование рисунков, просто копирование строчек,
что, ну, в общем, ускоряет и делает процесс более
контролируемым.
Вот.
Теперь поговорим про тему идентификатора, которую
только что обозначил.
Вот.
Здесь у нас сетка используется как, ну, просто какой-то
фон, то есть, вспомогательные линии.
Вот.
И мы потратили для того, чтобы сделать ее вспомогательной
линии целых два аргумента.
Серый и очень тонкий.
Вот.
Потом мы сказали, серый очень тонкий, а в голове хотели
сказать, нам нужна вспомогательная линия.
Вот.
Причем, например, мы можем рисовать не только сетку
вспомогательной линии, но и какие-то отдельные части
рисунка нам нужны как вспомогательная линия.
Просто какая-то линия, может, кружок отдельный, еще что-то
более сложное.
Вот.
И мы можем сделать отдельный стиль для них.
Синтакси задания стиля очень, ну, такой неочевидный.
Вот.
Но, если коротко, тиксет – это команда, которая задает
какие-то странные настройки для тигза.
Вот.
Подробнее про нее можно почитать где-то в гугле,
но, например, для такого решения.
Мы указываем свой стиль, в данном случае helplines.
Вот.
И дальше указываем то, что мы, ну, свой не стиль, свой,
как бы, резервируем имя helplines.
Он учитывает с пробелой все такое, потому что там
главная запятая, чтобы не было, потому что он через
запятую их разделяет.
Вот.
И дальше мы конкретизируем, что для этого имени нас
интересует некий стиль.
Вот.
И вот эта точка стиля – это поле его, типа.
И мы приравниваем его набору из параметров.
Ну, собственно, очень тонкий и серый.
Вот.
И теперь эта строчка выглядит немного по-другому.
Мы говорим то, что у нас t должно быть, ну, пол сантиметра.
И еще это должно быть нарисовано вспомогательными линиями.
Мы вот прям, явно говорим вспомогательные линии.
И, ну, кардианты те же самые оставляем.
Мы получаем то, что мы хотели, только теперь более читаемо.
То есть, ну, в общем, да.
Стиль – очень удобная штука.
Со временем рисования понятно, что стиль сильно упрощает
жизнь, потому что объекты разбиваются на какие-то классы.
У нас может быть, например, ну, вспомогательность
вспомогательная.
Например, мы можем последовательно рисовать рисунок,
и нам хочется, например, мы перерисовываем какой-то
рисунок очень постепенно.
И нам надо, хочется, чтобы какие-то части рисунка были
ну, ново добавленные были выделены как новые,
а только что удаленные были помещены как старые.
Тогда такое последовательное изменение рисунка будет
сооружаться просто копированием предыдущего рисунка,
помещанием удаленных...
объектов, как...
стилем удаленные, а новых помещением
а с новым помещением стилем новое, и это будет сразу
отражаться в картинке, как так хочется.
Сейчас немного больше про синтаксис, вот, например,
мы сделали свой объект helplines, и у него стиль вот очень
тонкий, и цвет задали немного по-другому.
Сейчас объясню, что значит, вот хэштег 1 у вас уже вроде
было, про то, как делать свои команды и макросы,
вот, это ровно то же самое, это первый аргумент макроса,
то есть сейчас helplines у нас будет принимать какие-то
аргументы.
Вот, и дальше мы указываем то, что дефолтный принимаемый
аргумент helplines равен черным.
Теперь как это применять?
Да, теперь мы делаем следующий стиль, вспомогательная
сетка.
Вспомогательная сетка принимает своим параметром, вспомогательная
сетка, она всегда вспомогательная, черными линиями, и у нее
в качестве параметра остается все-таки шаг, потому что
шаг надо, ну, стоит варьировать под какие-то свои цели, вот,
ну и дальше задаем дефолтное значение для шага равным
на 5 сантиметров.
Вот.
И дальше, да, и вот пример, как задавать значение, значение
задается через равно, то есть вот helplines равно black означает
вызвать стиль helplines с вот этим параметром один
равным black'у.
То есть мы black поставим сюда, вот, здесь мы могли
написать helgrid равно один сантиметр, и тогда бы они
стали два раза больше, потому что один сантиметр
поставился сюда.
Бесправимцев передаем, передается дефолтное значение.
Вот.
Теперь наша строчка стала еще более сочетаемая, теперь
мы просто говорим вспомогательная сетка и все тут.
И отдельно где-то там, единым для всего проекта мы можем
менять настройки этой вспомогательной сетки.
Да, мы уже проговорили про всякие опции рисунка
по типу тонкие, толстые или цвета, вот, ну, собственно,
есть три основных стиля, я больше не придумал.
Сначала идет толщина, ультра это совсем прям V, чуть-чуть
послабее.
Понятно, thin тонкий, semi-thick это что-то посередине, толстый,
очень толстый, совсем толстый.
Вот.
Цвета.
Есть список цветов, просто человеческий гуглится цвета
Вот.
Ну, цвета тикс, в смысле.
Вот.
Ну, это gray, red, blue.
В общем, если пробовать, например, white или black, то
скорее всего это сработает.
Дальше иногда интересует более тонкая настройка.
И, например, цвет может давать таким, казалось бы, немного
сложным синтаксисом, но тут имеется в виду то, что
RGB за максимум принимается 255 и дальше смешиваются
три цвета, то есть половинка синего, 66,255 зеленого и 21
красного.
То есть он будет не максимально по яркости, ну, в общем, схема
понятна.
А дальше можно миксовать словесные цвета, ну, или
не только словесные, на самом деле, можно миксовать
два цвета.
Эти цвета могут быть заданы также этим образом.
Вот.
Что оценивает такая запись?
Это означает то, что взять вот 10% первого цвета, а остальное
залить вторым цветом.
Ну, он смешивает просто их.
Вот.
И прозрачность это мы смешиваем с ничем, то есть мы берем
зеленый и смешиваем, ну, с ничем смешиваем, то есть
зеленый.
10% зеленого, а остальное не брать.
Поэтому синтез сейчас такой схожий.
И дальше еще все-таки тикс же рисуют линии обычно,
вот.
Ну, если мы не говорим точку, то в целом он рисует линии.
Вот.
И кружочки, и все рисуют линии.
Поэтому еще одна характеристика линии есть, она может быть
штрихованной, может быть пунктирной вроде называется.
Вот.
Также есть миллион других вариантов, которые реже
используются в жизни.
Есть штрих-пунктирная, есть штрих-пунктирная.
Помимо таких обычных классических, которые я только что назвал,
еще есть какие-то зигзагообразные, еще какая-то.
Все это есть или в дополнительной библиотеке, или еще где-то,
но это все про то же самое.
Просто гуглите Line Style в тигзе и будет счастье, если нужно.
Ну, если нужно что-то такое.
Так.
Про опции.
Рисуем.
У рисования есть несколько опций встроенных, то есть
можно передавать просто аргументы, вот параметры
передавать для рисования линии, цвет линии, толщина
линии, стиль линии, передаются просто в одну, ну просто
в квадратные скобочки, перед тем, как рисовать.
Однако, например, когда мы рисуем какой-то полигон,
мы хотим, например, его залить, ну, нам может такое
понадобится.
Для этого есть специальная команда, параметр Fill, которым
можно передать аргумент цвет.
Ну, без аргумента его использовать нельзя, нет, может можно
даже, не знаю.
На общем, без аргумента его использовать как-то
неразумно, вот, ему придается аргумент цвет.
Вот.
Да, в этой строчке, вот, пример зачем нужно точка
запятой, потому что, ну, здесь, понятно, продолжать
вообще неудобно, а линия как бы еще не закончилась.
Ну и вот.
То есть тигз сам по себе и энтер игнорирует, и пробела,
ну, в большинстве своем, как и тех.
Есть полезный макро, ну, полезный шорткат Cycle, как
я уже сказал, когда мы нарисовали полигон, в общем, он нужен
для того, чтобы замкнуть.
То есть мы из 0.0 пошли в 1.0, из 1.0 пошли в 1.1, из 1.1 пошли
в 0.1, дальше хочется сказать 0.0, но опять-таки копировать
плохо, ну, в смысле не копировать, а если можно избежать повторений
чего-то в коде, лучше избегать, поэтому придумали Cycle.
То есть, если мы поменяем там, нам надо будет поменять
только в самом начале стартовую точку.
Ну, вот еще один пример, просто, еще один пример.
Да, здесь мы нарисовали, то есть здесь был обычный
путь, а здесь началось что-то новое.
Здесь сразу две новых штуки случились.
Первое – это вот такой синтаксис.
Вот, точку, точку, можно задавать не так, как в декардах
кардиналах, ну, мы как-то с вами привыкли уже, не особо
обсуждать, а то, что у нас x, y, x, y, вот, но иногда
удобно в полярных задавать, особенно для каких-то радиальных
рисунков.
Схема простая, угол, радиус, угол в градусах, радиус,
ну, можно указывать размер, можно не указывать, ну,
размер нас не имеет сюда.
Следующий, то есть, точка указывается в скобочках,
точка может быть либо x за 5y, либо угол двоеточечия,
радиус, либо еще кое-что, обсудим позже, во второй
части.
Следующее, к точке есть, можно использовать модификатор.
Например, если мы поставим переточку плюс, то это будет
означать то, что нам нужно брать не абсолютное значение
этой кардинала, а прибавлять его к предыдущему, к тому
месту, где перо остановилось.
То есть, вот здесь перо встало на точку 2.0 и остановилось.
И дальше, от этого места мы должны прибавить эту
координату и начать там рисовать.
Еще есть синтез, когда вместо двух дефизов ставится два
плюса, он означает примерно то же самое, но есть нюанс
в том, что в таком случае он будет перемещать и не
рисовать путь.
А в этом случае он нарисовал путь до смещенной точки.
А если вместо двух минусов стоит два плюса, то он будет
просто перемещать, но не рисовать путь, просто перемещение
пера по воздуху.
Дальше у нас была команда Circle, была команда Ellipse, была
Grid.
Есть команда, модификатор лучше назвать, в общем, ключевое
слово.
Дуга.
Дуга означает два параметра, откуда стартовый угол, конечный
угол и радиус отчитывается от предыдущего места пера
и нарисует дугу, вот он нарисовал эту дугу.
Дальше Cycle, опять возвращаемся в старт.
Тут уже Cycle напрашивается, потому что уже 2.0 какая-то
странная точка, ну в смысле 0.0 еще ладно, но 2.0 звучит
как что-то, что можно поменять, тем более, если мы поменяем
здесь точку на 2.0, например, на точку 3, на точку 3,0, то
вот эта вся часть сместится вместе со стартовой точкой,
тогда использование Cycle вообще очень оправдано.
Вот, соответственно, замечание насчет первой строчки.
Как только мы узнали про относительные координаты,
для того, чтобы написать квадрат, логичнее было
бы везде здесь писать относительные координаты, для того, чтобы
если мы поменяем стартовую точку, надо было поменить
только стартовую точку.
Да, то есть здесь было бы плюс один запятая ноль, здесь
плюс ноль запятая один, здесь плюс ноль запятая минус
один, а нет, плюс минус один запятая ноль, а здесь Cycle.
Так, здесь вроде, ну да, и использовали заливку как-то
так, так, ну вроде, вроде все по этому слайду.
Да, следующий этап это стрелочки, следующий этап,
который возникает при попытках нарисовать что-то.
И сначала я нарисовал обычную стрелку, вот видите, вне
окружения Text Picture, вот просто в тексте, без всяких формул,
без чего, просто стрелочка.
Факт того, что перо после своей остановки должно
рисовать стрелочку, после своей последней остановки
должно рисовать стрелочку, означает, ну придается вот
таким параметром, по таким необязательным параметрам,
в квадратных скобочках, да, вот, как бы в форме стрелочки.
Вот, но, в общем, вот, вот этот первый рисунок, вот,
но выглядит как-то не очень красиво, и в общем большинству
людей не нравятся эти стрелочки по опыту.
Вот, поэтому есть очень хорошая стрелочка такая
общепринятая, называется Steels, вот, в общем, чтобы ее
использовать, это как бы, читать так, стрелочка
приравнять Steels, вот, то есть как бы мы задаем стрелку
равную чему-то там, здесь вместо Steels можно написать,
например, вот, Lattech, то есть стрелочка равно Lattech,
вот, или здесь просто minus Steels можно писать, Lattech
это тоже вот такая стрелочка, но сейчас покажу, вот такая,
сейчас покажу конкретнее, да, вот, здесь мы уже пришли
к параметрам всей картины, вот, ну, сверху, если читаем,
здесь появились параметры всей картины, то есть понятно,
что есть какие-то параметры, которые интересны для всей
картины, например, мы, может быть, хотим, чтобы вообще
вся картина была нарисована тонкими линиями или что-то
такое, чтобы не дублировать это каждый раз, можно передать
это в самом начале всего тикс-пикчера окружения.
Вот, на самом деле, когда мы выходим в тикс-пикчер,
открывается некий тиксовский скоп, некое пространство,
которое можно еще руками внутри тикс-пикчера отдельно
задавать, как-то это настраивать, но это уже более сложная
история, просто, знаете, если интересно будет, можно
погуглить.
Вот, дальше начинаем то, что мы делаем, начинаем
делать то, что мы уже умеем.
Так, рисуем, рисуем со стрелочкой, непросто, так, из точки
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0, 0, 0
0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
0, 0, 0, 0, 0
