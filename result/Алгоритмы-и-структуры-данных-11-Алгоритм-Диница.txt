Это отрицательная логика.
Так.
Ножку.
Около ножки.
Видел?
А, всё, всё, всё.
Спасибо.
Всё, как обычно, перетерпим.
Как вы видите, у меня есть пара покудений.
Первое.
Что происходит слоистой сеть?
Слоистая сеть это
новый граф, который
строится под данную граф уже, следующий новый.
Представьте, у нас был граф G.
Я делаю следующее.
Я запускаю
BFs, извершим прогресс.
Ну, как обычно, у меня сеть.
Значит, у меня есть какая-то стартовая
вершинка BFs.
Вот давайте соблюсти BFs
в вершинке S.
Он посетит все вершинки
и для каждого будет знать расстояние
от у неё.
Дальше давайте вот мы все вершинки
разностроим над верхним слоем
по значению этому самому расстоянию.
У меня будет каждый вершинка S.
Единственный вершинок,
до которого расстояние 0.
Потом некий слой вершинок,
до которого расстояние 1,
соответственно, тех, которые есть вершины
посредственно.
Потом будут несколько вершинок,
до которого расстояние 2,
с такими вершинками, ну и так далее,
до, собственно,
последнего слоя,
в котором будет вершинка D.
Идея такая, что я просто по факту
развиваю весь граф по слоям
зависимости от расстояния от вершинки S
и провожу только вершины
S. А я ступаю только ребра,
дающие из I.
Ну формально такое преобразование.
Давайте определим, что в I.
Это просто наброс
множества таких вершин,
до которых расстояние C равно 0.
Из S.
Ну и дальше, значит,
я говорю, что я оставляю вершинки,
я якобы подразбиваю
основные вершины, вот эти вот классы,
слои, нулево, первых, вторых и так далее.
И оставляю ребра только между
соседними слоями, только слева-направо.
Вот сейчас оставляем
только ребра
из I в K,
для каждого D.
Сейчас оставляю только ребра
слева-направо.
Значит, какие еще, какие ребра я удаляю
от вершин?
Ну, во-первых, могут быть ребра
как внутри слоя,
могут быть какие-нибудь ребра внутри класса,
которые между вершинками в одном
вершинке находятся,
значит, я их удаляю. Дальше, я удаляю
вершинки, ведущие справа-надьего
из больших слоев глазара,
то есть, из большего набора слоя меньше.
И все, потому что
ребров в вершинках их нет.
У меня любое ребро либо справа-надьего, либо
внутри слоя, либо слева-направо.
То есть, он слева-направо,
то он обязательно ведет на такое вино,
но именно на один слоев еще. Он не может
перепрыгнуть, так сказать.
Потому что, если это второй слой,
а это четвертый или больше,
то значит, есть какой-то путь, длины 3
вот до этой вершины.
Можно сначала сюда зайти за два, потом еще
за одно ребро попасть сюда.
Тогда это должна быть в третьем слое, а не в большее.
А в отдельном слое лежит?
Ну нет, не обязательно, конечно.
Возможно, что-то за ним, но мне будет
интереснее только убираться.
Но в романе я оставляю все.
То есть, других ребров слева-направо не бывает.
Я удаляю только то, что он
только внутри слоя, а вообще справа-направо.
В этом слое стоит здесь.
Но граф уже из добрых катаграфов
запустил бэрфас, а так все подразбило,
оставил только ребро слева-направо.
Дальше определение.
Пусть уже это как-то есть.
Что такое в ней блокирующий поток?
Вот блокирующий поток.
Давайте я не всем формально напишу.
Это такой поток, который нельзя
увеличить без объедения в рамках кедров.
Который нельзя увеличить
без использования рамок кедров.
Например, сразу
на любимой сети
бэрфи, я посмотрю,
такой сеть.
Все левые имеют единичную
капасити.
Например, вот такой вот единичный
поток.
И вот такой вот
единичный поток
будет блокирующим.
Если я вот здесь пропущу
поедичный поток,
то никак по-другому увеличить поток
нельзя, кроме как добавить вот здесь
обратное ребро, которое на самом деле
возникает, если мы по-честному
строили бы остаточные сети, у меня
возникнет обратное ребро.
И тогда я могу вот здесь еще единичку
пропаковать, тем самым отменить какой-то
поток текущей сети.
Если по-другому нельзя,
то без добавления обратных ребр
я не могу увеличить поток,
который называется блокирующим.
Окей?
Ну вот,
тогда левый пин сработает очень просто.
Значит, он просто берет
многопратно в остаточной сети
строить слоистую
и в слоистой находит блокирующий поток.
Пока можно
построить
слоистую сеть
по, соответственно,
остаточной,
похожей f,
и в ней пустить блокирующий поток.
В ней пустить блокирующий поток.
При этом фаза
«пока можно» означает
«пока есть путь из СТ».
То есть, как обычно,
у меня на самом деле все лейтмы,
которые мы рассматриваем, потоковые,
они все работают, пока есть путь
в остаточной сети,
пока есть путь в остаточной сети из СТ.
То есть, пока БДФС хоть один раз находит
путь из СТ, мы перестраиваем
всю слоистую сеть,
и в ней находим
произвольный блокирующий поток.
Вот. И все.
И так делаем много раз, пока не свертаем
всех путь из СТ, пока не берем
зимой блокирующий поток.
Понятно?
Вот. Значит, БДФС какая?
Смотрите, Эднон Скарп, что делал Эднон Скарп?
Он находил произвольный путь
из СТ кратчать.
Он находил в остаточной сети самый короткий
путь из СТ.
А Динец берет и сразу как бы всем
свещает. То есть, моя цель
это вот этот вот слоистый сеть. Понятно?
Он кратчает из СТ. Он ровно так и выглядит.
Он сначала отсюда берет,
потом сюда, потом сюда, и далее любой ДТ.
А любой кратчающий путь ровно вдоль этого
трафа идет, вдоль сети идет.
Вот. И если в Эднон Скарп
мы как бы набираем один путь,
пускай по нему поток не будет дальше, перестраиваем сеть,
выложу академию и так далее, то есть здесь
я как бы скопом пускаю в этом
трафе какой-то поток
блокирующий. Он в частности
будет исчерпывать все кратчающие
сети.
То есть, если потом блокирующий,
чтобы не как-то тебя увеличить, использовать
те же самые ребра, значит в каком-то смысле
все пути исчерпывают. Нет никакого
другого пути из СТ, кратчающего.
Вдоль этого он будет пускать по нему.
Значит, я в отношении Эднон Скарпа
насвещу все пути сразу,
все кратчающие пути сразу.
Ну, вот, идея такая.
Значит, ну, корректно
корректно следует, как всегда,
северный протополкнется на
ассистонику будет
B квадрат. Нет.
Это обычно в этой машине
D ребра.
Но это наверно лучше, чем
Эднон Скарпа, потому что в Эднон Скарпе
была B D квадрат, и B D квадрат
принес с specifically на D.
Это обычно лучше, потому что ребра обычно
больше. Ребра больше B.
Но я кажется, что это
наш Matsukawa, что-то
Рега больше, чем дышим.
Рега больше, чем дышим.
Ну сейчас мы докажем, почему такая скорость.
Так, ну для этого надо что?
Пояснить.
Понятно, как строить свою тучи, наверное, не очень сложно.
Я более-менее рассказал, да?
Не опускаю байфлест, все вишинки развиваются на кластере.
Я просто оставляю друг другу сел на карп.
Это очевидно.
Попрос, как оттягивать блюши в табак?
Ну, у меня есть такая же сеть.
Слои свои, ну не важно, есть какая-то сеть.
Я хочу в ней найти блокирующий табак.
Вот, ну давайте сделаем что-нибудь больше наивное.
Давайте просто будем пускать, пока пускается.
Будем строить какие-то находительные пути.
Там уже что-то...
Нашли, окей, пустили.
Попытались еще.
Ну вот, короче, все, что можно, вот все хотим еще.
То есть, как это можно сделать?
То есть, как это можно сделать?
Давайте я на каждой шутку, вот я посмотрю
в каждой пути список подходящих ребра.
Я посмотрю, как это подлодие для Феса,
который он просто пытается делать.
Пытается перебивать все возможные ребра.
Пусть я пытаюсь прополкнуть какой-нибудь
поток вдоль там вот этого левого ребра.
Вот, ну нашел,
прополкнул хорошо, отлично.
Еще раз в таком
вдоль этого ребра нашел какой-нибудь другой
пути, прополкнул вдоль него, поток хорошо.
И все-таки пути будут здесь.
В какой-то момент это ребро либо станет
насыщенным, то есть я полностью
исчерпал его возможности, допустим,
либо же я пойму, что
с помощью этого игра
никак бы ты добраться не мог.
Я исчерпал все пяки, никак бы ты больше
добраться не мог.
То есть, так или иначе, рано или поздно,
это ребро станет полностью бесполезным.
Бесполезность, значит, либо оно исчерпало,
то есть, ну как-то насыщенным,
и до него в принципе нельзя больше успеть поток.
Но, я понимаю, что с конца этого ребра
есть покидание.
Тогда понятно, что больше вообще
этого ребро можно не рассматривать.
До переставривания игра, до введения
обратных февер, до
сравнения новых февер,
это ребро можно вообще выкинуть, потому что
вдоль него больше ничего пустить нельзя.
Ну, так давайте будем делать.
Будем для каждой ошибки
запоминать указательно, первое,
потенциально полезное ребро.
И когда понимаем, что ребро бесполезное,
мы сбегаем обязательно денечку.
Так мы что будем делать, пока все ребра
не пометились полезно.
Вот, теперь, значит, как я
это реализую. Ну, давайте я для каждой
башки храню некий номер.
А, значит, давайте я скажу так.
Пусть в любой башинке
список всех состоящих февер нумерован.
Да, нумерован.
Вот и пусть.
Вот февер, который
это
номер первого интересного
исходящего ребра.
Ну, интересно, значит,
то, которое потенциально может нам
что-то уничтожить,
может быть использовано в качестве
ребра.
Вот, значит, тогда, что я делаю?
Я стоя в строке
Рассматриваю
вот этот ребро в какой раз был.
Ребро вот с этим номером исходящего
из этой башинки. И дальше
запускаю ДФС отсюда.
В поисках Т. Если ДФС
не дошел, или если ребро насыщенно,
то тогда
я сдвигаю указатель и пытаюсь
пустить вдоль вот этого ребра.
То есть я увеличу бдр
и пытаюсь, соответственно,
найти будь через этот ребро.
Так делаю, пока все указатель
не начинают показывать
знак, не слышать его.
Вот,
ну, давайте, по подобию,
давайте напишу
ДФС
просто.
Пусть здесь
совершенно не будет.
Пусть здесь включена потока С,
которую я уже протолкну.
Так что вы помните, что если я
напишу вот такой пункт DST,
то по нему, выгоднее всего, пускать поток
равномерно-менимально значимой кавасити
с его сердечной фрегой.
То есть если у него еще длинный путь,
то я на сердечной фрегу должен
посмотреть кавасити, а, соответственно,
взять у них минимум, и так будет поток
который не будет протолкнут.
Но вот пусть С это тот самый поток,
который я могу дотолкнуть до вверх.
Вот. Пусть Ф это минимум
на вот таких ребрах, через которые я
дошел до В. То есть это сколько потока
я потенциально максимально буду
дотолкнуть. Ну и дальше может быть
уменьшаться за счет того, что я даю минимум
с другими каваситами.
Вот.
Ну, тогда,
если я внезапно дошел до конца,
тогда давайте просто вертерну
Ф, вернем верещину потока,
который я смог навести из ССД.
Вот. Ну, а и дальше
делаем следующее.
То есть пока есть неиспользованные
ребра,
кавакулературе неравном,
ну, да,
добавляем в эту же С,
ну, добавляем в список всех
ребр исходящих, и вы досадите
до сих количеств этих ребр.
То есть пока есть интересные ребра,
давайте я нанесу Е, пусть Е это
то самое легкое, что кинуть можно.
Ну, да, да.
Пусть Е расходится, дальше
сюда очередной ребров, только
который я хочу спустить на поле потом.
Вот.
Так.
Ну, давайте
сразу скажем, что если это ребро
насыщенное,
то я его
пропускаю. А оно насыщенное, значит
вдоль него больше ничего пропустить
как бы, поток вдоль него пустить нельзя,
поэтому можно смело увеличить патериал
и идти дальше.
Так-так. Если, значит,
поток вдоль ребра
ставим в компасе телебра,
вот, тогда я просто делаю
неиспользованные ребра.
Вот.
Ну, а иначе я пытаюсь
через это ребро что допустить.
Вот.
Вот.
Да, значит, смотрите.
Вот теперь я начну через это ребро
после того, как будет поток. Я знаю,
что до В я могу допустить
через поток.
Теперь мне нужно взять минимум ниже В
ребра, да, ну и, соответственно,
запуститься.
Ну, давайте так, так и запустим.
Я запускаю вдоль ребра, я сложу.
Ну, давайте лучше где-то в шкату,
понимаем, что конец упрекает, а где-то в шкату.
Кудами идет этот ребро.
Вот. А дальше мне нужно передать минимум
ниже В и остатчатую компаси.
Вот.
Это, соответственно, даёт место,
я пытаюсь уже вот отсюда дойти туда.
Ну, и всё, и дальше, значит, если х нулевое,
а если х равно нун,
то, значит, ребро уже
бесполезно, а если я сейчас
не могу отсюда
найти куда-то, то никогда больше не смогу,
я увеличу. Указается, и иду дальше.
Вот. Ну, иначе,
если х положительный,
значит, я смог найти
проход на фунт, проходящий
через этот ребро, на который можно
пустить х-поток. Ну, давайте его пускать.
Вот.
Вот. Я здесь везде могу
рисовать х.
Ну, давайте пропустим через E
х-поток.
Что делать, значит, просто
я увеличу х-поток
е на х,
а
ну, давайте я здесь
подышу.
Вот.
Может, тебе не надо в моей реализации?
Ну, не важно. Мне нужно ещё
не забыть,
по обратному ребро запустить
меньше х-поток.
Вот. Ну, как всегда, если я пускаю
х-поток по ребру, то, значит,
по обратному пускать минус х.
Здесь реверса две, это то самое обратное
липрохлое в круге.
Вот.
Это мне очень красиво
с той точки зрения, что я говорю,
что блокируешь х-поток
без обратных ребров. Вот.
Ну, давайте, как думается, вот здесь
я обратные ребра не использую,
но вообще всегда, да, то есть я в этом
алгоритме обратные ребра не использую,
но раз я пускал х-поток, то с точки зрения
нужно отпустить минус х-поток.
Вот здесь я как бы обновлю, чтобы по врагам
отправить все хорошие ребра сами.
Вот здесь у нас только прямые ребра
слева-направо.
Ну, вот всё, соответственно,
если я пускал х-поток, то я пускаю его
по этому ребру, возвращая, конечно,
от него, то есть я смог найти какой-то
поточек. Ну и всё, значит, это
для этого надо нашёл какой-то х-поток. Иначе,
если весь файл отработал,
не нашёл себе разом
такой нормальный ребро, весь
ещё исчерпан,
тогда он просто мой друг не съел.
Значит, тогда, соответственно, поиск,
как можно резать поиск моего х-потока,
я так напишу, просто файл отработал,
давайте я пущу
поток из рез,
изначально лишим бесконечности,
потому что, ну, улыбаюсь, может быть,
здесь сколько будет водички.
Ну, дальше, если есть номер, то да.
Пока можно пускать.
Чего бесконечность?
Ну, кстати, ещё раз. Это у меня что такое?
Рез выполняется,
он имеет смысл такой, это минимум среди всех
пройдённых редов, минимум компасисы и всех пройдённых редов.
Мне нужен не крайний пример, но минимум из бесконечности.
То есть тот, который не влияет.
Вот если у нас что-то пустое, то мы равним его бесконечности.
Так, ну вот.
А как они на алгоритме
на этом примере работают?
На этом примере?
Ну, зависит от того,
как он пойдёт,
но он может просто взять, например,
может просто взять противок,
вот такой пыльный оттенок.
А этот кончится вот этой?
Да. Ну это блокирующий поток, да?
Ну, то есть он сначала натерл какой путь,
потом, значит, пытается пойти по этому ребру,
поймёшь, что нельзя, потому что он здесь уже
в одну из чертей перейдёт сюда,
пытается пойти по этому ребру, переходит,
но видишь, что здесь есть обновление про исходящую,
но она уже насыщенная, поэтому отсюда
зайти-то это невозможно. Ну, значит, и еду.
можно, конечно
ну либо возможно нам его повезти
он сначала что-то такой будет, а потом вот такой
а мы не будем тут
строить опять слойистую сеть и опять
пробовать?
нет, ну еще раз, смотрите, конечно
это я показал от мутера, потому что один раз
блокирующий поток, потом я перестраиваю
все, я ввожу обратно ребра
строю BFS-ом слойистую сеть
и опять ищу блокирующую
и так далее, и так далее
и так далее
да, теперь давайте попробуем
раз и тот же
ну давайте рассмотрим один запуск
BFS-а из
одного маленького вая
рассмотрим один запуск
внешнего DFS
внешний запуск DFS
почему суммарно
все вот эти вот ПТВ
все вот эти вот указатели
суммарно увеличились
на как
суммарно
все ПТВ
увеличились на как
значит, как-то я уже знаю, что этот DFS
отработал за
выпуска
вот, значит
чтобы анализировать эту точку этого DFS
я считаю, сколько раз двигался этот
ПТВ, да, сколько раз двигался вот этот
с одного неправда на следующий
пусть вот суммарно было как-то какие-то переключения
то есть, грубо говоря, пусть все эти вот
плюс-плюсы
суммарно как раз произношены
пусть ПТВ увеличились на как
то есть, почему
ну, очень просто
чем заканчивается вот этот запуск
DFS
он заканчивается либо, когда он
все просмотрел и понял, что вообще нет
больше никаких путей
да, в худшем случае он заканчивается тем
что он нашел какой-то путь из SF
он нашел какой-то путь из SF
до этого
до того, как мыть этот путь
он какие-то еще ребра переключил
то есть, он, грубо говоря, пытался пойти вот здесь
но это легко переключил
пытался пойти, там, не знаю, вот здесь
вот здесь, вот сюда, вот сюда
но тогда понятно, что
просто ассинктотика
она у вас в пропорционных большинстве просмотренных ребр
потому что, как бы
ну, вот, сколько?
вот каждый эффект, да, вот здесь каждый эффект
время работы
в пропорционных, конечно, ребр, которые здесь просмотрены
для каждого ребра
какая-то имеется действие
вот, ну, тогда понятно, что
суммарно, вот если у вас
была суммарная карта переключений
то время работы оно равно
чуть-чуть переключение и минус динамическое число
потому что просто столько ребр вы рассмотрели
вы рассмотрели вот эти вот ребра все по одному рауму
и некоторые же переплюшили по одному рауму
вот
а это, конечно, переключение указательное
а вы, ребра, уже отбирали динамическую пути
почему? Ну, потому что, если я живу в флейте 10T
то у меня любой путь из ST
имеет длину ровно L-1
ну, T, да, если это состояние
потому что у меня все пути длины
из ST все одинаково
и у всех отчаще пути
ну, понятно, что отчаще пути имеет длину максимум
L-1
поэтому суммарно, время работает
и, конечно, это все инфраструктура
плюс число убитых выплётов
у вас L-1
так, нормально?
что такое поведение? Нормально?
может что-то состоится?
хорошо
так, ну все
а дальше, значит, следует, что
суммарно
поиск блокирующего потока работает за W
суммарно
поиск
блокирующего потока
работает
за W
ну, почему?
ну,
давайте так
какой наибольший количественный транспорт
в этом ВАЗе может идти?
сколько максимум раз
он будет ВФС, в принципе, запустить?
сколько?
ВВ? ВВ?
ВВ я не знаю
почему ВВ?
ВВ я не могу доказать
я мне только Е доказывать
я уже говорю, что
вот в этом ВАЗе
итерация будет максимум Е
почему? Потому что каждый раз
когда мы запускаем ДФС
мы находим путь
давай я хотя бы один и driveslich
ну, а значит
поскольку dislodge его
дальше
да, суммара
сколько на каждой трассе
вверх, переключено.
Тогда синдротик у меня будет просто
сумма по
диститрации, да?
В и каития.
В и каития это число
и число переключения
на и гидра.
Ну вот, да, это просто
В и Е.
Плюс Е.
Потому что
В и Е расфорсумируются,
здесь будет сумма каитий,
а сумма каитий это суммарно
величайший цепь переключений.
Если у меня е и лёдер, то значит суммарно
переключение будет в и каитии.
Ну и всё, давайте попробуем.
Ну всё. Получилось, что у меня
благослуживание
на суицидизе зима
длится около 2 часа давления.
Вот, а теперь надо понять, сколько раз
мне нужно будет найти
поток благослуживания.
То есть, сколько раз мне нужно будет перестроить
траф, перестроить 2-3 часа давления,
потом с 5-го периода.
Ну, для этого
видеть стаканемма.
Здесь можно
ну, как обычно,
ЖФ и ЖФС
два
последовательно
состояния
осадов в сети
мест уэкорации
после уэкорации
алгоритма D.
Дальше
тогда
тогда я, значит, в новом графе
расстояние
уэкорации D.
Значит, ещё раз, в линии у меня работает так
построить свою сеть, пусти благослуживание
или строить граф, построить свою сеть,
пусти благослуживание и так далее, и так далее
много раз. Так вот, пусть
будет две итерации.
Я один раз нашёл докильший поток, перестроил
граф, перестроил сеть. Ещё раз.
Второй раз нашёл докильший поток.
Вот я ожидаю, что в переходе
между этими состояниями у меня
строго выросло расстояние D.
Хотя бы на единичку, но оно не лечилось.
Так, ну, доказательство такое, что
что такое итерация 1?
Это рассмотрение сети
и исчерпание всех кратчащих пяти.
Ну, понятно, что если всех кратчащих пяти исчерпал,
то у меня не может быть
больше кратчащих пяти того, то есть длины.
Оно обязательно лечится.
Раз я все эти исчерпал, нет больше
никакого пути, вдоль которого можно было пройти.
Значит, все такие исчерпаны
останут только больше.
Ну, и давайте такая.
Значит, чуть формальнее.
Давайте посмотрим
слоистую сеть.
Вот в этот момент времени
это слоистая сеть
слоистая сеть
для жереба.
Ну, тут я хитрого
сяю направо.
Там же можно какие-то вершины сищего справа,
но я их не нанесу.
Вот.
Значит, что
делает вот эта вот итерация
к этой сети перехода?
Я исчерпал, и все пути с лево направо
использую только ребра с лево направо.
Это значит, что теперь
любой путь отсюда до сюда,
переходящий по ребрам
вот этого типа,
только по ребрам с лево направо,
на каждом таком пути хотя бы одно или другое исчерпано.
Насыщено.
Иначе можно было по нему, по нему, по сестру.
То есть все пути с лево направо исчерпаны.
Ну, хорошо. Как когда меняется
у меня сеть после
просто введения на первый упадок.
У меня
все, что меняется, у меня добавляется
и обратные ребра.
То есть чем отличаются две сети?
Тем, что у меня какие-то ребра насыщены
становятся, начали пропадать,
но к ним появляются обратно.
То есть у меня появляются вот эти ребра справа налево.
Ну, понятно, что с помощью
расправы налево я не могу найти
путь той же или меньшей сети.
Ну, то есть раньше был путь как
и
то, используя
появившиеся ребра справа налево,
я не могу найти
путь той же или меньшей сети.
Ну, почему? Потому что, опять же,
у меня не появляется ребрец с лево направо
и перепрыгнуть из битого слоя
выбрец с второй я не могу.
У меня не появляется новый ребрец с лево направо.
Так, перепрыгивать из слоя куда-то дальше я не могу.
Я могу только назад идти.
Но если любой путь отсюда-досюда
идущий вот так вот прямо
по ребрам с лево направо
исчерпан,
то я могу только откатываться назад
и только удалить его.
Отсюда перепрыгнуть.
Аккуратно.
Так, ну всё.
Смотрите, раз он здесь растёт,
у меня же здесь мозг очень сильно растет, правильно?
Здесь у меня всё самое отсюда
был минус один.
Я вот сюда
не даю на следствие,
что он будет в динесе работать
вот так.
Значит, интерация
у меня будет
не больше чем
вот В,
видимо не больше В минус одна,
потому что на каждой у меня
расстояние СДТ вырастает,
но он всегда не больше чем В,
и драться тоже максимум будет.
Вот, ну и если я отдаю, что
каждой драться, это как-то
ходит по первичному потоку,
то есть каждый драться
обыгнет.
Ну вот, что-то как-то.
Так.
Ну всё, вы доказали.
Вот,
здесь как обычно можно сказать
ту же самую манку,
которую я уже говорил про потоки,
что да, теоретически
Динес работает водорослой.
И, ну наверняка,
можно подобрать конкретный
конкретный тест,
конкретный пример,
на котором Динес реально работает.
Вот, вот.
В принципе, эти оценки обычно достигаются
на каких-то специфических тестах.
Но зачастую
сеть строит
как бы не
разработчик задачи,
а вы, ну то есть там,
вы сводите обычно какую-то задачу
к потоку.
Вы сами строите сеть,
сами там будете какие-то
капасити, исходя из параметров
исходной задачи.
И скорее всего сеть у вас будет очень специфическая,
не общая видоса,
какая-нибудь конкретная.
Сеть у людей имеет максимум 3, ничего не такое.
Ну и тогда можно
показать, что Динес работает
на самую сильную сеть.
И это можно, ну не только на практике,
но и в теории тоже можно доказать.
Сейчас переходим к фактам,
про кого на стопу Динес
быстро работают какие-то конкретные
специальные сетя.
Вот.
Ну.
Надо говорить про разделение.
Проделение.
Ну пусть, как обычно, уже это сеть.
То есть тогда в любой высшинке я могу
определить
свой имя от В.
Это сумма всех входящих
капасит.
То есть я раскладываю все входящие ребра
и суммирую по ним
капасити.
И то же самое цехало от В
это
сумма исходящих капасит.
Дальше.
Потенциал в высшинке В от В я называю
минимум за левую.
Потенциал высшины,
как говорится.
Вот. А самое большое
это потенциал всей сети,
который равен каждой сумме.
Потенциал от всей суммы, если это.
Ну вот. Тогда.
Так.
Я им это называю
первой схемой Каванова.
Начинаю доносить следующее.
Что, конечно,
в этот раз выглядит линия.
Есть.
Вот, парни.
Вот.
Вот.
То есть интернативное оценка
начисло итерации.
Мы, кажется, знаем сейчас, да,
что итерация не больше чем В.
Вот. Но можно оценивать, что оно не больше
чем два формира.
Ну, это выглядит, конечно,
если у вас В маленький,
то у вас внезапно почему-то сеть так устроена,
что потенциал у меня маленький с точки зрения
в минимуме цели цела.
Тогда и итерация
будет не В, а корень из В.
Ну, и тогда, соответственно, здесь можно было бы вместо
1 В написать корень из В.
Было бы быстрее.
Вот. Значит, какой смысл
пройти корень из В?
Это что такое?
Это сколько потенциально через вершину
может течь потока.
Потому что цель на это сколько может текать,
цела сколько вытекает.
Ну, понимаете, когда что-то суммарно,
то у вас минимум этих двух.
Вот. Ну, и как-то вот
прятать сумму этих всех потенциальных
потоков сквозь вершинки.
Вот. А сейчас тогда, что итерация будет корень из В.
Ну, не больше.
Так. Хорошо.
Ну, для этого мне нужна параметра.
Давайте доказывать.
Глемма первая. Говорит следующая.
То есть, пусть
В это расстояние
В это увеличена
максимальная потока
из СП
ну, и В, что-то такое.
Тогда, внезапно
Глемма
или не больше, чем
Адитус
В.9
Пута.
Ну, какой-то нерай свободы.
Ну, это так.
Так. Тропед снимаю.
Идея. Смотрите.
Давайте я, опять, настрою железную сеть.
Я нарисую С.
Я нарисую все слои, которые у меня здесь есть.
Доход до
последнего.
Первый, второй, и так далее.
Третья. Нарисую.
Вот.
Дальше давайте я скажу, что П.И.Т.
Это суммарно потенциал
отдашин попавших в вытворе слоя.
Вот.
Давайте П.И.Т. это суммарно
потенциал отдашин внутри слоя.
То есть это сумма
В.О.В. для всех В.И.Т.
для всех пушинитых слоев.
Вот.
Ну, что такое П.И.Т.
Это сколько суммарно
может потенциально протекать потока
сквозь слои.
Что такое П.И.Т.
Ну, понятно, что поток
от С до Т, он вынужден
протекать через вытомножку гашин.
Если я
просумирую все эти потенциалы,
то значит понятно, что поток не превосходит
суммарного потенциала вот этой вот Оликс.
То есть весь поток вот так
или иначе протекает сквозь В.И.Т.
Значит поток не больше
чем вот этот потенциал.
Понятно интуитивно.
Вот протекает сквозь Доль, значит
поток не больше чем потенциал.
Вот.
Но если вот это вот верно,
значит мы знаем, что поток не больше
чем В.И.Т.
Тогда я начинал выбрать
просуммировать это по всем В.И.Т.
Отсюда у меня следует, что
В.И.Т. не больше чем сумма
П.И.Т. по всем своему.
Вот это понятное дело
не больше чем весь потенциал всей сети.
Ну и все, отсюда следует
просто деление.
И отсюда получается
вот тот самый нерайс.
Понятное это существо.
Хорошо, давайте я
небольшой перерыв.
Я хочу чуть больше строгости вот этот нерайс
показать. То есть по модулю вот этого
все остальное тривиально.
Я имею ввиду, что поток не больше чем потенциал
то есть просуммировать нерайс
и отсюда получается тривиань мод.
Хочу чуть-чуть с того, что вот это вот показать.
Давайте просто перерывать.
Смотрите, сейчас я хочу показать
по нерайсам,
что их не больше чем П.И.Т.
А для этого мне нужно просто вам
помогать.
Давайте о декомпозиции талантов.
Возможно
было на семинарах
это
учреждение говорит следующее.
Любой поток
за докторяющим определением
симметричность
и то есть сохранение потока
и что еще?
Любой поток,
он может быть
старым, но он может быть декомпозиционным
в виде суммы путей и циклов.
Вот, подождение.
Пусть F
поток из D
тогда
F может быть представлен
как
сумма
единичных потоков
в доль некоторых путей
и в доль некоторых циклов.
А, ну тут
D, F, C, D
там вот здесь
правочка что ли,
и F, C, D.
Я буду пилить, а я не пилить.
Вот, то есть
любой поток
за докторяющим определением
он имеет следующий вид.
Его можно буквально так декомпозировать,
что его можно разбить на какие-то пути
из F, C, D
каждый вес один,
каждой величины один.
И еще где-то висящие в воздухе циклы.
Вот, какие-то такие штуки,
которые в принципе тоже могут быть.
Они никак
не мешают определению потоков
Доказательство, если у вас там есть какая-то сеть
и есть несколько циклов в ней,
то вы могли бы впустить единицу потоков
в доль этого цикла.
Она бы здесь циркулировала, водичка бы здесь циркулировала
и это как бы не нарушает определение потока,
но как бы смысла в этом цикле нет.
Они могут быть,
они не влияют на лишнюю потоку,
ну, из определения как-то такие штуки могут быть.
Поэтому убедитесь, что
любой поток именно сумма таких вот путей
сдержательна, плюс циклы.
Ну доказательство
наверное конструктивное.
Наверное
можно сказать следующее.
Я докажу этот факт
индукции
по суммарному
модулю
потоков текущих вдоль цикл.
Индукция
по
сумме модуля
по всему.
То есть ну база, если сумма нулевая, значит
такого потока нет, значит поток пустой,
можно взять ноль людей, ноль циклов, будет
такой.
Вот, теперь переход.
Ну, смотрите.
Вот у меня есть какой-то поток в моей двоей
сети. Да, если
его увеличена больше нуля,
это значит, что не из леса кто-то
вытекает.
Ну, мы знаем, что увеличена потока, это циклон
суммарно вытекает из леса.
Тогда давайте запустим там, любое вот
графа, начинающий здесь, и идущий
по ребрам положительного потока.
Вот есть такой ребро с положительным потоком
текущей из леса.
Дальше мы пустим, есть наверное отличный
АТТ, значит обязательно есть ребро исходящее
тоже с положительным потоком.
Ну, потому что иначе здесь не выполнял
вот весь сохранение.
Ну, притек, модель должен быть.
Ну и так далее. Вот я иду, иду, иду.
Либо я
зациклюсь,
либо я даю ДТ.
Если я нашел ДТ, значит я нашел какой-то путь.
Если зациклюсь, то я нашел цикл.
Давайте
путь или цикл отнесем
от того, что я ищу.
То есть вычтем либо нишку на пути,
либо нишку на цикле.
Вот.
Ну, на цике, наверное, очень хорошо.
Сейчас. Не хочу.
Нет, давайте не буду.
Давайте будет что-то, что я цикла пока не нашел.
Да, я утверждаю следующее,
что если поток положительный, то обязательно
есть путь из СТ по уровню
положительного потока.
Потому что если поток положительный,
значит нет разреза.
Сейчас, сейчас. Это интересно.
Почему, если я иду по уровню положительного потока,
я всегда и даю ДТ?
Сколько в циклу столько и вытечет,
должно? Да.
А, да. Это значит,
даже если вижу цикл,
то он, на самом деле, обязательно подливается.
Потому что если я даже зациклился,
значит у меня сюда
притекла нишка, утекла нишка и так далее,
опять притекла, должна быть.
Даже если будет цикл, он обязательно подливается.
Единственный способ завершить этот
обход, это только в К.
Ну вот, давай когда вот здесь, в 1, поток опустим,
найдем какой-то путь.
Вычтем его из графа.
То есть, как обычно, мы вычтем 1
вдоль всего этого пути. У меня
здесь потоки были положительные,
я вычитаю их на 1, по этому сумму потоков уменьшаются.
Ну, там еще были обратные левора,
ну, как бы там, по ним все хминус поток,
я его, как бы, к нему прибавляю
1, им можно тем более уменьшать.
Ну, все.
Если был поток из СТ,
то я нашел какой-то такой путь,
ну, и дальше этого не будет.
А если поток из СТ нулевой,
ну, есть какие-то вот такие ребра с положительным потоком,
ну, то значит, я возьму произвольно
такой ребро, и опять вычтем его,
и должен буду рано либо уже
закончиться.
Наверное, там же у меня начало,
но в лучшем случае я могу опять там просто как-то идти
и идти-идеть закончиться.
Опять отнимаю, если у меня все в этом цикле, линечку,
помешаю его в множество циклов,
и тогда у меня все мало и уменьшается.
Понятно?
Вот, хорошо.
Я доказал.
Дальше, тогда, как мне шпак понадобится,
как они пригодятся вот для этих нуждей?
А под циклы мы в итоге тоже вычитаем?
Ну, конечно, да.
У меня есть наш цикл, я могу,
скажем, вот эту циклу,
ту самую, которую я ищу, вычитаю
всю в этом цикле линечку потока,
вычитаю в любой вот эту часть потока,
отнимаю его, не уменьшаю всю мою модулю,
и соответственно я могу применить движение
к циклу Саши справа.
А вот не совсем понятно,
если, допустим, из S есть какой-то поток,
мы пошли, ищем путь из S в T,
и пришли в цикл.
А может быть, что,
например, из этого цикла
много выходящих путей?
Может быть, они тоже в результате образуют внешний цикл?
Нет, нет, еще раз, смотрите,
вот если у меня положительный поток,
то я просто вот беру,
иду, как,
беру и иду вдоль ребер
с положительного потока
я просто беру и движу ребро
иду вдоль неё
но давайте без precedi contagious
иду-иду-иду
даже если я зациклился,
у меня обязательно есть исходящий ребро
с положительным потоком
и это всегда верно, только если я не решил в д Т
я могу решиться только в Т
если я не в Т, то у меня обязательно есть
исходящее ребро
с положительным потоком
Так, а если например в некоторую вершину входит ребро с потоком 10, а выходит 15, потом идем по циклу и возвращаемся в эту же вершину с ребром 5?
Мы дальше уже не можем...
Я не сказал, но я пытаюсь учебить единицу потока всего.
Вот здесь вот везде я просто единицу потока пытаюсь...
Не минимум из-за Саши скопать, я просто единицу.
Наверное работает.
Подумаю, но вроде да.
Так, ну вот, дальше всему вот это вот вверх, потому что поток не больше чем потенциал каждого слоя.
Но давайте осмотрим максимальный поток, вот, ловить на F.
Давайте будем базировать.
Я знаю, что поток раскладывается в сумму путей и циклов, при этом путей будет ровно F.
Как каждый путь дает единичный вклад поток, путей будет ровно F.
Ну хорошо, давайте пойдем, как каждый путь устроен.
Каждый устроен путь из S в D, с точки зрения вот этого 2 из 10.
Ну, я знаю, что он устроен.
Я знаю, что слева-направо идут ребра только между соседними слоями.
Дальше можно припять внутри слоя, можно возвращаться справа-направо.
Значит, каждый путь, он обязательно...
Ну, разумеется, если мы рассмотрим.
Каждый путь он устроен так.
Он либо как бы один раз проходит сквозь этот слой и просто идет дальше.
Либо он в лучшем случае делает несколько проходов через этот слой.
Ну, тогда понятно, что вот в первом случае мы тогда исчерпали 1 на вход, 1 на выход.
И как раз, если ты минус 1 здесь сделать, оставшемуся в компасе,
у меня как раз потенциал в решунке на 1 уменьшится.
Ну, потому что у меня минус 1 входа, минус 1 выхода.
А если я вообще несколько раз сквозь этот слой прохожу,
то у меня здесь было минус 1.
То есть здесь исчерпал по одному потенциал в этой решунке на 1 уменьшится.
Здесь у меня потенциал на 1 уменьшится.
И здесь потенциал на 1 уменьшится.
Поэтому каждый путь, он хотя бы единичку потенциала избирает.
Ну, значит, поток не меньше чем потенциал.
Потенциал же у меня хотя бы такой.
То есть суммарно у меня, конечно, путей.
Каждый путь занимает хотя бы единичку потенциала.
Значит, потенциал хотя бы...
Так, теперь ты и более спор.
Так, нормально?
Хорошо, все.
Теперь доказали.
Вот, теперь можно двигаться к...
Собственно, доказать теряем правильно.
Ну, значит, лему я отказал.
Теперь следующий правильный факт.
Лему 2.
Тенциал сети не изменяется после пропускания входа в некий поток.
После пропускания в некий поток.
Ну, то есть у меня было 7G.
Каким-то потенциалом кое-как.
Я опустил поток.
Ты понимаешь, что потенциал не изменяется.
В остатке сети потенциал остался такой же, как был раньше.
Ну, это, кажется, совсем простое.
Значит, давайте рассмотрим какую-нибудь произвольную...
Произвольную вершину.
Ну да, посмотрим произвольную вершину 2.
Я вот знаю, что ее потенциал не изменяется.
Почему?
Ну, что произошло после этой вершины?
Через нее, сквозь нее протекло сколько-то поток.
А, ну, давайте.
Протекло сколько-то поток.
Ну, вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
А, ну, давайте.
Упрощенно.
Видите?
Нарисую.
Что это такое?
Через нее протекло какой-то поток.
Что это значит?
Это значит, что вот по этому ребру упустили f-поток,
а по обратному, соответственно, минус f.
По этому f, по обратному, минус f.
Это как всегда.
Из-за синетричности, по обратному, скажем, какой-то
ложный поток.
Вот.
Ну, соответственно, у меня будет целка этого ребра
из идей.
Капасить достаточно.
Этого ребра уменьшилось на f, а этого увеличилось.
Этого уменьшилось, а этого увеличилось.
Ну, и как раз за счет того, что...
Давайте входящее ребро рассмотрим.
У меня было входящее такое.
На нем, как бы, через него протек поток f.
Было входящее такое, через него протек поток
минус f.
Ну, понятно, что у меня суммарно
входящее капасить не изменилось.
Это упало, но это увеличилось.
А вот, значит, c1 не изменилось.
Потому что здесь у меня
капасить уменьшилось на f, а здесь увеличилось.
Ну, и то же самое с исходящими потоками.
Если здесь вытекло f,
а здесь вытекло минус f,
значит, c1 не изменилось.
Ну, все. Поэтому поток...
Поэтому потенциал у меня для каждой вершинки
сохраняется, значит, в эту сумму
все потенциалы тоже сохраняются.
Вот так.
Ну, все. Теперь можно дать тясть.
1, 2, 3, 4.
Делаем украд.
То есть, теперь мы напомним,
вы знаете, что итераций в Диннице мало
или не больше у коренней скорости.
Но давайте сделаем следующее.
Давайте мы запустим Диннице
на коренней скорой итерации.
Запустим.
На коренней скорой итерации
будет Диннице.
Ну, возможно, алгоритм завершается
меньше на коренней скорой итерации.
Ну, тогда, в общем, все хорошо.
Вот, пусть он не закончится.
И еще есть какие-то пультики,
которых надо еще спустить.
Пусть еще поток не исчерпался.
Ну, тогда, что можно сказать?
Давайте скажем следующее.
Пусть.
Пусть.
Это.
Диск ТСТ.
В остаточной сети.
Пусть ТСТ
это оставшийся поток.
То есть, это то, сколько нам осталось
до победы.
Вот, я уже какой-то поток пустил.
Я какую-то часть работы бы был,
но сколько-то раз провел.
Пусть осталось еще пустить ТСТ поток.
И до конца осталось ТСТ.
Тогда я знаю нерадость.
Я знаю, что A не больше, чем
1-2A.
Причем P это
тот самый поток, который был в начале.
Я знаю, что у меня потенциал,
что в самом начале, что после вот этой трассы
он все время один и тот же падает.
А P-P он нефига.
Но, с другой стороны, я знаю
какой-то оценок на A снизу.
Скажите, пожалуйста, чего
больше в равном?
В-1?
А, нет.
Больше в равном.
Корень из P, да.
Потому что я знаю, что за каждый раз,
у меня L растет хотя бы на 1.
И я знаю, что корень из P раз я уже сделал.
Значит, хотя бы кое-что.
Ну, все значит, что это просто.
Мне есть соотношение.
Теперь я L выбрасываю.
Можно доказать тогда, что
отсюда следует, что F не больше корень из P.
Ну, давайте напишем.
Получается, что
1 из P делит на F
больше своего равном корня из P.
Так, дальше сюда,
что в 1 снизу перенесу.
Получится, что F
не больше, чем P делит на
корень из P.
Ну, понятно. Если P достаточно великой,
корень не меньше ниже,
можно это убрать.
Это примерно корень.
Это значит,
что после вот такого числа итераций
останется в порталхон
в поток всего лишь вот такой величины.
Потому что остаток,
который надо до конца долить,
он вот такой маленький.
Ну, тогда понятно, что если я сделаю еще вот столько
итераций в единицах, у меня весь поток
будет больше хватит, потому что каждая трасса
находится за тебя по одний путь,
пускать за тобой ничку потока,
значит итерация не больше, чем поток.
Все.
У меня осталось
после вот этих вот корней из P трассы,
осталось, но все будет столько.
Давайте напишем.
Последовательно.
Осталось
делать
не больше, чем F,
то есть не больше, чем
F,
то есть F,
F,
F,
F,
F,
F,
F,
F,
F,
F,
F,
F,
F,
F,
так, вопрос на шпи.
Да.
Хорошо,
тогда продолжаем
рассматривать
частный полезный случай
Я знаю, на сколько работает, точнее, сколько итераций у меня может быть.
Потому что итерация у меня становится не больше чем В, а другое, что у меня больше кориес В.
Хорошо, давайте осмотрим, как бы в каждом случае,
рамки единичных сетей.
Единичные сети.
То есть это просто такие сети, где капасисти всегда либо 0, либо 1.
Потому что капасисти каждой рифра, то есть либо рифра нет по сути, либо одна единичная капасисти.
То есть можно максимум единичную капасисть.
Вот, начну.
Наблюдение первое.
Что алгоритм...
Давайте даже не буду писать слово алгоритм.
Я просто скажу, что поезд на третьего потока в единичной сети.
Работает, на самом деле, за В от Е просто.
Вот, в отличие от общей арсенда, она меняет, что в общем случае сеть не единичная проебольная.
Я знаю, что поток, блокирующийся за ВЕ.
А вот, пока мы говорим с паттерами, суммарно работает за ВЕ.
Вот, оказывается, что если сеть единичная, у всех капасисти 0 или 1,
тогда он работает за Е просто.
Вот.
Почему, показывай.
Ну, это правда, да.
Почему это Е работает?
Да.
Ну, можно так сказать, как будто вы алгоритму переписываете.
Давайте по-другому скажу просто.
Можно просто сказать, что у нас старый алгоритм, который уже написан.
Вот, давайте одну итерацию рассмотрим.
Один запуск ДФС.
Что делает один запуск ДФС?
Находит какой-то пункт, да, за разными годами находит пульти ЗСТ.
И какие-то ребра переключают.
Значит, не переключают, не двигают.
Вот.
Мы знаем, что в общем случае сработает за В+.
А в этом случае можно просто сказать, что суммарное время работы одного такого запуска,
оно просто равно числу просмотренных ребр.
И эти ребра я больше никогда не посмотрю.
Потому что те ребра, которые я посмотрел при памяти плохими,
они уже никогда не просматриваются.
Ну и вот эти ребра тоже больше можно не просматривать.
Потому что трансы у них все единичные.
Я пускаю по ним и дичь к потоку.
Значит больше по ним ничего пустить нельзя.
Поэтому каждый ребро просмотрится максимум один раз.
Отсюда вот такая ситуация,
что раз каждый ребро увидится максимум один раз,
значит суммарно все вот это вот работает целосно.
Ладно, давайте отыщемся.
Каждый ребро просмотрится более того раза.
Да, потому что либо...
Еще раз.
Да, вот.
Это смотри, какой-то ребро просмотрится.
Я его первый раз сейчас просматриваю.
Я запускаю ВПС, он конца.
Либо я отсюда не смог дойти до Т.
Это значит, что ребро бесполезное.
Я его переключаю.
Я его один раз посмотрел,
посмотрел, понял, что бесполезный ребро.
И вообще больше ничего больше не вижу.
Либо же я нашел грудь до конца.
Это значит, что это ребро вернется на каком-то пути.
Я опускаю здесь снижку потока.
Ну и значит ребро снова остается бесполезным.
Я его в общем могу использовать.
Значит в любом случае я на ребро смотрю максимум один раз.
Поэтому вот так.
Вот. Все. Шикарно.
Ну и это следствие, что он вернется на единичных сетях.
Работаем за ЕКПСГ.
И что почему?
Вот это время работы одной итерации.
А вот это что итерации?
Потому что я знаю, что у меня итерация в биткоре диспет.
Понятно, что П не больше Е.
Знаете, у меня все ребра единичные,
всех областей единичные.
Значит, когда потенциал гашинки,
ну это что, это минимум восходящий,
3-и исходящий ребро.
Ну понятно, что это не больше,
больше чем, скажем, степень души.
Ну давай запишем.
Это так, фотки, время работы одной итерации.
Здесь осталось доказать,
что П равно вот Е.
Если я докажу, то потом просто по корзанам
у меня будет Е, время работы одной итерации,
а итерация будет в корень диспет.
Вот.
Ну почему П это вот Е?
Ну давайте посмотрим на вершину.
Что такое потенциал вершины?
Это минимум из количества входящих и исходящих.
Ну а если у меня все ребра единичные,
то это просто минимум из количества входящих и исходящих.
П и В это минимум из, ну давайте,
входящих степень, да, Е, Е и А.
Вот.
Вот так мы иначе делаем очень тупую оценку.
Минимум не больше, чем сумма.
Ну это просто степень.
Просто степень вершины.
Вот.
Ну а дальше можно все это просуммировать, да?
Давайте я сделаю сумму по всем вершинам.
Получится потенциал на большую сумму всех степеней и всех вершин.
Ну а сумма степеней, я, значит, отводить.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Так, понятно?
А почему сумма степеней не больше, чем двое?
Ну это Лен может подожать.
Если есть вопрос на сумму всех суфтеней, то было бы ровно два объема, потому что каждый ровный суфтеней два раза.
Высходящий суфтеней всегда просто два объема.
Без шины кроме, если кто-то не хочет.
Так, хорошо.
Ну и последний сюжет, значит, это про просочетание.
Просочетание атмосферных граммов.
Значит, давайте решим задачу опосты гисмального просочетания через подвод.
С видением подвода.
Ну, напоминаю, у меня есть граф, на котором все вершины растеплены на два куска.
Левая и правая тоже, соответственно.
Такие, что ребра могут быть только между долями, только из-за ребра.
Мне нужно вывести наибольший количество ребра, так что они не имеют общих концов.
Давайте сделаем следующее.
Давайте, во-первых, введу вспомогательные вершинки С и Т.
Дальше, из ДС направлены ребра во всей вершинке левой доли.
Все капасы единичны.
Все капасы ребра будут единичны.
И то же самое, из вершинок правой доли, я направлю ребра единичных костей.
А потом все ребра между долями я ориентирую слева-направо.
Если у меня будут были грозы, я просто ориентирую слева-направо.
Все ребра, которые были у вас в фотографии, я оставляю вверх.
Тогда я создаю, что максимальное пространение, оно уже и надо начать на соответствующем максимальном потоку.
Чтобы найти парсочек в этом графе, достаточно найти в таком, в такой сети максимальный поток.
То есть парсочек, выражающий из потока.
Вот.
Так, ну давайте докажем, на котором не сложно.
Надо просто понять, как соответствует парсочетание потока и как, например, поток соответствует парсочетанию.
Ну, по парсочек поток вроде построен очень просто.
Представьте, у вас будет какой-то парсочек.
Вот какие-то такие ремни.
Давайте по нему построим поток такой же вершины.
Просто возьмем, вот здесь проведем нишку, подкинь нишку, корешим вот такую красную левую долю, и сольем ее вперед.
Здесь один, и сольем и сюда.
Здесь один, и сольем и сюда.
Поскольку все ребра у меня не имеют этих концов, значит у меня все вот эти вот левые концы различные, все правые концы различные.
Я как раз к ним подвожу поток, пропускаю сквозь ребро в парсочек и снимаю.
А поэтому по любому парсочу можно построить поток такой же.
Понятно?
Просто подведем поток вот с тем ребром, потом как-то перемешать, не зачем-то.
Но верно и обратно.
Любой поток, он такого вида какого?
Любой поток в этой сети, он именно что декомпозирует в этом парсочане.
То есть по нему можно построить парсочек.
Ну, а как тут может поток обрубить в парсочке?
Тут все ребра слева направо просто.
По левее декомпозиции потока, мой поток это сумма путей плюс циклов.
Циклов здесь нету в этой сети.
Поэтому просто сумма каких-то путей.
Пути все у меня вот такие, слева направо.
У меня любой поток.
Он за ним вот проходит.
Причем два пути не могут выходить в одну дыру, лишь на левой доле.
И в одну дыру, лишь на правой доле.
Потому что вот здесь вот входящая компасти один,
да, мне не может быть вот здесь вот в другом пути,
используя эту дышину.
Потому что здесь останется последний.
Тоже самое, не может быть вот таких вот двух путей,
которые используют одну дышечную правую долю.
Потому что у нее исходящая компасти один,
да, и я не смог бы эту путь вот в одной шкуре сюда вот.
Значит у меня все эти пути попарно безюзны.
Потому что в них нет долгого.
Они не представляют, что это вот дышина.
У меня может быть что-то такое,
но между собой дологие дышины не совпадают.
Все, значит это про сочетание.
У меня есть несколько, несколько путей.
Они все попарно безюзны.
Ну, кроме вот этих, кроме дыши, да,
у них больше никаких общих дышинок нет ничего с собой.
Значит, вот эти вот средние ребра,
все с путей, я пробую попарсовать.
Потому что как раз-то нет никаких консов.
Еще раз?
Сейчас.
Спешите.
Значит, пока что я наглядал, что
если у меня будет поток размера k,
я могу построить поток размера k.
И наоборот, если будет поток размера k,
есть поток размера k.
Ну, значит, отсюда.
Если есть, ну, просто
любая, любая величина здесь,
понимаете, что выручит на здесь.
Мизюра долгого, смотри, что это называется.
Вот.
Все, да, поэтому вот
чтобы решить задачу в плане прочитания,
можно просто здесь идти максимально.
Можно там не знать,
не знать, как это
прочитание,
можно просто здесь идти дальше по долгу.
Так, хорошо.
Ну, сколько это работает?
Если пустить, здесь денется.
Хватит здесь закрутить,
и не денется.
Я вот раздавал, что
на такой сети
он работает не просто
за е как не из е,
понимаешь, он фейк единичный,
поэтому можно было бы сказать, что
время работает е как не из е.
Можно даже лучше сказать,
может быть, е как не из v.
Время работа на этой планетной сети
это е как не из v.
Ну, тоже понятно почему,
потому что
мы знаем, как уберется корень,
на корене это как раз коль потенциала,
когда она там,
надо просто потенциал посчитать.
Ну, потенциал здесь понятно какой.
Для всех этих вершин входящая
капальсти 1,
поэтому у них у всех потенциал 1,
а здесь наоборот и входящая капальсти 1,
поэтому здесь тоже потенциал уничтожен.
Поэтому суммарно потенциал сети,
ну, так вот просто
сколько вершин у меня в этом планете.
А это v,
значит время работы е как не из v.
Корень из литерации по корзановым,
и каждый работа в золоте е,
потому что сети уничтожены.
Вот, значит, это называется
вот это выхледение,
мессис мельфандинец, называется
аторитм поп-попапа.
У нас, соответственно, поиск максимально большой,
это было бы.
Вот.
Ну, такие дела.
И это даже получается лучше,
чем кунг, у меня был, кажется, за v,
за е может давай,
а здесь е корень себе.
То есть, синтетически это лучше.
Я не уверен, что на практике
это лучше.
То есть, что скорее на каких-то сетях
кунг все-таки обыбрывает.
Деньги все-таки, потому что кунг
очень редко,
там просто DFS посудится,
там все сводится к тому, чтобы искать пути
увеличивающие.
А здесь в Диннице вы там сеть перестраиваете,
ищете BFS, потом вот эти вот потоки
пускаете и много раз блокируете.
Вот это потеплее будет,
вот здесь консанта побольше,
и иногда он проигрывает
обычную кунг.
Очень редко, но кунг-кунг
может быть полезен,
с точки зрения консанта,
чем HopCraft.
То есть, синтетически, конечно, лучше.
HopCraft, да?
HopCraft, да.
Ну, в частности, такая синтетика
еще раз секретирует, что обычно
теоретически концерты напомнились,
сколько работает деньги.
В Диннице вообще более работает,
а в округе нет.
Ну, сравните вот это вот с этим,
Проксима лучше.
Ну и часто так оказывается,
что на самом деле потоки
на каких-то контрактных читах работают,
но примерно за сколько.
Поэтому, если видите задачу,
где большие дверечения,
то, в принципе, можно
попробовать написать поток,
а вы заедете.
Это обычно помогает.
Вот. Ну, тогда, наверное, все.
Спасибо.
Здесь попроска третья.
