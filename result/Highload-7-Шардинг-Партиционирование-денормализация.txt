Так, ну что, давайте, Махач, на чем мы остановились?
На двух способах стабилизации положения чего-либо.
Да.
Табличный?
А что, вам присоединился к табличной работе?
Табличный, это ты между какой?
А когда на какой табличной работе?
Так, окей.
Ну, погнали.
Идогом, мы, напомню, мы в прошлый раз с вами обсуждали
ситуацию, пытались разобраться в ситуации, что делать, если
у нас очень много данных, и они не влезают на одну
машину.
В одну базу данных или в одну, не знаю, на один диск.
Ну и суть, важно, не влезают, нам их нужно разбить.
По какому принципу бить?
Есть два варианта.
Ну, в смысле вариантов множество, но есть два принципиальных
подхода.
Первый вариант, первый подход, у нас есть некий центральный
диспетчер, который точно знает, где лежит тот или
иной элемент.
И мы к нему, например, входим очень часто и спрашиваем.
Пользователь, вот этот, файл, вот этот, где лежат.
Он нам говорит, иди туда.
Это первый вариант, второй вариант, некая функция,
от чего-то, от логина, от идентификатора, от имени
и так далее.
Которая тоже, которая выполняется, вы передаете ей элемент,
она возвращает вам номер сервака, ну или адрес сервака.
Идогон, плюсы-минусы, погнали.
Центральный диспетчер.
Так, плюс, легко менять.
Согласна.
Вместо положения, тебе нужно пользователя перебросить,
его перебрасываешь и в этом странном диспетчере
меняешь, да.
Либо удаляешь, либо еще что-то.
Ну то есть с ним легко работать, да.
Здесь функция.
Так, еще.
Ну, ты можешь делегировать.
Не, ну подожди, это можно, там дохрена.
Ну то есть у тебя…
Давайте, ну быстрее, быстрее, быстрее.
Чисто теоретически эта таблица может не влезть
в одну машину, но…
Блин, ну давайте прикинем хотя бы, для Facebook это возможно,
а вот Facebook.
Сколько?
Два миллиарда, да.
Два миллиарда записей.
Фэш-таблица из двух миллиардов, ну мне кажется 64.
Не считается.
Не считается, дальше.
А погоди.
Ну это такой очень слабенький плюсик, это маленький минусик,
как бы, несколько занимает.
Это почти не минус. А какая нам разница?
Ой, ну бросьте, это все равно внутренние адреса, закрытые адреса.
У вас же все равно, у вас в любом проекте у вас есть внешние квантов и есть внутренние квантов.
И то, что происходит внутри, отсюда не видно.
И, да, все эти вагины. Виден один сервак, через который все проходит.
Ну если хоть какая-то безопасность внутри проекта есть, то это как-то так.
Так, все? Выбрали центральный диспетчер?
Короче, блин, колоссальный минус. У вас есть одна точка отказа.
А вот как ты собираешься это сделать?
Перевернуть? Перевернуть вот тут, да?
Хорошо, одна точка отказа или усложнение логики, я бы так написал. Усложнение.
А тебе реплецировать нужно будет здесь не совсем в базу данных. Это у тебя кусочек памяти, да?
Алгоритмы репликации понятны. Какую конкретно ты для этого будешь делать?
Что это будет такое? Какой софт?
Ты сам себе сейчас минус заработал.
Нет, не на экзамене, здесь, в этой штуке.
Это не простая софтинка.
Это веб-сервер, который работает очень быстро, который вам придется писать самим.
А что ты сюда поставишь?
Что это будет? Кэш? Это не может быть кэша.
Распределенная база данных будет работать очень медленно, она будет в базе данных.
Тебе нужно что-то принципиальное, что держит все в памяти.
А что делать за кипер?
Я не знаю название софта, но знаю, что это такое.
Чего знаешь? Что?
Ребята, алгоритмы все известны. Репликация, шаргирование и прочее.
Тебе нужна определенная логика поведения вот этого самого центрального диспетчера.
Ты должен уметь с ним общаться.
Ты должен уметь задавать ему вопрос. Это ладно, это может быть какой-то, я не знаю, чуть ли не кэш.
Но он же у тебя посложнее.
Ты должен уметь с ним управлять, перебрасывать пользователи с одного адреса на другой,
сбрасывать на диск, читать с диска.
То есть какая-то история, какая-то логика у него есть. Ее нужно будет программировать.
Она нестандартная. То есть такой прям штуки взять из коробки, я не знаю, что такая штука была взять из коробки.
Можно будет взять какой-нибудь полустандарт, взять, например, NGNX, написать для него модуль, еще что-то.
Но минус здесь заключается в том, что тебе придется использовать довольно серьезного программиста для того, чтобы это написать.
Да, это не простой программист.
Но давай прикинем, какое количество...
Вот у нас есть Фейсбук. Если бы Фейсбук был сделан через центральный диспетчер, какое количество запросов шло бы к этой?
Перекидывайте.
Фейсбук, два миллиарда пользователей.
Как будете считать?
Давайте.
Формулу. Итак, два миллиарда пользователей.
Давай, говори. Вот эти люди. Фейсбук, два миллиарда. Считай.
Сколько кликов пользователей? Чего умножать на что?
Два миллиарда.
Предполагайся. Вы архитектора, предполагайся.
Так, два миллиарда неодновременно. Сколько одновременно?
Возьмем 1 десятую. Окей, хорошо.
Итого 200 миллионов у нас...
1 десятая?
Не, она предложила, я согласился.
Ну, кажется разумным.
Ну, обычно 1 десятая. Мой опыт подсказывает, что 1 десятая в среднем. Пиковый час.
Пиковый час. Не постоянно.
Давайте, как бы вы посчитали?
А почему, собственно говоря, ты собираешься только крики считать?
Окей, кликает раз в минуту.
Давайте так, вот 200 миллионов пиковый час.
А сколько времени проводит на страничках?
Как бы вы, вообще, вот вам задачу...
Посчитайте.
Как бы вы считали?
Чтобы вы посмотрели, какую статистику еще очень.
Давайте.
Ну, прикинь.
10 кликов в минуту?
Ну, я не знаю.
Возможно, 10 кликов в минуту.
Смотри. Мы сейчас находимся на ситуации,
на точке 200 миллионов пользователей в час.
Он сидит весь час, или что?
Как?
Он сидит весь час, или что?
Он сидит весь час, или что?
Он сидит весь час, или что?
Он сидит весь час, или что?
Как?
Давайте, дальше, дальше.
Договаривайтесь.
Договоритесь друг с дружкой.
Давайте посчитаем.
Здесь правильного ответа нету.
То есть, как бы пока...
Три часа?
Здесь три часа нужно пределить? Нет?
На три. Хорошо.
10, 6 миллионов.
Сидит прямо сейчас. Дальше.
Каждый кликает 10 раз в минуту.
Так, окей, хорошо.
10 раз в минуту это означает, что...
10 раз в минуту.
66 миллионов.
Почему не 660?
Каждые минуты по 10 раз.
660 миллионов кликов в минуту.
Окей.
Дальше.
30, 40, 50, 50, 60, 60, 70.
30, 40, 50, 60, 60, 60.
30, 40, 50, 60, 60, 60.
30, 40, 50, 50, 60.
30, 40, 50, 60, 60.
All right?
Он сидит весь час.
Договорились друг с дружкой.
Мы к нему обращаемся.
получить ответ на вопрос где лежит информация о пользователе а пользователи
я понятия не имею давайте думать
пользователь может закешировать какого-то
отвечаю на вопрос да пользователь может что угодно закешировать по идее
так и ребят 660 миллионов кликов в минуту я как пользователь делаю 660 миллионов
пользователи делают 660 миллионов действий на сайте facebook
каждое действие сколько вызывает обращение к центральному диспетчу
почему
например нажатие кнопки еще там еще что-то
так вы исходите из того что 660 миллионов грубо говоря авторских действий
но когда я что-то делаю на страничке фейсбука вот я открыл френд ленту
сколько запросов сюда пошло
сколько пользователей попалось мне на этой страничке столько сюда запросов и
пошло
ну как грустно вот так и есть я встречаю аватарку где она лежит центральный
диспетчер я встречаю новое имя комментарии где оно лежит
ну да возможно вот у вас уже как бы здесь уплажнение в квадрате получается уже
не просто поле и так вот прикиньте сколько запросов к этой вот штуке на
одно обращение
давай это у нас сколько будет 11 миллионов секунд
да
ну и каждый запрос генерирует несколько запросов туда но вот смотри я открываю
бэка
я собрался просто открыть страничку в к и посмотреть сколько у меня здесь
разных мордашек и имен мне здесь раз два три четыре 5 6 8 9 10 у меня загрузилось
примерно 20 этих историй 5 возможных друзей и она загрузила сразу десяток
постов каждому по три комментария а еще мордашки еще лайки извините ребят там
лайки тоже показываются мордачки людей
короче тут 50 на френд-ленту но это на френд-лент а там же у нас же вы же под
кликами любое движение мышки насколько я понимаю здесь посчитать ну давайте
превратится в 60 миллионов запросов в секунду
не надо умножать это уже понятно что до хрена не одна машина
это значит эволюция эволюция айтишной мысли 15 лет назад мы обсуждали проблему
10 к вот несколько лет назад стало проблема ставка сколько запросов
обсуждается с одной машины одного сервера сейчас по моему реальные реальные цифры
для некоторых проектов некоторыми запросами этот у нас был доклад прошлой
осенью миллион запросов с машины машины 160 миллионов секунды это 60
серверов то есть вас собираетесь построить нормально реплицируемую систему на 60 серверов
ну давай так не 60 нам и не знаю реально не знаю настоек он опасно потому что ключевая
функция и тп тп ну еще как вам идея
иерархии диспетчера
понимаете то есть это то есть 60 серверов да хорошо вы это реплицируете но как
вы с этой тренером работать будете то есть книжу нужно ходить запросы делать то есть
вот каждый бэкен будет выбирать себе своего центрального диспетчера дай
короче
усложнения да еще и в квадрате усложнения ребят ладно здесь плюсом здесь есть плюс
то просто почему не работать нельзя еще раз сформулировать
сложности с добавлением парки серверов да
окей
и так как решить эту проблему инженеры думать
расти извращение еле снесешь не пойдет давай другого попроще проще проще проще проще
проще одна функция другая функция тяжело
ну во первых первая
во первых есть такие функции которые очень мало которые вот с этой именно из-за этой
проблемы как-то изменены или как-то построены так что при добавлении нового
элемента там происходит минимальное количество изменений
и так как вы говорили о том что у вас есть какие-то функции которые не
нового элемента там происходит минимальное количество изменений они есть эти функции
придуманы они не специалисты специалистов может и нет а функции функции есть да функции придуманы
еще ну давайте давайте давайте давайте еще еще еще вариант проще проще проще проще проще
варианты попроще у нас есть проблема мы добавляем новый сервак и наша функция часто теоретически
все ломает заставляя нас перекладывая кучу вещей из одного места в другое пока самое прикольная
идея додержать две функции но идея
дата заведения пользователя вам в данный момент недоступна вам приходит
вопрос на пользователя вам сначала нужно поднять пользователя потом вы узнаете дату
ее заведения либо вам нужно кодировать в идентификаторе пользователя дату его
заведения можно сделать панатона айдишники и смотреть по айдишнику когда функция у вас
появляет прекращает быть элегантной но становится рабочей чисто теоретически да то есть ты
хочешь новых пользователей отправлять куда-то новое место и так первый вариант новый пользователь
в новое место
правильно у вас будут будут новые серваки нормально заполненный и нормально работающий и старые
серваки нахер никому не нужны понимаете да плюс-минус да этот вариант работает новые пользователи
новую новое место есть функция некрасивая у нас внутри там куча ифов еще что-то но она работает
проблема в том что в этом случае
ну сложнее ну и ладно
она будет такой большой пухленькой функцией такой большой
ну можно кстати ее какой-нибудь табличной сделать типа не погоди зачем тебе таблицы тебя айдишники
с миллионного по двух миллионов и сюда двух миллионов по трех миллионов и сюда
зачем диапазоны как вы собираетесь решать проблему что старые машины со временем будут никому не нужны
а там ты можешь что угодно туда вот и видишь что у тебя машина перестает использоваться
да перебросил несколько пользователей или просто новых пользователей
от нулевого до первого миллиона они умерли уже давно
ну то есть у тебя я понял у тебя там с нулевого миллионный на первый сервак не знаю с миллионного
на двух миллионов и со второго на втором сервак а с двух миллионов на третий вновь на первый сервак
как-то так да
так
нет
кромолу говоришь но как данные удаляются не удаляется теперь же вечно вы когда удаляетесь что-нибудь в интернете
она не удаляется помечать как удаленно никто никогда ничего не удаляет
но она просто не используется она данными но у тебя нагрузка не равномерно
потому что тебе приходится тратить больше денег у тебя вот сюда нагрузка мне не знаю 100 запросов в сутки а сюда миллион
но у тебя функция простая пока что придумывай
то есть ты собираешься их еще перетусовывать периодически
а давайте попроще вариант придумаем еще проще
ну без вот этих перестановок перестановка это просто нужно перекладывать каждый раз что-то еще что-то
поэтому сейчас еще придумаем как
хорошо как эта функция тогда выглядит с перестановками
подожди псевдослучайность тебе же нужно чтобы это псевдослучайность
псевдослучайность ты используешь для того чтобы переложить что-то в одно и другое
у тебя функция это нужно при псевдослучайности записать намертво прибить гвоздями
когда ты после того как ты переложил у тебя функция должна поменяться вот как она выглядит диктуй я записываю
да
ну получится
вам лучше вообще памяти не использовать вам лучше кодом это сделать
у вас здесь там вся фишка что здесь вы памяти храните а здесь у вас код программный код
в памяти ничего ну в смысле вы код в памяти храните но вы меняете когда функцию меняете вы перепрограммируете вашу систему
я пока не понимаю принципов ее построения которые ты мне предлагаешь
я понимаю что да вот и случайно перетусовал а как
ну это очень ну какую некоторые как как некоторые случайно потом функцию положишь
так короче плюс и минусы в смысле вот как бы минусы понятно новую пользу в новое место
пока выглядит тремно вы пока не придумали как быть с тем что у вас новые серваки перегружены а старые не догружены
и даже не так ладно бы это хорошо старые серваки пусть помирает но у вас новый сервак будет это
всех новые регистрации отправляете всех новых пользователей то есть самых активных пользователей
которые прямо сейчас сидят сто процентов и отправляете на новый сервак на один как случайное место
ты новый сервер добавил вот у тебя есть 5 серверов они есть ты добавляешь новый сервер они
заполнены как-то вот так я не знаю этот заполнен на 70 процентов это тоже на 7 процентов этот
нас на 50 этот на 50 этот на 90 ты добавляешь новый сервак который заполнен на 10 процентов куда
класть нового пользователя зло это перемешивать ну зло понимаешь перемешивать каждый раз зло
так
Объясните мне, что вы придумали.
Так.
Так.
Так.
Так.
Так.
Мы берем твою логическую машину, и вы их перетерпите.
Молодец. Ты придумал или вы вместе придумали вариант, который называется архитектурный паттерн, который называется виртуальные шарды.
Сейчас вернемся, погоди.
Отдельно вернемся к этому вопросу. Итак, виртуальные шарды.
Логика заключается в следующем.
Вы берете весь ваш массив, например, пользователей, которые у вас есть изначально, и делите его не на...
У вас два сервера. Вы его делите не на два. Вы его делите, например, на 10 тысяч виртуальных шардов.
Никаких 10 тысяч. А потом решаете, что первые 5 тысяч сейчас лежат на одном сервере.
Вторые 5 тысяч лежат сейчас на втором сервере.
И вот это у вас. Вот это у вас. Вот это у вас пункт. Отпад к отделению на 10 тысяч.
А вот это у вас некая табличка.
Примерно то же самое, что ты сказал, только ты это сделал более математически.
А программисты они потупее. Они вот так. Раз-раз.
Она очень маленькая. И ты ее можешь закодировать чуть ли не в коде.
Ее можно положить в базу данных и читать ее при старом.
Добавляется новая машина. Ты берешь и какое-то количество виртуальных шардов целиком переносишь.
То есть ты не переносишь пользователя. Ты переносишь их пачками по, не знаю, по 10 тысяч.
И у тебя вот эта функция, она не меняется никогда.
Тебе больше не нужно. Тебе 10 тысяч шардов виртуальных хватит на всю жизнь.
Для какого размера ты бы не вырос.
Да. При добавлении нового сервера меняется таблица.
Посылается всем бэкендам сигнал перечитать новую таблицу.
Таблица памяти. У тебя вот здесь нужно ходить в новое место каждый раз.
Потому что держать весь объем. То есть вот смотри, у тебя работает 100 бэкендам.
Запрос приходит случайно на него. На пользователя. Покажи мне что-то.
Каждый из этих бэкендов идет в центральный диспетчер каждый раз.
Потому что вот этот объем памяти в бэкенд не влезает.
А там влезает 10 тысяч записей.
Это может быть даже не хэштаблица. Это просто тупо массив.
Из 10 тысяч элементов. Очень маленький массив.
10 тысяч элементов.
Ты берешь весь свой объем данных, которые тебе нужно зашартировать.
И делишь его заранее на очень большое количество виртуальных шартов.
На 10 тысяч. На 100 тысяч. Насколько хочешь.
И вот эту функцию, которая делит весь объем пользователей на 10 тысяч виртуальных шартов.
Ты харт кодишь. Она у тебя никогда больше не поменяется.
По ID-шнику. Остаток отделения ID-шника на 10 тысяч.
Все. Ты получаешь номер виртуального шарта.
А дальше у тебя есть таблица соответствия. Виртуальный шарт. Реальная машина.
И эта таблица тоже закартожена. Она состоит из 10 тысяч элементов.
И она меняется уже как хочешь. Когда ты добавляешь новых пользователей.
Перекидываешь что-то. Добавляешь новые сервера.
Когда ты добавляешь новый сервер, ты берешь и по какому хочешь принципу перебрасываешь виртуальные шарты на новый сервак.
Это примерно то же самое, что с вашей идеей с логарифом.
Только в логарифе вы перебрасывали беточку, а здесь вы перебрасываете тупо виртуальные шарты.
Это некое решение вот здесь сложности с переездом.
Сейчас у нас еще куча вопросов.
Центральный диспетчер неплох на самом деле.
И не отбрасываем его. Хотя он сложнее, чем вот эта штука.
Вопрос такой. Центральный диспетчер. Вот у вас серваки.
И вот мы решили добавить новый.
Загрузка наливаем.
Как к центральному диспетчеру распределять новых пользователей?
Это загрузка. 70-70% 50-50-90-10-0.
Добавили новый сервер.
Зачем?
Ну мы точно знаем загруженность. Вон она.
И так, вариант первый. На самый незагруженный сервер.
Этот вариант плох. Чем?
Да весь поток пойдет сразу на этот сервер, и он дедолага помрет.
Правильное слово было озвучено. Распределение вероятности.
В учетом вот этой загрузки.
Туда все пойдет более вероятно, но тем не менее и не все.
Ну правильно, но он и свободный.
Можно, то есть, да,
то есть как бы...
как бы новый сервер?
Да!
Получلام.
uger?
можно то есть как бы да и то есть как бы второй вариант с учетом распределения
вероятностей и в этом случае ты все равно прав потому что сюда пойдет больше
всего запрос и она опять же может не выдержать а как еще
придумай элегантнее решение
еще раз
но все равно если у тебя поток людей как-то пропорционален его загрузки то ты
можешь что-то вырубить хорошо у него 30 всех остальных у него 70 процентов
свободно свободное место всех остальных по 10 мы не таблица мы центральный
диспетчер построили теперь мучимся
придумайте элегантнее решение с учетом загрузки загрузки серверов но при этом
так чтобы вы не класс
старт пользователи мы не перебрасываем это проблема сейчас мы будем пытаться ее
решить следующим следующим ходом старт после не перебрасываем сейчас речь про
новых пользователей придумайте алгоритм что когда приходит новый
пользователь ваша система максимально легко это
да но пока он заполняется ты собираешься на него очень сильно давить ему больно
ну больно ему нет не надо это это это это невероятность это у нас загрузка вот
у вас есть цифры загрузки
мне не нравится вообще пропорция слово пропорционально
значит чем мне не нравится слово вероятность у вас потому что она она
делает неравномерный доступ этому неравномерную нагрузку у вас какие-то
части системы больше загружены чем другие трафикам загружен почему
подождите у вас есть несколько проблем вы про это помните у вас есть загрузка именно
количество жесткого диска у вас еще сеть у вас еще трафик и прочего и вы должны
примерно следить у вас все всегда примерно было равномерно между всеми
серверами распределено а вы собираетесь какую-то пропорцию вычислять и мочить
какого-то бедолагу окей хорошо он свободен абсолютно с точки зрения диска но трафик
то нет все равно там гигабайтные или сколько гигабитный сеточка проще
делай новый пользователь пришел куда его положить нет ложно ложно ты прогресса таких
не найдешь мы сейчас не про шарды мы уже сделали выбор когда-то давным-давно плохо
учились и сделали выбор центральный диспетчер мы неплохо учились маленький был проект
центральный диспетчер идеально подходил сделали выбор центрального диспетчер у нас
центральный диспетчер мы пытаемся обучить нового пользователя куда засунуть ну
я вам сейчас расскажу вы будете
но это самые активные пользователи они вот ток ток ток проявились
меньше все загружен он знает статистику использования диска а статистику загрузки
с точки зрения ресурсов это уж этот с точки зрения ресурсов можем но это такие системы
строить не любят конечно но можем
эту штуку придется либо очень часто спрашивать
предлагаемое решение ставится точка некая точка отсечения но например я не знаю 80 процентов
80 процентов загрузки и дальше по всем седарам у которых заполненность диска меньше чем 80
процентов идет случайное распределение
это решение одно из решений да то есть как бы но ты не отсрочил ты должен
будешь к этому моменту что-то придумать новые сервера купить или еще что-то короче плюс
минусы понятно да то есть если мы выбираем вот эту схему случайная после отсечки случайно
выбор сервака после отсечки то тогда плюс в том что мы стеть не перегружаем у нас все равномерно
расходуется минус в том что мы не на 100 процентов используем всю нашу систему да то есть у нас
какой-то момент будет 80 80 здесь будет у нас 80 80 80 здесь будет и не знаю сок ну как
нет ну подожди тут у тебя тоже не так чтобы резко у тебя сначала выборки участвует раз два три
четыре пять шесть серверов потом бац четыре сервера потом бац два сервера и только потом
один то есть а тоже здесь будет какая-то постепенная постепенная выход из строя
добавлять новый сервер конечно просто ранее когда ты же это видишь как
да да это нормально надо использовать центральный диспетчер
а он используется да надо перемешивать ладно давайте перемешивать и того нам нужно переложить
один виртуальный шар с одной машиной на другую как мы будем делать не ну погоди
первая проблема пользователи не знают о том что ты наводишь порядок у себя на серверах и
продолжают идти попросить его подождать нельзя но прикинь ты вот банк клиент заходишь
и тебе пишут чувак прости банк вот предложи их ребятам прийти к нам сюда поучиться
банк может так и делать но платёжная система например никогда типа вот ты
сейчас пытаешься какой-нибудь на борделе расплатиться карточкой не работает нет не прокатит
итак что делать с теми кондлами которые прямо сейчас заходят на нашу страничку пока мы
окей за это эта процедура может занимать какое-то время какое бы время она не занимала хоть
минуту хоть секунду за это время кто-то может что-то в нее записать так то есть давайте так
первое чтение решили да то есть те кто читает читает откуда со старой тени а со старой
так и что с ними сделать
новое место
ну договоритесь ничего не быть
нет мы не можем не давать гарантии
что пользователь хранится в нескольких местах ты имеешь в виду ну подожди а потом и у тебя
так ладно пишем два места да и так ребят пишем два места сразу а если вот прямо сейчас именно
в ту миллисекунду на на секунду когда я пишу в два места сразу кто-то третий мигрирующий мой
сервер копирует одно в другое у меня там какая-то коллизия то есть я пишу вот сюда и вот сюда и
кто-то в этот же самый момент копирует теоретический результат не пред не предсказуем
отлично тогда строите временную диаграмму вот в этот момент мигрирующий сервер считал
старая читал старая вот в этот момент я записал сюда новое как бы старый сервер
вот этот вот в этот момент я записал новое в новый сервер а вот этот момент этот чувак
записал старая в новый сервер короче у тебя race condition между двумя сущностями первая
это твоя программа второе это мигрирующий сервер я не помню как он решился как мы решили
хорошо хорошо но тогда пока пользователь работает с пользователь продолжает работать
то есть ты будешь смотреть в два места да то что продолжать ему показывать анкету
я понимаю ты читай то есть как бы третий вариант который был предложен писать некое временное
хранище в некое временное хранище и с этим временным хранищем когда мы делаем когда мы
читаем с ноды которая прямо сейчас с шарда который прямо сейчас копируется мы должны считать из двух
мест правильно мы сначала должны посмотреть во временном хранилище а потом должны если там
нет то идем в старую ноду не с новой ноды мы пока еще не знаем мы если мы хотим прочитать с ноды
которые прямо сейчас переносит мы читаем сначала из ну не из лога это тоже какая-то
табличка из лога ну как из лога куда
старую ноду не это это решение без без гона в идее как бы ну то есть хотя значит на самом
деле знаешь как решение чем а что ты будешь делать когда ты должен будешь временное хранище
сбросить новую ноду у тебя будет то же самое только в мини-масштабе понял
ну короче не прокатит не прокатит почему ребят за то что вы представите не можете обязательно
случиться это вот всегда так бывает то есть если есть хоть какая-то вероятность логическая что
это произойдет и оно произойдет и потом ты замучишься это искать закон мёртвый
так так нет не получится у тебя запрещать изменение ну как бы хорошо до какого до какого
размера ты будешь бить на 10 тысяч поделили виртуальный шарт разбили на 10 тысяч и все
с дописью пока миграция не закончится мы не знаем сколько надлится если мы говорим про
шарта она может длиться несколько минут неприемлемо блин что у вас за это конечно
неприемлемо но вы сами 100 миллисекунд пол пол пол секунды чего по дыму
как и да го хорошо значит четвертый вариант бьем на маленькие таблеточки дальше
бьем дальше берем шарт раздеваем его на совсем малюсенькие кусочки а дальше
значит разбили и разбили на кусочки хорошо помним дальше
окей то есть то есть если я вас правильно понимаю вы собираетесь вот у вас была
система с виртуальными шардами вы поверх этой системы виртуальной шарды повесили
центральный диспетчер для конкретного переносимого прямо сейчас шарда правильно
ну что-то типа того для того чтобы знать что конкретно прямо сейчас переносит
погоди нет нет нет нет ребят этого информации у вас хранится в том самом
центральном месте который пользователь направляет и хорошо и там выясняется что
у тебя состояние 3 да старая переносится переносится и новым
выясняется есть если вы
значит у тебя информация вот этого таблица с переносами хранится не на шарде а на уровень
выше там где ты отправляешь на шард потому что мы должны будем отправить либо на старый либо на новый
ребят вы как-то немножко то есть у вас шард может быть вообще просто тупо машины с диском и все там на
никуда ничего никого не может отправить но может только файлов дать не надо его делать чуть умнее
вас не хватит программистов умных они все уехали они найдут работу
правильно правильно на самом деле думаете все все верно пока все это делается действительно внутри
вот этой функции на либо этот центральный диспетчер либо это вот этот система под
виртуальными шардами с виртуальными шардами когда вы переносите вы включаете просто спецрежим
у вас появляется поверх системы с виртуальными шардами у вас появляется некое исключение для
одного конкретного виртуального шарда вот для этого конкретно виртуального шарда я бы не разбивал
это на кусочки не городил бы историю а переносит бы тупо по пользователю последовательно друг за
друга и пользователь у вас у вас появляется центральный диспетчер для одного для только
для тех пользователей которые внутри этого ш продается которые сейчас переносится у
него три состояния ставит переносится новое и в случае если у вас это пользователь один переносится
можно даже не блокировать можно даже подождать то есть переносит а если пользователь если вот
вот эта вот единичка, на которой вы разбили, настолько
мала, что она переносится, ну блин, за секунду-то
ж пользователь точно перенесется?
Можно секунду подождать.
Нет.
А, на другой машине есть, нет, почему, у тебя виртуальный
шар просто находится в спецрежиме, переносится,
и все.
Он у тебя пока что лежит как бы в двух местах.
Вот есть вот эта вот таблица, которая вычисляет по ID-шнику
виртуальный шар, вычислили виртуальный шар, смотрим
в эту табличку.
У всех здесь написан IP-адрес, первый IP-адрес, второй IP-адрес,
третий, четвертый, пятый, а вот здесь написано спецрежим.
Окей, спецрежим вызываем в следующую функцию, которая
на самом деле центральный диспетч, и который уже как-то
у себя внутри в памяти что-то хранит и так далее, исключительно
для вот этого шарда, который переносится, да, это замедлят
саму миграцию.
Не десять тысяч раз, а сколько у нас в шарде, сколько у нас
там, может миллион, да, да, там может быть много.
Выбирайте, то есть у вас каждый раз будет выбор
между простотой и скоростью, например, а это вариант
простой и надежный, да, он будет работать неделю.
Ну и что, по десять пользователей можно, но в таком случае
у тебя функция время переносов может расти, найди некий
баланс.
Ну если перенести одного пользователя, выбирайте.
Вот на основе чего ты будешь принимать решение?
Ты придешь к менеджеру и спросишь, чувак, можно я
десять заплокирую, у нас два миллиарда, будет вероятность
одна миллионная, что десять, что ты будешь заплокирован,
менеджер тебе скажет, можно или нельзя, в случае, если
это платежная система, тебе скажут, скорее всего, нельзя,
а в случае, если это фейсбук, тебе скажут, да, по одному
переносим, нельзя по одному переносим, а одного ты не
блокируешь, ты просто его ждешь, если приходит, если
именно так совпало, что в этот самый момент ты переносишь
этого пользователя, то бэкэнд, который пытается
найти данные по этому пользователю, просто ждет, они ждут пока
все десять переносу.
Может быть, но десять, чисто теоретически, дольше, короче,
вот каждый раз садитесь и думаете, все, я вам варианты
все обрисовал.
В этом варианте у тебя к виртуальному шарду привязана
некая пометочка, потому что включить для этого виртуального
шарда спецрежим, он сейчас переносит, включает спецрежим,
где уже просто тупо таблица по каждому пользователю
или по группе пользователей, почему, ты можешь ее сделать
для, только для части пользователей, не для всех, да, нет, ничего
тебя не держит.
Так, закончили с функцией шардирования, но это тяжелая
проблема.
Так, что у нас еще, о, что у нас, а чем мы занимались
в этом варианте, только в варианте, так, ладно, давайте
быстренько, еще три способа работы с базами данных.
Есть еще один способ, вот мы с вами сейчас брали базу
и аккуратненько били ее на кусочек, а у нас с вами
был паттерн, который назывался функциональное разделение
для бэкэнда.
Помните?
А?
Не-не-не-не-не.
Нет.
Рестопид, какая разница, это растопид, это растопид,
да, сплошевообщение, функциональное разделение, когда мы берем
и бьем нашу систему на части по их функциональной задаче,
то есть типа пором лежит в одном месте, новости в
другом.
Ну вообще, ну да, это паттерн.
Что не отменяешь, что так нужно делать, то же самое
применимое к базам теоретически.
Вы точно также можете разбить разные функциональные
части, разные таблицы вынести на разные машины.
Что там интересное?
Например, пором на одно, новости на другое, вы можете
даже больше пойти, вы можете даже разные базы данных
выбрать для разных систем хранения.
Вы новости можете хранить в SQL, что-то другое в Монге,
в новом SQL и так далее.
Например, пользователи, вы в чем хранили?
Вот с которыми мы сейчас, с которыми мы сейчас учимся.
Почему?
А?
Пользователи, где бы хранили, какой база?
Вот, это правильный вопрос.
Что мы хотим с ним делать?
Если мы хотим только доставать его по айдишнику, то тогда
конечно на SQL.
Это проще всего.
А если мы хотим, можно еще без баз обойтись, если мы
хотим по айдишнику его доставать.
А если мы хотим чего-нибудь вычислять, какие-нибудь
выборки делать, статистику считать, то уже надо думать.
Так, следующая история.
Мы делили с вами пользователей по нашу армию.
А как бы вы поделили новость?
Вот новость, новостной сайт.
Мы РБК делаем.
Новость, кусочек теста.
Да, у нас их просто, не то чтобы у нас их много.
У нас проблема в другом.
У нас проблема в том, что у нас трафик слишком большой.
У нас серваки не справляются не потому, что они хранить
это не могут, а потому что считать, отдавать тяжело.
Новостей слишком, новости запрашивают слишком часто.
Но новостей мало.
Хорошо, закашировать мы можем.
Ну давай тогда не так.
Усложню, ладно.
Усложню новости, а какие-нибудь...
Давай так, вот представь себе какие-нибудь объекты,
которые ведут себя по принципу новостей, но мы закашируем,
ну мы не можем.
Не знаю, котировки или там, не знаю, посты, что-нибудь такое.
Они быстро устаревают.
Ну здрасьте, двухнедельный пост, все, его уже не было никогда.
Это в прошлой жизни, никто не помнит, о чем ты говорил.
Итак, объекты, которые мы храним, очень быстро устаревают.
Одна база данных не справляется даже с тем, что мы перед ней
кеширование построили, не справляется с тем, чтобы читать эти данные.
Нам приходится ее каким-то образом масштабировать на два-три сервера.
Как?
Да, допустим.
Но по ним нужны выборки, то есть это какая-то SQL-ная история.
Ну конечно.
Или это не новости, давайте так, это видеофайлы.
Но читают последние видеофайлы, как те, которые в тренде.
Последний день.
Короче, любые объекты, в которых есть огромный архив,
но из этого огромный объем, то есть, короче, у нас вот здесь с пользователями все более-менее ровно.
А здесь у нас проблема, здесь у нас вот так.
Сюда очень много пользы.
А вот сюда огромный кусок никому не нужного.
Что делать?
Что такое холодный хранищ?
То есть ты предлагаешь разбить тюбасу на две части.
Некий горячий кусок и холодный.
Так?
Что скажете?
Так, плюсы в том, что ты придумал паттерн, который называется partitioning.
Да, он есть. Есть горячий кусок для одного влока, есть холодный для архива.
Логичный минус. Перекладывать.
Мы опять-то придумали проблемы на голову.
Ну все равно, понятно, мы перекладываем из одного места в другое, когда...
Что делать?
Нет, записали в горячее, а потом раз какое-то время переносим в холодное.
Записали в холодное, говорили в горячее.
Окей. А вот в какой момент это происходит?
А вот я бедный несчастный бэкэнд.
Вот у меня пришел запрос на новость.
Мне ее нужно показать, мне куда идти.
В два раза.
То есть я всегда, ради даже каких-то архивных историй, должен буду идти сначала в горячую?
А как я...
Мы все запросы делаем горячими.
Придумайте полигантнее решение.
Ну как бы, так можно сделать, но так немножко в лоб.
Дату отдельно хранить.
Не нужно просто тупо закодировать дату в айдишник.
Если посмотришь тот же самый РБК, вообще любой новостной сайт, у него дата закодирована в адрес Урла.
Это неспроста.
Окей, хорошо, мы дату знаем, дальше.
Окей.
Вот последнее.
Избавьтесь от вот этого.
От переноса.
Избавьтесь, возможно.
Мы сразу можем писать и сюда, и сюда.
А раз в день удалять просто отсюда что-то и все.
Удаление и перенос, удаление и считывание, и так далее, и так далее.
Перенос и явно есть.
Ну хорошо, перенос и явно есть.
Удалить гораздо проще, чем перенести.
Да, чем удалить и добавить.
Потому что в удалении здесь у тебя одна операция, а здесь несколько операций.
Мало того, не нужно вообще париться о том, что если мы переносим, то у нас там начинаются проблемы с границей дня.
А что делать, если я делаю запрос в 00?
Ну можно.
А можно делать красивое, элегантное решение и писать сразу в два места?
Выбирай, как хочешь.
Как хочешь, можно.
Так, окей, с партиционированием разобрались.
Когда у вас использование данных примерно такое, то есть есть горячая история и большой, длинный, никому не нужен архив.
Вы делаете отдельно горячую базу данных, отдельно холодную.
Они могут быть по-разному устроены вообще.
У вас вот здесь может быть, там я не знаю, под вот этой штукой может быть шардирование, а вот здесь, там я не знаю, шардирование по другому принципу вообще.
Раз какое-то время он нужен.
Ну как бы кто-то на новости-то ходит в старые.
Так.
И у нас остался последний паттерн баз данных.
Что такое нормализация?
Вы знаете? Первый, второй, третий, четвертый.
Восемь их?
Да, нет, ладно, короче.
И так далее. У нас есть пользователи.
И мы их зашардировали в несколько ноу-эсквельных баз данных.
Ноу-эсквельные базы данных.
Вот мы их зашардировали, храните, например, все прекрасно работает.
И приходит к вам менеджер и говорит, я поиск хочу.
Нет.
Давай делай мне поиск с фильтром.
Фильтр хочу.
По полум возрасту, по куче параметров, там я не знаю, десять параметров я хочу.
Нельзя это делать. Плохая идея.
Что делать?
Переносим отсюда?
Эластик Сирч есть, конечно.
Да, но как ты его будешь...
Эластик Сирч, поисковый биржок.
Подожди, над чем ты будешь искать?
У тебя их баз, я не знаю, десять тысяч.
У нас же десять тысяч шардов.
Да, ты очень правильно, хорошо, удобно подходи.
Нет, если вы хотите просто принести это в SQL, то я вам сейчас придумаю историю с графами поверх этого.
SQL вам не поможет.
Каждая половина ищет по имени, вторая половина ищет с фильтрами. Часто пользуются?
Окей, хорошо, тогда я прихожу в следующее.
Менеджер приходит на отвечение и говорит, а я хочу, слушай, сделай мне сервис, по которому я могу находить связи между друзьями.
И ты такой графовая нужна. И переносишь все в графовую?
Ну да. Ну ложится, в SQL все можно хроить, но неудобно.
Ну подожди, здесь у меня были анкетки, понимаешь, то есть подожди, вот здесь вот каждая запись была переменной длины.
И ты вот собираешься с этой SQL положить?
Так, подождите, если вы собираетесь свести здесь поисковый индекс, то что, вы собираетесь хранить данные в двух местах одновременно?
Ну на самом деле думайте правильно. Инструмент, паттерн, я не знаю, подход называется денормализация.
Так, так, так, еще пять минут внимания, я вас отпускаю. Итак, денормализация.
Переименной. Зови это избыточность.
Суть принципиально важна. Внимание, запоминаем. Мы храним в высоконагруженных системах, крупных проектах, сложных проектах.
Мы храним данные не так как их удобно хранить, а так как их удобно отдавать в первую очередь.
Потому что отдать данные сложнее, чем сохранять. Подготовить данные к отправке сложнее.
И в крупных системах ваши имя, фамилия пользователя могут храниться в 20 разных местах.
Отдельно в поисковом индексе, отдельно в индексе для статистики, отдельно в сервисе кто ходил на мою страничку, отдельно в сервисе комментарии и так далее, и так далее, и так далее.
Нет. Да. Джоины в высоконагруженной системе это зло. Джоинов нет в крупных проектах.
Потому что когда ты сталкиваешься с любой историей, или когда ты перекладываешь... Вообще Джоин перекладывает на базу данных подготовку для тебя информации.
Это плохо. Ты не контролируешь как только она работает. Если ты ее сам не написал.
Нормализация? Нормализация делает хранение данных, то есть нормализация для чего служит? Так чтобы тебе данные не дублировались в базе данных.
Хорошо. Вот короче, красота и высоконагруженная система, а красота в высоконагруженной системе в другом.
Как и для чего? С чем? Прости. Да, есть озера и хранение данных, есть еще куча всего.
Вопрос в том, сколько времени ты можешь себе позволить на то, чтобы получить из этого озера данных ответ? Из этого хранилища ответ?
Ты можешь себе позволить тебе час подождать? Бизнес-аналитик может. Запустил запрос, пошел обедать. А пользователь? Нет.
Короче, ребята, именно в силу того, что когда мы работаем в интернете с IT-шкой, с пользователем и так далее, мы должны очень быстро получить ответ.
Мы должны этот ответ максимально заранее подготовить. Мы должны максимально подготовиться к тому, чтобы отдать ему ответ максимально быстро.
У вас может быть ситуация, когда у вас есть фильтр, а есть другая система, вы можете хранить данные отдельно по каждому фильтру. Даже так, в принципе, потенциально нормально.
Как ты будешь это менять? Вот на этот вопрос ты нам ответишь в следующий раз.
Если мы вот так вот взяли данные и распределили их по всей системе, так чтобы подготовили их, так чтобы их было максимально быстро и удобно отдать пользователю по запросу, а теперь приходит чувак, чьи это данные?
И меняет, и выходит замуж. У него фамилия должна поменяться.
Ты даже не знаешь в каком количестве мест.
Все, ребят, на этот вопрос вы мне ответите в следующий раз.
