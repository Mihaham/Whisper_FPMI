Так, всем здрасте. Мы с вами продолжаем занятие. Сегодня у нас, по-моему, седьмая часть нашего
марлизонского балета. И из того, что, как известно, лектор лысый дегенерат, мы с вами в прошлый раз не
доказали приведение к нормальной форме хомского до конца. Поэтому мы сегодня с вами будем продолжать
эту эпопею. И давайте вспомним, как мы удаляем эпсилон, порождающий символ. В прошлый раз у нас
с вами была грамматика вида следующего, в которой правила имели вид. Из А выводится БС, из А мог
выводиться не терминал Б, из большой буквы А могло выводиться маленькая А, и у нас были эпсилон,
порождающие правила. То есть мы по факту использовали правила за А и от С. И мы говорили
следующее, что нам надо избавиться от вот таких вот ребят. И как мы с вами от них избавлялись? Мы
мысленно говорили, что, окей, если у нас есть какой-то эпсилон, порождающий символ, то мы мысленно
можем прикрыть его рукой и написать новые правила в грамматике. В итоге у нас получалась с вами
грамматика G5, в которой было следующее, что если у нас есть правило А выводит БС, и Б был эпсилон
порождающий, то мы добавляли с вами правила, из А выводится С. Я могу путать с порядком. А если из
А выводилось БС, и С выводилось эпсилон, то мы добавляли правила из А выводит Б. И потом мы
дропали все правила вида А выводит эпсилон. В смысле? Ну тогда мы на них клали.
Нет, такие правила могли быть, но там это такие символы были бы непорождающими и недостижимыми.
Ну да, вот оно, как мы избавлялись от эпсилон порождающих. То есть у нас просто эти символы
перестают быть эпсилон порождающими. Но при этом здесь могли родиться непорождающие символы.
Да, в принципе? Или нет? Не, они могли родиться, но в принципе там тогда бы символ был тоже в
Ну да. Вот, и мы в прошлый раз начали доказывать следующее, что Lg5 равно Lg4 без эпсилон. И мы,
кажется, с вами доказали... Я опять забыл. Ну какое мы не дописали? По-моему мы с Lg5 уже 4 или наоборот?
Ага, то есть мы по факту не доказали вот это вот. Ну давайте докажем. Напоминаю,
что мы доказываем следующее утверждение. А выводится слово W. Как же все смело, плохо сегодня.
Так, грамматики G5. Тогда и только тогда, когда у А выводится G4. Слово W в грамматики G4. И мы делали
индукцию по длине вывода. Итак, база какая у нас была? Что мы могли вывести за один шаг? Мы из A за
один шаг в грамматики G5 могли вывести только пустое слово. Ой, не пустое, какой-то не терминал A.
Ну а это значит, что у нас и в исходной грамматики G4 было такое правило.
Базу доказали. Теперь переход. Ты будешь писаться сегодня? Переход. Значит, смотрим первое правило,
которое у нас может быть. Тут есть несколько случаев. Давайте подумаем. Значит, у нас в грамматике
было правило, допустим, из A за один шаг выводится BC, и дальше из B выводится некоторое слово U,
а из C выводится некоторое слово V. Причем можно догадаться, что в грамматике G5 U и V не пустые.
Потому что эпсимум порождающих символов в грамматике G5 нет.
Тогда смотрите, что у нас получается с вами. По предположению индукции, давайте я сделаю хитрый
шаг. Я сотру все с разных досок, а потом мы начнем писать на этой доске. Тогда будет все видно,
я надеюсь. Да, скилл стирать с доски тоже должен быть. Я этим скиллом не обладаю.
Итак, давайте будем это писать по предположению индукции аббревиатуры PPI. Я не знаю, почему,
но давайте это. Смотрите, из B выводится U в G5. U не пустое. Следовательно, из B выводится U в
грамматике G4. Значит из C выводится V, V не пустое. Грамматика G5 значит из C выводится V в
грамматике G4. Правило A выводится BC, а у нас есть. Ну и в итоге аккумулируем вот это все,
мы получаем, что из A выводится BC за один шаг в грамматике G4. Из B выводится U, из C выводится V.
Это первый случай. Какой второй случай у нас может быть? Какое первое правило
раскрытия у нас могло быть? Да, A выводит некоторое B. За один шаг выводит какое-то
B, а B выводит слово W. Тогда давайте рассмотрим тоже. Тут будут три варианта. Какие? Это в грамматике
G5. Вариант первый. A, B принадлежало правилам грамматики G4. Тогда у нас получается, по предположению
индукции у нас из B выводилась W в G4, ну потому что в G5 у нас есть вывод. И получается A выводит B
выводит W в грамматике G4. То есть у нас есть правило грамматики G4, значит и здесь есть у нас вывод.
Какие два еще варианта у нас могут быть? У нас, как правило, A выводит B могло получиться либо таким
образом, либо таким образом. Значит первое это у нас A выводит C, B принадлежало грамматики G4.
C выводит Epsilon в грамматики G4. Я не знаю как писать, может быть мне кто-то подскажет как
писать по этой доске. Может мне надо взять сухую тряпку. То есть смотрим как это правило могло
появиться. И тогда мы можем сказать следующее. A выводит C, B в грамматике G4. Потом из C выводится
C, Epsilon, G4. А по предположению индукции, V не пустое у нас, у нас выводит слово W. То есть вот такие
вот переходы у нас. А понимаем почему случай 2-3 будет аналогичным? Что у нас правило появилось из-за
А при этом был уже Epsilon в грамматике G4. Понятно почему это будет аналогичным разбираться?
Ну типа либо мы убрали слева Epsilon порождающий, либо мы убрали справа Epsilon порождающий. Кажется это
никак не влияет. Давайте напишу аналогично. И вот этим образом мы доказали вот этот вот факт.
Тогда в итоге что у нас получается с вами? Для любого не пустого W в G4 это эквалентно тому,
что из S мы выводим в грамматике G5 то же самое слово. А это эквалентно тому, что W принадлежит LGAG4,
а это эквалентно тому, что W принадлежит LGAG5. В итоге я утверждаю, что мы доказали,
что LGAG5 равно LGAG4 без Epsilon. Почему? Потому что Epsilon не принадлежит LGAG5,
так как нет Epsilon порождающих. Вот это то, что мы с вами должны были в прошлый раз показать.
Давайте сделаю стаканчик-глоток. И я спрошу, понятно ли это доказательство? Двигаемся дальше.
Как фиксить будем? Что LGAG5 равно LGAG4 без Epsilon. Шестой шаг. Тут есть развилка,
но добавим S' правила S, и G6 будет следующее. Значит у нас к получается, а не терминал на грамматике G5,
добавляется не терминал вида S', а по виду остается тем же. Множество правил немножечко
поменяется, а с артовый терминал будет S'. А правила грамматики будут следующими.
PADG5 объединить правило S'. И еще мы добавляем правило следующее. S' будет выводить Epsilon при условии
того, что Epsilon принадлежал LGAG4. Вопрос. Почему мы убили двух зайцев сразу? Каких двух зайцев мы
сразу прибили? Когда мы с вами вот такую штуку построили. То есть мы заменили стартовый не терминал,
добавили правила S' выводит S, и добавили правила S' выводит Epsilon, если Epsilon был, если стартовый
не терминал до этого, был Epsilon порождающим. Какие две штуки мы убили с вами сразу?
Ну это раз. Нет. Еще второе свойство, которое мы победили таким образом.
Нет, у нас из одного не терминала в один не терминал. У нас пока такие правила есть. У нас правила теперь,
все правила, которые были такие, у нас в правых частях не стоит стартовый не терминал. Потому что
у нас появился новый стартовый не терминал, которого просто не было в правых частях никаких
правил. Напоминаю, в нормальной форме Хомского в правых частях правил не может стоять стартовый
не терминал. Вот это понятно? Пока стираю.
Еще раз. Значит, что мы сделали на шестом шаге? Мы добавили стартовый не терминал, новый, и по сути
из стартового не терминала нового добавили переход в старый стартовый не терминал. Таким образом,
язык у нас не уменьшился. Но с другой стороны, мы сказали следующее, что если у нас Epsilon был в
языке LNG4, то мы добавим специальное правило, которое у нас является заглушкой. То есть из стартового
нового не терминала мы делаем переход в Epsilon. И благодаря этому у нас получается следующее,
что LNG6 равняется LNG4, потому что LNG5 был без Epsilon, если что мы Epsilon вернули. И получается,
что у нас в правых частях правил нигде не стоит штрих. То есть там нету стартового не терминала.
Отлично. То есть мы получили, что LNG6 это тот же самый язык, который был в самом начале.
Что, у вас 7 любимое число или нет? Да, это последний шаг. Итак,
какого вида правила у нас с вами остались к седьмому шагу? Да. Да, A в B. Есть правила из
Sv Epsilon, есть правила из A в Bc, которые уже хорошие, есть правила из Ava. Надо избавиться
как-то от этих правил. По-хорошему стоит, но если что, замечу такую вещь, что можно в принципе в
любом момент повторить процедуру удаления не пораждающих недостижимых символов. Ну,
в смысле? Не, ну это по сути, по аналогичному тому, чтобы с каждого шага горбыш коллектор
запускать. Ну там в большей части случаев этого возникнуть не должно. То есть по-моему только в
удалении Epsilon пораждающих. И вот в последнем шаге возможно, что были какие-то символы,
которые могли стать недостижимыми. Не пораждающими вряд ли, а вот недостижимыми вполне.
Ну да, тогда надо удалять. В общем обычно делается очистка в конце, то есть дополнительная очистка
А что мы делали, напоминая, когда мы удаляли не пораждающие, не это? Мы просто не удаляли
ни терминала, сразу совсем правила, в котором он содержится. То есть у нас правила новые не
добавлялись. Поэтому ничего не ломается. Итак, как бороться с этими ребятами? А делается
следующее. Давайте сначала идею расскажу. Представьте себе, что у нас есть цепочка.
А вводит В, В вводит С, С вводит Д. А дальше мы вводим, ну не знаю, допустим либо АВ, либо там не знаю, ЕФ.
Ну да, ой, ну одну маленькую букву. Что тогда можно сделать? Вам эта картинка ничего не
напоминает? Эпсалон-переход в автомате. То есть мысленно мы с вами можем представить, что это у нас
Эпсалон-переход в автомате. А как мы их убирали? Тут благо есть цветной мел. Мы пробрасывали
Переход. То есть мы делаем замыкание. Вот, то есть это делается ровно таким образом. То есть мы
добавляем следующее. Давайте напишем немножечко, немножечко формально. G7. Что это такое? Это у нас
картридж. Это у нас получается N6, Сигма, П штрих и С6. Теперь давайте определим правило, как у нас выглядит.
Правило будет выглядеть в следующем. Давайте я напишу следующее. Значит АВСАСЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕЕ
Причем в нашем room 이건 дальше в разной如е по
а2 в чем за один шаг а3 за один шаг погнали то есть мы нашли цепь и дальше
либо мы развилку делаем либо в бц либо в а тоже за один шаг
вот
что где где вот тут тут это просто что-то было не стертое с доски в прошлом где где вот это
это то что осталось я говорю у меня нет скилла стирания с доски
итак почему это работает
есть догадки
но опять же тут можно сделать пару индукций но
но давайте я вкратце обрисую идею доказательства значит полные доказательства тут будет такое
достаточно муторное итак предположим что у нас есть вывод из sv в каком-то в какой-то
грамматике g6 тогда мы можем последовательность цепочек вывода там разбить на составные части
там грубо говоря а1 потом значит у нас тут будет цепочка давайте назовем это цепь
однобуквенных перих... цепь однобуквенных назовем в которой будет там не знаю b1 bкт то есть
раскрываться будут только эти не терминалы потом все опять же раз у нас это цепь заканчивается там
допустим либо в de либо f да ну понятно что каждый не терминал из правила мы будем раскрывать
своим собственным образом да но главное нам в дереве вывода важно что мы можем говорить в
дереве вывода это вот фиксировано что мы можем любым образом задавать порядок вывода порядок
раскрытия терминалов да потому что грубо говоря мы находимся в стартовой вершине дерева и
дальше мы должны получить каким-то образом итоговое слово целиком так ведь нам же неважно каким
образом не терминалы раскрывать вот вообще неважно ну если у нас есть последовательность вывода просто
мы можем переставлять эти последовательности местами благо у нас какое отношение благо у
нас отношения хорошие ну и вот давайте давайте скажем так что мы будем раскрывать как только у
нас есть не терминал с цепочкой следующий за ним мы сразу будем раскрывать вот и тогда у нас вот
эти шаги действия которые у нас есть они будут идти последовательно и в итоге мы вот эту цепочку
отследим это у нас g6 тогда вот эта вот цепочка заменяется просто на одно правило вы до 7 в g7
и у нас все отлично работает ага это знаете это как у вас с садоводством дела с садоводством
в общем рассказываю байку для того чтобы помидоры росли хорошо значит у них вообще любые культурные
растения у нее ствол у нее есть ответвление и вот тут по моему это называется черенок местах
которые пытаются идти разветвление вот они обычно находятся между обычным стволом и деревьями процедура
по моему если я не ошибаюсь называть черенкованием для того чтобы у нас не вырастали там фрукты
овощи достаточно маленьким мы берем и отламливаем вот этот кусок сразу вот и тогда у вас помидоры
будут расти намного больше в размере вот и по факту мы можем просто сразу отследить этот эту
последовательность и ее переломить на корню но собственно делаем то же самое по факту мы
занимаемся черенкованием наших нашего дерева вывода вот в общем это делается вот таким вот образом
стягиваем а дальше смотрите если мы говорим что у нас есть правила в же сей и мы хотим вывести
в грамантику g6 тогда предположим что у нас есть правила а выводит бц ну в какой-то момент
в ере мы встретили правила вводит бц но тогда по определению у нас есть сразу цепочка а 1 а 2
ну и последняя цепь в будет раскрываться вы дереве g7 ну то есть идея ровно такая же как
удаление всем переходов автобасе доказательства по факту тоже слово в слово доброе утро я не
понял прикола во все в общем я утверждаю что мы доказали что наша грамантика привелась к
нормальной форме холмского у кого есть вопросы или кто не верит в то что мы доказали это
а конец доказательства
ну да тут надо сказать что доказать почему дерево вывода мы можем называть дерево вывода то
есть что любой не терминал можно раскрывать но это по факту опять же ну если формально доказывать
я думаю это не будем делать из того что у нас отношение вводимости это рефлексивно-трандитивное
отношение на и меньше то есть что это у нас транслятивное замыкание из какой-то
количества раз мы точно выведем то или иное правило так ну не забываем в последней стадии
сделать горбач коллектор да потому что у нас могло быть такое что из а выводилась
б водилась с выводилась я не знаю там буква а да у нас какой-то момент буква б то есть у
нас перешла произошла перемычка и б мок стать не не порождает это б мог стать непорождающим
и недостижимым символом да поэтому чтобы чисто было можно запустить еще раз горбач коллектор как
оказывается полезно что горбач коллектор итак давайте теперь мы поговорим про применение
этого факта на самом деле из этого будут два следствия одно теоретическое другое практическое
смотрите предположим что у нас есть грамматика же вы на внф хомского по факту это у нас любая
грамматика мы можем теперь ее считать такие такой и теперь представьте себе что у нас есть
слово в какое-то и нам надо ответить на следующий вопрос принадлежит ли в языку задаваем грамматика
же теперь вспоминаем какие правила у нас есть с вами а выводят бц из с выводят эпсилон и за это
вопрос можем ли мы как-то быстро проверить или придумать алгоритм того что слово лежит в языке
не обязательно вот этого ну нет ну да ну говорю что просто то что выводится из б то что выводится
будет меньше длины вот это точно можем гарантировать потому что каждый из этих терминалов не всем
порождающий ну а там может быть еще какое-то другое дерево вывода под дерево вывода из
не терминалы быть да да да но да собственно собственно смотрите мы можем отвечать на вопрос
выводим али из какого-то не терминала вот такая вот вещь сразу скажу что это с это слайс
питоновский все шпитонов знакома ну а полу интервал его сказал так вот и по факту смотрите
мы можем завести замечательная вещь да так лучше не писать если что это я пишу на лекции
так чтобы это чтобы сократить просто название это плохо и так смотрите мы можем вести вот такую
вот вещь которая будет эквалентно вот этому соотношению да какая база будет
одна буквенная то есть нам нужно пробежаться по правилам всех такого вида пробежаться по всем
буквам и сказать выводится ли это буква или нет вот а перехода так я надеюсь все знают такое
понять как динамика по подотрескам все слышу а ну окей давайте расскажу в общем идея такая что
на курсе алгоритмов про это будут наверное рассказывать там классическая задача про это это
как можно быстро матрицы перемножить последовательность смотрите идея какая все расскажу я на картинке
нарисую значит вот у нас есть подотрезок от от этого элемента до житого у нас с вами есть не
терминал а который мы хотим проверить выводится ли это слово целиком то есть выводится ли из а
в и житая это эквалентно тому что существует какое-то разбиение средняя к и существует
такое правило а в бц что из а выводится отрезок ситого по катам а из ой не из б а из б а из
выводится под отрезок с катего пожитый то есть мы берем наш слов пополам и берем вот такое вот
соотношение то есть выводится либо отсюда выводится лице такое отсюда а вот это у нас тоже определенная
динамика вот такая вот то есть по факту нам надо пробежаться по определенному отрезку пробежаться
по всем правилам пробежаться по промежуточной точке и понять выводится ли левый кусок и выводится ли
правый кусок если оба выводится то значит из нашего терминала мы тоже можем вывести это это
под слово вы конце нам надо проверить следующее какое значение нам надо в конце проверить
после того как мы закончим динамику до длины слова
если ответ на этот вопрос дата слова выводится если нет то не выводится
какая симптомика этого чудо дело
да куб от количества не терминалов ой куб от длины слова на количество правил
что много
что
экспоненту для некоторых видов грамматик будет работать за линию да в общем наша целью этого курса
и в общем виталии будет в теории рассказывать как для большого класса грамматик сделать вот так
за линию но потому что блин представьте себе мы пишем компилятор да у нас извините программа
там сколько символов состоит и сколько этих управляющих символов из тысячи и ну и из
миллионов там ну возьмем код той же компании 1s там 18 миллионов строк кода а теперь представляем
мы это компилим блин закуп как вам не я боюсь я боюсь до скончания это до нового взрыва великого
время пройдет и то оно еще будет компилироваться в общем да значит сегодня наша цель такая начнем
по крайней мере я думаю два пункта мы с вами разберем а треть как раз ставим следующий раз
значит у нас темы такие лемма разрастание нормальная форма грейба х грейба х это женщина а что
мы знаем про иностранные фамилии женского рода они не склоняются то есть мы с вами сразу
понимаем как можно попасть в просак на экзамене ну конечно да собственно итак значит смотрите
план есть ли другие нормальные формы и если аналогика из грамматика но смотрите вот у нас
есть грамматика в нормальной форме хомского давайте поймем некоторые вывод каждый уровень
дерева вывода увеличивает длину слова выводимого не более чем в два раза да потому что каждый не
терминалом у нас максимум раскрывается не более чем два не терминала да потому что правила
вида а бц у нас есть тогда давайте попытаемся оценить высоту дерева вывода относительно длины
слова да значит смотрите если мы предположим что у нас высота дерева n тут надо вспомнить какая
нумерация у меня с нуля или с единицы вот это у нас высота дерева 1 тогда у нас получается кажется
что если у нас высота дерева n то тогда длина слова не больше чем высота дерева для этого
слова минус 1 грамматики вы нормальной формы хомского вроде бы я считать умею сейчас
а бц ну да похоже на правду тогда смотрите что мы можем оценить отсюда давайте прикинем так
логарифм да нам нужен получается а то что не больше равно логарифм двоичный от длины слова
дерева и тогда получается высота дерева всегда больше равна чем логарифм двоичный от длины
слова плюс один нам эта оценочка понадобится и тогда мы можем сделать следующую фишку мы можем
понять какие языки не являются контекст свободными парам попам глема о разрастании номер два всего их
будет четыре для контекстно свободных языков начато пусть у нас лкс язык тогда давайте
вспоминать как для автоматных языков существует такое п что любого слова лежащего в языке такое
что его длина хотя бы п дальше значит тут идут отличия существуют такие слова так дайте ка
я посмотрю ага они у меня так прочитано x у y в z такое что слово наше раскладывается в 5 компонент
x у y в z теперь смотрите ограничение почему не контекст свободных языков доказывается сложнее
потому что ограничение у нас кладутся на середину ограничение не пустоты кладется на второе и
четвертое слово такое что для любого к опять же не отрицательного у нас слово x у y x у в каты
y в каты z будет лежать в языке вот такая формулировка то есть у нас будет разрастаться
со второй ah 4 и буду разрастаться второе и четвертое слово независимо друг от друга
instantaneous и независимая связано с Kubharo
внутрь у нас не будет объединенной структуры в которой все будет разрастаться
То есть надо отслеживать две ветки. Итак, как это доказывать?
Как вы думаете, вторая доска связана с первым каким-нибудь образом?
Ну вот. А теперь давайте по мыслим. Немножечко о следующем.
Давайте П возьмем, какой-нибудь.
Ну давайте, во-первых, возьмем грамматику G в NF-грейбах.
Так, спасибо. Все, у меня уже флешбеки из будущего.
NF-хомского.
Такое, что язык Аджер знает наш язык.
И теперь смотрите. Возьмем П.
Два в степени количеств унитерминала.
Тогда что мы можем с вами написать?
Высота дерева. Оценивается как логарифм двоичный.
Высота дерева оценивается как логарифм двоичный.
От чего? От длины слова плюс один.
А длина слова у нас хотя бы получается два в степени n.
Так, получается больше или равно, чем что?
Логарифм двоичный два в степени n плюс один.
Сейчас я подумаю, хватит ли этого.
Сейчас.
А, это высота один.
То есть у нас получается от корня.
Давайте я картинку рисую.
Вот здесь вот будет еще хотя бы n плюс один высота.
То есть у нас, смотрите, в дереве вывода самый длинный ствол будет содержать хотя бы количество унитерминалов плюс один символ унитерминалов.
То есть у нас есть s, а у нас есть какая-то буква и существует ствол, в котором будет хотя бы столько нитерминалов.
Так?
У нас ствол из нитерминалов.
Длины хотя бы количество нитерминалов плюс один.
Что из этого можем сказать?
Да, какой-то нитерминал находится дважды.
То есть у нас будет картинка такая.
И в какой-то момент времени будет выводиться a.
И давайте рассмотрим.
Здесь a, здесь какое-то слово.
Давайте положим то, что у нас выводится из этого нитерминала как?
Что?
Y.
То, что выводится здесь, это будет у.
То, что у нас выводится здесь, это выводится y.
Здесь у нас выводится x, здесь выводится z.
Вот, мы выводим все слово x,u,y,v,z.
Ой.
Что-то не так, да?
Вот тут вот.
Да-да-да.
Итак, и мы с вами сразу понимаем, какое слово будет лежать в языке для произвольного k.
Ну да.
x,u,k,t,y,v,k,t,z будет лежать в l.
Ну потому что у нас по факту есть вывод из s.
Выводится x,a,z.
Из x у нас выводится x,u,a,v,z.
Ну и это a можно разрастать сколько угодно раз.
А?
Вообще да.
Ну, не, просто можно написать, что найдется вот такой не терминал, вот что выполнится вот это соотношение.
Строже, я думаю, станет непонятнее.
То есть у меня, как у человека, который рассказывает это все аудитории, есть такой терминал.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Вот.
Итак, у человека, который рассказывает это все аудитории, есть задача, чтобы поддержать компромисс между понятной и сложной.
Тоже рассказать понятной.
Ну, там дальше на самом деле по контексту будет понятная, понимаете вы или нет.
Грубо говоря, говорите уверенно.
Это никому еще не мешало.
Вот.
Итак, что нам необходимо доказать с вами?
Нам надо доказать, что уй, во-первых, что ув не пустое, а второе, что длина уйв не больше, чем п.
Для этого мы сделаем следующее.
Возьмем самое нижнее повторение не терминала.
То есть возьмем, поднимемся по этому дереву вверх и возьмем первый не терминал, который встречается дважды.
В смысле ствол, не целое дерево?
Как выглядит объект, который мы ищем?
Мы берем последовательность выводов, которая у нас есть.
Раскрываем не терминалы только по этой цепи.
Дальше смотрим, какие не терминалы на этом стволе появлялись.
Дальше берем, отматываемся по вот этому стволу.
Тут какие-то могли быть еще не терминалы, которые мы не раскрыли.
Давайте скажу честно, что то, что у нас здесь, это в каком-то случае последствия терминалов и не терминалов.
До тех пор, пока мы их до слова не раскрыли.
По факту, это что у нас будет?
С выводится α, а, β.
Дальше из а у нас выводится, каким-то образом, получается у, а, в, α, г.
Потом только из а у нас раскрывается у, можем создать такой порядок, что из а выводится х, а из г выводится z в последнюю очередь.
Потом в каком-то момент из а выводится х, а из β у нас выводится z.
В последнюю очередь можно выводить.
Мы ищем первый а, который на пути вот этого дерева вывода, вот этой части, а у получается, в, β.
Вот на вот этом пути встречается первым при раскрытии в обратную сторону, по этому корню, по этому стволу.
То есть мы нумируем последствия действий в стволе, идем в обратном порядке.
И начинаем заводить сет не терминалов, по которым мы раскрывали правила.
Вот как только в первый раз встретили какое-то повторение не терминала, его трекаем.
И это у нас будет а.
Вот, зачем это делается?
Первое, что мы с вами можем заметить, давайте рассмотрим вот эту цепочку вывода а, у, а, в, и это выводит у.
Давайте поймем какая высота у этого ствола.
Да.
Сейчас, давайте поймем.
Нет, н, ровно.
А, высота в ребрах считается, да?
Да, это в ребрах высота, да.
Ну да.
Не, не, не, не, не.
Сейчас.
Так, сейчас, секундочку, давайте, а, б, ц, а.
Так, это я просто прикинусь.
Так, если у нас не терминал 3, да, то сколько тут получается?
Раз, два, три, четыре, да, вот так вот.
Все, рубрика арифметика, рубрика арифметика в прямом эфире, да.
Так, ну тогда что у нас получается?
А что мы можем сказать, то есть это получается у нас высота дерева вывода, слово, а какого?
Y в, да?
Ну да.
Да, согласен, берем самый длинный ствол, да, у него длина такая, и тогда, да, согласен.
Что надо брать самый длинный ствол и подниматься из самого длинного ствола наверх, чтобы никаких проблем не было.
Так, сейчас, секунду, где у нас соотношение было?
Нам нужно оценить длину слова сверху.
А, логарифм 2, получается длины слова Y в не больше, чем OH от этого слова, минус 1.
То есть это n, то есть это сверху n оценивается.
Ура!
Так, первую штуку оценили сверху.
Почему у В не пусто?
Так, давайте смотреть.
Для этого сделаем следующее.
Давайте поймем в дереве вывода, а, под дереве вывода, которое получается у-а-в, рассмотрим первый шаг.
У нас грамматика в какой форме находится?
В форме Хомского.
Значит, у нас правило было точно такое.
Ну, какое-то.
Дальше смотрите, что у нас может получиться.
У нас может быть несколько случаев.
Ну, можно так.
В общем, тут как угодно.
То есть, можно сказать, что если у В...
Ну, да.
За какое-то количество шагов заводится А, да?
Ну, за больше, чем один шаг.
И что?
Да.
Ну, что-то как-то это.
Давайте лучше не будем писать, так?
Смотрите, а дальше сделаем следующее.
Не умоляя общности,
не умоляя общности,
мы можем сказать, что из В выводилось у-а-альфа.
То есть, какой-то из этих не терминалов В и С должен был вывести А.
Но предположим, что это у нас будет не терминал А.
Тогда рассмотрим первый момент, в который появился А.
Да, я буду теперь в деле вывода писать так.
Тогда у нас...
Так, сейчас, секунду.
Давайте смотреть.
Да, неважно, короче.
У нас из терминала В вывелся у-а-альфа, да?
Тогда из С выводился какое-то слово, не знаю, Т.
Причем, если посмотреть, как у нас выводится это все дело,
ну, это пусть у нас...
Р-слово, да?
То есть, из В у нас выводится у-а-р,
а из С выводится Т.
Но С у нас не эпсилонопорождающий.
Следовательно, длина Т больше нуля.
А Т является у нас кем?
Получается, Т является суффиксом слова W.
Вот так.
Поэтому длина слова W, длина слова С, длина С, длина С.
Поэтому длина слова В больше нуля.
То есть, нужно чуть-чуть аккуратнее.
То есть, мы смотрим, что выводится отсюда,
значит, из этого должен был вывести суффикс слова В.
А у нас из не терминала выводится только не пустое слово.
Не, я не проживал, я понял, что его просто не надо делать.
Да, потому что я думал, что надо раскрывать Альфу,
понимать, что там находится и так далее.
Зачем?
Наша цель доказать, что слово В не пустое.
Грубо говоря, из В выводится А, значит, из С выводится то, что правее А.
Ну, то самое А, которое у нас было.
То есть, берем первый момент времени,
когда этот не терминал А появился в нашей цепи вывода.
Который у нас был в выводе А у АВ.
Да.
Да, смотрим...
А?
Почему У и В не содержат А?
Скорее всего, все корректно, я тоже не понимаю.
Ну...
Тут интересная, опять же, суть момента состоит в том,
что мы можем менять последовательность вывода в наших правилах.
То есть, там, грубо говоря, мы держали ствол,
да, пытались первым раскрыть ствол
и раскрывать все, что справа от этого ствола.
Ну, а здесь мы тоже предполагаем, что мы можем задержать именно тот момент,
в который у нас остается не терминал А, а это все раскрыть слова.
То есть, я говорю, тут очень большой набор манипуляций
с тем, как мы делаем дерево вывода,
как мы строим дерево вывода, в каком порядке мы раскрываем слова.
Да, это кажется, что такие манипуляции, но к ним надо привыкнуть.
То есть, все равно цель начальная у нас это не терминал,
цель конечная это какое-то слово.
Вот, поэтому это может быть реально казаться таким сложным фактом.
Но идея такая, что...
Давайте еще раз идею.
Значит, берем самый длинный ствол в нашем дереве,
его высота, хотя бы количество не терминалов, плюс один.
Значит, в нем есть не терминал, который повторяется два раза.
Идем со ствола вниз-вверх,
и берем символы, которые встречаются два раза, причем первый раз.
Отцепляем этот кусок,
оценим высоту этого дерева,
оно оказывается не очень большое, поэтому длина слова,
которую выводим здесь, не очень большая.
Ну, а поскольку мы работаем с нормальной формой холмского,
и у нас все не терминалы являются не эпсенопорождающими,
то тот не терминал, который не раскрывает этот не терминал А,
он породит не пустое слово.
Поэтому в этом раскрытии у нас как раз будет длина УВ не пустая.
Это краткая идея доказательств.
Давайте вопрос по этому доказательству.
То, мне кажется, я начинаю вас терять.
Вот она картинка на слайдах.
Да, вот.
Почему это еще раз работает?
Этим?
Отрицание взять.
Да.
Еще больше.
Да, да.
Ну, опять же, берем слова определенного вида.
Ну да, случаев больше будет.
А можно это поделать? Не надо.
В презентации есть пример, на самом деле.
Значит, есть пример неконтекстного свободного языка,
это язык вот такой вот.
Ну и дальше тут делается следующее.
Смотрите, идея какая.
Идея такая, что разбиваем, опять же, напоминаю,
что смотрим произвольное разбиение,
и, смотрите, поскольку длина куска y, q, v хотя бы p,
не больше, чем p, то получается у нас в этом слове y, q, v
какой-то буквы не будет, из a, b, c.
Потому что длина слова не больше, чем p,
среднего, по которому мы разрастаемся.
Ну, а для того, чтобы все буквы из вида a, b, c
у нас были в слове y, q, v, нам нужно, чтобы длина
этого слова захватывала хотя бы одну a и хотя бы одну c.
Значит, длина слова должна быть хотя бы p плюс 2.
Такого быть не может.
Ну и дальше получается следующее, что какой-то буквы есть,
какой-то буквы нету у нас в u, v, в промежуточной штуке.
Мы начинаем разрастать,
и оказывается, что количество букв определенного вида
будет больше, чем количество букв определенного другого вида.
Опять же, это обобщение доказательства.
Вот. Собственно, вот оно на доске.
Ну, я говорю, на семинарах будут, опять же, примеры того,
как доказывает некая текст свободности языков разного вида.
Нет, вы.
Нет, есть более гробовое.
Какого? Lema-Logdano называется.
Да, то есть наоборот, если отрицание выполнено,
то язык не контекстно свободный.
Ладненько, давайте хотя бы попробуем начать следующую тему.
Поговорим про нормальную форму Грейбах.
А именно поговорим его в контексте того алгоритма.
А алгоритм, давайте я просто, я забыл его название указать.
Тот алгоритм называется алгоритм Кока Янгера Касами.
Вот тот старый, который мы разобрали с динамикой.
Он же в простонародье называется...
Так, у нас на ютубе это, 18 плюс или как?
В общем, C, Y, K. Додумайте сами.
Значит, это алгоритм. Давайте подумаем, в чем у него проблема.
Во-первых, то, что он работает за куб.
Во-вторых, в том, что в грамматике в нормальной форме Хомского
непонятно, какая первая пуква выводится.
Поэтому хочется сделать очень красивую вещь.
Называется следующая. Давайте грамматику назовем в нормальной форме Грейбах.
Если ее правила будут иметь такой вид.
Это здесь дополнительное свойство.
В чем примечательна эта нормальная форма?
В чем она хороша?
Вы можете объяснить, в чем была плохая предыдущая?
То, что если мы хотим, чтобы у нас был гиперпед, то есть
у нас был гиперпед, то есть у нас есть гиперпед, то есть
у нас есть гиперпед.
то что если мы хотим чтобы у нас был фактически парсер хочется чтобы парсер при каждом понятном
действии откусывал как минимум одну букву ну чтобы он не вращался по циклу в холостую
ну да практике такие да хочется видеть результат на деле так вот вот эта штука позволяет как раз
сразу видеть какую букву мы отцепляем да потому что у нас каждом правиле сразу выводится терминал
грей бах
так вопрос как вы думаете алгоритм кока нянди ракосами работает для вот такой грамматики в
такой нормальной формы можно его как-то модифицировать да в принципе можно достаточно
легко модифицировать при этом на самом деле перебора станет меньше потому что мы сразу
можем прыгать к словам меньшей длины разбивать наш отрезок на две части на словах на словах
меньше длины но что у нас сразу первыми терминал выводится а симпатически а симпатически быстрее
не становится но на практике может стать быстрее но меньше форов грубо говоря
ну можно кстати рекурсивный спуск может быть будет чуть-чуть приятнее для грамматики
в такой нормальной форме а ну да собственно давайте доказывать что любую грамматику
можно привести в нормальную форму гребах один да давайте возьмем грамматику в нормальной
форме хомского так что шагов на самом деле по-честному не один а 8
и давайте посмотрим следующую вещь я ведем понятие левого деления
и будем вводить вот такого рода не терминала и наша будет идея такая что мы это идея покажут
что из а без б из а левое деление б будет выводится в только тогда когда будет выполняться вот такое
грамматики да да да то есть идея такая что попытаться убрать все буквы то есть как-то
вывести первую букву для этого нам нужно немножечко колдонуть да это мы тогда смотрите вот вот картинка
такая да а левое деление б так такие чтобы выполнил был выполнен вот это соотношение на
самом деле мы сейчас будем сразу доказывать вы факт смотрите у нас грамматика в нормальной
форме хомского для этого давайте поймем как у нас может выводиться не терминал б
тут надо индуктивное определение сделать смотрите в какой-то момент у нас вывелся в этом
деле вы в этом деле вывода вывелся не терминал б и зафиксировался давайте найдем такой момент
он вывелся из какого-то не терминала с за один шаг при этом раскрыл правила
бд а из д дальше раскрывалась какое-то у да то есть фиксируем первый момент момент раскрытия
так а это у нас какой-то зад будет теперь смотрите в чем особенность то есть мы хотим
чтобы из а без б выводил и слово дубль в давайте посмотрим внимательно на вот
это вот слово у что бы можем сказать для этого слова у она его цсд при этом у не пустое
значит уду уд есть первая буква ой у слова у есть первая буква обозначим ее е
а как это буква е могла появиться все то что у нас нормальная форма хомского
только из правила вида е выводит е поэтому у нас картинка перерисовывается таким образом из
а у нас выводится цз дальше за один шаг у нас выводится бд дальше в какой-то момент времени
из д у нас будет выводиться е и слово какое-то дубль в и за один шаг так это это перенесу и
как-то за один шаг мы получаем что буквы где но теперь как говорится в передаче поле чудес
мы отгадали все буквы теперь надо отгадать со слову целиком нам надо новое правило грамматики
написать как можно реализовать а без б а левое деление б смотрите внимательно вот это в терминах
левого деления как можно написать в это что а да без е
так вот это как можно написать
шок контент еще на самом деле грамматика будет определяться следующим образом что
введем правил для любой пары не терминала фаб мы будем вводить такое правило если у нас
есть правила вида ц выводит бд и есть правила из е вводит е мы будем добавлять вот такое правило
для любой пятерки не терминал для которой выполнено вот это соотношение будем да который
творяет вот этим соотношением конструктивно как раз понятно но вот нам надо будет индуктивно
в обе стороны показать это выражение на самом деле мы сейчас вот этот факт доказали так
и с какой стороны в какую ну оно просто это такое определение которое по факту строится из
картины доказательства то есть в этом финт ушами то есть у нас то есть предположим из а выводит
бв да индукция по длине вывода да тогда что у нас получается из а вот бв значит тогда смотрите
что у нас получается из а будет выводиться ц за меньшее число шагов так ведь а а из получается
что там что там еще у нас есть а из деве тоже будет выводиться заменить число шагов да вот
поэтому делаем индукционный переход и у нас все замечательно получается то есть если у нас
есть вот это соотношение слева направо то просто имеет такое правило мы его получаем на самом деле
там еще есть давайте я как раз еще одно правило покажу чтобы было понятно вот типа как заканчивается
вывод но для этого нам надо взять первую букву есть у нас слово свв значит есть первая буква
а которая выявилась из какого-то не терминала а здесь у ну и получается что
с без а выводят у а мы добавляем правила получается из а из с выводится а есть без
а вот поэтому на самом деле в нормальной форме грейбах нельзя обойтись от этого правила
в общем вот такая картинка и на самом деле если внимательно подумать то факт в правую
сторону получается да и еще смотрите базу надо доказать база будет такая надо будет
добавить еще вот такое правило на всякий пожарный что ну справа то ничего нельзя
добавить вот значит это будет делаться как раз справа налево база индукции будет вот такой
переход это вот эти правила и получается у нас вот это соотношение а в обратную сторону мы как
раз будем доказывать следующий раз с вами вот и кстати подумайте почему от этих правил можно
избавиться это такое упражнение все
