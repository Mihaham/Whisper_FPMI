Окей, поехали. У нас сегодня простая тема, одновременно с этим важная. Так, лекция 3. Мы
будем с вами говорить о поиске кратчайших путей сегодня. Кратчайшие пути. В общем-то,
мы начали об этом говорить еще в прошлый раз, когда проходили БФС. Вот, но мы там так,
тактично умолчали об этом. Точнее, сказали, что задача такая, но не стали как-то отдельно
акцентировать. Определение. Тройка ВЕВ это взвешенный граф, если g равный ВЕ это граф,
и ВВ это какая-то функция, действующая из E, какое-то k под множество r, может равное r.
Собственно, будем так это определять. В частности, в 0kBFS, чему было равно k? Ну,
только с нуля начинаем. Ну-ка, маленькая. Вот. Окей, то есть мы с вами имеем решать задачу,
когда у нас такой вот конечномерный случай. Это очень грустно, давайте решать в общем случае.
Собственно, сегодня реакция подфишена тому, чтобы в общем случае решать эту задачу,
то есть поиск кратчайших путей. Давайте определение еще напишем. Пусть V1, Vn, это элементы
множества вершин, тогда весом пути V1, Vn обозначим
такую вот сумму весов. Ну, пример. Давайте это stt обозначим. Мы поставим веса какие-нибудь.
7, 6. Тогда расстояние от вершины S до этой abc. Давайте в общем длину пути S, B, C, A. Это что
такое? Это S, B, 2, ну плюс 3, плюс 7, то есть 12. Вот. Ну, очевидно, что от S до A есть другой
путь, который короче вес 1, в общем-то, это ребро S, A. Определение. Функции dist от S до T
определим величину. Минимум по... Такую вот величину интересную. То есть это минимум по всем
возможным путям из S в T. Вот. Окей. Вообще-то мы готовы к тому, чтобы начинать. Первый алгоритм
это алгоритм Dijkstra. По-моему, он нидерландский вроде как математик, Эдгард Дейкстра. Автор
этого алгоритма. Как задача у нас стоит? W будет действовать из E в R+, то есть 0 и все положительные
числа. Вот так вот запишем. 4+, не столько положительные, можно еще 0. Хотим для вершины
S из V найти любой вершины T из W, от S до T. То есть мы ищем кратчайший путь из родной вершины
до всех остальных. Ну, вроде применимость этого, плюс-минус, очевидно. Ну вот банально, вы идите в
такси, вам нужно добраться там откуда-то до Фистеха, у вас есть грав-дорог, вы знаете,
сколько по ним ехать, хотите добраться. В общем-то, как-то так. Ну, висает там, сколько вам времени
потребуется, чтобы переехать из одного перекрестка на другой, допустим. Ну, там как-нибудь по-другому это
вершины выделяются там. Конечно, там не Dijkstra внутри стоит, там немножко получше лекции на 5,
ну, все равно. Ну, базовые идеи вот отсюда берутся. Так, вот, наверное, алгоритм сначала сформулируем.
Как выстроен сам алгоритм? Шаг первый. Говорим, что давайте у нас будет массив DIST, обозначим,
что давайте далее DIST от T, это будет DIST от S до T, такое у нас S зафиксировано. Очевидно,
DIST от S равен нулю, но это вроде тривиальное замечание. Раз у вас веса не отрицательные,
то вы не можете получить минус. Будем поддерживать множество L. Такое, что для любой вершины V из L
известна DIST от V, практическое значение, что мы знаем. И последнее обозначение,
это что D от V – текущая оценка вверху на DIST от V. То есть мы будем получать какие-то оценки
на DIST от V и в какой-то момент говорить, что вот мы получили оптимальную оценку,
что она равна кратчайшему расстоянию. Вот. Изначально вот так вот. Вот наш старт алгоритма,
наш обозначение, и мы поддерживаем множество L. Очевидно, что L – это итог старта вершины S.
Я буду рисовать на этом примере потом. Что у нас происходит? Мы рассматриваем два подножия
вершин. То, что нам известно, и то, что неизвестно. Так называемый разрез проводим в графе. Дальше мы
смотрим ребро минимального веса, пересекающий разрез. Ребра пересекающие разрез TSA и SB. Графически
на это почему они пересекают? Фактически, потому что один конец лежит в одной стороне, другой в
другой. Так, шаг два. Пусть V. Так, не пусть. Давайте по-другому напишем, что мы... Давайте
ведем еще процедуру релаксации так называемого. Релаксация. В чем она заключается? В том, что у вас D от V.
То есть, смотрите, вы берете вершину S из текущего множества и пытаетесь оптимизировать ответ для всех
ее соседей. То есть, для A и для B. Дист от S плюс W от S до W. Логично здесь полагать, что если ребра нет, то вес
бесконечность, просто-напросто. Вот. То есть, давайте выписывать здесь массив D и DIST, ну и для вершинок
соответственно. S, A, B, C, T. Это массив D, это массив DIST. Ну, на первом шаге просто будет равно. Потом будет
не на равно, да. Так, на первом шаге это мы знаем, что это нули. Дальше что происходит? Ну, здесь D
бесконечность. Теперь, ну здесь DIST тоже бесконечность, очевидно. Дальше мы делаем
из S. Смотрим все ребра пересекающие разрез, T, S, A, B. Пытаемся обновить ответ до вершины B.
Ну, получаем, что ответ A это 1. Ответ до B это 2.
Где W? Это сосед S. Ну, просто, чтобы было проще жить. Шаг третий, ну третий-четвёртые шаги не будут
повторяться, пока S не опустеет. Ну, что L точнее. А берем вершину с минимальным DATV такую, что W лежит V без L.
То есть мы берем вершину из правой части минимальную, которая DATV минимальный.
Кто у нас лежит в правой части? A, B, C, T. Вот эти 4 штуки. OK, D минимальная до вершины A.
Пусть это U. Говорим, что DIST от U равно D от U. То есть утверждается тогда, что вот на этом этапе
текущая оценка D это оптимальный ответ. Это будем доказывать еще. Шаг четыре. Релаксация из U.
Давайте здесь напишем, что S равно S в объединении с U. Потому что я добавляю просто вершину.
OK, то есть я закинул вершину L, а теперь у меня разрез выглядит по-другому.
И у меня ребра пересекают разрез. Раз, два. Релаксация из вершины A. Это я пытаюсь
обновить расстояние до единицы. Плюс единицы это много. Это два, там будет ноль.
То есть что я делаю? Смотрю на CD A, CD A это S. Говорю, что первый вариант это
какой-то ноль. Второй вариант это один. Это DIST от A. Плюс W от AS. Плюс один. То есть два.
Очевидно, два больше ноля. Здесь не обновляем. Дальше кто сосед A? Это C. Получается до нее
текущая оценка D это 8. Потому что у нас есть DIST от A плюс ребро A-C. Поэтому оценка на C у нас
стала равной 8. Давайте напишем, что это L. Дальше следующий шаг. Выбираем минимальную вершинку.
Что это будет? Это будет двойка. Вершинка B, потому что до нее оценка минимальности,
что не вылежат. Вот понятно почему. Прием. Отлично. И релаксируем ответы с B до остальных.
Кто у B соседей? Это S и C. Не получится оптимизировать. А вот до C получим, что это 2 плюс 3.
В самом деле оценка 5. Окей, тогда остается C добавить. Здесь расстояние 5. И все,
вроде понятно, что дальше происходит. Потому что когда добавить это,
вот автоматически добавится оценка на T. И все. Давайте сначала время работы подумаем.
Сколько это работает вообще. Для этого посмотрим следующее, что я хочу. Я хочу сначала посмотреть,
сколько у меня операций поиска вот такой вот вершинки минимальной.
Ну да, потому что каждую вершину таскиваем. Извлечение вершины минимальным D от V от
модули V. Это первая составляющая. Вторая составляющая – это релаксация. Но я же хочу
найти минимальную вершинку, до которой D от V минимальный. Ну зачем, у вас же есть умные контейнеры,
мы с семестром не зря страдали прошлый. Вообще да, сначала будем искать линейно,
потом поймем, что можно лучше. Второе – это релаксация, то есть изменение D от V. Что это такое
по сути. По сути это дикрийские операции, уменьшить значение по ключу. Это релаксация.
Сколько суммарно раз будет вызвано вот эта вот штука. Вообще два умножения числа ребер.
Ну да, потому что у вас каждое ребро рассматривается не более двух раз, из одной вершины и из второй.
То есть мы с вами знаем, сколько это делается. Осталось оценить, сколько мы хотим по времени,
чтобы делась каждая операция. Что это такое. По сути мы сказали, что это экстракт. Почему?
Потому что вы удаляете из множества непосещенных вершин. Вот так вот можно сказать.
А это операция дикрийские. Кто умеет такие штуки делать? Ну да. Поэтому первый вариант на массиве.
Что мы получаем. Что у нас в излечении вершины золото V работает. Потому что нам нужно минимум искать.
С другой стороны у нас релаксация всего золото единицы каждый раз будет делаться.
Потому что это просто изменение по индексу.
Так вот напишем. Что бы было нагляднее.
Почему я здесь не пишу плюс е. Ну да. У нас е уже входит в квадрат.
На бинарной куче. Делаем модуль V раз. Это излечение вершины с минимальным D.
Вот модуль V. Ой, не модуль V, локвы здесь будут.
Плюс е тоже на модуль V.
Вот. Ну это уже лучше, чем это, да? А вот нет. На полных графах это хуже, чем это.
У вас на полном графе е порядка V квадрат. Вы для каждой вершинки е с каждой соединяете.
Получается V на V-1 пополам. Ну все. Тут, конечно, эксперты скажут, что это все полная лажа.
Есть еще круче штука. Все бы иначе куча. Но мы о ней тактично умолчим. Я всего лишь скажу, что здесь будет стоять от единицы, а здесь будет локвы стоять.
Все бы иначе куча. Поэтому там будет е плюс V локвы. Ну понятно дело, что в реальной жизни, не в реальной жизни, а в коде вы будете скорее всего использовать
стэфсет просто. И брать, типа менять значение, это просто удалить и вставить новое. Вот. Как-то так вы будете это делать.
А теперь надо доказывать корректность алгоритма до экстра. Да? В чем стоит корректность? В том, что по сути, я имею право держать вот это вот.
Это единственное, что мне надо доказывать.
Алгоритм до экстры.
Корректирую.
Доказательства. Индукция по размеру L.
Ну почему это так делать? Потому что мы, судя по сути, добавляем вершинку V, каждый раз, когда мы до нее говорим оптимальный дист.
Поэтому это звучит адекватно.
База индукции.
База индукции, когда у вас фальят одна вершина, это стартовая. Ну для нее ответ, очевидно, верен.
Очевидно, верно.
Потому что вы не можете получить расстояние меньше нуля просто-напросто.
Теперь переход.
Как будем переход оформлять?
У меня уже доказывается, что D статура равно D от U. Да?
Пусть U такая вершина из V без L, что берату минимален.
Я хочу доказать, хотим D от U равно D стату.
Ну давайте докажем, что, таким образом, надпротивим. Представим, что это неправда.
То есть я хочу сказать, что D от U строго больше, чем D от U.
Я хочу из этого ввести противоречие.
Как оно здесь выводится?
Рассмотрим кричащий путь из S.D.U.
Случай первый.
U это единственная вершина на кратчайшем пути, что не лежит L.
Что это значит? Это значит, что у вас путь как-то так устроен.
То есть он как-то ходит по L, добрался до вершины V и в одно ребро прыгнул в V.
Как мы могли получить D от U?
D от U мы могли получить, просто пройдя как-то по L, а потом срелаксировав вдоль одного ребра V.
При этом в этом случае D от U минимально.
Но почему оно равно D?
Если бы существовал путь лучше, то он проходил как-то вот так вот.
Но тогда у нас получилось бы, что мы все равно рассмотрели бы этот путь рано или поздно.
Почему? Потому что если этот путь кратчайший, то оно все равно устроено абсолютно так же.
Рассуждение здесь такое, что рассмотрим все такие пути, которые целиком лежат в L, потом в U.
Очевидно, что один из них кратчайший, если мы предполагаем, что кратчайший устроен вот так вот.
Но тогда мы в любом случае его бы нашли.
Все, ну так вот делается.
Здесь даже противоречие надо приводить.
Все такие пути наш алгоритм рассмотрел бы.
И нашел бы D от U, просто-напросто.
Потому что если у вас кратчайший путь устроен именно так, что он целиком лежит в L, потом одним ребром прыгает в правую часть.
То очевидно, мы бы рассмотрели бы уже все такие пути к этому моменту.
И у нас D от U равен D от U просто потому, что D от U это минимальная оценка на все такие штуки.
Вот второй случай, он, казалось бы, интеллектуальный, но вроде проще гораздо анализируется.
Случай два.
Это кратчайший путь от S до U содержит вершины из V без L.
Хорошо, ну тогда пусть ребро A-B последнее на кратчайшем пути, что A лежит в L, B лежит V без L.
Ну, короче говоря, хочется доказать, что на самом деле мы бы рассмотрели бы вершину B на этом шаге просто.
Потому что вот этот кусок пути, его вес хотя бы ноль.
То есть нам было бы не принципиально какую вершинку рассматривать на этом шаге.
Как-то будем доказывать.
Давайте рассмотрим D от U.
Все-таки я соглашусь с тем, что это D от B плюс W от U.
Давайте D от A.
Ну, тогда я знаю, что D от A это дистота по предложению индукции.
Вот так вот выпишем теперь.
Одну ребро откусим.
Хорошо.
Что теперь я хочу сказать?
Что это будто бы больше либо равно, чем D от A плюс W от A-B, потому что здесь веса не отрицательные.
Что равно D от B.
То есть я получил, что D от U больше чем D от B.
Но из этого следует, что просто-напросто U не минимальный дист, не минимальная D точнее.
U не минимальный дист, не минимальная D.
То есть я должен был бы брать либо B, либо без разницы брать либо B, либо U на этом шаге.
То есть я предполагаю, что U это минимум.
То есть я предполагаю, что вот это вот верно.
D от U больше, чем D от U.
Но я получил D от U больше, чем D от B.
Но...
Как бы...
Ну, короче, можно строго пить при течении.
Но это вроде то же самое, что можно получить.
И вроде это хватает для доказательства, да?
Ну да, все.
Вопросы?
Ну окей.
Ну мы рассматриваем, мы хотим от противного.
То есть мы хотим показать, что
либо D от U больше D от U,
либо U было не оптимально брать на этом шаге просто-напросто.
Первый случай, это у нас U единственная вершина на крещающем пути.
То есть у нас выглядит как-то вот так вот это все.
Это вершинка V,
дальше вершинка U прыгаем по одному ребру.
Это первый случай.
В первом случае, что мы сказали?
Мы сказали, что раз мы рассмотрели все вершины из L,
мы знаем ответы.
То...
И U это такая вершина с минимальным D.
Да?
То... Ну...
Скажем так, что...
Что?
Ну да, просто если я возьму какой-то
другую вершинку,
то я построю потом до U,
и этот путь такой вот извилистый достаточно.
Вот, но у меня есть путь лучше,
очевидно, потому что у меня просто здесь
не будет этого куска.
Вот, и все такие пути просто рассмотрел
даже на первом шаге, на самом деле,
которые полностью в L лежат и прыгают одним ребром.
Вот, поэтому если я предполагал,
что крещающий путь устроен именно так,
то тогда я просто нашел бы
явно этот минимальный путь
просто по определению D.
Ну и все, поэтому D от U равно Dist от U.
Второй случай, это у меня есть
какое-то ребро A-B-A.
Ну и здесь есть какое-то продолжение.
То я просто расписываю D от U по определению.
Это D от A
плюс W от A до U.
Вес пути.
Но это крещайший путь, естественно, предполагается.
Дальше.
Раз это крещайший путь, то что у меня первое
известно по индукции, что это D от A
это Dist от A, потому что L лежат в L.
Ну и плюс разбиваю
это крещайший путь на два куска.
Это вес ребра плюс вес UB.
Ну, БУ точнее.
Ну, так
эта штука больше ребра на нуля,
значит Dist от A плюс W
от A-B равно D от B.
Ну все.
Ну дальше
я получаю, что если бы
D от B строго меньше, чем D от U,
то просто бы U не брал. Если равенство,
то тогда не принципиально.
И тогда я бы рассмотрел обязательно
даже вот так вот, потому что здесь только одно
ребро пересекающее разрез. Здесь какой-то путь странный.
Еще есть.
Так, все, надо ускоряться.
Алгоритм Форда Белмана.
W будет действовать
из E.
R просто уже.
То есть мы себе разрешаем
ребра от писательного веса.
Дальше, что мы хотим?
Для любой вершины
W найти
Dist
от S до W.
И смотрите внимательно, что здесь нужно сказать.
Здесь есть плохая ситуация.
Такой вот классный граф.
Вопрос, чему равно
Dist от S?
Почему это?
Минус здесь, конечно,
сколько угодно ходить по кругу.
Классно, да?
Круче граф.
Поэтому давайте будем считать
следующее, что у нас нет
циклов отрицательного веса,
чтобы Dist от S
для произвольной вершины
поднялась корректно.
Что дается отрицательными циклами,
видимо, останется на семинар,
потому что не успеем сегодня.
В графе
нет циклов
отрицательного веса.
То есть нет такого цикла,
что суммарно его вес
строго меньше нуля.
Нулевые циклы нормально,
они не могут бесконечно улучшать ответ.
Отрицательные могут.
Тогда что мы делаем?
Здесь будет динамика идти.
Давайте
такую динамику введем.
Дп от ВК
это будет
минимальное расстояние
от С
до В
вдоль пути длины К.
Можно и меньше,
или ровно К.
Посмотрим, может подкорректируем чутка.
Чему равна база?
Что нам известно?
Очевидно,
что Dp от С
от нуля равно нулю.
Будет длина 0,
это классный путь.
Думаю, вы с этим ознакомились
уже с помощью контеста.
Все остальные равны бесконечности.
Как можно пересчитывать?
Пересчитывать будем
увеличением ПК.
Просто-напросто.
Какой путь максимальной длины
может быть?
В-1
В-2
В-3
В-4
В-5
В-6
В-7
В-8
В-9
В-10
В-11
В-12
В-13
В-14
В-14
В-14
В-14
В-14
В-14
OK
Ну что можно сказать?
Как я могу пересчитать для произвольного казана
k-1?
Просто приткнись по рёбрам,
расслабляй.
Что? Нет. Какой В? Какой К? Нет. Зачем? Вдоль пути длины К. Длина реберная имеется в виду. Число ребер на пути.
Ну тогда просто dp от V кt мин равно dp от U к-1 плюс w. Вот чего до чего от У.
Dp посчитано. Держит ответ. Чему равен dp от V? Вот я сдаваю. Это мин пока.
Вот dp от V кt. Сколько это работает? В на Е. Так, здесь может быть не очень видно. Давайте произнесу.
Это минимум по всем K от 1 до mw-1. Оно здесь. Давайте вот так напишем. Строго меньше чем В. Потому что у нас mw-1 тоже должно быть зацеплено. Ну или меньше либо равно надо было писать.
Вот dp от V к. Ну все. Потому что мы не знаем какой длина оптимальный путь.
Ну тогда не нужно брать минимум пока. У нас путь считается длиной меньше чем 1. Ну мы накатываем.
Ну тогда мы должны инициализировать, что dp от V к равно dp от V к-1. Да. То есть если вы сюда пишете строку dp от V к перед пересчетом равно dp от V к-1, тогда вы действительно учитываете длины меньше либо равные K.
Ну тогда у вас будет ответ просто. Это будет dp от V к модуле V к-1. Вот так вот. У корректности вроде плюс-минус трибиально здесь. Потому что динамика.
Время. К чему равна память?
Да. Заметим, что мы по сути используем только пересчет предыдущий. Тут можно вспомнить матричное dp, где мы только использовали предыдущий слой для пересчета. Бла-бла-бла. Давайте без этого.
Вот. Потому что здесь все-таки это не нужно. И по сути нам нужно только два последних слоя. То есть мы можем хранить dp в 0 и dp в 1. И здесь брать K%2 просто-напросто. Их пересчитывать так.
То есть мы можем хранить только два последних слоя. Это значит, что нам достаточно от V вообще памяти на самом деле.
Окей. Давайте последний алгоритм сегодня. Так, алгоритм.
Ой, да. Совсем плохо получилось. Уборшило. Нормально. Успеваем по времени. В чем суть алгоритма?
W также действует из EWR. Нет циклов отрицательного веса также.
Ну, вот так вот. Здесь будет проще жить, что их нет. И что еще? Хотим для любых VU-SV дист от V до U.
Хотим между всеми парами почти отключать расстояние. Так называемая задача APSP. All payers shortest paths.
Будем действовать динамикой снова. Такая динамика трехмерная будет. Dp от WK. Что это такое?
Это дист от U до V, если оставить в графе вершины U, V и с номерами меньше либо равными K.
У нас вершины как-то продумированы от 1 до V. Вот. То есть у нас номерация вершин.
Вот так вот. Надо написать код пересчет, наверное. Проще всего пересчитывать по K сначала.
А, база не обозначена. Ладно, сейчас я допишу эту строку. K меньше либо равно, чем модуль V.
Но здесь сказано, смотрите, для 1 индексации вершин. Значит там надо от 0 до меньше модуль V будет писать.
Это я так и напишу. Не, мне базу будет тогда неудобно задавать. Какая база у нас у динамики?
Ну да, если нет петель. Давайте считать, что нет петель. Если есть петли, то понятно, как считать ответ.
Ну да, да. Не, если это специальная петля, то понятно, как делать. У вас есть циклы от счетного веса, у вас таких нет.
Ну да. Поэтому мы считаем, что dp от u0 равна 0. Но это не вся база еще есть. Ну вообще подразумевается, что здесь вы можете считать простые пути.
То есть вы можете сохранять предка, откуда вы срелоксировали ответ. Вы типа не можете ходить обратно. Можно, например, такое ограничение сделать.
Нет, тогда у вас циклы от счетного веса получается. А мы такого не допускаем. У нас есть еще ребра в графе.
Видите, что мы здесь вершины u и v берем и ставим u и v равной k. Но у и v это всегда есть. Поэтому есть еще база такая вот.
Если угол из ребр бесконечности иначе. Ну или определить, что вес ребра бесконечности, если ребра нет и все. И победа.
Теперь к пересчету. Дальше for u, v. Такие три классных цикла.
Пересчитываем ответ. Что такое это будет? dp, u, v, k. Это будет min равно.
Давайте подумаем, чему это не равно. Какие у нас пути могут быть? У v. Вот был какой-то путь оттуда v.
Что мы сделали, когда мы здесь написали k? Мы себе открыли вершину k, просто на самом деле. Видите, у нас здесь были номера меньше и равные k, минус 1 на прошлой итерации.
Теперь номера меньше либо равные k. Поэтому мы себе открыли вершину k. Куда следующий у нас кратчайший путь может теперь быть вот таким вот.
Чему равен вес вот этого? Оптимально вот эта штука. 23 измерения в dp.
Это dp из вершины u до вершины с номером k. Здесь k, минус 1. Потому что у нас здесь все меньше чем k, минус 1 номера.
Ну и здесь будет то же самое. Из k до v с номерами, не превосходящими k, минус 1.
Ну и здесь мы говорим, естественно, что здесь еще можно с uv k-1 просто сравнить. Ну или сказать, что dp uv k изначально равно dp uv k-1, дальше форум перебирать.
Можно так? Нет. k это номера вершин. То есть мы выпускаем все вершины с номером не больше чем k.
Почему? Поч, посмотрели. Вот здесь вот мы посмотрели все вершины. Мы смотрели здесь все пары вершин вообще.
Вершины uv содержатся в пути вне зависимости от номера.
А так мы смотрели и k оставляли? Да. А что же вы говорите со мной? Ув с номерами меньше либо равно k.
И с номерами меньше либо равно k. Все? Ну это надо осознать. С этим надо прожить. Ну экзамен будет, там осознай.
Все. Ну ответ, я думаю, понятно где лежит. Это просто выставлять k равное модулю v.
Кто не верит, может закодить и загнать в контест. Оно сработает. Что?
Время.
Причем здесь очень маленькая константа на самом деле будет. Потому что у вас здесь нет нетривиальных операций.
Более того, для эффективности можно попробовать как-то переставлять индексы. То есть тут не uvk, а какой-нибудь kuv или что-нибудь еще.
Может это вам даст больше эффективность за счет всяких физических особенностей.
Окей, поуду памяти. Идея абсолютно та же. Для пересчета катовых слов мы используем только минус первый.
Поэтому можно от v квадрата ложиться.
Да, наверное лучше было k в первое измерение поставить, чтобы это было нагляднее.
Не срослось. Напишите с k в первом измерении сами. Упражнение.
Так, нам остается 5 минут.
Давайте, наверное, быстренько скажу, что с социальным циклами делать. Без доказательств.
Как вы его нашли? Нюанс в этом. Вы их не умеете искать пока что.
Ну короче говоря, почему... Нет.
Там могут быть положительные, но минус два, три, минус два цикл.
Утверждается, смотрите. Утверждается. Оказывается, сейчас это не буду уже.
Видимо на следующую лекцию оставлю. Ну или на семинары.
Посмотрим. Утверждается следующее, что если мы сделаем еще один блок внутренней форда Белмана,
и если от какой-то вершины расстояние уменьшилось, то утверждается, что из нее достижем отрицательный цикл.
Нет, наоборот. Вы будете идти по предкам потом. Искать цикл.
Потому что вы из цикла смогли срелоксировать ответ до нее.
Ну да, я так и сказал.
Что? Нет. Ладно, не суть.
Ну короче, если вы сделаете еще одну итерацию, и найдется такая вершина В,
что dp от V модуль V минус один строго больше, чем dp от V модуль V,
из этого следует, что V достижима из отрицательного цикла.
Ну более того, это на самом деле равносильность критерий.
То есть вы находите себе вершину, которая уменьшилась, и при этом вы должны запоминать предков,
откуда был достигнут минимальный ответ.
Тогда утверждается, что прыгая по предкам и получив цикл, вы получите цикл отрицательного верса.
