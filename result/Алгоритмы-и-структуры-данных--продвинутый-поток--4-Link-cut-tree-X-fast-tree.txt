и так краткое содержание того что было вот и так как вы помните значит мы писали лент-кат
мы хотели действительно чтобы у нас были подвешенные деревья которые мы хотели мало
того что там допиливать ребра или отпиливать ребра так еще и брать дерево и переподвешивать
его за другую вершину вот а помимо этого мы еще хотели на всяких путях там делать какие-нибудь
прибавления на прибавления на них или присваивание или нахождение суммы и так далее вот но чуть-чуть
позже мы с вами может вернемся к перечислению операции это будет для нас важно но пока для
нас важно следующее что мы хранят как мы храним собственно нашу структуру храним мы ее следующим
образом напоминаю то есть у нас есть ребра сплошные вот значит мы их будем взять так
сплошные и пунктирные не а че с ними разбираться нет а сам ли разобраться там не сложно потому
что ну давайте так еще свое сформулирую значит как у нас устроено и тогда уже там про пролинка
как будет уметь мне сказать значит мы храним так что из каждой вершины в ребенка ведет не
более одного сплошного пути эти то есть тем самым сплошные ребра индуцирует декомпозицию дерева
а точнее или даже леса на пути пути там от какой-то вершины до какого-то предка вот то есть это
вот примерно вот таким вот образом выглядит чего ноль сплошных да может быть но сплошных
ребер да это нормально но например ну как минимум в листах но и не в листах тоже то есть нам это
сейчас не будет теоретически да но нет все будет зависеть от реализации потому что ну конечно же
нам желательно может иметь точную реализацию для того чтобы иметь точные доказательства но на самом
деле как это всегда часто бывает мы просто поймем технологию доказательства и там как устроить
потенциал исходя из него поймем собственно что мы можем сделать а что не можем да он будет
работать за у от единицы но это да да да да да да да действительно действительно да не но это другое но
это с этим никто не спорит вот так вот как же мы вот то есть у нас вот разбиение на пути но
при по какому принципу у нас тут сплошные пунктирные ребра ответ ни по какому формально
говоря внутри дерева сплошные пункти рёбра могут быть сплошные пунктирные как угодно но с единственным
ограничением что из вершины в детей идет не более чем одного сплошного все других ограничений нет ну
по аналогии с тем самым с плей деревом то есть помните да там тоже на самом деле двоичное дерево
поиска может быть абсолютно там любой из там из там этих чисел каталана там из числа каталана их
так упражнения доказать что на n вершинах двоичных деревьев поиска равно числу каталана н м числу каталана
ну в общем еще одна ссылка к вашему экзамену на первом в первом семе нет не обязательно
нет смысла почему вот это правильно вот это правильное скопченное последовательно
будет символизировать вот такое вот дерево все нормально да нет аж ну ну не знаю ну не знаю
значит там числа каталана как-то по-другому возникают ну ладно потому что как бы если вот
такие деревья однозначно считать то там как бы ровно число каталана потому что есть
однозначные соответствия с правильными скопченными вот на их смотреть вот я тут
подлиннее нарисовал и мы обнаружили что все у нас делает мистическая функция expose которая
значит еще раз напомним делает следующее она берет вершину какой-нибудь в и добивается того
что все ребра от вершины в до корня становятся сплошными но соответственно от более того
вы должны быть началом пути поэтому если там вот ниже вы было то есть поэтому если там из
в какого-то ребенка шло сплошное ребро то значит оно становится бунктир также еще тут по пути
некоторые ребра тоже становятся сплошными твого пунктирными но не совсем вот вот то есть мы
сказали что если мы по но что на самом деле мы все операции можем выполнять за асимптотику
expose вот но например если вот говорить о линках и катах но то линк например будет сделать очень
просто вот вы хотите подвесить там допустим корень в к вершине у ну что вы делаете вы делаете
эксползату пригодится да когда конкретно сейчас там действительно нет ну ну в принципе да то есть
на самом деле в текущем варианте может быть даже и незачем просто хотя посмотреть хотя
посмотрим да вот когда будем анализировать может пригодится потому что рекомендуется на самом
деле все-таки откуда тут эксполсты таки забабах вот впрочем посаду от чем не просто забабахать а
потом этот путь в котором заканчивается вершина в с этим путем проконкатинировать
вот это это мы это мы это как как как делать линк с помощью эксполза вот может быть пока
можно и без него но сейчас будем анализировать поймем вот ну как ну вот ну как соответственно
очень просто вот как то есть если мы хотим вот взять ребро вот это в у его отпилить то
ну делается очень просто вызываем эксполз от у превращаем это ребро в пунктирные все что
нам остается это его ликвидировать нет ну корею но вот ну эксполда и ну эксползы делаем ну
ради того чтобы во первых как бы так чтобы это ребро стало пунктирным потому что пунктирное
ребро ликвидировать гораздо проще чем ликвидировать сплошь но про линк ну про линк да там линк
действительно можно там действительно может быть там в некоторых вариантах у нас выяснится что
можно не заморачиваться на самом деле ну пока я имею пока вы живете на лог квадрат а вот когда
будет сплей но по моему заморочиться надо вот дело в том что у нас смотрите реальность но дело в
том что у нас тут эксползы будут работать естественно как-то амортизировано значит у нас
будет какой-то потенциал может так случиться что это ваше подвешивание за у от единицы и
очень сильно увеличит потенциал и как следствие его учетная стоимость будет плохой вот в чем
проблема ну типа того ну хотя как повезет всякое бывает так что вот такая ставка то есть нам
нужны потенциалы но вот но пока как бы мы сами пути не влезаем просто верим что у нас есть
овл который умеет делать там сплит мерш реверс блаблабла все это делает запредельно к честным
логарифом в него мы не лезем поэтому нас интересует сплайсы что такое сплайс вот
сплайсом мы будем называть вот так вот эту вот операцию которая заменю которая берет
вершины и объявил и заменяет ее сплошного ребенка на другого вот это будет называться сплайс
вот соответственно наша цель будет попало то есть наша то есть наша сейчас цель будет
проанализировать количество сплайсов которые возникнут если у нас есть n вершин в внимание
лисе да у нас желез но так как линк ну чтоб в кате было легче отпиливать но в данном случае
но да или реверс вот это да спокойно не надо это понять и тут еще проблема такая если повторяю
если повторять какое-то событие называется то оно может и случиться поэтому поэтому это пробеда
с башкой в отличный раз лучше не поменять вот значит смотрите итак давайте смотреть но мы можем
заметить что как бы то есть нам нужно проанализировать сколько вот на этом линкатия
будут выполняться будет выполняться к запросу суммарно правда вот то есть ну желательно
доказать что в среднем все будет выполняться залога но пока же мы можем сказать что но пока
мы можем что честная симпатика каждого запроса будет количество сплайсов умножить на логарифом
правда но так можно оценить это конечно не лучший вариант но вот можно так и ценить поэтому наша
цель оценить количество сплайсов вот именно количество сплайсов но вот значится давайте
смотреть но действительно заметьте в сплайсов теоретически каждый конкретно на каждом конкретном
ходу сплайсов может быть действительно очень много вплоть до от особенно если вы там выбрали
не самый удачный метод подвешивания то есть теоретически вообще у вас может быть
теоретически может быть целое дерево из состоящей исключительно из монтированных
да да с другой стороны да то есть как бы за один сплайс то есть за один по камере
эксполсу вы имеете шанс тут конечно прям целый путь действительно сделать сплошным
но значит давайте смотреть но значит теперь вспомним что у нас есть еще на самом деле такая
красота как но что ребра у нас бывают я вот не случайно видите одноцветный предыдущего они
бывают сплошные и они бывают пунктируем а еще в дереве вот именно в дереве они во всяких этих
ребра бывают тяжелые и легкие да спасибо важное уточнение да именно именно то есть то есть в
данном случае мы не будем поддерживать кто там тяжелый кто там легкий потому что мы размера
по дерево даже не поддерживаем потому что да да ну да в косом дереве да у нас была цель чтобы
как раз этого не хранить да вот но вот так вот значит теперь значит смотрите следующее значит
что у нас происходит значит на самом деле какие сплайсы у нас бывают вот сейчас мы
просто рассмотрим все типы сплайсов и значит посмотрим сколько раз за к у запросов они
да можем для простоты считать что изначально у нас лес представляет собой n изолированных
корней вот ну на самом деле нет потому что вы вы можете в это кукар бы если вам надо
реальное дерево строить деревья строить то просто вы там за n минус один операции линк и собственно
создаете то что вам надо ну или сколько вам там надо поэтому на самом деле не
шибко сильно учтей так но вот так вот давайте представить значит какие вообще типа бывают
но вот нет а сам нет на самом деле есть еще один один маленький нулевой вариант изображенный
вот здесь когда мы когда мы просто когда тут из вершины там не было не было вообще сплошного
ребра и мы его только что создали но да то есть когда вот то есть когда у нас вот есть действительно
просто перевод одного тяжелого то есть одного пунктирного вот тоже самое сплошное там называется
без без вот этого вот так сказать но теперь давайте думать сколько таких операций могло
произойти нет это даже не важно потому что тут все гораздо проще дело в том
что каждая такое такая операция уменьшает количество сплошных путей и на сплошных путей
во всех деревьях на 1 вот ну вот ну сейчас давай но но нет но тут даже потенциал нет ну смысле
смотрите как ну было то есть фактически как бы если у вас тут только одно сплошное пунктирное
ребро и сплошного тут не было то сплита не происходит правда но да ну сплита чтобы отсплитить
вот то что было ниже не происходит происходит фактически просто жили были два пути и бы их
сконкатинировали да то есть количество то есть то есть получается да количество но количество
вот таких вот путей сплошных минут он вот фактически минус равно 1 теперь важное замечание что в
остальных случаях то есть в остальных случаях при в остальных сплайсах мы заметим что количество
путей не меняется не меняется но правда это не все ситуации но но правда но вот тут мы заметим
что это еще не все ситуации когда медь потому что может ли количество путей увеличиваться
конечно может потому что у нас есть операция кат может увеличить на один ну то есть может
увеличить на один да и вообще любой эксполз на самом деле может увеличить количество путей
на один потому что вот мы тут вот то что снизу отпиливаем да в остальных случаях не меняется
но вот но также бывает также каждый эксполз вот я так но вот каждый эксполз может
дать плюс один снизу да но это не совсем splice нет нет мы оцениваем splice да то есть
такое может быть до пути может быть ну поддерживаем да такие как оно меняется
правильно да да да да нет минус один это когда мы конкретно идем снизу вверх и
конкатине но как и и у вас тут происходит конкатинация путей без там ликвидации чего-то
вот то есть мы пытаемся оценить количество таких splice и оцениваем их так что количество
путей когда меняется ну практически увеличивается на один оно вот при ну каждый эксполз может дать
такое плюс один у максимум плюс один это вот единственный случай вот то есть может быть там
вот если так перебрать там линкат и вверх при некоторых реализациях может там еще что-нибудь
вам дадут хотя сомнительно ну кат да кат вам ничего не даст потому что кат просто будет
вызван эксполз который вам соответственно этот путь отбилет поэтому сам по себе кат то есть как
бы линк и канут то есть как обычные линк и кат они создают только пунктирное ребро поэтому пока
ничего нового но когда вы вызываете эксполз от вершины в вершина в не самое нижнее в своем пути
а должна и стать поэтому вот там вот поэтому может стать плюс один ну эксползов мы не будем
утвердить очень хочется сказать что изначально путей n минус 1 но тогда тогда хочется сказать так
путей изначально их n на каждом шаге увеличивается не более чем на 1 на каждом запросе и а меньше
единицы становиться не количество таких путей не может правда так что отсюда следует что минус
1 будет не более чем н плюску что там еще другие сплесы есть спокойно это еще не все но то есть
тут тоже надо заметить есть маленькая неточность потому что она предполагала что каждое каждую из
куза просов дает ровно один эксполз а это неправда ну помните там потому что мы все решали за там
могли там бывало два эксполза поэтому но нам достаточно сказать что как бы отн плюску да то
есть вот таких штук и того всего значит отн плюску да это был простой случай да мы собственно тут
все просто вот далее начинается действительно более продвинутая шоу вот те самые остальные
случаи потому что остальные случаи тоже хотелось бы так проанализировать то к сожалению там это
потенциал не меняется поэтому это нам никакой информации не даст но давайте смотреть
чего а может а может нам даже не потребствую прямо вводить ну то есть для вот этих вот штук
мы можем сказать что у нас есть потенциал как количество путей то есть у нас и меняется он
может у нас будет такое что-то типа потенциал равен количеству путей плюс нечто что нужно
чтобы обрубать обрубать соседей вот значит поехали пошли обрубали значит пошли смотреть что там
у соседей и так значит у соседей значит бывает следующая ситуация то есть пунктирная
превращается в тяжелая и тяжелая превращается то сплошное превращается в пунктирные даты
нельзя путаться потому что сплошное пунктирная и тяжелая легкая это не совсем коррелирующие
вещи да но да то есть когда да то есть когда вот то есть во всех данных случая когда вы
пунктирное делаете сплошным какое-то сплошную ребро из этой вершины перестало быть стало на
оборот пунктир к чему это нас приводит значит какие случаи вообще есть но тут нам потребуется
анализ действительно легкие и тяжелые вот значит и в данном случае потенциал так давайте
даже подгляну чтобы не путаться вот там простой потенциал опа да нет количество нет как это
утверждается что нас интересует количество сплошных легких сплошных так splice это да да то есть
в которых одно тяжелое одно сплошное изменяется на тежу значит рассматриваем то есть тут был
потенциал можно было сказать что вот здесь так сказать фея 1 количество путей количество путей
в системе здесь мы введем такой такой фи два подчеркнутый и голубой почему голубой потому
что сплошные почему подчеркнутый голубой потому что сплошные легкие рёбра вот
ну да а можно было просто написать диез рёбра и подчеркнутый голубым максимально понятно да
да да да пишите в таком стиле статью посылайте вам говорят ой ой ой а мы можем только в черно-белом
виде посылать вот так вот да перечал ты жил был значит как меняется этот потенциал при вот
таких splice вот значит да нас интересует действительно количество сплошных легких
рёбер но значит значит какие замены тут мы заменили тяжелое ребро на тяжелое ребро правда
но вот сплошное на сплошное до важное замечание да потому что мы заменили сплошное на сплошной
у нас есть четыре случая первое может быть тяжелое легкое второе может быть тяжелое легкое да
случай когда мы заменили тяжелое ребро на тяжелое ребро такого не бывает ну
Но это значит, что мы заменили вот это тяжелое ребро, а вот это тяжелое ребро.
Первое, которое заменили, второе на кого заменили.
То, которое мы сделали сплошным, оно было тяжелым, оказалось, и то, которое мы убрали, оно тоже тяжелым.
Да.
Да, так вот быть не может.
Да.
У нас множество чего-то конечного.
А как мы сейчас определили тяжелые ребрики?
А также, то есть ребро в ребенка называется тяжелым, если в его под деревья...
Через сайзы?
Да, через те самые сайзы, да.
В общем, сайзы меряются по вот этим вот деревьям, а не по АВЛ-кам, если что, это важно.
В первом случае, у нас мы были единственными ребятами, правильно?
В каком первом?
А, да.
Не обязательно.
А нет, даже не обязательно, да, согласен.
Тут, в принципе, тут могли висеть еще.
Ассет был концом.
То есть самое главное, что просто у этой вершины не было тяжелых детей, сплошных детей.
А как мы можем это проверить?
А мы не должны проверять.
А зачем нам это?
Ну, я про то, что...
А элементарно, потому что у тебя есть опция, когда тебе надо проверить, это вершина первая в своем дереве или нет.
Ну, в своем пути все.
Да.
Например, это делается за алгорифом, да.
Ну, то есть так, если в тупую АВЛ.
Фактически это можно не проверять, потому что когда ты будешь делать сплайк, он сам отделит пустое дерево.
На хит, хорошо.
Поехали дальше.
Теперь давайте анализировать дальше.
Итак, теперь было у нас тяжелое сплошное ребро.
Вот.
И превратилось оно...
Это же...
Нет, не так.
Превратилось оно в легкое сплошное ребро.
Вот.
Сколько раз?
Ну, понятно.
За конкретный сплайс понятно, что это с одной стороны было плюс один.
Вот у нас стало плюс одно тяжелое.
Это сплошное легкое ребро.
Но самое важное, что заметим, что это все...
То есть заметим, что на вот этом вот пути у нас легких ребер, которые стали сплошными.
То есть у нас есть несколько ребер на этом пути, которые стали сплошными,
но среди них легких не более чем логорифм.
Поэтому я вот пишу так.
Не более чем логорифм на эксполс.
Еще раз.
Не больше, чем логорифм.
Не больше, чем логорифм.
У нас тяжелое ребро стало сплошным, а легкое перестало быть сплошным.
Чтобы там тяжелое перестало быть сплошным, а легкое стало сплошным.
Легкое стало пунктированным.
Легкое стало сплошным именно.
Сейчас.
Мы не можем более чем...
Т это...
Тяжело.
Сейчас.
Т это какое ребро?
Которое стало...
Которое перестало.
То есть в обратном порядке.
Ну почему?
Слева записывают то, что мы убираем, справа записывают то, что мы ставим.
Ну как бы было так, стало так.
Ну я не знаю.
Всё хорошо, всё хорошо.
Не знаю.
Удивляюсь, что это не интуитивно, но...
Да.
Это просто обозначение.
Смотрите, для меня интуитивно, чтобы мы слева писали ребро, которое сделало
то, что написано над ним.
Справа писали ребро, которое сделало то, что написано над ним.
Там мы ещё видели, напишено пунктирчик «стрелочка тяжелая».
Пунктирчик «стрелочка сплошная».
Стрелочка «легкая» написано,laubноOld.
Нет.
Сверху, видишь, пунктирчик «стрелочка сплошная».
Это событие, которое произошло.
Ну окей, ладно-ладно. Ну окей. Ладно, значит, тут просто, да. Хорошо. Значит, далее.
Заметим, что аналогичная ситуация. Бывает еще, что было сплошным легкое
ребро, а стало все еще легкое ребро. Это, смотрите тут, что важно. Это к потенциалу
тоже дает плюс ноль. Ну ладно, тоже дает, согласен, тоже лишнее было. Но тоже я имел
в виду, что тоже таких ситуаций не более, чем лог-2н. Я бы сказал, даже суммарно этих
ситуаций не более, чем лог-2н, правда? А по той же причине, потому что все ребра,
все ребра, которые стали сплошными, они лежат на одном пути. А если вы прогуливаетесь от
вершины до корня, то на этом пути легких ребер вы встретите не более, чем логарифом.
Почему? Потому что, когда вы идете, при проходе по легкому ребру, количество размера под дерево
увеличивается хотя бы в два раза. А при прогулке по тяжелым увеличивается просто. Вот.
А вот еще вопрос по реализации. Как мы будем смотреть, какие ребра нам стоит перекрасить?
Ну, пунктивные. То есть мы делаем... То, которое было сплошным, перекрашивается в пунктивные.
Так вот. И теперь самое интересное, что вот так вот на логарифом не оценишь. Это когда,
наоборот, было у нас тяжелым легкое ребро, было сплошным легкое ребро, а стало сплошным тяжелое
ребро. Вот этого добра на один экспоус может произойти сколько угодно. Но! Так, потенциал у нас
минус... Так, давайте я уберу эти сплайсы. Но к потенциалу это минус один. Ну, что это означает?
Значит, теперь давайте оценим просто... Ну, теперь давайте... То есть можно попробовать оценить,
а сколько тогда сплайсов вообще могло быть. Мы же оцениваем именно сплайсы, помните? И
мы обнаруживаем следующее. Что... То есть, ну, мы помним, таких сплайсов у нас вообще линейное
количество. Таких сплайсов у нас получается от количества экспоузов умножить на логарифа. Ну,
то есть от кулоген получается. Таких сплайсов тоже от кулоген. А этих... А вот с этими интереснее,
потому что замечаем, что потенциал у нас никогда не становится меньше нуля, но увеличивается он при
этом не более чем, как мы уже выяснили, от кулоген раз, правда? Ну да. Значит, получается,
что таких суммарно получается от кулоген. Значит, еще раз. Ну, потому что, смотрите, утверждение,
вот этих сплайсов будет не более чем всех остальных сплайсов. Не понял, что... Мы считаем
количество сплайсов. Мы доказали, что вот сплайсов вот без лишения какого-то сплошного
ребра статуса сплошности. Собственно, их линейное количество. Вот. Это было в самом начале. Все остальные
сплайсы, значит, они имеют четыре типа, а на самом деле три, потому что как бы не бывает,
что было тяжелое ребро, было сплошным тяжелое ребро и стало сплошным снова тяжелое ребро.
Такого не бывает. Потому что у вершины не бывает двух тяжелых детей. Теперь мы замечаем следующее.
Есть рассматривать сплайсы, которые вместо тяжелого сплошного ребра подставляют легкое
сплошное ребро. Таких у нас не более чем логарифом на эксполс. То есть, следовать на таких... Да,
и они дают плюс один. То есть, потенциал тогда получается вот в этом месте суммарно увеличивается
на о от кулоген. Ну, от количества эксполсов на логен, если быть точнее. Вот. Здесь еще,
который превращает легкое в легкое. Ну, такая же ситуация, но здесь это важно для просто времени
работы, но потенциал на потенциал оно не влияет. Но их тоже кулоген. Теперь. И наконец, третий тип.
Когда было сплошным легкое ребро, стало сплошным тяжелое ребро. Да, больше либо равно нуля. То есть,
как всегда воспользовались этим и воспользовались тем, что в этом месте потенциал уменьшается на
единицу. Тогда это означает, что, то есть, он уменьшится не более чем раз, когда оно увеличится. И тогда,
но так как оно у нас увеличивается не более чем кулоген раз, потому что мы предполагаем,
что в других местах у нас сплошных легких ребер не появляется. Вот, кстати, для этого очень
удобно считать, что когда мы делаем линк, мы подвешиваем все-таки запунктирное ребро и никого
не конкретно. Ну, или сказать плюс один, но это просто чуть усложнит анализ. Да, вот хороший вопрос.
Да, на самом деле, если внимательно смотреть, то потенциал, конечно, еще где-то меняется. Это
важно. Не важно проанализировать как. Но конкретно в Эверте происходит следующее. То есть, заметим,
что, на самом деле, вот что происходит в Эверте. У нас есть вот этот вот корневой путь. И, нет,
смотрите, и на нем что-то висит. Я даже напишу, что висят просто какие-то под деревья, потому что
заметим, что от того, что вы этот путь реверсите... Что? А, я случайно. Так, да-да, не бывает,
не бывает, безусловно. Вот, но я тут пишу. То есть, заметим, что самих, сами вклад этих под деревья
в потенциал не поменяется от слова никак. Эти ребра так пунктирными от самого реверса останутся.
А сам Эверт, что он сделает? Он, конечно, перевернет этот путь, и эти все, там, и эти все ребра будут
смотреть в другую сторону. Их тяжесть и легкость может там перемешаться как-то совсем рандомно. Но,
но теперь заметим, что на одном пути количество сплошных, вот на этом пути, количество легких
ребер не более чем логарифм. Правда? То есть, получается, было оно от нуля до логарифма,
а после реверса стало тоже от нуля до логарифма. То есть, это может быть принципиально другие
логарифм ребер, но их все равно не больше. То есть, следовательно, от самого по себе Эверта,
значит, увеличение потенциала произошло не более чем на логарифм. Да, но спасибо огромное
замечание. Действительно очень важно. Вот. Но в асимптотику Q log N мы продолжаем вписываться.
Значит, Q log N splice. Q log N splice совершенно верно. За Q log N общей асимптотики я, конечно,
пока не претендую. Вот. Но нет, это уже тоже, на самом деле, важная для нас веха. То есть,
я утверждаю, что в итоге мы прямо сейчас доказали, что действительно, что мы научились делать,
значит, Q запросов, выполняя внутри них Q от Q log N splice. Ну, то есть, мы выполняем какие-то
от… В каждом запросе мы выполняем, по сути, от единицы действий плюс какое-то количество
splice'ов. Эти splice'ов от Q log N. Другой вопрос, что каждый splice работает тоже за log N,
потому что мы пока пользуемся обычными AVL деревьями и ни на что больше не претендуем.
Ну, можете поставить там, пожалуйста, красночерный, дикотячку, B дерево, кстати,
нам вскоре пригодится. Не в этом месте, но вообще. Вот. И так далее. Вот. То есть,
тогда отсюда следует, что если вы напишите такой линкат с абсолютно произвольной дикотячкой,
вашей любимой. Вот. Ну, знаете, это дикотячка с маленькой буквы. То есть, имеется в виду,
что, как бы, ваша любимая двоечная дерева. Вот. То тогда получается, что на все запросы вы
научились отвечать за учетное время O от log квадрат. Вот. Да, в принципе, уже неплохо. Нет,
ну как сказать, нет, log квадрат в принципе тоже не самая плохая асимптатика, как бы лучше,
она лучше, чем корень. А log квадрат берется из-за того, что каждый splice вы по факту делаете
за логорифом. Вот. Пока. Да, это только splice. Ну-ка. Ну-ка. Ну да.
Но их тоже было, да. Но стало их только меньше. Да, ну. Ну, как сказать, было логорифом и осталось
логорифом. Могло, но суть та же. Да, ну, спасибо. Да, то есть, вот если совсем формально копать,
то да. Там, да, может быть, жалко, что у нас не осталась списка, потому что надо прям по всем
переменным прибегаться. Хотя там, да, больше ничего там серьезного-то не осталось, потому что все
операции, по-моему, сводятся в основном к expose и какой-то там отложенной операции на этом
дереве. Вот. Которая сама по себе главная отложенная операция на дереве, там без эксползу вообще
за от единицы работает. Вот. Ну, потому что, ну, мы анализировали, как во время splice изменяется
fed2. Вот. Вот мы проанализировали, что splice бывают вот таких типов и вот изменяется потом,
изменяется не fed2, вот так, вот так и вот так. Это, но это уже следующий шаг. Так что вот такая
технология, вот такой вот log2, вот такой вот интерес. Ура. Вот такое локальное, ну, локальное,
конечно, такое ура. Безусловно. Ну, хорошо, n plus q log n, хорошо. Особенно, если учесть, что
запросов скорее всего у вас будут, их будет n, вот эта вот связь, то, ну да, формально, конечно,
да, надо писать, что там n plus q. Ну, что там? Ну, да. Ну, хорошо, хорошо. Ну, да. Ну, да. Ну, да.
Ну, это все такая локальность, да. Вот. А вот дальше, ну, вот. Так, ну, еще вопросы по log2 есть?
Возможно. Значит, смотрите. А вот дальше начинается самое интересное. Самое, ну, вот выражается это
самое, самое интересное в том, что утверждается, что это можно неожиданно оптимизировать. Оптимизация
теперь будет заключаться в том, что теперь, если вместо брать непроизвольное двоичное дерево
поиска, а конкретное, а конкретно сплей дерева и не просто конкретно сплей дерева, но с этим,
с этим сплей деревом еще и так очень-очень аккуратно работать, то на самом деле log2 можно убить до лога.
Вот такая вот ставка. Нет, мы еще только собираемся, мы еще собираемся только приступить
к этому увлекательному занятию. Вот. Как-то мы еще только это разбег берем. Вот. Значит, смотрите.
Так что мы запомнили, вот сейчас нам нужен важно, значит, важный для нас момент. Смотрите,
что мы знаем, что сплайсов самих по себе, их от вот n plus q на log n. Это мы уже выяснили. Вот
запомнили. То есть конкретно этот анализ нам больше не понадобится. Нам нужно будет только помнить,
что самих сплайсов, то есть самих по сути сплитов мержей будет n plus q на log n. Теперь надо
просто грамотно убедиться в том, что эти сами по себе сплитые мержи будут адекватно работать.
Для этого мы немножко отвлечемся от линката и воспомним, собственно, сплей дерева и чуть-чуть
его анализа. Давайте это я уберу. Значит, это я уберу. Это я вот убрал.
И теперь давайте вспоминать, что у нас вообще такое сплей дерево, чем оно отличается от других
двоичных деревьев поиска. Оно отличается у нас тем, напоминаю, что у нас теперь двоичное дерево
поиска в каждый момент времени мог быть абсолютно любым, причем буквально. То есть в каждом моменте
времени оно там случайно может оказаться практически кем угодно, но важно для нас следующее.
Вот, то есть важно теперь следующее, что если мы, давайте так, что если мы захотим пойти в какую-то
вершину, что-то с ней сделать, захотим найти, скажем, вот эту вершину, чтобы там посмотреть ей в глаза, например,
то значит мы это сделаем честно за вот от длины пути от корня до нее. Да, может быть, но мы это оплатим.
Мы это оплатим тем, что вызовем от нее функцию сплей, то есть такой аналог expose, который с помощью
хитроумных операций, значит, там операции zig, zig-zig и zigzag отправит, то есть доведет ее до коркин.
То есть она вот там, она станет коркин. В чем там, напомним, помните, там важно, собственно, именно
какие операции мы делали. То есть именно важно следующее, что, то есть важно, то есть важно,
что это не просто малые повороты вот прям по одному на каждом ребре, а тут вот именно важно следующее,
то есть там вот для анализа оказывается важно, что, ну конечно, значит, есть zig шаг в самом конце,
если ваша вершина оказалась просто сыном корня, да, но там тут все просто, тут ее подвесили, это шаг zig.
А дальше, если она оказалась внуком или правнуком, то есть соответственно zig-zig и zig-zag.
Вот, значит, тогда оказывается, что если у нас тут есть вершина, значит, zig-zig у нас работает так,
что если у нас вот есть тут вот висит какая-то вершина z, и тут у нас висит от 4 под дерево, вот они,
то мы за там, так сказать, о от двух, если так можно выразиться, да, делаем вот, делаем вот такие операции.
То есть вот объявляем, что теперь у нас называется отец x становится его сыном,
вот там дедушка x становится его внуком, вот, то есть вот примерно вот так это происходит.
Вот, ну соответственно это был zig-zig, ну и соответственно еще легче проанализировать,
ну вот еще был zig-zag. Вот, значит, если, ну это как бы работает, если, как бы когда мы идем от
дедушки к внуку, от дедушки x к x, то мы два раза идем в одном направлении, два раза влево или там
соответственно два раза вправо, там симметрично. Но если оказалось, что у нас zig-zag, то есть что мы
идем в две разные стороны, вот, например, вот такая ситуация, и тут висят какие-то под деревья,
то получается гораздо более интерес. Ну вот, ну можно так, ну, я так скажу, здесь тоже на самом деле
два маленьких поворота, да, только сначала вот в этом ребро, потом по этому, да, но это уже детали,
сейчас для нас несущественное. Вот, значит, здесь мы тоже за о от двух делаем, то есть вот такую
мистическую комбинацию, то есть, то есть и гкз мы вешаем слева и справа от х, и там соответственно эти
вот альфа, бета, гамма, дельта у равно вот так вот, по крайней мере, равновесно в кавычках вешаем,
почему в кавычках, потому что реальные размеры альфа, бета, гамма, дельта мы не знаем. Вот, то есть вот так
было устроено сплей дерева, вот, и теперь оно вот, и у нас есть мистическая теорема, ну у нас была
мистическая теорема о том, что значит она, что это все работает за о от, что учетная стоимость каждого
сплея получается от луген, вот, если вот именно вот в таком виде реализовывать, там это было, но, значит,
мы попробуем, но нам потребуется более сильная теорема, вот, но мы ее воспомним, что делать, и теорема у нас
звучала так, значит, смотрите, ну вот, значит, как она, как она у нас звучала, звучала она соответственно так, что мы объявляли, что
что к каждой вершине v будет соответствовать некий вес w от v, который больше 0, вот, а также мы вводим еще такую замечательную вещь, как
s от v, которая равна сумма по всем u, значит, лежит в, значит, там, так сказать, под дереве v, значит, по всем им суммируем эти веса, да, только v от u, конечно, ну вот,
также теперь рангом вершины, ну тут разные варианты, но рангом вершины r мы назовем логарифом двоичной s от v, это s от v, и, наконец, потенциал, который нас интересует, значит, phi от t, это просто сумма всех рангов,
вот, t на этот раз, это дерево.
в с, в, это всех патереев у, или всех вершин в, все вершины патереев, да, а стандартный анализ будет w от v будет всегда единицей, да, ну, точнее, общая теорема звучит теперь так, что, действительно,
ну, то есть, общая теорема будет звучать так, давайте так вот напишем, такие же, значит, что, значит, учетная стоимость сплея от вершины v, учетная стоимость,
значит, учетная стоимость чего, учетная стоимость сплей от v есть, вот, но есть, на самом деле, o от, ну, можно сказать, единицы плюс r от, так сказать, root минус r от v,
ну, где можно сказать, что, где вот r берется перед сплеем, вот, или что то же самое, может быть, напишу в более похожем, известный, один плюс, значит, скажем, логарифом двоичный, значит, s от root,
поделить на s от v, хотя, конечно, вот именно в виде вот этой вычиталки это максимально хорошо, вот, то есть, видите, тут отношение говорит следующее, что, на самом деле, какие тут конкретно брать веса все равно,
потому что заметим, что асимптотика вот этой, в этой теории не поменяется, если вы все веса домножите на какую-нибудь константу, то есть, если все веса завтра там вы увеличите в пять раз, то, в общем-то, асимптотика от этого не меняется никак, потому что отношение одно и то же.
Вот, но обратите внимание, что для нас было важно, вот, вот эта единица была, то есть, по-моему, вот, то есть, вот она была, ну, потому что сирема доказывалась очень просто, значит, она доказывалась, что, значит, каждый из этих вот шагов делается за, то есть, вот, зиг-зиг и зиг-заг делаются не более, чем за o от,
собственно, три разности между, вот, там, рангом z минус рангом x, вот видите, да? Ну, так как заметим, что ранг z, он потом, как бы, после операции становится рангом x, поэтому в итоге эта сумма телескопируется, но в самом конце вот у этого зиг-шара там оказалось все-таки три утроенная разность вот этих вот рангов, но все-таки плюс один.
Да, поэтому это вот важно, потому что по каким-то странным причинам, по-моему, в некоторых статьях эту единицу почему-то опускают, вот, поэтому даже тарьяновское доказательство меня начинало смущать, вот, хотя в данном случае, конечно, эта единица нам, ну, вот, на самом деле, погоды будет особо не сделать, потому что придется эту единицу покрывать сплайсами, вот.
Но для этого, так, ну что, надо доказательство этой серии? Нет, ну, кажется, да, она была на экзамене, да, что еще надо?
Ни хуя было на экзамене, никого.
Че, никому не выпало сплайд-дерево? Ну, странно, потому что, нет, по идее, сплайд-дерево даже в основном потоке есть.
Да, но в итоге выпадали у Сабстринк и Кобяков.
О, господи. Тот, да тот АЛЦС это называется, господи.
Ой, да что ж такое?
Че там?
Ну, потому что, ну, в науке она так называется, шо я делаю.
Какая наука? Ну, какая наука? Ну, толкарь, вы знаете, там вообще даже едва, там иногда даже что-то, там будут просто спецжурналы, в которые подбубликуются, там, теоретик, компьютер, саенс, вот это вот.
Ой, господи. Хотя иногда ощущение, что да, да, как проводить, да, как проводить лекции.
Это очень просто. Берем, берем эти все журналы и вперед.
На самом деле.
Нет, ну, в какой-то момент, может, и да даже. Хотя, нет, это больше уже на спецкурс похоже, конечно.
Да, нормально.
Ну, в какой-то момент, может, да, че. Тем более, в конце концов уровень, да, уровень у нас растет все время, так шо.
Как бы, как бы, возможно, лет через пять придут все скажут, ну, шо это такое? Это все уже давно знают.
Из-за этого нафсерис нельзя выйти.
Знаете, да, нафсерис, да, как это потом, на регионе, да, на регионе не может быть там потоков, сказали, да, и потом в каком-то 18-м году бабах появились.
Там была какая-то история с линкадом нафсерис, что какой-то чувак был очень горд тем, что он писал, сдал задачу линкадам,
потом же сказали, что на самом деле там все гораздо проще.
Ну, да.
Ну, блин, никогда вообще учил, да.
Ну, ну, как сказать, тут че, ну, выучил, сдал.
Нет, возможно, это называется решение оказалось неожиданностью для жюри, мы не закрутовили против него тестов.
Нет.
Нет, ну, в смысле, ну, на трейль-то могли завалить.
Ну, вот.
Ну, не важно, впрочем.
Ну, нет, честно скажем, на самом деле, конечно, эти прогнозы не очень, потому что жюри будут очень стараться всегда делать задачи так,
чтобы там надо было много думать, но немного знать.
То есть поэтому вряд ли они там дадут, что надо там это апперсистентного Уконина на линкаде писать.
А персистентного от кого?
Уконина.
Уконин я знаком.
Вот, знакомая фамилия, да.
Уконина.
Уконин эско.
Такой финский ученый.
У него есть алгоритм, который строится в дерево за линию.
Причем...
Зачем такие сложные мемена?
Просто дерево за линию.
Все.
Резко стало понятно.
Ну, не знаю, по-моему, Уконенко.
Прикольная фамилия.
Ладно.
Значит, далее.
Хорошо.
Значит, мы воспомнили, что у нас вот есть такая штука.
То есть есть он вот так вот работает.
Теперь, значит, наша цель у всех этих сплей деревьев ввести правильные потенциалы.
Правильные в В.
Да, правильные.
Ну, правильные в первую очередь В, конечно.
Да.
Ну, вот.
Ну, да.
По сути, в первую очередь В.
Да.
Хотя тут надо будет обращать внимание.
Да.
Да.
Для обычного, чтобы доказать просто логарифм, достаточно
просто сказать, что W от В равно 1, и логарифм N становится автоматически.
Ну, вот.
Там еще были примеры, что...
Часто еще, если вы знаете, с какой частотой будут обращаться
в какие-то вершины, то вы там можете вместо W поставить просто
вероятность того, что в нее тыкнут.
И получить что-то типа энтропии.
Вот.
Спасибо.
Очень помогает задача.
Нет.
Ну, как?
Ну, это интересный факт.
Особенно когда вы пишете алгоритмы не для того, чтобы
запихать лапшу в тейстер, а для реалижения.
Вот.
Энтропия заходит.
Ну, вот.
Так что да.
Ну, вот.
Так вот.
Ну, более того, я вас сразу предупрежу, что вот это
вот W может меняться со временем.
Да.
И поэтому нам сейчас с вами придется внимательно думать.
Твой вопрос...
Значит, у тебя это звучит немножко так.
Когда...
Вот.
То есть это...
Кто нам мешает, когда мы будем переходить дорогу,
посмотреть сначала направо, потом налево?
Да.
Никто нам не мешает.
Но я это сказал не для того, что нам кто-то мешает,
а для того, чтобы мы это сделали.
А то как бы...
А то получится это так.
У меня пожар, так.
Выхожу в коридор, огнетушитель есть, решение существует,
пошел спать.
Ну, мы это уже обсуждали.
Вот.
Примерно та же ситуация будет.
А то тем более...
Жизнь в общаге такая.
Ну, че жить в общаге?
Тут он...
Недавно вот пока стираю...
Знаете, тут показали видео, как действительно в Харькове
там женщина переходила трамвайные пути, посмотрела
налево, ничего не нашла и пошла.
В результате избил трамвай, едущий с той стороны.
Ну, было бы смешно...
Ну, вроде без летального исхода и даже без там
супер мега травм, но...
Сам по себе факт неприятен.
Вот.
Ну да, да, да, да, да.
Ну да, да, да, да.
Да, да, да, да, да.
Ну да, да, да, да.
Да, да, да, да.
Да, да, да, да.
Конечно, причина была в том, что в Харькове сейчас живет
Алексей Данилюк, конечно, да.
Не, кстати, да, на полном сервизе.
Он там, собственно, женился и поехал в Аенод
и поехал в Харьков.
Я не знаю, кто это.
Умник.
Действующий чемпион мира
от Нижегородского юричитета.
Да, да, да.
Я тоже в курсе.
Вот.
Да, ну не важно.
Вот.
Так вот.
Значится, поехали.
Значит, вообразим себе следующее.
Значит, как выглядит тяжелый путь?
Значит, как мы с вами знаем,
тяжелый путь, как мы уже поняли,
это, вот, будем говорить, вот такое сплэй-дерево.
Да?
То есть, вот, на самом деле, вот такой вот путь.
От начала до корня.
Может быть, сплошной, а не тяжелый?
Ой.
Чего я бы тяжелый хотел?
Ну да, сплошной.
Значит, что такое?
Я понимаю, что мы забываем теперь про легкие и тяжелые.
Да, мы, да, все, да, мы, да, мы.
Ну да, про легкие и тяжелые, да.
Мы действительно забываем.
Да, совершенно верно.
То есть, все, что нам теперь из предыдущей жизни надо,
это только что сплэй-дерево.
Да, что сплайсов у нас, а не плюску налога.
Ну, для надежности давайте скажем,
что не плюску налога.
Там можно там, там, что-то из скобочек выносить,
но, как говорится, это нам не особо интересно.
Так вот, смотрите.
Как выглядит путь?
Ну, кроме того, что у него там, может быть,
ведет какое-нибудь сплошное ребро куда-нибудь.
Значит, на самом этом пути еще что-то висит.
Вот сейчас, на самом деле, картинка будет...
Вот, обратите внимание,
картинка будет очень сейчас похожа на то, что,
на анализ, который мы делали в Heavy Light.
Оранжевый – это путь от корбы.
Нет, ну, путь от чего-то.
Это сплошной путь.
Это сплошной путь.
Вот, а это пунктирные ребра.
Вот.
Вот.
Я тут рисую под деревья,
потому что мне сейчас не особо они будут принципиально,
что они там,
что они там, как они там, где они там.
Да, главное, чтоб тут они висели на пунктирных ребрах.
Вот так вот.
А впрочем...
Ну вот.
А впрочем, не особо.
Угу.
Ну вот.
QA?
Какой expose?
Где expose?
Вот.
Ну, на самом деле...
Ну, потому что мы не знали, как потенциал.
Скорее всего, да, сейчас выяснится,
что это выигрышная стратегия.
Вот.
Как вы знаете, как в анализе выясняется,
что...
Вот.
Так вот.
Что такое?
Значит, так вот, что я предлагаю?
Ну, то есть, на самом деле,
как это будет в реальной жизни храниться?
Сейчас я нарисую так называемое виртуальное дерево.
Ну, я просто немножко предупрежу,
потому что, как бы, какая тут основная...
Ну, как сказать?
Потому что, да, если говорить о литературе, да,
то, как бы, вообще говоря, конечно, там...
До лог квадрата, конечно, там, по идее,
там литература, там любые вики конспекты.
А вот дальше за логарифом, вот я говорю,
как я уже...
Вот я говорю, у меня вот там много лет была проблема,
я нормального догадательства не видел.
Видел только какой-то кукарек.
Вот.
В чем?
От MIT-шных конспектов и от Станкевича.
Поэтому я говорю, что есть...
Ну, просто, который скорее всего в своей,
там, видимо, короткой лекции на полтора часа
просто действительно опирался именно на MIT-шный конспект.
Ну, мне так кажется, я не обсуждал.
Вот.
То есть более подробно, откуда там берется логарифом,
собственно, как-то никто не обсуждал.
Просто там же потенциалы схлопываются.
Ну, как бы, вот понятно.
Но более подробно вот никто не давал.
Вот я тоже не знал, откуда братьюр.
И потом выяснилось, что надо было просто
открыть статью по сплей-дереву.
Ну, потому что, нет, просто я говорю,
что на поверхку просто...
Изначально...
Да.
Потому что в статье по линкату было там ссылка
просто на другое дерево с какими-то
подробительными свойствами.
А потом они избрали сплей-дереву,
который тоже это кушает.
И поэтому основная статья,
кстати, которая, как ни странно,
даже без скай-хабов на самом деле скачивается,
просто открывайте Википедию по...
По какой-нибудь линкату и так далее.
И просто смотрите ссылки, ну, английскую, конечно.
Открывайте ссылку, и там просто PDF-ка открывается.
Вот.
Очень удобно.
Сам удивился, потому что куча статей
приходится так открывать.
Вот. Так вот, смотрите.
Значит, так вот, что я...
Ну, то есть, так вот, там вы встретите
вот такую забребительную картинку.
То есть, в реальной жизни,
то есть, вы вот это вот рыжее безобразие...
Реально.
На самом деле будет выглядеть...
Ну, сплей-дерево...
Я вот нарисую условно вот так.
Так, вот сейчас...
Это я сплей-дерево нарисовал.
Ну, потому что в реальности вы вместо вот этого пути
ухранить не будете в таком виде.
Вы будете ухранить в виде сплей-дерево.
И на каждом...
И на каждой из этих вершин...
На каждую из этих вершин
ссылаются вот эти вот там поддеревья
в лице каких-то там своих путей, правда?
И сама нас куда-то там ссылается.
Вот.
Вот.
То есть, вот так вот, как-то вот так вот.
То есть, я тут даже вот могу нарисовать
вот еще что тут.
Альфа-1, альфа-2, там какой-нибудь вот это вот.
Ну, в общем, ясно.
Ну, принцип, да, принцип вы поняли, да.
Кислор называешь и город.
Так.
Что там прям?
Заказать там залог?
Да.
Ага.
Ну, если они адекватно ссылаются, то окей.
Значит, у меня устаревшие сведения.
Коротко написано.
У всех-всех-всех подробностей.
Нет, ну я...
У всех-всех-всех подробностей.
Ну, как сказать, да.
Никому кроме экзенатора.
Ну, да.
Ну, как это.
Ну, да.
Ну, да.
Ну, да.
Ну, да.
Ну, да.
Ну, слава богу, да, у нас тут
теорема есть, так что
можем пользоваться.
Но главное, как всегда, тут главное
грамотно определить потенциал. Вот мы сейчас
определили потенциал, там количество сплошных
легких ребр и как бы все сразу заиграло
мгновенно. То есть, в общем-то,
сопротивление закончилось, не успев начаться.
А теперь, значит,
потенциал мы введем
так. Значит,
w от каждой вершины
будет, как и в
heavy light,
будет 1 плюс
1 плюс то, что висит
на пунктирных ребрах.
Ну, только зачем плюс?
Мы же просто размеры под дерево.
Не-не-не-не.
Когда мы будем, чтобы определить w,
нам надо все-таки их выкинуть, чтобы потом
суммировать.
Нет.
Не, мы в heavy light'е, помните, определяли
вот это весами, поэтому там
баланс какой-то определяли и
соответственно.
Нет, ну,
вот.
Что?
w от u – это вот количество вершин
в таком вот под дереве, если выделить эту вершину
и все, что к ней подключено
к пунктирным ребрамам. Да, именно
под пунктирным, да. На яхтной картинке
w от какого-то u – это просто обвести
пачку деревьев. По сути, да.
Так, еще
секундочку. Значит, w от v – это
сама вершинка плюс
все под деревья, которые висят к ней
на пунктирных ребрах. Да, их размеры. Совершенно верно?
Хорошо. Вот.
Ну, почему
именно так, да? Потому что, да, очень хочется
просто сказать, что давайте скажем, что
что-что висит на самой вершине.
Но это, конечно,
нет,
это просто s. Помните, мы вводили s,
когда мы для каждой вершины суммировали
все по ее режиму под дерево.
То есть, по сути, да, это мы тут
вот, то есть, да, по сути
действительно, то есть, s от v – это
сколько на ней висит, включая
как ребра
в сплее, так и все остальное.
То есть, там в статье
вообще там еще более зубдробительно
это все написано.
То есть, говорят, что у них есть там какие-то ребра
и эти ребра бывают там
в левое-правое и сколько-то
средних там, в общем.
Ну, в общем, ну, как сказать,
слейтериториян, может быть, это в чуть-чуть
другой терминологии мыслили.
Ну, вот.
Но, с другой стороны, понимаете, у них такая задача,
они были первым проходцами, поэтому у них, может быть,
еще и задача была, с одной стороны,
писать более формально, а с другой стороны, сразу еще
изобить за собой все там различные подходы.
Вот. Поэтому
они могли там мыслить чуть-чуть
по-другому. Ну, и тем более, да, они, может,
не такие там олимпиадные, там опытные олимпиадные
кодеры, как мы с вами. Ну, там, скажем,
как известно, у Дэнила
слейтера, например, помси не рейтинг на Кодфорсисе,
например.
Да.
Нет, он не тренируется, если быть точнее.
Да, совершенно верно.
Вот. То есть понятно,
что изобретать крутые алгоритмы и действительно
уметь их там быстро загонять
в лавшу в тестер, это немножко разные скилы.
Вот.
Да, обычно второй выигрывает
олимпиады. Ну, да.
Вот. Нет.
Не совсем, потому что
там проблема такая, что там еще и быстро
надо придумывать.
То есть так он ставит большие задачи,
то есть они там ставят большие задачи и сидят там все
вместе, думают некоторое время, собственно,
там скидывая общими усилиями.
А тут как бы дано пять часов, у вас там максимум
трое, если команда олимпиады и у вас двенадцать задач,
вам надо там как можно больше этой лапши загнать.
Я, наоборот, честно говорю,
я не знаю, зачем это. Нас за скорость
написания хода, потому что
сама задача свойствована в том, что ее надо придумать.
И ты же не будешь тратить четыре часа,
как это?
Нет.
Нет, ну я так скажу,
просто в школе, когда у тебя три-четыре задачи,
ты можешь над каждой задачей еще чуть-чуть там не особо
торопясь ее писать. И тем более, что там
сложные решения. Но в ICPC-контесте
ты должен найти легкие задачи и их написать очень быстро,
потому что, во-первых, скорость важна, во-вторых,
чем быстрее ты решишь, тем больше у тебя времени останется
на сложной задачи. То есть
это просто
немного, ну просто вот
чуть разные скилы. Или
типичный пример, как это
подход чистого математика, вот я не знаю,
или как я играл в минус сто, вот это я рассказывал.
Потому что писал я как-то Codeforces,
вроде все хорошо, но в четвертой задаче явно была
какая-то задача на жаге. Вот я
вроде придумал жагник и час его пытался доказать.
Пока я его пытался доказать, собственно, тысяча человек
его уже сдала.
Вот я сам, как математик,
это очень не люблю, но
конкретно в данном случае
вот действительно это оказалось
в стратегии не сработало. Да.
В других случаях это бывает, что та же
тысяча напишет этот жагник, получит там
в при-тестах или в худшем случае в анасис-тестах.
Или там
умные люди их потом похакают.
Да.
Вот.
Да. Чего?
Да.
Вернемся к делу, да. Значит
да.
То есть более того, на самом деле
тут, на самом деле, если так
это все разворачивать, то на самом деле
там будет вообще получаться что-то типа,
что вот у нас тут какие-то вот рыжие дерева,
тут еще есть какие-то рыжие деревья.
Да, они везде.
Да, они везде.
Это
символизирует, что я вот
рисую, ну просто каждый сплошной
путь я рисую, он у меня будет
как сплей дерева. Вот я это сплей дерева
сейчас и рисую.
Вот.
И у них, условно, там какие-то корни
ссылаются вот куда-нибудь.
На какие-то вот
как-то вот так, вот как-то
на самом деле глобально это вот так вот
выглядело.
Вот.
А теперь смотрите.
Значит немножко магии.
Так.
Чего?
W мы ввели
как
один для вершины,
как один плюс суммарный
размер под деревья, которые висят
на ней на пунктирных ребрах.
Вот ровно так мы ввели W.
Вот.
Ну вот.
Значит смотрите,
что происходит теперь.
Значит теперь происходит следующее.
Значит теперь давайте
думать, как у нас
будет вообще
выглядеть
так сказать
сплайс.
Да. Боялся говорится.
Значит смотрите.
Как он будет выглядеть?
Выглядеть он будет следующим образом.
Здесь он, помните там
как вообще выглядит
мэкш, там как выглядит мэкш
двух деревьев.
Сплей деревьев.
Сплой
самой левой вершины
и подвесить
ее как левой сына,
левой дерева. Ну, например.
Или можно то же самое наоборот.
Справа подвесить.
Но в данном случае, конечно, нам будет
удобно подвесить именно слева.
Хотя у нас тут, конечно, есть определенная
хитрость.
То есть прежде чем помэкшить, придется посплитить.
Но у нас логика будет такая.
Жил-пыл-путь.
Жил-пыл-путь.
Из него шло
какое-то ребро.
И оно
ворвалось.
Ну вот.
И оно
ворвалось куда-то вот посередине
вот этого вот дерева.
Вот здесь, заметьте, этот путь,
мне сейчас он не важен, какая у него там
структурка.
Так вот.
Как мы тогда
будем действовать?
Действовать будем так,
что вот в этом под деревом,
вот эту вершину мы загоним в корень
за операцию сплей.
Так, что мы делаем?
Ну, мы делаем
splice.
То есть мы делаем splice.
Ну, давайте так. Глобально это выглядит так.
Жил-пыл-путь.
Жил-пыл-путь.
Жило было ребро.
Я хочу, чтобы
вот тут стало рыжим,
а вот тут стало черным пунктируем.
То есть я хочу...
Если корень справа.
Корень справа. Да.
И дерево вверх. Отлично.
Ну хорошо, хорошо.
Пожалуйста.
Не за что.
Вот. Вот, что хотелось бы.
Как это будет выглядеть?
Вот давайте этот дерево с точки зрения деревьев.
Значит,
было-было тут вот это веселое дерево.
Вот какое-нибудь
смешное.
Значит,
как я его хочу туда подмешивать?
Это пунктирное ребро.
Ну связь очень простая.
Понятно, что вот это пунктирное ребро
подразумевается, что это ребро
ведет из самой верхней
вершины этого пути.
То есть реально типа из вот этой.
Но я его рисую здесь,
потому что обычно это ребро все-таки в корне хранят.
То есть да,
правильнее может быть даже вот так.
То есть воображаем себе...
Это связь
между двумя путями
на самом деле проходит не то,
чтобы...
Ну да, то есть на самом деле она ведет
скорее из этой вершины.
Но вот здесь важно,
что именно в эту.
Тогда смотрите.
Теперь, значит,
делаем сплей у вот этой вершины.
Делаем сплей.
У этой вершины.
Так, значит,
так ликвидируем рояльчик.
Ну вот это вот, знаете,
типические фразы конферанса там.
Сообразите мне рояльчик, пожалуйста.
Там помощь вытаскивает рояльчик.
Да, не откажите в любезности. При собой купите стульчик.
Ладно.
Нет, потом после номера там ликвидируйте рояльчик.
А потом восстановите
мне рояльчик.
Ну вот, и в конце, конечно,
когда там рояль совсем разошелся,
уже там, ой, все, уберите этот сумасшедший инструмент.
Что он знает, что.
Ну в общем, необыкновенный концерт.
Очень рекомендую, конечно.
Вот.
Так вот.
Так вот, значит, смотрите.
Что с этим происходит?
Значит, теперь мы, значит, эту вершину,
ну давайте вот назовем ее, допустим,
у.
Тогда, значит, мы тут делаем сплей.
Значит,
так сказать, сплей от у.
Ну в данном случае это сплей от у превращается в зигзаг шаг.
Но это конкретно не сильно принципиально.
Значит, да, сплей от у работает,
ну вот.
То есть, если тут у, а тут root,
то как бы это у нас работает за время,
как мы помним,
по камере, ну вот, учетно.
Значит, учетно 1 плюс
логарифом
двоичный s от root.
Минус логарифом двоичный,
но я пока напишу.
Вот, s от u я уже начал.
Так вот, и превращается это в следующее.
Превращается это в следующее.
Значит
то, что
что у нас появляется у нас тут в корне,
то вершина у.
У нее висит левое под дерево.
У нее висит правое под дерево.
Так сказать. Тут висит какао...
аа, ну тут.
Да. Висит левое под дерево.
Есть правое по дерево.
И теперь у нее...
Ну вот. И тут есть, наши,
кстати, пока так не поменявшиеся
есть да которая мы вот типа подвешиваем вот сюда и более того очень хочется значит их смершить
как же мы это будем делать совершенно верно да совершенно верно значит происходит тогда в
итоге следующие давайте я вот так и нарисую что происходит теперь значит жила была все еще
вершина у это вот под дерево альфа бета я так нарисую вот значит ну конечно значит бета пока
остается жива тут как было так было тут ничего не меняется значит здесь теперь вот это вот все
безобразие гамма его назовем вот так вот нарисуем остается здесь так именно да но сплей мы сделали
вот там видите мы тут не наоборот сейчас сейчас будет принципиально и теперь и он еще у нас
остается под дерево альфа которая оказалась подвержена splice и теперь оно прицеплено все еще
но теперь вот сюда вот ну да здесь конечно но вот не совсем приятно потому что казалось
с одной стороны получается альфа все-таки теперь теперь не входила в поднот но хотя на самом деле
теперь если внимательно посмотреть то с точки зрения с на самом деле конкретно вот в этом
месте потенциал не поменялся ни у кого да тут вас может вести в заблуждение что w теперь у вершины
у конечно вот при вот этой операции конкретной операция значит вес w конечно мог сильно поменяться
но вес и да вес w поменялся но с не поменялся вообще вообще ни у какой вершины конкретно
splice этот потенциал не поменял а потому что потенциал каждой вершины который s вот этот вот у
которого мы логарифм берем да это по сути сколько вершин висит на ней как на пунктирных так и на так
сказать рыжих ребрах не могу их называть совсем сплошными потому что это не совсем сплошные ребра
да так и на ребрах сплэй дерево да да да именно но помните ведь мы сказали что то есть как бы
мы говорим чтобы вот у сплэй дерево рассматриваем сплэй дерево рассматриваем что у каждой вершины есть
вес а s от вершины это сумма весов в ее под деревьем но учитывая что такое для нас вес получается что
для нас s это сколько вершин висит на у во всех смыслах как в смысле сплэй дерево так и в смысле
пунктирно вот ну да просто скоро да то есть если мы идем вниз как по пунктирным ребрам так и по
в меняется таки так w меняется s нет вот так вот конкретно в этом штуке конечно же вот в
этом месте конечно с может и поменяться безусловно вот парадокс том что оно перераспределяется
тут конечно т.е. w но с от остается неизменным потому что у на у здесь но что это то смотреть
что такое это сколько это вот вес вот этого всего плюс там вес вот этой вершины плюс вес вот этой
вершины плюс да да вот а что такое здесь тоже сколько висит вот тут вот везде в альфе да сколько
висит вот тут сколько висит вот тут потому что нам в эске по барабану кто какой из этих ребер
рыжий а какой еще так что как бы да так что условно как бы и от того что тут это шахтер
поменял собственно там это домашнюю форму на гостевую ничего не поменялось вот вот
нет ученые от малых что что-то мало как бы мало там какой-нибудь преподаватель окажется
футбольным фанатом почему нет ну да нет но там конечно нет всегда аккуратно и тогда как желать
выяснить там за кого он болеет то есть знаете ну вот то есть условно там как бы бой там будет
там условно да когда да ой а мы снота вы болеете футбол да войка вообще классно вчера циркоска
рубин вынес да о извините ревиль довидович там вот словно точнее ревиль дарович там ну вот
да все все все возвращаюсь на место да нету шутка была на то что как бы можно было догадаться
что-то там товарищ с таким именем наверно за рубин болеет да вот ну понятно это если понятно
можете заменить как бы носка ягбар с ну вот ну ладно тут уже ладно так вот значит теперь значит
смотрим что происходит с потенциалом значит что происходит потенциал значит значит если смотреть
вот этот сплейный потенциал по всем вершинам да то мы замечаем следующее что во-первых при
конкретном выполнении сплея в одном дереве потенциал меняется только вот у вершин внутри этого дерева
то есть у остальных вершин у остальных деревьев потенциал не меняется от слова никак потенциал мы
потенциалом мы называем сумму эссок по всем по всем по всем вообще вершинам сейчас так что у нас есть да у
нас есть значит еще раз у нас есть веса у нас есть эске как сумма весов по дереве у нас есть рамги как
логарифм этих сумм эссок и вот действительно сумма этих логарифм по всем вершинам это соответственно
потенциал дерева а сумма потенциалов по всем деревьям это потенциал леса вот такая простая естественная
иерархия но вот я но вот теперь для данного для анализа конечно вот нам очень важность нет но
мы сейчас исследуем эксполс да при конкретно да при конкретно вот этой операции замены ребра на
ребро да не меняется никак конкретно здесь да но если брать просто вот мы расплатываем splice
splice состоит из двух частей первая часть это сплей вот этой вершины и вторая непосредственно вот
переподвешивание значит утверждение во-первых при обоих этих фазах потенциалы потенциалы вершин
нележащих вот в этом подделье не меняется от слова никак вот вот во-первых бал того что мы с
ними не взаимодействуем а во-вторых что потенциал вершины не зависит от того то есть он зависит
от того сколько вершин на ней висит но никак не зависит от того как конкретно друг за друга они
там цепляются вот поэтому получается более того в этот шаг что приятно смотрите теперь если мы
хотим оценивать по времени да то получается так как потенциал здесь не меняется то учетная
стоимость этого шага равна реальной стоимости этого шага а реальность стоимость этого конкретно
этого шага обратите внимание о от единицы конкретно здесь уже нет я не рассматриваю да
ведь я не случайно вот тут это все нарисовал да вот правильно наверное рисовать вот от единицы
здесь вот так то есть здесь это происходит за от единицы потенциал не меняется но самих этих
от единиц но можете сразу заметить что их небо и столько же их не более чем splice поэтому с этим
вот и этих от единиц непокрытых потенциалов с ними все нормально вот теперь рассматриваем
сплей ну то есть во время этого сплея поменялись потенциалы только внутри этого дерева и
исключительно но вот а во всех остальных всех остальных векшин потенциал не менялся правда
поэтому мы можем заявить что учетная стоимость конкретно этого сплея совпадает с учетной
стоимостью просто действительно как в обычном сплей дереве вот понятно да вот и но работает это
обратите внимание не случай я тут мог написать как отношения но я вот очень важно написал это
именно вот в виде вот таком то есть именно в виде разности потому что теперь значит теперь вот
теперь аккуратное рассуждение теперь давайте посмотрим на эксполс в целом то есть вот эксполс
в целом значит у нас как выглядит тут у нас какое-то дерево тут у нас какое-то дерево
ну практически нет единички еще останутся да с единичками придется аккуратно разобраться вот
остаются какие-то деревья тут что-то вот значит тут висит там я не знаю висит ну я не знаю висит
от забыл висит во и что получается и плана вот и получается примерно следующее то есть мы
замечаем что я значит это у нас давайте рассмотрим эти вот эти вершины ну да тут тут цепочки
конечно вот скорее вот так висят ну ладно давайте вот для удобства так нарисуем тогда если
рассмотреть эти вершины как допустим там допустим v1 там у1 v2 у2 там да значит v3 у3 там v4 и там
какая-нибудь у4 да и в итоге пусть у нас тут корень какой-нибудь v5 да вот ну или неважно там
уже что то получается что когда мы начинаем это все суммировать у нас получается то есть ну замечаем
что пока тут происходит при подвышивании туточки мы замечаем что потенциалы тут не меняются
поэтому и у каждого сплея значит вот свой логорифм и у вас получается значит 1 плюс значит
лог 2 с от соответственно ну да ну по хорошему тут надо видимо лог 2 с допустим там v1 минус
лог 2 с от с от у 0 но потому что изначально тут у нас он тут было у 0 дамы тут еще самый первый
сплей тут делаем помните вот а чтобы отпилить то что слева помните у 0 должна стать самой левой
поэтому нам тоже ее надо загнать в корень и отпилить левое под дерево но само в себе это
отпиливание на потенциалы вот ровно по тем же причинам не влияет от слова никак вот значит
далее плюс дальше 1 плюс лог 2 с от v2 минус лог 2 это у 1 соответственно да вот плюс ну да
тут не совсем шлеп-шлеп конечно да да тут не смотрите тут не точный шлеп-шлеп но когда но
как бы ну да давайте вот еще с логами тут напишу s от v3 минус там допустим минус лог 2
s от у2 какой-нибудь да плюс и так далее но тем не менее вот такой шлеп-шлеп делать хочется почему
потому что мы оцениваем это сверху и мы замечаем что вот этот s от у1 размер сколько висит на у1
строго больше чем сколько висит на v1 потому что под дерево v1 тупо висит на левшине у1
поэтому в некотором смысле такой шлеп-шлеп меньше либо равно выполнить можно вот равно как
и потом значит где-то надо еще вот этот шлеп-шлеп потом шлеп-шлеп там ну и так далее то есть
получается это меньше либо равно значит один плюс один плюс один плюс один плюс и так далее
плюс один и плюс логарифом сейчас допишу логариф двоичной ну фактически сайза t я
бы сказал че уж туда хриха таить минус лог 2 с от 0 где у2 тут у 0
в 2 его один давайте я по аккуратней нарисую но вот сейчас но да то есть фактически получается
учетная стоимость давайте я сейчас так говорю к эксполсов куда очень хочется сказать что она
вот разность вот этих логарифов то есть по сути там то есть по сути это от логен но это неправда
потому что до мы убили эти логарифа но эти одни ки ми не убили до эта разность меньше
либо равно 0 но но на столько насколько нам меньше либо равно Нуля мы не знаем вот но
заметим что количество единичек что так что это за количество единочек это количество эксползов
сплайсов. Ведь каждая эта единичка берется из одного
конкретного сплайса, правда? А мы знаем с вами, что сплайсов
не более чем от n плюс q на log n. То есть получается,
что сумма этих вот учетных стоимости с таким потенциалом
не превосходит. Получается от n плюс q на логарифм.
Ну, значит, еще раз. Мы посчитали тут относительно нашего потенциала
учетную стоимость эксполза, конкретного эксполза, да?
Ну, и мы в предположении, конечно, что у нас выполняется только эксполз.
И после этого потенциала получилось, что учетная стоимость каждого эксполза
не более чем log n плюс сколько сплайсов сделали.
Сплайсов не умножить на логарифм, как раньше, а именно количество сплайсов.
То есть получается, мы не смогли даже доказать, что учетная стоимость равна логарифм.
Формально говоря. Но это нам не особо принципиально.
Можно подогнать более правильный потенциал.
То есть включить в этот потенциал не только потенциал этот, но и потенциал для сплайсов.
А можно просто сказать, что если мы просуммируем эти все учетные стоимости,
которые суммарно их просуммируем, то тогда у нас в сумме получится логарифм
на количество запросов плюс сколько было сплайсов.
А сплайсов было n плюс q на логарифм.
Так что основная часть доказательства закончена.
Учетная стоимость логарифм плюс сплайсов.
То есть тут надо быть аккуратными, потому что это было бы верно, если бы у нас выполнялись только эксполсы.
Нет, мы доказали, что если просуммировать все учетные стоимости всех эксползов, то получится от n плюс q на логарифм.
Но будьте внимательны, это не все. Этого еще недостаточно.
Причина очень проста.
Так, потому что, как вы уже догадываетесь, то есть дело в том, что потенциал могут менять и другие товарищи.
А вот те самые линк-кат.
Вот, например, рассмотрим операцию линк.
Заметим, что когда вы подвесили под дерево к другой вершине, вообще говоря, потенциал поменялся.
И поменялся не сила, не правда ли?
То есть может оказаться, что даже если вы это сделали за o от единицы, то потенциал, наоборот, увеличился аж на o от m.
И тогда этот весь анализ просто летит к чертям.
Вот. А что мы с ним придумаем?
Не, не, не, не.
Ну, просто реально тут все эти операции, сейчас просто 5 минут осталось.
В общем-то вы уже сами догадываетесь, что называется где тут и почему хэппи энд.
Нет, ну, смотрите, просто давайте перебирать операции.
Значит, операция линк.
Значит, теперь добьемся.
Вот, имея в виду этот весь потенциал, давайте придумаем, как сделать линк.
А линк сделать очень просто.
Вот, допустим, жило было у вас там что-нибудь.
То есть жило было у вас какое-то поддерево.
Вот, там какое-то дерево большое, дерево большое.
Ну, я тут не знаю, кто тут сложный, кто тут сплошной, кто тут не сплошной.
И вы тут решили целое поддерево к нему подвести.
Взяли, тут решили подвести.
Предлагается это сделать так.
Если вы решили подвешивать к вершине у, то вы первым делом делаете expose.
Ну вот, значит, заметьте теперь следующее.
Значит, вы делаете expose за адекватную асимптотику.
И после этого в качестве добивочки вы еще и делаете сплей от у.
Если понадобится.
Хотя нет, понадобится.
То есть делаем для того, чтобы вот в поддереве, чтобы вот вершина у, то есть в поддереве, то есть была она корнем.
И слева у нее ничего не было, то есть у нее все висело либо справа, либо на пунктирных ребрах.
То есть мы вот делаем от нее сплей.
Хотя нет, может не получиться, потому что она не обязана быть самой...
Хотя нет, если мы сделали expose, то как бы, да, мы и отпилили то, что у нее ниже было, поэтому она самая левая.
Раз она самая левая, то есть теперь вот загнали ее в корень, потратили еще адекватное число операций, да?
Ну, то есть учетная стоимость сплея одинак, а адекватная от этого, правда?
Я, кстати, понимаю, что чем левее вершина, она ниже, похоже, что...
Нет.
Потому что, если иначе у вас будет...
Нет, если идти по левому пути, то каждая следующая вершина, конечно, ниже предыдущей, но она не обязана быть самой глупой.
Если у вас будет по правому, и у вас будет справа путь, то вы бы хотели, наверное, что-таки был у вас...
Мне по барабану, где по барабану?
Я знаю, что если я буду менять дерево только сплеями, у меня как бы будет учетная стоимость такая, и меня это устраивает.
После этого вопроса реализации.
Ну, может.
Ну, нет, по-моему, это вопрос анализа.
Нет, тут важно, что вы, как бы, если вы будете делать как-нибудь, а не только сплеи, то тогда вы не сможете доказать, что это адекватно работает.
То есть вопрос в данном случае, что какие конкретно сплеи я делаю?
Конечно, да, это мое личное дело.
Я имею право их делать как хочу, и я хочу их делать так.
Почему я хочу делать именно так?
Потому что я хочу, что когда вы подвесите новое под дерево к этой вершине, запунктирное ребро, я хочу, чтобы потенциал увеличился только у этой вершины и ни у какой другой окромя.
То есть заметим, что учетная стоимость конкретно этого действия тогда увеличит наш потенциал не более, чем на алгорифм.
Потому что, в принципе, у каждой вершины потенциал не более, чем на алгорифм, правда?
Очень удобно.
Даже вес изменился только у нее.
То есть таким образом мы убедились в том, что мы смогли сделать линкад за экспоуз.
Там может быть дополнительный сплей и адекватное подвешивание.
Нет, нет, нет.
Вот теперь мы обнаружили, что в этом нет просто смысла.
Вот чем приятно, когда вы понимаете доказательства, вы можете сами делать как вам удобно.
Потому что вы не знаете как правильно, вы знаете доказательства.
То есть правильно так, как докажется.
Так вот.
Ну, с катом все еще проще.
Ну, потому что с катом фактически обратная операция.
Вы делаете экспоуз от родителя ребра, который вы отпиливаете.
То есть это ребро становится соответственно пунктирным, если не было.
И после этого вы его отпиливаете, и это даже уменьшает потенциал.
У нас же несколько потенциалов было.
Да, но мы анализировали, что с сплайсовым потенциалом все в порядке.
То есть здесь мы тоже отпиливаем.
Отпиливаем потенциал.
То есть когда кат происходит, то будет вообще еще лучше.
Думаем, какие у нас еще?
У нас была проблемная операция Эверт.
Да?
Проблемная операция Эверт.
Ну, замечаем, что...
Да, но заметим, что когда мы делаем это отложенный реверс,
как мы помним, потенциал не меняется от слова никак.
Помните, да?
Да, поэтому от перестановки мест слагаемых суммы не меняется.
Поэтому, да, то есть в Эверте вообще легко.
Ну, а по-моему, более умных операции у нас там и не было.
То есть все остальные операции вообще работают за экспозы от единицы навешивания в корень отложенной операции.
По сути.
Так что отсюда получается, что, да, ура.
Как говорится, да, впервые в истории у нас есть линкат за логорифом ура.
Идея такая.
Но начнем с такой идеи.
Значит, мы сейчас на всех...
Вот возьмем все. У нас всего два в степени W чисел.
И мы на их всех создадим бор.
Прям вот вообще на всех.
Вот. Вот так вот.
Вот так вот.
То есть из данных там чисел?
Нет, даже хуже. Не из данных.
А вообще из всех.
Ну, пока мысленно.
Из всех в один и двух.
Ну вот.
То есть запишем все в один и двух и выполним на одного.
Да, вот да.
Вот так вот, вот так вот, вот так вот, вот так вот, вот так вот.
Тем дальше дописывать не буду.
Пусть у нас будет W равных 4.
И теперь смотрите, что мы еще тут теперь делаем.
Значит, смотрите, делаем вот так.
Значит, среди этих чисел есть те, кто лежит в нашем черном ящике, типа в сайте.
И те, кто не лежит.
Логично, да?
Вот.
Да.
Ну, как сказать, да.
Вот.
Как это?
Вот.
Вот.
Вот.
Так вот, идея такая.
Значит, мы их пометим.
Мы прям пометим те вершины.
Нет, даже не так лучше.
Вот так давайте.
Значит, пометим те вершины, которые соответствуют числам, которые вы множете.
Более того, на всякий пожарный, даже не на всякий пожарный, а просто.
На всякий пожарный, а просто.
Мы из этих чисел еще и будем поддерживать отсортированный двусвязанный список.
Вот.
Ну, это для того, что у нас тут сейчас будет такое.
Нам нужно искать successor, нужно искать predecessor.
Мы не будем заморачиваться.
Мы найдем что-то из этого, а там быстренько, если это не то, значит, сходим по указателю.
То есть, типа вот, я знаю, что это что-то, вот это самое близкое там.
Это не successor, а predecessor.
Он же имеется.
Ой, ну что вы придираетесь, мы вот войдем по указателю.
Нет.
Сейчас нет.
А, ну типа если мы знаем successor, то мы умеем переставить.
Ну, не совсем.
То есть, если мы знаем.
Ну, во-первых, если мы знаем successor, то мы знаем и predecessor автоматически.
Вот очень удобно.
Но теперь смотрите.
Successor это upper bound, короче.
А successor это lower bound?
Нет, это upper bound это, ну, давай так, лучше lower bound будем искать.
Нет, successor это первый, который не меньше.
Давайте будем искать, который не меньше.
Ну, нам по барабану, в общем.
Вот.
Кстати, successor это последний, который не больше.
Вот.
Хотя, может, лучше правильно первый, который строго больше.
Лучше искать, чтобы для каждого элемента вот successor был.
Ну, не важно.
Это все деталь.
Да.
Но это еще не все.
Ну, потому что замечаем, что, действительно, в такой штуке, действительно, мы всякие, ну понятно, всякие search мы ищем за логорифом.
Но как же нам искать successor?
За какой логорифом? За V вообще-то?
Ну, за логорифом V.
А, хуже даже.
Да, согласен.
Да, согласен, за V, за V, за V.
Пока в тупую, да.
Ну, а теперь смотрите, какой чит у нас будет.
Значит, сейчас мы обведем.
Сейчас мы обведем.
Пометим, значит, не только, значит, эти вот листы.
Но также мы пометим все вершины, в поддереве которых есть, соответственно, хотя бы одна помеченная вершина.
Вот примерно так это будет выглядеть.
Вот.
Нет, вершин-то у нас 2, 2V-1, такие 2 в степени W-1, если быть точнее.
А помеченных N, V, да.
Значит, мы пометили, в листах, листы мы пометили те листы, которые соответствуют вершинам, которые сейчас в сете.
А также мы, по сути, пометили все их предки.
В каком сете?
Ну, мы сет реализуем.
Мы реализуем сет с аксессором и предиссессором.
Прямо всех.
Как правильно заметил, тихон, действительно, это, то есть, как бы количество вершин помеченных, то есть, помеченных вершин там не более чем N на W.
Да, пожалуй.
Да.
Ну, поэтому я говорю, что это пристрелочная версия.
Вот.
Ну, пока у нас, когда, и памяти это все жрет от 2 в степени W.
Вот.
Да.
Да, мы вообще пока ничего не умеем.
Да, если говорить об инсерте, ну, инсерт мы пока умеем делать за, там, я не знаю, за сколько мы его там умеем делать.
Ну, инсерт.
Ну, правда, хуй раньше, значит, инсерт у нас.
Пока, если вот в таком миде втупают, значит, он делается за O от W.
А потом?
А, если мы хотим сделать Erase, он будет делаться за O от W.
Мы не знаем как.
Не-не-не, знаем-знаем.
А что такое?
Ну, пробежаться, если вы тут срели вот эту пометку, вы тут можете пробежаться по...
Без проблем.
Ну, в смысле, удаляешь эту вершину с двухсвязанного списка, значит, левый и правый экран негтишь проблемы.
А в инсерте тебе...
А, в инсерте, да, да-да-да-да-да.
Но там, да, но там заметим, что когда ты спускаешься вот по пути, да, ты попутно ищешь там какой-нибудь самый максимальный элемент.
Потому что идея тут будет такая, то есть, когда ты вот пришел, вот, допустим, тебе жутко интересно,
найти там какой элемент, самый близкий элемент слева помеченный, тебе жутко интересно, да?
Наверное.
Тогда идея такая, идем, идем, значит, идем-идем-идем, и находим такую, первое встреченное нами такое правое ребро, у которого слева тут находится, слева висит помеченный ребёнок.
Я утверждаю, что, на самом деле, просто надо теперь вот в этом поддереве найти максимум, честно к нему спуститься, и это и есть предиссессор.
Не в первом повороте направо, а на последнем повороте направо?
Нет, в первом, если идти снизу, мы снизу идем.
Да, но это была стандартная технология, как ищется саксессор-предиссессор в каком-нибудь дикартовом дереве.
Вот, собственно, абсолютно идентично.
Вот.
Ну, то есть, мы понимаем, что саксессор-предиссессор, ну, по крайней мере, в текущей версии, там саксессор-предиссессор, все они работают за сколько?
За, пока, от.
Ну, то есть, если бы в тупую наборе это все хранили, то вот можно было бы за от w это делать и радоваться.
Да, но каждую пометку-то пересчитать несложно, надо просто увидеть у детей, есть ли пометки.
Так что само по себе это не проблема.
Вот.
Что делать?
Ну, понятно, что от w памяти как-то не очень хочется.
Ну, и как-то хочется, наверное, всяких этих саксессоров-предиссессоров попытаться искать чуть-чуть побыстрее.
Все поэффективнее.
Да, все хочется поэффективнее.
Поэтому мы обнаглеем.
Мы в каждой вершине, значит, в каждой вершине помимо пометки будем хранить еще минимум и максимум.
В этом, то есть, минимум, то есть, минимальную и максимальную помеченную вершину в этом под деревом.
Что значит в данном случае будет минимально и максимально? То есть, минимально самое левое из помеченного?
Ну, из листов, да. Самое правое, да.
Ну, они как бы и по числам соответствуют самым, кто меньше, кто больше.
Мы все на числах.
Вот, так что соответственно.
Ага, так, работаем, да.
Вот.
Значит, далее получается такая.
Значит, будем хранить этот вот минимум-максимум.
Вот.
Ну, давайте, какие симптики от этого меняются?
Ну, пока никакие, да.
Нет, хотя некоторые улучшения есть.
В два раза.
Ну, да, в два раза.
Потому что successor, predecessor, у них как бы есть два шага.
Подъем и спуск.
А спуск теперь уже можно за 1 искать.
Да.
Осталось только понять, можно ли подняться.
А вот теперь, как теперь сделать так, чтобы successor, predecessor искались?
Торжественно превратились в соответственно...
Ну, да, по факту, да, в лог В.
Как их торжественно превратить?
Вот как это сделать в лог В, и чтобы памяти тоже стало от NW.
Ну, пока у нас проблема в том, что мы это все дерево в явном виде храним.
Потому что у нас пока так устроена структура.
Ну, да.
А на самом деле, да, идея действительно читерская.
Вместо того, чтобы хранить весь этот прям честный борт, давайте все вот эти вот, все вот эти слова, все вот эти, так сказать, префиксы помеченных, хранить в какой-нибудь хэшмапе.
Да, в той самой, в которую мы поверили.
Ну, как сказать, не совсем. Длина-то разная.
Ну, во-первых, ну, как это называется, да, это называется авторы статьи опускают такие несерьезные детали, видимо, просто даже не считая нужным сказать, что, ну, как это называется, да, это называется...
Ну, как сказать, не совсем. Длина-то разная.
Ну, во-первых, ну, как это называется, да, это называется авторы статьи опускают такие несерьезные детали, видимо, просто даже не считая нужным сказать, что, там, я самостоятельно, хотя не отвернул.
Хотя не отвернул, ладно, может, я гоню на авторы статьи, да, потому что я же по конспектам ориентировался не по оригинальной статье.
Но не знаю, я лично в этом случае предлагаю, на самом деле, создать не один хэшмап, а N хэшмап, а W хэшмапов.
W хэшмапов, где хранить только масочки соответствующей длины.
Вот.
Не, ну, смотри, просто, ну, просто идея такая, в данном случае мы, ну, там, тут мы будем хранить какую-нибудь пустую масочку, здесь мы будем хранить масочки 0 и 1, в мапе номер 2 мы будем хранить вот масочки 0 0 0 1 1 0 1 1, в мапе номер 3 будет интереснее.
То есть мы будем хранить масочки 0 0 0, 0 0 1, там 0 1 0, нет, ну не все, вот видите, тут уже две пропущенные, вот только те, которые помечены, 1 0 0, 1 1 0 и 1 1 1.
Ну потому что к каждой вершине соответствует путь, а каждому пути соответствует строчка из 0 единиц, а каждой строчке из 0 единиц соответствует масочка, которую можно запихнуть, можно оформить как одно число.
Ну вот, эти числа вот мы в этих вот n-мапах храним.
Вот, я приложу так.
Ну да, wmap, да.
Да, то есть, ну, ну, то есть, да, в этом смысле мы может где-то это немножко забиваем на то, что там предпочет у нас теперь будет за w, чтобы создать w-мапов, но это мелко.
Ну и тем более, в случае чего всегда можно создать там хэшмап хэшмапчиков там, да, это в общем не проблема.
Вот, так вот, тогда что это нам дает? Откуда мы берем log w?
Ну идея очень простая, вместо того, чтобы честно идти вверх, мы замечаем, что если идти просто, вот, вообразим себе этот процесс, и мы понимаем, что некоторое время вершины будут не помечены,
когда мы добавляем что-то, например, а в какой-то момент они, бабаха, окажутся помеченными.
И нас интересует последний момент, когда они будут помечены.
Ну, проверять числа на совпадение по префису, кажется, быстро дело.
Ну вот, хотя да, но мы говорим о successor и predecessor, да.
Ну потому что да, insert и erase, там все равно эти пометки.
Потом еще на уровне, еще на уровне, и в худшем случае это double.
Поэтому, на самом деле, нам нужно найти, по идее, первую вершину, если идти снизу, которая помечена.
Заметим, что, в чем заметим, что вот именно сейчас проявляется, что как бы сейчас мы будем немножко вольны, мы можем найти или successor, или predecessor, ну, что-то из этого.
Ну вот, ну, как бы, бах, или Brahms, что-то из классики вот этого.
Нет.
За insert мы ничего не говорим.
Мы говорим про successor и predecessor.
А?
Пока нету.
Значит, смотрите, мы находим эту вот первую вершину помеченную, начнем ее, честно, залог В, binpolsk.
И вот.
Значит, что у нас, ну вот, теперь смотрим.
Если наша вершина оказывается в ее правом поддереве.
Вот.
Ну вот.
Тогда мы действительно просто берем максимум в ее левом поддереве.
А если это оказывается про левое поддереве, то мы берем просто там, минимум, в правом поддереве.
И таким образом находим или successor, или predecessor.
Да, заметим, что эта вершина, которую мы тут ходили, она не помечена.
Ну, если мы просто в хэшмапе ее нашли, мы за вот единицы поняли, что там кто у нее predecessor, successor.
А так, как бы, если она не помечена, то мы впервые находим поддерево, которое помечено.
И, значит, вот где-то здесь, тут у нее есть сосед.
Либо слева, либо справа мы его находим.
Ну, вот.
Ну, вот.
Вот.
Ну, вот.
Ну, вот.
А очень просто, смотри, потому что ты, как говоришь, чтобы проверить, то есть ты говоришь, так, вот у нее целая маска.
Такой маски нет.
А вот, а ее префикс длины 3 есть?
Ой, есть.
А префикс длины 5? Ой, нету.
Ну, вот, да, поэтому вот.
То есть, поэтому вот такая вот неожиданная bin поиска.
Ну, вот, не хотели.
Что это мы не хотели?
А, ну, это да, это он mdboss делает пока тоже самое, согласен.
Но зато у нас памяти хотя бы уже реально от mw они там.
Ну, хотя, да, тут сдано хэшмапу на хэшмапу, согласен, но вот.
Хотя надо посмотреть, хотя нет.
Да, первая мысль, может, тогда они изобрели дерево mdboss, а в том числе, они изобрели, они на него ссылались.
Да.
Ну, ничего страшного.
Но, как я уже сказал, конкурирующая фирма.
Ну, сейчас мы просто как бы рандом находим.
Повезет, найдем success, пойдет, найдем, придаст.
Да, но у нас на этой список, обратите внимание.
А, да.
Но важный момент, что мало того, что памяти не от от на от and w.
Уже не плохие.
Так еще и заметим, что insert и erase при вот этих вот хранениях минимум максимума, а нам принципиально их хранить.
Ну, потому что нам тут надо прям максимум найти в этой вершине, да.
То получается, что никаких, что от w мы никуда не сдвинулись.
Вот.
Вот.
Но, тем не менее, вот такая штука есть.
Но я поэтому и сказал, что это версия 1 пристрелочная.
Ну, такая пристрелочная, она будет использоваться как часть в следующей версии.
Ну, например, да.
Еще в одном хэш-мапе.
Хотя даже не хэш-мап, это массив.
Да, да, да.
Ну, да, ну, конечно, конечно, да.
Да, поэтому я употребляю не слово хэш-сет, а слово хэш-мап.
Да.
Как бы мы и верим в хэш-мапы.
Нет, они есть.
Просто они продолжают работать за w.
Да, потому что, ну, минимум максимум надо хранить.
Ничего не попишешь.
Но, как бы, тем не менее, такая версия называется по-своему прикольная.
И сейчас мы ее попробуем использовать.
Ну, search, конечно, работает за 1, потому что вы лезете в хэш-мап.
Да.
Так что это, как бы, в первую очередь для нас важны successor-predecessor.
Нет, это, конечно, ну, и тем более, если мы умеем делать successor-predecessor, то что-то мне подсказывает, то search мы умеем за ту же ассиндотику.
Поверьте мне.
Да.
Я так думаю.
Ну, вот, да.
Ну, мало ли.
Так, хорошо.
Значит, это был, это было вот xfast3.
Ну, оно, нет, оно, оно successor-predecessor быстро ищет.
Да.
Ну, как-то, как говорили, как это говорилось, есть язык, называется, его очень любят биологи, как сам язык, на самом деле, не самый приятный, конечно, скажем аккуратно, но в нем есть куча статистических пакетов, поэтому там все его очень любят.
Вот.
Да, так что вот, да, ну, вскоре вы с этим столкнетесь.
Вот.
Значит, уровень следующий.
Значит, давайте, малиновый.
Да, малиновый пусть будет.
Значит, версия, значит, это была, да, давайте отрисуем, да, это вот была фиолетовая версия yfast3, вот ассиндотику я оставлю.
Все остальное буду стирать.
Значит, поехали дальше.
А теперь версия вторая.
Название.
Yfast.
Реально.
Которую амортизировать.
Да, все, да, то есть мало нам, да, мало на вероятности сейчас будет еще амортизация.
Я, кажется, знаю, как будет называться третья версия.
Нет, z.
Fusion 3, нет?
Вообще да.
Называется zfast3.
Ну, сейчас это будем даже доживать.
Доживать.
И то, и то.
Так.
Значит, смотреть.
Что тут?
Значит, какая красота?
Пока никакой.
Ну, красота тут заключается в том, что тут, конечно, хочется напомнить одну, как говорится, одну из технологий корневухи.
Она нам сейчас неожиданно, сейчас она неожиданно выплывет, причем в очень неожиданном месте.
Потому что, смотрите, как бы, что делать, если вот у вас есть задача?
У вас есть массив, и в нем есть операции там минимума на подотрезке, ну, или там суммы, или что-нибудь еще.
А также есть операция вставки и удаления.
Вот.
А вы не любите писать AVL дерева.
И Дикартова.
И Красночерная.
Вот.
Деревня не любит.
Ну вот.
А вставка?
К огнящикам, по блокам.
Вот.
А мы пойдем другим, мы пойдем другим путем.
Все в этом мире можно написать.
Ну, кроме того, что написать нельзя, конечно.
Вот.
Да.
Я нормально.
Так вот.
Так вот.
Значит, смотрите.
Так вот, смотрите, технология.
Еще одна технология корневухи.
Значит, если мы хотим делать вставки, то предлагается делать такую...
Ну, тут много вариантов, на самом деле, по-разному.
Поэтому слушайте внимательно, потому что, возможно, эта версия, которая у вас стоит по умолчанию в голове, может сейчас не совпадать с тем, что я скажу.
Нет, там это принципиально.
То есть, идея такая.
Значит, я разобью все на блоке.
Массив.
Так.
Напоминаю, что у нас задача.
Сейчас мы отвлекаемся от этого.
Рассказываю технологию.
То есть, у нас есть технология, у нас есть массив.
Теперь задача, у нас есть массив.
Мы хотим в него делать вставку.
Эрейс.
И там какой-нибудь, я не знаю, минимум на подотреске.
Там еще можно...
Вот.
Ну, все что угодно.
Ну, да.
Вот.
Значит, как мы это будем делать?
Ну, я не буду сейчас, мы не будем сейчас забарашиваться по отложенности.
Так вот, идея такая.
Мы представляем этот массив.
В виде блока.
Значит, в виде двусвязного списка вот таких вот под массивов, таких блоков.
Вот.
И мы будем поддерживать мистический инвариант.
Значит, мы введем Бубен.
Бубен.
Который, как всегда, корень из N.
Бубен.
Вот.
Да, но какую?
Тут сейчас просто разные варианты есть.
Потому что там можно делать просто вставку удаления, если вы думаете, а потом каждый корень из N делать перестройку.
Вот.
Да.
Ну, rebuild.
Я люблю.
Просто вставляют, вставляют в массив число X.
Именно вставляют, в смысле перед позиции pos.
То есть массив увеличивается.
Увеличивается на один, да.
А в эрензии уменьшается.
На позицию X.
Нет, на позицию pos и вставляем число X.
Вот.
Так вот.
Но нет, мы сейчас ухитримся сделать так, что мы не будем делать rebuild.
Технология будет немножко другой.
Мы будем поддерживать инвариант.
Потому что в каждом блоке находится не слишком мало элементов.
И не слишком много.
А именно в нашем случае.
От одной-второй бубна.
До двух бубнов.
А это уже спритмёрш, который надеется?
Ну, типа.
Ооо, мне снова начало звонить тебе абонент.
Я отказывался.
О, господи.
Ой, вот.
Вот.
Значит, нет.
На этих блоках построен двусвязанный список.
Каждый блок это честный массив.
Честный вот этот под массив какой-то.
И более того, в каждом блоке мы ещё храним эту сумму минимум или что там.
Вот.
Ну, то есть дальше, то есть делаем как всегда, как положено.
Ну, во-первых, если нам там требуется запрос на подотрезки от LR, то мы всё честно делаем.
То есть, во-первых, за O от количества блоков, коих O от корни из N, мы честно находим, в каком блоке мы живём.
Прям проходимся, потому что мы же заранее не знаем, в какой блок идти, потому что у нас неодинаковое количество элементов, может быть.
Вот.
И честно проходим, то есть находим за O от корни из N, в каком блоке надо жить, и в этом блоке честно за O от корни из N считаем ответ.
Если же мы задеваем несколько блоков целиком, ну, здесь просто.
Во-первых, находим в каких блоках мы живём, там где-то учитываем суффикс, где-то учитываем префикс, какие-то блоки учитываем целиком.
Так ищутся минимумы от LR.
Как делается insert?
Ну, insert и rest делаются очень просто.
Мы находим просто, в какой блок надо вставлять или удалять, и честно туда вставляем.
Прям предельно честно вставляем, и не менее честно всё пересчитываем вот этот вот минимум на подотрезке.
Это тоже работает за корень из N.
Но это блестяще работает, пока, ну, изначально, конечно, всё классно, потому что изначально у вас каждый блок как бы по корню из N элементов, очевидно, работает.
Поэтому некоторое время будете жить предпевающе.
Но в какой-то момент у вас какой-то блок по размеру будет слишком большим или слишком маленьким.
Что делать?
Ну, слишком большой, да. Если у вас блок достиг два корня из N, то тогда вы его просто торжественно распиливаете.
Ну, там, да, сейчас скажем это, да.
Начнём с простого. Если блок оказался размером вот два корня из N, да, тут вот, где-то тут два корня из N, то мы его просто распиливаем на два блока по корню из N.
Да, разумеется. Мы это делаем за O от корня из N.
Что мы ещё делаем?
Ну, ещё может быть проблема, что блок стал слишком мелким.
Что мы делаем в этом случае?
В этом случае мы делаем следующее.
У нас есть блок, одна вторая корня из N, и рядом с ней есть кто-то.
Что мы тогда с ним делаем?
Так вот, идея. Мы их просто объединяем, и получается блок.
Блок получается размера от корня из N до двух с половиной корня из N.
Ну, всё, что нам остаётся, это сказать теперь следующее.
Что если у нас блок, допустим, оказался, вот тут надо очень аккуратно для анализа.
Что если оказалось, что он больше, чем даже не два корня из N, а, ну, на всякий случай, ну, допустим, там неважно особо будет.
Один семьдесят пять корень из N.
Ну, сейчас увидите для чего это нужно.
Тогда мы его распиливаем на двое.
Что?
А суть одна. Ой, любую константу на этом отрезке, даже чуть более широко, можете выбрать.
Сейчас все поймём почему и по каким принципам.
Ну, я беру мне так как-то красивше.
То есть у нас блок теперь не от одной второй до двух корня из N, а до один из семьдесят пять корня из N.
Да, вот очень важно для нас следующее.
Нам очень важно, что если мы только что делали какую-то операцию с блоком или парой блоков, мы затратили θ от корня операции.
θ, не O от θ.
Поэтому нам очень хотелось бы, чтобы в следующий раз, когда с этим отрезком у нас что-то ещё будет, это произошло через то же там омега от корня операции.
Поэтому, да, вот мы теперь убеждаемся, то есть мы теперь, смотрите, что гарантируем.
Мы теперь гарантируем, что после вот этой операции у нас будет либо блок размера от корня из N до один семьдесят пять корня из N, либо будут два блока размера, соответственно, от...
Ой, что-то я усложнил себе жизнь, конечно, но ладно.
От ноль точка там, восемьсот сколько-то там. Сколько там?
Давай полтора.
Да, восемьсот семьдесят пять корня из N, да.
Да, может ты и прав, но ладно.
Но мне просто хотелось, чтобы там побольше расстояния было.
Вот, до, ну, соответственно, один точка двадцать пять.
То есть в переводе говоря, каждый блок после, то есть блок после вот этого θ от корня из N распилов там мержей и так далее, он лежит, короче, от...
Нет, это если он не распилился, то такой, а если распилился, то такой.
В сумме, да, получается, что от ноль восемьсот семьдесят пять до один точка семьдесят пять.
Ну, то есть что это означает?
Это означает, что если, что конкретно этот блок, ну, то есть мы не можем гарантировать, что на следующей операции этот блок не захочет помержить у себя сосед,
но мы гарантируем, что в следующий раз конкретно этот блок захочет распилиться или смержиться не ранее, чем через, соответственно, ноль двадцать пять корней из N.
Ну, потому что у него сейчас один, потому что он сейчас один семьдесят пять или ноль восемьсот семьдесят пять, ну, там где-то между ними.
Ну, то есть мы не можем гарантировать, что на следующей операции этот блок не захочет помержить у себя сосед,
потому что он сейчас один семьдесят пять или ноль восемьсот семьдесят пять, ну, там где-то между ними.
А он должен, чтобы захотеть чего-то распилиться или чтобы захотеть распилиться, он должен стать хоть два корни из N.
А чтобы захотеть смержиться, он должен захотеть стать ноль пять.
Да, пожалуй, действительно, может и, ну, вот, ну, неважно.
Вот. Так что отсюда вот такая, вот получается, отсюда следует.
Отсюда следует. То есть тогда получается, что там, условно, на каждое, там, действительно, то есть интерес получается такой,
что после распила за от корней из N вы на каждый, соответственно, отрезок можете положить по корню из N монетку.
Нет, хотя нет. Точнее так, с каждой, не так.
То есть учетный анализ, то есть я теперь утверждаю, что учетная стоимость всех этих,
каждый теперь инсерт и рейс за это будет теперь работать, будет она за корень из N.
Идея будет простая. Каждый инсерт и каждый рейс вы будете класть на блок монетку.
И тогда утверждается, что когда придет время именно этот отрезок с кем-то там мержить или его сплитить,
то у вас наберется тета от корень из N монеток.
Останется только подогнать курс валют и, собственно, все.
А зачем нам вообще амортизация здесь? Как у нас может пойти так, что, ну, если она за честный, не за корень из N сделается?
А что такое честный корень из N?
Ну, в смысле, за реальное время, не за корень из N.
А как?
Нет, ну, вот я и спрашиваю, что может случиться, что за корень из N мы не сделаем?
Нет, что такое честный?
Ну, может случиться, что если вы будете делать инсерты в один и тот же блок в одно и то же место, то у вас блок будет расширяться.
А тогда, а вы ж как бы тут проблема в том, что когда вы что-то вставляете, вы на этом блоке должны вот этот минимум поддерживать и пересчитывать.
А пересчитываете вы его в честную.
Просто в другом. Ты сейчас показал, что сплитов и мержи будут на самом деле по отку.
Ну, можно и так сказать, да, и что.
Или нет. Или даже суммарное время, которое уйдет на сплиты и мержи будет по отку, а не по отку корней из N.
Но нам это не очень важно, в общем-то.
У нас и так уже есть куберни из N, а симпатика ответ на все остальные запросы.
Мы же могли каждый раз честную, в коем случае, блок разбивать или мержить любыми соседними, потому что они все корректных размеров.
Но при желании да, но при этом контролировать, что они адекватных размеров.
Что такое куб?
Количество запросов.
Так, нет, ну теоретически, наверное, могли, да.
Возможно, нам просто эта идея понадобится сейчас дальше, что мы очевидно, что мы проходим.
Ну да. Нет, ну тут по-разному можно было.
Ну, правда, к сожалению, не сейчас, потому что, по-моему, время у нас потихоньку вышло.
Очень жаль.
Да, оно, к сожалению, вышло.
Но в будущем, значит, просто теперь такая тизера на следующий раз.
То есть в следующий раз там вот у нас будет работать вот подобного рода технология.
Только Бубен будет работать, будет равен не коррю, а логарифму.
Нет, W в степени 1,5 это в плавленом дереве будет.
А в игре к фасте мы пока все-таки будем постепенно переходить это.
Амортизировано за то, что надо, да.
Да, и когда делаем рейс, тоже кладем монетку на блок, в котором мы это сделали.
Утверждение. Когда придет время, отрезок там станет слишком маленьким и слишком большим, монеток будет тета от корени Зен.
Почему?
Можем сказать, что мы каждый раз кладем 5 монеток?
Пожалуйста, пожалуйста, да.
Ну, это я имел в виду, когда сказал, подгоним курс валют.
Вот, а то мало.
Вот.
В идеале N у нас же меняется, да, и мы в соответствии с этим тоже работаем.
Или Бубен у нас фиксирован?
Ну нет, но N у нас...
Нет, ну обычно тут подозревается, что N у нас видимо известен заранее.
Ну максимально N.
Можешь сказать, что корень Зен плюс пол.
Ну можно, да.
Нет, ну можно там всегда подгонять, можно перестраивать, там все можно.
Что будет, если динамически что-нибудь будет?
Нет, а можно N действительно поддерживать прям динамически, потому что когда у вас N увеличился на единицу, корень увеличился не то чтобы сильно.
Не то чтобы сильно, но может возникнуть момент, когда все блоки перестроить.
Да, неприятно, неприятно.
Ну тут да.
Хотя тут, по-моему, да, тут уже лучше перестройку каждый, корень и Зен раз делать.
Не знаю, я на Олимпудке все себе написал.
Ну, нет, это-то да, но я как бы это рассказываю только для того, что вот выиграть FastTri вот ровно эта технология потребуется.
То есть оказывается, просто фишка такая, что там просто идея будет в том, что если у вас это будет не корень, а логарифм,
то если вы будете быстро находить в какой блок вставлять или удалять, то тогда все остальное у вас будет работать тоже за типо логарифм.
Да, безусловно, но я просто вот на этом примере привел, что вот можно делать и так, и вот да.
То есть нет, если мы там сможем в игре FastTri сделать D-ложку, будет круто, конечно, но я что-то в этом не уверен.
Ну да, но там, там будет, там поверх будет Xfast, вот не просто так.
Не, почему отстой, там будет N поделить на лог W просто вершин, ну вот это в блоке, поэтому как бы вот это вот там, типа это будет круто, а памяти будет вот N.
Сейчас, что? То есть будет W, а не лог N?
Нет, почему? Нет, successor, predecessor как бы там за адекватную точку, а реальные инсорты и рейсы туда нам потребуется делать редко, поэтому как бы амортизировано это все скушать.
Ну вот поймешь.
А вот это, как говорится, подробнее в следующей серии.
