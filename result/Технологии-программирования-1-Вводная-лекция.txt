Дайте, я думаю, название нашего приложения.
РАЗГОВОРЫ
Да.
Вот, допустим, пишите онлайн, да?
Пишите, я не могу это сделать.
И вот, смотрите, нас здесь 180 человек.
Я не знаю, по крайней мере початки.
Давайте, как-нибудь 12.
125 человек!
Возможно больше,
возможно больше, потому что кто-то ходил от чата.
И вот как организовать процесс разработки
на вот такую огромную команду?
Можно не работать,
у нас тут перерезают машины и колодки.
Может ли подвлеваться на группу?
Подвлеваться на команду.
Каким образом подвлеваться на команду?
Каким образом интегрироваться
в основные части между командами?
Каким образом ввести под?
Это сложный, очень важный.
Вот, металлическая работа как-нибудь делается,
и мы с вами разберёмся в основной концепции
того, как можно делать.
Значит, и последнее.
Мы, судим, максимально стараться
избавляться от нелепятного года.
Да?
Я не знаю, или в руках первого света
я думаю, что мы немного гримим,
но мы продолжим пить чуть сильнее рука.
Вот, действительно, знаете?
Ага.
И в ра, да.
И в общем, будет феминар
и у нас начинается проигрыш.
Что у нас там на вкусе?
Значит, давайте поймём,
что мы будем делать на жене.
Значит, на лекциях мы будем
узнавать лучшие практики
из промышленной дейды,
то есть теперь логической разработки.
Вот, и поймём, почему на работе
используется одна концепция,
а не используется другая концепция.
Потому что, на самом деле,
теперь разработки,
ну, где-то считать,
разработка уже идёт где-то лет 60-70,
вот именно, чисто в год,
произошло огромное количество изменений.
Изменилось огромное количество концепций,
в котором работает телеверная команда.
Вот, а на феминарах
мы будем изучать
разные инструментовые разработки.
На лекциях мы тоже про них будем говорить
и будем разбирать, например,
шаблоны проектирования.
То есть каким образом можно
писать, составлять структуру
своего кода,
либо программного продукта,
таким опытом, чтобы
не подокаргивать на граб.
Да, чтобы не шли, не шли,
и бам, нам это ограбили.
Либо идём, идём, идём.
Знаете, что такое кастынь?
Да, это я уже написал.
Да, ну это, знаете,
у нас есть какой-то нестабильный продукт,
а у нас есть кастынь.
Для того, чтобы дерево,
поровну, поровну ехать, ну, поставлять там.
А ты, как это вовремя,
с вами ребёнка ехать?
Ну, так мы и сделаем.
И вот, представьте,
мы пишем, пишем под, потом берём,
пинаем кастынь,
и потом у нас что-то упадет.
Замечательно. Вот.
Шаблоны проектирования
позволяют избавиться вот этой
трансцепции. Да.
Да, это есть связь.
Но поскольку есть паттерны, есть и
антипаттеры.
Их зачастую, на самом деле,
если говорить про паттерны и антипаттерны,
скорее всего,
тогда мы будем анализировать под,
и вы будете анализировать свой под,
и вы увидите в себе кучу антипаттеров.
В вашем поде куча антипаттеров.
Да.
Я не знаю.
Классические.
Я не знаю.
В олимпиадной сфере
бывает такое, берут экран,
вот у нас есть горизонтальный экран,
берут его, переворачивают.
Как вы думаете, зачем делаете это?
Что больше строчки ничего.
Ну, раз у меня на экране помещается
больше строчекод, давайте
функцию подлиннее сделаем.
Вот это
так вот и стоит.
В общем, мы начнем
разбирать некоторые шаблоны проектирования
и на лекции.
Среди тех, какие архитектурные особенности
мы будем рассказывать, мы творческо съем
некоторые шаблоны проектирования на лекции.
Так, вперед.
Так, есть вопросы на них.
Да, есть все, вопрос
по ходу дела, не стесняйтесь.
Так.
Значит, теперь
мы поговорили немного про систему оценивания.
Система оценивания будет
в состоянии трех частей.
На 40%
это технические выгодания,
которые будут поточены потом,
чтобы использовать тот или иной инструмент,
научиться им пользоваться.
Это реально пригодается на работе.
Ну, и для написания своих проектов.
Вот, дальше
это будет состоять из написания проектов.
Значит, вот это
будет один либо тысяча шаблонных проектов,
которые у нас подготовлены заранее.
Написать, либо написать
какую-нибудь там, либо эту типу систему
а-ля банкинг на коленках.
Вот.
Лучше будет и все.
И если у вас есть свои предложения,
вы можете подойти к своим терминалистам
и узнать, что вы хотите писать.
Значит, проекты можно реализовывать не только
самолично, но и объединяться в команду
человека.
Вот он.
А?
Да,
это изделие повышает требования.
Вот.
Значит,
мы теперь
гоняем 40 процентов.
У вас будет 3 операции.
И на каждую операцию будут требования.
Что необходимо сделать?
Тем самым мы посмотрим с вами
методологию
и интерактивный разговор.
То есть, каждую операцию нужно сделать.
Плюс, еще в этом году сделали так,
что 10 процентов, поверг этих 30 процентов,
будет за то,
что вы технические штуки,
которые узнали на технических заданиях,
примените в своем проекте.
А, ну это же круто.
Вы проходите задание
как-то как, а потом понимаете,
что надо не обыкать на этих заданиях проходить,
а именно применение
при реальном проекте.
И пару, я еще пока не решу,
сколько раз мы напишем контролю.
Либо одну контролю на 15 сантиметров,
либо две контроли, тогда проведешь
конечную свободу.
Они будут как по материалам лекции,
так по материалам семинаров.
Ну или, собственно, они будут касаться
каких-то интересных тем.
А перегород в итоге оценки
в теории?
Нет, каждая оценка
состоит как в действии,
а потом сама на эфирическое оформление.
Но важно, сразу скажу,
что по каждому инструктору
будет блокирующий балл.
Что меняет?
Корректическое оформление.
Да, эфирическое оформление.
Посмотрите коррекцию.
Тема оценивания
будет сделана таким образом,
что если для каждого инструктора
будет прописана блокировка,
то есть получит напрямую
количество баллов
для изучения этой дисциплины,
то есть суммар
надо получить
положительные баллы.
Можно еще выключить
блокирующие баллы?
Ну смотрите примером.
У нас
система оценивания
40-42.
Как вы говорите, технические
задания разнабрались.
А, еще будет ключевый вопрос.
И давайте поговорим
о тема элекционных занятий.
Начнем с проектирования
того, что мы начнем говорить
в следующей географии про нормы.
Потом мы поговорим о соцлабатном
непроектировании.
Также есть такая вариантура
из трех букв обскверенной
Nephite Modeling Language.
При помощи нее диаграммы интересуют.
Немножко поймем,
какие из этих программирований
дулает,
потому что скорее всего
параллельные двух не забыл.
У меня параллельные двух программирований.
Это если дайдить плюс ют.
И, наверное, мы начали пайкнуть.
Это еще не начали.
Ну вот.
Тоже познакомитесь.
Потом поговорим о том,
как люди разрабатывают ПЛО.
То есть какими интеракциями двигаются.
Дальше будет интересный
ПЛО. Про то, как тестировать ПЛО.
И, кстати, сразу скажу,
что тестирование географии
не то, что подразумевается под
политическим тестированием.
А дальше поговорим про то,
как активировать ПЛО.
Плата активирования и так далее.
Ну и дальше уже идет автоматизация.
Поговорим про всякие архитектурные паттерны.
Как правильно делать
курсовые приложения.
По крайней мере, делать наметки.
Потому что во всей этой концепции
сразу скажу следующее.
Есть вопрос постоянно искать
новую информацию.
Мир сейчас двигается.
Вот, допустим, когда
ну, что было понятно.
Этот курс считаем в шестой год.
Когда мы в первый раз опускали этот курс,
некоторых технологий, про которые
в этом курсе лексикому дурака
просто не было.
Чтобы было понимание.
Да, они появились только совсем недавно.
Ну и такая
царапочка у нас будет связана
с тем, что в будущем
будет курс по операционным системам.
И мы поговорим про то,
что просто клятся.
Да, как пытаться
под умный холодильник все-таки.
Чтобы умный холодильник
там что-нибудь сделал
или у него там что-то стало, пожалуй, было.
Вот, это такие темы
лекционных занятий.
Значит, возможно, что они будут заполняться.
Если надо будет бежать быстрее.
Ну а если бежим
и бежать быстрее, то это лучше.
Так, вопрос-то.
Да.
Смотрите.
Первый домашний занятий, который
обычно будет делать первый семинар.
Да, я уже не специально,
потому что, по-моему,
у каких-то групп... По-моему,
семинар был уже сегодня утром.
И это группы 7.
Да.
Значит,
нужно будет поставить признак
первого семинара. Почему?
Потому что мы начнем проходить команды в драку.
Вот. А как я буду делать?
На самом деле я скажу,
что зачастую я из команды
с прикиденьем вылезаю.
Вот. На самом деле лежать в домашнем
нечего делать.
У меня мак, все отлично походит.
Да.
Да. Тюнинг с подобной системой.
То есть, Макон
подойдет, пожалуйста.
А?
Мы можем про него поговорить немножко.
Да.
Вы как официант не любите?
Сорочек, вопрос.
Сорочек.
Сорочек.
Так, смотрите.
Значит, гад, гад.
Гад, гад, гад. Можно двигаться.
Значит, первое,
что мы поставим,
поставим второй секрет.
Мы берем, мы берем.
Значит, делали так,
по крайней мере,
15-16.
Вот.
Сейчас можно
отдельно поставить
виртуал.
Виртуал, понятно.
То есть, ставится, ставится
в белярье место,
в медицине, в резиденции,
в параллельной оперативной партии.
И сейчас
и сейчас
давайте сыграть
компанией с главным
аттракционом системы.
Нет, нет, ну потихоньку не тихну.
Ладно,
подсказали.
Да.
Да.
Да.
Да.
Да.
Вот.
Вот.
А?
А это
комплимент.
Класс.
Разработку
с приложением с
по ним
в ВСБ
вот его
Вот, вот.
Есть возможность, что если там версия,
то здесь стена этой большой, она прямо где-то так.
Ну, если у вас есть парка,
все парки у меня есть.
Давай.
Правой ногой костюм.
Костюм.
Костюм.
Да, да, да.
Так, так.
Это что касается...
Кажется, что я...
Аксин токер?
Да, да.
Я просто...
Ну ладно, посмотрим.
Так, так.
Это что касается...
Так, давайте.
Аксин токер.
Да, да.
Я вам скажу, что...
...не надо будет, не надо будет...
...не надо будет в второй очереди свой бомб...
...под...
...проходили.
Там, там.
Здесь...
...как писать...
...купицы.
Так, главный читаемый,
писать более читаемый.
Итак, давайте перейдем...
Все-таки, все решим вылезти.
Сегодня, сегодня, что-нибудь на первый лет...
...закончать дров.
Мы не можем поговорить про проектирование программной обеспечки.
Давайте подумаем.
Вот мы создаем с вами...
Как мы назвали, фиксики аллайт, да?
Вот.
Ну а фиксики аллайт...
Фиксики это популярно достаточно...
...председательом джек, да.
И, наверное, мы задачаемся на то, что у нас в онлайне...
...как фиксики аллайт поддерживает миллион пользователей.
Возможно, детского возраста.
Давайте подумаем, что нам для этого...
...понадобится.
Что?
Отцелить на него галичные галичные запросы.
Да, галичные запросы с запросом.
Давайте виспем.
Монтизация.
Монтизация.
Да, да.
Знаете, что за хура король...
...на которой...
...стоять.
Безопадная.
Слышали?
Да, слышали.
Да, кодовый бас, нямбексов пилин.
Яндексов.
Яндексов.
Кодовый бас 44 га байта.
Да, и...
Да, и сам...
...мемы...
...парку...
Да, да.
Стой еще.
Если...
...станет 10 миллионов...
Да, да.
Если будет 10 миллионов...
...должает он меня поддерживать.
Бинго.
Бинго.
Это тяжелое задание.
Это тяжелое задание.
Да, да.
Монтизация.
Хорошего концепция.
Потому что...
Давайте немножко забегу в прошлое.
Прошлое.
Вот как наш...
...проходу называют.
Да, Снежкова,
Прикладная математики и информатики.
Из каких двух
факультетов она была основана?
Пакет инвестиционной технологии.
Да, первый факультет инвестиционной технологии,
второй факультет управления
Прикладной математики, да.
И он когда основывался ПИМ,
у него была основная аппаратизма,
чтобы мы вытекали
как можно больше всяких
новых инвестиционных вещей.
Но всякого такого.
Да.
И как раз эта вещь еще живет
в какой-то концепции, да.
Но все-таки больше лаборатории.
Но, в общем, надо уметь
запускаться.
И вот они преподаватели,
которые видели пару, сказали, что
при продаже ПИМОСа,
ну, давайте забегать вперед
немножко по чьей карательственной цене,
когда происходит такая вещь
под названием аудит.
И проводит четкая организация
бизнеса.
Присоединивают только то или иное приложение,
какое хорошее качество
нашего фона.
И там, по-моему, было такое, что
на цене зарубили на 50%
из-за того, что не было документации.
Вот.
А как дальше это делать?
Ну, вот так.
Ну, вот так.
colleague.com
Ага.
CORaperated portion
Great.com
Save.
No No
No
No
No
No
Yes
No
Да, нам надо поделиться нитринок и всякое такое.
Вот давайте, у нас уже концепция больше концентрированная,
а отсюда интереснее более техническое.
Итак, я подготовил некоторый список моих советов.
Первый совет.
Читаем книжку?
Первый совет.
Поехали.
Первый совет.
Запускать программу про то,
Манду стоп.
Это первый совет.
Первый совет.
Ну, можно, по-хорошему говоря, всё, так или иначе.
В конце пределы этой программной строки,
вот сейчас уже приложения запускаются через всякие разные кнопки.
Это называется управление конфигурацией приложений.
Это специальные системы, которые позволяют запустить приложения,
приложения под наборы серверов таким образом,
что мы ткнули одну кнопку в графическом интерфейсе,
и там всё автоматически разворачивается.
Тянется структура,
поднимается все приложения и так далее.
Вообще, получается, это целый перерыв.
Да, это первая концепция.
Первый, четвертый.
Ну, по крайней мере, не надо чуть-чуть в ADS запускать.
Продачивать, да?
Ну, глупо, что ли.
Да, это правда.
Да, тем более, ADS лучше запускать приложения в дебаг-моде,
а не в рейдинг-моде.
Ну, по-молчанию, чтобы в дебаг-моде.
Иногда это меняется.
Да.
Писать вот на коленке.
Это, если мы говорим про большой, достаточно, пожалуй,
продукт.
Известно, что по факсу стоишь в гаражах.
Я о этом не спорю.
Либо на Хакатонах.
Если мы говорим уже про большой продукт,
то понятно, что у него уже должно быть некоторая качество.
Так, третий.
Прикроется приложение, да?
И там написано.
Все, вот факс.
Вот эта вот вся штука разбирайте так,
как ее запустить.
Да? Проблема.
И зачастую так бывает в проекте.
Вот палит,
положите на гитаре какой-нибудь,
только количество проектов.
Во многих вещах вы видите рейдинг.
Рейдинг – это что?
Палит, прочитай меня.
Проходит английская цитата.
Вот.
А так я уже не стою.
Отнялся учетом того,
какие нейрофетки сейчас есть.
Я думаю, что сейчас можете направить какую-нибудь нейрофетку
на код нашего флота.
Примодически напишешь эту мутацию.
Но лучше, чем, блин,
чем сделать это видео.
Так.
Ну, четвертый.
Не защищай инфигенцию.
Пусть все люди имеют долг про всему.
Вы же такие, а ты препозначен.
Нет, конечно же нельзя.
Все.
Значит, в чьих папирах,
если мы говорим про российскую регламентацию,
регламентацию,
вот по-хорошему говоря,
есть такой закон,
стоящий от РФП.
Немножко проявить составляющих
закон о персональных данных.
О котором я говорю,
потому что по факту персональные данные
должны быть защищены
и никто их видеть не должен.
Тут надо почитать
Просто я почему говорю?
Что некоторые приложения сейчас очень просто штрафуют
за то, что они нарушают консерваторизацию.
Извините.
Если бы был штраф, я бы не делал,
спасибо вам.
Сто тысяч, то ли, по-моему?
Да.
Я, по-моему, взял с ним
годовый рост 60 и штраф.
Долго?
Ну...
Хотя кто-то в том же году штрафует,
если не могу теперь.
Так.
В общем,
это плохие советы,
вот такие плохие.
Так.
А теперь давайте задумываемся
этот вопрос про документацию.
Смотрите, есть замечательные устройства.
Это либо глюкометом, либо лактометом.
Лактомет представляет молочный
слоток. Вот вопрос.
Который я хочу упомянуть. Почему документация
вот этой маленькой замечательной штуки
может стоять 50 штрафов?
Для одного ЭК.
Для одного ЭК.
Описать крайние случаи.
Какие крайние случаи здесь могут быть?
Я не могу упомянуть.
Для одного ЭК.
Нет, для одного ЭК.
Чтобы вытащить педагогический
и атероничный.
Распитывать периодических рисков. Смотрите.
В чем проблема этой штуки?
Посмотрите на картинку внимательно.
Во-первых, она медицинская.
Во-вторых...
Смотрите. Да.
Мы прокалываем пальцы.
Мы забираем кровь.
Какая цена проблемной истории
с кровью может быть?
Заражение крови.
Нужно описать все эти тонкие моменты,
без которых просто
продукт не может быть выпущен.
А с учетом того, что
здесь еще есть тестовые полоски.
Правильно надо по факту сверить
эти тестовые полоски.
Сопустить эту штуку.
Правильно прописать процедуру дальше.
Потому что, скорее всего,
когда вы будете прокалывать эту штуку
в первый раз, твоя норма не проходит.
Хорошо. А что это?
Вот эти тесты прописываются.
Это тесты где, кажется?
Не-не-не, там в картинке.
А что?
Не в картинке, конечно, нет.
Это было было в начале.
Нет, мы ожидали по картине.
И обязательно там все карактеры,
все обзабудьте.
Что-то не работает.
Я не знаю.
В общем, понятно, что
нужна таза корейского нужна.
Так, нет инфигенции.
Почему даже вот такая память
прописана?
Так, ну смотрите.
Вот это вот у нас есть
прибор.
Но вы же понимаете, что он
внутри него?
Не особо.
Не особо.
Но все равно мы должны придумать
какую-то достаточно
лаконичную вещь,
для того, чтобы она
пошла в аппекод.
Значит, смотрите, я не знаю,
вы знали мышка или нет.
Вот здесь у этого платформе на самом деле
достаточно хорошая архитектура.
Потому что, видите,
я не знаю, вот мышку,
вот смотрите, вот здесь есть
всасывающее отделение.
Да, то есть
берем кровь,
и она сразу всасывается.
Да, есть такие
не особо лучшие транспортные,
которые, в деле, имеют различные штуки.
И соответственно, забор крови
и правильный архитектурный станок
вот такая течущая геморройя, а штука
достаточно дорогая.
То есть, прежде чем разработать эту штуку,
мы должны понять
из каких со стороны частей,
и возможно разработать первый прототип,
который потом мы можем
вот обкашивать.
Вот давайте пример. Мы берем сюда
какой-то проект
этой машины. То есть, как машина будет выглядеть?
Что внутри нее будет?
Какие со стороны части
будет ее? Какие соотношения между колетами?
Какая
величина колеса?
И это надо все достаточно
хорошо прорабатывать.
Так, и потом... Видели вы
когда-нибудь первые машины, как они увидели?
Так, вот. И, допустим,
если мы давайте поговорим про кодочный
автомобиль.
То есть, формула 1 смотрим?
Ну, отпущу я как-нибудь.
Ну, не, не буду.
Ладно, последний, я думаю, как она вообще
будет выглядеть, по-моему.
Ну, я представлю, как она будет выглядеть.
Так,
посмотрите, в чем проблема?
У тебя современные машины формула 1?
Да, классно.
Можете... Я попытаюсь
видеть, как все делается.
Колоба,
колоба делается, да?
Просто, смотрите, раньше машины
не были не так, а появился
вот такой вот, такая вот штука,
которой многим не понравился.
Она называется кого?
Она, кажется, застает выход
в календарь, как мне не может быть.
Да, она спасает жизнь, потому что
обычно, когда фермы
залезают между собой, обломки
залезают, и вот это вот вон...
А?
А? Что?
Вот так, как раз, Хейкс.
Вот, замечательный кейс,
краш-контроль.
Вот, я ему говорил про стерильные
геонаховис, там вообще зашипано,
там еще и стекло обыщипано, потому что
машина у тебя, как раз, 40 км в час.
Просто не повалом ездит.
Да, да, да. Ну, в общем, нужно хорошую
эскиз, нужна хорошая проработка с
достаточно большим количеством
особенностей.
В деталях. Вот.
Только, когда мы пишем ПО, вот такой вот эскиз
нафиг не нужен, да?
Мы, типа, располагаем, там машинка
будет, наш криф
будет располагаться в том или ином месте,
да, как-то банки вращаются.
Понятно, что такой прототип, значит,
здесь должен быть.
Да.
Да, ну, давайте,
давайте именно так. Вопрос,
кто понимает, что это ООП?
Да.
Вот, да.
То, значит, кто класс.
Класс.
Класс, да.
Да.
Вот.
В общем, смотрите.
Камеры, действительно,
можно устроить в эскиз небольшого
программного подруги.
Значит, карту из этих картин
собрать. Вот, на самом деле, тот
или иной класс.
Вот. И у каждого класса здесь
записывается либо набор
полей, его, либо
набора метров, нет? Похоже
к первому продвижению. Причем связь
между этими аккаунтами тоже явно
годная. Да, то есть мы видим,
допустим, что в аккаунте
у аккаунта есть владелец, один.
Да, либо нет
владелец. Вот. При этом
у аккаунта есть
карточка, есть двойка по карточке
папорской системы этой припитки и дебютова.
Да, мы видим с вами,
допустим, по этой стрелке я показываю,
как ее нужно читать, что, допустим,
припитка этой карточки,
клафа
этого. Обычные карточки.
Вот. И у них есть особенности.
То есть, смотрите,
эту диаграмму достаточно удобно читать.
Так, вопрос. Тут есть математики?
Да. Вот представим себе, что
клафа – это вершина графа.
Тогда каково, типа, этот граф?
Каково, да. Было бы неплохо, если
бы он был планаром.
Да.
Да. Не желать там циклическим, чтобы
не было вскрытия.
Но, смотрите,
по крайней мере он планар.
Да.
То есть, это хотя бы можно прочитать.
Вот. Немножко когда мы поговорим
о диаграмме про архитектурные факторы,
мы, чтобы вам говорить, как это
можно воплитно это понять.
То есть, математики. Вот такой
стрелкитик, что плюс более менее понятно.
То есть, ты на самом деле первый
диаграммный проект, и ты хочешь рисовать
что-то потом.
Да, для своего продукта.
Для своего проекта.
Да.
Это не планар.
Да, это синенько.
Да, вопрос. Хорошо ли здесь
прототип?
Да.
Смотрите, да,
какие-то проблемы в центральной штуке.
Это университет.
Это университет.
Смотрите, проблема этой штуки
на самом деле в большом...
На самом деле
здесь университет
играет роль так называемого
ГАДу
ГАДу фобового.
То есть, это штука, которая владеет всем.
Наоборот.
Наоборот.
Не все централизовано.
То есть, когда мы будем говорить про антипаттерны,
то это вот те антипаттерны, которые
может прийти. Давайте все
изобилим в одном классе.
У нас, очевидно, большая антипаттерна, один конкретный.
Да, это так.
В одном классе, в одном планаре.
Здесь огромное количество деятельств, которые ты кофрировал.
Да.
Давай попробуем каким-то образом
подкарактеризовать. Хороший у нас прототип
или не очень?
Но давайте посмотрим на некоторые примеры
популярных сознательных систем
и архитектуры, которых можно смотреть.
Первый пример – это
Inux, собственно, который
нужно смотреть.
То есть, стоит все объединено на некоторые
иерархические наборы уровней,
один из которых может вызывать более реже.
То есть, детально это все будет проходиться
на курсе по операционным системам.
Поэтому, в принципе,
я не буду тут уточнять, но здесь много уровней
в архитектуре. Один раз,
второй – нижний уровень, и так далее.
И дальше, нижний уровень, у нас тут
Hardware.
ЦБУ, память,
скидки, командные сроки
и секретный интерфейс.
Ничего хорошего?
Да.
Так, следующий пример.
Кит.
Тема контроля векции. Здесь тоже все по папочкам
раздвинул. Плюс
здесь еще цветовая гамма используется.
Гамма рисования. То есть,
есть линия с разным типом файлов.
Но, в принципе, красиво.
Да, то есть, в принципе,
в проекте
можно реализовывать разный способ.
То есть, в проекте визитирования.
Вот еще одна система.
Это уже такая
контрольная система. Там название Prometheus.
Она необходима для того, чтобы
оперативно реагировать на какие-то проблемы.
Да, это система мониторинга.
Ну, вот примером.
Я не знаю.
Представьте себе, что
мы сидим здесь. Нам-то тепло?
Да.
Ну, потому что он садушен.
Да, да.
Вопрос.
Как мы теперь можем измерить?
Температуру.
Температуру, температуру,
воздуху и так далее.
Ага.
И мы можем отслеживать эти характеристики
в режиме реального времени.
Для того, чтобы потом
каким-то образом на них реагировать.
Читает 30 раза и так далее.
И вот как раз такие системы нужны
для того, чтобы это можно спокойно было отслеживать.
Вот.
И вот у нас есть система реального времени.
И тут один из серваков от Prometheus.
Как мы можем это понять?
Ну, да.
А тут я сказал.
То есть, представьте себе.
Ну, да.
Представьте себе, что сервер каждую секунду
или каждый там минуту отсылает яичку
в определенное место.
Я не пойду. Здрасьте.
Этот бас, он не отдалает какие надо.
Все, сервер того.
По какой причине он того,
надо еще, конечно, разбираться.
Примеры системы.
Я вообще не могу полазить
так, потому что в этих камерах
смотреть примеры системы, которые есть.
Да, ну, даже без отечественного.
Это точно того, что
это точно хорошая структура.
Вообще, у Одинэкса это точно хорошая
структура.
В том плане, что они представляют такую концепцию
под названием конфигуратор.
Которая, ну, платформа за платформу.
Ну, представьте себе
этот пол, на который вы
хотите что-то построить.
И реально так можно построить.
То есть, они дают такой механизм.
Правда, язык там, представьте себе, русская
джалочка.
Вот. И язык вот такой.
Ну, вот.
Ну, то есть, смотрите.
Вы знаете, что, на самом деле,
это просто красивый
контент под Одинэкс.
Ну, это ничего интересного.
Ну, что да.
Документы оборотов.
Тоже идет
через Динэкс.
Выводы кубейки тоже
оформляются через Динэкс.
А.
Да.
То есть, много чего делается
через Одинэкс.
Ну, просто две, два, три.
Невозможно
ехать с
платформы.
Ну, то есть, видите, тут прямо можно
отделить все основные части
продолжения, которые можно делать.
Так.
Ну, вот такие примеры
из системы есть.
Так, давайте поймем.
Так.
Так.
Так.
Так.
Смотрите, тут просто есть такое
помощь к общению.
Так.
Смотрите, давайте поговорим про архитектуру.
Что же такое архитектура?
Первое.
Структура того продукта,
который мы с вами хотим
выпустить в рамках этих
объектов.
То есть, вот так.
Причем архитектура может быть хорошей,
может быть плохой, то есть
может быть все что угодно.
Ее может быть лучше.
А второе
это структура, которая изучает
то, как создаются
деленные блок.
Вот. Это касательно
именно технических составов вещей,
то уровни на эти разработки
на более высокий уровень у
тех, которые смогут спроектировать
систему, которая вымешивает
нахороший нагруз.
Вот.
Давайте поговорим о каких-либо
архитектурах.
Первое, что мы можем сказать, это
эффективность системы.
Какие системы чтения
ты? Первое, это надежность.
Вот давайте поймем,
а что у нас
может подразумевать для нас
под надежностью?
Не будет падать.
Не будет падать, братан.
Да, вполне.
Пользователи довольны
будут дать.
И дальше более того.
Есть такое понятие, как
зрелость. Лучше его переводить
в английском языка, на английском
фигуре. Вы чуете.
Давайте вспомним о какой-нибудь
апаритм, который связан с
надежностью.
Стабилизация.
Надежность друг у друга.
Нет, не знаю. Обычные надежности,
как швейцарские чинцы.
Ну, в общем-то, нет.
Да, но это сказать так,
что эта система
живет давно, она давно
на рынке, ей будет достаточно
большое количество пользы.
Смотрите, в этом случае
у нас есть примерно надежный систем.
И тем более она стала более
четвертой в 22-м году.
Это реклама?
Нет, это не реклама.
Боите нас.
То есть сейчас компании занимаются тем,
что они просто берут и подозвещаются
на 1С.
Вот, значит, смотрите,
первое это оказывается точность,
второе это восстанавливание
между системой медицинского пала,
да, то она самостоятельно может
восстановить.
Такое вполне возможно,
потому что система выпускается не на одной машине,
а на тысяче машин.
И вот как раз появился такой предмет
про параллельную и распределенную систему,
в которой будут обматываться
ими, например, телеконизмы,
так, чтобы система не упадала.
И третье, это выдерживание.
Ну, это смысл
нашего.
Значит, второе это безопасность.
То есть теперь у нас
система
мощного отхода.
Это замечательно.
Да,
нам нужно посмотреть, какие атаки
могут быть на системе.
Пример, небезопасная система.
Есть она на коне-литературе.
Есть функция
дебаб.
Опа.
Птица.
Да,
то есть проблемы.
Да,
вопрос.
Каким образом еще
полезна система небезопасная?
Есть еще?
Например,
так, чтобы ее
взломали.
Смотрите.
Пример еще.
Смотрите, как
до недавнего времени
приняли в пороге.
Чисто в миде.
Да, кстати,
вот за счет безопасности системы,
у меня, по-моему, была
подозрительная
подозрительная действия на аккаунтах
GitHub.
И что мне сделала GitHub?
Спросил все точки.
Второе, он
прислал ссылку
для перегенерации проводов.
То есть они увидели, что есть
какая-то подозрительная действие на аккаунтах.
А что в этом подозрительное?
Они не знают.
Возможно, у них
как-то возник зашли и все.
Это, по-моему,
должно быть в сторону.
И возможно, что
в сайте есть даже такая
что если система
собранная не очень хорошо
образом,
то вопрос
про тому, по ответу
по продолжительности
ответа для запроса
можно понять, насколько бескидно
к слову системы или нет.
Так, допустим, если у нас запрос
прошел 50 миллисекунд, значит, наверное,
все не очень хорошо.
Но если, допустим, у нас система тупила
в секунду и после этого отказал
пароль, то, наверное, мы прошли
какое-то дополнительное количество
ВДДС.
Значит, у нас теперь до 10 секунд
причем...
Да, они припланируют случайное
отмечение, которое
подходит до ВДДС.
И вообще сейчас
просто такие уничтожения,
которые можно реально ослеживать.
То есть какие-то уничтожения,
чего Насташа Большой
не попало в историю,
что она лично обладает.
Если что, присылаю с ответа.
Так, ну и те,
где это происходит с сферой.
То есть насколько она
быстро и немеренно обладает.
То есть главное, чтобы система
не мягкела по поводу качества времени.
А четверто, это
постанирование.
То есть насколько мы можем постанировать
наши приложения. И это бывает
по стабилизации немножко вперед.
Первое постанирование
так называемое стабилизация.
Вот у вас есть
телефон, да?
Готовимся на нём
и играем в игру.
Телефон влагает. Чего мы делаем?
Садимся на логику.
Нормально.
Скорее всего покупают
более мощный телефон
для того, чтобы играть в эту игру.
Ну либо про ПК. Нам не хватает
ПК для наших крысов.
Покупаем более мощный ПК.
То, что мы покупаем ПК,
но вопрос в чём?
Можно ли мы до бесконечности делать?
Каждый раз покупать телефон, который
два раза мощнее.
Проблема в том, что
если, допустим, сыграть
тему, нашу фиксики
онлайн запускать достаточно
на одном мощном компе,
наверное нам нужно будет
где-то миллион гигабайт
оперативной памяти.
Не миллион, а пять тысяч гигабайт
оперативной памяти.
Ну что, есть такой ПК в реале?
Ну, пять тысяч
десять терапевти против
мебальцев.
Да, такое у нас тоже
есть.
Наоборот,
может быть, можно
покупать?
Нужно в этом
устоять для ПК.
Я думаю, в норме отъём с ПК нам
не походит.
Поэтому
мы теперь шли
периодонтально, что делаем.
Она заключается в том, что
мы берём, покупаем не на один мощный
ПК, а покупаем десяток
из слабых ПК.
Ну,
десяток средненьких ПК
этого всего
нечисто ухватит для того, чтобы управлять
контрольскими.
Наоборот, тут появляется куча
подводных камней, связанных
с параллельными всякими
усилиями ниже с ними.
Да,
но про это тоже
не поделим в курсе.
Значит, это что касается
системы, из таких числей состоит.
Давайте по блоку.
Нет, тут обычно следующее
коризонтально, это когда у нас
куча по параллельной решает
огромную задачу. Ну, допустим,
пример, лезем в ПК,
получим
популярные мемасики.
Полет,
Петя, Коля,
Мира, Маша, Наташа.
Семь человек.
Им отвечают разные машины
на этот запрос.
То есть стоят, допустим, не одна машина,
а девять параллельных машин, которые
чисто занимаются выдачей
мемасов.
Да, еще идеально
разных местах, потому что у контакта
была однажды проблема, когда
проба, которая сфитерала в Москву
переделалась, что-то так проливалась.
Вот.
Так,
все по отличию.
Работа.
Так, теперь
тонкий момент
это система
называется кипкой,
где-либо ее можно легко
внести в функционал,
не меняя
достаточно большой
достаточно большого
коричневоходной пасы.
Второй, система фитра, где-либо в ней
можно быстро найти причину
в ошибке, уход
к корневому проблему.
То есть архитектура достаточно хорошая,
что мы попасть можем зайти в определенное
место и быстро внести причину
к этой проблеме.
Третье, мы можем настроить
систему в маленьком образе.
Смотрите, первый пример,
который мы можем настроить,
настроить систему в подпользовании.
Да, я не знаю.
А кто-нибудь играет в дотанк?
В дотанк кто-нибудь играет?
Либо в StarCraft.
Вот, отлично.
Там есть такая штука,
под названием A.B.
Да, вопрос.
Теперь вы будете
просто тут по автомушке прокидываться.
Это быстро?
Нет.
Отлично.
Да, но если взять, допустим,
назначить какие-то подки,
от первого подки и от одного,
второго подки и от второго и так далее,
то количество действий, которые мы делаем, намного быстрее.
И это по факту настроить по сути.
Либо, допустим, кто-то из вас
занимается монтажом видео.
Соответственно, мы можем
настроить себе сцены для монтажа.
Вот это называется
настройка подпользований,
выписать систему подпользований.
Взять какой-то пиццу,
и не брать.
То есть мы можем настроить
эту систему под задачей.
Допустим, она
бы занимала такой-то задачей,
выдачи
обиделопоколка.
Но вопрос,
если сейчас все поведут, смотрите,
я не знаю, финал какого-нибудь,
чего-нибудь, как чемпионата мира,
то что у вас с вами произойдет?
У нас есть те, кто решают упасть.
И вот как раз под эту задачу
мы можем автоматически, допустим,
сделать перетрансляцию
на текстовую,
на текстовую транзляцию.
То есть такое
вполне можно делать.
Я вам скажу,
где вы можете идти
вот-вот для начинающих,
то это автоматически дает нам
птическую систему.
Так, понятно, что такое гиперсис?
Ну, по-моему,
тогда контакт сцепился,
контакт.
Да, отличный пример
контакта,
потому что контакт дается в одном месте.
И причем желать какие-то контакты,
которые не входят в контакт в одном месте,
чтобы не только разработчик
не мог носить изменения
в этой констанции.
Допустим, у нас
только раз есть книжки, а?
И вот представьте,
у нас заходят, у нас стоит сайт
диагностики.
Да, есть такая компания
под названием «Ягодки».
Возможно, что вы мне еще не заказывали даже.
И, представляете, у них «Ягодки»,
«Черная пятница», да,
скидки издоров,
просто вы что, думаете, что люди идут в ход
и будут эту плату с баннером
редактировать в ходе?
Ну, нет.
Нет, нет, нет.
Они дают это все редактировать дизайнерам,
которые дизайнер могут вкрутить туда
картинку, она фонетически отравится.
И теперь полный шайм задается.
Так, ну, опять-таки возвращаемся
к нашему примеру.
Типа или это система?
И вообще, является ли университет
типой системы по факту?
По факту университета стратегии системы
не играется.
Потому что поздно она
или появляется курс по выбору,
но с составлением индивидуального
черного муана
это превращается в какого-то
бакханалия, что
ничего не делаешь.
Да, смотрите, дальше
идем, двигаемся.
Расширяемая система.
Что касается под расширяемой системы?
Эта возможность добавить
нового функционала
достаточно легко.
Причем, смотрите, в чем ответственность.
Чем вероятнее изменение, тем
меньше усилием мы должны прикладывать
к этому функционалу.
То есть перекрасить кнопочку
наверное, должно быть делаться
одной строчкой кода.
Или вообще не в отношении
никакой строчки кода.
Если перекрашивание кнопки
перепиливается
блин, в 50-х год
наверное, делать что-то не так.
Например?
Да, либо
просто как можно перекрасить
как можно перекрасить
можно назвать свет этого
прямоугольника, который у нас есть.
Или вот там пинцелер перекрасить.
Например?
Ну да.
В общем, тут есть
два...
Да.
Что-то там положено шерем,
это не шерем,
это не эволютический
ограничительный пик.
Это вот этот перевод
на пик.
Ну, смотрите, например,
как привязать кнопку для
оновления встанущих стиль.
Ну, оновление встанущих стиль
в базе заказа.
Ну, а если приходится
предписывать весь год,
то скорее всего тот пик мы расширим.
И вот смотрите,
один из примеров расширения
чисто в годовой базе
является расследованием.
По факту,
потому что мы берем
тот функционал, который у нас есть,
и по факту его расширяет
как каким-то дополнительным
функционалом.
То есть у нас есть фигура,
мы можем сказать, что фигура это является
прямоугольником, а многоугольник является
фигурой.
Но у этого примера есть подвох.
Ты не поймешь, какой подвох?
А?
Да.
Тёртый вэкс.
У него есть проблемы.
Типа, если мы начнем
вычислять площадь этой штуки,
то формулу поменяется.
Вот.
Ну, оцените фигуры.
Я думаю, что
да, может быть,
да.
Ну, да.
Может, что-то поменяется.
Вот.
Давайте еще поговорим
про фигуры 4, которые у нас могут
протестировать. Мы детали будем
говорить о тех, как протестировать.
Да, мы тогда затеряем детали
протестирования.
Сопровождаем, если мы будем говорить
про сопровождаемость, если мы будем говорить
о температурной поставке.
Вот, еще есть такое.
Была.
Вот, есть еще другая масштабируемость.
Масштабируемость команды разработки.
Это значит, смотрите,
мы работаем с вами над
фиксиками нашей, с помощью
человека.
Что означает, что наша система
масштабируемой
количества работчиков?
Не, ну, давайте
все-таки не будем заниматься классической
русской активизации, да, а займемся
нормальной активизацией.
Набрать новых сотрудников, организовать
систему обучения.
Для того, чтобы достаточно
новые подписи
могли присоединиться к нашей команде
и такие, вау,
мы сейчас придем фиксики версии бановать.
Сейчас
снова мы инфекционалами
делаем мир. А, метапсиену
с фиксиками сделаем.
Это, короче, штука.
Вот представьте, мы все сидим, да?
Мы все сидим здесь нормально,
я не вижу ни у кого
я рожду.
Шлем виртуальной реальности.
Вот, с этой штукой происходят некоторые
виртуальные реальности, где люди там
устроят дома,
устроят дома,
бюджетные классы, вот это вот все.
И это все, вот они живут
как будто бы в одном внутреннем мире,
в котором они
вон, по маску выставили.
Вот пример штуки виртуальной реальности,
который был такой, где вселенная,
это та самая вселенная
Гарри Поттера, в которой, я думаю,
он споказывает, что вот это Шамальки, да?
А когда там раскрываются, там вот достаточно
все большое.
Да, вот, да, то есть, как бы не те Шамальки,
которые были вдали.
Заходят в кабинечку,
взвертывают,
и попадают, неинтересно.
А? Ну, поеду,
я вам описываю для них, да?
Вот, и то, что, типа, это вдруг, так,
вселенная, которую вот пока никто
не видит по парам.
Я ржусь, я могу поиграть, чтобы это вселенная
была.
Так, смотрите,
критерии не удастся на статуру.
Мы поговорим про критерии.
Так, что критерии?
Жопы.
По парту костыливания
мы меняем по одном месте.
Что означает?
Мы смули костыль, да?
Это значит, что нам надо сделать?
Чтобы дерево не упало.
Поставить костыль в другом месте.
Да.
Ставить костыль в втором месте,
он, опять же, полностью не удерживает,
потому что это такая оптимальная точка была.
Ну, я не знаю, может кто-то из вас физику
знает, да, что идея,
что это оптимальная точка опоры,
в которую тело не попадет.
Ставить вторую точку, оказывается, она поставит вторую,
не хватает, ставить третью есть.
Ставить четвертую, пятую, пятьдесятую,
с рождаем.
А?
Да.
Давайте.
Да, меняем по второму месте, меняем по другому месте,
меняем по второму месте.
По этой теме,
вообще, я не по второму месте.
Одно из мнений
приключено к тому,
что максимальная вспочка изменений.
Так.
Как вы думаете,
что им может быть, если мы
поменяем по второму месте?
Все поможет.
Да.
Крупкость.
Пример, крупная
система, вы видите на экране.
Отличный пример.
В общем, смотрите, сразу скажу,
что эта картинка была найдена
в поисковике этого картинка
по названию
«Работает метро».
Ну, собственно,
понимаете, вы видите
что-нибудь, а то все полетит в чертям.
Я вообще никаким
консультантом это не помог.
Ну,
через другой хаб.
Так.
Наверное, не так было
хорошей картинке.
Так.
Третья история — это неподвижность.
Мы хотим какую-то функцию переиспользовать.
Слева картинка.
Слева пример подвижной системы.
Последний. Поехали.
С права пример неподвижной системы.
Значит,
пример неподвижной системы из года.
Вопрос. Какое количество
орбитных функций передаете обычно?
A, B, C.
Ну вот. Представьте себе,
что это код,
в котором функция передается не более
чем два аргумента всегда,
а это какая-нибудь функция, в которой передается
15 аргументов.
Ну да. И, понимаете,
вам надо тащить этот подаж
и его продаскивать во все
необходимые места.
И вот эта вот штука,
ее по марту, вот эту функцию
вообще никак не переиспользовать.
Из 15 аргументов тысяч
получали, и они не подразумевают
использование единицы.
Эти моменты перешла.
Я серьезно говорю.
Я знаю. Я знаю, что ты имеешь в виду.
Вот. Не подвижность.
Надо стараться делать так, чтобы
модули максимально были переиспользованы.
Так. Давайте дальше.
Так. Кровать подышим?
Пять вариантов.
Хорошо.
Практически принципы приема.
Так.
Итак.
Первая концепция, которая
запечатает следующее, что
она называется hyperthesis
low cap.
Hyperthesis – это
высокое сопрешение внутри модула.
То есть, смотрите, у нас есть класс,
и надо стараться проектировать
класс таким образом.
Класс – это либо функции
таким образом, либо модули
фальта. Таким образом, что максимальная
функциональность под решение определенной
задачи, она была именно
внутри этого класса.
Однажды классами
должна быть слабая связь.
То есть, ну, смотрите, вот говоря,
пример. Вы живете
со своим соцерном.
Пример хайка.
Вы живете
со своим соцерном, либо еще
в керне, и ходите
тук-тук-тук. Дай пачку сахара.
Пошли дальше.
Тук-тук-тук. Дай еще что-нибудь.
Дайте пачку.
Тук-тук-тук. Дай еще.
На, типа, маркер.
Вот это была
хайка.
Когда, собственно, мы решаем
не свою задачу, мы ставим
себя максимально проектировать
другим делом.
Вот. И стараемся концептироваться
на решение, на которое каждый класс
старается концептироваться на решение определенной
задачи, и при этом снять между
молодыми тоже максимально проектироваться.
Вот тут картинки, в принципе. Какая-то
картинка больше нравится здесь.
Правая и нижняя.
Вот.
Вот.
И мы тоже видим, что хайка, конечно,
корректа приводит к оказыванию
готовства.
Как раз в университете, примере университета
у нас был хайка.
То есть университет от тех,
кто видел, причем в самом университете
опять огромное количество функций
было.
Вот.
И как раз у нас будут практически
примеры того, чтобы посмотреть
именно хайка, конечно.
Я не знаю, тут видно или нет,
есть разные связанности
между этими всеми штуками.
Давайте, значит, проверим.
У нас два слабого вообще
штуки.
Да?
Есть еще так называемый дейтэкап.
То есть когда мы
используем какой-то один
артиментер, который вызовет
одного вкладка и другого класса.
Самое обратимое,
это что?
То есть у нас есть два
модуля,
у которых одно и то же содержание.
По-русски это называется
дублирование подраж.
Дублирование подраж.
Вот. И как раз
между всеми этими историями есть
разный уровень градации.
Я не помню, то ли пятый, то ли шестой
уровень, включая экстерпел так.
Это когда у нас два класса
пользуются главами перемен.
Да.
Главное не константов.
Какие-нибудь объекты, которые
живет на обычном измерении.
А?
Да.
Потому что проблема в том,
что бывают объекты, которые
нельзя делать так, чтобы
было два объекта.
К примеру это часы.
Да?
Но представьте, сейчас время
51.
А кто-то сейчас придет сперва
и скажет, у меня
20.05, с чем вы меня задерживаете?
Вот. Часы расположены.
То есть, есть проблемы.
Вот. И как раз
вот патроны, которые пытаются решить
эту проблему в лишнем количестве объектов
более чем в одном измерении.
Вмешать с удовольствием перемен
это не очень хорошо.
Да. Не очень хорошо. И специально
патроны.
Часы. Да.
Да. Стинглтом он называется.
Хотя у стинглтома
есть проблема в том, что он может
переселиться.
Так. Смотрите.
Как вообще
разбивать эту сущность
измерения удовольствия?
Вот. Система. Нам ее надо декомпонтировать.
Для этого мы сначала делаем
большие компоненты. Допустим, у нас
авторитетная координация этой темы.
Система выдачи контента.
Система патронских конвертов.
И так далее. Какие-то большие блоки.
А потом каждый из этих больших компонентов
пытается разбить на кладку
по факту для того, чтобы максимально выделить
в ней общий
модуль и общий блок.
У нас
две-три графа на георгинесу даем.
Где?
На сайте.
Вот. Нет.
Это чисто образ на точке интеграции.
Там связи какие-то более
сложные.
Вот.
Тут тоже показывается перелет, как это называется.
Система на подсистемы. Дальше
у нас подсистема на портеты.
А после этого уже внутри
портеты мы разбиваем на класс.
Вот смотрите. Вот это вот шарик.
Как раз.
Очень сильно похожий на диаграмму компонентов.
То есть такое прямо можно увидеть.
А вот эти вот видите
входные и выходные точки, они обычно
называются портами.
Ну по факту, знаете,
что порт?
Корабельный порт.
Такая
штука, в которой есть много
стопорочных мест,
куда можно поштабовать порт.
Когда?
Приблизительно порты именно порт.
В плане компьютера мы есть
на аэропорту приблизительно таким же образом.
Так.
Пример эко-системы.
Пример связанных компонентов.
Вот прописать надо так, чтобы
микро-сервисы реализованы
по Uber.
А?
Каждый
источник,
каждая свершенная долога,
соответственно, такой-то компонент.
Нет.
Да, если можно анализировать,
тут некоторые компоненты рассветы между собой,
некоторые компоненты прямо
связаны между собой.
А?
А я не знаю.
Так, можно посмотреть исходный код,
построить диаграмму компонентов.
У нас теперь есть замечательный сценарий.
Это
кто сделает даже, возможно,
тинг-бонусы и баллы.
Вот.
Значит, смотрите, как можно увеличить
лекарство.
Тринь-бой, точнее, уменьшая связку.
И это есть замечательная концепция
под названием цитонимент.
Смотрите.
В общем,
для математики,
которая сделает из себя,
по упирательной зависимости кода
не должно быть полного графа
на трех вершин.
Да.
Да.
Смотрите, если план А
сняется, то на аклате В
просят аклат В,
что-то знает аклате С,
о том, что делает аклате С.
Кажется,
можно мы будем сменить аклату.
Да, есть ключи, когда должен.
То есть это, допустим, там
какие-то стандартные библиотеки С
плюс-блюс, да,
либо стандартные библиотеки ДОК.
Но когда-то мы имеем чего-то лучше,
поэтому это должно быть. Да.
Ну, то есть, понятно, что эти законы
не точные, они все эмилистические,
которые представляют актуру.
Значит,
чтобы было понятно
на картинке,
вот так выглядит закон диета.
Давайте всекрую картинку.
Да, смотрите, мат обжиг
обращается к
какому-то полю нерву.
По полю нерву обращение идет
к полю токс. То есть A
B, A связывает с B,
C связывает с C,
токс с C связывает с D,
тук, тук связывается
с четвертым, с пятым
Стрэнджерс.
Фильм,
там что-то.
Главный актер и главный актер, там,
не знаю, что я говорю, в каких-то фильмах
еще снимается и так далее.
Это не очень хорошо выглядит с точной
зрением, да, потому что
она на тобой идет, и что она делает.
Не-не-не, я понимаю,
это нет, а может быть под комментам,
лайкс и так далее.
Нет, что-то было бы логично, как бы интервью.
Мое лучше токс со стрэнджерс-нервом.
Ну да.
Может быть, по вам в
переводе мой артист не говорит,
что-то.
Вот, и прям,
как его можно мешать. Вот, смотрите.
Пример.
У нас есть мит, который
работает, владеет стрэнджером
и владеет стрэнджером.
И мы по факту говорим,
вот этот объект получается,
этот объект, и начинает
писать информацию.
Скажи то-то, то-то, то-то.
А нужно, значит,
решать все это в двумя способами.
Первое,
это взять,
сказать, пожалуйста,
и телегировать это все
на фрэнда, на фрэнда
и вести пункцию произвания
заставить сообщение.
И тогда по факту друг
будет являться медиатором, который
будет перенаправлять эти сообщения
на стрэнджер.
Второй пример, это следующее,
что мы
возвращаем ареал
на главную.
Он говорит, мне надо познакомиться
с незнакомством.
По предыдущему незнакомству. Отлично.
Тогда артист уже будет
говорить о том,
что мы будем вызывать
передачу до африк.
То есть, тут важно понять,
кто у нас главный в этой
истории.
То есть, либо мы говорим,
что у нас этот товарищ
на фрэнде будет, либо мы
будем общаться с кем-то
взаиномеренно.
Но это, как обычно,
вам надо поговорить
с кем-то, с каким-то третьим
лицом. Вы можете
заверить это каждому
товарищу. Пожалуйста,
так обычно делают ненеджеры.
Вот. Я могу
такие главные и берем на себя
ответственность.
Нет, тогда
первый,
это плохой вариант, когда у нас
этот антиметр нарушается. Мы просто можем
решать во двумя словами.
Либо мы телегируем эту задачу
кому-то другому человеку,
либо мы берем это все на себя.
А первым у нас получается, что
есть мы,
мы функциями
делаем свое визиазм, делаем следующее.
Мы говорим, окей, дай лицо
фрэнджера, и я
напрямую обращусь на хобби
полнара.
А во втором случае мы делаем более
целикатно.
Мы говорим, окей,
пожалуйста, дай мне
заставить вот это сообщение
сюда.
А в третьем случае мы говорим,
следующее,
все, дайте мне
звонить.
Я хочу, следующее,
не доставлять сообщение по одному,
а просто говорить по приветствию
его, пожалуйста.
И тогда товарищ фрэндж начинает
заставлять этот сообщение.
И у нас вставляет пакет,
который мы отправляем
фрэнджеру.
Фрэнджу говорят, либо мы
написать себе.
Мы пишем письмо
кому-то.
Мы можем написать письмо кому-то
и через почту его начать отправлять,
либо мы попросим
человека, который за нас напишет
это письмо.
Человек, который за нас
напишет письмо, это третий случай.
Человек, который
мы сами напрямую
пишем письмо и используем
только фрэнджа
как отправку, это второй случай.
Каждый из этих случаев
можно реально использовать свой
взгляд в цель.
Да, в зависимости
от того, на кого
обязанность мы перекладываем
по глухам,
на нас или на фрэнджа,
на фрэндж.
Вот.
Это достоинство, как
объединить этот элемент.
Давайте
посмотрим.
Через этот момент мы с вами
рассмотрим несколько абреатур.
Это соль,
это драйв,
это чипляк.
Мы
на эту концепцию
есть
фрэндж, который можно посмотреть
на фрэндж.
