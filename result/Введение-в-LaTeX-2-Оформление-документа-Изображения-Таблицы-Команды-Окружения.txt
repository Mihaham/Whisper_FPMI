так ну сегодня у нас второе занятие полотеху в рамках нашего курса и вот
примерно чем собираемся сегодня говорить я много чего в прошлый раз
анонсировал из вещей которые нам пока не хватало глубины понимания чтобы
осознать которые нужно было вернуться потом вот сегодня мы будем закрывать
такие пробелы поговорим про оформление документа целиком про всякие там поля
колонтитлы заголовки такие вещи поговорим про то как вставлять какие-то
брошени там лица и как собственно их создавать поговорим про кастомные
команды очень важная тема как экономить свои силы при написании каких-то формул
если там есть явный переиспользуемый код поговорим про окружение подробнее
чем прошлый раз и еще про какие-то хаки для написания формул которых у нас
раньше не было по оформлениям и ну напомню типичные названия разделов
которые есть в разных документах лотеха как я говорил в тот раз конкретный набор
названий которые доступны для одного документа он зависит от параметра
document класс вот и поскольку мы будем работать почти всегда с классом article
который дает все возможности которые нам потребовались бы для наших нужд вот
в нем специфика такая что там нет раздела чепта все остальное есть ну
синтаксис помните я думаю просто берется команда который название раздела и ее
единственным аргументом является но тот заголовок который будет отрисовываться
для данного раздела но есть однако побочный аргумент побочный аргумент
указывается в скобках квадратных они фигурных это ну краткое название которое
будет отрисовываться например в титулах или в содержании но вот такие вещи
вернее такие эффекты короткое название мы сегодня построить не будем но вот они
есть иногда это пригождается есть несколько команд которые но тоже гостно
связаны со созданием своих разделов которые сами генерят какую-то страницу
с каким-то контентом и тут я несколько садов перечислил есть команта моих
тайтл которые возможно вы видели в разных документах которые в техе
написаны вот сам вначале отрисовывает автора дату заголовок как правильном
формате с правильным правильным шрифтом можем посмотреть как это будет на самом
деле происходить акта у нас есть есть документ в котором но пока пусто этом
что-то в прошлый раз набирал но более-менее почистил вот попробуем
применить мэйк тайтл не то чтобы это прям часто возникает необходимость но
если пустить какую-то статью и подаёте ее на фабрикацию то это бывает полезно
вот такие команды там осады и тайтл они вбивают соответствующие данные
соответствующие переменные у теха которые как-то запрятаны это не сами
название переменных надо понимать это именно команда которые к нему
обращаются но с этого момента он знает что отрисовывать при команде мэйк тайтл
так что можно вызвать посмотреть что будет
ну в общем-то ожидаемый результат наверное то что мы хотели так но
обычно выглядит есть другие более полезные команды table of contents которые
генерирует содержание ну то есть список всех ваших разделов под
разделов и прочего со страницами на которых они впервые были упомянуты ну как
обычно книги там все с отсылками с гипер ссылками можно переходить по этим
ссылкам они будут я примечать прям к нужному разделу очень удобно про гипер
ссылки и подробно будем говорить потом но уж по крайней мере встроенные
инструменты в лотехе точно есть чтобы их просто создавать и даже нам в этом не
думать аналогичного вида команды ведь то фигуры сейвисов тейблс они создают
список разных картинок или таблиц которые тоже есть в моменте мы поговорим
о том как такие штуки создавать ну то есть как создавать такие объекты
которые бы упоминали с таких окружениях как лиса фиггер с лиса тейблс это тоже
полезно скорее для таких статей в которых вы наверняка видели бывает по
странице заняты какой-то картинкой которая написана рисунок таким-то
номером с таким-то заголовком вот это такие уникальные объекты к которым
можно присваивать некие ссылки и по этим ссылкам потом к ним переходить
обратно и есть команда appendix довольно странного вида команды она преобразует
правила по которым выдаются номера там разделом под разделом и прочему
который встречается после этой команды ну мотивация в том что у статьи например
могут быть какие-то предложения и было бы странно эти предложения
номеровать продолжением номерации исходной глав статье и поэтому там
номерация переходят цифры на буквы например это все кастомизуется можно
выбирать какой будет правил номерации и до appendix и после но пока не заморачиваемся
просто смотрю как-то действует вот допустим есть это две секции до этой
команды и две секции после смотрю на эффект
да ну примерно то чем я и говорил правила номерации изменилось они
регулируемые можно сделать так чтобы разделы вашего исходного документа
были нумерованы буквами причем хоть заголовами хоть строчными и даже русскими
если угодно ну этот скорее экзотика правила номерации
числями хватает поэтому пока мы об этом не говорим возможно потом нам это
пригодится вот сортилами на этом кажется все и теперь другая важная часть это то
как задавать всякие размеры полей документа размеры клон титулов да и
вообще разместится с самой страницы по умолчанию в нашем документе сколько
мы указали это прямо были у нас а4 paper как мы помним прошлого раза но это все
вещи тоже редактируемые и посмотрим как есть такой пакет челометри который
задает интерфейс обращения к разным переменам характеризующим страницу и
позволяет их довольно быстро менять тут есть картинка которая в общем-то все
охватывает что она вообще когда-то может из него требоваться но типично
нужные перемены которые стоит внимание обратить это вот топ ботам отступы сверху
и снизу и лев трайд левая правая поля вот это очень просто меняется
синтаксис вот такой разговор челу него посмотреть ну вроде тут ничего такого не
не происходит но казалось бы как все запоминать это с новой новой синтаксис
у нас теперь фигурные скобки внутри переменные с равенством но вот это такие
вещи которые раз в жизни пишутся прямо были потом никогда больше не используется
то есть нет ничего плохого в том чтобы посмотреть синтаксис использовать нужно
в строке кода и потом с этого момента только им пользоваться предлагаю так и
сделать допустим мы вообще не знали как это пишется но мы можем скопировать
нужен нам код прямо было но тут он уже был это не встречит потому что это
экспериментировал но вот нам потребуется пакет челометри как всегда это команда
юспеки ч и с этого момента можем задавать поля любого размера даже например
абсурдного делаем очень большие поля сверху и сниз но если вас право тоже и
убьемся что ну что это повлияет на что-то на генерим ковту текста
ну вот да как видим поля стали явно больше причем но со всех сторон можем эксперимента
ради поэкспериментирую чем-то еще к другим переменами например paper height высота
страницы по умолчанию это там 28 что ли сантиметров ну вот обычно а4 формат но
вот можно поменять его поменять насильно допустим мы забываем про все эти параметры
полей они будут по умолчанию стоять и вот укажем paper height ну то есть разные
единицы измерения я потом поговорю какие когда лучше использовать но вот допустим
мы хотим не знаю 1000 100 сантиметров то есть ожидаем что будет длинная страница 4 раз длиннее
чем обычно и это не сработал интересно ладно видимо все-таки это ограничение которое ну
зашито в h4 paper и если мы хотим выменять но нужно выбирать другой класс документа не хочу
ничего ломать но в всяком случае такая возможность есть есть переменные которые
заотвечают и принято правильной стройки среды и можно их тоже редактировать но не то чтобы
это было когда-то нужно что действительно нужно так это поля и с ним работать точно научились вот
единицы измерения их всех и довольно много это не все только основные ну есть единицы
основы на некоторых параметрах ну печатного текста скажем пт это ну видимо point элементарно
единицы измерения размеров лотехи самая маленькая из всех вот есть x это высота буквы x довольно
странная штука но иногда и пользуется бывает бывает такая ситуация когда нам хочется сопоставлять
какие-то размеры в документе с размерами букв которые в нем пишутся то есть это единицы
измерения она ну ее абсолютное значение вообще говоря зависит от того какой у нас шрифт потому
что в разном шрифте в разном размере высота буквы x она будет разной если там какой-то причине
удобно на ней ориентироваться то можем не воспользоваться ну и для тех тех же нужд бывает
нужна команда м который отражает тоже ширину буквы именно м именно в текущем обычном шрифте
ну то есть том который отрисуется если оставлять просто одну главную буквы это может когда-то
пригодится опять же если нам полезно как-то сопоставлять размеры в документе с размерами
букв но лично мне удобнее ссылаться на какие-то метрические измерения тут есть миллиметр сантиметра
и дюймы ну в общем все как у людей и по умолчанию если мы говорим о бумаге формата 4 у нас ну
действительно есть лист которые там 210 миллиметров на 280 ну или примерно так и
все подчиняется обычным правилам есть другие числовые параметры которые не относится к
эту геометрию но которые тоже бывает полезно знать их довольно много они гуглится но вот есть
например параметры pair indent то есть paragraph indent это отступ первой строки каждого абзаца и
paragraph skip это отступ после начала нового абзаца про то как абзаца новый создавать мы попозже
поговорим но ну например любые любые две строки кода которые отделены пустой строкой считаются
разными абзацами и если мы тут поменяем значение пары indent пар skip то расстояние там первая строка
каждого этого абзаца расстояние между ними будет регулироваться нашим переменным например
вот как видим то тут пары indent 50 на всех вот поинтов элементарных вот можем задать тут скажем
4 сантиметра какой-то причине нам захотелось сделать так и здесь то же самое ну ожидаемое поведение
что поменяется то что происходит пересчитается длина ну да мы именно этого добивались бывают
такие ситуации в которых полезно какие-то переменные поменять можно погуглить их чтоб
есть разных флотехи которые отвечают за всякие там пробелы между абзацами между строками вот
такие вещи или там между формулом например в режим математическом они помолчание неплохо
настроена и нормально выглядит но если вдруг возникает необходимость то вот обращаться к
ним нужно вот так команды setlength который первый аргумент это название того параметра который мы
редактируем второй аргумент это длина который мы присваиваем то есть если у нас раньше были
переменные которые мы обращаемся как-то по-странному скажем команды title вот недавно
заголовок который делается команды make title там это были команды которые обращаются каким-то
внутренним переменным которые мы не знаем как называются здесь переменные вот они но задание
и значений происходит не командой которая просто переменную использует а вот команды
потому что интерфейса обращения к ним другого нет приходится делать так через полезный
команды line spread который регулирует отступы ну междусрочный интервал ну вот вы знаете
есть полуторные двойные но вот можно выбирать любой какой больше нравится как правило
единичного по умолчанию вполне хватает но если у вас какой-то скажем конспект которым очень много
такой внутри строчной математики кито выкладок внутри строк которые не хочется на себе отдельные
строки из-за этого строки там мы расстаются по высоте но мы увидим примеры когда это возникает
то ну бывает полезно поставить line spread например 1.2 как видим сейчас какой эффект это будет иметь
ну вот чуть дальше строки друг от друга стали так по параметрам страницы думаю все вот теперь
клон титулы снова некий массив кода который используется раз в жизни но вот нужно хотя бы
раз прочитать что это такое много разных пакетов которые это делают ну вот я предлагаю использовать
пакет title pc ps тоже очень понятно выглядит скопируем код и что тут происходит мы задаем стиль
страницы команды new page style ну по стилям страницы понимается именно стиль расположения клон титулов
на ней можем задать ширину прямых горизонтальных отделяющих клон титул с цельного текста и
какие-то сами надписи которые будут там возникать здесь могут быть и переменные какие-то какие-то
даже ароматические действия счетчиками встроенными про счетчики мы будем говорить позднее но в первом
приближении это выглядит так теперь если я задам page style main который мы собственно объявили то с этого
момента и далее когда не будет сказано обратное все страницы будут иметь такой стиль вот мы можем
убедиться ну вот кстати сработала там модификация которую я ставил paper height внезапно видимо она не
с первой компиляции применяется ну вот у нас пересчет очень длинная страница если друг там
это было зачем-то нужно мы этого добились я предлагаю этого брать не то чтобы это очень полезный
но вот есть та прямая которая точно которую мы обозначили есть текст который мы указали
все как ожидалось но типично здесь указывают номер текущей страницы или снизу или сверху
хоть в каком-то углу ну так не некоторые спольда как-то делается вот есть такая штука как счетчик
и вот есть счетчика текущей страницы которому можно обратиться от команды the page ну и вот если
я укажу его в качестве переменной титула он будет отрисовываться на каждую новую страницу свой
если сделают новую страницу тоже команды которые пока не стоит запоминать мы про ней что поговорим
но это будет у нас есть две страницы но на второй странице будет план титул в котором будет написано 2
это счетчик тоже регулируемый можно менять его значение но сейчас не об этом главное что все
работает да и стоит отметить что по очистаю работает как модификатор мы в прошлый раз говорили
что коммунификатора это такие команды изменения стиля которые действует пока не будет сказано
обратное скажем пока не закончится область видимости то есть текущие фигурные скобки или пока не
будет задана другая команда модификатора той же категории которая будет говорить что-то другое
допустим я захочу чтобы у меня новая страница не было клон титулов для этого есть встроенный
page style но empty понятно что он что он говорит он говорит чтобы не было ничего лишнего на
этой странице как что вот так это делается проверим да мы получили страницу у первой
page style main на нем все как мы в прошлый раз установили вторая страница на ней ничего нет сверху снизу
потому что у нее другой стиль если нам хочется работать как-то не модификаторным подходом есть
который меняет стиль только у текущей страницы а дальше применяется тот который был по умолчанию
ну или тот который сейчас активен в качестве монификатора здесь это будет
эквалентная вещь потому что на какой странице мы находимся кто она применится но мне кажется так
как-то понятнее что ли вот такой парадигме от рассматривать кладит его думаю что все и
кратко есть такой пакет soul который дает некоторые модификаторы текста вот мы говорили есть там
жирные шрифты там курсивные прочие вот есть еще некоторые команды дающие новый модификатор
стиля но вот они лежат в пакете soul или если мы работаем с кинекодом в его варианте soul utf 8
командой soul ставит пробелы между буквами у нас кстати используется в нашем клубе на заголовочной
странице чтобы название предмета отрисовываю через пробелы чтобы это как-то более вытушительно
выглядело есть модификатор заглобной букв вернее так сказать капиталий это такой стиль
чертания при котором строчные буквы заменяются на маленькие заглобную вот ну есть подчеркивание
и перечеркивание тоже можно использовать при необходимости потому что но считается что вы
делите информацию какой-то капсум это дурной тон и лучше прибегать к другим средствам которые
больше вам нравится и вот теперь у нас еще больше таких средств не только жирно-жирный
курсивный а несколько других еще может пригодится и вот про отступы было аннотировано как работать
пространство внутри страницы вот скажем как делать пробел есть команды аш-спейс и весь пейс они
как не трудно догадаться делают горизонтальный или вертикальный пробел допустим мы хотим сделать
пробел между этими буквами больше обычного по какой-то причине опять задается длина
стоматежь единиц измерения которые мы упоминали раньше ну допустим два сантиметра
а потому что я нашел весь пейс нужно было аш-спейс конечно
но получен аж демо результат оступа сантиметра после первой буквы м да вот что было плохо
когда этот набрал весь пейс это оступ горизонта вертикальный вертикал и ну вот я хоть непонятно
что делать если он находится посреди строки а ему горе сделал вертикальный оступ но он доходит
до конца строки в которой он находится а уже после нее делать этот отступ если я снова
сделаю то же самое ну верну команду весь пейс то вот после первой строки на площади
сантиметра по горизонтали по вертикали как мы зачем-то хотели это бывает нужно тоже когда
делать какую-то заголовочную страницу вам не нужно всю и заполнять текстом вам хочется как-то
разместить там ваше имя название может быть картинку и чтобы сделать это нужно в месте полезно
такие команды использовать есть еще вариации этих команд с звездочкой я уже говорил что звездочка
как-то меняет поведение команды каждый раз кип свои уникальным образом вот в случае
команда пробелов она делает его так сказать жестким что это означает если мы поставим
какой-то большой пробел в конце строки ну не буду писать чтобы ничего не сломалось если
представим это большой пробел конце строки скажем там несколько сантиметров но вот
кончится а пробел еще представилось не конца ну тогда часть пробела которая еще не
проставилась, она просто отсечется, и перед нее забудут все. С новой строки уже будет следующий
символ после этого пробела. А вот жесткие пробелы говорят, что требуется именно такой
доступ никак не меньше, и тогда строка, в которой он начался, она заканчивается до этого пробела
насильственно, и начинается уже с новой строки этот пробел целиком, чтобы целиком был
проставлен. Мне ни разу такое не прикаждалось, но такое и есть. Ну есть полезные команды
hskip и vskip. Если вам не хочется высчитывать конкретное число, насколько вам нужно далеко отступить,
чтобы отрисовать в нужном месте, но вот вы знаете, что у вас есть часть контента,
которую хочется написать сверху страницы, а часть снизу, вы можете между ней поставить
распорку vskip. Она будет гарантировать, что то, что перед ней будет как можно ближе к верхнему
краю страницы, то, что после нее как можно ближе к нижнему краю страницы. Можем посмотреть на
такой эффект. Верхний текст. Что мы хотим сделать? Поставить команду vskip.
Интересно. Видимо, потому что надо делать вот так.
Тоже интересно. Ладно, с этим надо будет позже разобраться. Видимо,
там есть какой-то аргумент, который нужно указать, но идеология точно такая.
Не буду все это выбирать, что мы наделали, что времени тратить.
Теперь переход на новую сроку. Они тоже бывают разные. Я упоминал, что любое количество переходов
на новую строку, вот такое, оно склопывается в одну. То есть, операция перехода на новую
строку, так сказать, идепатента. И тот же эффект имеет команда slashpar. Это абсолютно
эквивалентные вещи. Если вам просто не хочется плодить пустые строки, но вы хотите, чтобы у вас
эти две строки считались за два раза в параграфах, то можете разделять ее не вот так, а можете
ставить команду par. Тут раньше быть не должно. Ну, очень большой доступ, потому что мы поставили
его очень в больших настройках. Наверное, стоит это убрать. Не то чтобы... Это полезный параметр.
Пусть будет 10. Ну, вот начался новый абзац. Если мы этого не сделали и просто оставили
здесь седние строки, то их бытех не восприним как переход на новую строку. Ему нужно хотя бы
одну пустую иметь, чтобы на это ориентироваться. Есть другие способы. Есть команда двойной
backslash. Она просто насильно обрывает строку на нужном месте. И дальше начинается не новый абзац,
но при этом новая строка. То есть, не используется правило, по которому там считывается осу,
между абзацами, или там красная строка абзаца, просто начинается новая строка. И есть команда
newline, которая делает то же самое, эквивалентные вещи. То, что там можно делать с страницами,
можно насильно начать новую страницу. Команда newpage. Я про нее уже говорил и даже, конечно,
использовал в одном из примеров. Ну да, получено то, что мы ожидали. И есть несколько другого стиля
эти варианты команд linebreak, pagebreak. Они не говорят, что прям насильно, ровно в этом месте нужно
срочно прийти на новую строку или там новую страницу. Они говорят у тех, чтобы он где-то в
окрестности этого места высчитал наиболее оптимальную позицию, в которой эту страницу можно было бы
начать. Допустим, у вас большой пласт текста, какая-то длинная теорема, и вот вы чувствуете, что
не умещается на одну страницу, и почему-то настройка верски по умолчанию отрисовывает ее не очень
хорошо. Тогда вам бывает полезно в нужном месте поставить pagebreak и ожидать, что у тех
догадается, что именно в этом месте вы ожидаете одного расстрой страницы, а не в другом, и как-то
верстка его в этом про не направить. То есть вы не до конца контролируете процесс, но вы, так
сказать, свое мнение у тех указываете. Это бывает полезно. У меня такое чуть не в каждой работе встречалось,
но в которой там больше 20 страниц, грубо говоря, такое неизбежно возникает. Когда копится много
текста, в какой-то момент где-то лотех реверс автоматически ошибается, и делает не то, что мы
бы от него хотели, но этим можно управлять. Еще один необычный эффект, который стоит упомянуть, если мы
по умолчанию не используем никакую команду, вот если мы забудем про эту команду, чтобы она не
значила, пока ее уберем временно, и попробуем сделать новую секцию, которая будет два абзаца, то есть
все по-честному, есть пустые строки разделяющие, значит это точно новая абзац, то мы обнаружим,
что первый абзац секции, он не начинается как раз со строки, но это такое правило типографии
англоязычной, у нас так не принято, поэтому чтобы с этим бороться есть пакет in that first, он делает
то, что у него написано, он делает, чтобы первый абзац каждого раздела отступался, и если мы
скопируем это снова, то получим то, что хотели. Вот, ну это опять же такая команда, которая раз в
жизни применяешь прямо или потом забываешь, я думаю, что в конце этого раздела такого у нас
больше не будет, будут команды, которые нужны постоянно, и с ними как-то попроще. Да, изображение
таблицы сегодня кратко, подробно будет, думаю, что в следующем занятии, пока на уровне идей,
как вообще это реализовывать. Нам часто бывает нужно вставить какую-то таблицу в текст, есть такая
команда tabular, синтаксис довольно неприятный, в нем можно вчитаться, но идея следующая, вот есть
окружение tabular, у которого есть некоторое количество настроек, настроек такие, это некоторые коды
выравнивания текста, вот я привел к примеру c, l или r, ну то есть выравнивание по центру,
по левому краю или по правому краю, и прямые слеши, регулирующие количество вертикальных
разделителей между этими столбцами, то есть каждый столбец, это своя буква правила выравнивания,
между ними сколько угодно разделителей, и сами столбцы, вернее сами строки задаются следующим
образом, вот очередная строка, ее контент, который должен находиться в разных столбцах,
отделяется апельсантами, вот кажется это первый раз, когда он встретится как тимул
зарезервированный, ну вот да, если он потребуется вам в тексте, то его нужно будет экранировать,
а по умолчанию это тимул, который отделяет контент разных столбцов, ну такой код дает
там такой результат, мы получаем четыре столбца, как и ожидали, первые два выравнены по центру,
третий по правому краю, черта по левому краю, и между ними ровно такое количество разделителей,
сколько мы нарисовали, это тоже все кастомизируется, но в общем-то такого понимания хватает для
большинства задач, ну и да, по умолчанию строки в таблице не разделяются чертой горизонтальной,
ее нужно проводить самому, потому что бывает вам она не нужна, или вам нужно сразу две,
когда вы рисуете, ну пишете ашлайн два раза подряд, вот, ну вот синдекс не очень приятный,
и ее можно упростить, до этого есть такая штука, как так сказать wizard, вот, по крайней мере в
текст студии такая опция имеется, если я захочу быстро сделать таблицу, я жму quicktabular,
и уже просто получаю человекочитаемый интерфейс того, как это создавать, что-то сейчас происходит,
почему-то у меня 34, а там это где, сейчас я гляну презентацию, а, ну это потому что я забыл
поменять, это забейте, просто в презентажке код, который отрисовывает тех его исходник,
и код, который отрисовывает результаты, в два разных кода, в одном месте я поменял,
а в другом не поменял, тут должно быть, конечно, что-то согласованное, либо здесь единички xy,
либо здесь числа 24, это не очень важно, да, обратно к этому wizard, ну вот, получаем,
что хотели, допустим, мы хотим там четыре колонки, или там одну строку при этом,
можем забить каким-то контентом, можем даже выравнивание в каждом из них отрегулировать,
вот, например, так, и весь код наберется за нас, это бывает полезно, этим можно пользоваться,
да, и по умолчанию, такой вот tabular считается частью строки, в которой он написан,
если мы хотим, чтобы он был на новой строке, мы его отделяем, как всегда, пустой строкой,
более того, полезно такого рода окружение, значит, еще окружение, например,
окружение Center, которое его выделит, ну, мы помним, окружение Center, это окружение,
все внутри которого выравнивается по центру, обычно таблица это некая ключевая вещь в странице,
которую хочется понимание привлекать, и вот так этого можно добиться, например,
есть еще специальное окружение Table, которое как раз-таки создает объект, вида Table,
который имеет там свое название, свою подпись, свою ссылку, и при этом отрисовывается,
если мы сделаем команду List of Tables, которая у нас вначале была, сегодня мы об этом не
будем, наверное, говорить, но, во всяком случае, почти всегда, если вы делаете какую-то таблицу,
лучше во что-то ее завернуть, уж как-то форматирование ее отрегулировать, то же самое
касается изображений, пример очень простой, есть команда Include Graphics,
которая в качестве главного аргумента, я обязательно принимает только путь к изображению,
вот у меня в папке с презентацией лежала картинка с котиком, сейчас попробую ее же отрисовать
в нашем файле примере, скопируюсь в папку изображений, которые тут лежат, и попробую набрать
что-нибудь, ну как я говорил, команда Include Graphics, работает ли оверлифе, надо посмотреть,
я не уверен, я сам оверлифом мало пользуюсь, возможно, там тоже есть такой инструментарий,
но даже если нет, то всегда можно набрать руками, это не очень сложно, обратно к изображению
картинок, указываю путь до картинки, можно не указывать расширение, в тех раз партиз сам,
какие файлы он может считать как картинку, и догадается, что должно быть что-то типа там
.jpg или .png, простейшее применение будет таким, ну здорово, получили котика, только он не
влиялся почему-то в страницу, потому что он слишком большого размера, размер можно регулировать,
например команды width, очень удобно ориентироваться именно по ширине картинки,
и можно указывать ее явно, например, вот точно знаю 10 сантиметров, могу это указать,
другой вариант, мы можем указывать его как некий коэффициент от ширины текста,
это встроенная переменная text-width, этих текстаков, что можно перед ней ставить здесь некий
множествочисловой, допустим 0.8, вот полученная картинка после этого кода, она будет иметь
ширину как 0.8 ширины основного текста, примерно то, что мы ожидали как раз таки получено,
вот наверное такой вот теоретический минимум, который нужно вставить в картинки, он вот такой,
ну и опять часто бывает полезно выделить картинку скажем в центр, или как-то еще выровнять,
и поэтому какие-то окружения нам обычно пригодаются, я обычно делаю вот так,
мне кажется как-то приятнее выглядит, дальше, наконец-то гвоздь программы, я говорил в прошлый
раз, что можешь создавать свои команды, чтобы упрощать себе жизнь, или вообще чтобы исправлять
какие-то нестыковки, которые раньше были в исходном теке, сейчас увидим это все, да, во первых,
нам бывает часто нужно много раз набирать одно и то же, например, если мы набирали частную
производную, так сказать, по символу, что бы мы сделали, как бы мы набрали df pdx,
например, это была бы какая-то видимо дробь, фрег, как помню с прошлого раза, ну и значит спец
символ, это вот буквучки, отражая частную производную, это partial команда, вот мы бы сделали
вот так, ну это конечно работает, но вот кажется это какое-то очень большое усилие, целая куча
символов, а вот такой результат, это можно инкапсулировать, делать специальную команду,
которая будет иметь такой же эффект, но при этом аналог короче, будет вот такой, есть команда new
command, у нее основной аргумент это название команды, которую вы создаете, ну допустим производную
довольно логично назвать, что-то типа дариф или дариватив, ну давайте вот так, потом квадратные
скобки, количество аргументов, если аргументов нет, это просто опускается, как всегда, квадратные
скобки содержат какой-то необязательный параметр, но вот тут у нас два аргумента, это собственно
какую функцию мы берем производную и какой перемен, вот так это будет выглядеть, я могу это
скопировать и прямо здесь ставить, лучше конечно в преамбул, но можно здесь, и попробуем применить
то же самое, но уже с точки зрения новой команды, как я уже говорил, если аргументов несколько,
каждый по отдельности идет в свои фигурные скобки, лучше делать вот так, это сработало, но напомню
также, что есть аргумент односимбльный, ну скобки можно опускать, то есть если мы сделаем просто
вот так, то тех поймет, что первый аргумент это первый символ f, а второй это второй символ x,
и получится тот же самый результат, хорошо, ну еще очень-очень часто нужно сокращение,
постоянно бывает нужно какие-то числовые множества указывать, действительные числа,
комплектные числа, вот чтобы короче это делать, каждый раз не модифицирующий лифт, о том, что это
такое, мы поговорим чуть попозже, у нас, кажется, не было еще числа в математическом режиме, ну вот
можно это сразу забить в команду slash изоглавная r, очень удобно, постоянно этим
пользуюсь, в каждой наверное работе у меня это встречается, вот, понятно ли как это происходит?
Ну да понятно, а можно допустим перегружать, чтобы одно и то же название команд принимало,
то два параметра, то один параметр? Уф, хороший вопрос, честно говоря, я ни разу не пробовал,
это стоит погуглить, ну можно поэкспериментировать, я подозреваю, что он пожалуется, типа это имя уже занято,
вот и сейчас узнаем, допустим есть другая команда, которая делает, просто отрисовывает сам параметр,
и там штрих после него ставит, но я подозреваю, что это не будет работать, сейчас узнаем,
да, он пожалуется, тех не умеет перегрузку, значит, и если нам нужно иметь две похожие команды,
значит надо по-разному называть, например Drift2, через двух аргументов, тут Drift1,
это точно сработает, но уж по крайней мере что можно, так это заменять уже встроенные команды,
давая им другую функциональность, допустим нам вот не нравится, что делает встроенная команда
в лотехе, но при этом нам хочется использовать такое же сокращение, для этого есть вместо NewCommand
команда ReviewCommand, ожидаемо, которая заменяет эффект текущей команды на свой, у нее стинтекс
такой же, как у NewCommand, сначала название, которое мы хотим переопределить, потом количество
аргументов, если аргументы есть, а потом то, что команда делает, ну вот типичный пример,
тут он указан, если мы попробуем, если мы попробуем набрать буквы, скажем, фиди там,
эпсилон или может быть капа, мы заметим, что начертание у них не такое, как мы привыкли,
ну у вас наверное уже был всехматонарис и вы точно видели другие буквы фи, буквы
эпсилон, буквы капа, вот хочется это как-то исправить, в лотехе есть для этого команды варфи,
вар эпсилон, вар капа, вариант написания, но каждый раз набирать столько символов варфи ради
вот такого, ну не хочется, поэтому предлагается переопределить команду фи, чтобы она делала
что-то новое, ну как, ну с командой NewCommand, мы забиваем то название, которое нам потребуется,
потом то, что будет не происходить, а именно вызов варфи, давайте то же самое для эпсилонной капы,
видим получены требуемые, получены привычные нам греческие буквы, ну и если вам какая-то
другая команда не нравится и при этом вы не можете, ну то есть вам хочется сделать команду,
которая бы делала что-то вот такое, но при этом название уже занято, а вы хотите именно это
название, ну значит, просто делайте NewCommand, еще бывает ситуация, когда есть какой-то встроенный
модификатор стиля, который вам хочется, чтобы делал что-то другое, ну допустим вы много
идеи его использовали, а потом поймаете, что вам он не нравится, но вам не хочется заменять его на
другой, ну во всем тексте, поэтому вместо того, чтобы заменить модификатор стиля, заменяете то,
что он делает, делайте RenewCommand и переопределяйте то, что вам потребуется, вот, но это очень рисковое,
можно случайно переопределить что-то важное, поэтому, в общем, будьте с этим осторожны, вот,
теперь что-то еще из математики, мы говорили в прошлый раз, что есть такая штука-операторы,
ну там типа синуса, которые печатают некий текст, название оператора, опять же синус, а потом некий
специального размера пробел, отделяющийся синус от аргумента, но при этом бывает часто, что операторы есть,
ну, нам нужны какие-то свои операторы, которых нет в лотехе, но не хочется при этом пробел оставить
самому правильное, есть команда для этого DeclineMathOperator, которая ровно то и делает, она берет то
название, которое потом будет использоваться далее, то есть ту команду, а второй аргумент это текст,
который будет писаться в качестве текста оператора, они все по умолчанию пишутся именно
таким шрифтом, то есть прямым, для тех типичных, что в математике шрифт курсивный, ну давайте
прям посмотрим, если бы я просто написал что-то типа, как здесь, что размерность ядра фи, плюс
размерность образа и равномерности пространства без операторов, ну мы увидим какую-то слитную массу
и притом курсивную, как правило, ну как мы понимаем, это должно выглядеть не так,
чтобы это выглядело не так, мы создаем свои операторы, команда DeclineMathOperator,
тут довольно много разных, ну то есть видно, что есть еще какая-то свобода в создании своих вещей,
но мы все это не будем отвечать, потому что нам не все пригодится просто, ну полезно понимать,
возможно вам потребуется что-то другое, но вот операторы сдаются так, мы хотим команду ядра,
я бы хотел сделать так, но возможно эта штука уже чем-то занята, чтобы сейчас точно не ошибиться,
я сделаю команду StumiR, ну то есть точно будет уникальное название, но при этом надпись будет
просто Kerr, как бы мы и хотели, и то же самое здесь, я почти уверен, что команда им занята под
подымнимую часть комплексного числа, а нам сейчас это не нужно, поэтому сделаем свою команду,
а команда team уже существует, это я проверял,
сработало, понятно что произошло, да понятно, ну вот про операторы более-менее вот так,
особенно если возьмете какой-то алгеброй, там этих операторов масса, и обычно приамбла
начинается там с 20-ти строк такого вида, миллион операторов, которые какой-то разный имеют эффект,
еще есть такая штука оператора со звездой, это операторы, которые делают верхние-нижние индексы
пределами, сейчас объясню, что я имею в виду, вот например оператор argmax, допустим нам просто
пока нужно оператор argmax, делается он естественно вот так, ну что-то с ним напишем, argmax,
f, да как всегда, если параметр 1, а тут параметр 1 symbol, пусть будет без скобочек, пусть будет
равен 0, и как правило мы указываем какое-то множество, которое argmax пробегает, ну там
нижним индексом укажем, что x пробегает отрезок от 0 до 1, посмотрим что будет,
вот нам наверное хотелось бы, чтобы в такого рода командах вот эта вот надпись смещалась под
оператор, наверное у вас нотация была тоже такой, и чтобы этого добиться мы используем тут звезду,
она модифицирует оператор таким вот образом, это снова вот еще один пример, когда звезда меняет
поведение команды, но при этом на какое-то очень похожее и тоже какое-то полезное, вот то что мы
хотели, тут возникает такой вопрос, а что делать если у нас формула внутри строки,
допустим мы тут допишем такое, было бы естественно чтобы у нас не вылезали какие-то лишние символы
вверх-вниз, чтобы строка не разрасталась по ширине, чтобы она была такой же высоты как все
остальные строки, и вот по умолчанию тогда указание ставить пределы сверху-снизу будет
игнорироваться, вот, то есть хоть мы сделали такой оператор со звездой, если мы говорим про формулу
в долларах единичных, то есть внутрисрочную, то такое требование все равно игнорируется,
как это обойти поговорим попозже, но вообще лучше это не обходить, потому что это не очень красиво
лучше так, здесь наверное тоже вопрос убить не должно, да, бинарная операция, это такая экзотика,
мне показалось наверное раз в жизни, и это в теории групп, потому что там много бинарных операций,
но вот допустим у нас возникла какая-то операция бинарная, символ которой LaTeX не
считает бинарным оператором, например процент, ну процент обычно то и обозначает процент,
но вот допустим мы хотим чтобы он был бинарным оператором, у них должны быть какие-то свои
правила того как ставятся пробелы между операндами и самим символом, для того чтобы эти правила учесть
вот помогает команда metbin, я снова просто скопирую код и потом поясню что он делает,
вот мы создаем новую команду процент, которая, ну казалось бы просто печатая знак процента,
то есть могли бы сделать вот так, но если мы сделали вот так, мы просто получили команду,
которая печатает процент, она нужно чтобы она при этом грамотно расставляла пробелы, и чтобы
на это указать мы говорим что то что происходит дальше это бинарная операция, заворачиваем
это в команду metbin, вот, и теперь если мы попробуем сделать что-то вроде а персент b,
то получим что-то разумно выглядящее, вот, похож на что-то вроде а плюс b, ну и давайте для сравнения
что будет если я уберу эту команду, фигурные скопки сами по себе ни на что не влияют, поэтому я могу их
просто оставить, убрать только при длине команды, ну как видим пробелы пропали и вообще выглядит не
очень красиво, вот, надеюсь я вам мотивацию пояснил для чего это нужно, вот, думаю что про команду
сделал все что хотел, если есть вопросы давайте сейчас обсудим, а кстати вот если например drop
использовать вне долларов, имеешь в виду вот в таких окружениях, да, нет, вообще без всяких этих, скорее всего
упадет, есть такие ну все команды которые математические как правило не определены вне окружения
математики, ну можем попробовать, но я почти уверен что упадет, вот там вот это вот знаменатель
он пишется нормально, а числитель нет, ну это скорее потому что когда мы делаем что-то, злотехо неожиданное
мы можем взять неопределенное поведение, ну типичный случай, он попытался, но у него не вышло, поэтому лучше
его не мучить и сделать вот так, это точно сработает, отмечу кстати что дроби как видим в строке и на своей
строке вот таком окружении, они разного размера, это тоже сделано для того чтобы строки с текстом в
которых и текст и математика, чтобы они не были слишком большие в высоту, это тоже можно обходить мы
это потом увидим, но опять же лучше это не обходить, потому что это не очень красиво, мне кажется так оно
как-то приятнее, когда не выбивается большим размером какая-то дробь из текста, да еще вопросы
сегодня еще поведские окружения, мы в прошлый раз так начали обсуждать, поговорили там про окружение
выравнивания, там center, flash left, flash right и немножко про теоремы, сегодня мы расширим это понимание, но это
будет как бы не конец, оно будет расширяться еще, вот начнем с окружений номеровых маркерогных списков
ну очень просто выглядит, это среды itemize и enumerate, itemize списки маркированные, enumerate
номерованные, тут наверное даже ничего кодить показывать не буду, вроде все очевидно и команда
item говорит что вот мы начинаем очередной пункт нашего списка, при этом даже не важно они
оделены друг от друга, новый строкой или не оделены, все равно он будет понимать что это как бы
новый абзац, новый item и правильно все отрисовывалось, давайте так понятно ли, если понятно то не будем
задерживаться, довольно просто, ну в целом понятно да, списки бывают вложенными, тут я примера
проводить не стал, потому что он очень много места занимает в презентажке, давайте один наберу
какой-нибудь элементарный, допустим у нас есть маркированный список, внутри него на первом
item еще есть маркированный список, внутри еще и номерованный список, вот так тоже бывает,
допустим какой-то контент еще написан, еще какие-то, увидим что это ничего не портит,
вот те кстати умеют работать, это рисовывает нам правильно и даже уровень вложенности отражает
при этом маркеры меняются, вот на первом уровне маркированного списка были точечки, на втором
теряшке, если мы пошли дальше были бы еще другие символы, это можно менять, можно выбирать свои,
ну то есть прям глобально указать какие будут символы использоваться в маркированных списках
везде на уровне вложенности 2, но об этом мы тоже не будем говорить сегодня, а вот что я еще отмечу,
что если мы сделаем списки номерованными, то номерация не просто будет запускаться
заново для каждого уровня вложенности, она будет еще разного стиля, давайте посмотрим на это,
вот как видим номерация первого уровня, она арабская, потом латинская, а потом вообще римские цифры,
это тоже все редактируется вплоть до того, что можно тут ставить точки вместо скобок,
но опять же об этом не сегодня, встроение стилей мне кажется тоже вполне приемлемой,
а вот о чем стоит поговорить, что можно в этом itemize у конкретных маркеров менять, что там будет
написано, вот типичные примеры, когда это бывает нужно, допустим вы доказываете слева направо и
справа налево, тогда вам бывает удобно сделать какой-то маркированный список, в котором первый
элемент будет помечен маркером стрелочек справа налево, а второй маркером стрелочек слева направо,
ну типа будете доказывать в одну сторону в одном item, а в другую в другом item, я так все конкретно
сделаю, постоянно использую, очень полезно, вот, хинтекс тут такой, что после item мы берем еще
квадратные скобки, как мы помним это всегда какой-то необязательный аргумент, в данном случае это
аргументы того, что собственно нарисовать вместо маркера, понятно ли, как это происходит,
да понятно, предлагаю еще маленький примерчик на эту тему, сразу зафиксирую, что маркеры могут
быть не одним символом, а любым количеством символов, допустим, какой-то причине нам
хочется, чтобы это был маркер 1, маркер E2, а тут сам текст, текст 1, текст 2, давайте посмотрим,
ну как видим, слова 1 и 2 стали маркерами, но понятно также, что если слово очень большое,
то оно вылезает куда-то влево, к такому лотях не был готов, он все-таки пусть и не ограничивает
вас, но ожидает, что маркер будет не очень большого размера, иначе форматирование куда-то
полетит, вот, лучше так не делать, думаю с этим все, вот, и немножко про теоремы,
мы в прошлый раз заикались, как это делается, тут это зафиксировано более подробно,
первых напомню, что чтобы делать теоремы, ну то есть такие окружения, которые имеют вид,
теорема номер такой-то, автора такого-то, далее текст, и весь формат текста заранее фиксирован,
допустим, название теоремы жирным, название автора там просто буквами, название текст теоремы
курсивом, вот это сегодня капсулируется в теоремы, и делается это вот так, в приамбуле пишется
модификатор TheoremStyle, подчеркну, это модификатор, то есть он действует, пока не будет применен
другой модификатор стиле теоремы, то есть все теоремы, которые будут объявлены далее после этого
модификатора, они по умолчанию имеют стиль Plane, стилей встроенных у нас 3, Plane, Definition и Remark.
Plane делает название теоремы жирным, а текст теоремы курсивным, Definition делает название жирным,
а текст обычным, Remark делает название курсивным, а текст обычным, но я предлагаю, например, посмотреть
только на plane и вот раз я применил такой модификатор все что будет далее все
объявления теорем они все используют стиль plane вот теорема является вот так
это команда new theorem в которой два главных аргумента аргумент того как
будет называться окружение этой теоремы на данном случае естественно
назначим их theorem и второй аргумент какой текст будет отрисовываться вот
аргумент необязательный который в квадратной скобке это номерация родителя за
каким объектом будет номироваться данный объект
допустим у нас есть номерация секций мы видели секции 1 2 3 все теоремы вида
theorem поскольку мы указали им номироваться за секциями в секции 1
будет иметь номера 1.1 1.2 и так далее секция 2 номера 1.2 2.1
2.2 и так далее ну понятно а следствие будет номераться в
честь теорем то есть если была теорема 1.2 то следствие после нее будет иметь
номер 1.2.1 потом еще до следствия будет иметь номер 1.2.2
ну и так далее ну и это поведение можно модифицировать можно поставить звезду
чтобы номерации не было вообще у этого вида теорем допустим я хочу чтобы были
все определения ненумерованными делаю нефтериум со звездой definition и
вот определение вот предлагаю вам вообразить какой как какой эффект будет
иметь такой вот код и потом в следующем слайде будет его результат
там все обсудим а если мне например нужно теоремы в одном стиле следствие в
другом я отдельно тогда ты делаешь ты меняешь модификатор стиля пишешь скажем
вот вот здесь уже после этого всего theorem style definition и уже потом другие
пишешь варианты нефтериум вот ну я думаю мы пример потом привезем
предлагаю пока подумать вот написан вот такой код что произойдет а пруф он не
определен да я предзабыл сказать извиняюсь
пруф это теорема которые по умолчанию есть это такая штука которая пишет
доказательства а в конце доказательства еще и ставит такой квадратик в конце
но вот увидим ну в общем думаю вы прониклись предлагаю посмотреть что будет будет
вот так вот давайте прямо посрочно мы говорим section 1 раздел делается новая
секция называется первый раздел с первым номером потом мы говорим у нас есть две
теоремы каждая теорема наследует номер от
секшена потому что мы так указали поэтому у них будут номера 1.1 1.2
ну вот действительно так оно и получилось потом используем встроенное
окружение пруф как твоя до сеть не забыл сказать оно по умолчанию есть и
и по умолчанию на русском языке пишет доказательства да если мы подключим пакет
русского языка бэйбл но у нас он есть но мы в прошлый раз его подключили а то
еще он как-то взаимодействует с пакетом пмс что-то там подозреваю что так ну то
есть это все тоже вещь регулируемая если я напишу скажем пруф
бигин пруф окружение среды и тут напишу какой-то текст то по умолчанию
он конечно напишет мне доказательства с точкой ну он поймает что язык
документов русский потому что мы это указали но я могу это менять я могу
поставить здесь квадратные скобочки как необязательный аргумент и написать
скажем пруф по-английски
вот и будет английская пруф это редактируется ну давайте реальные
эксперименты ради попробуем отрубить русский язык документа в мере что будет
тут скорее сюда упадет если это сделаю это тоже поэтому это комментирую давайте
попробуем просто пруф
а поечисляем тоже надо отрубить
да если мы отключаем русский язык то он по умолчанию пишет именно пруф вот
так что мы проверили он определяется именно пакетом
бейбл если мы укажем русский язык
хорошо давайте смотреть дальше вот пруф доказательства она отрисовалась и
что важно все доказательства завершают с таким квадратиком ну который обозначает
его завершение собственно его можно менять на какой-то другой символ я
этим никогда не пользовался если вам он очень не нравится может погулять как-то
делается но мы про вот все такие вещи кастомитационные как менять какие-то
конкретные символы мы попозже поговорим наверное не сегодня ну и вот дальше есть
следствие которые у нас номируется вслед за теоремами то есть последний
теорема была 1.2 следствие номируется 1.2.1 как мы
ожидали но определение не номируется никак потому что это не номерованное
окружение
давайте дальше я хотел еще сегодня поговорить про только делать прям
кастомное окружение с нуля но слайды сделать не успел я думаю что я могу
сомпровизировать быстренько пока общая идея подробно будет следующий раз но вот
есть такая команда new environment которая собственно не трудно догадаться что
нужно писать название среды my environment и далее два
аргумента это текст который предваряет то что происходит среде вот он текст
который ну замыкает среду допустим мы хотим сделать чтобы он был
центрированным и при этом жирным давайте значит тут писать begin
center и еще bfs помните манификатор bfs который все что далее до конца области
видимости делать жирным вот предлагаю его использовать то есть так мы скажем что
вот мы хотим чтобы перед началом нашей среды написался текст begin
центр и bfs но ведь по окончании среды нужно закрыть окружение
центр чтобы ничего не упало поэтому по окончании пишем инцентр
так что работать попробуем завернуть вот это вот сам в среду македонф
ну вот сработала мы сделали свою среду которая какой-то код вставляет до текста
в частности вот такой какой-то код вставляет после текста вот такой и
комплиирует то что получится то есть на самом деле тут begin center он тоже
разворачивается в еще выше определенную среду которая тоже в
начале пишет какой-то текст в конце пишет какой-то текст и вот раскрывается
реклассивно пока мы не упрёмся в чисто тех которые будут комплировать среды
в общем-то это просто способа инкапсулировать какой-то код вот идея
такая но надеюсь что вот такой пример крайней мере понять сложные примеры
сегодня мы не будем слушать
но надеюсь что так и еще сегодня стоит поговорить немножко про формулу в
прошлый раз мы начали но как бы тут уровень погружения очень много вот мы
сегодня на вторую уровень спустимся смотрим на более сложные примеры
первых шрифты я их анонсировал как менять шрифты внутри математики есть именно
команды уже не модификатор а именно команды которые свои аргументы
преобразует такой конкретно шрифт есть разные шрифты математики их больше чем
здесь их даже по умолчанию штук 10 но это типичные которые полезны 8 шрифт
мэд биби нужно чтобы отрисовывать какие-то там множество чисел натуральных
целых и вещественных как всегда есть аргумент в один символ то можно без
колокова указывать вот именно символ эр заворачивается в модификатор мэд биби
и становится у такого шрифта есть шрифт мэд биф но жирная шрифт с которой
обычно отрисовывают какие-то векторы есть шрифт матор м это шрифт просто прямой
обычной как в лотехе ну как в обычном тексте в лотехе им обычно отрисовываются
операторы но вот если мы хотим сделать не оператор а просто не что такого же
шрифта мы применяем модификатор маторе вернее команду матором и через мат сф
средь без засечек который тоже бывает полезен там для того чтобы называть
задачи сложности участений что писать там от ожидания гиперсию вот так он
выглядит есть шрифт холиграфический москал он тоже бывает нужно чтобы часто
наверное в лекциях слышали что-то вроде там п красивая или красивая вот
обычно когда что-то такое говорят имеет в виду буквы с таким вот эффектом такой
красивый шрифт да повторюсь их довольно много есть
чтобы их использовать нужно их подключать и еще такое наблюдение каждый
раз писать матор наверное длинно поэтому я например часто делаю вот так я говорю
new command заменяем москал вернее она делает
большинстве москал пишет скажем мс ну то есть покороче тогда если я напишу
тут мс и то получу или красивую но при этом меньше кодом набрав вот это
типичный прием если вас очень часто встречается какой-то модификатор вы
мне каждый раз его набирать вы придумываете более короткое название
делаете вот так понятно ли здесь
окей ну и вот комментированная тоже сегодня проблема про пределы вот есть
такие операторы типа сумма произведения у которых индексация по
умолчанию переходят вверх или вниз ну то есть если я сделаю что-то типа сам
нижний индекс верхний индекс то то что в индексах будет находиться не никак
индексовых положениях а именно что сверху и снизу по крайней мере если мы
находимся на новой строке то есть в окружении которые экранированы квадратные
скобки вот если мы всем не находимся по умолчанию сам не делает так он их
помещает все-таки справа от себя чтобы не выращивать высоту строки но это
можно редактировать можно для этого насильно перед командой сам вернее
после команды сам поставить команду limits команда limits говорит что предыдущий
оператор вот у него теперь индексы сверху и снизу они в положенном месте
тут это и происходит мы после команды сам пишем limits и теперь индексы
оказываются сверху и снизу строки строка разрослась это вообще не очень
хорошо но если вам очень хочется можно делать вот так и еще мы отмечали что у
нас дроби бывают маленького размера которые внутри строки и обычного вот если
мы пытаемся делать дроби на новой строке то все команды для дробей фраг или
дифраг они делают одно и то же вот что такое команда дифраг она говорит что
если мы находимся внутри строки то есть форм лежатого вида то в ней мы все
равно отрисовываем полного размера дробь вот то есть просто фраг отрисовывает
маленькую драк вот а дифраг отрисовывает дробь полноразмерная даже если
внутри строки вот все отличия вот понятно ли здесь можно же какой-то примерчик еще
например ну например что бы такое ну ладно пусть есть просто какое-то абстрактное
произведение н-чисел его можно как записать с равно а умножить на 1 на 2 и так далее
точки times а вот как мы там можем переписать нотации какой-то краткой можно сделать
ворот и индексы и от одного дайан бегает умножаются айты посмотрим как это выглядит
вот как видим у нас пока что пределы указываются ну как индексы просто и
попробую сделать то же самое формуле которая вот квадратные скобочки я утверждаю что эти
пределы переедут сверху снизу буквы п ну и вообще фарон будет по центру она будет большой красивый но
вот это главный эффект индексы переехали если бы мы хотели чтобы также это выглядело в 3 строке
мы для этого насильно ставим команду limits вот как видим индексы переехали при этом сама
буквы п больше не стало ну если вдруг нам очень хотелось чтобы индексы были сверху и снизу мы
этого можем добиться команды limits та же самая история с дробями допустим у нас это выражение
там 1 вторая 1 вторая и то же самое здесь сейчас дроби которые в этой формуле и в этой будут
разного размера здесь они полноразмерные здесь маленькие если бы мы хотели чтобы тут они были
тоже большие мы бы делали команду не фраг а ди фраг иди от слова дисплей если не ошибаюсь
вот вот все отличие теперь должен быть нормально ну да понятно кей кажется я обещал еще какой-то
пример довольно давно но я про него забыл давайте предоставим как это могло возникать наверное
где-то про теоремы да да что будет если будут разный стиль теорем я про это вспомню в конце
занятия давайте чел договорим тоже про матику ну вот есть разные вид стрелок допустим многие из
вас наверное налоги привидели что там сопоставление оператору матрицы имеет вот такой вид там
стрелочка влево вправо буквы и индекса какая-то матрица вот наверное такая аннотация у вас
встречалась вот есть у нее альтернатива можно писать это е тоже сверху или снизу как это
сделать но есть два варианта можно насильно снова поставить лимит как мы делали это другими
операциями а или даже нельзя потому что это не операция тем хуже значит так вообще
сделать нельзя но допустим мы пока пытаемся жить вот так у нас возникает какой-то большой индекс
много букв я ну получается что-то не очень приятное выглядящая как это ну не естественно далеко
буква остается буквы фи чтобы этого избежать есть такая штука как x left right arrow ну и вообще
в вариации строк ой в вариации стрелок у которой x в начале это нам производит строку у которой
теперь есть аргументы в куриных скобках и кажется еще один квадратных сейчас если ошибется то
даже не ошибся вот он принимает аргумент в куриных скобках и отрисовывает его уже прям над
стрелкой и более того стрелку он делает ровно того размера какого надо постраивать под текст
вот насколько я помню у него два аргумента еще есть квадратный аргумент сейчас посмотрю да все
так и тут тоже можно что-то написать и вот он отрисует нам снизу сколько нужно сверху сколько
нужно и выберет еще правильную длину вот такой хороший оператор советую использовать когда
возникает необходимость если что-то большое подписываю подписываю сейчас стрелку ну и здесь
я еще привел такой примерчик что можно посреди формулы набирать обычный текст это делается
внутри команды текст тут даже как-то добавить нечего если мы просто тут будем набирать
какой-то русский текст то это ну может и скомплируется но я не уверен но даже
если комплируется тут просто ничего не будет потому что лотех не поддерживает русский язык
математики ну допустим нам нужен какой-то текст посреди формулы вот очень хочется
берем команду текст и не заворачиваю вот ну тут конечно до пробелы игнорируется
поэтому это переспроставите собственноручно именно что в начале блока с обычным текстом но
по крайней мере это работает вот ну вот что еще отмечу вот эти вот приемы как делать какие-то
апператоры который сверху снизу ограничение пределы как делать длинные стрелки лучше делать
это формулах которые в центре строки вот вот таких почему-то я так и не нашел у них названия
как-то официально но вот лучше это делать формулах которые по центру а тех которые внутри текста
лучше так не делать потому что они нарушают целостность текста нарушают баланс высот строк
но это не очень красиво и не очень правильно, поэтому вообще эта команда довольно-таки злые,
по крайней мере команда limits, то есть если вы хотите чтобы оператор принимал индексы качества
верхнего и нижнего пределов, то вы лучше делать сразу оператор со звездой, то есть declare mass
оператора звезда, и тогда он будет в формуле посреди строки вести себя как обычный оператор
с индексами, а в формуле вот такой как оператор у которого предел, вот лучше делать так.
Осталось немного, еще тут просто некая солянка из разных способов рисовать что-то над символами,
это бывает полезно, там какие-то производные по времени точками, кажется, отображаются
проколутые окрестности кружочком, например, и такие преобразования фурье этими крышечками,
но синтез вот такой, есть команды, которые отрисовывают над заданным блоком текста заданную
картиночку, почему есть короткий длинный вариант, давайте посмотрим, допустим мы хотим взять head
над какой-то строкой, которая довольно длинная, посмотрим что будет, ну вообще говоря он сделал
то что мы хотели, он написал стринг и сделал крышечку над ней, но крышечка, согласитесь,
но неправильного размера, потому что это просто символ head, а вот крышечка регулируемого размера
это whitehead, но что ожидаемо широкая крышечка, ну вот, наверное, мы хотели чтобы это было так,
и вот подобный аналог есть у всех команд, тут я их привел, в презентацию вы можете почитать,
тут увереный вопрос быть не должно, все более-менее понятно, и вот то что я сегодня хотел рассказать,
но чувства уже будет многовато, есть еще разные другие окружения математические, не только парные
доллары, парные квадратные скобки, а окружение виды там equation, line, mouth line и так далее, вот давайте я
буквально пару примеров использования приведу, а подробно говорить не буду, потому что они вообще
полезны, что такое equation, это уже среда, то есть делается begin и end, то что происходит внутри,
по умолчанию уже математическая, вот, это такая среда, в которую уже как бы инкапсулирована
математичность, если можно так сказать, в чем особенность, equation нумируется, то есть тут
появится номер уравнения, и что естественно новое уравнение будет иметь новый номер, вот,
эту номерации можно управлять, можно менять тут, скажем, чтобы была тут латиница, или там римские числа,
или чтобы тут вообще были какие-то нужные вам спецсимволы, а не какая-то номерация правильная,
мы про это поговорим в следующий раз, вот сейчас не будем, ну и как всегда есть ненумерованный вариант
со звездой, вот, можно поставить звезду, тогда то что здесь на самом деле просто эквивалентно,
эквивалентно окружению из квадратных скобок, просто формула посреди строки,
вернее, на новой строке, без нумерации, без всего, это все то же самое, есть ряды более продвинутые,
если die-line, то, к сожалению, подробно поговорить сегодня я не успею, поэтому давайте только один
пример, эта штука нужна, чтобы написать несколько формул в одном блоке, допустим тут 1х равно бы 1,
потом, как в таблицах, новая строка выделяется двойным бэкслэшем, а2х равно b2, и так далее,
dots, anx равно an, что делает line, ну он просто позволяет отрисовывать это все, забыл про новую строку,
отрисовывать это все сверху вниз, почему он называется line, потому что можно выбирать,
по какому символу равнять эти строки, подумайте, что будет длинная нарисована,
я могу сказать, вот поставлю я апельсанд, вот здесь, вот здесь, вот здесь и вот здесь,
что будет, line выровняет все строки так, чтобы символы помещены апельсандом были на одной
вертикальной прямой, давайте посмотрим, вот тут я пометил символы равенства и символ
точечек, вот они все на одной вертикальной прямой, очень удобно, вариант alina без звезды,
он нумерованный, там довольно сложные правила нумерации, мы сегодня тоже не будем говорить,
ну то есть он нумерует каждую строку по отдельности, это тоже все регулируется,
но об этом не сейчас, и вот есть среда gather, которая делает почти то же самое, но тут уже нету
апельсандов для выравнивания, она просто равняет все по центру, если вам лень выяснять, где там у
вас центр, как там выравнивать, но gather это хорошая среда, она помогает, она просто берет кучу формул
и кидает их по центру, опять же есть наоборот нумерованная версия, которая без звезды, тоже
там есть какие-то правила нумерации, но про них тоже сегодня мы говорить не будем, и последнее,
что хочется отметить, я думаю сегодня, это среда multline, а что это из названия, это одна большая
формула, разбита на несколько строк, допустим у нас длиннющая сумма, не знаю, один, плюс два,
плюс три, плюс так далее, такая большая, что не влезает у нас, не влезает в одну строку,
сделаем так, еще точки, допустим у нас есть еще строка, в которой просто точки,
посмотрим, что получится, вот получится, да, то наверное лучше три строки сделать, чтобы не было
проблем, в общем, это среда, которая равняет строки так, чтобы они были на одной диагонали начинались,
вот, то есть, если строки были еще длиннее, допустим, я сделаю их еще вдвое больше,
давайте вот так, то тогда оно делает так, чтобы центры этих строк геометрически находились на
одной диагональной прямой, ну как бы отрисует одну длинную формулу более-менее корректно,
вот для этого нужно это окружение, длинные формулы встречаются, с ними почти всегда работают
и опять, если вам не нужна номерация, то используем звезду, я, честно скажу,
номерация сам не пользуюсь почти никогда, как-то мне без нее проще, потому что ее настраивать довольно
лениво, ну вот, как ее настраивать, мы поговорим попозже, вот, и последний обычный пример, как делать
теоремы разного стиля, рамках одного документа, вот, тут у нас что-то происходило, сделали
new theorem plane, потом объявили сколько-то теорем, как бы мы делали, если бы у нас потребовалось
поменять стиль теоремы, напомню, SerumStyle это модификатор, пока что у нас все теоремы,
которые объявляются, будут иметь стиль plane, чтобы это изменить, нужно применить другой модификатор,
допустим, SerumStyle Remark, все поменяли, теперь все, что будет дальше, через это будет после этой
строки, новые теоремы будут получать, ну, новые объявленные теоремы команды new theorem будут
получать SerumStyle Remark, допустим, так и сделаю, новый вид теорем, который будет называться что-то типа
node и говорить замечания, убедимся, что они имеют разный стиль, там потребуется один definition для
сравнения и один node, даже не буду ничего менять, посмотрим, ну вот, как видим, стиль поменялся,
стиль definition plane предполагает жирное название и курсивный текст, стиль node Remark предполагает
курсивное название и обычный текст, вот примерно то, чего мы и хотели, я надеюсь, что тот пример,
который у меня спрашивали очень давно, это то, что вы хотели, да, супер, вот, думаю, что это
сегодня все, что хотел рассказать, мы много покрыли, на самом деле, вот то, что нам за занятием
обсудили, вам уже хватает, чтобы прям сесть и писать целый конспект текций, целый курс, если вам
тут захочется, вот, но тут еще есть много чего, что стоит обсудить, какие-то полезные техники,
которые позволят как-то глубже понять, как это работает, это у нас все еще будет.
