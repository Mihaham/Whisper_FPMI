Всем доброго дня! Мы с вами продолжаем наш курс, и внезапно мы уже приблизились к двум третьям наших лекций.
И сегодня мы поговорим с вами про такую интересную вещь, как нормальная форма грейба х.
Напоминаю правила русского языка шестого класса.
Да, это женщина. Женские фамилии не склоняются... Женские фамилии иностранного происхождения не склоняются.
Вот. Да, запоминаю.
А сколько фамилий русского происхождения?
Нет, ну совсем, так сказать, русского происхождения. Совсем иностранного происхождения.
Ладно, давайте вспомним, что мы делали с вами в предыдущих лекциях.
Короткая выжимка.
Да, раз. Мы обсуждали с вами МП-автомат.
КС-грамматика МП-автоматов. Отматываемся еще раньше.
Что у нас было уже с нормальными формами?
Да, у нас была нормальная форма хомского.
И вот, собственно, наша цель сегодня связать эти темы.
У нас с вами была нормальная форма хомского.
И вот, собственно, наша цель сегодня связать эти темы.
И вот, собственно, наша цель сегодня связать эти темы.
У нас с вами есть нормальная форма хомского.
И хотелось бы понять, а существует ли какая-то более крутая нормальная форма?
Вот. А?
Более мощная, так сказать, первая форма.
И здесь оказывается, что иногда бывает полезно выводить именно первую букву.
В слове. То есть, каждое правило грамматики выводило бы первую букву.
Да, пока у нас такого нет.
Давайте напомним грамматику.
Нет. Праволинейные там правила все имеют вид в WB.
А здесь будет несколько не терминалов дополнительно.
Значит, давайте напомним, из чего у нас состоит нормальная форма хомского.
Еще разок.
Какие правила у нее есть?
Да, у нас правила такие.
Как видно, только здесь вот это правило выводит первый символ.
Я сегодня предлагаю в качестве альтернативы построить другую нормальную форму.
Которая будет выглядеть следующим образом.
С в Эпсилон.
А в А.
А в АБ.
И А вводит АБЦ.
Опять же, здесь Б и Ц не равны пустому мнению.
Как можно догадаться, мы из вот этой формы будем выводить вот эту форму.
Давайте сразу тезисно расскажу, что нам это поможет сделать.
Вот эта нормальная форма позволит построить МП-автомат без Эпсилон-переходов.
А вот это в свою очередь нам позволит доказать один интересный факт.
Что пересечение МП-языков и автоматных языков является МП-языком.
Ну или в переводе на другой язык, что КС-пересечь с регулярными языками являются КС-языками.
Кто-то, возможно, видел такую сдачную колокню.
Только там, наверное, требовалось решить немножко другим способом.
И этим мы с вами закроем основную тему, посвященную КС-грамматикам и МП-автоматам.
Итак, хотим еще получить автомат самыми переходами.
Определение нормальной формы гребах еще раз.
Грамматика находится в нормальной форме гребах, если все ее правила имеют такой вид.
А в А, А в АВ, ну и дальше А в АВЦ.
То есть это то, что я уже выписал на слайде, на доске точнее.
Давайте подумаем, как привести грамматику к нормальной форме гребах.
Для этого нам нужно немножко порисовать деревья.
Давайте, то есть давайте сформулируем теорему.
Прежде чем, любая КС-грамматика может быть представима.
В нормальной форме гребах.
То есть существует эквивалентная грамматика по распознаванию языков, которые представим в нормальной форме гребах.
Давайте мы введем следующую не терминал.
Значит, это уже сразу доказательство идет.
В без А.
Точнее, если правильно говорить, это оператор правого деления.
Чего? А, видимо матричная алгебра не так сильно разбиралась.
Нет.
Смотрите.
Сейчас я покажу интересные вещи.
Мы хотим сказать, чтобы доказывать такое свойство.
Значит, смотрите.
Что мы с вами сделаем?
Давайте мы мысленно с вами представим, что вот здесь вот у нас знак равенства.
И представим себе, что это у нас с вами не объект языка, а матрица.
Мы хотим ввести такие объекты, пока я их формально не определяю.
Сейчас мы увидим просто по картинкам, как хотелось бы их определить.
Угу.
Смотрите. Представим себе, что это у нас матрица.
А, Б и В это матрица.
Вопрос.
Как решается вот это линейное уравнение в том случае, если матрица Б у нас невырожденная?
Да.
Вот.
И это как раз на самом деле обозначает вот так.
Давайте, чтобы мы с вами были удостоверены в этом, я сейчас открою Гугл.
Ага.
Вот.
Собственно, определение правого деления.
То есть, хм...
Хм...
Хм...
Хм...
Хм...
Хм...
Хм...
Хм...
Хм...
Хм...
То есть, хотим следующую вещь.
Чтобы у нас с вами те свойства, которые у нас были, вот состояли таким образом.
Что L2 без L1, сразу скажу, что мы будем использовать не а термин для...
Существует а термин для любого.
То есть, смотрите, что получается.
Мы хотим сделать так, чтобы существовало слово слева из языка такое, что мы дополнение его приводило нас к общему языку.
Если мы с вами вот это заменим на L1, а вот это на L2, то как раз тот объект, который мы хотим выводить, это будет L2 без L1.
Я бы так сказал, что мы свели вот наше определение к формальному определению правого деления, которое существует в математике.
А?
Ой, стоп, это левое деление, извините, перепутал.
Это оператор левого деления.
Вот, он используется в линейной алгебре.
А?
Да-да-да, оно немножко может запутано быть.
То есть, мы с вами определяем...
Тут даже пишут нагады любого.
То есть, наша цель – это определить множество слов и сигмы со звездой такое, что...
Вот такую вещь.
Вот такую вещь.
То есть, это оператор для любого, есть оператор обычного деления.
Вот. И мы хотим...
А?
Нет-нет.
А, для любого.
Вот так вот.
А?
Да.
Но это вот такой термин. То есть, L2 без L1 по отношению любой.
Да. То есть, формально смотреть, то у нас квантор меняется.
Да, согласен. То есть, тогда мы можем просто использовать нижнее определение.
Да, мы используем нижнее определение.
Здесь у нас получается, существует вывод здесь, значит существует вывод здесь.
Вот. Просто из два языка мы будем пользоваться вот этим.
Вот. И вот основную лему, которая мы с вами...
Конструкцию, которую мы хотим с вами привести, это такую конструкцию, которая нам позволит выводить вот эту лему.
Этот факт.
Давайте как раз это нарисуем в виде дерева.
То есть, это будет выглядеть вот так.
Вот.
Мы хотим это сделать следующим, чтобы у нас B без A владелось нашим словом W.
Вот. Давайте строить эту конструкцию.
Да.
Нет, не можем. Иначе бы это было право линейной грамматики.
А тогда у нас, смотрите, если мы сворачиваем это в новый терминал, то у нас добавляется правило вот такого вида.
Да, да. Мы не хотим правил такого вида.
Так. Ну давайте шаманить с этим деревом.
Так. Нам нужно понять, что выводится здесь.
А помните идею, которую в прошлый раз мы с вами говорили?
Много очень раз говорили. В алгоритме Эрли она у нас встречалась.
Давайте посмотрим первый момент, когда у нас появился не терминал B.
Тогда у нас возникнет следующая картинка.
Вот такая вот.
То есть у нас возникает зум.
И мы говорим следующее, что на самом деле у нас с вами есть какой-то не терминал C, который за один шаг вывел BD, а дальше вывел O.
А здесь у нас Z.
Можно еще вопрос?
Да.
То есть в нашем случае нужно не что бы выводило BD, а что бы выводило Z, а не C, а D, где BD влезет в свой бойцов.
Нет, нет. Тут именно говорится в том, что мы именно в определении деления языков будем искать первую букву.
Ну нет, я имею в виду, что если мы берем определение с существованием, то он не обязан выводить BW, для всех BD нельзя взять B, не достаточно одного.
Ну да.
То есть он в той идее A должен выводить не вот это BW, а BD, где BD.
А, стоп. То есть вы говорите, что скорее всего нужна определение для любого, да?
Ну если вы рассматриваете BD на влагимость, как для любого слова B, оно выводит BW.
Хороший вопрос.
Ну да. Смотрите, давайте скажу так, что здесь мысль состоит в том, что, как бы, давайте уточню, что это как раз согласованность определений,
и напишу, что это согласованность в кавычках. То есть почему мы именно пытаемся определить вот такой оператор?
А это вот такой саплиментарий материал, так сказать, который нам помогает в определении.
То есть вот это вот определение взялось не абы с того, что я взял эти символы откуда-то, а что это реально существующий оператор.
Какой? Вот этот? Ну давайте тогда, ладно, давайте формально определим, что мы будем строить грамматику.
Значит, GH, точнее, Г. Грейбах, у которого будет кортеж, значит, смотрите, это важно, так-так-так-так-так, у него будет множество не терминалов.
Грейбах это С, объединить В без А, где А и В принадлежат множеству не терминалов.
Сигма, П определим позже, и С. Вот. То есть вот такую грамматику мы с вами будем строить.
Сейчас. Ситуация, да.
Похоже, давайте скажем так.
Ну да, то есть мы просто хотим максимально приблизить вот этот термин с этим термином. Это наша цель.
Вот, больше мы ничего не делаем.
Да-да.
Ну да, хорошо. Так, смотрите, давайте помедитируем еще раз над этой картинкой. То есть, что у нас получается? У нас с вами есть В без А, то что выводится из В правое, левое деление А.
А теперь смотрите, значит, что у нас происходит? Давайте попробуем вытащить первый символ.
Как мы можем вытащить первый символ? У нас D раскрывается в некоторое слово У.
Ну, видно. Причем из-за того, что это нормальная форма хомского, У не пустое.
Взять на У мы можем представить в виде какого-то символа ех. Логично? Ех. Маленькая, маленькая.
Вот. А как это можно сделать?
В самый левый, левый, левый.
Правильно.
Давайте найдем первый не терминал, который раскроет это все в букву Е.
Это новый, если мы говорим совсем-совсем формально, это новые не терминалы, которые у нас будут в новой грамматике.
Мы хотим ввести не терминалы такого свойства, мы хотим ввести такой тип не терминалов, для которых было бы выполнено вот это свойство.
Да. Явно конструктив сделать.
Ну, не совсем конструктивно понять, по крайней мере, откуда вы вводится.
Так. А теперь смотрите внимательно на вот эту картинку.
Тут будет выводиться х.
А вам картинка вот такая.
Так. Сейчас, секунду. Единственный момент. Нет. Это Гонио. Мы можем вот так написать.
Давайте оставим х.
А теперь смотрите внимательно на вот эту картинку.
Утверждение, что хочется добавить такие правила в нашу грамматику.
Вот это что у нас? Вот это символ Е. Вот этот символ как закодируется в тех терминах?
Д выводит Е, х.
Значит, этот символ у нас Е без Д. Вот то, что выводится справа здесь.
А З это что такое?
Наоборот, С без А.
Нет, тут смотрите. Там, где не написана циферка, это означает вывод за какое-то любое число шагов.
А там, где единичка, это вывод за один шаг.
Не-не-не. Наша цель именно посмотреть на то, собственно, а что если у нас...
Смотрите, идея такая. Давайте рассмотрим вот такую ситуацию, что А без Б без А у нас выводится В.
То есть у нас из А выводится БВ. Попробуем это слово В, В вывести таким образом, чтобы у нас раскрывался при первом правиле первый терминал.
Ну вот, смотрим эту ситуацию. Раскрываем еще раз. Мы говорим, что давайте рассмотрим первый момент времени, когда появился вне терминала вывод символа В,
и забьем дальше на то, что идет левее. У нас получился Д, который раскрывает некоторые слова У, равные ИХ.
Вот, хорошо. Смотрим, как мы выводим первую букву. Как мы выводим первую букву Е.
Она вывелась из никакого-то не терминала, потому что у нас грамматика в нормальной форме хомского.
Ну вот, Е. Дальше все, что оказалось справа от этого Е, на самом деле, если мы поддержим инвариант, будет выводиться вот таким не терминалом.
А вот этот вот З, который выводился справа отсюда, будет выводиться не терминалом С без А.
Понятно вот эта идея?
Да, конечно же. Иначе бы это так не произошло.
Да-да-да.
То есть это, смотрите, когда вот такой переход появляется, он появляется в том случае, смотрите, если у нас был переход С следует БД, и Е выводит Е.
Где? Вот тут?
Ну у нас просто, допустим, из А выводилось какие-то правила. У нас, допустим, и здесь, на самом деле, есть еще какие-то большие-большие наборы под деревьев.
Нет, не обязательно. Это просто произвольное слово.
Да легко.
Ну смотрите, мы могли бы выводить Д, я не знаю, смотрите, Е, Ф, Ф бы вывелся в Е, Ж, А, там Ж, А бы свое, собственно, тоже как-то вывелся и так далее.
Ну а из Е выведется Е только. А из Ф можешь вывести дальше любое слово.
А, типа, сейчас подождите. Это хороший вопрос. Сейчас появятся они.
Да, мы еще что-то упустили. Что мы упустили с вами?
А, ну из Е выводят Е, остаются правила.
Нет, не обязательно.
Так, хорошо. Вопрос, где еще подвох?
Смотрите, правила грамматики какие у нас. У нас есть стартовый не терминал.
Давайте я промотаю вот это.
Как начать и закончить вывод?
То есть это какая-то промежуточная стадия.
Теперь представим себе картинку,
что мы находимся в стартом состоянии.
Давайте посмотрим на первую букву слове, которое выводится.
Высота буквы А.
Это значит, что за один, существует такой же не терминал А, что за один раз он выводит нашу букву А.
Отлично.
Здесь у нас остается слово W.
Но тогда логичнее, смотрите, что сделать. Добавить правило S.
Вот такое.
То есть это правило, которое позволяет вывести первую букву в нашем слове.
Что?
В смысле нету.
Без них никак.
Нам нужно все слово выводить.
Это для всех не терминалов. У нас же первая буква может быть произвольная.
Поэтому мы оставляем вот эти первые буквы.
Максимально везде.
Это гипотетический способ вывести первую букву.
Да нет, не стану.
Не, ну нам же все равно надо как-то все это вывести.
Я понял. Сейчас, секунду.
А, типа вы спрашиваете, а почему вот такие правила останутся?
Это хитрый способ.
Еще одна хитрая подманка.
Да, давайте.
Я просто сначала пытаюсь рассказать физический смысл, а потом его формально уже определить.
Возможно, это не очень хорошая затея.
Смотрите, это начало.
Так, конец.
Раскрыли его в букву.
А все, что на штуку выводится.
Так, конец.
Смотрите, вот мы выводим с вами не терминалы вот такого типа.
Если мы выводим не терминалы такого типа, то нам нужно их во что-то вывести.
А теперь смотрите.
Как вы думаете, что логично выводить из вот такого?
Ну, в глубине, в глубине.
То есть мы разматываем, разматываем, разматываем.
И потом оказывается, что мы вошли в какой-то бесконечный цикл.
Хочется пустое, ну давайте сделаем.
Да, мы хотим без эмсион-переходов.
Так, а теперь смотрите, последний вопрос.
Откуда появляется правило из А следует А?
В этом определении.
Удаление всем порождающих.
То есть еще раз, давайте формально определим.
Значит, мы с вами устроим грамматику вот такого типа, где П, Ж это правило вида.
Раз, два, три.
Лемма, которую мы будем с вами доказывать.
Что если мы построили такой вывод, то у нас будет выполнено вот это соотношение.
В конце правила мы удаляем эмсион-перождающие и приводим нас вот к такому виду.
Теперь осталось это доказать.
Квадрат.
Да.
Нет.
Сколько у нас не терминала?
Четыре новых не терминала появляются.
Терминал очень большой.
И количество не терминалов становится квадратичным.
Ну да, там было задание в одном из семинаров, по-моему, в прошлом году,
составить грамматику в нормальной форме грейбах.
Товарищ, получилось что-то на простую грамматику 600 правил.
Не на доске, но на компьютере они были посчитаны.
Это такой эфемерный объект.
Давайте докажем это все дело.
Угу.
Угу.
Да.
Ага.
Да.
Ага.
Да.
Да.
Да.
Да.
Да.
Да.
Угу.
Ага.
Да, да, да.
Это вывод для конкретного физического слова мы сейчас разобрали.
А слов может быть много разных.
Поэтому нам надо все варианты перебирать.
В этом деле тоже прав.
Да, да, да.
Да, да, да.
Да, да, да.
Да, да, да.
Ну, я думаю, тут можно уже на досуге посчитать, сколько тут будет.
В общем, будет много.
Давайте на этом остановимся.
Я предлагаю, значит, мы тут можем целую лекцию дискутировать на эту тему.
Итак, смотрите, будем доказывать утверждение вот этого типа.
И давайте начнем с первого утверждения.
Докажем это утверждение правую сторону.
Ну, как?
Какие?
Мы берем произвольную пару, произвольную пару правил вот такого типа.
И генерим вот такое правило.
Где тут? Да, произвольная, то есть для всех правил вот такого вида мы генерим.
Да.
Ну, ничего страшного, просто это состояние будет недостижимо.
То есть тут огромное количество недостижимых ситуаций возникает.
Итак, давайте докажем утверждение.
Опять же, интукция по длине вывода.
База.
Б без а за один шаг выводится слово w.
Тогда посмотрим на наши правила и поймем, что это за правило.
Какое это правило?
Вот, то есть получается, а равняется b, b вводит эпсилон.
Ну, действительно, мы получаем, что из а мы выводим а эпсилон.
Переход.
Значит, предположим, что у нас с вами за один шаг вывелось правило.
За один шаг у нас есть правило e,
e без d, c без а.
Ну, дальше у нас это выводит какое-то e иксу.
Ну, давайте раскидывать.
Значит, что у нас получается?
Из вот этого следует, что у нас есть правило c, b, d.
У нас есть правило c, b, d.
А из этого получается, что e выводит e.
Дальше.
Значит, по предположению индукции.
А у нас там z было.
Значит, у нас получается, что d выводит e, x.
А выводит c, z.
Ну, тогда, смотрите, a выводит c, z.
За один шаг выводится b, d, z.
Дальше d у нас выводит e, x.
И это еще раз выводится b, e, x, z.
Которое на самом деле выровняется w.
Да.
Какую?
Вот эту?
А, типа, смотрите, вот это в грамматике g грейбах, а вот это в грамматике g холмского.
Нет, смотрите, вот это объект в старой грамматике.
А вот это в новой.
Нет.
Подождите, где стоит?
Нет.
Смотрите, это в старой грамматике, это в грамматике в нормальной форме холмского.
Есть, в старой грамматике-то есть. Ну, это просто отношение выводимости.
Нет.
На отношении выводимости это наименьшее рефлексивное транслятивное отношение, для которого выпало на свойство.
Там оно определялось для всех множеств пары не терминала, не терминала.
То есть там объекты слева и справа стоят из n, b, d тигмы со звездой.
То есть это отношение на n, b, d тигмы со звездой.
Поэтому здесь все честно.
Так, хорошо.
Давайте я спрошу, индукционный переход в одну сторону понятен?
Здесь все честно.
В обратную сторону.
Так.
По длине вывода.
По длине вывода.
По длине вывода.
Смотрите еще раз.
Значит, а выводит b, v за ноль шагов.
Что это означает?
Ну тогда у нас а без а в грамматике, давайте g будем писать,
выводит епсилон за один шаг.
Потому что у нас есть такое правило грамматики.
Переход.
Кто здесь понимает, как происходит переход?
Кто здесь понимает, как происходит переход?
На самом деле здесь можно написать два слова.
Смотри картинку.
Можно так говорить.
То есть смотрите, по факту вот это, это переход.
То есть еще раз.
Что мы говорим? У нас а выводит b, v. Давайте рассмотрим первый момент времени,
когда выводится b, первый момент времени, когда выводится символ е.
Выводим такое правило по предположению индукции.
Получаем остальные выводы.
То есть смотрите, как мы сделали. То есть мы построили конструкцию
для того, чтобы у нас произошел переход.
А?
Да.
Главное, эту ссылку не удалить.
Да.
Понятно, что переход можно здесь не оформлять.
Хорошо, теперь доказательство самого факта.
Значит, нам нужно вывести, показать следующее.
Доказательство ремы, что в грамматике в нормальной форме хомского
идет вывод тогда, только тогда, когда у нас выводят это все в нормальной форме грейбах.
Ну, давайте смотреть.
Ну, давайте смотреть, что у нас здесь происходит.
Первый момент, что если у нас
ε принадлежит l в нормальной форме грейбах,
следовательно, тогда и только тогда, когда s выводит ε,
то есть существует правило, s выводит ε, мы его оставляем
в грамматике g.
Ну и в грамматике в нормальной форме хомского мы его тоже оставляем.
Да.
Согласен. Согласен.
С, да, то есть тут везде надо...
Да.
Вот так. Хорошо, согласен.
Это нотация, что это в грамматике в нормальной форме хомского.
Так, переход. Значит, смотрите, что здесь происходит.
Ну, здесь, собственно, те же самые рассуждения, которые у нас есть.
Допустим, у нас с вами
w равняется ау,
тогда будет утверждение следующее.
Ау принадлежит языку задомаемой в грамматике в нормальной форме хомского.
А это означает, что у нас есть вот как раз тот вывод в дереве, который был.
Грамматики в нормальной форме хомского такое, что
s выводит ау, и за один шаг мы вводим ау.
Тогда по лемме мы понимаем
с вами следующее, что a без s
будет выводить не терминалу.
И это уже в нормальной форме грейбах.
Ну а как вот такие правила у нас порождается? Смотрите, у нас из a выводится а,
и из a без s выводится символ у. У нас есть правило следующее.
s за один раз в нормальной форме грейбах
вводит следующую вещь.
А вот это у нас выводит ау,
наше слово w.
Все, доказали теорему.
То есть видите, идет огромное количество магии
с тем, что первый раз выводится.
Они большая часть
будут недостижимы
этих терминалов. То есть то количество терминалов,
которые мы вводим, они скорее всего будут недостижимыми.
Не, у нас нет гипотетического перехода
с d и e. Тут обман зрения.
Из d добираться до e мы могли не за один шаг, а за какое-то большое количество шагов.
То есть у нас d могла замениться на...
То есть у нас могла цепочка первых не терминалов по пути вывода просто поменяться.
То есть у нас не было этой цепочки, это не терминал e.
Да, да.
То есть он не будет прирождающим.
Так, теперь еще один взрыв мозга.
Извините, это нужно для того, чтобы просто совместить еще один факт
и не доказывать еще одну лишнюю теорему.
Давайте мысленно сделаем следующую вещь.
Вы понимаете, что мы можем по факту придумать обратную нормальную форму Хомского,
где выводится у нас сначала самый последний символ?
То, что мы можем аналогичным образом выводить последний символ, а не первый.
Ну да, все, хорошо, просто это надо поговорить.
Обратная нормальная форма Грейбах.
Зачем это нам надо? Это нам нужно для того, чтобы построить автомат без эпсилон переходов.
Давайте это буду, напишу ее здесь.
Нам нужно, чтобы последний символ раскрывался.
Сейчас я это объясню.
Давайте вспомним, какой у нас был автомат в прошлый раз.
Как мы пока из грамматики строили АМП-автомат?
Кто вспомнит?
Амп-автомат.
Амп-автомат.
Кто вспомнит?
Да, да, да.
Нет, с чего бы?
Она бы строила, если бы мы строили пока из грамматики по автомат немножко другим способом.
А третья мысль такая. У нас, допустим, есть правила вот такого типа.
Это означает, что у нас был бы автомат вида вот такого,
и дальше был бы автомат следующего образа.
Мы снимали эпсилон, точнее, читали бы эпсилон,
на входе бы принимали C, B, A, и на выходе писали A.
Смотрите, у нас проблема в том, что вот здесь вот правила грамматики,
которые есть, они содержат эпсилон.
Правила вывода АМП-автоматов.
Но давайте теперь внимательно посмотрим на эту конструкцию.
Когда у нас символ А появляется на стеке,
оно закрывает какое-то правило.
То есть у нас добавляется вот этот символ на стеке,
а потом происходит свертка.
С этим символом.
Поэтому эти два правила можно объединить.
Вот это и вот это.
И получить правило вида A.
Со стека снимаем C, B и кладем A на стек.
То есть как только мы хотим применить свертку по этому правилу,
мы с вами берем и применяем правило для последней буквы, которое мы положили.
Понятно ли это идея?
Что для каждого правила вот такого вида у нас есть буква, которая ее породила.
Берем правило для этой буквы и повторяем комбинацию этих двух правил.
Ку-ку.
Ку-ку.
Есть еще второй неприятный случай, который нужно разобрать.
Мы убираем эпсовом переход в mp-автомате.
В mp-автомате, который мы построили по кс-грейматике в нормальной форме грейпах.
Говорим, что у нас есть правило вот такого типа и нам нужно убрать отсюда эпсовом переход.
Замечаем последний символ, который у нас стирался.
Его кто-то добавил, оно было добавлено по такому правилу.
Значит перед вот этой сверткой шло вот это правило.
Вот мы...
Да, да, да.
Вот.
Если кто не верит, формальное доказательство тут есть на слайдах.
Но оно будет буквально слово в слово практически повторять переходы в эпсовом этом.
Да, да, конечно же.
Вот. Второй переход, который тоже важно рассмотреть, это вот...
Это вот такая цепочка.
Как вот это правило убрать?
Посмотрите.
Да.
Вот.
Вот.
Вот.
Да.
Да, смотрите, у нас уже есть правило вот такого типа.
A, C, B, A.
Допустим, у нас был вывод в правиле S, V, O, A, B, C.
Это значит, как бы мы его преобразовали?
Если бы оно было, мы бы выводили бы...
Ой, да.
C, B, A.
Это означает, что если у нас вывод идет такого правила, то мы делаем следующую вещь.
Мы говорим с вами, что...
Сделаем переход.
Давайте нарисуем. Вот отсюда.
Вот сюда. По вот такому символу.
Сейчас, секунду.
Чтобы на stack S не класть.
То есть как бы мы повторяем три действия?
То есть у нас вот это вот все дело было вот так.
A, Epsilon, A.
Это в старой грамматике.
Дальше у нас было бы Epsilon, C, B, A, S.
И Epsilon, S, Epsilon.
Вот. И мы вот эти три правила вхлапываем в одно.
Остался последний момент. Если S выводит Epsilon, то как это решить?
Да.
Если S выводится Epsilon, тогда это только тогда, когда Q0 в нашем автомате влияет.
Потому что мы в завершающем состоянии.
Формальное доказательство будет точно такое же.
Давайте рассмотрим первый момент, когда появился не терминал C.
И появился не терминал B.
И построим цепочку. Вот вспоминаем предыдущие доказательства, и оно будет работать.
Тем самым мы доказали, что у нас можно построить MP-автомат без Epsilon переходов.
Так.
Согласны с этим?
Хорошо. Теперь как пересечь MP-автоматы и обычные автоматы?
Да.
Да.
Да, именно.
А?
Значит, смотрите, картинка. MP это что такое?
Это NKA.
Однобуквенный плюс СТЭК.
Я, извините, слово СТЭК не умею писать по-русски, поэтому я напишу это по-английски.
Что такое NKA с однобуквенными переходами?
Ну, это он и есть.
Тогда что будет такое пересечение MP?
Пересечение двух NKA
плюс СТЭК, который
привязывается к нему сбоку.
Где?
Там не было бы понятно, как эти переходы все замыкать.
То есть как? Вы в одном автомате переходите по букве, а во втором что делаем?
То есть в обычном NKA с однобуквенным переходами мы переходим по букве,
а что делать в MP-автомате в этот момент времени?
Вот смотрите еще раз. У вас есть один автомат, в нем перешли по букве.
А в MP-автомате, допустим, мы сделали вот такой переход.
Вы предлагаете просто СТЭК поменять.
Но при этом, смотрите, здесь-то мы находимся уже в конкретном состоянии, и здесь находимся в конкретном состоянии.
Если СТЭК поменять, то в одном автомате мы прочитали уже
букву, все замечательно, а в этом мы еще эту букву не прочитали.
У нас происходит не совпадение автоматов.
Для NKA с однобуквенными переходами.
Собственно, тут есть доказательство очень долгое.
Нет, тут все формально написано.
Вот это вот просто слово в слово пересказывание доказательства факта пересечения KS грамматики в MP-автомате.
Смотрите, строим-те картовое произведение.
Вот эти двух автоматов.
Вот они переходы.
Переходы согласованы.
Из пары переходов мы делаем переходы на время.
У нас просто будут похожие идеи, поэтому мы с вами это пропустим.
Давайте картинку рассмотрим.
Вот у нас есть с вами два автомата.
Как их объединить?
Как их пересечь?
Собственно, не зря они нарисованы по строкам и по столбцам.
Давайте применять. Давайте нарисую этот автомат на доске.
В этом автомате будут четыре состояния.
Стартовые будут там же.
Завершающая где будет? Справа, снизу.
Теперь давайте переходы разберем.
По строке у нас есть переход по букве А. Это означает, что переходы здесь будут какие?
У утверждения, что будет переход вот такой.
То есть в одном переходе мы в автомате двинулись по стейку, в другом не подвинулись.
Какие еще переходы?
У утверждения, что есть вот такой переход.
Есть вот такой переход.
То есть смотрите, мы не меняемся по столбцу вот здесь, но меняемся по строкам.
Какой автомат в утверждении этих автоматов принимает слово?
Какие?
Какие?
Какой автомат в утверждении этих автоматов принимает слово?
Какие типы слов принимают?
Вот этот вот.
БАБ со звездой.
Ну да, стэк здесь оказался абсолютно бесполезный.
А что принимает у нас эти два других автомата?
То есть первый автомат у нас принимает АБ со звездой.
А второй автомат у нас принимает слова вида какие?
О, господи, тут их сложно.
А?
А нет, он как раз и принимает вот этот автомат.
Вот.
Это совпало.
А?
Нет, так именно.
А, там сложнее, да.
Могут быть Ашки в середине, да.
Нет, они не могут быть в середине.
Нет, смотрите,
после Ашки сразу Башка должна идти.
То есть мы по Башке не пройдем, пока мы на стэк букву А не положим.
А потому что тогда перебор по Башкам будет.
Нет смысла в автомате.
Согласен, чисто экспериментальный пример.
Вот этот язык.
Тоже самое.
Да.
Так, хорошо.
Значит, это что касается темы КС-МП-автоматов без эпсилон-переходов.
Хорошо, понятно.
Тут, может, было сказать, вот и сказочный конец, а кто слушал, молодец.
Но у нас есть еще 20 минут, поэтому.
Мы лекцию в 11.47 начали.
Да, внезапно, да. Пока мы все собирались.
Поэтому мы начнем с вами интересную тему.
Да.
Да, это единственная тема, которая можно рассказать с конспектом.
А?
Да.
Да ладно, возникает.
Это в нормальной форме грейбах, да?
Ну, смотрите, у нас же есть правила вот такие вот.
А если вот этот символ эпсилон-порождающий?
Он может быть эпсилон-порождающим.
Ну, у нас из них терминал, может выяснить то же самое, что и С.
Элер алгоритм.
На семинарах будут два типа алгоритмов.
Помните, у нас с вами был автомат перенос свертка, на который мы уже с вами нарисовали.
И здесь возникает следующий вопрос.
Вот смотрите, у нас есть правило вида.
Эпсилона.
Есть правило, значит, эпсилон альфа-а.
Вот эти правила, это правило вида shift.
А вот эти правила, это правило вида reduce.
Вопрос. Какое из правил применять?
Значит, если мы с вами попробуем применить оба эти правила одновременно,
то внезапно у нас в алгоритме получится экспоненциальная сложность.
Потому что у нас будет перебор вариантов всех возможных развилок.
То есть мы каждый раз можем либо применить правило shift, либо мы можем с вами применить правило reduce.
Ну да, бесконечное время выполнения.
Поэтому нам нужно каким-то образом научиться этот алгоритм делать чуть-чуть эффективнее.
И здесь нам на помощь приходит алгоритм early внезапно.
Я надеюсь, вы его не забыли.
Что у нас было в алгоритме early?
Ситуация.
Ситуация выглядела вот таким образом.
Я видел ваш холивар в субботу вечером в чате.
Бесподобный.
Точнее, в пятницу вечером.
Но я подумал, раз суббота выходной, вы решили повеселиться.
Ситуация.
Значит, смотрите следующая вещь, которая у нас возникает.
Мы с вами говорили, что у нас есть ситуация.
Вот эти и ижи, они определяют позиции внутри слова, длину слова.
Сколько символов мы разобрали, сколько символов мы разобрали вы родители.
За счет того, что мы делали 4,4 по этим ситуациям, у нас возникала купическая сложность.
Поэтому давайте мы сделаем хитрую вещь.
Давайте попробуем избавиться от этих индексов.
Избавиться от этих индексов.
Просто оставить вот такую вещь.
Чем их заменять?
Утверждение, которое мы будем с вами доказывать, что мы можем над множеством вот этих вот ситуаций,
некоторым образом построить детерминированный конечный автомат.
А теперь, а?
А как мы будем переходить из ситуации в ситуацию?
Давайте подумаем.
Рассмотрим правила вида scan и вида predict.
С комплитом позже разберемся.
Смотрите, здесь у нас была ситуация следующая.
Альфа точка Аб.
Переходим в ситуацию вида А стрелочка Альфа А точка Бета.
Смотрите, давайте считать, что это переход по букве А.
То есть из такой ситуации в такую ситуацию мы будем переходить по букве А.
Вот.
Значит, предикт в данном случае будет следующим.
Если у нас есть А стрелочка Альфа точка Бета,
ну и было правило Б стрелочка Гаммы, то мы будем с вами делать следующий переход.
Б стрелочка точка Гамма.
По какой букве переход? Сколько символов мы прочитали?
Эпсилон.
Мы говорим следующее, что вот это переход по букве А, а вот это переход по букве А.
Нет, комплит мы не выбрасываем. На помойку мы делаем кое-что хитрее.
Нет.
Мы сделаем хитрее.
Мы с вами...
Мы сделаем очень просто.
Вот так.
Разрешим переход до пони-терминала.
Состоянии?
Да, очень много будет.
Да, но единственное, мы сейчас поменяем порядок обхода этого автомата.
А вот теперь хитрый момент. На самом деле, сейчас мы будем доказывать следующую вещь,
что когда мы будем... Вообще цель всего этого процесса,
это займет у нас несколько лекций, все формально объяснить, потому что это тяжелая история,
наша цель будет состоять в следующем.
Во-первых, мы с вами построим детерминирный конечный автомат над этим всем делом.
Формально определим все возможные операции, которые у нас будут.
А дальше мы скажем следующее, что...
Мы будем хранить путь в нашем автомате.
Какое формальное определение пути? Кто знает?
В графе.
Смотрите, значит, если...
Нету.
Вот смотрите, допустим, у нас есть E1, E2, E3.
Как этот путь задается?
Нет, не только последствия.
Да, вот это формальное определение пути.
Вот это последовательность.
Мы будем хранить путь в этом автомате.
И лемма, которую нам нужно будет доказать, что если мы с вами, допустим, добрались
по правилу, β, стрелочка, гамма, точка,
то внезапно на ребрах у нас будет написано гамма.
Ну и здесь у нас будет написано где-то гамма.
А это значит, смотрите, что мы сможем сделать. Мы сможем откатиться по вот этому пути по гамме
и пойти по правильному не терминалу.
Что, вообще непонятно, да?
Давайте какую-нибудь простую грамматику разберем.
Совсем простую.
Нет.
Вот, вот такая грамматика.
И изо штриха выводится С.
Значит, добавляем всегда в эту грамматику и давайте строить.
Начинаем с вот такой ситуации.
Дальше переход по С, С точка.
У нас возникает переход по эпсилону.
Это у нас получается А.
С стрелочка точка АВ.
Дальше здесь мы можем еще один эпсилон переход сделать.
А стрелочка точка А.
А стрелочка точка.
А точка В.
И получаем вот такой вот у нас автомат.
Да, входим по нему.
Ну, один раз построить мы считаем, что это константное время.
Оно нас не интересует.
Это все на стадии компиляции происходит.
Даже на стадии кодогенерации.
Смотрите, давайте мы с вами сейчас определим множество.
В чем проблема?
А, построить? Да ни в чем.
Итак, смотрите, что нам нужно будет определить в качестве математического объекта.
Это операция клоуза.
Пока что это не ДК.
Смотрите, клоуза от И это будет такое множество G.
Которое будет олитворять следующим соотношением.
Во-первых, G является над множеством множества И.
И второе свойство, которое есть.
Если у нас есть правило, а, стрелочка, альфа, точка, b, бета, принадлежит G.
Гамма принадлежит правилам грамматики.
То b, стрелочка, точка, гамма принадлежит G.
То есть по факту это предикт.
Ишка. Нет, не должна.
То есть это наименьшее по включению над множество И, которое олитворяет этому соотношению.
А я в чём переходы?
И вторая операция.
Go to от И по какому-то символу Х,
по какому-то символу Х,
по какому-то символу Х,
по какому-то символу Х,
это будет замыкание
вот этого множества.
А, стрелочка, альфа, х, точка, бета,
при условии того, что
а, стрелочка, альфа, точка, х, бета, принадлежит множеству И.
Вот. Значит, что такое go to?
Давайте я сразу поясню. Это по факту переходы в нашем ДК.
Помните алгоритм Тобсона построения ДК?
По всем вершинам. По факту это вот то, что у нас получается.
И тогда у нас наш автомат превратится
после применения операции go to и close вот в такой.
Да, но это множеством ситуаций.
С штрих, точка, с, с, точка, а, б,
а, стрелочка, точка, а.
Переход по букве а ведет нас сюда.
Переход по большой букве
а, точка, бета.
И переход по букве с
ведет нас сюда.
Как вы думаете, какое оно будет?
Нет, вот это. Логично.
С штрих, стрелочка, с, точка. То есть мы дошли до туда.
И вот теперь смотрите.
Что в этой грамматике интересного?
Да.
То есть это переход по терминалу или не терминалу?
А теперь смотрите интересное правило.
Это я грамматику простую подобрал.
И если мы в нашем автомате попадем вот в это правило,
вот в это правило, у которого точка с правого конца,
то утверждение нам надо делать reduce.
То есть мы на самом деле находимся в конце нашего правила.
Не, ну вот в терминах вот того автомата, который у нас был.
То есть по факту это комплит, мы завершили правило.
Но что такое завершить правило в автомате переноса свертки?
Это нужно правую часть заменить на левую часть правила.
И как ни странно, смотрите, какой путь в автомате.
Если мы прошли по А, значит дальше нам нужно двинуться по С.
То есть у нас будет переход с возвратом.
То есть вместо операции complete мы будем идти назад по нашему пути автомате
и проходить по левой части правила.
То есть у нас было правило С, стрелочка А, Б.
Здесь мы прошли по А, здесь мы прошли по Б, оказались здесь.
Мы снимаем правую часть правила по пути и идем по левой части правила.
Понимаете терминал С?
То есть у нас идем-идем-идем вперед, считываем правила,
если мы дошли до конца и мы видим, что дошли до конца, мы отматываемся назад
и идем по левой части правила по другому.
Да, а когда зашли в тупик?
Чем помечаем?
Нет, нет.
Ну да, не обязательно.
То есть это простой автомат, мы его будем усложнять.
Ну во-первых, такое не для всех грамматику можно построить без конфликтов.
Здесь есть разные типы конфликтов, поэтому я думаю,
мы их как раз будем разбирать в следующий раз и уже дадим формальные определения
и поймем, что такое допустимое в множестве ситуаций для конкретного разбора стека.
И вот этим мы с вами как раз и будем заниматься.
Это такое небольшое введение, чтобы вы готовились к тому,
чтобы понимать, что именно у нас будет на следующих лекциях.
На семинарах будут примеры разбираться.
Все, давайте вопросы.
Да, именно так.
То есть при операции shift мы идем по автомату в переходе по букве,
читаем символ со входа, пишем его на стэк.
Как только мы дошли до конца какого-то правила, мы понимаем,
что мы находимся в конце какого-то правила.
Мы отматываем этот стэк, отматываем наш путь в автомате
и делаем переход по не терминалу.
Утверждение,
для грамматики, у которых не будет здесь однозначных переходов,
это будет работать за линию длинных слов.
Точнее, наоборот, для которых будет однозначное действие.
Здесь, смотрите, точка в конце правила, но здесь мог бы еще переход по буквице.
То есть у нас могло быть не одно правило, а несколько.
Но, смотрите, если бы внезапно оказалось следующее правило.
Точка С,
и здесь есть переход по букве С.
Вот, вот мы находимся в этом ситуации. Вопрос, что сделать?
Непонятно.
И вот для таких грамматик мы не будем рассматривать эту конструкцию.
Нет, а на самом деле обратно можно идти не одним способом,
но для этого мы храним путь в нашем автомате.
А отматываем наш путь, текущий.
То есть вот один из типов конфликтов, который нам нужно будет уметь решать.
Все, давайте я отпущу вас.
В следующий раз мы уже с вами формально введем все определения
и уже будем разбираться с этими замечательными вещами.
