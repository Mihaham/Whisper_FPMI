В прошлый раз мы написали своему маленькому гордую
процессору систему, которая могла что-то делать.
Ну, точнее мы написали маленький кусочек её ядра, которая
могла как минимум переключить процессор в защищённый
режим, чтобы процессор могли не передраться друг к другу.
Далее она может делать ввод и вывод, причём самостоятельно,
без всякого билса, прямую записью видеопамяти, может
писать стол года, поскольку ей дано кольцо, которое
властвует над всеми, нолевое кольцо привлекает.
Ну а все остальные программы этой операционной системой
выпускаются, отображаются куда-то в память, ну в зависимости
от конкретной операционной системы, и превращаются
в процесс.
Эта программа в состоянии установки.
Именно процесс – это активный субъект внутри операционной
системы, ему даются все ресурсы, именно ради них
всё и делается.
Ну и процесс единицы планеты.
Процесс, мол, обычные, у них есть всё своё, свои кусочки
памяти, свои какие-то ещё открытые объекты и всякие
услуги, поставляемые операционной системой, и могут быть мелкие,
какие-то более лиховеклые.
А, например, будут несколько процессов, изделяющих
общую память или какие-то изделия.
В UNIX-системах, в первую очередь, основной астребут
процесса – это таблица, страница, стратуального
адреса астропата.
То есть сам процесс, наша программа может адресовать
всё адреса астропата.
А сколько она может адресовать?
Ну, 400 ГБ.
Да, 232 ГБ, 24 ГБ.
Ну, либо 64 ГБ, 24 ГБ.
Значительная часть этого адресного пространства,
значительная часть этих биток пока не используется.
Считают, что пока ограниченного подводства адресов хватит
всем, но, впрочем, мы это уже проходили.
Когда-нибудь это аукнется.
Если закон будет продолжать работать тем же темпом,
если визит будет против, то как-то транзистор меньше
атома не делаешь.
Там есть разделяемый и не разделяемый страниц
памяти, есть пайлы, отображенные в памяти, и создатель режиме.
А также, к атрибутам процессора, относится то, что есть
из файловой сети.
Паблицы открытых файловой сети, то есть то, что вы
открывали с помощью...
Текущий каталог, в котором он находится, корневой,
и массовая станика.
Поскольку процессов у нас много, их в какой-то век
у нас наладится много, они начинают кулькурировать.
Помните, у вас была механика, в которой все было четко
все могло рассчитать, потому что количество материальных
точек, которые бегают, было доступно для расчета.
А затем внезапно наступила термодинамика.
Что изменилось с термодинамикой?
Их просто стало множество.
Это же механика, только более вычислительно сложная.
И все они куда-то двигаются.
Вот у нас есть куча процессов, которые бегают в нашем
компьютере одновременно, и наша операционная система,
хоть она имеет контроль над всем, работает в нулевом
ПРТ, может, может, конечно, лезть ко всем, но можно
сделать так, чтобы все работали, всем было хорошо,
всех отсудрить, и чтобы они друг к другу не передрались.
Это уже аппаратная поддержка, но ресурс как всегда не хватает.
И нужно выбирать, какой приоритет, какой процесс
будет работать.
Вот, например, есть у нас студент.
У него есть куча задач.
Нужно сходить на лекцию или сделать домашнее задание
к следующей паре, которая будет следующей.
Он может либо пойти на лекцию и слушать только лекцию,
либо сидеть и делать только домашнее задание,
или он может сидеть на лекции, слушать ее, параллельно
делать домашнюю.
Это нормально, так работает операционная система.
При этом он будет по возможности распараллеливать.
У него есть разные порты водовывода.
Допустим, глаза в учебник, уши лекторов.
Порт водовывода в руках, взгляд на домашнее задание.
Может быть, он будет расстрелять что-то по вреду.
Минутку послужил, минутку послужил, и так далее.
В темноте планирования он занимается операционной системой.
Процесс не знает.
Условные ботаны знают то, что у студента вводают параллельные лекции.
Просто вздатная работа-то работа, вдруг работал-работал,
часы скакнули вперед.
А на самом деле в это время он выполнил шаг в другом.
Также в атрибутах процессора, в регистрах пунктального процессора,
в акклоновых процессорах, в регистрах физического, в самом деле в сольфе.
Как мы его познали?
Все это от С, от В, параметры окружения.
А как мы обрабатываем сигналы?
Потому что процессы еще и начинают общаться друг другу.
Сколько мы потыбили всяких ресурсов?
И наши идентификаторы.
User ID, Group ID, действующие в данный момент Ольга и Группа.
У каждого процесса есть свой идентификатор, он же процесс ID.
Первый из них это процесс пункта, который рождается первым.
А как вы думаете, у кого пик ноль?
Не совсем, но играет он на секунду.
Ну а первый настоящий процесс это процесс имени,
который рождается самым первым, после идица.
Полем пикодентификатора идентификатур.
При этом, в принципе, когда процесс завершился, а его ID
через какое-то время может быть вот он на рожденном
процессу, что делать, чтобы процессор по своему фэра
не стучался к какому-то другому?
Например, он добыл процесс и проделал другой процесс.
Ну, все как добыл написано, на правом, проделался,
а как-то проделался и так далее.
Вдруг этот процесс увидел, хочет пообщаться с родителем.
Ему есть parent pit.
Но тем временем parent pit уже успешно завершился,
тем временем появился новый процесс, с тем годным
скатером.
Попьем папу, папу я свой.
Так вот такой, я детей не рожал.
Поэтому, если родительский процесс завершается, то
родитель не устанавливает.
Также есть импульспикапы группы процессов,
по планированию этого задания.
И session ID.
Чтобы их получить, можно воспользоваться функцией
get pit, get pit.
Я вижу вас здесь очень мало.
Я вижу.
Фигуменная лука умирает, поэтому срочно нужно
научить нас размножаться.
Размножается в этот гирь с помощью пусты и форб.
В случае Renox это единственный способ создания нового
процесса.
При этом осознается новый процесс по писку.
Родители возвращаются к форту с ID сына,
но сын возвращается у нас.
Сыновни или дочерни есть разные
наминования.
Во всяком случае, все размножение процессов
вектакинное, а в полношном процессов нет.
Так что в этой ситуации процесс сына и дочерни
можно расположить пусты и форты сына.
Это функция, сишная.
Соответственно, она что-то возвращает.
Мы в нашей программе позвали функцию,
получили какой-то повод обратно.
С точки зрения предполагаемого процесса,
жил, да был студент, сделал спокойно на лекции
и сказал форту.
И вдруг два студента,
и они не вернулись.
И они не вернулись.
И они не вернулись.
И они не вернулись.
И они не вернулись.
Два студента абсолютно одинаковые.
Есть так одно различие
В куде 옷 tum
Все адребуты копируют läк всеotted
노래� بэд
Ф Initial Rhyme
То есть, у нас есть много-много страниц памяти, но на самом
деле все слазено ноутбуком.
При попытке записать куда-то, копирую, делаю снова страницу
памяти и тогда уже что-то обещаю.
Не копируются.
Идентификатор процесса, все-таки номера у них разные,
а также сигналы, таймеры, блокировки и все.
Вот такой модель.
Мы взяли программу и вызываем функцию Z.
Что она нам вернула?
Возможно, она ответила нам положительно.
Вот теперь у тебя есть набор.
Возможно, она ответила нам отрицательно.
Сказала, все, хватит разложаться.
У нас теперь новая политика, одна семья, ноль детей.
И больше ресурсов не дадим.
Если код 2 раза 0, значит, мы и есть 100 пораженных ребёнок.
Вот эту версию выполняют только ребёнок, эту версию
выполняют радиотипы, вот этот код исполняют код.
Соответственно, нам выводится что-то от ребёнка, что-то
от родителя, что-то от обуви.
Вот она симу пишет, форк.
Естественно, фишный код у нас никогда не выполняется.
Полноценно скомпилированный машинный код.
Машинный код, конечно, филиппийский, читать несколько
неудобно.
Поэтому, к примеру, мы видим, что код 2.
Заносим номер системного вызова PDAX и нажимаем прерыв.
После этого у нас есть два процесса.
Которые от код 2 у одного VIAX.
Какие будут всякие побыстные эффекты?
Что выглядит нам в программе?
Может быть, что-то из этого?
Наверное, оцениваем точку двери в предыдущем.
Может быть, холлоу перрент, может быть, холлоусу,
окопируются структуры данных и оставят их в настоящей
течисти в адресном пространстве процесса.
Обратите внимание, что перевод строки здесь нет.
Требования сбросить буфер нет, поэтому, скорее
всего, холлоу, либо сон, либо перрент будут брошен.
Поэтому, холлоу-холлоу будут маловероятны.
В предыдущем интервью было два раза, хотя не в год.
Я когда-то вспоминал в инстаграме, что еще проявление
письма структуры.
Они исполняются параллельно.
На самом деле, не обязательно параллельно.
Теперь усложним ситуацию.
У нас есть несколько студентов и много заданий.
Если у нас есть один единственный студент, который должен
разделять свое время между выполнением различных
заданий, то студент заботил одну задачку по модам,
но заботил одну задачку по физике.
Если же у нас есть несколько студентов, которые, допустим,
один делает модам, другую физику, затем обмениваются
решениями, тогда время появления заданий становится
недоцерминированным.
Точнее, порядок, о котором они появляются.
На современных машинках у нас есть более одного
очевидного ядра обычно, поэтому, как правило, у нас
может физически параллельно работать несколько процессов.
Но все равно этих процессов существенно меньше, чем
процессов системы.
Как процесс завершается?
Возможно, он сам завершается, выходит из функции мейн
при помощи ретерна или вызывает функцию экзит
или протеркивание экзит.
Возможно, мы ему пошлем сигнал.
Завершись, пожалуйста.
Есть замечательная команда Q для завершения лишних
процессов.
Может быть, произойдет то, что процесс делает незвучным.
Например, студент решил не делать домашнее задание,
а напечатку на цветном принтере и справку о воспалении
хитрости и принести в деканат, в дирекцию школы.
Что сделает директор физик школы в такой ситуации?
А чинит за поделку документов?
Студент попытался обратиться к тому, к чему ему обращаться
нельзя.
А если процесс будет обращаться куда-то, куда ему нельзя,
то получит segmentation code.
В частности, нулевой дискрептор, в котором мы писали до этого
на нашем маленьком операционном системе, в котором были
все права по нулям, обращаться нельзя, вот именно обращение
к этому кусочку памяти происходит при обращении по нулевому
адресу.
Мы сходили по нулевому адресу, а там прав нет, нельзя,
все, прибили процесс, нельзя туда лезть.
Если мы нормально завершаем с помощью функции exit, с
каким-то кодом, то структуры данных стандартных нелетий
ощущаются, либо системный вызов, тогда эти структуры
не ощущаются.
Вот, например, такой программ.
Мы вызываем функцию exit кодом возврата 0,
а теперь вызываем почетный нелетий.
В чем разница?
Тут вывелось, тут не вывелось.
То есть буфер не был сброслен.
Код завершения, целое число 1 byte.
Из параметров функции просто вырезается младший byte,
код успеха 0 успешно завершение процесса.
Жила-была, мама операционной системы спросила,
дорогой мой ребеночек, процессик,
сколько бед с тобой случилось за время исполнения?
Какой численный ответ ее успокоит?
Ноль бед – это хорошо.
А не нулевой?
Что конкретно случилось?
Обычный переменный вопрос находится
код завершения предыдущего процесса.
Что же делаем, когда процесс завершится?
Все страницы памяти освобождаем,
все открытые скрипции файлов закрываем,
все ресурсы, которые мы ему выделяли, освобождаем,
кроме статуса завершения и статистических ресурсов.
Если у процесса есть потомки,
то родителям потомков назначается имит.
Родителю процесса посылается сигнал СИКЧР.
Мы можем кого-нибудь подождать,
послать системный вызов Вэй,
и ожидать завершения наших основных процессов.
Ожидаем любого из основных.
Возвращается процесс ID завершившегося,
либо минус один при ошибке.
Например, ЕЧА, если у нас нет основных процессов,
ЕИНТР был в ожидании прервного получения сигнала.
И по всему этому сосуду формируется целое состояние процесса.
Процесс завершился нормально.
Код завершения.
Из-за чего он завершился?
Из-за сигнала ли?
Какой сигнал привел его к завершению процесса?
Было изгенерировано в распоминании.
Ну, короче, справка о смерти процесса.
В цикле размножаемся.
Только если мы оказались ребенком,
то поспим в какое-то случайное число и выйдем.
А это код папа.
Он будет ожидать
И это процесс завершился.
Кстати, если этого условия не будет,
то сколько у нас процессов получится в результате этого цикла?
Вот эту посуду убираем.
Поэтому и в родители, и в ребенке это выполнится.
Поэтому 10 раз выполнится удваивание процессов.
Значит, сколько всего процессов будет?
10 раз будет выполнена операция.
Удбой количества процессов.
2 в 10 это значит, что есть 24.
Потому что после этого у нас процессов должно быть больше.
И это выполняется и в родители, и в ребенке.
Здесь мы специально
И вот такая ситуация называется формбогли.
Когда у нас есть бесконечно размножающийся процесс.
Который просто берет и жирает вообще все ресурсы.
Естественно разрешать бесконечно размножаться нельзя.
Иначе оно все захавает.
Слышали такое понятие?
Хорошо, что такое на технологии, на ансамблеры, на роботы?
Слышали?
Особенно на самовоспроизводящиеся.
Пусть у нас есть некоторые очень мелкие роботы.
Которые на уровне могут собирать свою кубку.
Если они будут бесконечно собираться сами себя.
То они всю планету превратят в таких наноробов.
Ну и фантастики про подобные нанотехнологии.
Это называется серый слизь или грейгу.
Если у нас есть родитель, который чего-то ждет.
До тех пор пока он родил сына.
Сын завершился.
Но операционная система в порядку и очередь дает управление то одному, то другому процессу.
И до родителей еще очередь не дошла.
Он еще не узнал о том, что его сын погиб.
То от момента завершения до уничтожения записи.
О нем процесс находится в состоянии зоны.
Он не потребляет семейных ресурсов.
Только занимает место управления процессом.
С помощью WaitPit мы можем подождать какой-то процесс.
Меньше у нас единится любой процесс из указанной группы.
Минус один любой процесс.
Ноль любой процесс из текущей группы.
Больше гуля какой-то конкретно.
Если нет завершившегося суда у них в этом случае просто сразу возвращаются.
Ну и как происходит жизнь циклу процесса?
Впервые он создается.
Он готов к выполнению.
Возможно у нас много процессов готов к выполнению.
Но на которых можно выполняться меньше.
Поэтому они находятся в какой-то очереди.
Ядро операционной системы по каким-то своим алгоритмам решает кому дать право данное.
Переходят в состояние выполнения и обратно.
Возможно оказывается приостановленным по каким-то причинам.
И снова становится готовым к выполнению.
Он может из состояния выполнения попросить сделать какой-то бодвыгод.
Например, процессовная система.
Запиши мне, пожалуйста, данные на диск.
Так, процесс. Высыпай, я все сделаю.
А мы пока подождем, пока блок магнитных головок доедет до нужного положения над магнитным диском.
Сами магнитные диски доедут до вертится до нужного положения.
И вот тогда напишем.
А потом подумаем, какой процесс разбудить и дать ему управлять следующим.
Может быть этот, может быть другой.
Тем временем упондя все другие.
Ну и в состояние катонского выполнения он может прийти в состояние зомби и затем будет полностью.
Вот мы и размножались, размножались.
Ну теперь начинаем переброс.
Мы хотим, чтобы выполнился какой-то другой процесс, другая программа.
Вот мы и размножились.
И запускаем на выполнение другой исполнительный файл в рамках текущего процесса.
Для этого используется семейство функций EXAC.
Кто из вас смотрел фильм Матрица?
Есть такие?
Существует и единственный такой человек.
Ну там был некий агент СМИР, который в самом деле все это был программа, который постоянно раздражал, делал свои купки.
Вот это вот системный вывод.
А еще он других действующих лиц превращал в себя.
Это системный вывод EXAC.
Ну например EXAC VE.
Указываем путь к исполнению файла, который запустить, аргументы и параметры окружения.
Этот системный вызов, который при успехе не возвращается вообще.
Почему?
Потому что вызов, что его процесс превратился в другой процесс.
Все атрибуты процесса храняются заключением.
Атрибуты, связанных с адресом пространства, сигналов и таймеров.
EXAC LP.
Аналогично, но выполняется поиск исполнения файлов там, где могут лежать исполненные файлы в соответствии с переменной и пас, то есть где у нас могут быть бинарники.
Почему нам приходится установить такую перемену?
Была старая-старая атака на юринке.
В какой-нибудь каталог положим файл под названием ls и он будет делать то, что нам нужно.
Кто-то туда зайдет, запустит ls из этого каталога.
Сейчас от его имени запустился нужный наркот.
Поэтому обычно текущий каталог в этой перемене не указывает.
Если мы хотим запустить несколько программ в отдельных процессах, применяется комбинация FORK и EXAC.
FORK создает новый процесс.
В основном процессе настраиваются параметры процесса, текущий рабочий каталог, направление потоков.
А затем с помощью EXAC встанет требуемый исполнительный файл.
Вот наша программа.
Используем просто интеллы перемены, размножаемся.
Продолжаемся.
Если мы ребенок, меняем каталог, открываем файл, дублируем файл из грипта, открываем другой исполнительный файл,
превращаемся в него.
Если мы отсюда вышли, значит не удалось выпустить файл.
Мы выходим, ждем, добываем статус и завершаемся.
Может быть нам нужно передать аргумент Команда Стреки.
В частности, можно воспользоваться функцией System, выполнить Команду Shell.
Можем реализовать это с помощью EXAC.
Исполняем файл, а дальше набор аргументов.
Аргумент 0 на что?
Как нас позывали.
Аргумент 1 и так далее.
Исполняем аргумент.
Теперь поэкспериментируем.
Нормально видно.
Проверяем, что экран ничего не обрезает.
Проверяем, что экран ничего не обрезает.
Проверяем, что экран ничего не обрезает.
Проверяем, что экран ничего не обрезает.
Проверяем, что экран ничего не обрезает.
Проверяем, что экран ничего не обрезает.
Проверяем, что экран ничего не обрезает.
Проверяем, что экран ничего не обрезает.
Проверяем, что экран ничего не обрезает.
Проверяем, что экран ничего не обрезает.
Проверяем, что экран ничего не обрезает.
Проверяем, что экран ничего не обрезает.
Проверяем, что экран ничего не обрезает.
Проверяем, что экран ничего не обрезает.
IRR
Вот того программа совершилась,
скоро наотрату два.
Теперь пусть она признается, какой у него был пик.
Вот наша необходимая заговорочница.
От запуска к запуску у нас разные процессы.
Так процесс выбрался у свой данификатор. Давайте спросим у него отчество.
Вот смотрим, что мы можем сказать об этих процессах.
Что же это за процесс?
К счастью, в случае линукса у нас есть возможность общения с ядром операционной системы и получения от нее информации в виде виртуальной файловой системы Fox.
Это информация ядра, но чтобы не делать какой-то странный интерфейс и выполнить абстракции, как сделано в виде реестра, делаем просто файлы.
Работать с ними можно как просто с файлами.
Вот этот процесс 66-70 у нас. Это просто командный интерпретатор Bash.
Давайте учиться размножаться.
Кто из них родитель, кто ребенок?
Первым родился вот этот Ааут Башевич.
Затем родился еще один, копия его Ааут Башевич.
Если фор вернул мне ноль, тогда у нас что?
Файлы.
Делаем линукосопию.
Вот родитель, вот ребенок.
Интересно, сколько нам разрешено каражать таких детей?
Наши ограничения.
До практически до этого ограничений, полюсских процессов 23 тысячи.
Что у нас произошло? Баш пытается родить процесс, но у него не получается.
До 16 процессов. Просто баш, чтобы показывать всякое дополнение, тоже является кучей процессов.
Открыли новое окошко терминала. Терминал породил баш. Соответственно, он не унаследовал эти ограничения.
Ну, давайте экспериментировать. Сколько вас?
Сколько у нас тут процессов живет?
В выводе команды LeftProds у нас куча всяких информации, в том числе процессов, в том числе 3075 точек.
Если мы скажем, что от нашего полюса должно быть не больше 32 процессов, то мы ни один процесс больше не родим.
Давайте ограничимся 512 процессами.
А какие у нас вообще процессы находятся?
Ну, 324. Вот более менее комфортно.
Умолчат, но есть 264 процессы.
Спирт. Делаем манкет снега.
Посмотрим, что оно вернуло.
Умолчат, но есть 264 процессы.
Умолчат, но есть 264 процессы.
Ну, вот три варианта.
Что у нас произошло?
Вот мы разложались и разложались, но в какой-то момент нам сказали, что все, разложаться дальше нельзя.
А если мы будем пытаться обнажаться бесконечно?
Что у нас происходит?
Вот у нас 415 живых агентов митов.
416. Что же будем с ними делать?
Они конечно не могут обнажаться дальше из-за улимита.
Если будете проделывать этот эксперимент, используйте улимит.
Иначе просто внухают все ресурсы вашего компа.
Значит, надо ему отправить черную метку.
Мы убиваем, они возрождаются.
Ну как? Они пытаются делать форк, и после того, как мы через процессов убили, мы можем сказать, что какие-то из них красивые, какие-то нет.
Я бы сказал, что некрасивые у нас работать не будут.
Это весьма истинно, который развивает приоритет.
Изменяет приоритет.
Причем отрицательный приоритет.
Это более высокий приоритет, положительные более низкие.
Это более высокий приоритет.
Вот они все наши ауты.
Вот у нас канала про ауты.
Вот у нас канала процессы с девятнадцатым приоритетом.
Нижнего некуда, с девятнадцатым найст-намбером.
Процесс статус. Вытаскиваем аут. Вычитываем первый столбец.
Стандартный вывод направляем в команде xarx, которая по аргументам отправляет в аргументы следующей команде.
Ну что с ними еще сделать?
Как бы их может быть, почитаем документацию пьера.
Как-то странно, команда kill привлажна к тому, чтобы послать сигнал процесса.
По умолчанию отправляется сигнал term, уважаемый процесс, совершившись по-хорошему.
Обычно процесс после этого завершается. Возможно, он повесил обработчик этого сигнала и может сделать что-нибудь хорошее.
Например, выписать в малых нутанах все изменения перед всем завершением.
Это что-нибудь плохое, а ты меня хочешь завершить, а я наоборот равно.
Есть много всяких сигналов, не более часто используемых.
Это сиг терм, 15 сигнал, сиг kill, 9 сигнал, сиг ill, illegal instruction.
А ну-ка выйди.
У нас тут что-то с питанием, sig stop, остановись.
Сиг чает информация о совершившемся процессе ребенка, там полюбские сигналы.
Сиг FPE, сигнал blocking point exception.
Вот у нас генеалогическое древо нашего процесса.
Сиг FPE, sig stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop.
Сиг FPE, sig stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop, stop
тоже можно подсосать
А процессор мы прибили. Отправка девятого сигнала привела к тому, что мы их просто завершили без всякого... просто их прибили.
Вот так мы ликвидировали наш форбом.
Ну вот, они размножаются.
Вот они, наши ауты. Разнажающиеся, размножающиеся.
Это... их у нас тут 42 штуки. И вот еще один, который произвел еще 6.
Это просто для уменьшения размеров этого графа при отображении.
Отправили сигнал.
Это смог.
Это смогом.
Снижение приоритет.
А теперь пытаемся убивать.
Снижение приоритета затем прибить помогло.
А пока приоритет был высокий, они получали... в случае 19 на 0 стамбуром управление получается только тогда, когда больше запускать некого.
А тут пока есть кого другого запускать.
Пока он не 19 приоритет, но когда-то он построили.
Получает процесс на мое время.
За это время Орис у лимита нас награничит, можно размножиться.
Что у нас тут лежит?
Прот, например.
Какой командной строкой запустил фигу?
Какие у нас есть файлы?
Какие файлы мы знаем?
Вот, что мы знаем о процессе номер один.
Давайте на него точку натравим.
Наш процесс.
В качестве нита был у нас СитернД.
Файл занимает 0, но при чтении ему что-нибудь получается.
Не файловая система, а доступ к информации ядра.
Ну, не все мы могли прочитать.
По крайней мере, от обычного.
Ну вот, возьмем какой-нибудь процесс от нашего полета.
Например, 1764.
В качестве корня у него наш обычный корень.
Типущий рабочий каталог.
Вот он. У нас полный исполняемый файл.
Театрическая статистика.
Ограничение.
Как мы увидели, они весьма полезны.
То есть, если бы я запускал вот эту бесконечно разложающуюся программу без уримета,
я бы просто получил не отвечающую письма машину.
И все-таки другие отряды.
Типущий статус, сколько мы чего похавали.
Этот процесс сейчас в состоянии клипинг.
И пока его, пожалуйста.
Сколько он почитал, сколько он написал.
И всякая подобная информация.
И для того, чтобы какие-то процессы не натворили всяких нехороших дел, как мы их можем ограничить?
Вот у нас, возможно, мы поменяем корень файловой системы для них.
Чтобы они выше корня никуда не вылезли.
Может быть, мы ограничим процессы.
И прочие ресурсы.
Может быть, мы их как-то еще ограничим, чтобы они не видели вообще соседних процессов.
Будет у нас одно общее ядро.
А якба файловой системы доступна для всех, а на самом деле только для них.
И то, что у нас этим процессом дано.
Какой-то кусочек ресурсов.
И они будут, наверное, сидеть себе в контейнере и никуда не вылезать.
Это гораздо безопаснее.
Вот у нас сидят несколько процессов.
Может быть, у нас какой-то сервис состоит из нескольких процессов.
Они между собой нам действуют, но наружу не вылезают.
И вот это и называется контейнеризация.
И вот то, к чему вы работали на remote-vi-diameter 2.
Но за исключением реальной маленькой.
Это как раз один маленький контейнер на нашу систему инвентаризации.
Это именно контейнер.
Это кусочек операционной системы, а не целый контейнер.
Да, там есть, конечно, reselling, что суммарно количество ресурсов, выделенных на всех контейнер, больше, чем...
Количество ресурсов, которые есть.
Но мы считаем, что одновременно все контейнеры полюбки не вылезают.
