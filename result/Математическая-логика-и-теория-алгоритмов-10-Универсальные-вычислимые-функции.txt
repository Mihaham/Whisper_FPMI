Давайте начинать. Извините меня немножко задержали. Сегодня у нас ключевая лекция про
неразрешимые задачи. У нас есть теория, в которой мы докажем, что существует множество,
которое перечислимо, но неразрешимо. Теорема, что существует перечислимое, но неразрешимое множество.
Ну и в отличие от теоремы, что существует просто неразрешимое множество, здесь мы не можем
пользоваться соображением мощности. Просто потому, что и перечислимых, и разрешимых множество в счетное
число, то есть их одинаковое количество, ну и вообще нельзя из соображения количества сказать,
что есть множество, которое одно, но не другое. Но, тем не менее, перечислимое, но неразрешимое
множество существует, и довольно много. И сейчас мы обсудим, откуда они берутся.
Значит, мы будем работать с двумя ключевыми примерами. Одно множество я назову S.
Значит, S это множество... Сейчас, дайте я лучше словами пока напишу. Это множество машин тюринга,
которые останавливаются на, ну можно сказать, собственном тексте или собственном номере,
на собственном коде. Ну дайте я напишу на собственном номере. Значит, что имеется в виду?
Ну я сведу, что любую машину тюринга можно представить как некоторый картеж, записать,
закодировать как некоторые тексты, а после этого можно этот текст перекодировать в число. И можно
спрашивать, вот эта машина на этом числе будет останавливаться или не будет. Ну или, может быть,
эта машина работает, собственно, с текстами, тогда можно спрашивать работы, останавливается ли она
на собственном тексте. Вот. Ну я только что объяснил. Да-да, мы как-то взяли и занумировали.
Как именно, это не очень важно. Давайте я напишу разные варианты, значит, на тексте, коде и так далее.
Каким-то образом мы перекодировали машину тюринга так, что ее можно ей самой подать на вход.
Так, ну а, соответственно, h. Да, и это называется проблемой самопременимости. Давайте я тут напишу.
Значит, S это проблема самопременимости. А h, это от слова halting, значит, это проблема остановки.
Вот. Ну или есть такой более традиционный термин останов.
Вот. Соответственно, h это множество пар, соответственно, машины тюринга и вход.
Таких, что эта машина останавливается на этом входе.
Эта машина останавливается на этом входе.
Вот. Ну и тут, на самом деле, видно, что S это такой частный случай h.
Да, то есть тут в h у нас вход произвольный, а в S у нас вход вполне конкретный, который равняется номеру или тексту машины.
Ну и, на самом деле, ясно, мы будем доказывать, что S неразрешимо. Ну и тогда, как следствие, h тоже будет неразрешимо.
Потому что такое вообще S? Ну, можно сказать, что S это пересечение h с диагональю.
То есть диагональ, когда вход, это то же самое, что машина тюринга.
Вот. Ну и диагональ, само в себе, ясное дело, разрешимая множество.
Поэтому, если бы h было разрешимо, то S тоже было бы разрешимо, как пересечение двух разрешимых.
Да, то есть вот можно, я тут напишу, что у нас S, это будет h пересечение с диагональю.
Значит, это, да, это диагональное множество. Значит, множество пар x, x.
Вот. Ну и поскольку, соответственно, если бы h было бы разрешимым, то тогда и S разрешимо, так как D разрешимо.
Ну, а мы докажем, что S неразрешимо.
Значит, мы докажем, что S неразрешимо, ну и, следовательно, h тоже неразрешимо.
Вот. При этом h перечислимо.
Вот. При этом h перечислимо, как область определения вычислимой функции.
А что это за вычислимая функция? Ну, дайте я верну сюда. Что такое h?
Значит, h это множество пар, машина, тюринг и вход. Такая, что машина останавливается на этом входе.
Но вот эта функция, это будет просто такой компилятор.
Да, мы про это немножко говорили в конце поза прошлой лекции.
То это как раз машина, которая получает код другой машины и вход,
и моделирует работу той и другой машины на этом входе.
Ну и, соответственно, она тот же самый выход и возвращает.
Вот. Соответственно, эта универсальная вычислимая функция,
у которой h область определения, это есть универсальная вычислимая функция.
Ну и вот про то, что это за объект и как он связан с универсальной машиной тюринга,
я как раз сейчас немножко поговорил подробнее.
Так, нет ли каких-нибудь вопросов по рассказанному?
Нет, h будет неразрешимо.
Нет, если h разрешимо, то тогда s разрешимо.
Потому что d разрешимо, и тогда s будет причислением двух разрешимых множеств.
Вот. Но мы докажем, что вот это неверно, значит, по контрпозиции это неверно.
С другой стороны, h перечислимо, каково у нас это определение?
Вот у нас получается пример. Да, давайте я этот вывод запишу.
То есть h перечислимо, но неразрешимо.
Значит, это общая схема доказательства.
Значит, перечислимо, каково это определение училимой функции.
Неразрешимо, потому что мы сейчас докажем, почему.
Значит, вот такая общая схема.
Теперь подробнее поговорим про универсальную училимую функцию.
Значит, вообще говоря, можно действовать с двух сторон.
Значит, можно действовать с стороны машин тюринга.
И это то, что было в самом конце позапрошлой лекции.
Что мы построим универсальную машину тюринга,
которая как раз получает код машины, вход и эмулирует эту машину.
Вот я в чате присылал несколько эмуляторов.
Можно это теремам доказывать, а можно сослаться на тезис Чорча.
Тезис Чорча говорит, что всё, что можно запрограммировать
на реальной машине, можно и на машине тюринга.
Соответственно, можно же машину тюринга запрограммировать.
Значит, нам, на машине тюринга, можно машину тюринга запрограммировать.
И это, конечно, это не доказательство.
Доказательство, это предъявление машины тюринга,
что нужно. Так, вот, значит, можно вот с этой стороны идти, что мы прямо делаем
универсальную машину и говорим, что универсальная функция это то, что вычисляет
универсальная машина. А можно пойти с другой стороны, можно определить
универсальную учителем и функции непосредственно, что я сейчас и сделаю.
Так, значит, универсальная вычислимая функция. Значит, это у нас функция двух
аргументов. Ну, опять же, можешь считать, что у нас аргументы это конечные слова,
можешь считать, что аргументы это натуральные числа. Ну, давайте я для конечных слов напишу.
Значит, вот у нас функция получает два слова и возвращает одно слово. Вот, на нее два условия
накладываются. Значит, во-первых, сама по себе U должна быть вычислима как функция двух аргументов.
Значит, U вычислима как функция двух аргументов. Ну, а это уже непосредственно определяется,
либо через двухленточную машину, либо через запись через пробел, либо через кодирование пар.
В общем, так или иначе вычислимую функцию двух аргументов можно определить.
Так, и второе. Значит, для любой F функции одного аргумента вычислимой.
Значит, для любой вычислимой функции одного аргумента существует такое P, что для любого x U под Px равно F от x.
Вот, значит, можно... Как это все смотреть? Можно считать, что U это такой компилятор.
Значит, U это компилятор, и первый аргумент U это программа, а второй аргумент U это аргумент уже этой программы.
Вот, а компилятор должен эту программу скомпилировать, запустить и вернуть тот же самый результат.
Но, соответственно, если не определена, то компилятор тоже будет неопределен.
Если определена, то он выдает соответствующее значение.
Вот, значит, теперь что говорят наши условия первое и второе?
Первое говорит, что сам по себе компилятор вычислимый, что он сам вычисляется на какой-то машине.
А второе условие, это условие универсальности, что все, что можно запрограммировать, можно запрограммировать вот на этом языке программирования.
То есть для любой вычислимой функции есть программа, которая ровно эту функцию вычисляет.
Вот такое вот определение.
Ну и дальше для любой нормальной модели вычислений должна быть теорема о том, что такая штука существует.
То есть это в принципе не обязательно может быть машина тюринга, это может там машинку другого вида, может быть даже какой-нибудь обычный язык программирования.
Но обычный язык программирования очень удобен, потому что математически это очень сложный объект.
То есть в любом нормальном языке программирования есть очень много каких-то конструкций синтоксических,
и в принципе, чтобы там что-то доказывать, нужно доказывать, что все эти конструкции можно обработать с использованием самих этих конструкций.
Ясно, что если у вас там 15 разных конструкций есть, то это уже очень сложно доказывать.
В машине тюринг все гораздо проще. В машине тюринг у нас все команды одного и того же вида.
Ну, может быть, там налево и направо немножко по-разному обрабатываются.
Но глобально тут нет 15 разных конструкций, которые нужно обработать.
Но с другой стороны, бывают и другие простые модели.
Бывают такие алгорифмы Маркова, есть рекурсивные функции Чорча и так далее.
И в принципе для каждой такой модели есть арея осуществования вот такого объекта.
Соответственно, вычислимость вот здесь вот и вычислимость вот здесь вот должны пониматься в смысле одной и той же модели вычислений.
Ну, в нашем случае в смысле машины тюринга.
Так, ну, в общем, давайте я это сформирую как теорему.
Значит, теорема, что универсальная вычислимая функция существует.
А полностью я не буду доказывать, но один из возможных путей доказательства это вот через универсальную машину тюринга.
Идея доказательства может стоять в том, что она вычисляется универсальной машиной тюринга.
Ну и тогда если мы докажем существование универсальной машины тюринга, ну, а это технически сложная задача, но концептуально не очень сложная,
то тогда вот это уже будет, ну, в общем, и то и другое будет почти очевидно.
То есть первое будет, по определению, раз это машина тюринга, хоть и универсальная, значит она вычислимую функцию создает.
Ну а второе тоже получается, что если f вычислимо, то она вычисляет какой-то машиной тюринга.
И если мы как раз эту машину тюринга, которая вычисляет f, подставим вот сюда, то ровное отравимство и должно быть выполнено.
Так, ну хорошо, ну что, убедительно.
Ладно, в общем, технические сложности опустим.
Значит, теперь, что дальше? Да, дальше, если у нас есть какая-то универсальная вычислимая функция,
то мы теперь можем, соответственно, проблемы самоприменимости и остановки записать в ее терминах.
То есть теперь мы можем написать, что вот s, значит, проблема самоприменимости, это будет множество таких n, что просто u от n, n определено.
А h будет множеством пар n, x, что u от n, x определено.
Ну и в принципе другая u задает в принципе другие множества s и h, но теоремы о их неразрешимости универсальные.
То есть универсальная.
Хорошо, ну давай теперь доказывать. Так, теорема s неразрешима.
Так, доказательства.
Значит, пусть, пусть, если разрешима.
Вообще сейчас будет использован диагональный метод, который у нас уже был,
когда мы доказывали несчетность континуума, несчетность бесконечных последовательностей,
в чем была идея диагонального метода, что мы берем диагональ и делаем наоборот.
Вот сейчас мы тоже так сделаем.
Значит, тогда вычислимо характеристическая функция.
Хи s от n, который равняется единице, если n принадлежит s, и ноль, если n не принадлежит s.
Вот, но тогда вычислимо такая функция.
Ну тут можно действовать по-разному.
На самом деле это будет полухарактеристическая функция для дополнения к s.
Значит, давайте я как-нибудь покороче обозначу.
На там h от n, но вообще она будет полухарактеристическая функция для дополнения к s.
Значит, это будет неопределено, если n принадлежит s.
И, скажем, один, если n не принадлежит s.
Тогда для этой h от n можно применить наше условие.
Вот это условие мы теперь для h применим.
Так, что получим?
Получим, что существует такое p, что для любого x у...
Давайте для любого n лучше.
Чтобы не слишком разные были обозначения.
Существует p, что для любого n u от pn равно h от n.
Значит, это из универсальности.
Ну а теперь подставим n равное p, как раз диагональ.
Тогда получим, что h от p равно u от pn.
Так, ну теперь сейчас будет спротиворечие.
Теперь получается, что если p принадлежит s, то тогда u от pn у нас определено, а h от p не определено.
Потому что в точности s это множество тех, где u от p определено с одной стороны.
А с другой стороны у нас вот здесь было определение, что h...
Значит, если p лежит в s, то h от p должно быть не определено.
Это получается противоречие.
Если p не принадлежит s, то... Аналогичное противоречие.
Значит, если p не принадлежит s, то тогда u от p не определено.
Потому что s мы так определяли.
А h от p равно 1.
Ну и в любом случае равенство невозможно.
По определению s.
Потому что s это и есть множество тех n.
Ну сейчас где это у нас было? Вот здесь вот.
Вот определение s.
Соответственно, если мы p подставляем, то оно должно быть вот так вот.
Ну, значит, получается в любом случае противоречие.
В любом случае противоречие.
Ну вот и получается, что s неразрешимо.
Значит, s неразрешимо.
Ну и тогда, как мы уже обсуждали, h тоже неразрешимо.
Значит, следовательно, и h неразрешимо.
Ну чего, понятно ли?
Вот это, на самом деле, очень мощный метод диагональный.
Мы с ним еще встретимся несколько раз.
То есть глобально можно это, конечно, таких терминах излагать,
что вот пусть у нас есть такой суперанализатор,
который позволяет по программе понять, что становится она или нет.
Но тогда мы этот суперанализатор встроим в какую-нибудь другую программу,
которая делает следующее.
Значит, которая берет какую-то еще программу,
спрашивает про нее анализаторы, делает наоборот.
И потом мы задаемся вопросом, что будет, если в эту программу поставить ее саму.
Тогда она должна делать не то же самое, что она делает, а такое невозможно.
Хорошо.
Вот это действительно очень важное достижение тьюринга 1936 года.
Хорошо, что дальше?
Дальше можно сказать, что по теореме пусто.
При этом S и H перечислимые.
Про H мы уже сказали, а S, на самом деле, по той же самой причине.
Ну или можно сказать, что S это пересечение перечислимого и разрешимого.
Пересечение перечислимого и разрешимого будет перечислимым.
И поэтому по теореме пусто дополнение S с чертой и H с чертой неперечислимое.
Потому что если бы кто-то из них был перечислимым, то, соответственно, S было бы разрешимым или H.
Отсюда получается явный пример неперечислимого множества.
Но тем не менее, эти дополнения S и H это такие неперечислимые множества, к которым дополнение перечислимо.
Ну и возникает вопрос, можно ли явно описать множество, которое неперечислимо,
неперечислимо и имеет неперечислимое дополнение?
То, что не явно понятно, что такие есть сопряжение мощности.
Потому что перечислимых счетное число с перечислимым дополнением тоже счетное число, а всего континуум.
Кстати, перечислимое дополнение называется ко-перечислимое.
Определение множества A ко-перечислимо, если дополнение K перечислимо.
Но вообще вот это вот ko, это часто встречается в математике.
Синус, косинус, в топологии разные штуки бывают, в гомологии когомология, градиент, коградиент и так далее.
Вектор, ковектор. В общем, в разных частях математики такие двойственные штуки встречаются.
Но и в частности, и в теории вычислимости, и дальше в теории сложности вычислений есть такие вот ko-классы.
То есть если есть какое-то свойство множеств, то у него есть и ko-свойство, которое означает, что дополнение этим свойством обладает.
Но вот для разрешимого это одно и то же. То есть ko-разрешимое то же самое, что разрешимое.
А вот для перечислимого это другая штука.
Ну вот, соответственный вопрос. Как описать множества, которые не перечислимые и не ko-перечислимые?
Так, ну да. Что еще раз? Ko-перечислимо.
Вот. Так, ну давайте я сейчас напишу, что это за множество, после перерыва расскажу.
Да, значит, пример вот такой вот.
Значит, t это множество таких m, что для любого x у от nx определено.
То есть это множество всюда определенных программ.
Так, ну ладно, сейчас перерыв, потом поговорим, почему же это нужны множества.
Так, значит, сначала давайте я попробую интуитивно рассказать, почему такое t должно подходить.
Ну, смотрите, в чем вообще смысл перечислимости.
Ну смысл перечислимости в том, что мы можем доказать принадлежность к этому множеству.
А вот непринадлежность – не факт, что можем.
То есть перечислимые, но не разрешимые, означает, что принадлежность мы можем доказать, а непринадлежность не можем.
А вот такое... Теорема стоит в том, что вот это вот T неперечислимо и некоперечислимо.
Это значит, что мы не можем доказать ни принадлежность к T, ни непринадлежность.
Ну а что такое вообще T, что здесь написано?
T, слово total, это множество всюда определённых функций.
Верно ли, верно ли, что для данного N, для данной программы, чтобы в неё не подставить, она остановится?
Ну вот, смотрите, чтобы доказать, что это верно, что нам нужно сделать?
Нам как-то нужно попытаться эту программу на всех ходах запустить и проверить, что она везде остановится.
Но как-то ясно, что вроде так не должно получится сделать.
Их же бесконечно много, мы не можем прямо на всех запустить.
А с другой стороны, каким образом доказать, что все подходят, в общем случае тоже непонятно.
Ну а что значит, что T неверно? Что значит, что программа не на всех останавливается?
Ну значит, она каком-то не останавливается.
Но мы же уже знаем, что проблема остановки неразрешима, но при этом доказать, что программа остановится, можно.
А доказать, что она не остановится, нельзя.
Ну а здесь нам тоже самое нужно фактически сделать.
Соответственно, мы этого тоже не сможем сделать.
Получается, что чтобы сказать, что T неверно, нужно доказать, что на каком-то одном входе не остановится.
А чтобы доказать, что T верно, нужно бесконечное число входов проверить.
Поэтому ни того, ни другого не должно быть.
Что бы доказывать формально, нам нужен некоторый инструментарий.
И это тоже еще одна очень важная концепция в теории вычислений.
И вообще вычислимости, и сложности вычислений.
Это концепция сводимости.
И в данном случае тут понятие, которое мы будем использовать, это понятие M-сводимости.
Значит, что означает буковка M?
В общем, разные говорят разные.
Я знаю минимум две версии.
Одна версия, что M – это слово mapping.
Mapping – read usability, а mapping – это отображение.
То есть там сейчас будет некоторая функция.
А другая интерпретация, что M означает many to one.
Соответственно, много могут к одному сводиться.
И это тоже сейчас будет понятно, что за many to one.
В общем, другие сводимости, они прям точно известны, почему.
Бывает T-сводимость – это часть юринга.
Бывает, маленькими буквами ТТ – это truth table на таблице истинности.
Ну и так далее. А для буковки M есть разные интерпретации.
Что это такое?
Значит, обозначение вот так вот.
Есть два множества.
И обозначение – это прям такой значок меньше либо равно с индексом.
Читается, M сводится.
А M сводится к B.
Значит, если существует вычислимая всюду определенная F,
значит, такая, что X принадлежит A тогда и только тогда, когда F от X принадлежит B.
Соответственно, вот это F – это то самое мэпинг, который букв кем,
но и many to one, потому что для разных X может быть одно и то же значение F от X.
В чем идея?
Но идея в том, что если мы умеем решать задачу B в каком-то смысле,
то мы умеем решать и задачу A.
Это, видимо, самое важное.
Давайте я это вначале напишу.
Первое свойство, что если A сводится к B,
значит, а B разрешима, то тогда A тоже разрешима.
Но почему это так?
B разрешима означает, что мы умеем отвечать на этот вопрос для F от X.
То есть для F от X мы умеем определять, лежит ли оно в B.
Но кроме того, поскольку F вычислимая всюду определенная,
то по X мы всегда можем вычислить F от X.
Значит, у нас есть X, мы по нему вычисляем F от X,
дальше определяем, лежит ли F от X в B,
и ответ на этот вопрос будет в точности ответом на то, лежит ли X в A.
Доказательство состоит в том, что характеристическая функция множества A от X
это то же самое, что характеристическая функция множества B от F от X.
Ну и поскольку F вычислимо, всюду определено, и хиB тоже вычислимые,
всюду определено, то и композиция тоже вычислимые, всюду определена,
и дает правильный ответ.
Ну ничего, понятно.
Так, ну вот это вот ключевое свойство.
Но есть еще, в принципе, несколько полезных свойств.
Ну, например, транзитивность.
Значит, если A им сводится к B, а B им сводится к C, то тогда A им сводится к C.
Так, ну это как доказывается...
Ну, тут идея в том, что X пронжит A тогда и только тогда, когда F от X пронжит B,
а это тогда и только тогда, когда G от F от X пронжит C.
То есть здесь F это функция из определения сводимости A к B,
G это функция из определения сводимости B к C.
Ну а соответственно их композиция G на F будет сводить A к C,
и тоже будет вычислимая всюду определенно.
Так, ну ничего, понятно.
Так, дальше.
Третье свойство, наверное, самое элементарное, вот такое вот.
A им сводится к B тогда и только тогда, когда дополнение к A
им сводится к дополнению к B.
Вот, ну это просто мы берем отрицание.
Ну ладно, давайте я напишу, да, это очень легко.
Значит, X пронжит A равносильно тому, что F от X пронжит B.
Вот эта равносильность равносильна другой равносильности,
то X не пронжит A тогда и только тогда, когда F от X не пронжит B.
Ну а это не принадлежность A, это есть принадлежность к дополнению.
Ну и на самом деле правоперечислимость тоже все аналогично получается.
Значит, если A им сводится к B, а B перечислимо, то тогда и A перечислимо.
Ну, например, тут можно действовать через полухарактеристическую функцию.
То есть здесь точно так же получится, что A с крышкой от X это будет B с крышкой от F от X.
Ну и то, что композиции вычислимы, будет вычислимое.
Так, ну и использовать мы будем следствие, значит, логические следствия из этих свойств.
Наоборот, если A, это надо называть условной контрпозиция.
Значит, вот у нас здесь что было?
Значит, если A сводится к B и B разрешимы, то A разрешима.
А здесь будет наоборот.
Если A сводится к B и A неразрешима, тогда B неразрешима.
И, соответственно, значит, если A сводится к B и A неперечислимо, то тогда B неперечислимо.
Вот, и это нам позволяет получать, у нас как бы уже есть какие-то неперечислимые множества, да, типа A с чертой.
Вот, и это позволяет еще новые непречислимые множества получать.
Ну и финальное свойство, третье.
Смотрите, если A, M сводится к B, и A, M сводится к B с чертой, и A неперечислимо, то из этого получается, что B неперечислимо и не коперечислимо.
Вот.
Так, ну это из чего следует?
Ну, так вроде понятно более-менее, что первая часть...
Ну да, фактически получается, что мы применили второе и к B, и к B с чертой.
А вот это нам еще говорит, что мы в принципе можем менять черту, вместо того чтобы вот здесь ее написать, написать ее вот здесь.
Сейчас посмотрим, как будет удобнее.
Получается, что нам нужно свести, чтобы доказать, что T какое нам нужно.
Значит, для доказательства того, что T неперечислимо и не коперечислимо,
значит, достаточно доказать, что H, M сводится к T, и H, M сводится к T с чертой.
Вот.
Так, ну сейчас будем это показывать.
На самом деле вот то, что я сейчас буду рассказывать, на самом деле сама теорема.
Она верна не то чтобы для любой функции U.
Давайте я обратно промотаю.
Вот это теорема дать я тут сделаю оговорку.
Для хороших U.
А что им называется хорошее U?
Может, сегодня еще успеем, а так мы про это будем подробно в следующий раз говорить.
То есть можно действительно построить такую функцию, чтобы это было неверно.
Но для U. это верно.
В общем, это сложные вещи, что они не все хорошие, но сейчас я, по крайней мере,
сейчас в доказательстве будет видно, где именно мы используем специфику машины тюринга,
или вообще к чему мы привыкли.
Так.
Хорошо.
Первая часть, h сводится к t.
Значит, рассмотрим такую Q, что для любого входа Y U от Qy равняется U от Px.
Вот тут как раз, чтобы такое можно было сделать, нужны определенные свойства для U.
Почему это будет верно для обычных наших представлений о том, что такое U?
Ну, Px это какой-то параметр.
Вот если я это сделаю, то тогда будет верно.
Сейчас, что еще раз?
Нет, у это вообще внутренняя переменная, а Q строится по Px.
Вот что, значит, что Px принадлежит h, тогда и только тогда, когда Q принадлежит t.
И мы хотим, чтобы можно было Q построить по паре Px, и чтобы это была всю дополненную учтимая функция.
Соответственно, нужно, чтобы преобразование из пары P и X в Q было вычислимым.
Но вычислимым и всюду определенным.
Почему мы можем на это надеяться?
Потому что можно себе представить, пусть даже это не машина тюринга, а просто какой-то обычный язык программирования.
И этот язык программирования имеет доступ к тексту программы компилятора, к тексту U.
Тогда можно писать такую программу, чтобы прямо в тексте программы написать значение константа P.
Потом прямо в тексте программы написать значение константа X.
И потом в связи с программой, что вход мы вообще игнорируем, а вместо этого берем P и X из текста программы и запускаем U от Px.
Но, соответственно, если это какой-то нормальный язык программирования, то там можно делать шаблон.
Шаблон, что X равно тому-то, и после этого мы значение Px подставляем в U и выводим.
И, соответственно, преобразование пары P и X в Q заключается в том, что мы в шаблон подставляем конкретное значение P и X.
Ну и тогда, если это так устроено, то понятно, что это будет вычислим, и всюду определенно.
Это какая-то простая строковая операция в шаблон подставить как конкретное значение.
Ну вот, так сказать, хороший компилятор, хорошая универсальная вычисляемая функция — это та, для которой это можно сделать.
Ну, может, сейчас договорю без точного определения, а потом, наверное, сегодня еще останется некоторое время на то, чтобы формально сказать, что это значит.
Так, ну чего, понятно, что происходит?
Да, Q игнорирует вход, и она просто из своего текста берет, что она делает.
Да, вход она игнорирует. Вход игнорирует, вместо этого берет откуда-то у себя записанный P и X.
Она говорит, что я буду делать, вот у меня написано, что я делаю на ком входе, а вход игнорирую.
Ну, тогда действительно, то если она на любом входе делает одно и то же, то если то, что она делает, определено, то она будет везде определенна.
Если то, что она делает, неопределена, то она будет нигде неопределена, но, в частности, не везде определена.
Так, ну чего, понятно?
Дальше вторую часть. Вторую часть будет удобнее, наоборот, дополнение к h,
дополнение к h сводить к t. Мы уже обсудили, что это неважно, где
стоят черта, да, вот здесь или вот здесь. Так, вот тут вот, значит, вот тут вот уже
программа Q будет зависеть от входа. Значит, здесь у от Q и n будет равно
следующему. Значит, это будет равно единице, если у от Px не остановилось за n шагов.
Значит, и не определено иначе.
Вот. Ну и тогда то же самое. Значит, тогда если пара Px не принадлежит h,
тогда это только тогда, когда Q принадлежит t. Почему это так? Ну, потому что если у от Px
вообще не останавливается, то в частности, ни для какого конкретного n оно не останавливается
за n шагов. Тогда получится, что для любого конкретного n оно не остановится, значит, будет
единица, то есть это будет функция, которая всюду равна единице. Вот. А если Px лежит в h, то тогда
у от Px, ну, за какое-то конкретное число шагов останавливается. Да, то есть когда мы в качестве n
подставим число шагов, на котором останавливается, за которые останавливается у от Px, то вот это
условие не будет выполнено, соответственно, будет не определено. Вот. Ну и тогда это будет функция,
которая сначала равна единице, а потом с какого-то момента не определена. Вот. Так же действительно такое
получаем. Вот. Ну и опять же, да, значит, если мы можем не просто запускать компилятор, а еще как бы
считать количество шагов, да, то тогда тоже преобразование, значит, опять же нам нужно, чтобы
преобразование Px в Q, значит, это было, значит, это у нас вычислимая всю доопределенная функция,
вычислимая всю доопределенная функция. Вот. Ну опять же, да, можно подготовить шаблон,
что, опять же, Px мы берем откуда-то из памяти, из внутренней памяти программы, ну а дальше,
если мы умеем вот так от Px пошагов запускать, то можем запустить на n шагов, где n мы уже берем
со входа. N берем на входе, такое число шагов запускаем, ну и, соответственно, смотрим,
остановился или не остановился. Вот. Ну опять же, да, опыт программирования говорит, что любой
нормальный компилятор имеет режим пошагового запуска. Ну, обычно шаги прям не совсем уж
элементарные, если это только не машинотюрнинг из того сайта, который я выкладывал, да, но,
тем не менее, да, на какие-то шаги в средах разработки обычно можно запускать. Вот. Ну вот,
получается, что обе сводимости есть, и две сводимости вместе говорят, что нет ни перечислимости,
ни ко перечислимости. Так. Ну что же, есть ли какие-нибудь вопросы? Я думаю, что мы тогда успеем
поговорить, что такое вот эта хорошая функция, которая нам нужна, и, соответственно, вот эту
учислимость я покажу формально. Так. Я, наверное, перейду на новый слайд. Значит, хорошая функция
называется главная, универсальная, вычислимая функция. Значит, здесь первые два условия такие
же, как были. Да, то есть это тоже у, значит, которое отображает 0,1 со звездочкой, да, значит,
на 0,1 со звездочкой в 0,1 со звездочкой. Так. Ну и свойства первое. Первое свойство, что уучислимо,
как функция двух аргументов. Второе то же самое, значит, для любой f из 0,1 со звездочкой,
0,1 со звездочкой вычислимой, значит, существует p, что для любого x, у от px равно f от x. Да,
в общем, первые два свойства повторяют. То же самое, да, то есть тут, как вы видите,
три предлагательных главные универсально вычислимые. Соответственно, первые говорят,
что вычислимые, вторые универсальные, и третьи новые свойства главности. Так. Третье свойство.
Третье свойство выглядит так. Для любой функции v двух аргументов 0,1 со звездочкой на 0,1 со звездочкой
в 0,1 со звездочкой. Теперь для любой, опять же, вычислимой. Значит, для любой вычислимой
функции двух аргументов. Так. Существует t из 0,1 со звездочкой в 0,1 со звездочкой,
тоже вычислимая и всюду определенная. Вычислимая и всюду определенная. Такая,
что верно следующая. Такая, что для любого p и для любого x, v от px это u от t от p и x.
Вот такое вот свойство. Давайте я попробую объяснить, что оно означает. Значит, вообще любую
функцию двух аргументов можно считать таким компилятором. Что можно считать, что в этой
функции двух аргументов первый аргумент это программа, а второй аргумент это, собственно,
аргумент этой программы, вход этой программы. И этот компилятор возвращает результат работы
этой программы на этом входе. Но без универсальности это может быть не универсальный язык
программирования. Тот, на котором не всё что угодно можно сделать, только что-нибудь.
Может быть, предписанный список функций, эти функции можно комбинировать, но их недостаточно,
чтобы вообще всё вычислить. Может быть, какой-нибудь там язык арифметических выражений.
Первый аргумент – это арифметические выражения со скобками плюсами, минусами, умножениями и так далее.
Второй аргумент – это значения переменных. А этот компилятор подставляет эти значения
в это выражение и говорит, чему оно равно. Что здесь утверждается? Утверждается, что есть
вот такая перекодировка. Что вот это вот T, что делает? T перекодирует программу в этом языке
программирования V в наш универсальный U. То есть вот это вот T от P, значит, P – это программа на
языке V, T от P – это программа на языке U. И вот это вот T от P делает то же самое, что P с любым X.
То есть T как бы транслирует. Смотрите, почему это усиление по сравнению просто со вторым?
Значит, конечно, если мы P фиксируем, то вот эта функция от ровного аргумента будет вычислимой.
И тогда второй нам говорит, что есть такое T от P, что на любом X это равенство верно.
Но усиление в том, что не просто для любого P есть T от P, но еще и что это вот преобразование
из P в T от P вычислимое и всюду определено. Вот такое условие. Ну и на самом деле очень сложный
язык программирования, на котором это будет неверно. То есть если вы не специально пишете
его, чтобы это было неверно, а просто для своих целей, и если он у вас универсальный,
то он почти наверняка и таким будет. Но тем не менее можно. Если задаться целью,
то можно делать так, чтобы это было неверно. И мы, наверное, даже в следующий раз обсудим,
как именно это сделать. Ну и давайте, в оставшись пять минут, я покажу, как это определение
используется. Не знаю, может какие-нибудь вопросы есть? Ну действительно это такое
сложное, не очень интуитивное определение, но я думаю, освоите со временем. Хорошо,
дайте я покажу, как это теперь можно использовать. Сначала давайте вот с этим вот. То есть у нас
должен быть на любого у, да? И с третьего следует второй. Ну вообще, наверное, да. Наверное,
это вроде... Ну вообще вы, наверное, правы, что если в качестве V взять уже универсальную,
то тогда получится, что и универсальная. Так что вроде бы да, вроде и с третьего следует второй,
если я ничего не упускаю. Но удобнее все-таки смотреть, что для каждого предлагательного есть
свое, значит, свое свойство. Так, ну вот, значит, давайте вот на это посмотрим. Значит, у от у равно у от
пх. Значит, как это используется? Да, значит, как построить преобразование из px в q, значит,
такое, что для любого у у от qy равно у от px. Так, ну значит, надо сделать следующее. Значит,
мы возьмем V, рассмотрим V, которая получает, так бы, пару px и y, и оно будет равно просто у от px.
Значит, это вычислимое преобразование. Потому что оно получает код пары, разбивает его отдельно
на p и отдельно на x, и это подставляет в у, а у вообще не трогает. Значит, у никак не использует.
Вот тогда, что у нас говорит свойство. Значит, по свойству главно универсальной вычислимой
функции, значит, получаем, что вот для этого V существует T, такое, что для любого... Так,
ну тут будет получаться, что, давайте я так напишу, что для любого z и для любого y,
значит, будет V от zy равняется у от T от z и y. Ну вот, если z будет равно как раз паре px,
то есть получается, что вот это Q будет как раз равно T от px. И как раз у нас по условию
главности получается, что T это всю допределенную вычислимую функция. Но нам и нужно,
значит, нам это и нужно, чтобы Q как раз была всю допределенную вычислимую функцию, чтобы была
сводимость. Ну, почему такой Q подходит? Ну, как раз получается, что у от Qy это будет у от,
соответственно, T от px, y это будет V от px, y, и это равно у от px. Ну вот, в общем, вроде получается.
То есть ровно та вычислемостьюvagartiness, которая есть в определении главности,
она же переходит в эту вычислимостьюvagartiness, которая есть в определении сводимости. То есть
в точности вот это вот T, значит, T это есть функция из определения на сводимости. Ну,
со второй сводимостью га аналогично. Да, нужно только вот здесь вот... В общем, другую форму
поставить вот сюда, будет то же самое.
Так, ну хорошо, есть ли вопросы?
Сейчас, про что?
Так, а что именно повторить?
Ну, смотрите, что тут написано, что у нас есть вот этот транслятор, что у нас есть как бы программа P для языка V,
которая, если мы P фиксируем, то получается какая-то функция.
И можно считать, что P это программа для этой функции в языке V.
А T преобразует программу P для этого языка в какую-то программу T от P для одного и того же универсального языка.
И вот это ровно то, что здесь происходит.
То есть как бы вот эта вот пара Px, код пары Px получается программой вот для такой константе,
а мы преобразуем эту пару вот в программу уже в языке U.
Так, ну хорошо, спасибо за внимание.
