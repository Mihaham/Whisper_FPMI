Задан порядок w на множестве m.
По умолчанию мы считаем, что это полный линия порядок,
и мы хотим найти устойчивое просочетание.
Если задан парсочетание s,
я его обычно пишу сразу между m и w, то есть у меня s от m это пара m, а если w это пара w,
тогда m, w это угроза, если у меня, вот картинка примерно такая, у меня есть,
у каждого из них есть своя пара, и они угрозны, если они друг на друга лучше, чем их пара, то есть
у меня выплыли на два условия, что для любой должно быть лучше, с точки зрения m, лучше, чем его пара,
а для w м должно быть лучше, чем его пара. Ну и прощаем устойчивый, если нет угроз.
Тут еще могут быть случаи, когда у них пара пустая, тогда просто я составил эту пустую,
и можно считать, что пустой находится ниже всех список.
Мы знаем, что у нас есть, устойчивый парсочетание всегда есть, у нас находится они с помощью алгоритма Гейла Шепля,
то есть, во-первых, устойчивые существуют, можно найти с помощью алгоритма Гейла Шепля,
они образуют решетку, они образуют решетку. Решетка это, у вас, наверное, статистически множественную решетку,
то есть у вас для каждого из двух элементов есть их метод join, ну или там с точней верхней,
там с точней нижней грань. Ну и эта решетка, она согласована с порядками на этих кусочек парсочетания,
и можно сказать, что у нас парсочетание S, оно не хуже с точки зрения мужчин, парсочетание S с волной,
если у вас для любого m из m, S от m, оно не хуже, чем S-волной от m. И мы знаем, что у нас S с точки зрения m,
тогда только тогда, когда S-волной лучше с точки зрения w, то есть эти порядки противоположны,
и относительно этого порядка устойчиво-процентно образуют решетку. Ну есть, как у вас происходит,
алгоритм Гейла Шепля задает вам на этой решетке максимальный и минимальный элемент этого порядка,
то есть вы переводите алгоритм Гейла Шепля с точки зрения мужчин, вы получаете для мужчин лучше дляähựенно
footprint, если вы проводите алгоритм Гейла Шепля с точки зрения w, то вы получаете лучше для w и лучше
для m. Наша задача – выведите с точки зрения просточетания. Мы это, конечно, выберетеAppleSибila,
логично сделать что-то посередине между самым лучшим для m и самым лучшим для w, поэтому хорошо
бы иметь, выписать все вот эти случаи в пространстве, сколько их, если мы там найдем здесь серединки, может это
будет такое среднее между m и w. Ну и какие у нас есть примеры, давайте пример в виду, когда
в расчетании несколько, ну вот вы, например, можно легко сделать цепочку, это вы, ну давайте я для 4
напишу, вы делаете примерно следующее, допустим, у нас будут буквы и цифры, с точки зрения букв вы
делаете циклический сдвиг, это я пишу сейчас в строчку, и так лучше строчку листал без, но я пишу
можно по-разному, то есть это у меня порядок для a, b, c, d с точки зрения букв, но для цифры у меня
будет порядке тоже со сдвигом, но в обратном обратном, то есть у меня, например, я хочу, чтобы у 1
a было на последнем месте, тут было b, c, d, t это, наверное, будет вот так вот, давайте проверим,
вот если вы, если рассмотрите такие прочитания, то у вас будет алгоритм-гилошепти для букв выдаст вам
про-сочетание, алгоритм-гилошепти для цифры выдаст вам вот это про-сочетание, который здесь будет
последним столбцом, ну и вы можете проверить, что у вас оставшиеся про-сочетания это, собственно,
второй и третий столбец, то есть второй столбец здесь должен быть, наоборот, третий столбец選об curtains
тут, и у вас все будет 4 про-сочетания, то есть, ну можно вообще для n будет��
в данном случае игра будет вот такой вот.
Но для общего случая, может, для иного общить тоже доказать, что будет...
Подробнее объяснить, как вы переходите вот под вот такого устойчивого почитания?
Это пока... Смотрите, пока у меня алгоритма нет,
я говорю, возможно, примеры разговорили на семинарах,
то есть на этом примере легко показать, что, во-первых, легко показать,
что у вас эти все штуки устойчивые и что никаких других встойчивых нет.
Вот так...
Нет, в смысле, еще раз, я утверждаю, что у меня есть 4 просточитания.
Ну, для этого примера нужно какой-то перебор сделать,
то есть идейно понять, что происходит.
Допустим, если А находится с двойкой, например, в вашем просточитании,
тогда у вас эти порядки, они противоположны,
то есть, если, смотрите, А находится с двойкой,
то, значит, у меня, у всех остальных,
ну, значит, например, у единички должен быть кто-то...
Сейчас неправильно говорю...
Значит, двойка не должна никому убежать, двойка может убежать к С и к D,
значит, мы должны к С и D выдать кого-то получше.
Ну и дальше вы говорите, что D может быть 4 или 1,
и дальше нужно показать, что, например,
если у вас у D четверки, то ничего не получится,
значит, у D там типа единичка.
Давайте посмотрим, почему у нас...
Ну, давайте я напишу, у вас есть два слуха...
Еще раз, если А подложил двойки,
значит, двойка не может убежать к С и к D,
значит, у С и D должно быть получше, чем двойка,
но для С это легко получить, а для D должно быть обязательно отсюда.
У четверки на последнем месте,
поэтому все остальные должны подложить что-то лучшее,
поэтому у нас они будут только отсюда,
ну и профессионально не получится, потому что у нас тут тройка должна быть,
а тут двойка и тройка у нас профессионально не получится,
значит, 4 не может быть, ну значит, это единичка.
Вот это обязательно единичка,
ну и таким же образом мы движемся вверх, показываем, что никаких других не может быть.
То есть это какой-то ручной перебор.
Пока мне тогда непонятно, что зашли они, потому что они производят першотку.
Если, например, все равно, например, чтобы искать какие-то новые...
Нет, пока...
Я говорю, что пока движение першотку никак связано,
я просто сейчас говорю, что я пока хочу сказать,
что можно прийти теперь в такой способ.
Сейчас я...
Ну, першотка на самом деле тоже...
То есть это важно понимать с точки зрения структуры.
На самом деле все, что мы хотим делать, это уметь переходить к следующему по порядку.
В принципе, то, что першотка, это хорошо,
но это как бы общего факта, даже там есть теорема про то,
что любая першотка реализуется как множество усочных просочетаний при каком-то порядке.
Поэтому першотка может быть любой.
Но на самом деле все, что нам нужно для того, чтобы искать полностью все усочные просочетания,
это уметь ходить по этому графу.
То есть у вас есть граф, где в графе есть Гейл Шепли для множества m.
Дальше с точки зрения m все остальные хуже,
и где-то у вас есть Гейл Шепли для w.
Это в точке просочетания.
Я могу нарисовать граф из точки просочетания и прести стрелочки,
если они больше точки зрения этого порядка.
У меня есть максимальный элемент, если я рисую порядок с точки зрения m,
то у меня есть Гейл Шепли для m, несмотря на лучший вариант,
Гейл Шепли для w, несмотря на худший вариант.
Все остальные находятся между ними.
По крайней мере, уж точно, они все находятся между m и w.
То есть у нас для m это самое лучшее, оно лучше всех любого просочетания.
w самый худший.
Они соединены либо с m, либо с w.
Понятно, что у нас какие-то стрелочки.
То есть они каким-то образом соединены.
Ну да, может быть вот так, например.
Сравнение.
Я рисую диаграмму Хасса, я беру порядок с точки зрения m,
и дальше стрелочка между двумя элементами означает, что они сравнимы,
и между ними нет промежуточных.
Если я умею ходить по этому графу, то есть я умею для каждой вершины
получать все следующие точки зрения m,
то значит я за конечное число перебора могу перебрать весь граф
и таким образом найти все его точки просочетания.
Давайте я сейчас расскажу алгоритм, как, собственно, по этому графу ходить.
То есть я сейчас расскажу алгоритм,
потом я... Ну я не знаю, нужно будет пример, может на семинар оставить.
Для этого графа мы сделаем, но это будет тривиально.
Может быть на семинаре я оставлю какой-нибудь более сложный пример.
Дальше я еще расскажу про похуже задачу для соседей,
и в ней расскажу алгоритм, а если останется время, мы будем показывать,
что оно уже такое, это будет уже скорее допис.
Еще раз, алгоритм поиска всех устойчивых просочетаний.
Концептуально он устроен просто.
А именно, вы переводите алгоритм Гейла Шепля,
который выводит вам устойчивые просочетания,
а дальше вы берете какой-то элемент и делаете ему искусственно отказ.
То есть вы просто вычеркиваете его пару и считаете, что у нас произошел отказ.
То есть вы берете алгоритм Гейла Шепля для m,
у вас получается такой список, где здесь есть какие-то пары.
Я их давайте задумирую так, чтобы они были соответственные.
Я этого не сказал, но опять же вы доказывали, что если у вас количество k и l не равны,
то если вы проведете алгоритм Гейла Шепля, то вы получите какой-то случай просочетания,
и все, кто входит в него, не входит вообще в случай просочетания,
вы можете просто выкинуть и сделать так, чтобы свести задачу к тому, чтобы у вас были одинаково количество m и w.
То есть если у вас кто-то не получился в паре алгоритм Гейла Шепля, то он никогда не будет в паре,
поэтому на самом деле можно считать, что не равно k, но свести к этому случаю.
Ну вот, допустим, вы при алгоритме Гейла Шепля тут что-то получеркивали,
будем считать, что вы вычеркиваете какие-то элементы,
и у вас получилось вот такое устойчивое просочетание.
А именно вы просто берете и вычеркиваете какую-то пару,
и продолжаете действие алгоритма Гейла Шепля.
То есть вы просто берете m1, делаете продолжение следующему походу,
следующему после w1, то у него списки есть, то есть у этого человека есть,
опять же, выбор из двух, либо m1, либо тот у него сейчас в паре,
он выбирает, делает еще один отказ, и мы так работаем,
выбираем it и делаем искусственно, отказываем его паре.
И продолжаем применяем алгоритм Гейла Шепля.
Вообще говоря, могло бы получиться одно из трех событий.
В отличие от обычного алгоритма Гейла Шепля,
где вы все делали предложение, потом все получили отказы,
все могли получить отказы, потом снова все делали новое предложение,
тут у нас все более детерминировано, потому что у нас происходит один отказ,
то есть на самом деле я могу здесь написать просто последовательность,
у меня есть m1, делал предложение следующему по списку,
этот отказал кому-то, это делал новое предложение, отказал кому-то,
у вас получается такая цепочка из элементов,
которая рано или поздно закончится.
Будем делать какие-то отказы, после чего этот алгоритм будет работать,
и он что-то выдаст.
А у нас на самом деле есть три исхода, возможно.
А именно могло быть такое, что у m1 кончился список...
Ну, вообще могло быть такое, что мы там все дальше отказали,
но пока непонятно.
Может быть, ему даже самый худший вариант отказал, но непонятно.
Могло быть такое, что нашли новое,
то есть нашли паросочетание с теми же m1, mk, w1, wk.
Ну, если, в принципе, технически можно было вот этих лишних не вычеркивать,
тогда могло быть такое, что у m1 или кто-то нашли паросочетание
с новым w житом, ну или m житом, если их было больше, чем нужно было.
Такое тоже может быть.
Теоретически.
Вот утверждается, что если у вас есть устойчивое паросочетание,
то есть если у вас есть устойчивое паросочетание, которое хуже данного,
то вот этот алгоритм его именно и выдаст.
Вот это происходит тогда только тогда, когда существует s-волной,
которая устойчива паросочетания.
То есть если есть устойчивое паросочетание, которое хуже данного,
то это происходит тогда, когда мы получим здесь новую устойчивую паросочетание.
И причем это будет следующее с точки зрения того порядка.
Да, ну я говорю, что могло быть, видите, есть три способа,
если изначально на списке были побольше, могло быть такое,
что какое-то w предложил бы уже новому человеку.
Так вот, если этот алгоритм закончится либо у м1,
или у кого-то м2 кончится список, то он больше не может никого предлагать.
Ну да, не может кончиться список, не важно.
Короче, я хочу сказать, что если у нас есть устойчивое паросочетание,
у которого в паре м1 хуже, чем w1,
то наш алгоритм обязательно закончится на каком-то устойчивом паросочетании,
причем это паросочетание будет следующее с точки зрения этого порядка.
То есть мы просто перейдем к следующему элементу.
То есть мы не можем проскочить этот элемент и перейти к новому.
Например, если вы берете, возьмем этот пример, который мы рассмотрели,
Вот вы берете, проводите логику Гилл Шеппель, дальше УА делает искусственный отказ.
А делает предложение двойке. Двойка, у него есть два предложения от А и Б, оно сравнится, у него А лучше, поэтому двойка отказывает Б.
Т.е. вы говорят, что теперь единичка для А самая лучшая?
Нет, мы просто вычеркиваем его из списка. Мы просто делаем искусственный отказ.
Тут надо сказать какие-то слова, что на самом деле мы можем, если мы хотим театрически это доказывать,
надо сказать, что мы можем работать с неполными списками, а именно мы можем считать, что у нас где-то есть в этом порядке символ плинтус.
В смысле есть символ, если там пустой значок, то пустой это значит, что нам не будет без пара, чем быть с этими людьми.
Ну или говорить, что у нас есть неполные списки, то есть в принципе тут не обязательно иметь полные списки,
просто если мы доходим до конца, то дальше уже мы ни с кем не хотим быть паре, мы останемся в одиночке, нас удовлетворяют.
Поэтому мы просто вычеркиваем один из списков для А, ну естественно у единички тоже А вычеркивается.
Ну и вот мы делаем искусственный отказ. Получается, что А в двойке, двойка выбирает, А выбирает А, потом двойка Б отказывает.
Дальше у тройки есть предложение от Б и С, он убирает Б, ну то есть тут происходит вот это.
И дальше четверка выбирает между С и Д, выбирает С, ну и Д переходит к единичке.
Мы получаем следующее стоящие просочетания.
Мы, во-первых, получаем новое стоящие просочетания, оно следующее по этому порядку, то есть это такое наиболее близкое,
то есть это наименьший элемент, который лучше, чем текущий, у которого УМ1 пара хуже.
Почему мы не получили вопрос, когда Б будет с двойкой?
Ну потому что А с двойкой же, ну значит в двойке два предложения от А и Б, поэтому он должен кому-то отказать.
Могло быть такое, не обязательно алгоритм пройдет всех элементов,
но может в принципе, во-первых, он может пройти только...
Ну может быть такое, что алгоритм сразу закончится, ну то есть не сразу закончится,
вот там например двойка выбирал между А и Б, а у Бб отказывал там.
Ну то есть, то могло быть такое, что все закончат на втором шаге,
потому что если бы здесь осталась единичка, то Бб производит единички и мы принялись А и Б.
Могло быть такое, что у А будет несколько отказов, потому что может быть там возникут дальше конфликты, то есть это не обязательно будет второй столбец.
Может быть какой-то сдвиг произойти, неприятно какой. Но я утверждаю еще раз, то есть алгоритм у вас такой, он довольно хитрый.
В чем хитрость? В том, что нужно делать все отказы. То есть мы здесь сделали только искусственный отказ, чтобы найти все следователи.
Мы взяли алгоритм, мы на самом деле берем вот этот элемент изначально и ищем все следующие.
В данном случае у нас только один следующий, на самом деле их могло быть несколько.
А как они ищутся? Если бы сделали А искусственный отказ, и у вас получилось так, что вы переехали на следующий случай просочетания,
у кого-то что-то поменялось, у кого-то осталось неизменным.
Вот те, у кого осталось неизменным, им тоже нужно сделать отдельный искусственный отказ, потому что у них мог быть следующий элемент другой.
Ну там понятно, да? Могло такое произойти, что вы...
То есть может быть такое, что вы условно...
Если у вас какая-то такая структура...
Ну я же смогу полезть в пример и найти пример, когда нам на четырех элементах может быть десять оточек просочетания, я могу полезть и его найти.
Но если у вас, грубо говоря, такая структура, у вас получится, что если вы делаете отказ А, и он встречает на двойку,
и двойка отказывает в А, и он встречает на единичку, то у вас получился новый просочетание.
А также можно вернуть обратно, откатить, и вам нужно еще сделать...
Вот здесь искусственный отказ и здесь искусственный отказ. У вас может получиться вот такое просочетание.
То есть вам нужно для каждого элемента сделать искусственный отказ.
Но только если вы уже этот элемент вычислили, то для этого отказ делать не нужно, надо делать только для тех, которые здесь не покрыты.
Это вот алгоритм. У 1.2.3.4 должны быть соответствующие порядки типа вот такого.
CD, DC, BA, AB, и соответственно AB, BA, DC, CD.
Вот если у вас такой порядок, то у вас может съехать, то есть у вас меньшее исходное просочетание, есть два, такое, вот такое, вот такое.
То есть у вас картинка такая, у вас есть следующих элементов два.
Один получается с двигом на вот этим изменениям, другой вот этим изменением.
Поэтому нужно все элементы перебирать, чтобы у каждого был хотя бы искусственный отказ.
И утверждение такое, что если у вас какие-то есть меньше, то мы перейдем к следующему исходному просочетанию.
А дальше нужно делать то же самое, провалить искусственный отказ, но уже к этим новым элементам полученным.
То есть дальше мы говорим, ну окей, мы получили новое пространение, давайте еще один искусственный отказ сделаем.
Ну перейдем вот сюда, потом еще один искусственный отказ делаем, ну перейдем еще куда-то.
Итак, пока мы не дойдем в каждой цепочке до наихудшего с точки зрения m.
Понятно описание алгоритма?
Какая у него сложность?
Ну смотрите, тут все проще, потому что вы пишете одну строчку преобразований, но у вас всего...
Вообще говоря, в этой табличке у вас как в квадрате элементов.
Поэтому вы за одну цепочку, если вы будете делать искусственный отказ все время с первым элементом,
то у вас за каждый искусственный отказ вы будете сдвигаться, то есть у вас всего не больше, чем в квадрате преобразований будет.
То есть у вас всего не больше, чем в квадрате отказов будет, и здесь в квадрате отказов вы дойдете от первого до последнего по вот этой цепочке.
Но проблема в том, что вам нужно это сделать для каждого иска элементов, то есть это будет кавкубе операция,
ну я так грубо скажу, да?
То есть у вас за каждый отказ вы вычеркиваете тут один из элементов.
То есть вам нужно проверить кавкубе операции отказов, для каждых этих элементов, потом сделать граф.
Поэтому примерно будет такое порядок операции.
Там нужно проверять, поэтому я так это примерно.
Это количество способов перевратить, дальше нужно проверять что-то по сочетанию, дальше нужно посмотреть, как они относятся,
то есть это какие-то добытные операции, ну вот примерно такого порядка.
Вопросы?
Ну я надеюсь, что на семинаре вы потренируетесь.
Так, прерыв нужен или нет?
Нет.
Вот, и еще я хотел рассказать про похожую задачу, которая...
Да.
Да.
Нет, можем, я имею ввиду, что на самом деле, если мы знаем, что у нас будет Schottke, это нам помогает, потому что у нас шутка про Schottke.
У каждых двух элементов мы знаем, что их минимум и максимум тоже будут устойчивы про сочетания.
Еще раз, вот это отражение, это про то, что если у нас есть два сочетания с один и с два, то можно взять максимум с точки зрения м от с один с два.
Вы можете взять минимум с точки зрения m-b, это 1 из 2 molde-².
И это будет тоже усто ocupу просос Да Chelect géton.
То есть мы в каждой паре выбираем максимум с точки зрения
М и минимум с точки зрения м, и это будет тоже устойчивого видососос heavier.
Поэтому на самом деле, тут вот вместо того чтобы этот בש, можете если вы сразу другов naught то sushi.
Ну вот максимум это этот элемент то минимум это быть какой-то другой элемент.
Просто у каждого берете худшую пару, это будет еще acres, до 폭и и между ними manufact enquanto тех них не будет pet.
Наверное, тут можно показать, что если эти элементы соседние, то здесь не будет промежуточных, но это, конечно, надо проверять.
Говорим, как же изначально, если только два уста еще в подсочетании, это самая лучшая, а максимум из них это самая лучшая?
Да, а минимум самая худшая.
И как мы дальше начинаем сравнивать с другими, которые, оказывается, между ними?
Да.
А как мы сравниваем элементы, которые, оказывается, между этими самыми лучшими?
Но если, например, одному стало чуть лучше, а другому чуть хуже.
Ну как, смотрите, мы сделали шаг, у нас для всех элементов m не улучшилось.
И тут для всех элементов не улучшилось.
Значит, эти штуки между тобой не сравнимы, потому что кому-то лучше, кому-то хуже.
Поэтому у нас тут так, тут так, эти элементы не сравнимы.
Не-не-не, конечно, у вас элементы, вот я привел пример, когда вас не сравнимы, вы тут делали лучший,
тут можно делать 2-1-3-4 и можно делать 1-2-4-3, все эти штуки не сравнимы.
Поэтому, конечно, может быть, вот такие картинки тоже возникать.
Это не обязательно цепь, это может быть любая решетка, вот такая тоже подойдет.
Так, хорошо.
Похожая задача, это задача про соседнее общежитие.
Ну вы спросите, почему у нас множество два, а не одно.
Может быть, нам логичнее, когда у вас есть одно множество, которое хочет само по себе разбиться на пары.
То есть у вас теперь одно множество М.
Ну, если мы хотим разбить на пары, то, конечно, логично предлагать что-то на черное количество людей.
И у каждого из этих элементов есть предпочтение на множество остальных.
То есть любого М из М задан линейный порядок на множестве М без М.
И аналогично можно определить, ну, это вот линейный порядок, полный линейный порядок.
Линейный порядок.
Ну, можно там, конечно, считать, что он там кистичный, это уже там вообще не какие-то.
И мы хотим найти устойчивые просточетания.
То есть такие просточетания, что не найдется пары, которые будут угрозой.
Угроза, то, что так же определяется, какая-то пара является угрозой,
если ее для каждого этой паре партнеры лучше текущего.
Ну, тут неожиданный результат заключается в том, что устойчивое просточетание может не быть.
Ну, для двух человек там особо вариантов нет.
У вас все проще не будут устойчивыми.
Но вот уже для четырех, если у вас двойная равна 4, то можно придумать порядки.
То есть мы берем, вот у нас есть А, Б, С, И, Д, ну или 1, 2, 3, 4.
Не важно, давайте 1, 2, 3, 4.
Вот мы можем придумать такие здесь порядки.
У нас всего есть, возможно, три пары.
То есть может быть пара просточетания 1, 2, 3, 4.
Может быть 1, 3, 2, 4.
Может быть 1, 4, 2, 3.
И вот все три у нас будут неустойчивыми.
То есть у нас в каждом из них будет угроза.
Оказывается, что можно придумать такие вот такие порядки,
что ни одно из них не будет устойчивым.
Ну, можно там две минуты подумать, пока я стараюсь доски.
Может быть они придумают.
Может быть тревогу сделать лучше.
Это все возможное разбивание на пары.
То есть у нас просточетания устойчивые.
Либо такой, либо такой, либо такой.
У нас все три разбивания на пары.
Других не бывает.
Другом их не может убить на пары.
Я вот уже, что можно придумать такой порядок,
что у нас в каждом случае будет угроза.
То есть у нас никакая пара не бывает.
Никакое из этих просточетаний не будет устойчивым.
Понятно, что у вас быть в паре лучше, чем быть без пары.
Поэтому у вас всегда все будут пары.
Вы хотите вот такое что-то сделать?
Но у вас, скорее всего, просточетания 1-3-2-4, я боюсь.
Что?
Нет, пара 1-3 и пара 2-4.
Если возьмите такую пару, то...
То у вас для 4-1 лучший, для 3-4 лучший, для 2-3 лучший, для 1-2 лучший.
Поэтому никакой из этих пар не будет угрозы.
Потому что в каждой паре...
Сейчас, наоборот.
Наоборот, у 1-4 худший, поэтому 3-4 лучший.
У 3-2 лучший, у 4-3 лучший.
Ну понятно, в каждой паре какой-то из них лучше для другого.
Поэтому никаких угроз не будет.
А они сейчас в серединке находятся.
Поэтому вот такой не подойдет.
Давайте поменяем вот эти 3-4 резьбицы местами.
Ну давайте я сейчас напишу естественный пример.
Да.
Да.
Ну смотрите, берем 1-2-3-4.
Сейчас, давайте посмотрим.
Да, 2-4 хотят быть друг с руком.
А, соответственно, здесь у нас 1-4-2-3.
У вас у единицы будет хуже пара, да, и у тройки хуже пара.
Поэтому у нас будет 1-3.
А вот здесь, как раз, все взвешено.
Ну, правильный пример такой.
Нужно взять Пакантарсе.
Смотрите, мы возьмем тут.
Значит, у вас идея такая.
У вас один элемент, он неудачник, он хуже всех.
А для всех остальных...
То есть мы у 1-го, 2-го, 3-го ставим с рук на последнее место.
У этих порядок делаем по циклу.
А 4-ки пишут на самом деле все что угодно.
Тогда у вас каждый, кто с 4-кой, он может предложить кому-то быть в паре.
То есть у вас 1-2-3-4.
У вас что происходит?
3-й, 4-й.
Мне не нравится быть 4-кой.
Он выберет тот, у кого он 1-й, 2-й.
А у 2-й он 1-й.
То есть пара 3-2.
У нас будет угроза, потому что кем угодно хочет быть на 4-ке.
А у 2-й, 3-й на первом месте.
Ну и аналогично с остальными парами.
То есть у 2-й на первом месте у 1-й.
А, соответственно, у 1-й на первом месте у 3-й.
Поэтому я написал все три пары.
У каждого из них будет угроза.
4-ка ничего повлиять не может.
Он на последнем месте.
А каждый будет пытаться убедить...
У кого-то из них он на первом месте, и он ему предложит.
И поэтому это угроза.
Поэтому проблема в том, что устойчивых просчитаний быть не может.
Собственно, если вы...
Алгоритм Гирошепкин был открыт в втором году в поиске устойчивых просчитаний.
А вот алгоритм для поиска устойчивых просчитаний тут.
Это статья 85-го года.
То есть потребовалось 20 лет, чтобы найти хоть какой-то алгоритм, который позволит...
Алгоритм, который здесь работает, он либо показывает, что устойчивых просчитаний нет,
либо находит устойчивые просочетания.
Это уже не говоря о том, что нужно все устойчивые просчитания найти.
Одно устойчивое просчитание потребовалось довольно...
Большое время прошло, чтобы алгоритм не тривиальный.
Но давайте попробуем объяснить, как он работает.
Примерный ход доказательств, наверное, будет ясен.
А детали, опять же, можно на семинаре попробовать его применить к какому-то упорядочиванию.
И обсудить, если останется время, какие детали доказательств.
Наверное, алгоритм...
Значит, статья Ирвинга, но поэтому я выписываю, что это алгоритм Ирвинга.
Хотя мне кажется, что...
То есть я не знаю, как на амбитатуре объясняется.
То есть это статья Ирвинга 85-го года, если я не ошибаюсь.
Он состоит из двух шагов.
Первый шаг – это алгоритм Гела-Шепли.
Значит, первые два этапа.
Этап 1 – это алгоритм Гела-Шепли.
Ну, алгоритм Гела-Шепли мы применяем одновременно,
считая, что у вас люди и пишут письма, и их принимают.
То есть вы...
То есть каждый из элементов m пишет письмо наилучшему,
и потом каждый элемент m из всех писем, которые он получил,
пишет отказы всем, кроме самого лучшего.
Значит, каждый m делает предложение лучшему из тех, кто не отказал.
И, опять же, каждый элемент m из m отказывает всем, кроме самого лучшего предложения.
Пишет отказ всем, кроме наилучшего предложения.
Сейчас я полезу в компьютер, чтобы привести пример,
потому что я назвать пример не помню.
Ну, какие у нас могут быть итоги вот этого действия этого алгоритма?
Либо у вас может быть такое.
У вас может быть такое, что у кого-то m закончился список.
То есть он делал предложение всем в списке и получил отказы.
Тогда мы говорим, что все, у нас устойчивого протосочетания нет.
Например, вот как раз в примере, который мы привели,
тут будет все плохо, потому что у вас все пишут предложения на наилучшем списке.
Дальше, первый получил предложение от третьего к четвертому, он пишет отказ к четвертому.
Второй пишет к второму, второй получает предложение от первого и четвертого, отказывает к четвертому.
И потом пишет к третьему, третий получает предложение от первого и четвертого, отказывает к третьему, четвертому.
Все сказали, поэтому устойчивого протосочетания нет.
Ну, если ни у кого не закончился список и все закончилось, значит у каждого есть ровно одно предложение.
Тогда мы переходим к этапу два.
Это еще не гарантирует нам, что у нас обязательно есть устойчивое протосочетание.
То есть у нас получилась какая-то перестановка игроков, а именно там A делал предложение B, B сделал C, C сделал D и так далее.
Они там, конечно, разбиваются на циклы, но в общем какая-то получилась какая-то структура.
Возможно еще, что там все еще есть устойчивое протосочетание, но нужно делать еще дополнительный этап.
Ну, если у нас был пример, который вы привели с технической перестановкой.
Давайте я его тоже на всякий случай напишу.
У нас бы тут закончилось все на первом этапе.
Потому что первый делал предложение второму, второй, третим, третий, четвертый, четвертый, первому.
Да, и мы знаем, что устойчивое протосочетание дальше мы его еще не нашли.
Но какие-то пары у нас, какая-то перестановка смирновалась, возможно это еще не устойчивое протосочетание.
Ну, в смысле, из него устойчивое протосочетание никак не выделяется.
Этап, ну, давай сначала сделаю этап 2, потом я применю для второго протосочетания.
Потом, наверное, напишу еще какой-нибудь пример, чуть более сложный, чем 4 игрока, чтобы было понятно, что происходит.
Этап 2.
Он похож на то, что у нас было до этого.
То есть, я только что обсуждали, что можно делать искусственно отказ и попытаться перейти к следующему устойчивому протосочетанию.
Вот здесь примерно та же идея.
Если у нас не получилось... То есть, если получилось устойчивое протосочетание, то уже все хорошо, то то есть...
Ну да, я это не написал. Если это устойчивое протосочетание, то уже все хорошо, то ничего не надо делать.
Если не устойчивое протосочетание, то, они разбились на пары, то все хорошо.
Если разбились на пары, то нужно мучиться и перейти к этапу 2.
мы делаем, на самом деле, опять же искусственный отказ, то есть мы говорим,
окей, вот у нас тут получилась какая-то пересновка, давайте мы возьмем, например, у первого и сделаем
искусственный отказ и посмотрим, что при этом произойдет. Ну, давайте я сейчас напишу,
давайте напишу более подробно. Значит, подготовка. Прежде чем мы начнем, нам надо
продлить списки. Дело в том, что, ну, если вы так подумаете, то, наверное, понятно, что если у вас
аналогично тому, что мы доказывали для mwv, если вы получили отказ на первом этапе, это значит,
что вы ни в каком устойчивом просочетании эта пара встречаться не будет. И если мы закончили
этап 1, то вот в этот момент у нас у первого, у первого игрока fmerf в его паре, это наилучший
вариант, который у него есть, а на последнем месте у него хуже, чем тот, кто сделал предложение,
у него быть не может. Поэтому мы, на самом деле, просто удалим всех лишних из списка, а именно мы
вычеркнем всех тех, кто лучше самого первого. Ну, и так уже вычеркнули, когда мы делали этот алгоритм,
но мы сделаем так, чтобы списки были одинаковыми и просто вычеркнем все лишнее. А именно у каждого m
вычеркнем пары, то есть в чем вычеркиваем? Мы вычеркиваем пары m с волной и, то есть мы вычеркиваем,
давайте я скажу, m с волной у m и m у m с волной, если m с волной лучше текущей пары m. Вот что такое
нужно сделать. То есть берем пары m с волной, берем всех, кто лучше, чем единичка, и всех учеркиваем.
Ну и то же самое делаем, или m с волной хуже, чем тот, кому я сделал предложение,
кто сделал предложение m. То есть мы, говоря о первом, удаляем всех, кто стоит тут и всех,
кто стоит тут. И так делаем и вычеркиваем также оставшиеся пары. То есть у нас получается такая
картинка, где у меня, значит у A1 есть, вот A1 сделал предложение B1, дальше здесь какое-то
Бакате, и у Бакатова Баката сделал предложение A1. Вот картинка примерно вот такая. Ну тут какие-то
другие элементы. Давайте попробуем сделать искусственный отказ. Смотрите,
то есть, вот смотрите, A1, допустим он отказывает B1 и делает предложение в следующем своем списке.
У B2, допустим, вот мы берем B2 и находим ему, у кого есть предложение от B2, да обозначим его A2.
Тогда у B2 есть два предложения, теперь у A1-A2, но при этом мы знаем, что у B2-A2 последние списки,
поэтому 11-й списке точно повыше. Поэтому B2 совершенно точно гарантированно откажет A2,
если согласится с A1. Дальше посмотрим, ну давайте я тут переобозначу все и скажу, что там B3,
это следующие списки A2 после B2. У B3, ну давайте напишу тут отдельную картинку, значит у B2 A2
стоит на последнем месте, и значит A1 будет где-то повыше. У B3 стоит A2, если тот,
кто сделал предложение, тот, у кого письмо от B3, это A3, то есть тот, кто сделал предложение,
то есть если B3 сделал предложение от A3, значит у B3 A3 на последнем месте, и значит A2 стоит где-то
повыше. Поэтому тут будет, то есть B3 точно откажет A3, и A3 сделает предложение B4. И вот мы так
будем идти по списку, но рано или поздно у нас мы найдем цикл, у нас рано или поздно элементы
повторятся, возможно они повторятся не обязательно на A1, то есть может быть цикл, который будет так
идти, что мы бы один отказали, получили B2, у B2 отказ B3, у B3 отказ B4, а тут снова получится
B3. Ну тогда мы найдем цикл, замкнем его и сделаем такой сдвиг. То есть алгоритм такой, выбираем
произвольно, выбираем A1, значит если для любого M список из одного элемента, то нашли устойчивое
просочетание. Если существует M, у которого список из больше либо он чем двух элементов, то мы делаем
следующее, то делаем искусственный отказ вот этого M и дальше, как я говорю, ищем цикл. Вот такого
вида. То есть он не обязательно стартует именно с этого элемента M, может оказаться, что он стартует
с какого-то нового куска, но в общем он будет выглядеть примерно так. У A1 будет B1, B2, первые два
элемента, у A2 будет B2 на первом месте, B3 на втором, у A3 будет B3 на первом месте, B4 на втором и так
далее. И тут будет где-то AS, у которого стоит BS и B1. После чего мы сдвигаемся на цикл и опять
переходим к этапу подготовки, то есть вырезаем все остальное так, чтобы у меня снова выполнялись
условия про первые и последние элементы.
Ну вот мы так делаем, делаем, делаем и дальше происходит следующее, либо у нас снова у кого-то
заканчивается список. То есть у нас на каждом шаге есть у нас UAM список больше двух элементов,
у нас список уменьшается, либо UAM закончится список, тогда просочетаний нет,
либо останется, будет один возможный партнер, тогда мы нашли устойчивое просочетание.
Ну давайте я приведу несколько примеров. Времени доказательств, конечно, не останется,
какие-то общие слова сказать. У нас же нет решетки, потому что у нас нет пар. Как вы будете
решетку строить? Как вы строите решетку?
Ну так вот вы так и делаете. Ну это да, это точно же самое, просто здесь этот алгоритм,
ну смотрите, здесь некоторые есть валютализм, потому что когда у вас есть список с двух больших
элементов, вы можете любой из них выбирать. Ну вот вы же придете к разному с помощью просочетания,
но это на самом деле, нет никакой гарантии, что это единственный случай просочетания,
их может быть несколько, и как сказать все, это вообще непонятно, потому что мы пока что только
гарантируем, что то, что мы получим, это с помощью просочетания, мы даже не гарантируем, что мы все
найдем, потому что мы может походу делать что-то потеряле, может быть у него просто еще не дошли,
может быть зависит от того, у кого есть свободы, мы можем любой такой выбирать,
у кого список с двух больших элементов, можем промахнуться, и то, что мы все нашли,
тут никакой гарантии нет. Ну давайте вот я сейчас приведу еще пример, давайте из статьи Иринга
приду, наверное он будет подходящий, сейчас эти вместе почитаем, проверим что, так, 4,6,2,5,3,
6,3,5,4,4,5,1,6,2,2,6,5,1,3,4,2,3,6,1,5,1,4,2,3,
ну давайте я сейчас быстро проведу, я думаю, что можно на семинаре подробнее посчитать,
значит у вас, вот можно проверить, что у вас так получится, после первого шага будет такой
проявежный список, ну у вас все дойдет до, давайте сначала напишу, что какие отказы произойдут,
значит у вас тут такой отказ будет, ну хотя, ладно, можно так посчитать, ну давайте, значит у
вас 1 делает предложение, 1 и 5 делает предложение, 4 и 4 отказывают единички, дальше у 1-ки, 2-ки,
предложение 6-ки, у 6-ки, а единица лучше, поэтому он отказывает 2-ки, дальше у вас 3-ка и 5-ка
сделали предложение 4-ки, он отказывает 3-ки, 3-ка и 4-ка сделали предложение 5-ки, 5-ка отказывает
6-ки, и все, вот у нас как бы закончилось, да, теперь мы продолжаем список, делаем то, что вот я
там написал, значит если единица сделал предложение 6-ки, у 6-ки не может быть никого, кто лучше единицы,
поэтому мы вот этих всех вычеркиваем дополнительно, значит мы вычеркиваем у 4-ки, 2-ки, 3-ки, 6-ку, дальше,
да и 5-ки тоже, значит так, у 2-ки предложение у 3-ки, 3-ки, 2-ки последние, 2-ки, 6-ки мы вычеркнули,
3-ка, значит здесь отказывается у 4-ки произошел, у 5-ки, 3-ки лучше только 1-ка, значит нужно единички
вычеркнуть 5-ку, дальше у 5-ки, значит 5-ка сделал предложение 4-ки, на 4-ке 5-ка единичка,
значит тут тоже единичка, вычеркнули уже, 4-ка сделал предложение 1-ки, поэтому мы должны вычеркнуть 2-ку и 3-ку отсюда,
получается такие списки, у прорежанных 6, 3, 5, 4, 5, 2, 2, 5, 4, 2, 3, 1, значит у вас список должен быть выполнен следующим,
если кто-то сделал предложение, то у него на последнем месте, например, 2-ка сделал предложение 3-ки,
значит 2-ка на последнем месте, 4-ка сделал предложение 2-ки, значит 2-ки и 4-ка на последнем месте,
Ну вот, у нас одна пара образовалась, осталось, а вот эти пары как-то разбились,
у нас получился стамп-тыгл длины 4. Давайте пробуем сделать второй шаг.
Мы выбираем любой элемент, у которого как минимум два, №2. Давайте я здесь напишу еще раз.
И вместе с №4 мы уже не двигаем. Давайте попробуем провести искусственный отказ.
Мы берем №2, учеркиваем №3. Вот это результат алгоритма работы Гейла Шепля.
Потом я выполняю этап подготовка. Я говорю, что из выхода алгоритма Гейла Шепля мы докажем,
что если у нас есть текущие предложения, то если №1 делал произведение №6, то значит,
никакие лучшие точно не могут произвести про сочетание. А если №6 делал произведение №1,
то №1 не может быть никакой пары, которая хуже, чем №6. То есть он им всем откажет,
потому что если №6 делал произведение №1, значит это будет сочетание про сочетание.
Поэтому эти все никакие высочные прочитания быть не могут. Поэтому в ходе подготовки мы вычеркиваем
все пары, которые не могут быть в сообществе про сочетания. después чего список у нас становится меньше.
То есть до №1 мы вычеркиваем все, которые лучше предложений были.
А дальше смотрим, кто сделалriebп link №1 и учеркиваем все, которые меньше него.
То есть если №3 делал פетерки, то №5 мы учеркиваем все, которые дальше в №3 стоят.
То есть мы делаем так, чтобы выполнялось условие, а если №1 делал произведение №2,
на последнем месте, потому что все худшие уже точно в паре быть не могут.
Ну, давайте попробуем сделать цикл. Двойка сделает отказ тройки, у пятерки
есть предложение от двойки тройки, но мы знаем уже, что он откажет тройки. Дальше
тройка сделает предложение двойки, у пятерка двойка на первом месте, и двойка
откажет четверки. После чего, значит, пятерка у нас начитала пятерки на первом
месте, теперь он у... да, и вот мы получили, сейчас, начнем получили цикл, когда у вас
вот этот вот, да, вот он получил цикл, что вы, то есть это можно оставить, у нас
получил цикл, потому что здесь у этого это на втором месте, у этого это на втором
месте, а вот этот элемент был лишним, можно его обратно написать.
Все, тогда мы, соответственно, у этих элементов удаляем, у тройки оставляем
двойку, у стройки пятерку, и прореживаем все остальное, это сделано так, чтобы они
не соответствовали, а именно у двойки удаляем всех, кто после тройки, но у пятерки
удаляем всех, кто после четверки. Ну, утверждается, что вот это просочетание будет устойчивым, то есть
устойчивое просочетание это вот 1, 6, 2, 3, 4, 5. Утверждается, что эта штука будет устойчива.
Тут, ну как, сложность, какие-то уже не нужно доказать, давайте сначала скажу,
потом я еще приведу пример, когда вот здесь вот, например, ну так, то есть, если
вас интересует, пример, когда вы здесь плохо, то есть, может быть, этап 1 закончится
хорошо, а на этапе 2 все плохо. Сейчас я приведу пример, когда это работает.
Ну, смотрите, что нужно доказать. Во-первых, кто-то или кто-то здесь говорил, что если у вас
произошел отказ на первом этапе, то это точно не может быть сочетанием просочетаний, и если у вас кто-то
был хуже предложения, тоже никогда ни в каком источнике сочетания встретиться не может.
Это один утверждение. Ну и второе утверждение следует в том, что вот здесь, вот когда происходит двиг
по циклу, что если было устойчивое просочетание, которое содержало, то есть, устойчивое просочетание,
если оно было предсходно в списке, то в новом списке оно тоже будет с сочетанием просочетания,
то есть если у вас эти пары входили в устойчивое просочетание, на самом деле,
при сдвиге по циклу они тоже будут входить. Это вот отдельное утверждение, которое надо доказывать.
Оно доказывается примерно минут за 10, но можно это сделать, но это там не очень сложно.
То есть доказывается, что если у вас в исходном списке было сочетание просочетания, то после
сокращенного тоже будет сочетание просочетания, значит вы много сочетаний не потеряли, поэтому рано или поздно вы его найдете.
Это не угроза, мы применим алгоритм. Алгоритм применяется, если у кого-то списки больше чем один
элемент, мы ищем цикл, мы ищем, как можно сделать искусство на отказ, чтобы получился цикл,
то есть мы хотим найти вот такую картинку, когда у вас есть список здесь из элементов,
у которых если мы сдвинем первое на второе, то произойдет сдвиг по циклу. Вот здесь именно так получилось,
у тройки четверки я могу заменить два на два пять, и при этом они просто меняются местами.
Поэтому я нашел такое, то есть тут а1, б1, б2, я сделал искусство на отказ в пятерке и получился в двойке,
а здесь сделал искусство на отказ в двойке и получился в пятерке. Получился, что у меня список пар не
поменялся, но при этом список уменьшился. Я утверждаю, что тогда можно просто оставить уменьшенный список,
и если тут был устойчивый просочетание, то тоже будет устойчивый просочетание, а значит,
я могу здесь уменьшать, пока не останется по одному элементу, и это будет устойчивый просочетание.
В каком случае? У нас только один цикл мы нашли, его убили и сразу у нас список из одного элемента,
остался, значит, у нас уже нашли устойчивый просочетание. Ну, конечно, могло быть такое, что мы...
Потому что мы снова делаем подготовку, а именно после того, как мы это сделали,
мы должны снова вычеркнуть, мы должны делать так, чтобы двойка-тройка была на последнем месте.
То есть мы говорим, что если это устойчивый просочетание, то мы можем снова вычеркнуть эти элементы,
потому что они в нашем просочетании выходить не могут. Это депоитное утверждение, которое тоже не
доказалось вообще ни капельки. Ну давайте, я еще на всех случаи напишу пример, когда у вас все ломается
на втором этапе. Так, ну опять же, можете проверить на семинарии, что действительно так работает. Ну это
такой искусственный пример. Опять же, будет кондерсеток улучшенный. Ну как вы берете, например, берете...
Вот это пример, когда этап один проходит, а этап два все ломается. Вот у вас берете 8 элементов и
делаете тот самый пример, который у нас был, только по четверкам делаете. Вот, то есть у вас есть тут
2, 3, 4, 3, 1, 4, 1, 2, 4. Тут 1, 2, 3 и тут все что угодно. А тут 6, 7, 8, 7, 5, 8, 5, 6, 8,
7, все что угодно. После чего у вас, после первого этапа, у вас будут вот такие вот предложения у
первых элементов, а у четверки и восьмерки они просто друг другом будут в паре. То есть у вас
четверка будет в паре с восьмеркой, а восьмерка четверка, потому что все остальные, ну там, никто
больше не согласится, потому что они будут... То есть у вас после первого этапа будет четверки,
будет восьмерка, и дальше, если вы все вычеркнете лишние, у вас останется вот такие вот штуки.
Ну и тут видно же, что никаких не разобьете, так что было совсем просто сочетание, потому что у вас 1, 2, 3 должны быть друг с другом.
Если у вас хотя бы один из элементов будет, то есть если вы соедините кого-то из них 1, 2, 3 с каким-то
5, 6, 7, то они найдут себе лучшую пару, потому что это будет угрозно обязательно. Ну и тут вы в втором этапе
все сломается, потому что как только вы смените это, заменится вот это, и у вас при этом переходе
все сократится и никаких парников не будет. Ну вот опять же, это для зрения в семинаре, можно проверить,
что здесь вот, это пример, когда этап 1 хорошо, этап 1 работает, а на этапе 2 все ломается, то есть такое
может быть, что у вас первый этап прошел, а второй этап показался, что все равно есть сочетание,
потому что их правда нет. Так что то, что на первом этапе все прошло, это что не значит, что у вас есть
сочетание, может быть такое, что это просто у вас не повезло. Ну вот. Так, ну наверное все на сегодня,
на семинарах я надеюсь, что там разберется какие-то примеры, ну в следующий раз будет контрольная,
ну она будет видимо на, я не знаю, можно ему занять время семинара, но на полтора часа точно,
мне правда надо будет упекать, но если там семинарист готов прийти и посидеть с вами еще 20 минут,
наверное это не страшно, но в общем придумаем что-нибудь, обсудим.
Ну, обычный.
