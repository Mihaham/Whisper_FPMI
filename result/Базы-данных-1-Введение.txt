Собственно, содержание того, о чем мы с вами будем
говорить на лекциях, вот примерно оно в таком
виде, в тезисном виде представлено на слайде.
Поговорим с вами об общих понятиях и концепциях,
на которых строится не то чтобы теория баз данных
– это прям громкое словосочетание, но учение что ли о базах
данных некое такое.
И поговорим с вами о SQL запросах, синтаксисе, о группах
операторов по множеству языка SQL отдельно, посмотрим
как проектируются базы данных, разберем более
менее продвинутые запросы, их оптимизацию, что происходит
под капотом базы данных, еще раз прошу прощения,
и коснемся более таких глобальных, что ли может
быть тем, это хранилища данных, ну вот именно data
warehouses, потому что есть еще data lakes, data oceans, различные
варианты метафора на тему того, что делать с огромным
количеством данных из разных департаментов большой-большой
компании, все мы там посмотреть не успеем, скорее всего
это будет одна, может быть две лекции по тоже таким
основам Инману и Ки, ну в общем, авторов мы вспомним
уже на соответствующей лекции, и немного поговорим
про нереляционные базы данных, и посмотрим, я думаю,
парочек-троечек примеров, чтобы на контрасте немножко
оценить для себя, сделать какие-то данные, иметь в
виду какие-то общие представления, как и что происходит в
нереляционных базах данных.
Окей, общие моменты, почему вообще мы с вами изучаем
базы данных, зачем и кому это нужно, здесь довольно
понятные, наверное даже очевидные практически предпосылки
с развитием информационных технологий, с развитием
техники электронно-вычислительной, появлялось все больше
информации, которую нужно было обрабатывать, чтобы
обрабатывать нужно было где-то ее хранить, и чем
больше, ну, мы не берем там какие-то совсем дремучие
времена, а что было до электронных вычислительных машин,
до компьютеров, до ячеек памяти, как все складируется
в библиотеке, что происходит с библиотечным фондом,
нас интересует вопрос исключительно, конечно, в том, почему появились
электронные базы данных на компьютерах, ну, потому
что у нас, как я уже сказал, информации было все больше
с развитием техники, и в начале базы данных возникли
как попытка абстрагироваться от непосредственной работы
с адресацией памяти, причем буквально прямой адресацией,
буквально с прямой адресацией, когда прям адреса, чуть
ли не адреса ячеек записывались в те или иные команды, то
есть они возникли, базы данных, как попытка абстрагироваться
и предоставить аппаратно независимый набор инструкций
команд, как для проектировщиков баз данных, так и для пользователей,
которые бы упростили всем первым проектировщикам
проектирование баз данных, а вторым пользователям
упростили бы, соответственно, работу с данными, получение
баз данных по запросам, но что такое вообще базы
данных, о чем мы с вами будем говорить, на самом деле,
как незабавно, какого-то такого стоявшегося определения
нет, если говорить про базы данных, систему управления
баз данными, модели данных, а вещи это часто пересекающиеся
в зависимости от контекста, и конечно, формально есть
определение, есть госстандарты, если вы будете участвовать
в разработке тех доков, вы этими госстандартами
будете пользоваться, чтобы определить, что вы вообще
делаете, но, ребят, в чат, пожалуйста, не пишите сообщения
такие-то, бессодержательные, это отвлекает, так вот,
на самом деле понять, что имеется в виду, можно в зависимости
от того, что имеет в виду ваш собеседник и что вы
делаете, но, тем не менее, как можно определить, если
мы возьмем какие-то наиболее известные курсы по базам
данных, то определение можно сформулировать, вернее,
привести несколько определений, что это некоторый набор,
Кристофер Дейт, например, говорит, что это некоторый
набор перманентных данных, используемых прикладными
программными системами какого-либо предприятия.
В альтернативных курсах есть еще несколько определений,
но они, в принципе, довольно похожи.
Довольно похоже, все, везде речь идет о том, что это
какие-то данные хранимые где-то и о том, что база
данных предоставляет некий набор операций, которые
пользователь может совершать над данными.
И вот, собственно, Благословенная Википедия предлагает пару
своих вариантов определений, наша статья о русскоязычной
википедии опирается на ГОСТ, соответственно, но
когда ГОСТ, это, наверное, полезно для разработки
техдокументации, в первую очередь.
Не будем на этом останавливаться сильно, в принципе, нужно,
чтобы нам понимать, что есть, собственно, базы данных,
есть система управления базами данных и есть,
в релиционных базах данных, система управления релиционными
базами данных, соответственно, есть распространенные агремиатуры
СОБД и РСОБД, и БД, понятно, база данных реализовывenne.
Про базу данных мы кратенько сказали, а реалливационной
базы данных — это база данных, реализующая релиционную
Система управления базой данных – это совокупность программных и лингвистических средств общего и специального назначения обеспечивающих управление созданием и использованием баз данных.
Ух! Релиационная СУБД, соответственно, поддерживает такая система управления, которая поддерживает релиционную модель данных.
Немножко тавтология, немножко такое топанье на месте, но вот немножко тем не менее скучных вводных вещей.
Надо, наверное, о них сказать по неким формальным соображениям, чтобы у вас было общее понимание хотя бы, что такое аббревиатура СУБД и РСУБД.
Повторюсь еще раз. База данных – это просто набор сведений, определенным образом хранимых.
И, как правило, не разделяют систему управления базой данных или база данных в литературе.
То есть, по большому счету, слова – синонимы. И часто бывает.
Поэтому, если говорят база данных, часто подразумевают целую систему.
Когда говорят база данных, подразумевают систему управления базой данных.
И наоборот. Ну да ладно. Более интересная, более глубокая, что ли, вещь.
Модель данных. Что это, собственно, такое?
Мы с вами еле-еле попытались как-то разобраться и определить, что такое база данных.
Более или менее, наверное, у нас кто-то из этого получилось.
А можно уточнить, что значит релиционная модель?
Релиционная модель – это модель, которая реализует, построенная на отношениях,
построенная на определенной математической абстракции,
описанная Джеймсом Кодом в своей статье программной 1969-1980 года.
И вот, наверное, ответ такой.
То есть, модель данных, основанная на отношениях, в неком математическом смысле.
Мы сейчас об этом поговорим.
Спасибо.
Эдгаром Кодом. Прошу прощения, конечно, Эдгаром.
Собственно, как Эдгар Код, да, и вообще, кто такой Эдгар Код?
Я уже немножко забежав вперед, раскрыл личность нашего, наверное, главного автора по теме, скажем так,
Майлстоун.
Главного с точки зрения концептуальной автора по теме.
То есть, человек, который, по большому счету, в своей статье 1969-1970 года.
Почему 1969-1970? Потому что в 1969-ом она вышла внутри IBM, по-моему, тогда он работал в IBM,
а в 1970-ом она уже была опубликована в широкой печати.
Эдгар Код, собственно, эту модель придумал, изобрел, как-то вот последовательно описал.
И, в принципе, я вам всем рекомендую ознакомиться с этой статьей.
Она довольно легко гуглится. В лекции будет название.
По названию можно найти 12 страниц, его немного. Довольно легко прочитать, быстро можно.
А что такое модель данных, тем не менее, по Эдгару Коду?
Он выделял три признака модели данных в 1981 году.
Наличие коллекции набора типов структур данных, наличие набора операторов или правил вывода,
с помощью которых можно манипулировать имеющимися экземплярами типов структур данных.
И набор правил поддержания целостности, которые определяют множество согласованных состояний базы данных.
Или переходы из одного состояния в другое. Почему нам это важно?
Модель данных – это штука междисциплинарная, наверное.
Мы здесь, в нашей лекции о ней поговорим. Наверное, вернемся еще немножко, когда поговорим про проектирование.
Но модель данных – это не совсем даже напрямую относительно то, что относится к базам данных.
Это такая подлежащая абстракция или надстоящая абстракция,
которая у нас может реализоваться в той или иной мере, в той или иной базе данных, в системе управления базой данных.
А может и нет. Как революционная модель, тем более, особенно с доработками Эдгаро Кода,
который он в своих статьях в 70-х годах делал и дальше, в 80-х тоже, она реализована не в полной мере на данный момент.
И в принципе, нет базы данных, которые в полной мере реализуют модель Эдгаро Кода в том виде,
которым он закончил. У него последние статьи 90-ми даже годами датируются.
В которой он вот... Нет, то есть такой базы данных сейчас вышли,
который бы полностью реализовал там все идеи Эдгаро Кода как основателя ясного положника революционной модели.
Ну, с другой стороны, с другой стороны, можно сказать, что, в принципе, база данных даже стандарта SQL в полной мере не реализует.
Имеют свои особенности, но это уже, наверное, другая история.
Тем не менее, Эдгар Код предложил такой подход к модели данных.
То есть модель данных, она должна описывать какой-то набор типов данных,
должна иметь правила работы с этими типами в виде, например, каких-то операторов.
И должна иметь правила поддержания целостности, что важно, тоже очень важно.
Поддержание целостности состояний, когда мы там что-то меняем.
Меняем, совершаем какие-то транзакции, чтобы у нас были правила и ограничения
на препятствующие нам изменить что-то чрезмерно существенное.
А хорошо, есть также формальное определение ГОСТовской модели данных,
графическое или словесное представление данных, задающее их структуру и взаимосвязи.
Очень такое приятное лаконичное определение.
А также различные курсы предлагают свои подходы к определению модели данных.
Но нам важно запомнить то, что сказал, наверное, Эдгар Код.
Это типы, варианты операции над типами и способы поддержания целостности.
В этом курсе, в нашем курсе мы будем изучать только одну, подробно будем изучать только одну модель данных.
Это релиционная модель.
И посмотрим на то, как она реализуется в такой системе управления базами данных,
или в такой базе данных, как Postgresql.
С ней вы будете работать и на семинарах.
В первую очередь мы немножко, совсем чуть-чуть, наверное, будем касаться, что происходит в смежных релиционных базах данных,
на лекциях, пожалуй.
Но у нас как таковой такой цели не будет.
Поэтому, если хотите, в принципе, стандарты, не стандарт, прошу прощения, тех документаций, тех или иных решений,
она в свободном доступе есть.
Можете посмотреть сами, но по большому счету изменения не сказать, чтобы прям какие-то, раздачтение различий,
не сказать, чтобы какие-то принципиальные, но они есть.
И когда вы будете работать с той или иной системой, их, конечно, нужно учитывать.
И смотрите документацию.
Модель, как я уже сказал, была в основном сформулирована Adgram Code, его программной статьей 70-го года,
Relational Model of Data for Large Shared Data Banks.
Прошу прощения за мой английский.
Еще раз настоятельно вам рекомендую взять в руки Google и найти статью и ее прочитать.
Хотя бы, по крайней мере, там какие-то отдельные моменты из нее, глазами по ней пробежаться за что-то зацепится,
может быть, в ваш взгляд, потому что штука интересная.
Позволяет понять вообще, почему и как возникла вот эта вот концепция релиционной базы данных.
В начале Adgram Code пишет о том, какие зависимости данных он считает критическим и хочет от них избавиться.
И на примере существовавших тогда систем управления данными они назывались, Data Management Systems,
а на примере существующих систем он показывает, что вот такая система у нее какие-то проблемы,
вот такая система у нее какие-то проблемы.
Ну, кратенько все, но довольно любопытно.
Позже Code расширял и дополнял свою основную модель 70-го года.
Как я уже говорил, там не одна на самом деле из сегодня существующих промышленных СОБД,
в полной мере его строгий подход формально не реализует.
Ну и вообще Adgram Code был прям таким инженером-математиком, наверное даже математиком-инженером,
и поэтому он довольно строго подходил к вопросу логической неприватительной противоречивости собственной теории,
собственной модели, что на практике не всегда удобно и выполнимо.
Релиционные реляции, отношения, ребята.
Отношения, если совсем просто, и дальше сейчас будут слайды на эту тему, и мы об этом поговорим,
если совсем просто и на пальцах, в модели релиционные реляции, отношения, это просто таблица.
А если прям хотите подробное пояснение такой математического плана,
ну у нас будут тоже еще слайды на эту тему,
но здесь мне не кажется, что оно какое-то принципиальное,
просто имейте в виду, что реляция это отношение между чем-то и чем-то, да,
подробное математическое описание смотрите в статье Adgram Code,
а мы пока продолжим.
Так, бывает еще и множество других моделей, на самом деле,
и релиционная она у нас на сегодняшний момент, ну не то чтобы,
как бы сказать, знаете, она не то чтобы прям доминирующая вообще везде и во всем,
но она, наверное, вот самая распространенная и на уровне каком-то таком
среднего объема предприятия, наверное, можно сказать, что будут высталкнётесь
только с набором каких-то релиционных баз данных в некотором количестве департаментов,
без каких-то существенных отступлений в какие-нибудь, не знаю, колончатые базы данных,
какие-нибудь хранилища данных, у каждого департамента будет своя база данных
и просто нужно будет ее обслуживать, ну как Postgres, MySQL, что-нибудь такое,
но у крупных компаний есть более сложное, конечно, решение, ну ладно, это все уже лирика,
главное, что модели есть и другие, и мы буквально чуть-чуть коснемся двух еще моделей,
которые, ну, наверное, нужно не то чтобы как-то хорошо представлять, но просто иметь в виду,
опять же, это то, в том числе, почему релиционная модель появилась, то есть до нее файлы,
данные как-то хранились, хранились как-то первоначально там в файлах, в файловой системе,
вообще изначально это были отдельные такие большие скопления информации в виде мастер файлов,
то есть не было разделения на то, что сейчас подразумевается в вашей системе хранения данных
по умолчанию, что вы можете ограничивать какой-то набор информации в виде файла,
и он у вас там будет иметь определенные системные данные для того, чтобы ваше драйвер управления
жестким диском, операционная система это индексировала, все удобно хранила, удобно считывала,
раньше все, конечно, все начиналось с совсем простых решений и все хранилось, грубо говоря,
в плотском таком коризонтальном виде, но все усложнялось, усложнялось, усложнялось в связи с тем,
что нужно было данные, как я уже говорил, обрабатывать большие и быстро,
и данных становилось все больше, обрабатывать нужно было все быстрее.
Какие были варианты? Какие были варианты, чтобы не работать с прямой адресацией?
Эрархическая модель данных. Появилась в результате обобщения подхода,
использована IBM для своей системы управления данными.
Вот IMS это то, что в 60-х годах, в 60-х годах была разработана компания IBM.
Можно сказать, что это такая вот, такой предок с баз данных, использующий право нерелационные,
а иные концепции в своей основе.
Что интересно, в принципе, вот говорят об эрархической модели,
но если говорить о том, как она возникла, это по сути дело описание тех принципов,
на которых была разработана система. То есть сначала разработали систему IMS,
а уже потом вышла такая как бы программная статья, которая описывала принципы,
на которых эта IMS-система была сформулирована.
Поэтому здесь получается, что даже модель данных возникла как следствие работы
над конкретным прикладным программом обеспечения.
Здесь у нас будет такое довольно подробное описание, правда,
на трех, по-моему, всего слайдах эрархической модели,
в том представлении, в котором Уильям Мак-Ги или Мак-Джи на русский язык
по-разному переводят, будет описание на нескольких слайдах того,
как Уильям Мак-Ги эту модель сформулировала в своей программной статье.
Не будем, пожалуй, на этом останавливаться.
Вот наглядно просто покажу из буквально статьи,
как это представлялось с точки зрения хранения физической структуры данных,
с точки зрения схемы данных.
Буквально хранилось все таким образом, древовидно, как на левой части слайда.
То есть просто было пересыливание с одного кускодиска на другой,
и вот такая эрархическая структура образовывалась.
Схема данных здесь немножко посложнее.
Там, опять же, если прям сильно вам будет интересно, что, наверное,
вряд ли вы можете посмотреть статью.
Тоже небольшая, но в схеме данных, как вы видите, здесь схлопываются
просто, грубо говоря, однотипные инстанции, экземпляры некой сущности,
и там используются в скобках маркеры специфические,
которые там обозначают специфические для модели параметры.
Ну, помимо эрархической модели данных...
Ну и да, опять же, что здесь можно сказать?
Эрархическая модель данных была, есть и будет.
Это, в общем-то, такой очень простой, понятный,
нативный в некотором роде способ похоронения и обобщения информации.
Если говорить про сейчас, то, грубо говоря,
это то, как у вас в файловой системе расположены файлы.
Ну, так очень-очень грубо.
Так, вопрос субтитров будут.
Не могу вам подсказать по поводу субтитров.
Вроде бы, да, вроде бы должны быть.
Сетевая модель данных, еще можно остановиться немножко на ней.
Хронологически она была даже чуть раньше эрархической.
Ну, хронологически в плане, опять же,
здесь такая же ситуация, как с эрархической моделью.
General Electric разрабатывали свою базу данных.
На тот момент, опять же, такого термина не было,
поэтому система менеджмента данных называлась их программное решение.
По итогам разработки, инженеры-разработчики формулировали свою статью,
написали статью, выпустили ее.
Вот на слайде она тоже представлена.
Тоже, как видите, два года.
То есть первый год это то, что было опубликовано.
Как с кодом, с Эдгаром кодом.
В 1964 году вышла статья в печати.
Ну, не в печати, а для узкого круга, для внутреннего пользования.
В 1965 опубликована широкопечать.
Такие технические подробности.
Сетевая модель данных здесь тоже не будем на ней как-то очень сильно останавливаться.
Она даже в описании том, в том техническом плюс-минус-описании 1965 года,
она еще, наверное, более низкоуровневая, чем, пожалуй, сетевая.
Но смысл в чем?
В чем разница между сетевой и иерархической принципиальная?
В том, что, вот как видите на правой части слайда,
сетевая позволяла делать вот такие вот связанные графы,
не просто деревья, а более общее представление данных,
когда мы соответственно могли соединять, причем соединять буквально напрямую,
опять же, через практически прямое пересыливание из отдельных записей,
из одних записей на другие.
Там были определенные формальные правила построения структуры записи.
Но, тем не менее, можно было прямыми адресными ссылками сцеплять вот эти вот,
как на рисунке показа, круги, сцеплять их друг с другом,
и вот получалась такая, если прибегать к каким-то визуальным аналогиям,
с сеточкой сетевая, поэтому сетевая.
Но в чем главное различие между сетевыми и иерархическими моделями?
Это в том, что в иерархических моделях данные организуются в виде деревьев.
Один предок множество потомков.
А в сетевых моделях данных допустимо и множественность потомков, и множественность...
А с субтитрами вроде бы должны быть, да, да, да. Вроде бы должны быть.
Так, что еще важно про сетевую иерархическую?
Смотрите, ребят, мы ближе к концу лекции увидим довольно любопытную штуку,
что у нас такая вот сетевая, скажем так, модель, она в некотором роде возвращается,
пытается проявиться в релиционной модели. Я поясню, что это значит, когда мы дойдем до этого места.
А с другой стороны, что интересно, опять же, если вы откроете статью кода,
начнете ее читать, то там довольно любопытное рассуждение у него,
как в релиционный вид перевести графовое представление данных.
И вот он там берет, на примере, у него граф, вершина, это работник,
и начинают потомки множества. У работника может быть жалование,
у него там может быть ребенок, у жалований может быть валюта и так далее.
Он говорит, как это перевести в релиционную модель.
Ну, опять же, просто от меня рекомендация, поскольку если вы хотите прям что-то почитать емкое и краткое,
по теме вот статья кода, отсылаю вас к ней, еще раз всем настоятельно рекомендую.
Во всяком случае, она гораздо-гораздо меньше объема занимает, чем учебники дейта.
Да, можно сказать так, получается, что иерархическое под множество сетевых.
Ну, как бы формально говоря. Ну, опять же, ребят, в данном случае проблема, наверное, заключается в том,
что модель и иерархическая, и сетевая, они являются следствием рассуждений о том,
как люди программировали конкретное ПО. И вот конкретно получилось так, что у General Electric
у General Electric получилась сетевая, у IBM вышла иерархическая.
Они не думали изначально в терминах, они разработают ли мне программное обеспечение,
которое будет функционировать, реализуя сетевую модель данных. Не было такого.
Поэтому можно говорить, рассуждая, что оказывается, это вот такие модели, там были реализованы,
одна является видом другой и так далее. Одна является видом другой, но, в принципе,
это такие рассуждения, что ли, досужие, они какого-то практического смысла не несут, но у нас,
прошу прощения, у нас есть небольшой пунктик на тему, что помимо реализационной есть другие модели,
есть, да, они есть. Вот они вот такие, как минимум такие. Нужно просто держать в голове,
но заборачиваться на этом не надо. Опять же, в слайдах есть информация по тем или иным
каким-то основополагающим статьям. Можете, если хотите, углубиться, но, честно говоря,
если есть свободное время, если его нет, почитайте коды. У него, в принципе, там тоже кратенько есть
отсылки к тому, что было до реализованной модели. Какие еще есть модели? Ну, их много, их много,
причем вопрос в том, что, как бы, да, что еще мы под этим под всем подразумеваем? Мы подразумеваем
организацию данных на этапе проектирования, на организацию данных в конкретной базе данных или нет,
и так далее. Вот entity relationship model – это то, о чем мы будем говорить с вами при вопросе
проектирования модели, вернее реальной базы данных. Но можно ли сказать, что это модель данных?
Да, можно. Мы тоже таким образом данные наши первично как-то обрабатываем, мы их, по крайней мере,
для себя где-то на листочке расписываем и агрегируем по тем или иным группам.
В сетевой модели, смотрите, и там, и там, это ссылки, ссылки по памяти, вообще ничего, вопрос, да,
как осуществляется доступ к данным в сетевой модели в случае иерархической, это спуск по веткам дерева,
и там, и там, это просто почти прямая адресация, то есть это очень зависимые модели в плане вот
тогда, когда они возникли в конкретных системах, очень зависимые с точки зрения того,
как строится сама, как строится само программное обеспечение и как строится уже внутри него
складируются данные. Но здесь даже, знаете, нет какого-то, какой-то проблемы в том смысле,
что вы можете там написать что-то свое и реализовать там переходы между данными как-то по-своему,
по большому счету, и можно говорить, что ирреалиционная модель это некий перевертыш от сетевой.
Почему? Потому что, вот смотрите, мы можем придумать некую базу данных, графовую, например,
для простоты в Neo4j, вот если вы туда зайдете на сайт Neo4j, посмотрите руководство,
туториал для начинающих, там прям предлагается создать графовую базу данных по кинофильмам.
Может быть, это не очень актуально, я, честно говоря, не перепроверял на 24-й год, что там с туториалом,
но там это точно было, и там, соответственно, вы создаете свой граф по кинофильмам,
по актерам, режиссерам, создаете вот такую графовую структуру, и там такие концептуальные пересыливания идут.
Мы можем говорить об этом как о некой верхней уровне абстракции по отношению к реалиционной модели?
Можем. Что это значит? Это значит, что мы можем это развернуть так, что у нас вершины этого графа на рисунке
будут представлять собой таблички, и тогда у нас кинофильм, это будет табличка с кинофильмами,
продюсер, табличка с продюсерами и так далее.
Между ними все равно останутся отношения, там будут первичные ключи, внешние ключи,
а вот эти вот взаимосвязи по ключам, они будут формировать дуги графа, вершины графа будут представлены в таблицах,
и по большому счету, о чем мы с вами говорим. Это все такое, знаете, интеллектуальное упражнение, что ли,
небольшая эквилибристика интеллектуальная.
Поэтому просто следует знать, что у нас есть разные варианты представления данных,
есть, можно точно выделить иерархический, сетевой и реалиционный, они друг от друга отличаются,
иерархический сетевой они, вот иерархический является подможеством сетевого, да, с логической точки зрения,
в сетевом можно данные, между ними там строить, взаимосвязи допускающие закольцовывание, в иерархической модели,
это последовательная такая вертикальная структура, грубо говоря, там, ну, едва ли не от общего к частному,
а реалиционная модель, она основана на отношениях между, она основана на таблицах.
Давайте вот так, для простоты, реалиционная, соответственно, иерархическая сетевая на таблицах не основана, вот, примерно так.
Хорошо, так, сетевые модели иногда не возвращаются в виде графовых моделей в графовые УПД, да,
и вот из официального туториала, прям, как интерпретировать реалиционные данные в графовые,
переводя там из, не знаю, позгресса, условно того же, в Neo4j, вот, строка таблицы, это вершина, имя таблицы,
то есть, имя отношения, это label name, ну там, с label там своя, есть такая, как бы, свои метки специальные для внутри узлов,
внутри вершин в Neo4j, и join, операция объединения или внешние ключи, это, собственно, отношения, ну, грубо говоря, дуга,
между двумя вершинами в Neo4j, ну, поэтому все это так, как бы, из одного в другой перетекает.
Хорошо, ура, так, реалиционная модель, основные концепции сформулированы в статье кодом,
тогда уже он сказал, что такое атрибут, отношения, домен, или домен, как уж хотите, понятие нормальной формы,
ну, нормальная форма у него, наверное, вот, первая нормальная форма, наверное, вот так, я бы сказал, описана в первую очередь в этой работе,
а их, в принципе, много, мы будем с вами говорить о трех, четырех, но их там вплоть до восьми, девяти, что-то, не скажу точно, не перепроверял,
там просто можно дальше нормализовывать то, как данные представлены, но об этом мы поговорим с вами позже, пока можно на этом не зацикливаться сильно.
Так, описал также применимые теоретико-множественные операции, и вот журнал Forbes поместил реалиционную модель в список важнейших инноваций последних 85 лет.
Еще раз читаем кода. Сейчас, подождите, так, реалиционная модель состоит из трех аспектов, структурного, целостного и манипуляционного,
в принципе, это похоже на то, что говорил Код в 80-м году, что данные, операции и поддержание целостности. Что такое структурный аспект?
Вот основные понятия. Domain – это множество допустимых значений, фактически то же самое, что и тип данных. Атрибут – это наименование домена, грубо говоря, заголовок столбца.
Cartesian – порядочный набор фиксированной длины, примерно то же самое, что строка в таблице. Отношение – это множество картежей на декартовом произведении некоторых множеств атрибутов.
Отношение состоит из заголовка и тела, и примерно это равно таблице. Так что вот дословно реалиционная модель, модель таблиц, ребята.
Вот для простоты здесь нет какой-то глубокой теории, на этом даже можно не останавливаться. Вот отношение таблицы, картежа строка, атрибут, заголовок столбца, домен, то, что можно в ячейку положить.
Целостный аспект подразумевает, что реалиционная модель обеспечивает целостность сущности и ссылочную целостность. Ну, грубо говоря, она обеспечивает возможность сохранения данных непротиворечивыми, возможность проведения транзакций без потери целостности данных, сохранение состоянией базы данных, сохранение состоянией данных между транзакциями.
Манипуляционный аспект модели, именно модели это реалиционные алгебры или реалиционные исчисления, но мы об этом поговорим с вами кратенько, но главное, помнить надо, наверное, следующую штуку очень интересную, но на практике вы ее не будете использовать, кроме университета, едва ли, разве, пожалуй, что никогда.
Ну вот, sad but true. На самом деле это такая шутка юмора, на самом деле это нужно знать, ну это как бы определенный показатель, по крайней мере, того, что вы понимаете, о чем идет речь. Мы сейчас с вами должны посмотреть немножко реалиционные алгебры, а реалиционные исчисления мы не будем затрагивать, но в принципе оно семантически эквивалентное и основано на логике претикатов.
Счислений претикатов первого порядка. Реалиционные алгебры основаны на теоретике множественном подходе.
Пример реалиционной модели. Вот вам реляция, вот вам отношения, вот таблица. Заголовок это таблицы, заголовок остальные строки это телоотношения, каждая строка кортеж.
Наименование заголовков это атрибуты некоего отношения, а в каждой ячейке содержится соответственно значение своего домена. Вот домен натуральные числа в атрибуте ID.
Тут, в общем, наверное, все, мне кажется, здесь наглядно и просто. Какой-то особо глубокой теории за этим не стоит. Это не математический анализ.
И в принципе достаточно для эффективной работы просто представлять, что отношения это таблицы.
Пример кортежа, соответственно, тоже на рисунке. Операция реалиционной алгебры. Теоретика множественная и реалиционная.
Теоретика множественная, объединение, разность, пересечение. Реалиционные добавлены кодом. Они не совсем новые по отношению к теоретикам множественным, но они несколько специфические.
И принято говорить о том, что они такие специфические для данной модели.
Нам нужно для рассмотрения реалиционной алгебры понимать, что такое декартовое произведение. Не будем на этом тоже сильно останавливаться, потому что я думаю, что если вы попали до наших курс, вы знаете, что такое декартовое произведение.
Определение формальное представлено на слайде. Расширенное декартовое произведение. То есть когда у нас появляются множество видов того, что мы с вами видели выше. То есть то, что представимо в виде таблиц.
И появляется несколько множеств. Расширенное декартовое произведение на примере конкретной таблицы. Вот у нас таблица Q, таблица R, результирующая таблица Z.
Мы видим, что у нас все строки таблицы Q сцепляются со всеми строками таблицы R. У нас появляются в таблице Z два Ивановых, два Петровых, два Васильевых.
Потому что у нас в таблице R два значения. Мы должны продублировать каждую строку так, чтобы... Мы должны строки задублировать так, чтобы у нас каждая строка с каждой соединилась.
Сцепление кортежей здесь довольно просто. Буквально практически конкатенация. Формальное определение отношения для тех, кого очень интересно.
От себя скажу, что запоминать его смысл, наверное, для экзамена имеет смысл. Для практики достаточно того, что это таблица.
Опять же, для большей, может быть, какой-то наглядности, рекомендую, отсылая вас опять к первоисточнику, к Эдгару Коду, у него все это кажется, что написано менее сухо.
И повторюсь, статья тема интересна, что человек в своей работе пытался решить какие-то практические проблемы и подогнал под это дело, разработал, доработал под это дело математический аппарат.
И это просто интересно с такой инженерной точки зрения, как разрабатываются такого рода модели и в последствии системы.
Ну, формальное определение отношения. Отношение R, определенное на атрибутах a1, a2, an. Мы помним, атрибуты это наши столбцы. Не все целиком, а именно заголовки.
Называется под множество расширенного декартового произведения данных доменов.
Вот краткий ответ, что такое революционная модель. Революционная модель, использующая, реализующая операции с отношениями, так как они определены на слайде.
Свойства отношений. Нет двух одинаковых кортежей. Порядок отри... Ну и да, да, да. Давайте еще все-таки вернемся немножко, чтобы было на контрасте поярче видно.
Мы здесь говорим про множество под множество декартового произведения. О чем бы мы с вами говорили в сетевой иерархической модели, если бы они разрабатывались не прикладными инженерами-программистами, а математиками тоже, как Эдгар Кот по аналогии.
И шла бы разработка от математической основы к реальному воплощению. Вы бы с вами говорили о теории графов, конечно же. Здесь мы с вами говорим о теории множества.
Ну понятно, там все можно представить одно через другое. Как бы тоже не будем на этом останавливаться. Это такая уже побочная тема.
Но тем не менее, реляция это множество. Сетевая иерархическая модель это графы.
Свойства отношений. Нет двух одинаковых кортежей. Порядок атрибутов в заголовке не определен. Порядок кортежей не определен. То есть у нас главное, что кортежи не дублируются.
А что внутри отношения происходит с точки зрения атрибутов, какой порядок. И какой порядок записей в таблице. В общем случае, нас это не интересует.
И в принципе, это даже не является каким-то стандартом. И вы можете получать ответы на свои запросы, исходя из этих предпосылок.
То есть у вас может быть, если вы не специфицируете, при определенных условиях может быть разный набор, разная последовательность выходных данных, последовательность столбцов в таблице.
Релиционные алгебры, формальные определения. Ну, ребят, давайте так. Слайды будут на GitLab. Со слайдами сможете ознакомиться.
Опять же сможете почитать что-то подробнее, если кого-то интересует. Повторюсь, что в данном случае, в нашем курсе у нас математики будет минимум.
И формальное определение нам здесь не особо нужно, но вот на слайде оно представлено, если кому-то очень интересно.
А некоторые простейшие операции, о которых мы поговорим, это объединение отношений. Мы здесь в данном случае объединили две таблицы с семинаристами и получили результирующую таблицу.
Здесь, обратите внимание, у нас не задублировались строки по умолчанию, вот такое вот поведение, поскольку у нас не должно быть двух одинаковых кортежей.
А у нас, да, Меркурьева Надежда входит в две таблицы. Она, соответственно, не входит в результирующую дважды, по умолчанию во всяком случае.
Она вошла, записи они вошла только один раз. Ну, довольно просто. Мы здесь, стоит сразу оговориться, это не Декартовы произведение, это вот именно объединение.
То есть мы здесь просто по большому счёту дописали к первоначальной таблице или ко второй, к РЛС, что вы возьмёте за основу, это уже ваше дело, дописали недостающие записи из, соответственно, другой таблицы.
Пересечение отношений. Мы, соответственно, нашли записи, которые у нас и в той, и в другой таблице находятся.
Нашли записи, которые находятся в обеих, идентичные для обеих таблиц записи. Так, разность отношений. Нашли записи, которые у нас не повторяются для двух таблиц.
Ну, кажется, наверное, что здесь всё довольно просто и интуитивно с точки зрения развития теоретика множественных подходов.
Единственное, с чем здесь такая вот проблема в итоге может возникнуть. Сейчас, конечно, не возникнет. Здесь у нас всего два атрибута.
Но когда атрибутов много, вот эти вот операции проводить сложнее. Когда атрибуты у нас пересекаются, то есть отдельные атрибуты пересекаются, но в целом кортежи не дублируют друг друга.
Ну, если они не дублируют, то можно сказать, что они отличны друг от друга. А вот если они частично дублируют, тогда что?
Ну, мы уже сказали, они вроде отличны друг от друга. Но вот воспринимать это, что называется, на листочке бумаги становится гораздо сложнее.
Поэтому за счет столбцов, за счет наличия нескольких атрибутов здесь может быть некая такая непривычность и трудность.
Но, на самом деле, она, ну, не знаю, наверное, посетит вас только при работе над какими-то примерами релиционной алгебры, которые вы будете решать на первом, может быть, втором семинаре.
Применение нескольких операций тоже. Здесь просто последовательно, ну, как последовательно, в соответствии с правилами определения последовательности совершения математических операций мы вычисляем, что у нас должно быть в результате.
Две разности и потом соответственно объединение. Здесь не будем тоже останавливаться. Можете проверить потом на слайде, так или не так, но вроде бы до вас пока еще здесь ошибок никто не нашел.
Хорошо. Релиционные операции ограничения. Построение нового отношения, в которого входит картежа, удовлетворяющаясь заданному условию.
Опять же, обращаю ваше внимание, здесь у нас уже не теоретико-множественные, чисто теоретико-множественные операции, это уже такие операции специфичные для того, что мы с вами рассматриваем.
Определение приведено на слайде. В принципе, что здесь? Ну вот проблема, наверное, давайте слух проговорим, что допустимо только сравнение между собой значений составных атрибутов в рамках одного картежа.
Ну да, да, да, да, да. То есть мы в принципе, что мы здесь ограничиваем наш отношение некоторым набором атрибутов и мы можем буквально это сделать.
Здесь сложно, наверное, что-то добавить концептуальное. Вот математические выкладки, они опять же у вас на слайдах. Есть вот различного рода вариации ограничений, но по большому счету важно то, что нам это дает.
Нам это дает вот что. Мы можем сделать запрос, в котором мы поставим некое условие, ну в данном случае на количество баллов, полученных за какую-то академическую активность.
Вот и все, вот так работает ограничение. Много символов, много и красивые с первого взгляда математики, на практике довольно тривиальная, наверное, операция.
Проекция, ребята, тоже давайте мы, наверное, с математикой не будем здесь как-то особо заморачиваться, просто покажем уже, что есть по факту. По факту происходит вот что. Мы можем выбрать конкретный атрибут, то есть мы можем сделать результирующее отношение Q, сказав, что мы хотим взять из R только определенный атрибут.
Тогда по правилам революционной алгебры у нас останется, по правилам даже революционной модели у нас останется, останутся кортежи, которые не дублируют друг друга. Вот из всех, из множества вот этих записей, восьми слева, у нас осталось только четыре уникальные записи.
Проекция. И соединение. Собственно вот, мы здесь соединили по UID две таблицы и получили мы таблицу результирующую Q, в которой у нас получается, мы взяли, здесь уже работает Декартово как раз произведение.
Здесь мы взяли у каждой таблицы, у каждой записи в таблице R1, по UID мы взяли каждую запись в таблице R2 и присоединили недостающий атрибут к результирующему отношению таким образом, чтобы у нас для каждой итоговой записи он соответствовал атрибут.
Вот запись в атрибуте StudentNM соответствовала userID, UID, за счет которого у нас происходит соединение. Мы по сути дела поставили условия на соединение, чтобы у нас UID совпадало в каждой таблице. Вот получили такое результирующее отношение.
Деление здесь уже для общего виденья, потому что такая не очень распространенная, не то что с точки зрения практики, а с точки зрения формального описания операция.
Деление, хотим получить сериалы из отношения 1, которые транслировались по всем каналам из отношения 2. Берем, делим одно на другое и получается, что мы выбрали по сути дела только The Simpsons и The Griffins.
Не будем тоже на этом особо останавливаться. У вас, наверное, на семинарских занятиях будет подробнее, практически вы будете это делать подробнее, но в принципе, повторюсь, для какой-то специфики нашего курса, для каких-то принципиальных моментов нашего курса,
понимание специфик, специфики революционной алгебры, оно не играет принципиальной роли, потому что это, конечно, подлежащая теория, ее нужно знать для общего понимания, но на практике то, с чем вы будете работать, оно довольно далеко и довольно, довольно даже не то что, наоборот, приближено к человеческому пониманию и языку. Правда, английскому, к сожалению, не русскому.
Ну, ребята, это не за какую асимпточку выполняются все эти операции. Здесь это вопрос, знаете, он бессодержательный, применительный к математическим операциям, за какую асимпточку выполняется та или иная операция.
Если вы помните CLRS, то там начинается все не с того, сколько стоит конкретный алгоритм, там идет описание того, какая формальная модель будет использована в дальнейшем в книге, какая формальная модель, на которой работают вот эти отношения.
Мы с вами это не определяли, поэтому здесь нельзя говорить об асимптотике. Если вы хотите порассуждать о том, сколько конкретно займет та или иная операция, нам надо посмотреть реализацию этих операций внутри баз данных, посмотреть на конкретные алгоритмы и этим заниматься.
А так, если мы говорим, грубо говоря, вставка в таблицу это единичка времени, удаление из таблицы единичка времени и так далее, ну давайте мы просто посчитаем что-нибудь простое.
Так, ах, не в ту сторону, ну вот не знаю, вот 8 строк мы из них удалили, даже не так, вставка удаления изменения в каждой ячейке это единичка, мы из 24 ячейок удалили, сколько, 20 получается, правильно, да?
Время 20, какие там будут циклы вложены или не вложены. Ребята, алгоритмы построения и анализ.
У вас же алгоритмы и структуры данных курс был или идет, я надеюсь, там для этого всегда определяется какая-то некая модель формальная, в рамках которой происходит исполнение запросов.
Поэтому здесь, ну без, не могу вам ответить, вот так вот без контекста, контекста нет, поэтому это чистая математика.
Можете еще раз повторить про отделение, как получается из одной таблицы другая, то есть что мы выкидываем?
Так, мы выкидываем, так у нас с Rantv и 2х2, сериалы из первого отношения мы хотим получить, мы делим таким образом, да, мы берем, нам нужно чтобы у нас и Rantv и 2х2 оставалось условие, да, что у нас по двум каналам это должно крутиться, поэтому у нас DuckTales не проходит.
Мы берем только те сериалы, которые у нас по ChannelNM попадают, смотрите, курсор виден на экране, ребят?
Нет, не виден.
Так, ладно, хорошо, тогда без курса. Ну, обратите просто внимание, у нас должна быть вот пара, у нас не, в нашей, представьте себе, что у нас есть выделение ячейки, вот у нас выделение только будет не одной ячейки, а двух, вот по ChannelNM у нас будет выделение двух ячейок, Rantv и 2х2.
И мы должны вот этим вот двойным выделением пройтись по таблице R, и у нас туда попадут все те двойные, сдвоенные, грубо говоря, ну, вот на пальцах, сдвоенные строки, которые есть в таблице R.
Здесь сдвоенных строк Rantv и 2х2 только четыре получается, ну или две сдвоенных, это The Simpsons и Family Guy.
С DuckTales так не получается, у нас не находятся двух кортежей, которые бы соответствовали условию для ChannelNM, у нас он только один кортеж, DuckTales и 2х2.
Примерно так, что ли? Если вы хотите какой-то алгоритм деления, давайте так, если это будет прям сильно интересно, давайте я прям целый слайд посвящу на следующей лекции, а сейчас уже, наверное, уже 31 минуты.
Давайте на этом мы тогда будем заканчивать, к сожалению, довольно много еще информации мы не успели. Ну хорошо, смотрите. У вас когда следующая пара? 13.45?
13.55, у нас вообще пара без 15.
Хорошо. А, все, извините, да, прошу прощения, извините, ребят. Все, тогда замечательно, смотрите, по делению, давайте алгоритм мы отложим, не готов вам сейчас вот так вот на, как бы более просто объяснить, не могу.
Давайте мы двинемся дальше, к делению вернемся, как я сказал, следующую субботу. Смотрите, реляционные базы данных и реляционные СОБД. То есть мы спускаемся по нашей лестнике все ниже, ниже и ниже.
Мы начали с того, что такое базы данных, модели данных, просмотрели, кратенько пробежались по тому, что такое модель, какие модели данных есть и что такое реляционная модель, какие у нее специфические элементы и какие операции она предполагает, операции реляционной алгебры.
По ним тоже кратенько мы посмотрели, пробежались. Там, повторюсь, ничего сложного нет, сложность только в том, что у нас в отличие от просто таких вот до плоских множеств, что ли, которые состоят из дискретных элементов, у нас получается множество множеств.
И у нас условия идут по этим вот вложенным множествам и пробегаться приходится по ним, поэтому это немножко бывает контринтуитивно, если нет практики обращения с реляционными операциями.
Вот так вот. Смотрите, теперь спускаемся еще ниже, спускаемся на уровень уже конкретных, уже реляционных систем управления базами данных.
И как это в общем случае так? Да, Корман, Корман, да, путаю все время его, то Кроман, Корман, тоже меня извините, но CLRS в общем по-английски по-моему так по первым буквам, ну или алгоритм построения анализов.
Как-то сложно сказали, смотрите еще раз, ребят, по асимптотике нельзя определить асимптотику математических операций, не имея какой-то модели их исполнения.
Мы модель исполнения не рассматриваем, мы только математические операции рассматриваем. Если мы сформулируем с вами модель исполнения, среду выполнения, среду исполнения какую-то и скажем, что там такая-то операция столько-то стоит,
мы тогда сможем посчитать там B-CODE и так далее и тому подобное. Не построить какой-то формализованный алгоритм, мы даже алгоритма не видели, мы просто, ну так там были теоретикам множество, вернее мат-логика там была немножко,
предикативная, но тоже мат-логику мы не переведем даже по-моему напрямую. Ну да, нужно какие-то процедурные алгоритмы вписать обобщенно. Ладно, все, извините.
Ребят, я, вопрос DZ, можно будет за O экспоненциально от N, ну за O в Н в степени E? Не совсем тоже, понимаю вопрос, если у вас что-то в DZ есть связанное с определением
времени исполнения, ну не готов сейчас это обсуждать, может быть, на следующей лекции. Хорошо, либо я не понял вопроса, извините. Можно будет написать и к следующей, уже там куда-нибудь в чат, следующую лекцию попробуем обсудить.
Так вот, система управления базами данных, в частности, реляционными, но, в принципе, наверное, они плюс-минус такие же были бы и есть для нереляционных. Смотрите, общая схема какая? У нас есть разные уровни, отвечающие за разные элементы обработки.
Начнем, наверное, с самого низа. Это storage engine, который у нас отвечает за работу с физическим уровнем, за работу с памятью непосредственно.
Дальше идет уровень выполнения, уровень процессора запросов и транспортный уровень, ну это уже такой, знаете, транспортный уровень этой серии, как это все распределено по сети, какие есть интерфейсы для коммуникации.
А что здесь, наверное, можно отметить, что у нас уровень движка хранилища, он в Postgres неизменяемый. Например, в MySQL можно разные storage engines втыкать, грубо говоря, извините за сленг, в MySQL, и, ну, как бы немножко варьируется это все в зависимости от среды, в зависимости от того, как та или иная база, где она развернута и как функционирует.
Процессор запросов у нас он занимается партингом и оптимизацией, переводит все это во внутреннее представление, какой-то вот внутренний, внутренний исходный там, ну в оригинале там прям говорится source code, исходный код, но переводит какой-то внутреннее машины читания.
Ну, в общем, в общем, это выглядит вот так вот. Движок выполнения execution engine за неимение, за неимение, за неимение, за неимение, за неимение, за неимение, за неимение, за неимение, за неимение, за неимение.
Движок выполнения execution engine за неимением, да, такой калькируемый, калькированный перевод, он у нас отвечает за, собственно, отправление запросов куда-то по сети, за, там, следить за временем, следить за нагрузкой.
Ну, такие, да, промежуточные какие-то вещи между, выполняют между процессором запросов и движком хранилища. В принципе, наверное, мне кажется, из схемы плюс-минус должно быть понятно, что за что отвечает.
Ну, еще раз, транспортный уровень – это уровень сети и уровень отдельных клиентских машин, которые посылают запросы. Уровень процессора запросов – это парсинг и оптимизация.
Уровень исполнения – это распределение запросов по сети, по работающим каким-то или неработающим узлам, отслеживание выполнения. Уровень хранилища – это непосредственно самый низкоуровневый элемент, когда база работает с тем, с файлами на конкретных дисках.
Так, обобщенная схема обработки запроса. Выглядит она вот следующим образом. Мы посылаем запрос, запрос идет в парсер, проверяется синтаксис, проверяется семантика, то есть правильная расстановка точек с запятой, отступы, скобки.
Использование правильных семантических конструкций и проверка наличия в пуль запросов. Что это такое? Это оптимизационные механизмы, когда проверяется, есть ли аналогичный запрос уже в некоем пространстве исполнения, и можно ли просто его повторить, не проводя там шаг оптимизации.
Если нет, то идет оптимизация, генерируется несколько различных планов запроса, выбирается на основе некоторых внутренних данных, статистических баз данных, потому что база ваша следит за тем, что выполняется в ней, какие команды она совершает, за какое время это происходит, какая идет нагрузка на те или иные элементы.
Ну, понятно, сеть она вам отслеживать всю не будет, но, тем не менее, у нее определенный селфатеншн механизм, что называется, есть, и статистику свою она ведет, соответственно, она может генерировать тот или иной план, тот или иной способ выполнения одного и того же запроса в зависимости от того, в каком она сейчас состояние, насколько она нагружена.
Далее это все транслируется в низкоуровневое представление, происходит непосредственное выполнение работы с непосредственной информацией, хранящейся на диске, и вам возвращается результат.
Так, рейтинг релиционных СОБД по сайту, ой, 2023 год, прошу прощения, в лекции на слайде обновлю, но вот, по большому счету, состояние года назад рейтинг вот такой, но он вряд ли сильно поменялся.
Далее это все транслируется в низкоуровневое представление, происходит непосредственное выполнение работы с непосредственной информацией, хранящейся на диске, по большому счету, состояние года назад рейтинг релиционных СОБД по сайту, но вот, по большому счету, состояние года назад рейтинг
релиционной памяти, это буквально один файл на вашем диске и буквально один файл библиотечки. Для каких-то маленьких ПЭД-проектов или для мобильных приложений вообще очень приятная классная штука.
Повторюсь, мы будем использовать Postgres. В нашем курсе все рассматриваемые БД поддерживают основные функции, но есть некоторые различия. SQLite, как я уже сказал, это встраиваемая база данных, не использует клиент серверную модель, ну, понятно, что вы можете ее закинуть на сервер, как бы вы можете сделать свой сервер базы данных используя SQLite, вам никто не запрещает.
Изначально из коробки у нее нет отдельного процесса, который у вас работает фоном, и другие процессы клиента обращаются к этому серверному процессу на одной или этой машине, на разных, такого нет. Это просто файл, который выполняется в вашей программе непосредственно, практически.
Ну, так вот, не вдаваясь в детали, такое очень грубое описание файла, выполняющееся в вашей программе, извините, сразу оговорюсь, что это просто в таких педагогических целях упрощения, ограбления.
Вся база хранится в одном файле, БД полностью блокируется при записи, но может поддерживать конкурентное чтение. MySQL поддерживает разные storage-engine, storage-engine показывает лучшие результаты в операциях чтения файлов,
но не так хорошо в конкурентных запросах, как Postgres.
Ну, также более сложная репликация, меньше устойчивость к конкурентным операциям, наименее соответствует стандарту SQL.
Ну и Postgres, наша стандартная база, с которой, повторюсь, вы будете работать, совмещает в себе достоинство предыдущих двух до некоторой степени.
Ну вот, была выбрана именно она, поскольку все-таки сейчас Postgres это является таким, ну, де-факто, что ли, современным, по крайней мере, стандартом MySQL, хоть она и была на втором месте в предыдущем графике,
но вот как-то на практике кажется, что отходит она все-таки подальше в каких-то реальных и новых проектах.
Конкурентные, одновременные запросы, то есть просто выполняемые, как сразу, многопоточность, многозадачность, ребята, конкурентное выполнение, вы как там, на какой стадии изучения всех этих прибудных вещей.
Конкурентные запросы, то есть запросы, одновременные запросы, ну или запросы с небольшим интервалом времени, к одному ресурсу, например, или просто запросы одновременные, к разным ресурсам, но выполняемые одной средой, в данном случае, одним программом обеспечения, в данном случае, системы управления базой данных.
В этом смысле они конкурентные. То есть конкурентные запросы, это когда нужно одновременно либо что-то прочитать, либо что-то записать, либо что-то удалить.
Соответственно встает вопрос, что делать, в чем проблема сама по себе. Встает вопрос, как здесь быть, если один пользователь говорит базе, что перепиши мне эту строку, а другой пользователь в этот же самый момент говорит базе, выдай мне эту строку.
Вот пользователю выдать старую версию или новую версию, и пользователь, который хочет что-то записать, его заставить подождать, или наоборот его пропустить вперед.
И вот здесь разные способы решения бывают. Ну буквально разные, там разные алгоритмы, есть разные подходы к ограничению операции чтения записи, разные уровни блокировки.
СQL, собственно. Тоже немного истории. В общем виде разработан в 1973-1974 годах. Звонок был. Все, ребята, я вас понял. Давайте тогда просто два слова об SQL.
Немного мы, к сожалению, не дошли до конца. Ну как немного, прилично. Ладно. Что интересно, он был разработан вот с намерением, видите, выжарено на шрифте, на слайде написано, что инженеры-разработчики хотели сделать настолько простой язык, насколько это было бы возможно, чтобы обычный человек просто как бы пришел, сел и начал бы направлять запросы к базе данных.
И у них объем статьи, в которой они из SQL предложили, было всего 16 страниц. Там буквально несколько страниц было на формальное описание синтаксиса. Вот всего две страницы, как указано. Сегодня же стандарт SQL занимает несколько тысяч страниц.
