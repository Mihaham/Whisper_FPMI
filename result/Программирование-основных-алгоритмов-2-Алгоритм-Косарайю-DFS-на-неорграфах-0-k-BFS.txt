Так, кей, поехали. У нас времени очень мало. Поехали сегодня без каких-то особых вступлений, лекция вторая.
Так, что мы успели на прошлой лекции? Мы обсудили с вами DFS, время входа-выхода и цвета вершин,
лему о белых путях, обсудили, что такое табологическая сортировка, как ее искать,
и доказали утверждение следующего вида, что пусть C и C штрих – это вершины
DAC. DAC у всех же семинар был, поэтому вы должны знать эту аббревиатуру directed cyclic graph,
и есть ребро CC штрих. Тогда таут от чего от C, видимо, будет больше, чем таут от C штрих.
Вот это мы с вами доказывали в рамках того, что мы доказывали, когда строили топсорт, мы доказывали,
что в циклическом графе, если есть ребро, то сначала мы выйдем из истока ребра, потом из конца ребра.
Наоборот, сначала выйдем отсюда, потом отсюда, потому что есть время выхода больше.
И еще мы с вами доказали следующее утверждение в конце. Мы доказывали растягивать время как могли.
Граф конденсации отцикличен. Конденсации по отношению сильной связности отцикличен.
Нам нужны будут эти два утверждения, чтобы доказать алгоритм поиска компонент
сильной связанности. Напомню, две отцикли сильно связаны, если есть путь из У в В и из В в У.
Вот это для ориентированных графов, соответственно, их можно выделять компоненты, потому что это отношение
к эквивалентности с точностью до выполнения рефлексивности. Но мы их считали по умолчанию выполненными.
Окей, алгоритм Косараю. Давайте вот так транскрибируем. И в скобочках поиск КСС, поиск компонент
сильной связанности. Шаг 1 будет простой. Практически ищем топ-сорт. Найдем времена выхода всех вершин.
Ну и давайте для простоты рассуждения буду считать, что граф это одна большая компонента
слабой связанности. То есть если я уберу ориентацию у всех ребер, то у меня граф станет связанным,
точнее станет просто связанным. Это будет просто полезно для упрощения рассуждения, однако на коде
это будет меняться то, что просто будет вызываться еще от одной компоненты. Найдем времена выхода
всех вершин. Упорядочим вершины. Сейчас скажу в кое порядке каком. Давайте в порядке убывания,
если что, я поправлю. Но если не сойдется где-то здесь, то там убывание надо будет заменить на
возрастание. Шаг 2. Смотрите, здесь мы по сути это был топ-сорт, мы так и сказали. Но прием в том,
что у нас граф содержит циклы, поэтому это формально топ-сортом называть нельзя, хотя по факту мы
вернули тот же порядок вершин. Шаг 2. Транспонируем граф. Что значит транспонируем граф? Это значит,
что если у нас было ребро УВ, мы его удаляем и проводим в ребро ВУ. То есть меняем ориентацию
всех ребер. Ориентация всех ребер. Почему транспонируем? Потому что если мы рассмотрим
матрицу смежности обычного графа, то поменять ориентацию всех ребер то же самое, что транспонировать
эту матрицу. Вот такое вот наблюдение. И шаг 3. На транспонированном графе
запускаем ДФС из вершин в порядке убывания ТАУТ. Вот такой способственный алгоритм. Утверждается,
что каждый запуск ДФС вам выдаст новый компонент усиленной связанности. Более того, в итоге они
будут в порядке топологической сортировки. То есть вы сразу сортируете конденсацию. Это то,
что нужно сделать в контесте. Вау. Вот. Но некоторые уже сделали. Некоторые молодцы.
Так, давайте доказывать корректность. Что нам нужно доказать? По сути нам нужно доказать,
что на третьем шаге мы каждый раз что делаем. Но по чьим компонент усиленной связанности только ее.
Давайте утверждение. Алгоритм корректен. То есть надо доказать, что на третьем шаге запуск КСС
ДФС посещает КСС только ее. Ну, третий шаг. Здесь мы ничего, по сути, не делали. Вот именно
этот третий шаг. Ну, давайте посмотрим на наш граф. Что у нас было изначально? У нас
была какая-то КСС и из нее было ребро в С'. Да? Это все КСС две большие. Будем считать,
что мы типа построили конденсацию как-то для наглядности. Так, ребро из С в С'. Что мы сделали,
когда мы транспонировали граф? У нас получилось наоборот. Ребро из С' в С. А достижимость внутри
компонента усиленной связанности не поменялась. Достижимость после два внутри КСС не изменилась.
То есть при транспонировании графа у вас сами компоненты усиленной связанности не меняются
никак. Ну, это вроде тривиальное утверждение. Вот. Что теперь заметим? Что у нас, по сути,
здесь делается? Мы запускаем в порядке убывания таут. Это значит, что мы берем и первую вершинку
берем у которой наибольший таут. Что значит, что у нее наибольший таут? Давайте посмотрим на это
утверждение. Это значит, что, раз у нее наибольший таут, что? Да, это исток будет. То есть раньше
в этом графе не существовало ребер в С. Таких ребер нет. Ну согласны, да? Так как С имеет
максимальный. Могли, да. А в него? Нет, еще раз смотрите. Нет, это конденсация имеется в
виду. То есть это отдельные КССки. Конечно так не может. Ну понятно, да. Так как С имеет максимальный
таут, давайте отмечу, что КСС. Давайте не так напишем. Давайте так скажем. Пусть В имеет
максимальный таут, да, и В принадлежит С. С- это КСС у нас будет. Вот так вот. Это была какая-то
вершинка В. То есть у нас не было ребер в С. Тогда нет ребер в С в исходном графе.
Откуда вас следует, что нет ребер из С в транспонированном графе. То есть теперь мы из С не можем
выйти никуда. У нас нет исходящих ребер. У нас только вот все сюда ведет. Ну не все здесь может куда-то еще
вести, но суть в том, что у нас нет ребер выходящих из С теперь. А из этого следует, что ДФС посетит
при запуске из вершинки в С только С. Он больше выйти никуда не может. Тогда ДФС от В посещает только С.
Ну конец. Представляешь, что каждый шаг помещает целую компоненту сильно связанности только ее.
Почему он посещает ее? Потому что здесь достижимость не меняется никак внутри. Почему только ее? Потому что
он выйти никуда не может этот ДФС. У нас нет исходящих ребер из компонента. Ну и поэтому дело,
что вы будете их получать в порядке того, что у вас здесь будет меньший номер, здесь будут какие-то
большие номера, здесь еще большие. Чтобы получить топ сорта, вам нужно будет реверснуть порядок.
Ну порядок к СС, к самих. Все. Вопросы.
Вот это вот утверждение, что если у нас в С максимальный тал, из этого следует, что в него не идет ребер, мы доказываем через вот эту лену?
Ну да. Ну доказывается, что там один логический шаг. Вот вы берете максимальный т-аут. Хорошо,
давайте предположим, что из нее есть ребро. Ну все, тогда применяем лему.
А там есть какие вершины? Конденсация.
Хорошо, т-аут от конденсации определяется как максимальный т-аут из всех вершин.
Какая разница? У вас в графе конденсации это не меняется? Хорошо.
Ну значит, что что-то делаете не так. Хорошо. Ну, потому что, хорошо, окей, давайте так.
Определение. Пусть С под множество В. Тогда т-аут от С, давайте так скобкой даже возьмем, равно максимум по В из С т-аут от В.
Почему это так? Имеется в виду, что это время выхода из целого под множества вершин. Ну что значит,
что вы вышли из под множества вершин? Знаете, чтобы все их уже посетили. Вроде как максимально натуральное
поделение. И там доказательства абсолютно аналогичны этому будет. То есть там с точностью до замены
одного, ну ладно, двух строчек, двух слов, хорошо, вот так вот. Аналогично, давайте влежь совсем педантов.
Тогда т-и на С это минимальное время. То есть время входа в компоненты, это когда вы только-только вошли, а время,
когда вы вышли, ну это максимальное время, когда вы вышли, вот. За сколько времени, за сколько времени все это
работает, давайте подумаем. Ну это за линию от размеров графа, поэтому мы с вами делали уже неделю назад.
Это в зависимости того, как вы граф храните. Либо это будет В квадрат из-за матрицы смежности,
потому что нужно всю матрицу транспонировать. Либо же это будет В плюс Е, если это просто список
смежности. Берете просто и перелопачиваете его с ног на голову, строите новый. Вот это вот, ну это просто
запустить DFS, опять же используя все эти юзды и так далее, то есть снова за линию работает. Откуда
суммарное время линейное? То есть мы умеем выделять компоненты сильно связанности за линейное время от размеров графа.
Хорошо, тогда давайте. Все, с ориентированным графом закончили пока что.
DFS на неориентированных графах.
Определение.
Ребро называется древесным,
если DFS вдоль него идет в белую вершину.
Обратное ребро называется обратным,
если DFS вдоль него идет в серую вершину. Тривиальное наблюдение, что ребер в черной
вершины быть не может на неориентированном графе. Почему ребер в неориентированном графе не может быть
черной вершины? Мы из нее вышли, а эту вершину уже должны были посетить тогда по лемме белых
путях, потому что она была достижима в момент времени входа в ту вершину по белому пути. В
ориентированных же графах бывают ребра в черные вершины, и там есть еще два типа ребер, это прямые
и перекрестные, но пока что они нам не нужны и в целом в курсе не понадобится, поэтому мы будем
только вот эти два определять. Почему ребра древесные называются? Давайте приведем пример.
Ну и запустим DFS с единицы. Я буду рисовать дерево обхода DFS, так называемое. Сняв корень,
это единичка, потому что я с нее начинаю. Дальше я иду в двойку. Допустим у меня DFS в двойку пришел,
это двойка. Дальше, допустим, у меня DFS идет в тройку. Из тройки у меня есть ребро в единичку,
но оно уже серо к этому моменту, поэтому это ребро обратное, мы будем рисовать пунктиром.
Дальше. Ну все, из тройки ребра закончились, поднимаемся вверх в двойку, в постаку рекурсия.
Дальше из двойки есть пятерку ребро. Из пятерки в четверку. Вот такую вот конструкцию мы будем
называть деревом обхода DFS. То есть она состоит из древесных ребер, причем они ориентированы
в ходе того, как шел DFS. И обратные ребра это не древесные ребра, назовем это так. Да,
есть определение, как у вас DFS устроен, но зачем нам это надо? Нам нужно это не для того,
чтобы строить деревья обхода DFS внезапно, мы просто будем пользоваться этой штукой как наглядным
инструментом. Для того, чтобы решать, ну, чтобы искать два следующих таких компонента, что ли, графов.
Определение. Две вершины ребер на двух связаны. У и В ребер на
двух связаны. Если существует два ребер до не пересекающихся пути,
пути из У в В. Ну, пример очень простой. Здесь, на этом графе давайте посмотрим. 1 и 2 ребер на
двух связаны. Почему? Потому что есть 1 и 2, а есть 1 и 3 и 2. Два пути ребер не пересекаются,
у них все ребра различные на пути. У вас есть ребро 2 и 5, который обязательно лежит на любом пути.
Собственно, мы будем называть такое ребро мостом. Вот. Сейчас. Что я хочу? А, ну я хочу
сказать, что это по отношению эквивалентности. С точностью, как отношение сильно связанности было
эквивалентностью. То есть транзитивность здесь вроде тривиальна, симметричность очевидна,
рефлексивность не выполняется, но она и не нужна. Ну, давайте мы не будем вдаваться в крайность и
просто уверуем в это. Мы еще пока что ничего не называем мостом. Это так, спойлер был. То,
что мы назовем мостом появится на доске. Окей, так, это мы сформулировали. Отвержение
это отношение эквивалентности. Из этого съедут, что можно выдать классы эквивалентности, которые
называются компоненты рёберной двусвязности. Компонента рёберной двусвязности
это класс эквивалентности. По отношению рёберной, давайте рёберной двусвязности, напишем это еще раз.
Окей. Ну, в частности, давайте здесь их нарисуем. Это раз, это два и три. Как вы можете догадаться,
если удалю любой ребро внутри одной компоненты рёберной двусвязности, у меня граф не развалится.
Однако, если удалю между, то он развалится. Поэтому определение, перестань быть связанным,
увеличится числом компонент связанности. Определение, ребро Е это мост, если при его
удалении число компонент связанности увеличится. Связанность увеличится.
Утверждение, которое я не буду доказывать, потому что это тривиальное утверждение,
ребро Е, мост тогда и только тогда, когда Е соединяет две компоненты рёберной двусвязности.
Ну, есть более сильная или более слабая формулировка. Короче, другая формулировка,
что ребро Е мост тогда и только тогда, когда не существует цикла его содержащего.
Суммарно, можно построить порядка восьми эквивалентных определений моста.
Вот. Так что когда-нибудь вас попросят доказать эквивалентность. Возможно.
Вот одно из них это то, что ребро Е мост тогда и только тогда, когда оно не лежит мне на одном цикле.
Вот. Окей. На цикле просто. Можно реберно просто взять цикл, например. Не очень принципиально, вроде как здесь.
Окей, так. Что нам нужно? Нам нужно научиться искать мосты. Зачем они нужны?
Ну, как вы сами видите, если у нас есть мосты, значит мы умеем выделять компоненты рёберной двусвязности.
Почему? Мы взяли, удалили мосты, нашли компоненты связности, это и будут компоненты рёберной двусвязности.
Чем еще мосты хороши? Ну, тем, что они определяют слабые места в вашей какой-то сети.
Поэтому искать мосты достаточно классная штука. Давайте научимся искать.
Определение. Ведем такую функцию red от V.
Red будет равна минимуму из T in от V и T in от U, где U такой предок V.
Что существует W из-под дерева обхода DFS и ребро W у обратное.
Ну, да, имеется только W из-под дерева.
Да, да, да. Ну, минимум на все, вообще минимум навешивает.
Туда можно минимум еще написать.
Что это такое? Это что-то очень страшное.
Давайте на картинке.
Вот, допустим, у вас есть ваш корень, вашего дерева обхода DFS,
и вы как-то добрались до вершинки V.
И где-то есть там на пути предок U.
Вот ваше под дерево.
Тогда если у вас здесь есть какой-то путь до вершинки W,
такое, что есть обратное ребро в вершинку U,
то red от V это T in от U.
Зачем нам это нужно?
Нам это нужно, на самом деле, по очень простой причине,
что мы хотим понять, можно ли из вершинки, из ее под дерева,
выпрыгнуть выше, чем она лежит.
Если да, то значит, у нас есть цикл, у его содержащий.
Но если у нас есть цикл, у его содержащий, значит, это не мосты, короче, все.
Конечно, у нас ориентированности здесь нет нигде.
У нас там написано, что DFS на неорграфах.
Потому что понятие моста для ориентированных графов немножко не имеет смысла.
Окей.
Как это будем делать?
Нам нужно первые две вещи доказать.
Первое, как читать red, и что это может делать за линейное время суммарно.
Второе, это доказать критерии того, что ребро мост.
Мы это окажем критерией сначала.
Теорема.
Критерии моста.
В нем два утверждения, первое даже записывать не буду, но тригиальное.
Обратное ребро мостом быть не может.
Почему это так?
Потому что если у вас обратное ребро – это мост, значит, у вас есть цикл.
Значит, этот мост лежит на ком-то цикле.
Значит, при его удалении у вас все связаны, все еще сохранится через кусок цикла второй.
Поэтому я сразу напишу так. Древесное ребро.
Ребро.
ВТ.
Мост.
Тогда и только тогда.
И сейчас будет что-то очень неприятное, потому что я не помню неравенство.
Сейчас, я попробую вспомнить.
Тин от Т.
Равен.
Тап от Т.
Вроде бы так.
Тин равен Тапу.
Ой, ой, ой, ой.
Ну давайте Тап.
Рец, да.
Ну, потому что просто в разных местах по-разному обозначают.
Давайте рец обозначаем.
Ну раз мы уже начали рец, то рец.
Так.
Да.
Ну, можно сказать, что он меньше либо равен.
Неравенство строго меньше не выполняется никогда.
Потому что у вас рец – это минимум из этой штуки и чего-то там.
Поэтому именно равенство.
Давайте доказывать.
Давайте докажем в одну сторону.
В прямую сторону.
Если в этом мост.
Что значит в этом мост?
Сейчас.
Может в противном правом доказать.
То есть, если это неверно.
То есть у нас как бы.
Давайте от противного докажем.
Будто бы.
От противного.
Вроде так будет нормально.
То есть Ти на Т.
Строго больше, чем рец.
От Т.
Да.
Внуш строго меньше, он быть не может.
Опять же, мы это уже сказали.
Если рец строго меньше.
То следует, что существует у в поддереве.
Не, у такой предок.
Что тра-та-та.
Короче говоря.
То есть у нас выполняется этот случай.
То есть у нас есть такой предок.
То есть у нас есть такой предок.
То есть у нас есть такой предок.
То есть у нас выполняется этот случай.
Потому что у нас здесь рец от В.
Он строго меньше, чем Ти на Т.
Значит он где-то здесь должен быть.
На предке.
То есть у нас реализуется вот этот случай.
Значит существует такая.
У, это такой предок, что...
Вот.
А раз существует такой предок.
Из этого следует, что у нас есть цикл.
Цикл.
У.
В.
Дубль В.
У.
Но для этого следует, что у В не мост.
Просто на...
Ой.
Ну сейчас.
В наших терминах есть такой случай, что это В, а это Т.
Да.
Сейчас.
Сейчас.
У это из определения был.
У нас здесь ВТ, у нас здесь нет У.
Вот.
Вот так вот, да.
Существует В.
В нашем случае это В будет.
Не-не-не, вру.
Вру-вру.
Существует У, это предок.
Потому что у нас есть...
Давайте здесь нарисую.
У нас есть ребро ВТ.
А есть здесь какой-то У, который там где-то лежит на пути.
Это никто не мешает вам.
Тогда у вас есть цикл.
Давайте его пишем нормально.
Какой он получится в итоге.
Так, начинаем в Т.
Идем в Дубль В.
Приходим в У.
Идем в В.
И приходим в Т.
Во, все.
Вот такой цикл получился.
Ну, можно я не буду доказывать, что если ребро лежит на цикле, то на мостом быть не может.
ВТ.
Не.
Мост.
Так, в одну сторону доказали, надо в другую теперь.
В обратную сторону.
То есть если я тарарист, то это мост.
Здесь вроде совсем тривиально.
Ой, а Т.
Т равно рета Т.
Из этого следует, что мы не можем выпрыгнуть выше чем В.
Выше чем Т.
Не.
Можем.
Выпрыгнуть.
Выше.
Выше.
Выше.
Т.
То есть какая у нас ситуация получается?
У нас есть наш корень.
Мы как-то дошли до нашей вершинки В.
Есть вершинка Т.
И у ее по дереву не существует пути выбраться выше чем Т.
Откуда вас следует?
При удалении.
ВТ.
Под дерево Т.
Теряет связь с руд.
То есть у вас вот эта вот штука изолирована.
У нее нет других ребер.
Снаружу.
А раз у вас есть ребро, вот это вот.
И оно единственное, что связывает вас с корнем.
Если вы перерубаете все, у вас изолированная компонента получается.
Откуда вас следует, что ВТ это мост?
Все.
Отказали.
Так, Кей, ну допустим, что если мы научимся считать ред, то мы победили.
Мы умеем искать мосты.
Ой, ну, что сказать?
Я вам сочувствую, потому что мы идем дальше.
Пока что ред мы не будем считать.
Определение.
Вершина В.
Точка сочленения.
Ой, первый раз пишу.
Не пишу полностью.
Точка сочленения.
Если при ее удалении
и число компонент-связанности увеличится,
забавное утверждение стоит в том, что
наличие мостов не гарантирует наличие точек сочинения.
Более того, неверное и обратное.
Можете придумать контрпример на каждый случай.
Упражнение на секунд 30.
Наличие моста не гарантирует наличие точек сочинения.
Верное и обратное.
То есть, что наличие точек сочинения не гарантирует наличие моста.
Так, поехали дальше.
Это определение.
Что можно сказать дальше?
Можно было бы выделить, конечно, компоненты вершины доусвязанности.
Давайте скажем так, две вершины называются вершинно доусвязанными.
Если между ними существует вершина не пересекающейся пути.
Вот внезапно это уже не очень приятно доказывать, что там есть какие-то компоненты.
Поэтому давайте мы этим заниматься не будем.
И забьем на существование такой вещи.
Просто скажем, что существуют вершины доусвязанности и типа все.
Потому что нам это не очень надо, нам нужно учиться искать точки сочинения.
Теорема следующая.
Первый случай.
Пусть В.
Корень дерева ДФС.
Тогда.
В. Корень.
Господи, В. Точка сочинения.
Тогда и только тогда, когда у В хотя бы два ребенка в дереве.
Это первое.
Второе.
Пусть В.
Корень дерева ДФС.
В.
Корень дерева ДФС.
В.
Пусть В.
Не корень.
Тогда.
В.
Точка сочинения.
Тогда и только тогда еще надо вспомнить снова неравенство такое прикольное.
Рет от В.
Равнутый от В. Вроде так. Вроде бы так.
Первый случай простой достаточно.
В. Корень.
Давайте доказывать в какую сторону.
Давайте в эту сторону доказывать.
От противного.
Что если у вершины один ребенок, то она не точка сочинения.
У В один ребенок.
То есть у вас как выглядит?
Это В.
Не знаю. Ребенок Т.
И это все под дерево.
ДФС больше и ничего нет.
Откуда следует что?
Что?
Нет.
Вот это одно утверждение.
Это второе утверждение.
Если рассмотреть два случая.
В это корень и В не корень.
И у вас для каждого случая свой критерий.
У В один ребенок.
Тогда.
Удаление В.
Равносильное удаление ребру ВТ.
Ну не так точнее.
Удаление В.
Меняет число компонент связности.
Компонент связности.
Из этого следует что В не точка сочинения.
В обратную сторону.
То есть если у В хотя бы два ребенка в дереве.
Тогда В точка сочинения.
Ну это вроде бы тоже тривиально.
Давайте рассмотрим вершинку В.
И два каких-то ее ребенка.
Т1 и Т2.
Ну если у нее нет детей.
То это унылая ситуация.
Ну типа компонента связности из одной вершины.
Ну типа ОК да.
Ну вот.
Ну типа ОК да.
Вырожденные случаи выйти в контесте рассматривать.
И здесь.
Ну это вроде да.
Тривиально.
Ну то есть третий случай что.
Если В это единственная вершина в компоненте.
То она является точкой сочинения.
Действительно.
Вы ее удаляете.
У вас число компонент связности.
Не увеличивается.
Не увеличивается.
Да.
Если у вас было типа.
Две вершинки.
Два изолированных вершины.
Вы взяли удалили вершину.
У вас было две компоненты.
Стало одна.
То есть уменьшилось вообще.
Прикольно.
Нет почему.
Тогда это просто не точка сочинения.
Подгоняем под определение.
Окей.
В обратную сторону.
Рассмотрим двух детей.
Вот я утверждаю, что они изолированы друг от друга.
Пусть.
Дети В.
Т1 и Т2.
Дети В.
Т1 и Т2.
Соответствующие.
Т и Итому под деревья.
Если бы существовало ребро из Т1 в Т2.
Да.
То существовала бы какая-нибудь вершинка У здесь.
То есть ребро сюда какое-то.
Тогда автоматически вы должны были бы отцепить этот кусок.
Но это вроде тривиально почему.
Потому что ДФС так работает.
То есть как вы смотрите.
Что вы сделали.
По сути у вас здесь есть цикл.
На самом-то деле.
Здесь у вас существует ребро какое-то.
Значит вы нашли цикл.
Значит удаление В.
Ничего не меняет.
Но у вас-то вы доказываете, что вы доказываете.
Что если хотя бы два ребенка.
Точка сочинения.
Сейчас.
Ну окей хорошо.
Давайте допустим, что существует ребро АВ.
Да.
Пусть АВ.
АВ.
Это ребро.
Между Т1 и Т2.
Это А, это В.
Ну тогда.
И допустим, что 3 над А меньше чем 3 над В.
Ну или 3 над Т1 меньше чем 3 над Т2.
Да.
И скажем, что 3 над Т1.
Меньше чем 3 над Т2.
Что это значит, что 3 над Т1 меньше чем 3 над Т2.
Ну это значит, что 3 над Т2 находился полностью под деревья просто-напросто.
Потому что она достижима из Т1.
Но мы предполагаем, что Т2 находится в другом под деревья.
Значит просто у вас здесь как бы ребер быть не может.
Между под деревьями.
Между под деревьями.
Конечно, да, да.
Давайте попробуем прийти к противоречию еще раз.
Что мы хотим?
Что у нас есть два ребенка в дереве, значит мы точка сочинения.
Сейчас.
Если у нас есть два ребенка, значит мы точка сочинения.
Ну то есть хорошо.
У нас есть два ребенка, и попробуем сказать, что это не точка сочинения.
Что это не точка сочинения.
Сейчас.
Короче, я хочу доказать, что существует лишь единственный путь из Т1 в Т2.
Вот так скажем.
Единственная вершина непересекающейся путь.
То есть что из Т1 в Т2 можно только через В добраться.
Вот что я хочу доказать.
Давайте так сформулируем уже на следующей, видимо, доске.
Хочу доказать, что из Т1 в Т2 все пути через В.
Даже там обратные ребра включаем, да.
Если что, товарищ Георгий.
Нет, они есть, у вас есть обратные ребра.
Нет, мы рассматриваем обратные ребра.
Да, все-таки рассматриваем.
Это я че-то лажу сказал.
Я хочу доказать, что у меня все из пути из Т1 в Т2 идут через вершину В.
Но предположу противное, что найдется путь не через вершину В.
У меня ваша вершинка В.
Вот у меня здесь Т1.
Это Т2.
Соответственно под деревья.
Соответственно под деревья.
Из этого следует, что есть путь Т1, А, В, Т2.
То есть, есть какое-то ребро АВ между двумя под деревьями.
Вот как-то такая конструкция.
Но тогда я хочу доказать, что без ограничения общности
ТИ над Т1 меньше, чем ТИ над Т2.
В полеме о белых путях
Т2 лежит в Т1.
Почему?
Потому что к моменту, когда вы вошли в Т1, у вас все вершины были белыми.
Но все вершины, достижимые из Т1, были белыми.
Когда вы вошли в Т1 и покрасили их серой.
По белым путям.
Ну, не очень важно.
Когда вы зашли в Т1, у вас все вершины должны быть белыми.
А к тому моменту, когда вы выйдете из Т1, покрасите их черной.
У вас Т2 уже станет черной.
То есть, что у вас получится?
Вы сначала зашли в Т1, потом в Т2, потом вышли из Т2, потом вышли из Т1.
То есть, у вас Т2 в поддереве Т1 должна находиться.
Потому что надо достижимые из Т1.
И мы в Т1 пришли раньше.
Но это же неправда.
У нас Т1 и Т2 это разные поддеревья.
Противоречие.
Но 2 и Т1 пересечатся 2.
Это пустое множество, потому что они не пересекаются.
Все, вот и противоречия пришли.
Так, окей, доказали.
В простой случае доказали, остался сложный.
Рассмотрим ребро ВТ.
И В это точка сочинения тогда и только тогда, когда
Та под Т равно ТИ над В.
Больше либо равно, да.
Рето Т больше либо равно.
Такое вот предлагается.
Давайте это докажем.
Хорошо.
В какую сторону?
Какое-то ребро В, какое-то ребро Т.
Но будто бы в прямую сторону, наверное, проще доказать, да.
В какой-то случае есть ребро на те рут.
Как-то дошли до В.
И есть ребро в Т.
И что нам говорят?
Нам говорят, что рет от Т больше либо равен ТИ над В.
Может ли быть рет от Т строго меньше, чем ТИ над В?
Давайте подумаем.
Да, нет, не так.
Рет от Т значит, что мы смогли выпрыгнуть выше, чем В.
Все окей, это может быть.
Давайте так, что бы хотим.
Мы хотим сказать, что если это точка сочинения,
тогда у нас выполнен этот неравенец.
Хорошо.
Давайте посмотрим, что можно здесь делать.
В, точка сочинения.
Из этого следует, что при удалении
число компонент связанности
увеличивается.
В, точка сочинения.
Увеличивается.
Откуда вас следует,
то,
сейчас,
что из Т нельзя выпрыгнуть выше, чем из В.
Из Т,
из под дерева Т,
нельзя прыгнуть выше,
нельзя прыгнуть выше,
нельзя
прыгнуть выше В.
Почему это так?
Потому что,
если мы могли, то это была бы не точка сочинения.
А что значит, что мы не можем прыгнуть выше В?
Из этого следует, что рет
от Т
он больше либо равен, чем 3 на Т, да.
Сейчас, рет от Т больше, чем 3 на Т строго?
Почему? Может быть.
Рет от Т равен 3 на Т.
Может быть.
Вроде бы, в эту сторону очевидно, как доказывать.
Да? Вроде все приходы максимально наивные.
В обратную сторону доказывать теперь.
Ой, так, ладно.
Что мы хотим доказать, что из неравенства?
Сейчас, мы хотим доказать, что
рет от Т,
да,
больше либо равен 3 на Т.
Из этого следует, что В – точка сочинения.
В смысле?
У вас ребро ВТ существует уже в утверждении?
Да.
ВТ древесное.
В Т – точка сочинения.
В Т – точка сочинения.
Да.
То есть, вы рассматриваете произвольное древесное ребро ВТ.
Тогда, если для любой вершины Т такое, что ВТ это древесное,
верно вот это вот,
короче, здесь можно там
правой части написать клантер для любого Т,
ребёнка, древесного,
древесного ребру В.
Ну, окей.
что хочется сделать? Ну окей, что это значит? То есть у нас есть вершина root, есть какой-то
путь до v, есть ребро до t. Мы утверждаем, что ред от t больше ребра равен, чем t над v. Думаю,
окей, давайте пробуем от противного что-ли? Потому что мне как-то страшно здесь в обратном
сторонке стрелки. Противного, то есть я хочу доказать, что v не точка сочинения, из этого следует,
что ред от t меньше, чем t над v. Ну хорошо, что значит, что v не точка сочинения? Из этого следует,
что для любого ребёнка v я всегда из него смогу выпрыгнуть вверх, согласны? То есть,
если я рассмотрю ее детей t1, t2, tk, t, ее под деревья,
тогда я из любого смогу найти нужный мне путь наверх какой-то.
Что-то такое хочу, да? Нет, если из одного, то у меня эти отделятся,
поэтому из всех я хочу. Хорошо, v не точка сочинения, из этого следует, что для любого
t1 такое, что v, t1 – древесное ребро. Господи, не редро, а ребро. Существует
w it, лежащее в t it, где t it – соответствующая под деревья. Такие, что существуют w it предки
v, такие, что ребро w it – это обратное ребро. То есть, это у вас w1, w2. Это у вас будет u1, это u2.
Хорошо. Почему это так? Потому что если это не упомянув, значит у меня есть такой-то
ребенок, который изолирован будет при удалении v. Мы предлагаем, что это неверно.
Хорошо. Если это верно, сейчас вот так вот. Из этого следует, что если у нас есть обратные
ребра, значит r e t, для любой вершины t, r e t меньше, чем t in от v. Для любой t такое,
что это древесное ребро. Я здесь уже не буду подписывать. Доказали? Ну, конец вроде как, да?
Ну, короче, мы переливали из пустого в порожни и получили критерий.
Окей, что нам осталось? Нам осталось научиться читать рет. Мы все еще умеем делать. Если мы
научимся читать рет, то все, мы научились сказать масты про чечнение. Ну, давайте что сделаем?
Давайте напишем алгоритм подсчета рет. Шикарно. Так, как читать реты? Давайте void dfs от int v,
int p равно минус 1. p это предок, parent или ancestor. Окей. Здесь мы пишем, что если used от v,
теперь return. Теперь дальше v не посещена. Говорим, что t in от v равно time++, то есть это текущее
время, это время входа, и увеличим его на единику сразу. Что мы дальше делаем? Теперь нужно
посчитать реты. Мы говорим сразу, что рет от v равно t in от v. Дальше мы делаем for у сосед v,
у него есть u, уиты здесь. Очевидно, что p тоже входит в соседей, поэтому если у равно родителю,
у сосед v. Если у это родитель, то скипаем. Хорошо, теперь у это наш ребенок. Будто
мы делаем dfs от u. И теперь давайте поймем, что у нас на самом деле здесь есть. Я утверждаю,
что вернем вроде как следующая формула от v. Рет у. Давайте вдумаем, правда ли это? Что значит,
что у меня есть рет от u? Это значит, что у меня есть какая-то вершинка u, такая, что мы там куда-то
пришли. Это root. Значит, что мы из u куда-то смогли пройти. Тогда чему равен рет от v? Это либо что-то,
что мы смогли из u пройти, обратное ребро. То есть тогда мы знаем, что это рет от u. Сейчас,
надо здесь рет от v понять, как считается. Ладно, давайте ставим на семинар по счет
рет. Ладно, пока что так оставим заготовкой, потому что нам сегодня еще нужно успеть bfs рассказать.
Кто такой bfs? Это обход графа. По-моему, так оно расшифровывается, breadth first search. Или обход ширину.
Делаем это следующим образом. Он посещает все вершины в порядке удаления от старта.
То есть смотри, что у вас есть. Вот у вас есть вершинка.
Тогда bfs, если мы запускаем вот сюда эту вершину первой,
эту второй, эту третей, эту четвертой, эту пятой, эту шестой. Такой вот интеллектуальный алгоритм.
Как он устроен? Давайте напишем просто его код. Он не рекурсивный уже. Вот если вы писали
bfs не рекурсивным, вы там делали явно stack рекурсии. Вы писали stack вершин, извлекали вершину из
stack, добавляли всех идей в stack. Вот здесь bfs будет заменяться от этого кода ровно одним словом.
Вы меняете stack на q, все. Заводим q, qeue int bfsq, очередь. Сразу говорим,
что dist от v равно 0, делаем bfsq. У нас нет рекурсии. Вот это инициализация. Это значит,
что вы засунули в очередь одну вершинку, и у вас дистанция этой вершинки равна 0. Ну и начинается сам обход.
For у сосед v. А здесь надо еще сказать, что... Давайте скажем, что изначально все расстояние до всех минус 1 равное.
Конечно, так в ходе вам делать нельзя, но что поделать? Мы идем на жертву ради краткости.
Почему нельзя? Потому что вы весь требуете хранить. Ну, почитайте требования на ревью,
там все гораздо хуже, чем вы думаете. Отличное требование, 10 из 10. Вы реализовать, да. Вы реализуете
оба, но используете одно. Это я вам все расскажу на семинаре. For у сосед v. Так, мы делаем,
что если dist до u равно минус 1. Сейчас, подождите. Не, вру, все, отмена. Что я несу? Меня сбили,
смысле. Так, while. Пока очередь BFS не пустая. Size больше 0. Что вы делаете? Вы берете,
извлекаете вершину. Current равно BFS.top BFSQ. BFSQ.pop. Теперь дальше идете по всем вершинкам,
по всем соседям. For у сосед current. Если dist от u минус 1, то есть, если вы еще в u не заходили,
тогда вы что делаете? Вы говорите, что у вас dist от u равно dist от current плюс 1. Это первое,
что вы делаете. Второе, что вы делаете, вы добавляете u в очередь. Все. Весь обход. В чем его суть?
Во-первых, он так же, как DFS, обходит всю компоненту связанности. То есть, он посещает все
достиженные вершины. Просто в другом порядке. Второе, чем он хорош, тем, что он у вас выделяет
вершины по слоям. То есть, во-первых, он до каждой вершины считает вам расстояние до корня. То есть,
до откуда вы запускали. Во-вторых, он работает тоже за v плюс e опять же. Почему? Потому что,
вроде бы, очевидно. Почему? Потому что у вас каждый реберок посмотрит не более 1 раз.
Вот. Собственно, если у вас кавиограф не связан, то там BFS посетит компоненту связанности. В BFS вы
нашли цикл, вроде как, когда пришли вершины, которые уже есть dist посчитанной. Но это не точно. Но,
по идее, это так. Не очень принципиально. Выключите DFS. Теперь модификация нашего BFS. То есть,
мы с вами научились решать базовую задачу. Если у нас дан невзвешенный граф, то есть,
все веса ребер ровно единички, то искать расстояние от данной вершины до всех остальных мы умеем.
Ну и, соответственно, можно там также писать предков. То есть, да, кстати, можно доказать,
что если вы будете рассматривать только ребра, которые вам вот такие вот, вот эти вот,
current u. То есть, ребра, которые у вас как раз-таки просматриваются вот здесь вот. Сейчас. Вот,
вот здесь вот, вот эти вот. DSTATU равноминус 1. То есть, вот эти вот current u, ребра. То есть,
из них будет дерево кратчайших путей, кстати, построено. Но это так. Это будет потом сказано,
уже когда у нас будет на следующей лекции. А, поехали. Так, первая, то ли один BFS.
В чем меняется постановка задачи? То, что весовая функция, то есть, вес ребра оттуда в,
он лежит в множестве 0.1. То есть, у вас есть ребра веса 0 и есть ребра веса 1. Внезапно.
Очень классная постановка. То есть, что вам говорят? Теперь я умею делать,
говорить, что есть ребра веса 0, есть ребра веса 1. Что-нибудь такое. То есть,
с точки зрения расстояний, вершины 2 и 3 то же самое, что 1. Но так мы действовать не
будем, это слишком сложно. Сделаем круче и проще одновременно. Сделаем следующее, что…
Сделаем просто дэк.
Ладно, заведем вместо очереди дэк.
Если вершина 0, если вес ребра current u равен 0, то в голову вставляем
иначе в хвост. То есть, смотрите, у вас есть два случая. Вот ваш дэк, отсюда вы извлекаете,
это head, это tail, вы сюда вставляете. И первый случай, вам приходит ребро веса 0, от current
до u. То есть, вот отсюда вы извлекаете current, и первую очередь вам приходит вершина u такая,
что есть здесь ребро веса 0. Тогда вы current пихаете вот сюда, вот в этот конец. Иначе,
если у вас ребро веса 1, вторая ситуация, current, это u, у нее ребро веса 1, тогда вы u пихаете в
другой конец. Почему это так? Почему это валидно вообще? Потому что движется следующее. Есть утверждение
в строении очереди BFS, что в любой момент времени в очереди в голове находится сколько-то вершин,
удаленных на минимальное расстояние от корня, на расстояние l, на текущий момент. Дальше все
остальные удалены хотя бы на l плюс 1. Быть может там с повторами какими-то они были засунуты,
повторно, не очень важно. Здесь главное то, что если у нас вершинки 0, значит у нас по сути
расстояние это не изменилось, мы должны запихать в начало очереди, потому что они эквивалентны
для рассмотрения. То есть, мы должны сначала рассмотреть все, до которых тоже самое кратчайшее
расстояние, потому что мы проходим именно в этом порядке. А если у нас плюс 1, то значит,
это уже должно после рассматриваться когда-то. Теперь мы умеем не только с единичками решать,
а еще и с ноликами. Круто, да? Теперь у нас не множество размера 1, а множество размера 2.
К сожалению, ДР мы еще не дошли. ДР дойдем на следующей лекции. Сейчас мы еще сильнее расширим
наши горизонты. Что? Значит, что ребро веса 0, все, по нему ничего не стоит пройти. Так, ладно,
давайте я просто скажу принцип действия следующего алгоритма, а доказывать будете
на семинаре, потому что как-то на следующей лекции тратить совсем времени не хочется. Хочется
сразу переходить к адекватным алгоритмам. 1K BFS. Это черепашка 1K, так называемая в контесте.
Вот та черепашка 3, это черепашка 1K. Что мы будем делать? А теперь у нас W от УВ очень-очень страшно,
но мы расширяем еще сильнее наши границы. Это 1, 2, 3, тра-та-та-ка. Вот, очень страшно.
Очень страшно. Что делать будем? Делать будем следующее. Давайте заведем, заведем
модуль V-1 на K чередей. 1, 4K. У вас веса ребер 1, тра-та-та-ка. Заведем вот столько
очередей. Зачем нам столько? Что это K, это V-1. Имножить. Вот я хочу столько очередей. И что буду
делать? Будем называть, что это массив очередей. ADDIST, где в ADDIST ИТЫ лежат только вершины,
чадист равен И. Собственно максимально оправдывает свое название. Вот так вот. То есть что у меня
есть вершинка на расстоянии 5, я ее помещу в пятую очередь. Почему модуль V-1 на K? Потому
что каждый путь длины не больше, чем модуль V-1. Следует, что вес пути не больше, чем вот такая штука.
Вот. Потому что у вас в принципе все ребра веса K на этом пути. Там бамбук и все ребра веса K.
Тогда у вас достигнется эта экстремальная оценка. Тогда вроде как понятно, что делать. Вы берете,
проходите, типа пока все очереди не пусты. Запоминайте, сколько у вас размер очередей
суммарный и поддерживайте его там, когда вам надо. Что вы делаете дальше? Вы делаете вайлом,
пока все очереди не пусты. Берете вершинку из текущей очереди. Даже не так можно. Давайте
вот так сделаем. 4. Н пишу код. И равный нулю. И меньше, чем у нас 1 на K. Ну здесь можно сказать,
что вообще от единицы надо брать. Ну давайте так напишем. Что дальше происходит? Берем вершинку.
While at dist iti size больше единички. Больше ребра не единички. То есть только больше нуля.
То мы говорим следующее. Что текущая вершина равна at dist iti.pop.top.at dist.pop. Ну короче,
здесь повторяется вот весь тот BFS, который вы делали. То есть вот весь этот кусок кода,
он банально повторяется туда. Единственное, что вы делаете, вы делаете не BFS push этой вершинки U,
а at dist dist iti push от U. То есть здесь будет 4. Сколько времени? Нормально, еще целых 10 минут
до лекции. А опоздать на 5 минут не страшно. 4U сосед current. Мы говорим следующее, что если dist от U
равен минус 1, то что мы делаем? Мы говорим следующее, что at dist от U, просто говорим dist от U
равно dist от V плюс вес ребра plus вес ребра из current в U. И теперь делаем at dist iti.
at dist iti push at dist iti push от U. Еще фигурная скобка и еще фигурная скобка. Вот это один KBFS.
Так, ладно. Вроде все корректно, да? Единственная проблема с тем, что сколько мы шагов делаем.
Не в шагах. Давайте посчитаем, сколько времени это занимает. Здесь KBFS, но суммарно мы рассмотрим
каждый ребро не более одного раза, согласны? Поэтому время от KV плюс E. Память от K на модуль V,
согласна? Потому что у вас K на V очередей. А сколько хотите? Но вы каждый ребро посещаете не более
одного раза, поэтому E. KV, потому что у вас здесь цикл по KV. Хорошо, последнее утверждение,
которое нужно доказать, давайте его не буду записывать, что хватит K очередей. Не нужно столько
памяти делать. Хватит ровно K очередей. Почему? Потому что каждый шаг, когда вы рассматриваете
какую-то вершинку, она у вас не может больше, чем на K сдвинуться по очередям. Значит, суммарно у
вас единовременно заполнено не более, чем K очередей на самом деле. Мыслительный процесс, давайте.
Потому что так просто понять. Это подготовка, да. Теперь смотрите, достаточно K очередей,
почему? Потому что у вас единовременно работает не более, чем K очередей, согласны? Ну, кто не
согласен, тот подумает и согласится. Поэтому здесь можно писать, вот нужно все вот это норм. Только
здесь берется и%K, здесь берется dist2%K. Все, а нет, еще здесь, еще здесь %K. Все, это победа. Мы
сократили память сразу с вами с KV на просто от V. Ну, на память графа, скажем так. Потому что
вам нужно хренепанально очередь эту. Поэтому у вас суммарно от K памяти, вот так скажем. То есть
умножить превратили в K+. Ну и последняя вишенка на торте, самая последняя. Как заменить единицу
на ноль? Здесь. То есть как сделать 0K BFS? Нет, массив деков делать не будем. Просто будем пихать,
если у нас вес вибра равен нулю, в ту же самую очередь, в которой мы находимся. Все, мы вывели 0K BFS и победа.
