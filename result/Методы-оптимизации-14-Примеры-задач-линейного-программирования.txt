Значит, вот мы рассматривали с вами алгоритм решения задачи линейного программирования,
которые записаны в каноническом есть. Сегодня мы начинаем с примеров задачи линейного
программирования, которые встречаются в жизненных ситуациях. Первая задача
оптимального планирования производства. Предположим, что есть некоторые предприятия,
которые выпускают D видов продукции. Но при производстве каждого из видов потребляются N
видов сырья. И известно, что для выпуска одной единицы K виду продукции затрачивается
АК житое единиц житого сырья. Значит, так имеется вот D видов, и каждый из этих видов потребляет какое-то
количество сырья, а всего сырья N видов. Ну, что значит потреблять? Может и не потреблять,
но тогда соответствующие затраты будут просто ноль уровня. В общем, в виде у нас для производства
одной единицы K виду продукции используется АК житое единиц житого сырья. Но сырье не бесконечное,
поэтому есть ограничение на суммарный объем житого вида сырья, находящегося в распоряжении
предприятия. Известно, что он равен B жито. А прибыль с производства K виду продукции равна
R ката рублей. Ну, а задача заключается в том, чтобы максимизировать прибыль. Ну, естественно,
при условии, что расход сырья не превысит тот, который находится в распоряжении предприятия.
И вот надо выяснить, значит, какой же такой оптимальный план, то есть вот сколько надо выпускать
K, сколько единиц K виду продукции выгодно выпускать, чтобы общая прибыль была максимальная.
Ну, если мы запишем вот эту задачу в таком формализованном виде, то она будет иметь
такой вид. Ну, во-первых, общая прибыль равна сумме по всем единицам производимого продукта,
то есть по кат единицы dd. R ката – это прибыль с единицей произведенной продукции на x ката.
X ката – это сколько мы решили производить катового продукта. Значит, R – это у нас вектор R1 и так далее,
Rd, но мы считаем, что он из Rd-сугрыженного, то есть это строка. А x – это вектор столбец x1 и так далее xd.
А ограничения такие, что сумма А кожиты на x ката – это общий объем потребления житого
вида сырья, он не должен превосходить b житым. Ну, естественно, x больше равно b.
Поэтому вот мы получаем следующую задачу линейного программирования. R на x, R умноженное на x,
на максимум при условии, что сумма по кат единицы d а кожиты на x ката не превосходит b житы,
ну и x больше равно b. Ну, очевидно, что эта задача сводится к задаче в нормальной форме.
Это мы с вами выясняли, что любая из трёх форм, которые мы рассматриваем, сводится к любой другой.
Вот, поэтому, значит, вот это вот такая задача. Её можно, конечно, переформулировать в виде
задачи линейного программирования в нормальной форме, но ясно, что это вот задача линейного
программирования. Вторая задача, которую мы рассматриваем, это транспортная задача.
Имеется n карьеров с песком и m потребителей, которых надо обистечить песком. И известно,
что с катового карьера нужно увести а катое тон песка в сутки, а житое тон к потребителю
нужно b житое тон песка в сутки. При этом перевозка 1 тонны песка с катового карьера
житому к потребителю откроется в церковь житой рубли. Вот требуется обистечить всех
потребителей, затратив при этом на перевозку наименьшую возможную сумму. Значит, понятно,
вот имеется у вас n карьеров с песком, но тут традиционно рассматривают карьеры с песком и
потребителей песка. Но, конечно, вы понимаете, что это могут быть и магазины, которые торгуют
хлебом, и хлебозаводы в качестве места карьеров с песком. Хлебозаводы столько-то
производят продукции в сутки, а житому магазину требуется такое-то количество хлеба, и вот разводят
хлеб. Ну или это любой другой продукт, не обязательно. Ну да, это условная вещь совсем,
но здесь традиционно рассматриваются такие карьеры с песком и потребителей. Это, конечно,
чисто условная такая вещь. Итак, как это формализовать задачу? Давайте через x к житой обозначим
количество песка взятого с катого карьера для перевозки житому купельницей. И тогда мы
получаем следующую задачу, что общая сумма затрат на перевозки будет равна вот таким
суммам, по k от единицы до n и по g от единицы до n, c к житой на x к житой. Мы каждому предъявителю
из разных карьеров везем песок, и, значит, поэтому вот к житой это количество взятого
с катого карьера для перевозки житому потребителя, а c к житой это стоимость. Поэтому вот мы просто
суммируем все затраты c к житой на x к житой и хотим это минимизировать эту сумму. При этом мы знаем,
что с катого карьера можно вывести а к к житой, поэтому сумма x к житой, если брать сумму по 7 g,
то это должно равняться а к к житой. А если взять сумму x к житой по 7 k, то это то количество,
которое мы привезем в житый пункт, но им нужно было жито, поэтому вот имеется два таких равенства,
два таких ограничения, ну и, естественно, x к житой все больше равно. Поэтому вот получается тоже задача
линейного программирования, но она уже как раз вот в такой канонической форме. Можно это записать
в таком векторном виде, тогда, чтобы это записать, давайте рассмотрим вот такой вектор из rn
плюс m со звездочкой. Размерность n плюс m у него. Нет, не n плюс m, а m, сейчас, значит сколько тут,
каждый раз наберем m умножить на n. Вот и c со звездочкой, значит это вот такой вот вектор c11,
c12, c1m и так далее. Это стоимость перевоза. Теперь через x это количество, сколько мы берем
с катового карьера для перевозки житого потребителя, x11, x12, x1m и так далее, xnm. И тогда мы получаем,
да, и вот матрица А. Вот она такая. Здесь, значит, смотрите, первые n, первые,
сейчас, да, какого размера, n плюс m. Значит, тут первые n строк они устроены так, что идут тут
единички, такие блоки стоят единички, кем все нули, потом во второй строке единички все остальные нули
и так далее, в n строке единички все остальные нули. Вторая часть матрицы, она устроена так,
что такие единичные матрицы стоят в каждом из n столцов. И тогда можно записать нашу задачу таким
образом. Значит, вот эта вот стоимость вся, это c со звездушкой умножить на x. Вот c со звездушкой, вот x,
значит, это стоимость будет. Надо ее минимизировать. Вот эти равенства, сумма xк по 7g равна k, сумма xк
по 7g равна k, они получатся, если мы a умножим на x и переравняем b с чертой, а b с чертой это вектор из rn
плюс m, у которых первый n координат это a, компоненты a, а остальные m координаты это
компоненты b. Значит, вот так и получится. Если мы начнем ax умножать на b с чертой, то какой
первый элемент будет? Вот будет такой элемент x1-1, x1-2 и так далее, плюс x1m. На первом месте стоят
единишки, а второй индекс меняется. Это вот как раз сумма x1 житая должна равняться a1, ну и здесь вот
первые компоненты a1. Так что вот такая матрица, она достаточно разрежена, здесь много нулей. Ну и вот эта
задача с отверстием на x на минимум, при условии, что ax равно b с чертой и x больше равно нуля.
И третья задача, которую мы рассматриваем, это задача на минимакс. Пусть у нас имеются
векторы, к штук векторов, вектор строки из rd со звездочкой и к чиселу b1 и так далее. А матрица
размера n на d, ну как обычно у нас, значит n строк d столцов и b вектор из rn. Вот мы рассмотрим такую
функцию f от x, которая есть максимальная из вот таких разностей. Каждый вектор из этих векторов
c1 со звездочкой и ck со звездочкой умножаем на x. x у нас вектор из rd и мы читаем соответствующее число
числа b житые, значит c житые со звездочкой на x у нас b житые. Вот максимальная из этих чисел это и есть
f от x. А задачу мы рассматриваем следующую, минимизировать это к максимуму, поэтому минимакс,
минимизировать этот максимум при условии, что ax равно b, а x больше равно нуля. Условие это,
конечно, такое же как канонической задачи линейного программирования, но сама задача не является
линейной, потому что мы минимизируем максимум, не линейную функцию, а максимум из некоторых вот выражений.
Ну это именно таких, которые там написаны. Но тем не менее ее можно свести, введя дополнительные
перемены. И вот это сведение, а именно рассматривается задача. Мы покажем, что они эквивалентны.
Следующее, мы вводим переменную x d плюс 1. У нас d значение, x вектор из rd. Мы рассматриваем d плюс первую
переменную x и хотим ее минимизировать при условии, что c житой со звездочки на x минус b житой не превосходит
этого значения x d плюс 1, этой переменной x d плюс 1, по 7 g от игнецетока. И еще вот эти вот
условия x равно b и x больше равно b. Ну давайте вот покажем, что они эквивалентны. Действительно, пусть x с крышкой
с компонентами x с крышкой 1 и так далее, x с крышкой d, решение вот этой задачи 49 обозначено на
minimax. Ну тогда утверждается, что x1 с крышкой, и так далее x d с крышкой f от x с крышкой, f это вот этот
максимум из разности. Есть решение задачи с дополнительной переменной 50. Но так как если положить
противно, то тогда бы существовал такой элемент x с волной, допустимый в задачи 49, для которого было бы
значение меньше f от x с волной, т.е. вот это x d плюс 1, f от x с волной было бы меньше, чем f от x с крышкой,
но это противоречит тому, что x с крышкой решение задачи 49 нашей исходной задачи на minimax. А если
наоборот предположить, что у нас имеется решение задачи вот с этим дополнительным
переменным x d плюс 1, т.е. имеется такой вектор x1 с крышкой, и так далее x d с крышкой, x d плюс 1 с крышкой,
то тогда вектор x1 с крышкой, и так далее x d с крышкой является допустимой задачей на minimax. Но если
он не является решением этой задачи, то тогда найдется допустимый вектор x с волной, x1 с волной, x d с волной,
для которого f от x с волной будет меньше, чем f от x с крышкой, но f от x с крышкой у нас меньше, равно чем x с крышкой d
плюс 1 к условию решения этой задачи. Ну а тогда вектор x1 с волной, x d с волной и так далее, а последний
x с волной d плюс 1, если положить f от x с волной, будет являться допустимым задачей с дополнительной
переменной, и для него будет x с волной d плюс 1 меньше, чем x с крышкой, что противоречит экстремальности
вектора, являющейся решением задачи 50. Так что вот эти задачи, они эквивалентны, а задача 50 уже линейна,
потому что здесь ограничение виде неравенства, ограничение виде равенства, но все ограничения
виде неравенства можно записать как ограничение в виде равенства, и ее можно переписать в каноническом
виде, поэтому это вот задача линейного программина. Давайте дальше будем более подробно рассматривать
вот такую интересную задачу, а именно транспортную задачу, которая там под номером 2 была.
И значит, ну вот здесь мы понимаем о том, что у нас n пунктов и отправления. Здесь уже видите, мы не говорим там
песок или еще что-то такое, вот более так сказать общей ситуации, что имеется n пунктов отправления,
1 и так далее а n, и m пунктов назначения, b1 и так далее bn. Значит, какие-то грузы. Из пунктов
акката отправляются грузы пункты б жита, и из акката можно увести а малая ката единиц груза,
а в пункте b большого жита требуется b малая жита единиц груз. Ну и при этом перевоз к одной
единице откроется в ц, из пункта k в пункт g откроется в ц ка житы ровно. Ну и требуется
затратить наименьшую возможную сумму денег для вот этого процесса перевозка, перевозки из пунктов
отправления к пунктам назначения. Ну мы уже писали с вами, что вот формально эта задача записывается
как минимизация суммы ц ка житы на и ц ка житы при ограничении, что сумма ка житы ровно акката
и сумму ка житы пожи. Сумма ка житы пожи это сколько мы берем из катова пункта отправления. Мы должны
брать аккаты, вот такой груз суммарный. В пункт b большого жита мы должны достать b малая жита,
вот единиц груза. И здесь это сумма х ка житы по пункт к. Ну вот эти обозначения,
которые мы с вами уже использовали и матрица, и без черта это все было, значит здесь просто это
заново все написано. Всякий допустимый вектор в этой задаче мы называем допустимым планом перевозок.
Решение транспортной задачи называется оптимальным планом перевозок. Вот значит есть допустимый
план перевозок, который удовлетворяет этим условиям и есть оптимальный самый лучший план перевозок.
Такая терминология здесь примет. Из этих вот условий равенство вытекает, что если мы возьмем сумму
х ка житы всю и па ка и па жи, то это все равно что сумма аккатов или все равно что сумма бжит.
Значит они должны быть равны, то есть иначе говоря мы считаем, что вот сколько есть запас груза на
всех пунктах отправления, такой запас груза и нужно перевести в пункт назначения. В этом
случае говорят, что имеется замкнутая модель транспортной задачи. Ну конечно реально такого
не встречается, значит реально может быть ситуация, что общее число груза, которое перевозится,
может быть больше, в карьерах добывается больше песка, в пунктах назначения меньше общее
количество груза, а может быть наоборот, что добывается меньше чем нужно в каждом пункте назначения.
Вот так что возможно разной ситуации, но давайте покажем, что все это может свести все равно вот
можно свести такой замкнутой задачей, замкнутой модели транспортной задачи. Действительно,
давайте предположим, что суммарные запасы отправителей больше потребностей, песка много
производится, такого общего количества, что за сутки там можно взять песка с каждого карьера,
такого большого количества не требуется в пунктах назначения. То есть сумма по всем кат единицы ДН
а ката больше, чем сумма, которая требуется, сумма грузов, которые требуется доставить в пункты
то есть сумма коже от единицы ДН. В этом случае равенство, которое у нас есть, они просто заменяются
на неравенство и задача стоит так, что мы берем-то столько, чтобы удовлетворить потребителю, чтобы
будут говорить запросы у потребителя, сумма коже это равно выжитой, но сумма всех окаток больше,
поэтому значит здесь стоит неравенство, там так сказать, сумма коже это не цдм, коже это меньше
равно окаток. Так вот задача тогда ставится, но можно от нее перейти и к замкнутой задаче,
можно ввести эффективный пункт назначения, Б, М плюс первое, и все лишнее как бы отравить туда,
Б мало М плюс первое, сказать, что это разность из того, что все производится, минус того,
что сколько надо в остальных пунктах и назначить туда нулевую стоимость перевозок, нулевая стоимость
перевозок, значит вот в этот пункт, ну и фактически вы там получите, сколько туда надо перевести,
ну естественно не перевозить туда, а все остальное останется, ну вот то, что надо реализовывать,
и мы соответственно добавим новые не отрицательные перенеменные, тогда х ката х М плюс первое,
пока от единицы ДМ, то есть то количество, которого из ката пункта производства надо внести в этот
эффективный пункт назначения М плюс первое, а тогда получится уже замкнутая модель транспортной
задачи, и вот здесь неста не равенства, добавится равенство суммы коши от единицы ДМ плюс один,
х пожита равно а ката, ну еще раз повторяю, с нулевыми стоимостью перевозки, а если наоборот,
что требуется больше, чем имеется на карьерах общего количества киска, то тогда другие равенства,
вот сумма х пожита равно божитой была, но равно не получится, потому что нет такого количества киска,
значит, равенство заменится на неравенство, сумма по ката единицы ДМ х пожита меньше равно божитой,
можно тогда такую задачу рассматривать, но в этом случае тоже можно свести замкнутой задачи и
рассмотреть эффективный пункт отправления, такой эффективный карьер А большое М плюс один сделать
с величиной вывоза, но этот протостаток, то что не хватает всем пунктом назначения, вот эту разницу,
сумма х пожитой минус сумма по ката единицы ДМ на ката, и это обозначить через о малое М плюс 1,
вот так сказать, производство вот такой карьер эффективный сделать, а мало М плюс 1, и тоже с
нулевыми стоимостью перевоза из этого пункта, и тогда если добавить новые неотрицательные
переменные хн плюс первая жита, это значит сколько из этого эффективного карьера нести
вжитый пункт потребления, то тогда получится замкнутая модель, снова замкнутая модель транспортной
задачи с ограничениями в виде равенств, уже тогда можно равенство писать, что сумма по g от единицы
ДМ х пожитой равно ката, но ка уже меняется от единицы до N плюс 1, и сумма по ка от единицы до N плюс 1 х пожитой
равняется джитой, так что здесь вот мы просто с вами показали, что не обязательно рассматривать
замкнутую модель, можно рассматривать не замкнутую модель, когда количество груза перевозимого
производимого, скажем, на карьерах больше чем потребности, или наоборот потребности больше
чем производится продукта, значит всегда можно, введя вот эти эффективные либо пункты отправления,
либо пункты назначения с нулевыми стоимостьями перевозки, можно сводить все равно к замкнутой модели,
поэтому дальше мы будем рассматривать только замкнутую модель. Ну вот следующий заголовок,
это вот свойство транспортной задачи, значит, конечно транспортная задача, ее можно решать
симплекс-методом, но в силу простого строения ограничений матрица можно упростить решение этой
задачи, значит, формально говоря, можно ничего не делать, вот у нас есть матрица, вот у нас есть
ограничения, там канонически такой формы они записаны, поэтому вот эту матрицу можно решать
просто симплекс-методом, который мы изучали, не заморачиваться ни на что, но в реальности матрица
может быть большая, а в силу ее такой разреженности существует некоторые методы упрощенные, вот это
мы хотим рассмотреть, но сначала нам некоторые дополнительные результаты потребуются, вот такая
лемма, что для любой транспортной задачи существует допустимый план перевозок, значит, еще мы в ограничении
доказательств, мы считаем, что задача сведена уже к замкнутой модели транспортной задачи, и мы
просто предъявляем допустимый план перевозок, вот мы берем хкж, равный произведению акад на
бж и деленное на м, а м это общая сумма перевозимого груза, ну потребляемого и производимого, замкнутая
модель, это одно и то же, ну давайте проверим, что выполнены ограничения, если мы просунируем хкж, а это
есть все равно, что сумма акад на бж деленное на м, то вынеся акад на м, потому что мы по индексу
уже суммируем, мы получим, что поскольку сумма бж это м большое, то у нас получится акад, а если мы
инсунируем по к, ну тогда мы вынесем бж деленное на м, а сумма акад это снова м, поэтому получим
хкж, ну и ясно, что хкж больше равны нуля, и тем самым хкж это допустимый план перевозок, значит здесь у
нас ограничения какие-то мы писали или нет, значит что, ну конечно не имеет смысла в такой общей
задачи рассматривать в случае, когда акад равно нулю, любой акад, значит это пропускается когда мы
эффективны, да х больше, но это х, это значит вектор, что мы можем, а здесь мы по-моему не писали, да, не
писали, ну в принципе ничего не противоречит, что если какой-то бж или какой-то акад равно нулю,
смысла нет такого, если это эффективный, ну даже эффективный у нас всегда соответствующие акад или
бж строго больше нуля, что можно считать, что все акады, все бж строго больше нуля, значит смысла
нет, вводить пункт, который ничего не надо вести или вводить пункт производства, где ничего не
производится, бессмысленная вещь, поэтому конечно можно считать, что акад и бж это больше нуля,
но это ни на что на самом деле не влияет, другая лемма, которую мы хотим, значит так допустимый план
перевозок всегда существует, следующая лемма такая, что для любой транспортной задачи существует
оптимальный план перевозки, но это мы моментально получаем из общих теорем у задачи в задачах
линейного программина, потому что смотрите, раз существует допустимый план перевозок, то у нас уже
задача, которая должна иметь решение в том смысле, что мы же смотрим нижнюю грань, мы минимизируем,
но у нас есть ограничение снизу, что нижняя грань больше равна нуля и поэтому и нету стоимости
ограничений, значит нижняя грань всегда есть некое неотрицательное число, то есть задача имеет
конечное значение, задача имеет конечное значение, у нас была теорема или предложение это было,
нет, теорема вот тут написана, теорема существования, теорема около 17, которая утверждала, что если значение
конечное, то существует решение, там даже в силу того, что все эквивалентные формы задачи линейного
программина, даже неважно в какой форме эта задача записана, каноническая и общая.
Теперь вот еще одно утверждение о том, что рамк матрицы A равен n плюс m минус 1, ну вот давайте
смотреть на саму эту матрицу, мне приходится возвращаться здесь к самой матрице, вот она,
матрица, значит у нее много столцов, как мы с вами говорили, значит вот строк n плюс m, она из двух
частей состоит, вот первый n-строк, они устроены вот такими блоками и последний m-строк, они устроены
вот так, какие-то блоки из единичных матриц, значит у нее n плюс m-строк, а столцов много, n умножить на n.
Вот давайте вот что сделаем, нам надо доказать, что рамк n плюс m минус 1, на единичку меньше,
чем число строк, давайте вот что сделаем, сложим все первые n-строк, сложим первую со второй,
ну и поставим ее, ну скажем, к n-той строке, вот здесь n-тая строка, и к ней прибавим все предыдущие
n минус одну скручку, смотрите, очевидно, что получится строка из всех единичек, ну мы знаем с вами,
что при сложении строк рамк не меняется, значит мы получим вот эту n-ную строку, тогда всю составу из
единичек, давайте теперь, начиная с n плюс первой строки, к последней прибавим все, начиная с n плюс первой,
ну ясно, что получится тоже строка, состоящая из всех единиц, значит мы получим матрицу,
у которой рамк как у исходной, но у нее две строки одинаковые, значит уж во всяком случае ее рамк
метре восходит меньше, либо равен n плюс m минус 1, значит первое, что мы сделали, мы увидели,
что рамк этой матрицы меньше равен, чем n плюс m минус 1, теперь давайте сделаем вот что,
надо теперь указать такой минор порядка n плюс m минус 1, у которого определитель не равен нулю,
вот что здесь предлагается, предлагается переставить строки, начиная со второй по n после последней
строки матрица, вот что предлагается, давайте на самом матрице посмотрим, вот матрица,
что значит, что предлагается, вот смотрите, вот вторая строка и до n, и мы ее поставим после последней,
а потом выберем столцы, сначала выберем первую n столцов, потом n плюс 1 столбец,
смотрите, вот здесь единичка появится, а дальше нули, потому что мы только до n строки ставим,
потом возьмем, значит это n плюс 1, потом возьмем в следующем блоке, значит это сколько будет,
2n плюс 1, там появится единичка, значит вот здесь будут единички, m штук, это на m плюс 1 месте,
а там на m плюс, на таком же там месте, значит это n плюс m плюс 1 место, а там будет m плюс n,
нет, ну и на следующем, значит m плюс 2, на m плюс 2 месте, если мы столбец такой берем,
и вот получится треугольная матрица, где в главной диагонали будет единичка, какой ее будет размер,
значит здесь m и еще n минус 1, мы добавим этих столных строчек, но не все столцы будем брать,
а вот через n, получится тогда вот такой минор порядка n плюс m минус 1, который является треугольной
матрицы, на главной диагонали стоит единица, ну ясно, что к удлителю не равен нулю, а размер его будет
раз n плюс m минус 1, мы тем самым доказали, что рамп матрицы A это n плюс m минус 1, дальше,
и еще одна лемма, пятая, что любые n плюс m минус 1 строк матрицы линейно не зависит,
давайте эту попробуем доказать, вот матрица, мы доказали, что рамп ее n плюс m минус 1,
посмотрите, что до этого мы доказывали, до этого мы доказывали, что сумма первых n строк, давайте
строки обозначать в виде так сказать векторов, значит вот сумма первых n векторов равняется
то же самое, что сумма последних m векторов, давайте где-то я напишу здесь,
значит это у нас есть, ну как бы их обозначить, а, б, цепь, все равнится, ну давайте д, значит вот
d1, d1 это вот этот вот вектор, самая первая строка, плюс и так далее, плюс dn, n это вот эта вот строка,
последняя, значит сумма всех этих векторов это вектор изъединить состоит, но это то же самое,
что сумма последних, значит f1 плюс и так далее, f1 это вот этот код, f1, а этот fm,
плюс fm, ну из этого равенства и ясно, что любой вектор линейно выражается через остальные,
значит любой вектор линейно выражается через остальные, есть линейная комбинация остальной,
уж какой бы вектор, не знаю там, d2, ну все перенесите в правую часть, значит у вас d2 линейно выражается
через все остальные, так что вот эта мглема, она довольно простая, она доказана.
Да, а здесь же в линейне не только что выражается, а что любые n плюс m,
значит я неправильно лему сформулировал, значит это в доказательстве это используется,
значит сама лему звучит так, вот она написана, что любые n плюс m минус 1 строк матрицы линейно
независимы, а доказано это так, что мы ну скажем вот выбрали n плюс m минус 1 строк, остальная строка
линейно через них выражается, поэтому если бы из этих n плюс m минус 1 строк были бы,
если бы эти строки были линейно зависимыми, то тогда ран был бы меньше, чем n плюс m минус 1,
потому что тогда уже получалось, что это система и заставился, что она тоже линейно зависима,
а так получается, что действительно какие бы строки вы не выбрали, любой другой вектор через них
линейно выражается, линейно выражается, вот отсюда вытекает, что какие бы строчки вы не выбрали,
они вот только n плюс m минус 1, не все, вот то есть любую строчку если зачерпнуть,
то все остальные будут линейно независимы.
Давайте я собру это.
Вот теперь по поводу методов нахождения начальной крайней точки в транспортной задачи.
Опять мы рассматриваем загнутую модель транспортной задачи и давайте ее запишем в
виде такой платежной матрицы, значит слева столбец мы пишем это пункты отправления,
сколько в каждом пункте производится единиц продукции, первая строка кроме первого столбца это
пункты назначения, сколько требуется в каждом пункте назначения единиц продукции, а на пересечении
соответствующая цена перевозки, нам скажем c22, это цена перевозки из пункта a22 в пункт b22 единицы
продукции, а для составления матрицы плана перевозок мы используем почти такую же таблицу,
но по краям такие же значения, а серединочки это то, что мы хотим перевозить, значит это то,
что мы планируем перевозить, не оптимальные, а нам уже надо начальную крайнюю точку найти,
значит есть разные методы, вот давайте их рассмотрим, первый этот метод северо-западного угла,
но я сразу тогда буду на конкретной задачи показывать в чем он состоит, давайте вот как раз эту
задачу рассмотрим, ну тогда надо написать, значит тогда удобнее просто здесь написать,
вот эта табличка и перерисую, здесь она уже заполнена, я хочу чтобы она была не заполнена,
вот здесь пункты отправления, здесь первым 10, вторым 80,
последним 20, имеется 4 пункта назначения, первым требуется 40 единиц продукции, во втором 15,
в третьем 42 и в последнем 13, замгнутая задача, вот сумма по строке равняется сумму по столцу,
здесь 110 и если здесь вы сложите тоже будет 110, значит нам надо вот такой первоначальный план
перевоза сформировать, значит первый метод это вот метод северо-западного угла, вот северо-западная
точка, это вот самая северная и самая западная, дальше мы смотрим, нам нужно здесь поместить
количество груза так чтобы удовлетворить либо производителя, либо потребителя, ну 40 мы не можем,
потому что здесь только 10 производится, значит ну вот 10 мы можем написать и тем самым пункт а1 у нас
закрыт, дальше мы как бы его вот эту строчку уже вычеркиваем, здесь 10 мы отправили и все,
с первого пункта больше ничего не взять и мы переходим теперь к таблице у которой на одну меньше
строчки, но если бы здесь было скажем не 45, тогда мы бы 5 отправили и тогда бы зачеркнули
первый столбец, ну первый столбец бы был закрыт у нас, если одно и другое то неважно, значит можно
любой или строку или столбец вычеркнуть, теперь в оставшейся таблице уже здесь две строки и четыре
столбца, мы опять идем вот в этот северо-западный пункт, вот этого тоже и смотрим что здесь мы можем
сделать, ну мы можем удовлетворить полностью закрыть первый пункт потребления, потому что осталось
у него отправить 30, мы здесь пишем 30 и тем самым первый пункт потребления у нас закрыт, мы удовлетворили
его спрос, остается таблица у которой две строки и три столбца, опять идем вот в этот самый северо-западный
пункт, значит что мы можем здесь сделать, здесь во втором пункте производства осталось 50, а пункт
потребления надо 15, мы можем 15 отправить сюда единиц и закрыть второй пункт потребления, у нас остается
таблица два на два, опять идем в северо-западную точку и смотрим, значит во втором пункте производства у нас
осталось 80 минус 45, это 35, мы можем его закрыть, этот второй пункт производства, потому что здесь
42 единиц надо, значит если мы напишем 35, то тогда мы закроем второй пункт производства и у нас
останется таблица из вот этих двух клеточек, но мы опять идем к северо-западную точку, вот она и
смотрим, ну здесь 20, здесь осталось 7, если мы напишем 7, то мы закроем и третий пункт потребления и у
нас останется 13 единиц в пункте производства третьего и 13 единиц в пункте потребления, задача же
замкнутая, поэтому должно остаться столько, сколько требуется, 13, тем самым мы получили вот этот вот
первоначальный допустимый план перевоза, 10, сюда 30, сюда 15, 35 и так далее, вот он здесь и
это таблица стоимости здесь, а вот этот пункт, вот этот первоначальный план перевозок по методу
северо-западного угла, вот он здесь и имеется, видите здесь как раз он, то есть вот допустимая
точка, ну можно общую стоимость посчитать, давайте посчитаем, ну мы конечно вот просто из той
таблицы стоимости, вот таблица стоимости здесь есть, мы умножаем 2 умножить на 10, 4 на 30, 3 на 15,
4 на 35, потому что здесь есть стоимость и все, вот это все здесь написано, получается что 478 единиц,
ну рублей там, 478 единиц нам надо, стоимость такого первоначального плана, ну никто не говорит,
что он оптимальный, но вот он может даже далеко не оптимальным оказаться, потому что мы не учитывали
стоимости перевоза, есть другой способ, который называется минимум по матрице, по матрице стоимости,
конечно, значит видите нам нужно здесь минимум по матрице стоимости, значит в чем состоит этот метод,
это другой, значит мы смотрим в этой матрице минимальный элемент, где самая дешевая перевозка,
ну если там совпадает, то мы выбираем самую маленькую, любую из этих двух самых маленьких,
или трех самых, давайте на той же самой табличке попробуем изобразить, вот как будет осуществляться
вот этот, вот этот способ, минимум по матрице, для этого мне нужно еще изобразить вот, вот эта
матрица стоимости, ну вот здесь удобней, что она есть, значит где же здесь минимум, ну минимум вот здесь,
вот, поэтому мы должны как можно больше перевести груза с минимальной стоимости, значит здесь у нас
производится 10, а требуется 15, ну больше 10 мы перевести не можем, поэтому мы пишем 10,
и тогда закрываем первую строчку, она уже здесь все обслужена, обслужен первый пункт производства,
теперь из оставшейся матрицы, вот она оставшаяся, мы смотрим следующее, где следующее минимальное
перевозка, ну здесь есть две, вот, вот двоечка и тоже вот двоечка, ну давайте выберем вот скажем вот это вот,
здесь мы можем посмотреть, что здесь вот, значит либо эту, либо эту, давайте посмотрим,
где мы можем больше написать, ну здесь мы больше пяти не напишем, а вот здесь мы можем 13 написать,
поэтому выгоднее, наверное, все-таки вот это, давайте возьмем вот это и отправим 13 единиц из 80 вот в этот пункт,
и тем самым его закроем, и тем самым его закроем, теперь осталась вот такая матрица, значит 2 на 3 вот
это вот, ну здесь вот этот минимум, вот этот, значит теперь здесь мы можем максимальное, что мы можем сделать,
но здесь уже 10 отвезли, поэтому осталось только 5, ну придется значит 5 написать, мы закрыли вот этот
второй пункт потребления, осталось 4 клеточки, вот они, 4, 4, 6, 7, значит либо вот это вот, либо вот это вот,
здесь можно 42, нет 42, да можно здесь 13, а здесь 40, ну давайте 42 побольше, давайте здесь и отправим 42,
и тогда мы закроем третий пункт потребления, ну останется вот эти две, потому что значит выбирать из этих 4 и 6 вот это
минимум, давайте посмотрим сколько здесь мы можем отправить, мы уже из второго пункта производства 55 отправили,
значит сколько же там остается от 80, отнять 55, 25 что ли остается, значит придется тогда отправить 25 здесь,
и останется последний пункт, но здесь 5 отправлено, и здесь 15 нужно, вот 15, значит вот мы получили такой план перевозок,
вот он здесь написан первоначальный план перевозок, мы учитывали стоимость, но я не уверен что он
получился такой же как у меня в табличке, потому что здесь можно было выбирать, вот как там я выбирал,
сейчас я не знаю, давайте посмотрим, что здесь у нас, минимум по строке,
значит здесь вот как, здесь видите немножко по-другому, 13, значит здесь что-то по-другому,
ну 10-то остается, вот, а потом вот здесь вот 13, это тоже также и было выбрано, а потом что-то другое,
я выбрал что-то другое, вот здесь вот 40, не 42, вот сюда, значит можно было бы 42 сюда отправить,
но почему-то здесь вот выбрано вот это, 40, ну можно посмотреть по стоимости, что там лучше,
что там хуже, ну во всяком случае вот такой вот способ, он называется минимум по,
здесь более подробно написано, значит это минимум по матрице, минимум по матрице стоимости,
ну здесь коротко, минимум по матрице, можно было бы конечно сравнить, но если вот так как я здесь
вот выбирал, то здесь 419 уже стоимость, а там была 478, там получился, минимум,
про начальный план по стоимости она привел к более оптимальной цене, интересно, ну давайте
посчитаем, что здесь получилось, тоже несложно сделать, можно здесь еще лучше, значит вот эта
стоимость, вот она стоимость, давайте посчитаем, значит что у нас получается, здесь вот 10,
дальше, ну я по строкам пойду, 25 на 4 плюс 100,
42,
тоже не 4, 42, не 4, 168,
дальше 13 на 2, 26,
15 на 6, 90 и 5 на 2, 10, вот если не ошибся, по-моему так, значит это 100,
это 268 и еще 226, 36, значит 268 плюс 136,
4, 0, 404, видите, а там у нас, значит здесь еще лучше вот мы сделали, а там у нас,
а там 419, вот так вот я стал выбирать здесь, получилось еще лучше,
ну есть еще несколько планов, давайте их уже сегодня тоже перечислим, есть минимум по строке,
это тоже связано с платежной матрицы, но берется минимум не по, значит заранее на самом деле не
известно какой из них лучше, но берется такой, что вот та же самая платежная матрица,
вот эта платежная матрица, и берется минимум по строке, давайте посмотрим, как он работает,
как этот метод работает, я жалко, что стер там, несложно восстановить, значит 40, 15,
42, 13, 10, 80 и 20, значит вот берется первая строка и минимальное значение единицы,
ну так как и там, значит мы 10 отправляем, и вот эта строка у нас уходит, остается вот эта матрица,
и в ней мы выбираем опять минимальную по строке 2, ну пока идет также как и там, значит здесь тогда 13,
и столбец закрыт, в оставшейся матрице мы опять берем минимум по строке, ну теперь уже получается вот
это вот, что здесь можем сделать, ну вот у нас остается только 5 отправить во второй пункт,
и второй пункт потребления закрыт, остается тогда вот эти 4 элемента, но это матрица,
и минимум по строке, значит либо вот этот, либо вот этот, ну давайте посмотрим, что выгоднее,
выгоднее наверное вот сюда отправить 42, и тогда вот это закроется, теперь остается только вот эти
два элемента, ну и здесь значит по строке только один элемент, поэтому вот сюда вот мы должны
отправлять сколько, значит здесь уже 18 и 42, 60, значит из пункта второго пункта производства мы уже 60
отправили, значит больше 20 мы не можем отправлять, ну и здесь остается 20, вот получается такая матрица,
если эти минимум по строке, если здесь у меня тоже самое, давайте посмотрим, что здесь,
минимум по строке, сколько в этом примере получилось, почему-то минимум по строке,
почему-то другой, 10, 5, а ну там можно было наверное выбирать что-то опять, мы вот так вот сделали,
ну и да, и еще один способ, ну не минимум по строке, а минимум по столцу, значит вот то же самое
происходит, что мы сейчас здесь изображали, но только не по столцу платежной матрицы берется
минимум, а не по строке, а по столцу, а дальше значит вот все то же самое, и здесь по-моему оказалось
самое маленькое, непонятно какой из описанных методов, значит заранее нельзя конечно сказать,
может быть одно, может быть другое, но есть вот 4 метода, это северо-западный угол, минимум по
матрице, минимум по строке и минимум по столцу, как-то так кажется, что минимум по самой матрице
лучше, но здесь вот как раз пример показывает, что здесь минимум по столцу лучше всего получился,
поэтому заранее сказать нельзя, ну вот имеется такое вот утверждение, что любой из записанных
выше методов нахождения первоначального плана перевозок приводит первоначальные крайние точки
множество допустимых элементов, ну надо просто доказать, что те столцы, которые мы выбираем,
а что значит первоначальный план, если вернуться вот к такому общему описанию, вот в виде матрицы,
давайте сейчас вот матрица далеко расположена, вот матрица, значит если вернуться вот к этой
постановке в виде матрицы, электора х, то что значит первоначальный план перевозок, мы указываем здесь
х положительные, остальные у нас нули, просто указываем какие из х мы берем, вот этот первоначальный
план перевозок, с точки зрения крайней точки это означает, что мы выбрав какие-то х положительные,
это все равно, что мы выбрали столцы этой матрицы, что надо показать из тех утверждений, которые мы
доказывали для того, чтобы показать, что мы действительно первоначальный план перевозок
определяет крайнюю точку, надо просто показать, что соответствующие столцы являются линейно
независимыми, что вот те х, которые мы выбираем, по тому или по другому методу из этих, любой из
этих четырех, приводит к начальной крайней точке, надо показать, что любой из этих четырех методов
приводит к таким столцам матрицы, которые линейно независимы, ну давайте вот на следующей лекции,
она у нас последняя будет, вот это вот как раз сделаем, ну и какой-то, так сказать, обзор еще того,
что у нас в расчитанном, а на слогу тогда я остановлюсь, пожалуйста, если какие-то вопросы есть.
