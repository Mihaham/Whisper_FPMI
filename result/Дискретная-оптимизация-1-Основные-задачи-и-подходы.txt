...
Дальше мы kaikимeso...
Самый pain equator чем composting?
И для альбертикных вопросов это лучше, чем электронная почта.
Ну, все сказал, все организационное основное сказал.
Нам нужно будет определиться, наверное, почтное на этот курс
проводить мы не онлайн, но пока кажется, что нам этот курс
нужно проводить будет очень-очень.
Я, конечно, ничего против не имею, потому что все равно
на четверг весь день такой очень супер.
Мы только же.
Почти самая лучшая.
Но поскольку курс записывается, то если кто-то из вас,
например, посещает какой-то другой эквадративный курс,
очень на этом не может присутствовать, то проблем нет.
То есть никаких фанбальных требований, что на лекциях
может быть контрольный или еще что-то такое.
Да, ни в коем случае у нас такого нет.
Вы можете смотреть курс записи.
Значит, курс засчитывает по заданию.
Давайте я теперь расскажу про что курс, да, и тогда будет понятно,
про что задание и какого вообще типа.
Я думаю, что многие из присутствующих, они выйдут на вечернюю встречу
в зоне, которую я проводил.
Но не все.
Вряд ли все, конечно.
Да, и вряд ли те, кто не будет успел посмотреть
этот эквадративный запись.
Поэтому о чем вообще есть цепление дискретной оптимизации?
А, да, давайте я вот здесь еще напишу название курса.
Так, потому что важно знать, как зовут ветра,
каково цвет лечебника.
Ну, лечебника нет, поэтому даже не надо знать, каково цвет лечебника.
И важно знать, как называется дискретность.
Она называется вот так.
Дискретная.
Вы можете, значит, пока что еще нечего смеяться.
Дискретная оптимизация Я.
Я бы сам изменял это с удовольствием,
но почему-то столько студентов называют
многие дискретные оптимизации И.
Я не знаю, что там мы оптимизируем,
какие многочисленные оптимизации мы применяем,
но вообще математическая дисциплина называется дискретная оптимизация.
Точно так же, как и не иная алгебра, не алгебры.
Точно так же, в единственном числе.
Или теория вероятности.
Вот, может быть, методы, да.
Это уже другое дело.
Это дисциплина, она едина.
А я вам, кстати, правильно сейчас хотел сказать.
Почему дисциплина едина?
Почему я считаю, что это надо подкреплять в единственном числе?
Дело в том, что мы с вами на протяжении всего курса
рассматриваем разные задачи и разные методы.
Да, то есть это действительно на собственном числе.
А что же надо делать в дисциплине единой?
Откуда вообще все это название иллюмируется,
дисциплина и оптимизация?
А у вас был курс по обычной оптимизации?
Ну, там, типа, был какой-то оптимизации?
Нет.
Не был?
Да.
Вот, значит, есть такая классическая дисциплина просто.
Оптимизация, да?
Ну, вот, классическая оптимизация.
Что это такое?
У вас какая-нибудь функция f?
Упс.
Попробуй стесняться.
Есть у вас функция f от x и y.
Ну, например, какая такая?
x и y, плюс или седьмой.
Вот это же можно записывать.
Значит, нет.
А есть такая задача?
Найти минимум этой функции.
Ну, приходите.
Так, как говорили, например,
пирик, меняющийся, минус тысяча,
футбол тысяча,
там, пирик,
производник,
дисциплина лежит вверх.
Вот. Найти минимум этой функции.
Вот.
Стандартная задача оптимизации вообще,
всей математической теории оптимизации.
Когда какую-то функцию требуется
патриотизировать или патриотизировать
при каких-то ограничениях на периметры.
Это супер, супер.
Это просто нужная дисциплина,
потому что все машинное обучение, например,
это статистика, плюс оптимизация.
То есть мы с вами, например, в машинном обучении,
вот есть у нас набор точек,
да, на плоскости, x и y.
Значит, есть набор точек.
И мы видим, что эти точки
на самом деле примерно,
ну, с учетом какого-то шума,
значит, они не просто
абсолютно рандомно расположены,
а есть какая-то зависимость,
ну, приблизительная, например.
Примерно равняется
а из пустотка, линейная зависимость.
И тогда мы пытаемся эти точки
выложить на стримную возможность.
Это называется линейная рекрессия.
Когда мы видим какую-то линейную зависимость
между одной характеристикой,
ну, например, вероятностью
какого-то риска заболевания,
человека диабетом, например,
от его веса, например.
Я верю, что чем выше вес, тем выше
риск заболевания диабета.
И чем человек больше заболевает,
тем больше мы можем дать кредит
в банке.
Вот есть такая линейная зависимость.
И как решается задача машинного обучения,
берем какая-то модель,
например, такая.
И дальше мы смотрим,
значит, какие отклонения
в реальных значениях
вот те, которые предсказала
нам эта модель.
То есть, ну, фактически расстояние
от этих точек в этой прямой.
Вот параметры нашей модели так, чтобы
она наибольшим образом
инвестировала в себя эти даты.
А к чему это приводит?
Потому что мы
в приказных значениях A и B
имеем какие-то потери, как говорят,
отклонения наших предсказаний
от реальности.
И можно представить себе такую функцию,
которая называется «кустный патерий».
В данном случае это параметры модели.
Не все машинное обучение,
а вообще все машины,
включай не ровные сети,
глубокое обучение, и Бог знает что.
Оно базируется на том, что вам нужно
проявленизировать ваши потери.
Вам нужно чтобы
подобрать такие параметры,
чтобы ваше отклонение
желаемого, действительно
того, что ваша модель предсказывает,
было минимальным.
Поэтому задача минимизации какой-то функции
это то, что еще машинное обучение
вообще не должно исправиться.
И часто есть
пафос в новом алгоритме машинного обучения
не только в том, что
это круто описано алгоритмом,
что он какой-то выглядит
очень интуитивно и классно,
и мощно, но и в том, что
будет плохая функция потери,
была легко оптимизирована.
И если функция потери какая-то супер кривая
и ее супер плохо оптимизировать,
то это плохой алгоритм машинного обучения.
Формально абсолютно такая же задача.
Это минимизация некоторой функции
при некоторых привлечениях
на того, что мы можем
эту функцию подставлять.
Ну а в чем же тогда отличие
классической оптимизации в диске?
Вот классическая оптимизация, она как раз про функции,
которые можно вот так вот записать
с суммами
каких-нибудь элементарных функций,
электрических, полиномов, еще чуть-чуть.
И самое важное,
что в классической оптимизации есть
то, что переменная, и как правило,
в нашей функции, действительная.
А когда переменная объяснительная,
это значит, мы можем взять
и рассмотреть рядом
с нашим значением переменной
какое-то плюс-минус-эпсилонное значение,
или по-другому говоря,
производную функцию посмотреть, как она направлена.
И в зависимости от того,
как производная у нас ведет себя
в точке, мы понимаем, что нам
нужно, например, сместиться чуть левее,
потому что здесь мы немножко уменьшим
значение нашей функции,
а потом еще сместиться, а потом еще сместиться,
пока мы не попадем в локальный минимум,
в котором производная уже равна нулю,
и из него никуда не двинешься,
так чтобы чуть-чуть сдвинуться,
и чуть-чуть улучшить значение функции.
Ну и не удивительно вообще,
что на вот таких методах градиентного спуска
базируется практически вся
прикладная оптимизация.
Там разница в деталях обычно.
В дискретной оптимизации
принципиально отсутствует
такая возможность.
Какие примеры
задач дискретной оптимизации я мог бы привести?
Ну, любые задачи
на графах почти.
Задача о кратчайшем пути.
А у вас же был курс алгоритмов, да, какой-то?
А, ну вот, вы тогда уже кучу задач
знаете из дискретной оптимизации.
Например, задача о кратчайшем пути.
Хорошо.
А у вас была там задача
о кратчайшем островном дереве?
О, супер.
Задача...
Сейчас напомню все, да.
Значит, задача о кратчайшем пути,
задача о том, чтобы в заданном графе
между двумя вершинами
У и В
выбрать самый дешевый маршрут,
чтобы пройти из УВ.
Задача о кратчайшем островном дереве
или минимальном островном дереве,
minimal spanning tree.
Она про то, чтобы соединить вершины графа
все
под графом.
А связанный под графом дерево,
наиболее экономный,
которое ничего лишнего не содержит.
Найти такое островное дерево,
которое содержит все вершины графа
в себе и при этом тоже самое,
имеет минимальный вес.
Да, минимальный вес.
Посмотрите-ка, тоже ведь
можно формально сказать,
что мы имеем дело с минимизацией функции.
Только вот вопрос, что у этой функции
является параметром.
Ну, например, задача о кратчайшем пути.
Мы могли бы сформулировать так.
Минимизировать стоимость.
Ну, функция стоимости
или верха, она часто очень обозначается вот так.
По-английски путь.
Где в качестве путей
мы рассматриваем только пути, соединяющие
две фиксированные вершины.
Я не знаю, как очень формально записать.
Запишу это вот так.
П – это путь между У и В.
У нас тоже есть некое множество объектов
ограниченное.
Вот как-то, чтобы мы рассматриваем
только такие объекты, только такие пути.
И мы на этом множестве выбираем
такой объект, на котором
некоторые функции лучше всего.
То есть эта функция принимает наименьшее значение.
Но как бы понятно,
что даже
учитывая, что вы курс алгоритмов слушали,
там у нас
мы не говорим о производных каких-то.
Там у нас абсолютно какие-то отхог
такие процедуры.
Делай так, делай так, делай так.
Но мы доказываем их корректность, естественно.
Но для каждой задачи придумываем что-то более-менее свое.
И находим точное решение этой задачи.
У нас там нет никакой возможности
взять, например, путь в графе
и сказать,
а возьму-ка я
отклонюсь от этого пути
чуть-чуть, немножко отклонюсь.
Потому что
это нонсенс какой-то. У нас либо есть
ребро, либо нет. Что значит плюс-минус?
Это ребро плюс-минус что-то.
И поэтому
методы, основанные на градиенте,
на производной, они в дискретной
оптимизации в принципе не то,
что не работают, они не определены.
Не понятно, что такое градиент.
И нам
приходится придумывать какие-то свои
процедуры.
Очень часто эти процедуры внешне
выглядят как созданные
специфично под каждую задачу в отдельности.
И вот как дискретная математика,
у вас была дискретная математика?
Да.
Вот она
на первый взгляд выглядит как
такая неединная
какая-то область.
На одном семинаре приходим, там
мы рассказываем про графы. На другом семинаре,
на другой семинар приходим, там у нас комбинаторика.
На третий семинар приходим, там у нас кинуть
булевские функции.
На четвертом семинаре еще что-то.
Но в какой-то момент
этот багаж начинает
как-то взаимно проникать
и
на самом деле
становится единым. И если вы
смотрите исследовательские работы уже,
то там постоянно
исследуем графы, об них возникают булевские функции.
Или наоборот.
Исследуем булевские функции, а по сути исследуем
графы Булева Куба.
В общем, короче говоря, там единство у нас
возникает. Просто оно очень часто возникает
на уровне,
который находится чуть-чуть на шаг
за обводным курсом
по дискретной математике.
В дискретной оптимизации, на первый взгляд,
тоже может показаться, что мы
рассматриваем некоторые не связанные
между собой задачи.
И рассматриваем какие-то ивристики под каждую из этих
задач. Но на самом деле
мне кажется, что в дискретной оптимизации
как раз я смогу раньше показать,
что у этих вещей
очень много общего.
Значит, мы с вами
не будем брать задачу о кратчайшем пути
и задачу о минимальном ростовном дереве
как пример, на которых мы будем какие-то ивристики
рассматривать. Почему?
Потому что в этих задачах и так все понятно.
У нас есть быстрые алгоритмы для их решения.
Для задачи
о кратчайшем пути есть
Dextre, для задачи о минимальном
ростовном дереве есть сразу несколько
жадного типа алгоритмов, которые корректно
работают.
Краскол, есть Барубка,
есть Прим, я не знаю,
какие из этих алгоритмов рассматривали?
Все. Вот нам Прим понадобится
особенно. Мы будем
с вами рассматривать задачки, которые
трудно решить.
А у вас было понятие НП-трудных задач?
Нет?
Да, НП-трудных.
А, вы будете?
НП-трудные, которые
скорее всего не решаются за пыльным.
Если П,
то решаются за пыльным.
Мы с вами скорее
будем рассматривать задачки,
которые трудно
решать.
Точный ответ в которых
никто не знает, как получать
быстро на любых входных данных.
Вот.
Большая часть задач, которые
мы будем с вами рассматривать,
они принадлежат классу НП-трудных задач.
То есть, если вдруг
окажется, что какую-то из этих задач
научится решать в общем
виде за полемиальное время,
даже за Н100
какой-нибудь,
то тогда, скорее всего,
и все остальные задачи
тоже будут разрешены
за полемиальное время.
Но поскольку к текущему моменту
ни для одной из НП-трудных задач
никто еще не смог придумать
полемиальных алгоритмов, то очень многие верят,
что их и не существует.
Раз столько задач и ни для одной из них
в течение нескольких лет никто ничего не может придумать,
ну, так, это все-таки не одна
гипотеза Риммана, да, изолированная,
а это там с тысячу,
несколько тысяч уже разных задач
и ни в одной нет подвижек.
Только большая уже уверенность, да, в том, что там
что-то не так.
Значит,
так вот, НП-трудные задачи,
какие мы с вами будем рассказывать?
Ну, например, вот задача о рюкзаке.
Рюкзак.
А вы для рюкзака
какие алгоритмы знаете?
А знаете вообще какие-нибудь?
А, вот, отлично, динамическое программирование.
Сейчас, сейчас вспомню.
Вот, для рюкзака вы
рассматривали, скорее всего, действительно
алгоритмы динамического программирования.
Рюкзак это просто
главная иллюстративная задача.
Вот, в обводных курсах
рассматривают динамику, да, ее листвуют на
рюкзаке. Я напоминаю, о чем
задача вообще рюкзака.
Значит, эта задачка формулируется
так. У нас есть набор предметов,
у этих предметов известны стоимости
и веса.
Ну, стоимости, давайте я буквами
П обозначу, prices, да, такие
ценные, ценные, P1, Pn.
Ну, какие-то
положительные и действительные числа.
И веса.
W1,
и так далее Wn. А еще у нас есть
рюкзак, у которого предельно
допустимая вместимость, некая
W большая. И нам
нужно выбрать под множество предметов,
которые мы положим в рюкзак так, чтобы
его не перевесить, чтобы он не
разорвался.
Но чтобы при этом ценность этого рюкзака
была наибольшей возможной.
Вот, здесь фактически речь идет
о выборе
некоторого под множество. Мы
выбираем такое под множество предметов,
под множество индексов от 1 до n.
Такое, что
сумма весов
предметов, попавших
в наш рюкзак, не превосходит
максимально допустимого
веса. И вот при всем при этом
мы минимизируем
овиноват, не минимизируем,
максимизируем.
Чтобы про минимизировать, достаточно ничего в рюкзак
не класть, целее будет.
А вот мы максимизируем
сумму стоимости
предметов, попавших в рюкзак.
Но тоже видно, что
это задача оптимизационная.
Мы максимизируем, значит, некоторую
функцию, которая
предельна на под множество, множество
от 1 до n. С некоторыми
дополнительными ограничениями
под множество берутся.
Но вы не переживайте, мы не будем каждый раз
формулировать в самом общем
виде, какую функцию мы
максимизируем, минимизируем
и на чем именно.
Мы о задачах, как правило, будем говорить
все-таки в их содержательной, так сказать,
исходной реальности, в которой они
поставлены. Вот про предметы будем говорить,
про то, что мы кладем в рюкзак
или не кладем, и так далее.
Для этой задачки
алгоритм динамического программирования
состоит в том, что мы
строим такую таблицу
и по одному измерению, вы вот
этого можете не записывать. Я вам напомню,
мы пишем про 1.
Давайте, да.
Мне просто так
не хотелось раньше времени стирать.
Хорошо.
Вот.
Это главное, я это пока оставлю.
Значит,
так вот динамическое программирование,
для этой задачи,
это такая табличка,
строится,
в которой мы говорим, что
вот здесь, вот в этой строке мы рассматриваем
только под множество из первого предмета.
Во второй строке мы рассматриваем
только под множество из первых двух
предметов и так далее.
Пока дойдем до последней строки, нам уже разрешается
рассматривать любые под множество
из всех предметов.
И дальше мы
вот здесь, по этому измерению,
мы откладываем максимально
допустимый вес рюкзака
и в табличке пишем
в каждой клетку максимальную
стоимость рюкзака,
которую можно получить
вот с таким ограничением на вес
и
при условии, что можно использовать
эти предметы. Или можно
по-другому. Можно вот здесь
табличку организовать по стоимости,
по максимальной
стоимости,
даже, наверное, по сумме стоимости,
по сумме всех стоимости,
и в табличку записывать в клетке
минимальный вес,
который занимает
рюкзак, имеющий не менее
чем такую стоимость и использующий
предметы из этого под множества.
Как бы вы не организовывали вот эту табличку,
так или иначе, к сожалению, в этой
табличке, ну давайте я вот первый вариант
с весом
напишу. В этой табличке
одно из измерений это
вот это вот w большое.
А почему такой алгоритм не полиномиальный?
Ну, потому что полиномиальный алгоритм
я думаю, что если у вас еще
эта тема не развита
в лекциях
по другому курсу, то пока что вот про это
надо сказать. Полиномиальный алгоритм
он полиномиальный по размеру своего входа.
И давайте
вспомним, как мы числа записываем. Мы же числа
записываем в памяти компьютера в
двоичной записи. И число w
оно будет записано в сколько битов?
В логарифм двоичный от w.
Получается, что
размер входа задачи о рюкзаке
это вовсе не сумма вот этих
всех чисел, например, а сумма их
логарифмов.
Само число w
относительно не только своего логарифма,
но даже относительно суммы всех вот этих
логарифмов запросто может оказаться
специальным. Поэтому задачи о
рюкзаке говорят, что вот это
для нее. Это алгоритм
псевдополиномиальный.
Псевдополиномиальный алгоритм это такой, который
имеет полиномиальную оценку не по
размеру входа задачи,
а по абсолютному размеру чисел,
которые участвуют во входе.
Ну или можно сказать, если бы мы числа записывали
не в двоичной записи, а
в унарной записи, унарная
запись числа это очень забавная запись, когда
число записывается единичками, и этих единичек
мы пишем столько, каково число.
Вот если бы все числа на входе записывались унарная,
то тогда этот алгоритм был бы
полиномиальный относительно такой
записи входа. Но это довольно
сильное предположение.
Оказывается, что вот несмотря на существование
такого алгоритма, сама задача о рюкзаке
является НП трудной. Если бы
кто-то для рюкзака предложил алгоритм
полноценно полиномиальный, а не просто
псевдополиномиальный, то тогда
много чего в жизни бы поменялось.
Так вот, задача о рюкзаке,
оказывается, для нее никто не
знает на текущий момент полиномиальных
алгоритмов, которые бы точно решали эту задачу.
И мы с вами не узнаем.
И мы с вами не узнаем.
Но мы будем что с вами делать?
Ладно, об этом чуть попозже.
Перед тем, как
обнадеживает нас,
что мы, собственно, будем знать,
я давайте еще пару задач сформулирую.
Задача о рюкзаке
есть.
Вторая задача на графах.
Задача камевоежора,
ТСП.
Она
расшифровывается как traveling
salesperson problem. До определенного момента
она расшифровывалась как traveling
salesman problem, но потом, как вы понимаете,
решили, а женщины не могут быть
продавцами,
камевоежерами.
И она сейчас известна
под именем traveling salesperson problem.
Но, кстати, ничего плохого в этом нет.
Главное, что осталось
то же самое сокращение,
не пришлось
все менять.
Я эту задачу и называю обычно,
ТСП.
Кстати говоря, в советских учебниках эта задача,
по крайней мере, в одном, который я читал,
она фигурировала под именем задачи
о разъездном
киномеханике.
В советское время
в сельских
селах были клубы, сельские клубы,
куда могли приезжать
какие-нибудь электрообщества, знания,
могли приезжать фильмы
показывать. Там был кинопроектор в клубе,
можно было из города, мог приехать
киномеханик, соответственно, и показать кино.
Значит, широким массам.
Так вот, задача
такая. У нас имеется
некий районный центр,
райцентр какой-нибудь,
и есть
села, расположенные
в разных точках
на карте.
Задача состоит в том, чтобы
разъездному киномеханику помочь
в каждом селе показать
по одному разу кино и вернуться
к себе в райцентр.
Соответственно, в терминах теории графа
задача состоит в том, чтобы
пройтись
по одному разу
через каждую вершину графа
и вернуться в исходную точку.
В терминах теории графов
я думаю, что вы знаете, что это называется
гамильтоновым циклом.
То есть задача ТСП
состоит в выборе самого кратчайшего,
оптимального, хорошего, дешевого
гамильтонового цикла в заданном графе.
Чего у нас еще?
Какие задачки на графах?
Вот задача дерева Штейнера, например, еще есть такая.
Задача о дереве Штейнера.
Эта задачка состоит в том,
чтобы в заданном графе
связать
но только не все вершины,
как это происходит в минимальном оставном дереве,
а связать вершины
только выбранного какого-то
подможества.
То есть в заданном графе
мы говорим, что нам нужно
связать вот между собой.
Ну, например, вот эти вот пять вершин.
Они для нас очень важны.
Между ними должны быть связи.
Через промежуточные вершины, возможно.
И задача состоит в том,
чтобы выбрать в графе подможество
ребер такое, чтобы эти
вершины вместе
связать.
Это множество
ребер может сильно-сильно
отличаться от минимального
дерева. И многие вершины могут
быть вообще не
попавшими в это дерево Штейнера.
То есть дерево Штейнер – это
задачка, которая решается для графа
и для некоторого подможества вершин в этом графе.
Вопрос сразу к вам.
Понимаете, что задача о
минимальном основном дереве является
частным случаем задачи о дереве Штейнера?
Почему?
Да, когда множество
так называемых терминальных вершин
совпадает с множеством всех вершин.
Ну, взвешенный, да.
Понимаете,
что задача о
кратчайшем пути является частным
случаем задачи о дереве Штейнера?
Ну да.
Значит, берем две вершины,
терминальное множество вершин, и все.
Естественно, что кратчайший способ их
связать, вернее, самый дешевый способ
их связать – это взять кратчайший путь между ними.
Так что вот есть два
крайних случая, которые
очевидно полинамиально разрешимы
у задачи дерева Штейнера. В промежутке
не понятно, как решать.
Ну, опять-таки, не понятно, как точно решать
за полинамиальное время.
Ну, помимо
вот задач на графах,
не знаю, много ли мы тут еще
рассмотрим, но еще вот
приведу пример задачки, тоже
из другой немножко оперы,
которую мы в курсе рассматриваем
в силу ее простоты, на такой яркости.
Задача упаковки контейнера –
бинпекинг.
В этой задачке дан набор
чисел от нуля до единицы.
Все числа от нуля
до единицы.
Здесь вход еще веселее, чем
в задаче о рюкзаке.
В задаче о рюкзаке у нас хотя бы
W большое какое-то, но у нас для каждого
предмета хотя бы два числа заданы.
А в задаче бинпекинг у нас просто
заданное для каждого предмета одно число.
Нам требуется упаковать
эти предметы в минимальное число контейнеров.
То есть раскидать
эти предметы по группам
так, чтобы внутри каждой группы
сумма всех предметов
была не больше единицы.
Задача
прооптимизировать
тоже.
Минимизировать число
контейнеров, в которые можно
уместить все эти грузы, так чтобы ни один
контейнер не превышался.
Актуальная задача,
но безусловно актуальная.
В общем, мы с вами
упакуем
на складе какие-то коробки.
И вот как мы
можем минимальное число коробок
упаковок, чтобы все запаковать,
что нужен для отправки в одну и ту же сторону.
Ну так вот.
Все перечисленные задачи
это не те задачи, которые мы в курсе
будем решать.
По ходу дела возникнут еще
дополнительные всякие задачи.
Это просто примеры, разношерстные задачи,
которые в частности
нам встретятся.
Одну задачу я еще не упомянул, потом упомяну.
Это про
покрытие.
Последняя задача, которую я здесь
упомяну,
это задачка, которая называется задача
о покрытии.
Задача о покрытии.
Чтобы мы просто примерно, значит,
то есть смотрите, у меня цель на самом деле
сегодня какая? Описать какого типа задачи
мы будем решать.
Что мы про них именно будем говорить, с каких
сторон мы будем их вот как-то
рассматривать.
И тогда я смогу перейти на самом деле
к тому, как закрывать этот курс.
Как ни странно.
Увидите, почему.
Значит, последняя задачка,
задача о покрытии.
Задача о покрытии в общем виде
может быть сформулирована так.
У нас есть
значит,
у нас есть
матрица, которая
задает эту задачу о покрытии.
И в этой матрице, это матрица
из нулей единиц. Ну и там из плюсов
и минусов. И мы говорим,
что строка матрицы покрывает столбец,
если на их пересечении стоит
единичка.
Задача стоит в том, чтобы покрыть
все столбцы, взяв некоторые строки.
Не все, но некоторые. То есть нам нужно взять
какое-то подмножество строк,
вот сказать, что мы только эти три
берем, так чтобы в каждом столбце
обязательно нашлась единичка
на пересечении с хотя бы одной
из строк выбранного множества.
Все столбцы нам нужно
с вами покрыть.
На пересечении столбца
и строки стоит единица,
тогда и только тогда, когда мы
условно говорим, что строка покрывает
столбец.
Нам нужно выбрать только некоторые строки
в матрице, как можно меньше их,
чтобы покрыть все столбцы. Пример.
Ну, например, мы с вами
проводим рекламную компанию.
И нам нужно охватить некоторую аудиторию.
И вот
отдельные личности нашей аудитории
это вот эти столбцы матрицы.
Вася, Петя, Коля,
и так далее.
И у нас есть некоторые средства, чтобы им
показать рекламу. Ну, например, инфлюенсеры
в Инстаграме.
И мы понимаем, что у каждого инфлюенсера
есть своя аудитория. Например, у вот этого
инфлюенсера, не знаю,
кто там инфлюенсеры,
есть...
Миша Литвинов.
Не знаю, кто это такой, но вот Миша Литвинов.
И
у них есть соответствующие
подписчики.
И мы понимаем, что если мы закажем инфлюенсеру
рекламу, там какой-то промоушен,
то вот эти подписчики,
это под множество подписчиков, узнают
об этом продукте. Соответственно,
у каждого инфлюенсера есть свои запросы
на то, сколько он
или она хочет за вот
это продвижение.
И мы хотим, минимизируя свой рекламный
бюджет, сделать так, чтобы
покрыть всю аудиторию.
Ну, это были, естественно, пример такой,
то есть условный, потому что вряд ли нам кто-то
даст доступ к полной базе того,
кто у кого подписчик в Инстаграме.
Но почему нет? То есть я
вполне верю, что сама социальная сеть
внутри себя для алгоритмов
планирования рекламы, она может
решать какую-то такую задачу.
Ну или более такая
задача на
меньших масштабах.
Например, по столбцам у вас какие-нибудь
компетенции, которые требуются для
изменения какого-то проекта, а по строчкам
у вас люди, которые обладают разными
компетенциями, вам нужно набрать команду,
которая бы способна была выполнить этот
проект. Или по
столбцам у вас вычислительные задачи,
а по строчкам у вас какие-то
возможные ресурсы, которые
нам необходимы для решения
этих задач, или там процессоры, на которых
могут выполняться эти задачи.
Вам нужно выбрать минимальное число
вычислителей для того, чтобы
все эти задачи рано или поздно
обсчитать. Да, ну условно,
там оборудование и задачи,
не обязательно компьютеры.
Значит, это задача о покрытии,
о том, как покрыть ваши
необходимости наименьшим
количеством ресурсов,
затратив наименьшее количество
строчек матрицы.
Вот это называется общей такой задачей о покрытии.
Вообще, заметьте, что
в дискретной активизации
мы уже видим два таких
важных класса задач. Задача упаковки
и задача покрытия.
Задача о...
Ну, помимо задачи об упаковке в контейнеры,
задача об упаковке апельсинов в ящик.
Вот как бы напихать побольше
в ограниченный объем.
Это задача об упаковке.
А задача о покрытии, это, например,
задача о том, как
разогреть комнату круглыми.
Вот здесь, значит, нам можно,
чтобы ковры перекрывались,
то есть нам важно, чтобы просто каждая точка
комнаты была у нас покрыта.
Вот такая иллюстрация, очень
общая интуитивная задача
о покрытии, любой.
Вот иллюстрация задачи об упаковке.
Рюкзак, это что за задача в таких терминах?
Об упаковке.
Мы напихиваем в рюкзак
не превосходя его максимально
допустимого веса.
Задача о
дереве штейнера, в каком-то смысле задача
о покрытии, потому что нам надо
покрыть деревом
некоторые вершины, терминальные.
Нам нужно обеспечить эти вершины,
а остальные как получится.
Задача binpacking, задача об упаковке,
очевидно, в контейнеры, так и называется.
Да, а это покрытие.
ТСП.
ТСП, непонятно, очень структурно
сильное ограничение, что у нас должен быть
именно гамильтонов цикл.
С одной стороны, это задача
о покрытии, потому что это цикл,
покрывающий все вершины графа,
а с другой стороны, это задача об упаковке,
потому что из каждой вершины в цикле торчит
не больше и не меньше двух ребер.
Это такая задача
на стыке и покрытии и упаковки,
очень сильно структурно ограниченная.
И, кстати говоря,
может быть отчасти поэтому задача ТСП,
хотя она такая...
Кажется, что у нее непосредственных
применений может быть поменьше,
то есть общая задача о покрытии какой-нибудь.
Но она является самой,
пожалуй, популярной
иллюстративной задачей
для того, чтобы обсуждать ивристики
решения общих задач
дискретной оптимизации.
И она исторически тоже довольно древняя,
поэтому она так сложилась, что
стоит на перепутье много чего,
и мы ее часто будем к ней возвращаться
как иллюстративная хорошая задача.
Так вот, все перечисленные задачи,
даже если они сами
по себе, может быть, еще не очевидно,
что они прям важные,
но я думаю, что без труда вы увидите
какие-то элементы этих задач
в очень многих жизненных постановках,
которые реально кажутся, что надо уметь
решать на практике.
И так и есть.
Никто на практике не сталкивается
конкретно с задачей камевые жоры,
например, или конкретно с задачей
бинпекинг, а вот с сочетанием
этих требований,
сталкиваются
и ивристики при этом нормально комбинируются,
которые мы с вами будем рассматривать
для этих задач. Так что это абсолютно
практическая тема.
Значит,
мы с вами, поскольку эти задачи
НП трудные,
не можем рассчитывать на то, что вот мы сейчас с вами
разберем на лекциях быстрый алгоритм
точного решения
каждой из этих задач. Конечно, нет.
Мы с вами будем к этим задачам
подходить с разных сторон.
Чем-то придется жертвовать.
Чего у нас там нету?
Нету полинемиального,
точного алгоритма
решения задачи в общем случае.
У нас есть требования полинемиальности,
точность и способность
решать задачи для любых входных данных.
Но если одновременно
невозможно удовлетворить этим трем
требованиям, ну или скорее всего невозможно,
то значит, каким-то хотя бы одним из них
надо будет пожертвовать. И соответственно,
у нас возникает в курсе три таких
тематики. Первая тематика
это тематика неточного решения задачи.
Когда мы говорим, мы с вами
эту задачу будем решать на любых
входных данных, мы ее будем
решать быстро, но
точное решение получать. Будем получать
решение с какой-то погречностью.
И тогда мы сегодня проходим к тематику
approximation algorithms.
Здесь есть вполне свои теоремы.
То есть здесь есть конечно иевристики,
есть теоремы, которые
доказывают действительно, что
вот определенная иевристика позволяет
вам решить задачку, ну скажем,
упаковать рюкзак.
Так, чтобы стоимость этого
рюкзака была не меньше половины
от самой большой оптимальной стоимости.
Ну не бог весть что, так может
показаться, да, половина.
Но это же не значит, что иевристика
всегда равна тематике.
Это же не значит, что иевристика всегда работает
так же плохо, как худший случай,
когда рассматривается в доказательстве.
Это знаете, как вот, когда мы
доказываем сложность алгоритма
в курсе алгоритмов, мы доказываем чаще
всего, опираясь на худший случай.
Максимальное число операций, которое может
там у нас случиться.
Но на практике же чаще всего
бывает получше.
И то же самое
надо иметь в виду, когда мы
про approximation algorithms говорим.
Мы будем получать некие оценки качества
гарантированные, но алгоритмы
на практике будут работать, как правило,
гораздо лучше, чем вот эти
вот оценки теоретически.
Значит, второй вариант,
чем мы можем пожертвовать. Мы можем
способности решать задачи в общем случае.
То есть мы можем как-то
пытаться рассматривать
сущности, например,
решать задачу, ну скажем,
об покрытии не для всех
возможных матриц, а для матриц
с какими-то дополнительными свойствами.
Что-то дополнительно требовать про задачу.
Здесь можно сказать,
что мы рассматриваем
релаксации задачи,
хотя это не совсем то, наверное,
но в общем изменение задачи.
Давайте я так напишу. Изменение задачи.
Небольшое изменение задачи.
Или сужение задачи, например,
только какие-то входные данные
со специальными ограничениями.
Но на самом деле иногда мы будем делать и то, и то.
Например, есть общие задачи
камевые жоры. Задачи камевые жоры
это задача для
произвольного графа.
Но есть очень важный
частный случай задачи камевые жоры,
практически важный,
называющий симметрические задачи камевые жоры.
Когда граф удовлетворяет неравенству
треугольника, веса на ребрах
удовлетворяет неравенство треугольника.
То есть пройти напрямую
из пункта А в пункт С
не дороже, чем пройти через любой
фиксированный пункт.
Это очень часто естественное
свойство графа стоимости.
И вот для таких графов
тоже можно рассматривать
аппроксимационные алгоритмы. На самом деле
для задачи ТСП
аппроксимационные алгоритмы известны только
для метрического случая, но можно еще
более сократить и рассмотреть, например,
Евклидовы графы. Это графы у которых
вершины, это точки прямо на плоскости,
а ребра это
отрезки между точками. Соответственно
вес ребра это просто Евклидовы
расстояние между двумя точками.
Задача тоже в принципе практическая,
потому что очень часто можно приблизить
реальные какие-то графы
Евклидовым случаем.
Ну да ладно, не только камевые жоры будем решать.
Третий вариант
задачи это
представить полинамиальностью.
То есть рассмотреть алгоритмы, которые
вообще не притягивают на то, чтобы в общем
случае быть полинамиальными.
А с чего бы это? Мы будем скорее
говорить о том, что как правило эти алгоритмы
будут достаточно быстрыми.
То есть ничего не будем говорить про формальную
оценку времени работы.
Но тем не менее это не значит, что мы не будем
пытаться всеми расступными нарфилами
сократить время работы алгоритма
на практике. Будем, конечно.
Но условно можно назвать
этот пункт переборными алгоритмами.
Такими алгоритмами
исчерпывающего поиска.
Алгоритмами исчерпывающего поиска.
Все по-английски, кроме второго пункта.
Не знаю я, как его нормально
сейчас пока сформулировать,
но можно было бы назвать релаксацией.
Мы будем этим заниматься.
Значит,
мы с вами
казалось бы, сейчас пока
имеем полную
разношерстность. У нас есть
несколько разных задач,
много задач. У нас есть много разных
подходов. А знаете, что
забавно, что есть какие-то
общие темы, которые объединяют
и несколько задач сразу, и несколько
подходов. Например,
оказывается, не то что оказывается,
сейчас давайте
представим себе
один из возможных подходов
к хорошей организации
исчерпывающего перебора.
Вот есть задача
о рюкзаке. Как организовывать
в ней полный перебор?
Очевидно. Давайте рассмотрим два случая.
Класть первый предмет в рюкзак или не класть
первый предмет в рюкзак.
Самое интересное в переборе
это то, как вы организуете так называемое
перебор. То есть, как вы
прогнозируете, какой именно
из двух вариантов выбора,
какой окажется более
победоносным,
более плодотворным.
И если вы грамотно
организовали оценку
качества решения
в каждом из этих двух случаев, то ваш
исчерпывающий перебор оказывается не таким
уж страшным. Но представьте, что у вас
есть все множество
рюкзаков.
Все-все-все, в которых там
всевозможные предметы набраны.
Главное, чтобы перевеса не было.
Вот это все пространство решения.
Вы где-то здесь, в этом стоге, пытаетесь
попасть в оптимальный рюкзак.
Вы говорите, давайте рассмотрим
ситуации. Не берем первый предмет,
но это соответствует тому,
что вы делите эту область
виртуально на две части,
и говорите, либо идем сюда, либо идем сюда.
И представьте, что вы каким-то
образом, евристически пускай,
научились оценивать
стоимость рюкзака
при условии, что вы в него положили
первый предмет. Например, вы говорите,
если первый предмет у меня очень тяжелый,
если я положу первый предмет
в рюкзак, то там сразу останется всего
чуть-чуть веса
на остальные предметы, и много я уже
не наберу. Вы, может быть,
можете получить какую-то верхнюю
оценку на стоимость рюкзака, вот в этом
случае. А здесь, допустим,
вы можете, пока что не тыкаясь в
оптимальный какой-то рюкзак,
допустим, вы какую-то
евристику знаете, как получить
не самый плохой рюкзак. Чисто
евристическое какое-то решение, знаете, этой
задачи. И вы говорите, вот если я
возьму вот такой вот рюкзак,
например, здесь у нас верхняя оценка,
пускай на стоимость рюкзака получилась
не больше, чем 100 рублей.
А здесь вы говорите, вот у этого
рюкзака, у него
еще где-то по-настоящему
оптимальный рюкзак, у которого стоимость еще
выше. Но очевидно, что если вам
известна вот такая информация,
то вы можете всю вот эту вот половину вашей
области поиска, да,
пространства решений, как ни назови,
отбросить и дальше в нее никогда не заходить.
Вот. И
в исчерпывающем поиске очень
важно уметь качественно
оценивать сверху и снизу
стоимости ваших
оптимальных решений.
И знамените, что для того, чтобы снизу
оценить, например, стоимость рюкзака
оптимального, достаточно
иметь просто некоторые хорошие эвристики
для того, чтобы набирать рюкзак.
То есть нам помогают
приближенные алгоритмы,
эвристические алгоритмы, не только
приблизительно решать задачу,
но вот это приблизенное решение задачи
мы можем использовать в качестве оценок
при организации
исчерпывущего поиска.
И вот эта штука помогает вот здесь.
Ага.
Да, эвристика это некий
алгоритм, который не претендует
на точное
и быстрое одновременно решение задачи.
То есть мы
в общем, про какие-то эвристики мы можем
доказывать, что они работают
неплохо, про какие-то эвристики мы вообще
ничего не доказываем, просто говорим,
на практике они работают неплохо.
Вот.
Ну и эвристики, как правило, они
основаны на какой-то, знаете,
естественной такой интуитивной идее.
Например, жадная эвристика.
Вот можно сказать, что алгоритмы
Красова, Трима, Боровки, они все
основаны на вот жадном подходе.
Идея такая в голове.
Вот жадно, давайте выбирать дерево.
Про эвристика, да,
но про нее в конкретном случае
минимально формально доказать,
что это точно, она приводит
к точному решению задачи.
А большинство эвристик, которые мы с вами будем
рассматривать в нашем курсе,
всего трудности задач просто мы не можем
доказать, что они всегда
быстро и точно работают. Да, ну вот
работают с какой-то погрешностью, например,
как мы вот в этой теме доказываем.
Так вот.
Получается, что
мне кажется, что идеи
из первого пункта помогают нам
организовать хорошо третий пункт.
С другой стороны, а вот про
изменение задачи.
Значит, давайте представим, что мы
умеем не очень хорошо,
например, оценивать
по какой-то причине
стоимость рюкзака, в котором
лежат предметы не больше, чем там
суммарно 50 килограмм,
но почему-то умеем
оценивать стоимость рюкзака, который
по весу не больше 60 килограмм.
Ну и что? Мы все равно можем
использовать одно для оценки
другого, вот так или иначе.
И изменение задачи, исправление
двух условий задачи, может нам
помочь получить опять-таки какую-то
оценку на максимальную стоимость
рюкзака, например.
На самом деле, и вот этот вот
пункт, он тоже помогает нам в третьем
пункте. Не говоря
уже о том, что
эти два пункта тоже связаны. Мы с вами
посмотрим. Мы будем с вами со следующего
раза уже рассматривать тему релаксации.
Линейная релаксация. И
это общий принцип, который
позволяет много разных задач
и очень неплохо решать какие-то
доказуемо хорошо, какие-то
правила. И вот
увидите уже, что есть
на самом деле здесь общие методы.
Так что децентральная оптимизация
это такая единая все-таки дисциплина.
Проходишь чего-то в этой теме,
а потом оказывается, что оно где-то
пригождается еще, и причем много где.
Проходишь какую-то интересную
такую особенность
задачи ТСП, например, да,
что в задачи ТСП помогают минимально
деревья. Так они, оказывается, в дереве штейнеры
помогают. Оказывается
парасочетание, например. А знаете, что такое
парасочетание? Отлично.
Да, набор реберографа без общих концов.
Оказывается, парасочетание встречается
в задачах вершина покрытия.
Встречается даже вот здесь, казалось бы,
бинплэкинг. Это вообще упаковка
контента. Причем там парасочетание?
Да, и встречается еще и вот здесь.
Но только в рюкзаке разве что не
встречается парасочетание.
Короче говоря, есть вот какие-то
неожиданные совершенно
и пересечения, и
общие, так сказать, корни
у перечисленных задач.
И действительно, я надеюсь,
что это как-то в голове,
к концу курса сложится в
достаточно интересную такую общую
картину, как это все переплетается.
Ну и, наверное,
можно четвертым пунктом здесь,
значит, четвертым пунктом
хотелось бы мне
показать,
и какие-то навыки
не было.
Это самый хорошо масштабируемый
вариант решения
сложных задач дискретной
оптимизации, про которые
мы отдельно поговорим. Я сейчас
не буду тратить время на это,
но по ходу курса разберемся.
Теперь
как наш курс можно сдавать?
И вот про курсеру
я тоже сейчас скажу.
Значит,
получается, видите,
много задач, много подходов. Вот курс
на курсе, который построен по такой же
абсолютно схеме,
в этом курсе рассматривается
несколько классических задач,
трудных задач дискретных оптимизации,
и по ходу курса рассматриваются разные
подходы общие.
В принципе, каждую из подходов можно применить
каждой из задач. Вот такая сетка
возникает.
По одной,
по одному измерению
у нас подходы, здесь
подходы,
какие-то евристики.
Привыкаем к слову «евристика»,
употребленному через каждые
пять слов.
А здесь у нас задачи.
Вот задачи,
разные подходы.
И внутри каждой из этих групп
свои подходы тоже есть.
Вот у нас такая сетка. Вот мы по ходу курса
явно разбираем
некоторые узлы этой сетки,
применение каких-то подходов
внутри каких-то задач дискретной оптимизации.
Ну и вот хочется надеяться,
что в вашей голове эта вот сетка
образует
такую равномерную неравную сетку
в вашей голове, так что вы сможете
более-менее взять любую задачу,
встретившую вам дискретную оптимизацию,
и попытаться понять,
как в ней мог бы выглядеть тот или иной
подход общий.
Та же самая идеология курса, она
используется Паскалем
Ван Гентликом в курсе
на Курсере, который так и называется,
«Дискретная оптимизация», «Discrete Optimization».
Значит, этот курс
такой
тяжелый на
программирование,
там все, что вам нужно будет
делать, это реализовывать программы,
писать программы,
которые решают трудные задачи дискретной
оптимизации.
То есть наш курс
такой же.
В нашем курсе для того, чтобы сдать курс,
нужно будет писать программы, которые
применяют эти регулистики.
Дело в том, что
с моей точки зрения
говорить на том объеме
и в той полноте,
что мы это делаем,
на теоретическом уровне довольно бы скалково,
но
гораздо приятнее
действительно какую-то вещь
и увидеть, что классно она работает.
До того, как мы это заходили,
мы не могли получить
решение вот такое классное,
а теперь мы получаем в два раза класснее
решение, чем было, в два раза более
крутой рюкзак, например, или там
«путиками выезжора»,
в два раза более короткие, чем до этого.
И это, ну не знаю, мне кажется,
что это довольно прикольное ощущение такое.
Вообще в дискретной оптимизации
такая идеология,
она отличается от заданий
курса алгоритмов, вот большинства.
Вот в курсе алгоритмов чаще всего
задания какие?
Закодируйте алгоритм Дэйкстре
так, чтобы он прошел все 20 тестов.
Вот один тест не проходит,
ну, плохо, вот все, значит, он
корректно написан.
Дискретная оптимизация, она ближе к жизни.
В жизни нет, как правило,
черного и белого. У нас есть какое-то
приближение к идеалу, последовательный
прогресс такой поступательный.
Вот самое вот Гентенрик реализует
в своем курсе. Вы узнаете по ходу
курсы разные ивристики и применяете
их все к новым, к новым задачам
и к старым задачам, к которым вы уже
чего-то написали, добавляете
вновь узнанные ивристики
и улучшаете постепенно
свой результат.
Кстати говоря, в курсе Гентенрика
я, например, сам максимальный балл
не набрал. Вот, но я как бы
это пытался сделать едино,
но вот просто курс не
самый простой, который может быть.
Это ничего страшного,
потому что если я не набрал максимальный
балл, я не думаю, что это что-то говорит
о фистехах. Вот.
Вполне возможно вы можете набрать.
И
это первый курс.
Его, если вы сдаете, то можно
получить зачет по нашему курсу
без проблем. Просто в конце семестра
вы пишите, что я сдал там или сдала курс
на курсере, и мы с вами
беседуем по результатам
отдачи. Оценка, которую вы получили там,
она переносится просто в наш курс.
В случае, если вы защищаете
свой плод. Да?
Вот я здесь не могу
сказать. Понимаете, я вот не следил
давно за коммерческими
подвижками курсеры, что они там
закрывают, делают там
Paywall, что не закрывают.
Я так понимаю, что вы
можете просмотреть все равно без проблем
видеоматериалы и скачать
хотя бы датасеты, на которые вам
надо решать.
Только сертификат.
То есть вы можете в принципе отправить
на проверку задания в любом случае.
Отлично.
Значит, проблем нет.
Но сертификат не надо мне показывать.
Мне надо будет показать просто ваш дашборд.
Как у вас выглядит
ваш вид курсера
по итогам сдачи
гента Энрика.
Это первое.
Один к одному.
Там 5 или 6
заданий, по-моему, и каждое задание
оценивается в пределах 10 баллов.
Берем среднее и
это оценка за наш курс.
Второе. Второй курс на курсе
могу рекомендовать.
Если вас интересует вот эта
тематика, конкретно
approximation algorithms,
то тогда можно сдавать курс
Claire Mathew.
Я про него тоже говорю.
Телеграм я продублирую.
Я поэтому сейчас не пишу на доске
название этих курсов, все равно все будет.
Курс называется approximation algorithms.
Вы можете погуглить
на курсере.
Вы, кстати, используете
внутренний поиск курсера, чтобы искать курсы.
Правильно говорить погуглить?
Я вот не знаю.
Но он там легко найдется.
Это курс в двух частях.
Чтобы закрыть этим курсом наш курс, надо сдать обе части.
И надо будет мне
сдать
миниусный экзамен, чтобы продемонстрировать,
что вы действительно весь материал
понимаете. В целом, не только там
квизы закрыты друг за другом.
Курс
не сказать, что сильно простой, но у него есть
важный плюс для некоторых
из вас. Он чисто теоретический.
Там нет ни одного задания на кодирование,
насколько мне известно.
Поэтому если вы такой
теоретический гиг,
в хорошем смысле,
то я вам очень советую взять курс
Делу
Клер Матье
из двух частей.
У кого? У Матье?
Можно.
У Гента Инрика тоже, в принципе, можно.
А?
В общий чат курса лучше.
Это совершенно непререкаемое
правило. Чтобы я реально вам ответил,
лучше задавать вопрос в общий чат курса.
Если это не что-то
супер-супер личное,
не дай бог, по семейным
принятистям у вас что-то такое происходит,
вы не можете что-то вовремя сдать.
Это в личку надо писать.
Вообще говоря, все остальное мы пишем в общий чат.
Так.
Вот это для теоретиков.
И на курсере есть еще один курс.
Точнее, да.
Оценка по второму курсу ставится
в общем-то точно так же.
Вы получаете
эту оценку и мы ее
перепроставляем.
Вы не видели курс,
вы не видели этот курс.
Вы только поймите
всю теорию,
тогда мы запоговорим.
Только в обеих частях.
Первая часть, она такая более-менее
еще безобидная, но надо сдать две части.
Я обращаю ваше внимание,
две части надо сдать.
И, наконец,
третья вещь,
это аккаунты, которые
в представлении курсов,
мне все равно очень полезны.
Это спайки, которые называются
Basic Modeling for Discrete Optimization,
Advanced Modeling for Discrete Optimization
и
Scrolling Modeling for Discrete Optimization.
То есть,
это для тех, кто хочет скорее вот сюда
исчерпывать поиск,
причем делать это так, чтобы
за вас, чуть-чуть потише,
чтобы за вас это делали другие программы.
На самом деле,
забавная вещь, существуют программы,
которые называются Slower,
которые за вас могут решать задачи.
Но для того, чтобы эти задачи
программы за вас решили, вы должны
эти задачи хорошо описать.
В компиляторах, в обычном программировании,
у нас есть компиляторы,
и мы пишем программу на серв, допустим,
даем ее компилятору,
и он транслирует ее в компьютер,
какие команды выполнять,
в какой последовательности, чтобы решить задачу.
Нам самим приходится думать,
какие команды в какой последовательности делать.
Есть программирование,
которое называется программирование
в ограничениях, Constraint Programming.
Там мы описываем не то,
что нужно делать, чтобы решать задачу,
а то, что мы вообще считаем
решением им задачи.
И если мы это грамотно, четко
и качественно описали, то некая программа,
специальная, называемая Solver,
может за нас эту задачу довольно неплохо решить.
Часто лучше, чем мы смогли бы ее заходить.
Для того, чтобы понять,
как это делается, я очень советую
сегодня Питера Спаке,
кого-то еще, какого-то другого профессора,
вы не помните, к сожалению,
про вот эти, скорее, телеграммы.
Я с удовольствием бы прочитал
курс, целиком посвященный программированию
в ограничениях, потому что оно мне очень нравится.
Но я этот курс считаю
для англоязычных студентов.
Если кому интересно,
могу вам добавить чак
в телеграмме.
Фото, которое вроде про то,
как закрывать. Нет, слушайте, еще не сказал.
Сказал еще последнее.
В нашем курсе
оценка целиком определяется
шестью или пяти-шестью заданиями,
которые вы по ходу курса получите.
В некоторых из этих заданий
надо будет применить конкретно ивристику.
Прям будет сказано, там, не знаю,
напишите полный перебор,
best first search какой-нибудь задачи
о рюкзаке или еще
что-нибудь.
В некоторых заданиях будет точно
как в курсе Гентенлика.
То есть будет дана более 500
и не будет ничего больше.
Какие хотите ивристики, такие применять.
Что-то было решение.
Ну, как с золушкой, короче,
можно поступить.
Делай, что хочешь, чтобы было чисто.
Но зато
это позволяет вам
никак себя не ограничивать.
Можете статьи, например, какие-то,
что делают многие студенты на самом деле
интересующиеся, ищут статьи
по лучшим алгоритмам
для решения этих задач.
Как-то кодят, совмещают это все.
Очень крутые вещи делают.
Это есть способ
закрыть наш код.
Похоже на Гентенлику.
У Гентенлика тоже оценка по заданиям.
У нас оценка по заданиям.
Ну, конечно, вы можете сдать
либо Гентенлика и защитить свою оценку.
Либо сдать вот
обычные курсы официальным способом.
Но Гентенлик
тоже официальный способ.
Сейчас, ребята, тише, подождите.
Вопрос иначе не слышно.
Да-да-да, это как домашнее задание.
Ну, помимо того...
Сейчас, секундочку.
Помимо того, что мы сдаем вот эти вот шесть заданий...
Тихо-тихо, товарищи.
Я иначе не слышу.
Значит,
помимо того, что мы сдаем шесть заданий,
в конце курса есть теоретический тест.
Теоретический тест.
Но он максимально
стресс-фри такой.
То есть он проходит там три или четыре попытки.
Он начинается до зачета недели еще.
И этот тест не влияет
на оценку.
Просто чтобы оценку проставить, надо этот тест
сдать. На положительный балл.
Все. То есть единственный смысл этого
теста просто чтобы вы
как-то общую какую-то
конгу понимали. Все-таки тоже теоретический
фреймворк, какую-то основную терминологию
курса понимали.
В какой-то момент,
весьма скоро, может быть,
сегодня в телеграм-группе,
внимание, все, если кто еще
не знает,
обязательно получите доступ к
телеграм-каналу. Это прям жизненно
необходимо. Если есть коллеги ваши, которые
сегодня не пришли сюда, обязательно
перешлите им ссылку, добавьте их сами
в эту группу в телеграм.
Главное, чтобы точно никто
не пролетел.
Вот прям будет полка на форму.
В эту форму вы
забьете свои какие-то
стандартные координаты. А кроме того...
Я сам себя не слышу.
У коллег вам коллеги скинут.
Ребята, вы самоорганизуйтесь
как-нибудь, да, и я думаю, что без проблем.
Так вот, друзья,
там же будет...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
Вот, ну в общем, красного какато здания будет очень полезно, чтобы сорганизовать этот курс. Максимально полезно, да.
Ну что-то будет, конечно, общее, но полное, полного соперника. Но многое будет общее, на самом деле.
Все, у нас время подошло, народ, как-то по времени.
